import{S as lkt,i as ikt,s as dkt,e as a,k as l,w as F,t as o,M as ckt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as fkt,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as TXr}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as te}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function mkt(L){let g,v,p,m,_,d,h,Mo,fi,pf,rt,mi,gi,LA,_f,De,We,hi,yn,xA,Ln,xn,$A,pi,$n,kA,_i,uf,Ca;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),fi=a("code"),pf=o("model_type"),rt=o(" attribute is set to the same key you use when registering the config (here "),mi=a("code"),gi=o('"new-model"'),LA=o(")."),_f=l(),De=a("p"),We=o("Likewise, if your "),hi=a("code"),yn=o("NewModel"),xA=o(" is a subclass of "),Ln=a("a"),xn=o("PreTrainedModel"),$A=o(`, make sure its
`),pi=a("code"),$n=o("config_class"),kA=o(` attribute is set to the same class you use when registering the model (here
`),_i=a("code"),uf=o("NewModelConfig"),Ca=o(")."),this.h()},l(Qe){g=n(Qe,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var J$=s(p);m=r(J$,"NewModelConfig"),J$.forEach(t),_=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var ui=s(d);h=r(ui,"PretrainedConfig"),ui.forEach(t),Mo=r(Ae,`, make sure its
`),fi=n(Ae,"CODE",{});var Y$=s(fi);pf=r(Y$,"model_type"),Y$.forEach(t),rt=r(Ae," attribute is set to the same key you use when registering the config (here "),mi=n(Ae,"CODE",{});var K$=s(mi);gi=r(K$,'"new-model"'),K$.forEach(t),LA=r(Ae,")."),Ae.forEach(t),_f=i(Qe),De=n(Qe,"P",{});var Eo=s(De);We=r(Eo,"Likewise, if your "),hi=n(Eo,"CODE",{});var wa=s(hi);yn=r(wa,"NewModel"),wa.forEach(t),xA=r(Eo," is a subclass of "),Ln=n(Eo,"A",{href:!0});var Z$=s(Ln);xn=r(Z$,"PreTrainedModel"),Z$.forEach(t),$A=r(Eo,`, make sure its
`),pi=n(Eo,"CODE",{});var bf=s(pi);$n=r(bf,"config_class"),bf.forEach(t),kA=r(Eo,` attribute is set to the same class you use when registering the model (here
`),_i=n(Eo,"CODE",{});var ek=s(_i);uf=r(ek,"NewModelConfig"),ek.forEach(t),Ca=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(Ln,"href","/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel")},m(Qe,Ae){b(Qe,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,d),e(d,h),e(g,Mo),e(g,fi),e(fi,pf),e(g,rt),e(g,mi),e(mi,gi),e(g,LA),b(Qe,_f,Ae),b(Qe,De,Ae),e(De,We),e(De,hi),e(hi,yn),e(De,xA),e(De,Ln),e(Ln,xn),e(De,$A),e(De,pi),e(pi,$n),e(De,kA),e(De,_i),e(_i,uf),e(De,Ca)},d(Qe){Qe&&t(g),Qe&&t(_f),Qe&&t(De)}}}function gkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pkt(L){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function _kt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ukt(L){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function bkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Fkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Tkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Mkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ekt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ckt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Akt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ykt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Lkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $kt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Skt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Rkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Pkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Bkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ikt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Nkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Dkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Okt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Xkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Wkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Hkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ukt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ykt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Kkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Zkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _St(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ESt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ASt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ySt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $St(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ISt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function USt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dRt(L){let g,v,p,m,_,d,h,Mo,fi,pf,rt,mi,gi,LA,_f,De,We,hi,yn,xA,Ln,xn,$A,pi,$n,kA,_i,uf,Ca,Qe,Ae,J$,ui,Y$,K$,Eo,wa,Z$,bf,ek,xOe,bqe,bi,vf,_oe,SA,$Oe,uoe,kOe,vqe,kn,SOe,boe,ROe,POe,voe,BOe,IOe,Fqe,RA,Tqe,ok,NOe,Mqe,Ff,Eqe,vi,Tf,Foe,PA,qOe,Toe,jOe,Cqe,Co,BA,DOe,IA,GOe,rk,OOe,VOe,XOe,NA,zOe,Moe,WOe,QOe,HOe,Er,qA,UOe,Eoe,JOe,YOe,Fi,KOe,Coe,ZOe,eVe,woe,oVe,rVe,tVe,A,Mf,Aoe,aVe,nVe,tk,sVe,lVe,iVe,Ef,yoe,dVe,cVe,ak,fVe,mVe,gVe,Cf,Loe,hVe,pVe,nk,_Ve,uVe,bVe,wf,xoe,vVe,FVe,sk,TVe,MVe,EVe,Af,$oe,CVe,wVe,lk,AVe,yVe,LVe,yf,koe,xVe,$Ve,ik,kVe,SVe,RVe,Lf,Soe,PVe,BVe,dk,IVe,NVe,qVe,xf,Roe,jVe,DVe,ck,GVe,OVe,VVe,$f,Poe,XVe,zVe,fk,WVe,QVe,HVe,kf,Boe,UVe,JVe,mk,YVe,KVe,ZVe,Sf,Ioe,eXe,oXe,gk,rXe,tXe,aXe,Rf,Noe,nXe,sXe,hk,lXe,iXe,dXe,Pf,qoe,cXe,fXe,pk,mXe,gXe,hXe,Bf,joe,pXe,_Xe,_k,uXe,bXe,vXe,If,Doe,FXe,TXe,uk,MXe,EXe,CXe,Nf,Goe,wXe,AXe,bk,yXe,LXe,xXe,qf,Ooe,$Xe,kXe,vk,SXe,RXe,PXe,jf,Voe,BXe,IXe,Fk,NXe,qXe,jXe,Df,Xoe,DXe,GXe,Tk,OXe,VXe,XXe,Gf,zoe,zXe,WXe,Mk,QXe,HXe,UXe,Of,Woe,JXe,YXe,Ek,KXe,ZXe,eze,Vf,Qoe,oze,rze,Ck,tze,aze,nze,Xf,Hoe,sze,lze,wk,ize,dze,cze,zf,Uoe,fze,mze,Ak,gze,hze,pze,Wf,Joe,_ze,uze,yk,bze,vze,Fze,Qf,Yoe,Tze,Mze,Lk,Eze,Cze,wze,Hf,Koe,Aze,yze,xk,Lze,xze,$ze,Uf,Zoe,kze,Sze,$k,Rze,Pze,Bze,Jf,ere,Ize,Nze,kk,qze,jze,Dze,Yf,ore,Gze,Oze,Sk,Vze,Xze,zze,Kf,rre,Wze,Qze,Rk,Hze,Uze,Jze,Zf,tre,Yze,Kze,Pk,Zze,eWe,oWe,em,are,rWe,tWe,Bk,aWe,nWe,sWe,om,nre,lWe,iWe,Ik,dWe,cWe,fWe,rm,sre,mWe,gWe,Nk,hWe,pWe,_We,tm,lre,uWe,bWe,qk,vWe,FWe,TWe,am,ire,MWe,EWe,jk,CWe,wWe,AWe,nm,dre,yWe,LWe,Dk,xWe,$We,kWe,sm,cre,SWe,RWe,Gk,PWe,BWe,IWe,lm,fre,NWe,qWe,Ok,jWe,DWe,GWe,im,mre,OWe,VWe,Vk,XWe,zWe,WWe,dm,gre,QWe,HWe,Xk,UWe,JWe,YWe,cm,hre,KWe,ZWe,zk,eQe,oQe,rQe,fm,pre,tQe,aQe,Wk,nQe,sQe,lQe,mm,_re,iQe,dQe,Qk,cQe,fQe,mQe,gm,ure,gQe,hQe,Hk,pQe,_Qe,uQe,hm,bre,bQe,vQe,Uk,FQe,TQe,MQe,pm,vre,EQe,CQe,Jk,wQe,AQe,yQe,_m,Fre,LQe,xQe,Yk,$Qe,kQe,SQe,um,Tre,RQe,PQe,Kk,BQe,IQe,NQe,bm,Mre,qQe,jQe,Zk,DQe,GQe,OQe,vm,Ere,VQe,XQe,eS,zQe,WQe,QQe,Fm,Cre,HQe,UQe,oS,JQe,YQe,KQe,Tm,wre,ZQe,eHe,rS,oHe,rHe,tHe,Mm,Are,aHe,nHe,tS,sHe,lHe,iHe,Em,yre,dHe,cHe,aS,fHe,mHe,gHe,Cm,Lre,hHe,pHe,nS,_He,uHe,bHe,wm,xre,vHe,FHe,sS,THe,MHe,EHe,Am,$re,CHe,wHe,lS,AHe,yHe,LHe,ym,kre,xHe,$He,iS,kHe,SHe,RHe,Lm,Sre,PHe,BHe,dS,IHe,NHe,qHe,xm,Rre,jHe,DHe,cS,GHe,OHe,VHe,$m,Pre,XHe,zHe,fS,WHe,QHe,HHe,km,Bre,UHe,JHe,mS,YHe,KHe,ZHe,Sm,Ire,eUe,oUe,gS,rUe,tUe,aUe,Rm,Nre,nUe,sUe,hS,lUe,iUe,dUe,Pm,qre,cUe,fUe,pS,mUe,gUe,hUe,Bm,jre,pUe,_Ue,_S,uUe,bUe,vUe,Im,Dre,FUe,TUe,uS,MUe,EUe,CUe,Nm,Gre,wUe,AUe,bS,yUe,LUe,xUe,qm,Ore,$Ue,kUe,vS,SUe,RUe,PUe,jm,Vre,BUe,IUe,FS,NUe,qUe,jUe,Dm,Xre,DUe,GUe,TS,OUe,VUe,XUe,Gm,zre,zUe,WUe,MS,QUe,HUe,UUe,Om,Wre,JUe,YUe,ES,KUe,ZUe,eJe,Vm,Qre,oJe,rJe,CS,tJe,aJe,nJe,Xm,Hre,sJe,lJe,wS,iJe,dJe,cJe,zm,Ure,fJe,mJe,AS,gJe,hJe,pJe,Wm,Jre,_Je,uJe,yS,bJe,vJe,FJe,Qm,Yre,TJe,MJe,LS,EJe,CJe,wJe,Hm,Kre,AJe,yJe,xS,LJe,xJe,$Je,Um,Zre,kJe,SJe,$S,RJe,PJe,BJe,Jm,ete,IJe,NJe,kS,qJe,jJe,DJe,Ym,ote,GJe,OJe,SS,VJe,XJe,zJe,Km,rte,WJe,QJe,RS,HJe,UJe,JJe,Zm,tte,YJe,KJe,PS,ZJe,eYe,oYe,eg,ate,rYe,tYe,BS,aYe,nYe,sYe,og,nte,lYe,iYe,IS,dYe,cYe,fYe,rg,ste,mYe,gYe,NS,hYe,pYe,_Ye,tg,lte,uYe,bYe,qS,vYe,FYe,TYe,ag,ite,MYe,EYe,jS,CYe,wYe,AYe,ng,dte,yYe,LYe,DS,xYe,$Ye,kYe,sg,cte,SYe,RYe,GS,PYe,BYe,IYe,lg,fte,NYe,qYe,OS,jYe,DYe,GYe,ig,mte,OYe,VYe,VS,XYe,zYe,WYe,dg,gte,QYe,HYe,XS,UYe,JYe,YYe,cg,hte,KYe,ZYe,zS,eKe,oKe,rKe,fg,pte,tKe,aKe,WS,nKe,sKe,lKe,mg,_te,iKe,dKe,QS,cKe,fKe,mKe,gg,ute,gKe,hKe,HS,pKe,_Ke,uKe,hg,bte,bKe,vKe,US,FKe,TKe,MKe,pg,vte,EKe,CKe,JS,wKe,AKe,yKe,_g,Fte,LKe,xKe,YS,$Ke,kKe,SKe,ug,Tte,RKe,PKe,KS,BKe,IKe,NKe,bg,Mte,qKe,jKe,ZS,DKe,GKe,OKe,vg,Ete,VKe,XKe,eR,zKe,WKe,QKe,Fg,Cte,HKe,UKe,oR,JKe,YKe,KKe,Tg,wte,ZKe,eZe,rR,oZe,rZe,tZe,Mg,Ate,aZe,nZe,tR,sZe,lZe,iZe,Eg,dZe,Cg,jA,cZe,yte,fZe,wqe,Ti,wg,Lte,DA,mZe,xte,gZe,Aqe,wo,GA,hZe,OA,pZe,aR,_Ze,uZe,bZe,VA,vZe,$te,FZe,TZe,MZe,Cr,XA,EZe,kte,CZe,wZe,Aa,AZe,Ste,yZe,LZe,Rte,xZe,$Ze,Pte,kZe,SZe,RZe,k,Sn,Bte,PZe,BZe,nR,IZe,NZe,sR,qZe,jZe,DZe,Rn,Ite,GZe,OZe,lR,VZe,XZe,iR,zZe,WZe,QZe,Pn,Nte,HZe,UZe,dR,JZe,YZe,cR,KZe,ZZe,eeo,Ag,qte,oeo,reo,fR,teo,aeo,neo,Bn,jte,seo,leo,mR,ieo,deo,gR,ceo,feo,meo,yg,Dte,geo,heo,hR,peo,_eo,ueo,Lg,Gte,beo,veo,pR,Feo,Teo,Meo,xg,Ote,Eeo,Ceo,_R,weo,Aeo,yeo,In,Vte,Leo,xeo,uR,$eo,keo,bR,Seo,Reo,Peo,Nn,Xte,Beo,Ieo,vR,Neo,qeo,FR,jeo,Deo,Geo,qn,zte,Oeo,Veo,TR,Xeo,zeo,MR,Weo,Qeo,Heo,$g,Wte,Ueo,Jeo,ER,Yeo,Keo,Zeo,kg,Qte,eoo,ooo,CR,roo,too,aoo,jn,Hte,noo,soo,wR,loo,ioo,AR,doo,coo,foo,Sg,Ute,moo,goo,yR,hoo,poo,_oo,Dn,Jte,uoo,boo,LR,voo,Foo,xR,Too,Moo,Eoo,Gn,Yte,Coo,woo,$R,Aoo,yoo,kR,Loo,xoo,$oo,On,Kte,koo,Soo,SR,Roo,Poo,RR,Boo,Ioo,Noo,Rg,Zte,qoo,joo,PR,Doo,Goo,Ooo,Vn,eae,Voo,Xoo,BR,zoo,Woo,IR,Qoo,Hoo,Uoo,Xn,oae,Joo,Yoo,NR,Koo,Zoo,qR,ero,oro,rro,zn,rae,tro,aro,jR,nro,sro,DR,lro,iro,dro,Wn,tae,cro,fro,GR,mro,gro,OR,hro,pro,_ro,Qn,aae,uro,bro,VR,vro,Fro,XR,Tro,Mro,Ero,Hn,nae,Cro,wro,zR,Aro,yro,WR,Lro,xro,$ro,Pg,sae,kro,Sro,QR,Rro,Pro,Bro,Un,lae,Iro,Nro,HR,qro,jro,UR,Dro,Gro,Oro,Bg,iae,Vro,Xro,JR,zro,Wro,Qro,Jn,dae,Hro,Uro,YR,Jro,Yro,KR,Kro,Zro,eto,Yn,cae,oto,rto,ZR,tto,ato,eP,nto,sto,lto,Kn,fae,ito,dto,oP,cto,fto,rP,mto,gto,hto,Ig,mae,pto,_to,tP,uto,bto,vto,Zn,gae,Fto,Tto,aP,Mto,Eto,nP,Cto,wto,Ato,es,hae,yto,Lto,sP,xto,$to,lP,kto,Sto,Rto,Ng,pae,Pto,Bto,iP,Ito,Nto,qto,os,_ae,jto,Dto,dP,Gto,Oto,cP,Vto,Xto,zto,rs,uae,Wto,Qto,fP,Hto,Uto,mP,Jto,Yto,Kto,ts,bae,Zto,eao,gP,oao,rao,hP,tao,aao,nao,as,vae,sao,lao,pP,iao,dao,_P,cao,fao,mao,ns,Fae,gao,hao,uP,pao,_ao,bP,uao,bao,vao,ss,Tae,Fao,Tao,vP,Mao,Eao,FP,Cao,wao,Aao,ls,Mae,yao,Lao,TP,xao,$ao,MP,kao,Sao,Rao,qg,Eae,Pao,Bao,EP,Iao,Nao,qao,is,Cae,jao,Dao,CP,Gao,Oao,wP,Vao,Xao,zao,jg,wae,Wao,Qao,AP,Hao,Uao,Jao,Dg,Aae,Yao,Kao,yP,Zao,eno,ono,ds,yae,rno,tno,LP,ano,nno,xP,sno,lno,ino,cs,Lae,dno,cno,$P,fno,mno,kP,gno,hno,pno,fs,xae,_no,uno,SP,bno,vno,RP,Fno,Tno,Mno,Gg,$ae,Eno,Cno,PP,wno,Ano,yno,ms,kae,Lno,xno,BP,$no,kno,IP,Sno,Rno,Pno,gs,Sae,Bno,Ino,NP,Nno,qno,qP,jno,Dno,Gno,hs,Rae,Ono,Vno,jP,Xno,zno,DP,Wno,Qno,Hno,ps,Pae,Uno,Jno,GP,Yno,Kno,OP,Zno,eso,oso,_s,Bae,rso,tso,VP,aso,nso,XP,sso,lso,iso,Og,Iae,dso,cso,zP,fso,mso,gso,us,Nae,hso,pso,WP,_so,uso,QP,bso,vso,Fso,Vg,qae,Tso,Mso,HP,Eso,Cso,wso,Xg,jae,Aso,yso,UP,Lso,xso,$so,zg,Dae,kso,Sso,JP,Rso,Pso,Bso,Wg,Gae,Iso,Nso,YP,qso,jso,Dso,bs,Oae,Gso,Oso,KP,Vso,Xso,ZP,zso,Wso,Qso,Qg,Vae,Hso,Uso,eB,Jso,Yso,Kso,vs,Xae,Zso,elo,oB,olo,rlo,rB,tlo,alo,nlo,Fs,zae,slo,llo,tB,ilo,dlo,aB,clo,flo,mlo,Ts,Wae,glo,hlo,nB,plo,_lo,sB,ulo,blo,vlo,Ms,Qae,Flo,Tlo,lB,Mlo,Elo,iB,Clo,wlo,Alo,Es,Hae,ylo,Llo,dB,xlo,$lo,cB,klo,Slo,Rlo,Cs,Uae,Plo,Blo,fB,Ilo,Nlo,mB,qlo,jlo,Dlo,Hg,Jae,Glo,Olo,gB,Vlo,Xlo,zlo,Ug,Yae,Wlo,Qlo,hB,Hlo,Ulo,Jlo,ws,Kae,Ylo,Klo,pB,Zlo,eio,_B,oio,rio,tio,As,Zae,aio,nio,uB,sio,lio,bB,iio,dio,cio,ys,ene,fio,mio,vB,gio,hio,FB,pio,_io,uio,Jg,one,bio,vio,TB,Fio,Tio,Mio,Yg,rne,Eio,Cio,MB,wio,Aio,yio,Kg,tne,Lio,xio,EB,$io,kio,Sio,Ls,ane,Rio,Pio,CB,Bio,Iio,wB,Nio,qio,jio,Zg,nne,Dio,Gio,AB,Oio,Vio,Xio,eh,sne,zio,Wio,yB,Qio,Hio,Uio,oh,lne,Jio,Yio,LB,Kio,Zio,edo,xs,ine,odo,rdo,xB,tdo,ado,$B,ndo,sdo,ldo,rh,dne,ido,ddo,kB,cdo,fdo,mdo,th,cne,gdo,hdo,SB,pdo,_do,udo,$s,fne,bdo,vdo,RB,Fdo,Tdo,PB,Mdo,Edo,Cdo,ks,mne,wdo,Ado,BB,ydo,Ldo,IB,xdo,$do,kdo,Ss,gne,Sdo,Rdo,NB,Pdo,Bdo,qB,Ido,Ndo,qdo,Rs,hne,jdo,Ddo,jB,Gdo,Odo,DB,Vdo,Xdo,zdo,ah,Wdo,nh,zA,Qdo,pne,Hdo,yqe,Mi,sh,_ne,WA,Udo,une,Jdo,Lqe,Ao,QA,Ydo,HA,Kdo,GB,Zdo,eco,oco,UA,rco,bne,tco,aco,nco,He,JA,sco,vne,lco,ico,ya,dco,Fne,cco,fco,Tne,mco,gco,Mne,hco,pco,_co,Y,lh,Ene,uco,bco,OB,vco,Fco,Tco,ih,Cne,Mco,Eco,VB,Cco,wco,Aco,dh,wne,yco,Lco,XB,xco,$co,kco,ch,Ane,Sco,Rco,zB,Pco,Bco,Ico,fh,yne,Nco,qco,WB,jco,Dco,Gco,mh,Lne,Oco,Vco,QB,Xco,zco,Wco,gh,xne,Qco,Hco,HB,Uco,Jco,Yco,hh,$ne,Kco,Zco,UB,efo,ofo,rfo,ph,kne,tfo,afo,JB,nfo,sfo,lfo,_h,Sne,ifo,dfo,YB,cfo,ffo,mfo,uh,Rne,gfo,hfo,KB,pfo,_fo,ufo,bh,Pne,bfo,vfo,ZB,Ffo,Tfo,Mfo,vh,Bne,Efo,Cfo,eI,wfo,Afo,yfo,Fh,Ine,Lfo,xfo,oI,$fo,kfo,Sfo,Th,Nne,Rfo,Pfo,rI,Bfo,Ifo,Nfo,Mh,qne,qfo,jfo,tI,Dfo,Gfo,Ofo,Eh,jne,Vfo,Xfo,aI,zfo,Wfo,Qfo,Ch,Dne,Hfo,Ufo,nI,Jfo,Yfo,Kfo,wh,Gne,Zfo,emo,sI,omo,rmo,tmo,Ah,One,amo,nmo,lI,smo,lmo,imo,yh,Vne,dmo,cmo,iI,fmo,mmo,gmo,Lh,Xne,hmo,pmo,dI,_mo,umo,bmo,xh,zne,vmo,Fmo,cI,Tmo,Mmo,Emo,$h,Wne,Cmo,wmo,fI,Amo,ymo,Lmo,kh,Qne,xmo,$mo,mI,kmo,Smo,Rmo,Sh,Hne,Pmo,Bmo,gI,Imo,Nmo,qmo,Rh,Une,jmo,Dmo,hI,Gmo,Omo,Vmo,Ph,Jne,Xmo,zmo,pI,Wmo,Qmo,Hmo,Bh,Yne,Umo,Jmo,_I,Ymo,Kmo,Zmo,Ih,ego,Nh,ogo,qh,YA,rgo,Kne,tgo,xqe,Ei,jh,Zne,KA,ago,ese,ngo,$qe,yo,ZA,sgo,ey,lgo,uI,igo,dgo,cgo,oy,fgo,ose,mgo,ggo,hgo,Ue,ry,pgo,rse,_go,ugo,Ci,bgo,tse,vgo,Fgo,ase,Tgo,Mgo,Ego,he,Dh,nse,Cgo,wgo,bI,Ago,ygo,Lgo,Gh,sse,xgo,$go,lse,kgo,Sgo,Rgo,Oh,ise,Pgo,Bgo,vI,Igo,Ngo,qgo,Vh,dse,jgo,Dgo,FI,Ggo,Ogo,Vgo,Xh,cse,Xgo,zgo,TI,Wgo,Qgo,Hgo,zh,fse,Ugo,Jgo,MI,Ygo,Kgo,Zgo,Wh,mse,eho,oho,EI,rho,tho,aho,Qh,gse,nho,sho,CI,lho,iho,dho,Hh,hse,cho,fho,wI,mho,gho,hho,Uh,pse,pho,_ho,AI,uho,bho,vho,Jh,_se,Fho,Tho,yI,Mho,Eho,Cho,Yh,use,who,Aho,LI,yho,Lho,xho,Kh,bse,$ho,kho,xI,Sho,Rho,Pho,Zh,vse,Bho,Iho,$I,Nho,qho,jho,ep,Fse,Dho,Gho,kI,Oho,Vho,Xho,op,Tse,zho,Who,SI,Qho,Hho,Uho,rp,Mse,Jho,Yho,RI,Kho,Zho,epo,tp,opo,ap,rpo,np,ty,tpo,Ese,apo,kqe,wi,sp,Cse,ay,npo,wse,spo,Sqe,Lo,ny,lpo,Ai,ipo,PI,dpo,cpo,BI,fpo,mpo,gpo,sy,hpo,Ase,ppo,_po,upo,tt,ly,bpo,yse,vpo,Fpo,yi,Tpo,Lse,Mpo,Epo,II,Cpo,wpo,Apo,lp,ypo,Je,iy,Lpo,xse,xpo,$po,La,kpo,$se,Spo,Rpo,kse,Ppo,Bpo,Sse,Ipo,Npo,qpo,x,ip,Rse,jpo,Dpo,NI,Gpo,Opo,Vpo,dp,Pse,Xpo,zpo,qI,Wpo,Qpo,Hpo,cp,Bse,Upo,Jpo,jI,Ypo,Kpo,Zpo,fp,Ise,e_o,o_o,DI,r_o,t_o,a_o,mp,Nse,n_o,s_o,GI,l_o,i_o,d_o,gp,qse,c_o,f_o,OI,m_o,g_o,h_o,hp,jse,p_o,__o,VI,u_o,b_o,v_o,pp,Dse,F_o,T_o,XI,M_o,E_o,C_o,_p,Gse,w_o,A_o,zI,y_o,L_o,x_o,up,Ose,$_o,k_o,WI,S_o,R_o,P_o,bp,Vse,B_o,I_o,QI,N_o,q_o,j_o,vp,Xse,D_o,G_o,HI,O_o,V_o,X_o,Fp,zse,z_o,W_o,UI,Q_o,H_o,U_o,Tp,Wse,J_o,Y_o,JI,K_o,Z_o,euo,Mp,Qse,ouo,ruo,YI,tuo,auo,nuo,Ep,Hse,suo,luo,KI,iuo,duo,cuo,Cp,Use,fuo,muo,ZI,guo,huo,puo,wp,Jse,_uo,uuo,eN,buo,vuo,Fuo,Ap,Yse,Tuo,Muo,oN,Euo,Cuo,wuo,yp,Kse,Auo,yuo,rN,Luo,xuo,$uo,Lp,Zse,kuo,Suo,tN,Ruo,Puo,Buo,xp,ele,Iuo,Nuo,aN,quo,juo,Duo,$p,ole,Guo,Ouo,nN,Vuo,Xuo,zuo,kp,rle,Wuo,Quo,sN,Huo,Uuo,Juo,Sp,tle,Yuo,Kuo,lN,Zuo,e1o,o1o,Rp,ale,r1o,t1o,iN,a1o,n1o,s1o,Pp,nle,l1o,i1o,dN,d1o,c1o,f1o,Bp,sle,m1o,g1o,cN,h1o,p1o,_1o,Ip,lle,u1o,b1o,fN,v1o,F1o,T1o,Np,ile,M1o,E1o,mN,C1o,w1o,A1o,qp,dle,y1o,L1o,gN,x1o,$1o,k1o,jp,cle,S1o,R1o,hN,P1o,B1o,I1o,Ps,fle,N1o,q1o,pN,j1o,D1o,_N,G1o,O1o,V1o,Dp,mle,X1o,z1o,uN,W1o,Q1o,H1o,Gp,gle,U1o,J1o,bN,Y1o,K1o,Z1o,Op,hle,ebo,obo,vN,rbo,tbo,abo,Vp,ple,nbo,sbo,FN,lbo,ibo,dbo,Xp,_le,cbo,fbo,TN,mbo,gbo,hbo,zp,ule,pbo,_bo,MN,ubo,bbo,vbo,Wp,ble,Fbo,Tbo,EN,Mbo,Ebo,Cbo,Qp,vle,wbo,Abo,CN,ybo,Lbo,xbo,Hp,Fle,$bo,kbo,wN,Sbo,Rbo,Pbo,Up,Tle,Bbo,Ibo,AN,Nbo,qbo,jbo,Jp,Mle,Dbo,Gbo,yN,Obo,Vbo,Xbo,Yp,Ele,zbo,Wbo,LN,Qbo,Hbo,Ubo,Kp,Cle,Jbo,Ybo,xN,Kbo,Zbo,e2o,Zp,wle,o2o,r2o,$N,t2o,a2o,n2o,e_,Ale,s2o,l2o,kN,i2o,d2o,c2o,o_,yle,f2o,m2o,SN,g2o,h2o,p2o,r_,Lle,_2o,u2o,RN,b2o,v2o,F2o,t_,xle,T2o,M2o,PN,E2o,C2o,w2o,a_,$le,A2o,y2o,BN,L2o,x2o,$2o,n_,kle,k2o,S2o,IN,R2o,P2o,B2o,s_,Sle,I2o,N2o,NN,q2o,j2o,D2o,l_,Rle,G2o,O2o,qN,V2o,X2o,z2o,i_,Ple,W2o,Q2o,jN,H2o,U2o,J2o,d_,Ble,Y2o,K2o,DN,Z2o,e5o,o5o,c_,Ile,r5o,t5o,GN,a5o,n5o,s5o,f_,Nle,l5o,i5o,ON,d5o,c5o,f5o,m_,qle,m5o,g5o,VN,h5o,p5o,_5o,g_,jle,u5o,b5o,XN,v5o,F5o,T5o,h_,Dle,M5o,E5o,zN,C5o,w5o,A5o,p_,Gle,y5o,L5o,WN,x5o,$5o,k5o,__,Ole,S5o,R5o,QN,P5o,B5o,I5o,u_,Vle,N5o,q5o,HN,j5o,D5o,G5o,b_,Xle,O5o,V5o,UN,X5o,z5o,W5o,v_,zle,Q5o,H5o,JN,U5o,J5o,Y5o,F_,Wle,K5o,Z5o,YN,evo,ovo,rvo,T_,Qle,tvo,avo,KN,nvo,svo,lvo,M_,Hle,ivo,dvo,ZN,cvo,fvo,mvo,E_,Ule,gvo,hvo,eq,pvo,_vo,uvo,C_,Jle,bvo,vvo,oq,Fvo,Tvo,Mvo,w_,Yle,Evo,Cvo,rq,wvo,Avo,yvo,A_,Kle,Lvo,xvo,tq,$vo,kvo,Svo,y_,Zle,Rvo,Pvo,aq,Bvo,Ivo,Nvo,L_,eie,qvo,jvo,nq,Dvo,Gvo,Ovo,x_,oie,Vvo,Xvo,sq,zvo,Wvo,Qvo,$_,rie,Hvo,Uvo,lq,Jvo,Yvo,Kvo,k_,tie,Zvo,eFo,iq,oFo,rFo,tFo,S_,aie,aFo,nFo,dq,sFo,lFo,iFo,R_,nie,dFo,cFo,cq,fFo,mFo,gFo,P_,sie,hFo,pFo,fq,_Fo,uFo,bFo,B_,lie,vFo,FFo,mq,TFo,MFo,EFo,I_,iie,CFo,wFo,gq,AFo,yFo,LFo,N_,die,xFo,$Fo,hq,kFo,SFo,RFo,q_,cie,PFo,BFo,pq,IFo,NFo,qFo,j_,fie,jFo,DFo,_q,GFo,OFo,VFo,D_,mie,XFo,zFo,uq,WFo,QFo,HFo,G_,gie,UFo,JFo,bq,YFo,KFo,ZFo,O_,hie,e0o,o0o,vq,r0o,t0o,a0o,V_,pie,n0o,s0o,Fq,l0o,i0o,d0o,X_,_ie,c0o,f0o,Tq,m0o,g0o,h0o,z_,uie,p0o,_0o,Mq,u0o,b0o,v0o,W_,bie,F0o,T0o,Eq,M0o,E0o,C0o,Q_,vie,w0o,A0o,Cq,y0o,L0o,x0o,H_,Fie,$0o,k0o,wq,S0o,R0o,P0o,U_,Tie,B0o,I0o,Aq,N0o,q0o,j0o,J_,Mie,D0o,G0o,yq,O0o,V0o,X0o,Y_,Eie,z0o,W0o,Lq,Q0o,H0o,U0o,K_,Cie,J0o,Y0o,xq,K0o,Z0o,eTo,Z_,wie,oTo,rTo,$q,tTo,aTo,nTo,eu,Aie,sTo,lTo,kq,iTo,dTo,cTo,ou,fTo,yie,mTo,gTo,Lie,hTo,pTo,ru,Rqe,Li,tu,xie,dy,_To,$ie,uTo,Pqe,xo,cy,bTo,xi,vTo,Sq,FTo,TTo,Rq,MTo,ETo,CTo,fy,wTo,kie,ATo,yTo,LTo,at,my,xTo,Sie,$To,kTo,$i,STo,Rie,RTo,PTo,Pq,BTo,ITo,NTo,au,qTo,Ye,gy,jTo,Pie,DTo,GTo,xa,OTo,Bie,VTo,XTo,Iie,zTo,WTo,Nie,QTo,HTo,UTo,G,nu,qie,JTo,YTo,Bq,KTo,ZTo,e7o,su,jie,o7o,r7o,Iq,t7o,a7o,n7o,lu,Die,s7o,l7o,Nq,i7o,d7o,c7o,iu,Gie,f7o,m7o,qq,g7o,h7o,p7o,du,Oie,_7o,u7o,jq,b7o,v7o,F7o,cu,Vie,T7o,M7o,Dq,E7o,C7o,w7o,fu,Xie,A7o,y7o,Gq,L7o,x7o,$7o,mu,zie,k7o,S7o,Oq,R7o,P7o,B7o,gu,Wie,I7o,N7o,Vq,q7o,j7o,D7o,hu,Qie,G7o,O7o,Xq,V7o,X7o,z7o,pu,Hie,W7o,Q7o,zq,H7o,U7o,J7o,_u,Uie,Y7o,K7o,Wq,Z7o,eMo,oMo,uu,Jie,rMo,tMo,Qq,aMo,nMo,sMo,bu,Yie,lMo,iMo,Hq,dMo,cMo,fMo,vu,Kie,mMo,gMo,Uq,hMo,pMo,_Mo,Fu,Zie,uMo,bMo,Jq,vMo,FMo,TMo,Tu,ede,MMo,EMo,Yq,CMo,wMo,AMo,Mu,ode,yMo,LMo,Kq,xMo,$Mo,kMo,Eu,rde,SMo,RMo,Zq,PMo,BMo,IMo,Cu,tde,NMo,qMo,ej,jMo,DMo,GMo,wu,ade,OMo,VMo,oj,XMo,zMo,WMo,Au,nde,QMo,HMo,rj,UMo,JMo,YMo,yu,sde,KMo,ZMo,tj,e4o,o4o,r4o,Lu,lde,t4o,a4o,aj,n4o,s4o,l4o,xu,ide,i4o,d4o,nj,c4o,f4o,m4o,$u,dde,g4o,h4o,sj,p4o,_4o,u4o,ku,cde,b4o,v4o,lj,F4o,T4o,M4o,Su,fde,E4o,C4o,ij,w4o,A4o,y4o,Ru,mde,L4o,x4o,dj,$4o,k4o,S4o,Pu,gde,R4o,P4o,cj,B4o,I4o,N4o,Bu,hde,q4o,j4o,fj,D4o,G4o,O4o,Iu,pde,V4o,X4o,mj,z4o,W4o,Q4o,Nu,_de,H4o,U4o,gj,J4o,Y4o,K4o,qu,ude,Z4o,eEo,hj,oEo,rEo,tEo,ju,bde,aEo,nEo,pj,sEo,lEo,iEo,Du,vde,dEo,cEo,_j,fEo,mEo,gEo,Gu,Fde,hEo,pEo,uj,_Eo,uEo,bEo,Ou,Tde,vEo,FEo,bj,TEo,MEo,EEo,Vu,Mde,CEo,wEo,vj,AEo,yEo,LEo,Xu,Ede,xEo,$Eo,Fj,kEo,SEo,REo,zu,Cde,PEo,BEo,Tj,IEo,NEo,qEo,Wu,wde,jEo,DEo,Mj,GEo,OEo,VEo,Qu,XEo,Ade,zEo,WEo,yde,QEo,HEo,Hu,Bqe,ki,Uu,Lde,hy,UEo,xde,JEo,Iqe,$o,py,YEo,Si,KEo,Ej,ZEo,eCo,Cj,oCo,rCo,tCo,_y,aCo,$de,nCo,sCo,lCo,nt,uy,iCo,kde,dCo,cCo,Ri,fCo,Sde,mCo,gCo,wj,hCo,pCo,_Co,Ju,uCo,Ke,by,bCo,Rde,vCo,FCo,$a,TCo,Pde,MCo,ECo,Bde,CCo,wCo,Ide,ACo,yCo,LCo,z,Yu,Nde,xCo,$Co,Aj,kCo,SCo,RCo,Ku,qde,PCo,BCo,yj,ICo,NCo,qCo,Zu,jde,jCo,DCo,Lj,GCo,OCo,VCo,e1,Dde,XCo,zCo,xj,WCo,QCo,HCo,o1,Gde,UCo,JCo,$j,YCo,KCo,ZCo,r1,Ode,e3o,o3o,kj,r3o,t3o,a3o,t1,Vde,n3o,s3o,Sj,l3o,i3o,d3o,a1,Xde,c3o,f3o,Rj,m3o,g3o,h3o,n1,zde,p3o,_3o,Pj,u3o,b3o,v3o,s1,Wde,F3o,T3o,Bj,M3o,E3o,C3o,l1,Qde,w3o,A3o,Ij,y3o,L3o,x3o,i1,Hde,$3o,k3o,Nj,S3o,R3o,P3o,d1,Ude,B3o,I3o,qj,N3o,q3o,j3o,c1,Jde,D3o,G3o,jj,O3o,V3o,X3o,f1,Yde,z3o,W3o,Dj,Q3o,H3o,U3o,m1,Kde,J3o,Y3o,Gj,K3o,Z3o,ewo,g1,Zde,owo,rwo,Oj,two,awo,nwo,h1,ece,swo,lwo,Vj,iwo,dwo,cwo,p1,oce,fwo,mwo,Xj,gwo,hwo,pwo,_1,rce,_wo,uwo,zj,bwo,vwo,Fwo,u1,tce,Two,Mwo,Wj,Ewo,Cwo,wwo,b1,ace,Awo,ywo,Qj,Lwo,xwo,$wo,v1,nce,kwo,Swo,Hj,Rwo,Pwo,Bwo,F1,sce,Iwo,Nwo,Uj,qwo,jwo,Dwo,T1,lce,Gwo,Owo,Jj,Vwo,Xwo,zwo,M1,ice,Wwo,Qwo,Yj,Hwo,Uwo,Jwo,E1,dce,Ywo,Kwo,Kj,Zwo,e6o,o6o,C1,cce,r6o,t6o,Zj,a6o,n6o,s6o,w1,fce,l6o,i6o,eD,d6o,c6o,f6o,A1,mce,m6o,g6o,oD,h6o,p6o,_6o,y1,gce,u6o,b6o,rD,v6o,F6o,T6o,L1,hce,M6o,E6o,tD,C6o,w6o,A6o,x1,pce,y6o,L6o,aD,x6o,$6o,k6o,$1,_ce,S6o,R6o,nD,P6o,B6o,I6o,k1,uce,N6o,q6o,sD,j6o,D6o,G6o,S1,bce,O6o,V6o,lD,X6o,z6o,W6o,R1,vce,Q6o,H6o,iD,U6o,J6o,Y6o,P1,K6o,Fce,Z6o,eAo,Tce,oAo,rAo,B1,Nqe,Pi,I1,Mce,vy,tAo,Ece,aAo,qqe,ko,Fy,nAo,Bi,sAo,dD,lAo,iAo,cD,dAo,cAo,fAo,Ty,mAo,Cce,gAo,hAo,pAo,st,My,_Ao,wce,uAo,bAo,Ii,vAo,Ace,FAo,TAo,fD,MAo,EAo,CAo,N1,wAo,Ze,Ey,AAo,yce,yAo,LAo,ka,xAo,Lce,$Ao,kAo,xce,SAo,RAo,$ce,PAo,BAo,IAo,W,q1,kce,NAo,qAo,mD,jAo,DAo,GAo,j1,Sce,OAo,VAo,gD,XAo,zAo,WAo,D1,Rce,QAo,HAo,hD,UAo,JAo,YAo,G1,Pce,KAo,ZAo,pD,eyo,oyo,ryo,O1,Bce,tyo,ayo,_D,nyo,syo,lyo,V1,Ice,iyo,dyo,uD,cyo,fyo,myo,X1,Nce,gyo,hyo,bD,pyo,_yo,uyo,z1,qce,byo,vyo,vD,Fyo,Tyo,Myo,W1,jce,Eyo,Cyo,FD,wyo,Ayo,yyo,Q1,Dce,Lyo,xyo,TD,$yo,kyo,Syo,H1,Gce,Ryo,Pyo,MD,Byo,Iyo,Nyo,U1,Oce,qyo,jyo,ED,Dyo,Gyo,Oyo,J1,Vce,Vyo,Xyo,CD,zyo,Wyo,Qyo,Y1,Xce,Hyo,Uyo,wD,Jyo,Yyo,Kyo,K1,zce,Zyo,eLo,AD,oLo,rLo,tLo,Z1,Wce,aLo,nLo,yD,sLo,lLo,iLo,eb,Qce,dLo,cLo,LD,fLo,mLo,gLo,ob,Hce,hLo,pLo,xD,_Lo,uLo,bLo,rb,Uce,vLo,FLo,$D,TLo,MLo,ELo,tb,Jce,CLo,wLo,kD,ALo,yLo,LLo,ab,Yce,xLo,$Lo,SD,kLo,SLo,RLo,nb,Kce,PLo,BLo,RD,ILo,NLo,qLo,sb,Zce,jLo,DLo,PD,GLo,OLo,VLo,lb,efe,XLo,zLo,BD,WLo,QLo,HLo,ib,ofe,ULo,JLo,ID,YLo,KLo,ZLo,db,rfe,e8o,o8o,ND,r8o,t8o,a8o,cb,tfe,n8o,s8o,qD,l8o,i8o,d8o,fb,afe,c8o,f8o,jD,m8o,g8o,h8o,mb,nfe,p8o,_8o,DD,u8o,b8o,v8o,gb,sfe,F8o,T8o,GD,M8o,E8o,C8o,hb,lfe,w8o,A8o,OD,y8o,L8o,x8o,pb,ife,$8o,k8o,dfe,S8o,R8o,P8o,_b,cfe,B8o,I8o,VD,N8o,q8o,j8o,ub,ffe,D8o,G8o,XD,O8o,V8o,X8o,bb,mfe,z8o,W8o,zD,Q8o,H8o,U8o,vb,gfe,J8o,Y8o,WD,K8o,Z8o,e9o,Fb,o9o,hfe,r9o,t9o,pfe,a9o,n9o,Tb,jqe,Ni,Mb,_fe,Cy,s9o,ufe,l9o,Dqe,So,wy,i9o,qi,d9o,QD,c9o,f9o,HD,m9o,g9o,h9o,Ay,p9o,bfe,_9o,u9o,b9o,lt,yy,v9o,vfe,F9o,T9o,ji,M9o,Ffe,E9o,C9o,UD,w9o,A9o,y9o,Eb,L9o,eo,Ly,x9o,Tfe,$9o,k9o,Sa,S9o,Mfe,R9o,P9o,Efe,B9o,I9o,Cfe,N9o,q9o,j9o,_e,Cb,wfe,D9o,G9o,JD,O9o,V9o,X9o,wb,Afe,z9o,W9o,YD,Q9o,H9o,U9o,Ab,yfe,J9o,Y9o,KD,K9o,Z9o,exo,yb,Lfe,oxo,rxo,ZD,txo,axo,nxo,Lb,xfe,sxo,lxo,eG,ixo,dxo,cxo,xb,$fe,fxo,mxo,oG,gxo,hxo,pxo,$b,kfe,_xo,uxo,rG,bxo,vxo,Fxo,kb,Sfe,Txo,Mxo,tG,Exo,Cxo,wxo,Sb,Rfe,Axo,yxo,aG,Lxo,xxo,$xo,Rb,Pfe,kxo,Sxo,nG,Rxo,Pxo,Bxo,Pb,Bfe,Ixo,Nxo,sG,qxo,jxo,Dxo,Bb,Ife,Gxo,Oxo,lG,Vxo,Xxo,zxo,Ib,Nfe,Wxo,Qxo,iG,Hxo,Uxo,Jxo,Nb,qfe,Yxo,Kxo,dG,Zxo,e$o,o$o,qb,jfe,r$o,t$o,cG,a$o,n$o,s$o,jb,Dfe,l$o,i$o,fG,d$o,c$o,f$o,Db,m$o,Gfe,g$o,h$o,Ofe,p$o,_$o,Gb,Gqe,Di,Ob,Vfe,xy,u$o,Xfe,b$o,Oqe,Ro,$y,v$o,Gi,F$o,mG,T$o,M$o,gG,E$o,C$o,w$o,ky,A$o,zfe,y$o,L$o,x$o,it,Sy,$$o,Wfe,k$o,S$o,Oi,R$o,Qfe,P$o,B$o,hG,I$o,N$o,q$o,Vb,j$o,oo,Ry,D$o,Hfe,G$o,O$o,Ra,V$o,Ufe,X$o,z$o,Jfe,W$o,Q$o,Yfe,H$o,U$o,J$o,N,Xb,Kfe,Y$o,K$o,pG,Z$o,eko,oko,zb,Zfe,rko,tko,_G,ako,nko,sko,Wb,eme,lko,iko,uG,dko,cko,fko,Qb,ome,mko,gko,bG,hko,pko,_ko,Hb,rme,uko,bko,vG,vko,Fko,Tko,Ub,tme,Mko,Eko,FG,Cko,wko,Ako,Jb,ame,yko,Lko,TG,xko,$ko,kko,Yb,nme,Sko,Rko,MG,Pko,Bko,Iko,Kb,sme,Nko,qko,EG,jko,Dko,Gko,Zb,lme,Oko,Vko,CG,Xko,zko,Wko,e2,ime,Qko,Hko,wG,Uko,Jko,Yko,o2,dme,Kko,Zko,AG,eSo,oSo,rSo,r2,cme,tSo,aSo,yG,nSo,sSo,lSo,t2,fme,iSo,dSo,LG,cSo,fSo,mSo,a2,mme,gSo,hSo,xG,pSo,_So,uSo,n2,gme,bSo,vSo,$G,FSo,TSo,MSo,s2,hme,ESo,CSo,kG,wSo,ASo,ySo,l2,pme,LSo,xSo,SG,$So,kSo,SSo,i2,_me,RSo,PSo,RG,BSo,ISo,NSo,d2,ume,qSo,jSo,PG,DSo,GSo,OSo,c2,bme,VSo,XSo,BG,zSo,WSo,QSo,f2,vme,HSo,USo,IG,JSo,YSo,KSo,m2,Fme,ZSo,eRo,NG,oRo,rRo,tRo,g2,Tme,aRo,nRo,qG,sRo,lRo,iRo,h2,Mme,dRo,cRo,jG,fRo,mRo,gRo,p2,Eme,hRo,pRo,DG,_Ro,uRo,bRo,_2,Cme,vRo,FRo,GG,TRo,MRo,ERo,u2,wme,CRo,wRo,OG,ARo,yRo,LRo,b2,Ame,xRo,$Ro,VG,kRo,SRo,RRo,v2,yme,PRo,BRo,XG,IRo,NRo,qRo,F2,Lme,jRo,DRo,zG,GRo,ORo,VRo,T2,xme,XRo,zRo,WG,WRo,QRo,HRo,M2,$me,URo,JRo,QG,YRo,KRo,ZRo,E2,kme,ePo,oPo,HG,rPo,tPo,aPo,C2,Sme,nPo,sPo,UG,lPo,iPo,dPo,w2,Rme,cPo,fPo,JG,mPo,gPo,hPo,A2,Pme,pPo,_Po,YG,uPo,bPo,vPo,y2,Bme,FPo,TPo,KG,MPo,EPo,CPo,L2,Ime,wPo,APo,ZG,yPo,LPo,xPo,x2,Nme,$Po,kPo,eO,SPo,RPo,PPo,$2,qme,BPo,IPo,oO,NPo,qPo,jPo,k2,jme,DPo,GPo,rO,OPo,VPo,XPo,S2,Dme,zPo,WPo,tO,QPo,HPo,UPo,R2,Gme,JPo,YPo,aO,KPo,ZPo,eBo,P2,Ome,oBo,rBo,nO,tBo,aBo,nBo,B2,Vme,sBo,lBo,sO,iBo,dBo,cBo,I2,Xme,fBo,mBo,lO,gBo,hBo,pBo,N2,_Bo,zme,uBo,bBo,Wme,vBo,FBo,q2,Vqe,Vi,j2,Qme,Py,TBo,Hme,MBo,Xqe,Po,By,EBo,Xi,CBo,iO,wBo,ABo,dO,yBo,LBo,xBo,Iy,$Bo,Ume,kBo,SBo,RBo,dt,Ny,PBo,Jme,BBo,IBo,zi,NBo,Yme,qBo,jBo,cO,DBo,GBo,OBo,D2,VBo,ro,qy,XBo,Kme,zBo,WBo,Pa,QBo,Zme,HBo,UBo,ege,JBo,YBo,oge,KBo,ZBo,eIo,K,G2,rge,oIo,rIo,fO,tIo,aIo,nIo,O2,tge,sIo,lIo,mO,iIo,dIo,cIo,V2,age,fIo,mIo,gO,gIo,hIo,pIo,X2,nge,_Io,uIo,hO,bIo,vIo,FIo,z2,sge,TIo,MIo,pO,EIo,CIo,wIo,W2,lge,AIo,yIo,_O,LIo,xIo,$Io,Q2,ige,kIo,SIo,uO,RIo,PIo,BIo,H2,dge,IIo,NIo,bO,qIo,jIo,DIo,U2,cge,GIo,OIo,vO,VIo,XIo,zIo,J2,fge,WIo,QIo,FO,HIo,UIo,JIo,Y2,mge,YIo,KIo,TO,ZIo,eNo,oNo,K2,gge,rNo,tNo,MO,aNo,nNo,sNo,Z2,hge,lNo,iNo,EO,dNo,cNo,fNo,e5,pge,mNo,gNo,CO,hNo,pNo,_No,o5,_ge,uNo,bNo,wO,vNo,FNo,TNo,r5,uge,MNo,ENo,AO,CNo,wNo,ANo,t5,bge,yNo,LNo,yO,xNo,$No,kNo,a5,vge,SNo,RNo,LO,PNo,BNo,INo,n5,Fge,NNo,qNo,xO,jNo,DNo,GNo,s5,Tge,ONo,VNo,$O,XNo,zNo,WNo,l5,Mge,QNo,HNo,kO,UNo,JNo,YNo,i5,Ege,KNo,ZNo,SO,eqo,oqo,rqo,d5,Cge,tqo,aqo,RO,nqo,sqo,lqo,c5,wge,iqo,dqo,PO,cqo,fqo,mqo,f5,Age,gqo,hqo,BO,pqo,_qo,uqo,m5,yge,bqo,vqo,IO,Fqo,Tqo,Mqo,g5,Lge,Eqo,Cqo,NO,wqo,Aqo,yqo,h5,xge,Lqo,xqo,qO,$qo,kqo,Sqo,p5,$ge,Rqo,Pqo,jO,Bqo,Iqo,Nqo,_5,qqo,kge,jqo,Dqo,Sge,Gqo,Oqo,u5,zqe,Wi,b5,Rge,jy,Vqo,Pge,Xqo,Wqe,Bo,Dy,zqo,Qi,Wqo,DO,Qqo,Hqo,GO,Uqo,Jqo,Yqo,Gy,Kqo,Bge,Zqo,ejo,ojo,ct,Oy,rjo,Ige,tjo,ajo,Hi,njo,Nge,sjo,ljo,OO,ijo,djo,cjo,v5,fjo,to,Vy,mjo,qge,gjo,hjo,Ba,pjo,jge,_jo,ujo,Dge,bjo,vjo,Gge,Fjo,Tjo,Mjo,Yr,F5,Oge,Ejo,Cjo,VO,wjo,Ajo,yjo,T5,Vge,Ljo,xjo,XO,$jo,kjo,Sjo,M5,Xge,Rjo,Pjo,zO,Bjo,Ijo,Njo,E5,zge,qjo,jjo,WO,Djo,Gjo,Ojo,C5,Wge,Vjo,Xjo,QO,zjo,Wjo,Qjo,w5,Hjo,Qge,Ujo,Jjo,Hge,Yjo,Kjo,A5,Qqe,Ui,y5,Uge,Xy,Zjo,Jge,eDo,Hqe,Io,zy,oDo,Ji,rDo,HO,tDo,aDo,UO,nDo,sDo,lDo,Wy,iDo,Yge,dDo,cDo,fDo,ft,Qy,mDo,Kge,gDo,hDo,Yi,pDo,Zge,_Do,uDo,JO,bDo,vDo,FDo,L5,TDo,ao,Hy,MDo,ehe,EDo,CDo,Ia,wDo,ohe,ADo,yDo,rhe,LDo,xDo,the,$Do,kDo,SDo,U,x5,ahe,RDo,PDo,YO,BDo,IDo,NDo,$5,nhe,qDo,jDo,KO,DDo,GDo,ODo,k5,she,VDo,XDo,ZO,zDo,WDo,QDo,S5,lhe,HDo,UDo,eV,JDo,YDo,KDo,R5,ihe,ZDo,eGo,oV,oGo,rGo,tGo,P5,dhe,aGo,nGo,rV,sGo,lGo,iGo,B5,che,dGo,cGo,tV,fGo,mGo,gGo,I5,fhe,hGo,pGo,aV,_Go,uGo,bGo,N5,mhe,vGo,FGo,nV,TGo,MGo,EGo,q5,ghe,CGo,wGo,sV,AGo,yGo,LGo,j5,hhe,xGo,$Go,lV,kGo,SGo,RGo,D5,phe,PGo,BGo,iV,IGo,NGo,qGo,G5,_he,jGo,DGo,dV,GGo,OGo,VGo,O5,uhe,XGo,zGo,cV,WGo,QGo,HGo,V5,bhe,UGo,JGo,fV,YGo,KGo,ZGo,X5,vhe,eOo,oOo,mV,rOo,tOo,aOo,z5,Fhe,nOo,sOo,gV,lOo,iOo,dOo,W5,The,cOo,fOo,hV,mOo,gOo,hOo,Q5,Mhe,pOo,_Oo,pV,uOo,bOo,vOo,H5,Ehe,FOo,TOo,_V,MOo,EOo,COo,U5,Che,wOo,AOo,uV,yOo,LOo,xOo,J5,whe,$Oo,kOo,bV,SOo,ROo,POo,Y5,Ahe,BOo,IOo,vV,NOo,qOo,jOo,K5,yhe,DOo,GOo,FV,OOo,VOo,XOo,Z5,Lhe,zOo,WOo,TV,QOo,HOo,UOo,ev,xhe,JOo,YOo,MV,KOo,ZOo,eVo,ov,$he,oVo,rVo,EV,tVo,aVo,nVo,rv,khe,sVo,lVo,CV,iVo,dVo,cVo,tv,She,fVo,mVo,wV,gVo,hVo,pVo,av,Rhe,_Vo,uVo,AV,bVo,vVo,FVo,nv,Phe,TVo,MVo,yV,EVo,CVo,wVo,sv,Bhe,AVo,yVo,LV,LVo,xVo,$Vo,lv,Ihe,kVo,SVo,xV,RVo,PVo,BVo,iv,Nhe,IVo,NVo,$V,qVo,jVo,DVo,dv,GVo,qhe,OVo,VVo,jhe,XVo,zVo,cv,Uqe,Ki,fv,Dhe,Uy,WVo,Ghe,QVo,Jqe,No,Jy,HVo,Zi,UVo,kV,JVo,YVo,SV,KVo,ZVo,eXo,Yy,oXo,Ohe,rXo,tXo,aXo,mt,Ky,nXo,Vhe,sXo,lXo,ed,iXo,Xhe,dXo,cXo,RV,fXo,mXo,gXo,mv,hXo,no,Zy,pXo,zhe,_Xo,uXo,Na,bXo,Whe,vXo,FXo,Qhe,TXo,MXo,Hhe,EXo,CXo,wXo,V,gv,Uhe,AXo,yXo,PV,LXo,xXo,$Xo,hv,Jhe,kXo,SXo,BV,RXo,PXo,BXo,pv,Yhe,IXo,NXo,IV,qXo,jXo,DXo,_v,Khe,GXo,OXo,NV,VXo,XXo,zXo,uv,Zhe,WXo,QXo,qV,HXo,UXo,JXo,bv,epe,YXo,KXo,jV,ZXo,ezo,ozo,vv,ope,rzo,tzo,DV,azo,nzo,szo,Fv,rpe,lzo,izo,GV,dzo,czo,fzo,Tv,tpe,mzo,gzo,OV,hzo,pzo,_zo,Mv,ape,uzo,bzo,VV,vzo,Fzo,Tzo,Ev,npe,Mzo,Ezo,XV,Czo,wzo,Azo,Cv,spe,yzo,Lzo,zV,xzo,$zo,kzo,wv,lpe,Szo,Rzo,WV,Pzo,Bzo,Izo,Av,ipe,Nzo,qzo,QV,jzo,Dzo,Gzo,yv,dpe,Ozo,Vzo,HV,Xzo,zzo,Wzo,Lv,cpe,Qzo,Hzo,UV,Uzo,Jzo,Yzo,xv,fpe,Kzo,Zzo,JV,eWo,oWo,rWo,$v,mpe,tWo,aWo,YV,nWo,sWo,lWo,kv,gpe,iWo,dWo,KV,cWo,fWo,mWo,Sv,hpe,gWo,hWo,ZV,pWo,_Wo,uWo,Rv,ppe,bWo,vWo,eX,FWo,TWo,MWo,Pv,_pe,EWo,CWo,oX,wWo,AWo,yWo,Bv,upe,LWo,xWo,rX,$Wo,kWo,SWo,Iv,bpe,RWo,PWo,tX,BWo,IWo,NWo,Nv,vpe,qWo,jWo,aX,DWo,GWo,OWo,qv,Fpe,VWo,XWo,nX,zWo,WWo,QWo,jv,Tpe,HWo,UWo,sX,JWo,YWo,KWo,Dv,Mpe,ZWo,eQo,lX,oQo,rQo,tQo,Gv,Epe,aQo,nQo,iX,sQo,lQo,iQo,Ov,Cpe,dQo,cQo,dX,fQo,mQo,gQo,Vv,wpe,hQo,pQo,cX,_Qo,uQo,bQo,Xv,Ape,vQo,FQo,fX,TQo,MQo,EQo,zv,ype,CQo,wQo,mX,AQo,yQo,LQo,Wv,Lpe,xQo,$Qo,gX,kQo,SQo,RQo,Qv,xpe,PQo,BQo,hX,IQo,NQo,qQo,Hv,$pe,jQo,DQo,pX,GQo,OQo,VQo,Uv,kpe,XQo,zQo,_X,WQo,QQo,HQo,Jv,Spe,UQo,JQo,uX,YQo,KQo,ZQo,Yv,Rpe,eHo,oHo,bX,rHo,tHo,aHo,Kv,Ppe,nHo,sHo,vX,lHo,iHo,dHo,Zv,cHo,Bpe,fHo,mHo,Ipe,gHo,hHo,eF,Yqe,od,oF,Npe,eL,pHo,qpe,_Ho,Kqe,qo,oL,uHo,rd,bHo,FX,vHo,FHo,TX,THo,MHo,EHo,rL,CHo,jpe,wHo,AHo,yHo,gt,tL,LHo,Dpe,xHo,$Ho,td,kHo,Gpe,SHo,RHo,MX,PHo,BHo,IHo,rF,NHo,so,aL,qHo,Ope,jHo,DHo,qa,GHo,Vpe,OHo,VHo,Xpe,XHo,zHo,zpe,WHo,QHo,HHo,Wpe,tF,Qpe,UHo,JHo,EX,YHo,KHo,ZHo,aF,eUo,Hpe,oUo,rUo,Upe,tUo,aUo,nF,Zqe,ad,sF,Jpe,nL,nUo,Ype,sUo,eje,jo,sL,lUo,nd,iUo,CX,dUo,cUo,wX,fUo,mUo,gUo,lL,hUo,Kpe,pUo,_Uo,uUo,ht,iL,bUo,Zpe,vUo,FUo,sd,TUo,e_e,MUo,EUo,AX,CUo,wUo,AUo,lF,yUo,lo,dL,LUo,o_e,xUo,$Uo,ja,kUo,r_e,SUo,RUo,t_e,PUo,BUo,a_e,IUo,NUo,qUo,Fe,iF,n_e,jUo,DUo,yX,GUo,OUo,VUo,dF,s_e,XUo,zUo,LX,WUo,QUo,HUo,cF,l_e,UUo,JUo,xX,YUo,KUo,ZUo,fF,i_e,eJo,oJo,$X,rJo,tJo,aJo,Bs,d_e,nJo,sJo,kX,lJo,iJo,SX,dJo,cJo,fJo,mF,c_e,mJo,gJo,RX,hJo,pJo,_Jo,pt,f_e,uJo,bJo,PX,vJo,FJo,BX,TJo,MJo,IX,EJo,CJo,wJo,gF,m_e,AJo,yJo,NX,LJo,xJo,$Jo,hF,g_e,kJo,SJo,qX,RJo,PJo,BJo,pF,h_e,IJo,NJo,jX,qJo,jJo,DJo,_F,p_e,GJo,OJo,DX,VJo,XJo,zJo,uF,__e,WJo,QJo,GX,HJo,UJo,JJo,bF,u_e,YJo,KJo,OX,ZJo,eYo,oYo,vF,b_e,rYo,tYo,VX,aYo,nYo,sYo,FF,lYo,v_e,iYo,dYo,F_e,cYo,fYo,TF,oje,ld,MF,T_e,cL,mYo,M_e,gYo,rje,Do,fL,hYo,id,pYo,XX,_Yo,uYo,zX,bYo,vYo,FYo,mL,TYo,E_e,MYo,EYo,CYo,_t,gL,wYo,C_e,AYo,yYo,dd,LYo,w_e,xYo,$Yo,WX,kYo,SYo,RYo,EF,PYo,io,hL,BYo,A_e,IYo,NYo,Da,qYo,y_e,jYo,DYo,L_e,GYo,OYo,x_e,VYo,XYo,zYo,$_e,CF,k_e,WYo,QYo,QX,HYo,UYo,JYo,wF,YYo,S_e,KYo,ZYo,R_e,eKo,oKo,AF,tje,cd,yF,P_e,pL,rKo,B_e,tKo,aje,Go,_L,aKo,fd,nKo,HX,sKo,lKo,UX,iKo,dKo,cKo,uL,fKo,I_e,mKo,gKo,hKo,ut,bL,pKo,N_e,_Ko,uKo,md,bKo,q_e,vKo,FKo,JX,TKo,MKo,EKo,LF,CKo,co,vL,wKo,j_e,AKo,yKo,Ga,LKo,D_e,xKo,$Ko,G_e,kKo,SKo,O_e,RKo,PKo,BKo,Se,xF,V_e,IKo,NKo,YX,qKo,jKo,DKo,$F,X_e,GKo,OKo,KX,VKo,XKo,zKo,kF,z_e,WKo,QKo,ZX,HKo,UKo,JKo,SF,W_e,YKo,KKo,ez,ZKo,eZo,oZo,RF,Q_e,rZo,tZo,oz,aZo,nZo,sZo,PF,H_e,lZo,iZo,rz,dZo,cZo,fZo,BF,U_e,mZo,gZo,tz,hZo,pZo,_Zo,IF,J_e,uZo,bZo,az,vZo,FZo,TZo,NF,Y_e,MZo,EZo,nz,CZo,wZo,AZo,qF,yZo,K_e,LZo,xZo,Z_e,$Zo,kZo,jF,nje,gd,DF,eue,FL,SZo,oue,RZo,sje,Oo,TL,PZo,hd,BZo,sz,IZo,NZo,lz,qZo,jZo,DZo,ML,GZo,rue,OZo,VZo,XZo,bt,EL,zZo,tue,WZo,QZo,pd,HZo,aue,UZo,JZo,iz,YZo,KZo,ZZo,GF,eer,fo,CL,oer,nue,rer,ter,Oa,aer,sue,ner,ser,lue,ler,ier,iue,der,cer,fer,Kr,OF,due,mer,ger,dz,her,per,_er,VF,cue,uer,ber,cz,ver,Fer,Ter,XF,fue,Mer,Eer,fz,Cer,wer,Aer,zF,mue,yer,Ler,mz,xer,$er,ker,WF,gue,Ser,Rer,gz,Per,Ber,Ier,QF,Ner,hue,qer,jer,pue,Der,Ger,HF,lje,_d,UF,_ue,wL,Oer,uue,Ver,ije,Vo,AL,Xer,ud,zer,hz,Wer,Qer,pz,Her,Uer,Jer,yL,Yer,bue,Ker,Zer,eor,vt,LL,oor,vue,ror,tor,bd,aor,Fue,nor,sor,_z,lor,ior,dor,JF,cor,mo,xL,mor,Tue,gor,hor,Va,por,Mue,_or,uor,Eue,bor,vor,Cue,For,Tor,Mor,Re,YF,wue,Eor,Cor,uz,wor,Aor,yor,KF,Aue,Lor,xor,bz,$or,kor,Sor,ZF,yue,Ror,Por,vz,Bor,Ior,Nor,e0,Lue,qor,jor,Fz,Dor,Gor,Oor,o0,xue,Vor,Xor,Tz,zor,Wor,Qor,r0,$ue,Hor,Uor,Mz,Jor,Yor,Kor,t0,kue,Zor,err,Ez,orr,rrr,trr,a0,Sue,arr,nrr,Cz,srr,lrr,irr,n0,Rue,drr,crr,wz,frr,mrr,grr,s0,hrr,Pue,prr,_rr,Bue,urr,brr,l0,dje,vd,i0,Iue,$L,vrr,Nue,Frr,cje,Xo,kL,Trr,Fd,Mrr,Az,Err,Crr,yz,wrr,Arr,yrr,SL,Lrr,que,xrr,$rr,krr,Ft,RL,Srr,jue,Rrr,Prr,Td,Brr,Due,Irr,Nrr,Lz,qrr,jrr,Drr,d0,Grr,go,PL,Orr,Gue,Vrr,Xrr,Xa,zrr,Oue,Wrr,Qrr,Vue,Hrr,Urr,Xue,Jrr,Yrr,Krr,BL,c0,zue,Zrr,etr,xz,otr,rtr,ttr,f0,Wue,atr,ntr,$z,str,ltr,itr,m0,dtr,Que,ctr,ftr,Hue,mtr,gtr,g0,fje,Md,h0,Uue,IL,htr,Jue,ptr,mje,zo,NL,_tr,Ed,utr,kz,btr,vtr,Sz,Ftr,Ttr,Mtr,qL,Etr,Yue,Ctr,wtr,Atr,Tt,jL,ytr,Kue,Ltr,xtr,Cd,$tr,Zue,ktr,Str,Rz,Rtr,Ptr,Btr,p0,Itr,ho,DL,Ntr,e1e,qtr,jtr,za,Dtr,o1e,Gtr,Otr,r1e,Vtr,Xtr,t1e,ztr,Wtr,Qtr,Zr,_0,a1e,Htr,Utr,Pz,Jtr,Ytr,Ktr,u0,n1e,Ztr,ear,Bz,oar,rar,tar,b0,s1e,aar,nar,Iz,sar,lar,iar,v0,l1e,dar,car,Nz,far,mar,gar,F0,i1e,har,par,qz,_ar,uar,bar,T0,Far,d1e,Tar,Mar,c1e,Ear,Car,M0,gje,wd,E0,f1e,GL,war,m1e,Aar,hje,Wo,OL,yar,Ad,Lar,jz,xar,$ar,Dz,kar,Sar,Rar,VL,Par,g1e,Bar,Iar,Nar,Mt,XL,qar,h1e,jar,Dar,yd,Gar,p1e,Oar,Var,Gz,Xar,zar,War,C0,Qar,po,zL,Har,_1e,Uar,Jar,Wa,Yar,u1e,Kar,Zar,b1e,enr,onr,v1e,rnr,tnr,anr,Ld,w0,F1e,nnr,snr,Oz,lnr,inr,dnr,A0,T1e,cnr,fnr,Vz,mnr,gnr,hnr,y0,M1e,pnr,_nr,Xz,unr,bnr,vnr,L0,Fnr,E1e,Tnr,Mnr,C1e,Enr,Cnr,x0,pje,xd,$0,w1e,WL,wnr,A1e,Anr,_je,Qo,QL,ynr,$d,Lnr,zz,xnr,$nr,Wz,knr,Snr,Rnr,HL,Pnr,y1e,Bnr,Inr,Nnr,Et,UL,qnr,L1e,jnr,Dnr,kd,Gnr,x1e,Onr,Vnr,Qz,Xnr,znr,Wnr,k0,Qnr,_o,JL,Hnr,$1e,Unr,Jnr,Qa,Ynr,k1e,Knr,Znr,S1e,esr,osr,R1e,rsr,tsr,asr,YL,S0,P1e,nsr,ssr,Hz,lsr,isr,dsr,R0,B1e,csr,fsr,Uz,msr,gsr,hsr,P0,psr,I1e,_sr,usr,N1e,bsr,vsr,B0,uje,Sd,I0,q1e,KL,Fsr,j1e,Tsr,bje,Ho,ZL,Msr,Rd,Esr,Jz,Csr,wsr,Yz,Asr,ysr,Lsr,e8,xsr,D1e,$sr,ksr,Ssr,Ct,o8,Rsr,G1e,Psr,Bsr,Pd,Isr,O1e,Nsr,qsr,Kz,jsr,Dsr,Gsr,N0,Osr,uo,r8,Vsr,V1e,Xsr,zsr,Ha,Wsr,X1e,Qsr,Hsr,z1e,Usr,Jsr,W1e,Ysr,Ksr,Zsr,Q1e,q0,H1e,elr,olr,Zz,rlr,tlr,alr,j0,nlr,U1e,slr,llr,J1e,ilr,dlr,D0,vje,Bd,G0,Y1e,t8,clr,K1e,flr,Fje,Uo,a8,mlr,Id,glr,eW,hlr,plr,oW,_lr,ulr,blr,n8,vlr,Z1e,Flr,Tlr,Mlr,wt,s8,Elr,ebe,Clr,wlr,Nd,Alr,obe,ylr,Llr,rW,xlr,$lr,klr,O0,Slr,bo,l8,Rlr,rbe,Plr,Blr,Ua,Ilr,tbe,Nlr,qlr,abe,jlr,Dlr,nbe,Glr,Olr,Vlr,Ja,V0,sbe,Xlr,zlr,tW,Wlr,Qlr,Hlr,X0,lbe,Ulr,Jlr,aW,Ylr,Klr,Zlr,z0,ibe,eir,oir,nW,rir,tir,air,W0,dbe,nir,sir,sW,lir,iir,dir,Q0,cir,cbe,fir,mir,fbe,gir,hir,H0,Tje,qd,U0,mbe,i8,pir,gbe,_ir,Mje,Jo,d8,uir,jd,bir,lW,vir,Fir,iW,Tir,Mir,Eir,c8,Cir,hbe,wir,Air,yir,At,f8,Lir,pbe,xir,$ir,Dd,kir,_be,Sir,Rir,dW,Pir,Bir,Iir,J0,Nir,vo,m8,qir,ube,jir,Dir,Ya,Gir,bbe,Oir,Vir,vbe,Xir,zir,Fbe,Wir,Qir,Hir,Tbe,Y0,Mbe,Uir,Jir,cW,Yir,Kir,Zir,K0,edr,Ebe,odr,rdr,Cbe,tdr,adr,Z0,Eje,Gd,eT,wbe,g8,ndr,Abe,sdr,Cje,Yo,h8,ldr,Od,idr,fW,ddr,cdr,mW,fdr,mdr,gdr,p8,hdr,ybe,pdr,_dr,udr,yt,_8,bdr,Lbe,vdr,Fdr,Vd,Tdr,xbe,Mdr,Edr,gW,Cdr,wdr,Adr,oT,ydr,wr,u8,Ldr,$be,xdr,$dr,Ka,kdr,kbe,Sdr,Rdr,Sbe,Pdr,Bdr,Rbe,Idr,Ndr,qdr,q,rT,Pbe,jdr,Ddr,hW,Gdr,Odr,Vdr,tT,Bbe,Xdr,zdr,pW,Wdr,Qdr,Hdr,aT,Ibe,Udr,Jdr,_W,Ydr,Kdr,Zdr,nT,Nbe,ecr,ocr,uW,rcr,tcr,acr,sT,qbe,ncr,scr,bW,lcr,icr,dcr,lT,jbe,ccr,fcr,vW,mcr,gcr,hcr,iT,Dbe,pcr,_cr,FW,ucr,bcr,vcr,dT,Gbe,Fcr,Tcr,TW,Mcr,Ecr,Ccr,cT,Obe,wcr,Acr,MW,ycr,Lcr,xcr,fT,Vbe,$cr,kcr,EW,Scr,Rcr,Pcr,mT,Xbe,Bcr,Icr,CW,Ncr,qcr,jcr,gT,zbe,Dcr,Gcr,wW,Ocr,Vcr,Xcr,hT,Wbe,zcr,Wcr,AW,Qcr,Hcr,Ucr,pT,Qbe,Jcr,Ycr,yW,Kcr,Zcr,efr,_T,Hbe,ofr,rfr,LW,tfr,afr,nfr,uT,Ube,sfr,lfr,xW,ifr,dfr,cfr,bT,Jbe,ffr,mfr,$W,gfr,hfr,pfr,Is,Ybe,_fr,ufr,kW,bfr,vfr,SW,Ffr,Tfr,Mfr,vT,Kbe,Efr,Cfr,RW,wfr,Afr,yfr,FT,Zbe,Lfr,xfr,PW,$fr,kfr,Sfr,TT,e2e,Rfr,Pfr,BW,Bfr,Ifr,Nfr,MT,o2e,qfr,jfr,IW,Dfr,Gfr,Ofr,ET,r2e,Vfr,Xfr,NW,zfr,Wfr,Qfr,CT,t2e,Hfr,Ufr,qW,Jfr,Yfr,Kfr,wT,a2e,Zfr,emr,jW,omr,rmr,tmr,AT,n2e,amr,nmr,DW,smr,lmr,imr,yT,s2e,dmr,cmr,GW,fmr,mmr,gmr,LT,l2e,hmr,pmr,OW,_mr,umr,bmr,xT,i2e,vmr,Fmr,VW,Tmr,Mmr,Emr,$T,d2e,Cmr,wmr,XW,Amr,ymr,Lmr,kT,c2e,xmr,$mr,zW,kmr,Smr,Rmr,ST,f2e,Pmr,Bmr,WW,Imr,Nmr,qmr,RT,m2e,jmr,Dmr,QW,Gmr,Omr,Vmr,PT,g2e,Xmr,zmr,HW,Wmr,Qmr,Hmr,BT,h2e,Umr,Jmr,UW,Ymr,Kmr,Zmr,IT,p2e,egr,ogr,JW,rgr,tgr,agr,NT,_2e,ngr,sgr,YW,lgr,igr,dgr,qT,u2e,cgr,fgr,KW,mgr,ggr,hgr,jT,b2e,pgr,_gr,ZW,ugr,bgr,vgr,DT,v2e,Fgr,Tgr,eQ,Mgr,Egr,Cgr,GT,F2e,wgr,Agr,oQ,ygr,Lgr,xgr,OT,T2e,$gr,kgr,rQ,Sgr,Rgr,Pgr,VT,M2e,Bgr,Igr,tQ,Ngr,qgr,jgr,XT,E2e,Dgr,Ggr,aQ,Ogr,Vgr,Xgr,zT,C2e,zgr,Wgr,nQ,Qgr,Hgr,Ugr,WT,w2e,Jgr,Ygr,sQ,Kgr,Zgr,ehr,QT,A2e,ohr,rhr,lQ,thr,ahr,nhr,HT,wje,Xd,UT,y2e,b8,shr,L2e,lhr,Aje,Ko,v8,ihr,zd,dhr,iQ,chr,fhr,dQ,mhr,ghr,hhr,F8,phr,x2e,_hr,uhr,bhr,Lt,T8,vhr,$2e,Fhr,Thr,Wd,Mhr,k2e,Ehr,Chr,cQ,whr,Ahr,yhr,JT,Lhr,Ar,M8,xhr,S2e,$hr,khr,Za,Shr,R2e,Rhr,Phr,P2e,Bhr,Ihr,B2e,Nhr,qhr,jhr,se,YT,I2e,Dhr,Ghr,fQ,Ohr,Vhr,Xhr,KT,N2e,zhr,Whr,mQ,Qhr,Hhr,Uhr,ZT,q2e,Jhr,Yhr,gQ,Khr,Zhr,epr,e7,j2e,opr,rpr,hQ,tpr,apr,npr,o7,D2e,spr,lpr,pQ,ipr,dpr,cpr,r7,G2e,fpr,mpr,_Q,gpr,hpr,ppr,t7,O2e,_pr,upr,uQ,bpr,vpr,Fpr,a7,V2e,Tpr,Mpr,bQ,Epr,Cpr,wpr,n7,X2e,Apr,ypr,vQ,Lpr,xpr,$pr,s7,z2e,kpr,Spr,FQ,Rpr,Ppr,Bpr,l7,W2e,Ipr,Npr,TQ,qpr,jpr,Dpr,i7,Q2e,Gpr,Opr,MQ,Vpr,Xpr,zpr,d7,H2e,Wpr,Qpr,EQ,Hpr,Upr,Jpr,c7,U2e,Ypr,Kpr,CQ,Zpr,e_r,o_r,f7,J2e,r_r,t_r,wQ,a_r,n_r,s_r,m7,Y2e,l_r,i_r,AQ,d_r,c_r,f_r,g7,K2e,m_r,g_r,yQ,h_r,p_r,__r,h7,Z2e,u_r,b_r,LQ,v_r,F_r,T_r,p7,e5e,M_r,E_r,xQ,C_r,w_r,A_r,_7,o5e,y_r,L_r,$Q,x_r,$_r,k_r,u7,r5e,S_r,R_r,kQ,P_r,B_r,I_r,b7,t5e,N_r,q_r,SQ,j_r,D_r,G_r,v7,a5e,O_r,V_r,RQ,X_r,z_r,W_r,F7,yje,Qd,T7,n5e,E8,Q_r,s5e,H_r,Lje,Zo,C8,U_r,Hd,J_r,PQ,Y_r,K_r,BQ,Z_r,eur,our,w8,rur,l5e,tur,aur,nur,xt,A8,sur,i5e,lur,iur,Ud,dur,d5e,cur,fur,IQ,mur,gur,hur,M7,pur,yr,y8,_ur,c5e,uur,bur,en,vur,f5e,Fur,Tur,m5e,Mur,Eur,g5e,Cur,wur,Aur,Te,E7,h5e,yur,Lur,NQ,xur,$ur,kur,C7,p5e,Sur,Rur,qQ,Pur,Bur,Iur,w7,_5e,Nur,qur,jQ,jur,Dur,Gur,A7,u5e,Our,Vur,DQ,Xur,zur,Wur,y7,b5e,Qur,Hur,GQ,Uur,Jur,Yur,L7,v5e,Kur,Zur,OQ,e1r,o1r,r1r,x7,F5e,t1r,a1r,VQ,n1r,s1r,l1r,$7,T5e,i1r,d1r,XQ,c1r,f1r,m1r,k7,M5e,g1r,h1r,zQ,p1r,_1r,u1r,S7,E5e,b1r,v1r,WQ,F1r,T1r,M1r,R7,C5e,E1r,C1r,QQ,w1r,A1r,y1r,P7,w5e,L1r,x1r,HQ,$1r,k1r,S1r,B7,A5e,R1r,P1r,UQ,B1r,I1r,N1r,I7,xje,Jd,N7,y5e,L8,q1r,L5e,j1r,$je,er,x8,D1r,Yd,G1r,JQ,O1r,V1r,YQ,X1r,z1r,W1r,$8,Q1r,x5e,H1r,U1r,J1r,$t,k8,Y1r,$5e,K1r,Z1r,Kd,ebr,k5e,obr,rbr,KQ,tbr,abr,nbr,q7,sbr,Lr,S8,lbr,S5e,ibr,dbr,on,cbr,R5e,fbr,mbr,P5e,gbr,hbr,B5e,pbr,_br,ubr,rn,j7,I5e,bbr,vbr,ZQ,Fbr,Tbr,Mbr,D7,N5e,Ebr,Cbr,eH,wbr,Abr,ybr,G7,q5e,Lbr,xbr,oH,$br,kbr,Sbr,O7,j5e,Rbr,Pbr,rH,Bbr,Ibr,Nbr,V7,kje,Zd,X7,D5e,R8,qbr,G5e,jbr,Sje,or,P8,Dbr,ec,Gbr,tH,Obr,Vbr,aH,Xbr,zbr,Wbr,B8,Qbr,O5e,Hbr,Ubr,Jbr,kt,I8,Ybr,V5e,Kbr,Zbr,oc,e2r,X5e,o2r,r2r,nH,t2r,a2r,n2r,z7,s2r,xr,N8,l2r,z5e,i2r,d2r,tn,c2r,W5e,f2r,m2r,Q5e,g2r,h2r,H5e,p2r,_2r,u2r,ie,W7,U5e,b2r,v2r,sH,F2r,T2r,M2r,Q7,J5e,E2r,C2r,lH,w2r,A2r,y2r,H7,Y5e,L2r,x2r,iH,$2r,k2r,S2r,U7,K5e,R2r,P2r,dH,B2r,I2r,N2r,J7,Z5e,q2r,j2r,cH,D2r,G2r,O2r,Y7,eve,V2r,X2r,fH,z2r,W2r,Q2r,K7,ove,H2r,U2r,mH,J2r,Y2r,K2r,Z7,rve,Z2r,e5r,gH,o5r,r5r,t5r,eM,tve,a5r,n5r,hH,s5r,l5r,i5r,oM,ave,d5r,c5r,pH,f5r,m5r,g5r,rM,nve,h5r,p5r,_H,_5r,u5r,b5r,tM,sve,v5r,F5r,uH,T5r,M5r,E5r,aM,lve,C5r,w5r,bH,A5r,y5r,L5r,nM,ive,x5r,$5r,vH,k5r,S5r,R5r,sM,dve,P5r,B5r,FH,I5r,N5r,q5r,lM,cve,j5r,D5r,TH,G5r,O5r,V5r,iM,fve,X5r,z5r,MH,W5r,Q5r,H5r,dM,mve,U5r,J5r,EH,Y5r,K5r,Z5r,cM,gve,evr,ovr,CH,rvr,tvr,avr,fM,hve,nvr,svr,wH,lvr,ivr,dvr,mM,Rje,rc,gM,pve,q8,cvr,_ve,fvr,Pje,rr,j8,mvr,tc,gvr,AH,hvr,pvr,yH,_vr,uvr,bvr,D8,vvr,uve,Fvr,Tvr,Mvr,St,G8,Evr,bve,Cvr,wvr,ac,Avr,vve,yvr,Lvr,LH,xvr,$vr,kvr,hM,Svr,$r,O8,Rvr,Fve,Pvr,Bvr,an,Ivr,Tve,Nvr,qvr,Mve,jvr,Dvr,Eve,Gvr,Ovr,Vvr,ye,pM,Cve,Xvr,zvr,xH,Wvr,Qvr,Hvr,_M,wve,Uvr,Jvr,$H,Yvr,Kvr,Zvr,uM,Ave,eFr,oFr,kH,rFr,tFr,aFr,bM,yve,nFr,sFr,SH,lFr,iFr,dFr,vM,Lve,cFr,fFr,RH,mFr,gFr,hFr,FM,xve,pFr,_Fr,PH,uFr,bFr,vFr,TM,$ve,FFr,TFr,BH,MFr,EFr,CFr,MM,kve,wFr,AFr,IH,yFr,LFr,xFr,EM,Sve,$Fr,kFr,NH,SFr,RFr,PFr,CM,Rve,BFr,IFr,qH,NFr,qFr,jFr,wM,Bje,nc,AM,Pve,V8,DFr,Bve,GFr,Ije,tr,X8,OFr,sc,VFr,jH,XFr,zFr,DH,WFr,QFr,HFr,z8,UFr,Ive,JFr,YFr,KFr,Rt,W8,ZFr,Nve,e0r,o0r,lc,r0r,qve,t0r,a0r,GH,n0r,s0r,l0r,yM,i0r,kr,Q8,d0r,jve,c0r,f0r,nn,m0r,Dve,g0r,h0r,Gve,p0r,_0r,Ove,u0r,b0r,v0r,oe,LM,Vve,F0r,T0r,OH,M0r,E0r,C0r,xM,Xve,w0r,A0r,VH,y0r,L0r,x0r,$M,zve,$0r,k0r,XH,S0r,R0r,P0r,kM,Wve,B0r,I0r,zH,N0r,q0r,j0r,SM,Qve,D0r,G0r,WH,O0r,V0r,X0r,RM,Hve,z0r,W0r,QH,Q0r,H0r,U0r,PM,Uve,J0r,Y0r,HH,K0r,Z0r,eTr,BM,Jve,oTr,rTr,UH,tTr,aTr,nTr,IM,Yve,sTr,lTr,JH,iTr,dTr,cTr,NM,Kve,fTr,mTr,YH,gTr,hTr,pTr,qM,Zve,_Tr,uTr,KH,bTr,vTr,FTr,jM,eFe,TTr,MTr,ZH,ETr,CTr,wTr,DM,oFe,ATr,yTr,eU,LTr,xTr,$Tr,GM,rFe,kTr,STr,oU,RTr,PTr,BTr,OM,tFe,ITr,NTr,rU,qTr,jTr,DTr,VM,aFe,GTr,OTr,tU,VTr,XTr,zTr,XM,nFe,WTr,QTr,aU,HTr,UTr,JTr,zM,sFe,YTr,KTr,nU,ZTr,e7r,o7r,WM,lFe,r7r,t7r,sU,a7r,n7r,s7r,QM,iFe,l7r,i7r,lU,d7r,c7r,f7r,HM,dFe,m7r,g7r,iU,h7r,p7r,_7r,UM,cFe,u7r,b7r,dU,v7r,F7r,T7r,JM,fFe,M7r,E7r,cU,C7r,w7r,A7r,YM,mFe,y7r,L7r,fU,x7r,$7r,k7r,KM,gFe,S7r,R7r,mU,P7r,B7r,I7r,ZM,hFe,N7r,q7r,gU,j7r,D7r,G7r,e4,Nje,ic,o4,pFe,H8,O7r,_Fe,V7r,qje,ar,U8,X7r,dc,z7r,hU,W7r,Q7r,pU,H7r,U7r,J7r,J8,Y7r,uFe,K7r,Z7r,eMr,Pt,Y8,oMr,bFe,rMr,tMr,cc,aMr,vFe,nMr,sMr,_U,lMr,iMr,dMr,r4,cMr,Sr,K8,fMr,FFe,mMr,gMr,sn,hMr,TFe,pMr,_Mr,MFe,uMr,bMr,EFe,vMr,FMr,TMr,pe,t4,CFe,MMr,EMr,uU,CMr,wMr,AMr,a4,wFe,yMr,LMr,bU,xMr,$Mr,kMr,n4,AFe,SMr,RMr,vU,PMr,BMr,IMr,s4,yFe,NMr,qMr,FU,jMr,DMr,GMr,l4,LFe,OMr,VMr,TU,XMr,zMr,WMr,i4,xFe,QMr,HMr,MU,UMr,JMr,YMr,d4,$Fe,KMr,ZMr,EU,e4r,o4r,r4r,c4,kFe,t4r,a4r,CU,n4r,s4r,l4r,f4,SFe,i4r,d4r,wU,c4r,f4r,m4r,m4,RFe,g4r,h4r,AU,p4r,_4r,u4r,g4,PFe,b4r,v4r,yU,F4r,T4r,M4r,h4,BFe,E4r,C4r,LU,w4r,A4r,y4r,p4,IFe,L4r,x4r,xU,$4r,k4r,S4r,_4,NFe,R4r,P4r,$U,B4r,I4r,N4r,u4,qFe,q4r,j4r,kU,D4r,G4r,O4r,b4,jFe,V4r,X4r,SU,z4r,W4r,Q4r,v4,DFe,H4r,U4r,RU,J4r,Y4r,K4r,F4,jje,fc,T4,GFe,Z8,Z4r,OFe,eEr,Dje,nr,e9,oEr,mc,rEr,PU,tEr,aEr,BU,nEr,sEr,lEr,o9,iEr,VFe,dEr,cEr,fEr,Bt,r9,mEr,XFe,gEr,hEr,gc,pEr,zFe,_Er,uEr,IU,bEr,vEr,FEr,M4,TEr,Rr,t9,MEr,WFe,EEr,CEr,ln,wEr,QFe,AEr,yEr,HFe,LEr,xEr,UFe,$Er,kEr,SEr,a9,E4,JFe,REr,PEr,NU,BEr,IEr,NEr,C4,YFe,qEr,jEr,qU,DEr,GEr,OEr,w4,Gje,hc,A4,KFe,n9,VEr,ZFe,XEr,Oje,sr,s9,zEr,pc,WEr,jU,QEr,HEr,DU,UEr,JEr,YEr,l9,KEr,e0e,ZEr,eCr,oCr,It,i9,rCr,o0e,tCr,aCr,_c,nCr,r0e,sCr,lCr,GU,iCr,dCr,cCr,y4,fCr,Pr,d9,mCr,t0e,gCr,hCr,dn,pCr,a0e,_Cr,uCr,n0e,bCr,vCr,s0e,FCr,TCr,MCr,l0e,L4,i0e,ECr,CCr,OU,wCr,ACr,yCr,x4,Vje,uc,$4,d0e,c9,LCr,c0e,xCr,Xje,lr,f9,$Cr,bc,kCr,VU,SCr,RCr,XU,PCr,BCr,ICr,m9,NCr,f0e,qCr,jCr,DCr,Nt,g9,GCr,m0e,OCr,VCr,vc,XCr,g0e,zCr,WCr,zU,QCr,HCr,UCr,k4,JCr,Br,h9,YCr,h0e,KCr,ZCr,cn,e3r,p0e,o3r,r3r,_0e,t3r,a3r,u0e,n3r,s3r,l3r,de,S4,b0e,i3r,d3r,WU,c3r,f3r,m3r,R4,v0e,g3r,h3r,QU,p3r,_3r,u3r,P4,F0e,b3r,v3r,HU,F3r,T3r,M3r,B4,T0e,E3r,C3r,UU,w3r,A3r,y3r,I4,M0e,L3r,x3r,JU,$3r,k3r,S3r,N4,E0e,R3r,P3r,YU,B3r,I3r,N3r,q4,C0e,q3r,j3r,KU,D3r,G3r,O3r,j4,w0e,V3r,X3r,ZU,z3r,W3r,Q3r,D4,A0e,H3r,U3r,eJ,J3r,Y3r,K3r,G4,y0e,Z3r,ewr,oJ,owr,rwr,twr,O4,L0e,awr,nwr,rJ,swr,lwr,iwr,V4,x0e,dwr,cwr,tJ,fwr,mwr,gwr,X4,$0e,hwr,pwr,aJ,_wr,uwr,bwr,z4,k0e,vwr,Fwr,nJ,Twr,Mwr,Ewr,W4,S0e,Cwr,wwr,sJ,Awr,ywr,Lwr,Q4,R0e,xwr,$wr,lJ,kwr,Swr,Rwr,H4,P0e,Pwr,Bwr,iJ,Iwr,Nwr,qwr,U4,B0e,jwr,Dwr,dJ,Gwr,Owr,Vwr,J4,I0e,Xwr,zwr,cJ,Wwr,Qwr,Hwr,Y4,N0e,Uwr,Jwr,fJ,Ywr,Kwr,Zwr,K4,zje,Fc,Z4,q0e,p9,e6r,j0e,o6r,Wje,ir,_9,r6r,Tc,t6r,mJ,a6r,n6r,gJ,s6r,l6r,i6r,u9,d6r,D0e,c6r,f6r,m6r,qt,b9,g6r,G0e,h6r,p6r,Mc,_6r,O0e,u6r,b6r,hJ,v6r,F6r,T6r,eE,M6r,Ir,v9,E6r,V0e,C6r,w6r,fn,A6r,X0e,y6r,L6r,z0e,x6r,$6r,W0e,k6r,S6r,R6r,ce,oE,Q0e,P6r,B6r,pJ,I6r,N6r,q6r,rE,H0e,j6r,D6r,_J,G6r,O6r,V6r,tE,U0e,X6r,z6r,uJ,W6r,Q6r,H6r,aE,J0e,U6r,J6r,bJ,Y6r,K6r,Z6r,nE,Y0e,eAr,oAr,vJ,rAr,tAr,aAr,sE,K0e,nAr,sAr,FJ,lAr,iAr,dAr,lE,Z0e,cAr,fAr,TJ,mAr,gAr,hAr,iE,eTe,pAr,_Ar,MJ,uAr,bAr,vAr,dE,oTe,FAr,TAr,EJ,MAr,EAr,CAr,cE,rTe,wAr,AAr,CJ,yAr,LAr,xAr,fE,tTe,$Ar,kAr,wJ,SAr,RAr,PAr,mE,aTe,BAr,IAr,AJ,NAr,qAr,jAr,gE,nTe,DAr,GAr,yJ,OAr,VAr,XAr,hE,sTe,zAr,WAr,LJ,QAr,HAr,UAr,pE,lTe,JAr,YAr,xJ,KAr,ZAr,eyr,_E,iTe,oyr,ryr,$J,tyr,ayr,nyr,uE,dTe,syr,lyr,kJ,iyr,dyr,cyr,bE,cTe,fyr,myr,SJ,gyr,hyr,pyr,vE,fTe,_yr,uyr,RJ,byr,vyr,Fyr,FE,mTe,Tyr,Myr,PJ,Eyr,Cyr,wyr,TE,Qje,Ec,ME,gTe,F9,Ayr,hTe,yyr,Hje,dr,T9,Lyr,Cc,xyr,BJ,$yr,kyr,IJ,Syr,Ryr,Pyr,M9,Byr,pTe,Iyr,Nyr,qyr,jt,E9,jyr,_Te,Dyr,Gyr,wc,Oyr,uTe,Vyr,Xyr,NJ,zyr,Wyr,Qyr,EE,Hyr,Nr,C9,Uyr,bTe,Jyr,Yyr,mn,Kyr,vTe,Zyr,eLr,FTe,oLr,rLr,TTe,tLr,aLr,nLr,MTe,CE,ETe,sLr,lLr,qJ,iLr,dLr,cLr,wE,Uje,Ac,AE,CTe,w9,fLr,wTe,mLr,Jje,cr,A9,gLr,yc,hLr,jJ,pLr,_Lr,DJ,uLr,bLr,vLr,y9,FLr,ATe,TLr,MLr,ELr,Dt,L9,CLr,yTe,wLr,ALr,Lc,yLr,LTe,LLr,xLr,GJ,$Lr,kLr,SLr,yE,RLr,qr,x9,PLr,xTe,BLr,ILr,gn,NLr,$Te,qLr,jLr,kTe,DLr,GLr,STe,OLr,VLr,XLr,RTe,LE,PTe,zLr,WLr,OJ,QLr,HLr,ULr,xE,Yje,xc,$E,BTe,$9,JLr,ITe,YLr,Kje,fr,k9,KLr,$c,ZLr,VJ,e8r,o8r,XJ,r8r,t8r,a8r,S9,n8r,NTe,s8r,l8r,i8r,Gt,R9,d8r,qTe,c8r,f8r,kc,m8r,jTe,g8r,h8r,zJ,p8r,_8r,u8r,kE,b8r,jr,P9,v8r,DTe,F8r,T8r,hn,M8r,GTe,E8r,C8r,OTe,w8r,A8r,VTe,y8r,L8r,x8r,re,SE,XTe,$8r,k8r,WJ,S8r,R8r,P8r,RE,zTe,B8r,I8r,QJ,N8r,q8r,j8r,PE,WTe,D8r,G8r,HJ,O8r,V8r,X8r,BE,QTe,z8r,W8r,UJ,Q8r,H8r,U8r,IE,HTe,J8r,Y8r,JJ,K8r,Z8r,e9r,NE,UTe,o9r,r9r,YJ,t9r,a9r,n9r,qE,JTe,s9r,l9r,KJ,i9r,d9r,c9r,jE,YTe,f9r,m9r,ZJ,g9r,h9r,p9r,DE,KTe,_9r,u9r,eY,b9r,v9r,F9r,GE,ZTe,T9r,M9r,oY,E9r,C9r,w9r,OE,e7e,A9r,y9r,rY,L9r,x9r,$9r,VE,o7e,k9r,S9r,tY,R9r,P9r,B9r,XE,r7e,I9r,N9r,aY,q9r,j9r,D9r,zE,t7e,G9r,O9r,nY,V9r,X9r,z9r,WE,a7e,W9r,Q9r,sY,H9r,U9r,J9r,QE,n7e,Y9r,K9r,lY,Z9r,exr,oxr,HE,s7e,rxr,txr,iY,axr,nxr,sxr,UE,l7e,lxr,ixr,dY,dxr,cxr,fxr,JE,i7e,mxr,gxr,cY,hxr,pxr,_xr,YE,d7e,uxr,bxr,fY,vxr,Fxr,Txr,KE,c7e,Mxr,Exr,mY,Cxr,wxr,Axr,ZE,f7e,yxr,Lxr,gY,xxr,$xr,kxr,eC,m7e,Sxr,Rxr,hY,Pxr,Bxr,Ixr,oC,g7e,Nxr,qxr,pY,jxr,Dxr,Gxr,rC,h7e,Oxr,Vxr,_Y,Xxr,zxr,Wxr,tC,p7e,Qxr,Hxr,uY,Uxr,Jxr,Yxr,aC,Zje,Sc,nC,_7e,B9,Kxr,u7e,Zxr,eDe,mr,I9,e$r,Rc,o$r,bY,r$r,t$r,vY,a$r,n$r,s$r,N9,l$r,b7e,i$r,d$r,c$r,Ot,q9,f$r,v7e,m$r,g$r,Pc,h$r,F7e,p$r,_$r,FY,u$r,b$r,v$r,sC,F$r,Dr,j9,T$r,T7e,M$r,E$r,pn,C$r,M7e,w$r,A$r,E7e,y$r,L$r,C7e,x$r,$$r,k$r,Le,lC,w7e,S$r,R$r,TY,P$r,B$r,I$r,iC,A7e,N$r,q$r,MY,j$r,D$r,G$r,dC,y7e,O$r,V$r,EY,X$r,z$r,W$r,cC,L7e,Q$r,H$r,CY,U$r,J$r,Y$r,fC,x7e,K$r,Z$r,wY,ekr,okr,rkr,mC,$7e,tkr,akr,AY,nkr,skr,lkr,gC,k7e,ikr,dkr,yY,ckr,fkr,mkr,hC,S7e,gkr,hkr,LY,pkr,_kr,ukr,pC,R7e,bkr,vkr,xY,Fkr,Tkr,Mkr,_C,P7e,Ekr,Ckr,$Y,wkr,Akr,ykr,uC,oDe,Bc,bC,B7e,D9,Lkr,I7e,xkr,rDe,gr,G9,$kr,Ic,kkr,kY,Skr,Rkr,SY,Pkr,Bkr,Ikr,O9,Nkr,N7e,qkr,jkr,Dkr,Vt,V9,Gkr,q7e,Okr,Vkr,Nc,Xkr,j7e,zkr,Wkr,RY,Qkr,Hkr,Ukr,vC,Jkr,Gr,X9,Ykr,D7e,Kkr,Zkr,_n,eSr,G7e,oSr,rSr,O7e,tSr,aSr,V7e,nSr,sSr,lSr,Ee,FC,X7e,iSr,dSr,PY,cSr,fSr,mSr,TC,z7e,gSr,hSr,BY,pSr,_Sr,uSr,MC,W7e,bSr,vSr,IY,FSr,TSr,MSr,EC,Q7e,ESr,CSr,NY,wSr,ASr,ySr,CC,H7e,LSr,xSr,qY,$Sr,kSr,SSr,wC,U7e,RSr,PSr,jY,BSr,ISr,NSr,AC,J7e,qSr,jSr,DY,DSr,GSr,OSr,yC,Y7e,VSr,XSr,GY,zSr,WSr,QSr,LC,K7e,HSr,USr,OY,JSr,YSr,KSr,xC,Z7e,ZSr,eRr,VY,oRr,rRr,tRr,$C,eMe,aRr,nRr,XY,sRr,lRr,iRr,kC,oMe,dRr,cRr,zY,fRr,mRr,gRr,SC,tDe,qc,RC,rMe,z9,hRr,tMe,pRr,aDe,hr,W9,_Rr,jc,uRr,WY,bRr,vRr,QY,FRr,TRr,MRr,Q9,ERr,aMe,CRr,wRr,ARr,Xt,H9,yRr,nMe,LRr,xRr,Dc,$Rr,sMe,kRr,SRr,HY,RRr,PRr,BRr,PC,IRr,Or,U9,NRr,lMe,qRr,jRr,un,DRr,iMe,GRr,ORr,dMe,VRr,XRr,cMe,zRr,WRr,QRr,xe,BC,fMe,HRr,URr,UY,JRr,YRr,KRr,IC,mMe,ZRr,ePr,JY,oPr,rPr,tPr,NC,gMe,aPr,nPr,YY,sPr,lPr,iPr,qC,hMe,dPr,cPr,KY,fPr,mPr,gPr,jC,pMe,hPr,pPr,ZY,_Pr,uPr,bPr,DC,_Me,vPr,FPr,eK,TPr,MPr,EPr,GC,uMe,CPr,wPr,oK,APr,yPr,LPr,OC,bMe,xPr,$Pr,rK,kPr,SPr,RPr,VC,vMe,PPr,BPr,tK,IPr,NPr,qPr,XC,FMe,jPr,DPr,aK,GPr,OPr,VPr,zC,nDe,Gc,WC,TMe,J9,XPr,MMe,zPr,sDe,pr,Y9,WPr,Oc,QPr,nK,HPr,UPr,sK,JPr,YPr,KPr,K9,ZPr,EMe,eBr,oBr,rBr,zt,Z9,tBr,CMe,aBr,nBr,Vc,sBr,wMe,lBr,iBr,lK,dBr,cBr,fBr,QC,mBr,Vr,ex,gBr,AMe,hBr,pBr,bn,_Br,yMe,uBr,bBr,LMe,vBr,FBr,xMe,TBr,MBr,EBr,Pe,HC,$Me,CBr,wBr,iK,ABr,yBr,LBr,UC,kMe,xBr,$Br,dK,kBr,SBr,RBr,JC,SMe,PBr,BBr,cK,IBr,NBr,qBr,YC,RMe,jBr,DBr,fK,GBr,OBr,VBr,KC,PMe,XBr,zBr,mK,WBr,QBr,HBr,ZC,BMe,UBr,JBr,gK,YBr,KBr,ZBr,e3,IMe,eIr,oIr,hK,rIr,tIr,aIr,o3,NMe,nIr,sIr,pK,lIr,iIr,dIr,r3,qMe,cIr,fIr,_K,mIr,gIr,hIr,t3,lDe,Xc,a3,jMe,ox,pIr,DMe,_Ir,iDe,_r,rx,uIr,zc,bIr,uK,vIr,FIr,bK,TIr,MIr,EIr,tx,CIr,GMe,wIr,AIr,yIr,Wt,ax,LIr,OMe,xIr,$Ir,Wc,kIr,VMe,SIr,RIr,vK,PIr,BIr,IIr,n3,NIr,Xr,nx,qIr,XMe,jIr,DIr,vn,GIr,zMe,OIr,VIr,WMe,XIr,zIr,QMe,WIr,QIr,HIr,$e,s3,HMe,UIr,JIr,FK,YIr,KIr,ZIr,l3,UMe,eNr,oNr,TK,rNr,tNr,aNr,i3,JMe,nNr,sNr,MK,lNr,iNr,dNr,d3,YMe,cNr,fNr,EK,mNr,gNr,hNr,c3,KMe,pNr,_Nr,CK,uNr,bNr,vNr,f3,ZMe,FNr,TNr,wK,MNr,ENr,CNr,m3,e4e,wNr,ANr,AK,yNr,LNr,xNr,g3,o4e,$Nr,kNr,yK,SNr,RNr,PNr,h3,r4e,BNr,INr,LK,NNr,qNr,jNr,p3,t4e,DNr,GNr,xK,ONr,VNr,XNr,_3,dDe,Qc,u3,a4e,sx,zNr,n4e,WNr,cDe,ur,lx,QNr,Hc,HNr,$K,UNr,JNr,kK,YNr,KNr,ZNr,ix,eqr,s4e,oqr,rqr,tqr,Qt,dx,aqr,l4e,nqr,sqr,Uc,lqr,i4e,iqr,dqr,SK,cqr,fqr,mqr,b3,gqr,zr,cx,hqr,d4e,pqr,_qr,Fn,uqr,c4e,bqr,vqr,f4e,Fqr,Tqr,m4e,Mqr,Eqr,Cqr,ke,v3,g4e,wqr,Aqr,RK,yqr,Lqr,xqr,F3,h4e,$qr,kqr,PK,Sqr,Rqr,Pqr,T3,p4e,Bqr,Iqr,BK,Nqr,qqr,jqr,M3,_4e,Dqr,Gqr,IK,Oqr,Vqr,Xqr,E3,u4e,zqr,Wqr,NK,Qqr,Hqr,Uqr,C3,b4e,Jqr,Yqr,qK,Kqr,Zqr,ejr,w3,v4e,ojr,rjr,jK,tjr,ajr,njr,A3,F4e,sjr,ljr,DK,ijr,djr,cjr,y3,T4e,fjr,mjr,GK,gjr,hjr,pjr,L3,M4e,_jr,ujr,OK,bjr,vjr,Fjr,x3,fDe,Jc,$3,E4e,fx,Tjr,C4e,Mjr,mDe,br,mx,Ejr,Yc,Cjr,VK,wjr,Ajr,XK,yjr,Ljr,xjr,gx,$jr,w4e,kjr,Sjr,Rjr,Ht,hx,Pjr,A4e,Bjr,Ijr,Kc,Njr,y4e,qjr,jjr,zK,Djr,Gjr,Ojr,k3,Vjr,Wr,px,Xjr,L4e,zjr,Wjr,Tn,Qjr,x4e,Hjr,Ujr,$4e,Jjr,Yjr,k4e,Kjr,Zjr,eDr,Ge,S3,S4e,oDr,rDr,WK,tDr,aDr,nDr,R3,R4e,sDr,lDr,QK,iDr,dDr,cDr,P3,P4e,fDr,mDr,HK,gDr,hDr,pDr,B3,B4e,_Dr,uDr,UK,bDr,vDr,FDr,I3,I4e,TDr,MDr,JK,EDr,CDr,wDr,N3,N4e,ADr,yDr,YK,LDr,xDr,$Dr,q3,q4e,kDr,SDr,KK,RDr,PDr,BDr,j3,j4e,IDr,NDr,ZK,qDr,jDr,DDr,D3,gDe,Zc,G3,D4e,_x,GDr,G4e,ODr,hDe,vr,ux,VDr,ef,XDr,eZ,zDr,WDr,oZ,QDr,HDr,UDr,bx,JDr,O4e,YDr,KDr,ZDr,Ut,vx,eGr,V4e,oGr,rGr,of,tGr,X4e,aGr,nGr,rZ,sGr,lGr,iGr,O3,dGr,Qr,Fx,cGr,z4e,fGr,mGr,Mn,gGr,W4e,hGr,pGr,Q4e,_Gr,uGr,H4e,bGr,vGr,FGr,Oe,V3,U4e,TGr,MGr,tZ,EGr,CGr,wGr,X3,J4e,AGr,yGr,aZ,LGr,xGr,$Gr,z3,Y4e,kGr,SGr,nZ,RGr,PGr,BGr,W3,K4e,IGr,NGr,sZ,qGr,jGr,DGr,Q3,Z4e,GGr,OGr,lZ,VGr,XGr,zGr,H3,eEe,WGr,QGr,iZ,HGr,UGr,JGr,U3,oEe,YGr,KGr,dZ,ZGr,eOr,oOr,J3,rEe,rOr,tOr,cZ,aOr,nOr,sOr,Y3,pDe,rf,K3,tEe,Tx,lOr,aEe,iOr,_De,Fr,Mx,dOr,tf,cOr,fZ,fOr,mOr,mZ,gOr,hOr,pOr,Ex,_Or,nEe,uOr,bOr,vOr,Jt,Cx,FOr,sEe,TOr,MOr,af,EOr,lEe,COr,wOr,gZ,AOr,yOr,LOr,Z3,xOr,Hr,wx,$Or,iEe,kOr,SOr,En,ROr,dEe,POr,BOr,cEe,IOr,NOr,fEe,qOr,jOr,DOr,mEe,ew,gEe,GOr,OOr,hZ,VOr,XOr,zOr,ow,uDe,nf,rw,hEe,Ax,WOr,pEe,QOr,bDe,Tr,yx,HOr,sf,UOr,pZ,JOr,YOr,_Z,KOr,ZOr,eVr,Lx,oVr,_Ee,rVr,tVr,aVr,Yt,xx,nVr,uEe,sVr,lVr,lf,iVr,bEe,dVr,cVr,uZ,fVr,mVr,gVr,tw,hVr,Ur,$x,pVr,vEe,_Vr,uVr,Cn,bVr,FEe,vVr,FVr,TEe,TVr,MVr,MEe,EVr,CVr,wVr,kx,aw,EEe,AVr,yVr,bZ,LVr,xVr,$Vr,nw,CEe,kVr,SVr,vZ,RVr,PVr,BVr,sw,vDe,df,lw,wEe,Sx,IVr,AEe,NVr,FDe,Mr,Rx,qVr,cf,jVr,FZ,DVr,GVr,TZ,OVr,VVr,XVr,Px,zVr,yEe,WVr,QVr,HVr,Kt,Bx,UVr,LEe,JVr,YVr,ff,KVr,xEe,ZVr,eXr,MZ,oXr,rXr,tXr,iw,aXr,Jr,Ix,nXr,$Ee,sXr,lXr,wn,iXr,kEe,dXr,cXr,SEe,fXr,mXr,REe,gXr,hXr,pXr,PEe,dw,BEe,_Xr,uXr,EZ,bXr,vXr,FXr,cw,TDe;return d=new te({}),Ca=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),SA=new te({}),RA=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Ff=new TXr({props:{warning:!0,$$slots:{default:[mkt]},$$scope:{ctx:L}}}),PA=new te({}),BA=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/configuration_auto.py#L584"}}),qA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/configuration_auto.py#L607"}}),Eg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[gkt]},$$scope:{ctx:L}}}),jA=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/configuration_auto.py#L730"}}),DA=new te({}),GA=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/tokenization_auto.py#L390"}}),XA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17510/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/tokenization_auto.py#L404"}}),ah=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[hkt]},$$scope:{ctx:L}}}),zA=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/tokenization_auto.py#L603"}}),WA=new te({}),QA=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/feature_extraction_auto.py#L190"}}),JA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17510/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/feature_extraction_auto.py#L204"}}),Ih=new TXr({props:{$$slots:{default:[pkt]},$$scope:{ctx:L}}}),Nh=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[_kt]},$$scope:{ctx:L}}}),YA=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/feature_extraction_auto.py#L331"}}),KA=new te({}),ZA=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/processing_auto.py#L88"}}),ry=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/processing_auto.py#L102"}}),tp=new TXr({props:{$$slots:{default:[ukt]},$$scope:{ctx:L}}}),ap=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[bkt]},$$scope:{ctx:L}}}),ty=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/processing_auto.py#L255"}}),ay=new te({}),ny=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/modeling_auto.py#L737"}}),ly=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17510/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17510/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/auto_factory.py#L389"}}),lp=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[vkt]},$$scope:{ctx:L}}}),iy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/auto_factory.py#L417"}}),ru=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[Fkt]},$$scope:{ctx:L}}}),dy=new te({}),cy=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/modeling_auto.py#L744"}}),my=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17510/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/auto_factory.py#L389"}}),au=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[Tkt]},$$scope:{ctx:L}}}),gy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/auto_factory.py#L417"}}),Hu=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Mkt]},$$scope:{ctx:L}}}),hy=new te({}),py=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/modeling_auto.py#L759"}}),uy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17510/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/auto_factory.py#L389"}}),Ju=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[Ekt]},$$scope:{ctx:L}}}),by=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/auto_factory.py#L417"}}),B1=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Ckt]},$$scope:{ctx:L}}}),vy=new te({}),Fy=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/modeling_auto.py#L766"}}),My=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17510/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/auto_factory.py#L389"}}),N1=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[wkt]},$$scope:{ctx:L}}}),Ey=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/auto_factory.py#L417"}}),Tb=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Akt]},$$scope:{ctx:L}}}),Cy=new te({}),wy=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/modeling_auto.py#L773"}}),yy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17510/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/auto_factory.py#L389"}}),Eb=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[ykt]},$$scope:{ctx:L}}}),Ly=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/auto_factory.py#L417"}}),Gb=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Lkt]},$$scope:{ctx:L}}}),xy=new te({}),$y=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/modeling_auto.py#L782"}}),Sy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17510/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/auto_factory.py#L389"}}),Vb=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[xkt]},$$scope:{ctx:L}}}),Ry=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/auto_factory.py#L417"}}),q2=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[$kt]},$$scope:{ctx:L}}}),Py=new te({}),By=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/modeling_auto.py#L816"}}),Ny=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17510/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/auto_factory.py#L389"}}),D2=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[kkt]},$$scope:{ctx:L}}}),qy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/auto_factory.py#L417"}}),u5=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Skt]},$$scope:{ctx:L}}}),jy=new te({}),Dy=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/modeling_auto.py#L823"}}),Oy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17510/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/auto_factory.py#L389"}}),v5=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Rkt]},$$scope:{ctx:L}}}),Vy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/auto_factory.py#L417"}}),A5=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Pkt]},$$scope:{ctx:L}}}),Xy=new te({}),zy=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/modeling_auto.py#L809"}}),Qy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17510/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/auto_factory.py#L389"}}),L5=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[Bkt]},$$scope:{ctx:L}}}),Hy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/auto_factory.py#L417"}}),cv=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Ikt]},$$scope:{ctx:L}}}),Uy=new te({}),Jy=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/modeling_auto.py#L791"}}),Ky=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17510/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/auto_factory.py#L389"}}),mv=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Nkt]},$$scope:{ctx:L}}}),Zy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/auto_factory.py#L417"}}),eF=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[qkt]},$$scope:{ctx:L}}}),eL=new te({}),oL=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/modeling_auto.py#L798"}}),tL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17510/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/auto_factory.py#L389"}}),rF=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[jkt]},$$scope:{ctx:L}}}),aL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/auto_factory.py#L417"}}),nF=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[Dkt]},$$scope:{ctx:L}}}),nL=new te({}),sL=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/modeling_auto.py#L832"}}),iL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17510/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17510/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17510/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17510/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/auto_factory.py#L389"}}),lF=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[Gkt]},$$scope:{ctx:L}}}),dL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/auto_factory.py#L417"}}),TF=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Okt]},$$scope:{ctx:L}}}),cL=new te({}),fL=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/modeling_auto.py#L871"}}),gL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17510/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/auto_factory.py#L389"}}),EF=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[Vkt]},$$scope:{ctx:L}}}),hL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/auto_factory.py#L417"}}),AF=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Xkt]},$$scope:{ctx:L}}}),pL=new te({}),_L=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/modeling_auto.py#L878"}}),bL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17510/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/auto_factory.py#L389"}}),LF=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[zkt]},$$scope:{ctx:L}}}),vL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/auto_factory.py#L417"}}),jF=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[Wkt]},$$scope:{ctx:L}}}),FL=new te({}),TL=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/modeling_auto.py#L901"}}),EL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17510/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/auto_factory.py#L389"}}),GF=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[Qkt]},$$scope:{ctx:L}}}),CL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/auto_factory.py#L417"}}),HF=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[Hkt]},$$scope:{ctx:L}}}),wL=new te({}),AL=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/modeling_auto.py#L885"}}),LL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17510/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/auto_factory.py#L389"}}),JF=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[Ukt]},$$scope:{ctx:L}}}),xL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/auto_factory.py#L417"}}),l0=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[Jkt]},$$scope:{ctx:L}}}),$L=new te({}),kL=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/modeling_auto.py#L892"}}),RL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17510/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/auto_factory.py#L389"}}),d0=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[Ykt]},$$scope:{ctx:L}}}),PL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/auto_factory.py#L417"}}),g0=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[Kkt]},$$scope:{ctx:L}}}),IL=new te({}),NL=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/modeling_auto.py#L910"}}),jL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17510/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/auto_factory.py#L389"}}),p0=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[Zkt]},$$scope:{ctx:L}}}),DL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/auto_factory.py#L417"}}),M0=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[eSt]},$$scope:{ctx:L}}}),GL=new te({}),OL=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/modeling_auto.py#L917"}}),XL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17510/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/auto_factory.py#L389"}}),C0=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[oSt]},$$scope:{ctx:L}}}),zL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/auto_factory.py#L417"}}),x0=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[rSt]},$$scope:{ctx:L}}}),WL=new te({}),QL=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/modeling_auto.py#L864"}}),UL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17510/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/auto_factory.py#L389"}}),k0=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[tSt]},$$scope:{ctx:L}}}),JL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/auto_factory.py#L417"}}),B0=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[aSt]},$$scope:{ctx:L}}}),KL=new te({}),ZL=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/modeling_auto.py#L839"}}),o8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17510/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/auto_factory.py#L389"}}),N0=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[nSt]},$$scope:{ctx:L}}}),r8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/auto_factory.py#L417"}}),D0=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[sSt]},$$scope:{ctx:L}}}),t8=new te({}),a8=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/modeling_auto.py#L846"}}),s8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17510/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/auto_factory.py#L389"}}),O0=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[lSt]},$$scope:{ctx:L}}}),l8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/auto_factory.py#L417"}}),H0=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[iSt]},$$scope:{ctx:L}}}),i8=new te({}),d8=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/modeling_auto.py#L855"}}),f8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17510/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/auto_factory.py#L389"}}),J0=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[dSt]},$$scope:{ctx:L}}}),m8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/auto_factory.py#L417"}}),Z0=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[cSt]},$$scope:{ctx:L}}}),g8=new te({}),h8=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/modeling_tf_auto.py#L396"}}),_8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17510/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17510/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/auto_factory.py#L389"}}),oT=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[fSt]},$$scope:{ctx:L}}}),u8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/auto_factory.py#L417"}}),HT=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[mSt]},$$scope:{ctx:L}}}),b8=new te({}),v8=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/modeling_tf_auto.py#L403"}}),T8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17510/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/auto_factory.py#L389"}}),JT=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[gSt]},$$scope:{ctx:L}}}),M8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/auto_factory.py#L417"}}),F7=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[hSt]},$$scope:{ctx:L}}}),E8=new te({}),C8=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/modeling_tf_auto.py#L418"}}),A8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17510/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/auto_factory.py#L389"}}),M7=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[pSt]},$$scope:{ctx:L}}}),y8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/auto_factory.py#L417"}}),I7=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[_St]},$$scope:{ctx:L}}}),L8=new te({}),x8=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/modeling_tf_auto.py#L434"}}),k8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17510/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/auto_factory.py#L389"}}),q7=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[uSt]},$$scope:{ctx:L}}}),S8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/auto_factory.py#L417"}}),V7=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[bSt]},$$scope:{ctx:L}}}),R8=new te({}),P8=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/modeling_tf_auto.py#L450"}}),I8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17510/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/auto_factory.py#L389"}}),z7=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[vSt]},$$scope:{ctx:L}}}),N8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/auto_factory.py#L417"}}),mM=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[FSt]},$$scope:{ctx:L}}}),q8=new te({}),j8=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/modeling_tf_auto.py#L457"}}),G8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17510/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/auto_factory.py#L389"}}),hM=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[TSt]},$$scope:{ctx:L}}}),O8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/auto_factory.py#L417"}}),wM=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[MSt]},$$scope:{ctx:L}}}),V8=new te({}),X8=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/modeling_tf_auto.py#L466"}}),W8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17510/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/auto_factory.py#L389"}}),yM=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[ESt]},$$scope:{ctx:L}}}),Q8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/auto_factory.py#L417"}}),e4=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[CSt]},$$scope:{ctx:L}}}),H8=new te({}),U8=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/modeling_tf_auto.py#L502"}}),Y8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17510/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/auto_factory.py#L389"}}),r4=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[wSt]},$$scope:{ctx:L}}}),K8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/auto_factory.py#L417"}}),F4=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[ASt]},$$scope:{ctx:L}}}),Z8=new te({}),e9=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/modeling_tf_auto.py#L509"}}),r9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17510/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/auto_factory.py#L389"}}),M4=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[ySt]},$$scope:{ctx:L}}}),t9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/auto_factory.py#L417"}}),w4=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[LSt]},$$scope:{ctx:L}}}),n9=new te({}),s9=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/modeling_tf_auto.py#L482"}}),i9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17510/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/auto_factory.py#L389"}}),y4=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[xSt]},$$scope:{ctx:L}}}),d9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/auto_factory.py#L417"}}),x4=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[$St]},$$scope:{ctx:L}}}),c9=new te({}),f9=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/modeling_tf_auto.py#L493"}}),g9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17510/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/auto_factory.py#L389"}}),k4=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[kSt]},$$scope:{ctx:L}}}),h9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/auto_factory.py#L417"}}),K4=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[SSt]},$$scope:{ctx:L}}}),p9=new te({}),_9=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/modeling_tf_auto.py#L475"}}),b9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17510/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/auto_factory.py#L389"}}),eE=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[RSt]},$$scope:{ctx:L}}}),v9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/auto_factory.py#L417"}}),TE=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[PSt]},$$scope:{ctx:L}}}),F9=new te({}),T9=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/modeling_tf_auto.py#L443"}}),E9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17510/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/auto_factory.py#L389"}}),EE=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[BSt]},$$scope:{ctx:L}}}),C9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/auto_factory.py#L417"}}),wE=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[ISt]},$$scope:{ctx:L}}}),w9=new te({}),A9=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/modeling_tf_auto.py#L518"}}),L9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17510/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/auto_factory.py#L389"}}),yE=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[NSt]},$$scope:{ctx:L}}}),x9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/auto_factory.py#L417"}}),xE=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[qSt]},$$scope:{ctx:L}}}),$9=new te({}),k9=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/modeling_flax_auto.py#L243"}}),R9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17510/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/auto_factory.py#L389"}}),kE=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[jSt]},$$scope:{ctx:L}}}),P9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/auto_factory.py#L417"}}),aC=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[DSt]},$$scope:{ctx:L}}}),B9=new te({}),I9=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/modeling_flax_auto.py#L257"}}),q9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17510/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/auto_factory.py#L389"}}),sC=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[GSt]},$$scope:{ctx:L}}}),j9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/auto_factory.py#L417"}}),uC=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[OSt]},$$scope:{ctx:L}}}),D9=new te({}),G9=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/modeling_flax_auto.py#L250"}}),V9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17510/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/auto_factory.py#L389"}}),vC=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[VSt]},$$scope:{ctx:L}}}),X9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/auto_factory.py#L417"}}),SC=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[XSt]},$$scope:{ctx:L}}}),z9=new te({}),W9=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/modeling_flax_auto.py#L264"}}),H9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17510/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/auto_factory.py#L389"}}),PC=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[zSt]},$$scope:{ctx:L}}}),U9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/auto_factory.py#L417"}}),zC=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[WSt]},$$scope:{ctx:L}}}),J9=new te({}),Y9=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/modeling_flax_auto.py#L271"}}),Z9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17510/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/auto_factory.py#L389"}}),QC=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[QSt]},$$scope:{ctx:L}}}),ex=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/auto_factory.py#L417"}}),t3=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[HSt]},$$scope:{ctx:L}}}),ox=new te({}),rx=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/modeling_flax_auto.py#L280"}}),ax=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17510/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/auto_factory.py#L389"}}),n3=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[USt]},$$scope:{ctx:L}}}),nx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/auto_factory.py#L417"}}),_3=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[JSt]},$$scope:{ctx:L}}}),sx=new te({}),lx=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/modeling_flax_auto.py#L289"}}),dx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17510/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/auto_factory.py#L389"}}),b3=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[YSt]},$$scope:{ctx:L}}}),cx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/auto_factory.py#L417"}}),x3=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[KSt]},$$scope:{ctx:L}}}),fx=new te({}),mx=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/modeling_flax_auto.py#L296"}}),hx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17510/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/auto_factory.py#L389"}}),k3=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[ZSt]},$$scope:{ctx:L}}}),px=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/auto_factory.py#L417"}}),D3=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[eRt]},$$scope:{ctx:L}}}),_x=new te({}),ux=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/modeling_flax_auto.py#L305"}}),vx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17510/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/auto_factory.py#L389"}}),O3=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[oRt]},$$scope:{ctx:L}}}),Fx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/auto_factory.py#L417"}}),Y3=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[rRt]},$$scope:{ctx:L}}}),Tx=new te({}),Mx=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/modeling_flax_auto.py#L312"}}),Cx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17510/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/auto_factory.py#L389"}}),Z3=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[tRt]},$$scope:{ctx:L}}}),wx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/auto_factory.py#L417"}}),ow=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[aRt]},$$scope:{ctx:L}}}),Ax=new te({}),yx=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/modeling_flax_auto.py#L321"}}),xx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17510/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17510/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/auto_factory.py#L389"}}),tw=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[nRt]},$$scope:{ctx:L}}}),$x=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/auto_factory.py#L417"}}),sw=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[sRt]},$$scope:{ctx:L}}}),Sx=new te({}),Rx=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/modeling_flax_auto.py#L330"}}),Bx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17510/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17510/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/auto_factory.py#L389"}}),iw=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[lRt]},$$scope:{ctx:L}}}),Ix=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17510/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17510/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17510/src/transformers/models/auto/auto_factory.py#L417"}}),cw=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[iRt]},$$scope:{ctx:L}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),fi=o("Auto Classes"),pf=l(),rt=a("p"),mi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),gi=a("code"),LA=o("from_pretrained()"),_f=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),De=l(),We=a("p"),hi=o("Instantiating one of "),yn=a("a"),xA=o("AutoConfig"),Ln=o(", "),xn=a("a"),$A=o("AutoModel"),pi=o(`, and
`),$n=a("a"),kA=o("AutoTokenizer"),_i=o(" will directly create a class of the relevant architecture. For instance"),uf=l(),F(Ca.$$.fragment),Qe=l(),Ae=a("p"),J$=o("will create a model that is an instance of "),ui=a("a"),Y$=o("BertModel"),K$=o("."),Eo=l(),wa=a("p"),Z$=o("There is one class of "),bf=a("code"),ek=o("AutoModel"),xOe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),bqe=l(),bi=a("h2"),vf=a("a"),_oe=a("span"),F(SA.$$.fragment),$Oe=l(),uoe=a("span"),kOe=o("Extending the Auto Classes"),vqe=l(),kn=a("p"),SOe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),boe=a("code"),ROe=o("NewModel"),POe=o(", make sure you have a "),voe=a("code"),BOe=o("NewModelConfig"),IOe=o(` then you can add those to the auto
classes like this:`),Fqe=l(),F(RA.$$.fragment),Tqe=l(),ok=a("p"),NOe=o("You will then be able to use the auto classes like you would usually do!"),Mqe=l(),F(Ff.$$.fragment),Eqe=l(),vi=a("h2"),Tf=a("a"),Foe=a("span"),F(PA.$$.fragment),qOe=l(),Toe=a("span"),jOe=o("AutoConfig"),Cqe=l(),Co=a("div"),F(BA.$$.fragment),DOe=l(),IA=a("p"),GOe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),rk=a("a"),OOe=o("from_pretrained()"),VOe=o(" class method."),XOe=l(),NA=a("p"),zOe=o("This class cannot be instantiated directly using "),Moe=a("code"),WOe=o("__init__()"),QOe=o(" (throws an error)."),HOe=l(),Er=a("div"),F(qA.$$.fragment),UOe=l(),Eoe=a("p"),JOe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),YOe=l(),Fi=a("p"),KOe=o("The configuration class to instantiate is selected based on the "),Coe=a("code"),ZOe=o("model_type"),eVe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),woe=a("code"),oVe=o("pretrained_model_name_or_path"),rVe=o(":"),tVe=l(),A=a("ul"),Mf=a("li"),Aoe=a("strong"),aVe=o("albert"),nVe=o(" \u2014 "),tk=a("a"),sVe=o("AlbertConfig"),lVe=o(" (ALBERT model)"),iVe=l(),Ef=a("li"),yoe=a("strong"),dVe=o("bart"),cVe=o(" \u2014 "),ak=a("a"),fVe=o("BartConfig"),mVe=o(" (BART model)"),gVe=l(),Cf=a("li"),Loe=a("strong"),hVe=o("beit"),pVe=o(" \u2014 "),nk=a("a"),_Ve=o("BeitConfig"),uVe=o(" (BEiT model)"),bVe=l(),wf=a("li"),xoe=a("strong"),vVe=o("bert"),FVe=o(" \u2014 "),sk=a("a"),TVe=o("BertConfig"),MVe=o(" (BERT model)"),EVe=l(),Af=a("li"),$oe=a("strong"),CVe=o("bert-generation"),wVe=o(" \u2014 "),lk=a("a"),AVe=o("BertGenerationConfig"),yVe=o(" (Bert Generation model)"),LVe=l(),yf=a("li"),koe=a("strong"),xVe=o("big_bird"),$Ve=o(" \u2014 "),ik=a("a"),kVe=o("BigBirdConfig"),SVe=o(" (BigBird model)"),RVe=l(),Lf=a("li"),Soe=a("strong"),PVe=o("bigbird_pegasus"),BVe=o(" \u2014 "),dk=a("a"),IVe=o("BigBirdPegasusConfig"),NVe=o(" (BigBirdPegasus model)"),qVe=l(),xf=a("li"),Roe=a("strong"),jVe=o("blenderbot"),DVe=o(" \u2014 "),ck=a("a"),GVe=o("BlenderbotConfig"),OVe=o(" (Blenderbot model)"),VVe=l(),$f=a("li"),Poe=a("strong"),XVe=o("blenderbot-small"),zVe=o(" \u2014 "),fk=a("a"),WVe=o("BlenderbotSmallConfig"),QVe=o(" (BlenderbotSmall model)"),HVe=l(),kf=a("li"),Boe=a("strong"),UVe=o("camembert"),JVe=o(" \u2014 "),mk=a("a"),YVe=o("CamembertConfig"),KVe=o(" (CamemBERT model)"),ZVe=l(),Sf=a("li"),Ioe=a("strong"),eXe=o("canine"),oXe=o(" \u2014 "),gk=a("a"),rXe=o("CanineConfig"),tXe=o(" (Canine model)"),aXe=l(),Rf=a("li"),Noe=a("strong"),nXe=o("clip"),sXe=o(" \u2014 "),hk=a("a"),lXe=o("CLIPConfig"),iXe=o(" (CLIP model)"),dXe=l(),Pf=a("li"),qoe=a("strong"),cXe=o("convbert"),fXe=o(" \u2014 "),pk=a("a"),mXe=o("ConvBertConfig"),gXe=o(" (ConvBERT model)"),hXe=l(),Bf=a("li"),joe=a("strong"),pXe=o("convnext"),_Xe=o(" \u2014 "),_k=a("a"),uXe=o("ConvNextConfig"),bXe=o(" (ConvNext model)"),vXe=l(),If=a("li"),Doe=a("strong"),FXe=o("ctrl"),TXe=o(" \u2014 "),uk=a("a"),MXe=o("CTRLConfig"),EXe=o(" (CTRL model)"),CXe=l(),Nf=a("li"),Goe=a("strong"),wXe=o("cvt"),AXe=o(" \u2014 "),bk=a("a"),yXe=o("CvtConfig"),LXe=o(" (CvT model)"),xXe=l(),qf=a("li"),Ooe=a("strong"),$Xe=o("data2vec-audio"),kXe=o(" \u2014 "),vk=a("a"),SXe=o("Data2VecAudioConfig"),RXe=o(" (Data2VecAudio model)"),PXe=l(),jf=a("li"),Voe=a("strong"),BXe=o("data2vec-text"),IXe=o(" \u2014 "),Fk=a("a"),NXe=o("Data2VecTextConfig"),qXe=o(" (Data2VecText model)"),jXe=l(),Df=a("li"),Xoe=a("strong"),DXe=o("data2vec-vision"),GXe=o(" \u2014 "),Tk=a("a"),OXe=o("Data2VecVisionConfig"),VXe=o(" (Data2VecVision model)"),XXe=l(),Gf=a("li"),zoe=a("strong"),zXe=o("deberta"),WXe=o(" \u2014 "),Mk=a("a"),QXe=o("DebertaConfig"),HXe=o(" (DeBERTa model)"),UXe=l(),Of=a("li"),Woe=a("strong"),JXe=o("deberta-v2"),YXe=o(" \u2014 "),Ek=a("a"),KXe=o("DebertaV2Config"),ZXe=o(" (DeBERTa-v2 model)"),eze=l(),Vf=a("li"),Qoe=a("strong"),oze=o("decision_transformer"),rze=o(" \u2014 "),Ck=a("a"),tze=o("DecisionTransformerConfig"),aze=o(" (Decision Transformer model)"),nze=l(),Xf=a("li"),Hoe=a("strong"),sze=o("deit"),lze=o(" \u2014 "),wk=a("a"),ize=o("DeiTConfig"),dze=o(" (DeiT model)"),cze=l(),zf=a("li"),Uoe=a("strong"),fze=o("detr"),mze=o(" \u2014 "),Ak=a("a"),gze=o("DetrConfig"),hze=o(" (DETR model)"),pze=l(),Wf=a("li"),Joe=a("strong"),_ze=o("distilbert"),uze=o(" \u2014 "),yk=a("a"),bze=o("DistilBertConfig"),vze=o(" (DistilBERT model)"),Fze=l(),Qf=a("li"),Yoe=a("strong"),Tze=o("dpr"),Mze=o(" \u2014 "),Lk=a("a"),Eze=o("DPRConfig"),Cze=o(" (DPR model)"),wze=l(),Hf=a("li"),Koe=a("strong"),Aze=o("dpt"),yze=o(" \u2014 "),xk=a("a"),Lze=o("DPTConfig"),xze=o(" (DPT model)"),$ze=l(),Uf=a("li"),Zoe=a("strong"),kze=o("electra"),Sze=o(" \u2014 "),$k=a("a"),Rze=o("ElectraConfig"),Pze=o(" (ELECTRA model)"),Bze=l(),Jf=a("li"),ere=a("strong"),Ize=o("encoder-decoder"),Nze=o(" \u2014 "),kk=a("a"),qze=o("EncoderDecoderConfig"),jze=o(" (Encoder decoder model)"),Dze=l(),Yf=a("li"),ore=a("strong"),Gze=o("flaubert"),Oze=o(" \u2014 "),Sk=a("a"),Vze=o("FlaubertConfig"),Xze=o(" (FlauBERT model)"),zze=l(),Kf=a("li"),rre=a("strong"),Wze=o("flava"),Qze=o(" \u2014 "),Rk=a("a"),Hze=o("FlavaConfig"),Uze=o(" (Flava model)"),Jze=l(),Zf=a("li"),tre=a("strong"),Yze=o("fnet"),Kze=o(" \u2014 "),Pk=a("a"),Zze=o("FNetConfig"),eWe=o(" (FNet model)"),oWe=l(),em=a("li"),are=a("strong"),rWe=o("fsmt"),tWe=o(" \u2014 "),Bk=a("a"),aWe=o("FSMTConfig"),nWe=o(" (FairSeq Machine-Translation model)"),sWe=l(),om=a("li"),nre=a("strong"),lWe=o("funnel"),iWe=o(" \u2014 "),Ik=a("a"),dWe=o("FunnelConfig"),cWe=o(" (Funnel Transformer model)"),fWe=l(),rm=a("li"),sre=a("strong"),mWe=o("glpn"),gWe=o(" \u2014 "),Nk=a("a"),hWe=o("GLPNConfig"),pWe=o(" (GLPN model)"),_We=l(),tm=a("li"),lre=a("strong"),uWe=o("gpt2"),bWe=o(" \u2014 "),qk=a("a"),vWe=o("GPT2Config"),FWe=o(" (OpenAI GPT-2 model)"),TWe=l(),am=a("li"),ire=a("strong"),MWe=o("gpt_neo"),EWe=o(" \u2014 "),jk=a("a"),CWe=o("GPTNeoConfig"),wWe=o(" (GPT Neo model)"),AWe=l(),nm=a("li"),dre=a("strong"),yWe=o("gpt_neox"),LWe=o(" \u2014 "),Dk=a("a"),xWe=o("GPTNeoXConfig"),$We=o(" (GPT NeoX model)"),kWe=l(),sm=a("li"),cre=a("strong"),SWe=o("gptj"),RWe=o(" \u2014 "),Gk=a("a"),PWe=o("GPTJConfig"),BWe=o(" (GPT-J model)"),IWe=l(),lm=a("li"),fre=a("strong"),NWe=o("hubert"),qWe=o(" \u2014 "),Ok=a("a"),jWe=o("HubertConfig"),DWe=o(" (Hubert model)"),GWe=l(),im=a("li"),mre=a("strong"),OWe=o("ibert"),VWe=o(" \u2014 "),Vk=a("a"),XWe=o("IBertConfig"),zWe=o(" (I-BERT model)"),WWe=l(),dm=a("li"),gre=a("strong"),QWe=o("imagegpt"),HWe=o(" \u2014 "),Xk=a("a"),UWe=o("ImageGPTConfig"),JWe=o(" (ImageGPT model)"),YWe=l(),cm=a("li"),hre=a("strong"),KWe=o("layoutlm"),ZWe=o(" \u2014 "),zk=a("a"),eQe=o("LayoutLMConfig"),oQe=o(" (LayoutLM model)"),rQe=l(),fm=a("li"),pre=a("strong"),tQe=o("layoutlmv2"),aQe=o(" \u2014 "),Wk=a("a"),nQe=o("LayoutLMv2Config"),sQe=o(" (LayoutLMv2 model)"),lQe=l(),mm=a("li"),_re=a("strong"),iQe=o("layoutlmv3"),dQe=o(" \u2014 "),Qk=a("a"),cQe=o("LayoutLMv3Config"),fQe=o(" (LayoutLMv3 model)"),mQe=l(),gm=a("li"),ure=a("strong"),gQe=o("led"),hQe=o(" \u2014 "),Hk=a("a"),pQe=o("LEDConfig"),_Qe=o(" (LED model)"),uQe=l(),hm=a("li"),bre=a("strong"),bQe=o("longformer"),vQe=o(" \u2014 "),Uk=a("a"),FQe=o("LongformerConfig"),TQe=o(" (Longformer model)"),MQe=l(),pm=a("li"),vre=a("strong"),EQe=o("luke"),CQe=o(" \u2014 "),Jk=a("a"),wQe=o("LukeConfig"),AQe=o(" (LUKE model)"),yQe=l(),_m=a("li"),Fre=a("strong"),LQe=o("lxmert"),xQe=o(" \u2014 "),Yk=a("a"),$Qe=o("LxmertConfig"),kQe=o(" (LXMERT model)"),SQe=l(),um=a("li"),Tre=a("strong"),RQe=o("m2m_100"),PQe=o(" \u2014 "),Kk=a("a"),BQe=o("M2M100Config"),IQe=o(" (M2M100 model)"),NQe=l(),bm=a("li"),Mre=a("strong"),qQe=o("marian"),jQe=o(" \u2014 "),Zk=a("a"),DQe=o("MarianConfig"),GQe=o(" (Marian model)"),OQe=l(),vm=a("li"),Ere=a("strong"),VQe=o("maskformer"),XQe=o(" \u2014 "),eS=a("a"),zQe=o("MaskFormerConfig"),WQe=o(" (MaskFormer model)"),QQe=l(),Fm=a("li"),Cre=a("strong"),HQe=o("mbart"),UQe=o(" \u2014 "),oS=a("a"),JQe=o("MBartConfig"),YQe=o(" (mBART model)"),KQe=l(),Tm=a("li"),wre=a("strong"),ZQe=o("megatron-bert"),eHe=o(" \u2014 "),rS=a("a"),oHe=o("MegatronBertConfig"),rHe=o(" (MegatronBert model)"),tHe=l(),Mm=a("li"),Are=a("strong"),aHe=o("mobilebert"),nHe=o(" \u2014 "),tS=a("a"),sHe=o("MobileBertConfig"),lHe=o(" (MobileBERT model)"),iHe=l(),Em=a("li"),yre=a("strong"),dHe=o("mpnet"),cHe=o(" \u2014 "),aS=a("a"),fHe=o("MPNetConfig"),mHe=o(" (MPNet model)"),gHe=l(),Cm=a("li"),Lre=a("strong"),hHe=o("mt5"),pHe=o(" \u2014 "),nS=a("a"),_He=o("MT5Config"),uHe=o(" (mT5 model)"),bHe=l(),wm=a("li"),xre=a("strong"),vHe=o("nystromformer"),FHe=o(" \u2014 "),sS=a("a"),THe=o("NystromformerConfig"),MHe=o(" (Nystromformer model)"),EHe=l(),Am=a("li"),$re=a("strong"),CHe=o("openai-gpt"),wHe=o(" \u2014 "),lS=a("a"),AHe=o("OpenAIGPTConfig"),yHe=o(" (OpenAI GPT model)"),LHe=l(),ym=a("li"),kre=a("strong"),xHe=o("opt"),$He=o(" \u2014 "),iS=a("a"),kHe=o("OPTConfig"),SHe=o(" (OPT model)"),RHe=l(),Lm=a("li"),Sre=a("strong"),PHe=o("pegasus"),BHe=o(" \u2014 "),dS=a("a"),IHe=o("PegasusConfig"),NHe=o(" (Pegasus model)"),qHe=l(),xm=a("li"),Rre=a("strong"),jHe=o("perceiver"),DHe=o(" \u2014 "),cS=a("a"),GHe=o("PerceiverConfig"),OHe=o(" (Perceiver model)"),VHe=l(),$m=a("li"),Pre=a("strong"),XHe=o("plbart"),zHe=o(" \u2014 "),fS=a("a"),WHe=o("PLBartConfig"),QHe=o(" (PLBart model)"),HHe=l(),km=a("li"),Bre=a("strong"),UHe=o("poolformer"),JHe=o(" \u2014 "),mS=a("a"),YHe=o("PoolFormerConfig"),KHe=o(" (PoolFormer model)"),ZHe=l(),Sm=a("li"),Ire=a("strong"),eUe=o("prophetnet"),oUe=o(" \u2014 "),gS=a("a"),rUe=o("ProphetNetConfig"),tUe=o(" (ProphetNet model)"),aUe=l(),Rm=a("li"),Nre=a("strong"),nUe=o("qdqbert"),sUe=o(" \u2014 "),hS=a("a"),lUe=o("QDQBertConfig"),iUe=o(" (QDQBert model)"),dUe=l(),Pm=a("li"),qre=a("strong"),cUe=o("rag"),fUe=o(" \u2014 "),pS=a("a"),mUe=o("RagConfig"),gUe=o(" (RAG model)"),hUe=l(),Bm=a("li"),jre=a("strong"),pUe=o("realm"),_Ue=o(" \u2014 "),_S=a("a"),uUe=o("RealmConfig"),bUe=o(" (Realm model)"),vUe=l(),Im=a("li"),Dre=a("strong"),FUe=o("reformer"),TUe=o(" \u2014 "),uS=a("a"),MUe=o("ReformerConfig"),EUe=o(" (Reformer model)"),CUe=l(),Nm=a("li"),Gre=a("strong"),wUe=o("regnet"),AUe=o(" \u2014 "),bS=a("a"),yUe=o("RegNetConfig"),LUe=o(" (RegNet model)"),xUe=l(),qm=a("li"),Ore=a("strong"),$Ue=o("rembert"),kUe=o(" \u2014 "),vS=a("a"),SUe=o("RemBertConfig"),RUe=o(" (RemBERT model)"),PUe=l(),jm=a("li"),Vre=a("strong"),BUe=o("resnet"),IUe=o(" \u2014 "),FS=a("a"),NUe=o("ResNetConfig"),qUe=o(" (ResNet model)"),jUe=l(),Dm=a("li"),Xre=a("strong"),DUe=o("retribert"),GUe=o(" \u2014 "),TS=a("a"),OUe=o("RetriBertConfig"),VUe=o(" (RetriBERT model)"),XUe=l(),Gm=a("li"),zre=a("strong"),zUe=o("roberta"),WUe=o(" \u2014 "),MS=a("a"),QUe=o("RobertaConfig"),HUe=o(" (RoBERTa model)"),UUe=l(),Om=a("li"),Wre=a("strong"),JUe=o("roformer"),YUe=o(" \u2014 "),ES=a("a"),KUe=o("RoFormerConfig"),ZUe=o(" (RoFormer model)"),eJe=l(),Vm=a("li"),Qre=a("strong"),oJe=o("segformer"),rJe=o(" \u2014 "),CS=a("a"),tJe=o("SegformerConfig"),aJe=o(" (SegFormer model)"),nJe=l(),Xm=a("li"),Hre=a("strong"),sJe=o("sew"),lJe=o(" \u2014 "),wS=a("a"),iJe=o("SEWConfig"),dJe=o(" (SEW model)"),cJe=l(),zm=a("li"),Ure=a("strong"),fJe=o("sew-d"),mJe=o(" \u2014 "),AS=a("a"),gJe=o("SEWDConfig"),hJe=o(" (SEW-D model)"),pJe=l(),Wm=a("li"),Jre=a("strong"),_Je=o("speech-encoder-decoder"),uJe=o(" \u2014 "),yS=a("a"),bJe=o("SpeechEncoderDecoderConfig"),vJe=o(" (Speech Encoder decoder model)"),FJe=l(),Qm=a("li"),Yre=a("strong"),TJe=o("speech_to_text"),MJe=o(" \u2014 "),LS=a("a"),EJe=o("Speech2TextConfig"),CJe=o(" (Speech2Text model)"),wJe=l(),Hm=a("li"),Kre=a("strong"),AJe=o("speech_to_text_2"),yJe=o(" \u2014 "),xS=a("a"),LJe=o("Speech2Text2Config"),xJe=o(" (Speech2Text2 model)"),$Je=l(),Um=a("li"),Zre=a("strong"),kJe=o("splinter"),SJe=o(" \u2014 "),$S=a("a"),RJe=o("SplinterConfig"),PJe=o(" (Splinter model)"),BJe=l(),Jm=a("li"),ete=a("strong"),IJe=o("squeezebert"),NJe=o(" \u2014 "),kS=a("a"),qJe=o("SqueezeBertConfig"),jJe=o(" (SqueezeBERT model)"),DJe=l(),Ym=a("li"),ote=a("strong"),GJe=o("swin"),OJe=o(" \u2014 "),SS=a("a"),VJe=o("SwinConfig"),XJe=o(" (Swin model)"),zJe=l(),Km=a("li"),rte=a("strong"),WJe=o("t5"),QJe=o(" \u2014 "),RS=a("a"),HJe=o("T5Config"),UJe=o(" (T5 model)"),JJe=l(),Zm=a("li"),tte=a("strong"),YJe=o("tapas"),KJe=o(" \u2014 "),PS=a("a"),ZJe=o("TapasConfig"),eYe=o(" (TAPAS model)"),oYe=l(),eg=a("li"),ate=a("strong"),rYe=o("trajectory_transformer"),tYe=o(" \u2014 "),BS=a("a"),aYe=o("TrajectoryTransformerConfig"),nYe=o(" (Trajectory Transformer model)"),sYe=l(),og=a("li"),nte=a("strong"),lYe=o("transfo-xl"),iYe=o(" \u2014 "),IS=a("a"),dYe=o("TransfoXLConfig"),cYe=o(" (Transformer-XL model)"),fYe=l(),rg=a("li"),ste=a("strong"),mYe=o("trocr"),gYe=o(" \u2014 "),NS=a("a"),hYe=o("TrOCRConfig"),pYe=o(" (TrOCR model)"),_Ye=l(),tg=a("li"),lte=a("strong"),uYe=o("unispeech"),bYe=o(" \u2014 "),qS=a("a"),vYe=o("UniSpeechConfig"),FYe=o(" (UniSpeech model)"),TYe=l(),ag=a("li"),ite=a("strong"),MYe=o("unispeech-sat"),EYe=o(" \u2014 "),jS=a("a"),CYe=o("UniSpeechSatConfig"),wYe=o(" (UniSpeechSat model)"),AYe=l(),ng=a("li"),dte=a("strong"),yYe=o("van"),LYe=o(" \u2014 "),DS=a("a"),xYe=o("VanConfig"),$Ye=o(" (VAN model)"),kYe=l(),sg=a("li"),cte=a("strong"),SYe=o("vilt"),RYe=o(" \u2014 "),GS=a("a"),PYe=o("ViltConfig"),BYe=o(" (ViLT model)"),IYe=l(),lg=a("li"),fte=a("strong"),NYe=o("vision-encoder-decoder"),qYe=o(" \u2014 "),OS=a("a"),jYe=o("VisionEncoderDecoderConfig"),DYe=o(" (Vision Encoder decoder model)"),GYe=l(),ig=a("li"),mte=a("strong"),OYe=o("vision-text-dual-encoder"),VYe=o(" \u2014 "),VS=a("a"),XYe=o("VisionTextDualEncoderConfig"),zYe=o(" (VisionTextDualEncoder model)"),WYe=l(),dg=a("li"),gte=a("strong"),QYe=o("visual_bert"),HYe=o(" \u2014 "),XS=a("a"),UYe=o("VisualBertConfig"),JYe=o(" (VisualBert model)"),YYe=l(),cg=a("li"),hte=a("strong"),KYe=o("vit"),ZYe=o(" \u2014 "),zS=a("a"),eKe=o("ViTConfig"),oKe=o(" (ViT model)"),rKe=l(),fg=a("li"),pte=a("strong"),tKe=o("vit_mae"),aKe=o(" \u2014 "),WS=a("a"),nKe=o("ViTMAEConfig"),sKe=o(" (ViTMAE model)"),lKe=l(),mg=a("li"),_te=a("strong"),iKe=o("wav2vec2"),dKe=o(" \u2014 "),QS=a("a"),cKe=o("Wav2Vec2Config"),fKe=o(" (Wav2Vec2 model)"),mKe=l(),gg=a("li"),ute=a("strong"),gKe=o("wav2vec2-conformer"),hKe=o(" \u2014 "),HS=a("a"),pKe=o("Wav2Vec2ConformerConfig"),_Ke=o(" (Wav2Vec2-Conformer model)"),uKe=l(),hg=a("li"),bte=a("strong"),bKe=o("wavlm"),vKe=o(" \u2014 "),US=a("a"),FKe=o("WavLMConfig"),TKe=o(" (WavLM model)"),MKe=l(),pg=a("li"),vte=a("strong"),EKe=o("xglm"),CKe=o(" \u2014 "),JS=a("a"),wKe=o("XGLMConfig"),AKe=o(" (XGLM model)"),yKe=l(),_g=a("li"),Fte=a("strong"),LKe=o("xlm"),xKe=o(" \u2014 "),YS=a("a"),$Ke=o("XLMConfig"),kKe=o(" (XLM model)"),SKe=l(),ug=a("li"),Tte=a("strong"),RKe=o("xlm-prophetnet"),PKe=o(" \u2014 "),KS=a("a"),BKe=o("XLMProphetNetConfig"),IKe=o(" (XLMProphetNet model)"),NKe=l(),bg=a("li"),Mte=a("strong"),qKe=o("xlm-roberta"),jKe=o(" \u2014 "),ZS=a("a"),DKe=o("XLMRobertaConfig"),GKe=o(" (XLM-RoBERTa model)"),OKe=l(),vg=a("li"),Ete=a("strong"),VKe=o("xlm-roberta-xl"),XKe=o(" \u2014 "),eR=a("a"),zKe=o("XLMRobertaXLConfig"),WKe=o(" (XLM-RoBERTa-XL model)"),QKe=l(),Fg=a("li"),Cte=a("strong"),HKe=o("xlnet"),UKe=o(" \u2014 "),oR=a("a"),JKe=o("XLNetConfig"),YKe=o(" (XLNet model)"),KKe=l(),Tg=a("li"),wte=a("strong"),ZKe=o("yolos"),eZe=o(" \u2014 "),rR=a("a"),oZe=o("YolosConfig"),rZe=o(" (YOLOS model)"),tZe=l(),Mg=a("li"),Ate=a("strong"),aZe=o("yoso"),nZe=o(" \u2014 "),tR=a("a"),sZe=o("YosoConfig"),lZe=o(" (YOSO model)"),iZe=l(),F(Eg.$$.fragment),dZe=l(),Cg=a("div"),F(jA.$$.fragment),cZe=l(),yte=a("p"),fZe=o("Register a new configuration for this class."),wqe=l(),Ti=a("h2"),wg=a("a"),Lte=a("span"),F(DA.$$.fragment),mZe=l(),xte=a("span"),gZe=o("AutoTokenizer"),Aqe=l(),wo=a("div"),F(GA.$$.fragment),hZe=l(),OA=a("p"),pZe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),aR=a("a"),_Ze=o("AutoTokenizer.from_pretrained()"),uZe=o(" class method."),bZe=l(),VA=a("p"),vZe=o("This class cannot be instantiated directly using "),$te=a("code"),FZe=o("__init__()"),TZe=o(" (throws an error)."),MZe=l(),Cr=a("div"),F(XA.$$.fragment),EZe=l(),kte=a("p"),CZe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),wZe=l(),Aa=a("p"),AZe=o("The tokenizer class to instantiate is selected based on the "),Ste=a("code"),yZe=o("model_type"),LZe=o(` property of the config object (either
passed as an argument or loaded from `),Rte=a("code"),xZe=o("pretrained_model_name_or_path"),$Ze=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pte=a("code"),kZe=o("pretrained_model_name_or_path"),SZe=o(":"),RZe=l(),k=a("ul"),Sn=a("li"),Bte=a("strong"),PZe=o("albert"),BZe=o(" \u2014 "),nR=a("a"),IZe=o("AlbertTokenizer"),NZe=o(" or "),sR=a("a"),qZe=o("AlbertTokenizerFast"),jZe=o(" (ALBERT model)"),DZe=l(),Rn=a("li"),Ite=a("strong"),GZe=o("bart"),OZe=o(" \u2014 "),lR=a("a"),VZe=o("BartTokenizer"),XZe=o(" or "),iR=a("a"),zZe=o("BartTokenizerFast"),WZe=o(" (BART model)"),QZe=l(),Pn=a("li"),Nte=a("strong"),HZe=o("barthez"),UZe=o(" \u2014 "),dR=a("a"),JZe=o("BarthezTokenizer"),YZe=o(" or "),cR=a("a"),KZe=o("BarthezTokenizerFast"),ZZe=o(" (BARThez model)"),eeo=l(),Ag=a("li"),qte=a("strong"),oeo=o("bartpho"),reo=o(" \u2014 "),fR=a("a"),teo=o("BartphoTokenizer"),aeo=o(" (BARTpho model)"),neo=l(),Bn=a("li"),jte=a("strong"),seo=o("bert"),leo=o(" \u2014 "),mR=a("a"),ieo=o("BertTokenizer"),deo=o(" or "),gR=a("a"),ceo=o("BertTokenizerFast"),feo=o(" (BERT model)"),meo=l(),yg=a("li"),Dte=a("strong"),geo=o("bert-generation"),heo=o(" \u2014 "),hR=a("a"),peo=o("BertGenerationTokenizer"),_eo=o(" (Bert Generation model)"),ueo=l(),Lg=a("li"),Gte=a("strong"),beo=o("bert-japanese"),veo=o(" \u2014 "),pR=a("a"),Feo=o("BertJapaneseTokenizer"),Teo=o(" (BertJapanese model)"),Meo=l(),xg=a("li"),Ote=a("strong"),Eeo=o("bertweet"),Ceo=o(" \u2014 "),_R=a("a"),weo=o("BertweetTokenizer"),Aeo=o(" (Bertweet model)"),yeo=l(),In=a("li"),Vte=a("strong"),Leo=o("big_bird"),xeo=o(" \u2014 "),uR=a("a"),$eo=o("BigBirdTokenizer"),keo=o(" or "),bR=a("a"),Seo=o("BigBirdTokenizerFast"),Reo=o(" (BigBird model)"),Peo=l(),Nn=a("li"),Xte=a("strong"),Beo=o("bigbird_pegasus"),Ieo=o(" \u2014 "),vR=a("a"),Neo=o("PegasusTokenizer"),qeo=o(" or "),FR=a("a"),jeo=o("PegasusTokenizerFast"),Deo=o(" (BigBirdPegasus model)"),Geo=l(),qn=a("li"),zte=a("strong"),Oeo=o("blenderbot"),Veo=o(" \u2014 "),TR=a("a"),Xeo=o("BlenderbotTokenizer"),zeo=o(" or "),MR=a("a"),Weo=o("BlenderbotTokenizerFast"),Qeo=o(" (Blenderbot model)"),Heo=l(),$g=a("li"),Wte=a("strong"),Ueo=o("blenderbot-small"),Jeo=o(" \u2014 "),ER=a("a"),Yeo=o("BlenderbotSmallTokenizer"),Keo=o(" (BlenderbotSmall model)"),Zeo=l(),kg=a("li"),Qte=a("strong"),eoo=o("byt5"),ooo=o(" \u2014 "),CR=a("a"),roo=o("ByT5Tokenizer"),too=o(" (ByT5 model)"),aoo=l(),jn=a("li"),Hte=a("strong"),noo=o("camembert"),soo=o(" \u2014 "),wR=a("a"),loo=o("CamembertTokenizer"),ioo=o(" or "),AR=a("a"),doo=o("CamembertTokenizerFast"),coo=o(" (CamemBERT model)"),foo=l(),Sg=a("li"),Ute=a("strong"),moo=o("canine"),goo=o(" \u2014 "),yR=a("a"),hoo=o("CanineTokenizer"),poo=o(" (Canine model)"),_oo=l(),Dn=a("li"),Jte=a("strong"),uoo=o("clip"),boo=o(" \u2014 "),LR=a("a"),voo=o("CLIPTokenizer"),Foo=o(" or "),xR=a("a"),Too=o("CLIPTokenizerFast"),Moo=o(" (CLIP model)"),Eoo=l(),Gn=a("li"),Yte=a("strong"),Coo=o("convbert"),woo=o(" \u2014 "),$R=a("a"),Aoo=o("ConvBertTokenizer"),yoo=o(" or "),kR=a("a"),Loo=o("ConvBertTokenizerFast"),xoo=o(" (ConvBERT model)"),$oo=l(),On=a("li"),Kte=a("strong"),koo=o("cpm"),Soo=o(" \u2014 "),SR=a("a"),Roo=o("CpmTokenizer"),Poo=o(" or "),RR=a("a"),Boo=o("CpmTokenizerFast"),Ioo=o(" (CPM model)"),Noo=l(),Rg=a("li"),Zte=a("strong"),qoo=o("ctrl"),joo=o(" \u2014 "),PR=a("a"),Doo=o("CTRLTokenizer"),Goo=o(" (CTRL model)"),Ooo=l(),Vn=a("li"),eae=a("strong"),Voo=o("data2vec-text"),Xoo=o(" \u2014 "),BR=a("a"),zoo=o("RobertaTokenizer"),Woo=o(" or "),IR=a("a"),Qoo=o("RobertaTokenizerFast"),Hoo=o(" (Data2VecText model)"),Uoo=l(),Xn=a("li"),oae=a("strong"),Joo=o("deberta"),Yoo=o(" \u2014 "),NR=a("a"),Koo=o("DebertaTokenizer"),Zoo=o(" or "),qR=a("a"),ero=o("DebertaTokenizerFast"),oro=o(" (DeBERTa model)"),rro=l(),zn=a("li"),rae=a("strong"),tro=o("deberta-v2"),aro=o(" \u2014 "),jR=a("a"),nro=o("DebertaV2Tokenizer"),sro=o(" or "),DR=a("a"),lro=o("DebertaV2TokenizerFast"),iro=o(" (DeBERTa-v2 model)"),dro=l(),Wn=a("li"),tae=a("strong"),cro=o("distilbert"),fro=o(" \u2014 "),GR=a("a"),mro=o("DistilBertTokenizer"),gro=o(" or "),OR=a("a"),hro=o("DistilBertTokenizerFast"),pro=o(" (DistilBERT model)"),_ro=l(),Qn=a("li"),aae=a("strong"),uro=o("dpr"),bro=o(" \u2014 "),VR=a("a"),vro=o("DPRQuestionEncoderTokenizer"),Fro=o(" or "),XR=a("a"),Tro=o("DPRQuestionEncoderTokenizerFast"),Mro=o(" (DPR model)"),Ero=l(),Hn=a("li"),nae=a("strong"),Cro=o("electra"),wro=o(" \u2014 "),zR=a("a"),Aro=o("ElectraTokenizer"),yro=o(" or "),WR=a("a"),Lro=o("ElectraTokenizerFast"),xro=o(" (ELECTRA model)"),$ro=l(),Pg=a("li"),sae=a("strong"),kro=o("flaubert"),Sro=o(" \u2014 "),QR=a("a"),Rro=o("FlaubertTokenizer"),Pro=o(" (FlauBERT model)"),Bro=l(),Un=a("li"),lae=a("strong"),Iro=o("fnet"),Nro=o(" \u2014 "),HR=a("a"),qro=o("FNetTokenizer"),jro=o(" or "),UR=a("a"),Dro=o("FNetTokenizerFast"),Gro=o(" (FNet model)"),Oro=l(),Bg=a("li"),iae=a("strong"),Vro=o("fsmt"),Xro=o(" \u2014 "),JR=a("a"),zro=o("FSMTTokenizer"),Wro=o(" (FairSeq Machine-Translation model)"),Qro=l(),Jn=a("li"),dae=a("strong"),Hro=o("funnel"),Uro=o(" \u2014 "),YR=a("a"),Jro=o("FunnelTokenizer"),Yro=o(" or "),KR=a("a"),Kro=o("FunnelTokenizerFast"),Zro=o(" (Funnel Transformer model)"),eto=l(),Yn=a("li"),cae=a("strong"),oto=o("gpt2"),rto=o(" \u2014 "),ZR=a("a"),tto=o("GPT2Tokenizer"),ato=o(" or "),eP=a("a"),nto=o("GPT2TokenizerFast"),sto=o(" (OpenAI GPT-2 model)"),lto=l(),Kn=a("li"),fae=a("strong"),ito=o("gpt_neo"),dto=o(" \u2014 "),oP=a("a"),cto=o("GPT2Tokenizer"),fto=o(" or "),rP=a("a"),mto=o("GPT2TokenizerFast"),gto=o(" (GPT Neo model)"),hto=l(),Ig=a("li"),mae=a("strong"),pto=o("gpt_neox"),_to=o(" \u2014 "),tP=a("a"),uto=o("GPTNeoXTokenizerFast"),bto=o(" (GPT NeoX model)"),vto=l(),Zn=a("li"),gae=a("strong"),Fto=o("gptj"),Tto=o(" \u2014 "),aP=a("a"),Mto=o("GPT2Tokenizer"),Eto=o(" or "),nP=a("a"),Cto=o("GPT2TokenizerFast"),wto=o(" (GPT-J model)"),Ato=l(),es=a("li"),hae=a("strong"),yto=o("herbert"),Lto=o(" \u2014 "),sP=a("a"),xto=o("HerbertTokenizer"),$to=o(" or "),lP=a("a"),kto=o("HerbertTokenizerFast"),Sto=o(" (HerBERT model)"),Rto=l(),Ng=a("li"),pae=a("strong"),Pto=o("hubert"),Bto=o(" \u2014 "),iP=a("a"),Ito=o("Wav2Vec2CTCTokenizer"),Nto=o(" (Hubert model)"),qto=l(),os=a("li"),_ae=a("strong"),jto=o("ibert"),Dto=o(" \u2014 "),dP=a("a"),Gto=o("RobertaTokenizer"),Oto=o(" or "),cP=a("a"),Vto=o("RobertaTokenizerFast"),Xto=o(" (I-BERT model)"),zto=l(),rs=a("li"),uae=a("strong"),Wto=o("layoutlm"),Qto=o(" \u2014 "),fP=a("a"),Hto=o("LayoutLMTokenizer"),Uto=o(" or "),mP=a("a"),Jto=o("LayoutLMTokenizerFast"),Yto=o(" (LayoutLM model)"),Kto=l(),ts=a("li"),bae=a("strong"),Zto=o("layoutlmv2"),eao=o(" \u2014 "),gP=a("a"),oao=o("LayoutLMv2Tokenizer"),rao=o(" or "),hP=a("a"),tao=o("LayoutLMv2TokenizerFast"),aao=o(" (LayoutLMv2 model)"),nao=l(),as=a("li"),vae=a("strong"),sao=o("layoutlmv3"),lao=o(" \u2014 "),pP=a("a"),iao=o("LayoutLMv3Tokenizer"),dao=o(" or "),_P=a("a"),cao=o("LayoutLMv3TokenizerFast"),fao=o(" (LayoutLMv3 model)"),mao=l(),ns=a("li"),Fae=a("strong"),gao=o("layoutxlm"),hao=o(" \u2014 "),uP=a("a"),pao=o("LayoutXLMTokenizer"),_ao=o(" or "),bP=a("a"),uao=o("LayoutXLMTokenizerFast"),bao=o(" (LayoutXLM model)"),vao=l(),ss=a("li"),Tae=a("strong"),Fao=o("led"),Tao=o(" \u2014 "),vP=a("a"),Mao=o("LEDTokenizer"),Eao=o(" or "),FP=a("a"),Cao=o("LEDTokenizerFast"),wao=o(" (LED model)"),Aao=l(),ls=a("li"),Mae=a("strong"),yao=o("longformer"),Lao=o(" \u2014 "),TP=a("a"),xao=o("LongformerTokenizer"),$ao=o(" or "),MP=a("a"),kao=o("LongformerTokenizerFast"),Sao=o(" (Longformer model)"),Rao=l(),qg=a("li"),Eae=a("strong"),Pao=o("luke"),Bao=o(" \u2014 "),EP=a("a"),Iao=o("LukeTokenizer"),Nao=o(" (LUKE model)"),qao=l(),is=a("li"),Cae=a("strong"),jao=o("lxmert"),Dao=o(" \u2014 "),CP=a("a"),Gao=o("LxmertTokenizer"),Oao=o(" or "),wP=a("a"),Vao=o("LxmertTokenizerFast"),Xao=o(" (LXMERT model)"),zao=l(),jg=a("li"),wae=a("strong"),Wao=o("m2m_100"),Qao=o(" \u2014 "),AP=a("a"),Hao=o("M2M100Tokenizer"),Uao=o(" (M2M100 model)"),Jao=l(),Dg=a("li"),Aae=a("strong"),Yao=o("marian"),Kao=o(" \u2014 "),yP=a("a"),Zao=o("MarianTokenizer"),eno=o(" (Marian model)"),ono=l(),ds=a("li"),yae=a("strong"),rno=o("mbart"),tno=o(" \u2014 "),LP=a("a"),ano=o("MBartTokenizer"),nno=o(" or "),xP=a("a"),sno=o("MBartTokenizerFast"),lno=o(" (mBART model)"),ino=l(),cs=a("li"),Lae=a("strong"),dno=o("mbart50"),cno=o(" \u2014 "),$P=a("a"),fno=o("MBart50Tokenizer"),mno=o(" or "),kP=a("a"),gno=o("MBart50TokenizerFast"),hno=o(" (mBART-50 model)"),pno=l(),fs=a("li"),xae=a("strong"),_no=o("megatron-bert"),uno=o(" \u2014 "),SP=a("a"),bno=o("BertTokenizer"),vno=o(" or "),RP=a("a"),Fno=o("BertTokenizerFast"),Tno=o(" (MegatronBert model)"),Mno=l(),Gg=a("li"),$ae=a("strong"),Eno=o("mluke"),Cno=o(" \u2014 "),PP=a("a"),wno=o("MLukeTokenizer"),Ano=o(" (mLUKE model)"),yno=l(),ms=a("li"),kae=a("strong"),Lno=o("mobilebert"),xno=o(" \u2014 "),BP=a("a"),$no=o("MobileBertTokenizer"),kno=o(" or "),IP=a("a"),Sno=o("MobileBertTokenizerFast"),Rno=o(" (MobileBERT model)"),Pno=l(),gs=a("li"),Sae=a("strong"),Bno=o("mpnet"),Ino=o(" \u2014 "),NP=a("a"),Nno=o("MPNetTokenizer"),qno=o(" or "),qP=a("a"),jno=o("MPNetTokenizerFast"),Dno=o(" (MPNet model)"),Gno=l(),hs=a("li"),Rae=a("strong"),Ono=o("mt5"),Vno=o(" \u2014 "),jP=a("a"),Xno=o("MT5Tokenizer"),zno=o(" or "),DP=a("a"),Wno=o("MT5TokenizerFast"),Qno=o(" (mT5 model)"),Hno=l(),ps=a("li"),Pae=a("strong"),Uno=o("nystromformer"),Jno=o(" \u2014 "),GP=a("a"),Yno=o("AlbertTokenizer"),Kno=o(" or "),OP=a("a"),Zno=o("AlbertTokenizerFast"),eso=o(" (Nystromformer model)"),oso=l(),_s=a("li"),Bae=a("strong"),rso=o("openai-gpt"),tso=o(" \u2014 "),VP=a("a"),aso=o("OpenAIGPTTokenizer"),nso=o(" or "),XP=a("a"),sso=o("OpenAIGPTTokenizerFast"),lso=o(" (OpenAI GPT model)"),iso=l(),Og=a("li"),Iae=a("strong"),dso=o("opt"),cso=o(" \u2014 "),zP=a("a"),fso=o("GPT2Tokenizer"),mso=o(" (OPT model)"),gso=l(),us=a("li"),Nae=a("strong"),hso=o("pegasus"),pso=o(" \u2014 "),WP=a("a"),_so=o("PegasusTokenizer"),uso=o(" or "),QP=a("a"),bso=o("PegasusTokenizerFast"),vso=o(" (Pegasus model)"),Fso=l(),Vg=a("li"),qae=a("strong"),Tso=o("perceiver"),Mso=o(" \u2014 "),HP=a("a"),Eso=o("PerceiverTokenizer"),Cso=o(" (Perceiver model)"),wso=l(),Xg=a("li"),jae=a("strong"),Aso=o("phobert"),yso=o(" \u2014 "),UP=a("a"),Lso=o("PhobertTokenizer"),xso=o(" (PhoBERT model)"),$so=l(),zg=a("li"),Dae=a("strong"),kso=o("plbart"),Sso=o(" \u2014 "),JP=a("a"),Rso=o("PLBartTokenizer"),Pso=o(" (PLBart model)"),Bso=l(),Wg=a("li"),Gae=a("strong"),Iso=o("prophetnet"),Nso=o(" \u2014 "),YP=a("a"),qso=o("ProphetNetTokenizer"),jso=o(" (ProphetNet model)"),Dso=l(),bs=a("li"),Oae=a("strong"),Gso=o("qdqbert"),Oso=o(" \u2014 "),KP=a("a"),Vso=o("BertTokenizer"),Xso=o(" or "),ZP=a("a"),zso=o("BertTokenizerFast"),Wso=o(" (QDQBert model)"),Qso=l(),Qg=a("li"),Vae=a("strong"),Hso=o("rag"),Uso=o(" \u2014 "),eB=a("a"),Jso=o("RagTokenizer"),Yso=o(" (RAG model)"),Kso=l(),vs=a("li"),Xae=a("strong"),Zso=o("realm"),elo=o(" \u2014 "),oB=a("a"),olo=o("RealmTokenizer"),rlo=o(" or "),rB=a("a"),tlo=o("RealmTokenizerFast"),alo=o(" (Realm model)"),nlo=l(),Fs=a("li"),zae=a("strong"),slo=o("reformer"),llo=o(" \u2014 "),tB=a("a"),ilo=o("ReformerTokenizer"),dlo=o(" or "),aB=a("a"),clo=o("ReformerTokenizerFast"),flo=o(" (Reformer model)"),mlo=l(),Ts=a("li"),Wae=a("strong"),glo=o("rembert"),hlo=o(" \u2014 "),nB=a("a"),plo=o("RemBertTokenizer"),_lo=o(" or "),sB=a("a"),ulo=o("RemBertTokenizerFast"),blo=o(" (RemBERT model)"),vlo=l(),Ms=a("li"),Qae=a("strong"),Flo=o("retribert"),Tlo=o(" \u2014 "),lB=a("a"),Mlo=o("RetriBertTokenizer"),Elo=o(" or "),iB=a("a"),Clo=o("RetriBertTokenizerFast"),wlo=o(" (RetriBERT model)"),Alo=l(),Es=a("li"),Hae=a("strong"),ylo=o("roberta"),Llo=o(" \u2014 "),dB=a("a"),xlo=o("RobertaTokenizer"),$lo=o(" or "),cB=a("a"),klo=o("RobertaTokenizerFast"),Slo=o(" (RoBERTa model)"),Rlo=l(),Cs=a("li"),Uae=a("strong"),Plo=o("roformer"),Blo=o(" \u2014 "),fB=a("a"),Ilo=o("RoFormerTokenizer"),Nlo=o(" or "),mB=a("a"),qlo=o("RoFormerTokenizerFast"),jlo=o(" (RoFormer model)"),Dlo=l(),Hg=a("li"),Jae=a("strong"),Glo=o("speech_to_text"),Olo=o(" \u2014 "),gB=a("a"),Vlo=o("Speech2TextTokenizer"),Xlo=o(" (Speech2Text model)"),zlo=l(),Ug=a("li"),Yae=a("strong"),Wlo=o("speech_to_text_2"),Qlo=o(" \u2014 "),hB=a("a"),Hlo=o("Speech2Text2Tokenizer"),Ulo=o(" (Speech2Text2 model)"),Jlo=l(),ws=a("li"),Kae=a("strong"),Ylo=o("splinter"),Klo=o(" \u2014 "),pB=a("a"),Zlo=o("SplinterTokenizer"),eio=o(" or "),_B=a("a"),oio=o("SplinterTokenizerFast"),rio=o(" (Splinter model)"),tio=l(),As=a("li"),Zae=a("strong"),aio=o("squeezebert"),nio=o(" \u2014 "),uB=a("a"),sio=o("SqueezeBertTokenizer"),lio=o(" or "),bB=a("a"),iio=o("SqueezeBertTokenizerFast"),dio=o(" (SqueezeBERT model)"),cio=l(),ys=a("li"),ene=a("strong"),fio=o("t5"),mio=o(" \u2014 "),vB=a("a"),gio=o("T5Tokenizer"),hio=o(" or "),FB=a("a"),pio=o("T5TokenizerFast"),_io=o(" (T5 model)"),uio=l(),Jg=a("li"),one=a("strong"),bio=o("tapas"),vio=o(" \u2014 "),TB=a("a"),Fio=o("TapasTokenizer"),Tio=o(" (TAPAS model)"),Mio=l(),Yg=a("li"),rne=a("strong"),Eio=o("tapex"),Cio=o(" \u2014 "),MB=a("a"),wio=o("TapexTokenizer"),Aio=o(" (TAPEX model)"),yio=l(),Kg=a("li"),tne=a("strong"),Lio=o("transfo-xl"),xio=o(" \u2014 "),EB=a("a"),$io=o("TransfoXLTokenizer"),kio=o(" (Transformer-XL model)"),Sio=l(),Ls=a("li"),ane=a("strong"),Rio=o("visual_bert"),Pio=o(" \u2014 "),CB=a("a"),Bio=o("BertTokenizer"),Iio=o(" or "),wB=a("a"),Nio=o("BertTokenizerFast"),qio=o(" (VisualBert model)"),jio=l(),Zg=a("li"),nne=a("strong"),Dio=o("wav2vec2"),Gio=o(" \u2014 "),AB=a("a"),Oio=o("Wav2Vec2CTCTokenizer"),Vio=o(" (Wav2Vec2 model)"),Xio=l(),eh=a("li"),sne=a("strong"),zio=o("wav2vec2-conformer"),Wio=o(" \u2014 "),yB=a("a"),Qio=o("Wav2Vec2CTCTokenizer"),Hio=o(" (Wav2Vec2-Conformer model)"),Uio=l(),oh=a("li"),lne=a("strong"),Jio=o("wav2vec2_phoneme"),Yio=o(" \u2014 "),LB=a("a"),Kio=o("Wav2Vec2PhonemeCTCTokenizer"),Zio=o(" (Wav2Vec2Phoneme model)"),edo=l(),xs=a("li"),ine=a("strong"),odo=o("xglm"),rdo=o(" \u2014 "),xB=a("a"),tdo=o("XGLMTokenizer"),ado=o(" or "),$B=a("a"),ndo=o("XGLMTokenizerFast"),sdo=o(" (XGLM model)"),ldo=l(),rh=a("li"),dne=a("strong"),ido=o("xlm"),ddo=o(" \u2014 "),kB=a("a"),cdo=o("XLMTokenizer"),fdo=o(" (XLM model)"),mdo=l(),th=a("li"),cne=a("strong"),gdo=o("xlm-prophetnet"),hdo=o(" \u2014 "),SB=a("a"),pdo=o("XLMProphetNetTokenizer"),_do=o(" (XLMProphetNet model)"),udo=l(),$s=a("li"),fne=a("strong"),bdo=o("xlm-roberta"),vdo=o(" \u2014 "),RB=a("a"),Fdo=o("XLMRobertaTokenizer"),Tdo=o(" or "),PB=a("a"),Mdo=o("XLMRobertaTokenizerFast"),Edo=o(" (XLM-RoBERTa model)"),Cdo=l(),ks=a("li"),mne=a("strong"),wdo=o("xlm-roberta-xl"),Ado=o(" \u2014 "),BB=a("a"),ydo=o("RobertaTokenizer"),Ldo=o(" or "),IB=a("a"),xdo=o("RobertaTokenizerFast"),$do=o(" (XLM-RoBERTa-XL model)"),kdo=l(),Ss=a("li"),gne=a("strong"),Sdo=o("xlnet"),Rdo=o(" \u2014 "),NB=a("a"),Pdo=o("XLNetTokenizer"),Bdo=o(" or "),qB=a("a"),Ido=o("XLNetTokenizerFast"),Ndo=o(" (XLNet model)"),qdo=l(),Rs=a("li"),hne=a("strong"),jdo=o("yoso"),Ddo=o(" \u2014 "),jB=a("a"),Gdo=o("AlbertTokenizer"),Odo=o(" or "),DB=a("a"),Vdo=o("AlbertTokenizerFast"),Xdo=o(" (YOSO model)"),zdo=l(),F(ah.$$.fragment),Wdo=l(),nh=a("div"),F(zA.$$.fragment),Qdo=l(),pne=a("p"),Hdo=o("Register a new tokenizer in this mapping."),yqe=l(),Mi=a("h2"),sh=a("a"),_ne=a("span"),F(WA.$$.fragment),Udo=l(),une=a("span"),Jdo=o("AutoFeatureExtractor"),Lqe=l(),Ao=a("div"),F(QA.$$.fragment),Ydo=l(),HA=a("p"),Kdo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),GB=a("a"),Zdo=o("AutoFeatureExtractor.from_pretrained()"),eco=o(" class method."),oco=l(),UA=a("p"),rco=o("This class cannot be instantiated directly using "),bne=a("code"),tco=o("__init__()"),aco=o(" (throws an error)."),nco=l(),He=a("div"),F(JA.$$.fragment),sco=l(),vne=a("p"),lco=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),ico=l(),ya=a("p"),dco=o("The feature extractor class to instantiate is selected based on the "),Fne=a("code"),cco=o("model_type"),fco=o(` property of the config object
(either passed as an argument or loaded from `),Tne=a("code"),mco=o("pretrained_model_name_or_path"),gco=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Mne=a("code"),hco=o("pretrained_model_name_or_path"),pco=o(":"),_co=l(),Y=a("ul"),lh=a("li"),Ene=a("strong"),uco=o("beit"),bco=o(" \u2014 "),OB=a("a"),vco=o("BeitFeatureExtractor"),Fco=o(" (BEiT model)"),Tco=l(),ih=a("li"),Cne=a("strong"),Mco=o("clip"),Eco=o(" \u2014 "),VB=a("a"),Cco=o("CLIPFeatureExtractor"),wco=o(" (CLIP model)"),Aco=l(),dh=a("li"),wne=a("strong"),yco=o("convnext"),Lco=o(" \u2014 "),XB=a("a"),xco=o("ConvNextFeatureExtractor"),$co=o(" (ConvNext model)"),kco=l(),ch=a("li"),Ane=a("strong"),Sco=o("cvt"),Rco=o(" \u2014 "),zB=a("a"),Pco=o("ConvNextFeatureExtractor"),Bco=o(" (CvT model)"),Ico=l(),fh=a("li"),yne=a("strong"),Nco=o("data2vec-audio"),qco=o(" \u2014 "),WB=a("a"),jco=o("Wav2Vec2FeatureExtractor"),Dco=o(" (Data2VecAudio model)"),Gco=l(),mh=a("li"),Lne=a("strong"),Oco=o("data2vec-vision"),Vco=o(" \u2014 "),QB=a("a"),Xco=o("BeitFeatureExtractor"),zco=o(" (Data2VecVision model)"),Wco=l(),gh=a("li"),xne=a("strong"),Qco=o("deit"),Hco=o(" \u2014 "),HB=a("a"),Uco=o("DeiTFeatureExtractor"),Jco=o(" (DeiT model)"),Yco=l(),hh=a("li"),$ne=a("strong"),Kco=o("detr"),Zco=o(" \u2014 "),UB=a("a"),efo=o("DetrFeatureExtractor"),ofo=o(" (DETR model)"),rfo=l(),ph=a("li"),kne=a("strong"),tfo=o("dpt"),afo=o(" \u2014 "),JB=a("a"),nfo=o("DPTFeatureExtractor"),sfo=o(" (DPT model)"),lfo=l(),_h=a("li"),Sne=a("strong"),ifo=o("flava"),dfo=o(" \u2014 "),YB=a("a"),cfo=o("FlavaFeatureExtractor"),ffo=o(" (Flava model)"),mfo=l(),uh=a("li"),Rne=a("strong"),gfo=o("glpn"),hfo=o(" \u2014 "),KB=a("a"),pfo=o("GLPNFeatureExtractor"),_fo=o(" (GLPN model)"),ufo=l(),bh=a("li"),Pne=a("strong"),bfo=o("hubert"),vfo=o(" \u2014 "),ZB=a("a"),Ffo=o("Wav2Vec2FeatureExtractor"),Tfo=o(" (Hubert model)"),Mfo=l(),vh=a("li"),Bne=a("strong"),Efo=o("imagegpt"),Cfo=o(" \u2014 "),eI=a("a"),wfo=o("ImageGPTFeatureExtractor"),Afo=o(" (ImageGPT model)"),yfo=l(),Fh=a("li"),Ine=a("strong"),Lfo=o("layoutlmv2"),xfo=o(" \u2014 "),oI=a("a"),$fo=o("LayoutLMv2FeatureExtractor"),kfo=o(" (LayoutLMv2 model)"),Sfo=l(),Th=a("li"),Nne=a("strong"),Rfo=o("layoutlmv3"),Pfo=o(" \u2014 "),rI=a("a"),Bfo=o("LayoutLMv3FeatureExtractor"),Ifo=o(" (LayoutLMv3 model)"),Nfo=l(),Mh=a("li"),qne=a("strong"),qfo=o("maskformer"),jfo=o(" \u2014 "),tI=a("a"),Dfo=o("MaskFormerFeatureExtractor"),Gfo=o(" (MaskFormer model)"),Ofo=l(),Eh=a("li"),jne=a("strong"),Vfo=o("perceiver"),Xfo=o(" \u2014 "),aI=a("a"),zfo=o("PerceiverFeatureExtractor"),Wfo=o(" (Perceiver model)"),Qfo=l(),Ch=a("li"),Dne=a("strong"),Hfo=o("poolformer"),Ufo=o(" \u2014 "),nI=a("a"),Jfo=o("PoolFormerFeatureExtractor"),Yfo=o(" (PoolFormer model)"),Kfo=l(),wh=a("li"),Gne=a("strong"),Zfo=o("regnet"),emo=o(" \u2014 "),sI=a("a"),omo=o("ConvNextFeatureExtractor"),rmo=o(" (RegNet model)"),tmo=l(),Ah=a("li"),One=a("strong"),amo=o("resnet"),nmo=o(" \u2014 "),lI=a("a"),smo=o("ConvNextFeatureExtractor"),lmo=o(" (ResNet model)"),imo=l(),yh=a("li"),Vne=a("strong"),dmo=o("segformer"),cmo=o(" \u2014 "),iI=a("a"),fmo=o("SegformerFeatureExtractor"),mmo=o(" (SegFormer model)"),gmo=l(),Lh=a("li"),Xne=a("strong"),hmo=o("speech_to_text"),pmo=o(" \u2014 "),dI=a("a"),_mo=o("Speech2TextFeatureExtractor"),umo=o(" (Speech2Text model)"),bmo=l(),xh=a("li"),zne=a("strong"),vmo=o("swin"),Fmo=o(" \u2014 "),cI=a("a"),Tmo=o("ViTFeatureExtractor"),Mmo=o(" (Swin model)"),Emo=l(),$h=a("li"),Wne=a("strong"),Cmo=o("van"),wmo=o(" \u2014 "),fI=a("a"),Amo=o("ConvNextFeatureExtractor"),ymo=o(" (VAN model)"),Lmo=l(),kh=a("li"),Qne=a("strong"),xmo=o("vit"),$mo=o(" \u2014 "),mI=a("a"),kmo=o("ViTFeatureExtractor"),Smo=o(" (ViT model)"),Rmo=l(),Sh=a("li"),Hne=a("strong"),Pmo=o("vit_mae"),Bmo=o(" \u2014 "),gI=a("a"),Imo=o("ViTFeatureExtractor"),Nmo=o(" (ViTMAE model)"),qmo=l(),Rh=a("li"),Une=a("strong"),jmo=o("wav2vec2"),Dmo=o(" \u2014 "),hI=a("a"),Gmo=o("Wav2Vec2FeatureExtractor"),Omo=o(" (Wav2Vec2 model)"),Vmo=l(),Ph=a("li"),Jne=a("strong"),Xmo=o("wav2vec2-conformer"),zmo=o(" \u2014 "),pI=a("a"),Wmo=o("Wav2Vec2FeatureExtractor"),Qmo=o(" (Wav2Vec2-Conformer model)"),Hmo=l(),Bh=a("li"),Yne=a("strong"),Umo=o("yolos"),Jmo=o(" \u2014 "),_I=a("a"),Ymo=o("YolosFeatureExtractor"),Kmo=o(" (YOLOS model)"),Zmo=l(),F(Ih.$$.fragment),ego=l(),F(Nh.$$.fragment),ogo=l(),qh=a("div"),F(YA.$$.fragment),rgo=l(),Kne=a("p"),tgo=o("Register a new feature extractor for this class."),xqe=l(),Ei=a("h2"),jh=a("a"),Zne=a("span"),F(KA.$$.fragment),ago=l(),ese=a("span"),ngo=o("AutoProcessor"),$qe=l(),yo=a("div"),F(ZA.$$.fragment),sgo=l(),ey=a("p"),lgo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),uI=a("a"),igo=o("AutoProcessor.from_pretrained()"),dgo=o(" class method."),cgo=l(),oy=a("p"),fgo=o("This class cannot be instantiated directly using "),ose=a("code"),mgo=o("__init__()"),ggo=o(" (throws an error)."),hgo=l(),Ue=a("div"),F(ry.$$.fragment),pgo=l(),rse=a("p"),_go=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),ugo=l(),Ci=a("p"),bgo=o("The processor class to instantiate is selected based on the "),tse=a("code"),vgo=o("model_type"),Fgo=o(` property of the config object (either
passed as an argument or loaded from `),ase=a("code"),Tgo=o("pretrained_model_name_or_path"),Mgo=o(" if possible):"),Ego=l(),he=a("ul"),Dh=a("li"),nse=a("strong"),Cgo=o("clip"),wgo=o(" \u2014 "),bI=a("a"),Ago=o("CLIPProcessor"),ygo=o(" (CLIP model)"),Lgo=l(),Gh=a("li"),sse=a("strong"),xgo=o("flava"),$go=o(" \u2014 "),lse=a("code"),kgo=o("FLAVAProcessor"),Sgo=o(" (Flava model)"),Rgo=l(),Oh=a("li"),ise=a("strong"),Pgo=o("layoutlmv2"),Bgo=o(" \u2014 "),vI=a("a"),Igo=o("LayoutLMv2Processor"),Ngo=o(" (LayoutLMv2 model)"),qgo=l(),Vh=a("li"),dse=a("strong"),jgo=o("layoutlmv3"),Dgo=o(" \u2014 "),FI=a("a"),Ggo=o("LayoutLMv3Processor"),Ogo=o(" (LayoutLMv3 model)"),Vgo=l(),Xh=a("li"),cse=a("strong"),Xgo=o("layoutxlm"),zgo=o(" \u2014 "),TI=a("a"),Wgo=o("LayoutXLMProcessor"),Qgo=o(" (LayoutXLM model)"),Hgo=l(),zh=a("li"),fse=a("strong"),Ugo=o("sew"),Jgo=o(" \u2014 "),MI=a("a"),Ygo=o("Wav2Vec2Processor"),Kgo=o(" (SEW model)"),Zgo=l(),Wh=a("li"),mse=a("strong"),eho=o("sew-d"),oho=o(" \u2014 "),EI=a("a"),rho=o("Wav2Vec2Processor"),tho=o(" (SEW-D model)"),aho=l(),Qh=a("li"),gse=a("strong"),nho=o("speech_to_text"),sho=o(" \u2014 "),CI=a("a"),lho=o("Speech2TextProcessor"),iho=o(" (Speech2Text model)"),dho=l(),Hh=a("li"),hse=a("strong"),cho=o("speech_to_text_2"),fho=o(" \u2014 "),wI=a("a"),mho=o("Speech2Text2Processor"),gho=o(" (Speech2Text2 model)"),hho=l(),Uh=a("li"),pse=a("strong"),pho=o("trocr"),_ho=o(" \u2014 "),AI=a("a"),uho=o("TrOCRProcessor"),bho=o(" (TrOCR model)"),vho=l(),Jh=a("li"),_se=a("strong"),Fho=o("unispeech"),Tho=o(" \u2014 "),yI=a("a"),Mho=o("Wav2Vec2Processor"),Eho=o(" (UniSpeech model)"),Cho=l(),Yh=a("li"),use=a("strong"),who=o("unispeech-sat"),Aho=o(" \u2014 "),LI=a("a"),yho=o("Wav2Vec2Processor"),Lho=o(" (UniSpeechSat model)"),xho=l(),Kh=a("li"),bse=a("strong"),$ho=o("vilt"),kho=o(" \u2014 "),xI=a("a"),Sho=o("ViltProcessor"),Rho=o(" (ViLT model)"),Pho=l(),Zh=a("li"),vse=a("strong"),Bho=o("vision-text-dual-encoder"),Iho=o(" \u2014 "),$I=a("a"),Nho=o("VisionTextDualEncoderProcessor"),qho=o(" (VisionTextDualEncoder model)"),jho=l(),ep=a("li"),Fse=a("strong"),Dho=o("wav2vec2"),Gho=o(" \u2014 "),kI=a("a"),Oho=o("Wav2Vec2Processor"),Vho=o(" (Wav2Vec2 model)"),Xho=l(),op=a("li"),Tse=a("strong"),zho=o("wav2vec2-conformer"),Who=o(" \u2014 "),SI=a("a"),Qho=o("Wav2Vec2Processor"),Hho=o(" (Wav2Vec2-Conformer model)"),Uho=l(),rp=a("li"),Mse=a("strong"),Jho=o("wavlm"),Yho=o(" \u2014 "),RI=a("a"),Kho=o("Wav2Vec2Processor"),Zho=o(" (WavLM model)"),epo=l(),F(tp.$$.fragment),opo=l(),F(ap.$$.fragment),rpo=l(),np=a("div"),F(ty.$$.fragment),tpo=l(),Ese=a("p"),apo=o("Register a new processor for this class."),kqe=l(),wi=a("h2"),sp=a("a"),Cse=a("span"),F(ay.$$.fragment),npo=l(),wse=a("span"),spo=o("AutoModel"),Sqe=l(),Lo=a("div"),F(ny.$$.fragment),lpo=l(),Ai=a("p"),ipo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),PI=a("a"),dpo=o("from_pretrained()"),cpo=o(" class method or the "),BI=a("a"),fpo=o("from_config()"),mpo=o(` class
method.`),gpo=l(),sy=a("p"),hpo=o("This class cannot be instantiated directly using "),Ase=a("code"),ppo=o("__init__()"),_po=o(" (throws an error)."),upo=l(),tt=a("div"),F(ly.$$.fragment),bpo=l(),yse=a("p"),vpo=o("Instantiates one of the base model classes of the library from a configuration."),Fpo=l(),yi=a("p"),Tpo=o(`Note:
Loading a model from its configuration file does `),Lse=a("strong"),Mpo=o("not"),Epo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),II=a("a"),Cpo=o("from_pretrained()"),wpo=o(" to load the model weights."),Apo=l(),F(lp.$$.fragment),ypo=l(),Je=a("div"),F(iy.$$.fragment),Lpo=l(),xse=a("p"),xpo=o("Instantiate one of the base model classes of the library from a pretrained model."),$po=l(),La=a("p"),kpo=o("The model class to instantiate is selected based on the "),$se=a("code"),Spo=o("model_type"),Rpo=o(` property of the config object (either
passed as an argument or loaded from `),kse=a("code"),Ppo=o("pretrained_model_name_or_path"),Bpo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sse=a("code"),Ipo=o("pretrained_model_name_or_path"),Npo=o(":"),qpo=l(),x=a("ul"),ip=a("li"),Rse=a("strong"),jpo=o("albert"),Dpo=o(" \u2014 "),NI=a("a"),Gpo=o("AlbertModel"),Opo=o(" (ALBERT model)"),Vpo=l(),dp=a("li"),Pse=a("strong"),Xpo=o("bart"),zpo=o(" \u2014 "),qI=a("a"),Wpo=o("BartModel"),Qpo=o(" (BART model)"),Hpo=l(),cp=a("li"),Bse=a("strong"),Upo=o("beit"),Jpo=o(" \u2014 "),jI=a("a"),Ypo=o("BeitModel"),Kpo=o(" (BEiT model)"),Zpo=l(),fp=a("li"),Ise=a("strong"),e_o=o("bert"),o_o=o(" \u2014 "),DI=a("a"),r_o=o("BertModel"),t_o=o(" (BERT model)"),a_o=l(),mp=a("li"),Nse=a("strong"),n_o=o("bert-generation"),s_o=o(" \u2014 "),GI=a("a"),l_o=o("BertGenerationEncoder"),i_o=o(" (Bert Generation model)"),d_o=l(),gp=a("li"),qse=a("strong"),c_o=o("big_bird"),f_o=o(" \u2014 "),OI=a("a"),m_o=o("BigBirdModel"),g_o=o(" (BigBird model)"),h_o=l(),hp=a("li"),jse=a("strong"),p_o=o("bigbird_pegasus"),__o=o(" \u2014 "),VI=a("a"),u_o=o("BigBirdPegasusModel"),b_o=o(" (BigBirdPegasus model)"),v_o=l(),pp=a("li"),Dse=a("strong"),F_o=o("blenderbot"),T_o=o(" \u2014 "),XI=a("a"),M_o=o("BlenderbotModel"),E_o=o(" (Blenderbot model)"),C_o=l(),_p=a("li"),Gse=a("strong"),w_o=o("blenderbot-small"),A_o=o(" \u2014 "),zI=a("a"),y_o=o("BlenderbotSmallModel"),L_o=o(" (BlenderbotSmall model)"),x_o=l(),up=a("li"),Ose=a("strong"),$_o=o("camembert"),k_o=o(" \u2014 "),WI=a("a"),S_o=o("CamembertModel"),R_o=o(" (CamemBERT model)"),P_o=l(),bp=a("li"),Vse=a("strong"),B_o=o("canine"),I_o=o(" \u2014 "),QI=a("a"),N_o=o("CanineModel"),q_o=o(" (Canine model)"),j_o=l(),vp=a("li"),Xse=a("strong"),D_o=o("clip"),G_o=o(" \u2014 "),HI=a("a"),O_o=o("CLIPModel"),V_o=o(" (CLIP model)"),X_o=l(),Fp=a("li"),zse=a("strong"),z_o=o("convbert"),W_o=o(" \u2014 "),UI=a("a"),Q_o=o("ConvBertModel"),H_o=o(" (ConvBERT model)"),U_o=l(),Tp=a("li"),Wse=a("strong"),J_o=o("convnext"),Y_o=o(" \u2014 "),JI=a("a"),K_o=o("ConvNextModel"),Z_o=o(" (ConvNext model)"),euo=l(),Mp=a("li"),Qse=a("strong"),ouo=o("ctrl"),ruo=o(" \u2014 "),YI=a("a"),tuo=o("CTRLModel"),auo=o(" (CTRL model)"),nuo=l(),Ep=a("li"),Hse=a("strong"),suo=o("cvt"),luo=o(" \u2014 "),KI=a("a"),iuo=o("CvtModel"),duo=o(" (CvT model)"),cuo=l(),Cp=a("li"),Use=a("strong"),fuo=o("data2vec-audio"),muo=o(" \u2014 "),ZI=a("a"),guo=o("Data2VecAudioModel"),huo=o(" (Data2VecAudio model)"),puo=l(),wp=a("li"),Jse=a("strong"),_uo=o("data2vec-text"),uuo=o(" \u2014 "),eN=a("a"),buo=o("Data2VecTextModel"),vuo=o(" (Data2VecText model)"),Fuo=l(),Ap=a("li"),Yse=a("strong"),Tuo=o("data2vec-vision"),Muo=o(" \u2014 "),oN=a("a"),Euo=o("Data2VecVisionModel"),Cuo=o(" (Data2VecVision model)"),wuo=l(),yp=a("li"),Kse=a("strong"),Auo=o("deberta"),yuo=o(" \u2014 "),rN=a("a"),Luo=o("DebertaModel"),xuo=o(" (DeBERTa model)"),$uo=l(),Lp=a("li"),Zse=a("strong"),kuo=o("deberta-v2"),Suo=o(" \u2014 "),tN=a("a"),Ruo=o("DebertaV2Model"),Puo=o(" (DeBERTa-v2 model)"),Buo=l(),xp=a("li"),ele=a("strong"),Iuo=o("decision_transformer"),Nuo=o(" \u2014 "),aN=a("a"),quo=o("DecisionTransformerModel"),juo=o(" (Decision Transformer model)"),Duo=l(),$p=a("li"),ole=a("strong"),Guo=o("deit"),Ouo=o(" \u2014 "),nN=a("a"),Vuo=o("DeiTModel"),Xuo=o(" (DeiT model)"),zuo=l(),kp=a("li"),rle=a("strong"),Wuo=o("detr"),Quo=o(" \u2014 "),sN=a("a"),Huo=o("DetrModel"),Uuo=o(" (DETR model)"),Juo=l(),Sp=a("li"),tle=a("strong"),Yuo=o("distilbert"),Kuo=o(" \u2014 "),lN=a("a"),Zuo=o("DistilBertModel"),e1o=o(" (DistilBERT model)"),o1o=l(),Rp=a("li"),ale=a("strong"),r1o=o("dpr"),t1o=o(" \u2014 "),iN=a("a"),a1o=o("DPRQuestionEncoder"),n1o=o(" (DPR model)"),s1o=l(),Pp=a("li"),nle=a("strong"),l1o=o("dpt"),i1o=o(" \u2014 "),dN=a("a"),d1o=o("DPTModel"),c1o=o(" (DPT model)"),f1o=l(),Bp=a("li"),sle=a("strong"),m1o=o("electra"),g1o=o(" \u2014 "),cN=a("a"),h1o=o("ElectraModel"),p1o=o(" (ELECTRA model)"),_1o=l(),Ip=a("li"),lle=a("strong"),u1o=o("flaubert"),b1o=o(" \u2014 "),fN=a("a"),v1o=o("FlaubertModel"),F1o=o(" (FlauBERT model)"),T1o=l(),Np=a("li"),ile=a("strong"),M1o=o("flava"),E1o=o(" \u2014 "),mN=a("a"),C1o=o("FlavaModel"),w1o=o(" (Flava model)"),A1o=l(),qp=a("li"),dle=a("strong"),y1o=o("fnet"),L1o=o(" \u2014 "),gN=a("a"),x1o=o("FNetModel"),$1o=o(" (FNet model)"),k1o=l(),jp=a("li"),cle=a("strong"),S1o=o("fsmt"),R1o=o(" \u2014 "),hN=a("a"),P1o=o("FSMTModel"),B1o=o(" (FairSeq Machine-Translation model)"),I1o=l(),Ps=a("li"),fle=a("strong"),N1o=o("funnel"),q1o=o(" \u2014 "),pN=a("a"),j1o=o("FunnelModel"),D1o=o(" or "),_N=a("a"),G1o=o("FunnelBaseModel"),O1o=o(" (Funnel Transformer model)"),V1o=l(),Dp=a("li"),mle=a("strong"),X1o=o("glpn"),z1o=o(" \u2014 "),uN=a("a"),W1o=o("GLPNModel"),Q1o=o(" (GLPN model)"),H1o=l(),Gp=a("li"),gle=a("strong"),U1o=o("gpt2"),J1o=o(" \u2014 "),bN=a("a"),Y1o=o("GPT2Model"),K1o=o(" (OpenAI GPT-2 model)"),Z1o=l(),Op=a("li"),hle=a("strong"),ebo=o("gpt_neo"),obo=o(" \u2014 "),vN=a("a"),rbo=o("GPTNeoModel"),tbo=o(" (GPT Neo model)"),abo=l(),Vp=a("li"),ple=a("strong"),nbo=o("gpt_neox"),sbo=o(" \u2014 "),FN=a("a"),lbo=o("GPTNeoXModel"),ibo=o(" (GPT NeoX model)"),dbo=l(),Xp=a("li"),_le=a("strong"),cbo=o("gptj"),fbo=o(" \u2014 "),TN=a("a"),mbo=o("GPTJModel"),gbo=o(" (GPT-J model)"),hbo=l(),zp=a("li"),ule=a("strong"),pbo=o("hubert"),_bo=o(" \u2014 "),MN=a("a"),ubo=o("HubertModel"),bbo=o(" (Hubert model)"),vbo=l(),Wp=a("li"),ble=a("strong"),Fbo=o("ibert"),Tbo=o(" \u2014 "),EN=a("a"),Mbo=o("IBertModel"),Ebo=o(" (I-BERT model)"),Cbo=l(),Qp=a("li"),vle=a("strong"),wbo=o("imagegpt"),Abo=o(" \u2014 "),CN=a("a"),ybo=o("ImageGPTModel"),Lbo=o(" (ImageGPT model)"),xbo=l(),Hp=a("li"),Fle=a("strong"),$bo=o("layoutlm"),kbo=o(" \u2014 "),wN=a("a"),Sbo=o("LayoutLMModel"),Rbo=o(" (LayoutLM model)"),Pbo=l(),Up=a("li"),Tle=a("strong"),Bbo=o("layoutlmv2"),Ibo=o(" \u2014 "),AN=a("a"),Nbo=o("LayoutLMv2Model"),qbo=o(" (LayoutLMv2 model)"),jbo=l(),Jp=a("li"),Mle=a("strong"),Dbo=o("layoutlmv3"),Gbo=o(" \u2014 "),yN=a("a"),Obo=o("LayoutLMv3Model"),Vbo=o(" (LayoutLMv3 model)"),Xbo=l(),Yp=a("li"),Ele=a("strong"),zbo=o("led"),Wbo=o(" \u2014 "),LN=a("a"),Qbo=o("LEDModel"),Hbo=o(" (LED model)"),Ubo=l(),Kp=a("li"),Cle=a("strong"),Jbo=o("longformer"),Ybo=o(" \u2014 "),xN=a("a"),Kbo=o("LongformerModel"),Zbo=o(" (Longformer model)"),e2o=l(),Zp=a("li"),wle=a("strong"),o2o=o("luke"),r2o=o(" \u2014 "),$N=a("a"),t2o=o("LukeModel"),a2o=o(" (LUKE model)"),n2o=l(),e_=a("li"),Ale=a("strong"),s2o=o("lxmert"),l2o=o(" \u2014 "),kN=a("a"),i2o=o("LxmertModel"),d2o=o(" (LXMERT model)"),c2o=l(),o_=a("li"),yle=a("strong"),f2o=o("m2m_100"),m2o=o(" \u2014 "),SN=a("a"),g2o=o("M2M100Model"),h2o=o(" (M2M100 model)"),p2o=l(),r_=a("li"),Lle=a("strong"),_2o=o("marian"),u2o=o(" \u2014 "),RN=a("a"),b2o=o("MarianModel"),v2o=o(" (Marian model)"),F2o=l(),t_=a("li"),xle=a("strong"),T2o=o("maskformer"),M2o=o(" \u2014 "),PN=a("a"),E2o=o("MaskFormerModel"),C2o=o(" (MaskFormer model)"),w2o=l(),a_=a("li"),$le=a("strong"),A2o=o("mbart"),y2o=o(" \u2014 "),BN=a("a"),L2o=o("MBartModel"),x2o=o(" (mBART model)"),$2o=l(),n_=a("li"),kle=a("strong"),k2o=o("megatron-bert"),S2o=o(" \u2014 "),IN=a("a"),R2o=o("MegatronBertModel"),P2o=o(" (MegatronBert model)"),B2o=l(),s_=a("li"),Sle=a("strong"),I2o=o("mobilebert"),N2o=o(" \u2014 "),NN=a("a"),q2o=o("MobileBertModel"),j2o=o(" (MobileBERT model)"),D2o=l(),l_=a("li"),Rle=a("strong"),G2o=o("mpnet"),O2o=o(" \u2014 "),qN=a("a"),V2o=o("MPNetModel"),X2o=o(" (MPNet model)"),z2o=l(),i_=a("li"),Ple=a("strong"),W2o=o("mt5"),Q2o=o(" \u2014 "),jN=a("a"),H2o=o("MT5Model"),U2o=o(" (mT5 model)"),J2o=l(),d_=a("li"),Ble=a("strong"),Y2o=o("nystromformer"),K2o=o(" \u2014 "),DN=a("a"),Z2o=o("NystromformerModel"),e5o=o(" (Nystromformer model)"),o5o=l(),c_=a("li"),Ile=a("strong"),r5o=o("openai-gpt"),t5o=o(" \u2014 "),GN=a("a"),a5o=o("OpenAIGPTModel"),n5o=o(" (OpenAI GPT model)"),s5o=l(),f_=a("li"),Nle=a("strong"),l5o=o("opt"),i5o=o(" \u2014 "),ON=a("a"),d5o=o("OPTModel"),c5o=o(" (OPT model)"),f5o=l(),m_=a("li"),qle=a("strong"),m5o=o("pegasus"),g5o=o(" \u2014 "),VN=a("a"),h5o=o("PegasusModel"),p5o=o(" (Pegasus model)"),_5o=l(),g_=a("li"),jle=a("strong"),u5o=o("perceiver"),b5o=o(" \u2014 "),XN=a("a"),v5o=o("PerceiverModel"),F5o=o(" (Perceiver model)"),T5o=l(),h_=a("li"),Dle=a("strong"),M5o=o("plbart"),E5o=o(" \u2014 "),zN=a("a"),C5o=o("PLBartModel"),w5o=o(" (PLBart model)"),A5o=l(),p_=a("li"),Gle=a("strong"),y5o=o("poolformer"),L5o=o(" \u2014 "),WN=a("a"),x5o=o("PoolFormerModel"),$5o=o(" (PoolFormer model)"),k5o=l(),__=a("li"),Ole=a("strong"),S5o=o("prophetnet"),R5o=o(" \u2014 "),QN=a("a"),P5o=o("ProphetNetModel"),B5o=o(" (ProphetNet model)"),I5o=l(),u_=a("li"),Vle=a("strong"),N5o=o("qdqbert"),q5o=o(" \u2014 "),HN=a("a"),j5o=o("QDQBertModel"),D5o=o(" (QDQBert model)"),G5o=l(),b_=a("li"),Xle=a("strong"),O5o=o("reformer"),V5o=o(" \u2014 "),UN=a("a"),X5o=o("ReformerModel"),z5o=o(" (Reformer model)"),W5o=l(),v_=a("li"),zle=a("strong"),Q5o=o("regnet"),H5o=o(" \u2014 "),JN=a("a"),U5o=o("RegNetModel"),J5o=o(" (RegNet model)"),Y5o=l(),F_=a("li"),Wle=a("strong"),K5o=o("rembert"),Z5o=o(" \u2014 "),YN=a("a"),evo=o("RemBertModel"),ovo=o(" (RemBERT model)"),rvo=l(),T_=a("li"),Qle=a("strong"),tvo=o("resnet"),avo=o(" \u2014 "),KN=a("a"),nvo=o("ResNetModel"),svo=o(" (ResNet model)"),lvo=l(),M_=a("li"),Hle=a("strong"),ivo=o("retribert"),dvo=o(" \u2014 "),ZN=a("a"),cvo=o("RetriBertModel"),fvo=o(" (RetriBERT model)"),mvo=l(),E_=a("li"),Ule=a("strong"),gvo=o("roberta"),hvo=o(" \u2014 "),eq=a("a"),pvo=o("RobertaModel"),_vo=o(" (RoBERTa model)"),uvo=l(),C_=a("li"),Jle=a("strong"),bvo=o("roformer"),vvo=o(" \u2014 "),oq=a("a"),Fvo=o("RoFormerModel"),Tvo=o(" (RoFormer model)"),Mvo=l(),w_=a("li"),Yle=a("strong"),Evo=o("segformer"),Cvo=o(" \u2014 "),rq=a("a"),wvo=o("SegformerModel"),Avo=o(" (SegFormer model)"),yvo=l(),A_=a("li"),Kle=a("strong"),Lvo=o("sew"),xvo=o(" \u2014 "),tq=a("a"),$vo=o("SEWModel"),kvo=o(" (SEW model)"),Svo=l(),y_=a("li"),Zle=a("strong"),Rvo=o("sew-d"),Pvo=o(" \u2014 "),aq=a("a"),Bvo=o("SEWDModel"),Ivo=o(" (SEW-D model)"),Nvo=l(),L_=a("li"),eie=a("strong"),qvo=o("speech_to_text"),jvo=o(" \u2014 "),nq=a("a"),Dvo=o("Speech2TextModel"),Gvo=o(" (Speech2Text model)"),Ovo=l(),x_=a("li"),oie=a("strong"),Vvo=o("splinter"),Xvo=o(" \u2014 "),sq=a("a"),zvo=o("SplinterModel"),Wvo=o(" (Splinter model)"),Qvo=l(),$_=a("li"),rie=a("strong"),Hvo=o("squeezebert"),Uvo=o(" \u2014 "),lq=a("a"),Jvo=o("SqueezeBertModel"),Yvo=o(" (SqueezeBERT model)"),Kvo=l(),k_=a("li"),tie=a("strong"),Zvo=o("swin"),eFo=o(" \u2014 "),iq=a("a"),oFo=o("SwinModel"),rFo=o(" (Swin model)"),tFo=l(),S_=a("li"),aie=a("strong"),aFo=o("t5"),nFo=o(" \u2014 "),dq=a("a"),sFo=o("T5Model"),lFo=o(" (T5 model)"),iFo=l(),R_=a("li"),nie=a("strong"),dFo=o("tapas"),cFo=o(" \u2014 "),cq=a("a"),fFo=o("TapasModel"),mFo=o(" (TAPAS model)"),gFo=l(),P_=a("li"),sie=a("strong"),hFo=o("trajectory_transformer"),pFo=o(" \u2014 "),fq=a("a"),_Fo=o("TrajectoryTransformerModel"),uFo=o(" (Trajectory Transformer model)"),bFo=l(),B_=a("li"),lie=a("strong"),vFo=o("transfo-xl"),FFo=o(" \u2014 "),mq=a("a"),TFo=o("TransfoXLModel"),MFo=o(" (Transformer-XL model)"),EFo=l(),I_=a("li"),iie=a("strong"),CFo=o("unispeech"),wFo=o(" \u2014 "),gq=a("a"),AFo=o("UniSpeechModel"),yFo=o(" (UniSpeech model)"),LFo=l(),N_=a("li"),die=a("strong"),xFo=o("unispeech-sat"),$Fo=o(" \u2014 "),hq=a("a"),kFo=o("UniSpeechSatModel"),SFo=o(" (UniSpeechSat model)"),RFo=l(),q_=a("li"),cie=a("strong"),PFo=o("van"),BFo=o(" \u2014 "),pq=a("a"),IFo=o("VanModel"),NFo=o(" (VAN model)"),qFo=l(),j_=a("li"),fie=a("strong"),jFo=o("vilt"),DFo=o(" \u2014 "),_q=a("a"),GFo=o("ViltModel"),OFo=o(" (ViLT model)"),VFo=l(),D_=a("li"),mie=a("strong"),XFo=o("vision-text-dual-encoder"),zFo=o(" \u2014 "),uq=a("a"),WFo=o("VisionTextDualEncoderModel"),QFo=o(" (VisionTextDualEncoder model)"),HFo=l(),G_=a("li"),gie=a("strong"),UFo=o("visual_bert"),JFo=o(" \u2014 "),bq=a("a"),YFo=o("VisualBertModel"),KFo=o(" (VisualBert model)"),ZFo=l(),O_=a("li"),hie=a("strong"),e0o=o("vit"),o0o=o(" \u2014 "),vq=a("a"),r0o=o("ViTModel"),t0o=o(" (ViT model)"),a0o=l(),V_=a("li"),pie=a("strong"),n0o=o("vit_mae"),s0o=o(" \u2014 "),Fq=a("a"),l0o=o("ViTMAEModel"),i0o=o(" (ViTMAE model)"),d0o=l(),X_=a("li"),_ie=a("strong"),c0o=o("wav2vec2"),f0o=o(" \u2014 "),Tq=a("a"),m0o=o("Wav2Vec2Model"),g0o=o(" (Wav2Vec2 model)"),h0o=l(),z_=a("li"),uie=a("strong"),p0o=o("wav2vec2-conformer"),_0o=o(" \u2014 "),Mq=a("a"),u0o=o("Wav2Vec2ConformerModel"),b0o=o(" (Wav2Vec2-Conformer model)"),v0o=l(),W_=a("li"),bie=a("strong"),F0o=o("wavlm"),T0o=o(" \u2014 "),Eq=a("a"),M0o=o("WavLMModel"),E0o=o(" (WavLM model)"),C0o=l(),Q_=a("li"),vie=a("strong"),w0o=o("xglm"),A0o=o(" \u2014 "),Cq=a("a"),y0o=o("XGLMModel"),L0o=o(" (XGLM model)"),x0o=l(),H_=a("li"),Fie=a("strong"),$0o=o("xlm"),k0o=o(" \u2014 "),wq=a("a"),S0o=o("XLMModel"),R0o=o(" (XLM model)"),P0o=l(),U_=a("li"),Tie=a("strong"),B0o=o("xlm-prophetnet"),I0o=o(" \u2014 "),Aq=a("a"),N0o=o("XLMProphetNetModel"),q0o=o(" (XLMProphetNet model)"),j0o=l(),J_=a("li"),Mie=a("strong"),D0o=o("xlm-roberta"),G0o=o(" \u2014 "),yq=a("a"),O0o=o("XLMRobertaModel"),V0o=o(" (XLM-RoBERTa model)"),X0o=l(),Y_=a("li"),Eie=a("strong"),z0o=o("xlm-roberta-xl"),W0o=o(" \u2014 "),Lq=a("a"),Q0o=o("XLMRobertaXLModel"),H0o=o(" (XLM-RoBERTa-XL model)"),U0o=l(),K_=a("li"),Cie=a("strong"),J0o=o("xlnet"),Y0o=o(" \u2014 "),xq=a("a"),K0o=o("XLNetModel"),Z0o=o(" (XLNet model)"),eTo=l(),Z_=a("li"),wie=a("strong"),oTo=o("yolos"),rTo=o(" \u2014 "),$q=a("a"),tTo=o("YolosModel"),aTo=o(" (YOLOS model)"),nTo=l(),eu=a("li"),Aie=a("strong"),sTo=o("yoso"),lTo=o(" \u2014 "),kq=a("a"),iTo=o("YosoModel"),dTo=o(" (YOSO model)"),cTo=l(),ou=a("p"),fTo=o("The model is set in evaluation mode by default using "),yie=a("code"),mTo=o("model.eval()"),gTo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lie=a("code"),hTo=o("model.train()"),pTo=l(),F(ru.$$.fragment),Rqe=l(),Li=a("h2"),tu=a("a"),xie=a("span"),F(dy.$$.fragment),_To=l(),$ie=a("span"),uTo=o("AutoModelForPreTraining"),Pqe=l(),xo=a("div"),F(cy.$$.fragment),bTo=l(),xi=a("p"),vTo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Sq=a("a"),FTo=o("from_pretrained()"),TTo=o(" class method or the "),Rq=a("a"),MTo=o("from_config()"),ETo=o(` class
method.`),CTo=l(),fy=a("p"),wTo=o("This class cannot be instantiated directly using "),kie=a("code"),ATo=o("__init__()"),yTo=o(" (throws an error)."),LTo=l(),at=a("div"),F(my.$$.fragment),xTo=l(),Sie=a("p"),$To=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),kTo=l(),$i=a("p"),STo=o(`Note:
Loading a model from its configuration file does `),Rie=a("strong"),RTo=o("not"),PTo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Pq=a("a"),BTo=o("from_pretrained()"),ITo=o(" to load the model weights."),NTo=l(),F(au.$$.fragment),qTo=l(),Ye=a("div"),F(gy.$$.fragment),jTo=l(),Pie=a("p"),DTo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),GTo=l(),xa=a("p"),OTo=o("The model class to instantiate is selected based on the "),Bie=a("code"),VTo=o("model_type"),XTo=o(` property of the config object (either
passed as an argument or loaded from `),Iie=a("code"),zTo=o("pretrained_model_name_or_path"),WTo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nie=a("code"),QTo=o("pretrained_model_name_or_path"),HTo=o(":"),UTo=l(),G=a("ul"),nu=a("li"),qie=a("strong"),JTo=o("albert"),YTo=o(" \u2014 "),Bq=a("a"),KTo=o("AlbertForPreTraining"),ZTo=o(" (ALBERT model)"),e7o=l(),su=a("li"),jie=a("strong"),o7o=o("bart"),r7o=o(" \u2014 "),Iq=a("a"),t7o=o("BartForConditionalGeneration"),a7o=o(" (BART model)"),n7o=l(),lu=a("li"),Die=a("strong"),s7o=o("bert"),l7o=o(" \u2014 "),Nq=a("a"),i7o=o("BertForPreTraining"),d7o=o(" (BERT model)"),c7o=l(),iu=a("li"),Gie=a("strong"),f7o=o("big_bird"),m7o=o(" \u2014 "),qq=a("a"),g7o=o("BigBirdForPreTraining"),h7o=o(" (BigBird model)"),p7o=l(),du=a("li"),Oie=a("strong"),_7o=o("camembert"),u7o=o(" \u2014 "),jq=a("a"),b7o=o("CamembertForMaskedLM"),v7o=o(" (CamemBERT model)"),F7o=l(),cu=a("li"),Vie=a("strong"),T7o=o("ctrl"),M7o=o(" \u2014 "),Dq=a("a"),E7o=o("CTRLLMHeadModel"),C7o=o(" (CTRL model)"),w7o=l(),fu=a("li"),Xie=a("strong"),A7o=o("data2vec-text"),y7o=o(" \u2014 "),Gq=a("a"),L7o=o("Data2VecTextForMaskedLM"),x7o=o(" (Data2VecText model)"),$7o=l(),mu=a("li"),zie=a("strong"),k7o=o("deberta"),S7o=o(" \u2014 "),Oq=a("a"),R7o=o("DebertaForMaskedLM"),P7o=o(" (DeBERTa model)"),B7o=l(),gu=a("li"),Wie=a("strong"),I7o=o("deberta-v2"),N7o=o(" \u2014 "),Vq=a("a"),q7o=o("DebertaV2ForMaskedLM"),j7o=o(" (DeBERTa-v2 model)"),D7o=l(),hu=a("li"),Qie=a("strong"),G7o=o("distilbert"),O7o=o(" \u2014 "),Xq=a("a"),V7o=o("DistilBertForMaskedLM"),X7o=o(" (DistilBERT model)"),z7o=l(),pu=a("li"),Hie=a("strong"),W7o=o("electra"),Q7o=o(" \u2014 "),zq=a("a"),H7o=o("ElectraForPreTraining"),U7o=o(" (ELECTRA model)"),J7o=l(),_u=a("li"),Uie=a("strong"),Y7o=o("flaubert"),K7o=o(" \u2014 "),Wq=a("a"),Z7o=o("FlaubertWithLMHeadModel"),eMo=o(" (FlauBERT model)"),oMo=l(),uu=a("li"),Jie=a("strong"),rMo=o("flava"),tMo=o(" \u2014 "),Qq=a("a"),aMo=o("FlavaForPreTraining"),nMo=o(" (Flava model)"),sMo=l(),bu=a("li"),Yie=a("strong"),lMo=o("fnet"),iMo=o(" \u2014 "),Hq=a("a"),dMo=o("FNetForPreTraining"),cMo=o(" (FNet model)"),fMo=l(),vu=a("li"),Kie=a("strong"),mMo=o("fsmt"),gMo=o(" \u2014 "),Uq=a("a"),hMo=o("FSMTForConditionalGeneration"),pMo=o(" (FairSeq Machine-Translation model)"),_Mo=l(),Fu=a("li"),Zie=a("strong"),uMo=o("funnel"),bMo=o(" \u2014 "),Jq=a("a"),vMo=o("FunnelForPreTraining"),FMo=o(" (Funnel Transformer model)"),TMo=l(),Tu=a("li"),ede=a("strong"),MMo=o("gpt2"),EMo=o(" \u2014 "),Yq=a("a"),CMo=o("GPT2LMHeadModel"),wMo=o(" (OpenAI GPT-2 model)"),AMo=l(),Mu=a("li"),ode=a("strong"),yMo=o("ibert"),LMo=o(" \u2014 "),Kq=a("a"),xMo=o("IBertForMaskedLM"),$Mo=o(" (I-BERT model)"),kMo=l(),Eu=a("li"),rde=a("strong"),SMo=o("layoutlm"),RMo=o(" \u2014 "),Zq=a("a"),PMo=o("LayoutLMForMaskedLM"),BMo=o(" (LayoutLM model)"),IMo=l(),Cu=a("li"),tde=a("strong"),NMo=o("longformer"),qMo=o(" \u2014 "),ej=a("a"),jMo=o("LongformerForMaskedLM"),DMo=o(" (Longformer model)"),GMo=l(),wu=a("li"),ade=a("strong"),OMo=o("lxmert"),VMo=o(" \u2014 "),oj=a("a"),XMo=o("LxmertForPreTraining"),zMo=o(" (LXMERT model)"),WMo=l(),Au=a("li"),nde=a("strong"),QMo=o("megatron-bert"),HMo=o(" \u2014 "),rj=a("a"),UMo=o("MegatronBertForPreTraining"),JMo=o(" (MegatronBert model)"),YMo=l(),yu=a("li"),sde=a("strong"),KMo=o("mobilebert"),ZMo=o(" \u2014 "),tj=a("a"),e4o=o("MobileBertForPreTraining"),o4o=o(" (MobileBERT model)"),r4o=l(),Lu=a("li"),lde=a("strong"),t4o=o("mpnet"),a4o=o(" \u2014 "),aj=a("a"),n4o=o("MPNetForMaskedLM"),s4o=o(" (MPNet model)"),l4o=l(),xu=a("li"),ide=a("strong"),i4o=o("openai-gpt"),d4o=o(" \u2014 "),nj=a("a"),c4o=o("OpenAIGPTLMHeadModel"),f4o=o(" (OpenAI GPT model)"),m4o=l(),$u=a("li"),dde=a("strong"),g4o=o("retribert"),h4o=o(" \u2014 "),sj=a("a"),p4o=o("RetriBertModel"),_4o=o(" (RetriBERT model)"),u4o=l(),ku=a("li"),cde=a("strong"),b4o=o("roberta"),v4o=o(" \u2014 "),lj=a("a"),F4o=o("RobertaForMaskedLM"),T4o=o(" (RoBERTa model)"),M4o=l(),Su=a("li"),fde=a("strong"),E4o=o("splinter"),C4o=o(" \u2014 "),ij=a("a"),w4o=o("SplinterForPreTraining"),A4o=o(" (Splinter model)"),y4o=l(),Ru=a("li"),mde=a("strong"),L4o=o("squeezebert"),x4o=o(" \u2014 "),dj=a("a"),$4o=o("SqueezeBertForMaskedLM"),k4o=o(" (SqueezeBERT model)"),S4o=l(),Pu=a("li"),gde=a("strong"),R4o=o("t5"),P4o=o(" \u2014 "),cj=a("a"),B4o=o("T5ForConditionalGeneration"),I4o=o(" (T5 model)"),N4o=l(),Bu=a("li"),hde=a("strong"),q4o=o("tapas"),j4o=o(" \u2014 "),fj=a("a"),D4o=o("TapasForMaskedLM"),G4o=o(" (TAPAS model)"),O4o=l(),Iu=a("li"),pde=a("strong"),V4o=o("transfo-xl"),X4o=o(" \u2014 "),mj=a("a"),z4o=o("TransfoXLLMHeadModel"),W4o=o(" (Transformer-XL model)"),Q4o=l(),Nu=a("li"),_de=a("strong"),H4o=o("unispeech"),U4o=o(" \u2014 "),gj=a("a"),J4o=o("UniSpeechForPreTraining"),Y4o=o(" (UniSpeech model)"),K4o=l(),qu=a("li"),ude=a("strong"),Z4o=o("unispeech-sat"),eEo=o(" \u2014 "),hj=a("a"),oEo=o("UniSpeechSatForPreTraining"),rEo=o(" (UniSpeechSat model)"),tEo=l(),ju=a("li"),bde=a("strong"),aEo=o("visual_bert"),nEo=o(" \u2014 "),pj=a("a"),sEo=o("VisualBertForPreTraining"),lEo=o(" (VisualBert model)"),iEo=l(),Du=a("li"),vde=a("strong"),dEo=o("vit_mae"),cEo=o(" \u2014 "),_j=a("a"),fEo=o("ViTMAEForPreTraining"),mEo=o(" (ViTMAE model)"),gEo=l(),Gu=a("li"),Fde=a("strong"),hEo=o("wav2vec2"),pEo=o(" \u2014 "),uj=a("a"),_Eo=o("Wav2Vec2ForPreTraining"),uEo=o(" (Wav2Vec2 model)"),bEo=l(),Ou=a("li"),Tde=a("strong"),vEo=o("wav2vec2-conformer"),FEo=o(" \u2014 "),bj=a("a"),TEo=o("Wav2Vec2ConformerForPreTraining"),MEo=o(" (Wav2Vec2-Conformer model)"),EEo=l(),Vu=a("li"),Mde=a("strong"),CEo=o("xlm"),wEo=o(" \u2014 "),vj=a("a"),AEo=o("XLMWithLMHeadModel"),yEo=o(" (XLM model)"),LEo=l(),Xu=a("li"),Ede=a("strong"),xEo=o("xlm-roberta"),$Eo=o(" \u2014 "),Fj=a("a"),kEo=o("XLMRobertaForMaskedLM"),SEo=o(" (XLM-RoBERTa model)"),REo=l(),zu=a("li"),Cde=a("strong"),PEo=o("xlm-roberta-xl"),BEo=o(" \u2014 "),Tj=a("a"),IEo=o("XLMRobertaXLForMaskedLM"),NEo=o(" (XLM-RoBERTa-XL model)"),qEo=l(),Wu=a("li"),wde=a("strong"),jEo=o("xlnet"),DEo=o(" \u2014 "),Mj=a("a"),GEo=o("XLNetLMHeadModel"),OEo=o(" (XLNet model)"),VEo=l(),Qu=a("p"),XEo=o("The model is set in evaluation mode by default using "),Ade=a("code"),zEo=o("model.eval()"),WEo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yde=a("code"),QEo=o("model.train()"),HEo=l(),F(Hu.$$.fragment),Bqe=l(),ki=a("h2"),Uu=a("a"),Lde=a("span"),F(hy.$$.fragment),UEo=l(),xde=a("span"),JEo=o("AutoModelForCausalLM"),Iqe=l(),$o=a("div"),F(py.$$.fragment),YEo=l(),Si=a("p"),KEo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Ej=a("a"),ZEo=o("from_pretrained()"),eCo=o(" class method or the "),Cj=a("a"),oCo=o("from_config()"),rCo=o(` class
method.`),tCo=l(),_y=a("p"),aCo=o("This class cannot be instantiated directly using "),$de=a("code"),nCo=o("__init__()"),sCo=o(" (throws an error)."),lCo=l(),nt=a("div"),F(uy.$$.fragment),iCo=l(),kde=a("p"),dCo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),cCo=l(),Ri=a("p"),fCo=o(`Note:
Loading a model from its configuration file does `),Sde=a("strong"),mCo=o("not"),gCo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wj=a("a"),hCo=o("from_pretrained()"),pCo=o(" to load the model weights."),_Co=l(),F(Ju.$$.fragment),uCo=l(),Ke=a("div"),F(by.$$.fragment),bCo=l(),Rde=a("p"),vCo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),FCo=l(),$a=a("p"),TCo=o("The model class to instantiate is selected based on the "),Pde=a("code"),MCo=o("model_type"),ECo=o(` property of the config object (either
passed as an argument or loaded from `),Bde=a("code"),CCo=o("pretrained_model_name_or_path"),wCo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ide=a("code"),ACo=o("pretrained_model_name_or_path"),yCo=o(":"),LCo=l(),z=a("ul"),Yu=a("li"),Nde=a("strong"),xCo=o("bart"),$Co=o(" \u2014 "),Aj=a("a"),kCo=o("BartForCausalLM"),SCo=o(" (BART model)"),RCo=l(),Ku=a("li"),qde=a("strong"),PCo=o("bert"),BCo=o(" \u2014 "),yj=a("a"),ICo=o("BertLMHeadModel"),NCo=o(" (BERT model)"),qCo=l(),Zu=a("li"),jde=a("strong"),jCo=o("bert-generation"),DCo=o(" \u2014 "),Lj=a("a"),GCo=o("BertGenerationDecoder"),OCo=o(" (Bert Generation model)"),VCo=l(),e1=a("li"),Dde=a("strong"),XCo=o("big_bird"),zCo=o(" \u2014 "),xj=a("a"),WCo=o("BigBirdForCausalLM"),QCo=o(" (BigBird model)"),HCo=l(),o1=a("li"),Gde=a("strong"),UCo=o("bigbird_pegasus"),JCo=o(" \u2014 "),$j=a("a"),YCo=o("BigBirdPegasusForCausalLM"),KCo=o(" (BigBirdPegasus model)"),ZCo=l(),r1=a("li"),Ode=a("strong"),e3o=o("blenderbot"),o3o=o(" \u2014 "),kj=a("a"),r3o=o("BlenderbotForCausalLM"),t3o=o(" (Blenderbot model)"),a3o=l(),t1=a("li"),Vde=a("strong"),n3o=o("blenderbot-small"),s3o=o(" \u2014 "),Sj=a("a"),l3o=o("BlenderbotSmallForCausalLM"),i3o=o(" (BlenderbotSmall model)"),d3o=l(),a1=a("li"),Xde=a("strong"),c3o=o("camembert"),f3o=o(" \u2014 "),Rj=a("a"),m3o=o("CamembertForCausalLM"),g3o=o(" (CamemBERT model)"),h3o=l(),n1=a("li"),zde=a("strong"),p3o=o("ctrl"),_3o=o(" \u2014 "),Pj=a("a"),u3o=o("CTRLLMHeadModel"),b3o=o(" (CTRL model)"),v3o=l(),s1=a("li"),Wde=a("strong"),F3o=o("data2vec-text"),T3o=o(" \u2014 "),Bj=a("a"),M3o=o("Data2VecTextForCausalLM"),E3o=o(" (Data2VecText model)"),C3o=l(),l1=a("li"),Qde=a("strong"),w3o=o("electra"),A3o=o(" \u2014 "),Ij=a("a"),y3o=o("ElectraForCausalLM"),L3o=o(" (ELECTRA model)"),x3o=l(),i1=a("li"),Hde=a("strong"),$3o=o("gpt2"),k3o=o(" \u2014 "),Nj=a("a"),S3o=o("GPT2LMHeadModel"),R3o=o(" (OpenAI GPT-2 model)"),P3o=l(),d1=a("li"),Ude=a("strong"),B3o=o("gpt_neo"),I3o=o(" \u2014 "),qj=a("a"),N3o=o("GPTNeoForCausalLM"),q3o=o(" (GPT Neo model)"),j3o=l(),c1=a("li"),Jde=a("strong"),D3o=o("gpt_neox"),G3o=o(" \u2014 "),jj=a("a"),O3o=o("GPTNeoXForCausalLM"),V3o=o(" (GPT NeoX model)"),X3o=l(),f1=a("li"),Yde=a("strong"),z3o=o("gptj"),W3o=o(" \u2014 "),Dj=a("a"),Q3o=o("GPTJForCausalLM"),H3o=o(" (GPT-J model)"),U3o=l(),m1=a("li"),Kde=a("strong"),J3o=o("marian"),Y3o=o(" \u2014 "),Gj=a("a"),K3o=o("MarianForCausalLM"),Z3o=o(" (Marian model)"),ewo=l(),g1=a("li"),Zde=a("strong"),owo=o("mbart"),rwo=o(" \u2014 "),Oj=a("a"),two=o("MBartForCausalLM"),awo=o(" (mBART model)"),nwo=l(),h1=a("li"),ece=a("strong"),swo=o("megatron-bert"),lwo=o(" \u2014 "),Vj=a("a"),iwo=o("MegatronBertForCausalLM"),dwo=o(" (MegatronBert model)"),cwo=l(),p1=a("li"),oce=a("strong"),fwo=o("openai-gpt"),mwo=o(" \u2014 "),Xj=a("a"),gwo=o("OpenAIGPTLMHeadModel"),hwo=o(" (OpenAI GPT model)"),pwo=l(),_1=a("li"),rce=a("strong"),_wo=o("opt"),uwo=o(" \u2014 "),zj=a("a"),bwo=o("OPTForCausalLM"),vwo=o(" (OPT model)"),Fwo=l(),u1=a("li"),tce=a("strong"),Two=o("pegasus"),Mwo=o(" \u2014 "),Wj=a("a"),Ewo=o("PegasusForCausalLM"),Cwo=o(" (Pegasus model)"),wwo=l(),b1=a("li"),ace=a("strong"),Awo=o("plbart"),ywo=o(" \u2014 "),Qj=a("a"),Lwo=o("PLBartForCausalLM"),xwo=o(" (PLBart model)"),$wo=l(),v1=a("li"),nce=a("strong"),kwo=o("prophetnet"),Swo=o(" \u2014 "),Hj=a("a"),Rwo=o("ProphetNetForCausalLM"),Pwo=o(" (ProphetNet model)"),Bwo=l(),F1=a("li"),sce=a("strong"),Iwo=o("qdqbert"),Nwo=o(" \u2014 "),Uj=a("a"),qwo=o("QDQBertLMHeadModel"),jwo=o(" (QDQBert model)"),Dwo=l(),T1=a("li"),lce=a("strong"),Gwo=o("reformer"),Owo=o(" \u2014 "),Jj=a("a"),Vwo=o("ReformerModelWithLMHead"),Xwo=o(" (Reformer model)"),zwo=l(),M1=a("li"),ice=a("strong"),Wwo=o("rembert"),Qwo=o(" \u2014 "),Yj=a("a"),Hwo=o("RemBertForCausalLM"),Uwo=o(" (RemBERT model)"),Jwo=l(),E1=a("li"),dce=a("strong"),Ywo=o("roberta"),Kwo=o(" \u2014 "),Kj=a("a"),Zwo=o("RobertaForCausalLM"),e6o=o(" (RoBERTa model)"),o6o=l(),C1=a("li"),cce=a("strong"),r6o=o("roformer"),t6o=o(" \u2014 "),Zj=a("a"),a6o=o("RoFormerForCausalLM"),n6o=o(" (RoFormer model)"),s6o=l(),w1=a("li"),fce=a("strong"),l6o=o("speech_to_text_2"),i6o=o(" \u2014 "),eD=a("a"),d6o=o("Speech2Text2ForCausalLM"),c6o=o(" (Speech2Text2 model)"),f6o=l(),A1=a("li"),mce=a("strong"),m6o=o("transfo-xl"),g6o=o(" \u2014 "),oD=a("a"),h6o=o("TransfoXLLMHeadModel"),p6o=o(" (Transformer-XL model)"),_6o=l(),y1=a("li"),gce=a("strong"),u6o=o("trocr"),b6o=o(" \u2014 "),rD=a("a"),v6o=o("TrOCRForCausalLM"),F6o=o(" (TrOCR model)"),T6o=l(),L1=a("li"),hce=a("strong"),M6o=o("xglm"),E6o=o(" \u2014 "),tD=a("a"),C6o=o("XGLMForCausalLM"),w6o=o(" (XGLM model)"),A6o=l(),x1=a("li"),pce=a("strong"),y6o=o("xlm"),L6o=o(" \u2014 "),aD=a("a"),x6o=o("XLMWithLMHeadModel"),$6o=o(" (XLM model)"),k6o=l(),$1=a("li"),_ce=a("strong"),S6o=o("xlm-prophetnet"),R6o=o(" \u2014 "),nD=a("a"),P6o=o("XLMProphetNetForCausalLM"),B6o=o(" (XLMProphetNet model)"),I6o=l(),k1=a("li"),uce=a("strong"),N6o=o("xlm-roberta"),q6o=o(" \u2014 "),sD=a("a"),j6o=o("XLMRobertaForCausalLM"),D6o=o(" (XLM-RoBERTa model)"),G6o=l(),S1=a("li"),bce=a("strong"),O6o=o("xlm-roberta-xl"),V6o=o(" \u2014 "),lD=a("a"),X6o=o("XLMRobertaXLForCausalLM"),z6o=o(" (XLM-RoBERTa-XL model)"),W6o=l(),R1=a("li"),vce=a("strong"),Q6o=o("xlnet"),H6o=o(" \u2014 "),iD=a("a"),U6o=o("XLNetLMHeadModel"),J6o=o(" (XLNet model)"),Y6o=l(),P1=a("p"),K6o=o("The model is set in evaluation mode by default using "),Fce=a("code"),Z6o=o("model.eval()"),eAo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tce=a("code"),oAo=o("model.train()"),rAo=l(),F(B1.$$.fragment),Nqe=l(),Pi=a("h2"),I1=a("a"),Mce=a("span"),F(vy.$$.fragment),tAo=l(),Ece=a("span"),aAo=o("AutoModelForMaskedLM"),qqe=l(),ko=a("div"),F(Fy.$$.fragment),nAo=l(),Bi=a("p"),sAo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),dD=a("a"),lAo=o("from_pretrained()"),iAo=o(" class method or the "),cD=a("a"),dAo=o("from_config()"),cAo=o(` class
method.`),fAo=l(),Ty=a("p"),mAo=o("This class cannot be instantiated directly using "),Cce=a("code"),gAo=o("__init__()"),hAo=o(" (throws an error)."),pAo=l(),st=a("div"),F(My.$$.fragment),_Ao=l(),wce=a("p"),uAo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),bAo=l(),Ii=a("p"),vAo=o(`Note:
Loading a model from its configuration file does `),Ace=a("strong"),FAo=o("not"),TAo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fD=a("a"),MAo=o("from_pretrained()"),EAo=o(" to load the model weights."),CAo=l(),F(N1.$$.fragment),wAo=l(),Ze=a("div"),F(Ey.$$.fragment),AAo=l(),yce=a("p"),yAo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),LAo=l(),ka=a("p"),xAo=o("The model class to instantiate is selected based on the "),Lce=a("code"),$Ao=o("model_type"),kAo=o(` property of the config object (either
passed as an argument or loaded from `),xce=a("code"),SAo=o("pretrained_model_name_or_path"),RAo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$ce=a("code"),PAo=o("pretrained_model_name_or_path"),BAo=o(":"),IAo=l(),W=a("ul"),q1=a("li"),kce=a("strong"),NAo=o("albert"),qAo=o(" \u2014 "),mD=a("a"),jAo=o("AlbertForMaskedLM"),DAo=o(" (ALBERT model)"),GAo=l(),j1=a("li"),Sce=a("strong"),OAo=o("bart"),VAo=o(" \u2014 "),gD=a("a"),XAo=o("BartForConditionalGeneration"),zAo=o(" (BART model)"),WAo=l(),D1=a("li"),Rce=a("strong"),QAo=o("bert"),HAo=o(" \u2014 "),hD=a("a"),UAo=o("BertForMaskedLM"),JAo=o(" (BERT model)"),YAo=l(),G1=a("li"),Pce=a("strong"),KAo=o("big_bird"),ZAo=o(" \u2014 "),pD=a("a"),eyo=o("BigBirdForMaskedLM"),oyo=o(" (BigBird model)"),ryo=l(),O1=a("li"),Bce=a("strong"),tyo=o("camembert"),ayo=o(" \u2014 "),_D=a("a"),nyo=o("CamembertForMaskedLM"),syo=o(" (CamemBERT model)"),lyo=l(),V1=a("li"),Ice=a("strong"),iyo=o("convbert"),dyo=o(" \u2014 "),uD=a("a"),cyo=o("ConvBertForMaskedLM"),fyo=o(" (ConvBERT model)"),myo=l(),X1=a("li"),Nce=a("strong"),gyo=o("data2vec-text"),hyo=o(" \u2014 "),bD=a("a"),pyo=o("Data2VecTextForMaskedLM"),_yo=o(" (Data2VecText model)"),uyo=l(),z1=a("li"),qce=a("strong"),byo=o("deberta"),vyo=o(" \u2014 "),vD=a("a"),Fyo=o("DebertaForMaskedLM"),Tyo=o(" (DeBERTa model)"),Myo=l(),W1=a("li"),jce=a("strong"),Eyo=o("deberta-v2"),Cyo=o(" \u2014 "),FD=a("a"),wyo=o("DebertaV2ForMaskedLM"),Ayo=o(" (DeBERTa-v2 model)"),yyo=l(),Q1=a("li"),Dce=a("strong"),Lyo=o("distilbert"),xyo=o(" \u2014 "),TD=a("a"),$yo=o("DistilBertForMaskedLM"),kyo=o(" (DistilBERT model)"),Syo=l(),H1=a("li"),Gce=a("strong"),Ryo=o("electra"),Pyo=o(" \u2014 "),MD=a("a"),Byo=o("ElectraForMaskedLM"),Iyo=o(" (ELECTRA model)"),Nyo=l(),U1=a("li"),Oce=a("strong"),qyo=o("flaubert"),jyo=o(" \u2014 "),ED=a("a"),Dyo=o("FlaubertWithLMHeadModel"),Gyo=o(" (FlauBERT model)"),Oyo=l(),J1=a("li"),Vce=a("strong"),Vyo=o("fnet"),Xyo=o(" \u2014 "),CD=a("a"),zyo=o("FNetForMaskedLM"),Wyo=o(" (FNet model)"),Qyo=l(),Y1=a("li"),Xce=a("strong"),Hyo=o("funnel"),Uyo=o(" \u2014 "),wD=a("a"),Jyo=o("FunnelForMaskedLM"),Yyo=o(" (Funnel Transformer model)"),Kyo=l(),K1=a("li"),zce=a("strong"),Zyo=o("ibert"),eLo=o(" \u2014 "),AD=a("a"),oLo=o("IBertForMaskedLM"),rLo=o(" (I-BERT model)"),tLo=l(),Z1=a("li"),Wce=a("strong"),aLo=o("layoutlm"),nLo=o(" \u2014 "),yD=a("a"),sLo=o("LayoutLMForMaskedLM"),lLo=o(" (LayoutLM model)"),iLo=l(),eb=a("li"),Qce=a("strong"),dLo=o("longformer"),cLo=o(" \u2014 "),LD=a("a"),fLo=o("LongformerForMaskedLM"),mLo=o(" (Longformer model)"),gLo=l(),ob=a("li"),Hce=a("strong"),hLo=o("luke"),pLo=o(" \u2014 "),xD=a("a"),_Lo=o("LukeForMaskedLM"),uLo=o(" (LUKE model)"),bLo=l(),rb=a("li"),Uce=a("strong"),vLo=o("mbart"),FLo=o(" \u2014 "),$D=a("a"),TLo=o("MBartForConditionalGeneration"),MLo=o(" (mBART model)"),ELo=l(),tb=a("li"),Jce=a("strong"),CLo=o("megatron-bert"),wLo=o(" \u2014 "),kD=a("a"),ALo=o("MegatronBertForMaskedLM"),yLo=o(" (MegatronBert model)"),LLo=l(),ab=a("li"),Yce=a("strong"),xLo=o("mobilebert"),$Lo=o(" \u2014 "),SD=a("a"),kLo=o("MobileBertForMaskedLM"),SLo=o(" (MobileBERT model)"),RLo=l(),nb=a("li"),Kce=a("strong"),PLo=o("mpnet"),BLo=o(" \u2014 "),RD=a("a"),ILo=o("MPNetForMaskedLM"),NLo=o(" (MPNet model)"),qLo=l(),sb=a("li"),Zce=a("strong"),jLo=o("nystromformer"),DLo=o(" \u2014 "),PD=a("a"),GLo=o("NystromformerForMaskedLM"),OLo=o(" (Nystromformer model)"),VLo=l(),lb=a("li"),efe=a("strong"),XLo=o("perceiver"),zLo=o(" \u2014 "),BD=a("a"),WLo=o("PerceiverForMaskedLM"),QLo=o(" (Perceiver model)"),HLo=l(),ib=a("li"),ofe=a("strong"),ULo=o("qdqbert"),JLo=o(" \u2014 "),ID=a("a"),YLo=o("QDQBertForMaskedLM"),KLo=o(" (QDQBert model)"),ZLo=l(),db=a("li"),rfe=a("strong"),e8o=o("reformer"),o8o=o(" \u2014 "),ND=a("a"),r8o=o("ReformerForMaskedLM"),t8o=o(" (Reformer model)"),a8o=l(),cb=a("li"),tfe=a("strong"),n8o=o("rembert"),s8o=o(" \u2014 "),qD=a("a"),l8o=o("RemBertForMaskedLM"),i8o=o(" (RemBERT model)"),d8o=l(),fb=a("li"),afe=a("strong"),c8o=o("roberta"),f8o=o(" \u2014 "),jD=a("a"),m8o=o("RobertaForMaskedLM"),g8o=o(" (RoBERTa model)"),h8o=l(),mb=a("li"),nfe=a("strong"),p8o=o("roformer"),_8o=o(" \u2014 "),DD=a("a"),u8o=o("RoFormerForMaskedLM"),b8o=o(" (RoFormer model)"),v8o=l(),gb=a("li"),sfe=a("strong"),F8o=o("squeezebert"),T8o=o(" \u2014 "),GD=a("a"),M8o=o("SqueezeBertForMaskedLM"),E8o=o(" (SqueezeBERT model)"),C8o=l(),hb=a("li"),lfe=a("strong"),w8o=o("tapas"),A8o=o(" \u2014 "),OD=a("a"),y8o=o("TapasForMaskedLM"),L8o=o(" (TAPAS model)"),x8o=l(),pb=a("li"),ife=a("strong"),$8o=o("wav2vec2"),k8o=o(" \u2014 "),dfe=a("code"),S8o=o("Wav2Vec2ForMaskedLM"),R8o=o(" (Wav2Vec2 model)"),P8o=l(),_b=a("li"),cfe=a("strong"),B8o=o("xlm"),I8o=o(" \u2014 "),VD=a("a"),N8o=o("XLMWithLMHeadModel"),q8o=o(" (XLM model)"),j8o=l(),ub=a("li"),ffe=a("strong"),D8o=o("xlm-roberta"),G8o=o(" \u2014 "),XD=a("a"),O8o=o("XLMRobertaForMaskedLM"),V8o=o(" (XLM-RoBERTa model)"),X8o=l(),bb=a("li"),mfe=a("strong"),z8o=o("xlm-roberta-xl"),W8o=o(" \u2014 "),zD=a("a"),Q8o=o("XLMRobertaXLForMaskedLM"),H8o=o(" (XLM-RoBERTa-XL model)"),U8o=l(),vb=a("li"),gfe=a("strong"),J8o=o("yoso"),Y8o=o(" \u2014 "),WD=a("a"),K8o=o("YosoForMaskedLM"),Z8o=o(" (YOSO model)"),e9o=l(),Fb=a("p"),o9o=o("The model is set in evaluation mode by default using "),hfe=a("code"),r9o=o("model.eval()"),t9o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pfe=a("code"),a9o=o("model.train()"),n9o=l(),F(Tb.$$.fragment),jqe=l(),Ni=a("h2"),Mb=a("a"),_fe=a("span"),F(Cy.$$.fragment),s9o=l(),ufe=a("span"),l9o=o("AutoModelForSeq2SeqLM"),Dqe=l(),So=a("div"),F(wy.$$.fragment),i9o=l(),qi=a("p"),d9o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),QD=a("a"),c9o=o("from_pretrained()"),f9o=o(" class method or the "),HD=a("a"),m9o=o("from_config()"),g9o=o(` class
method.`),h9o=l(),Ay=a("p"),p9o=o("This class cannot be instantiated directly using "),bfe=a("code"),_9o=o("__init__()"),u9o=o(" (throws an error)."),b9o=l(),lt=a("div"),F(yy.$$.fragment),v9o=l(),vfe=a("p"),F9o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),T9o=l(),ji=a("p"),M9o=o(`Note:
Loading a model from its configuration file does `),Ffe=a("strong"),E9o=o("not"),C9o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UD=a("a"),w9o=o("from_pretrained()"),A9o=o(" to load the model weights."),y9o=l(),F(Eb.$$.fragment),L9o=l(),eo=a("div"),F(Ly.$$.fragment),x9o=l(),Tfe=a("p"),$9o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),k9o=l(),Sa=a("p"),S9o=o("The model class to instantiate is selected based on the "),Mfe=a("code"),R9o=o("model_type"),P9o=o(` property of the config object (either
passed as an argument or loaded from `),Efe=a("code"),B9o=o("pretrained_model_name_or_path"),I9o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cfe=a("code"),N9o=o("pretrained_model_name_or_path"),q9o=o(":"),j9o=l(),_e=a("ul"),Cb=a("li"),wfe=a("strong"),D9o=o("bart"),G9o=o(" \u2014 "),JD=a("a"),O9o=o("BartForConditionalGeneration"),V9o=o(" (BART model)"),X9o=l(),wb=a("li"),Afe=a("strong"),z9o=o("bigbird_pegasus"),W9o=o(" \u2014 "),YD=a("a"),Q9o=o("BigBirdPegasusForConditionalGeneration"),H9o=o(" (BigBirdPegasus model)"),U9o=l(),Ab=a("li"),yfe=a("strong"),J9o=o("blenderbot"),Y9o=o(" \u2014 "),KD=a("a"),K9o=o("BlenderbotForConditionalGeneration"),Z9o=o(" (Blenderbot model)"),exo=l(),yb=a("li"),Lfe=a("strong"),oxo=o("blenderbot-small"),rxo=o(" \u2014 "),ZD=a("a"),txo=o("BlenderbotSmallForConditionalGeneration"),axo=o(" (BlenderbotSmall model)"),nxo=l(),Lb=a("li"),xfe=a("strong"),sxo=o("encoder-decoder"),lxo=o(" \u2014 "),eG=a("a"),ixo=o("EncoderDecoderModel"),dxo=o(" (Encoder decoder model)"),cxo=l(),xb=a("li"),$fe=a("strong"),fxo=o("fsmt"),mxo=o(" \u2014 "),oG=a("a"),gxo=o("FSMTForConditionalGeneration"),hxo=o(" (FairSeq Machine-Translation model)"),pxo=l(),$b=a("li"),kfe=a("strong"),_xo=o("led"),uxo=o(" \u2014 "),rG=a("a"),bxo=o("LEDForConditionalGeneration"),vxo=o(" (LED model)"),Fxo=l(),kb=a("li"),Sfe=a("strong"),Txo=o("m2m_100"),Mxo=o(" \u2014 "),tG=a("a"),Exo=o("M2M100ForConditionalGeneration"),Cxo=o(" (M2M100 model)"),wxo=l(),Sb=a("li"),Rfe=a("strong"),Axo=o("marian"),yxo=o(" \u2014 "),aG=a("a"),Lxo=o("MarianMTModel"),xxo=o(" (Marian model)"),$xo=l(),Rb=a("li"),Pfe=a("strong"),kxo=o("mbart"),Sxo=o(" \u2014 "),nG=a("a"),Rxo=o("MBartForConditionalGeneration"),Pxo=o(" (mBART model)"),Bxo=l(),Pb=a("li"),Bfe=a("strong"),Ixo=o("mt5"),Nxo=o(" \u2014 "),sG=a("a"),qxo=o("MT5ForConditionalGeneration"),jxo=o(" (mT5 model)"),Dxo=l(),Bb=a("li"),Ife=a("strong"),Gxo=o("pegasus"),Oxo=o(" \u2014 "),lG=a("a"),Vxo=o("PegasusForConditionalGeneration"),Xxo=o(" (Pegasus model)"),zxo=l(),Ib=a("li"),Nfe=a("strong"),Wxo=o("plbart"),Qxo=o(" \u2014 "),iG=a("a"),Hxo=o("PLBartForConditionalGeneration"),Uxo=o(" (PLBart model)"),Jxo=l(),Nb=a("li"),qfe=a("strong"),Yxo=o("prophetnet"),Kxo=o(" \u2014 "),dG=a("a"),Zxo=o("ProphetNetForConditionalGeneration"),e$o=o(" (ProphetNet model)"),o$o=l(),qb=a("li"),jfe=a("strong"),r$o=o("t5"),t$o=o(" \u2014 "),cG=a("a"),a$o=o("T5ForConditionalGeneration"),n$o=o(" (T5 model)"),s$o=l(),jb=a("li"),Dfe=a("strong"),l$o=o("xlm-prophetnet"),i$o=o(" \u2014 "),fG=a("a"),d$o=o("XLMProphetNetForConditionalGeneration"),c$o=o(" (XLMProphetNet model)"),f$o=l(),Db=a("p"),m$o=o("The model is set in evaluation mode by default using "),Gfe=a("code"),g$o=o("model.eval()"),h$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ofe=a("code"),p$o=o("model.train()"),_$o=l(),F(Gb.$$.fragment),Gqe=l(),Di=a("h2"),Ob=a("a"),Vfe=a("span"),F(xy.$$.fragment),u$o=l(),Xfe=a("span"),b$o=o("AutoModelForSequenceClassification"),Oqe=l(),Ro=a("div"),F($y.$$.fragment),v$o=l(),Gi=a("p"),F$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),mG=a("a"),T$o=o("from_pretrained()"),M$o=o(" class method or the "),gG=a("a"),E$o=o("from_config()"),C$o=o(` class
method.`),w$o=l(),ky=a("p"),A$o=o("This class cannot be instantiated directly using "),zfe=a("code"),y$o=o("__init__()"),L$o=o(" (throws an error)."),x$o=l(),it=a("div"),F(Sy.$$.fragment),$$o=l(),Wfe=a("p"),k$o=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),S$o=l(),Oi=a("p"),R$o=o(`Note:
Loading a model from its configuration file does `),Qfe=a("strong"),P$o=o("not"),B$o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hG=a("a"),I$o=o("from_pretrained()"),N$o=o(" to load the model weights."),q$o=l(),F(Vb.$$.fragment),j$o=l(),oo=a("div"),F(Ry.$$.fragment),D$o=l(),Hfe=a("p"),G$o=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),O$o=l(),Ra=a("p"),V$o=o("The model class to instantiate is selected based on the "),Ufe=a("code"),X$o=o("model_type"),z$o=o(` property of the config object (either
passed as an argument or loaded from `),Jfe=a("code"),W$o=o("pretrained_model_name_or_path"),Q$o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yfe=a("code"),H$o=o("pretrained_model_name_or_path"),U$o=o(":"),J$o=l(),N=a("ul"),Xb=a("li"),Kfe=a("strong"),Y$o=o("albert"),K$o=o(" \u2014 "),pG=a("a"),Z$o=o("AlbertForSequenceClassification"),eko=o(" (ALBERT model)"),oko=l(),zb=a("li"),Zfe=a("strong"),rko=o("bart"),tko=o(" \u2014 "),_G=a("a"),ako=o("BartForSequenceClassification"),nko=o(" (BART model)"),sko=l(),Wb=a("li"),eme=a("strong"),lko=o("bert"),iko=o(" \u2014 "),uG=a("a"),dko=o("BertForSequenceClassification"),cko=o(" (BERT model)"),fko=l(),Qb=a("li"),ome=a("strong"),mko=o("big_bird"),gko=o(" \u2014 "),bG=a("a"),hko=o("BigBirdForSequenceClassification"),pko=o(" (BigBird model)"),_ko=l(),Hb=a("li"),rme=a("strong"),uko=o("bigbird_pegasus"),bko=o(" \u2014 "),vG=a("a"),vko=o("BigBirdPegasusForSequenceClassification"),Fko=o(" (BigBirdPegasus model)"),Tko=l(),Ub=a("li"),tme=a("strong"),Mko=o("camembert"),Eko=o(" \u2014 "),FG=a("a"),Cko=o("CamembertForSequenceClassification"),wko=o(" (CamemBERT model)"),Ako=l(),Jb=a("li"),ame=a("strong"),yko=o("canine"),Lko=o(" \u2014 "),TG=a("a"),xko=o("CanineForSequenceClassification"),$ko=o(" (Canine model)"),kko=l(),Yb=a("li"),nme=a("strong"),Sko=o("convbert"),Rko=o(" \u2014 "),MG=a("a"),Pko=o("ConvBertForSequenceClassification"),Bko=o(" (ConvBERT model)"),Iko=l(),Kb=a("li"),sme=a("strong"),Nko=o("ctrl"),qko=o(" \u2014 "),EG=a("a"),jko=o("CTRLForSequenceClassification"),Dko=o(" (CTRL model)"),Gko=l(),Zb=a("li"),lme=a("strong"),Oko=o("data2vec-text"),Vko=o(" \u2014 "),CG=a("a"),Xko=o("Data2VecTextForSequenceClassification"),zko=o(" (Data2VecText model)"),Wko=l(),e2=a("li"),ime=a("strong"),Qko=o("deberta"),Hko=o(" \u2014 "),wG=a("a"),Uko=o("DebertaForSequenceClassification"),Jko=o(" (DeBERTa model)"),Yko=l(),o2=a("li"),dme=a("strong"),Kko=o("deberta-v2"),Zko=o(" \u2014 "),AG=a("a"),eSo=o("DebertaV2ForSequenceClassification"),oSo=o(" (DeBERTa-v2 model)"),rSo=l(),r2=a("li"),cme=a("strong"),tSo=o("distilbert"),aSo=o(" \u2014 "),yG=a("a"),nSo=o("DistilBertForSequenceClassification"),sSo=o(" (DistilBERT model)"),lSo=l(),t2=a("li"),fme=a("strong"),iSo=o("electra"),dSo=o(" \u2014 "),LG=a("a"),cSo=o("ElectraForSequenceClassification"),fSo=o(" (ELECTRA model)"),mSo=l(),a2=a("li"),mme=a("strong"),gSo=o("flaubert"),hSo=o(" \u2014 "),xG=a("a"),pSo=o("FlaubertForSequenceClassification"),_So=o(" (FlauBERT model)"),uSo=l(),n2=a("li"),gme=a("strong"),bSo=o("fnet"),vSo=o(" \u2014 "),$G=a("a"),FSo=o("FNetForSequenceClassification"),TSo=o(" (FNet model)"),MSo=l(),s2=a("li"),hme=a("strong"),ESo=o("funnel"),CSo=o(" \u2014 "),kG=a("a"),wSo=o("FunnelForSequenceClassification"),ASo=o(" (Funnel Transformer model)"),ySo=l(),l2=a("li"),pme=a("strong"),LSo=o("gpt2"),xSo=o(" \u2014 "),SG=a("a"),$So=o("GPT2ForSequenceClassification"),kSo=o(" (OpenAI GPT-2 model)"),SSo=l(),i2=a("li"),_me=a("strong"),RSo=o("gpt_neo"),PSo=o(" \u2014 "),RG=a("a"),BSo=o("GPTNeoForSequenceClassification"),ISo=o(" (GPT Neo model)"),NSo=l(),d2=a("li"),ume=a("strong"),qSo=o("gptj"),jSo=o(" \u2014 "),PG=a("a"),DSo=o("GPTJForSequenceClassification"),GSo=o(" (GPT-J model)"),OSo=l(),c2=a("li"),bme=a("strong"),VSo=o("ibert"),XSo=o(" \u2014 "),BG=a("a"),zSo=o("IBertForSequenceClassification"),WSo=o(" (I-BERT model)"),QSo=l(),f2=a("li"),vme=a("strong"),HSo=o("layoutlm"),USo=o(" \u2014 "),IG=a("a"),JSo=o("LayoutLMForSequenceClassification"),YSo=o(" (LayoutLM model)"),KSo=l(),m2=a("li"),Fme=a("strong"),ZSo=o("layoutlmv2"),eRo=o(" \u2014 "),NG=a("a"),oRo=o("LayoutLMv2ForSequenceClassification"),rRo=o(" (LayoutLMv2 model)"),tRo=l(),g2=a("li"),Tme=a("strong"),aRo=o("layoutlmv3"),nRo=o(" \u2014 "),qG=a("a"),sRo=o("LayoutLMv3ForSequenceClassification"),lRo=o(" (LayoutLMv3 model)"),iRo=l(),h2=a("li"),Mme=a("strong"),dRo=o("led"),cRo=o(" \u2014 "),jG=a("a"),fRo=o("LEDForSequenceClassification"),mRo=o(" (LED model)"),gRo=l(),p2=a("li"),Eme=a("strong"),hRo=o("longformer"),pRo=o(" \u2014 "),DG=a("a"),_Ro=o("LongformerForSequenceClassification"),uRo=o(" (Longformer model)"),bRo=l(),_2=a("li"),Cme=a("strong"),vRo=o("mbart"),FRo=o(" \u2014 "),GG=a("a"),TRo=o("MBartForSequenceClassification"),MRo=o(" (mBART model)"),ERo=l(),u2=a("li"),wme=a("strong"),CRo=o("megatron-bert"),wRo=o(" \u2014 "),OG=a("a"),ARo=o("MegatronBertForSequenceClassification"),yRo=o(" (MegatronBert model)"),LRo=l(),b2=a("li"),Ame=a("strong"),xRo=o("mobilebert"),$Ro=o(" \u2014 "),VG=a("a"),kRo=o("MobileBertForSequenceClassification"),SRo=o(" (MobileBERT model)"),RRo=l(),v2=a("li"),yme=a("strong"),PRo=o("mpnet"),BRo=o(" \u2014 "),XG=a("a"),IRo=o("MPNetForSequenceClassification"),NRo=o(" (MPNet model)"),qRo=l(),F2=a("li"),Lme=a("strong"),jRo=o("nystromformer"),DRo=o(" \u2014 "),zG=a("a"),GRo=o("NystromformerForSequenceClassification"),ORo=o(" (Nystromformer model)"),VRo=l(),T2=a("li"),xme=a("strong"),XRo=o("openai-gpt"),zRo=o(" \u2014 "),WG=a("a"),WRo=o("OpenAIGPTForSequenceClassification"),QRo=o(" (OpenAI GPT model)"),HRo=l(),M2=a("li"),$me=a("strong"),URo=o("perceiver"),JRo=o(" \u2014 "),QG=a("a"),YRo=o("PerceiverForSequenceClassification"),KRo=o(" (Perceiver model)"),ZRo=l(),E2=a("li"),kme=a("strong"),ePo=o("plbart"),oPo=o(" \u2014 "),HG=a("a"),rPo=o("PLBartForSequenceClassification"),tPo=o(" (PLBart model)"),aPo=l(),C2=a("li"),Sme=a("strong"),nPo=o("qdqbert"),sPo=o(" \u2014 "),UG=a("a"),lPo=o("QDQBertForSequenceClassification"),iPo=o(" (QDQBert model)"),dPo=l(),w2=a("li"),Rme=a("strong"),cPo=o("reformer"),fPo=o(" \u2014 "),JG=a("a"),mPo=o("ReformerForSequenceClassification"),gPo=o(" (Reformer model)"),hPo=l(),A2=a("li"),Pme=a("strong"),pPo=o("rembert"),_Po=o(" \u2014 "),YG=a("a"),uPo=o("RemBertForSequenceClassification"),bPo=o(" (RemBERT model)"),vPo=l(),y2=a("li"),Bme=a("strong"),FPo=o("roberta"),TPo=o(" \u2014 "),KG=a("a"),MPo=o("RobertaForSequenceClassification"),EPo=o(" (RoBERTa model)"),CPo=l(),L2=a("li"),Ime=a("strong"),wPo=o("roformer"),APo=o(" \u2014 "),ZG=a("a"),yPo=o("RoFormerForSequenceClassification"),LPo=o(" (RoFormer model)"),xPo=l(),x2=a("li"),Nme=a("strong"),$Po=o("squeezebert"),kPo=o(" \u2014 "),eO=a("a"),SPo=o("SqueezeBertForSequenceClassification"),RPo=o(" (SqueezeBERT model)"),PPo=l(),$2=a("li"),qme=a("strong"),BPo=o("tapas"),IPo=o(" \u2014 "),oO=a("a"),NPo=o("TapasForSequenceClassification"),qPo=o(" (TAPAS model)"),jPo=l(),k2=a("li"),jme=a("strong"),DPo=o("transfo-xl"),GPo=o(" \u2014 "),rO=a("a"),OPo=o("TransfoXLForSequenceClassification"),VPo=o(" (Transformer-XL model)"),XPo=l(),S2=a("li"),Dme=a("strong"),zPo=o("xlm"),WPo=o(" \u2014 "),tO=a("a"),QPo=o("XLMForSequenceClassification"),HPo=o(" (XLM model)"),UPo=l(),R2=a("li"),Gme=a("strong"),JPo=o("xlm-roberta"),YPo=o(" \u2014 "),aO=a("a"),KPo=o("XLMRobertaForSequenceClassification"),ZPo=o(" (XLM-RoBERTa model)"),eBo=l(),P2=a("li"),Ome=a("strong"),oBo=o("xlm-roberta-xl"),rBo=o(" \u2014 "),nO=a("a"),tBo=o("XLMRobertaXLForSequenceClassification"),aBo=o(" (XLM-RoBERTa-XL model)"),nBo=l(),B2=a("li"),Vme=a("strong"),sBo=o("xlnet"),lBo=o(" \u2014 "),sO=a("a"),iBo=o("XLNetForSequenceClassification"),dBo=o(" (XLNet model)"),cBo=l(),I2=a("li"),Xme=a("strong"),fBo=o("yoso"),mBo=o(" \u2014 "),lO=a("a"),gBo=o("YosoForSequenceClassification"),hBo=o(" (YOSO model)"),pBo=l(),N2=a("p"),_Bo=o("The model is set in evaluation mode by default using "),zme=a("code"),uBo=o("model.eval()"),bBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wme=a("code"),vBo=o("model.train()"),FBo=l(),F(q2.$$.fragment),Vqe=l(),Vi=a("h2"),j2=a("a"),Qme=a("span"),F(Py.$$.fragment),TBo=l(),Hme=a("span"),MBo=o("AutoModelForMultipleChoice"),Xqe=l(),Po=a("div"),F(By.$$.fragment),EBo=l(),Xi=a("p"),CBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),iO=a("a"),wBo=o("from_pretrained()"),ABo=o(" class method or the "),dO=a("a"),yBo=o("from_config()"),LBo=o(` class
method.`),xBo=l(),Iy=a("p"),$Bo=o("This class cannot be instantiated directly using "),Ume=a("code"),kBo=o("__init__()"),SBo=o(" (throws an error)."),RBo=l(),dt=a("div"),F(Ny.$$.fragment),PBo=l(),Jme=a("p"),BBo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),IBo=l(),zi=a("p"),NBo=o(`Note:
Loading a model from its configuration file does `),Yme=a("strong"),qBo=o("not"),jBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cO=a("a"),DBo=o("from_pretrained()"),GBo=o(" to load the model weights."),OBo=l(),F(D2.$$.fragment),VBo=l(),ro=a("div"),F(qy.$$.fragment),XBo=l(),Kme=a("p"),zBo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),WBo=l(),Pa=a("p"),QBo=o("The model class to instantiate is selected based on the "),Zme=a("code"),HBo=o("model_type"),UBo=o(` property of the config object (either
passed as an argument or loaded from `),ege=a("code"),JBo=o("pretrained_model_name_or_path"),YBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oge=a("code"),KBo=o("pretrained_model_name_or_path"),ZBo=o(":"),eIo=l(),K=a("ul"),G2=a("li"),rge=a("strong"),oIo=o("albert"),rIo=o(" \u2014 "),fO=a("a"),tIo=o("AlbertForMultipleChoice"),aIo=o(" (ALBERT model)"),nIo=l(),O2=a("li"),tge=a("strong"),sIo=o("bert"),lIo=o(" \u2014 "),mO=a("a"),iIo=o("BertForMultipleChoice"),dIo=o(" (BERT model)"),cIo=l(),V2=a("li"),age=a("strong"),fIo=o("big_bird"),mIo=o(" \u2014 "),gO=a("a"),gIo=o("BigBirdForMultipleChoice"),hIo=o(" (BigBird model)"),pIo=l(),X2=a("li"),nge=a("strong"),_Io=o("camembert"),uIo=o(" \u2014 "),hO=a("a"),bIo=o("CamembertForMultipleChoice"),vIo=o(" (CamemBERT model)"),FIo=l(),z2=a("li"),sge=a("strong"),TIo=o("canine"),MIo=o(" \u2014 "),pO=a("a"),EIo=o("CanineForMultipleChoice"),CIo=o(" (Canine model)"),wIo=l(),W2=a("li"),lge=a("strong"),AIo=o("convbert"),yIo=o(" \u2014 "),_O=a("a"),LIo=o("ConvBertForMultipleChoice"),xIo=o(" (ConvBERT model)"),$Io=l(),Q2=a("li"),ige=a("strong"),kIo=o("data2vec-text"),SIo=o(" \u2014 "),uO=a("a"),RIo=o("Data2VecTextForMultipleChoice"),PIo=o(" (Data2VecText model)"),BIo=l(),H2=a("li"),dge=a("strong"),IIo=o("deberta-v2"),NIo=o(" \u2014 "),bO=a("a"),qIo=o("DebertaV2ForMultipleChoice"),jIo=o(" (DeBERTa-v2 model)"),DIo=l(),U2=a("li"),cge=a("strong"),GIo=o("distilbert"),OIo=o(" \u2014 "),vO=a("a"),VIo=o("DistilBertForMultipleChoice"),XIo=o(" (DistilBERT model)"),zIo=l(),J2=a("li"),fge=a("strong"),WIo=o("electra"),QIo=o(" \u2014 "),FO=a("a"),HIo=o("ElectraForMultipleChoice"),UIo=o(" (ELECTRA model)"),JIo=l(),Y2=a("li"),mge=a("strong"),YIo=o("flaubert"),KIo=o(" \u2014 "),TO=a("a"),ZIo=o("FlaubertForMultipleChoice"),eNo=o(" (FlauBERT model)"),oNo=l(),K2=a("li"),gge=a("strong"),rNo=o("fnet"),tNo=o(" \u2014 "),MO=a("a"),aNo=o("FNetForMultipleChoice"),nNo=o(" (FNet model)"),sNo=l(),Z2=a("li"),hge=a("strong"),lNo=o("funnel"),iNo=o(" \u2014 "),EO=a("a"),dNo=o("FunnelForMultipleChoice"),cNo=o(" (Funnel Transformer model)"),fNo=l(),e5=a("li"),pge=a("strong"),mNo=o("ibert"),gNo=o(" \u2014 "),CO=a("a"),hNo=o("IBertForMultipleChoice"),pNo=o(" (I-BERT model)"),_No=l(),o5=a("li"),_ge=a("strong"),uNo=o("longformer"),bNo=o(" \u2014 "),wO=a("a"),vNo=o("LongformerForMultipleChoice"),FNo=o(" (Longformer model)"),TNo=l(),r5=a("li"),uge=a("strong"),MNo=o("megatron-bert"),ENo=o(" \u2014 "),AO=a("a"),CNo=o("MegatronBertForMultipleChoice"),wNo=o(" (MegatronBert model)"),ANo=l(),t5=a("li"),bge=a("strong"),yNo=o("mobilebert"),LNo=o(" \u2014 "),yO=a("a"),xNo=o("MobileBertForMultipleChoice"),$No=o(" (MobileBERT model)"),kNo=l(),a5=a("li"),vge=a("strong"),SNo=o("mpnet"),RNo=o(" \u2014 "),LO=a("a"),PNo=o("MPNetForMultipleChoice"),BNo=o(" (MPNet model)"),INo=l(),n5=a("li"),Fge=a("strong"),NNo=o("nystromformer"),qNo=o(" \u2014 "),xO=a("a"),jNo=o("NystromformerForMultipleChoice"),DNo=o(" (Nystromformer model)"),GNo=l(),s5=a("li"),Tge=a("strong"),ONo=o("qdqbert"),VNo=o(" \u2014 "),$O=a("a"),XNo=o("QDQBertForMultipleChoice"),zNo=o(" (QDQBert model)"),WNo=l(),l5=a("li"),Mge=a("strong"),QNo=o("rembert"),HNo=o(" \u2014 "),kO=a("a"),UNo=o("RemBertForMultipleChoice"),JNo=o(" (RemBERT model)"),YNo=l(),i5=a("li"),Ege=a("strong"),KNo=o("roberta"),ZNo=o(" \u2014 "),SO=a("a"),eqo=o("RobertaForMultipleChoice"),oqo=o(" (RoBERTa model)"),rqo=l(),d5=a("li"),Cge=a("strong"),tqo=o("roformer"),aqo=o(" \u2014 "),RO=a("a"),nqo=o("RoFormerForMultipleChoice"),sqo=o(" (RoFormer model)"),lqo=l(),c5=a("li"),wge=a("strong"),iqo=o("squeezebert"),dqo=o(" \u2014 "),PO=a("a"),cqo=o("SqueezeBertForMultipleChoice"),fqo=o(" (SqueezeBERT model)"),mqo=l(),f5=a("li"),Age=a("strong"),gqo=o("xlm"),hqo=o(" \u2014 "),BO=a("a"),pqo=o("XLMForMultipleChoice"),_qo=o(" (XLM model)"),uqo=l(),m5=a("li"),yge=a("strong"),bqo=o("xlm-roberta"),vqo=o(" \u2014 "),IO=a("a"),Fqo=o("XLMRobertaForMultipleChoice"),Tqo=o(" (XLM-RoBERTa model)"),Mqo=l(),g5=a("li"),Lge=a("strong"),Eqo=o("xlm-roberta-xl"),Cqo=o(" \u2014 "),NO=a("a"),wqo=o("XLMRobertaXLForMultipleChoice"),Aqo=o(" (XLM-RoBERTa-XL model)"),yqo=l(),h5=a("li"),xge=a("strong"),Lqo=o("xlnet"),xqo=o(" \u2014 "),qO=a("a"),$qo=o("XLNetForMultipleChoice"),kqo=o(" (XLNet model)"),Sqo=l(),p5=a("li"),$ge=a("strong"),Rqo=o("yoso"),Pqo=o(" \u2014 "),jO=a("a"),Bqo=o("YosoForMultipleChoice"),Iqo=o(" (YOSO model)"),Nqo=l(),_5=a("p"),qqo=o("The model is set in evaluation mode by default using "),kge=a("code"),jqo=o("model.eval()"),Dqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sge=a("code"),Gqo=o("model.train()"),Oqo=l(),F(u5.$$.fragment),zqe=l(),Wi=a("h2"),b5=a("a"),Rge=a("span"),F(jy.$$.fragment),Vqo=l(),Pge=a("span"),Xqo=o("AutoModelForNextSentencePrediction"),Wqe=l(),Bo=a("div"),F(Dy.$$.fragment),zqo=l(),Qi=a("p"),Wqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),DO=a("a"),Qqo=o("from_pretrained()"),Hqo=o(" class method or the "),GO=a("a"),Uqo=o("from_config()"),Jqo=o(` class
method.`),Yqo=l(),Gy=a("p"),Kqo=o("This class cannot be instantiated directly using "),Bge=a("code"),Zqo=o("__init__()"),ejo=o(" (throws an error)."),ojo=l(),ct=a("div"),F(Oy.$$.fragment),rjo=l(),Ige=a("p"),tjo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),ajo=l(),Hi=a("p"),njo=o(`Note:
Loading a model from its configuration file does `),Nge=a("strong"),sjo=o("not"),ljo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OO=a("a"),ijo=o("from_pretrained()"),djo=o(" to load the model weights."),cjo=l(),F(v5.$$.fragment),fjo=l(),to=a("div"),F(Vy.$$.fragment),mjo=l(),qge=a("p"),gjo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),hjo=l(),Ba=a("p"),pjo=o("The model class to instantiate is selected based on the "),jge=a("code"),_jo=o("model_type"),ujo=o(` property of the config object (either
passed as an argument or loaded from `),Dge=a("code"),bjo=o("pretrained_model_name_or_path"),vjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gge=a("code"),Fjo=o("pretrained_model_name_or_path"),Tjo=o(":"),Mjo=l(),Yr=a("ul"),F5=a("li"),Oge=a("strong"),Ejo=o("bert"),Cjo=o(" \u2014 "),VO=a("a"),wjo=o("BertForNextSentencePrediction"),Ajo=o(" (BERT model)"),yjo=l(),T5=a("li"),Vge=a("strong"),Ljo=o("fnet"),xjo=o(" \u2014 "),XO=a("a"),$jo=o("FNetForNextSentencePrediction"),kjo=o(" (FNet model)"),Sjo=l(),M5=a("li"),Xge=a("strong"),Rjo=o("megatron-bert"),Pjo=o(" \u2014 "),zO=a("a"),Bjo=o("MegatronBertForNextSentencePrediction"),Ijo=o(" (MegatronBert model)"),Njo=l(),E5=a("li"),zge=a("strong"),qjo=o("mobilebert"),jjo=o(" \u2014 "),WO=a("a"),Djo=o("MobileBertForNextSentencePrediction"),Gjo=o(" (MobileBERT model)"),Ojo=l(),C5=a("li"),Wge=a("strong"),Vjo=o("qdqbert"),Xjo=o(" \u2014 "),QO=a("a"),zjo=o("QDQBertForNextSentencePrediction"),Wjo=o(" (QDQBert model)"),Qjo=l(),w5=a("p"),Hjo=o("The model is set in evaluation mode by default using "),Qge=a("code"),Ujo=o("model.eval()"),Jjo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hge=a("code"),Yjo=o("model.train()"),Kjo=l(),F(A5.$$.fragment),Qqe=l(),Ui=a("h2"),y5=a("a"),Uge=a("span"),F(Xy.$$.fragment),Zjo=l(),Jge=a("span"),eDo=o("AutoModelForTokenClassification"),Hqe=l(),Io=a("div"),F(zy.$$.fragment),oDo=l(),Ji=a("p"),rDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),HO=a("a"),tDo=o("from_pretrained()"),aDo=o(" class method or the "),UO=a("a"),nDo=o("from_config()"),sDo=o(` class
method.`),lDo=l(),Wy=a("p"),iDo=o("This class cannot be instantiated directly using "),Yge=a("code"),dDo=o("__init__()"),cDo=o(" (throws an error)."),fDo=l(),ft=a("div"),F(Qy.$$.fragment),mDo=l(),Kge=a("p"),gDo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),hDo=l(),Yi=a("p"),pDo=o(`Note:
Loading a model from its configuration file does `),Zge=a("strong"),_Do=o("not"),uDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JO=a("a"),bDo=o("from_pretrained()"),vDo=o(" to load the model weights."),FDo=l(),F(L5.$$.fragment),TDo=l(),ao=a("div"),F(Hy.$$.fragment),MDo=l(),ehe=a("p"),EDo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),CDo=l(),Ia=a("p"),wDo=o("The model class to instantiate is selected based on the "),ohe=a("code"),ADo=o("model_type"),yDo=o(` property of the config object (either
passed as an argument or loaded from `),rhe=a("code"),LDo=o("pretrained_model_name_or_path"),xDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),the=a("code"),$Do=o("pretrained_model_name_or_path"),kDo=o(":"),SDo=l(),U=a("ul"),x5=a("li"),ahe=a("strong"),RDo=o("albert"),PDo=o(" \u2014 "),YO=a("a"),BDo=o("AlbertForTokenClassification"),IDo=o(" (ALBERT model)"),NDo=l(),$5=a("li"),nhe=a("strong"),qDo=o("bert"),jDo=o(" \u2014 "),KO=a("a"),DDo=o("BertForTokenClassification"),GDo=o(" (BERT model)"),ODo=l(),k5=a("li"),she=a("strong"),VDo=o("big_bird"),XDo=o(" \u2014 "),ZO=a("a"),zDo=o("BigBirdForTokenClassification"),WDo=o(" (BigBird model)"),QDo=l(),S5=a("li"),lhe=a("strong"),HDo=o("camembert"),UDo=o(" \u2014 "),eV=a("a"),JDo=o("CamembertForTokenClassification"),YDo=o(" (CamemBERT model)"),KDo=l(),R5=a("li"),ihe=a("strong"),ZDo=o("canine"),eGo=o(" \u2014 "),oV=a("a"),oGo=o("CanineForTokenClassification"),rGo=o(" (Canine model)"),tGo=l(),P5=a("li"),dhe=a("strong"),aGo=o("convbert"),nGo=o(" \u2014 "),rV=a("a"),sGo=o("ConvBertForTokenClassification"),lGo=o(" (ConvBERT model)"),iGo=l(),B5=a("li"),che=a("strong"),dGo=o("data2vec-text"),cGo=o(" \u2014 "),tV=a("a"),fGo=o("Data2VecTextForTokenClassification"),mGo=o(" (Data2VecText model)"),gGo=l(),I5=a("li"),fhe=a("strong"),hGo=o("deberta"),pGo=o(" \u2014 "),aV=a("a"),_Go=o("DebertaForTokenClassification"),uGo=o(" (DeBERTa model)"),bGo=l(),N5=a("li"),mhe=a("strong"),vGo=o("deberta-v2"),FGo=o(" \u2014 "),nV=a("a"),TGo=o("DebertaV2ForTokenClassification"),MGo=o(" (DeBERTa-v2 model)"),EGo=l(),q5=a("li"),ghe=a("strong"),CGo=o("distilbert"),wGo=o(" \u2014 "),sV=a("a"),AGo=o("DistilBertForTokenClassification"),yGo=o(" (DistilBERT model)"),LGo=l(),j5=a("li"),hhe=a("strong"),xGo=o("electra"),$Go=o(" \u2014 "),lV=a("a"),kGo=o("ElectraForTokenClassification"),SGo=o(" (ELECTRA model)"),RGo=l(),D5=a("li"),phe=a("strong"),PGo=o("flaubert"),BGo=o(" \u2014 "),iV=a("a"),IGo=o("FlaubertForTokenClassification"),NGo=o(" (FlauBERT model)"),qGo=l(),G5=a("li"),_he=a("strong"),jGo=o("fnet"),DGo=o(" \u2014 "),dV=a("a"),GGo=o("FNetForTokenClassification"),OGo=o(" (FNet model)"),VGo=l(),O5=a("li"),uhe=a("strong"),XGo=o("funnel"),zGo=o(" \u2014 "),cV=a("a"),WGo=o("FunnelForTokenClassification"),QGo=o(" (Funnel Transformer model)"),HGo=l(),V5=a("li"),bhe=a("strong"),UGo=o("gpt2"),JGo=o(" \u2014 "),fV=a("a"),YGo=o("GPT2ForTokenClassification"),KGo=o(" (OpenAI GPT-2 model)"),ZGo=l(),X5=a("li"),vhe=a("strong"),eOo=o("ibert"),oOo=o(" \u2014 "),mV=a("a"),rOo=o("IBertForTokenClassification"),tOo=o(" (I-BERT model)"),aOo=l(),z5=a("li"),Fhe=a("strong"),nOo=o("layoutlm"),sOo=o(" \u2014 "),gV=a("a"),lOo=o("LayoutLMForTokenClassification"),iOo=o(" (LayoutLM model)"),dOo=l(),W5=a("li"),The=a("strong"),cOo=o("layoutlmv2"),fOo=o(" \u2014 "),hV=a("a"),mOo=o("LayoutLMv2ForTokenClassification"),gOo=o(" (LayoutLMv2 model)"),hOo=l(),Q5=a("li"),Mhe=a("strong"),pOo=o("layoutlmv3"),_Oo=o(" \u2014 "),pV=a("a"),uOo=o("LayoutLMv3ForTokenClassification"),bOo=o(" (LayoutLMv3 model)"),vOo=l(),H5=a("li"),Ehe=a("strong"),FOo=o("longformer"),TOo=o(" \u2014 "),_V=a("a"),MOo=o("LongformerForTokenClassification"),EOo=o(" (Longformer model)"),COo=l(),U5=a("li"),Che=a("strong"),wOo=o("megatron-bert"),AOo=o(" \u2014 "),uV=a("a"),yOo=o("MegatronBertForTokenClassification"),LOo=o(" (MegatronBert model)"),xOo=l(),J5=a("li"),whe=a("strong"),$Oo=o("mobilebert"),kOo=o(" \u2014 "),bV=a("a"),SOo=o("MobileBertForTokenClassification"),ROo=o(" (MobileBERT model)"),POo=l(),Y5=a("li"),Ahe=a("strong"),BOo=o("mpnet"),IOo=o(" \u2014 "),vV=a("a"),NOo=o("MPNetForTokenClassification"),qOo=o(" (MPNet model)"),jOo=l(),K5=a("li"),yhe=a("strong"),DOo=o("nystromformer"),GOo=o(" \u2014 "),FV=a("a"),OOo=o("NystromformerForTokenClassification"),VOo=o(" (Nystromformer model)"),XOo=l(),Z5=a("li"),Lhe=a("strong"),zOo=o("qdqbert"),WOo=o(" \u2014 "),TV=a("a"),QOo=o("QDQBertForTokenClassification"),HOo=o(" (QDQBert model)"),UOo=l(),ev=a("li"),xhe=a("strong"),JOo=o("rembert"),YOo=o(" \u2014 "),MV=a("a"),KOo=o("RemBertForTokenClassification"),ZOo=o(" (RemBERT model)"),eVo=l(),ov=a("li"),$he=a("strong"),oVo=o("roberta"),rVo=o(" \u2014 "),EV=a("a"),tVo=o("RobertaForTokenClassification"),aVo=o(" (RoBERTa model)"),nVo=l(),rv=a("li"),khe=a("strong"),sVo=o("roformer"),lVo=o(" \u2014 "),CV=a("a"),iVo=o("RoFormerForTokenClassification"),dVo=o(" (RoFormer model)"),cVo=l(),tv=a("li"),She=a("strong"),fVo=o("squeezebert"),mVo=o(" \u2014 "),wV=a("a"),gVo=o("SqueezeBertForTokenClassification"),hVo=o(" (SqueezeBERT model)"),pVo=l(),av=a("li"),Rhe=a("strong"),_Vo=o("xlm"),uVo=o(" \u2014 "),AV=a("a"),bVo=o("XLMForTokenClassification"),vVo=o(" (XLM model)"),FVo=l(),nv=a("li"),Phe=a("strong"),TVo=o("xlm-roberta"),MVo=o(" \u2014 "),yV=a("a"),EVo=o("XLMRobertaForTokenClassification"),CVo=o(" (XLM-RoBERTa model)"),wVo=l(),sv=a("li"),Bhe=a("strong"),AVo=o("xlm-roberta-xl"),yVo=o(" \u2014 "),LV=a("a"),LVo=o("XLMRobertaXLForTokenClassification"),xVo=o(" (XLM-RoBERTa-XL model)"),$Vo=l(),lv=a("li"),Ihe=a("strong"),kVo=o("xlnet"),SVo=o(" \u2014 "),xV=a("a"),RVo=o("XLNetForTokenClassification"),PVo=o(" (XLNet model)"),BVo=l(),iv=a("li"),Nhe=a("strong"),IVo=o("yoso"),NVo=o(" \u2014 "),$V=a("a"),qVo=o("YosoForTokenClassification"),jVo=o(" (YOSO model)"),DVo=l(),dv=a("p"),GVo=o("The model is set in evaluation mode by default using "),qhe=a("code"),OVo=o("model.eval()"),VVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jhe=a("code"),XVo=o("model.train()"),zVo=l(),F(cv.$$.fragment),Uqe=l(),Ki=a("h2"),fv=a("a"),Dhe=a("span"),F(Uy.$$.fragment),WVo=l(),Ghe=a("span"),QVo=o("AutoModelForQuestionAnswering"),Jqe=l(),No=a("div"),F(Jy.$$.fragment),HVo=l(),Zi=a("p"),UVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),kV=a("a"),JVo=o("from_pretrained()"),YVo=o(" class method or the "),SV=a("a"),KVo=o("from_config()"),ZVo=o(` class
method.`),eXo=l(),Yy=a("p"),oXo=o("This class cannot be instantiated directly using "),Ohe=a("code"),rXo=o("__init__()"),tXo=o(" (throws an error)."),aXo=l(),mt=a("div"),F(Ky.$$.fragment),nXo=l(),Vhe=a("p"),sXo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),lXo=l(),ed=a("p"),iXo=o(`Note:
Loading a model from its configuration file does `),Xhe=a("strong"),dXo=o("not"),cXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RV=a("a"),fXo=o("from_pretrained()"),mXo=o(" to load the model weights."),gXo=l(),F(mv.$$.fragment),hXo=l(),no=a("div"),F(Zy.$$.fragment),pXo=l(),zhe=a("p"),_Xo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),uXo=l(),Na=a("p"),bXo=o("The model class to instantiate is selected based on the "),Whe=a("code"),vXo=o("model_type"),FXo=o(` property of the config object (either
passed as an argument or loaded from `),Qhe=a("code"),TXo=o("pretrained_model_name_or_path"),MXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hhe=a("code"),EXo=o("pretrained_model_name_or_path"),CXo=o(":"),wXo=l(),V=a("ul"),gv=a("li"),Uhe=a("strong"),AXo=o("albert"),yXo=o(" \u2014 "),PV=a("a"),LXo=o("AlbertForQuestionAnswering"),xXo=o(" (ALBERT model)"),$Xo=l(),hv=a("li"),Jhe=a("strong"),kXo=o("bart"),SXo=o(" \u2014 "),BV=a("a"),RXo=o("BartForQuestionAnswering"),PXo=o(" (BART model)"),BXo=l(),pv=a("li"),Yhe=a("strong"),IXo=o("bert"),NXo=o(" \u2014 "),IV=a("a"),qXo=o("BertForQuestionAnswering"),jXo=o(" (BERT model)"),DXo=l(),_v=a("li"),Khe=a("strong"),GXo=o("big_bird"),OXo=o(" \u2014 "),NV=a("a"),VXo=o("BigBirdForQuestionAnswering"),XXo=o(" (BigBird model)"),zXo=l(),uv=a("li"),Zhe=a("strong"),WXo=o("bigbird_pegasus"),QXo=o(" \u2014 "),qV=a("a"),HXo=o("BigBirdPegasusForQuestionAnswering"),UXo=o(" (BigBirdPegasus model)"),JXo=l(),bv=a("li"),epe=a("strong"),YXo=o("camembert"),KXo=o(" \u2014 "),jV=a("a"),ZXo=o("CamembertForQuestionAnswering"),ezo=o(" (CamemBERT model)"),ozo=l(),vv=a("li"),ope=a("strong"),rzo=o("canine"),tzo=o(" \u2014 "),DV=a("a"),azo=o("CanineForQuestionAnswering"),nzo=o(" (Canine model)"),szo=l(),Fv=a("li"),rpe=a("strong"),lzo=o("convbert"),izo=o(" \u2014 "),GV=a("a"),dzo=o("ConvBertForQuestionAnswering"),czo=o(" (ConvBERT model)"),fzo=l(),Tv=a("li"),tpe=a("strong"),mzo=o("data2vec-text"),gzo=o(" \u2014 "),OV=a("a"),hzo=o("Data2VecTextForQuestionAnswering"),pzo=o(" (Data2VecText model)"),_zo=l(),Mv=a("li"),ape=a("strong"),uzo=o("deberta"),bzo=o(" \u2014 "),VV=a("a"),vzo=o("DebertaForQuestionAnswering"),Fzo=o(" (DeBERTa model)"),Tzo=l(),Ev=a("li"),npe=a("strong"),Mzo=o("deberta-v2"),Ezo=o(" \u2014 "),XV=a("a"),Czo=o("DebertaV2ForQuestionAnswering"),wzo=o(" (DeBERTa-v2 model)"),Azo=l(),Cv=a("li"),spe=a("strong"),yzo=o("distilbert"),Lzo=o(" \u2014 "),zV=a("a"),xzo=o("DistilBertForQuestionAnswering"),$zo=o(" (DistilBERT model)"),kzo=l(),wv=a("li"),lpe=a("strong"),Szo=o("electra"),Rzo=o(" \u2014 "),WV=a("a"),Pzo=o("ElectraForQuestionAnswering"),Bzo=o(" (ELECTRA model)"),Izo=l(),Av=a("li"),ipe=a("strong"),Nzo=o("flaubert"),qzo=o(" \u2014 "),QV=a("a"),jzo=o("FlaubertForQuestionAnsweringSimple"),Dzo=o(" (FlauBERT model)"),Gzo=l(),yv=a("li"),dpe=a("strong"),Ozo=o("fnet"),Vzo=o(" \u2014 "),HV=a("a"),Xzo=o("FNetForQuestionAnswering"),zzo=o(" (FNet model)"),Wzo=l(),Lv=a("li"),cpe=a("strong"),Qzo=o("funnel"),Hzo=o(" \u2014 "),UV=a("a"),Uzo=o("FunnelForQuestionAnswering"),Jzo=o(" (Funnel Transformer model)"),Yzo=l(),xv=a("li"),fpe=a("strong"),Kzo=o("gptj"),Zzo=o(" \u2014 "),JV=a("a"),eWo=o("GPTJForQuestionAnswering"),oWo=o(" (GPT-J model)"),rWo=l(),$v=a("li"),mpe=a("strong"),tWo=o("ibert"),aWo=o(" \u2014 "),YV=a("a"),nWo=o("IBertForQuestionAnswering"),sWo=o(" (I-BERT model)"),lWo=l(),kv=a("li"),gpe=a("strong"),iWo=o("layoutlmv2"),dWo=o(" \u2014 "),KV=a("a"),cWo=o("LayoutLMv2ForQuestionAnswering"),fWo=o(" (LayoutLMv2 model)"),mWo=l(),Sv=a("li"),hpe=a("strong"),gWo=o("layoutlmv3"),hWo=o(" \u2014 "),ZV=a("a"),pWo=o("LayoutLMv3ForQuestionAnswering"),_Wo=o(" (LayoutLMv3 model)"),uWo=l(),Rv=a("li"),ppe=a("strong"),bWo=o("led"),vWo=o(" \u2014 "),eX=a("a"),FWo=o("LEDForQuestionAnswering"),TWo=o(" (LED model)"),MWo=l(),Pv=a("li"),_pe=a("strong"),EWo=o("longformer"),CWo=o(" \u2014 "),oX=a("a"),wWo=o("LongformerForQuestionAnswering"),AWo=o(" (Longformer model)"),yWo=l(),Bv=a("li"),upe=a("strong"),LWo=o("lxmert"),xWo=o(" \u2014 "),rX=a("a"),$Wo=o("LxmertForQuestionAnswering"),kWo=o(" (LXMERT model)"),SWo=l(),Iv=a("li"),bpe=a("strong"),RWo=o("mbart"),PWo=o(" \u2014 "),tX=a("a"),BWo=o("MBartForQuestionAnswering"),IWo=o(" (mBART model)"),NWo=l(),Nv=a("li"),vpe=a("strong"),qWo=o("megatron-bert"),jWo=o(" \u2014 "),aX=a("a"),DWo=o("MegatronBertForQuestionAnswering"),GWo=o(" (MegatronBert model)"),OWo=l(),qv=a("li"),Fpe=a("strong"),VWo=o("mobilebert"),XWo=o(" \u2014 "),nX=a("a"),zWo=o("MobileBertForQuestionAnswering"),WWo=o(" (MobileBERT model)"),QWo=l(),jv=a("li"),Tpe=a("strong"),HWo=o("mpnet"),UWo=o(" \u2014 "),sX=a("a"),JWo=o("MPNetForQuestionAnswering"),YWo=o(" (MPNet model)"),KWo=l(),Dv=a("li"),Mpe=a("strong"),ZWo=o("nystromformer"),eQo=o(" \u2014 "),lX=a("a"),oQo=o("NystromformerForQuestionAnswering"),rQo=o(" (Nystromformer model)"),tQo=l(),Gv=a("li"),Epe=a("strong"),aQo=o("qdqbert"),nQo=o(" \u2014 "),iX=a("a"),sQo=o("QDQBertForQuestionAnswering"),lQo=o(" (QDQBert model)"),iQo=l(),Ov=a("li"),Cpe=a("strong"),dQo=o("reformer"),cQo=o(" \u2014 "),dX=a("a"),fQo=o("ReformerForQuestionAnswering"),mQo=o(" (Reformer model)"),gQo=l(),Vv=a("li"),wpe=a("strong"),hQo=o("rembert"),pQo=o(" \u2014 "),cX=a("a"),_Qo=o("RemBertForQuestionAnswering"),uQo=o(" (RemBERT model)"),bQo=l(),Xv=a("li"),Ape=a("strong"),vQo=o("roberta"),FQo=o(" \u2014 "),fX=a("a"),TQo=o("RobertaForQuestionAnswering"),MQo=o(" (RoBERTa model)"),EQo=l(),zv=a("li"),ype=a("strong"),CQo=o("roformer"),wQo=o(" \u2014 "),mX=a("a"),AQo=o("RoFormerForQuestionAnswering"),yQo=o(" (RoFormer model)"),LQo=l(),Wv=a("li"),Lpe=a("strong"),xQo=o("splinter"),$Qo=o(" \u2014 "),gX=a("a"),kQo=o("SplinterForQuestionAnswering"),SQo=o(" (Splinter model)"),RQo=l(),Qv=a("li"),xpe=a("strong"),PQo=o("squeezebert"),BQo=o(" \u2014 "),hX=a("a"),IQo=o("SqueezeBertForQuestionAnswering"),NQo=o(" (SqueezeBERT model)"),qQo=l(),Hv=a("li"),$pe=a("strong"),jQo=o("xlm"),DQo=o(" \u2014 "),pX=a("a"),GQo=o("XLMForQuestionAnsweringSimple"),OQo=o(" (XLM model)"),VQo=l(),Uv=a("li"),kpe=a("strong"),XQo=o("xlm-roberta"),zQo=o(" \u2014 "),_X=a("a"),WQo=o("XLMRobertaForQuestionAnswering"),QQo=o(" (XLM-RoBERTa model)"),HQo=l(),Jv=a("li"),Spe=a("strong"),UQo=o("xlm-roberta-xl"),JQo=o(" \u2014 "),uX=a("a"),YQo=o("XLMRobertaXLForQuestionAnswering"),KQo=o(" (XLM-RoBERTa-XL model)"),ZQo=l(),Yv=a("li"),Rpe=a("strong"),eHo=o("xlnet"),oHo=o(" \u2014 "),bX=a("a"),rHo=o("XLNetForQuestionAnsweringSimple"),tHo=o(" (XLNet model)"),aHo=l(),Kv=a("li"),Ppe=a("strong"),nHo=o("yoso"),sHo=o(" \u2014 "),vX=a("a"),lHo=o("YosoForQuestionAnswering"),iHo=o(" (YOSO model)"),dHo=l(),Zv=a("p"),cHo=o("The model is set in evaluation mode by default using "),Bpe=a("code"),fHo=o("model.eval()"),mHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ipe=a("code"),gHo=o("model.train()"),hHo=l(),F(eF.$$.fragment),Yqe=l(),od=a("h2"),oF=a("a"),Npe=a("span"),F(eL.$$.fragment),pHo=l(),qpe=a("span"),_Ho=o("AutoModelForTableQuestionAnswering"),Kqe=l(),qo=a("div"),F(oL.$$.fragment),uHo=l(),rd=a("p"),bHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),FX=a("a"),vHo=o("from_pretrained()"),FHo=o(" class method or the "),TX=a("a"),THo=o("from_config()"),MHo=o(` class
method.`),EHo=l(),rL=a("p"),CHo=o("This class cannot be instantiated directly using "),jpe=a("code"),wHo=o("__init__()"),AHo=o(" (throws an error)."),yHo=l(),gt=a("div"),F(tL.$$.fragment),LHo=l(),Dpe=a("p"),xHo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),$Ho=l(),td=a("p"),kHo=o(`Note:
Loading a model from its configuration file does `),Gpe=a("strong"),SHo=o("not"),RHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MX=a("a"),PHo=o("from_pretrained()"),BHo=o(" to load the model weights."),IHo=l(),F(rF.$$.fragment),NHo=l(),so=a("div"),F(aL.$$.fragment),qHo=l(),Ope=a("p"),jHo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),DHo=l(),qa=a("p"),GHo=o("The model class to instantiate is selected based on the "),Vpe=a("code"),OHo=o("model_type"),VHo=o(` property of the config object (either
passed as an argument or loaded from `),Xpe=a("code"),XHo=o("pretrained_model_name_or_path"),zHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zpe=a("code"),WHo=o("pretrained_model_name_or_path"),QHo=o(":"),HHo=l(),Wpe=a("ul"),tF=a("li"),Qpe=a("strong"),UHo=o("tapas"),JHo=o(" \u2014 "),EX=a("a"),YHo=o("TapasForQuestionAnswering"),KHo=o(" (TAPAS model)"),ZHo=l(),aF=a("p"),eUo=o("The model is set in evaluation mode by default using "),Hpe=a("code"),oUo=o("model.eval()"),rUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Upe=a("code"),tUo=o("model.train()"),aUo=l(),F(nF.$$.fragment),Zqe=l(),ad=a("h2"),sF=a("a"),Jpe=a("span"),F(nL.$$.fragment),nUo=l(),Ype=a("span"),sUo=o("AutoModelForImageClassification"),eje=l(),jo=a("div"),F(sL.$$.fragment),lUo=l(),nd=a("p"),iUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),CX=a("a"),dUo=o("from_pretrained()"),cUo=o(" class method or the "),wX=a("a"),fUo=o("from_config()"),mUo=o(` class
method.`),gUo=l(),lL=a("p"),hUo=o("This class cannot be instantiated directly using "),Kpe=a("code"),pUo=o("__init__()"),_Uo=o(" (throws an error)."),uUo=l(),ht=a("div"),F(iL.$$.fragment),bUo=l(),Zpe=a("p"),vUo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),FUo=l(),sd=a("p"),TUo=o(`Note:
Loading a model from its configuration file does `),e_e=a("strong"),MUo=o("not"),EUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AX=a("a"),CUo=o("from_pretrained()"),wUo=o(" to load the model weights."),AUo=l(),F(lF.$$.fragment),yUo=l(),lo=a("div"),F(dL.$$.fragment),LUo=l(),o_e=a("p"),xUo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),$Uo=l(),ja=a("p"),kUo=o("The model class to instantiate is selected based on the "),r_e=a("code"),SUo=o("model_type"),RUo=o(` property of the config object (either
passed as an argument or loaded from `),t_e=a("code"),PUo=o("pretrained_model_name_or_path"),BUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a_e=a("code"),IUo=o("pretrained_model_name_or_path"),NUo=o(":"),qUo=l(),Fe=a("ul"),iF=a("li"),n_e=a("strong"),jUo=o("beit"),DUo=o(" \u2014 "),yX=a("a"),GUo=o("BeitForImageClassification"),OUo=o(" (BEiT model)"),VUo=l(),dF=a("li"),s_e=a("strong"),XUo=o("convnext"),zUo=o(" \u2014 "),LX=a("a"),WUo=o("ConvNextForImageClassification"),QUo=o(" (ConvNext model)"),HUo=l(),cF=a("li"),l_e=a("strong"),UUo=o("cvt"),JUo=o(" \u2014 "),xX=a("a"),YUo=o("CvtForImageClassification"),KUo=o(" (CvT model)"),ZUo=l(),fF=a("li"),i_e=a("strong"),eJo=o("data2vec-vision"),oJo=o(" \u2014 "),$X=a("a"),rJo=o("Data2VecVisionForImageClassification"),tJo=o(" (Data2VecVision model)"),aJo=l(),Bs=a("li"),d_e=a("strong"),nJo=o("deit"),sJo=o(" \u2014 "),kX=a("a"),lJo=o("DeiTForImageClassification"),iJo=o(" or "),SX=a("a"),dJo=o("DeiTForImageClassificationWithTeacher"),cJo=o(" (DeiT model)"),fJo=l(),mF=a("li"),c_e=a("strong"),mJo=o("imagegpt"),gJo=o(" \u2014 "),RX=a("a"),hJo=o("ImageGPTForImageClassification"),pJo=o(" (ImageGPT model)"),_Jo=l(),pt=a("li"),f_e=a("strong"),uJo=o("perceiver"),bJo=o(" \u2014 "),PX=a("a"),vJo=o("PerceiverForImageClassificationLearned"),FJo=o(" or "),BX=a("a"),TJo=o("PerceiverForImageClassificationFourier"),MJo=o(" or "),IX=a("a"),EJo=o("PerceiverForImageClassificationConvProcessing"),CJo=o(" (Perceiver model)"),wJo=l(),gF=a("li"),m_e=a("strong"),AJo=o("poolformer"),yJo=o(" \u2014 "),NX=a("a"),LJo=o("PoolFormerForImageClassification"),xJo=o(" (PoolFormer model)"),$Jo=l(),hF=a("li"),g_e=a("strong"),kJo=o("regnet"),SJo=o(" \u2014 "),qX=a("a"),RJo=o("RegNetForImageClassification"),PJo=o(" (RegNet model)"),BJo=l(),pF=a("li"),h_e=a("strong"),IJo=o("resnet"),NJo=o(" \u2014 "),jX=a("a"),qJo=o("ResNetForImageClassification"),jJo=o(" (ResNet model)"),DJo=l(),_F=a("li"),p_e=a("strong"),GJo=o("segformer"),OJo=o(" \u2014 "),DX=a("a"),VJo=o("SegformerForImageClassification"),XJo=o(" (SegFormer model)"),zJo=l(),uF=a("li"),__e=a("strong"),WJo=o("swin"),QJo=o(" \u2014 "),GX=a("a"),HJo=o("SwinForImageClassification"),UJo=o(" (Swin model)"),JJo=l(),bF=a("li"),u_e=a("strong"),YJo=o("van"),KJo=o(" \u2014 "),OX=a("a"),ZJo=o("VanForImageClassification"),eYo=o(" (VAN model)"),oYo=l(),vF=a("li"),b_e=a("strong"),rYo=o("vit"),tYo=o(" \u2014 "),VX=a("a"),aYo=o("ViTForImageClassification"),nYo=o(" (ViT model)"),sYo=l(),FF=a("p"),lYo=o("The model is set in evaluation mode by default using "),v_e=a("code"),iYo=o("model.eval()"),dYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),F_e=a("code"),cYo=o("model.train()"),fYo=l(),F(TF.$$.fragment),oje=l(),ld=a("h2"),MF=a("a"),T_e=a("span"),F(cL.$$.fragment),mYo=l(),M_e=a("span"),gYo=o("AutoModelForVision2Seq"),rje=l(),Do=a("div"),F(fL.$$.fragment),hYo=l(),id=a("p"),pYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),XX=a("a"),_Yo=o("from_pretrained()"),uYo=o(" class method or the "),zX=a("a"),bYo=o("from_config()"),vYo=o(` class
method.`),FYo=l(),mL=a("p"),TYo=o("This class cannot be instantiated directly using "),E_e=a("code"),MYo=o("__init__()"),EYo=o(" (throws an error)."),CYo=l(),_t=a("div"),F(gL.$$.fragment),wYo=l(),C_e=a("p"),AYo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),yYo=l(),dd=a("p"),LYo=o(`Note:
Loading a model from its configuration file does `),w_e=a("strong"),xYo=o("not"),$Yo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WX=a("a"),kYo=o("from_pretrained()"),SYo=o(" to load the model weights."),RYo=l(),F(EF.$$.fragment),PYo=l(),io=a("div"),F(hL.$$.fragment),BYo=l(),A_e=a("p"),IYo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),NYo=l(),Da=a("p"),qYo=o("The model class to instantiate is selected based on the "),y_e=a("code"),jYo=o("model_type"),DYo=o(` property of the config object (either
passed as an argument or loaded from `),L_e=a("code"),GYo=o("pretrained_model_name_or_path"),OYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x_e=a("code"),VYo=o("pretrained_model_name_or_path"),XYo=o(":"),zYo=l(),$_e=a("ul"),CF=a("li"),k_e=a("strong"),WYo=o("vision-encoder-decoder"),QYo=o(" \u2014 "),QX=a("a"),HYo=o("VisionEncoderDecoderModel"),UYo=o(" (Vision Encoder decoder model)"),JYo=l(),wF=a("p"),YYo=o("The model is set in evaluation mode by default using "),S_e=a("code"),KYo=o("model.eval()"),ZYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),R_e=a("code"),eKo=o("model.train()"),oKo=l(),F(AF.$$.fragment),tje=l(),cd=a("h2"),yF=a("a"),P_e=a("span"),F(pL.$$.fragment),rKo=l(),B_e=a("span"),tKo=o("AutoModelForAudioClassification"),aje=l(),Go=a("div"),F(_L.$$.fragment),aKo=l(),fd=a("p"),nKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),HX=a("a"),sKo=o("from_pretrained()"),lKo=o(" class method or the "),UX=a("a"),iKo=o("from_config()"),dKo=o(` class
method.`),cKo=l(),uL=a("p"),fKo=o("This class cannot be instantiated directly using "),I_e=a("code"),mKo=o("__init__()"),gKo=o(" (throws an error)."),hKo=l(),ut=a("div"),F(bL.$$.fragment),pKo=l(),N_e=a("p"),_Ko=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),uKo=l(),md=a("p"),bKo=o(`Note:
Loading a model from its configuration file does `),q_e=a("strong"),vKo=o("not"),FKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JX=a("a"),TKo=o("from_pretrained()"),MKo=o(" to load the model weights."),EKo=l(),F(LF.$$.fragment),CKo=l(),co=a("div"),F(vL.$$.fragment),wKo=l(),j_e=a("p"),AKo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),yKo=l(),Ga=a("p"),LKo=o("The model class to instantiate is selected based on the "),D_e=a("code"),xKo=o("model_type"),$Ko=o(` property of the config object (either
passed as an argument or loaded from `),G_e=a("code"),kKo=o("pretrained_model_name_or_path"),SKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O_e=a("code"),RKo=o("pretrained_model_name_or_path"),PKo=o(":"),BKo=l(),Se=a("ul"),xF=a("li"),V_e=a("strong"),IKo=o("data2vec-audio"),NKo=o(" \u2014 "),YX=a("a"),qKo=o("Data2VecAudioForSequenceClassification"),jKo=o(" (Data2VecAudio model)"),DKo=l(),$F=a("li"),X_e=a("strong"),GKo=o("hubert"),OKo=o(" \u2014 "),KX=a("a"),VKo=o("HubertForSequenceClassification"),XKo=o(" (Hubert model)"),zKo=l(),kF=a("li"),z_e=a("strong"),WKo=o("sew"),QKo=o(" \u2014 "),ZX=a("a"),HKo=o("SEWForSequenceClassification"),UKo=o(" (SEW model)"),JKo=l(),SF=a("li"),W_e=a("strong"),YKo=o("sew-d"),KKo=o(" \u2014 "),ez=a("a"),ZKo=o("SEWDForSequenceClassification"),eZo=o(" (SEW-D model)"),oZo=l(),RF=a("li"),Q_e=a("strong"),rZo=o("unispeech"),tZo=o(" \u2014 "),oz=a("a"),aZo=o("UniSpeechForSequenceClassification"),nZo=o(" (UniSpeech model)"),sZo=l(),PF=a("li"),H_e=a("strong"),lZo=o("unispeech-sat"),iZo=o(" \u2014 "),rz=a("a"),dZo=o("UniSpeechSatForSequenceClassification"),cZo=o(" (UniSpeechSat model)"),fZo=l(),BF=a("li"),U_e=a("strong"),mZo=o("wav2vec2"),gZo=o(" \u2014 "),tz=a("a"),hZo=o("Wav2Vec2ForSequenceClassification"),pZo=o(" (Wav2Vec2 model)"),_Zo=l(),IF=a("li"),J_e=a("strong"),uZo=o("wav2vec2-conformer"),bZo=o(" \u2014 "),az=a("a"),vZo=o("Wav2Vec2ConformerForSequenceClassification"),FZo=o(" (Wav2Vec2-Conformer model)"),TZo=l(),NF=a("li"),Y_e=a("strong"),MZo=o("wavlm"),EZo=o(" \u2014 "),nz=a("a"),CZo=o("WavLMForSequenceClassification"),wZo=o(" (WavLM model)"),AZo=l(),qF=a("p"),yZo=o("The model is set in evaluation mode by default using "),K_e=a("code"),LZo=o("model.eval()"),xZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Z_e=a("code"),$Zo=o("model.train()"),kZo=l(),F(jF.$$.fragment),nje=l(),gd=a("h2"),DF=a("a"),eue=a("span"),F(FL.$$.fragment),SZo=l(),oue=a("span"),RZo=o("AutoModelForAudioFrameClassification"),sje=l(),Oo=a("div"),F(TL.$$.fragment),PZo=l(),hd=a("p"),BZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),sz=a("a"),IZo=o("from_pretrained()"),NZo=o(" class method or the "),lz=a("a"),qZo=o("from_config()"),jZo=o(` class
method.`),DZo=l(),ML=a("p"),GZo=o("This class cannot be instantiated directly using "),rue=a("code"),OZo=o("__init__()"),VZo=o(" (throws an error)."),XZo=l(),bt=a("div"),F(EL.$$.fragment),zZo=l(),tue=a("p"),WZo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),QZo=l(),pd=a("p"),HZo=o(`Note:
Loading a model from its configuration file does `),aue=a("strong"),UZo=o("not"),JZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iz=a("a"),YZo=o("from_pretrained()"),KZo=o(" to load the model weights."),ZZo=l(),F(GF.$$.fragment),eer=l(),fo=a("div"),F(CL.$$.fragment),oer=l(),nue=a("p"),rer=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),ter=l(),Oa=a("p"),aer=o("The model class to instantiate is selected based on the "),sue=a("code"),ner=o("model_type"),ser=o(` property of the config object (either
passed as an argument or loaded from `),lue=a("code"),ler=o("pretrained_model_name_or_path"),ier=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iue=a("code"),der=o("pretrained_model_name_or_path"),cer=o(":"),fer=l(),Kr=a("ul"),OF=a("li"),due=a("strong"),mer=o("data2vec-audio"),ger=o(" \u2014 "),dz=a("a"),her=o("Data2VecAudioForAudioFrameClassification"),per=o(" (Data2VecAudio model)"),_er=l(),VF=a("li"),cue=a("strong"),uer=o("unispeech-sat"),ber=o(" \u2014 "),cz=a("a"),ver=o("UniSpeechSatForAudioFrameClassification"),Fer=o(" (UniSpeechSat model)"),Ter=l(),XF=a("li"),fue=a("strong"),Mer=o("wav2vec2"),Eer=o(" \u2014 "),fz=a("a"),Cer=o("Wav2Vec2ForAudioFrameClassification"),wer=o(" (Wav2Vec2 model)"),Aer=l(),zF=a("li"),mue=a("strong"),yer=o("wav2vec2-conformer"),Ler=o(" \u2014 "),mz=a("a"),xer=o("Wav2Vec2ConformerForAudioFrameClassification"),$er=o(" (Wav2Vec2-Conformer model)"),ker=l(),WF=a("li"),gue=a("strong"),Ser=o("wavlm"),Rer=o(" \u2014 "),gz=a("a"),Per=o("WavLMForAudioFrameClassification"),Ber=o(" (WavLM model)"),Ier=l(),QF=a("p"),Ner=o("The model is set in evaluation mode by default using "),hue=a("code"),qer=o("model.eval()"),jer=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pue=a("code"),Der=o("model.train()"),Ger=l(),F(HF.$$.fragment),lje=l(),_d=a("h2"),UF=a("a"),_ue=a("span"),F(wL.$$.fragment),Oer=l(),uue=a("span"),Ver=o("AutoModelForCTC"),ije=l(),Vo=a("div"),F(AL.$$.fragment),Xer=l(),ud=a("p"),zer=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),hz=a("a"),Wer=o("from_pretrained()"),Qer=o(" class method or the "),pz=a("a"),Her=o("from_config()"),Uer=o(` class
method.`),Jer=l(),yL=a("p"),Yer=o("This class cannot be instantiated directly using "),bue=a("code"),Ker=o("__init__()"),Zer=o(" (throws an error)."),eor=l(),vt=a("div"),F(LL.$$.fragment),oor=l(),vue=a("p"),ror=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),tor=l(),bd=a("p"),aor=o(`Note:
Loading a model from its configuration file does `),Fue=a("strong"),nor=o("not"),sor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_z=a("a"),lor=o("from_pretrained()"),ior=o(" to load the model weights."),dor=l(),F(JF.$$.fragment),cor=l(),mo=a("div"),F(xL.$$.fragment),mor=l(),Tue=a("p"),gor=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),hor=l(),Va=a("p"),por=o("The model class to instantiate is selected based on the "),Mue=a("code"),_or=o("model_type"),uor=o(` property of the config object (either
passed as an argument or loaded from `),Eue=a("code"),bor=o("pretrained_model_name_or_path"),vor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cue=a("code"),For=o("pretrained_model_name_or_path"),Tor=o(":"),Mor=l(),Re=a("ul"),YF=a("li"),wue=a("strong"),Eor=o("data2vec-audio"),Cor=o(" \u2014 "),uz=a("a"),wor=o("Data2VecAudioForCTC"),Aor=o(" (Data2VecAudio model)"),yor=l(),KF=a("li"),Aue=a("strong"),Lor=o("hubert"),xor=o(" \u2014 "),bz=a("a"),$or=o("HubertForCTC"),kor=o(" (Hubert model)"),Sor=l(),ZF=a("li"),yue=a("strong"),Ror=o("sew"),Por=o(" \u2014 "),vz=a("a"),Bor=o("SEWForCTC"),Ior=o(" (SEW model)"),Nor=l(),e0=a("li"),Lue=a("strong"),qor=o("sew-d"),jor=o(" \u2014 "),Fz=a("a"),Dor=o("SEWDForCTC"),Gor=o(" (SEW-D model)"),Oor=l(),o0=a("li"),xue=a("strong"),Vor=o("unispeech"),Xor=o(" \u2014 "),Tz=a("a"),zor=o("UniSpeechForCTC"),Wor=o(" (UniSpeech model)"),Qor=l(),r0=a("li"),$ue=a("strong"),Hor=o("unispeech-sat"),Uor=o(" \u2014 "),Mz=a("a"),Jor=o("UniSpeechSatForCTC"),Yor=o(" (UniSpeechSat model)"),Kor=l(),t0=a("li"),kue=a("strong"),Zor=o("wav2vec2"),err=o(" \u2014 "),Ez=a("a"),orr=o("Wav2Vec2ForCTC"),rrr=o(" (Wav2Vec2 model)"),trr=l(),a0=a("li"),Sue=a("strong"),arr=o("wav2vec2-conformer"),nrr=o(" \u2014 "),Cz=a("a"),srr=o("Wav2Vec2ConformerForCTC"),lrr=o(" (Wav2Vec2-Conformer model)"),irr=l(),n0=a("li"),Rue=a("strong"),drr=o("wavlm"),crr=o(" \u2014 "),wz=a("a"),frr=o("WavLMForCTC"),mrr=o(" (WavLM model)"),grr=l(),s0=a("p"),hrr=o("The model is set in evaluation mode by default using "),Pue=a("code"),prr=o("model.eval()"),_rr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bue=a("code"),urr=o("model.train()"),brr=l(),F(l0.$$.fragment),dje=l(),vd=a("h2"),i0=a("a"),Iue=a("span"),F($L.$$.fragment),vrr=l(),Nue=a("span"),Frr=o("AutoModelForSpeechSeq2Seq"),cje=l(),Xo=a("div"),F(kL.$$.fragment),Trr=l(),Fd=a("p"),Mrr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Az=a("a"),Err=o("from_pretrained()"),Crr=o(" class method or the "),yz=a("a"),wrr=o("from_config()"),Arr=o(` class
method.`),yrr=l(),SL=a("p"),Lrr=o("This class cannot be instantiated directly using "),que=a("code"),xrr=o("__init__()"),$rr=o(" (throws an error)."),krr=l(),Ft=a("div"),F(RL.$$.fragment),Srr=l(),jue=a("p"),Rrr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Prr=l(),Td=a("p"),Brr=o(`Note:
Loading a model from its configuration file does `),Due=a("strong"),Irr=o("not"),Nrr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Lz=a("a"),qrr=o("from_pretrained()"),jrr=o(" to load the model weights."),Drr=l(),F(d0.$$.fragment),Grr=l(),go=a("div"),F(PL.$$.fragment),Orr=l(),Gue=a("p"),Vrr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Xrr=l(),Xa=a("p"),zrr=o("The model class to instantiate is selected based on the "),Oue=a("code"),Wrr=o("model_type"),Qrr=o(` property of the config object (either
passed as an argument or loaded from `),Vue=a("code"),Hrr=o("pretrained_model_name_or_path"),Urr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xue=a("code"),Jrr=o("pretrained_model_name_or_path"),Yrr=o(":"),Krr=l(),BL=a("ul"),c0=a("li"),zue=a("strong"),Zrr=o("speech-encoder-decoder"),etr=o(" \u2014 "),xz=a("a"),otr=o("SpeechEncoderDecoderModel"),rtr=o(" (Speech Encoder decoder model)"),ttr=l(),f0=a("li"),Wue=a("strong"),atr=o("speech_to_text"),ntr=o(" \u2014 "),$z=a("a"),str=o("Speech2TextForConditionalGeneration"),ltr=o(" (Speech2Text model)"),itr=l(),m0=a("p"),dtr=o("The model is set in evaluation mode by default using "),Que=a("code"),ctr=o("model.eval()"),ftr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hue=a("code"),mtr=o("model.train()"),gtr=l(),F(g0.$$.fragment),fje=l(),Md=a("h2"),h0=a("a"),Uue=a("span"),F(IL.$$.fragment),htr=l(),Jue=a("span"),ptr=o("AutoModelForAudioXVector"),mje=l(),zo=a("div"),F(NL.$$.fragment),_tr=l(),Ed=a("p"),utr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),kz=a("a"),btr=o("from_pretrained()"),vtr=o(" class method or the "),Sz=a("a"),Ftr=o("from_config()"),Ttr=o(` class
method.`),Mtr=l(),qL=a("p"),Etr=o("This class cannot be instantiated directly using "),Yue=a("code"),Ctr=o("__init__()"),wtr=o(" (throws an error)."),Atr=l(),Tt=a("div"),F(jL.$$.fragment),ytr=l(),Kue=a("p"),Ltr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),xtr=l(),Cd=a("p"),$tr=o(`Note:
Loading a model from its configuration file does `),Zue=a("strong"),ktr=o("not"),Str=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Rz=a("a"),Rtr=o("from_pretrained()"),Ptr=o(" to load the model weights."),Btr=l(),F(p0.$$.fragment),Itr=l(),ho=a("div"),F(DL.$$.fragment),Ntr=l(),e1e=a("p"),qtr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),jtr=l(),za=a("p"),Dtr=o("The model class to instantiate is selected based on the "),o1e=a("code"),Gtr=o("model_type"),Otr=o(` property of the config object (either
passed as an argument or loaded from `),r1e=a("code"),Vtr=o("pretrained_model_name_or_path"),Xtr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t1e=a("code"),ztr=o("pretrained_model_name_or_path"),Wtr=o(":"),Qtr=l(),Zr=a("ul"),_0=a("li"),a1e=a("strong"),Htr=o("data2vec-audio"),Utr=o(" \u2014 "),Pz=a("a"),Jtr=o("Data2VecAudioForXVector"),Ytr=o(" (Data2VecAudio model)"),Ktr=l(),u0=a("li"),n1e=a("strong"),Ztr=o("unispeech-sat"),ear=o(" \u2014 "),Bz=a("a"),oar=o("UniSpeechSatForXVector"),rar=o(" (UniSpeechSat model)"),tar=l(),b0=a("li"),s1e=a("strong"),aar=o("wav2vec2"),nar=o(" \u2014 "),Iz=a("a"),sar=o("Wav2Vec2ForXVector"),lar=o(" (Wav2Vec2 model)"),iar=l(),v0=a("li"),l1e=a("strong"),dar=o("wav2vec2-conformer"),car=o(" \u2014 "),Nz=a("a"),far=o("Wav2Vec2ConformerForXVector"),mar=o(" (Wav2Vec2-Conformer model)"),gar=l(),F0=a("li"),i1e=a("strong"),har=o("wavlm"),par=o(" \u2014 "),qz=a("a"),_ar=o("WavLMForXVector"),uar=o(" (WavLM model)"),bar=l(),T0=a("p"),Far=o("The model is set in evaluation mode by default using "),d1e=a("code"),Tar=o("model.eval()"),Mar=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),c1e=a("code"),Ear=o("model.train()"),Car=l(),F(M0.$$.fragment),gje=l(),wd=a("h2"),E0=a("a"),f1e=a("span"),F(GL.$$.fragment),war=l(),m1e=a("span"),Aar=o("AutoModelForMaskedImageModeling"),hje=l(),Wo=a("div"),F(OL.$$.fragment),yar=l(),Ad=a("p"),Lar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),jz=a("a"),xar=o("from_pretrained()"),$ar=o(" class method or the "),Dz=a("a"),kar=o("from_config()"),Sar=o(` class
method.`),Rar=l(),VL=a("p"),Par=o("This class cannot be instantiated directly using "),g1e=a("code"),Bar=o("__init__()"),Iar=o(" (throws an error)."),Nar=l(),Mt=a("div"),F(XL.$$.fragment),qar=l(),h1e=a("p"),jar=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Dar=l(),yd=a("p"),Gar=o(`Note:
Loading a model from its configuration file does `),p1e=a("strong"),Oar=o("not"),Var=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Gz=a("a"),Xar=o("from_pretrained()"),zar=o(" to load the model weights."),War=l(),F(C0.$$.fragment),Qar=l(),po=a("div"),F(zL.$$.fragment),Har=l(),_1e=a("p"),Uar=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Jar=l(),Wa=a("p"),Yar=o("The model class to instantiate is selected based on the "),u1e=a("code"),Kar=o("model_type"),Zar=o(` property of the config object (either
passed as an argument or loaded from `),b1e=a("code"),enr=o("pretrained_model_name_or_path"),onr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v1e=a("code"),rnr=o("pretrained_model_name_or_path"),tnr=o(":"),anr=l(),Ld=a("ul"),w0=a("li"),F1e=a("strong"),nnr=o("deit"),snr=o(" \u2014 "),Oz=a("a"),lnr=o("DeiTForMaskedImageModeling"),inr=o(" (DeiT model)"),dnr=l(),A0=a("li"),T1e=a("strong"),cnr=o("swin"),fnr=o(" \u2014 "),Vz=a("a"),mnr=o("SwinForMaskedImageModeling"),gnr=o(" (Swin model)"),hnr=l(),y0=a("li"),M1e=a("strong"),pnr=o("vit"),_nr=o(" \u2014 "),Xz=a("a"),unr=o("ViTForMaskedImageModeling"),bnr=o(" (ViT model)"),vnr=l(),L0=a("p"),Fnr=o("The model is set in evaluation mode by default using "),E1e=a("code"),Tnr=o("model.eval()"),Mnr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),C1e=a("code"),Enr=o("model.train()"),Cnr=l(),F(x0.$$.fragment),pje=l(),xd=a("h2"),$0=a("a"),w1e=a("span"),F(WL.$$.fragment),wnr=l(),A1e=a("span"),Anr=o("AutoModelForObjectDetection"),_je=l(),Qo=a("div"),F(QL.$$.fragment),ynr=l(),$d=a("p"),Lnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),zz=a("a"),xnr=o("from_pretrained()"),$nr=o(" class method or the "),Wz=a("a"),knr=o("from_config()"),Snr=o(` class
method.`),Rnr=l(),HL=a("p"),Pnr=o("This class cannot be instantiated directly using "),y1e=a("code"),Bnr=o("__init__()"),Inr=o(" (throws an error)."),Nnr=l(),Et=a("div"),F(UL.$$.fragment),qnr=l(),L1e=a("p"),jnr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Dnr=l(),kd=a("p"),Gnr=o(`Note:
Loading a model from its configuration file does `),x1e=a("strong"),Onr=o("not"),Vnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Qz=a("a"),Xnr=o("from_pretrained()"),znr=o(" to load the model weights."),Wnr=l(),F(k0.$$.fragment),Qnr=l(),_o=a("div"),F(JL.$$.fragment),Hnr=l(),$1e=a("p"),Unr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Jnr=l(),Qa=a("p"),Ynr=o("The model class to instantiate is selected based on the "),k1e=a("code"),Knr=o("model_type"),Znr=o(` property of the config object (either
passed as an argument or loaded from `),S1e=a("code"),esr=o("pretrained_model_name_or_path"),osr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R1e=a("code"),rsr=o("pretrained_model_name_or_path"),tsr=o(":"),asr=l(),YL=a("ul"),S0=a("li"),P1e=a("strong"),nsr=o("detr"),ssr=o(" \u2014 "),Hz=a("a"),lsr=o("DetrForObjectDetection"),isr=o(" (DETR model)"),dsr=l(),R0=a("li"),B1e=a("strong"),csr=o("yolos"),fsr=o(" \u2014 "),Uz=a("a"),msr=o("YolosForObjectDetection"),gsr=o(" (YOLOS model)"),hsr=l(),P0=a("p"),psr=o("The model is set in evaluation mode by default using "),I1e=a("code"),_sr=o("model.eval()"),usr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),N1e=a("code"),bsr=o("model.train()"),vsr=l(),F(B0.$$.fragment),uje=l(),Sd=a("h2"),I0=a("a"),q1e=a("span"),F(KL.$$.fragment),Fsr=l(),j1e=a("span"),Tsr=o("AutoModelForImageSegmentation"),bje=l(),Ho=a("div"),F(ZL.$$.fragment),Msr=l(),Rd=a("p"),Esr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),Jz=a("a"),Csr=o("from_pretrained()"),wsr=o(" class method or the "),Yz=a("a"),Asr=o("from_config()"),ysr=o(` class
method.`),Lsr=l(),e8=a("p"),xsr=o("This class cannot be instantiated directly using "),D1e=a("code"),$sr=o("__init__()"),ksr=o(" (throws an error)."),Ssr=l(),Ct=a("div"),F(o8.$$.fragment),Rsr=l(),G1e=a("p"),Psr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Bsr=l(),Pd=a("p"),Isr=o(`Note:
Loading a model from its configuration file does `),O1e=a("strong"),Nsr=o("not"),qsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Kz=a("a"),jsr=o("from_pretrained()"),Dsr=o(" to load the model weights."),Gsr=l(),F(N0.$$.fragment),Osr=l(),uo=a("div"),F(r8.$$.fragment),Vsr=l(),V1e=a("p"),Xsr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),zsr=l(),Ha=a("p"),Wsr=o("The model class to instantiate is selected based on the "),X1e=a("code"),Qsr=o("model_type"),Hsr=o(` property of the config object (either
passed as an argument or loaded from `),z1e=a("code"),Usr=o("pretrained_model_name_or_path"),Jsr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W1e=a("code"),Ysr=o("pretrained_model_name_or_path"),Ksr=o(":"),Zsr=l(),Q1e=a("ul"),q0=a("li"),H1e=a("strong"),elr=o("detr"),olr=o(" \u2014 "),Zz=a("a"),rlr=o("DetrForSegmentation"),tlr=o(" (DETR model)"),alr=l(),j0=a("p"),nlr=o("The model is set in evaluation mode by default using "),U1e=a("code"),slr=o("model.eval()"),llr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),J1e=a("code"),ilr=o("model.train()"),dlr=l(),F(D0.$$.fragment),vje=l(),Bd=a("h2"),G0=a("a"),Y1e=a("span"),F(t8.$$.fragment),clr=l(),K1e=a("span"),flr=o("AutoModelForSemanticSegmentation"),Fje=l(),Uo=a("div"),F(a8.$$.fragment),mlr=l(),Id=a("p"),glr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),eW=a("a"),hlr=o("from_pretrained()"),plr=o(" class method or the "),oW=a("a"),_lr=o("from_config()"),ulr=o(` class
method.`),blr=l(),n8=a("p"),vlr=o("This class cannot be instantiated directly using "),Z1e=a("code"),Flr=o("__init__()"),Tlr=o(" (throws an error)."),Mlr=l(),wt=a("div"),F(s8.$$.fragment),Elr=l(),ebe=a("p"),Clr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),wlr=l(),Nd=a("p"),Alr=o(`Note:
Loading a model from its configuration file does `),obe=a("strong"),ylr=o("not"),Llr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rW=a("a"),xlr=o("from_pretrained()"),$lr=o(" to load the model weights."),klr=l(),F(O0.$$.fragment),Slr=l(),bo=a("div"),F(l8.$$.fragment),Rlr=l(),rbe=a("p"),Plr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Blr=l(),Ua=a("p"),Ilr=o("The model class to instantiate is selected based on the "),tbe=a("code"),Nlr=o("model_type"),qlr=o(` property of the config object (either
passed as an argument or loaded from `),abe=a("code"),jlr=o("pretrained_model_name_or_path"),Dlr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nbe=a("code"),Glr=o("pretrained_model_name_or_path"),Olr=o(":"),Vlr=l(),Ja=a("ul"),V0=a("li"),sbe=a("strong"),Xlr=o("beit"),zlr=o(" \u2014 "),tW=a("a"),Wlr=o("BeitForSemanticSegmentation"),Qlr=o(" (BEiT model)"),Hlr=l(),X0=a("li"),lbe=a("strong"),Ulr=o("data2vec-vision"),Jlr=o(" \u2014 "),aW=a("a"),Ylr=o("Data2VecVisionForSemanticSegmentation"),Klr=o(" (Data2VecVision model)"),Zlr=l(),z0=a("li"),ibe=a("strong"),eir=o("dpt"),oir=o(" \u2014 "),nW=a("a"),rir=o("DPTForSemanticSegmentation"),tir=o(" (DPT model)"),air=l(),W0=a("li"),dbe=a("strong"),nir=o("segformer"),sir=o(" \u2014 "),sW=a("a"),lir=o("SegformerForSemanticSegmentation"),iir=o(" (SegFormer model)"),dir=l(),Q0=a("p"),cir=o("The model is set in evaluation mode by default using "),cbe=a("code"),fir=o("model.eval()"),mir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fbe=a("code"),gir=o("model.train()"),hir=l(),F(H0.$$.fragment),Tje=l(),qd=a("h2"),U0=a("a"),mbe=a("span"),F(i8.$$.fragment),pir=l(),gbe=a("span"),_ir=o("AutoModelForInstanceSegmentation"),Mje=l(),Jo=a("div"),F(d8.$$.fragment),uir=l(),jd=a("p"),bir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),lW=a("a"),vir=o("from_pretrained()"),Fir=o(" class method or the "),iW=a("a"),Tir=o("from_config()"),Mir=o(` class
method.`),Eir=l(),c8=a("p"),Cir=o("This class cannot be instantiated directly using "),hbe=a("code"),wir=o("__init__()"),Air=o(" (throws an error)."),yir=l(),At=a("div"),F(f8.$$.fragment),Lir=l(),pbe=a("p"),xir=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),$ir=l(),Dd=a("p"),kir=o(`Note:
Loading a model from its configuration file does `),_be=a("strong"),Sir=o("not"),Rir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dW=a("a"),Pir=o("from_pretrained()"),Bir=o(" to load the model weights."),Iir=l(),F(J0.$$.fragment),Nir=l(),vo=a("div"),F(m8.$$.fragment),qir=l(),ube=a("p"),jir=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Dir=l(),Ya=a("p"),Gir=o("The model class to instantiate is selected based on the "),bbe=a("code"),Oir=o("model_type"),Vir=o(` property of the config object (either
passed as an argument or loaded from `),vbe=a("code"),Xir=o("pretrained_model_name_or_path"),zir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fbe=a("code"),Wir=o("pretrained_model_name_or_path"),Qir=o(":"),Hir=l(),Tbe=a("ul"),Y0=a("li"),Mbe=a("strong"),Uir=o("maskformer"),Jir=o(" \u2014 "),cW=a("a"),Yir=o("MaskFormerForInstanceSegmentation"),Kir=o(" (MaskFormer model)"),Zir=l(),K0=a("p"),edr=o("The model is set in evaluation mode by default using "),Ebe=a("code"),odr=o("model.eval()"),rdr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cbe=a("code"),tdr=o("model.train()"),adr=l(),F(Z0.$$.fragment),Eje=l(),Gd=a("h2"),eT=a("a"),wbe=a("span"),F(g8.$$.fragment),ndr=l(),Abe=a("span"),sdr=o("TFAutoModel"),Cje=l(),Yo=a("div"),F(h8.$$.fragment),ldr=l(),Od=a("p"),idr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),fW=a("a"),ddr=o("from_pretrained()"),cdr=o(" class method or the "),mW=a("a"),fdr=o("from_config()"),mdr=o(` class
method.`),gdr=l(),p8=a("p"),hdr=o("This class cannot be instantiated directly using "),ybe=a("code"),pdr=o("__init__()"),_dr=o(" (throws an error)."),udr=l(),yt=a("div"),F(_8.$$.fragment),bdr=l(),Lbe=a("p"),vdr=o("Instantiates one of the base model classes of the library from a configuration."),Fdr=l(),Vd=a("p"),Tdr=o(`Note:
Loading a model from its configuration file does `),xbe=a("strong"),Mdr=o("not"),Edr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gW=a("a"),Cdr=o("from_pretrained()"),wdr=o(" to load the model weights."),Adr=l(),F(oT.$$.fragment),ydr=l(),wr=a("div"),F(u8.$$.fragment),Ldr=l(),$be=a("p"),xdr=o("Instantiate one of the base model classes of the library from a pretrained model."),$dr=l(),Ka=a("p"),kdr=o("The model class to instantiate is selected based on the "),kbe=a("code"),Sdr=o("model_type"),Rdr=o(` property of the config object (either
passed as an argument or loaded from `),Sbe=a("code"),Pdr=o("pretrained_model_name_or_path"),Bdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rbe=a("code"),Idr=o("pretrained_model_name_or_path"),Ndr=o(":"),qdr=l(),q=a("ul"),rT=a("li"),Pbe=a("strong"),jdr=o("albert"),Ddr=o(" \u2014 "),hW=a("a"),Gdr=o("TFAlbertModel"),Odr=o(" (ALBERT model)"),Vdr=l(),tT=a("li"),Bbe=a("strong"),Xdr=o("bart"),zdr=o(" \u2014 "),pW=a("a"),Wdr=o("TFBartModel"),Qdr=o(" (BART model)"),Hdr=l(),aT=a("li"),Ibe=a("strong"),Udr=o("bert"),Jdr=o(" \u2014 "),_W=a("a"),Ydr=o("TFBertModel"),Kdr=o(" (BERT model)"),Zdr=l(),nT=a("li"),Nbe=a("strong"),ecr=o("blenderbot"),ocr=o(" \u2014 "),uW=a("a"),rcr=o("TFBlenderbotModel"),tcr=o(" (Blenderbot model)"),acr=l(),sT=a("li"),qbe=a("strong"),ncr=o("blenderbot-small"),scr=o(" \u2014 "),bW=a("a"),lcr=o("TFBlenderbotSmallModel"),icr=o(" (BlenderbotSmall model)"),dcr=l(),lT=a("li"),jbe=a("strong"),ccr=o("camembert"),fcr=o(" \u2014 "),vW=a("a"),mcr=o("TFCamembertModel"),gcr=o(" (CamemBERT model)"),hcr=l(),iT=a("li"),Dbe=a("strong"),pcr=o("clip"),_cr=o(" \u2014 "),FW=a("a"),ucr=o("TFCLIPModel"),bcr=o(" (CLIP model)"),vcr=l(),dT=a("li"),Gbe=a("strong"),Fcr=o("convbert"),Tcr=o(" \u2014 "),TW=a("a"),Mcr=o("TFConvBertModel"),Ecr=o(" (ConvBERT model)"),Ccr=l(),cT=a("li"),Obe=a("strong"),wcr=o("convnext"),Acr=o(" \u2014 "),MW=a("a"),ycr=o("TFConvNextModel"),Lcr=o(" (ConvNext model)"),xcr=l(),fT=a("li"),Vbe=a("strong"),$cr=o("ctrl"),kcr=o(" \u2014 "),EW=a("a"),Scr=o("TFCTRLModel"),Rcr=o(" (CTRL model)"),Pcr=l(),mT=a("li"),Xbe=a("strong"),Bcr=o("data2vec-vision"),Icr=o(" \u2014 "),CW=a("a"),Ncr=o("TFData2VecVisionModel"),qcr=o(" (Data2VecVision model)"),jcr=l(),gT=a("li"),zbe=a("strong"),Dcr=o("deberta"),Gcr=o(" \u2014 "),wW=a("a"),Ocr=o("TFDebertaModel"),Vcr=o(" (DeBERTa model)"),Xcr=l(),hT=a("li"),Wbe=a("strong"),zcr=o("deberta-v2"),Wcr=o(" \u2014 "),AW=a("a"),Qcr=o("TFDebertaV2Model"),Hcr=o(" (DeBERTa-v2 model)"),Ucr=l(),pT=a("li"),Qbe=a("strong"),Jcr=o("distilbert"),Ycr=o(" \u2014 "),yW=a("a"),Kcr=o("TFDistilBertModel"),Zcr=o(" (DistilBERT model)"),efr=l(),_T=a("li"),Hbe=a("strong"),ofr=o("dpr"),rfr=o(" \u2014 "),LW=a("a"),tfr=o("TFDPRQuestionEncoder"),afr=o(" (DPR model)"),nfr=l(),uT=a("li"),Ube=a("strong"),sfr=o("electra"),lfr=o(" \u2014 "),xW=a("a"),ifr=o("TFElectraModel"),dfr=o(" (ELECTRA model)"),cfr=l(),bT=a("li"),Jbe=a("strong"),ffr=o("flaubert"),mfr=o(" \u2014 "),$W=a("a"),gfr=o("TFFlaubertModel"),hfr=o(" (FlauBERT model)"),pfr=l(),Is=a("li"),Ybe=a("strong"),_fr=o("funnel"),ufr=o(" \u2014 "),kW=a("a"),bfr=o("TFFunnelModel"),vfr=o(" or "),SW=a("a"),Ffr=o("TFFunnelBaseModel"),Tfr=o(" (Funnel Transformer model)"),Mfr=l(),vT=a("li"),Kbe=a("strong"),Efr=o("gpt2"),Cfr=o(" \u2014 "),RW=a("a"),wfr=o("TFGPT2Model"),Afr=o(" (OpenAI GPT-2 model)"),yfr=l(),FT=a("li"),Zbe=a("strong"),Lfr=o("gptj"),xfr=o(" \u2014 "),PW=a("a"),$fr=o("TFGPTJModel"),kfr=o(" (GPT-J model)"),Sfr=l(),TT=a("li"),e2e=a("strong"),Rfr=o("hubert"),Pfr=o(" \u2014 "),BW=a("a"),Bfr=o("TFHubertModel"),Ifr=o(" (Hubert model)"),Nfr=l(),MT=a("li"),o2e=a("strong"),qfr=o("layoutlm"),jfr=o(" \u2014 "),IW=a("a"),Dfr=o("TFLayoutLMModel"),Gfr=o(" (LayoutLM model)"),Ofr=l(),ET=a("li"),r2e=a("strong"),Vfr=o("led"),Xfr=o(" \u2014 "),NW=a("a"),zfr=o("TFLEDModel"),Wfr=o(" (LED model)"),Qfr=l(),CT=a("li"),t2e=a("strong"),Hfr=o("longformer"),Ufr=o(" \u2014 "),qW=a("a"),Jfr=o("TFLongformerModel"),Yfr=o(" (Longformer model)"),Kfr=l(),wT=a("li"),a2e=a("strong"),Zfr=o("lxmert"),emr=o(" \u2014 "),jW=a("a"),omr=o("TFLxmertModel"),rmr=o(" (LXMERT model)"),tmr=l(),AT=a("li"),n2e=a("strong"),amr=o("marian"),nmr=o(" \u2014 "),DW=a("a"),smr=o("TFMarianModel"),lmr=o(" (Marian model)"),imr=l(),yT=a("li"),s2e=a("strong"),dmr=o("mbart"),cmr=o(" \u2014 "),GW=a("a"),fmr=o("TFMBartModel"),mmr=o(" (mBART model)"),gmr=l(),LT=a("li"),l2e=a("strong"),hmr=o("mobilebert"),pmr=o(" \u2014 "),OW=a("a"),_mr=o("TFMobileBertModel"),umr=o(" (MobileBERT model)"),bmr=l(),xT=a("li"),i2e=a("strong"),vmr=o("mpnet"),Fmr=o(" \u2014 "),VW=a("a"),Tmr=o("TFMPNetModel"),Mmr=o(" (MPNet model)"),Emr=l(),$T=a("li"),d2e=a("strong"),Cmr=o("mt5"),wmr=o(" \u2014 "),XW=a("a"),Amr=o("TFMT5Model"),ymr=o(" (mT5 model)"),Lmr=l(),kT=a("li"),c2e=a("strong"),xmr=o("openai-gpt"),$mr=o(" \u2014 "),zW=a("a"),kmr=o("TFOpenAIGPTModel"),Smr=o(" (OpenAI GPT model)"),Rmr=l(),ST=a("li"),f2e=a("strong"),Pmr=o("opt"),Bmr=o(" \u2014 "),WW=a("a"),Imr=o("TFOPTModel"),Nmr=o(" (OPT model)"),qmr=l(),RT=a("li"),m2e=a("strong"),jmr=o("pegasus"),Dmr=o(" \u2014 "),QW=a("a"),Gmr=o("TFPegasusModel"),Omr=o(" (Pegasus model)"),Vmr=l(),PT=a("li"),g2e=a("strong"),Xmr=o("rembert"),zmr=o(" \u2014 "),HW=a("a"),Wmr=o("TFRemBertModel"),Qmr=o(" (RemBERT model)"),Hmr=l(),BT=a("li"),h2e=a("strong"),Umr=o("roberta"),Jmr=o(" \u2014 "),UW=a("a"),Ymr=o("TFRobertaModel"),Kmr=o(" (RoBERTa model)"),Zmr=l(),IT=a("li"),p2e=a("strong"),egr=o("roformer"),ogr=o(" \u2014 "),JW=a("a"),rgr=o("TFRoFormerModel"),tgr=o(" (RoFormer model)"),agr=l(),NT=a("li"),_2e=a("strong"),ngr=o("speech_to_text"),sgr=o(" \u2014 "),YW=a("a"),lgr=o("TFSpeech2TextModel"),igr=o(" (Speech2Text model)"),dgr=l(),qT=a("li"),u2e=a("strong"),cgr=o("swin"),fgr=o(" \u2014 "),KW=a("a"),mgr=o("TFSwinModel"),ggr=o(" (Swin model)"),hgr=l(),jT=a("li"),b2e=a("strong"),pgr=o("t5"),_gr=o(" \u2014 "),ZW=a("a"),ugr=o("TFT5Model"),bgr=o(" (T5 model)"),vgr=l(),DT=a("li"),v2e=a("strong"),Fgr=o("tapas"),Tgr=o(" \u2014 "),eQ=a("a"),Mgr=o("TFTapasModel"),Egr=o(" (TAPAS model)"),Cgr=l(),GT=a("li"),F2e=a("strong"),wgr=o("transfo-xl"),Agr=o(" \u2014 "),oQ=a("a"),ygr=o("TFTransfoXLModel"),Lgr=o(" (Transformer-XL model)"),xgr=l(),OT=a("li"),T2e=a("strong"),$gr=o("vit"),kgr=o(" \u2014 "),rQ=a("a"),Sgr=o("TFViTModel"),Rgr=o(" (ViT model)"),Pgr=l(),VT=a("li"),M2e=a("strong"),Bgr=o("vit_mae"),Igr=o(" \u2014 "),tQ=a("a"),Ngr=o("TFViTMAEModel"),qgr=o(" (ViTMAE model)"),jgr=l(),XT=a("li"),E2e=a("strong"),Dgr=o("wav2vec2"),Ggr=o(" \u2014 "),aQ=a("a"),Ogr=o("TFWav2Vec2Model"),Vgr=o(" (Wav2Vec2 model)"),Xgr=l(),zT=a("li"),C2e=a("strong"),zgr=o("xlm"),Wgr=o(" \u2014 "),nQ=a("a"),Qgr=o("TFXLMModel"),Hgr=o(" (XLM model)"),Ugr=l(),WT=a("li"),w2e=a("strong"),Jgr=o("xlm-roberta"),Ygr=o(" \u2014 "),sQ=a("a"),Kgr=o("TFXLMRobertaModel"),Zgr=o(" (XLM-RoBERTa model)"),ehr=l(),QT=a("li"),A2e=a("strong"),ohr=o("xlnet"),rhr=o(" \u2014 "),lQ=a("a"),thr=o("TFXLNetModel"),ahr=o(" (XLNet model)"),nhr=l(),F(HT.$$.fragment),wje=l(),Xd=a("h2"),UT=a("a"),y2e=a("span"),F(b8.$$.fragment),shr=l(),L2e=a("span"),lhr=o("TFAutoModelForPreTraining"),Aje=l(),Ko=a("div"),F(v8.$$.fragment),ihr=l(),zd=a("p"),dhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),iQ=a("a"),chr=o("from_pretrained()"),fhr=o(" class method or the "),dQ=a("a"),mhr=o("from_config()"),ghr=o(` class
method.`),hhr=l(),F8=a("p"),phr=o("This class cannot be instantiated directly using "),x2e=a("code"),_hr=o("__init__()"),uhr=o(" (throws an error)."),bhr=l(),Lt=a("div"),F(T8.$$.fragment),vhr=l(),$2e=a("p"),Fhr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Thr=l(),Wd=a("p"),Mhr=o(`Note:
Loading a model from its configuration file does `),k2e=a("strong"),Ehr=o("not"),Chr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cQ=a("a"),whr=o("from_pretrained()"),Ahr=o(" to load the model weights."),yhr=l(),F(JT.$$.fragment),Lhr=l(),Ar=a("div"),F(M8.$$.fragment),xhr=l(),S2e=a("p"),$hr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),khr=l(),Za=a("p"),Shr=o("The model class to instantiate is selected based on the "),R2e=a("code"),Rhr=o("model_type"),Phr=o(` property of the config object (either
passed as an argument or loaded from `),P2e=a("code"),Bhr=o("pretrained_model_name_or_path"),Ihr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B2e=a("code"),Nhr=o("pretrained_model_name_or_path"),qhr=o(":"),jhr=l(),se=a("ul"),YT=a("li"),I2e=a("strong"),Dhr=o("albert"),Ghr=o(" \u2014 "),fQ=a("a"),Ohr=o("TFAlbertForPreTraining"),Vhr=o(" (ALBERT model)"),Xhr=l(),KT=a("li"),N2e=a("strong"),zhr=o("bart"),Whr=o(" \u2014 "),mQ=a("a"),Qhr=o("TFBartForConditionalGeneration"),Hhr=o(" (BART model)"),Uhr=l(),ZT=a("li"),q2e=a("strong"),Jhr=o("bert"),Yhr=o(" \u2014 "),gQ=a("a"),Khr=o("TFBertForPreTraining"),Zhr=o(" (BERT model)"),epr=l(),e7=a("li"),j2e=a("strong"),opr=o("camembert"),rpr=o(" \u2014 "),hQ=a("a"),tpr=o("TFCamembertForMaskedLM"),apr=o(" (CamemBERT model)"),npr=l(),o7=a("li"),D2e=a("strong"),spr=o("ctrl"),lpr=o(" \u2014 "),pQ=a("a"),ipr=o("TFCTRLLMHeadModel"),dpr=o(" (CTRL model)"),cpr=l(),r7=a("li"),G2e=a("strong"),fpr=o("distilbert"),mpr=o(" \u2014 "),_Q=a("a"),gpr=o("TFDistilBertForMaskedLM"),hpr=o(" (DistilBERT model)"),ppr=l(),t7=a("li"),O2e=a("strong"),_pr=o("electra"),upr=o(" \u2014 "),uQ=a("a"),bpr=o("TFElectraForPreTraining"),vpr=o(" (ELECTRA model)"),Fpr=l(),a7=a("li"),V2e=a("strong"),Tpr=o("flaubert"),Mpr=o(" \u2014 "),bQ=a("a"),Epr=o("TFFlaubertWithLMHeadModel"),Cpr=o(" (FlauBERT model)"),wpr=l(),n7=a("li"),X2e=a("strong"),Apr=o("funnel"),ypr=o(" \u2014 "),vQ=a("a"),Lpr=o("TFFunnelForPreTraining"),xpr=o(" (Funnel Transformer model)"),$pr=l(),s7=a("li"),z2e=a("strong"),kpr=o("gpt2"),Spr=o(" \u2014 "),FQ=a("a"),Rpr=o("TFGPT2LMHeadModel"),Ppr=o(" (OpenAI GPT-2 model)"),Bpr=l(),l7=a("li"),W2e=a("strong"),Ipr=o("layoutlm"),Npr=o(" \u2014 "),TQ=a("a"),qpr=o("TFLayoutLMForMaskedLM"),jpr=o(" (LayoutLM model)"),Dpr=l(),i7=a("li"),Q2e=a("strong"),Gpr=o("lxmert"),Opr=o(" \u2014 "),MQ=a("a"),Vpr=o("TFLxmertForPreTraining"),Xpr=o(" (LXMERT model)"),zpr=l(),d7=a("li"),H2e=a("strong"),Wpr=o("mobilebert"),Qpr=o(" \u2014 "),EQ=a("a"),Hpr=o("TFMobileBertForPreTraining"),Upr=o(" (MobileBERT model)"),Jpr=l(),c7=a("li"),U2e=a("strong"),Ypr=o("mpnet"),Kpr=o(" \u2014 "),CQ=a("a"),Zpr=o("TFMPNetForMaskedLM"),e_r=o(" (MPNet model)"),o_r=l(),f7=a("li"),J2e=a("strong"),r_r=o("openai-gpt"),t_r=o(" \u2014 "),wQ=a("a"),a_r=o("TFOpenAIGPTLMHeadModel"),n_r=o(" (OpenAI GPT model)"),s_r=l(),m7=a("li"),Y2e=a("strong"),l_r=o("roberta"),i_r=o(" \u2014 "),AQ=a("a"),d_r=o("TFRobertaForMaskedLM"),c_r=o(" (RoBERTa model)"),f_r=l(),g7=a("li"),K2e=a("strong"),m_r=o("t5"),g_r=o(" \u2014 "),yQ=a("a"),h_r=o("TFT5ForConditionalGeneration"),p_r=o(" (T5 model)"),__r=l(),h7=a("li"),Z2e=a("strong"),u_r=o("tapas"),b_r=o(" \u2014 "),LQ=a("a"),v_r=o("TFTapasForMaskedLM"),F_r=o(" (TAPAS model)"),T_r=l(),p7=a("li"),e5e=a("strong"),M_r=o("transfo-xl"),E_r=o(" \u2014 "),xQ=a("a"),C_r=o("TFTransfoXLLMHeadModel"),w_r=o(" (Transformer-XL model)"),A_r=l(),_7=a("li"),o5e=a("strong"),y_r=o("vit_mae"),L_r=o(" \u2014 "),$Q=a("a"),x_r=o("TFViTMAEForPreTraining"),$_r=o(" (ViTMAE model)"),k_r=l(),u7=a("li"),r5e=a("strong"),S_r=o("xlm"),R_r=o(" \u2014 "),kQ=a("a"),P_r=o("TFXLMWithLMHeadModel"),B_r=o(" (XLM model)"),I_r=l(),b7=a("li"),t5e=a("strong"),N_r=o("xlm-roberta"),q_r=o(" \u2014 "),SQ=a("a"),j_r=o("TFXLMRobertaForMaskedLM"),D_r=o(" (XLM-RoBERTa model)"),G_r=l(),v7=a("li"),a5e=a("strong"),O_r=o("xlnet"),V_r=o(" \u2014 "),RQ=a("a"),X_r=o("TFXLNetLMHeadModel"),z_r=o(" (XLNet model)"),W_r=l(),F(F7.$$.fragment),yje=l(),Qd=a("h2"),T7=a("a"),n5e=a("span"),F(E8.$$.fragment),Q_r=l(),s5e=a("span"),H_r=o("TFAutoModelForCausalLM"),Lje=l(),Zo=a("div"),F(C8.$$.fragment),U_r=l(),Hd=a("p"),J_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),PQ=a("a"),Y_r=o("from_pretrained()"),K_r=o(" class method or the "),BQ=a("a"),Z_r=o("from_config()"),eur=o(` class
method.`),our=l(),w8=a("p"),rur=o("This class cannot be instantiated directly using "),l5e=a("code"),tur=o("__init__()"),aur=o(" (throws an error)."),nur=l(),xt=a("div"),F(A8.$$.fragment),sur=l(),i5e=a("p"),lur=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),iur=l(),Ud=a("p"),dur=o(`Note:
Loading a model from its configuration file does `),d5e=a("strong"),cur=o("not"),fur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IQ=a("a"),mur=o("from_pretrained()"),gur=o(" to load the model weights."),hur=l(),F(M7.$$.fragment),pur=l(),yr=a("div"),F(y8.$$.fragment),_ur=l(),c5e=a("p"),uur=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),bur=l(),en=a("p"),vur=o("The model class to instantiate is selected based on the "),f5e=a("code"),Fur=o("model_type"),Tur=o(` property of the config object (either
passed as an argument or loaded from `),m5e=a("code"),Mur=o("pretrained_model_name_or_path"),Eur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g5e=a("code"),Cur=o("pretrained_model_name_or_path"),wur=o(":"),Aur=l(),Te=a("ul"),E7=a("li"),h5e=a("strong"),yur=o("bert"),Lur=o(" \u2014 "),NQ=a("a"),xur=o("TFBertLMHeadModel"),$ur=o(" (BERT model)"),kur=l(),C7=a("li"),p5e=a("strong"),Sur=o("camembert"),Rur=o(" \u2014 "),qQ=a("a"),Pur=o("TFCamembertForCausalLM"),Bur=o(" (CamemBERT model)"),Iur=l(),w7=a("li"),_5e=a("strong"),Nur=o("ctrl"),qur=o(" \u2014 "),jQ=a("a"),jur=o("TFCTRLLMHeadModel"),Dur=o(" (CTRL model)"),Gur=l(),A7=a("li"),u5e=a("strong"),Our=o("gpt2"),Vur=o(" \u2014 "),DQ=a("a"),Xur=o("TFGPT2LMHeadModel"),zur=o(" (OpenAI GPT-2 model)"),Wur=l(),y7=a("li"),b5e=a("strong"),Qur=o("gptj"),Hur=o(" \u2014 "),GQ=a("a"),Uur=o("TFGPTJForCausalLM"),Jur=o(" (GPT-J model)"),Yur=l(),L7=a("li"),v5e=a("strong"),Kur=o("openai-gpt"),Zur=o(" \u2014 "),OQ=a("a"),e1r=o("TFOpenAIGPTLMHeadModel"),o1r=o(" (OpenAI GPT model)"),r1r=l(),x7=a("li"),F5e=a("strong"),t1r=o("opt"),a1r=o(" \u2014 "),VQ=a("a"),n1r=o("TFOPTForCausalLM"),s1r=o(" (OPT model)"),l1r=l(),$7=a("li"),T5e=a("strong"),i1r=o("rembert"),d1r=o(" \u2014 "),XQ=a("a"),c1r=o("TFRemBertForCausalLM"),f1r=o(" (RemBERT model)"),m1r=l(),k7=a("li"),M5e=a("strong"),g1r=o("roberta"),h1r=o(" \u2014 "),zQ=a("a"),p1r=o("TFRobertaForCausalLM"),_1r=o(" (RoBERTa model)"),u1r=l(),S7=a("li"),E5e=a("strong"),b1r=o("roformer"),v1r=o(" \u2014 "),WQ=a("a"),F1r=o("TFRoFormerForCausalLM"),T1r=o(" (RoFormer model)"),M1r=l(),R7=a("li"),C5e=a("strong"),E1r=o("transfo-xl"),C1r=o(" \u2014 "),QQ=a("a"),w1r=o("TFTransfoXLLMHeadModel"),A1r=o(" (Transformer-XL model)"),y1r=l(),P7=a("li"),w5e=a("strong"),L1r=o("xlm"),x1r=o(" \u2014 "),HQ=a("a"),$1r=o("TFXLMWithLMHeadModel"),k1r=o(" (XLM model)"),S1r=l(),B7=a("li"),A5e=a("strong"),R1r=o("xlnet"),P1r=o(" \u2014 "),UQ=a("a"),B1r=o("TFXLNetLMHeadModel"),I1r=o(" (XLNet model)"),N1r=l(),F(I7.$$.fragment),xje=l(),Jd=a("h2"),N7=a("a"),y5e=a("span"),F(L8.$$.fragment),q1r=l(),L5e=a("span"),j1r=o("TFAutoModelForImageClassification"),$je=l(),er=a("div"),F(x8.$$.fragment),D1r=l(),Yd=a("p"),G1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),JQ=a("a"),O1r=o("from_pretrained()"),V1r=o(" class method or the "),YQ=a("a"),X1r=o("from_config()"),z1r=o(` class
method.`),W1r=l(),$8=a("p"),Q1r=o("This class cannot be instantiated directly using "),x5e=a("code"),H1r=o("__init__()"),U1r=o(" (throws an error)."),J1r=l(),$t=a("div"),F(k8.$$.fragment),Y1r=l(),$5e=a("p"),K1r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Z1r=l(),Kd=a("p"),ebr=o(`Note:
Loading a model from its configuration file does `),k5e=a("strong"),obr=o("not"),rbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KQ=a("a"),tbr=o("from_pretrained()"),abr=o(" to load the model weights."),nbr=l(),F(q7.$$.fragment),sbr=l(),Lr=a("div"),F(S8.$$.fragment),lbr=l(),S5e=a("p"),ibr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),dbr=l(),on=a("p"),cbr=o("The model class to instantiate is selected based on the "),R5e=a("code"),fbr=o("model_type"),mbr=o(` property of the config object (either
passed as an argument or loaded from `),P5e=a("code"),gbr=o("pretrained_model_name_or_path"),hbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B5e=a("code"),pbr=o("pretrained_model_name_or_path"),_br=o(":"),ubr=l(),rn=a("ul"),j7=a("li"),I5e=a("strong"),bbr=o("convnext"),vbr=o(" \u2014 "),ZQ=a("a"),Fbr=o("TFConvNextForImageClassification"),Tbr=o(" (ConvNext model)"),Mbr=l(),D7=a("li"),N5e=a("strong"),Ebr=o("data2vec-vision"),Cbr=o(" \u2014 "),eH=a("a"),wbr=o("TFData2VecVisionForImageClassification"),Abr=o(" (Data2VecVision model)"),ybr=l(),G7=a("li"),q5e=a("strong"),Lbr=o("swin"),xbr=o(" \u2014 "),oH=a("a"),$br=o("TFSwinForImageClassification"),kbr=o(" (Swin model)"),Sbr=l(),O7=a("li"),j5e=a("strong"),Rbr=o("vit"),Pbr=o(" \u2014 "),rH=a("a"),Bbr=o("TFViTForImageClassification"),Ibr=o(" (ViT model)"),Nbr=l(),F(V7.$$.fragment),kje=l(),Zd=a("h2"),X7=a("a"),D5e=a("span"),F(R8.$$.fragment),qbr=l(),G5e=a("span"),jbr=o("TFAutoModelForMaskedLM"),Sje=l(),or=a("div"),F(P8.$$.fragment),Dbr=l(),ec=a("p"),Gbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),tH=a("a"),Obr=o("from_pretrained()"),Vbr=o(" class method or the "),aH=a("a"),Xbr=o("from_config()"),zbr=o(` class
method.`),Wbr=l(),B8=a("p"),Qbr=o("This class cannot be instantiated directly using "),O5e=a("code"),Hbr=o("__init__()"),Ubr=o(" (throws an error)."),Jbr=l(),kt=a("div"),F(I8.$$.fragment),Ybr=l(),V5e=a("p"),Kbr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Zbr=l(),oc=a("p"),e2r=o(`Note:
Loading a model from its configuration file does `),X5e=a("strong"),o2r=o("not"),r2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nH=a("a"),t2r=o("from_pretrained()"),a2r=o(" to load the model weights."),n2r=l(),F(z7.$$.fragment),s2r=l(),xr=a("div"),F(N8.$$.fragment),l2r=l(),z5e=a("p"),i2r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),d2r=l(),tn=a("p"),c2r=o("The model class to instantiate is selected based on the "),W5e=a("code"),f2r=o("model_type"),m2r=o(` property of the config object (either
passed as an argument or loaded from `),Q5e=a("code"),g2r=o("pretrained_model_name_or_path"),h2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H5e=a("code"),p2r=o("pretrained_model_name_or_path"),_2r=o(":"),u2r=l(),ie=a("ul"),W7=a("li"),U5e=a("strong"),b2r=o("albert"),v2r=o(" \u2014 "),sH=a("a"),F2r=o("TFAlbertForMaskedLM"),T2r=o(" (ALBERT model)"),M2r=l(),Q7=a("li"),J5e=a("strong"),E2r=o("bert"),C2r=o(" \u2014 "),lH=a("a"),w2r=o("TFBertForMaskedLM"),A2r=o(" (BERT model)"),y2r=l(),H7=a("li"),Y5e=a("strong"),L2r=o("camembert"),x2r=o(" \u2014 "),iH=a("a"),$2r=o("TFCamembertForMaskedLM"),k2r=o(" (CamemBERT model)"),S2r=l(),U7=a("li"),K5e=a("strong"),R2r=o("convbert"),P2r=o(" \u2014 "),dH=a("a"),B2r=o("TFConvBertForMaskedLM"),I2r=o(" (ConvBERT model)"),N2r=l(),J7=a("li"),Z5e=a("strong"),q2r=o("deberta"),j2r=o(" \u2014 "),cH=a("a"),D2r=o("TFDebertaForMaskedLM"),G2r=o(" (DeBERTa model)"),O2r=l(),Y7=a("li"),eve=a("strong"),V2r=o("deberta-v2"),X2r=o(" \u2014 "),fH=a("a"),z2r=o("TFDebertaV2ForMaskedLM"),W2r=o(" (DeBERTa-v2 model)"),Q2r=l(),K7=a("li"),ove=a("strong"),H2r=o("distilbert"),U2r=o(" \u2014 "),mH=a("a"),J2r=o("TFDistilBertForMaskedLM"),Y2r=o(" (DistilBERT model)"),K2r=l(),Z7=a("li"),rve=a("strong"),Z2r=o("electra"),e5r=o(" \u2014 "),gH=a("a"),o5r=o("TFElectraForMaskedLM"),r5r=o(" (ELECTRA model)"),t5r=l(),eM=a("li"),tve=a("strong"),a5r=o("flaubert"),n5r=o(" \u2014 "),hH=a("a"),s5r=o("TFFlaubertWithLMHeadModel"),l5r=o(" (FlauBERT model)"),i5r=l(),oM=a("li"),ave=a("strong"),d5r=o("funnel"),c5r=o(" \u2014 "),pH=a("a"),f5r=o("TFFunnelForMaskedLM"),m5r=o(" (Funnel Transformer model)"),g5r=l(),rM=a("li"),nve=a("strong"),h5r=o("layoutlm"),p5r=o(" \u2014 "),_H=a("a"),_5r=o("TFLayoutLMForMaskedLM"),u5r=o(" (LayoutLM model)"),b5r=l(),tM=a("li"),sve=a("strong"),v5r=o("longformer"),F5r=o(" \u2014 "),uH=a("a"),T5r=o("TFLongformerForMaskedLM"),M5r=o(" (Longformer model)"),E5r=l(),aM=a("li"),lve=a("strong"),C5r=o("mobilebert"),w5r=o(" \u2014 "),bH=a("a"),A5r=o("TFMobileBertForMaskedLM"),y5r=o(" (MobileBERT model)"),L5r=l(),nM=a("li"),ive=a("strong"),x5r=o("mpnet"),$5r=o(" \u2014 "),vH=a("a"),k5r=o("TFMPNetForMaskedLM"),S5r=o(" (MPNet model)"),R5r=l(),sM=a("li"),dve=a("strong"),P5r=o("rembert"),B5r=o(" \u2014 "),FH=a("a"),I5r=o("TFRemBertForMaskedLM"),N5r=o(" (RemBERT model)"),q5r=l(),lM=a("li"),cve=a("strong"),j5r=o("roberta"),D5r=o(" \u2014 "),TH=a("a"),G5r=o("TFRobertaForMaskedLM"),O5r=o(" (RoBERTa model)"),V5r=l(),iM=a("li"),fve=a("strong"),X5r=o("roformer"),z5r=o(" \u2014 "),MH=a("a"),W5r=o("TFRoFormerForMaskedLM"),Q5r=o(" (RoFormer model)"),H5r=l(),dM=a("li"),mve=a("strong"),U5r=o("tapas"),J5r=o(" \u2014 "),EH=a("a"),Y5r=o("TFTapasForMaskedLM"),K5r=o(" (TAPAS model)"),Z5r=l(),cM=a("li"),gve=a("strong"),evr=o("xlm"),ovr=o(" \u2014 "),CH=a("a"),rvr=o("TFXLMWithLMHeadModel"),tvr=o(" (XLM model)"),avr=l(),fM=a("li"),hve=a("strong"),nvr=o("xlm-roberta"),svr=o(" \u2014 "),wH=a("a"),lvr=o("TFXLMRobertaForMaskedLM"),ivr=o(" (XLM-RoBERTa model)"),dvr=l(),F(mM.$$.fragment),Rje=l(),rc=a("h2"),gM=a("a"),pve=a("span"),F(q8.$$.fragment),cvr=l(),_ve=a("span"),fvr=o("TFAutoModelForSeq2SeqLM"),Pje=l(),rr=a("div"),F(j8.$$.fragment),mvr=l(),tc=a("p"),gvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),AH=a("a"),hvr=o("from_pretrained()"),pvr=o(" class method or the "),yH=a("a"),_vr=o("from_config()"),uvr=o(` class
method.`),bvr=l(),D8=a("p"),vvr=o("This class cannot be instantiated directly using "),uve=a("code"),Fvr=o("__init__()"),Tvr=o(" (throws an error)."),Mvr=l(),St=a("div"),F(G8.$$.fragment),Evr=l(),bve=a("p"),Cvr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),wvr=l(),ac=a("p"),Avr=o(`Note:
Loading a model from its configuration file does `),vve=a("strong"),yvr=o("not"),Lvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LH=a("a"),xvr=o("from_pretrained()"),$vr=o(" to load the model weights."),kvr=l(),F(hM.$$.fragment),Svr=l(),$r=a("div"),F(O8.$$.fragment),Rvr=l(),Fve=a("p"),Pvr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Bvr=l(),an=a("p"),Ivr=o("The model class to instantiate is selected based on the "),Tve=a("code"),Nvr=o("model_type"),qvr=o(` property of the config object (either
passed as an argument or loaded from `),Mve=a("code"),jvr=o("pretrained_model_name_or_path"),Dvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Eve=a("code"),Gvr=o("pretrained_model_name_or_path"),Ovr=o(":"),Vvr=l(),ye=a("ul"),pM=a("li"),Cve=a("strong"),Xvr=o("bart"),zvr=o(" \u2014 "),xH=a("a"),Wvr=o("TFBartForConditionalGeneration"),Qvr=o(" (BART model)"),Hvr=l(),_M=a("li"),wve=a("strong"),Uvr=o("blenderbot"),Jvr=o(" \u2014 "),$H=a("a"),Yvr=o("TFBlenderbotForConditionalGeneration"),Kvr=o(" (Blenderbot model)"),Zvr=l(),uM=a("li"),Ave=a("strong"),eFr=o("blenderbot-small"),oFr=o(" \u2014 "),kH=a("a"),rFr=o("TFBlenderbotSmallForConditionalGeneration"),tFr=o(" (BlenderbotSmall model)"),aFr=l(),bM=a("li"),yve=a("strong"),nFr=o("encoder-decoder"),sFr=o(" \u2014 "),SH=a("a"),lFr=o("TFEncoderDecoderModel"),iFr=o(" (Encoder decoder model)"),dFr=l(),vM=a("li"),Lve=a("strong"),cFr=o("led"),fFr=o(" \u2014 "),RH=a("a"),mFr=o("TFLEDForConditionalGeneration"),gFr=o(" (LED model)"),hFr=l(),FM=a("li"),xve=a("strong"),pFr=o("marian"),_Fr=o(" \u2014 "),PH=a("a"),uFr=o("TFMarianMTModel"),bFr=o(" (Marian model)"),vFr=l(),TM=a("li"),$ve=a("strong"),FFr=o("mbart"),TFr=o(" \u2014 "),BH=a("a"),MFr=o("TFMBartForConditionalGeneration"),EFr=o(" (mBART model)"),CFr=l(),MM=a("li"),kve=a("strong"),wFr=o("mt5"),AFr=o(" \u2014 "),IH=a("a"),yFr=o("TFMT5ForConditionalGeneration"),LFr=o(" (mT5 model)"),xFr=l(),EM=a("li"),Sve=a("strong"),$Fr=o("pegasus"),kFr=o(" \u2014 "),NH=a("a"),SFr=o("TFPegasusForConditionalGeneration"),RFr=o(" (Pegasus model)"),PFr=l(),CM=a("li"),Rve=a("strong"),BFr=o("t5"),IFr=o(" \u2014 "),qH=a("a"),NFr=o("TFT5ForConditionalGeneration"),qFr=o(" (T5 model)"),jFr=l(),F(wM.$$.fragment),Bje=l(),nc=a("h2"),AM=a("a"),Pve=a("span"),F(V8.$$.fragment),DFr=l(),Bve=a("span"),GFr=o("TFAutoModelForSequenceClassification"),Ije=l(),tr=a("div"),F(X8.$$.fragment),OFr=l(),sc=a("p"),VFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),jH=a("a"),XFr=o("from_pretrained()"),zFr=o(" class method or the "),DH=a("a"),WFr=o("from_config()"),QFr=o(` class
method.`),HFr=l(),z8=a("p"),UFr=o("This class cannot be instantiated directly using "),Ive=a("code"),JFr=o("__init__()"),YFr=o(" (throws an error)."),KFr=l(),Rt=a("div"),F(W8.$$.fragment),ZFr=l(),Nve=a("p"),e0r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),o0r=l(),lc=a("p"),r0r=o(`Note:
Loading a model from its configuration file does `),qve=a("strong"),t0r=o("not"),a0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GH=a("a"),n0r=o("from_pretrained()"),s0r=o(" to load the model weights."),l0r=l(),F(yM.$$.fragment),i0r=l(),kr=a("div"),F(Q8.$$.fragment),d0r=l(),jve=a("p"),c0r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),f0r=l(),nn=a("p"),m0r=o("The model class to instantiate is selected based on the "),Dve=a("code"),g0r=o("model_type"),h0r=o(` property of the config object (either
passed as an argument or loaded from `),Gve=a("code"),p0r=o("pretrained_model_name_or_path"),_0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ove=a("code"),u0r=o("pretrained_model_name_or_path"),b0r=o(":"),v0r=l(),oe=a("ul"),LM=a("li"),Vve=a("strong"),F0r=o("albert"),T0r=o(" \u2014 "),OH=a("a"),M0r=o("TFAlbertForSequenceClassification"),E0r=o(" (ALBERT model)"),C0r=l(),xM=a("li"),Xve=a("strong"),w0r=o("bert"),A0r=o(" \u2014 "),VH=a("a"),y0r=o("TFBertForSequenceClassification"),L0r=o(" (BERT model)"),x0r=l(),$M=a("li"),zve=a("strong"),$0r=o("camembert"),k0r=o(" \u2014 "),XH=a("a"),S0r=o("TFCamembertForSequenceClassification"),R0r=o(" (CamemBERT model)"),P0r=l(),kM=a("li"),Wve=a("strong"),B0r=o("convbert"),I0r=o(" \u2014 "),zH=a("a"),N0r=o("TFConvBertForSequenceClassification"),q0r=o(" (ConvBERT model)"),j0r=l(),SM=a("li"),Qve=a("strong"),D0r=o("ctrl"),G0r=o(" \u2014 "),WH=a("a"),O0r=o("TFCTRLForSequenceClassification"),V0r=o(" (CTRL model)"),X0r=l(),RM=a("li"),Hve=a("strong"),z0r=o("deberta"),W0r=o(" \u2014 "),QH=a("a"),Q0r=o("TFDebertaForSequenceClassification"),H0r=o(" (DeBERTa model)"),U0r=l(),PM=a("li"),Uve=a("strong"),J0r=o("deberta-v2"),Y0r=o(" \u2014 "),HH=a("a"),K0r=o("TFDebertaV2ForSequenceClassification"),Z0r=o(" (DeBERTa-v2 model)"),eTr=l(),BM=a("li"),Jve=a("strong"),oTr=o("distilbert"),rTr=o(" \u2014 "),UH=a("a"),tTr=o("TFDistilBertForSequenceClassification"),aTr=o(" (DistilBERT model)"),nTr=l(),IM=a("li"),Yve=a("strong"),sTr=o("electra"),lTr=o(" \u2014 "),JH=a("a"),iTr=o("TFElectraForSequenceClassification"),dTr=o(" (ELECTRA model)"),cTr=l(),NM=a("li"),Kve=a("strong"),fTr=o("flaubert"),mTr=o(" \u2014 "),YH=a("a"),gTr=o("TFFlaubertForSequenceClassification"),hTr=o(" (FlauBERT model)"),pTr=l(),qM=a("li"),Zve=a("strong"),_Tr=o("funnel"),uTr=o(" \u2014 "),KH=a("a"),bTr=o("TFFunnelForSequenceClassification"),vTr=o(" (Funnel Transformer model)"),FTr=l(),jM=a("li"),eFe=a("strong"),TTr=o("gpt2"),MTr=o(" \u2014 "),ZH=a("a"),ETr=o("TFGPT2ForSequenceClassification"),CTr=o(" (OpenAI GPT-2 model)"),wTr=l(),DM=a("li"),oFe=a("strong"),ATr=o("gptj"),yTr=o(" \u2014 "),eU=a("a"),LTr=o("TFGPTJForSequenceClassification"),xTr=o(" (GPT-J model)"),$Tr=l(),GM=a("li"),rFe=a("strong"),kTr=o("layoutlm"),STr=o(" \u2014 "),oU=a("a"),RTr=o("TFLayoutLMForSequenceClassification"),PTr=o(" (LayoutLM model)"),BTr=l(),OM=a("li"),tFe=a("strong"),ITr=o("longformer"),NTr=o(" \u2014 "),rU=a("a"),qTr=o("TFLongformerForSequenceClassification"),jTr=o(" (Longformer model)"),DTr=l(),VM=a("li"),aFe=a("strong"),GTr=o("mobilebert"),OTr=o(" \u2014 "),tU=a("a"),VTr=o("TFMobileBertForSequenceClassification"),XTr=o(" (MobileBERT model)"),zTr=l(),XM=a("li"),nFe=a("strong"),WTr=o("mpnet"),QTr=o(" \u2014 "),aU=a("a"),HTr=o("TFMPNetForSequenceClassification"),UTr=o(" (MPNet model)"),JTr=l(),zM=a("li"),sFe=a("strong"),YTr=o("openai-gpt"),KTr=o(" \u2014 "),nU=a("a"),ZTr=o("TFOpenAIGPTForSequenceClassification"),e7r=o(" (OpenAI GPT model)"),o7r=l(),WM=a("li"),lFe=a("strong"),r7r=o("rembert"),t7r=o(" \u2014 "),sU=a("a"),a7r=o("TFRemBertForSequenceClassification"),n7r=o(" (RemBERT model)"),s7r=l(),QM=a("li"),iFe=a("strong"),l7r=o("roberta"),i7r=o(" \u2014 "),lU=a("a"),d7r=o("TFRobertaForSequenceClassification"),c7r=o(" (RoBERTa model)"),f7r=l(),HM=a("li"),dFe=a("strong"),m7r=o("roformer"),g7r=o(" \u2014 "),iU=a("a"),h7r=o("TFRoFormerForSequenceClassification"),p7r=o(" (RoFormer model)"),_7r=l(),UM=a("li"),cFe=a("strong"),u7r=o("tapas"),b7r=o(" \u2014 "),dU=a("a"),v7r=o("TFTapasForSequenceClassification"),F7r=o(" (TAPAS model)"),T7r=l(),JM=a("li"),fFe=a("strong"),M7r=o("transfo-xl"),E7r=o(" \u2014 "),cU=a("a"),C7r=o("TFTransfoXLForSequenceClassification"),w7r=o(" (Transformer-XL model)"),A7r=l(),YM=a("li"),mFe=a("strong"),y7r=o("xlm"),L7r=o(" \u2014 "),fU=a("a"),x7r=o("TFXLMForSequenceClassification"),$7r=o(" (XLM model)"),k7r=l(),KM=a("li"),gFe=a("strong"),S7r=o("xlm-roberta"),R7r=o(" \u2014 "),mU=a("a"),P7r=o("TFXLMRobertaForSequenceClassification"),B7r=o(" (XLM-RoBERTa model)"),I7r=l(),ZM=a("li"),hFe=a("strong"),N7r=o("xlnet"),q7r=o(" \u2014 "),gU=a("a"),j7r=o("TFXLNetForSequenceClassification"),D7r=o(" (XLNet model)"),G7r=l(),F(e4.$$.fragment),Nje=l(),ic=a("h2"),o4=a("a"),pFe=a("span"),F(H8.$$.fragment),O7r=l(),_Fe=a("span"),V7r=o("TFAutoModelForMultipleChoice"),qje=l(),ar=a("div"),F(U8.$$.fragment),X7r=l(),dc=a("p"),z7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),hU=a("a"),W7r=o("from_pretrained()"),Q7r=o(" class method or the "),pU=a("a"),H7r=o("from_config()"),U7r=o(` class
method.`),J7r=l(),J8=a("p"),Y7r=o("This class cannot be instantiated directly using "),uFe=a("code"),K7r=o("__init__()"),Z7r=o(" (throws an error)."),eMr=l(),Pt=a("div"),F(Y8.$$.fragment),oMr=l(),bFe=a("p"),rMr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),tMr=l(),cc=a("p"),aMr=o(`Note:
Loading a model from its configuration file does `),vFe=a("strong"),nMr=o("not"),sMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_U=a("a"),lMr=o("from_pretrained()"),iMr=o(" to load the model weights."),dMr=l(),F(r4.$$.fragment),cMr=l(),Sr=a("div"),F(K8.$$.fragment),fMr=l(),FFe=a("p"),mMr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),gMr=l(),sn=a("p"),hMr=o("The model class to instantiate is selected based on the "),TFe=a("code"),pMr=o("model_type"),_Mr=o(` property of the config object (either
passed as an argument or loaded from `),MFe=a("code"),uMr=o("pretrained_model_name_or_path"),bMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),EFe=a("code"),vMr=o("pretrained_model_name_or_path"),FMr=o(":"),TMr=l(),pe=a("ul"),t4=a("li"),CFe=a("strong"),MMr=o("albert"),EMr=o(" \u2014 "),uU=a("a"),CMr=o("TFAlbertForMultipleChoice"),wMr=o(" (ALBERT model)"),AMr=l(),a4=a("li"),wFe=a("strong"),yMr=o("bert"),LMr=o(" \u2014 "),bU=a("a"),xMr=o("TFBertForMultipleChoice"),$Mr=o(" (BERT model)"),kMr=l(),n4=a("li"),AFe=a("strong"),SMr=o("camembert"),RMr=o(" \u2014 "),vU=a("a"),PMr=o("TFCamembertForMultipleChoice"),BMr=o(" (CamemBERT model)"),IMr=l(),s4=a("li"),yFe=a("strong"),NMr=o("convbert"),qMr=o(" \u2014 "),FU=a("a"),jMr=o("TFConvBertForMultipleChoice"),DMr=o(" (ConvBERT model)"),GMr=l(),l4=a("li"),LFe=a("strong"),OMr=o("distilbert"),VMr=o(" \u2014 "),TU=a("a"),XMr=o("TFDistilBertForMultipleChoice"),zMr=o(" (DistilBERT model)"),WMr=l(),i4=a("li"),xFe=a("strong"),QMr=o("electra"),HMr=o(" \u2014 "),MU=a("a"),UMr=o("TFElectraForMultipleChoice"),JMr=o(" (ELECTRA model)"),YMr=l(),d4=a("li"),$Fe=a("strong"),KMr=o("flaubert"),ZMr=o(" \u2014 "),EU=a("a"),e4r=o("TFFlaubertForMultipleChoice"),o4r=o(" (FlauBERT model)"),r4r=l(),c4=a("li"),kFe=a("strong"),t4r=o("funnel"),a4r=o(" \u2014 "),CU=a("a"),n4r=o("TFFunnelForMultipleChoice"),s4r=o(" (Funnel Transformer model)"),l4r=l(),f4=a("li"),SFe=a("strong"),i4r=o("longformer"),d4r=o(" \u2014 "),wU=a("a"),c4r=o("TFLongformerForMultipleChoice"),f4r=o(" (Longformer model)"),m4r=l(),m4=a("li"),RFe=a("strong"),g4r=o("mobilebert"),h4r=o(" \u2014 "),AU=a("a"),p4r=o("TFMobileBertForMultipleChoice"),_4r=o(" (MobileBERT model)"),u4r=l(),g4=a("li"),PFe=a("strong"),b4r=o("mpnet"),v4r=o(" \u2014 "),yU=a("a"),F4r=o("TFMPNetForMultipleChoice"),T4r=o(" (MPNet model)"),M4r=l(),h4=a("li"),BFe=a("strong"),E4r=o("rembert"),C4r=o(" \u2014 "),LU=a("a"),w4r=o("TFRemBertForMultipleChoice"),A4r=o(" (RemBERT model)"),y4r=l(),p4=a("li"),IFe=a("strong"),L4r=o("roberta"),x4r=o(" \u2014 "),xU=a("a"),$4r=o("TFRobertaForMultipleChoice"),k4r=o(" (RoBERTa model)"),S4r=l(),_4=a("li"),NFe=a("strong"),R4r=o("roformer"),P4r=o(" \u2014 "),$U=a("a"),B4r=o("TFRoFormerForMultipleChoice"),I4r=o(" (RoFormer model)"),N4r=l(),u4=a("li"),qFe=a("strong"),q4r=o("xlm"),j4r=o(" \u2014 "),kU=a("a"),D4r=o("TFXLMForMultipleChoice"),G4r=o(" (XLM model)"),O4r=l(),b4=a("li"),jFe=a("strong"),V4r=o("xlm-roberta"),X4r=o(" \u2014 "),SU=a("a"),z4r=o("TFXLMRobertaForMultipleChoice"),W4r=o(" (XLM-RoBERTa model)"),Q4r=l(),v4=a("li"),DFe=a("strong"),H4r=o("xlnet"),U4r=o(" \u2014 "),RU=a("a"),J4r=o("TFXLNetForMultipleChoice"),Y4r=o(" (XLNet model)"),K4r=l(),F(F4.$$.fragment),jje=l(),fc=a("h2"),T4=a("a"),GFe=a("span"),F(Z8.$$.fragment),Z4r=l(),OFe=a("span"),eEr=o("TFAutoModelForNextSentencePrediction"),Dje=l(),nr=a("div"),F(e9.$$.fragment),oEr=l(),mc=a("p"),rEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),PU=a("a"),tEr=o("from_pretrained()"),aEr=o(" class method or the "),BU=a("a"),nEr=o("from_config()"),sEr=o(` class
method.`),lEr=l(),o9=a("p"),iEr=o("This class cannot be instantiated directly using "),VFe=a("code"),dEr=o("__init__()"),cEr=o(" (throws an error)."),fEr=l(),Bt=a("div"),F(r9.$$.fragment),mEr=l(),XFe=a("p"),gEr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),hEr=l(),gc=a("p"),pEr=o(`Note:
Loading a model from its configuration file does `),zFe=a("strong"),_Er=o("not"),uEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IU=a("a"),bEr=o("from_pretrained()"),vEr=o(" to load the model weights."),FEr=l(),F(M4.$$.fragment),TEr=l(),Rr=a("div"),F(t9.$$.fragment),MEr=l(),WFe=a("p"),EEr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),CEr=l(),ln=a("p"),wEr=o("The model class to instantiate is selected based on the "),QFe=a("code"),AEr=o("model_type"),yEr=o(` property of the config object (either
passed as an argument or loaded from `),HFe=a("code"),LEr=o("pretrained_model_name_or_path"),xEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UFe=a("code"),$Er=o("pretrained_model_name_or_path"),kEr=o(":"),SEr=l(),a9=a("ul"),E4=a("li"),JFe=a("strong"),REr=o("bert"),PEr=o(" \u2014 "),NU=a("a"),BEr=o("TFBertForNextSentencePrediction"),IEr=o(" (BERT model)"),NEr=l(),C4=a("li"),YFe=a("strong"),qEr=o("mobilebert"),jEr=o(" \u2014 "),qU=a("a"),DEr=o("TFMobileBertForNextSentencePrediction"),GEr=o(" (MobileBERT model)"),OEr=l(),F(w4.$$.fragment),Gje=l(),hc=a("h2"),A4=a("a"),KFe=a("span"),F(n9.$$.fragment),VEr=l(),ZFe=a("span"),XEr=o("TFAutoModelForTableQuestionAnswering"),Oje=l(),sr=a("div"),F(s9.$$.fragment),zEr=l(),pc=a("p"),WEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),jU=a("a"),QEr=o("from_pretrained()"),HEr=o(" class method or the "),DU=a("a"),UEr=o("from_config()"),JEr=o(` class
method.`),YEr=l(),l9=a("p"),KEr=o("This class cannot be instantiated directly using "),e0e=a("code"),ZEr=o("__init__()"),eCr=o(" (throws an error)."),oCr=l(),It=a("div"),F(i9.$$.fragment),rCr=l(),o0e=a("p"),tCr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),aCr=l(),_c=a("p"),nCr=o(`Note:
Loading a model from its configuration file does `),r0e=a("strong"),sCr=o("not"),lCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GU=a("a"),iCr=o("from_pretrained()"),dCr=o(" to load the model weights."),cCr=l(),F(y4.$$.fragment),fCr=l(),Pr=a("div"),F(d9.$$.fragment),mCr=l(),t0e=a("p"),gCr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),hCr=l(),dn=a("p"),pCr=o("The model class to instantiate is selected based on the "),a0e=a("code"),_Cr=o("model_type"),uCr=o(` property of the config object (either
passed as an argument or loaded from `),n0e=a("code"),bCr=o("pretrained_model_name_or_path"),vCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s0e=a("code"),FCr=o("pretrained_model_name_or_path"),TCr=o(":"),MCr=l(),l0e=a("ul"),L4=a("li"),i0e=a("strong"),ECr=o("tapas"),CCr=o(" \u2014 "),OU=a("a"),wCr=o("TFTapasForQuestionAnswering"),ACr=o(" (TAPAS model)"),yCr=l(),F(x4.$$.fragment),Vje=l(),uc=a("h2"),$4=a("a"),d0e=a("span"),F(c9.$$.fragment),LCr=l(),c0e=a("span"),xCr=o("TFAutoModelForTokenClassification"),Xje=l(),lr=a("div"),F(f9.$$.fragment),$Cr=l(),bc=a("p"),kCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),VU=a("a"),SCr=o("from_pretrained()"),RCr=o(" class method or the "),XU=a("a"),PCr=o("from_config()"),BCr=o(` class
method.`),ICr=l(),m9=a("p"),NCr=o("This class cannot be instantiated directly using "),f0e=a("code"),qCr=o("__init__()"),jCr=o(" (throws an error)."),DCr=l(),Nt=a("div"),F(g9.$$.fragment),GCr=l(),m0e=a("p"),OCr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),VCr=l(),vc=a("p"),XCr=o(`Note:
Loading a model from its configuration file does `),g0e=a("strong"),zCr=o("not"),WCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zU=a("a"),QCr=o("from_pretrained()"),HCr=o(" to load the model weights."),UCr=l(),F(k4.$$.fragment),JCr=l(),Br=a("div"),F(h9.$$.fragment),YCr=l(),h0e=a("p"),KCr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),ZCr=l(),cn=a("p"),e3r=o("The model class to instantiate is selected based on the "),p0e=a("code"),o3r=o("model_type"),r3r=o(` property of the config object (either
passed as an argument or loaded from `),_0e=a("code"),t3r=o("pretrained_model_name_or_path"),a3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u0e=a("code"),n3r=o("pretrained_model_name_or_path"),s3r=o(":"),l3r=l(),de=a("ul"),S4=a("li"),b0e=a("strong"),i3r=o("albert"),d3r=o(" \u2014 "),WU=a("a"),c3r=o("TFAlbertForTokenClassification"),f3r=o(" (ALBERT model)"),m3r=l(),R4=a("li"),v0e=a("strong"),g3r=o("bert"),h3r=o(" \u2014 "),QU=a("a"),p3r=o("TFBertForTokenClassification"),_3r=o(" (BERT model)"),u3r=l(),P4=a("li"),F0e=a("strong"),b3r=o("camembert"),v3r=o(" \u2014 "),HU=a("a"),F3r=o("TFCamembertForTokenClassification"),T3r=o(" (CamemBERT model)"),M3r=l(),B4=a("li"),T0e=a("strong"),E3r=o("convbert"),C3r=o(" \u2014 "),UU=a("a"),w3r=o("TFConvBertForTokenClassification"),A3r=o(" (ConvBERT model)"),y3r=l(),I4=a("li"),M0e=a("strong"),L3r=o("deberta"),x3r=o(" \u2014 "),JU=a("a"),$3r=o("TFDebertaForTokenClassification"),k3r=o(" (DeBERTa model)"),S3r=l(),N4=a("li"),E0e=a("strong"),R3r=o("deberta-v2"),P3r=o(" \u2014 "),YU=a("a"),B3r=o("TFDebertaV2ForTokenClassification"),I3r=o(" (DeBERTa-v2 model)"),N3r=l(),q4=a("li"),C0e=a("strong"),q3r=o("distilbert"),j3r=o(" \u2014 "),KU=a("a"),D3r=o("TFDistilBertForTokenClassification"),G3r=o(" (DistilBERT model)"),O3r=l(),j4=a("li"),w0e=a("strong"),V3r=o("electra"),X3r=o(" \u2014 "),ZU=a("a"),z3r=o("TFElectraForTokenClassification"),W3r=o(" (ELECTRA model)"),Q3r=l(),D4=a("li"),A0e=a("strong"),H3r=o("flaubert"),U3r=o(" \u2014 "),eJ=a("a"),J3r=o("TFFlaubertForTokenClassification"),Y3r=o(" (FlauBERT model)"),K3r=l(),G4=a("li"),y0e=a("strong"),Z3r=o("funnel"),ewr=o(" \u2014 "),oJ=a("a"),owr=o("TFFunnelForTokenClassification"),rwr=o(" (Funnel Transformer model)"),twr=l(),O4=a("li"),L0e=a("strong"),awr=o("layoutlm"),nwr=o(" \u2014 "),rJ=a("a"),swr=o("TFLayoutLMForTokenClassification"),lwr=o(" (LayoutLM model)"),iwr=l(),V4=a("li"),x0e=a("strong"),dwr=o("longformer"),cwr=o(" \u2014 "),tJ=a("a"),fwr=o("TFLongformerForTokenClassification"),mwr=o(" (Longformer model)"),gwr=l(),X4=a("li"),$0e=a("strong"),hwr=o("mobilebert"),pwr=o(" \u2014 "),aJ=a("a"),_wr=o("TFMobileBertForTokenClassification"),uwr=o(" (MobileBERT model)"),bwr=l(),z4=a("li"),k0e=a("strong"),vwr=o("mpnet"),Fwr=o(" \u2014 "),nJ=a("a"),Twr=o("TFMPNetForTokenClassification"),Mwr=o(" (MPNet model)"),Ewr=l(),W4=a("li"),S0e=a("strong"),Cwr=o("rembert"),wwr=o(" \u2014 "),sJ=a("a"),Awr=o("TFRemBertForTokenClassification"),ywr=o(" (RemBERT model)"),Lwr=l(),Q4=a("li"),R0e=a("strong"),xwr=o("roberta"),$wr=o(" \u2014 "),lJ=a("a"),kwr=o("TFRobertaForTokenClassification"),Swr=o(" (RoBERTa model)"),Rwr=l(),H4=a("li"),P0e=a("strong"),Pwr=o("roformer"),Bwr=o(" \u2014 "),iJ=a("a"),Iwr=o("TFRoFormerForTokenClassification"),Nwr=o(" (RoFormer model)"),qwr=l(),U4=a("li"),B0e=a("strong"),jwr=o("xlm"),Dwr=o(" \u2014 "),dJ=a("a"),Gwr=o("TFXLMForTokenClassification"),Owr=o(" (XLM model)"),Vwr=l(),J4=a("li"),I0e=a("strong"),Xwr=o("xlm-roberta"),zwr=o(" \u2014 "),cJ=a("a"),Wwr=o("TFXLMRobertaForTokenClassification"),Qwr=o(" (XLM-RoBERTa model)"),Hwr=l(),Y4=a("li"),N0e=a("strong"),Uwr=o("xlnet"),Jwr=o(" \u2014 "),fJ=a("a"),Ywr=o("TFXLNetForTokenClassification"),Kwr=o(" (XLNet model)"),Zwr=l(),F(K4.$$.fragment),zje=l(),Fc=a("h2"),Z4=a("a"),q0e=a("span"),F(p9.$$.fragment),e6r=l(),j0e=a("span"),o6r=o("TFAutoModelForQuestionAnswering"),Wje=l(),ir=a("div"),F(_9.$$.fragment),r6r=l(),Tc=a("p"),t6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),mJ=a("a"),a6r=o("from_pretrained()"),n6r=o(" class method or the "),gJ=a("a"),s6r=o("from_config()"),l6r=o(` class
method.`),i6r=l(),u9=a("p"),d6r=o("This class cannot be instantiated directly using "),D0e=a("code"),c6r=o("__init__()"),f6r=o(" (throws an error)."),m6r=l(),qt=a("div"),F(b9.$$.fragment),g6r=l(),G0e=a("p"),h6r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),p6r=l(),Mc=a("p"),_6r=o(`Note:
Loading a model from its configuration file does `),O0e=a("strong"),u6r=o("not"),b6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hJ=a("a"),v6r=o("from_pretrained()"),F6r=o(" to load the model weights."),T6r=l(),F(eE.$$.fragment),M6r=l(),Ir=a("div"),F(v9.$$.fragment),E6r=l(),V0e=a("p"),C6r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),w6r=l(),fn=a("p"),A6r=o("The model class to instantiate is selected based on the "),X0e=a("code"),y6r=o("model_type"),L6r=o(` property of the config object (either
passed as an argument or loaded from `),z0e=a("code"),x6r=o("pretrained_model_name_or_path"),$6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W0e=a("code"),k6r=o("pretrained_model_name_or_path"),S6r=o(":"),R6r=l(),ce=a("ul"),oE=a("li"),Q0e=a("strong"),P6r=o("albert"),B6r=o(" \u2014 "),pJ=a("a"),I6r=o("TFAlbertForQuestionAnswering"),N6r=o(" (ALBERT model)"),q6r=l(),rE=a("li"),H0e=a("strong"),j6r=o("bert"),D6r=o(" \u2014 "),_J=a("a"),G6r=o("TFBertForQuestionAnswering"),O6r=o(" (BERT model)"),V6r=l(),tE=a("li"),U0e=a("strong"),X6r=o("camembert"),z6r=o(" \u2014 "),uJ=a("a"),W6r=o("TFCamembertForQuestionAnswering"),Q6r=o(" (CamemBERT model)"),H6r=l(),aE=a("li"),J0e=a("strong"),U6r=o("convbert"),J6r=o(" \u2014 "),bJ=a("a"),Y6r=o("TFConvBertForQuestionAnswering"),K6r=o(" (ConvBERT model)"),Z6r=l(),nE=a("li"),Y0e=a("strong"),eAr=o("deberta"),oAr=o(" \u2014 "),vJ=a("a"),rAr=o("TFDebertaForQuestionAnswering"),tAr=o(" (DeBERTa model)"),aAr=l(),sE=a("li"),K0e=a("strong"),nAr=o("deberta-v2"),sAr=o(" \u2014 "),FJ=a("a"),lAr=o("TFDebertaV2ForQuestionAnswering"),iAr=o(" (DeBERTa-v2 model)"),dAr=l(),lE=a("li"),Z0e=a("strong"),cAr=o("distilbert"),fAr=o(" \u2014 "),TJ=a("a"),mAr=o("TFDistilBertForQuestionAnswering"),gAr=o(" (DistilBERT model)"),hAr=l(),iE=a("li"),eTe=a("strong"),pAr=o("electra"),_Ar=o(" \u2014 "),MJ=a("a"),uAr=o("TFElectraForQuestionAnswering"),bAr=o(" (ELECTRA model)"),vAr=l(),dE=a("li"),oTe=a("strong"),FAr=o("flaubert"),TAr=o(" \u2014 "),EJ=a("a"),MAr=o("TFFlaubertForQuestionAnsweringSimple"),EAr=o(" (FlauBERT model)"),CAr=l(),cE=a("li"),rTe=a("strong"),wAr=o("funnel"),AAr=o(" \u2014 "),CJ=a("a"),yAr=o("TFFunnelForQuestionAnswering"),LAr=o(" (Funnel Transformer model)"),xAr=l(),fE=a("li"),tTe=a("strong"),$Ar=o("gptj"),kAr=o(" \u2014 "),wJ=a("a"),SAr=o("TFGPTJForQuestionAnswering"),RAr=o(" (GPT-J model)"),PAr=l(),mE=a("li"),aTe=a("strong"),BAr=o("longformer"),IAr=o(" \u2014 "),AJ=a("a"),NAr=o("TFLongformerForQuestionAnswering"),qAr=o(" (Longformer model)"),jAr=l(),gE=a("li"),nTe=a("strong"),DAr=o("mobilebert"),GAr=o(" \u2014 "),yJ=a("a"),OAr=o("TFMobileBertForQuestionAnswering"),VAr=o(" (MobileBERT model)"),XAr=l(),hE=a("li"),sTe=a("strong"),zAr=o("mpnet"),WAr=o(" \u2014 "),LJ=a("a"),QAr=o("TFMPNetForQuestionAnswering"),HAr=o(" (MPNet model)"),UAr=l(),pE=a("li"),lTe=a("strong"),JAr=o("rembert"),YAr=o(" \u2014 "),xJ=a("a"),KAr=o("TFRemBertForQuestionAnswering"),ZAr=o(" (RemBERT model)"),eyr=l(),_E=a("li"),iTe=a("strong"),oyr=o("roberta"),ryr=o(" \u2014 "),$J=a("a"),tyr=o("TFRobertaForQuestionAnswering"),ayr=o(" (RoBERTa model)"),nyr=l(),uE=a("li"),dTe=a("strong"),syr=o("roformer"),lyr=o(" \u2014 "),kJ=a("a"),iyr=o("TFRoFormerForQuestionAnswering"),dyr=o(" (RoFormer model)"),cyr=l(),bE=a("li"),cTe=a("strong"),fyr=o("xlm"),myr=o(" \u2014 "),SJ=a("a"),gyr=o("TFXLMForQuestionAnsweringSimple"),hyr=o(" (XLM model)"),pyr=l(),vE=a("li"),fTe=a("strong"),_yr=o("xlm-roberta"),uyr=o(" \u2014 "),RJ=a("a"),byr=o("TFXLMRobertaForQuestionAnswering"),vyr=o(" (XLM-RoBERTa model)"),Fyr=l(),FE=a("li"),mTe=a("strong"),Tyr=o("xlnet"),Myr=o(" \u2014 "),PJ=a("a"),Eyr=o("TFXLNetForQuestionAnsweringSimple"),Cyr=o(" (XLNet model)"),wyr=l(),F(TE.$$.fragment),Qje=l(),Ec=a("h2"),ME=a("a"),gTe=a("span"),F(F9.$$.fragment),Ayr=l(),hTe=a("span"),yyr=o("TFAutoModelForVision2Seq"),Hje=l(),dr=a("div"),F(T9.$$.fragment),Lyr=l(),Cc=a("p"),xyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),BJ=a("a"),$yr=o("from_pretrained()"),kyr=o(" class method or the "),IJ=a("a"),Syr=o("from_config()"),Ryr=o(` class
method.`),Pyr=l(),M9=a("p"),Byr=o("This class cannot be instantiated directly using "),pTe=a("code"),Iyr=o("__init__()"),Nyr=o(" (throws an error)."),qyr=l(),jt=a("div"),F(E9.$$.fragment),jyr=l(),_Te=a("p"),Dyr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Gyr=l(),wc=a("p"),Oyr=o(`Note:
Loading a model from its configuration file does `),uTe=a("strong"),Vyr=o("not"),Xyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NJ=a("a"),zyr=o("from_pretrained()"),Wyr=o(" to load the model weights."),Qyr=l(),F(EE.$$.fragment),Hyr=l(),Nr=a("div"),F(C9.$$.fragment),Uyr=l(),bTe=a("p"),Jyr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Yyr=l(),mn=a("p"),Kyr=o("The model class to instantiate is selected based on the "),vTe=a("code"),Zyr=o("model_type"),eLr=o(` property of the config object (either
passed as an argument or loaded from `),FTe=a("code"),oLr=o("pretrained_model_name_or_path"),rLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TTe=a("code"),tLr=o("pretrained_model_name_or_path"),aLr=o(":"),nLr=l(),MTe=a("ul"),CE=a("li"),ETe=a("strong"),sLr=o("vision-encoder-decoder"),lLr=o(" \u2014 "),qJ=a("a"),iLr=o("TFVisionEncoderDecoderModel"),dLr=o(" (Vision Encoder decoder model)"),cLr=l(),F(wE.$$.fragment),Uje=l(),Ac=a("h2"),AE=a("a"),CTe=a("span"),F(w9.$$.fragment),fLr=l(),wTe=a("span"),mLr=o("TFAutoModelForSpeechSeq2Seq"),Jje=l(),cr=a("div"),F(A9.$$.fragment),gLr=l(),yc=a("p"),hLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),jJ=a("a"),pLr=o("from_pretrained()"),_Lr=o(" class method or the "),DJ=a("a"),uLr=o("from_config()"),bLr=o(` class
method.`),vLr=l(),y9=a("p"),FLr=o("This class cannot be instantiated directly using "),ATe=a("code"),TLr=o("__init__()"),MLr=o(" (throws an error)."),ELr=l(),Dt=a("div"),F(L9.$$.fragment),CLr=l(),yTe=a("p"),wLr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),ALr=l(),Lc=a("p"),yLr=o(`Note:
Loading a model from its configuration file does `),LTe=a("strong"),LLr=o("not"),xLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GJ=a("a"),$Lr=o("from_pretrained()"),kLr=o(" to load the model weights."),SLr=l(),F(yE.$$.fragment),RLr=l(),qr=a("div"),F(x9.$$.fragment),PLr=l(),xTe=a("p"),BLr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),ILr=l(),gn=a("p"),NLr=o("The model class to instantiate is selected based on the "),$Te=a("code"),qLr=o("model_type"),jLr=o(` property of the config object (either
passed as an argument or loaded from `),kTe=a("code"),DLr=o("pretrained_model_name_or_path"),GLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),STe=a("code"),OLr=o("pretrained_model_name_or_path"),VLr=o(":"),XLr=l(),RTe=a("ul"),LE=a("li"),PTe=a("strong"),zLr=o("speech_to_text"),WLr=o(" \u2014 "),OJ=a("a"),QLr=o("TFSpeech2TextForConditionalGeneration"),HLr=o(" (Speech2Text model)"),ULr=l(),F(xE.$$.fragment),Yje=l(),xc=a("h2"),$E=a("a"),BTe=a("span"),F($9.$$.fragment),JLr=l(),ITe=a("span"),YLr=o("FlaxAutoModel"),Kje=l(),fr=a("div"),F(k9.$$.fragment),KLr=l(),$c=a("p"),ZLr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),VJ=a("a"),e8r=o("from_pretrained()"),o8r=o(" class method or the "),XJ=a("a"),r8r=o("from_config()"),t8r=o(` class
method.`),a8r=l(),S9=a("p"),n8r=o("This class cannot be instantiated directly using "),NTe=a("code"),s8r=o("__init__()"),l8r=o(" (throws an error)."),i8r=l(),Gt=a("div"),F(R9.$$.fragment),d8r=l(),qTe=a("p"),c8r=o("Instantiates one of the base model classes of the library from a configuration."),f8r=l(),kc=a("p"),m8r=o(`Note:
Loading a model from its configuration file does `),jTe=a("strong"),g8r=o("not"),h8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zJ=a("a"),p8r=o("from_pretrained()"),_8r=o(" to load the model weights."),u8r=l(),F(kE.$$.fragment),b8r=l(),jr=a("div"),F(P9.$$.fragment),v8r=l(),DTe=a("p"),F8r=o("Instantiate one of the base model classes of the library from a pretrained model."),T8r=l(),hn=a("p"),M8r=o("The model class to instantiate is selected based on the "),GTe=a("code"),E8r=o("model_type"),C8r=o(` property of the config object (either
passed as an argument or loaded from `),OTe=a("code"),w8r=o("pretrained_model_name_or_path"),A8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VTe=a("code"),y8r=o("pretrained_model_name_or_path"),L8r=o(":"),x8r=l(),re=a("ul"),SE=a("li"),XTe=a("strong"),$8r=o("albert"),k8r=o(" \u2014 "),WJ=a("a"),S8r=o("FlaxAlbertModel"),R8r=o(" (ALBERT model)"),P8r=l(),RE=a("li"),zTe=a("strong"),B8r=o("bart"),I8r=o(" \u2014 "),QJ=a("a"),N8r=o("FlaxBartModel"),q8r=o(" (BART model)"),j8r=l(),PE=a("li"),WTe=a("strong"),D8r=o("beit"),G8r=o(" \u2014 "),HJ=a("a"),O8r=o("FlaxBeitModel"),V8r=o(" (BEiT model)"),X8r=l(),BE=a("li"),QTe=a("strong"),z8r=o("bert"),W8r=o(" \u2014 "),UJ=a("a"),Q8r=o("FlaxBertModel"),H8r=o(" (BERT model)"),U8r=l(),IE=a("li"),HTe=a("strong"),J8r=o("big_bird"),Y8r=o(" \u2014 "),JJ=a("a"),K8r=o("FlaxBigBirdModel"),Z8r=o(" (BigBird model)"),e9r=l(),NE=a("li"),UTe=a("strong"),o9r=o("blenderbot"),r9r=o(" \u2014 "),YJ=a("a"),t9r=o("FlaxBlenderbotModel"),a9r=o(" (Blenderbot model)"),n9r=l(),qE=a("li"),JTe=a("strong"),s9r=o("blenderbot-small"),l9r=o(" \u2014 "),KJ=a("a"),i9r=o("FlaxBlenderbotSmallModel"),d9r=o(" (BlenderbotSmall model)"),c9r=l(),jE=a("li"),YTe=a("strong"),f9r=o("clip"),m9r=o(" \u2014 "),ZJ=a("a"),g9r=o("FlaxCLIPModel"),h9r=o(" (CLIP model)"),p9r=l(),DE=a("li"),KTe=a("strong"),_9r=o("distilbert"),u9r=o(" \u2014 "),eY=a("a"),b9r=o("FlaxDistilBertModel"),v9r=o(" (DistilBERT model)"),F9r=l(),GE=a("li"),ZTe=a("strong"),T9r=o("electra"),M9r=o(" \u2014 "),oY=a("a"),E9r=o("FlaxElectraModel"),C9r=o(" (ELECTRA model)"),w9r=l(),OE=a("li"),e7e=a("strong"),A9r=o("gpt2"),y9r=o(" \u2014 "),rY=a("a"),L9r=o("FlaxGPT2Model"),x9r=o(" (OpenAI GPT-2 model)"),$9r=l(),VE=a("li"),o7e=a("strong"),k9r=o("gpt_neo"),S9r=o(" \u2014 "),tY=a("a"),R9r=o("FlaxGPTNeoModel"),P9r=o(" (GPT Neo model)"),B9r=l(),XE=a("li"),r7e=a("strong"),I9r=o("gptj"),N9r=o(" \u2014 "),aY=a("a"),q9r=o("FlaxGPTJModel"),j9r=o(" (GPT-J model)"),D9r=l(),zE=a("li"),t7e=a("strong"),G9r=o("marian"),O9r=o(" \u2014 "),nY=a("a"),V9r=o("FlaxMarianModel"),X9r=o(" (Marian model)"),z9r=l(),WE=a("li"),a7e=a("strong"),W9r=o("mbart"),Q9r=o(" \u2014 "),sY=a("a"),H9r=o("FlaxMBartModel"),U9r=o(" (mBART model)"),J9r=l(),QE=a("li"),n7e=a("strong"),Y9r=o("mt5"),K9r=o(" \u2014 "),lY=a("a"),Z9r=o("FlaxMT5Model"),exr=o(" (mT5 model)"),oxr=l(),HE=a("li"),s7e=a("strong"),rxr=o("opt"),txr=o(" \u2014 "),iY=a("a"),axr=o("FlaxOPTModel"),nxr=o(" (OPT model)"),sxr=l(),UE=a("li"),l7e=a("strong"),lxr=o("pegasus"),ixr=o(" \u2014 "),dY=a("a"),dxr=o("FlaxPegasusModel"),cxr=o(" (Pegasus model)"),fxr=l(),JE=a("li"),i7e=a("strong"),mxr=o("roberta"),gxr=o(" \u2014 "),cY=a("a"),hxr=o("FlaxRobertaModel"),pxr=o(" (RoBERTa model)"),_xr=l(),YE=a("li"),d7e=a("strong"),uxr=o("roformer"),bxr=o(" \u2014 "),fY=a("a"),vxr=o("FlaxRoFormerModel"),Fxr=o(" (RoFormer model)"),Txr=l(),KE=a("li"),c7e=a("strong"),Mxr=o("t5"),Exr=o(" \u2014 "),mY=a("a"),Cxr=o("FlaxT5Model"),wxr=o(" (T5 model)"),Axr=l(),ZE=a("li"),f7e=a("strong"),yxr=o("vision-text-dual-encoder"),Lxr=o(" \u2014 "),gY=a("a"),xxr=o("FlaxVisionTextDualEncoderModel"),$xr=o(" (VisionTextDualEncoder model)"),kxr=l(),eC=a("li"),m7e=a("strong"),Sxr=o("vit"),Rxr=o(" \u2014 "),hY=a("a"),Pxr=o("FlaxViTModel"),Bxr=o(" (ViT model)"),Ixr=l(),oC=a("li"),g7e=a("strong"),Nxr=o("wav2vec2"),qxr=o(" \u2014 "),pY=a("a"),jxr=o("FlaxWav2Vec2Model"),Dxr=o(" (Wav2Vec2 model)"),Gxr=l(),rC=a("li"),h7e=a("strong"),Oxr=o("xglm"),Vxr=o(" \u2014 "),_Y=a("a"),Xxr=o("FlaxXGLMModel"),zxr=o(" (XGLM model)"),Wxr=l(),tC=a("li"),p7e=a("strong"),Qxr=o("xlm-roberta"),Hxr=o(" \u2014 "),uY=a("a"),Uxr=o("FlaxXLMRobertaModel"),Jxr=o(" (XLM-RoBERTa model)"),Yxr=l(),F(aC.$$.fragment),Zje=l(),Sc=a("h2"),nC=a("a"),_7e=a("span"),F(B9.$$.fragment),Kxr=l(),u7e=a("span"),Zxr=o("FlaxAutoModelForCausalLM"),eDe=l(),mr=a("div"),F(I9.$$.fragment),e$r=l(),Rc=a("p"),o$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),bY=a("a"),r$r=o("from_pretrained()"),t$r=o(" class method or the "),vY=a("a"),a$r=o("from_config()"),n$r=o(` class
method.`),s$r=l(),N9=a("p"),l$r=o("This class cannot be instantiated directly using "),b7e=a("code"),i$r=o("__init__()"),d$r=o(" (throws an error)."),c$r=l(),Ot=a("div"),F(q9.$$.fragment),f$r=l(),v7e=a("p"),m$r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),g$r=l(),Pc=a("p"),h$r=o(`Note:
Loading a model from its configuration file does `),F7e=a("strong"),p$r=o("not"),_$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FY=a("a"),u$r=o("from_pretrained()"),b$r=o(" to load the model weights."),v$r=l(),F(sC.$$.fragment),F$r=l(),Dr=a("div"),F(j9.$$.fragment),T$r=l(),T7e=a("p"),M$r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),E$r=l(),pn=a("p"),C$r=o("The model class to instantiate is selected based on the "),M7e=a("code"),w$r=o("model_type"),A$r=o(` property of the config object (either
passed as an argument or loaded from `),E7e=a("code"),y$r=o("pretrained_model_name_or_path"),L$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C7e=a("code"),x$r=o("pretrained_model_name_or_path"),$$r=o(":"),k$r=l(),Le=a("ul"),lC=a("li"),w7e=a("strong"),S$r=o("bart"),R$r=o(" \u2014 "),TY=a("a"),P$r=o("FlaxBartForCausalLM"),B$r=o(" (BART model)"),I$r=l(),iC=a("li"),A7e=a("strong"),N$r=o("bert"),q$r=o(" \u2014 "),MY=a("a"),j$r=o("FlaxBertForCausalLM"),D$r=o(" (BERT model)"),G$r=l(),dC=a("li"),y7e=a("strong"),O$r=o("big_bird"),V$r=o(" \u2014 "),EY=a("a"),X$r=o("FlaxBigBirdForCausalLM"),z$r=o(" (BigBird model)"),W$r=l(),cC=a("li"),L7e=a("strong"),Q$r=o("electra"),H$r=o(" \u2014 "),CY=a("a"),U$r=o("FlaxElectraForCausalLM"),J$r=o(" (ELECTRA model)"),Y$r=l(),fC=a("li"),x7e=a("strong"),K$r=o("gpt2"),Z$r=o(" \u2014 "),wY=a("a"),ekr=o("FlaxGPT2LMHeadModel"),okr=o(" (OpenAI GPT-2 model)"),rkr=l(),mC=a("li"),$7e=a("strong"),tkr=o("gpt_neo"),akr=o(" \u2014 "),AY=a("a"),nkr=o("FlaxGPTNeoForCausalLM"),skr=o(" (GPT Neo model)"),lkr=l(),gC=a("li"),k7e=a("strong"),ikr=o("gptj"),dkr=o(" \u2014 "),yY=a("a"),ckr=o("FlaxGPTJForCausalLM"),fkr=o(" (GPT-J model)"),mkr=l(),hC=a("li"),S7e=a("strong"),gkr=o("opt"),hkr=o(" \u2014 "),LY=a("a"),pkr=o("FlaxOPTForCausalLM"),_kr=o(" (OPT model)"),ukr=l(),pC=a("li"),R7e=a("strong"),bkr=o("roberta"),vkr=o(" \u2014 "),xY=a("a"),Fkr=o("FlaxRobertaForCausalLM"),Tkr=o(" (RoBERTa model)"),Mkr=l(),_C=a("li"),P7e=a("strong"),Ekr=o("xglm"),Ckr=o(" \u2014 "),$Y=a("a"),wkr=o("FlaxXGLMForCausalLM"),Akr=o(" (XGLM model)"),ykr=l(),F(uC.$$.fragment),oDe=l(),Bc=a("h2"),bC=a("a"),B7e=a("span"),F(D9.$$.fragment),Lkr=l(),I7e=a("span"),xkr=o("FlaxAutoModelForPreTraining"),rDe=l(),gr=a("div"),F(G9.$$.fragment),$kr=l(),Ic=a("p"),kkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),kY=a("a"),Skr=o("from_pretrained()"),Rkr=o(" class method or the "),SY=a("a"),Pkr=o("from_config()"),Bkr=o(` class
method.`),Ikr=l(),O9=a("p"),Nkr=o("This class cannot be instantiated directly using "),N7e=a("code"),qkr=o("__init__()"),jkr=o(" (throws an error)."),Dkr=l(),Vt=a("div"),F(V9.$$.fragment),Gkr=l(),q7e=a("p"),Okr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Vkr=l(),Nc=a("p"),Xkr=o(`Note:
Loading a model from its configuration file does `),j7e=a("strong"),zkr=o("not"),Wkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RY=a("a"),Qkr=o("from_pretrained()"),Hkr=o(" to load the model weights."),Ukr=l(),F(vC.$$.fragment),Jkr=l(),Gr=a("div"),F(X9.$$.fragment),Ykr=l(),D7e=a("p"),Kkr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Zkr=l(),_n=a("p"),eSr=o("The model class to instantiate is selected based on the "),G7e=a("code"),oSr=o("model_type"),rSr=o(` property of the config object (either
passed as an argument or loaded from `),O7e=a("code"),tSr=o("pretrained_model_name_or_path"),aSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V7e=a("code"),nSr=o("pretrained_model_name_or_path"),sSr=o(":"),lSr=l(),Ee=a("ul"),FC=a("li"),X7e=a("strong"),iSr=o("albert"),dSr=o(" \u2014 "),PY=a("a"),cSr=o("FlaxAlbertForPreTraining"),fSr=o(" (ALBERT model)"),mSr=l(),TC=a("li"),z7e=a("strong"),gSr=o("bart"),hSr=o(" \u2014 "),BY=a("a"),pSr=o("FlaxBartForConditionalGeneration"),_Sr=o(" (BART model)"),uSr=l(),MC=a("li"),W7e=a("strong"),bSr=o("bert"),vSr=o(" \u2014 "),IY=a("a"),FSr=o("FlaxBertForPreTraining"),TSr=o(" (BERT model)"),MSr=l(),EC=a("li"),Q7e=a("strong"),ESr=o("big_bird"),CSr=o(" \u2014 "),NY=a("a"),wSr=o("FlaxBigBirdForPreTraining"),ASr=o(" (BigBird model)"),ySr=l(),CC=a("li"),H7e=a("strong"),LSr=o("electra"),xSr=o(" \u2014 "),qY=a("a"),$Sr=o("FlaxElectraForPreTraining"),kSr=o(" (ELECTRA model)"),SSr=l(),wC=a("li"),U7e=a("strong"),RSr=o("mbart"),PSr=o(" \u2014 "),jY=a("a"),BSr=o("FlaxMBartForConditionalGeneration"),ISr=o(" (mBART model)"),NSr=l(),AC=a("li"),J7e=a("strong"),qSr=o("mt5"),jSr=o(" \u2014 "),DY=a("a"),DSr=o("FlaxMT5ForConditionalGeneration"),GSr=o(" (mT5 model)"),OSr=l(),yC=a("li"),Y7e=a("strong"),VSr=o("roberta"),XSr=o(" \u2014 "),GY=a("a"),zSr=o("FlaxRobertaForMaskedLM"),WSr=o(" (RoBERTa model)"),QSr=l(),LC=a("li"),K7e=a("strong"),HSr=o("roformer"),USr=o(" \u2014 "),OY=a("a"),JSr=o("FlaxRoFormerForMaskedLM"),YSr=o(" (RoFormer model)"),KSr=l(),xC=a("li"),Z7e=a("strong"),ZSr=o("t5"),eRr=o(" \u2014 "),VY=a("a"),oRr=o("FlaxT5ForConditionalGeneration"),rRr=o(" (T5 model)"),tRr=l(),$C=a("li"),eMe=a("strong"),aRr=o("wav2vec2"),nRr=o(" \u2014 "),XY=a("a"),sRr=o("FlaxWav2Vec2ForPreTraining"),lRr=o(" (Wav2Vec2 model)"),iRr=l(),kC=a("li"),oMe=a("strong"),dRr=o("xlm-roberta"),cRr=o(" \u2014 "),zY=a("a"),fRr=o("FlaxXLMRobertaForMaskedLM"),mRr=o(" (XLM-RoBERTa model)"),gRr=l(),F(SC.$$.fragment),tDe=l(),qc=a("h2"),RC=a("a"),rMe=a("span"),F(z9.$$.fragment),hRr=l(),tMe=a("span"),pRr=o("FlaxAutoModelForMaskedLM"),aDe=l(),hr=a("div"),F(W9.$$.fragment),_Rr=l(),jc=a("p"),uRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),WY=a("a"),bRr=o("from_pretrained()"),vRr=o(" class method or the "),QY=a("a"),FRr=o("from_config()"),TRr=o(` class
method.`),MRr=l(),Q9=a("p"),ERr=o("This class cannot be instantiated directly using "),aMe=a("code"),CRr=o("__init__()"),wRr=o(" (throws an error)."),ARr=l(),Xt=a("div"),F(H9.$$.fragment),yRr=l(),nMe=a("p"),LRr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),xRr=l(),Dc=a("p"),$Rr=o(`Note:
Loading a model from its configuration file does `),sMe=a("strong"),kRr=o("not"),SRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HY=a("a"),RRr=o("from_pretrained()"),PRr=o(" to load the model weights."),BRr=l(),F(PC.$$.fragment),IRr=l(),Or=a("div"),F(U9.$$.fragment),NRr=l(),lMe=a("p"),qRr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),jRr=l(),un=a("p"),DRr=o("The model class to instantiate is selected based on the "),iMe=a("code"),GRr=o("model_type"),ORr=o(` property of the config object (either
passed as an argument or loaded from `),dMe=a("code"),VRr=o("pretrained_model_name_or_path"),XRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cMe=a("code"),zRr=o("pretrained_model_name_or_path"),WRr=o(":"),QRr=l(),xe=a("ul"),BC=a("li"),fMe=a("strong"),HRr=o("albert"),URr=o(" \u2014 "),UY=a("a"),JRr=o("FlaxAlbertForMaskedLM"),YRr=o(" (ALBERT model)"),KRr=l(),IC=a("li"),mMe=a("strong"),ZRr=o("bart"),ePr=o(" \u2014 "),JY=a("a"),oPr=o("FlaxBartForConditionalGeneration"),rPr=o(" (BART model)"),tPr=l(),NC=a("li"),gMe=a("strong"),aPr=o("bert"),nPr=o(" \u2014 "),YY=a("a"),sPr=o("FlaxBertForMaskedLM"),lPr=o(" (BERT model)"),iPr=l(),qC=a("li"),hMe=a("strong"),dPr=o("big_bird"),cPr=o(" \u2014 "),KY=a("a"),fPr=o("FlaxBigBirdForMaskedLM"),mPr=o(" (BigBird model)"),gPr=l(),jC=a("li"),pMe=a("strong"),hPr=o("distilbert"),pPr=o(" \u2014 "),ZY=a("a"),_Pr=o("FlaxDistilBertForMaskedLM"),uPr=o(" (DistilBERT model)"),bPr=l(),DC=a("li"),_Me=a("strong"),vPr=o("electra"),FPr=o(" \u2014 "),eK=a("a"),TPr=o("FlaxElectraForMaskedLM"),MPr=o(" (ELECTRA model)"),EPr=l(),GC=a("li"),uMe=a("strong"),CPr=o("mbart"),wPr=o(" \u2014 "),oK=a("a"),APr=o("FlaxMBartForConditionalGeneration"),yPr=o(" (mBART model)"),LPr=l(),OC=a("li"),bMe=a("strong"),xPr=o("roberta"),$Pr=o(" \u2014 "),rK=a("a"),kPr=o("FlaxRobertaForMaskedLM"),SPr=o(" (RoBERTa model)"),RPr=l(),VC=a("li"),vMe=a("strong"),PPr=o("roformer"),BPr=o(" \u2014 "),tK=a("a"),IPr=o("FlaxRoFormerForMaskedLM"),NPr=o(" (RoFormer model)"),qPr=l(),XC=a("li"),FMe=a("strong"),jPr=o("xlm-roberta"),DPr=o(" \u2014 "),aK=a("a"),GPr=o("FlaxXLMRobertaForMaskedLM"),OPr=o(" (XLM-RoBERTa model)"),VPr=l(),F(zC.$$.fragment),nDe=l(),Gc=a("h2"),WC=a("a"),TMe=a("span"),F(J9.$$.fragment),XPr=l(),MMe=a("span"),zPr=o("FlaxAutoModelForSeq2SeqLM"),sDe=l(),pr=a("div"),F(Y9.$$.fragment),WPr=l(),Oc=a("p"),QPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),nK=a("a"),HPr=o("from_pretrained()"),UPr=o(" class method or the "),sK=a("a"),JPr=o("from_config()"),YPr=o(` class
method.`),KPr=l(),K9=a("p"),ZPr=o("This class cannot be instantiated directly using "),EMe=a("code"),eBr=o("__init__()"),oBr=o(" (throws an error)."),rBr=l(),zt=a("div"),F(Z9.$$.fragment),tBr=l(),CMe=a("p"),aBr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),nBr=l(),Vc=a("p"),sBr=o(`Note:
Loading a model from its configuration file does `),wMe=a("strong"),lBr=o("not"),iBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lK=a("a"),dBr=o("from_pretrained()"),cBr=o(" to load the model weights."),fBr=l(),F(QC.$$.fragment),mBr=l(),Vr=a("div"),F(ex.$$.fragment),gBr=l(),AMe=a("p"),hBr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),pBr=l(),bn=a("p"),_Br=o("The model class to instantiate is selected based on the "),yMe=a("code"),uBr=o("model_type"),bBr=o(` property of the config object (either
passed as an argument or loaded from `),LMe=a("code"),vBr=o("pretrained_model_name_or_path"),FBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xMe=a("code"),TBr=o("pretrained_model_name_or_path"),MBr=o(":"),EBr=l(),Pe=a("ul"),HC=a("li"),$Me=a("strong"),CBr=o("bart"),wBr=o(" \u2014 "),iK=a("a"),ABr=o("FlaxBartForConditionalGeneration"),yBr=o(" (BART model)"),LBr=l(),UC=a("li"),kMe=a("strong"),xBr=o("blenderbot"),$Br=o(" \u2014 "),dK=a("a"),kBr=o("FlaxBlenderbotForConditionalGeneration"),SBr=o(" (Blenderbot model)"),RBr=l(),JC=a("li"),SMe=a("strong"),PBr=o("blenderbot-small"),BBr=o(" \u2014 "),cK=a("a"),IBr=o("FlaxBlenderbotSmallForConditionalGeneration"),NBr=o(" (BlenderbotSmall model)"),qBr=l(),YC=a("li"),RMe=a("strong"),jBr=o("encoder-decoder"),DBr=o(" \u2014 "),fK=a("a"),GBr=o("FlaxEncoderDecoderModel"),OBr=o(" (Encoder decoder model)"),VBr=l(),KC=a("li"),PMe=a("strong"),XBr=o("marian"),zBr=o(" \u2014 "),mK=a("a"),WBr=o("FlaxMarianMTModel"),QBr=o(" (Marian model)"),HBr=l(),ZC=a("li"),BMe=a("strong"),UBr=o("mbart"),JBr=o(" \u2014 "),gK=a("a"),YBr=o("FlaxMBartForConditionalGeneration"),KBr=o(" (mBART model)"),ZBr=l(),e3=a("li"),IMe=a("strong"),eIr=o("mt5"),oIr=o(" \u2014 "),hK=a("a"),rIr=o("FlaxMT5ForConditionalGeneration"),tIr=o(" (mT5 model)"),aIr=l(),o3=a("li"),NMe=a("strong"),nIr=o("pegasus"),sIr=o(" \u2014 "),pK=a("a"),lIr=o("FlaxPegasusForConditionalGeneration"),iIr=o(" (Pegasus model)"),dIr=l(),r3=a("li"),qMe=a("strong"),cIr=o("t5"),fIr=o(" \u2014 "),_K=a("a"),mIr=o("FlaxT5ForConditionalGeneration"),gIr=o(" (T5 model)"),hIr=l(),F(t3.$$.fragment),lDe=l(),Xc=a("h2"),a3=a("a"),jMe=a("span"),F(ox.$$.fragment),pIr=l(),DMe=a("span"),_Ir=o("FlaxAutoModelForSequenceClassification"),iDe=l(),_r=a("div"),F(rx.$$.fragment),uIr=l(),zc=a("p"),bIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),uK=a("a"),vIr=o("from_pretrained()"),FIr=o(" class method or the "),bK=a("a"),TIr=o("from_config()"),MIr=o(` class
method.`),EIr=l(),tx=a("p"),CIr=o("This class cannot be instantiated directly using "),GMe=a("code"),wIr=o("__init__()"),AIr=o(" (throws an error)."),yIr=l(),Wt=a("div"),F(ax.$$.fragment),LIr=l(),OMe=a("p"),xIr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),$Ir=l(),Wc=a("p"),kIr=o(`Note:
Loading a model from its configuration file does `),VMe=a("strong"),SIr=o("not"),RIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vK=a("a"),PIr=o("from_pretrained()"),BIr=o(" to load the model weights."),IIr=l(),F(n3.$$.fragment),NIr=l(),Xr=a("div"),F(nx.$$.fragment),qIr=l(),XMe=a("p"),jIr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),DIr=l(),vn=a("p"),GIr=o("The model class to instantiate is selected based on the "),zMe=a("code"),OIr=o("model_type"),VIr=o(` property of the config object (either
passed as an argument or loaded from `),WMe=a("code"),XIr=o("pretrained_model_name_or_path"),zIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QMe=a("code"),WIr=o("pretrained_model_name_or_path"),QIr=o(":"),HIr=l(),$e=a("ul"),s3=a("li"),HMe=a("strong"),UIr=o("albert"),JIr=o(" \u2014 "),FK=a("a"),YIr=o("FlaxAlbertForSequenceClassification"),KIr=o(" (ALBERT model)"),ZIr=l(),l3=a("li"),UMe=a("strong"),eNr=o("bart"),oNr=o(" \u2014 "),TK=a("a"),rNr=o("FlaxBartForSequenceClassification"),tNr=o(" (BART model)"),aNr=l(),i3=a("li"),JMe=a("strong"),nNr=o("bert"),sNr=o(" \u2014 "),MK=a("a"),lNr=o("FlaxBertForSequenceClassification"),iNr=o(" (BERT model)"),dNr=l(),d3=a("li"),YMe=a("strong"),cNr=o("big_bird"),fNr=o(" \u2014 "),EK=a("a"),mNr=o("FlaxBigBirdForSequenceClassification"),gNr=o(" (BigBird model)"),hNr=l(),c3=a("li"),KMe=a("strong"),pNr=o("distilbert"),_Nr=o(" \u2014 "),CK=a("a"),uNr=o("FlaxDistilBertForSequenceClassification"),bNr=o(" (DistilBERT model)"),vNr=l(),f3=a("li"),ZMe=a("strong"),FNr=o("electra"),TNr=o(" \u2014 "),wK=a("a"),MNr=o("FlaxElectraForSequenceClassification"),ENr=o(" (ELECTRA model)"),CNr=l(),m3=a("li"),e4e=a("strong"),wNr=o("mbart"),ANr=o(" \u2014 "),AK=a("a"),yNr=o("FlaxMBartForSequenceClassification"),LNr=o(" (mBART model)"),xNr=l(),g3=a("li"),o4e=a("strong"),$Nr=o("roberta"),kNr=o(" \u2014 "),yK=a("a"),SNr=o("FlaxRobertaForSequenceClassification"),RNr=o(" (RoBERTa model)"),PNr=l(),h3=a("li"),r4e=a("strong"),BNr=o("roformer"),INr=o(" \u2014 "),LK=a("a"),NNr=o("FlaxRoFormerForSequenceClassification"),qNr=o(" (RoFormer model)"),jNr=l(),p3=a("li"),t4e=a("strong"),DNr=o("xlm-roberta"),GNr=o(" \u2014 "),xK=a("a"),ONr=o("FlaxXLMRobertaForSequenceClassification"),VNr=o(" (XLM-RoBERTa model)"),XNr=l(),F(_3.$$.fragment),dDe=l(),Qc=a("h2"),u3=a("a"),a4e=a("span"),F(sx.$$.fragment),zNr=l(),n4e=a("span"),WNr=o("FlaxAutoModelForQuestionAnswering"),cDe=l(),ur=a("div"),F(lx.$$.fragment),QNr=l(),Hc=a("p"),HNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),$K=a("a"),UNr=o("from_pretrained()"),JNr=o(" class method or the "),kK=a("a"),YNr=o("from_config()"),KNr=o(` class
method.`),ZNr=l(),ix=a("p"),eqr=o("This class cannot be instantiated directly using "),s4e=a("code"),oqr=o("__init__()"),rqr=o(" (throws an error)."),tqr=l(),Qt=a("div"),F(dx.$$.fragment),aqr=l(),l4e=a("p"),nqr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),sqr=l(),Uc=a("p"),lqr=o(`Note:
Loading a model from its configuration file does `),i4e=a("strong"),iqr=o("not"),dqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SK=a("a"),cqr=o("from_pretrained()"),fqr=o(" to load the model weights."),mqr=l(),F(b3.$$.fragment),gqr=l(),zr=a("div"),F(cx.$$.fragment),hqr=l(),d4e=a("p"),pqr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),_qr=l(),Fn=a("p"),uqr=o("The model class to instantiate is selected based on the "),c4e=a("code"),bqr=o("model_type"),vqr=o(` property of the config object (either
passed as an argument or loaded from `),f4e=a("code"),Fqr=o("pretrained_model_name_or_path"),Tqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m4e=a("code"),Mqr=o("pretrained_model_name_or_path"),Eqr=o(":"),Cqr=l(),ke=a("ul"),v3=a("li"),g4e=a("strong"),wqr=o("albert"),Aqr=o(" \u2014 "),RK=a("a"),yqr=o("FlaxAlbertForQuestionAnswering"),Lqr=o(" (ALBERT model)"),xqr=l(),F3=a("li"),h4e=a("strong"),$qr=o("bart"),kqr=o(" \u2014 "),PK=a("a"),Sqr=o("FlaxBartForQuestionAnswering"),Rqr=o(" (BART model)"),Pqr=l(),T3=a("li"),p4e=a("strong"),Bqr=o("bert"),Iqr=o(" \u2014 "),BK=a("a"),Nqr=o("FlaxBertForQuestionAnswering"),qqr=o(" (BERT model)"),jqr=l(),M3=a("li"),_4e=a("strong"),Dqr=o("big_bird"),Gqr=o(" \u2014 "),IK=a("a"),Oqr=o("FlaxBigBirdForQuestionAnswering"),Vqr=o(" (BigBird model)"),Xqr=l(),E3=a("li"),u4e=a("strong"),zqr=o("distilbert"),Wqr=o(" \u2014 "),NK=a("a"),Qqr=o("FlaxDistilBertForQuestionAnswering"),Hqr=o(" (DistilBERT model)"),Uqr=l(),C3=a("li"),b4e=a("strong"),Jqr=o("electra"),Yqr=o(" \u2014 "),qK=a("a"),Kqr=o("FlaxElectraForQuestionAnswering"),Zqr=o(" (ELECTRA model)"),ejr=l(),w3=a("li"),v4e=a("strong"),ojr=o("mbart"),rjr=o(" \u2014 "),jK=a("a"),tjr=o("FlaxMBartForQuestionAnswering"),ajr=o(" (mBART model)"),njr=l(),A3=a("li"),F4e=a("strong"),sjr=o("roberta"),ljr=o(" \u2014 "),DK=a("a"),ijr=o("FlaxRobertaForQuestionAnswering"),djr=o(" (RoBERTa model)"),cjr=l(),y3=a("li"),T4e=a("strong"),fjr=o("roformer"),mjr=o(" \u2014 "),GK=a("a"),gjr=o("FlaxRoFormerForQuestionAnswering"),hjr=o(" (RoFormer model)"),pjr=l(),L3=a("li"),M4e=a("strong"),_jr=o("xlm-roberta"),ujr=o(" \u2014 "),OK=a("a"),bjr=o("FlaxXLMRobertaForQuestionAnswering"),vjr=o(" (XLM-RoBERTa model)"),Fjr=l(),F(x3.$$.fragment),fDe=l(),Jc=a("h2"),$3=a("a"),E4e=a("span"),F(fx.$$.fragment),Tjr=l(),C4e=a("span"),Mjr=o("FlaxAutoModelForTokenClassification"),mDe=l(),br=a("div"),F(mx.$$.fragment),Ejr=l(),Yc=a("p"),Cjr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),VK=a("a"),wjr=o("from_pretrained()"),Ajr=o(" class method or the "),XK=a("a"),yjr=o("from_config()"),Ljr=o(` class
method.`),xjr=l(),gx=a("p"),$jr=o("This class cannot be instantiated directly using "),w4e=a("code"),kjr=o("__init__()"),Sjr=o(" (throws an error)."),Rjr=l(),Ht=a("div"),F(hx.$$.fragment),Pjr=l(),A4e=a("p"),Bjr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Ijr=l(),Kc=a("p"),Njr=o(`Note:
Loading a model from its configuration file does `),y4e=a("strong"),qjr=o("not"),jjr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zK=a("a"),Djr=o("from_pretrained()"),Gjr=o(" to load the model weights."),Ojr=l(),F(k3.$$.fragment),Vjr=l(),Wr=a("div"),F(px.$$.fragment),Xjr=l(),L4e=a("p"),zjr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Wjr=l(),Tn=a("p"),Qjr=o("The model class to instantiate is selected based on the "),x4e=a("code"),Hjr=o("model_type"),Ujr=o(` property of the config object (either
passed as an argument or loaded from `),$4e=a("code"),Jjr=o("pretrained_model_name_or_path"),Yjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k4e=a("code"),Kjr=o("pretrained_model_name_or_path"),Zjr=o(":"),eDr=l(),Ge=a("ul"),S3=a("li"),S4e=a("strong"),oDr=o("albert"),rDr=o(" \u2014 "),WK=a("a"),tDr=o("FlaxAlbertForTokenClassification"),aDr=o(" (ALBERT model)"),nDr=l(),R3=a("li"),R4e=a("strong"),sDr=o("bert"),lDr=o(" \u2014 "),QK=a("a"),iDr=o("FlaxBertForTokenClassification"),dDr=o(" (BERT model)"),cDr=l(),P3=a("li"),P4e=a("strong"),fDr=o("big_bird"),mDr=o(" \u2014 "),HK=a("a"),gDr=o("FlaxBigBirdForTokenClassification"),hDr=o(" (BigBird model)"),pDr=l(),B3=a("li"),B4e=a("strong"),_Dr=o("distilbert"),uDr=o(" \u2014 "),UK=a("a"),bDr=o("FlaxDistilBertForTokenClassification"),vDr=o(" (DistilBERT model)"),FDr=l(),I3=a("li"),I4e=a("strong"),TDr=o("electra"),MDr=o(" \u2014 "),JK=a("a"),EDr=o("FlaxElectraForTokenClassification"),CDr=o(" (ELECTRA model)"),wDr=l(),N3=a("li"),N4e=a("strong"),ADr=o("roberta"),yDr=o(" \u2014 "),YK=a("a"),LDr=o("FlaxRobertaForTokenClassification"),xDr=o(" (RoBERTa model)"),$Dr=l(),q3=a("li"),q4e=a("strong"),kDr=o("roformer"),SDr=o(" \u2014 "),KK=a("a"),RDr=o("FlaxRoFormerForTokenClassification"),PDr=o(" (RoFormer model)"),BDr=l(),j3=a("li"),j4e=a("strong"),IDr=o("xlm-roberta"),NDr=o(" \u2014 "),ZK=a("a"),qDr=o("FlaxXLMRobertaForTokenClassification"),jDr=o(" (XLM-RoBERTa model)"),DDr=l(),F(D3.$$.fragment),gDe=l(),Zc=a("h2"),G3=a("a"),D4e=a("span"),F(_x.$$.fragment),GDr=l(),G4e=a("span"),ODr=o("FlaxAutoModelForMultipleChoice"),hDe=l(),vr=a("div"),F(ux.$$.fragment),VDr=l(),ef=a("p"),XDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),eZ=a("a"),zDr=o("from_pretrained()"),WDr=o(" class method or the "),oZ=a("a"),QDr=o("from_config()"),HDr=o(` class
method.`),UDr=l(),bx=a("p"),JDr=o("This class cannot be instantiated directly using "),O4e=a("code"),YDr=o("__init__()"),KDr=o(" (throws an error)."),ZDr=l(),Ut=a("div"),F(vx.$$.fragment),eGr=l(),V4e=a("p"),oGr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),rGr=l(),of=a("p"),tGr=o(`Note:
Loading a model from its configuration file does `),X4e=a("strong"),aGr=o("not"),nGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rZ=a("a"),sGr=o("from_pretrained()"),lGr=o(" to load the model weights."),iGr=l(),F(O3.$$.fragment),dGr=l(),Qr=a("div"),F(Fx.$$.fragment),cGr=l(),z4e=a("p"),fGr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),mGr=l(),Mn=a("p"),gGr=o("The model class to instantiate is selected based on the "),W4e=a("code"),hGr=o("model_type"),pGr=o(` property of the config object (either
passed as an argument or loaded from `),Q4e=a("code"),_Gr=o("pretrained_model_name_or_path"),uGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H4e=a("code"),bGr=o("pretrained_model_name_or_path"),vGr=o(":"),FGr=l(),Oe=a("ul"),V3=a("li"),U4e=a("strong"),TGr=o("albert"),MGr=o(" \u2014 "),tZ=a("a"),EGr=o("FlaxAlbertForMultipleChoice"),CGr=o(" (ALBERT model)"),wGr=l(),X3=a("li"),J4e=a("strong"),AGr=o("bert"),yGr=o(" \u2014 "),aZ=a("a"),LGr=o("FlaxBertForMultipleChoice"),xGr=o(" (BERT model)"),$Gr=l(),z3=a("li"),Y4e=a("strong"),kGr=o("big_bird"),SGr=o(" \u2014 "),nZ=a("a"),RGr=o("FlaxBigBirdForMultipleChoice"),PGr=o(" (BigBird model)"),BGr=l(),W3=a("li"),K4e=a("strong"),IGr=o("distilbert"),NGr=o(" \u2014 "),sZ=a("a"),qGr=o("FlaxDistilBertForMultipleChoice"),jGr=o(" (DistilBERT model)"),DGr=l(),Q3=a("li"),Z4e=a("strong"),GGr=o("electra"),OGr=o(" \u2014 "),lZ=a("a"),VGr=o("FlaxElectraForMultipleChoice"),XGr=o(" (ELECTRA model)"),zGr=l(),H3=a("li"),eEe=a("strong"),WGr=o("roberta"),QGr=o(" \u2014 "),iZ=a("a"),HGr=o("FlaxRobertaForMultipleChoice"),UGr=o(" (RoBERTa model)"),JGr=l(),U3=a("li"),oEe=a("strong"),YGr=o("roformer"),KGr=o(" \u2014 "),dZ=a("a"),ZGr=o("FlaxRoFormerForMultipleChoice"),eOr=o(" (RoFormer model)"),oOr=l(),J3=a("li"),rEe=a("strong"),rOr=o("xlm-roberta"),tOr=o(" \u2014 "),cZ=a("a"),aOr=o("FlaxXLMRobertaForMultipleChoice"),nOr=o(" (XLM-RoBERTa model)"),sOr=l(),F(Y3.$$.fragment),pDe=l(),rf=a("h2"),K3=a("a"),tEe=a("span"),F(Tx.$$.fragment),lOr=l(),aEe=a("span"),iOr=o("FlaxAutoModelForNextSentencePrediction"),_De=l(),Fr=a("div"),F(Mx.$$.fragment),dOr=l(),tf=a("p"),cOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),fZ=a("a"),fOr=o("from_pretrained()"),mOr=o(" class method or the "),mZ=a("a"),gOr=o("from_config()"),hOr=o(` class
method.`),pOr=l(),Ex=a("p"),_Or=o("This class cannot be instantiated directly using "),nEe=a("code"),uOr=o("__init__()"),bOr=o(" (throws an error)."),vOr=l(),Jt=a("div"),F(Cx.$$.fragment),FOr=l(),sEe=a("p"),TOr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),MOr=l(),af=a("p"),EOr=o(`Note:
Loading a model from its configuration file does `),lEe=a("strong"),COr=o("not"),wOr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gZ=a("a"),AOr=o("from_pretrained()"),yOr=o(" to load the model weights."),LOr=l(),F(Z3.$$.fragment),xOr=l(),Hr=a("div"),F(wx.$$.fragment),$Or=l(),iEe=a("p"),kOr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),SOr=l(),En=a("p"),ROr=o("The model class to instantiate is selected based on the "),dEe=a("code"),POr=o("model_type"),BOr=o(` property of the config object (either
passed as an argument or loaded from `),cEe=a("code"),IOr=o("pretrained_model_name_or_path"),NOr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fEe=a("code"),qOr=o("pretrained_model_name_or_path"),jOr=o(":"),DOr=l(),mEe=a("ul"),ew=a("li"),gEe=a("strong"),GOr=o("bert"),OOr=o(" \u2014 "),hZ=a("a"),VOr=o("FlaxBertForNextSentencePrediction"),XOr=o(" (BERT model)"),zOr=l(),F(ow.$$.fragment),uDe=l(),nf=a("h2"),rw=a("a"),hEe=a("span"),F(Ax.$$.fragment),WOr=l(),pEe=a("span"),QOr=o("FlaxAutoModelForImageClassification"),bDe=l(),Tr=a("div"),F(yx.$$.fragment),HOr=l(),sf=a("p"),UOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),pZ=a("a"),JOr=o("from_pretrained()"),YOr=o(" class method or the "),_Z=a("a"),KOr=o("from_config()"),ZOr=o(` class
method.`),eVr=l(),Lx=a("p"),oVr=o("This class cannot be instantiated directly using "),_Ee=a("code"),rVr=o("__init__()"),tVr=o(" (throws an error)."),aVr=l(),Yt=a("div"),F(xx.$$.fragment),nVr=l(),uEe=a("p"),sVr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),lVr=l(),lf=a("p"),iVr=o(`Note:
Loading a model from its configuration file does `),bEe=a("strong"),dVr=o("not"),cVr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uZ=a("a"),fVr=o("from_pretrained()"),mVr=o(" to load the model weights."),gVr=l(),F(tw.$$.fragment),hVr=l(),Ur=a("div"),F($x.$$.fragment),pVr=l(),vEe=a("p"),_Vr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),uVr=l(),Cn=a("p"),bVr=o("The model class to instantiate is selected based on the "),FEe=a("code"),vVr=o("model_type"),FVr=o(` property of the config object (either
passed as an argument or loaded from `),TEe=a("code"),TVr=o("pretrained_model_name_or_path"),MVr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MEe=a("code"),EVr=o("pretrained_model_name_or_path"),CVr=o(":"),wVr=l(),kx=a("ul"),aw=a("li"),EEe=a("strong"),AVr=o("beit"),yVr=o(" \u2014 "),bZ=a("a"),LVr=o("FlaxBeitForImageClassification"),xVr=o(" (BEiT model)"),$Vr=l(),nw=a("li"),CEe=a("strong"),kVr=o("vit"),SVr=o(" \u2014 "),vZ=a("a"),RVr=o("FlaxViTForImageClassification"),PVr=o(" (ViT model)"),BVr=l(),F(sw.$$.fragment),vDe=l(),df=a("h2"),lw=a("a"),wEe=a("span"),F(Sx.$$.fragment),IVr=l(),AEe=a("span"),NVr=o("FlaxAutoModelForVision2Seq"),FDe=l(),Mr=a("div"),F(Rx.$$.fragment),qVr=l(),cf=a("p"),jVr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),FZ=a("a"),DVr=o("from_pretrained()"),GVr=o(" class method or the "),TZ=a("a"),OVr=o("from_config()"),VVr=o(` class
method.`),XVr=l(),Px=a("p"),zVr=o("This class cannot be instantiated directly using "),yEe=a("code"),WVr=o("__init__()"),QVr=o(" (throws an error)."),HVr=l(),Kt=a("div"),F(Bx.$$.fragment),UVr=l(),LEe=a("p"),JVr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),YVr=l(),ff=a("p"),KVr=o(`Note:
Loading a model from its configuration file does `),xEe=a("strong"),ZVr=o("not"),eXr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MZ=a("a"),oXr=o("from_pretrained()"),rXr=o(" to load the model weights."),tXr=l(),F(iw.$$.fragment),aXr=l(),Jr=a("div"),F(Ix.$$.fragment),nXr=l(),$Ee=a("p"),sXr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),lXr=l(),wn=a("p"),iXr=o("The model class to instantiate is selected based on the "),kEe=a("code"),dXr=o("model_type"),cXr=o(` property of the config object (either
passed as an argument or loaded from `),SEe=a("code"),fXr=o("pretrained_model_name_or_path"),mXr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),REe=a("code"),gXr=o("pretrained_model_name_or_path"),hXr=o(":"),pXr=l(),PEe=a("ul"),dw=a("li"),BEe=a("strong"),_Xr=o("vision-encoder-decoder"),uXr=o(" \u2014 "),EZ=a("a"),bXr=o("FlaxVisionEncoderDecoderModel"),vXr=o(" (Vision Encoder decoder model)"),FXr=l(),F(cw.$$.fragment),this.h()},l(f){const u=ckt('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var Nx=s(p);m=n(Nx,"A",{id:!0,class:!0,href:!0});var IEe=s(m);_=n(IEe,"SPAN",{});var NEe=s(_);T(d.$$.fragment,NEe),NEe.forEach(t),IEe.forEach(t),h=i(Nx),Mo=n(Nx,"SPAN",{});var qEe=s(Mo);fi=r(qEe,"Auto Classes"),qEe.forEach(t),Nx.forEach(t),pf=i(f),rt=n(f,"P",{});var qx=s(rt);mi=r(qx,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),gi=n(qx,"CODE",{});var jEe=s(gi);LA=r(jEe,"from_pretrained()"),jEe.forEach(t),_f=r(qx,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),qx.forEach(t),De=i(f),We=n(f,"P",{});var An=s(We);hi=r(An,"Instantiating one of "),yn=n(An,"A",{href:!0});var DEe=s(yn);xA=r(DEe,"AutoConfig"),DEe.forEach(t),Ln=r(An,", "),xn=n(An,"A",{href:!0});var GEe=s(xn);$A=r(GEe,"AutoModel"),GEe.forEach(t),pi=r(An,`, and
`),$n=n(An,"A",{href:!0});var OEe=s($n);kA=r(OEe,"AutoTokenizer"),OEe.forEach(t),_i=r(An," will directly create a class of the relevant architecture. For instance"),An.forEach(t),uf=i(f),T(Ca.$$.fragment,f),Qe=i(f),Ae=n(f,"P",{});var jx=s(Ae);J$=r(jx,"will create a model that is an instance of "),ui=n(jx,"A",{href:!0});var VEe=s(ui);Y$=r(VEe,"BertModel"),VEe.forEach(t),K$=r(jx,"."),jx.forEach(t),Eo=i(f),wa=n(f,"P",{});var Dx=s(wa);Z$=r(Dx,"There is one class of "),bf=n(Dx,"CODE",{});var XEe=s(bf);ek=r(XEe,"AutoModel"),XEe.forEach(t),xOe=r(Dx," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Dx.forEach(t),bqe=i(f),bi=n(f,"H2",{class:!0});var Gx=s(bi);vf=n(Gx,"A",{id:!0,class:!0,href:!0});var zEe=s(vf);_oe=n(zEe,"SPAN",{});var WEe=s(_oe);T(SA.$$.fragment,WEe),WEe.forEach(t),zEe.forEach(t),$Oe=i(Gx),uoe=n(Gx,"SPAN",{});var QEe=s(uoe);kOe=r(QEe,"Extending the Auto Classes"),QEe.forEach(t),Gx.forEach(t),vqe=i(f),kn=n(f,"P",{});var mf=s(kn);SOe=r(mf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),boe=n(mf,"CODE",{});var HEe=s(boe);ROe=r(HEe,"NewModel"),HEe.forEach(t),POe=r(mf,", make sure you have a "),voe=n(mf,"CODE",{});var UEe=s(voe);BOe=r(UEe,"NewModelConfig"),UEe.forEach(t),IOe=r(mf,` then you can add those to the auto
classes like this:`),mf.forEach(t),Fqe=i(f),T(RA.$$.fragment,f),Tqe=i(f),ok=n(f,"P",{});var JEe=s(ok);NOe=r(JEe,"You will then be able to use the auto classes like you would usually do!"),JEe.forEach(t),Mqe=i(f),T(Ff.$$.fragment,f),Eqe=i(f),vi=n(f,"H2",{class:!0});var Ox=s(vi);Tf=n(Ox,"A",{id:!0,class:!0,href:!0});var YEe=s(Tf);Foe=n(YEe,"SPAN",{});var KEe=s(Foe);T(PA.$$.fragment,KEe),KEe.forEach(t),YEe.forEach(t),qOe=i(Ox),Toe=n(Ox,"SPAN",{});var ZEe=s(Toe);jOe=r(ZEe,"AutoConfig"),ZEe.forEach(t),Ox.forEach(t),Cqe=i(f),Co=n(f,"DIV",{class:!0});var et=s(Co);T(BA.$$.fragment,et),DOe=i(et),IA=n(et,"P",{});var Vx=s(IA);GOe=r(Vx,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),rk=n(Vx,"A",{href:!0});var eCe=s(rk);OOe=r(eCe,"from_pretrained()"),eCe.forEach(t),VOe=r(Vx," class method."),Vx.forEach(t),XOe=i(et),NA=n(et,"P",{});var Xx=s(NA);zOe=r(Xx,"This class cannot be instantiated directly using "),Moe=n(Xx,"CODE",{});var oCe=s(Moe);WOe=r(oCe,"__init__()"),oCe.forEach(t),QOe=r(Xx," (throws an error)."),Xx.forEach(t),HOe=i(et),Er=n(et,"DIV",{class:!0});var ot=s(Er);T(qA.$$.fragment,ot),UOe=i(ot),Eoe=n(ot,"P",{});var rCe=s(Eoe);JOe=r(rCe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),rCe.forEach(t),YOe=i(ot),Fi=n(ot,"P",{});var gf=s(Fi);KOe=r(gf,"The configuration class to instantiate is selected based on the "),Coe=n(gf,"CODE",{});var tCe=s(Coe);ZOe=r(tCe,"model_type"),tCe.forEach(t),eVe=r(gf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),woe=n(gf,"CODE",{});var aCe=s(woe);oVe=r(aCe,"pretrained_model_name_or_path"),aCe.forEach(t),rVe=r(gf,":"),gf.forEach(t),tVe=i(ot),A=n(ot,"UL",{});var y=s(A);Mf=n(y,"LI",{});var fw=s(Mf);Aoe=n(fw,"STRONG",{});var nCe=s(Aoe);aVe=r(nCe,"albert"),nCe.forEach(t),nVe=r(fw," \u2014 "),tk=n(fw,"A",{href:!0});var sCe=s(tk);sVe=r(sCe,"AlbertConfig"),sCe.forEach(t),lVe=r(fw," (ALBERT model)"),fw.forEach(t),iVe=i(y),Ef=n(y,"LI",{});var mw=s(Ef);yoe=n(mw,"STRONG",{});var lCe=s(yoe);dVe=r(lCe,"bart"),lCe.forEach(t),cVe=r(mw," \u2014 "),ak=n(mw,"A",{href:!0});var iCe=s(ak);fVe=r(iCe,"BartConfig"),iCe.forEach(t),mVe=r(mw," (BART model)"),mw.forEach(t),gVe=i(y),Cf=n(y,"LI",{});var gw=s(Cf);Loe=n(gw,"STRONG",{});var dCe=s(Loe);hVe=r(dCe,"beit"),dCe.forEach(t),pVe=r(gw," \u2014 "),nk=n(gw,"A",{href:!0});var cCe=s(nk);_Ve=r(cCe,"BeitConfig"),cCe.forEach(t),uVe=r(gw," (BEiT model)"),gw.forEach(t),bVe=i(y),wf=n(y,"LI",{});var hw=s(wf);xoe=n(hw,"STRONG",{});var fCe=s(xoe);vVe=r(fCe,"bert"),fCe.forEach(t),FVe=r(hw," \u2014 "),sk=n(hw,"A",{href:!0});var mCe=s(sk);TVe=r(mCe,"BertConfig"),mCe.forEach(t),MVe=r(hw," (BERT model)"),hw.forEach(t),EVe=i(y),Af=n(y,"LI",{});var pw=s(Af);$oe=n(pw,"STRONG",{});var gCe=s($oe);CVe=r(gCe,"bert-generation"),gCe.forEach(t),wVe=r(pw," \u2014 "),lk=n(pw,"A",{href:!0});var hCe=s(lk);AVe=r(hCe,"BertGenerationConfig"),hCe.forEach(t),yVe=r(pw," (Bert Generation model)"),pw.forEach(t),LVe=i(y),yf=n(y,"LI",{});var _w=s(yf);koe=n(_w,"STRONG",{});var pCe=s(koe);xVe=r(pCe,"big_bird"),pCe.forEach(t),$Ve=r(_w," \u2014 "),ik=n(_w,"A",{href:!0});var _Ce=s(ik);kVe=r(_Ce,"BigBirdConfig"),_Ce.forEach(t),SVe=r(_w," (BigBird model)"),_w.forEach(t),RVe=i(y),Lf=n(y,"LI",{});var uw=s(Lf);Soe=n(uw,"STRONG",{});var uCe=s(Soe);PVe=r(uCe,"bigbird_pegasus"),uCe.forEach(t),BVe=r(uw," \u2014 "),dk=n(uw,"A",{href:!0});var bCe=s(dk);IVe=r(bCe,"BigBirdPegasusConfig"),bCe.forEach(t),NVe=r(uw," (BigBirdPegasus model)"),uw.forEach(t),qVe=i(y),xf=n(y,"LI",{});var bw=s(xf);Roe=n(bw,"STRONG",{});var vCe=s(Roe);jVe=r(vCe,"blenderbot"),vCe.forEach(t),DVe=r(bw," \u2014 "),ck=n(bw,"A",{href:!0});var FCe=s(ck);GVe=r(FCe,"BlenderbotConfig"),FCe.forEach(t),OVe=r(bw," (Blenderbot model)"),bw.forEach(t),VVe=i(y),$f=n(y,"LI",{});var vw=s($f);Poe=n(vw,"STRONG",{});var TCe=s(Poe);XVe=r(TCe,"blenderbot-small"),TCe.forEach(t),zVe=r(vw," \u2014 "),fk=n(vw,"A",{href:!0});var MCe=s(fk);WVe=r(MCe,"BlenderbotSmallConfig"),MCe.forEach(t),QVe=r(vw," (BlenderbotSmall model)"),vw.forEach(t),HVe=i(y),kf=n(y,"LI",{});var Fw=s(kf);Boe=n(Fw,"STRONG",{});var ECe=s(Boe);UVe=r(ECe,"camembert"),ECe.forEach(t),JVe=r(Fw," \u2014 "),mk=n(Fw,"A",{href:!0});var CCe=s(mk);YVe=r(CCe,"CamembertConfig"),CCe.forEach(t),KVe=r(Fw," (CamemBERT model)"),Fw.forEach(t),ZVe=i(y),Sf=n(y,"LI",{});var Tw=s(Sf);Ioe=n(Tw,"STRONG",{});var wCe=s(Ioe);eXe=r(wCe,"canine"),wCe.forEach(t),oXe=r(Tw," \u2014 "),gk=n(Tw,"A",{href:!0});var ACe=s(gk);rXe=r(ACe,"CanineConfig"),ACe.forEach(t),tXe=r(Tw," (Canine model)"),Tw.forEach(t),aXe=i(y),Rf=n(y,"LI",{});var Mw=s(Rf);Noe=n(Mw,"STRONG",{});var yCe=s(Noe);nXe=r(yCe,"clip"),yCe.forEach(t),sXe=r(Mw," \u2014 "),hk=n(Mw,"A",{href:!0});var LCe=s(hk);lXe=r(LCe,"CLIPConfig"),LCe.forEach(t),iXe=r(Mw," (CLIP model)"),Mw.forEach(t),dXe=i(y),Pf=n(y,"LI",{});var Ew=s(Pf);qoe=n(Ew,"STRONG",{});var xCe=s(qoe);cXe=r(xCe,"convbert"),xCe.forEach(t),fXe=r(Ew," \u2014 "),pk=n(Ew,"A",{href:!0});var $Ce=s(pk);mXe=r($Ce,"ConvBertConfig"),$Ce.forEach(t),gXe=r(Ew," (ConvBERT model)"),Ew.forEach(t),hXe=i(y),Bf=n(y,"LI",{});var Cw=s(Bf);joe=n(Cw,"STRONG",{});var kCe=s(joe);pXe=r(kCe,"convnext"),kCe.forEach(t),_Xe=r(Cw," \u2014 "),_k=n(Cw,"A",{href:!0});var SCe=s(_k);uXe=r(SCe,"ConvNextConfig"),SCe.forEach(t),bXe=r(Cw," (ConvNext model)"),Cw.forEach(t),vXe=i(y),If=n(y,"LI",{});var ww=s(If);Doe=n(ww,"STRONG",{});var RCe=s(Doe);FXe=r(RCe,"ctrl"),RCe.forEach(t),TXe=r(ww," \u2014 "),uk=n(ww,"A",{href:!0});var PCe=s(uk);MXe=r(PCe,"CTRLConfig"),PCe.forEach(t),EXe=r(ww," (CTRL model)"),ww.forEach(t),CXe=i(y),Nf=n(y,"LI",{});var Aw=s(Nf);Goe=n(Aw,"STRONG",{});var BCe=s(Goe);wXe=r(BCe,"cvt"),BCe.forEach(t),AXe=r(Aw," \u2014 "),bk=n(Aw,"A",{href:!0});var ICe=s(bk);yXe=r(ICe,"CvtConfig"),ICe.forEach(t),LXe=r(Aw," (CvT model)"),Aw.forEach(t),xXe=i(y),qf=n(y,"LI",{});var yw=s(qf);Ooe=n(yw,"STRONG",{});var NCe=s(Ooe);$Xe=r(NCe,"data2vec-audio"),NCe.forEach(t),kXe=r(yw," \u2014 "),vk=n(yw,"A",{href:!0});var qCe=s(vk);SXe=r(qCe,"Data2VecAudioConfig"),qCe.forEach(t),RXe=r(yw," (Data2VecAudio model)"),yw.forEach(t),PXe=i(y),jf=n(y,"LI",{});var Lw=s(jf);Voe=n(Lw,"STRONG",{});var jCe=s(Voe);BXe=r(jCe,"data2vec-text"),jCe.forEach(t),IXe=r(Lw," \u2014 "),Fk=n(Lw,"A",{href:!0});var DCe=s(Fk);NXe=r(DCe,"Data2VecTextConfig"),DCe.forEach(t),qXe=r(Lw," (Data2VecText model)"),Lw.forEach(t),jXe=i(y),Df=n(y,"LI",{});var xw=s(Df);Xoe=n(xw,"STRONG",{});var GCe=s(Xoe);DXe=r(GCe,"data2vec-vision"),GCe.forEach(t),GXe=r(xw," \u2014 "),Tk=n(xw,"A",{href:!0});var OCe=s(Tk);OXe=r(OCe,"Data2VecVisionConfig"),OCe.forEach(t),VXe=r(xw," (Data2VecVision model)"),xw.forEach(t),XXe=i(y),Gf=n(y,"LI",{});var $w=s(Gf);zoe=n($w,"STRONG",{});var VCe=s(zoe);zXe=r(VCe,"deberta"),VCe.forEach(t),WXe=r($w," \u2014 "),Mk=n($w,"A",{href:!0});var XCe=s(Mk);QXe=r(XCe,"DebertaConfig"),XCe.forEach(t),HXe=r($w," (DeBERTa model)"),$w.forEach(t),UXe=i(y),Of=n(y,"LI",{});var kw=s(Of);Woe=n(kw,"STRONG",{});var zCe=s(Woe);JXe=r(zCe,"deberta-v2"),zCe.forEach(t),YXe=r(kw," \u2014 "),Ek=n(kw,"A",{href:!0});var WCe=s(Ek);KXe=r(WCe,"DebertaV2Config"),WCe.forEach(t),ZXe=r(kw," (DeBERTa-v2 model)"),kw.forEach(t),eze=i(y),Vf=n(y,"LI",{});var Sw=s(Vf);Qoe=n(Sw,"STRONG",{});var QCe=s(Qoe);oze=r(QCe,"decision_transformer"),QCe.forEach(t),rze=r(Sw," \u2014 "),Ck=n(Sw,"A",{href:!0});var HCe=s(Ck);tze=r(HCe,"DecisionTransformerConfig"),HCe.forEach(t),aze=r(Sw," (Decision Transformer model)"),Sw.forEach(t),nze=i(y),Xf=n(y,"LI",{});var Rw=s(Xf);Hoe=n(Rw,"STRONG",{});var UCe=s(Hoe);sze=r(UCe,"deit"),UCe.forEach(t),lze=r(Rw," \u2014 "),wk=n(Rw,"A",{href:!0});var MXr=s(wk);ize=r(MXr,"DeiTConfig"),MXr.forEach(t),dze=r(Rw," (DeiT model)"),Rw.forEach(t),cze=i(y),zf=n(y,"LI",{});var JCe=s(zf);Uoe=n(JCe,"STRONG",{});var EXr=s(Uoe);fze=r(EXr,"detr"),EXr.forEach(t),mze=r(JCe," \u2014 "),Ak=n(JCe,"A",{href:!0});var CXr=s(Ak);gze=r(CXr,"DetrConfig"),CXr.forEach(t),hze=r(JCe," (DETR model)"),JCe.forEach(t),pze=i(y),Wf=n(y,"LI",{});var YCe=s(Wf);Joe=n(YCe,"STRONG",{});var wXr=s(Joe);_ze=r(wXr,"distilbert"),wXr.forEach(t),uze=r(YCe," \u2014 "),yk=n(YCe,"A",{href:!0});var AXr=s(yk);bze=r(AXr,"DistilBertConfig"),AXr.forEach(t),vze=r(YCe," (DistilBERT model)"),YCe.forEach(t),Fze=i(y),Qf=n(y,"LI",{});var KCe=s(Qf);Yoe=n(KCe,"STRONG",{});var yXr=s(Yoe);Tze=r(yXr,"dpr"),yXr.forEach(t),Mze=r(KCe," \u2014 "),Lk=n(KCe,"A",{href:!0});var LXr=s(Lk);Eze=r(LXr,"DPRConfig"),LXr.forEach(t),Cze=r(KCe," (DPR model)"),KCe.forEach(t),wze=i(y),Hf=n(y,"LI",{});var ZCe=s(Hf);Koe=n(ZCe,"STRONG",{});var xXr=s(Koe);Aze=r(xXr,"dpt"),xXr.forEach(t),yze=r(ZCe," \u2014 "),xk=n(ZCe,"A",{href:!0});var $Xr=s(xk);Lze=r($Xr,"DPTConfig"),$Xr.forEach(t),xze=r(ZCe," (DPT model)"),ZCe.forEach(t),$ze=i(y),Uf=n(y,"LI",{});var e3e=s(Uf);Zoe=n(e3e,"STRONG",{});var kXr=s(Zoe);kze=r(kXr,"electra"),kXr.forEach(t),Sze=r(e3e," \u2014 "),$k=n(e3e,"A",{href:!0});var SXr=s($k);Rze=r(SXr,"ElectraConfig"),SXr.forEach(t),Pze=r(e3e," (ELECTRA model)"),e3e.forEach(t),Bze=i(y),Jf=n(y,"LI",{});var o3e=s(Jf);ere=n(o3e,"STRONG",{});var RXr=s(ere);Ize=r(RXr,"encoder-decoder"),RXr.forEach(t),Nze=r(o3e," \u2014 "),kk=n(o3e,"A",{href:!0});var PXr=s(kk);qze=r(PXr,"EncoderDecoderConfig"),PXr.forEach(t),jze=r(o3e," (Encoder decoder model)"),o3e.forEach(t),Dze=i(y),Yf=n(y,"LI",{});var r3e=s(Yf);ore=n(r3e,"STRONG",{});var BXr=s(ore);Gze=r(BXr,"flaubert"),BXr.forEach(t),Oze=r(r3e," \u2014 "),Sk=n(r3e,"A",{href:!0});var IXr=s(Sk);Vze=r(IXr,"FlaubertConfig"),IXr.forEach(t),Xze=r(r3e," (FlauBERT model)"),r3e.forEach(t),zze=i(y),Kf=n(y,"LI",{});var t3e=s(Kf);rre=n(t3e,"STRONG",{});var NXr=s(rre);Wze=r(NXr,"flava"),NXr.forEach(t),Qze=r(t3e," \u2014 "),Rk=n(t3e,"A",{href:!0});var qXr=s(Rk);Hze=r(qXr,"FlavaConfig"),qXr.forEach(t),Uze=r(t3e," (Flava model)"),t3e.forEach(t),Jze=i(y),Zf=n(y,"LI",{});var a3e=s(Zf);tre=n(a3e,"STRONG",{});var jXr=s(tre);Yze=r(jXr,"fnet"),jXr.forEach(t),Kze=r(a3e," \u2014 "),Pk=n(a3e,"A",{href:!0});var DXr=s(Pk);Zze=r(DXr,"FNetConfig"),DXr.forEach(t),eWe=r(a3e," (FNet model)"),a3e.forEach(t),oWe=i(y),em=n(y,"LI",{});var n3e=s(em);are=n(n3e,"STRONG",{});var GXr=s(are);rWe=r(GXr,"fsmt"),GXr.forEach(t),tWe=r(n3e," \u2014 "),Bk=n(n3e,"A",{href:!0});var OXr=s(Bk);aWe=r(OXr,"FSMTConfig"),OXr.forEach(t),nWe=r(n3e," (FairSeq Machine-Translation model)"),n3e.forEach(t),sWe=i(y),om=n(y,"LI",{});var s3e=s(om);nre=n(s3e,"STRONG",{});var VXr=s(nre);lWe=r(VXr,"funnel"),VXr.forEach(t),iWe=r(s3e," \u2014 "),Ik=n(s3e,"A",{href:!0});var XXr=s(Ik);dWe=r(XXr,"FunnelConfig"),XXr.forEach(t),cWe=r(s3e," (Funnel Transformer model)"),s3e.forEach(t),fWe=i(y),rm=n(y,"LI",{});var l3e=s(rm);sre=n(l3e,"STRONG",{});var zXr=s(sre);mWe=r(zXr,"glpn"),zXr.forEach(t),gWe=r(l3e," \u2014 "),Nk=n(l3e,"A",{href:!0});var WXr=s(Nk);hWe=r(WXr,"GLPNConfig"),WXr.forEach(t),pWe=r(l3e," (GLPN model)"),l3e.forEach(t),_We=i(y),tm=n(y,"LI",{});var i3e=s(tm);lre=n(i3e,"STRONG",{});var QXr=s(lre);uWe=r(QXr,"gpt2"),QXr.forEach(t),bWe=r(i3e," \u2014 "),qk=n(i3e,"A",{href:!0});var HXr=s(qk);vWe=r(HXr,"GPT2Config"),HXr.forEach(t),FWe=r(i3e," (OpenAI GPT-2 model)"),i3e.forEach(t),TWe=i(y),am=n(y,"LI",{});var d3e=s(am);ire=n(d3e,"STRONG",{});var UXr=s(ire);MWe=r(UXr,"gpt_neo"),UXr.forEach(t),EWe=r(d3e," \u2014 "),jk=n(d3e,"A",{href:!0});var JXr=s(jk);CWe=r(JXr,"GPTNeoConfig"),JXr.forEach(t),wWe=r(d3e," (GPT Neo model)"),d3e.forEach(t),AWe=i(y),nm=n(y,"LI",{});var c3e=s(nm);dre=n(c3e,"STRONG",{});var YXr=s(dre);yWe=r(YXr,"gpt_neox"),YXr.forEach(t),LWe=r(c3e," \u2014 "),Dk=n(c3e,"A",{href:!0});var KXr=s(Dk);xWe=r(KXr,"GPTNeoXConfig"),KXr.forEach(t),$We=r(c3e," (GPT NeoX model)"),c3e.forEach(t),kWe=i(y),sm=n(y,"LI",{});var f3e=s(sm);cre=n(f3e,"STRONG",{});var ZXr=s(cre);SWe=r(ZXr,"gptj"),ZXr.forEach(t),RWe=r(f3e," \u2014 "),Gk=n(f3e,"A",{href:!0});var ezr=s(Gk);PWe=r(ezr,"GPTJConfig"),ezr.forEach(t),BWe=r(f3e," (GPT-J model)"),f3e.forEach(t),IWe=i(y),lm=n(y,"LI",{});var m3e=s(lm);fre=n(m3e,"STRONG",{});var ozr=s(fre);NWe=r(ozr,"hubert"),ozr.forEach(t),qWe=r(m3e," \u2014 "),Ok=n(m3e,"A",{href:!0});var rzr=s(Ok);jWe=r(rzr,"HubertConfig"),rzr.forEach(t),DWe=r(m3e," (Hubert model)"),m3e.forEach(t),GWe=i(y),im=n(y,"LI",{});var g3e=s(im);mre=n(g3e,"STRONG",{});var tzr=s(mre);OWe=r(tzr,"ibert"),tzr.forEach(t),VWe=r(g3e," \u2014 "),Vk=n(g3e,"A",{href:!0});var azr=s(Vk);XWe=r(azr,"IBertConfig"),azr.forEach(t),zWe=r(g3e," (I-BERT model)"),g3e.forEach(t),WWe=i(y),dm=n(y,"LI",{});var h3e=s(dm);gre=n(h3e,"STRONG",{});var nzr=s(gre);QWe=r(nzr,"imagegpt"),nzr.forEach(t),HWe=r(h3e," \u2014 "),Xk=n(h3e,"A",{href:!0});var szr=s(Xk);UWe=r(szr,"ImageGPTConfig"),szr.forEach(t),JWe=r(h3e," (ImageGPT model)"),h3e.forEach(t),YWe=i(y),cm=n(y,"LI",{});var p3e=s(cm);hre=n(p3e,"STRONG",{});var lzr=s(hre);KWe=r(lzr,"layoutlm"),lzr.forEach(t),ZWe=r(p3e," \u2014 "),zk=n(p3e,"A",{href:!0});var izr=s(zk);eQe=r(izr,"LayoutLMConfig"),izr.forEach(t),oQe=r(p3e," (LayoutLM model)"),p3e.forEach(t),rQe=i(y),fm=n(y,"LI",{});var _3e=s(fm);pre=n(_3e,"STRONG",{});var dzr=s(pre);tQe=r(dzr,"layoutlmv2"),dzr.forEach(t),aQe=r(_3e," \u2014 "),Wk=n(_3e,"A",{href:!0});var czr=s(Wk);nQe=r(czr,"LayoutLMv2Config"),czr.forEach(t),sQe=r(_3e," (LayoutLMv2 model)"),_3e.forEach(t),lQe=i(y),mm=n(y,"LI",{});var u3e=s(mm);_re=n(u3e,"STRONG",{});var fzr=s(_re);iQe=r(fzr,"layoutlmv3"),fzr.forEach(t),dQe=r(u3e," \u2014 "),Qk=n(u3e,"A",{href:!0});var mzr=s(Qk);cQe=r(mzr,"LayoutLMv3Config"),mzr.forEach(t),fQe=r(u3e," (LayoutLMv3 model)"),u3e.forEach(t),mQe=i(y),gm=n(y,"LI",{});var b3e=s(gm);ure=n(b3e,"STRONG",{});var gzr=s(ure);gQe=r(gzr,"led"),gzr.forEach(t),hQe=r(b3e," \u2014 "),Hk=n(b3e,"A",{href:!0});var hzr=s(Hk);pQe=r(hzr,"LEDConfig"),hzr.forEach(t),_Qe=r(b3e," (LED model)"),b3e.forEach(t),uQe=i(y),hm=n(y,"LI",{});var v3e=s(hm);bre=n(v3e,"STRONG",{});var pzr=s(bre);bQe=r(pzr,"longformer"),pzr.forEach(t),vQe=r(v3e," \u2014 "),Uk=n(v3e,"A",{href:!0});var _zr=s(Uk);FQe=r(_zr,"LongformerConfig"),_zr.forEach(t),TQe=r(v3e," (Longformer model)"),v3e.forEach(t),MQe=i(y),pm=n(y,"LI",{});var F3e=s(pm);vre=n(F3e,"STRONG",{});var uzr=s(vre);EQe=r(uzr,"luke"),uzr.forEach(t),CQe=r(F3e," \u2014 "),Jk=n(F3e,"A",{href:!0});var bzr=s(Jk);wQe=r(bzr,"LukeConfig"),bzr.forEach(t),AQe=r(F3e," (LUKE model)"),F3e.forEach(t),yQe=i(y),_m=n(y,"LI",{});var T3e=s(_m);Fre=n(T3e,"STRONG",{});var vzr=s(Fre);LQe=r(vzr,"lxmert"),vzr.forEach(t),xQe=r(T3e," \u2014 "),Yk=n(T3e,"A",{href:!0});var Fzr=s(Yk);$Qe=r(Fzr,"LxmertConfig"),Fzr.forEach(t),kQe=r(T3e," (LXMERT model)"),T3e.forEach(t),SQe=i(y),um=n(y,"LI",{});var M3e=s(um);Tre=n(M3e,"STRONG",{});var Tzr=s(Tre);RQe=r(Tzr,"m2m_100"),Tzr.forEach(t),PQe=r(M3e," \u2014 "),Kk=n(M3e,"A",{href:!0});var Mzr=s(Kk);BQe=r(Mzr,"M2M100Config"),Mzr.forEach(t),IQe=r(M3e," (M2M100 model)"),M3e.forEach(t),NQe=i(y),bm=n(y,"LI",{});var E3e=s(bm);Mre=n(E3e,"STRONG",{});var Ezr=s(Mre);qQe=r(Ezr,"marian"),Ezr.forEach(t),jQe=r(E3e," \u2014 "),Zk=n(E3e,"A",{href:!0});var Czr=s(Zk);DQe=r(Czr,"MarianConfig"),Czr.forEach(t),GQe=r(E3e," (Marian model)"),E3e.forEach(t),OQe=i(y),vm=n(y,"LI",{});var C3e=s(vm);Ere=n(C3e,"STRONG",{});var wzr=s(Ere);VQe=r(wzr,"maskformer"),wzr.forEach(t),XQe=r(C3e," \u2014 "),eS=n(C3e,"A",{href:!0});var Azr=s(eS);zQe=r(Azr,"MaskFormerConfig"),Azr.forEach(t),WQe=r(C3e," (MaskFormer model)"),C3e.forEach(t),QQe=i(y),Fm=n(y,"LI",{});var w3e=s(Fm);Cre=n(w3e,"STRONG",{});var yzr=s(Cre);HQe=r(yzr,"mbart"),yzr.forEach(t),UQe=r(w3e," \u2014 "),oS=n(w3e,"A",{href:!0});var Lzr=s(oS);JQe=r(Lzr,"MBartConfig"),Lzr.forEach(t),YQe=r(w3e," (mBART model)"),w3e.forEach(t),KQe=i(y),Tm=n(y,"LI",{});var A3e=s(Tm);wre=n(A3e,"STRONG",{});var xzr=s(wre);ZQe=r(xzr,"megatron-bert"),xzr.forEach(t),eHe=r(A3e," \u2014 "),rS=n(A3e,"A",{href:!0});var $zr=s(rS);oHe=r($zr,"MegatronBertConfig"),$zr.forEach(t),rHe=r(A3e," (MegatronBert model)"),A3e.forEach(t),tHe=i(y),Mm=n(y,"LI",{});var y3e=s(Mm);Are=n(y3e,"STRONG",{});var kzr=s(Are);aHe=r(kzr,"mobilebert"),kzr.forEach(t),nHe=r(y3e," \u2014 "),tS=n(y3e,"A",{href:!0});var Szr=s(tS);sHe=r(Szr,"MobileBertConfig"),Szr.forEach(t),lHe=r(y3e," (MobileBERT model)"),y3e.forEach(t),iHe=i(y),Em=n(y,"LI",{});var L3e=s(Em);yre=n(L3e,"STRONG",{});var Rzr=s(yre);dHe=r(Rzr,"mpnet"),Rzr.forEach(t),cHe=r(L3e," \u2014 "),aS=n(L3e,"A",{href:!0});var Pzr=s(aS);fHe=r(Pzr,"MPNetConfig"),Pzr.forEach(t),mHe=r(L3e," (MPNet model)"),L3e.forEach(t),gHe=i(y),Cm=n(y,"LI",{});var x3e=s(Cm);Lre=n(x3e,"STRONG",{});var Bzr=s(Lre);hHe=r(Bzr,"mt5"),Bzr.forEach(t),pHe=r(x3e," \u2014 "),nS=n(x3e,"A",{href:!0});var Izr=s(nS);_He=r(Izr,"MT5Config"),Izr.forEach(t),uHe=r(x3e," (mT5 model)"),x3e.forEach(t),bHe=i(y),wm=n(y,"LI",{});var $3e=s(wm);xre=n($3e,"STRONG",{});var Nzr=s(xre);vHe=r(Nzr,"nystromformer"),Nzr.forEach(t),FHe=r($3e," \u2014 "),sS=n($3e,"A",{href:!0});var qzr=s(sS);THe=r(qzr,"NystromformerConfig"),qzr.forEach(t),MHe=r($3e," (Nystromformer model)"),$3e.forEach(t),EHe=i(y),Am=n(y,"LI",{});var k3e=s(Am);$re=n(k3e,"STRONG",{});var jzr=s($re);CHe=r(jzr,"openai-gpt"),jzr.forEach(t),wHe=r(k3e," \u2014 "),lS=n(k3e,"A",{href:!0});var Dzr=s(lS);AHe=r(Dzr,"OpenAIGPTConfig"),Dzr.forEach(t),yHe=r(k3e," (OpenAI GPT model)"),k3e.forEach(t),LHe=i(y),ym=n(y,"LI",{});var S3e=s(ym);kre=n(S3e,"STRONG",{});var Gzr=s(kre);xHe=r(Gzr,"opt"),Gzr.forEach(t),$He=r(S3e," \u2014 "),iS=n(S3e,"A",{href:!0});var Ozr=s(iS);kHe=r(Ozr,"OPTConfig"),Ozr.forEach(t),SHe=r(S3e," (OPT model)"),S3e.forEach(t),RHe=i(y),Lm=n(y,"LI",{});var R3e=s(Lm);Sre=n(R3e,"STRONG",{});var Vzr=s(Sre);PHe=r(Vzr,"pegasus"),Vzr.forEach(t),BHe=r(R3e," \u2014 "),dS=n(R3e,"A",{href:!0});var Xzr=s(dS);IHe=r(Xzr,"PegasusConfig"),Xzr.forEach(t),NHe=r(R3e," (Pegasus model)"),R3e.forEach(t),qHe=i(y),xm=n(y,"LI",{});var P3e=s(xm);Rre=n(P3e,"STRONG",{});var zzr=s(Rre);jHe=r(zzr,"perceiver"),zzr.forEach(t),DHe=r(P3e," \u2014 "),cS=n(P3e,"A",{href:!0});var Wzr=s(cS);GHe=r(Wzr,"PerceiverConfig"),Wzr.forEach(t),OHe=r(P3e," (Perceiver model)"),P3e.forEach(t),VHe=i(y),$m=n(y,"LI",{});var B3e=s($m);Pre=n(B3e,"STRONG",{});var Qzr=s(Pre);XHe=r(Qzr,"plbart"),Qzr.forEach(t),zHe=r(B3e," \u2014 "),fS=n(B3e,"A",{href:!0});var Hzr=s(fS);WHe=r(Hzr,"PLBartConfig"),Hzr.forEach(t),QHe=r(B3e," (PLBart model)"),B3e.forEach(t),HHe=i(y),km=n(y,"LI",{});var I3e=s(km);Bre=n(I3e,"STRONG",{});var Uzr=s(Bre);UHe=r(Uzr,"poolformer"),Uzr.forEach(t),JHe=r(I3e," \u2014 "),mS=n(I3e,"A",{href:!0});var Jzr=s(mS);YHe=r(Jzr,"PoolFormerConfig"),Jzr.forEach(t),KHe=r(I3e," (PoolFormer model)"),I3e.forEach(t),ZHe=i(y),Sm=n(y,"LI",{});var N3e=s(Sm);Ire=n(N3e,"STRONG",{});var Yzr=s(Ire);eUe=r(Yzr,"prophetnet"),Yzr.forEach(t),oUe=r(N3e," \u2014 "),gS=n(N3e,"A",{href:!0});var Kzr=s(gS);rUe=r(Kzr,"ProphetNetConfig"),Kzr.forEach(t),tUe=r(N3e," (ProphetNet model)"),N3e.forEach(t),aUe=i(y),Rm=n(y,"LI",{});var q3e=s(Rm);Nre=n(q3e,"STRONG",{});var Zzr=s(Nre);nUe=r(Zzr,"qdqbert"),Zzr.forEach(t),sUe=r(q3e," \u2014 "),hS=n(q3e,"A",{href:!0});var eWr=s(hS);lUe=r(eWr,"QDQBertConfig"),eWr.forEach(t),iUe=r(q3e," (QDQBert model)"),q3e.forEach(t),dUe=i(y),Pm=n(y,"LI",{});var j3e=s(Pm);qre=n(j3e,"STRONG",{});var oWr=s(qre);cUe=r(oWr,"rag"),oWr.forEach(t),fUe=r(j3e," \u2014 "),pS=n(j3e,"A",{href:!0});var rWr=s(pS);mUe=r(rWr,"RagConfig"),rWr.forEach(t),gUe=r(j3e," (RAG model)"),j3e.forEach(t),hUe=i(y),Bm=n(y,"LI",{});var D3e=s(Bm);jre=n(D3e,"STRONG",{});var tWr=s(jre);pUe=r(tWr,"realm"),tWr.forEach(t),_Ue=r(D3e," \u2014 "),_S=n(D3e,"A",{href:!0});var aWr=s(_S);uUe=r(aWr,"RealmConfig"),aWr.forEach(t),bUe=r(D3e," (Realm model)"),D3e.forEach(t),vUe=i(y),Im=n(y,"LI",{});var G3e=s(Im);Dre=n(G3e,"STRONG",{});var nWr=s(Dre);FUe=r(nWr,"reformer"),nWr.forEach(t),TUe=r(G3e," \u2014 "),uS=n(G3e,"A",{href:!0});var sWr=s(uS);MUe=r(sWr,"ReformerConfig"),sWr.forEach(t),EUe=r(G3e," (Reformer model)"),G3e.forEach(t),CUe=i(y),Nm=n(y,"LI",{});var O3e=s(Nm);Gre=n(O3e,"STRONG",{});var lWr=s(Gre);wUe=r(lWr,"regnet"),lWr.forEach(t),AUe=r(O3e," \u2014 "),bS=n(O3e,"A",{href:!0});var iWr=s(bS);yUe=r(iWr,"RegNetConfig"),iWr.forEach(t),LUe=r(O3e," (RegNet model)"),O3e.forEach(t),xUe=i(y),qm=n(y,"LI",{});var V3e=s(qm);Ore=n(V3e,"STRONG",{});var dWr=s(Ore);$Ue=r(dWr,"rembert"),dWr.forEach(t),kUe=r(V3e," \u2014 "),vS=n(V3e,"A",{href:!0});var cWr=s(vS);SUe=r(cWr,"RemBertConfig"),cWr.forEach(t),RUe=r(V3e," (RemBERT model)"),V3e.forEach(t),PUe=i(y),jm=n(y,"LI",{});var X3e=s(jm);Vre=n(X3e,"STRONG",{});var fWr=s(Vre);BUe=r(fWr,"resnet"),fWr.forEach(t),IUe=r(X3e," \u2014 "),FS=n(X3e,"A",{href:!0});var mWr=s(FS);NUe=r(mWr,"ResNetConfig"),mWr.forEach(t),qUe=r(X3e," (ResNet model)"),X3e.forEach(t),jUe=i(y),Dm=n(y,"LI",{});var z3e=s(Dm);Xre=n(z3e,"STRONG",{});var gWr=s(Xre);DUe=r(gWr,"retribert"),gWr.forEach(t),GUe=r(z3e," \u2014 "),TS=n(z3e,"A",{href:!0});var hWr=s(TS);OUe=r(hWr,"RetriBertConfig"),hWr.forEach(t),VUe=r(z3e," (RetriBERT model)"),z3e.forEach(t),XUe=i(y),Gm=n(y,"LI",{});var W3e=s(Gm);zre=n(W3e,"STRONG",{});var pWr=s(zre);zUe=r(pWr,"roberta"),pWr.forEach(t),WUe=r(W3e," \u2014 "),MS=n(W3e,"A",{href:!0});var _Wr=s(MS);QUe=r(_Wr,"RobertaConfig"),_Wr.forEach(t),HUe=r(W3e," (RoBERTa model)"),W3e.forEach(t),UUe=i(y),Om=n(y,"LI",{});var Q3e=s(Om);Wre=n(Q3e,"STRONG",{});var uWr=s(Wre);JUe=r(uWr,"roformer"),uWr.forEach(t),YUe=r(Q3e," \u2014 "),ES=n(Q3e,"A",{href:!0});var bWr=s(ES);KUe=r(bWr,"RoFormerConfig"),bWr.forEach(t),ZUe=r(Q3e," (RoFormer model)"),Q3e.forEach(t),eJe=i(y),Vm=n(y,"LI",{});var H3e=s(Vm);Qre=n(H3e,"STRONG",{});var vWr=s(Qre);oJe=r(vWr,"segformer"),vWr.forEach(t),rJe=r(H3e," \u2014 "),CS=n(H3e,"A",{href:!0});var FWr=s(CS);tJe=r(FWr,"SegformerConfig"),FWr.forEach(t),aJe=r(H3e," (SegFormer model)"),H3e.forEach(t),nJe=i(y),Xm=n(y,"LI",{});var U3e=s(Xm);Hre=n(U3e,"STRONG",{});var TWr=s(Hre);sJe=r(TWr,"sew"),TWr.forEach(t),lJe=r(U3e," \u2014 "),wS=n(U3e,"A",{href:!0});var MWr=s(wS);iJe=r(MWr,"SEWConfig"),MWr.forEach(t),dJe=r(U3e," (SEW model)"),U3e.forEach(t),cJe=i(y),zm=n(y,"LI",{});var J3e=s(zm);Ure=n(J3e,"STRONG",{});var EWr=s(Ure);fJe=r(EWr,"sew-d"),EWr.forEach(t),mJe=r(J3e," \u2014 "),AS=n(J3e,"A",{href:!0});var CWr=s(AS);gJe=r(CWr,"SEWDConfig"),CWr.forEach(t),hJe=r(J3e," (SEW-D model)"),J3e.forEach(t),pJe=i(y),Wm=n(y,"LI",{});var Y3e=s(Wm);Jre=n(Y3e,"STRONG",{});var wWr=s(Jre);_Je=r(wWr,"speech-encoder-decoder"),wWr.forEach(t),uJe=r(Y3e," \u2014 "),yS=n(Y3e,"A",{href:!0});var AWr=s(yS);bJe=r(AWr,"SpeechEncoderDecoderConfig"),AWr.forEach(t),vJe=r(Y3e," (Speech Encoder decoder model)"),Y3e.forEach(t),FJe=i(y),Qm=n(y,"LI",{});var K3e=s(Qm);Yre=n(K3e,"STRONG",{});var yWr=s(Yre);TJe=r(yWr,"speech_to_text"),yWr.forEach(t),MJe=r(K3e," \u2014 "),LS=n(K3e,"A",{href:!0});var LWr=s(LS);EJe=r(LWr,"Speech2TextConfig"),LWr.forEach(t),CJe=r(K3e," (Speech2Text model)"),K3e.forEach(t),wJe=i(y),Hm=n(y,"LI",{});var Z3e=s(Hm);Kre=n(Z3e,"STRONG",{});var xWr=s(Kre);AJe=r(xWr,"speech_to_text_2"),xWr.forEach(t),yJe=r(Z3e," \u2014 "),xS=n(Z3e,"A",{href:!0});var $Wr=s(xS);LJe=r($Wr,"Speech2Text2Config"),$Wr.forEach(t),xJe=r(Z3e," (Speech2Text2 model)"),Z3e.forEach(t),$Je=i(y),Um=n(y,"LI",{});var ewe=s(Um);Zre=n(ewe,"STRONG",{});var kWr=s(Zre);kJe=r(kWr,"splinter"),kWr.forEach(t),SJe=r(ewe," \u2014 "),$S=n(ewe,"A",{href:!0});var SWr=s($S);RJe=r(SWr,"SplinterConfig"),SWr.forEach(t),PJe=r(ewe," (Splinter model)"),ewe.forEach(t),BJe=i(y),Jm=n(y,"LI",{});var owe=s(Jm);ete=n(owe,"STRONG",{});var RWr=s(ete);IJe=r(RWr,"squeezebert"),RWr.forEach(t),NJe=r(owe," \u2014 "),kS=n(owe,"A",{href:!0});var PWr=s(kS);qJe=r(PWr,"SqueezeBertConfig"),PWr.forEach(t),jJe=r(owe," (SqueezeBERT model)"),owe.forEach(t),DJe=i(y),Ym=n(y,"LI",{});var rwe=s(Ym);ote=n(rwe,"STRONG",{});var BWr=s(ote);GJe=r(BWr,"swin"),BWr.forEach(t),OJe=r(rwe," \u2014 "),SS=n(rwe,"A",{href:!0});var IWr=s(SS);VJe=r(IWr,"SwinConfig"),IWr.forEach(t),XJe=r(rwe," (Swin model)"),rwe.forEach(t),zJe=i(y),Km=n(y,"LI",{});var twe=s(Km);rte=n(twe,"STRONG",{});var NWr=s(rte);WJe=r(NWr,"t5"),NWr.forEach(t),QJe=r(twe," \u2014 "),RS=n(twe,"A",{href:!0});var qWr=s(RS);HJe=r(qWr,"T5Config"),qWr.forEach(t),UJe=r(twe," (T5 model)"),twe.forEach(t),JJe=i(y),Zm=n(y,"LI",{});var awe=s(Zm);tte=n(awe,"STRONG",{});var jWr=s(tte);YJe=r(jWr,"tapas"),jWr.forEach(t),KJe=r(awe," \u2014 "),PS=n(awe,"A",{href:!0});var DWr=s(PS);ZJe=r(DWr,"TapasConfig"),DWr.forEach(t),eYe=r(awe," (TAPAS model)"),awe.forEach(t),oYe=i(y),eg=n(y,"LI",{});var nwe=s(eg);ate=n(nwe,"STRONG",{});var GWr=s(ate);rYe=r(GWr,"trajectory_transformer"),GWr.forEach(t),tYe=r(nwe," \u2014 "),BS=n(nwe,"A",{href:!0});var OWr=s(BS);aYe=r(OWr,"TrajectoryTransformerConfig"),OWr.forEach(t),nYe=r(nwe," (Trajectory Transformer model)"),nwe.forEach(t),sYe=i(y),og=n(y,"LI",{});var swe=s(og);nte=n(swe,"STRONG",{});var VWr=s(nte);lYe=r(VWr,"transfo-xl"),VWr.forEach(t),iYe=r(swe," \u2014 "),IS=n(swe,"A",{href:!0});var XWr=s(IS);dYe=r(XWr,"TransfoXLConfig"),XWr.forEach(t),cYe=r(swe," (Transformer-XL model)"),swe.forEach(t),fYe=i(y),rg=n(y,"LI",{});var lwe=s(rg);ste=n(lwe,"STRONG",{});var zWr=s(ste);mYe=r(zWr,"trocr"),zWr.forEach(t),gYe=r(lwe," \u2014 "),NS=n(lwe,"A",{href:!0});var WWr=s(NS);hYe=r(WWr,"TrOCRConfig"),WWr.forEach(t),pYe=r(lwe," (TrOCR model)"),lwe.forEach(t),_Ye=i(y),tg=n(y,"LI",{});var iwe=s(tg);lte=n(iwe,"STRONG",{});var QWr=s(lte);uYe=r(QWr,"unispeech"),QWr.forEach(t),bYe=r(iwe," \u2014 "),qS=n(iwe,"A",{href:!0});var HWr=s(qS);vYe=r(HWr,"UniSpeechConfig"),HWr.forEach(t),FYe=r(iwe," (UniSpeech model)"),iwe.forEach(t),TYe=i(y),ag=n(y,"LI",{});var dwe=s(ag);ite=n(dwe,"STRONG",{});var UWr=s(ite);MYe=r(UWr,"unispeech-sat"),UWr.forEach(t),EYe=r(dwe," \u2014 "),jS=n(dwe,"A",{href:!0});var JWr=s(jS);CYe=r(JWr,"UniSpeechSatConfig"),JWr.forEach(t),wYe=r(dwe," (UniSpeechSat model)"),dwe.forEach(t),AYe=i(y),ng=n(y,"LI",{});var cwe=s(ng);dte=n(cwe,"STRONG",{});var YWr=s(dte);yYe=r(YWr,"van"),YWr.forEach(t),LYe=r(cwe," \u2014 "),DS=n(cwe,"A",{href:!0});var KWr=s(DS);xYe=r(KWr,"VanConfig"),KWr.forEach(t),$Ye=r(cwe," (VAN model)"),cwe.forEach(t),kYe=i(y),sg=n(y,"LI",{});var fwe=s(sg);cte=n(fwe,"STRONG",{});var ZWr=s(cte);SYe=r(ZWr,"vilt"),ZWr.forEach(t),RYe=r(fwe," \u2014 "),GS=n(fwe,"A",{href:!0});var eQr=s(GS);PYe=r(eQr,"ViltConfig"),eQr.forEach(t),BYe=r(fwe," (ViLT model)"),fwe.forEach(t),IYe=i(y),lg=n(y,"LI",{});var mwe=s(lg);fte=n(mwe,"STRONG",{});var oQr=s(fte);NYe=r(oQr,"vision-encoder-decoder"),oQr.forEach(t),qYe=r(mwe," \u2014 "),OS=n(mwe,"A",{href:!0});var rQr=s(OS);jYe=r(rQr,"VisionEncoderDecoderConfig"),rQr.forEach(t),DYe=r(mwe," (Vision Encoder decoder model)"),mwe.forEach(t),GYe=i(y),ig=n(y,"LI",{});var gwe=s(ig);mte=n(gwe,"STRONG",{});var tQr=s(mte);OYe=r(tQr,"vision-text-dual-encoder"),tQr.forEach(t),VYe=r(gwe," \u2014 "),VS=n(gwe,"A",{href:!0});var aQr=s(VS);XYe=r(aQr,"VisionTextDualEncoderConfig"),aQr.forEach(t),zYe=r(gwe," (VisionTextDualEncoder model)"),gwe.forEach(t),WYe=i(y),dg=n(y,"LI",{});var hwe=s(dg);gte=n(hwe,"STRONG",{});var nQr=s(gte);QYe=r(nQr,"visual_bert"),nQr.forEach(t),HYe=r(hwe," \u2014 "),XS=n(hwe,"A",{href:!0});var sQr=s(XS);UYe=r(sQr,"VisualBertConfig"),sQr.forEach(t),JYe=r(hwe," (VisualBert model)"),hwe.forEach(t),YYe=i(y),cg=n(y,"LI",{});var pwe=s(cg);hte=n(pwe,"STRONG",{});var lQr=s(hte);KYe=r(lQr,"vit"),lQr.forEach(t),ZYe=r(pwe," \u2014 "),zS=n(pwe,"A",{href:!0});var iQr=s(zS);eKe=r(iQr,"ViTConfig"),iQr.forEach(t),oKe=r(pwe," (ViT model)"),pwe.forEach(t),rKe=i(y),fg=n(y,"LI",{});var _we=s(fg);pte=n(_we,"STRONG",{});var dQr=s(pte);tKe=r(dQr,"vit_mae"),dQr.forEach(t),aKe=r(_we," \u2014 "),WS=n(_we,"A",{href:!0});var cQr=s(WS);nKe=r(cQr,"ViTMAEConfig"),cQr.forEach(t),sKe=r(_we," (ViTMAE model)"),_we.forEach(t),lKe=i(y),mg=n(y,"LI",{});var uwe=s(mg);_te=n(uwe,"STRONG",{});var fQr=s(_te);iKe=r(fQr,"wav2vec2"),fQr.forEach(t),dKe=r(uwe," \u2014 "),QS=n(uwe,"A",{href:!0});var mQr=s(QS);cKe=r(mQr,"Wav2Vec2Config"),mQr.forEach(t),fKe=r(uwe," (Wav2Vec2 model)"),uwe.forEach(t),mKe=i(y),gg=n(y,"LI",{});var bwe=s(gg);ute=n(bwe,"STRONG",{});var gQr=s(ute);gKe=r(gQr,"wav2vec2-conformer"),gQr.forEach(t),hKe=r(bwe," \u2014 "),HS=n(bwe,"A",{href:!0});var hQr=s(HS);pKe=r(hQr,"Wav2Vec2ConformerConfig"),hQr.forEach(t),_Ke=r(bwe," (Wav2Vec2-Conformer model)"),bwe.forEach(t),uKe=i(y),hg=n(y,"LI",{});var vwe=s(hg);bte=n(vwe,"STRONG",{});var pQr=s(bte);bKe=r(pQr,"wavlm"),pQr.forEach(t),vKe=r(vwe," \u2014 "),US=n(vwe,"A",{href:!0});var _Qr=s(US);FKe=r(_Qr,"WavLMConfig"),_Qr.forEach(t),TKe=r(vwe," (WavLM model)"),vwe.forEach(t),MKe=i(y),pg=n(y,"LI",{});var Fwe=s(pg);vte=n(Fwe,"STRONG",{});var uQr=s(vte);EKe=r(uQr,"xglm"),uQr.forEach(t),CKe=r(Fwe," \u2014 "),JS=n(Fwe,"A",{href:!0});var bQr=s(JS);wKe=r(bQr,"XGLMConfig"),bQr.forEach(t),AKe=r(Fwe," (XGLM model)"),Fwe.forEach(t),yKe=i(y),_g=n(y,"LI",{});var Twe=s(_g);Fte=n(Twe,"STRONG",{});var vQr=s(Fte);LKe=r(vQr,"xlm"),vQr.forEach(t),xKe=r(Twe," \u2014 "),YS=n(Twe,"A",{href:!0});var FQr=s(YS);$Ke=r(FQr,"XLMConfig"),FQr.forEach(t),kKe=r(Twe," (XLM model)"),Twe.forEach(t),SKe=i(y),ug=n(y,"LI",{});var Mwe=s(ug);Tte=n(Mwe,"STRONG",{});var TQr=s(Tte);RKe=r(TQr,"xlm-prophetnet"),TQr.forEach(t),PKe=r(Mwe," \u2014 "),KS=n(Mwe,"A",{href:!0});var MQr=s(KS);BKe=r(MQr,"XLMProphetNetConfig"),MQr.forEach(t),IKe=r(Mwe," (XLMProphetNet model)"),Mwe.forEach(t),NKe=i(y),bg=n(y,"LI",{});var Ewe=s(bg);Mte=n(Ewe,"STRONG",{});var EQr=s(Mte);qKe=r(EQr,"xlm-roberta"),EQr.forEach(t),jKe=r(Ewe," \u2014 "),ZS=n(Ewe,"A",{href:!0});var CQr=s(ZS);DKe=r(CQr,"XLMRobertaConfig"),CQr.forEach(t),GKe=r(Ewe," (XLM-RoBERTa model)"),Ewe.forEach(t),OKe=i(y),vg=n(y,"LI",{});var Cwe=s(vg);Ete=n(Cwe,"STRONG",{});var wQr=s(Ete);VKe=r(wQr,"xlm-roberta-xl"),wQr.forEach(t),XKe=r(Cwe," \u2014 "),eR=n(Cwe,"A",{href:!0});var AQr=s(eR);zKe=r(AQr,"XLMRobertaXLConfig"),AQr.forEach(t),WKe=r(Cwe," (XLM-RoBERTa-XL model)"),Cwe.forEach(t),QKe=i(y),Fg=n(y,"LI",{});var wwe=s(Fg);Cte=n(wwe,"STRONG",{});var yQr=s(Cte);HKe=r(yQr,"xlnet"),yQr.forEach(t),UKe=r(wwe," \u2014 "),oR=n(wwe,"A",{href:!0});var LQr=s(oR);JKe=r(LQr,"XLNetConfig"),LQr.forEach(t),YKe=r(wwe," (XLNet model)"),wwe.forEach(t),KKe=i(y),Tg=n(y,"LI",{});var Awe=s(Tg);wte=n(Awe,"STRONG",{});var xQr=s(wte);ZKe=r(xQr,"yolos"),xQr.forEach(t),eZe=r(Awe," \u2014 "),rR=n(Awe,"A",{href:!0});var $Qr=s(rR);oZe=r($Qr,"YolosConfig"),$Qr.forEach(t),rZe=r(Awe," (YOLOS model)"),Awe.forEach(t),tZe=i(y),Mg=n(y,"LI",{});var ywe=s(Mg);Ate=n(ywe,"STRONG",{});var kQr=s(Ate);aZe=r(kQr,"yoso"),kQr.forEach(t),nZe=r(ywe," \u2014 "),tR=n(ywe,"A",{href:!0});var SQr=s(tR);sZe=r(SQr,"YosoConfig"),SQr.forEach(t),lZe=r(ywe," (YOSO model)"),ywe.forEach(t),y.forEach(t),iZe=i(ot),T(Eg.$$.fragment,ot),ot.forEach(t),dZe=i(et),Cg=n(et,"DIV",{class:!0});var MDe=s(Cg);T(jA.$$.fragment,MDe),cZe=i(MDe),yte=n(MDe,"P",{});var RQr=s(yte);fZe=r(RQr,"Register a new configuration for this class."),RQr.forEach(t),MDe.forEach(t),et.forEach(t),wqe=i(f),Ti=n(f,"H2",{class:!0});var EDe=s(Ti);wg=n(EDe,"A",{id:!0,class:!0,href:!0});var PQr=s(wg);Lte=n(PQr,"SPAN",{});var BQr=s(Lte);T(DA.$$.fragment,BQr),BQr.forEach(t),PQr.forEach(t),mZe=i(EDe),xte=n(EDe,"SPAN",{});var IQr=s(xte);gZe=r(IQr,"AutoTokenizer"),IQr.forEach(t),EDe.forEach(t),Aqe=i(f),wo=n(f,"DIV",{class:!0});var Ns=s(wo);T(GA.$$.fragment,Ns),hZe=i(Ns),OA=n(Ns,"P",{});var CDe=s(OA);pZe=r(CDe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),aR=n(CDe,"A",{href:!0});var NQr=s(aR);_Ze=r(NQr,"AutoTokenizer.from_pretrained()"),NQr.forEach(t),uZe=r(CDe," class method."),CDe.forEach(t),bZe=i(Ns),VA=n(Ns,"P",{});var wDe=s(VA);vZe=r(wDe,"This class cannot be instantiated directly using "),$te=n(wDe,"CODE",{});var qQr=s($te);FZe=r(qQr,"__init__()"),qQr.forEach(t),TZe=r(wDe," (throws an error)."),wDe.forEach(t),MZe=i(Ns),Cr=n(Ns,"DIV",{class:!0});var qs=s(Cr);T(XA.$$.fragment,qs),EZe=i(qs),kte=n(qs,"P",{});var jQr=s(kte);CZe=r(jQr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),jQr.forEach(t),wZe=i(qs),Aa=n(qs,"P",{});var Pw=s(Aa);AZe=r(Pw,"The tokenizer class to instantiate is selected based on the "),Ste=n(Pw,"CODE",{});var DQr=s(Ste);yZe=r(DQr,"model_type"),DQr.forEach(t),LZe=r(Pw,` property of the config object (either
passed as an argument or loaded from `),Rte=n(Pw,"CODE",{});var GQr=s(Rte);xZe=r(GQr,"pretrained_model_name_or_path"),GQr.forEach(t),$Ze=r(Pw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pte=n(Pw,"CODE",{});var OQr=s(Pte);kZe=r(OQr,"pretrained_model_name_or_path"),OQr.forEach(t),SZe=r(Pw,":"),Pw.forEach(t),RZe=i(qs),k=n(qs,"UL",{});var S=s(k);Sn=n(S,"LI",{});var zx=s(Sn);Bte=n(zx,"STRONG",{});var VQr=s(Bte);PZe=r(VQr,"albert"),VQr.forEach(t),BZe=r(zx," \u2014 "),nR=n(zx,"A",{href:!0});var XQr=s(nR);IZe=r(XQr,"AlbertTokenizer"),XQr.forEach(t),NZe=r(zx," or "),sR=n(zx,"A",{href:!0});var zQr=s(sR);qZe=r(zQr,"AlbertTokenizerFast"),zQr.forEach(t),jZe=r(zx," (ALBERT model)"),zx.forEach(t),DZe=i(S),Rn=n(S,"LI",{});var Wx=s(Rn);Ite=n(Wx,"STRONG",{});var WQr=s(Ite);GZe=r(WQr,"bart"),WQr.forEach(t),OZe=r(Wx," \u2014 "),lR=n(Wx,"A",{href:!0});var QQr=s(lR);VZe=r(QQr,"BartTokenizer"),QQr.forEach(t),XZe=r(Wx," or "),iR=n(Wx,"A",{href:!0});var HQr=s(iR);zZe=r(HQr,"BartTokenizerFast"),HQr.forEach(t),WZe=r(Wx," (BART model)"),Wx.forEach(t),QZe=i(S),Pn=n(S,"LI",{});var Qx=s(Pn);Nte=n(Qx,"STRONG",{});var UQr=s(Nte);HZe=r(UQr,"barthez"),UQr.forEach(t),UZe=r(Qx," \u2014 "),dR=n(Qx,"A",{href:!0});var JQr=s(dR);JZe=r(JQr,"BarthezTokenizer"),JQr.forEach(t),YZe=r(Qx," or "),cR=n(Qx,"A",{href:!0});var YQr=s(cR);KZe=r(YQr,"BarthezTokenizerFast"),YQr.forEach(t),ZZe=r(Qx," (BARThez model)"),Qx.forEach(t),eeo=i(S),Ag=n(S,"LI",{});var Lwe=s(Ag);qte=n(Lwe,"STRONG",{});var KQr=s(qte);oeo=r(KQr,"bartpho"),KQr.forEach(t),reo=r(Lwe," \u2014 "),fR=n(Lwe,"A",{href:!0});var ZQr=s(fR);teo=r(ZQr,"BartphoTokenizer"),ZQr.forEach(t),aeo=r(Lwe," (BARTpho model)"),Lwe.forEach(t),neo=i(S),Bn=n(S,"LI",{});var Hx=s(Bn);jte=n(Hx,"STRONG",{});var eHr=s(jte);seo=r(eHr,"bert"),eHr.forEach(t),leo=r(Hx," \u2014 "),mR=n(Hx,"A",{href:!0});var oHr=s(mR);ieo=r(oHr,"BertTokenizer"),oHr.forEach(t),deo=r(Hx," or "),gR=n(Hx,"A",{href:!0});var rHr=s(gR);ceo=r(rHr,"BertTokenizerFast"),rHr.forEach(t),feo=r(Hx," (BERT model)"),Hx.forEach(t),meo=i(S),yg=n(S,"LI",{});var xwe=s(yg);Dte=n(xwe,"STRONG",{});var tHr=s(Dte);geo=r(tHr,"bert-generation"),tHr.forEach(t),heo=r(xwe," \u2014 "),hR=n(xwe,"A",{href:!0});var aHr=s(hR);peo=r(aHr,"BertGenerationTokenizer"),aHr.forEach(t),_eo=r(xwe," (Bert Generation model)"),xwe.forEach(t),ueo=i(S),Lg=n(S,"LI",{});var $we=s(Lg);Gte=n($we,"STRONG",{});var nHr=s(Gte);beo=r(nHr,"bert-japanese"),nHr.forEach(t),veo=r($we," \u2014 "),pR=n($we,"A",{href:!0});var sHr=s(pR);Feo=r(sHr,"BertJapaneseTokenizer"),sHr.forEach(t),Teo=r($we," (BertJapanese model)"),$we.forEach(t),Meo=i(S),xg=n(S,"LI",{});var kwe=s(xg);Ote=n(kwe,"STRONG",{});var lHr=s(Ote);Eeo=r(lHr,"bertweet"),lHr.forEach(t),Ceo=r(kwe," \u2014 "),_R=n(kwe,"A",{href:!0});var iHr=s(_R);weo=r(iHr,"BertweetTokenizer"),iHr.forEach(t),Aeo=r(kwe," (Bertweet model)"),kwe.forEach(t),yeo=i(S),In=n(S,"LI",{});var Ux=s(In);Vte=n(Ux,"STRONG",{});var dHr=s(Vte);Leo=r(dHr,"big_bird"),dHr.forEach(t),xeo=r(Ux," \u2014 "),uR=n(Ux,"A",{href:!0});var cHr=s(uR);$eo=r(cHr,"BigBirdTokenizer"),cHr.forEach(t),keo=r(Ux," or "),bR=n(Ux,"A",{href:!0});var fHr=s(bR);Seo=r(fHr,"BigBirdTokenizerFast"),fHr.forEach(t),Reo=r(Ux," (BigBird model)"),Ux.forEach(t),Peo=i(S),Nn=n(S,"LI",{});var Jx=s(Nn);Xte=n(Jx,"STRONG",{});var mHr=s(Xte);Beo=r(mHr,"bigbird_pegasus"),mHr.forEach(t),Ieo=r(Jx," \u2014 "),vR=n(Jx,"A",{href:!0});var gHr=s(vR);Neo=r(gHr,"PegasusTokenizer"),gHr.forEach(t),qeo=r(Jx," or "),FR=n(Jx,"A",{href:!0});var hHr=s(FR);jeo=r(hHr,"PegasusTokenizerFast"),hHr.forEach(t),Deo=r(Jx," (BigBirdPegasus model)"),Jx.forEach(t),Geo=i(S),qn=n(S,"LI",{});var Yx=s(qn);zte=n(Yx,"STRONG",{});var pHr=s(zte);Oeo=r(pHr,"blenderbot"),pHr.forEach(t),Veo=r(Yx," \u2014 "),TR=n(Yx,"A",{href:!0});var _Hr=s(TR);Xeo=r(_Hr,"BlenderbotTokenizer"),_Hr.forEach(t),zeo=r(Yx," or "),MR=n(Yx,"A",{href:!0});var uHr=s(MR);Weo=r(uHr,"BlenderbotTokenizerFast"),uHr.forEach(t),Qeo=r(Yx," (Blenderbot model)"),Yx.forEach(t),Heo=i(S),$g=n(S,"LI",{});var Swe=s($g);Wte=n(Swe,"STRONG",{});var bHr=s(Wte);Ueo=r(bHr,"blenderbot-small"),bHr.forEach(t),Jeo=r(Swe," \u2014 "),ER=n(Swe,"A",{href:!0});var vHr=s(ER);Yeo=r(vHr,"BlenderbotSmallTokenizer"),vHr.forEach(t),Keo=r(Swe," (BlenderbotSmall model)"),Swe.forEach(t),Zeo=i(S),kg=n(S,"LI",{});var Rwe=s(kg);Qte=n(Rwe,"STRONG",{});var FHr=s(Qte);eoo=r(FHr,"byt5"),FHr.forEach(t),ooo=r(Rwe," \u2014 "),CR=n(Rwe,"A",{href:!0});var THr=s(CR);roo=r(THr,"ByT5Tokenizer"),THr.forEach(t),too=r(Rwe," (ByT5 model)"),Rwe.forEach(t),aoo=i(S),jn=n(S,"LI",{});var Kx=s(jn);Hte=n(Kx,"STRONG",{});var MHr=s(Hte);noo=r(MHr,"camembert"),MHr.forEach(t),soo=r(Kx," \u2014 "),wR=n(Kx,"A",{href:!0});var EHr=s(wR);loo=r(EHr,"CamembertTokenizer"),EHr.forEach(t),ioo=r(Kx," or "),AR=n(Kx,"A",{href:!0});var CHr=s(AR);doo=r(CHr,"CamembertTokenizerFast"),CHr.forEach(t),coo=r(Kx," (CamemBERT model)"),Kx.forEach(t),foo=i(S),Sg=n(S,"LI",{});var Pwe=s(Sg);Ute=n(Pwe,"STRONG",{});var wHr=s(Ute);moo=r(wHr,"canine"),wHr.forEach(t),goo=r(Pwe," \u2014 "),yR=n(Pwe,"A",{href:!0});var AHr=s(yR);hoo=r(AHr,"CanineTokenizer"),AHr.forEach(t),poo=r(Pwe," (Canine model)"),Pwe.forEach(t),_oo=i(S),Dn=n(S,"LI",{});var Zx=s(Dn);Jte=n(Zx,"STRONG",{});var yHr=s(Jte);uoo=r(yHr,"clip"),yHr.forEach(t),boo=r(Zx," \u2014 "),LR=n(Zx,"A",{href:!0});var LHr=s(LR);voo=r(LHr,"CLIPTokenizer"),LHr.forEach(t),Foo=r(Zx," or "),xR=n(Zx,"A",{href:!0});var xHr=s(xR);Too=r(xHr,"CLIPTokenizerFast"),xHr.forEach(t),Moo=r(Zx," (CLIP model)"),Zx.forEach(t),Eoo=i(S),Gn=n(S,"LI",{});var e$=s(Gn);Yte=n(e$,"STRONG",{});var $Hr=s(Yte);Coo=r($Hr,"convbert"),$Hr.forEach(t),woo=r(e$," \u2014 "),$R=n(e$,"A",{href:!0});var kHr=s($R);Aoo=r(kHr,"ConvBertTokenizer"),kHr.forEach(t),yoo=r(e$," or "),kR=n(e$,"A",{href:!0});var SHr=s(kR);Loo=r(SHr,"ConvBertTokenizerFast"),SHr.forEach(t),xoo=r(e$," (ConvBERT model)"),e$.forEach(t),$oo=i(S),On=n(S,"LI",{});var o$=s(On);Kte=n(o$,"STRONG",{});var RHr=s(Kte);koo=r(RHr,"cpm"),RHr.forEach(t),Soo=r(o$," \u2014 "),SR=n(o$,"A",{href:!0});var PHr=s(SR);Roo=r(PHr,"CpmTokenizer"),PHr.forEach(t),Poo=r(o$," or "),RR=n(o$,"A",{href:!0});var BHr=s(RR);Boo=r(BHr,"CpmTokenizerFast"),BHr.forEach(t),Ioo=r(o$," (CPM model)"),o$.forEach(t),Noo=i(S),Rg=n(S,"LI",{});var Bwe=s(Rg);Zte=n(Bwe,"STRONG",{});var IHr=s(Zte);qoo=r(IHr,"ctrl"),IHr.forEach(t),joo=r(Bwe," \u2014 "),PR=n(Bwe,"A",{href:!0});var NHr=s(PR);Doo=r(NHr,"CTRLTokenizer"),NHr.forEach(t),Goo=r(Bwe," (CTRL model)"),Bwe.forEach(t),Ooo=i(S),Vn=n(S,"LI",{});var r$=s(Vn);eae=n(r$,"STRONG",{});var qHr=s(eae);Voo=r(qHr,"data2vec-text"),qHr.forEach(t),Xoo=r(r$," \u2014 "),BR=n(r$,"A",{href:!0});var jHr=s(BR);zoo=r(jHr,"RobertaTokenizer"),jHr.forEach(t),Woo=r(r$," or "),IR=n(r$,"A",{href:!0});var DHr=s(IR);Qoo=r(DHr,"RobertaTokenizerFast"),DHr.forEach(t),Hoo=r(r$," (Data2VecText model)"),r$.forEach(t),Uoo=i(S),Xn=n(S,"LI",{});var t$=s(Xn);oae=n(t$,"STRONG",{});var GHr=s(oae);Joo=r(GHr,"deberta"),GHr.forEach(t),Yoo=r(t$," \u2014 "),NR=n(t$,"A",{href:!0});var OHr=s(NR);Koo=r(OHr,"DebertaTokenizer"),OHr.forEach(t),Zoo=r(t$," or "),qR=n(t$,"A",{href:!0});var VHr=s(qR);ero=r(VHr,"DebertaTokenizerFast"),VHr.forEach(t),oro=r(t$," (DeBERTa model)"),t$.forEach(t),rro=i(S),zn=n(S,"LI",{});var a$=s(zn);rae=n(a$,"STRONG",{});var XHr=s(rae);tro=r(XHr,"deberta-v2"),XHr.forEach(t),aro=r(a$," \u2014 "),jR=n(a$,"A",{href:!0});var zHr=s(jR);nro=r(zHr,"DebertaV2Tokenizer"),zHr.forEach(t),sro=r(a$," or "),DR=n(a$,"A",{href:!0});var WHr=s(DR);lro=r(WHr,"DebertaV2TokenizerFast"),WHr.forEach(t),iro=r(a$," (DeBERTa-v2 model)"),a$.forEach(t),dro=i(S),Wn=n(S,"LI",{});var n$=s(Wn);tae=n(n$,"STRONG",{});var QHr=s(tae);cro=r(QHr,"distilbert"),QHr.forEach(t),fro=r(n$," \u2014 "),GR=n(n$,"A",{href:!0});var HHr=s(GR);mro=r(HHr,"DistilBertTokenizer"),HHr.forEach(t),gro=r(n$," or "),OR=n(n$,"A",{href:!0});var UHr=s(OR);hro=r(UHr,"DistilBertTokenizerFast"),UHr.forEach(t),pro=r(n$," (DistilBERT model)"),n$.forEach(t),_ro=i(S),Qn=n(S,"LI",{});var s$=s(Qn);aae=n(s$,"STRONG",{});var JHr=s(aae);uro=r(JHr,"dpr"),JHr.forEach(t),bro=r(s$," \u2014 "),VR=n(s$,"A",{href:!0});var YHr=s(VR);vro=r(YHr,"DPRQuestionEncoderTokenizer"),YHr.forEach(t),Fro=r(s$," or "),XR=n(s$,"A",{href:!0});var KHr=s(XR);Tro=r(KHr,"DPRQuestionEncoderTokenizerFast"),KHr.forEach(t),Mro=r(s$," (DPR model)"),s$.forEach(t),Ero=i(S),Hn=n(S,"LI",{});var l$=s(Hn);nae=n(l$,"STRONG",{});var ZHr=s(nae);Cro=r(ZHr,"electra"),ZHr.forEach(t),wro=r(l$," \u2014 "),zR=n(l$,"A",{href:!0});var eUr=s(zR);Aro=r(eUr,"ElectraTokenizer"),eUr.forEach(t),yro=r(l$," or "),WR=n(l$,"A",{href:!0});var oUr=s(WR);Lro=r(oUr,"ElectraTokenizerFast"),oUr.forEach(t),xro=r(l$," (ELECTRA model)"),l$.forEach(t),$ro=i(S),Pg=n(S,"LI",{});var Iwe=s(Pg);sae=n(Iwe,"STRONG",{});var rUr=s(sae);kro=r(rUr,"flaubert"),rUr.forEach(t),Sro=r(Iwe," \u2014 "),QR=n(Iwe,"A",{href:!0});var tUr=s(QR);Rro=r(tUr,"FlaubertTokenizer"),tUr.forEach(t),Pro=r(Iwe," (FlauBERT model)"),Iwe.forEach(t),Bro=i(S),Un=n(S,"LI",{});var i$=s(Un);lae=n(i$,"STRONG",{});var aUr=s(lae);Iro=r(aUr,"fnet"),aUr.forEach(t),Nro=r(i$," \u2014 "),HR=n(i$,"A",{href:!0});var nUr=s(HR);qro=r(nUr,"FNetTokenizer"),nUr.forEach(t),jro=r(i$," or "),UR=n(i$,"A",{href:!0});var sUr=s(UR);Dro=r(sUr,"FNetTokenizerFast"),sUr.forEach(t),Gro=r(i$," (FNet model)"),i$.forEach(t),Oro=i(S),Bg=n(S,"LI",{});var Nwe=s(Bg);iae=n(Nwe,"STRONG",{});var lUr=s(iae);Vro=r(lUr,"fsmt"),lUr.forEach(t),Xro=r(Nwe," \u2014 "),JR=n(Nwe,"A",{href:!0});var iUr=s(JR);zro=r(iUr,"FSMTTokenizer"),iUr.forEach(t),Wro=r(Nwe," (FairSeq Machine-Translation model)"),Nwe.forEach(t),Qro=i(S),Jn=n(S,"LI",{});var d$=s(Jn);dae=n(d$,"STRONG",{});var dUr=s(dae);Hro=r(dUr,"funnel"),dUr.forEach(t),Uro=r(d$," \u2014 "),YR=n(d$,"A",{href:!0});var cUr=s(YR);Jro=r(cUr,"FunnelTokenizer"),cUr.forEach(t),Yro=r(d$," or "),KR=n(d$,"A",{href:!0});var fUr=s(KR);Kro=r(fUr,"FunnelTokenizerFast"),fUr.forEach(t),Zro=r(d$," (Funnel Transformer model)"),d$.forEach(t),eto=i(S),Yn=n(S,"LI",{});var c$=s(Yn);cae=n(c$,"STRONG",{});var mUr=s(cae);oto=r(mUr,"gpt2"),mUr.forEach(t),rto=r(c$," \u2014 "),ZR=n(c$,"A",{href:!0});var gUr=s(ZR);tto=r(gUr,"GPT2Tokenizer"),gUr.forEach(t),ato=r(c$," or "),eP=n(c$,"A",{href:!0});var hUr=s(eP);nto=r(hUr,"GPT2TokenizerFast"),hUr.forEach(t),sto=r(c$," (OpenAI GPT-2 model)"),c$.forEach(t),lto=i(S),Kn=n(S,"LI",{});var f$=s(Kn);fae=n(f$,"STRONG",{});var pUr=s(fae);ito=r(pUr,"gpt_neo"),pUr.forEach(t),dto=r(f$," \u2014 "),oP=n(f$,"A",{href:!0});var _Ur=s(oP);cto=r(_Ur,"GPT2Tokenizer"),_Ur.forEach(t),fto=r(f$," or "),rP=n(f$,"A",{href:!0});var uUr=s(rP);mto=r(uUr,"GPT2TokenizerFast"),uUr.forEach(t),gto=r(f$," (GPT Neo model)"),f$.forEach(t),hto=i(S),Ig=n(S,"LI",{});var qwe=s(Ig);mae=n(qwe,"STRONG",{});var bUr=s(mae);pto=r(bUr,"gpt_neox"),bUr.forEach(t),_to=r(qwe," \u2014 "),tP=n(qwe,"A",{href:!0});var vUr=s(tP);uto=r(vUr,"GPTNeoXTokenizerFast"),vUr.forEach(t),bto=r(qwe," (GPT NeoX model)"),qwe.forEach(t),vto=i(S),Zn=n(S,"LI",{});var m$=s(Zn);gae=n(m$,"STRONG",{});var FUr=s(gae);Fto=r(FUr,"gptj"),FUr.forEach(t),Tto=r(m$," \u2014 "),aP=n(m$,"A",{href:!0});var TUr=s(aP);Mto=r(TUr,"GPT2Tokenizer"),TUr.forEach(t),Eto=r(m$," or "),nP=n(m$,"A",{href:!0});var MUr=s(nP);Cto=r(MUr,"GPT2TokenizerFast"),MUr.forEach(t),wto=r(m$," (GPT-J model)"),m$.forEach(t),Ato=i(S),es=n(S,"LI",{});var g$=s(es);hae=n(g$,"STRONG",{});var EUr=s(hae);yto=r(EUr,"herbert"),EUr.forEach(t),Lto=r(g$," \u2014 "),sP=n(g$,"A",{href:!0});var CUr=s(sP);xto=r(CUr,"HerbertTokenizer"),CUr.forEach(t),$to=r(g$," or "),lP=n(g$,"A",{href:!0});var wUr=s(lP);kto=r(wUr,"HerbertTokenizerFast"),wUr.forEach(t),Sto=r(g$," (HerBERT model)"),g$.forEach(t),Rto=i(S),Ng=n(S,"LI",{});var jwe=s(Ng);pae=n(jwe,"STRONG",{});var AUr=s(pae);Pto=r(AUr,"hubert"),AUr.forEach(t),Bto=r(jwe," \u2014 "),iP=n(jwe,"A",{href:!0});var yUr=s(iP);Ito=r(yUr,"Wav2Vec2CTCTokenizer"),yUr.forEach(t),Nto=r(jwe," (Hubert model)"),jwe.forEach(t),qto=i(S),os=n(S,"LI",{});var h$=s(os);_ae=n(h$,"STRONG",{});var LUr=s(_ae);jto=r(LUr,"ibert"),LUr.forEach(t),Dto=r(h$," \u2014 "),dP=n(h$,"A",{href:!0});var xUr=s(dP);Gto=r(xUr,"RobertaTokenizer"),xUr.forEach(t),Oto=r(h$," or "),cP=n(h$,"A",{href:!0});var $Ur=s(cP);Vto=r($Ur,"RobertaTokenizerFast"),$Ur.forEach(t),Xto=r(h$," (I-BERT model)"),h$.forEach(t),zto=i(S),rs=n(S,"LI",{});var p$=s(rs);uae=n(p$,"STRONG",{});var kUr=s(uae);Wto=r(kUr,"layoutlm"),kUr.forEach(t),Qto=r(p$," \u2014 "),fP=n(p$,"A",{href:!0});var SUr=s(fP);Hto=r(SUr,"LayoutLMTokenizer"),SUr.forEach(t),Uto=r(p$," or "),mP=n(p$,"A",{href:!0});var RUr=s(mP);Jto=r(RUr,"LayoutLMTokenizerFast"),RUr.forEach(t),Yto=r(p$," (LayoutLM model)"),p$.forEach(t),Kto=i(S),ts=n(S,"LI",{});var _$=s(ts);bae=n(_$,"STRONG",{});var PUr=s(bae);Zto=r(PUr,"layoutlmv2"),PUr.forEach(t),eao=r(_$," \u2014 "),gP=n(_$,"A",{href:!0});var BUr=s(gP);oao=r(BUr,"LayoutLMv2Tokenizer"),BUr.forEach(t),rao=r(_$," or "),hP=n(_$,"A",{href:!0});var IUr=s(hP);tao=r(IUr,"LayoutLMv2TokenizerFast"),IUr.forEach(t),aao=r(_$," (LayoutLMv2 model)"),_$.forEach(t),nao=i(S),as=n(S,"LI",{});var u$=s(as);vae=n(u$,"STRONG",{});var NUr=s(vae);sao=r(NUr,"layoutlmv3"),NUr.forEach(t),lao=r(u$," \u2014 "),pP=n(u$,"A",{href:!0});var qUr=s(pP);iao=r(qUr,"LayoutLMv3Tokenizer"),qUr.forEach(t),dao=r(u$," or "),_P=n(u$,"A",{href:!0});var jUr=s(_P);cao=r(jUr,"LayoutLMv3TokenizerFast"),jUr.forEach(t),fao=r(u$," (LayoutLMv3 model)"),u$.forEach(t),mao=i(S),ns=n(S,"LI",{});var b$=s(ns);Fae=n(b$,"STRONG",{});var DUr=s(Fae);gao=r(DUr,"layoutxlm"),DUr.forEach(t),hao=r(b$," \u2014 "),uP=n(b$,"A",{href:!0});var GUr=s(uP);pao=r(GUr,"LayoutXLMTokenizer"),GUr.forEach(t),_ao=r(b$," or "),bP=n(b$,"A",{href:!0});var OUr=s(bP);uao=r(OUr,"LayoutXLMTokenizerFast"),OUr.forEach(t),bao=r(b$," (LayoutXLM model)"),b$.forEach(t),vao=i(S),ss=n(S,"LI",{});var v$=s(ss);Tae=n(v$,"STRONG",{});var VUr=s(Tae);Fao=r(VUr,"led"),VUr.forEach(t),Tao=r(v$," \u2014 "),vP=n(v$,"A",{href:!0});var XUr=s(vP);Mao=r(XUr,"LEDTokenizer"),XUr.forEach(t),Eao=r(v$," or "),FP=n(v$,"A",{href:!0});var zUr=s(FP);Cao=r(zUr,"LEDTokenizerFast"),zUr.forEach(t),wao=r(v$," (LED model)"),v$.forEach(t),Aao=i(S),ls=n(S,"LI",{});var F$=s(ls);Mae=n(F$,"STRONG",{});var WUr=s(Mae);yao=r(WUr,"longformer"),WUr.forEach(t),Lao=r(F$," \u2014 "),TP=n(F$,"A",{href:!0});var QUr=s(TP);xao=r(QUr,"LongformerTokenizer"),QUr.forEach(t),$ao=r(F$," or "),MP=n(F$,"A",{href:!0});var HUr=s(MP);kao=r(HUr,"LongformerTokenizerFast"),HUr.forEach(t),Sao=r(F$," (Longformer model)"),F$.forEach(t),Rao=i(S),qg=n(S,"LI",{});var Dwe=s(qg);Eae=n(Dwe,"STRONG",{});var UUr=s(Eae);Pao=r(UUr,"luke"),UUr.forEach(t),Bao=r(Dwe," \u2014 "),EP=n(Dwe,"A",{href:!0});var JUr=s(EP);Iao=r(JUr,"LukeTokenizer"),JUr.forEach(t),Nao=r(Dwe," (LUKE model)"),Dwe.forEach(t),qao=i(S),is=n(S,"LI",{});var T$=s(is);Cae=n(T$,"STRONG",{});var YUr=s(Cae);jao=r(YUr,"lxmert"),YUr.forEach(t),Dao=r(T$," \u2014 "),CP=n(T$,"A",{href:!0});var KUr=s(CP);Gao=r(KUr,"LxmertTokenizer"),KUr.forEach(t),Oao=r(T$," or "),wP=n(T$,"A",{href:!0});var ZUr=s(wP);Vao=r(ZUr,"LxmertTokenizerFast"),ZUr.forEach(t),Xao=r(T$," (LXMERT model)"),T$.forEach(t),zao=i(S),jg=n(S,"LI",{});var Gwe=s(jg);wae=n(Gwe,"STRONG",{});var eJr=s(wae);Wao=r(eJr,"m2m_100"),eJr.forEach(t),Qao=r(Gwe," \u2014 "),AP=n(Gwe,"A",{href:!0});var oJr=s(AP);Hao=r(oJr,"M2M100Tokenizer"),oJr.forEach(t),Uao=r(Gwe," (M2M100 model)"),Gwe.forEach(t),Jao=i(S),Dg=n(S,"LI",{});var Owe=s(Dg);Aae=n(Owe,"STRONG",{});var rJr=s(Aae);Yao=r(rJr,"marian"),rJr.forEach(t),Kao=r(Owe," \u2014 "),yP=n(Owe,"A",{href:!0});var tJr=s(yP);Zao=r(tJr,"MarianTokenizer"),tJr.forEach(t),eno=r(Owe," (Marian model)"),Owe.forEach(t),ono=i(S),ds=n(S,"LI",{});var M$=s(ds);yae=n(M$,"STRONG",{});var aJr=s(yae);rno=r(aJr,"mbart"),aJr.forEach(t),tno=r(M$," \u2014 "),LP=n(M$,"A",{href:!0});var nJr=s(LP);ano=r(nJr,"MBartTokenizer"),nJr.forEach(t),nno=r(M$," or "),xP=n(M$,"A",{href:!0});var sJr=s(xP);sno=r(sJr,"MBartTokenizerFast"),sJr.forEach(t),lno=r(M$," (mBART model)"),M$.forEach(t),ino=i(S),cs=n(S,"LI",{});var E$=s(cs);Lae=n(E$,"STRONG",{});var lJr=s(Lae);dno=r(lJr,"mbart50"),lJr.forEach(t),cno=r(E$," \u2014 "),$P=n(E$,"A",{href:!0});var iJr=s($P);fno=r(iJr,"MBart50Tokenizer"),iJr.forEach(t),mno=r(E$," or "),kP=n(E$,"A",{href:!0});var dJr=s(kP);gno=r(dJr,"MBart50TokenizerFast"),dJr.forEach(t),hno=r(E$," (mBART-50 model)"),E$.forEach(t),pno=i(S),fs=n(S,"LI",{});var C$=s(fs);xae=n(C$,"STRONG",{});var cJr=s(xae);_no=r(cJr,"megatron-bert"),cJr.forEach(t),uno=r(C$," \u2014 "),SP=n(C$,"A",{href:!0});var fJr=s(SP);bno=r(fJr,"BertTokenizer"),fJr.forEach(t),vno=r(C$," or "),RP=n(C$,"A",{href:!0});var mJr=s(RP);Fno=r(mJr,"BertTokenizerFast"),mJr.forEach(t),Tno=r(C$," (MegatronBert model)"),C$.forEach(t),Mno=i(S),Gg=n(S,"LI",{});var Vwe=s(Gg);$ae=n(Vwe,"STRONG",{});var gJr=s($ae);Eno=r(gJr,"mluke"),gJr.forEach(t),Cno=r(Vwe," \u2014 "),PP=n(Vwe,"A",{href:!0});var hJr=s(PP);wno=r(hJr,"MLukeTokenizer"),hJr.forEach(t),Ano=r(Vwe," (mLUKE model)"),Vwe.forEach(t),yno=i(S),ms=n(S,"LI",{});var w$=s(ms);kae=n(w$,"STRONG",{});var pJr=s(kae);Lno=r(pJr,"mobilebert"),pJr.forEach(t),xno=r(w$," \u2014 "),BP=n(w$,"A",{href:!0});var _Jr=s(BP);$no=r(_Jr,"MobileBertTokenizer"),_Jr.forEach(t),kno=r(w$," or "),IP=n(w$,"A",{href:!0});var uJr=s(IP);Sno=r(uJr,"MobileBertTokenizerFast"),uJr.forEach(t),Rno=r(w$," (MobileBERT model)"),w$.forEach(t),Pno=i(S),gs=n(S,"LI",{});var A$=s(gs);Sae=n(A$,"STRONG",{});var bJr=s(Sae);Bno=r(bJr,"mpnet"),bJr.forEach(t),Ino=r(A$," \u2014 "),NP=n(A$,"A",{href:!0});var vJr=s(NP);Nno=r(vJr,"MPNetTokenizer"),vJr.forEach(t),qno=r(A$," or "),qP=n(A$,"A",{href:!0});var FJr=s(qP);jno=r(FJr,"MPNetTokenizerFast"),FJr.forEach(t),Dno=r(A$," (MPNet model)"),A$.forEach(t),Gno=i(S),hs=n(S,"LI",{});var y$=s(hs);Rae=n(y$,"STRONG",{});var TJr=s(Rae);Ono=r(TJr,"mt5"),TJr.forEach(t),Vno=r(y$," \u2014 "),jP=n(y$,"A",{href:!0});var MJr=s(jP);Xno=r(MJr,"MT5Tokenizer"),MJr.forEach(t),zno=r(y$," or "),DP=n(y$,"A",{href:!0});var EJr=s(DP);Wno=r(EJr,"MT5TokenizerFast"),EJr.forEach(t),Qno=r(y$," (mT5 model)"),y$.forEach(t),Hno=i(S),ps=n(S,"LI",{});var L$=s(ps);Pae=n(L$,"STRONG",{});var CJr=s(Pae);Uno=r(CJr,"nystromformer"),CJr.forEach(t),Jno=r(L$," \u2014 "),GP=n(L$,"A",{href:!0});var wJr=s(GP);Yno=r(wJr,"AlbertTokenizer"),wJr.forEach(t),Kno=r(L$," or "),OP=n(L$,"A",{href:!0});var AJr=s(OP);Zno=r(AJr,"AlbertTokenizerFast"),AJr.forEach(t),eso=r(L$," (Nystromformer model)"),L$.forEach(t),oso=i(S),_s=n(S,"LI",{});var x$=s(_s);Bae=n(x$,"STRONG",{});var yJr=s(Bae);rso=r(yJr,"openai-gpt"),yJr.forEach(t),tso=r(x$," \u2014 "),VP=n(x$,"A",{href:!0});var LJr=s(VP);aso=r(LJr,"OpenAIGPTTokenizer"),LJr.forEach(t),nso=r(x$," or "),XP=n(x$,"A",{href:!0});var xJr=s(XP);sso=r(xJr,"OpenAIGPTTokenizerFast"),xJr.forEach(t),lso=r(x$," (OpenAI GPT model)"),x$.forEach(t),iso=i(S),Og=n(S,"LI",{});var Xwe=s(Og);Iae=n(Xwe,"STRONG",{});var $Jr=s(Iae);dso=r($Jr,"opt"),$Jr.forEach(t),cso=r(Xwe," \u2014 "),zP=n(Xwe,"A",{href:!0});var kJr=s(zP);fso=r(kJr,"GPT2Tokenizer"),kJr.forEach(t),mso=r(Xwe," (OPT model)"),Xwe.forEach(t),gso=i(S),us=n(S,"LI",{});var $$=s(us);Nae=n($$,"STRONG",{});var SJr=s(Nae);hso=r(SJr,"pegasus"),SJr.forEach(t),pso=r($$," \u2014 "),WP=n($$,"A",{href:!0});var RJr=s(WP);_so=r(RJr,"PegasusTokenizer"),RJr.forEach(t),uso=r($$," or "),QP=n($$,"A",{href:!0});var PJr=s(QP);bso=r(PJr,"PegasusTokenizerFast"),PJr.forEach(t),vso=r($$," (Pegasus model)"),$$.forEach(t),Fso=i(S),Vg=n(S,"LI",{});var zwe=s(Vg);qae=n(zwe,"STRONG",{});var BJr=s(qae);Tso=r(BJr,"perceiver"),BJr.forEach(t),Mso=r(zwe," \u2014 "),HP=n(zwe,"A",{href:!0});var IJr=s(HP);Eso=r(IJr,"PerceiverTokenizer"),IJr.forEach(t),Cso=r(zwe," (Perceiver model)"),zwe.forEach(t),wso=i(S),Xg=n(S,"LI",{});var Wwe=s(Xg);jae=n(Wwe,"STRONG",{});var NJr=s(jae);Aso=r(NJr,"phobert"),NJr.forEach(t),yso=r(Wwe," \u2014 "),UP=n(Wwe,"A",{href:!0});var qJr=s(UP);Lso=r(qJr,"PhobertTokenizer"),qJr.forEach(t),xso=r(Wwe," (PhoBERT model)"),Wwe.forEach(t),$so=i(S),zg=n(S,"LI",{});var Qwe=s(zg);Dae=n(Qwe,"STRONG",{});var jJr=s(Dae);kso=r(jJr,"plbart"),jJr.forEach(t),Sso=r(Qwe," \u2014 "),JP=n(Qwe,"A",{href:!0});var DJr=s(JP);Rso=r(DJr,"PLBartTokenizer"),DJr.forEach(t),Pso=r(Qwe," (PLBart model)"),Qwe.forEach(t),Bso=i(S),Wg=n(S,"LI",{});var Hwe=s(Wg);Gae=n(Hwe,"STRONG",{});var GJr=s(Gae);Iso=r(GJr,"prophetnet"),GJr.forEach(t),Nso=r(Hwe," \u2014 "),YP=n(Hwe,"A",{href:!0});var OJr=s(YP);qso=r(OJr,"ProphetNetTokenizer"),OJr.forEach(t),jso=r(Hwe," (ProphetNet model)"),Hwe.forEach(t),Dso=i(S),bs=n(S,"LI",{});var k$=s(bs);Oae=n(k$,"STRONG",{});var VJr=s(Oae);Gso=r(VJr,"qdqbert"),VJr.forEach(t),Oso=r(k$," \u2014 "),KP=n(k$,"A",{href:!0});var XJr=s(KP);Vso=r(XJr,"BertTokenizer"),XJr.forEach(t),Xso=r(k$," or "),ZP=n(k$,"A",{href:!0});var zJr=s(ZP);zso=r(zJr,"BertTokenizerFast"),zJr.forEach(t),Wso=r(k$," (QDQBert model)"),k$.forEach(t),Qso=i(S),Qg=n(S,"LI",{});var Uwe=s(Qg);Vae=n(Uwe,"STRONG",{});var WJr=s(Vae);Hso=r(WJr,"rag"),WJr.forEach(t),Uso=r(Uwe," \u2014 "),eB=n(Uwe,"A",{href:!0});var QJr=s(eB);Jso=r(QJr,"RagTokenizer"),QJr.forEach(t),Yso=r(Uwe," (RAG model)"),Uwe.forEach(t),Kso=i(S),vs=n(S,"LI",{});var S$=s(vs);Xae=n(S$,"STRONG",{});var HJr=s(Xae);Zso=r(HJr,"realm"),HJr.forEach(t),elo=r(S$," \u2014 "),oB=n(S$,"A",{href:!0});var UJr=s(oB);olo=r(UJr,"RealmTokenizer"),UJr.forEach(t),rlo=r(S$," or "),rB=n(S$,"A",{href:!0});var JJr=s(rB);tlo=r(JJr,"RealmTokenizerFast"),JJr.forEach(t),alo=r(S$," (Realm model)"),S$.forEach(t),nlo=i(S),Fs=n(S,"LI",{});var R$=s(Fs);zae=n(R$,"STRONG",{});var YJr=s(zae);slo=r(YJr,"reformer"),YJr.forEach(t),llo=r(R$," \u2014 "),tB=n(R$,"A",{href:!0});var KJr=s(tB);ilo=r(KJr,"ReformerTokenizer"),KJr.forEach(t),dlo=r(R$," or "),aB=n(R$,"A",{href:!0});var ZJr=s(aB);clo=r(ZJr,"ReformerTokenizerFast"),ZJr.forEach(t),flo=r(R$," (Reformer model)"),R$.forEach(t),mlo=i(S),Ts=n(S,"LI",{});var P$=s(Ts);Wae=n(P$,"STRONG",{});var eYr=s(Wae);glo=r(eYr,"rembert"),eYr.forEach(t),hlo=r(P$," \u2014 "),nB=n(P$,"A",{href:!0});var oYr=s(nB);plo=r(oYr,"RemBertTokenizer"),oYr.forEach(t),_lo=r(P$," or "),sB=n(P$,"A",{href:!0});var rYr=s(sB);ulo=r(rYr,"RemBertTokenizerFast"),rYr.forEach(t),blo=r(P$," (RemBERT model)"),P$.forEach(t),vlo=i(S),Ms=n(S,"LI",{});var B$=s(Ms);Qae=n(B$,"STRONG",{});var tYr=s(Qae);Flo=r(tYr,"retribert"),tYr.forEach(t),Tlo=r(B$," \u2014 "),lB=n(B$,"A",{href:!0});var aYr=s(lB);Mlo=r(aYr,"RetriBertTokenizer"),aYr.forEach(t),Elo=r(B$," or "),iB=n(B$,"A",{href:!0});var nYr=s(iB);Clo=r(nYr,"RetriBertTokenizerFast"),nYr.forEach(t),wlo=r(B$," (RetriBERT model)"),B$.forEach(t),Alo=i(S),Es=n(S,"LI",{});var I$=s(Es);Hae=n(I$,"STRONG",{});var sYr=s(Hae);ylo=r(sYr,"roberta"),sYr.forEach(t),Llo=r(I$," \u2014 "),dB=n(I$,"A",{href:!0});var lYr=s(dB);xlo=r(lYr,"RobertaTokenizer"),lYr.forEach(t),$lo=r(I$," or "),cB=n(I$,"A",{href:!0});var iYr=s(cB);klo=r(iYr,"RobertaTokenizerFast"),iYr.forEach(t),Slo=r(I$," (RoBERTa model)"),I$.forEach(t),Rlo=i(S),Cs=n(S,"LI",{});var N$=s(Cs);Uae=n(N$,"STRONG",{});var dYr=s(Uae);Plo=r(dYr,"roformer"),dYr.forEach(t),Blo=r(N$," \u2014 "),fB=n(N$,"A",{href:!0});var cYr=s(fB);Ilo=r(cYr,"RoFormerTokenizer"),cYr.forEach(t),Nlo=r(N$," or "),mB=n(N$,"A",{href:!0});var fYr=s(mB);qlo=r(fYr,"RoFormerTokenizerFast"),fYr.forEach(t),jlo=r(N$," (RoFormer model)"),N$.forEach(t),Dlo=i(S),Hg=n(S,"LI",{});var Jwe=s(Hg);Jae=n(Jwe,"STRONG",{});var mYr=s(Jae);Glo=r(mYr,"speech_to_text"),mYr.forEach(t),Olo=r(Jwe," \u2014 "),gB=n(Jwe,"A",{href:!0});var gYr=s(gB);Vlo=r(gYr,"Speech2TextTokenizer"),gYr.forEach(t),Xlo=r(Jwe," (Speech2Text model)"),Jwe.forEach(t),zlo=i(S),Ug=n(S,"LI",{});var Ywe=s(Ug);Yae=n(Ywe,"STRONG",{});var hYr=s(Yae);Wlo=r(hYr,"speech_to_text_2"),hYr.forEach(t),Qlo=r(Ywe," \u2014 "),hB=n(Ywe,"A",{href:!0});var pYr=s(hB);Hlo=r(pYr,"Speech2Text2Tokenizer"),pYr.forEach(t),Ulo=r(Ywe," (Speech2Text2 model)"),Ywe.forEach(t),Jlo=i(S),ws=n(S,"LI",{});var q$=s(ws);Kae=n(q$,"STRONG",{});var _Yr=s(Kae);Ylo=r(_Yr,"splinter"),_Yr.forEach(t),Klo=r(q$," \u2014 "),pB=n(q$,"A",{href:!0});var uYr=s(pB);Zlo=r(uYr,"SplinterTokenizer"),uYr.forEach(t),eio=r(q$," or "),_B=n(q$,"A",{href:!0});var bYr=s(_B);oio=r(bYr,"SplinterTokenizerFast"),bYr.forEach(t),rio=r(q$," (Splinter model)"),q$.forEach(t),tio=i(S),As=n(S,"LI",{});var j$=s(As);Zae=n(j$,"STRONG",{});var vYr=s(Zae);aio=r(vYr,"squeezebert"),vYr.forEach(t),nio=r(j$," \u2014 "),uB=n(j$,"A",{href:!0});var FYr=s(uB);sio=r(FYr,"SqueezeBertTokenizer"),FYr.forEach(t),lio=r(j$," or "),bB=n(j$,"A",{href:!0});var TYr=s(bB);iio=r(TYr,"SqueezeBertTokenizerFast"),TYr.forEach(t),dio=r(j$," (SqueezeBERT model)"),j$.forEach(t),cio=i(S),ys=n(S,"LI",{});var D$=s(ys);ene=n(D$,"STRONG",{});var MYr=s(ene);fio=r(MYr,"t5"),MYr.forEach(t),mio=r(D$," \u2014 "),vB=n(D$,"A",{href:!0});var EYr=s(vB);gio=r(EYr,"T5Tokenizer"),EYr.forEach(t),hio=r(D$," or "),FB=n(D$,"A",{href:!0});var CYr=s(FB);pio=r(CYr,"T5TokenizerFast"),CYr.forEach(t),_io=r(D$," (T5 model)"),D$.forEach(t),uio=i(S),Jg=n(S,"LI",{});var Kwe=s(Jg);one=n(Kwe,"STRONG",{});var wYr=s(one);bio=r(wYr,"tapas"),wYr.forEach(t),vio=r(Kwe," \u2014 "),TB=n(Kwe,"A",{href:!0});var AYr=s(TB);Fio=r(AYr,"TapasTokenizer"),AYr.forEach(t),Tio=r(Kwe," (TAPAS model)"),Kwe.forEach(t),Mio=i(S),Yg=n(S,"LI",{});var Zwe=s(Yg);rne=n(Zwe,"STRONG",{});var yYr=s(rne);Eio=r(yYr,"tapex"),yYr.forEach(t),Cio=r(Zwe," \u2014 "),MB=n(Zwe,"A",{href:!0});var LYr=s(MB);wio=r(LYr,"TapexTokenizer"),LYr.forEach(t),Aio=r(Zwe," (TAPEX model)"),Zwe.forEach(t),yio=i(S),Kg=n(S,"LI",{});var e6e=s(Kg);tne=n(e6e,"STRONG",{});var xYr=s(tne);Lio=r(xYr,"transfo-xl"),xYr.forEach(t),xio=r(e6e," \u2014 "),EB=n(e6e,"A",{href:!0});var $Yr=s(EB);$io=r($Yr,"TransfoXLTokenizer"),$Yr.forEach(t),kio=r(e6e," (Transformer-XL model)"),e6e.forEach(t),Sio=i(S),Ls=n(S,"LI",{});var G$=s(Ls);ane=n(G$,"STRONG",{});var kYr=s(ane);Rio=r(kYr,"visual_bert"),kYr.forEach(t),Pio=r(G$," \u2014 "),CB=n(G$,"A",{href:!0});var SYr=s(CB);Bio=r(SYr,"BertTokenizer"),SYr.forEach(t),Iio=r(G$," or "),wB=n(G$,"A",{href:!0});var RYr=s(wB);Nio=r(RYr,"BertTokenizerFast"),RYr.forEach(t),qio=r(G$," (VisualBert model)"),G$.forEach(t),jio=i(S),Zg=n(S,"LI",{});var o6e=s(Zg);nne=n(o6e,"STRONG",{});var PYr=s(nne);Dio=r(PYr,"wav2vec2"),PYr.forEach(t),Gio=r(o6e," \u2014 "),AB=n(o6e,"A",{href:!0});var BYr=s(AB);Oio=r(BYr,"Wav2Vec2CTCTokenizer"),BYr.forEach(t),Vio=r(o6e," (Wav2Vec2 model)"),o6e.forEach(t),Xio=i(S),eh=n(S,"LI",{});var r6e=s(eh);sne=n(r6e,"STRONG",{});var IYr=s(sne);zio=r(IYr,"wav2vec2-conformer"),IYr.forEach(t),Wio=r(r6e," \u2014 "),yB=n(r6e,"A",{href:!0});var NYr=s(yB);Qio=r(NYr,"Wav2Vec2CTCTokenizer"),NYr.forEach(t),Hio=r(r6e," (Wav2Vec2-Conformer model)"),r6e.forEach(t),Uio=i(S),oh=n(S,"LI",{});var t6e=s(oh);lne=n(t6e,"STRONG",{});var qYr=s(lne);Jio=r(qYr,"wav2vec2_phoneme"),qYr.forEach(t),Yio=r(t6e," \u2014 "),LB=n(t6e,"A",{href:!0});var jYr=s(LB);Kio=r(jYr,"Wav2Vec2PhonemeCTCTokenizer"),jYr.forEach(t),Zio=r(t6e," (Wav2Vec2Phoneme model)"),t6e.forEach(t),edo=i(S),xs=n(S,"LI",{});var O$=s(xs);ine=n(O$,"STRONG",{});var DYr=s(ine);odo=r(DYr,"xglm"),DYr.forEach(t),rdo=r(O$," \u2014 "),xB=n(O$,"A",{href:!0});var GYr=s(xB);tdo=r(GYr,"XGLMTokenizer"),GYr.forEach(t),ado=r(O$," or "),$B=n(O$,"A",{href:!0});var OYr=s($B);ndo=r(OYr,"XGLMTokenizerFast"),OYr.forEach(t),sdo=r(O$," (XGLM model)"),O$.forEach(t),ldo=i(S),rh=n(S,"LI",{});var a6e=s(rh);dne=n(a6e,"STRONG",{});var VYr=s(dne);ido=r(VYr,"xlm"),VYr.forEach(t),ddo=r(a6e," \u2014 "),kB=n(a6e,"A",{href:!0});var XYr=s(kB);cdo=r(XYr,"XLMTokenizer"),XYr.forEach(t),fdo=r(a6e," (XLM model)"),a6e.forEach(t),mdo=i(S),th=n(S,"LI",{});var n6e=s(th);cne=n(n6e,"STRONG",{});var zYr=s(cne);gdo=r(zYr,"xlm-prophetnet"),zYr.forEach(t),hdo=r(n6e," \u2014 "),SB=n(n6e,"A",{href:!0});var WYr=s(SB);pdo=r(WYr,"XLMProphetNetTokenizer"),WYr.forEach(t),_do=r(n6e," (XLMProphetNet model)"),n6e.forEach(t),udo=i(S),$s=n(S,"LI",{});var V$=s($s);fne=n(V$,"STRONG",{});var QYr=s(fne);bdo=r(QYr,"xlm-roberta"),QYr.forEach(t),vdo=r(V$," \u2014 "),RB=n(V$,"A",{href:!0});var HYr=s(RB);Fdo=r(HYr,"XLMRobertaTokenizer"),HYr.forEach(t),Tdo=r(V$," or "),PB=n(V$,"A",{href:!0});var UYr=s(PB);Mdo=r(UYr,"XLMRobertaTokenizerFast"),UYr.forEach(t),Edo=r(V$," (XLM-RoBERTa model)"),V$.forEach(t),Cdo=i(S),ks=n(S,"LI",{});var X$=s(ks);mne=n(X$,"STRONG",{});var JYr=s(mne);wdo=r(JYr,"xlm-roberta-xl"),JYr.forEach(t),Ado=r(X$," \u2014 "),BB=n(X$,"A",{href:!0});var YYr=s(BB);ydo=r(YYr,"RobertaTokenizer"),YYr.forEach(t),Ldo=r(X$," or "),IB=n(X$,"A",{href:!0});var KYr=s(IB);xdo=r(KYr,"RobertaTokenizerFast"),KYr.forEach(t),$do=r(X$," (XLM-RoBERTa-XL model)"),X$.forEach(t),kdo=i(S),Ss=n(S,"LI",{});var z$=s(Ss);gne=n(z$,"STRONG",{});var ZYr=s(gne);Sdo=r(ZYr,"xlnet"),ZYr.forEach(t),Rdo=r(z$," \u2014 "),NB=n(z$,"A",{href:!0});var eKr=s(NB);Pdo=r(eKr,"XLNetTokenizer"),eKr.forEach(t),Bdo=r(z$," or "),qB=n(z$,"A",{href:!0});var oKr=s(qB);Ido=r(oKr,"XLNetTokenizerFast"),oKr.forEach(t),Ndo=r(z$," (XLNet model)"),z$.forEach(t),qdo=i(S),Rs=n(S,"LI",{});var W$=s(Rs);hne=n(W$,"STRONG",{});var rKr=s(hne);jdo=r(rKr,"yoso"),rKr.forEach(t),Ddo=r(W$," \u2014 "),jB=n(W$,"A",{href:!0});var tKr=s(jB);Gdo=r(tKr,"AlbertTokenizer"),tKr.forEach(t),Odo=r(W$," or "),DB=n(W$,"A",{href:!0});var aKr=s(DB);Vdo=r(aKr,"AlbertTokenizerFast"),aKr.forEach(t),Xdo=r(W$," (YOSO model)"),W$.forEach(t),S.forEach(t),zdo=i(qs),T(ah.$$.fragment,qs),qs.forEach(t),Wdo=i(Ns),nh=n(Ns,"DIV",{class:!0});var ADe=s(nh);T(zA.$$.fragment,ADe),Qdo=i(ADe),pne=n(ADe,"P",{});var nKr=s(pne);Hdo=r(nKr,"Register a new tokenizer in this mapping."),nKr.forEach(t),ADe.forEach(t),Ns.forEach(t),yqe=i(f),Mi=n(f,"H2",{class:!0});var yDe=s(Mi);sh=n(yDe,"A",{id:!0,class:!0,href:!0});var sKr=s(sh);_ne=n(sKr,"SPAN",{});var lKr=s(_ne);T(WA.$$.fragment,lKr),lKr.forEach(t),sKr.forEach(t),Udo=i(yDe),une=n(yDe,"SPAN",{});var iKr=s(une);Jdo=r(iKr,"AutoFeatureExtractor"),iKr.forEach(t),yDe.forEach(t),Lqe=i(f),Ao=n(f,"DIV",{class:!0});var js=s(Ao);T(QA.$$.fragment,js),Ydo=i(js),HA=n(js,"P",{});var LDe=s(HA);Kdo=r(LDe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),GB=n(LDe,"A",{href:!0});var dKr=s(GB);Zdo=r(dKr,"AutoFeatureExtractor.from_pretrained()"),dKr.forEach(t),eco=r(LDe," class method."),LDe.forEach(t),oco=i(js),UA=n(js,"P",{});var xDe=s(UA);rco=r(xDe,"This class cannot be instantiated directly using "),bne=n(xDe,"CODE",{});var cKr=s(bne);tco=r(cKr,"__init__()"),cKr.forEach(t),aco=r(xDe," (throws an error)."),xDe.forEach(t),nco=i(js),He=n(js,"DIV",{class:!0});var Zt=s(He);T(JA.$$.fragment,Zt),sco=i(Zt),vne=n(Zt,"P",{});var fKr=s(vne);lco=r(fKr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),fKr.forEach(t),ico=i(Zt),ya=n(Zt,"P",{});var Bw=s(ya);dco=r(Bw,"The feature extractor class to instantiate is selected based on the "),Fne=n(Bw,"CODE",{});var mKr=s(Fne);cco=r(mKr,"model_type"),mKr.forEach(t),fco=r(Bw,` property of the config object
(either passed as an argument or loaded from `),Tne=n(Bw,"CODE",{});var gKr=s(Tne);mco=r(gKr,"pretrained_model_name_or_path"),gKr.forEach(t),gco=r(Bw,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Mne=n(Bw,"CODE",{});var hKr=s(Mne);hco=r(hKr,"pretrained_model_name_or_path"),hKr.forEach(t),pco=r(Bw,":"),Bw.forEach(t),_co=i(Zt),Y=n(Zt,"UL",{});var Z=s(Y);lh=n(Z,"LI",{});var s6e=s(lh);Ene=n(s6e,"STRONG",{});var pKr=s(Ene);uco=r(pKr,"beit"),pKr.forEach(t),bco=r(s6e," \u2014 "),OB=n(s6e,"A",{href:!0});var _Kr=s(OB);vco=r(_Kr,"BeitFeatureExtractor"),_Kr.forEach(t),Fco=r(s6e," (BEiT model)"),s6e.forEach(t),Tco=i(Z),ih=n(Z,"LI",{});var l6e=s(ih);Cne=n(l6e,"STRONG",{});var uKr=s(Cne);Mco=r(uKr,"clip"),uKr.forEach(t),Eco=r(l6e," \u2014 "),VB=n(l6e,"A",{href:!0});var bKr=s(VB);Cco=r(bKr,"CLIPFeatureExtractor"),bKr.forEach(t),wco=r(l6e," (CLIP model)"),l6e.forEach(t),Aco=i(Z),dh=n(Z,"LI",{});var i6e=s(dh);wne=n(i6e,"STRONG",{});var vKr=s(wne);yco=r(vKr,"convnext"),vKr.forEach(t),Lco=r(i6e," \u2014 "),XB=n(i6e,"A",{href:!0});var FKr=s(XB);xco=r(FKr,"ConvNextFeatureExtractor"),FKr.forEach(t),$co=r(i6e," (ConvNext model)"),i6e.forEach(t),kco=i(Z),ch=n(Z,"LI",{});var d6e=s(ch);Ane=n(d6e,"STRONG",{});var TKr=s(Ane);Sco=r(TKr,"cvt"),TKr.forEach(t),Rco=r(d6e," \u2014 "),zB=n(d6e,"A",{href:!0});var MKr=s(zB);Pco=r(MKr,"ConvNextFeatureExtractor"),MKr.forEach(t),Bco=r(d6e," (CvT model)"),d6e.forEach(t),Ico=i(Z),fh=n(Z,"LI",{});var c6e=s(fh);yne=n(c6e,"STRONG",{});var EKr=s(yne);Nco=r(EKr,"data2vec-audio"),EKr.forEach(t),qco=r(c6e," \u2014 "),WB=n(c6e,"A",{href:!0});var CKr=s(WB);jco=r(CKr,"Wav2Vec2FeatureExtractor"),CKr.forEach(t),Dco=r(c6e," (Data2VecAudio model)"),c6e.forEach(t),Gco=i(Z),mh=n(Z,"LI",{});var f6e=s(mh);Lne=n(f6e,"STRONG",{});var wKr=s(Lne);Oco=r(wKr,"data2vec-vision"),wKr.forEach(t),Vco=r(f6e," \u2014 "),QB=n(f6e,"A",{href:!0});var AKr=s(QB);Xco=r(AKr,"BeitFeatureExtractor"),AKr.forEach(t),zco=r(f6e," (Data2VecVision model)"),f6e.forEach(t),Wco=i(Z),gh=n(Z,"LI",{});var m6e=s(gh);xne=n(m6e,"STRONG",{});var yKr=s(xne);Qco=r(yKr,"deit"),yKr.forEach(t),Hco=r(m6e," \u2014 "),HB=n(m6e,"A",{href:!0});var LKr=s(HB);Uco=r(LKr,"DeiTFeatureExtractor"),LKr.forEach(t),Jco=r(m6e," (DeiT model)"),m6e.forEach(t),Yco=i(Z),hh=n(Z,"LI",{});var g6e=s(hh);$ne=n(g6e,"STRONG",{});var xKr=s($ne);Kco=r(xKr,"detr"),xKr.forEach(t),Zco=r(g6e," \u2014 "),UB=n(g6e,"A",{href:!0});var $Kr=s(UB);efo=r($Kr,"DetrFeatureExtractor"),$Kr.forEach(t),ofo=r(g6e," (DETR model)"),g6e.forEach(t),rfo=i(Z),ph=n(Z,"LI",{});var h6e=s(ph);kne=n(h6e,"STRONG",{});var kKr=s(kne);tfo=r(kKr,"dpt"),kKr.forEach(t),afo=r(h6e," \u2014 "),JB=n(h6e,"A",{href:!0});var SKr=s(JB);nfo=r(SKr,"DPTFeatureExtractor"),SKr.forEach(t),sfo=r(h6e," (DPT model)"),h6e.forEach(t),lfo=i(Z),_h=n(Z,"LI",{});var p6e=s(_h);Sne=n(p6e,"STRONG",{});var RKr=s(Sne);ifo=r(RKr,"flava"),RKr.forEach(t),dfo=r(p6e," \u2014 "),YB=n(p6e,"A",{href:!0});var PKr=s(YB);cfo=r(PKr,"FlavaFeatureExtractor"),PKr.forEach(t),ffo=r(p6e," (Flava model)"),p6e.forEach(t),mfo=i(Z),uh=n(Z,"LI",{});var _6e=s(uh);Rne=n(_6e,"STRONG",{});var BKr=s(Rne);gfo=r(BKr,"glpn"),BKr.forEach(t),hfo=r(_6e," \u2014 "),KB=n(_6e,"A",{href:!0});var IKr=s(KB);pfo=r(IKr,"GLPNFeatureExtractor"),IKr.forEach(t),_fo=r(_6e," (GLPN model)"),_6e.forEach(t),ufo=i(Z),bh=n(Z,"LI",{});var u6e=s(bh);Pne=n(u6e,"STRONG",{});var NKr=s(Pne);bfo=r(NKr,"hubert"),NKr.forEach(t),vfo=r(u6e," \u2014 "),ZB=n(u6e,"A",{href:!0});var qKr=s(ZB);Ffo=r(qKr,"Wav2Vec2FeatureExtractor"),qKr.forEach(t),Tfo=r(u6e," (Hubert model)"),u6e.forEach(t),Mfo=i(Z),vh=n(Z,"LI",{});var b6e=s(vh);Bne=n(b6e,"STRONG",{});var jKr=s(Bne);Efo=r(jKr,"imagegpt"),jKr.forEach(t),Cfo=r(b6e," \u2014 "),eI=n(b6e,"A",{href:!0});var DKr=s(eI);wfo=r(DKr,"ImageGPTFeatureExtractor"),DKr.forEach(t),Afo=r(b6e," (ImageGPT model)"),b6e.forEach(t),yfo=i(Z),Fh=n(Z,"LI",{});var v6e=s(Fh);Ine=n(v6e,"STRONG",{});var GKr=s(Ine);Lfo=r(GKr,"layoutlmv2"),GKr.forEach(t),xfo=r(v6e," \u2014 "),oI=n(v6e,"A",{href:!0});var OKr=s(oI);$fo=r(OKr,"LayoutLMv2FeatureExtractor"),OKr.forEach(t),kfo=r(v6e," (LayoutLMv2 model)"),v6e.forEach(t),Sfo=i(Z),Th=n(Z,"LI",{});var F6e=s(Th);Nne=n(F6e,"STRONG",{});var VKr=s(Nne);Rfo=r(VKr,"layoutlmv3"),VKr.forEach(t),Pfo=r(F6e," \u2014 "),rI=n(F6e,"A",{href:!0});var XKr=s(rI);Bfo=r(XKr,"LayoutLMv3FeatureExtractor"),XKr.forEach(t),Ifo=r(F6e," (LayoutLMv3 model)"),F6e.forEach(t),Nfo=i(Z),Mh=n(Z,"LI",{});var T6e=s(Mh);qne=n(T6e,"STRONG",{});var zKr=s(qne);qfo=r(zKr,"maskformer"),zKr.forEach(t),jfo=r(T6e," \u2014 "),tI=n(T6e,"A",{href:!0});var WKr=s(tI);Dfo=r(WKr,"MaskFormerFeatureExtractor"),WKr.forEach(t),Gfo=r(T6e," (MaskFormer model)"),T6e.forEach(t),Ofo=i(Z),Eh=n(Z,"LI",{});var M6e=s(Eh);jne=n(M6e,"STRONG",{});var QKr=s(jne);Vfo=r(QKr,"perceiver"),QKr.forEach(t),Xfo=r(M6e," \u2014 "),aI=n(M6e,"A",{href:!0});var HKr=s(aI);zfo=r(HKr,"PerceiverFeatureExtractor"),HKr.forEach(t),Wfo=r(M6e," (Perceiver model)"),M6e.forEach(t),Qfo=i(Z),Ch=n(Z,"LI",{});var E6e=s(Ch);Dne=n(E6e,"STRONG",{});var UKr=s(Dne);Hfo=r(UKr,"poolformer"),UKr.forEach(t),Ufo=r(E6e," \u2014 "),nI=n(E6e,"A",{href:!0});var JKr=s(nI);Jfo=r(JKr,"PoolFormerFeatureExtractor"),JKr.forEach(t),Yfo=r(E6e," (PoolFormer model)"),E6e.forEach(t),Kfo=i(Z),wh=n(Z,"LI",{});var C6e=s(wh);Gne=n(C6e,"STRONG",{});var YKr=s(Gne);Zfo=r(YKr,"regnet"),YKr.forEach(t),emo=r(C6e," \u2014 "),sI=n(C6e,"A",{href:!0});var KKr=s(sI);omo=r(KKr,"ConvNextFeatureExtractor"),KKr.forEach(t),rmo=r(C6e," (RegNet model)"),C6e.forEach(t),tmo=i(Z),Ah=n(Z,"LI",{});var w6e=s(Ah);One=n(w6e,"STRONG",{});var ZKr=s(One);amo=r(ZKr,"resnet"),ZKr.forEach(t),nmo=r(w6e," \u2014 "),lI=n(w6e,"A",{href:!0});var eZr=s(lI);smo=r(eZr,"ConvNextFeatureExtractor"),eZr.forEach(t),lmo=r(w6e," (ResNet model)"),w6e.forEach(t),imo=i(Z),yh=n(Z,"LI",{});var A6e=s(yh);Vne=n(A6e,"STRONG",{});var oZr=s(Vne);dmo=r(oZr,"segformer"),oZr.forEach(t),cmo=r(A6e," \u2014 "),iI=n(A6e,"A",{href:!0});var rZr=s(iI);fmo=r(rZr,"SegformerFeatureExtractor"),rZr.forEach(t),mmo=r(A6e," (SegFormer model)"),A6e.forEach(t),gmo=i(Z),Lh=n(Z,"LI",{});var y6e=s(Lh);Xne=n(y6e,"STRONG",{});var tZr=s(Xne);hmo=r(tZr,"speech_to_text"),tZr.forEach(t),pmo=r(y6e," \u2014 "),dI=n(y6e,"A",{href:!0});var aZr=s(dI);_mo=r(aZr,"Speech2TextFeatureExtractor"),aZr.forEach(t),umo=r(y6e," (Speech2Text model)"),y6e.forEach(t),bmo=i(Z),xh=n(Z,"LI",{});var L6e=s(xh);zne=n(L6e,"STRONG",{});var nZr=s(zne);vmo=r(nZr,"swin"),nZr.forEach(t),Fmo=r(L6e," \u2014 "),cI=n(L6e,"A",{href:!0});var sZr=s(cI);Tmo=r(sZr,"ViTFeatureExtractor"),sZr.forEach(t),Mmo=r(L6e," (Swin model)"),L6e.forEach(t),Emo=i(Z),$h=n(Z,"LI",{});var x6e=s($h);Wne=n(x6e,"STRONG",{});var lZr=s(Wne);Cmo=r(lZr,"van"),lZr.forEach(t),wmo=r(x6e," \u2014 "),fI=n(x6e,"A",{href:!0});var iZr=s(fI);Amo=r(iZr,"ConvNextFeatureExtractor"),iZr.forEach(t),ymo=r(x6e," (VAN model)"),x6e.forEach(t),Lmo=i(Z),kh=n(Z,"LI",{});var $6e=s(kh);Qne=n($6e,"STRONG",{});var dZr=s(Qne);xmo=r(dZr,"vit"),dZr.forEach(t),$mo=r($6e," \u2014 "),mI=n($6e,"A",{href:!0});var cZr=s(mI);kmo=r(cZr,"ViTFeatureExtractor"),cZr.forEach(t),Smo=r($6e," (ViT model)"),$6e.forEach(t),Rmo=i(Z),Sh=n(Z,"LI",{});var k6e=s(Sh);Hne=n(k6e,"STRONG",{});var fZr=s(Hne);Pmo=r(fZr,"vit_mae"),fZr.forEach(t),Bmo=r(k6e," \u2014 "),gI=n(k6e,"A",{href:!0});var mZr=s(gI);Imo=r(mZr,"ViTFeatureExtractor"),mZr.forEach(t),Nmo=r(k6e," (ViTMAE model)"),k6e.forEach(t),qmo=i(Z),Rh=n(Z,"LI",{});var S6e=s(Rh);Une=n(S6e,"STRONG",{});var gZr=s(Une);jmo=r(gZr,"wav2vec2"),gZr.forEach(t),Dmo=r(S6e," \u2014 "),hI=n(S6e,"A",{href:!0});var hZr=s(hI);Gmo=r(hZr,"Wav2Vec2FeatureExtractor"),hZr.forEach(t),Omo=r(S6e," (Wav2Vec2 model)"),S6e.forEach(t),Vmo=i(Z),Ph=n(Z,"LI",{});var R6e=s(Ph);Jne=n(R6e,"STRONG",{});var pZr=s(Jne);Xmo=r(pZr,"wav2vec2-conformer"),pZr.forEach(t),zmo=r(R6e," \u2014 "),pI=n(R6e,"A",{href:!0});var _Zr=s(pI);Wmo=r(_Zr,"Wav2Vec2FeatureExtractor"),_Zr.forEach(t),Qmo=r(R6e," (Wav2Vec2-Conformer model)"),R6e.forEach(t),Hmo=i(Z),Bh=n(Z,"LI",{});var P6e=s(Bh);Yne=n(P6e,"STRONG",{});var uZr=s(Yne);Umo=r(uZr,"yolos"),uZr.forEach(t),Jmo=r(P6e," \u2014 "),_I=n(P6e,"A",{href:!0});var bZr=s(_I);Ymo=r(bZr,"YolosFeatureExtractor"),bZr.forEach(t),Kmo=r(P6e," (YOLOS model)"),P6e.forEach(t),Z.forEach(t),Zmo=i(Zt),T(Ih.$$.fragment,Zt),ego=i(Zt),T(Nh.$$.fragment,Zt),Zt.forEach(t),ogo=i(js),qh=n(js,"DIV",{class:!0});var $De=s(qh);T(YA.$$.fragment,$De),rgo=i($De),Kne=n($De,"P",{});var vZr=s(Kne);tgo=r(vZr,"Register a new feature extractor for this class."),vZr.forEach(t),$De.forEach(t),js.forEach(t),xqe=i(f),Ei=n(f,"H2",{class:!0});var kDe=s(Ei);jh=n(kDe,"A",{id:!0,class:!0,href:!0});var FZr=s(jh);Zne=n(FZr,"SPAN",{});var TZr=s(Zne);T(KA.$$.fragment,TZr),TZr.forEach(t),FZr.forEach(t),ago=i(kDe),ese=n(kDe,"SPAN",{});var MZr=s(ese);ngo=r(MZr,"AutoProcessor"),MZr.forEach(t),kDe.forEach(t),$qe=i(f),yo=n(f,"DIV",{class:!0});var Ds=s(yo);T(ZA.$$.fragment,Ds),sgo=i(Ds),ey=n(Ds,"P",{});var SDe=s(ey);lgo=r(SDe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),uI=n(SDe,"A",{href:!0});var EZr=s(uI);igo=r(EZr,"AutoProcessor.from_pretrained()"),EZr.forEach(t),dgo=r(SDe," class method."),SDe.forEach(t),cgo=i(Ds),oy=n(Ds,"P",{});var RDe=s(oy);fgo=r(RDe,"This class cannot be instantiated directly using "),ose=n(RDe,"CODE",{});var CZr=s(ose);mgo=r(CZr,"__init__()"),CZr.forEach(t),ggo=r(RDe," (throws an error)."),RDe.forEach(t),hgo=i(Ds),Ue=n(Ds,"DIV",{class:!0});var ea=s(Ue);T(ry.$$.fragment,ea),pgo=i(ea),rse=n(ea,"P",{});var wZr=s(rse);_go=r(wZr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),wZr.forEach(t),ugo=i(ea),Ci=n(ea,"P",{});var CZ=s(Ci);bgo=r(CZ,"The processor class to instantiate is selected based on the "),tse=n(CZ,"CODE",{});var AZr=s(tse);vgo=r(AZr,"model_type"),AZr.forEach(t),Fgo=r(CZ,` property of the config object (either
passed as an argument or loaded from `),ase=n(CZ,"CODE",{});var yZr=s(ase);Tgo=r(yZr,"pretrained_model_name_or_path"),yZr.forEach(t),Mgo=r(CZ," if possible):"),CZ.forEach(t),Ego=i(ea),he=n(ea,"UL",{});var ue=s(he);Dh=n(ue,"LI",{});var B6e=s(Dh);nse=n(B6e,"STRONG",{});var LZr=s(nse);Cgo=r(LZr,"clip"),LZr.forEach(t),wgo=r(B6e," \u2014 "),bI=n(B6e,"A",{href:!0});var xZr=s(bI);Ago=r(xZr,"CLIPProcessor"),xZr.forEach(t),ygo=r(B6e," (CLIP model)"),B6e.forEach(t),Lgo=i(ue),Gh=n(ue,"LI",{});var I6e=s(Gh);sse=n(I6e,"STRONG",{});var $Zr=s(sse);xgo=r($Zr,"flava"),$Zr.forEach(t),$go=r(I6e," \u2014 "),lse=n(I6e,"CODE",{});var kZr=s(lse);kgo=r(kZr,"FLAVAProcessor"),kZr.forEach(t),Sgo=r(I6e," (Flava model)"),I6e.forEach(t),Rgo=i(ue),Oh=n(ue,"LI",{});var N6e=s(Oh);ise=n(N6e,"STRONG",{});var SZr=s(ise);Pgo=r(SZr,"layoutlmv2"),SZr.forEach(t),Bgo=r(N6e," \u2014 "),vI=n(N6e,"A",{href:!0});var RZr=s(vI);Igo=r(RZr,"LayoutLMv2Processor"),RZr.forEach(t),Ngo=r(N6e," (LayoutLMv2 model)"),N6e.forEach(t),qgo=i(ue),Vh=n(ue,"LI",{});var q6e=s(Vh);dse=n(q6e,"STRONG",{});var PZr=s(dse);jgo=r(PZr,"layoutlmv3"),PZr.forEach(t),Dgo=r(q6e," \u2014 "),FI=n(q6e,"A",{href:!0});var BZr=s(FI);Ggo=r(BZr,"LayoutLMv3Processor"),BZr.forEach(t),Ogo=r(q6e," (LayoutLMv3 model)"),q6e.forEach(t),Vgo=i(ue),Xh=n(ue,"LI",{});var j6e=s(Xh);cse=n(j6e,"STRONG",{});var IZr=s(cse);Xgo=r(IZr,"layoutxlm"),IZr.forEach(t),zgo=r(j6e," \u2014 "),TI=n(j6e,"A",{href:!0});var NZr=s(TI);Wgo=r(NZr,"LayoutXLMProcessor"),NZr.forEach(t),Qgo=r(j6e," (LayoutXLM model)"),j6e.forEach(t),Hgo=i(ue),zh=n(ue,"LI",{});var D6e=s(zh);fse=n(D6e,"STRONG",{});var qZr=s(fse);Ugo=r(qZr,"sew"),qZr.forEach(t),Jgo=r(D6e," \u2014 "),MI=n(D6e,"A",{href:!0});var jZr=s(MI);Ygo=r(jZr,"Wav2Vec2Processor"),jZr.forEach(t),Kgo=r(D6e," (SEW model)"),D6e.forEach(t),Zgo=i(ue),Wh=n(ue,"LI",{});var G6e=s(Wh);mse=n(G6e,"STRONG",{});var DZr=s(mse);eho=r(DZr,"sew-d"),DZr.forEach(t),oho=r(G6e," \u2014 "),EI=n(G6e,"A",{href:!0});var GZr=s(EI);rho=r(GZr,"Wav2Vec2Processor"),GZr.forEach(t),tho=r(G6e," (SEW-D model)"),G6e.forEach(t),aho=i(ue),Qh=n(ue,"LI",{});var O6e=s(Qh);gse=n(O6e,"STRONG",{});var OZr=s(gse);nho=r(OZr,"speech_to_text"),OZr.forEach(t),sho=r(O6e," \u2014 "),CI=n(O6e,"A",{href:!0});var VZr=s(CI);lho=r(VZr,"Speech2TextProcessor"),VZr.forEach(t),iho=r(O6e," (Speech2Text model)"),O6e.forEach(t),dho=i(ue),Hh=n(ue,"LI",{});var V6e=s(Hh);hse=n(V6e,"STRONG",{});var XZr=s(hse);cho=r(XZr,"speech_to_text_2"),XZr.forEach(t),fho=r(V6e," \u2014 "),wI=n(V6e,"A",{href:!0});var zZr=s(wI);mho=r(zZr,"Speech2Text2Processor"),zZr.forEach(t),gho=r(V6e," (Speech2Text2 model)"),V6e.forEach(t),hho=i(ue),Uh=n(ue,"LI",{});var X6e=s(Uh);pse=n(X6e,"STRONG",{});var WZr=s(pse);pho=r(WZr,"trocr"),WZr.forEach(t),_ho=r(X6e," \u2014 "),AI=n(X6e,"A",{href:!0});var QZr=s(AI);uho=r(QZr,"TrOCRProcessor"),QZr.forEach(t),bho=r(X6e," (TrOCR model)"),X6e.forEach(t),vho=i(ue),Jh=n(ue,"LI",{});var z6e=s(Jh);_se=n(z6e,"STRONG",{});var HZr=s(_se);Fho=r(HZr,"unispeech"),HZr.forEach(t),Tho=r(z6e," \u2014 "),yI=n(z6e,"A",{href:!0});var UZr=s(yI);Mho=r(UZr,"Wav2Vec2Processor"),UZr.forEach(t),Eho=r(z6e," (UniSpeech model)"),z6e.forEach(t),Cho=i(ue),Yh=n(ue,"LI",{});var W6e=s(Yh);use=n(W6e,"STRONG",{});var JZr=s(use);who=r(JZr,"unispeech-sat"),JZr.forEach(t),Aho=r(W6e," \u2014 "),LI=n(W6e,"A",{href:!0});var YZr=s(LI);yho=r(YZr,"Wav2Vec2Processor"),YZr.forEach(t),Lho=r(W6e," (UniSpeechSat model)"),W6e.forEach(t),xho=i(ue),Kh=n(ue,"LI",{});var Q6e=s(Kh);bse=n(Q6e,"STRONG",{});var KZr=s(bse);$ho=r(KZr,"vilt"),KZr.forEach(t),kho=r(Q6e," \u2014 "),xI=n(Q6e,"A",{href:!0});var ZZr=s(xI);Sho=r(ZZr,"ViltProcessor"),ZZr.forEach(t),Rho=r(Q6e," (ViLT model)"),Q6e.forEach(t),Pho=i(ue),Zh=n(ue,"LI",{});var H6e=s(Zh);vse=n(H6e,"STRONG",{});var eet=s(vse);Bho=r(eet,"vision-text-dual-encoder"),eet.forEach(t),Iho=r(H6e," \u2014 "),$I=n(H6e,"A",{href:!0});var oet=s($I);Nho=r(oet,"VisionTextDualEncoderProcessor"),oet.forEach(t),qho=r(H6e," (VisionTextDualEncoder model)"),H6e.forEach(t),jho=i(ue),ep=n(ue,"LI",{});var U6e=s(ep);Fse=n(U6e,"STRONG",{});var ret=s(Fse);Dho=r(ret,"wav2vec2"),ret.forEach(t),Gho=r(U6e," \u2014 "),kI=n(U6e,"A",{href:!0});var tet=s(kI);Oho=r(tet,"Wav2Vec2Processor"),tet.forEach(t),Vho=r(U6e," (Wav2Vec2 model)"),U6e.forEach(t),Xho=i(ue),op=n(ue,"LI",{});var J6e=s(op);Tse=n(J6e,"STRONG",{});var aet=s(Tse);zho=r(aet,"wav2vec2-conformer"),aet.forEach(t),Who=r(J6e," \u2014 "),SI=n(J6e,"A",{href:!0});var net=s(SI);Qho=r(net,"Wav2Vec2Processor"),net.forEach(t),Hho=r(J6e," (Wav2Vec2-Conformer model)"),J6e.forEach(t),Uho=i(ue),rp=n(ue,"LI",{});var Y6e=s(rp);Mse=n(Y6e,"STRONG",{});var set=s(Mse);Jho=r(set,"wavlm"),set.forEach(t),Yho=r(Y6e," \u2014 "),RI=n(Y6e,"A",{href:!0});var iet=s(RI);Kho=r(iet,"Wav2Vec2Processor"),iet.forEach(t),Zho=r(Y6e," (WavLM model)"),Y6e.forEach(t),ue.forEach(t),epo=i(ea),T(tp.$$.fragment,ea),opo=i(ea),T(ap.$$.fragment,ea),ea.forEach(t),rpo=i(Ds),np=n(Ds,"DIV",{class:!0});var PDe=s(np);T(ty.$$.fragment,PDe),tpo=i(PDe),Ese=n(PDe,"P",{});var det=s(Ese);apo=r(det,"Register a new processor for this class."),det.forEach(t),PDe.forEach(t),Ds.forEach(t),kqe=i(f),wi=n(f,"H2",{class:!0});var BDe=s(wi);sp=n(BDe,"A",{id:!0,class:!0,href:!0});var cet=s(sp);Cse=n(cet,"SPAN",{});var fet=s(Cse);T(ay.$$.fragment,fet),fet.forEach(t),cet.forEach(t),npo=i(BDe),wse=n(BDe,"SPAN",{});var met=s(wse);spo=r(met,"AutoModel"),met.forEach(t),BDe.forEach(t),Sqe=i(f),Lo=n(f,"DIV",{class:!0});var Gs=s(Lo);T(ny.$$.fragment,Gs),lpo=i(Gs),Ai=n(Gs,"P",{});var wZ=s(Ai);ipo=r(wZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),PI=n(wZ,"A",{href:!0});var get=s(PI);dpo=r(get,"from_pretrained()"),get.forEach(t),cpo=r(wZ," class method or the "),BI=n(wZ,"A",{href:!0});var het=s(BI);fpo=r(het,"from_config()"),het.forEach(t),mpo=r(wZ,` class
method.`),wZ.forEach(t),gpo=i(Gs),sy=n(Gs,"P",{});var IDe=s(sy);hpo=r(IDe,"This class cannot be instantiated directly using "),Ase=n(IDe,"CODE",{});var pet=s(Ase);ppo=r(pet,"__init__()"),pet.forEach(t),_po=r(IDe," (throws an error)."),IDe.forEach(t),upo=i(Gs),tt=n(Gs,"DIV",{class:!0});var Iw=s(tt);T(ly.$$.fragment,Iw),bpo=i(Iw),yse=n(Iw,"P",{});var _et=s(yse);vpo=r(_et,"Instantiates one of the base model classes of the library from a configuration."),_et.forEach(t),Fpo=i(Iw),yi=n(Iw,"P",{});var AZ=s(yi);Tpo=r(AZ,`Note:
Loading a model from its configuration file does `),Lse=n(AZ,"STRONG",{});var uet=s(Lse);Mpo=r(uet,"not"),uet.forEach(t),Epo=r(AZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),II=n(AZ,"A",{href:!0});var bet=s(II);Cpo=r(bet,"from_pretrained()"),bet.forEach(t),wpo=r(AZ," to load the model weights."),AZ.forEach(t),Apo=i(Iw),T(lp.$$.fragment,Iw),Iw.forEach(t),ypo=i(Gs),Je=n(Gs,"DIV",{class:!0});var oa=s(Je);T(iy.$$.fragment,oa),Lpo=i(oa),xse=n(oa,"P",{});var vet=s(xse);xpo=r(vet,"Instantiate one of the base model classes of the library from a pretrained model."),vet.forEach(t),$po=i(oa),La=n(oa,"P",{});var Nw=s(La);kpo=r(Nw,"The model class to instantiate is selected based on the "),$se=n(Nw,"CODE",{});var Fet=s($se);Spo=r(Fet,"model_type"),Fet.forEach(t),Rpo=r(Nw,` property of the config object (either
passed as an argument or loaded from `),kse=n(Nw,"CODE",{});var Tet=s(kse);Ppo=r(Tet,"pretrained_model_name_or_path"),Tet.forEach(t),Bpo=r(Nw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sse=n(Nw,"CODE",{});var Met=s(Sse);Ipo=r(Met,"pretrained_model_name_or_path"),Met.forEach(t),Npo=r(Nw,":"),Nw.forEach(t),qpo=i(oa),x=n(oa,"UL",{});var $=s(x);ip=n($,"LI",{});var K6e=s(ip);Rse=n(K6e,"STRONG",{});var Eet=s(Rse);jpo=r(Eet,"albert"),Eet.forEach(t),Dpo=r(K6e," \u2014 "),NI=n(K6e,"A",{href:!0});var Cet=s(NI);Gpo=r(Cet,"AlbertModel"),Cet.forEach(t),Opo=r(K6e," (ALBERT model)"),K6e.forEach(t),Vpo=i($),dp=n($,"LI",{});var Z6e=s(dp);Pse=n(Z6e,"STRONG",{});var wet=s(Pse);Xpo=r(wet,"bart"),wet.forEach(t),zpo=r(Z6e," \u2014 "),qI=n(Z6e,"A",{href:!0});var Aet=s(qI);Wpo=r(Aet,"BartModel"),Aet.forEach(t),Qpo=r(Z6e," (BART model)"),Z6e.forEach(t),Hpo=i($),cp=n($,"LI",{});var eAe=s(cp);Bse=n(eAe,"STRONG",{});var yet=s(Bse);Upo=r(yet,"beit"),yet.forEach(t),Jpo=r(eAe," \u2014 "),jI=n(eAe,"A",{href:!0});var Let=s(jI);Ypo=r(Let,"BeitModel"),Let.forEach(t),Kpo=r(eAe," (BEiT model)"),eAe.forEach(t),Zpo=i($),fp=n($,"LI",{});var oAe=s(fp);Ise=n(oAe,"STRONG",{});var xet=s(Ise);e_o=r(xet,"bert"),xet.forEach(t),o_o=r(oAe," \u2014 "),DI=n(oAe,"A",{href:!0});var $et=s(DI);r_o=r($et,"BertModel"),$et.forEach(t),t_o=r(oAe," (BERT model)"),oAe.forEach(t),a_o=i($),mp=n($,"LI",{});var rAe=s(mp);Nse=n(rAe,"STRONG",{});var ket=s(Nse);n_o=r(ket,"bert-generation"),ket.forEach(t),s_o=r(rAe," \u2014 "),GI=n(rAe,"A",{href:!0});var Set=s(GI);l_o=r(Set,"BertGenerationEncoder"),Set.forEach(t),i_o=r(rAe," (Bert Generation model)"),rAe.forEach(t),d_o=i($),gp=n($,"LI",{});var tAe=s(gp);qse=n(tAe,"STRONG",{});var Ret=s(qse);c_o=r(Ret,"big_bird"),Ret.forEach(t),f_o=r(tAe," \u2014 "),OI=n(tAe,"A",{href:!0});var Pet=s(OI);m_o=r(Pet,"BigBirdModel"),Pet.forEach(t),g_o=r(tAe," (BigBird model)"),tAe.forEach(t),h_o=i($),hp=n($,"LI",{});var aAe=s(hp);jse=n(aAe,"STRONG",{});var Bet=s(jse);p_o=r(Bet,"bigbird_pegasus"),Bet.forEach(t),__o=r(aAe," \u2014 "),VI=n(aAe,"A",{href:!0});var Iet=s(VI);u_o=r(Iet,"BigBirdPegasusModel"),Iet.forEach(t),b_o=r(aAe," (BigBirdPegasus model)"),aAe.forEach(t),v_o=i($),pp=n($,"LI",{});var nAe=s(pp);Dse=n(nAe,"STRONG",{});var Net=s(Dse);F_o=r(Net,"blenderbot"),Net.forEach(t),T_o=r(nAe," \u2014 "),XI=n(nAe,"A",{href:!0});var qet=s(XI);M_o=r(qet,"BlenderbotModel"),qet.forEach(t),E_o=r(nAe," (Blenderbot model)"),nAe.forEach(t),C_o=i($),_p=n($,"LI",{});var sAe=s(_p);Gse=n(sAe,"STRONG",{});var jet=s(Gse);w_o=r(jet,"blenderbot-small"),jet.forEach(t),A_o=r(sAe," \u2014 "),zI=n(sAe,"A",{href:!0});var Det=s(zI);y_o=r(Det,"BlenderbotSmallModel"),Det.forEach(t),L_o=r(sAe," (BlenderbotSmall model)"),sAe.forEach(t),x_o=i($),up=n($,"LI",{});var lAe=s(up);Ose=n(lAe,"STRONG",{});var Get=s(Ose);$_o=r(Get,"camembert"),Get.forEach(t),k_o=r(lAe," \u2014 "),WI=n(lAe,"A",{href:!0});var Oet=s(WI);S_o=r(Oet,"CamembertModel"),Oet.forEach(t),R_o=r(lAe," (CamemBERT model)"),lAe.forEach(t),P_o=i($),bp=n($,"LI",{});var iAe=s(bp);Vse=n(iAe,"STRONG",{});var Vet=s(Vse);B_o=r(Vet,"canine"),Vet.forEach(t),I_o=r(iAe," \u2014 "),QI=n(iAe,"A",{href:!0});var Xet=s(QI);N_o=r(Xet,"CanineModel"),Xet.forEach(t),q_o=r(iAe," (Canine model)"),iAe.forEach(t),j_o=i($),vp=n($,"LI",{});var dAe=s(vp);Xse=n(dAe,"STRONG",{});var zet=s(Xse);D_o=r(zet,"clip"),zet.forEach(t),G_o=r(dAe," \u2014 "),HI=n(dAe,"A",{href:!0});var Wet=s(HI);O_o=r(Wet,"CLIPModel"),Wet.forEach(t),V_o=r(dAe," (CLIP model)"),dAe.forEach(t),X_o=i($),Fp=n($,"LI",{});var cAe=s(Fp);zse=n(cAe,"STRONG",{});var Qet=s(zse);z_o=r(Qet,"convbert"),Qet.forEach(t),W_o=r(cAe," \u2014 "),UI=n(cAe,"A",{href:!0});var Het=s(UI);Q_o=r(Het,"ConvBertModel"),Het.forEach(t),H_o=r(cAe," (ConvBERT model)"),cAe.forEach(t),U_o=i($),Tp=n($,"LI",{});var fAe=s(Tp);Wse=n(fAe,"STRONG",{});var Uet=s(Wse);J_o=r(Uet,"convnext"),Uet.forEach(t),Y_o=r(fAe," \u2014 "),JI=n(fAe,"A",{href:!0});var Jet=s(JI);K_o=r(Jet,"ConvNextModel"),Jet.forEach(t),Z_o=r(fAe," (ConvNext model)"),fAe.forEach(t),euo=i($),Mp=n($,"LI",{});var mAe=s(Mp);Qse=n(mAe,"STRONG",{});var Yet=s(Qse);ouo=r(Yet,"ctrl"),Yet.forEach(t),ruo=r(mAe," \u2014 "),YI=n(mAe,"A",{href:!0});var Ket=s(YI);tuo=r(Ket,"CTRLModel"),Ket.forEach(t),auo=r(mAe," (CTRL model)"),mAe.forEach(t),nuo=i($),Ep=n($,"LI",{});var gAe=s(Ep);Hse=n(gAe,"STRONG",{});var Zet=s(Hse);suo=r(Zet,"cvt"),Zet.forEach(t),luo=r(gAe," \u2014 "),KI=n(gAe,"A",{href:!0});var eot=s(KI);iuo=r(eot,"CvtModel"),eot.forEach(t),duo=r(gAe," (CvT model)"),gAe.forEach(t),cuo=i($),Cp=n($,"LI",{});var hAe=s(Cp);Use=n(hAe,"STRONG",{});var oot=s(Use);fuo=r(oot,"data2vec-audio"),oot.forEach(t),muo=r(hAe," \u2014 "),ZI=n(hAe,"A",{href:!0});var rot=s(ZI);guo=r(rot,"Data2VecAudioModel"),rot.forEach(t),huo=r(hAe," (Data2VecAudio model)"),hAe.forEach(t),puo=i($),wp=n($,"LI",{});var pAe=s(wp);Jse=n(pAe,"STRONG",{});var tot=s(Jse);_uo=r(tot,"data2vec-text"),tot.forEach(t),uuo=r(pAe," \u2014 "),eN=n(pAe,"A",{href:!0});var aot=s(eN);buo=r(aot,"Data2VecTextModel"),aot.forEach(t),vuo=r(pAe," (Data2VecText model)"),pAe.forEach(t),Fuo=i($),Ap=n($,"LI",{});var _Ae=s(Ap);Yse=n(_Ae,"STRONG",{});var not=s(Yse);Tuo=r(not,"data2vec-vision"),not.forEach(t),Muo=r(_Ae," \u2014 "),oN=n(_Ae,"A",{href:!0});var sot=s(oN);Euo=r(sot,"Data2VecVisionModel"),sot.forEach(t),Cuo=r(_Ae," (Data2VecVision model)"),_Ae.forEach(t),wuo=i($),yp=n($,"LI",{});var uAe=s(yp);Kse=n(uAe,"STRONG",{});var lot=s(Kse);Auo=r(lot,"deberta"),lot.forEach(t),yuo=r(uAe," \u2014 "),rN=n(uAe,"A",{href:!0});var iot=s(rN);Luo=r(iot,"DebertaModel"),iot.forEach(t),xuo=r(uAe," (DeBERTa model)"),uAe.forEach(t),$uo=i($),Lp=n($,"LI",{});var bAe=s(Lp);Zse=n(bAe,"STRONG",{});var dot=s(Zse);kuo=r(dot,"deberta-v2"),dot.forEach(t),Suo=r(bAe," \u2014 "),tN=n(bAe,"A",{href:!0});var cot=s(tN);Ruo=r(cot,"DebertaV2Model"),cot.forEach(t),Puo=r(bAe," (DeBERTa-v2 model)"),bAe.forEach(t),Buo=i($),xp=n($,"LI",{});var vAe=s(xp);ele=n(vAe,"STRONG",{});var fot=s(ele);Iuo=r(fot,"decision_transformer"),fot.forEach(t),Nuo=r(vAe," \u2014 "),aN=n(vAe,"A",{href:!0});var mot=s(aN);quo=r(mot,"DecisionTransformerModel"),mot.forEach(t),juo=r(vAe," (Decision Transformer model)"),vAe.forEach(t),Duo=i($),$p=n($,"LI",{});var FAe=s($p);ole=n(FAe,"STRONG",{});var got=s(ole);Guo=r(got,"deit"),got.forEach(t),Ouo=r(FAe," \u2014 "),nN=n(FAe,"A",{href:!0});var hot=s(nN);Vuo=r(hot,"DeiTModel"),hot.forEach(t),Xuo=r(FAe," (DeiT model)"),FAe.forEach(t),zuo=i($),kp=n($,"LI",{});var TAe=s(kp);rle=n(TAe,"STRONG",{});var pot=s(rle);Wuo=r(pot,"detr"),pot.forEach(t),Quo=r(TAe," \u2014 "),sN=n(TAe,"A",{href:!0});var _ot=s(sN);Huo=r(_ot,"DetrModel"),_ot.forEach(t),Uuo=r(TAe," (DETR model)"),TAe.forEach(t),Juo=i($),Sp=n($,"LI",{});var MAe=s(Sp);tle=n(MAe,"STRONG",{});var uot=s(tle);Yuo=r(uot,"distilbert"),uot.forEach(t),Kuo=r(MAe," \u2014 "),lN=n(MAe,"A",{href:!0});var bot=s(lN);Zuo=r(bot,"DistilBertModel"),bot.forEach(t),e1o=r(MAe," (DistilBERT model)"),MAe.forEach(t),o1o=i($),Rp=n($,"LI",{});var EAe=s(Rp);ale=n(EAe,"STRONG",{});var vot=s(ale);r1o=r(vot,"dpr"),vot.forEach(t),t1o=r(EAe," \u2014 "),iN=n(EAe,"A",{href:!0});var Fot=s(iN);a1o=r(Fot,"DPRQuestionEncoder"),Fot.forEach(t),n1o=r(EAe," (DPR model)"),EAe.forEach(t),s1o=i($),Pp=n($,"LI",{});var CAe=s(Pp);nle=n(CAe,"STRONG",{});var Tot=s(nle);l1o=r(Tot,"dpt"),Tot.forEach(t),i1o=r(CAe," \u2014 "),dN=n(CAe,"A",{href:!0});var Mot=s(dN);d1o=r(Mot,"DPTModel"),Mot.forEach(t),c1o=r(CAe," (DPT model)"),CAe.forEach(t),f1o=i($),Bp=n($,"LI",{});var wAe=s(Bp);sle=n(wAe,"STRONG",{});var Eot=s(sle);m1o=r(Eot,"electra"),Eot.forEach(t),g1o=r(wAe," \u2014 "),cN=n(wAe,"A",{href:!0});var Cot=s(cN);h1o=r(Cot,"ElectraModel"),Cot.forEach(t),p1o=r(wAe," (ELECTRA model)"),wAe.forEach(t),_1o=i($),Ip=n($,"LI",{});var AAe=s(Ip);lle=n(AAe,"STRONG",{});var wot=s(lle);u1o=r(wot,"flaubert"),wot.forEach(t),b1o=r(AAe," \u2014 "),fN=n(AAe,"A",{href:!0});var Aot=s(fN);v1o=r(Aot,"FlaubertModel"),Aot.forEach(t),F1o=r(AAe," (FlauBERT model)"),AAe.forEach(t),T1o=i($),Np=n($,"LI",{});var yAe=s(Np);ile=n(yAe,"STRONG",{});var yot=s(ile);M1o=r(yot,"flava"),yot.forEach(t),E1o=r(yAe," \u2014 "),mN=n(yAe,"A",{href:!0});var Lot=s(mN);C1o=r(Lot,"FlavaModel"),Lot.forEach(t),w1o=r(yAe," (Flava model)"),yAe.forEach(t),A1o=i($),qp=n($,"LI",{});var LAe=s(qp);dle=n(LAe,"STRONG",{});var xot=s(dle);y1o=r(xot,"fnet"),xot.forEach(t),L1o=r(LAe," \u2014 "),gN=n(LAe,"A",{href:!0});var $ot=s(gN);x1o=r($ot,"FNetModel"),$ot.forEach(t),$1o=r(LAe," (FNet model)"),LAe.forEach(t),k1o=i($),jp=n($,"LI",{});var xAe=s(jp);cle=n(xAe,"STRONG",{});var kot=s(cle);S1o=r(kot,"fsmt"),kot.forEach(t),R1o=r(xAe," \u2014 "),hN=n(xAe,"A",{href:!0});var Sot=s(hN);P1o=r(Sot,"FSMTModel"),Sot.forEach(t),B1o=r(xAe," (FairSeq Machine-Translation model)"),xAe.forEach(t),I1o=i($),Ps=n($,"LI",{});var Q$=s(Ps);fle=n(Q$,"STRONG",{});var Rot=s(fle);N1o=r(Rot,"funnel"),Rot.forEach(t),q1o=r(Q$," \u2014 "),pN=n(Q$,"A",{href:!0});var Pot=s(pN);j1o=r(Pot,"FunnelModel"),Pot.forEach(t),D1o=r(Q$," or "),_N=n(Q$,"A",{href:!0});var Bot=s(_N);G1o=r(Bot,"FunnelBaseModel"),Bot.forEach(t),O1o=r(Q$," (Funnel Transformer model)"),Q$.forEach(t),V1o=i($),Dp=n($,"LI",{});var $Ae=s(Dp);mle=n($Ae,"STRONG",{});var Iot=s(mle);X1o=r(Iot,"glpn"),Iot.forEach(t),z1o=r($Ae," \u2014 "),uN=n($Ae,"A",{href:!0});var Not=s(uN);W1o=r(Not,"GLPNModel"),Not.forEach(t),Q1o=r($Ae," (GLPN model)"),$Ae.forEach(t),H1o=i($),Gp=n($,"LI",{});var kAe=s(Gp);gle=n(kAe,"STRONG",{});var qot=s(gle);U1o=r(qot,"gpt2"),qot.forEach(t),J1o=r(kAe," \u2014 "),bN=n(kAe,"A",{href:!0});var jot=s(bN);Y1o=r(jot,"GPT2Model"),jot.forEach(t),K1o=r(kAe," (OpenAI GPT-2 model)"),kAe.forEach(t),Z1o=i($),Op=n($,"LI",{});var SAe=s(Op);hle=n(SAe,"STRONG",{});var Dot=s(hle);ebo=r(Dot,"gpt_neo"),Dot.forEach(t),obo=r(SAe," \u2014 "),vN=n(SAe,"A",{href:!0});var Got=s(vN);rbo=r(Got,"GPTNeoModel"),Got.forEach(t),tbo=r(SAe," (GPT Neo model)"),SAe.forEach(t),abo=i($),Vp=n($,"LI",{});var RAe=s(Vp);ple=n(RAe,"STRONG",{});var Oot=s(ple);nbo=r(Oot,"gpt_neox"),Oot.forEach(t),sbo=r(RAe," \u2014 "),FN=n(RAe,"A",{href:!0});var Vot=s(FN);lbo=r(Vot,"GPTNeoXModel"),Vot.forEach(t),ibo=r(RAe," (GPT NeoX model)"),RAe.forEach(t),dbo=i($),Xp=n($,"LI",{});var PAe=s(Xp);_le=n(PAe,"STRONG",{});var Xot=s(_le);cbo=r(Xot,"gptj"),Xot.forEach(t),fbo=r(PAe," \u2014 "),TN=n(PAe,"A",{href:!0});var zot=s(TN);mbo=r(zot,"GPTJModel"),zot.forEach(t),gbo=r(PAe," (GPT-J model)"),PAe.forEach(t),hbo=i($),zp=n($,"LI",{});var BAe=s(zp);ule=n(BAe,"STRONG",{});var Wot=s(ule);pbo=r(Wot,"hubert"),Wot.forEach(t),_bo=r(BAe," \u2014 "),MN=n(BAe,"A",{href:!0});var Qot=s(MN);ubo=r(Qot,"HubertModel"),Qot.forEach(t),bbo=r(BAe," (Hubert model)"),BAe.forEach(t),vbo=i($),Wp=n($,"LI",{});var IAe=s(Wp);ble=n(IAe,"STRONG",{});var Hot=s(ble);Fbo=r(Hot,"ibert"),Hot.forEach(t),Tbo=r(IAe," \u2014 "),EN=n(IAe,"A",{href:!0});var Uot=s(EN);Mbo=r(Uot,"IBertModel"),Uot.forEach(t),Ebo=r(IAe," (I-BERT model)"),IAe.forEach(t),Cbo=i($),Qp=n($,"LI",{});var NAe=s(Qp);vle=n(NAe,"STRONG",{});var Jot=s(vle);wbo=r(Jot,"imagegpt"),Jot.forEach(t),Abo=r(NAe," \u2014 "),CN=n(NAe,"A",{href:!0});var Yot=s(CN);ybo=r(Yot,"ImageGPTModel"),Yot.forEach(t),Lbo=r(NAe," (ImageGPT model)"),NAe.forEach(t),xbo=i($),Hp=n($,"LI",{});var qAe=s(Hp);Fle=n(qAe,"STRONG",{});var Kot=s(Fle);$bo=r(Kot,"layoutlm"),Kot.forEach(t),kbo=r(qAe," \u2014 "),wN=n(qAe,"A",{href:!0});var Zot=s(wN);Sbo=r(Zot,"LayoutLMModel"),Zot.forEach(t),Rbo=r(qAe," (LayoutLM model)"),qAe.forEach(t),Pbo=i($),Up=n($,"LI",{});var jAe=s(Up);Tle=n(jAe,"STRONG",{});var ert=s(Tle);Bbo=r(ert,"layoutlmv2"),ert.forEach(t),Ibo=r(jAe," \u2014 "),AN=n(jAe,"A",{href:!0});var ort=s(AN);Nbo=r(ort,"LayoutLMv2Model"),ort.forEach(t),qbo=r(jAe," (LayoutLMv2 model)"),jAe.forEach(t),jbo=i($),Jp=n($,"LI",{});var DAe=s(Jp);Mle=n(DAe,"STRONG",{});var rrt=s(Mle);Dbo=r(rrt,"layoutlmv3"),rrt.forEach(t),Gbo=r(DAe," \u2014 "),yN=n(DAe,"A",{href:!0});var trt=s(yN);Obo=r(trt,"LayoutLMv3Model"),trt.forEach(t),Vbo=r(DAe," (LayoutLMv3 model)"),DAe.forEach(t),Xbo=i($),Yp=n($,"LI",{});var GAe=s(Yp);Ele=n(GAe,"STRONG",{});var art=s(Ele);zbo=r(art,"led"),art.forEach(t),Wbo=r(GAe," \u2014 "),LN=n(GAe,"A",{href:!0});var nrt=s(LN);Qbo=r(nrt,"LEDModel"),nrt.forEach(t),Hbo=r(GAe," (LED model)"),GAe.forEach(t),Ubo=i($),Kp=n($,"LI",{});var OAe=s(Kp);Cle=n(OAe,"STRONG",{});var srt=s(Cle);Jbo=r(srt,"longformer"),srt.forEach(t),Ybo=r(OAe," \u2014 "),xN=n(OAe,"A",{href:!0});var lrt=s(xN);Kbo=r(lrt,"LongformerModel"),lrt.forEach(t),Zbo=r(OAe," (Longformer model)"),OAe.forEach(t),e2o=i($),Zp=n($,"LI",{});var VAe=s(Zp);wle=n(VAe,"STRONG",{});var irt=s(wle);o2o=r(irt,"luke"),irt.forEach(t),r2o=r(VAe," \u2014 "),$N=n(VAe,"A",{href:!0});var drt=s($N);t2o=r(drt,"LukeModel"),drt.forEach(t),a2o=r(VAe," (LUKE model)"),VAe.forEach(t),n2o=i($),e_=n($,"LI",{});var XAe=s(e_);Ale=n(XAe,"STRONG",{});var crt=s(Ale);s2o=r(crt,"lxmert"),crt.forEach(t),l2o=r(XAe," \u2014 "),kN=n(XAe,"A",{href:!0});var frt=s(kN);i2o=r(frt,"LxmertModel"),frt.forEach(t),d2o=r(XAe," (LXMERT model)"),XAe.forEach(t),c2o=i($),o_=n($,"LI",{});var zAe=s(o_);yle=n(zAe,"STRONG",{});var mrt=s(yle);f2o=r(mrt,"m2m_100"),mrt.forEach(t),m2o=r(zAe," \u2014 "),SN=n(zAe,"A",{href:!0});var grt=s(SN);g2o=r(grt,"M2M100Model"),grt.forEach(t),h2o=r(zAe," (M2M100 model)"),zAe.forEach(t),p2o=i($),r_=n($,"LI",{});var WAe=s(r_);Lle=n(WAe,"STRONG",{});var hrt=s(Lle);_2o=r(hrt,"marian"),hrt.forEach(t),u2o=r(WAe," \u2014 "),RN=n(WAe,"A",{href:!0});var prt=s(RN);b2o=r(prt,"MarianModel"),prt.forEach(t),v2o=r(WAe," (Marian model)"),WAe.forEach(t),F2o=i($),t_=n($,"LI",{});var QAe=s(t_);xle=n(QAe,"STRONG",{});var _rt=s(xle);T2o=r(_rt,"maskformer"),_rt.forEach(t),M2o=r(QAe," \u2014 "),PN=n(QAe,"A",{href:!0});var urt=s(PN);E2o=r(urt,"MaskFormerModel"),urt.forEach(t),C2o=r(QAe," (MaskFormer model)"),QAe.forEach(t),w2o=i($),a_=n($,"LI",{});var HAe=s(a_);$le=n(HAe,"STRONG",{});var brt=s($le);A2o=r(brt,"mbart"),brt.forEach(t),y2o=r(HAe," \u2014 "),BN=n(HAe,"A",{href:!0});var vrt=s(BN);L2o=r(vrt,"MBartModel"),vrt.forEach(t),x2o=r(HAe," (mBART model)"),HAe.forEach(t),$2o=i($),n_=n($,"LI",{});var UAe=s(n_);kle=n(UAe,"STRONG",{});var Frt=s(kle);k2o=r(Frt,"megatron-bert"),Frt.forEach(t),S2o=r(UAe," \u2014 "),IN=n(UAe,"A",{href:!0});var Trt=s(IN);R2o=r(Trt,"MegatronBertModel"),Trt.forEach(t),P2o=r(UAe," (MegatronBert model)"),UAe.forEach(t),B2o=i($),s_=n($,"LI",{});var JAe=s(s_);Sle=n(JAe,"STRONG",{});var Mrt=s(Sle);I2o=r(Mrt,"mobilebert"),Mrt.forEach(t),N2o=r(JAe," \u2014 "),NN=n(JAe,"A",{href:!0});var Ert=s(NN);q2o=r(Ert,"MobileBertModel"),Ert.forEach(t),j2o=r(JAe," (MobileBERT model)"),JAe.forEach(t),D2o=i($),l_=n($,"LI",{});var YAe=s(l_);Rle=n(YAe,"STRONG",{});var Crt=s(Rle);G2o=r(Crt,"mpnet"),Crt.forEach(t),O2o=r(YAe," \u2014 "),qN=n(YAe,"A",{href:!0});var wrt=s(qN);V2o=r(wrt,"MPNetModel"),wrt.forEach(t),X2o=r(YAe," (MPNet model)"),YAe.forEach(t),z2o=i($),i_=n($,"LI",{});var KAe=s(i_);Ple=n(KAe,"STRONG",{});var Art=s(Ple);W2o=r(Art,"mt5"),Art.forEach(t),Q2o=r(KAe," \u2014 "),jN=n(KAe,"A",{href:!0});var yrt=s(jN);H2o=r(yrt,"MT5Model"),yrt.forEach(t),U2o=r(KAe," (mT5 model)"),KAe.forEach(t),J2o=i($),d_=n($,"LI",{});var ZAe=s(d_);Ble=n(ZAe,"STRONG",{});var Lrt=s(Ble);Y2o=r(Lrt,"nystromformer"),Lrt.forEach(t),K2o=r(ZAe," \u2014 "),DN=n(ZAe,"A",{href:!0});var xrt=s(DN);Z2o=r(xrt,"NystromformerModel"),xrt.forEach(t),e5o=r(ZAe," (Nystromformer model)"),ZAe.forEach(t),o5o=i($),c_=n($,"LI",{});var eye=s(c_);Ile=n(eye,"STRONG",{});var $rt=s(Ile);r5o=r($rt,"openai-gpt"),$rt.forEach(t),t5o=r(eye," \u2014 "),GN=n(eye,"A",{href:!0});var krt=s(GN);a5o=r(krt,"OpenAIGPTModel"),krt.forEach(t),n5o=r(eye," (OpenAI GPT model)"),eye.forEach(t),s5o=i($),f_=n($,"LI",{});var oye=s(f_);Nle=n(oye,"STRONG",{});var Srt=s(Nle);l5o=r(Srt,"opt"),Srt.forEach(t),i5o=r(oye," \u2014 "),ON=n(oye,"A",{href:!0});var Rrt=s(ON);d5o=r(Rrt,"OPTModel"),Rrt.forEach(t),c5o=r(oye," (OPT model)"),oye.forEach(t),f5o=i($),m_=n($,"LI",{});var rye=s(m_);qle=n(rye,"STRONG",{});var Prt=s(qle);m5o=r(Prt,"pegasus"),Prt.forEach(t),g5o=r(rye," \u2014 "),VN=n(rye,"A",{href:!0});var Brt=s(VN);h5o=r(Brt,"PegasusModel"),Brt.forEach(t),p5o=r(rye," (Pegasus model)"),rye.forEach(t),_5o=i($),g_=n($,"LI",{});var tye=s(g_);jle=n(tye,"STRONG",{});var Irt=s(jle);u5o=r(Irt,"perceiver"),Irt.forEach(t),b5o=r(tye," \u2014 "),XN=n(tye,"A",{href:!0});var Nrt=s(XN);v5o=r(Nrt,"PerceiverModel"),Nrt.forEach(t),F5o=r(tye," (Perceiver model)"),tye.forEach(t),T5o=i($),h_=n($,"LI",{});var aye=s(h_);Dle=n(aye,"STRONG",{});var qrt=s(Dle);M5o=r(qrt,"plbart"),qrt.forEach(t),E5o=r(aye," \u2014 "),zN=n(aye,"A",{href:!0});var jrt=s(zN);C5o=r(jrt,"PLBartModel"),jrt.forEach(t),w5o=r(aye," (PLBart model)"),aye.forEach(t),A5o=i($),p_=n($,"LI",{});var nye=s(p_);Gle=n(nye,"STRONG",{});var Drt=s(Gle);y5o=r(Drt,"poolformer"),Drt.forEach(t),L5o=r(nye," \u2014 "),WN=n(nye,"A",{href:!0});var Grt=s(WN);x5o=r(Grt,"PoolFormerModel"),Grt.forEach(t),$5o=r(nye," (PoolFormer model)"),nye.forEach(t),k5o=i($),__=n($,"LI",{});var sye=s(__);Ole=n(sye,"STRONG",{});var Ort=s(Ole);S5o=r(Ort,"prophetnet"),Ort.forEach(t),R5o=r(sye," \u2014 "),QN=n(sye,"A",{href:!0});var Vrt=s(QN);P5o=r(Vrt,"ProphetNetModel"),Vrt.forEach(t),B5o=r(sye," (ProphetNet model)"),sye.forEach(t),I5o=i($),u_=n($,"LI",{});var lye=s(u_);Vle=n(lye,"STRONG",{});var Xrt=s(Vle);N5o=r(Xrt,"qdqbert"),Xrt.forEach(t),q5o=r(lye," \u2014 "),HN=n(lye,"A",{href:!0});var zrt=s(HN);j5o=r(zrt,"QDQBertModel"),zrt.forEach(t),D5o=r(lye," (QDQBert model)"),lye.forEach(t),G5o=i($),b_=n($,"LI",{});var iye=s(b_);Xle=n(iye,"STRONG",{});var Wrt=s(Xle);O5o=r(Wrt,"reformer"),Wrt.forEach(t),V5o=r(iye," \u2014 "),UN=n(iye,"A",{href:!0});var Qrt=s(UN);X5o=r(Qrt,"ReformerModel"),Qrt.forEach(t),z5o=r(iye," (Reformer model)"),iye.forEach(t),W5o=i($),v_=n($,"LI",{});var dye=s(v_);zle=n(dye,"STRONG",{});var Hrt=s(zle);Q5o=r(Hrt,"regnet"),Hrt.forEach(t),H5o=r(dye," \u2014 "),JN=n(dye,"A",{href:!0});var Urt=s(JN);U5o=r(Urt,"RegNetModel"),Urt.forEach(t),J5o=r(dye," (RegNet model)"),dye.forEach(t),Y5o=i($),F_=n($,"LI",{});var cye=s(F_);Wle=n(cye,"STRONG",{});var Jrt=s(Wle);K5o=r(Jrt,"rembert"),Jrt.forEach(t),Z5o=r(cye," \u2014 "),YN=n(cye,"A",{href:!0});var Yrt=s(YN);evo=r(Yrt,"RemBertModel"),Yrt.forEach(t),ovo=r(cye," (RemBERT model)"),cye.forEach(t),rvo=i($),T_=n($,"LI",{});var fye=s(T_);Qle=n(fye,"STRONG",{});var Krt=s(Qle);tvo=r(Krt,"resnet"),Krt.forEach(t),avo=r(fye," \u2014 "),KN=n(fye,"A",{href:!0});var Zrt=s(KN);nvo=r(Zrt,"ResNetModel"),Zrt.forEach(t),svo=r(fye," (ResNet model)"),fye.forEach(t),lvo=i($),M_=n($,"LI",{});var mye=s(M_);Hle=n(mye,"STRONG",{});var ett=s(Hle);ivo=r(ett,"retribert"),ett.forEach(t),dvo=r(mye," \u2014 "),ZN=n(mye,"A",{href:!0});var ott=s(ZN);cvo=r(ott,"RetriBertModel"),ott.forEach(t),fvo=r(mye," (RetriBERT model)"),mye.forEach(t),mvo=i($),E_=n($,"LI",{});var gye=s(E_);Ule=n(gye,"STRONG",{});var rtt=s(Ule);gvo=r(rtt,"roberta"),rtt.forEach(t),hvo=r(gye," \u2014 "),eq=n(gye,"A",{href:!0});var ttt=s(eq);pvo=r(ttt,"RobertaModel"),ttt.forEach(t),_vo=r(gye," (RoBERTa model)"),gye.forEach(t),uvo=i($),C_=n($,"LI",{});var hye=s(C_);Jle=n(hye,"STRONG",{});var att=s(Jle);bvo=r(att,"roformer"),att.forEach(t),vvo=r(hye," \u2014 "),oq=n(hye,"A",{href:!0});var ntt=s(oq);Fvo=r(ntt,"RoFormerModel"),ntt.forEach(t),Tvo=r(hye," (RoFormer model)"),hye.forEach(t),Mvo=i($),w_=n($,"LI",{});var pye=s(w_);Yle=n(pye,"STRONG",{});var stt=s(Yle);Evo=r(stt,"segformer"),stt.forEach(t),Cvo=r(pye," \u2014 "),rq=n(pye,"A",{href:!0});var ltt=s(rq);wvo=r(ltt,"SegformerModel"),ltt.forEach(t),Avo=r(pye," (SegFormer model)"),pye.forEach(t),yvo=i($),A_=n($,"LI",{});var _ye=s(A_);Kle=n(_ye,"STRONG",{});var itt=s(Kle);Lvo=r(itt,"sew"),itt.forEach(t),xvo=r(_ye," \u2014 "),tq=n(_ye,"A",{href:!0});var dtt=s(tq);$vo=r(dtt,"SEWModel"),dtt.forEach(t),kvo=r(_ye," (SEW model)"),_ye.forEach(t),Svo=i($),y_=n($,"LI",{});var uye=s(y_);Zle=n(uye,"STRONG",{});var ctt=s(Zle);Rvo=r(ctt,"sew-d"),ctt.forEach(t),Pvo=r(uye," \u2014 "),aq=n(uye,"A",{href:!0});var ftt=s(aq);Bvo=r(ftt,"SEWDModel"),ftt.forEach(t),Ivo=r(uye," (SEW-D model)"),uye.forEach(t),Nvo=i($),L_=n($,"LI",{});var bye=s(L_);eie=n(bye,"STRONG",{});var mtt=s(eie);qvo=r(mtt,"speech_to_text"),mtt.forEach(t),jvo=r(bye," \u2014 "),nq=n(bye,"A",{href:!0});var gtt=s(nq);Dvo=r(gtt,"Speech2TextModel"),gtt.forEach(t),Gvo=r(bye," (Speech2Text model)"),bye.forEach(t),Ovo=i($),x_=n($,"LI",{});var vye=s(x_);oie=n(vye,"STRONG",{});var htt=s(oie);Vvo=r(htt,"splinter"),htt.forEach(t),Xvo=r(vye," \u2014 "),sq=n(vye,"A",{href:!0});var ptt=s(sq);zvo=r(ptt,"SplinterModel"),ptt.forEach(t),Wvo=r(vye," (Splinter model)"),vye.forEach(t),Qvo=i($),$_=n($,"LI",{});var Fye=s($_);rie=n(Fye,"STRONG",{});var _tt=s(rie);Hvo=r(_tt,"squeezebert"),_tt.forEach(t),Uvo=r(Fye," \u2014 "),lq=n(Fye,"A",{href:!0});var utt=s(lq);Jvo=r(utt,"SqueezeBertModel"),utt.forEach(t),Yvo=r(Fye," (SqueezeBERT model)"),Fye.forEach(t),Kvo=i($),k_=n($,"LI",{});var Tye=s(k_);tie=n(Tye,"STRONG",{});var btt=s(tie);Zvo=r(btt,"swin"),btt.forEach(t),eFo=r(Tye," \u2014 "),iq=n(Tye,"A",{href:!0});var vtt=s(iq);oFo=r(vtt,"SwinModel"),vtt.forEach(t),rFo=r(Tye," (Swin model)"),Tye.forEach(t),tFo=i($),S_=n($,"LI",{});var Mye=s(S_);aie=n(Mye,"STRONG",{});var Ftt=s(aie);aFo=r(Ftt,"t5"),Ftt.forEach(t),nFo=r(Mye," \u2014 "),dq=n(Mye,"A",{href:!0});var Ttt=s(dq);sFo=r(Ttt,"T5Model"),Ttt.forEach(t),lFo=r(Mye," (T5 model)"),Mye.forEach(t),iFo=i($),R_=n($,"LI",{});var Eye=s(R_);nie=n(Eye,"STRONG",{});var Mtt=s(nie);dFo=r(Mtt,"tapas"),Mtt.forEach(t),cFo=r(Eye," \u2014 "),cq=n(Eye,"A",{href:!0});var Ett=s(cq);fFo=r(Ett,"TapasModel"),Ett.forEach(t),mFo=r(Eye," (TAPAS model)"),Eye.forEach(t),gFo=i($),P_=n($,"LI",{});var Cye=s(P_);sie=n(Cye,"STRONG",{});var Ctt=s(sie);hFo=r(Ctt,"trajectory_transformer"),Ctt.forEach(t),pFo=r(Cye," \u2014 "),fq=n(Cye,"A",{href:!0});var wtt=s(fq);_Fo=r(wtt,"TrajectoryTransformerModel"),wtt.forEach(t),uFo=r(Cye," (Trajectory Transformer model)"),Cye.forEach(t),bFo=i($),B_=n($,"LI",{});var wye=s(B_);lie=n(wye,"STRONG",{});var Att=s(lie);vFo=r(Att,"transfo-xl"),Att.forEach(t),FFo=r(wye," \u2014 "),mq=n(wye,"A",{href:!0});var ytt=s(mq);TFo=r(ytt,"TransfoXLModel"),ytt.forEach(t),MFo=r(wye," (Transformer-XL model)"),wye.forEach(t),EFo=i($),I_=n($,"LI",{});var Aye=s(I_);iie=n(Aye,"STRONG",{});var Ltt=s(iie);CFo=r(Ltt,"unispeech"),Ltt.forEach(t),wFo=r(Aye," \u2014 "),gq=n(Aye,"A",{href:!0});var xtt=s(gq);AFo=r(xtt,"UniSpeechModel"),xtt.forEach(t),yFo=r(Aye," (UniSpeech model)"),Aye.forEach(t),LFo=i($),N_=n($,"LI",{});var yye=s(N_);die=n(yye,"STRONG",{});var $tt=s(die);xFo=r($tt,"unispeech-sat"),$tt.forEach(t),$Fo=r(yye," \u2014 "),hq=n(yye,"A",{href:!0});var ktt=s(hq);kFo=r(ktt,"UniSpeechSatModel"),ktt.forEach(t),SFo=r(yye," (UniSpeechSat model)"),yye.forEach(t),RFo=i($),q_=n($,"LI",{});var Lye=s(q_);cie=n(Lye,"STRONG",{});var Stt=s(cie);PFo=r(Stt,"van"),Stt.forEach(t),BFo=r(Lye," \u2014 "),pq=n(Lye,"A",{href:!0});var Rtt=s(pq);IFo=r(Rtt,"VanModel"),Rtt.forEach(t),NFo=r(Lye," (VAN model)"),Lye.forEach(t),qFo=i($),j_=n($,"LI",{});var xye=s(j_);fie=n(xye,"STRONG",{});var Ptt=s(fie);jFo=r(Ptt,"vilt"),Ptt.forEach(t),DFo=r(xye," \u2014 "),_q=n(xye,"A",{href:!0});var Btt=s(_q);GFo=r(Btt,"ViltModel"),Btt.forEach(t),OFo=r(xye," (ViLT model)"),xye.forEach(t),VFo=i($),D_=n($,"LI",{});var $ye=s(D_);mie=n($ye,"STRONG",{});var Itt=s(mie);XFo=r(Itt,"vision-text-dual-encoder"),Itt.forEach(t),zFo=r($ye," \u2014 "),uq=n($ye,"A",{href:!0});var Ntt=s(uq);WFo=r(Ntt,"VisionTextDualEncoderModel"),Ntt.forEach(t),QFo=r($ye," (VisionTextDualEncoder model)"),$ye.forEach(t),HFo=i($),G_=n($,"LI",{});var kye=s(G_);gie=n(kye,"STRONG",{});var qtt=s(gie);UFo=r(qtt,"visual_bert"),qtt.forEach(t),JFo=r(kye," \u2014 "),bq=n(kye,"A",{href:!0});var jtt=s(bq);YFo=r(jtt,"VisualBertModel"),jtt.forEach(t),KFo=r(kye," (VisualBert model)"),kye.forEach(t),ZFo=i($),O_=n($,"LI",{});var Sye=s(O_);hie=n(Sye,"STRONG",{});var Dtt=s(hie);e0o=r(Dtt,"vit"),Dtt.forEach(t),o0o=r(Sye," \u2014 "),vq=n(Sye,"A",{href:!0});var Gtt=s(vq);r0o=r(Gtt,"ViTModel"),Gtt.forEach(t),t0o=r(Sye," (ViT model)"),Sye.forEach(t),a0o=i($),V_=n($,"LI",{});var Rye=s(V_);pie=n(Rye,"STRONG",{});var Ott=s(pie);n0o=r(Ott,"vit_mae"),Ott.forEach(t),s0o=r(Rye," \u2014 "),Fq=n(Rye,"A",{href:!0});var Vtt=s(Fq);l0o=r(Vtt,"ViTMAEModel"),Vtt.forEach(t),i0o=r(Rye," (ViTMAE model)"),Rye.forEach(t),d0o=i($),X_=n($,"LI",{});var Pye=s(X_);_ie=n(Pye,"STRONG",{});var Xtt=s(_ie);c0o=r(Xtt,"wav2vec2"),Xtt.forEach(t),f0o=r(Pye," \u2014 "),Tq=n(Pye,"A",{href:!0});var ztt=s(Tq);m0o=r(ztt,"Wav2Vec2Model"),ztt.forEach(t),g0o=r(Pye," (Wav2Vec2 model)"),Pye.forEach(t),h0o=i($),z_=n($,"LI",{});var Bye=s(z_);uie=n(Bye,"STRONG",{});var Wtt=s(uie);p0o=r(Wtt,"wav2vec2-conformer"),Wtt.forEach(t),_0o=r(Bye," \u2014 "),Mq=n(Bye,"A",{href:!0});var Qtt=s(Mq);u0o=r(Qtt,"Wav2Vec2ConformerModel"),Qtt.forEach(t),b0o=r(Bye," (Wav2Vec2-Conformer model)"),Bye.forEach(t),v0o=i($),W_=n($,"LI",{});var Iye=s(W_);bie=n(Iye,"STRONG",{});var Htt=s(bie);F0o=r(Htt,"wavlm"),Htt.forEach(t),T0o=r(Iye," \u2014 "),Eq=n(Iye,"A",{href:!0});var Utt=s(Eq);M0o=r(Utt,"WavLMModel"),Utt.forEach(t),E0o=r(Iye," (WavLM model)"),Iye.forEach(t),C0o=i($),Q_=n($,"LI",{});var Nye=s(Q_);vie=n(Nye,"STRONG",{});var Jtt=s(vie);w0o=r(Jtt,"xglm"),Jtt.forEach(t),A0o=r(Nye," \u2014 "),Cq=n(Nye,"A",{href:!0});var Ytt=s(Cq);y0o=r(Ytt,"XGLMModel"),Ytt.forEach(t),L0o=r(Nye," (XGLM model)"),Nye.forEach(t),x0o=i($),H_=n($,"LI",{});var qye=s(H_);Fie=n(qye,"STRONG",{});var Ktt=s(Fie);$0o=r(Ktt,"xlm"),Ktt.forEach(t),k0o=r(qye," \u2014 "),wq=n(qye,"A",{href:!0});var Ztt=s(wq);S0o=r(Ztt,"XLMModel"),Ztt.forEach(t),R0o=r(qye," (XLM model)"),qye.forEach(t),P0o=i($),U_=n($,"LI",{});var jye=s(U_);Tie=n(jye,"STRONG",{});var eat=s(Tie);B0o=r(eat,"xlm-prophetnet"),eat.forEach(t),I0o=r(jye," \u2014 "),Aq=n(jye,"A",{href:!0});var oat=s(Aq);N0o=r(oat,"XLMProphetNetModel"),oat.forEach(t),q0o=r(jye," (XLMProphetNet model)"),jye.forEach(t),j0o=i($),J_=n($,"LI",{});var Dye=s(J_);Mie=n(Dye,"STRONG",{});var rat=s(Mie);D0o=r(rat,"xlm-roberta"),rat.forEach(t),G0o=r(Dye," \u2014 "),yq=n(Dye,"A",{href:!0});var tat=s(yq);O0o=r(tat,"XLMRobertaModel"),tat.forEach(t),V0o=r(Dye," (XLM-RoBERTa model)"),Dye.forEach(t),X0o=i($),Y_=n($,"LI",{});var Gye=s(Y_);Eie=n(Gye,"STRONG",{});var aat=s(Eie);z0o=r(aat,"xlm-roberta-xl"),aat.forEach(t),W0o=r(Gye," \u2014 "),Lq=n(Gye,"A",{href:!0});var nat=s(Lq);Q0o=r(nat,"XLMRobertaXLModel"),nat.forEach(t),H0o=r(Gye," (XLM-RoBERTa-XL model)"),Gye.forEach(t),U0o=i($),K_=n($,"LI",{});var Oye=s(K_);Cie=n(Oye,"STRONG",{});var sat=s(Cie);J0o=r(sat,"xlnet"),sat.forEach(t),Y0o=r(Oye," \u2014 "),xq=n(Oye,"A",{href:!0});var lat=s(xq);K0o=r(lat,"XLNetModel"),lat.forEach(t),Z0o=r(Oye," (XLNet model)"),Oye.forEach(t),eTo=i($),Z_=n($,"LI",{});var Vye=s(Z_);wie=n(Vye,"STRONG",{});var iat=s(wie);oTo=r(iat,"yolos"),iat.forEach(t),rTo=r(Vye," \u2014 "),$q=n(Vye,"A",{href:!0});var dat=s($q);tTo=r(dat,"YolosModel"),dat.forEach(t),aTo=r(Vye," (YOLOS model)"),Vye.forEach(t),nTo=i($),eu=n($,"LI",{});var Xye=s(eu);Aie=n(Xye,"STRONG",{});var cat=s(Aie);sTo=r(cat,"yoso"),cat.forEach(t),lTo=r(Xye," \u2014 "),kq=n(Xye,"A",{href:!0});var fat=s(kq);iTo=r(fat,"YosoModel"),fat.forEach(t),dTo=r(Xye," (YOSO model)"),Xye.forEach(t),$.forEach(t),cTo=i(oa),ou=n(oa,"P",{});var zye=s(ou);fTo=r(zye,"The model is set in evaluation mode by default using "),yie=n(zye,"CODE",{});var mat=s(yie);mTo=r(mat,"model.eval()"),mat.forEach(t),gTo=r(zye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lie=n(zye,"CODE",{});var gat=s(Lie);hTo=r(gat,"model.train()"),gat.forEach(t),zye.forEach(t),pTo=i(oa),T(ru.$$.fragment,oa),oa.forEach(t),Gs.forEach(t),Rqe=i(f),Li=n(f,"H2",{class:!0});var NDe=s(Li);tu=n(NDe,"A",{id:!0,class:!0,href:!0});var hat=s(tu);xie=n(hat,"SPAN",{});var pat=s(xie);T(dy.$$.fragment,pat),pat.forEach(t),hat.forEach(t),_To=i(NDe),$ie=n(NDe,"SPAN",{});var _at=s($ie);uTo=r(_at,"AutoModelForPreTraining"),_at.forEach(t),NDe.forEach(t),Pqe=i(f),xo=n(f,"DIV",{class:!0});var Os=s(xo);T(cy.$$.fragment,Os),bTo=i(Os),xi=n(Os,"P",{});var yZ=s(xi);vTo=r(yZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Sq=n(yZ,"A",{href:!0});var uat=s(Sq);FTo=r(uat,"from_pretrained()"),uat.forEach(t),TTo=r(yZ," class method or the "),Rq=n(yZ,"A",{href:!0});var bat=s(Rq);MTo=r(bat,"from_config()"),bat.forEach(t),ETo=r(yZ,` class
method.`),yZ.forEach(t),CTo=i(Os),fy=n(Os,"P",{});var qDe=s(fy);wTo=r(qDe,"This class cannot be instantiated directly using "),kie=n(qDe,"CODE",{});var vat=s(kie);ATo=r(vat,"__init__()"),vat.forEach(t),yTo=r(qDe," (throws an error)."),qDe.forEach(t),LTo=i(Os),at=n(Os,"DIV",{class:!0});var qw=s(at);T(my.$$.fragment,qw),xTo=i(qw),Sie=n(qw,"P",{});var Fat=s(Sie);$To=r(Fat,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Fat.forEach(t),kTo=i(qw),$i=n(qw,"P",{});var LZ=s($i);STo=r(LZ,`Note:
Loading a model from its configuration file does `),Rie=n(LZ,"STRONG",{});var Tat=s(Rie);RTo=r(Tat,"not"),Tat.forEach(t),PTo=r(LZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Pq=n(LZ,"A",{href:!0});var Mat=s(Pq);BTo=r(Mat,"from_pretrained()"),Mat.forEach(t),ITo=r(LZ," to load the model weights."),LZ.forEach(t),NTo=i(qw),T(au.$$.fragment,qw),qw.forEach(t),qTo=i(Os),Ye=n(Os,"DIV",{class:!0});var ra=s(Ye);T(gy.$$.fragment,ra),jTo=i(ra),Pie=n(ra,"P",{});var Eat=s(Pie);DTo=r(Eat,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Eat.forEach(t),GTo=i(ra),xa=n(ra,"P",{});var jw=s(xa);OTo=r(jw,"The model class to instantiate is selected based on the "),Bie=n(jw,"CODE",{});var Cat=s(Bie);VTo=r(Cat,"model_type"),Cat.forEach(t),XTo=r(jw,` property of the config object (either
passed as an argument or loaded from `),Iie=n(jw,"CODE",{});var wat=s(Iie);zTo=r(wat,"pretrained_model_name_or_path"),wat.forEach(t),WTo=r(jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nie=n(jw,"CODE",{});var Aat=s(Nie);QTo=r(Aat,"pretrained_model_name_or_path"),Aat.forEach(t),HTo=r(jw,":"),jw.forEach(t),UTo=i(ra),G=n(ra,"UL",{});var O=s(G);nu=n(O,"LI",{});var Wye=s(nu);qie=n(Wye,"STRONG",{});var yat=s(qie);JTo=r(yat,"albert"),yat.forEach(t),YTo=r(Wye," \u2014 "),Bq=n(Wye,"A",{href:!0});var Lat=s(Bq);KTo=r(Lat,"AlbertForPreTraining"),Lat.forEach(t),ZTo=r(Wye," (ALBERT model)"),Wye.forEach(t),e7o=i(O),su=n(O,"LI",{});var Qye=s(su);jie=n(Qye,"STRONG",{});var xat=s(jie);o7o=r(xat,"bart"),xat.forEach(t),r7o=r(Qye," \u2014 "),Iq=n(Qye,"A",{href:!0});var $at=s(Iq);t7o=r($at,"BartForConditionalGeneration"),$at.forEach(t),a7o=r(Qye," (BART model)"),Qye.forEach(t),n7o=i(O),lu=n(O,"LI",{});var Hye=s(lu);Die=n(Hye,"STRONG",{});var kat=s(Die);s7o=r(kat,"bert"),kat.forEach(t),l7o=r(Hye," \u2014 "),Nq=n(Hye,"A",{href:!0});var Sat=s(Nq);i7o=r(Sat,"BertForPreTraining"),Sat.forEach(t),d7o=r(Hye," (BERT model)"),Hye.forEach(t),c7o=i(O),iu=n(O,"LI",{});var Uye=s(iu);Gie=n(Uye,"STRONG",{});var Rat=s(Gie);f7o=r(Rat,"big_bird"),Rat.forEach(t),m7o=r(Uye," \u2014 "),qq=n(Uye,"A",{href:!0});var Pat=s(qq);g7o=r(Pat,"BigBirdForPreTraining"),Pat.forEach(t),h7o=r(Uye," (BigBird model)"),Uye.forEach(t),p7o=i(O),du=n(O,"LI",{});var Jye=s(du);Oie=n(Jye,"STRONG",{});var Bat=s(Oie);_7o=r(Bat,"camembert"),Bat.forEach(t),u7o=r(Jye," \u2014 "),jq=n(Jye,"A",{href:!0});var Iat=s(jq);b7o=r(Iat,"CamembertForMaskedLM"),Iat.forEach(t),v7o=r(Jye," (CamemBERT model)"),Jye.forEach(t),F7o=i(O),cu=n(O,"LI",{});var Yye=s(cu);Vie=n(Yye,"STRONG",{});var Nat=s(Vie);T7o=r(Nat,"ctrl"),Nat.forEach(t),M7o=r(Yye," \u2014 "),Dq=n(Yye,"A",{href:!0});var qat=s(Dq);E7o=r(qat,"CTRLLMHeadModel"),qat.forEach(t),C7o=r(Yye," (CTRL model)"),Yye.forEach(t),w7o=i(O),fu=n(O,"LI",{});var Kye=s(fu);Xie=n(Kye,"STRONG",{});var jat=s(Xie);A7o=r(jat,"data2vec-text"),jat.forEach(t),y7o=r(Kye," \u2014 "),Gq=n(Kye,"A",{href:!0});var Dat=s(Gq);L7o=r(Dat,"Data2VecTextForMaskedLM"),Dat.forEach(t),x7o=r(Kye," (Data2VecText model)"),Kye.forEach(t),$7o=i(O),mu=n(O,"LI",{});var Zye=s(mu);zie=n(Zye,"STRONG",{});var Gat=s(zie);k7o=r(Gat,"deberta"),Gat.forEach(t),S7o=r(Zye," \u2014 "),Oq=n(Zye,"A",{href:!0});var Oat=s(Oq);R7o=r(Oat,"DebertaForMaskedLM"),Oat.forEach(t),P7o=r(Zye," (DeBERTa model)"),Zye.forEach(t),B7o=i(O),gu=n(O,"LI",{});var eLe=s(gu);Wie=n(eLe,"STRONG",{});var Vat=s(Wie);I7o=r(Vat,"deberta-v2"),Vat.forEach(t),N7o=r(eLe," \u2014 "),Vq=n(eLe,"A",{href:!0});var Xat=s(Vq);q7o=r(Xat,"DebertaV2ForMaskedLM"),Xat.forEach(t),j7o=r(eLe," (DeBERTa-v2 model)"),eLe.forEach(t),D7o=i(O),hu=n(O,"LI",{});var oLe=s(hu);Qie=n(oLe,"STRONG",{});var zat=s(Qie);G7o=r(zat,"distilbert"),zat.forEach(t),O7o=r(oLe," \u2014 "),Xq=n(oLe,"A",{href:!0});var Wat=s(Xq);V7o=r(Wat,"DistilBertForMaskedLM"),Wat.forEach(t),X7o=r(oLe," (DistilBERT model)"),oLe.forEach(t),z7o=i(O),pu=n(O,"LI",{});var rLe=s(pu);Hie=n(rLe,"STRONG",{});var Qat=s(Hie);W7o=r(Qat,"electra"),Qat.forEach(t),Q7o=r(rLe," \u2014 "),zq=n(rLe,"A",{href:!0});var Hat=s(zq);H7o=r(Hat,"ElectraForPreTraining"),Hat.forEach(t),U7o=r(rLe," (ELECTRA model)"),rLe.forEach(t),J7o=i(O),_u=n(O,"LI",{});var tLe=s(_u);Uie=n(tLe,"STRONG",{});var Uat=s(Uie);Y7o=r(Uat,"flaubert"),Uat.forEach(t),K7o=r(tLe," \u2014 "),Wq=n(tLe,"A",{href:!0});var Jat=s(Wq);Z7o=r(Jat,"FlaubertWithLMHeadModel"),Jat.forEach(t),eMo=r(tLe," (FlauBERT model)"),tLe.forEach(t),oMo=i(O),uu=n(O,"LI",{});var aLe=s(uu);Jie=n(aLe,"STRONG",{});var Yat=s(Jie);rMo=r(Yat,"flava"),Yat.forEach(t),tMo=r(aLe," \u2014 "),Qq=n(aLe,"A",{href:!0});var Kat=s(Qq);aMo=r(Kat,"FlavaForPreTraining"),Kat.forEach(t),nMo=r(aLe," (Flava model)"),aLe.forEach(t),sMo=i(O),bu=n(O,"LI",{});var nLe=s(bu);Yie=n(nLe,"STRONG",{});var Zat=s(Yie);lMo=r(Zat,"fnet"),Zat.forEach(t),iMo=r(nLe," \u2014 "),Hq=n(nLe,"A",{href:!0});var ent=s(Hq);dMo=r(ent,"FNetForPreTraining"),ent.forEach(t),cMo=r(nLe," (FNet model)"),nLe.forEach(t),fMo=i(O),vu=n(O,"LI",{});var sLe=s(vu);Kie=n(sLe,"STRONG",{});var ont=s(Kie);mMo=r(ont,"fsmt"),ont.forEach(t),gMo=r(sLe," \u2014 "),Uq=n(sLe,"A",{href:!0});var rnt=s(Uq);hMo=r(rnt,"FSMTForConditionalGeneration"),rnt.forEach(t),pMo=r(sLe," (FairSeq Machine-Translation model)"),sLe.forEach(t),_Mo=i(O),Fu=n(O,"LI",{});var lLe=s(Fu);Zie=n(lLe,"STRONG",{});var tnt=s(Zie);uMo=r(tnt,"funnel"),tnt.forEach(t),bMo=r(lLe," \u2014 "),Jq=n(lLe,"A",{href:!0});var ant=s(Jq);vMo=r(ant,"FunnelForPreTraining"),ant.forEach(t),FMo=r(lLe," (Funnel Transformer model)"),lLe.forEach(t),TMo=i(O),Tu=n(O,"LI",{});var iLe=s(Tu);ede=n(iLe,"STRONG",{});var nnt=s(ede);MMo=r(nnt,"gpt2"),nnt.forEach(t),EMo=r(iLe," \u2014 "),Yq=n(iLe,"A",{href:!0});var snt=s(Yq);CMo=r(snt,"GPT2LMHeadModel"),snt.forEach(t),wMo=r(iLe," (OpenAI GPT-2 model)"),iLe.forEach(t),AMo=i(O),Mu=n(O,"LI",{});var dLe=s(Mu);ode=n(dLe,"STRONG",{});var lnt=s(ode);yMo=r(lnt,"ibert"),lnt.forEach(t),LMo=r(dLe," \u2014 "),Kq=n(dLe,"A",{href:!0});var int=s(Kq);xMo=r(int,"IBertForMaskedLM"),int.forEach(t),$Mo=r(dLe," (I-BERT model)"),dLe.forEach(t),kMo=i(O),Eu=n(O,"LI",{});var cLe=s(Eu);rde=n(cLe,"STRONG",{});var dnt=s(rde);SMo=r(dnt,"layoutlm"),dnt.forEach(t),RMo=r(cLe," \u2014 "),Zq=n(cLe,"A",{href:!0});var cnt=s(Zq);PMo=r(cnt,"LayoutLMForMaskedLM"),cnt.forEach(t),BMo=r(cLe," (LayoutLM model)"),cLe.forEach(t),IMo=i(O),Cu=n(O,"LI",{});var fLe=s(Cu);tde=n(fLe,"STRONG",{});var fnt=s(tde);NMo=r(fnt,"longformer"),fnt.forEach(t),qMo=r(fLe," \u2014 "),ej=n(fLe,"A",{href:!0});var mnt=s(ej);jMo=r(mnt,"LongformerForMaskedLM"),mnt.forEach(t),DMo=r(fLe," (Longformer model)"),fLe.forEach(t),GMo=i(O),wu=n(O,"LI",{});var mLe=s(wu);ade=n(mLe,"STRONG",{});var gnt=s(ade);OMo=r(gnt,"lxmert"),gnt.forEach(t),VMo=r(mLe," \u2014 "),oj=n(mLe,"A",{href:!0});var hnt=s(oj);XMo=r(hnt,"LxmertForPreTraining"),hnt.forEach(t),zMo=r(mLe," (LXMERT model)"),mLe.forEach(t),WMo=i(O),Au=n(O,"LI",{});var gLe=s(Au);nde=n(gLe,"STRONG",{});var pnt=s(nde);QMo=r(pnt,"megatron-bert"),pnt.forEach(t),HMo=r(gLe," \u2014 "),rj=n(gLe,"A",{href:!0});var _nt=s(rj);UMo=r(_nt,"MegatronBertForPreTraining"),_nt.forEach(t),JMo=r(gLe," (MegatronBert model)"),gLe.forEach(t),YMo=i(O),yu=n(O,"LI",{});var hLe=s(yu);sde=n(hLe,"STRONG",{});var unt=s(sde);KMo=r(unt,"mobilebert"),unt.forEach(t),ZMo=r(hLe," \u2014 "),tj=n(hLe,"A",{href:!0});var bnt=s(tj);e4o=r(bnt,"MobileBertForPreTraining"),bnt.forEach(t),o4o=r(hLe," (MobileBERT model)"),hLe.forEach(t),r4o=i(O),Lu=n(O,"LI",{});var pLe=s(Lu);lde=n(pLe,"STRONG",{});var vnt=s(lde);t4o=r(vnt,"mpnet"),vnt.forEach(t),a4o=r(pLe," \u2014 "),aj=n(pLe,"A",{href:!0});var Fnt=s(aj);n4o=r(Fnt,"MPNetForMaskedLM"),Fnt.forEach(t),s4o=r(pLe," (MPNet model)"),pLe.forEach(t),l4o=i(O),xu=n(O,"LI",{});var _Le=s(xu);ide=n(_Le,"STRONG",{});var Tnt=s(ide);i4o=r(Tnt,"openai-gpt"),Tnt.forEach(t),d4o=r(_Le," \u2014 "),nj=n(_Le,"A",{href:!0});var Mnt=s(nj);c4o=r(Mnt,"OpenAIGPTLMHeadModel"),Mnt.forEach(t),f4o=r(_Le," (OpenAI GPT model)"),_Le.forEach(t),m4o=i(O),$u=n(O,"LI",{});var uLe=s($u);dde=n(uLe,"STRONG",{});var Ent=s(dde);g4o=r(Ent,"retribert"),Ent.forEach(t),h4o=r(uLe," \u2014 "),sj=n(uLe,"A",{href:!0});var Cnt=s(sj);p4o=r(Cnt,"RetriBertModel"),Cnt.forEach(t),_4o=r(uLe," (RetriBERT model)"),uLe.forEach(t),u4o=i(O),ku=n(O,"LI",{});var bLe=s(ku);cde=n(bLe,"STRONG",{});var wnt=s(cde);b4o=r(wnt,"roberta"),wnt.forEach(t),v4o=r(bLe," \u2014 "),lj=n(bLe,"A",{href:!0});var Ant=s(lj);F4o=r(Ant,"RobertaForMaskedLM"),Ant.forEach(t),T4o=r(bLe," (RoBERTa model)"),bLe.forEach(t),M4o=i(O),Su=n(O,"LI",{});var vLe=s(Su);fde=n(vLe,"STRONG",{});var ynt=s(fde);E4o=r(ynt,"splinter"),ynt.forEach(t),C4o=r(vLe," \u2014 "),ij=n(vLe,"A",{href:!0});var Lnt=s(ij);w4o=r(Lnt,"SplinterForPreTraining"),Lnt.forEach(t),A4o=r(vLe," (Splinter model)"),vLe.forEach(t),y4o=i(O),Ru=n(O,"LI",{});var FLe=s(Ru);mde=n(FLe,"STRONG",{});var xnt=s(mde);L4o=r(xnt,"squeezebert"),xnt.forEach(t),x4o=r(FLe," \u2014 "),dj=n(FLe,"A",{href:!0});var $nt=s(dj);$4o=r($nt,"SqueezeBertForMaskedLM"),$nt.forEach(t),k4o=r(FLe," (SqueezeBERT model)"),FLe.forEach(t),S4o=i(O),Pu=n(O,"LI",{});var TLe=s(Pu);gde=n(TLe,"STRONG",{});var knt=s(gde);R4o=r(knt,"t5"),knt.forEach(t),P4o=r(TLe," \u2014 "),cj=n(TLe,"A",{href:!0});var Snt=s(cj);B4o=r(Snt,"T5ForConditionalGeneration"),Snt.forEach(t),I4o=r(TLe," (T5 model)"),TLe.forEach(t),N4o=i(O),Bu=n(O,"LI",{});var MLe=s(Bu);hde=n(MLe,"STRONG",{});var Rnt=s(hde);q4o=r(Rnt,"tapas"),Rnt.forEach(t),j4o=r(MLe," \u2014 "),fj=n(MLe,"A",{href:!0});var Pnt=s(fj);D4o=r(Pnt,"TapasForMaskedLM"),Pnt.forEach(t),G4o=r(MLe," (TAPAS model)"),MLe.forEach(t),O4o=i(O),Iu=n(O,"LI",{});var ELe=s(Iu);pde=n(ELe,"STRONG",{});var Bnt=s(pde);V4o=r(Bnt,"transfo-xl"),Bnt.forEach(t),X4o=r(ELe," \u2014 "),mj=n(ELe,"A",{href:!0});var Int=s(mj);z4o=r(Int,"TransfoXLLMHeadModel"),Int.forEach(t),W4o=r(ELe," (Transformer-XL model)"),ELe.forEach(t),Q4o=i(O),Nu=n(O,"LI",{});var CLe=s(Nu);_de=n(CLe,"STRONG",{});var Nnt=s(_de);H4o=r(Nnt,"unispeech"),Nnt.forEach(t),U4o=r(CLe," \u2014 "),gj=n(CLe,"A",{href:!0});var qnt=s(gj);J4o=r(qnt,"UniSpeechForPreTraining"),qnt.forEach(t),Y4o=r(CLe," (UniSpeech model)"),CLe.forEach(t),K4o=i(O),qu=n(O,"LI",{});var wLe=s(qu);ude=n(wLe,"STRONG",{});var jnt=s(ude);Z4o=r(jnt,"unispeech-sat"),jnt.forEach(t),eEo=r(wLe," \u2014 "),hj=n(wLe,"A",{href:!0});var Dnt=s(hj);oEo=r(Dnt,"UniSpeechSatForPreTraining"),Dnt.forEach(t),rEo=r(wLe," (UniSpeechSat model)"),wLe.forEach(t),tEo=i(O),ju=n(O,"LI",{});var ALe=s(ju);bde=n(ALe,"STRONG",{});var Gnt=s(bde);aEo=r(Gnt,"visual_bert"),Gnt.forEach(t),nEo=r(ALe," \u2014 "),pj=n(ALe,"A",{href:!0});var Ont=s(pj);sEo=r(Ont,"VisualBertForPreTraining"),Ont.forEach(t),lEo=r(ALe," (VisualBert model)"),ALe.forEach(t),iEo=i(O),Du=n(O,"LI",{});var yLe=s(Du);vde=n(yLe,"STRONG",{});var Vnt=s(vde);dEo=r(Vnt,"vit_mae"),Vnt.forEach(t),cEo=r(yLe," \u2014 "),_j=n(yLe,"A",{href:!0});var Xnt=s(_j);fEo=r(Xnt,"ViTMAEForPreTraining"),Xnt.forEach(t),mEo=r(yLe," (ViTMAE model)"),yLe.forEach(t),gEo=i(O),Gu=n(O,"LI",{});var LLe=s(Gu);Fde=n(LLe,"STRONG",{});var znt=s(Fde);hEo=r(znt,"wav2vec2"),znt.forEach(t),pEo=r(LLe," \u2014 "),uj=n(LLe,"A",{href:!0});var Wnt=s(uj);_Eo=r(Wnt,"Wav2Vec2ForPreTraining"),Wnt.forEach(t),uEo=r(LLe," (Wav2Vec2 model)"),LLe.forEach(t),bEo=i(O),Ou=n(O,"LI",{});var xLe=s(Ou);Tde=n(xLe,"STRONG",{});var Qnt=s(Tde);vEo=r(Qnt,"wav2vec2-conformer"),Qnt.forEach(t),FEo=r(xLe," \u2014 "),bj=n(xLe,"A",{href:!0});var Hnt=s(bj);TEo=r(Hnt,"Wav2Vec2ConformerForPreTraining"),Hnt.forEach(t),MEo=r(xLe," (Wav2Vec2-Conformer model)"),xLe.forEach(t),EEo=i(O),Vu=n(O,"LI",{});var $Le=s(Vu);Mde=n($Le,"STRONG",{});var Unt=s(Mde);CEo=r(Unt,"xlm"),Unt.forEach(t),wEo=r($Le," \u2014 "),vj=n($Le,"A",{href:!0});var Jnt=s(vj);AEo=r(Jnt,"XLMWithLMHeadModel"),Jnt.forEach(t),yEo=r($Le," (XLM model)"),$Le.forEach(t),LEo=i(O),Xu=n(O,"LI",{});var kLe=s(Xu);Ede=n(kLe,"STRONG",{});var Ynt=s(Ede);xEo=r(Ynt,"xlm-roberta"),Ynt.forEach(t),$Eo=r(kLe," \u2014 "),Fj=n(kLe,"A",{href:!0});var Knt=s(Fj);kEo=r(Knt,"XLMRobertaForMaskedLM"),Knt.forEach(t),SEo=r(kLe," (XLM-RoBERTa model)"),kLe.forEach(t),REo=i(O),zu=n(O,"LI",{});var SLe=s(zu);Cde=n(SLe,"STRONG",{});var Znt=s(Cde);PEo=r(Znt,"xlm-roberta-xl"),Znt.forEach(t),BEo=r(SLe," \u2014 "),Tj=n(SLe,"A",{href:!0});var est=s(Tj);IEo=r(est,"XLMRobertaXLForMaskedLM"),est.forEach(t),NEo=r(SLe," (XLM-RoBERTa-XL model)"),SLe.forEach(t),qEo=i(O),Wu=n(O,"LI",{});var RLe=s(Wu);wde=n(RLe,"STRONG",{});var ost=s(wde);jEo=r(ost,"xlnet"),ost.forEach(t),DEo=r(RLe," \u2014 "),Mj=n(RLe,"A",{href:!0});var rst=s(Mj);GEo=r(rst,"XLNetLMHeadModel"),rst.forEach(t),OEo=r(RLe," (XLNet model)"),RLe.forEach(t),O.forEach(t),VEo=i(ra),Qu=n(ra,"P",{});var PLe=s(Qu);XEo=r(PLe,"The model is set in evaluation mode by default using "),Ade=n(PLe,"CODE",{});var tst=s(Ade);zEo=r(tst,"model.eval()"),tst.forEach(t),WEo=r(PLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yde=n(PLe,"CODE",{});var ast=s(yde);QEo=r(ast,"model.train()"),ast.forEach(t),PLe.forEach(t),HEo=i(ra),T(Hu.$$.fragment,ra),ra.forEach(t),Os.forEach(t),Bqe=i(f),ki=n(f,"H2",{class:!0});var jDe=s(ki);Uu=n(jDe,"A",{id:!0,class:!0,href:!0});var nst=s(Uu);Lde=n(nst,"SPAN",{});var sst=s(Lde);T(hy.$$.fragment,sst),sst.forEach(t),nst.forEach(t),UEo=i(jDe),xde=n(jDe,"SPAN",{});var lst=s(xde);JEo=r(lst,"AutoModelForCausalLM"),lst.forEach(t),jDe.forEach(t),Iqe=i(f),$o=n(f,"DIV",{class:!0});var Vs=s($o);T(py.$$.fragment,Vs),YEo=i(Vs),Si=n(Vs,"P",{});var xZ=s(Si);KEo=r(xZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Ej=n(xZ,"A",{href:!0});var ist=s(Ej);ZEo=r(ist,"from_pretrained()"),ist.forEach(t),eCo=r(xZ," class method or the "),Cj=n(xZ,"A",{href:!0});var dst=s(Cj);oCo=r(dst,"from_config()"),dst.forEach(t),rCo=r(xZ,` class
method.`),xZ.forEach(t),tCo=i(Vs),_y=n(Vs,"P",{});var DDe=s(_y);aCo=r(DDe,"This class cannot be instantiated directly using "),$de=n(DDe,"CODE",{});var cst=s($de);nCo=r(cst,"__init__()"),cst.forEach(t),sCo=r(DDe," (throws an error)."),DDe.forEach(t),lCo=i(Vs),nt=n(Vs,"DIV",{class:!0});var Dw=s(nt);T(uy.$$.fragment,Dw),iCo=i(Dw),kde=n(Dw,"P",{});var fst=s(kde);dCo=r(fst,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),fst.forEach(t),cCo=i(Dw),Ri=n(Dw,"P",{});var $Z=s(Ri);fCo=r($Z,`Note:
Loading a model from its configuration file does `),Sde=n($Z,"STRONG",{});var mst=s(Sde);mCo=r(mst,"not"),mst.forEach(t),gCo=r($Z,` load the model weights. It only affects the
model\u2019s configuration. Use `),wj=n($Z,"A",{href:!0});var gst=s(wj);hCo=r(gst,"from_pretrained()"),gst.forEach(t),pCo=r($Z," to load the model weights."),$Z.forEach(t),_Co=i(Dw),T(Ju.$$.fragment,Dw),Dw.forEach(t),uCo=i(Vs),Ke=n(Vs,"DIV",{class:!0});var ta=s(Ke);T(by.$$.fragment,ta),bCo=i(ta),Rde=n(ta,"P",{});var hst=s(Rde);vCo=r(hst,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),hst.forEach(t),FCo=i(ta),$a=n(ta,"P",{});var Gw=s($a);TCo=r(Gw,"The model class to instantiate is selected based on the "),Pde=n(Gw,"CODE",{});var pst=s(Pde);MCo=r(pst,"model_type"),pst.forEach(t),ECo=r(Gw,` property of the config object (either
passed as an argument or loaded from `),Bde=n(Gw,"CODE",{});var _st=s(Bde);CCo=r(_st,"pretrained_model_name_or_path"),_st.forEach(t),wCo=r(Gw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ide=n(Gw,"CODE",{});var ust=s(Ide);ACo=r(ust,"pretrained_model_name_or_path"),ust.forEach(t),yCo=r(Gw,":"),Gw.forEach(t),LCo=i(ta),z=n(ta,"UL",{});var Q=s(z);Yu=n(Q,"LI",{});var BLe=s(Yu);Nde=n(BLe,"STRONG",{});var bst=s(Nde);xCo=r(bst,"bart"),bst.forEach(t),$Co=r(BLe," \u2014 "),Aj=n(BLe,"A",{href:!0});var vst=s(Aj);kCo=r(vst,"BartForCausalLM"),vst.forEach(t),SCo=r(BLe," (BART model)"),BLe.forEach(t),RCo=i(Q),Ku=n(Q,"LI",{});var ILe=s(Ku);qde=n(ILe,"STRONG",{});var Fst=s(qde);PCo=r(Fst,"bert"),Fst.forEach(t),BCo=r(ILe," \u2014 "),yj=n(ILe,"A",{href:!0});var Tst=s(yj);ICo=r(Tst,"BertLMHeadModel"),Tst.forEach(t),NCo=r(ILe," (BERT model)"),ILe.forEach(t),qCo=i(Q),Zu=n(Q,"LI",{});var NLe=s(Zu);jde=n(NLe,"STRONG",{});var Mst=s(jde);jCo=r(Mst,"bert-generation"),Mst.forEach(t),DCo=r(NLe," \u2014 "),Lj=n(NLe,"A",{href:!0});var Est=s(Lj);GCo=r(Est,"BertGenerationDecoder"),Est.forEach(t),OCo=r(NLe," (Bert Generation model)"),NLe.forEach(t),VCo=i(Q),e1=n(Q,"LI",{});var qLe=s(e1);Dde=n(qLe,"STRONG",{});var Cst=s(Dde);XCo=r(Cst,"big_bird"),Cst.forEach(t),zCo=r(qLe," \u2014 "),xj=n(qLe,"A",{href:!0});var wst=s(xj);WCo=r(wst,"BigBirdForCausalLM"),wst.forEach(t),QCo=r(qLe," (BigBird model)"),qLe.forEach(t),HCo=i(Q),o1=n(Q,"LI",{});var jLe=s(o1);Gde=n(jLe,"STRONG",{});var Ast=s(Gde);UCo=r(Ast,"bigbird_pegasus"),Ast.forEach(t),JCo=r(jLe," \u2014 "),$j=n(jLe,"A",{href:!0});var yst=s($j);YCo=r(yst,"BigBirdPegasusForCausalLM"),yst.forEach(t),KCo=r(jLe," (BigBirdPegasus model)"),jLe.forEach(t),ZCo=i(Q),r1=n(Q,"LI",{});var DLe=s(r1);Ode=n(DLe,"STRONG",{});var Lst=s(Ode);e3o=r(Lst,"blenderbot"),Lst.forEach(t),o3o=r(DLe," \u2014 "),kj=n(DLe,"A",{href:!0});var xst=s(kj);r3o=r(xst,"BlenderbotForCausalLM"),xst.forEach(t),t3o=r(DLe," (Blenderbot model)"),DLe.forEach(t),a3o=i(Q),t1=n(Q,"LI",{});var GLe=s(t1);Vde=n(GLe,"STRONG",{});var $st=s(Vde);n3o=r($st,"blenderbot-small"),$st.forEach(t),s3o=r(GLe," \u2014 "),Sj=n(GLe,"A",{href:!0});var kst=s(Sj);l3o=r(kst,"BlenderbotSmallForCausalLM"),kst.forEach(t),i3o=r(GLe," (BlenderbotSmall model)"),GLe.forEach(t),d3o=i(Q),a1=n(Q,"LI",{});var OLe=s(a1);Xde=n(OLe,"STRONG",{});var Sst=s(Xde);c3o=r(Sst,"camembert"),Sst.forEach(t),f3o=r(OLe," \u2014 "),Rj=n(OLe,"A",{href:!0});var Rst=s(Rj);m3o=r(Rst,"CamembertForCausalLM"),Rst.forEach(t),g3o=r(OLe," (CamemBERT model)"),OLe.forEach(t),h3o=i(Q),n1=n(Q,"LI",{});var VLe=s(n1);zde=n(VLe,"STRONG",{});var Pst=s(zde);p3o=r(Pst,"ctrl"),Pst.forEach(t),_3o=r(VLe," \u2014 "),Pj=n(VLe,"A",{href:!0});var Bst=s(Pj);u3o=r(Bst,"CTRLLMHeadModel"),Bst.forEach(t),b3o=r(VLe," (CTRL model)"),VLe.forEach(t),v3o=i(Q),s1=n(Q,"LI",{});var XLe=s(s1);Wde=n(XLe,"STRONG",{});var Ist=s(Wde);F3o=r(Ist,"data2vec-text"),Ist.forEach(t),T3o=r(XLe," \u2014 "),Bj=n(XLe,"A",{href:!0});var Nst=s(Bj);M3o=r(Nst,"Data2VecTextForCausalLM"),Nst.forEach(t),E3o=r(XLe," (Data2VecText model)"),XLe.forEach(t),C3o=i(Q),l1=n(Q,"LI",{});var zLe=s(l1);Qde=n(zLe,"STRONG",{});var qst=s(Qde);w3o=r(qst,"electra"),qst.forEach(t),A3o=r(zLe," \u2014 "),Ij=n(zLe,"A",{href:!0});var jst=s(Ij);y3o=r(jst,"ElectraForCausalLM"),jst.forEach(t),L3o=r(zLe," (ELECTRA model)"),zLe.forEach(t),x3o=i(Q),i1=n(Q,"LI",{});var WLe=s(i1);Hde=n(WLe,"STRONG",{});var Dst=s(Hde);$3o=r(Dst,"gpt2"),Dst.forEach(t),k3o=r(WLe," \u2014 "),Nj=n(WLe,"A",{href:!0});var Gst=s(Nj);S3o=r(Gst,"GPT2LMHeadModel"),Gst.forEach(t),R3o=r(WLe," (OpenAI GPT-2 model)"),WLe.forEach(t),P3o=i(Q),d1=n(Q,"LI",{});var QLe=s(d1);Ude=n(QLe,"STRONG",{});var Ost=s(Ude);B3o=r(Ost,"gpt_neo"),Ost.forEach(t),I3o=r(QLe," \u2014 "),qj=n(QLe,"A",{href:!0});var Vst=s(qj);N3o=r(Vst,"GPTNeoForCausalLM"),Vst.forEach(t),q3o=r(QLe," (GPT Neo model)"),QLe.forEach(t),j3o=i(Q),c1=n(Q,"LI",{});var HLe=s(c1);Jde=n(HLe,"STRONG",{});var Xst=s(Jde);D3o=r(Xst,"gpt_neox"),Xst.forEach(t),G3o=r(HLe," \u2014 "),jj=n(HLe,"A",{href:!0});var zst=s(jj);O3o=r(zst,"GPTNeoXForCausalLM"),zst.forEach(t),V3o=r(HLe," (GPT NeoX model)"),HLe.forEach(t),X3o=i(Q),f1=n(Q,"LI",{});var ULe=s(f1);Yde=n(ULe,"STRONG",{});var Wst=s(Yde);z3o=r(Wst,"gptj"),Wst.forEach(t),W3o=r(ULe," \u2014 "),Dj=n(ULe,"A",{href:!0});var Qst=s(Dj);Q3o=r(Qst,"GPTJForCausalLM"),Qst.forEach(t),H3o=r(ULe," (GPT-J model)"),ULe.forEach(t),U3o=i(Q),m1=n(Q,"LI",{});var JLe=s(m1);Kde=n(JLe,"STRONG",{});var Hst=s(Kde);J3o=r(Hst,"marian"),Hst.forEach(t),Y3o=r(JLe," \u2014 "),Gj=n(JLe,"A",{href:!0});var Ust=s(Gj);K3o=r(Ust,"MarianForCausalLM"),Ust.forEach(t),Z3o=r(JLe," (Marian model)"),JLe.forEach(t),ewo=i(Q),g1=n(Q,"LI",{});var YLe=s(g1);Zde=n(YLe,"STRONG",{});var Jst=s(Zde);owo=r(Jst,"mbart"),Jst.forEach(t),rwo=r(YLe," \u2014 "),Oj=n(YLe,"A",{href:!0});var Yst=s(Oj);two=r(Yst,"MBartForCausalLM"),Yst.forEach(t),awo=r(YLe," (mBART model)"),YLe.forEach(t),nwo=i(Q),h1=n(Q,"LI",{});var KLe=s(h1);ece=n(KLe,"STRONG",{});var Kst=s(ece);swo=r(Kst,"megatron-bert"),Kst.forEach(t),lwo=r(KLe," \u2014 "),Vj=n(KLe,"A",{href:!0});var Zst=s(Vj);iwo=r(Zst,"MegatronBertForCausalLM"),Zst.forEach(t),dwo=r(KLe," (MegatronBert model)"),KLe.forEach(t),cwo=i(Q),p1=n(Q,"LI",{});var ZLe=s(p1);oce=n(ZLe,"STRONG",{});var elt=s(oce);fwo=r(elt,"openai-gpt"),elt.forEach(t),mwo=r(ZLe," \u2014 "),Xj=n(ZLe,"A",{href:!0});var olt=s(Xj);gwo=r(olt,"OpenAIGPTLMHeadModel"),olt.forEach(t),hwo=r(ZLe," (OpenAI GPT model)"),ZLe.forEach(t),pwo=i(Q),_1=n(Q,"LI",{});var e8e=s(_1);rce=n(e8e,"STRONG",{});var rlt=s(rce);_wo=r(rlt,"opt"),rlt.forEach(t),uwo=r(e8e," \u2014 "),zj=n(e8e,"A",{href:!0});var tlt=s(zj);bwo=r(tlt,"OPTForCausalLM"),tlt.forEach(t),vwo=r(e8e," (OPT model)"),e8e.forEach(t),Fwo=i(Q),u1=n(Q,"LI",{});var o8e=s(u1);tce=n(o8e,"STRONG",{});var alt=s(tce);Two=r(alt,"pegasus"),alt.forEach(t),Mwo=r(o8e," \u2014 "),Wj=n(o8e,"A",{href:!0});var nlt=s(Wj);Ewo=r(nlt,"PegasusForCausalLM"),nlt.forEach(t),Cwo=r(o8e," (Pegasus model)"),o8e.forEach(t),wwo=i(Q),b1=n(Q,"LI",{});var r8e=s(b1);ace=n(r8e,"STRONG",{});var slt=s(ace);Awo=r(slt,"plbart"),slt.forEach(t),ywo=r(r8e," \u2014 "),Qj=n(r8e,"A",{href:!0});var llt=s(Qj);Lwo=r(llt,"PLBartForCausalLM"),llt.forEach(t),xwo=r(r8e," (PLBart model)"),r8e.forEach(t),$wo=i(Q),v1=n(Q,"LI",{});var t8e=s(v1);nce=n(t8e,"STRONG",{});var ilt=s(nce);kwo=r(ilt,"prophetnet"),ilt.forEach(t),Swo=r(t8e," \u2014 "),Hj=n(t8e,"A",{href:!0});var dlt=s(Hj);Rwo=r(dlt,"ProphetNetForCausalLM"),dlt.forEach(t),Pwo=r(t8e," (ProphetNet model)"),t8e.forEach(t),Bwo=i(Q),F1=n(Q,"LI",{});var a8e=s(F1);sce=n(a8e,"STRONG",{});var clt=s(sce);Iwo=r(clt,"qdqbert"),clt.forEach(t),Nwo=r(a8e," \u2014 "),Uj=n(a8e,"A",{href:!0});var flt=s(Uj);qwo=r(flt,"QDQBertLMHeadModel"),flt.forEach(t),jwo=r(a8e," (QDQBert model)"),a8e.forEach(t),Dwo=i(Q),T1=n(Q,"LI",{});var n8e=s(T1);lce=n(n8e,"STRONG",{});var mlt=s(lce);Gwo=r(mlt,"reformer"),mlt.forEach(t),Owo=r(n8e," \u2014 "),Jj=n(n8e,"A",{href:!0});var glt=s(Jj);Vwo=r(glt,"ReformerModelWithLMHead"),glt.forEach(t),Xwo=r(n8e," (Reformer model)"),n8e.forEach(t),zwo=i(Q),M1=n(Q,"LI",{});var s8e=s(M1);ice=n(s8e,"STRONG",{});var hlt=s(ice);Wwo=r(hlt,"rembert"),hlt.forEach(t),Qwo=r(s8e," \u2014 "),Yj=n(s8e,"A",{href:!0});var plt=s(Yj);Hwo=r(plt,"RemBertForCausalLM"),plt.forEach(t),Uwo=r(s8e," (RemBERT model)"),s8e.forEach(t),Jwo=i(Q),E1=n(Q,"LI",{});var l8e=s(E1);dce=n(l8e,"STRONG",{});var _lt=s(dce);Ywo=r(_lt,"roberta"),_lt.forEach(t),Kwo=r(l8e," \u2014 "),Kj=n(l8e,"A",{href:!0});var ult=s(Kj);Zwo=r(ult,"RobertaForCausalLM"),ult.forEach(t),e6o=r(l8e," (RoBERTa model)"),l8e.forEach(t),o6o=i(Q),C1=n(Q,"LI",{});var i8e=s(C1);cce=n(i8e,"STRONG",{});var blt=s(cce);r6o=r(blt,"roformer"),blt.forEach(t),t6o=r(i8e," \u2014 "),Zj=n(i8e,"A",{href:!0});var vlt=s(Zj);a6o=r(vlt,"RoFormerForCausalLM"),vlt.forEach(t),n6o=r(i8e," (RoFormer model)"),i8e.forEach(t),s6o=i(Q),w1=n(Q,"LI",{});var d8e=s(w1);fce=n(d8e,"STRONG",{});var Flt=s(fce);l6o=r(Flt,"speech_to_text_2"),Flt.forEach(t),i6o=r(d8e," \u2014 "),eD=n(d8e,"A",{href:!0});var Tlt=s(eD);d6o=r(Tlt,"Speech2Text2ForCausalLM"),Tlt.forEach(t),c6o=r(d8e," (Speech2Text2 model)"),d8e.forEach(t),f6o=i(Q),A1=n(Q,"LI",{});var c8e=s(A1);mce=n(c8e,"STRONG",{});var Mlt=s(mce);m6o=r(Mlt,"transfo-xl"),Mlt.forEach(t),g6o=r(c8e," \u2014 "),oD=n(c8e,"A",{href:!0});var Elt=s(oD);h6o=r(Elt,"TransfoXLLMHeadModel"),Elt.forEach(t),p6o=r(c8e," (Transformer-XL model)"),c8e.forEach(t),_6o=i(Q),y1=n(Q,"LI",{});var f8e=s(y1);gce=n(f8e,"STRONG",{});var Clt=s(gce);u6o=r(Clt,"trocr"),Clt.forEach(t),b6o=r(f8e," \u2014 "),rD=n(f8e,"A",{href:!0});var wlt=s(rD);v6o=r(wlt,"TrOCRForCausalLM"),wlt.forEach(t),F6o=r(f8e," (TrOCR model)"),f8e.forEach(t),T6o=i(Q),L1=n(Q,"LI",{});var m8e=s(L1);hce=n(m8e,"STRONG",{});var Alt=s(hce);M6o=r(Alt,"xglm"),Alt.forEach(t),E6o=r(m8e," \u2014 "),tD=n(m8e,"A",{href:!0});var ylt=s(tD);C6o=r(ylt,"XGLMForCausalLM"),ylt.forEach(t),w6o=r(m8e," (XGLM model)"),m8e.forEach(t),A6o=i(Q),x1=n(Q,"LI",{});var g8e=s(x1);pce=n(g8e,"STRONG",{});var Llt=s(pce);y6o=r(Llt,"xlm"),Llt.forEach(t),L6o=r(g8e," \u2014 "),aD=n(g8e,"A",{href:!0});var xlt=s(aD);x6o=r(xlt,"XLMWithLMHeadModel"),xlt.forEach(t),$6o=r(g8e," (XLM model)"),g8e.forEach(t),k6o=i(Q),$1=n(Q,"LI",{});var h8e=s($1);_ce=n(h8e,"STRONG",{});var $lt=s(_ce);S6o=r($lt,"xlm-prophetnet"),$lt.forEach(t),R6o=r(h8e," \u2014 "),nD=n(h8e,"A",{href:!0});var klt=s(nD);P6o=r(klt,"XLMProphetNetForCausalLM"),klt.forEach(t),B6o=r(h8e," (XLMProphetNet model)"),h8e.forEach(t),I6o=i(Q),k1=n(Q,"LI",{});var p8e=s(k1);uce=n(p8e,"STRONG",{});var Slt=s(uce);N6o=r(Slt,"xlm-roberta"),Slt.forEach(t),q6o=r(p8e," \u2014 "),sD=n(p8e,"A",{href:!0});var Rlt=s(sD);j6o=r(Rlt,"XLMRobertaForCausalLM"),Rlt.forEach(t),D6o=r(p8e," (XLM-RoBERTa model)"),p8e.forEach(t),G6o=i(Q),S1=n(Q,"LI",{});var _8e=s(S1);bce=n(_8e,"STRONG",{});var Plt=s(bce);O6o=r(Plt,"xlm-roberta-xl"),Plt.forEach(t),V6o=r(_8e," \u2014 "),lD=n(_8e,"A",{href:!0});var Blt=s(lD);X6o=r(Blt,"XLMRobertaXLForCausalLM"),Blt.forEach(t),z6o=r(_8e," (XLM-RoBERTa-XL model)"),_8e.forEach(t),W6o=i(Q),R1=n(Q,"LI",{});var u8e=s(R1);vce=n(u8e,"STRONG",{});var Ilt=s(vce);Q6o=r(Ilt,"xlnet"),Ilt.forEach(t),H6o=r(u8e," \u2014 "),iD=n(u8e,"A",{href:!0});var Nlt=s(iD);U6o=r(Nlt,"XLNetLMHeadModel"),Nlt.forEach(t),J6o=r(u8e," (XLNet model)"),u8e.forEach(t),Q.forEach(t),Y6o=i(ta),P1=n(ta,"P",{});var b8e=s(P1);K6o=r(b8e,"The model is set in evaluation mode by default using "),Fce=n(b8e,"CODE",{});var qlt=s(Fce);Z6o=r(qlt,"model.eval()"),qlt.forEach(t),eAo=r(b8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tce=n(b8e,"CODE",{});var jlt=s(Tce);oAo=r(jlt,"model.train()"),jlt.forEach(t),b8e.forEach(t),rAo=i(ta),T(B1.$$.fragment,ta),ta.forEach(t),Vs.forEach(t),Nqe=i(f),Pi=n(f,"H2",{class:!0});var GDe=s(Pi);I1=n(GDe,"A",{id:!0,class:!0,href:!0});var Dlt=s(I1);Mce=n(Dlt,"SPAN",{});var Glt=s(Mce);T(vy.$$.fragment,Glt),Glt.forEach(t),Dlt.forEach(t),tAo=i(GDe),Ece=n(GDe,"SPAN",{});var Olt=s(Ece);aAo=r(Olt,"AutoModelForMaskedLM"),Olt.forEach(t),GDe.forEach(t),qqe=i(f),ko=n(f,"DIV",{class:!0});var Xs=s(ko);T(Fy.$$.fragment,Xs),nAo=i(Xs),Bi=n(Xs,"P",{});var kZ=s(Bi);sAo=r(kZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),dD=n(kZ,"A",{href:!0});var Vlt=s(dD);lAo=r(Vlt,"from_pretrained()"),Vlt.forEach(t),iAo=r(kZ," class method or the "),cD=n(kZ,"A",{href:!0});var Xlt=s(cD);dAo=r(Xlt,"from_config()"),Xlt.forEach(t),cAo=r(kZ,` class
method.`),kZ.forEach(t),fAo=i(Xs),Ty=n(Xs,"P",{});var ODe=s(Ty);mAo=r(ODe,"This class cannot be instantiated directly using "),Cce=n(ODe,"CODE",{});var zlt=s(Cce);gAo=r(zlt,"__init__()"),zlt.forEach(t),hAo=r(ODe," (throws an error)."),ODe.forEach(t),pAo=i(Xs),st=n(Xs,"DIV",{class:!0});var Ow=s(st);T(My.$$.fragment,Ow),_Ao=i(Ow),wce=n(Ow,"P",{});var Wlt=s(wce);uAo=r(Wlt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Wlt.forEach(t),bAo=i(Ow),Ii=n(Ow,"P",{});var SZ=s(Ii);vAo=r(SZ,`Note:
Loading a model from its configuration file does `),Ace=n(SZ,"STRONG",{});var Qlt=s(Ace);FAo=r(Qlt,"not"),Qlt.forEach(t),TAo=r(SZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),fD=n(SZ,"A",{href:!0});var Hlt=s(fD);MAo=r(Hlt,"from_pretrained()"),Hlt.forEach(t),EAo=r(SZ," to load the model weights."),SZ.forEach(t),CAo=i(Ow),T(N1.$$.fragment,Ow),Ow.forEach(t),wAo=i(Xs),Ze=n(Xs,"DIV",{class:!0});var aa=s(Ze);T(Ey.$$.fragment,aa),AAo=i(aa),yce=n(aa,"P",{});var Ult=s(yce);yAo=r(Ult,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Ult.forEach(t),LAo=i(aa),ka=n(aa,"P",{});var Vw=s(ka);xAo=r(Vw,"The model class to instantiate is selected based on the "),Lce=n(Vw,"CODE",{});var Jlt=s(Lce);$Ao=r(Jlt,"model_type"),Jlt.forEach(t),kAo=r(Vw,` property of the config object (either
passed as an argument or loaded from `),xce=n(Vw,"CODE",{});var Ylt=s(xce);SAo=r(Ylt,"pretrained_model_name_or_path"),Ylt.forEach(t),RAo=r(Vw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$ce=n(Vw,"CODE",{});var Klt=s($ce);PAo=r(Klt,"pretrained_model_name_or_path"),Klt.forEach(t),BAo=r(Vw,":"),Vw.forEach(t),IAo=i(aa),W=n(aa,"UL",{});var H=s(W);q1=n(H,"LI",{});var v8e=s(q1);kce=n(v8e,"STRONG",{});var Zlt=s(kce);NAo=r(Zlt,"albert"),Zlt.forEach(t),qAo=r(v8e," \u2014 "),mD=n(v8e,"A",{href:!0});var eit=s(mD);jAo=r(eit,"AlbertForMaskedLM"),eit.forEach(t),DAo=r(v8e," (ALBERT model)"),v8e.forEach(t),GAo=i(H),j1=n(H,"LI",{});var F8e=s(j1);Sce=n(F8e,"STRONG",{});var oit=s(Sce);OAo=r(oit,"bart"),oit.forEach(t),VAo=r(F8e," \u2014 "),gD=n(F8e,"A",{href:!0});var rit=s(gD);XAo=r(rit,"BartForConditionalGeneration"),rit.forEach(t),zAo=r(F8e," (BART model)"),F8e.forEach(t),WAo=i(H),D1=n(H,"LI",{});var T8e=s(D1);Rce=n(T8e,"STRONG",{});var tit=s(Rce);QAo=r(tit,"bert"),tit.forEach(t),HAo=r(T8e," \u2014 "),hD=n(T8e,"A",{href:!0});var ait=s(hD);UAo=r(ait,"BertForMaskedLM"),ait.forEach(t),JAo=r(T8e," (BERT model)"),T8e.forEach(t),YAo=i(H),G1=n(H,"LI",{});var M8e=s(G1);Pce=n(M8e,"STRONG",{});var nit=s(Pce);KAo=r(nit,"big_bird"),nit.forEach(t),ZAo=r(M8e," \u2014 "),pD=n(M8e,"A",{href:!0});var sit=s(pD);eyo=r(sit,"BigBirdForMaskedLM"),sit.forEach(t),oyo=r(M8e," (BigBird model)"),M8e.forEach(t),ryo=i(H),O1=n(H,"LI",{});var E8e=s(O1);Bce=n(E8e,"STRONG",{});var lit=s(Bce);tyo=r(lit,"camembert"),lit.forEach(t),ayo=r(E8e," \u2014 "),_D=n(E8e,"A",{href:!0});var iit=s(_D);nyo=r(iit,"CamembertForMaskedLM"),iit.forEach(t),syo=r(E8e," (CamemBERT model)"),E8e.forEach(t),lyo=i(H),V1=n(H,"LI",{});var C8e=s(V1);Ice=n(C8e,"STRONG",{});var dit=s(Ice);iyo=r(dit,"convbert"),dit.forEach(t),dyo=r(C8e," \u2014 "),uD=n(C8e,"A",{href:!0});var cit=s(uD);cyo=r(cit,"ConvBertForMaskedLM"),cit.forEach(t),fyo=r(C8e," (ConvBERT model)"),C8e.forEach(t),myo=i(H),X1=n(H,"LI",{});var w8e=s(X1);Nce=n(w8e,"STRONG",{});var fit=s(Nce);gyo=r(fit,"data2vec-text"),fit.forEach(t),hyo=r(w8e," \u2014 "),bD=n(w8e,"A",{href:!0});var mit=s(bD);pyo=r(mit,"Data2VecTextForMaskedLM"),mit.forEach(t),_yo=r(w8e," (Data2VecText model)"),w8e.forEach(t),uyo=i(H),z1=n(H,"LI",{});var A8e=s(z1);qce=n(A8e,"STRONG",{});var git=s(qce);byo=r(git,"deberta"),git.forEach(t),vyo=r(A8e," \u2014 "),vD=n(A8e,"A",{href:!0});var hit=s(vD);Fyo=r(hit,"DebertaForMaskedLM"),hit.forEach(t),Tyo=r(A8e," (DeBERTa model)"),A8e.forEach(t),Myo=i(H),W1=n(H,"LI",{});var y8e=s(W1);jce=n(y8e,"STRONG",{});var pit=s(jce);Eyo=r(pit,"deberta-v2"),pit.forEach(t),Cyo=r(y8e," \u2014 "),FD=n(y8e,"A",{href:!0});var _it=s(FD);wyo=r(_it,"DebertaV2ForMaskedLM"),_it.forEach(t),Ayo=r(y8e," (DeBERTa-v2 model)"),y8e.forEach(t),yyo=i(H),Q1=n(H,"LI",{});var L8e=s(Q1);Dce=n(L8e,"STRONG",{});var uit=s(Dce);Lyo=r(uit,"distilbert"),uit.forEach(t),xyo=r(L8e," \u2014 "),TD=n(L8e,"A",{href:!0});var bit=s(TD);$yo=r(bit,"DistilBertForMaskedLM"),bit.forEach(t),kyo=r(L8e," (DistilBERT model)"),L8e.forEach(t),Syo=i(H),H1=n(H,"LI",{});var x8e=s(H1);Gce=n(x8e,"STRONG",{});var vit=s(Gce);Ryo=r(vit,"electra"),vit.forEach(t),Pyo=r(x8e," \u2014 "),MD=n(x8e,"A",{href:!0});var Fit=s(MD);Byo=r(Fit,"ElectraForMaskedLM"),Fit.forEach(t),Iyo=r(x8e," (ELECTRA model)"),x8e.forEach(t),Nyo=i(H),U1=n(H,"LI",{});var $8e=s(U1);Oce=n($8e,"STRONG",{});var Tit=s(Oce);qyo=r(Tit,"flaubert"),Tit.forEach(t),jyo=r($8e," \u2014 "),ED=n($8e,"A",{href:!0});var Mit=s(ED);Dyo=r(Mit,"FlaubertWithLMHeadModel"),Mit.forEach(t),Gyo=r($8e," (FlauBERT model)"),$8e.forEach(t),Oyo=i(H),J1=n(H,"LI",{});var k8e=s(J1);Vce=n(k8e,"STRONG",{});var Eit=s(Vce);Vyo=r(Eit,"fnet"),Eit.forEach(t),Xyo=r(k8e," \u2014 "),CD=n(k8e,"A",{href:!0});var Cit=s(CD);zyo=r(Cit,"FNetForMaskedLM"),Cit.forEach(t),Wyo=r(k8e," (FNet model)"),k8e.forEach(t),Qyo=i(H),Y1=n(H,"LI",{});var S8e=s(Y1);Xce=n(S8e,"STRONG",{});var wit=s(Xce);Hyo=r(wit,"funnel"),wit.forEach(t),Uyo=r(S8e," \u2014 "),wD=n(S8e,"A",{href:!0});var Ait=s(wD);Jyo=r(Ait,"FunnelForMaskedLM"),Ait.forEach(t),Yyo=r(S8e," (Funnel Transformer model)"),S8e.forEach(t),Kyo=i(H),K1=n(H,"LI",{});var R8e=s(K1);zce=n(R8e,"STRONG",{});var yit=s(zce);Zyo=r(yit,"ibert"),yit.forEach(t),eLo=r(R8e," \u2014 "),AD=n(R8e,"A",{href:!0});var Lit=s(AD);oLo=r(Lit,"IBertForMaskedLM"),Lit.forEach(t),rLo=r(R8e," (I-BERT model)"),R8e.forEach(t),tLo=i(H),Z1=n(H,"LI",{});var P8e=s(Z1);Wce=n(P8e,"STRONG",{});var xit=s(Wce);aLo=r(xit,"layoutlm"),xit.forEach(t),nLo=r(P8e," \u2014 "),yD=n(P8e,"A",{href:!0});var $it=s(yD);sLo=r($it,"LayoutLMForMaskedLM"),$it.forEach(t),lLo=r(P8e," (LayoutLM model)"),P8e.forEach(t),iLo=i(H),eb=n(H,"LI",{});var B8e=s(eb);Qce=n(B8e,"STRONG",{});var kit=s(Qce);dLo=r(kit,"longformer"),kit.forEach(t),cLo=r(B8e," \u2014 "),LD=n(B8e,"A",{href:!0});var Sit=s(LD);fLo=r(Sit,"LongformerForMaskedLM"),Sit.forEach(t),mLo=r(B8e," (Longformer model)"),B8e.forEach(t),gLo=i(H),ob=n(H,"LI",{});var I8e=s(ob);Hce=n(I8e,"STRONG",{});var Rit=s(Hce);hLo=r(Rit,"luke"),Rit.forEach(t),pLo=r(I8e," \u2014 "),xD=n(I8e,"A",{href:!0});var Pit=s(xD);_Lo=r(Pit,"LukeForMaskedLM"),Pit.forEach(t),uLo=r(I8e," (LUKE model)"),I8e.forEach(t),bLo=i(H),rb=n(H,"LI",{});var N8e=s(rb);Uce=n(N8e,"STRONG",{});var Bit=s(Uce);vLo=r(Bit,"mbart"),Bit.forEach(t),FLo=r(N8e," \u2014 "),$D=n(N8e,"A",{href:!0});var Iit=s($D);TLo=r(Iit,"MBartForConditionalGeneration"),Iit.forEach(t),MLo=r(N8e," (mBART model)"),N8e.forEach(t),ELo=i(H),tb=n(H,"LI",{});var q8e=s(tb);Jce=n(q8e,"STRONG",{});var Nit=s(Jce);CLo=r(Nit,"megatron-bert"),Nit.forEach(t),wLo=r(q8e," \u2014 "),kD=n(q8e,"A",{href:!0});var qit=s(kD);ALo=r(qit,"MegatronBertForMaskedLM"),qit.forEach(t),yLo=r(q8e," (MegatronBert model)"),q8e.forEach(t),LLo=i(H),ab=n(H,"LI",{});var j8e=s(ab);Yce=n(j8e,"STRONG",{});var jit=s(Yce);xLo=r(jit,"mobilebert"),jit.forEach(t),$Lo=r(j8e," \u2014 "),SD=n(j8e,"A",{href:!0});var Dit=s(SD);kLo=r(Dit,"MobileBertForMaskedLM"),Dit.forEach(t),SLo=r(j8e," (MobileBERT model)"),j8e.forEach(t),RLo=i(H),nb=n(H,"LI",{});var D8e=s(nb);Kce=n(D8e,"STRONG",{});var Git=s(Kce);PLo=r(Git,"mpnet"),Git.forEach(t),BLo=r(D8e," \u2014 "),RD=n(D8e,"A",{href:!0});var Oit=s(RD);ILo=r(Oit,"MPNetForMaskedLM"),Oit.forEach(t),NLo=r(D8e," (MPNet model)"),D8e.forEach(t),qLo=i(H),sb=n(H,"LI",{});var G8e=s(sb);Zce=n(G8e,"STRONG",{});var Vit=s(Zce);jLo=r(Vit,"nystromformer"),Vit.forEach(t),DLo=r(G8e," \u2014 "),PD=n(G8e,"A",{href:!0});var Xit=s(PD);GLo=r(Xit,"NystromformerForMaskedLM"),Xit.forEach(t),OLo=r(G8e," (Nystromformer model)"),G8e.forEach(t),VLo=i(H),lb=n(H,"LI",{});var O8e=s(lb);efe=n(O8e,"STRONG",{});var zit=s(efe);XLo=r(zit,"perceiver"),zit.forEach(t),zLo=r(O8e," \u2014 "),BD=n(O8e,"A",{href:!0});var Wit=s(BD);WLo=r(Wit,"PerceiverForMaskedLM"),Wit.forEach(t),QLo=r(O8e," (Perceiver model)"),O8e.forEach(t),HLo=i(H),ib=n(H,"LI",{});var V8e=s(ib);ofe=n(V8e,"STRONG",{});var Qit=s(ofe);ULo=r(Qit,"qdqbert"),Qit.forEach(t),JLo=r(V8e," \u2014 "),ID=n(V8e,"A",{href:!0});var Hit=s(ID);YLo=r(Hit,"QDQBertForMaskedLM"),Hit.forEach(t),KLo=r(V8e," (QDQBert model)"),V8e.forEach(t),ZLo=i(H),db=n(H,"LI",{});var X8e=s(db);rfe=n(X8e,"STRONG",{});var Uit=s(rfe);e8o=r(Uit,"reformer"),Uit.forEach(t),o8o=r(X8e," \u2014 "),ND=n(X8e,"A",{href:!0});var Jit=s(ND);r8o=r(Jit,"ReformerForMaskedLM"),Jit.forEach(t),t8o=r(X8e," (Reformer model)"),X8e.forEach(t),a8o=i(H),cb=n(H,"LI",{});var z8e=s(cb);tfe=n(z8e,"STRONG",{});var Yit=s(tfe);n8o=r(Yit,"rembert"),Yit.forEach(t),s8o=r(z8e," \u2014 "),qD=n(z8e,"A",{href:!0});var Kit=s(qD);l8o=r(Kit,"RemBertForMaskedLM"),Kit.forEach(t),i8o=r(z8e," (RemBERT model)"),z8e.forEach(t),d8o=i(H),fb=n(H,"LI",{});var W8e=s(fb);afe=n(W8e,"STRONG",{});var Zit=s(afe);c8o=r(Zit,"roberta"),Zit.forEach(t),f8o=r(W8e," \u2014 "),jD=n(W8e,"A",{href:!0});var edt=s(jD);m8o=r(edt,"RobertaForMaskedLM"),edt.forEach(t),g8o=r(W8e," (RoBERTa model)"),W8e.forEach(t),h8o=i(H),mb=n(H,"LI",{});var Q8e=s(mb);nfe=n(Q8e,"STRONG",{});var odt=s(nfe);p8o=r(odt,"roformer"),odt.forEach(t),_8o=r(Q8e," \u2014 "),DD=n(Q8e,"A",{href:!0});var rdt=s(DD);u8o=r(rdt,"RoFormerForMaskedLM"),rdt.forEach(t),b8o=r(Q8e," (RoFormer model)"),Q8e.forEach(t),v8o=i(H),gb=n(H,"LI",{});var H8e=s(gb);sfe=n(H8e,"STRONG",{});var tdt=s(sfe);F8o=r(tdt,"squeezebert"),tdt.forEach(t),T8o=r(H8e," \u2014 "),GD=n(H8e,"A",{href:!0});var adt=s(GD);M8o=r(adt,"SqueezeBertForMaskedLM"),adt.forEach(t),E8o=r(H8e," (SqueezeBERT model)"),H8e.forEach(t),C8o=i(H),hb=n(H,"LI",{});var U8e=s(hb);lfe=n(U8e,"STRONG",{});var ndt=s(lfe);w8o=r(ndt,"tapas"),ndt.forEach(t),A8o=r(U8e," \u2014 "),OD=n(U8e,"A",{href:!0});var sdt=s(OD);y8o=r(sdt,"TapasForMaskedLM"),sdt.forEach(t),L8o=r(U8e," (TAPAS model)"),U8e.forEach(t),x8o=i(H),pb=n(H,"LI",{});var J8e=s(pb);ife=n(J8e,"STRONG",{});var ldt=s(ife);$8o=r(ldt,"wav2vec2"),ldt.forEach(t),k8o=r(J8e," \u2014 "),dfe=n(J8e,"CODE",{});var idt=s(dfe);S8o=r(idt,"Wav2Vec2ForMaskedLM"),idt.forEach(t),R8o=r(J8e," (Wav2Vec2 model)"),J8e.forEach(t),P8o=i(H),_b=n(H,"LI",{});var Y8e=s(_b);cfe=n(Y8e,"STRONG",{});var ddt=s(cfe);B8o=r(ddt,"xlm"),ddt.forEach(t),I8o=r(Y8e," \u2014 "),VD=n(Y8e,"A",{href:!0});var cdt=s(VD);N8o=r(cdt,"XLMWithLMHeadModel"),cdt.forEach(t),q8o=r(Y8e," (XLM model)"),Y8e.forEach(t),j8o=i(H),ub=n(H,"LI",{});var K8e=s(ub);ffe=n(K8e,"STRONG",{});var fdt=s(ffe);D8o=r(fdt,"xlm-roberta"),fdt.forEach(t),G8o=r(K8e," \u2014 "),XD=n(K8e,"A",{href:!0});var mdt=s(XD);O8o=r(mdt,"XLMRobertaForMaskedLM"),mdt.forEach(t),V8o=r(K8e," (XLM-RoBERTa model)"),K8e.forEach(t),X8o=i(H),bb=n(H,"LI",{});var Z8e=s(bb);mfe=n(Z8e,"STRONG",{});var gdt=s(mfe);z8o=r(gdt,"xlm-roberta-xl"),gdt.forEach(t),W8o=r(Z8e," \u2014 "),zD=n(Z8e,"A",{href:!0});var hdt=s(zD);Q8o=r(hdt,"XLMRobertaXLForMaskedLM"),hdt.forEach(t),H8o=r(Z8e," (XLM-RoBERTa-XL model)"),Z8e.forEach(t),U8o=i(H),vb=n(H,"LI",{});var e9e=s(vb);gfe=n(e9e,"STRONG",{});var pdt=s(gfe);J8o=r(pdt,"yoso"),pdt.forEach(t),Y8o=r(e9e," \u2014 "),WD=n(e9e,"A",{href:!0});var _dt=s(WD);K8o=r(_dt,"YosoForMaskedLM"),_dt.forEach(t),Z8o=r(e9e," (YOSO model)"),e9e.forEach(t),H.forEach(t),e9o=i(aa),Fb=n(aa,"P",{});var o9e=s(Fb);o9o=r(o9e,"The model is set in evaluation mode by default using "),hfe=n(o9e,"CODE",{});var udt=s(hfe);r9o=r(udt,"model.eval()"),udt.forEach(t),t9o=r(o9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pfe=n(o9e,"CODE",{});var bdt=s(pfe);a9o=r(bdt,"model.train()"),bdt.forEach(t),o9e.forEach(t),n9o=i(aa),T(Tb.$$.fragment,aa),aa.forEach(t),Xs.forEach(t),jqe=i(f),Ni=n(f,"H2",{class:!0});var VDe=s(Ni);Mb=n(VDe,"A",{id:!0,class:!0,href:!0});var vdt=s(Mb);_fe=n(vdt,"SPAN",{});var Fdt=s(_fe);T(Cy.$$.fragment,Fdt),Fdt.forEach(t),vdt.forEach(t),s9o=i(VDe),ufe=n(VDe,"SPAN",{});var Tdt=s(ufe);l9o=r(Tdt,"AutoModelForSeq2SeqLM"),Tdt.forEach(t),VDe.forEach(t),Dqe=i(f),So=n(f,"DIV",{class:!0});var zs=s(So);T(wy.$$.fragment,zs),i9o=i(zs),qi=n(zs,"P",{});var RZ=s(qi);d9o=r(RZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),QD=n(RZ,"A",{href:!0});var Mdt=s(QD);c9o=r(Mdt,"from_pretrained()"),Mdt.forEach(t),f9o=r(RZ," class method or the "),HD=n(RZ,"A",{href:!0});var Edt=s(HD);m9o=r(Edt,"from_config()"),Edt.forEach(t),g9o=r(RZ,` class
method.`),RZ.forEach(t),h9o=i(zs),Ay=n(zs,"P",{});var XDe=s(Ay);p9o=r(XDe,"This class cannot be instantiated directly using "),bfe=n(XDe,"CODE",{});var Cdt=s(bfe);_9o=r(Cdt,"__init__()"),Cdt.forEach(t),u9o=r(XDe," (throws an error)."),XDe.forEach(t),b9o=i(zs),lt=n(zs,"DIV",{class:!0});var Xw=s(lt);T(yy.$$.fragment,Xw),v9o=i(Xw),vfe=n(Xw,"P",{});var wdt=s(vfe);F9o=r(wdt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),wdt.forEach(t),T9o=i(Xw),ji=n(Xw,"P",{});var PZ=s(ji);M9o=r(PZ,`Note:
Loading a model from its configuration file does `),Ffe=n(PZ,"STRONG",{});var Adt=s(Ffe);E9o=r(Adt,"not"),Adt.forEach(t),C9o=r(PZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),UD=n(PZ,"A",{href:!0});var ydt=s(UD);w9o=r(ydt,"from_pretrained()"),ydt.forEach(t),A9o=r(PZ," to load the model weights."),PZ.forEach(t),y9o=i(Xw),T(Eb.$$.fragment,Xw),Xw.forEach(t),L9o=i(zs),eo=n(zs,"DIV",{class:!0});var na=s(eo);T(Ly.$$.fragment,na),x9o=i(na),Tfe=n(na,"P",{});var Ldt=s(Tfe);$9o=r(Ldt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Ldt.forEach(t),k9o=i(na),Sa=n(na,"P",{});var zw=s(Sa);S9o=r(zw,"The model class to instantiate is selected based on the "),Mfe=n(zw,"CODE",{});var xdt=s(Mfe);R9o=r(xdt,"model_type"),xdt.forEach(t),P9o=r(zw,` property of the config object (either
passed as an argument or loaded from `),Efe=n(zw,"CODE",{});var $dt=s(Efe);B9o=r($dt,"pretrained_model_name_or_path"),$dt.forEach(t),I9o=r(zw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cfe=n(zw,"CODE",{});var kdt=s(Cfe);N9o=r(kdt,"pretrained_model_name_or_path"),kdt.forEach(t),q9o=r(zw,":"),zw.forEach(t),j9o=i(na),_e=n(na,"UL",{});var ve=s(_e);Cb=n(ve,"LI",{});var r9e=s(Cb);wfe=n(r9e,"STRONG",{});var Sdt=s(wfe);D9o=r(Sdt,"bart"),Sdt.forEach(t),G9o=r(r9e," \u2014 "),JD=n(r9e,"A",{href:!0});var Rdt=s(JD);O9o=r(Rdt,"BartForConditionalGeneration"),Rdt.forEach(t),V9o=r(r9e," (BART model)"),r9e.forEach(t),X9o=i(ve),wb=n(ve,"LI",{});var t9e=s(wb);Afe=n(t9e,"STRONG",{});var Pdt=s(Afe);z9o=r(Pdt,"bigbird_pegasus"),Pdt.forEach(t),W9o=r(t9e," \u2014 "),YD=n(t9e,"A",{href:!0});var Bdt=s(YD);Q9o=r(Bdt,"BigBirdPegasusForConditionalGeneration"),Bdt.forEach(t),H9o=r(t9e," (BigBirdPegasus model)"),t9e.forEach(t),U9o=i(ve),Ab=n(ve,"LI",{});var a9e=s(Ab);yfe=n(a9e,"STRONG",{});var Idt=s(yfe);J9o=r(Idt,"blenderbot"),Idt.forEach(t),Y9o=r(a9e," \u2014 "),KD=n(a9e,"A",{href:!0});var Ndt=s(KD);K9o=r(Ndt,"BlenderbotForConditionalGeneration"),Ndt.forEach(t),Z9o=r(a9e," (Blenderbot model)"),a9e.forEach(t),exo=i(ve),yb=n(ve,"LI",{});var n9e=s(yb);Lfe=n(n9e,"STRONG",{});var qdt=s(Lfe);oxo=r(qdt,"blenderbot-small"),qdt.forEach(t),rxo=r(n9e," \u2014 "),ZD=n(n9e,"A",{href:!0});var jdt=s(ZD);txo=r(jdt,"BlenderbotSmallForConditionalGeneration"),jdt.forEach(t),axo=r(n9e," (BlenderbotSmall model)"),n9e.forEach(t),nxo=i(ve),Lb=n(ve,"LI",{});var s9e=s(Lb);xfe=n(s9e,"STRONG",{});var Ddt=s(xfe);sxo=r(Ddt,"encoder-decoder"),Ddt.forEach(t),lxo=r(s9e," \u2014 "),eG=n(s9e,"A",{href:!0});var Gdt=s(eG);ixo=r(Gdt,"EncoderDecoderModel"),Gdt.forEach(t),dxo=r(s9e," (Encoder decoder model)"),s9e.forEach(t),cxo=i(ve),xb=n(ve,"LI",{});var l9e=s(xb);$fe=n(l9e,"STRONG",{});var Odt=s($fe);fxo=r(Odt,"fsmt"),Odt.forEach(t),mxo=r(l9e," \u2014 "),oG=n(l9e,"A",{href:!0});var Vdt=s(oG);gxo=r(Vdt,"FSMTForConditionalGeneration"),Vdt.forEach(t),hxo=r(l9e," (FairSeq Machine-Translation model)"),l9e.forEach(t),pxo=i(ve),$b=n(ve,"LI",{});var i9e=s($b);kfe=n(i9e,"STRONG",{});var Xdt=s(kfe);_xo=r(Xdt,"led"),Xdt.forEach(t),uxo=r(i9e," \u2014 "),rG=n(i9e,"A",{href:!0});var zdt=s(rG);bxo=r(zdt,"LEDForConditionalGeneration"),zdt.forEach(t),vxo=r(i9e," (LED model)"),i9e.forEach(t),Fxo=i(ve),kb=n(ve,"LI",{});var d9e=s(kb);Sfe=n(d9e,"STRONG",{});var Wdt=s(Sfe);Txo=r(Wdt,"m2m_100"),Wdt.forEach(t),Mxo=r(d9e," \u2014 "),tG=n(d9e,"A",{href:!0});var Qdt=s(tG);Exo=r(Qdt,"M2M100ForConditionalGeneration"),Qdt.forEach(t),Cxo=r(d9e," (M2M100 model)"),d9e.forEach(t),wxo=i(ve),Sb=n(ve,"LI",{});var c9e=s(Sb);Rfe=n(c9e,"STRONG",{});var Hdt=s(Rfe);Axo=r(Hdt,"marian"),Hdt.forEach(t),yxo=r(c9e," \u2014 "),aG=n(c9e,"A",{href:!0});var Udt=s(aG);Lxo=r(Udt,"MarianMTModel"),Udt.forEach(t),xxo=r(c9e," (Marian model)"),c9e.forEach(t),$xo=i(ve),Rb=n(ve,"LI",{});var f9e=s(Rb);Pfe=n(f9e,"STRONG",{});var Jdt=s(Pfe);kxo=r(Jdt,"mbart"),Jdt.forEach(t),Sxo=r(f9e," \u2014 "),nG=n(f9e,"A",{href:!0});var Ydt=s(nG);Rxo=r(Ydt,"MBartForConditionalGeneration"),Ydt.forEach(t),Pxo=r(f9e," (mBART model)"),f9e.forEach(t),Bxo=i(ve),Pb=n(ve,"LI",{});var m9e=s(Pb);Bfe=n(m9e,"STRONG",{});var Kdt=s(Bfe);Ixo=r(Kdt,"mt5"),Kdt.forEach(t),Nxo=r(m9e," \u2014 "),sG=n(m9e,"A",{href:!0});var Zdt=s(sG);qxo=r(Zdt,"MT5ForConditionalGeneration"),Zdt.forEach(t),jxo=r(m9e," (mT5 model)"),m9e.forEach(t),Dxo=i(ve),Bb=n(ve,"LI",{});var g9e=s(Bb);Ife=n(g9e,"STRONG",{});var ect=s(Ife);Gxo=r(ect,"pegasus"),ect.forEach(t),Oxo=r(g9e," \u2014 "),lG=n(g9e,"A",{href:!0});var oct=s(lG);Vxo=r(oct,"PegasusForConditionalGeneration"),oct.forEach(t),Xxo=r(g9e," (Pegasus model)"),g9e.forEach(t),zxo=i(ve),Ib=n(ve,"LI",{});var h9e=s(Ib);Nfe=n(h9e,"STRONG",{});var rct=s(Nfe);Wxo=r(rct,"plbart"),rct.forEach(t),Qxo=r(h9e," \u2014 "),iG=n(h9e,"A",{href:!0});var tct=s(iG);Hxo=r(tct,"PLBartForConditionalGeneration"),tct.forEach(t),Uxo=r(h9e," (PLBart model)"),h9e.forEach(t),Jxo=i(ve),Nb=n(ve,"LI",{});var p9e=s(Nb);qfe=n(p9e,"STRONG",{});var act=s(qfe);Yxo=r(act,"prophetnet"),act.forEach(t),Kxo=r(p9e," \u2014 "),dG=n(p9e,"A",{href:!0});var nct=s(dG);Zxo=r(nct,"ProphetNetForConditionalGeneration"),nct.forEach(t),e$o=r(p9e," (ProphetNet model)"),p9e.forEach(t),o$o=i(ve),qb=n(ve,"LI",{});var _9e=s(qb);jfe=n(_9e,"STRONG",{});var sct=s(jfe);r$o=r(sct,"t5"),sct.forEach(t),t$o=r(_9e," \u2014 "),cG=n(_9e,"A",{href:!0});var lct=s(cG);a$o=r(lct,"T5ForConditionalGeneration"),lct.forEach(t),n$o=r(_9e," (T5 model)"),_9e.forEach(t),s$o=i(ve),jb=n(ve,"LI",{});var u9e=s(jb);Dfe=n(u9e,"STRONG",{});var ict=s(Dfe);l$o=r(ict,"xlm-prophetnet"),ict.forEach(t),i$o=r(u9e," \u2014 "),fG=n(u9e,"A",{href:!0});var dct=s(fG);d$o=r(dct,"XLMProphetNetForConditionalGeneration"),dct.forEach(t),c$o=r(u9e," (XLMProphetNet model)"),u9e.forEach(t),ve.forEach(t),f$o=i(na),Db=n(na,"P",{});var b9e=s(Db);m$o=r(b9e,"The model is set in evaluation mode by default using "),Gfe=n(b9e,"CODE",{});var cct=s(Gfe);g$o=r(cct,"model.eval()"),cct.forEach(t),h$o=r(b9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ofe=n(b9e,"CODE",{});var fct=s(Ofe);p$o=r(fct,"model.train()"),fct.forEach(t),b9e.forEach(t),_$o=i(na),T(Gb.$$.fragment,na),na.forEach(t),zs.forEach(t),Gqe=i(f),Di=n(f,"H2",{class:!0});var zDe=s(Di);Ob=n(zDe,"A",{id:!0,class:!0,href:!0});var mct=s(Ob);Vfe=n(mct,"SPAN",{});var gct=s(Vfe);T(xy.$$.fragment,gct),gct.forEach(t),mct.forEach(t),u$o=i(zDe),Xfe=n(zDe,"SPAN",{});var hct=s(Xfe);b$o=r(hct,"AutoModelForSequenceClassification"),hct.forEach(t),zDe.forEach(t),Oqe=i(f),Ro=n(f,"DIV",{class:!0});var Ws=s(Ro);T($y.$$.fragment,Ws),v$o=i(Ws),Gi=n(Ws,"P",{});var BZ=s(Gi);F$o=r(BZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),mG=n(BZ,"A",{href:!0});var pct=s(mG);T$o=r(pct,"from_pretrained()"),pct.forEach(t),M$o=r(BZ," class method or the "),gG=n(BZ,"A",{href:!0});var _ct=s(gG);E$o=r(_ct,"from_config()"),_ct.forEach(t),C$o=r(BZ,` class
method.`),BZ.forEach(t),w$o=i(Ws),ky=n(Ws,"P",{});var WDe=s(ky);A$o=r(WDe,"This class cannot be instantiated directly using "),zfe=n(WDe,"CODE",{});var uct=s(zfe);y$o=r(uct,"__init__()"),uct.forEach(t),L$o=r(WDe," (throws an error)."),WDe.forEach(t),x$o=i(Ws),it=n(Ws,"DIV",{class:!0});var Ww=s(it);T(Sy.$$.fragment,Ww),$$o=i(Ww),Wfe=n(Ww,"P",{});var bct=s(Wfe);k$o=r(bct,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),bct.forEach(t),S$o=i(Ww),Oi=n(Ww,"P",{});var IZ=s(Oi);R$o=r(IZ,`Note:
Loading a model from its configuration file does `),Qfe=n(IZ,"STRONG",{});var vct=s(Qfe);P$o=r(vct,"not"),vct.forEach(t),B$o=r(IZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),hG=n(IZ,"A",{href:!0});var Fct=s(hG);I$o=r(Fct,"from_pretrained()"),Fct.forEach(t),N$o=r(IZ," to load the model weights."),IZ.forEach(t),q$o=i(Ww),T(Vb.$$.fragment,Ww),Ww.forEach(t),j$o=i(Ws),oo=n(Ws,"DIV",{class:!0});var sa=s(oo);T(Ry.$$.fragment,sa),D$o=i(sa),Hfe=n(sa,"P",{});var Tct=s(Hfe);G$o=r(Tct,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Tct.forEach(t),O$o=i(sa),Ra=n(sa,"P",{});var Qw=s(Ra);V$o=r(Qw,"The model class to instantiate is selected based on the "),Ufe=n(Qw,"CODE",{});var Mct=s(Ufe);X$o=r(Mct,"model_type"),Mct.forEach(t),z$o=r(Qw,` property of the config object (either
passed as an argument or loaded from `),Jfe=n(Qw,"CODE",{});var Ect=s(Jfe);W$o=r(Ect,"pretrained_model_name_or_path"),Ect.forEach(t),Q$o=r(Qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yfe=n(Qw,"CODE",{});var Cct=s(Yfe);H$o=r(Cct,"pretrained_model_name_or_path"),Cct.forEach(t),U$o=r(Qw,":"),Qw.forEach(t),J$o=i(sa),N=n(sa,"UL",{});var j=s(N);Xb=n(j,"LI",{});var v9e=s(Xb);Kfe=n(v9e,"STRONG",{});var wct=s(Kfe);Y$o=r(wct,"albert"),wct.forEach(t),K$o=r(v9e," \u2014 "),pG=n(v9e,"A",{href:!0});var Act=s(pG);Z$o=r(Act,"AlbertForSequenceClassification"),Act.forEach(t),eko=r(v9e," (ALBERT model)"),v9e.forEach(t),oko=i(j),zb=n(j,"LI",{});var F9e=s(zb);Zfe=n(F9e,"STRONG",{});var yct=s(Zfe);rko=r(yct,"bart"),yct.forEach(t),tko=r(F9e," \u2014 "),_G=n(F9e,"A",{href:!0});var Lct=s(_G);ako=r(Lct,"BartForSequenceClassification"),Lct.forEach(t),nko=r(F9e," (BART model)"),F9e.forEach(t),sko=i(j),Wb=n(j,"LI",{});var T9e=s(Wb);eme=n(T9e,"STRONG",{});var xct=s(eme);lko=r(xct,"bert"),xct.forEach(t),iko=r(T9e," \u2014 "),uG=n(T9e,"A",{href:!0});var $ct=s(uG);dko=r($ct,"BertForSequenceClassification"),$ct.forEach(t),cko=r(T9e," (BERT model)"),T9e.forEach(t),fko=i(j),Qb=n(j,"LI",{});var M9e=s(Qb);ome=n(M9e,"STRONG",{});var kct=s(ome);mko=r(kct,"big_bird"),kct.forEach(t),gko=r(M9e," \u2014 "),bG=n(M9e,"A",{href:!0});var Sct=s(bG);hko=r(Sct,"BigBirdForSequenceClassification"),Sct.forEach(t),pko=r(M9e," (BigBird model)"),M9e.forEach(t),_ko=i(j),Hb=n(j,"LI",{});var E9e=s(Hb);rme=n(E9e,"STRONG",{});var Rct=s(rme);uko=r(Rct,"bigbird_pegasus"),Rct.forEach(t),bko=r(E9e," \u2014 "),vG=n(E9e,"A",{href:!0});var Pct=s(vG);vko=r(Pct,"BigBirdPegasusForSequenceClassification"),Pct.forEach(t),Fko=r(E9e," (BigBirdPegasus model)"),E9e.forEach(t),Tko=i(j),Ub=n(j,"LI",{});var C9e=s(Ub);tme=n(C9e,"STRONG",{});var Bct=s(tme);Mko=r(Bct,"camembert"),Bct.forEach(t),Eko=r(C9e," \u2014 "),FG=n(C9e,"A",{href:!0});var Ict=s(FG);Cko=r(Ict,"CamembertForSequenceClassification"),Ict.forEach(t),wko=r(C9e," (CamemBERT model)"),C9e.forEach(t),Ako=i(j),Jb=n(j,"LI",{});var w9e=s(Jb);ame=n(w9e,"STRONG",{});var Nct=s(ame);yko=r(Nct,"canine"),Nct.forEach(t),Lko=r(w9e," \u2014 "),TG=n(w9e,"A",{href:!0});var qct=s(TG);xko=r(qct,"CanineForSequenceClassification"),qct.forEach(t),$ko=r(w9e," (Canine model)"),w9e.forEach(t),kko=i(j),Yb=n(j,"LI",{});var A9e=s(Yb);nme=n(A9e,"STRONG",{});var jct=s(nme);Sko=r(jct,"convbert"),jct.forEach(t),Rko=r(A9e," \u2014 "),MG=n(A9e,"A",{href:!0});var Dct=s(MG);Pko=r(Dct,"ConvBertForSequenceClassification"),Dct.forEach(t),Bko=r(A9e," (ConvBERT model)"),A9e.forEach(t),Iko=i(j),Kb=n(j,"LI",{});var y9e=s(Kb);sme=n(y9e,"STRONG",{});var Gct=s(sme);Nko=r(Gct,"ctrl"),Gct.forEach(t),qko=r(y9e," \u2014 "),EG=n(y9e,"A",{href:!0});var Oct=s(EG);jko=r(Oct,"CTRLForSequenceClassification"),Oct.forEach(t),Dko=r(y9e," (CTRL model)"),y9e.forEach(t),Gko=i(j),Zb=n(j,"LI",{});var L9e=s(Zb);lme=n(L9e,"STRONG",{});var Vct=s(lme);Oko=r(Vct,"data2vec-text"),Vct.forEach(t),Vko=r(L9e," \u2014 "),CG=n(L9e,"A",{href:!0});var Xct=s(CG);Xko=r(Xct,"Data2VecTextForSequenceClassification"),Xct.forEach(t),zko=r(L9e," (Data2VecText model)"),L9e.forEach(t),Wko=i(j),e2=n(j,"LI",{});var x9e=s(e2);ime=n(x9e,"STRONG",{});var zct=s(ime);Qko=r(zct,"deberta"),zct.forEach(t),Hko=r(x9e," \u2014 "),wG=n(x9e,"A",{href:!0});var Wct=s(wG);Uko=r(Wct,"DebertaForSequenceClassification"),Wct.forEach(t),Jko=r(x9e," (DeBERTa model)"),x9e.forEach(t),Yko=i(j),o2=n(j,"LI",{});var $9e=s(o2);dme=n($9e,"STRONG",{});var Qct=s(dme);Kko=r(Qct,"deberta-v2"),Qct.forEach(t),Zko=r($9e," \u2014 "),AG=n($9e,"A",{href:!0});var Hct=s(AG);eSo=r(Hct,"DebertaV2ForSequenceClassification"),Hct.forEach(t),oSo=r($9e," (DeBERTa-v2 model)"),$9e.forEach(t),rSo=i(j),r2=n(j,"LI",{});var k9e=s(r2);cme=n(k9e,"STRONG",{});var Uct=s(cme);tSo=r(Uct,"distilbert"),Uct.forEach(t),aSo=r(k9e," \u2014 "),yG=n(k9e,"A",{href:!0});var Jct=s(yG);nSo=r(Jct,"DistilBertForSequenceClassification"),Jct.forEach(t),sSo=r(k9e," (DistilBERT model)"),k9e.forEach(t),lSo=i(j),t2=n(j,"LI",{});var S9e=s(t2);fme=n(S9e,"STRONG",{});var Yct=s(fme);iSo=r(Yct,"electra"),Yct.forEach(t),dSo=r(S9e," \u2014 "),LG=n(S9e,"A",{href:!0});var Kct=s(LG);cSo=r(Kct,"ElectraForSequenceClassification"),Kct.forEach(t),fSo=r(S9e," (ELECTRA model)"),S9e.forEach(t),mSo=i(j),a2=n(j,"LI",{});var R9e=s(a2);mme=n(R9e,"STRONG",{});var Zct=s(mme);gSo=r(Zct,"flaubert"),Zct.forEach(t),hSo=r(R9e," \u2014 "),xG=n(R9e,"A",{href:!0});var eft=s(xG);pSo=r(eft,"FlaubertForSequenceClassification"),eft.forEach(t),_So=r(R9e," (FlauBERT model)"),R9e.forEach(t),uSo=i(j),n2=n(j,"LI",{});var P9e=s(n2);gme=n(P9e,"STRONG",{});var oft=s(gme);bSo=r(oft,"fnet"),oft.forEach(t),vSo=r(P9e," \u2014 "),$G=n(P9e,"A",{href:!0});var rft=s($G);FSo=r(rft,"FNetForSequenceClassification"),rft.forEach(t),TSo=r(P9e," (FNet model)"),P9e.forEach(t),MSo=i(j),s2=n(j,"LI",{});var B9e=s(s2);hme=n(B9e,"STRONG",{});var tft=s(hme);ESo=r(tft,"funnel"),tft.forEach(t),CSo=r(B9e," \u2014 "),kG=n(B9e,"A",{href:!0});var aft=s(kG);wSo=r(aft,"FunnelForSequenceClassification"),aft.forEach(t),ASo=r(B9e," (Funnel Transformer model)"),B9e.forEach(t),ySo=i(j),l2=n(j,"LI",{});var I9e=s(l2);pme=n(I9e,"STRONG",{});var nft=s(pme);LSo=r(nft,"gpt2"),nft.forEach(t),xSo=r(I9e," \u2014 "),SG=n(I9e,"A",{href:!0});var sft=s(SG);$So=r(sft,"GPT2ForSequenceClassification"),sft.forEach(t),kSo=r(I9e," (OpenAI GPT-2 model)"),I9e.forEach(t),SSo=i(j),i2=n(j,"LI",{});var N9e=s(i2);_me=n(N9e,"STRONG",{});var lft=s(_me);RSo=r(lft,"gpt_neo"),lft.forEach(t),PSo=r(N9e," \u2014 "),RG=n(N9e,"A",{href:!0});var ift=s(RG);BSo=r(ift,"GPTNeoForSequenceClassification"),ift.forEach(t),ISo=r(N9e," (GPT Neo model)"),N9e.forEach(t),NSo=i(j),d2=n(j,"LI",{});var q9e=s(d2);ume=n(q9e,"STRONG",{});var dft=s(ume);qSo=r(dft,"gptj"),dft.forEach(t),jSo=r(q9e," \u2014 "),PG=n(q9e,"A",{href:!0});var cft=s(PG);DSo=r(cft,"GPTJForSequenceClassification"),cft.forEach(t),GSo=r(q9e," (GPT-J model)"),q9e.forEach(t),OSo=i(j),c2=n(j,"LI",{});var j9e=s(c2);bme=n(j9e,"STRONG",{});var fft=s(bme);VSo=r(fft,"ibert"),fft.forEach(t),XSo=r(j9e," \u2014 "),BG=n(j9e,"A",{href:!0});var mft=s(BG);zSo=r(mft,"IBertForSequenceClassification"),mft.forEach(t),WSo=r(j9e," (I-BERT model)"),j9e.forEach(t),QSo=i(j),f2=n(j,"LI",{});var D9e=s(f2);vme=n(D9e,"STRONG",{});var gft=s(vme);HSo=r(gft,"layoutlm"),gft.forEach(t),USo=r(D9e," \u2014 "),IG=n(D9e,"A",{href:!0});var hft=s(IG);JSo=r(hft,"LayoutLMForSequenceClassification"),hft.forEach(t),YSo=r(D9e," (LayoutLM model)"),D9e.forEach(t),KSo=i(j),m2=n(j,"LI",{});var G9e=s(m2);Fme=n(G9e,"STRONG",{});var pft=s(Fme);ZSo=r(pft,"layoutlmv2"),pft.forEach(t),eRo=r(G9e," \u2014 "),NG=n(G9e,"A",{href:!0});var _ft=s(NG);oRo=r(_ft,"LayoutLMv2ForSequenceClassification"),_ft.forEach(t),rRo=r(G9e," (LayoutLMv2 model)"),G9e.forEach(t),tRo=i(j),g2=n(j,"LI",{});var O9e=s(g2);Tme=n(O9e,"STRONG",{});var uft=s(Tme);aRo=r(uft,"layoutlmv3"),uft.forEach(t),nRo=r(O9e," \u2014 "),qG=n(O9e,"A",{href:!0});var bft=s(qG);sRo=r(bft,"LayoutLMv3ForSequenceClassification"),bft.forEach(t),lRo=r(O9e," (LayoutLMv3 model)"),O9e.forEach(t),iRo=i(j),h2=n(j,"LI",{});var V9e=s(h2);Mme=n(V9e,"STRONG",{});var vft=s(Mme);dRo=r(vft,"led"),vft.forEach(t),cRo=r(V9e," \u2014 "),jG=n(V9e,"A",{href:!0});var Fft=s(jG);fRo=r(Fft,"LEDForSequenceClassification"),Fft.forEach(t),mRo=r(V9e," (LED model)"),V9e.forEach(t),gRo=i(j),p2=n(j,"LI",{});var X9e=s(p2);Eme=n(X9e,"STRONG",{});var Tft=s(Eme);hRo=r(Tft,"longformer"),Tft.forEach(t),pRo=r(X9e," \u2014 "),DG=n(X9e,"A",{href:!0});var Mft=s(DG);_Ro=r(Mft,"LongformerForSequenceClassification"),Mft.forEach(t),uRo=r(X9e," (Longformer model)"),X9e.forEach(t),bRo=i(j),_2=n(j,"LI",{});var z9e=s(_2);Cme=n(z9e,"STRONG",{});var Eft=s(Cme);vRo=r(Eft,"mbart"),Eft.forEach(t),FRo=r(z9e," \u2014 "),GG=n(z9e,"A",{href:!0});var Cft=s(GG);TRo=r(Cft,"MBartForSequenceClassification"),Cft.forEach(t),MRo=r(z9e," (mBART model)"),z9e.forEach(t),ERo=i(j),u2=n(j,"LI",{});var W9e=s(u2);wme=n(W9e,"STRONG",{});var wft=s(wme);CRo=r(wft,"megatron-bert"),wft.forEach(t),wRo=r(W9e," \u2014 "),OG=n(W9e,"A",{href:!0});var Aft=s(OG);ARo=r(Aft,"MegatronBertForSequenceClassification"),Aft.forEach(t),yRo=r(W9e," (MegatronBert model)"),W9e.forEach(t),LRo=i(j),b2=n(j,"LI",{});var Q9e=s(b2);Ame=n(Q9e,"STRONG",{});var yft=s(Ame);xRo=r(yft,"mobilebert"),yft.forEach(t),$Ro=r(Q9e," \u2014 "),VG=n(Q9e,"A",{href:!0});var Lft=s(VG);kRo=r(Lft,"MobileBertForSequenceClassification"),Lft.forEach(t),SRo=r(Q9e," (MobileBERT model)"),Q9e.forEach(t),RRo=i(j),v2=n(j,"LI",{});var H9e=s(v2);yme=n(H9e,"STRONG",{});var xft=s(yme);PRo=r(xft,"mpnet"),xft.forEach(t),BRo=r(H9e," \u2014 "),XG=n(H9e,"A",{href:!0});var $ft=s(XG);IRo=r($ft,"MPNetForSequenceClassification"),$ft.forEach(t),NRo=r(H9e," (MPNet model)"),H9e.forEach(t),qRo=i(j),F2=n(j,"LI",{});var U9e=s(F2);Lme=n(U9e,"STRONG",{});var kft=s(Lme);jRo=r(kft,"nystromformer"),kft.forEach(t),DRo=r(U9e," \u2014 "),zG=n(U9e,"A",{href:!0});var Sft=s(zG);GRo=r(Sft,"NystromformerForSequenceClassification"),Sft.forEach(t),ORo=r(U9e," (Nystromformer model)"),U9e.forEach(t),VRo=i(j),T2=n(j,"LI",{});var J9e=s(T2);xme=n(J9e,"STRONG",{});var Rft=s(xme);XRo=r(Rft,"openai-gpt"),Rft.forEach(t),zRo=r(J9e," \u2014 "),WG=n(J9e,"A",{href:!0});var Pft=s(WG);WRo=r(Pft,"OpenAIGPTForSequenceClassification"),Pft.forEach(t),QRo=r(J9e," (OpenAI GPT model)"),J9e.forEach(t),HRo=i(j),M2=n(j,"LI",{});var Y9e=s(M2);$me=n(Y9e,"STRONG",{});var Bft=s($me);URo=r(Bft,"perceiver"),Bft.forEach(t),JRo=r(Y9e," \u2014 "),QG=n(Y9e,"A",{href:!0});var Ift=s(QG);YRo=r(Ift,"PerceiverForSequenceClassification"),Ift.forEach(t),KRo=r(Y9e," (Perceiver model)"),Y9e.forEach(t),ZRo=i(j),E2=n(j,"LI",{});var K9e=s(E2);kme=n(K9e,"STRONG",{});var Nft=s(kme);ePo=r(Nft,"plbart"),Nft.forEach(t),oPo=r(K9e," \u2014 "),HG=n(K9e,"A",{href:!0});var qft=s(HG);rPo=r(qft,"PLBartForSequenceClassification"),qft.forEach(t),tPo=r(K9e," (PLBart model)"),K9e.forEach(t),aPo=i(j),C2=n(j,"LI",{});var Z9e=s(C2);Sme=n(Z9e,"STRONG",{});var jft=s(Sme);nPo=r(jft,"qdqbert"),jft.forEach(t),sPo=r(Z9e," \u2014 "),UG=n(Z9e,"A",{href:!0});var Dft=s(UG);lPo=r(Dft,"QDQBertForSequenceClassification"),Dft.forEach(t),iPo=r(Z9e," (QDQBert model)"),Z9e.forEach(t),dPo=i(j),w2=n(j,"LI",{});var exe=s(w2);Rme=n(exe,"STRONG",{});var Gft=s(Rme);cPo=r(Gft,"reformer"),Gft.forEach(t),fPo=r(exe," \u2014 "),JG=n(exe,"A",{href:!0});var Oft=s(JG);mPo=r(Oft,"ReformerForSequenceClassification"),Oft.forEach(t),gPo=r(exe," (Reformer model)"),exe.forEach(t),hPo=i(j),A2=n(j,"LI",{});var oxe=s(A2);Pme=n(oxe,"STRONG",{});var Vft=s(Pme);pPo=r(Vft,"rembert"),Vft.forEach(t),_Po=r(oxe," \u2014 "),YG=n(oxe,"A",{href:!0});var Xft=s(YG);uPo=r(Xft,"RemBertForSequenceClassification"),Xft.forEach(t),bPo=r(oxe," (RemBERT model)"),oxe.forEach(t),vPo=i(j),y2=n(j,"LI",{});var rxe=s(y2);Bme=n(rxe,"STRONG",{});var zft=s(Bme);FPo=r(zft,"roberta"),zft.forEach(t),TPo=r(rxe," \u2014 "),KG=n(rxe,"A",{href:!0});var Wft=s(KG);MPo=r(Wft,"RobertaForSequenceClassification"),Wft.forEach(t),EPo=r(rxe," (RoBERTa model)"),rxe.forEach(t),CPo=i(j),L2=n(j,"LI",{});var txe=s(L2);Ime=n(txe,"STRONG",{});var Qft=s(Ime);wPo=r(Qft,"roformer"),Qft.forEach(t),APo=r(txe," \u2014 "),ZG=n(txe,"A",{href:!0});var Hft=s(ZG);yPo=r(Hft,"RoFormerForSequenceClassification"),Hft.forEach(t),LPo=r(txe," (RoFormer model)"),txe.forEach(t),xPo=i(j),x2=n(j,"LI",{});var axe=s(x2);Nme=n(axe,"STRONG",{});var Uft=s(Nme);$Po=r(Uft,"squeezebert"),Uft.forEach(t),kPo=r(axe," \u2014 "),eO=n(axe,"A",{href:!0});var Jft=s(eO);SPo=r(Jft,"SqueezeBertForSequenceClassification"),Jft.forEach(t),RPo=r(axe," (SqueezeBERT model)"),axe.forEach(t),PPo=i(j),$2=n(j,"LI",{});var nxe=s($2);qme=n(nxe,"STRONG",{});var Yft=s(qme);BPo=r(Yft,"tapas"),Yft.forEach(t),IPo=r(nxe," \u2014 "),oO=n(nxe,"A",{href:!0});var Kft=s(oO);NPo=r(Kft,"TapasForSequenceClassification"),Kft.forEach(t),qPo=r(nxe," (TAPAS model)"),nxe.forEach(t),jPo=i(j),k2=n(j,"LI",{});var sxe=s(k2);jme=n(sxe,"STRONG",{});var Zft=s(jme);DPo=r(Zft,"transfo-xl"),Zft.forEach(t),GPo=r(sxe," \u2014 "),rO=n(sxe,"A",{href:!0});var emt=s(rO);OPo=r(emt,"TransfoXLForSequenceClassification"),emt.forEach(t),VPo=r(sxe," (Transformer-XL model)"),sxe.forEach(t),XPo=i(j),S2=n(j,"LI",{});var lxe=s(S2);Dme=n(lxe,"STRONG",{});var omt=s(Dme);zPo=r(omt,"xlm"),omt.forEach(t),WPo=r(lxe," \u2014 "),tO=n(lxe,"A",{href:!0});var rmt=s(tO);QPo=r(rmt,"XLMForSequenceClassification"),rmt.forEach(t),HPo=r(lxe," (XLM model)"),lxe.forEach(t),UPo=i(j),R2=n(j,"LI",{});var ixe=s(R2);Gme=n(ixe,"STRONG",{});var tmt=s(Gme);JPo=r(tmt,"xlm-roberta"),tmt.forEach(t),YPo=r(ixe," \u2014 "),aO=n(ixe,"A",{href:!0});var amt=s(aO);KPo=r(amt,"XLMRobertaForSequenceClassification"),amt.forEach(t),ZPo=r(ixe," (XLM-RoBERTa model)"),ixe.forEach(t),eBo=i(j),P2=n(j,"LI",{});var dxe=s(P2);Ome=n(dxe,"STRONG",{});var nmt=s(Ome);oBo=r(nmt,"xlm-roberta-xl"),nmt.forEach(t),rBo=r(dxe," \u2014 "),nO=n(dxe,"A",{href:!0});var smt=s(nO);tBo=r(smt,"XLMRobertaXLForSequenceClassification"),smt.forEach(t),aBo=r(dxe," (XLM-RoBERTa-XL model)"),dxe.forEach(t),nBo=i(j),B2=n(j,"LI",{});var cxe=s(B2);Vme=n(cxe,"STRONG",{});var lmt=s(Vme);sBo=r(lmt,"xlnet"),lmt.forEach(t),lBo=r(cxe," \u2014 "),sO=n(cxe,"A",{href:!0});var imt=s(sO);iBo=r(imt,"XLNetForSequenceClassification"),imt.forEach(t),dBo=r(cxe," (XLNet model)"),cxe.forEach(t),cBo=i(j),I2=n(j,"LI",{});var fxe=s(I2);Xme=n(fxe,"STRONG",{});var dmt=s(Xme);fBo=r(dmt,"yoso"),dmt.forEach(t),mBo=r(fxe," \u2014 "),lO=n(fxe,"A",{href:!0});var cmt=s(lO);gBo=r(cmt,"YosoForSequenceClassification"),cmt.forEach(t),hBo=r(fxe," (YOSO model)"),fxe.forEach(t),j.forEach(t),pBo=i(sa),N2=n(sa,"P",{});var mxe=s(N2);_Bo=r(mxe,"The model is set in evaluation mode by default using "),zme=n(mxe,"CODE",{});var fmt=s(zme);uBo=r(fmt,"model.eval()"),fmt.forEach(t),bBo=r(mxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wme=n(mxe,"CODE",{});var mmt=s(Wme);vBo=r(mmt,"model.train()"),mmt.forEach(t),mxe.forEach(t),FBo=i(sa),T(q2.$$.fragment,sa),sa.forEach(t),Ws.forEach(t),Vqe=i(f),Vi=n(f,"H2",{class:!0});var QDe=s(Vi);j2=n(QDe,"A",{id:!0,class:!0,href:!0});var gmt=s(j2);Qme=n(gmt,"SPAN",{});var hmt=s(Qme);T(Py.$$.fragment,hmt),hmt.forEach(t),gmt.forEach(t),TBo=i(QDe),Hme=n(QDe,"SPAN",{});var pmt=s(Hme);MBo=r(pmt,"AutoModelForMultipleChoice"),pmt.forEach(t),QDe.forEach(t),Xqe=i(f),Po=n(f,"DIV",{class:!0});var Qs=s(Po);T(By.$$.fragment,Qs),EBo=i(Qs),Xi=n(Qs,"P",{});var NZ=s(Xi);CBo=r(NZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),iO=n(NZ,"A",{href:!0});var _mt=s(iO);wBo=r(_mt,"from_pretrained()"),_mt.forEach(t),ABo=r(NZ," class method or the "),dO=n(NZ,"A",{href:!0});var umt=s(dO);yBo=r(umt,"from_config()"),umt.forEach(t),LBo=r(NZ,` class
method.`),NZ.forEach(t),xBo=i(Qs),Iy=n(Qs,"P",{});var HDe=s(Iy);$Bo=r(HDe,"This class cannot be instantiated directly using "),Ume=n(HDe,"CODE",{});var bmt=s(Ume);kBo=r(bmt,"__init__()"),bmt.forEach(t),SBo=r(HDe," (throws an error)."),HDe.forEach(t),RBo=i(Qs),dt=n(Qs,"DIV",{class:!0});var Hw=s(dt);T(Ny.$$.fragment,Hw),PBo=i(Hw),Jme=n(Hw,"P",{});var vmt=s(Jme);BBo=r(vmt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),vmt.forEach(t),IBo=i(Hw),zi=n(Hw,"P",{});var qZ=s(zi);NBo=r(qZ,`Note:
Loading a model from its configuration file does `),Yme=n(qZ,"STRONG",{});var Fmt=s(Yme);qBo=r(Fmt,"not"),Fmt.forEach(t),jBo=r(qZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),cO=n(qZ,"A",{href:!0});var Tmt=s(cO);DBo=r(Tmt,"from_pretrained()"),Tmt.forEach(t),GBo=r(qZ," to load the model weights."),qZ.forEach(t),OBo=i(Hw),T(D2.$$.fragment,Hw),Hw.forEach(t),VBo=i(Qs),ro=n(Qs,"DIV",{class:!0});var la=s(ro);T(qy.$$.fragment,la),XBo=i(la),Kme=n(la,"P",{});var Mmt=s(Kme);zBo=r(Mmt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Mmt.forEach(t),WBo=i(la),Pa=n(la,"P",{});var Uw=s(Pa);QBo=r(Uw,"The model class to instantiate is selected based on the "),Zme=n(Uw,"CODE",{});var Emt=s(Zme);HBo=r(Emt,"model_type"),Emt.forEach(t),UBo=r(Uw,` property of the config object (either
passed as an argument or loaded from `),ege=n(Uw,"CODE",{});var Cmt=s(ege);JBo=r(Cmt,"pretrained_model_name_or_path"),Cmt.forEach(t),YBo=r(Uw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oge=n(Uw,"CODE",{});var wmt=s(oge);KBo=r(wmt,"pretrained_model_name_or_path"),wmt.forEach(t),ZBo=r(Uw,":"),Uw.forEach(t),eIo=i(la),K=n(la,"UL",{});var ee=s(K);G2=n(ee,"LI",{});var gxe=s(G2);rge=n(gxe,"STRONG",{});var Amt=s(rge);oIo=r(Amt,"albert"),Amt.forEach(t),rIo=r(gxe," \u2014 "),fO=n(gxe,"A",{href:!0});var ymt=s(fO);tIo=r(ymt,"AlbertForMultipleChoice"),ymt.forEach(t),aIo=r(gxe," (ALBERT model)"),gxe.forEach(t),nIo=i(ee),O2=n(ee,"LI",{});var hxe=s(O2);tge=n(hxe,"STRONG",{});var Lmt=s(tge);sIo=r(Lmt,"bert"),Lmt.forEach(t),lIo=r(hxe," \u2014 "),mO=n(hxe,"A",{href:!0});var xmt=s(mO);iIo=r(xmt,"BertForMultipleChoice"),xmt.forEach(t),dIo=r(hxe," (BERT model)"),hxe.forEach(t),cIo=i(ee),V2=n(ee,"LI",{});var pxe=s(V2);age=n(pxe,"STRONG",{});var $mt=s(age);fIo=r($mt,"big_bird"),$mt.forEach(t),mIo=r(pxe," \u2014 "),gO=n(pxe,"A",{href:!0});var kmt=s(gO);gIo=r(kmt,"BigBirdForMultipleChoice"),kmt.forEach(t),hIo=r(pxe," (BigBird model)"),pxe.forEach(t),pIo=i(ee),X2=n(ee,"LI",{});var _xe=s(X2);nge=n(_xe,"STRONG",{});var Smt=s(nge);_Io=r(Smt,"camembert"),Smt.forEach(t),uIo=r(_xe," \u2014 "),hO=n(_xe,"A",{href:!0});var Rmt=s(hO);bIo=r(Rmt,"CamembertForMultipleChoice"),Rmt.forEach(t),vIo=r(_xe," (CamemBERT model)"),_xe.forEach(t),FIo=i(ee),z2=n(ee,"LI",{});var uxe=s(z2);sge=n(uxe,"STRONG",{});var Pmt=s(sge);TIo=r(Pmt,"canine"),Pmt.forEach(t),MIo=r(uxe," \u2014 "),pO=n(uxe,"A",{href:!0});var Bmt=s(pO);EIo=r(Bmt,"CanineForMultipleChoice"),Bmt.forEach(t),CIo=r(uxe," (Canine model)"),uxe.forEach(t),wIo=i(ee),W2=n(ee,"LI",{});var bxe=s(W2);lge=n(bxe,"STRONG",{});var Imt=s(lge);AIo=r(Imt,"convbert"),Imt.forEach(t),yIo=r(bxe," \u2014 "),_O=n(bxe,"A",{href:!0});var Nmt=s(_O);LIo=r(Nmt,"ConvBertForMultipleChoice"),Nmt.forEach(t),xIo=r(bxe," (ConvBERT model)"),bxe.forEach(t),$Io=i(ee),Q2=n(ee,"LI",{});var vxe=s(Q2);ige=n(vxe,"STRONG",{});var qmt=s(ige);kIo=r(qmt,"data2vec-text"),qmt.forEach(t),SIo=r(vxe," \u2014 "),uO=n(vxe,"A",{href:!0});var jmt=s(uO);RIo=r(jmt,"Data2VecTextForMultipleChoice"),jmt.forEach(t),PIo=r(vxe," (Data2VecText model)"),vxe.forEach(t),BIo=i(ee),H2=n(ee,"LI",{});var Fxe=s(H2);dge=n(Fxe,"STRONG",{});var Dmt=s(dge);IIo=r(Dmt,"deberta-v2"),Dmt.forEach(t),NIo=r(Fxe," \u2014 "),bO=n(Fxe,"A",{href:!0});var Gmt=s(bO);qIo=r(Gmt,"DebertaV2ForMultipleChoice"),Gmt.forEach(t),jIo=r(Fxe," (DeBERTa-v2 model)"),Fxe.forEach(t),DIo=i(ee),U2=n(ee,"LI",{});var Txe=s(U2);cge=n(Txe,"STRONG",{});var Omt=s(cge);GIo=r(Omt,"distilbert"),Omt.forEach(t),OIo=r(Txe," \u2014 "),vO=n(Txe,"A",{href:!0});var Vmt=s(vO);VIo=r(Vmt,"DistilBertForMultipleChoice"),Vmt.forEach(t),XIo=r(Txe," (DistilBERT model)"),Txe.forEach(t),zIo=i(ee),J2=n(ee,"LI",{});var Mxe=s(J2);fge=n(Mxe,"STRONG",{});var Xmt=s(fge);WIo=r(Xmt,"electra"),Xmt.forEach(t),QIo=r(Mxe," \u2014 "),FO=n(Mxe,"A",{href:!0});var zmt=s(FO);HIo=r(zmt,"ElectraForMultipleChoice"),zmt.forEach(t),UIo=r(Mxe," (ELECTRA model)"),Mxe.forEach(t),JIo=i(ee),Y2=n(ee,"LI",{});var Exe=s(Y2);mge=n(Exe,"STRONG",{});var Wmt=s(mge);YIo=r(Wmt,"flaubert"),Wmt.forEach(t),KIo=r(Exe," \u2014 "),TO=n(Exe,"A",{href:!0});var Qmt=s(TO);ZIo=r(Qmt,"FlaubertForMultipleChoice"),Qmt.forEach(t),eNo=r(Exe," (FlauBERT model)"),Exe.forEach(t),oNo=i(ee),K2=n(ee,"LI",{});var Cxe=s(K2);gge=n(Cxe,"STRONG",{});var Hmt=s(gge);rNo=r(Hmt,"fnet"),Hmt.forEach(t),tNo=r(Cxe," \u2014 "),MO=n(Cxe,"A",{href:!0});var Umt=s(MO);aNo=r(Umt,"FNetForMultipleChoice"),Umt.forEach(t),nNo=r(Cxe," (FNet model)"),Cxe.forEach(t),sNo=i(ee),Z2=n(ee,"LI",{});var wxe=s(Z2);hge=n(wxe,"STRONG",{});var Jmt=s(hge);lNo=r(Jmt,"funnel"),Jmt.forEach(t),iNo=r(wxe," \u2014 "),EO=n(wxe,"A",{href:!0});var Ymt=s(EO);dNo=r(Ymt,"FunnelForMultipleChoice"),Ymt.forEach(t),cNo=r(wxe," (Funnel Transformer model)"),wxe.forEach(t),fNo=i(ee),e5=n(ee,"LI",{});var Axe=s(e5);pge=n(Axe,"STRONG",{});var Kmt=s(pge);mNo=r(Kmt,"ibert"),Kmt.forEach(t),gNo=r(Axe," \u2014 "),CO=n(Axe,"A",{href:!0});var Zmt=s(CO);hNo=r(Zmt,"IBertForMultipleChoice"),Zmt.forEach(t),pNo=r(Axe," (I-BERT model)"),Axe.forEach(t),_No=i(ee),o5=n(ee,"LI",{});var yxe=s(o5);_ge=n(yxe,"STRONG",{});var egt=s(_ge);uNo=r(egt,"longformer"),egt.forEach(t),bNo=r(yxe," \u2014 "),wO=n(yxe,"A",{href:!0});var ogt=s(wO);vNo=r(ogt,"LongformerForMultipleChoice"),ogt.forEach(t),FNo=r(yxe," (Longformer model)"),yxe.forEach(t),TNo=i(ee),r5=n(ee,"LI",{});var Lxe=s(r5);uge=n(Lxe,"STRONG",{});var rgt=s(uge);MNo=r(rgt,"megatron-bert"),rgt.forEach(t),ENo=r(Lxe," \u2014 "),AO=n(Lxe,"A",{href:!0});var tgt=s(AO);CNo=r(tgt,"MegatronBertForMultipleChoice"),tgt.forEach(t),wNo=r(Lxe," (MegatronBert model)"),Lxe.forEach(t),ANo=i(ee),t5=n(ee,"LI",{});var xxe=s(t5);bge=n(xxe,"STRONG",{});var agt=s(bge);yNo=r(agt,"mobilebert"),agt.forEach(t),LNo=r(xxe," \u2014 "),yO=n(xxe,"A",{href:!0});var ngt=s(yO);xNo=r(ngt,"MobileBertForMultipleChoice"),ngt.forEach(t),$No=r(xxe," (MobileBERT model)"),xxe.forEach(t),kNo=i(ee),a5=n(ee,"LI",{});var $xe=s(a5);vge=n($xe,"STRONG",{});var sgt=s(vge);SNo=r(sgt,"mpnet"),sgt.forEach(t),RNo=r($xe," \u2014 "),LO=n($xe,"A",{href:!0});var lgt=s(LO);PNo=r(lgt,"MPNetForMultipleChoice"),lgt.forEach(t),BNo=r($xe," (MPNet model)"),$xe.forEach(t),INo=i(ee),n5=n(ee,"LI",{});var kxe=s(n5);Fge=n(kxe,"STRONG",{});var igt=s(Fge);NNo=r(igt,"nystromformer"),igt.forEach(t),qNo=r(kxe," \u2014 "),xO=n(kxe,"A",{href:!0});var dgt=s(xO);jNo=r(dgt,"NystromformerForMultipleChoice"),dgt.forEach(t),DNo=r(kxe," (Nystromformer model)"),kxe.forEach(t),GNo=i(ee),s5=n(ee,"LI",{});var Sxe=s(s5);Tge=n(Sxe,"STRONG",{});var cgt=s(Tge);ONo=r(cgt,"qdqbert"),cgt.forEach(t),VNo=r(Sxe," \u2014 "),$O=n(Sxe,"A",{href:!0});var fgt=s($O);XNo=r(fgt,"QDQBertForMultipleChoice"),fgt.forEach(t),zNo=r(Sxe," (QDQBert model)"),Sxe.forEach(t),WNo=i(ee),l5=n(ee,"LI",{});var Rxe=s(l5);Mge=n(Rxe,"STRONG",{});var mgt=s(Mge);QNo=r(mgt,"rembert"),mgt.forEach(t),HNo=r(Rxe," \u2014 "),kO=n(Rxe,"A",{href:!0});var ggt=s(kO);UNo=r(ggt,"RemBertForMultipleChoice"),ggt.forEach(t),JNo=r(Rxe," (RemBERT model)"),Rxe.forEach(t),YNo=i(ee),i5=n(ee,"LI",{});var Pxe=s(i5);Ege=n(Pxe,"STRONG",{});var hgt=s(Ege);KNo=r(hgt,"roberta"),hgt.forEach(t),ZNo=r(Pxe," \u2014 "),SO=n(Pxe,"A",{href:!0});var pgt=s(SO);eqo=r(pgt,"RobertaForMultipleChoice"),pgt.forEach(t),oqo=r(Pxe," (RoBERTa model)"),Pxe.forEach(t),rqo=i(ee),d5=n(ee,"LI",{});var Bxe=s(d5);Cge=n(Bxe,"STRONG",{});var _gt=s(Cge);tqo=r(_gt,"roformer"),_gt.forEach(t),aqo=r(Bxe," \u2014 "),RO=n(Bxe,"A",{href:!0});var ugt=s(RO);nqo=r(ugt,"RoFormerForMultipleChoice"),ugt.forEach(t),sqo=r(Bxe," (RoFormer model)"),Bxe.forEach(t),lqo=i(ee),c5=n(ee,"LI",{});var Ixe=s(c5);wge=n(Ixe,"STRONG",{});var bgt=s(wge);iqo=r(bgt,"squeezebert"),bgt.forEach(t),dqo=r(Ixe," \u2014 "),PO=n(Ixe,"A",{href:!0});var vgt=s(PO);cqo=r(vgt,"SqueezeBertForMultipleChoice"),vgt.forEach(t),fqo=r(Ixe," (SqueezeBERT model)"),Ixe.forEach(t),mqo=i(ee),f5=n(ee,"LI",{});var Nxe=s(f5);Age=n(Nxe,"STRONG",{});var Fgt=s(Age);gqo=r(Fgt,"xlm"),Fgt.forEach(t),hqo=r(Nxe," \u2014 "),BO=n(Nxe,"A",{href:!0});var Tgt=s(BO);pqo=r(Tgt,"XLMForMultipleChoice"),Tgt.forEach(t),_qo=r(Nxe," (XLM model)"),Nxe.forEach(t),uqo=i(ee),m5=n(ee,"LI",{});var qxe=s(m5);yge=n(qxe,"STRONG",{});var Mgt=s(yge);bqo=r(Mgt,"xlm-roberta"),Mgt.forEach(t),vqo=r(qxe," \u2014 "),IO=n(qxe,"A",{href:!0});var Egt=s(IO);Fqo=r(Egt,"XLMRobertaForMultipleChoice"),Egt.forEach(t),Tqo=r(qxe," (XLM-RoBERTa model)"),qxe.forEach(t),Mqo=i(ee),g5=n(ee,"LI",{});var jxe=s(g5);Lge=n(jxe,"STRONG",{});var Cgt=s(Lge);Eqo=r(Cgt,"xlm-roberta-xl"),Cgt.forEach(t),Cqo=r(jxe," \u2014 "),NO=n(jxe,"A",{href:!0});var wgt=s(NO);wqo=r(wgt,"XLMRobertaXLForMultipleChoice"),wgt.forEach(t),Aqo=r(jxe," (XLM-RoBERTa-XL model)"),jxe.forEach(t),yqo=i(ee),h5=n(ee,"LI",{});var Dxe=s(h5);xge=n(Dxe,"STRONG",{});var Agt=s(xge);Lqo=r(Agt,"xlnet"),Agt.forEach(t),xqo=r(Dxe," \u2014 "),qO=n(Dxe,"A",{href:!0});var ygt=s(qO);$qo=r(ygt,"XLNetForMultipleChoice"),ygt.forEach(t),kqo=r(Dxe," (XLNet model)"),Dxe.forEach(t),Sqo=i(ee),p5=n(ee,"LI",{});var Gxe=s(p5);$ge=n(Gxe,"STRONG",{});var Lgt=s($ge);Rqo=r(Lgt,"yoso"),Lgt.forEach(t),Pqo=r(Gxe," \u2014 "),jO=n(Gxe,"A",{href:!0});var xgt=s(jO);Bqo=r(xgt,"YosoForMultipleChoice"),xgt.forEach(t),Iqo=r(Gxe," (YOSO model)"),Gxe.forEach(t),ee.forEach(t),Nqo=i(la),_5=n(la,"P",{});var Oxe=s(_5);qqo=r(Oxe,"The model is set in evaluation mode by default using "),kge=n(Oxe,"CODE",{});var $gt=s(kge);jqo=r($gt,"model.eval()"),$gt.forEach(t),Dqo=r(Oxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sge=n(Oxe,"CODE",{});var kgt=s(Sge);Gqo=r(kgt,"model.train()"),kgt.forEach(t),Oxe.forEach(t),Oqo=i(la),T(u5.$$.fragment,la),la.forEach(t),Qs.forEach(t),zqe=i(f),Wi=n(f,"H2",{class:!0});var UDe=s(Wi);b5=n(UDe,"A",{id:!0,class:!0,href:!0});var Sgt=s(b5);Rge=n(Sgt,"SPAN",{});var Rgt=s(Rge);T(jy.$$.fragment,Rgt),Rgt.forEach(t),Sgt.forEach(t),Vqo=i(UDe),Pge=n(UDe,"SPAN",{});var Pgt=s(Pge);Xqo=r(Pgt,"AutoModelForNextSentencePrediction"),Pgt.forEach(t),UDe.forEach(t),Wqe=i(f),Bo=n(f,"DIV",{class:!0});var Hs=s(Bo);T(Dy.$$.fragment,Hs),zqo=i(Hs),Qi=n(Hs,"P",{});var jZ=s(Qi);Wqo=r(jZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),DO=n(jZ,"A",{href:!0});var Bgt=s(DO);Qqo=r(Bgt,"from_pretrained()"),Bgt.forEach(t),Hqo=r(jZ," class method or the "),GO=n(jZ,"A",{href:!0});var Igt=s(GO);Uqo=r(Igt,"from_config()"),Igt.forEach(t),Jqo=r(jZ,` class
method.`),jZ.forEach(t),Yqo=i(Hs),Gy=n(Hs,"P",{});var JDe=s(Gy);Kqo=r(JDe,"This class cannot be instantiated directly using "),Bge=n(JDe,"CODE",{});var Ngt=s(Bge);Zqo=r(Ngt,"__init__()"),Ngt.forEach(t),ejo=r(JDe," (throws an error)."),JDe.forEach(t),ojo=i(Hs),ct=n(Hs,"DIV",{class:!0});var Jw=s(ct);T(Oy.$$.fragment,Jw),rjo=i(Jw),Ige=n(Jw,"P",{});var qgt=s(Ige);tjo=r(qgt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),qgt.forEach(t),ajo=i(Jw),Hi=n(Jw,"P",{});var DZ=s(Hi);njo=r(DZ,`Note:
Loading a model from its configuration file does `),Nge=n(DZ,"STRONG",{});var jgt=s(Nge);sjo=r(jgt,"not"),jgt.forEach(t),ljo=r(DZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),OO=n(DZ,"A",{href:!0});var Dgt=s(OO);ijo=r(Dgt,"from_pretrained()"),Dgt.forEach(t),djo=r(DZ," to load the model weights."),DZ.forEach(t),cjo=i(Jw),T(v5.$$.fragment,Jw),Jw.forEach(t),fjo=i(Hs),to=n(Hs,"DIV",{class:!0});var ia=s(to);T(Vy.$$.fragment,ia),mjo=i(ia),qge=n(ia,"P",{});var Ggt=s(qge);gjo=r(Ggt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Ggt.forEach(t),hjo=i(ia),Ba=n(ia,"P",{});var Yw=s(Ba);pjo=r(Yw,"The model class to instantiate is selected based on the "),jge=n(Yw,"CODE",{});var Ogt=s(jge);_jo=r(Ogt,"model_type"),Ogt.forEach(t),ujo=r(Yw,` property of the config object (either
passed as an argument or loaded from `),Dge=n(Yw,"CODE",{});var Vgt=s(Dge);bjo=r(Vgt,"pretrained_model_name_or_path"),Vgt.forEach(t),vjo=r(Yw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gge=n(Yw,"CODE",{});var Xgt=s(Gge);Fjo=r(Xgt,"pretrained_model_name_or_path"),Xgt.forEach(t),Tjo=r(Yw,":"),Yw.forEach(t),Mjo=i(ia),Yr=n(ia,"UL",{});var Us=s(Yr);F5=n(Us,"LI",{});var Vxe=s(F5);Oge=n(Vxe,"STRONG",{});var zgt=s(Oge);Ejo=r(zgt,"bert"),zgt.forEach(t),Cjo=r(Vxe," \u2014 "),VO=n(Vxe,"A",{href:!0});var Wgt=s(VO);wjo=r(Wgt,"BertForNextSentencePrediction"),Wgt.forEach(t),Ajo=r(Vxe," (BERT model)"),Vxe.forEach(t),yjo=i(Us),T5=n(Us,"LI",{});var Xxe=s(T5);Vge=n(Xxe,"STRONG",{});var Qgt=s(Vge);Ljo=r(Qgt,"fnet"),Qgt.forEach(t),xjo=r(Xxe," \u2014 "),XO=n(Xxe,"A",{href:!0});var Hgt=s(XO);$jo=r(Hgt,"FNetForNextSentencePrediction"),Hgt.forEach(t),kjo=r(Xxe," (FNet model)"),Xxe.forEach(t),Sjo=i(Us),M5=n(Us,"LI",{});var zxe=s(M5);Xge=n(zxe,"STRONG",{});var Ugt=s(Xge);Rjo=r(Ugt,"megatron-bert"),Ugt.forEach(t),Pjo=r(zxe," \u2014 "),zO=n(zxe,"A",{href:!0});var Jgt=s(zO);Bjo=r(Jgt,"MegatronBertForNextSentencePrediction"),Jgt.forEach(t),Ijo=r(zxe," (MegatronBert model)"),zxe.forEach(t),Njo=i(Us),E5=n(Us,"LI",{});var Wxe=s(E5);zge=n(Wxe,"STRONG",{});var Ygt=s(zge);qjo=r(Ygt,"mobilebert"),Ygt.forEach(t),jjo=r(Wxe," \u2014 "),WO=n(Wxe,"A",{href:!0});var Kgt=s(WO);Djo=r(Kgt,"MobileBertForNextSentencePrediction"),Kgt.forEach(t),Gjo=r(Wxe," (MobileBERT model)"),Wxe.forEach(t),Ojo=i(Us),C5=n(Us,"LI",{});var Qxe=s(C5);Wge=n(Qxe,"STRONG",{});var Zgt=s(Wge);Vjo=r(Zgt,"qdqbert"),Zgt.forEach(t),Xjo=r(Qxe," \u2014 "),QO=n(Qxe,"A",{href:!0});var eht=s(QO);zjo=r(eht,"QDQBertForNextSentencePrediction"),eht.forEach(t),Wjo=r(Qxe," (QDQBert model)"),Qxe.forEach(t),Us.forEach(t),Qjo=i(ia),w5=n(ia,"P",{});var Hxe=s(w5);Hjo=r(Hxe,"The model is set in evaluation mode by default using "),Qge=n(Hxe,"CODE",{});var oht=s(Qge);Ujo=r(oht,"model.eval()"),oht.forEach(t),Jjo=r(Hxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hge=n(Hxe,"CODE",{});var rht=s(Hge);Yjo=r(rht,"model.train()"),rht.forEach(t),Hxe.forEach(t),Kjo=i(ia),T(A5.$$.fragment,ia),ia.forEach(t),Hs.forEach(t),Qqe=i(f),Ui=n(f,"H2",{class:!0});var YDe=s(Ui);y5=n(YDe,"A",{id:!0,class:!0,href:!0});var tht=s(y5);Uge=n(tht,"SPAN",{});var aht=s(Uge);T(Xy.$$.fragment,aht),aht.forEach(t),tht.forEach(t),Zjo=i(YDe),Jge=n(YDe,"SPAN",{});var nht=s(Jge);eDo=r(nht,"AutoModelForTokenClassification"),nht.forEach(t),YDe.forEach(t),Hqe=i(f),Io=n(f,"DIV",{class:!0});var Js=s(Io);T(zy.$$.fragment,Js),oDo=i(Js),Ji=n(Js,"P",{});var GZ=s(Ji);rDo=r(GZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),HO=n(GZ,"A",{href:!0});var sht=s(HO);tDo=r(sht,"from_pretrained()"),sht.forEach(t),aDo=r(GZ," class method or the "),UO=n(GZ,"A",{href:!0});var lht=s(UO);nDo=r(lht,"from_config()"),lht.forEach(t),sDo=r(GZ,` class
method.`),GZ.forEach(t),lDo=i(Js),Wy=n(Js,"P",{});var KDe=s(Wy);iDo=r(KDe,"This class cannot be instantiated directly using "),Yge=n(KDe,"CODE",{});var iht=s(Yge);dDo=r(iht,"__init__()"),iht.forEach(t),cDo=r(KDe," (throws an error)."),KDe.forEach(t),fDo=i(Js),ft=n(Js,"DIV",{class:!0});var Kw=s(ft);T(Qy.$$.fragment,Kw),mDo=i(Kw),Kge=n(Kw,"P",{});var dht=s(Kge);gDo=r(dht,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),dht.forEach(t),hDo=i(Kw),Yi=n(Kw,"P",{});var OZ=s(Yi);pDo=r(OZ,`Note:
Loading a model from its configuration file does `),Zge=n(OZ,"STRONG",{});var cht=s(Zge);_Do=r(cht,"not"),cht.forEach(t),uDo=r(OZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),JO=n(OZ,"A",{href:!0});var fht=s(JO);bDo=r(fht,"from_pretrained()"),fht.forEach(t),vDo=r(OZ," to load the model weights."),OZ.forEach(t),FDo=i(Kw),T(L5.$$.fragment,Kw),Kw.forEach(t),TDo=i(Js),ao=n(Js,"DIV",{class:!0});var da=s(ao);T(Hy.$$.fragment,da),MDo=i(da),ehe=n(da,"P",{});var mht=s(ehe);EDo=r(mht,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),mht.forEach(t),CDo=i(da),Ia=n(da,"P",{});var Zw=s(Ia);wDo=r(Zw,"The model class to instantiate is selected based on the "),ohe=n(Zw,"CODE",{});var ght=s(ohe);ADo=r(ght,"model_type"),ght.forEach(t),yDo=r(Zw,` property of the config object (either
passed as an argument or loaded from `),rhe=n(Zw,"CODE",{});var hht=s(rhe);LDo=r(hht,"pretrained_model_name_or_path"),hht.forEach(t),xDo=r(Zw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),the=n(Zw,"CODE",{});var pht=s(the);$Do=r(pht,"pretrained_model_name_or_path"),pht.forEach(t),kDo=r(Zw,":"),Zw.forEach(t),SDo=i(da),U=n(da,"UL",{});var J=s(U);x5=n(J,"LI",{});var Uxe=s(x5);ahe=n(Uxe,"STRONG",{});var _ht=s(ahe);RDo=r(_ht,"albert"),_ht.forEach(t),PDo=r(Uxe," \u2014 "),YO=n(Uxe,"A",{href:!0});var uht=s(YO);BDo=r(uht,"AlbertForTokenClassification"),uht.forEach(t),IDo=r(Uxe," (ALBERT model)"),Uxe.forEach(t),NDo=i(J),$5=n(J,"LI",{});var Jxe=s($5);nhe=n(Jxe,"STRONG",{});var bht=s(nhe);qDo=r(bht,"bert"),bht.forEach(t),jDo=r(Jxe," \u2014 "),KO=n(Jxe,"A",{href:!0});var vht=s(KO);DDo=r(vht,"BertForTokenClassification"),vht.forEach(t),GDo=r(Jxe," (BERT model)"),Jxe.forEach(t),ODo=i(J),k5=n(J,"LI",{});var Yxe=s(k5);she=n(Yxe,"STRONG",{});var Fht=s(she);VDo=r(Fht,"big_bird"),Fht.forEach(t),XDo=r(Yxe," \u2014 "),ZO=n(Yxe,"A",{href:!0});var Tht=s(ZO);zDo=r(Tht,"BigBirdForTokenClassification"),Tht.forEach(t),WDo=r(Yxe," (BigBird model)"),Yxe.forEach(t),QDo=i(J),S5=n(J,"LI",{});var Kxe=s(S5);lhe=n(Kxe,"STRONG",{});var Mht=s(lhe);HDo=r(Mht,"camembert"),Mht.forEach(t),UDo=r(Kxe," \u2014 "),eV=n(Kxe,"A",{href:!0});var Eht=s(eV);JDo=r(Eht,"CamembertForTokenClassification"),Eht.forEach(t),YDo=r(Kxe," (CamemBERT model)"),Kxe.forEach(t),KDo=i(J),R5=n(J,"LI",{});var Zxe=s(R5);ihe=n(Zxe,"STRONG",{});var Cht=s(ihe);ZDo=r(Cht,"canine"),Cht.forEach(t),eGo=r(Zxe," \u2014 "),oV=n(Zxe,"A",{href:!0});var wht=s(oV);oGo=r(wht,"CanineForTokenClassification"),wht.forEach(t),rGo=r(Zxe," (Canine model)"),Zxe.forEach(t),tGo=i(J),P5=n(J,"LI",{});var e$e=s(P5);dhe=n(e$e,"STRONG",{});var Aht=s(dhe);aGo=r(Aht,"convbert"),Aht.forEach(t),nGo=r(e$e," \u2014 "),rV=n(e$e,"A",{href:!0});var yht=s(rV);sGo=r(yht,"ConvBertForTokenClassification"),yht.forEach(t),lGo=r(e$e," (ConvBERT model)"),e$e.forEach(t),iGo=i(J),B5=n(J,"LI",{});var o$e=s(B5);che=n(o$e,"STRONG",{});var Lht=s(che);dGo=r(Lht,"data2vec-text"),Lht.forEach(t),cGo=r(o$e," \u2014 "),tV=n(o$e,"A",{href:!0});var xht=s(tV);fGo=r(xht,"Data2VecTextForTokenClassification"),xht.forEach(t),mGo=r(o$e," (Data2VecText model)"),o$e.forEach(t),gGo=i(J),I5=n(J,"LI",{});var r$e=s(I5);fhe=n(r$e,"STRONG",{});var $ht=s(fhe);hGo=r($ht,"deberta"),$ht.forEach(t),pGo=r(r$e," \u2014 "),aV=n(r$e,"A",{href:!0});var kht=s(aV);_Go=r(kht,"DebertaForTokenClassification"),kht.forEach(t),uGo=r(r$e," (DeBERTa model)"),r$e.forEach(t),bGo=i(J),N5=n(J,"LI",{});var t$e=s(N5);mhe=n(t$e,"STRONG",{});var Sht=s(mhe);vGo=r(Sht,"deberta-v2"),Sht.forEach(t),FGo=r(t$e," \u2014 "),nV=n(t$e,"A",{href:!0});var Rht=s(nV);TGo=r(Rht,"DebertaV2ForTokenClassification"),Rht.forEach(t),MGo=r(t$e," (DeBERTa-v2 model)"),t$e.forEach(t),EGo=i(J),q5=n(J,"LI",{});var a$e=s(q5);ghe=n(a$e,"STRONG",{});var Pht=s(ghe);CGo=r(Pht,"distilbert"),Pht.forEach(t),wGo=r(a$e," \u2014 "),sV=n(a$e,"A",{href:!0});var Bht=s(sV);AGo=r(Bht,"DistilBertForTokenClassification"),Bht.forEach(t),yGo=r(a$e," (DistilBERT model)"),a$e.forEach(t),LGo=i(J),j5=n(J,"LI",{});var n$e=s(j5);hhe=n(n$e,"STRONG",{});var Iht=s(hhe);xGo=r(Iht,"electra"),Iht.forEach(t),$Go=r(n$e," \u2014 "),lV=n(n$e,"A",{href:!0});var Nht=s(lV);kGo=r(Nht,"ElectraForTokenClassification"),Nht.forEach(t),SGo=r(n$e," (ELECTRA model)"),n$e.forEach(t),RGo=i(J),D5=n(J,"LI",{});var s$e=s(D5);phe=n(s$e,"STRONG",{});var qht=s(phe);PGo=r(qht,"flaubert"),qht.forEach(t),BGo=r(s$e," \u2014 "),iV=n(s$e,"A",{href:!0});var jht=s(iV);IGo=r(jht,"FlaubertForTokenClassification"),jht.forEach(t),NGo=r(s$e," (FlauBERT model)"),s$e.forEach(t),qGo=i(J),G5=n(J,"LI",{});var l$e=s(G5);_he=n(l$e,"STRONG",{});var Dht=s(_he);jGo=r(Dht,"fnet"),Dht.forEach(t),DGo=r(l$e," \u2014 "),dV=n(l$e,"A",{href:!0});var Ght=s(dV);GGo=r(Ght,"FNetForTokenClassification"),Ght.forEach(t),OGo=r(l$e," (FNet model)"),l$e.forEach(t),VGo=i(J),O5=n(J,"LI",{});var i$e=s(O5);uhe=n(i$e,"STRONG",{});var Oht=s(uhe);XGo=r(Oht,"funnel"),Oht.forEach(t),zGo=r(i$e," \u2014 "),cV=n(i$e,"A",{href:!0});var Vht=s(cV);WGo=r(Vht,"FunnelForTokenClassification"),Vht.forEach(t),QGo=r(i$e," (Funnel Transformer model)"),i$e.forEach(t),HGo=i(J),V5=n(J,"LI",{});var d$e=s(V5);bhe=n(d$e,"STRONG",{});var Xht=s(bhe);UGo=r(Xht,"gpt2"),Xht.forEach(t),JGo=r(d$e," \u2014 "),fV=n(d$e,"A",{href:!0});var zht=s(fV);YGo=r(zht,"GPT2ForTokenClassification"),zht.forEach(t),KGo=r(d$e," (OpenAI GPT-2 model)"),d$e.forEach(t),ZGo=i(J),X5=n(J,"LI",{});var c$e=s(X5);vhe=n(c$e,"STRONG",{});var Wht=s(vhe);eOo=r(Wht,"ibert"),Wht.forEach(t),oOo=r(c$e," \u2014 "),mV=n(c$e,"A",{href:!0});var Qht=s(mV);rOo=r(Qht,"IBertForTokenClassification"),Qht.forEach(t),tOo=r(c$e," (I-BERT model)"),c$e.forEach(t),aOo=i(J),z5=n(J,"LI",{});var f$e=s(z5);Fhe=n(f$e,"STRONG",{});var Hht=s(Fhe);nOo=r(Hht,"layoutlm"),Hht.forEach(t),sOo=r(f$e," \u2014 "),gV=n(f$e,"A",{href:!0});var Uht=s(gV);lOo=r(Uht,"LayoutLMForTokenClassification"),Uht.forEach(t),iOo=r(f$e," (LayoutLM model)"),f$e.forEach(t),dOo=i(J),W5=n(J,"LI",{});var m$e=s(W5);The=n(m$e,"STRONG",{});var Jht=s(The);cOo=r(Jht,"layoutlmv2"),Jht.forEach(t),fOo=r(m$e," \u2014 "),hV=n(m$e,"A",{href:!0});var Yht=s(hV);mOo=r(Yht,"LayoutLMv2ForTokenClassification"),Yht.forEach(t),gOo=r(m$e," (LayoutLMv2 model)"),m$e.forEach(t),hOo=i(J),Q5=n(J,"LI",{});var g$e=s(Q5);Mhe=n(g$e,"STRONG",{});var Kht=s(Mhe);pOo=r(Kht,"layoutlmv3"),Kht.forEach(t),_Oo=r(g$e," \u2014 "),pV=n(g$e,"A",{href:!0});var Zht=s(pV);uOo=r(Zht,"LayoutLMv3ForTokenClassification"),Zht.forEach(t),bOo=r(g$e," (LayoutLMv3 model)"),g$e.forEach(t),vOo=i(J),H5=n(J,"LI",{});var h$e=s(H5);Ehe=n(h$e,"STRONG",{});var ept=s(Ehe);FOo=r(ept,"longformer"),ept.forEach(t),TOo=r(h$e," \u2014 "),_V=n(h$e,"A",{href:!0});var opt=s(_V);MOo=r(opt,"LongformerForTokenClassification"),opt.forEach(t),EOo=r(h$e," (Longformer model)"),h$e.forEach(t),COo=i(J),U5=n(J,"LI",{});var p$e=s(U5);Che=n(p$e,"STRONG",{});var rpt=s(Che);wOo=r(rpt,"megatron-bert"),rpt.forEach(t),AOo=r(p$e," \u2014 "),uV=n(p$e,"A",{href:!0});var tpt=s(uV);yOo=r(tpt,"MegatronBertForTokenClassification"),tpt.forEach(t),LOo=r(p$e," (MegatronBert model)"),p$e.forEach(t),xOo=i(J),J5=n(J,"LI",{});var _$e=s(J5);whe=n(_$e,"STRONG",{});var apt=s(whe);$Oo=r(apt,"mobilebert"),apt.forEach(t),kOo=r(_$e," \u2014 "),bV=n(_$e,"A",{href:!0});var npt=s(bV);SOo=r(npt,"MobileBertForTokenClassification"),npt.forEach(t),ROo=r(_$e," (MobileBERT model)"),_$e.forEach(t),POo=i(J),Y5=n(J,"LI",{});var u$e=s(Y5);Ahe=n(u$e,"STRONG",{});var spt=s(Ahe);BOo=r(spt,"mpnet"),spt.forEach(t),IOo=r(u$e," \u2014 "),vV=n(u$e,"A",{href:!0});var lpt=s(vV);NOo=r(lpt,"MPNetForTokenClassification"),lpt.forEach(t),qOo=r(u$e," (MPNet model)"),u$e.forEach(t),jOo=i(J),K5=n(J,"LI",{});var b$e=s(K5);yhe=n(b$e,"STRONG",{});var ipt=s(yhe);DOo=r(ipt,"nystromformer"),ipt.forEach(t),GOo=r(b$e," \u2014 "),FV=n(b$e,"A",{href:!0});var dpt=s(FV);OOo=r(dpt,"NystromformerForTokenClassification"),dpt.forEach(t),VOo=r(b$e," (Nystromformer model)"),b$e.forEach(t),XOo=i(J),Z5=n(J,"LI",{});var v$e=s(Z5);Lhe=n(v$e,"STRONG",{});var cpt=s(Lhe);zOo=r(cpt,"qdqbert"),cpt.forEach(t),WOo=r(v$e," \u2014 "),TV=n(v$e,"A",{href:!0});var fpt=s(TV);QOo=r(fpt,"QDQBertForTokenClassification"),fpt.forEach(t),HOo=r(v$e," (QDQBert model)"),v$e.forEach(t),UOo=i(J),ev=n(J,"LI",{});var F$e=s(ev);xhe=n(F$e,"STRONG",{});var mpt=s(xhe);JOo=r(mpt,"rembert"),mpt.forEach(t),YOo=r(F$e," \u2014 "),MV=n(F$e,"A",{href:!0});var gpt=s(MV);KOo=r(gpt,"RemBertForTokenClassification"),gpt.forEach(t),ZOo=r(F$e," (RemBERT model)"),F$e.forEach(t),eVo=i(J),ov=n(J,"LI",{});var T$e=s(ov);$he=n(T$e,"STRONG",{});var hpt=s($he);oVo=r(hpt,"roberta"),hpt.forEach(t),rVo=r(T$e," \u2014 "),EV=n(T$e,"A",{href:!0});var ppt=s(EV);tVo=r(ppt,"RobertaForTokenClassification"),ppt.forEach(t),aVo=r(T$e," (RoBERTa model)"),T$e.forEach(t),nVo=i(J),rv=n(J,"LI",{});var M$e=s(rv);khe=n(M$e,"STRONG",{});var _pt=s(khe);sVo=r(_pt,"roformer"),_pt.forEach(t),lVo=r(M$e," \u2014 "),CV=n(M$e,"A",{href:!0});var upt=s(CV);iVo=r(upt,"RoFormerForTokenClassification"),upt.forEach(t),dVo=r(M$e," (RoFormer model)"),M$e.forEach(t),cVo=i(J),tv=n(J,"LI",{});var E$e=s(tv);She=n(E$e,"STRONG",{});var bpt=s(She);fVo=r(bpt,"squeezebert"),bpt.forEach(t),mVo=r(E$e," \u2014 "),wV=n(E$e,"A",{href:!0});var vpt=s(wV);gVo=r(vpt,"SqueezeBertForTokenClassification"),vpt.forEach(t),hVo=r(E$e," (SqueezeBERT model)"),E$e.forEach(t),pVo=i(J),av=n(J,"LI",{});var C$e=s(av);Rhe=n(C$e,"STRONG",{});var Fpt=s(Rhe);_Vo=r(Fpt,"xlm"),Fpt.forEach(t),uVo=r(C$e," \u2014 "),AV=n(C$e,"A",{href:!0});var Tpt=s(AV);bVo=r(Tpt,"XLMForTokenClassification"),Tpt.forEach(t),vVo=r(C$e," (XLM model)"),C$e.forEach(t),FVo=i(J),nv=n(J,"LI",{});var w$e=s(nv);Phe=n(w$e,"STRONG",{});var Mpt=s(Phe);TVo=r(Mpt,"xlm-roberta"),Mpt.forEach(t),MVo=r(w$e," \u2014 "),yV=n(w$e,"A",{href:!0});var Ept=s(yV);EVo=r(Ept,"XLMRobertaForTokenClassification"),Ept.forEach(t),CVo=r(w$e," (XLM-RoBERTa model)"),w$e.forEach(t),wVo=i(J),sv=n(J,"LI",{});var A$e=s(sv);Bhe=n(A$e,"STRONG",{});var Cpt=s(Bhe);AVo=r(Cpt,"xlm-roberta-xl"),Cpt.forEach(t),yVo=r(A$e," \u2014 "),LV=n(A$e,"A",{href:!0});var wpt=s(LV);LVo=r(wpt,"XLMRobertaXLForTokenClassification"),wpt.forEach(t),xVo=r(A$e," (XLM-RoBERTa-XL model)"),A$e.forEach(t),$Vo=i(J),lv=n(J,"LI",{});var y$e=s(lv);Ihe=n(y$e,"STRONG",{});var Apt=s(Ihe);kVo=r(Apt,"xlnet"),Apt.forEach(t),SVo=r(y$e," \u2014 "),xV=n(y$e,"A",{href:!0});var ypt=s(xV);RVo=r(ypt,"XLNetForTokenClassification"),ypt.forEach(t),PVo=r(y$e," (XLNet model)"),y$e.forEach(t),BVo=i(J),iv=n(J,"LI",{});var L$e=s(iv);Nhe=n(L$e,"STRONG",{});var Lpt=s(Nhe);IVo=r(Lpt,"yoso"),Lpt.forEach(t),NVo=r(L$e," \u2014 "),$V=n(L$e,"A",{href:!0});var xpt=s($V);qVo=r(xpt,"YosoForTokenClassification"),xpt.forEach(t),jVo=r(L$e," (YOSO model)"),L$e.forEach(t),J.forEach(t),DVo=i(da),dv=n(da,"P",{});var x$e=s(dv);GVo=r(x$e,"The model is set in evaluation mode by default using "),qhe=n(x$e,"CODE",{});var $pt=s(qhe);OVo=r($pt,"model.eval()"),$pt.forEach(t),VVo=r(x$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jhe=n(x$e,"CODE",{});var kpt=s(jhe);XVo=r(kpt,"model.train()"),kpt.forEach(t),x$e.forEach(t),zVo=i(da),T(cv.$$.fragment,da),da.forEach(t),Js.forEach(t),Uqe=i(f),Ki=n(f,"H2",{class:!0});var ZDe=s(Ki);fv=n(ZDe,"A",{id:!0,class:!0,href:!0});var Spt=s(fv);Dhe=n(Spt,"SPAN",{});var Rpt=s(Dhe);T(Uy.$$.fragment,Rpt),Rpt.forEach(t),Spt.forEach(t),WVo=i(ZDe),Ghe=n(ZDe,"SPAN",{});var Ppt=s(Ghe);QVo=r(Ppt,"AutoModelForQuestionAnswering"),Ppt.forEach(t),ZDe.forEach(t),Jqe=i(f),No=n(f,"DIV",{class:!0});var Ys=s(No);T(Jy.$$.fragment,Ys),HVo=i(Ys),Zi=n(Ys,"P",{});var VZ=s(Zi);UVo=r(VZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),kV=n(VZ,"A",{href:!0});var Bpt=s(kV);JVo=r(Bpt,"from_pretrained()"),Bpt.forEach(t),YVo=r(VZ," class method or the "),SV=n(VZ,"A",{href:!0});var Ipt=s(SV);KVo=r(Ipt,"from_config()"),Ipt.forEach(t),ZVo=r(VZ,` class
method.`),VZ.forEach(t),eXo=i(Ys),Yy=n(Ys,"P",{});var eGe=s(Yy);oXo=r(eGe,"This class cannot be instantiated directly using "),Ohe=n(eGe,"CODE",{});var Npt=s(Ohe);rXo=r(Npt,"__init__()"),Npt.forEach(t),tXo=r(eGe," (throws an error)."),eGe.forEach(t),aXo=i(Ys),mt=n(Ys,"DIV",{class:!0});var e6=s(mt);T(Ky.$$.fragment,e6),nXo=i(e6),Vhe=n(e6,"P",{});var qpt=s(Vhe);sXo=r(qpt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),qpt.forEach(t),lXo=i(e6),ed=n(e6,"P",{});var XZ=s(ed);iXo=r(XZ,`Note:
Loading a model from its configuration file does `),Xhe=n(XZ,"STRONG",{});var jpt=s(Xhe);dXo=r(jpt,"not"),jpt.forEach(t),cXo=r(XZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),RV=n(XZ,"A",{href:!0});var Dpt=s(RV);fXo=r(Dpt,"from_pretrained()"),Dpt.forEach(t),mXo=r(XZ," to load the model weights."),XZ.forEach(t),gXo=i(e6),T(mv.$$.fragment,e6),e6.forEach(t),hXo=i(Ys),no=n(Ys,"DIV",{class:!0});var ca=s(no);T(Zy.$$.fragment,ca),pXo=i(ca),zhe=n(ca,"P",{});var Gpt=s(zhe);_Xo=r(Gpt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Gpt.forEach(t),uXo=i(ca),Na=n(ca,"P",{});var o6=s(Na);bXo=r(o6,"The model class to instantiate is selected based on the "),Whe=n(o6,"CODE",{});var Opt=s(Whe);vXo=r(Opt,"model_type"),Opt.forEach(t),FXo=r(o6,` property of the config object (either
passed as an argument or loaded from `),Qhe=n(o6,"CODE",{});var Vpt=s(Qhe);TXo=r(Vpt,"pretrained_model_name_or_path"),Vpt.forEach(t),MXo=r(o6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hhe=n(o6,"CODE",{});var Xpt=s(Hhe);EXo=r(Xpt,"pretrained_model_name_or_path"),Xpt.forEach(t),CXo=r(o6,":"),o6.forEach(t),wXo=i(ca),V=n(ca,"UL",{});var X=s(V);gv=n(X,"LI",{});var $$e=s(gv);Uhe=n($$e,"STRONG",{});var zpt=s(Uhe);AXo=r(zpt,"albert"),zpt.forEach(t),yXo=r($$e," \u2014 "),PV=n($$e,"A",{href:!0});var Wpt=s(PV);LXo=r(Wpt,"AlbertForQuestionAnswering"),Wpt.forEach(t),xXo=r($$e," (ALBERT model)"),$$e.forEach(t),$Xo=i(X),hv=n(X,"LI",{});var k$e=s(hv);Jhe=n(k$e,"STRONG",{});var Qpt=s(Jhe);kXo=r(Qpt,"bart"),Qpt.forEach(t),SXo=r(k$e," \u2014 "),BV=n(k$e,"A",{href:!0});var Hpt=s(BV);RXo=r(Hpt,"BartForQuestionAnswering"),Hpt.forEach(t),PXo=r(k$e," (BART model)"),k$e.forEach(t),BXo=i(X),pv=n(X,"LI",{});var S$e=s(pv);Yhe=n(S$e,"STRONG",{});var Upt=s(Yhe);IXo=r(Upt,"bert"),Upt.forEach(t),NXo=r(S$e," \u2014 "),IV=n(S$e,"A",{href:!0});var Jpt=s(IV);qXo=r(Jpt,"BertForQuestionAnswering"),Jpt.forEach(t),jXo=r(S$e," (BERT model)"),S$e.forEach(t),DXo=i(X),_v=n(X,"LI",{});var R$e=s(_v);Khe=n(R$e,"STRONG",{});var Ypt=s(Khe);GXo=r(Ypt,"big_bird"),Ypt.forEach(t),OXo=r(R$e," \u2014 "),NV=n(R$e,"A",{href:!0});var Kpt=s(NV);VXo=r(Kpt,"BigBirdForQuestionAnswering"),Kpt.forEach(t),XXo=r(R$e," (BigBird model)"),R$e.forEach(t),zXo=i(X),uv=n(X,"LI",{});var P$e=s(uv);Zhe=n(P$e,"STRONG",{});var Zpt=s(Zhe);WXo=r(Zpt,"bigbird_pegasus"),Zpt.forEach(t),QXo=r(P$e," \u2014 "),qV=n(P$e,"A",{href:!0});var e_t=s(qV);HXo=r(e_t,"BigBirdPegasusForQuestionAnswering"),e_t.forEach(t),UXo=r(P$e," (BigBirdPegasus model)"),P$e.forEach(t),JXo=i(X),bv=n(X,"LI",{});var B$e=s(bv);epe=n(B$e,"STRONG",{});var o_t=s(epe);YXo=r(o_t,"camembert"),o_t.forEach(t),KXo=r(B$e," \u2014 "),jV=n(B$e,"A",{href:!0});var r_t=s(jV);ZXo=r(r_t,"CamembertForQuestionAnswering"),r_t.forEach(t),ezo=r(B$e," (CamemBERT model)"),B$e.forEach(t),ozo=i(X),vv=n(X,"LI",{});var I$e=s(vv);ope=n(I$e,"STRONG",{});var t_t=s(ope);rzo=r(t_t,"canine"),t_t.forEach(t),tzo=r(I$e," \u2014 "),DV=n(I$e,"A",{href:!0});var a_t=s(DV);azo=r(a_t,"CanineForQuestionAnswering"),a_t.forEach(t),nzo=r(I$e," (Canine model)"),I$e.forEach(t),szo=i(X),Fv=n(X,"LI",{});var N$e=s(Fv);rpe=n(N$e,"STRONG",{});var n_t=s(rpe);lzo=r(n_t,"convbert"),n_t.forEach(t),izo=r(N$e," \u2014 "),GV=n(N$e,"A",{href:!0});var s_t=s(GV);dzo=r(s_t,"ConvBertForQuestionAnswering"),s_t.forEach(t),czo=r(N$e," (ConvBERT model)"),N$e.forEach(t),fzo=i(X),Tv=n(X,"LI",{});var q$e=s(Tv);tpe=n(q$e,"STRONG",{});var l_t=s(tpe);mzo=r(l_t,"data2vec-text"),l_t.forEach(t),gzo=r(q$e," \u2014 "),OV=n(q$e,"A",{href:!0});var i_t=s(OV);hzo=r(i_t,"Data2VecTextForQuestionAnswering"),i_t.forEach(t),pzo=r(q$e," (Data2VecText model)"),q$e.forEach(t),_zo=i(X),Mv=n(X,"LI",{});var j$e=s(Mv);ape=n(j$e,"STRONG",{});var d_t=s(ape);uzo=r(d_t,"deberta"),d_t.forEach(t),bzo=r(j$e," \u2014 "),VV=n(j$e,"A",{href:!0});var c_t=s(VV);vzo=r(c_t,"DebertaForQuestionAnswering"),c_t.forEach(t),Fzo=r(j$e," (DeBERTa model)"),j$e.forEach(t),Tzo=i(X),Ev=n(X,"LI",{});var D$e=s(Ev);npe=n(D$e,"STRONG",{});var f_t=s(npe);Mzo=r(f_t,"deberta-v2"),f_t.forEach(t),Ezo=r(D$e," \u2014 "),XV=n(D$e,"A",{href:!0});var m_t=s(XV);Czo=r(m_t,"DebertaV2ForQuestionAnswering"),m_t.forEach(t),wzo=r(D$e," (DeBERTa-v2 model)"),D$e.forEach(t),Azo=i(X),Cv=n(X,"LI",{});var G$e=s(Cv);spe=n(G$e,"STRONG",{});var g_t=s(spe);yzo=r(g_t,"distilbert"),g_t.forEach(t),Lzo=r(G$e," \u2014 "),zV=n(G$e,"A",{href:!0});var h_t=s(zV);xzo=r(h_t,"DistilBertForQuestionAnswering"),h_t.forEach(t),$zo=r(G$e," (DistilBERT model)"),G$e.forEach(t),kzo=i(X),wv=n(X,"LI",{});var O$e=s(wv);lpe=n(O$e,"STRONG",{});var p_t=s(lpe);Szo=r(p_t,"electra"),p_t.forEach(t),Rzo=r(O$e," \u2014 "),WV=n(O$e,"A",{href:!0});var __t=s(WV);Pzo=r(__t,"ElectraForQuestionAnswering"),__t.forEach(t),Bzo=r(O$e," (ELECTRA model)"),O$e.forEach(t),Izo=i(X),Av=n(X,"LI",{});var V$e=s(Av);ipe=n(V$e,"STRONG",{});var u_t=s(ipe);Nzo=r(u_t,"flaubert"),u_t.forEach(t),qzo=r(V$e," \u2014 "),QV=n(V$e,"A",{href:!0});var b_t=s(QV);jzo=r(b_t,"FlaubertForQuestionAnsweringSimple"),b_t.forEach(t),Dzo=r(V$e," (FlauBERT model)"),V$e.forEach(t),Gzo=i(X),yv=n(X,"LI",{});var X$e=s(yv);dpe=n(X$e,"STRONG",{});var v_t=s(dpe);Ozo=r(v_t,"fnet"),v_t.forEach(t),Vzo=r(X$e," \u2014 "),HV=n(X$e,"A",{href:!0});var F_t=s(HV);Xzo=r(F_t,"FNetForQuestionAnswering"),F_t.forEach(t),zzo=r(X$e," (FNet model)"),X$e.forEach(t),Wzo=i(X),Lv=n(X,"LI",{});var z$e=s(Lv);cpe=n(z$e,"STRONG",{});var T_t=s(cpe);Qzo=r(T_t,"funnel"),T_t.forEach(t),Hzo=r(z$e," \u2014 "),UV=n(z$e,"A",{href:!0});var M_t=s(UV);Uzo=r(M_t,"FunnelForQuestionAnswering"),M_t.forEach(t),Jzo=r(z$e," (Funnel Transformer model)"),z$e.forEach(t),Yzo=i(X),xv=n(X,"LI",{});var W$e=s(xv);fpe=n(W$e,"STRONG",{});var E_t=s(fpe);Kzo=r(E_t,"gptj"),E_t.forEach(t),Zzo=r(W$e," \u2014 "),JV=n(W$e,"A",{href:!0});var C_t=s(JV);eWo=r(C_t,"GPTJForQuestionAnswering"),C_t.forEach(t),oWo=r(W$e," (GPT-J model)"),W$e.forEach(t),rWo=i(X),$v=n(X,"LI",{});var Q$e=s($v);mpe=n(Q$e,"STRONG",{});var w_t=s(mpe);tWo=r(w_t,"ibert"),w_t.forEach(t),aWo=r(Q$e," \u2014 "),YV=n(Q$e,"A",{href:!0});var A_t=s(YV);nWo=r(A_t,"IBertForQuestionAnswering"),A_t.forEach(t),sWo=r(Q$e," (I-BERT model)"),Q$e.forEach(t),lWo=i(X),kv=n(X,"LI",{});var H$e=s(kv);gpe=n(H$e,"STRONG",{});var y_t=s(gpe);iWo=r(y_t,"layoutlmv2"),y_t.forEach(t),dWo=r(H$e," \u2014 "),KV=n(H$e,"A",{href:!0});var L_t=s(KV);cWo=r(L_t,"LayoutLMv2ForQuestionAnswering"),L_t.forEach(t),fWo=r(H$e," (LayoutLMv2 model)"),H$e.forEach(t),mWo=i(X),Sv=n(X,"LI",{});var U$e=s(Sv);hpe=n(U$e,"STRONG",{});var x_t=s(hpe);gWo=r(x_t,"layoutlmv3"),x_t.forEach(t),hWo=r(U$e," \u2014 "),ZV=n(U$e,"A",{href:!0});var $_t=s(ZV);pWo=r($_t,"LayoutLMv3ForQuestionAnswering"),$_t.forEach(t),_Wo=r(U$e," (LayoutLMv3 model)"),U$e.forEach(t),uWo=i(X),Rv=n(X,"LI",{});var J$e=s(Rv);ppe=n(J$e,"STRONG",{});var k_t=s(ppe);bWo=r(k_t,"led"),k_t.forEach(t),vWo=r(J$e," \u2014 "),eX=n(J$e,"A",{href:!0});var S_t=s(eX);FWo=r(S_t,"LEDForQuestionAnswering"),S_t.forEach(t),TWo=r(J$e," (LED model)"),J$e.forEach(t),MWo=i(X),Pv=n(X,"LI",{});var Y$e=s(Pv);_pe=n(Y$e,"STRONG",{});var R_t=s(_pe);EWo=r(R_t,"longformer"),R_t.forEach(t),CWo=r(Y$e," \u2014 "),oX=n(Y$e,"A",{href:!0});var P_t=s(oX);wWo=r(P_t,"LongformerForQuestionAnswering"),P_t.forEach(t),AWo=r(Y$e," (Longformer model)"),Y$e.forEach(t),yWo=i(X),Bv=n(X,"LI",{});var K$e=s(Bv);upe=n(K$e,"STRONG",{});var B_t=s(upe);LWo=r(B_t,"lxmert"),B_t.forEach(t),xWo=r(K$e," \u2014 "),rX=n(K$e,"A",{href:!0});var I_t=s(rX);$Wo=r(I_t,"LxmertForQuestionAnswering"),I_t.forEach(t),kWo=r(K$e," (LXMERT model)"),K$e.forEach(t),SWo=i(X),Iv=n(X,"LI",{});var Z$e=s(Iv);bpe=n(Z$e,"STRONG",{});var N_t=s(bpe);RWo=r(N_t,"mbart"),N_t.forEach(t),PWo=r(Z$e," \u2014 "),tX=n(Z$e,"A",{href:!0});var q_t=s(tX);BWo=r(q_t,"MBartForQuestionAnswering"),q_t.forEach(t),IWo=r(Z$e," (mBART model)"),Z$e.forEach(t),NWo=i(X),Nv=n(X,"LI",{});var eke=s(Nv);vpe=n(eke,"STRONG",{});var j_t=s(vpe);qWo=r(j_t,"megatron-bert"),j_t.forEach(t),jWo=r(eke," \u2014 "),aX=n(eke,"A",{href:!0});var D_t=s(aX);DWo=r(D_t,"MegatronBertForQuestionAnswering"),D_t.forEach(t),GWo=r(eke," (MegatronBert model)"),eke.forEach(t),OWo=i(X),qv=n(X,"LI",{});var oke=s(qv);Fpe=n(oke,"STRONG",{});var G_t=s(Fpe);VWo=r(G_t,"mobilebert"),G_t.forEach(t),XWo=r(oke," \u2014 "),nX=n(oke,"A",{href:!0});var O_t=s(nX);zWo=r(O_t,"MobileBertForQuestionAnswering"),O_t.forEach(t),WWo=r(oke," (MobileBERT model)"),oke.forEach(t),QWo=i(X),jv=n(X,"LI",{});var rke=s(jv);Tpe=n(rke,"STRONG",{});var V_t=s(Tpe);HWo=r(V_t,"mpnet"),V_t.forEach(t),UWo=r(rke," \u2014 "),sX=n(rke,"A",{href:!0});var X_t=s(sX);JWo=r(X_t,"MPNetForQuestionAnswering"),X_t.forEach(t),YWo=r(rke," (MPNet model)"),rke.forEach(t),KWo=i(X),Dv=n(X,"LI",{});var tke=s(Dv);Mpe=n(tke,"STRONG",{});var z_t=s(Mpe);ZWo=r(z_t,"nystromformer"),z_t.forEach(t),eQo=r(tke," \u2014 "),lX=n(tke,"A",{href:!0});var W_t=s(lX);oQo=r(W_t,"NystromformerForQuestionAnswering"),W_t.forEach(t),rQo=r(tke," (Nystromformer model)"),tke.forEach(t),tQo=i(X),Gv=n(X,"LI",{});var ake=s(Gv);Epe=n(ake,"STRONG",{});var Q_t=s(Epe);aQo=r(Q_t,"qdqbert"),Q_t.forEach(t),nQo=r(ake," \u2014 "),iX=n(ake,"A",{href:!0});var H_t=s(iX);sQo=r(H_t,"QDQBertForQuestionAnswering"),H_t.forEach(t),lQo=r(ake," (QDQBert model)"),ake.forEach(t),iQo=i(X),Ov=n(X,"LI",{});var nke=s(Ov);Cpe=n(nke,"STRONG",{});var U_t=s(Cpe);dQo=r(U_t,"reformer"),U_t.forEach(t),cQo=r(nke," \u2014 "),dX=n(nke,"A",{href:!0});var J_t=s(dX);fQo=r(J_t,"ReformerForQuestionAnswering"),J_t.forEach(t),mQo=r(nke," (Reformer model)"),nke.forEach(t),gQo=i(X),Vv=n(X,"LI",{});var ske=s(Vv);wpe=n(ske,"STRONG",{});var Y_t=s(wpe);hQo=r(Y_t,"rembert"),Y_t.forEach(t),pQo=r(ske," \u2014 "),cX=n(ske,"A",{href:!0});var K_t=s(cX);_Qo=r(K_t,"RemBertForQuestionAnswering"),K_t.forEach(t),uQo=r(ske," (RemBERT model)"),ske.forEach(t),bQo=i(X),Xv=n(X,"LI",{});var lke=s(Xv);Ape=n(lke,"STRONG",{});var Z_t=s(Ape);vQo=r(Z_t,"roberta"),Z_t.forEach(t),FQo=r(lke," \u2014 "),fX=n(lke,"A",{href:!0});var eut=s(fX);TQo=r(eut,"RobertaForQuestionAnswering"),eut.forEach(t),MQo=r(lke," (RoBERTa model)"),lke.forEach(t),EQo=i(X),zv=n(X,"LI",{});var ike=s(zv);ype=n(ike,"STRONG",{});var out=s(ype);CQo=r(out,"roformer"),out.forEach(t),wQo=r(ike," \u2014 "),mX=n(ike,"A",{href:!0});var rut=s(mX);AQo=r(rut,"RoFormerForQuestionAnswering"),rut.forEach(t),yQo=r(ike," (RoFormer model)"),ike.forEach(t),LQo=i(X),Wv=n(X,"LI",{});var dke=s(Wv);Lpe=n(dke,"STRONG",{});var tut=s(Lpe);xQo=r(tut,"splinter"),tut.forEach(t),$Qo=r(dke," \u2014 "),gX=n(dke,"A",{href:!0});var aut=s(gX);kQo=r(aut,"SplinterForQuestionAnswering"),aut.forEach(t),SQo=r(dke," (Splinter model)"),dke.forEach(t),RQo=i(X),Qv=n(X,"LI",{});var cke=s(Qv);xpe=n(cke,"STRONG",{});var nut=s(xpe);PQo=r(nut,"squeezebert"),nut.forEach(t),BQo=r(cke," \u2014 "),hX=n(cke,"A",{href:!0});var sut=s(hX);IQo=r(sut,"SqueezeBertForQuestionAnswering"),sut.forEach(t),NQo=r(cke," (SqueezeBERT model)"),cke.forEach(t),qQo=i(X),Hv=n(X,"LI",{});var fke=s(Hv);$pe=n(fke,"STRONG",{});var lut=s($pe);jQo=r(lut,"xlm"),lut.forEach(t),DQo=r(fke," \u2014 "),pX=n(fke,"A",{href:!0});var iut=s(pX);GQo=r(iut,"XLMForQuestionAnsweringSimple"),iut.forEach(t),OQo=r(fke," (XLM model)"),fke.forEach(t),VQo=i(X),Uv=n(X,"LI",{});var mke=s(Uv);kpe=n(mke,"STRONG",{});var dut=s(kpe);XQo=r(dut,"xlm-roberta"),dut.forEach(t),zQo=r(mke," \u2014 "),_X=n(mke,"A",{href:!0});var cut=s(_X);WQo=r(cut,"XLMRobertaForQuestionAnswering"),cut.forEach(t),QQo=r(mke," (XLM-RoBERTa model)"),mke.forEach(t),HQo=i(X),Jv=n(X,"LI",{});var gke=s(Jv);Spe=n(gke,"STRONG",{});var fut=s(Spe);UQo=r(fut,"xlm-roberta-xl"),fut.forEach(t),JQo=r(gke," \u2014 "),uX=n(gke,"A",{href:!0});var mut=s(uX);YQo=r(mut,"XLMRobertaXLForQuestionAnswering"),mut.forEach(t),KQo=r(gke," (XLM-RoBERTa-XL model)"),gke.forEach(t),ZQo=i(X),Yv=n(X,"LI",{});var hke=s(Yv);Rpe=n(hke,"STRONG",{});var gut=s(Rpe);eHo=r(gut,"xlnet"),gut.forEach(t),oHo=r(hke," \u2014 "),bX=n(hke,"A",{href:!0});var hut=s(bX);rHo=r(hut,"XLNetForQuestionAnsweringSimple"),hut.forEach(t),tHo=r(hke," (XLNet model)"),hke.forEach(t),aHo=i(X),Kv=n(X,"LI",{});var pke=s(Kv);Ppe=n(pke,"STRONG",{});var put=s(Ppe);nHo=r(put,"yoso"),put.forEach(t),sHo=r(pke," \u2014 "),vX=n(pke,"A",{href:!0});var _ut=s(vX);lHo=r(_ut,"YosoForQuestionAnswering"),_ut.forEach(t),iHo=r(pke," (YOSO model)"),pke.forEach(t),X.forEach(t),dHo=i(ca),Zv=n(ca,"P",{});var _ke=s(Zv);cHo=r(_ke,"The model is set in evaluation mode by default using "),Bpe=n(_ke,"CODE",{});var uut=s(Bpe);fHo=r(uut,"model.eval()"),uut.forEach(t),mHo=r(_ke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ipe=n(_ke,"CODE",{});var but=s(Ipe);gHo=r(but,"model.train()"),but.forEach(t),_ke.forEach(t),hHo=i(ca),T(eF.$$.fragment,ca),ca.forEach(t),Ys.forEach(t),Yqe=i(f),od=n(f,"H2",{class:!0});var oGe=s(od);oF=n(oGe,"A",{id:!0,class:!0,href:!0});var vut=s(oF);Npe=n(vut,"SPAN",{});var Fut=s(Npe);T(eL.$$.fragment,Fut),Fut.forEach(t),vut.forEach(t),pHo=i(oGe),qpe=n(oGe,"SPAN",{});var Tut=s(qpe);_Ho=r(Tut,"AutoModelForTableQuestionAnswering"),Tut.forEach(t),oGe.forEach(t),Kqe=i(f),qo=n(f,"DIV",{class:!0});var Ks=s(qo);T(oL.$$.fragment,Ks),uHo=i(Ks),rd=n(Ks,"P",{});var zZ=s(rd);bHo=r(zZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),FX=n(zZ,"A",{href:!0});var Mut=s(FX);vHo=r(Mut,"from_pretrained()"),Mut.forEach(t),FHo=r(zZ," class method or the "),TX=n(zZ,"A",{href:!0});var Eut=s(TX);THo=r(Eut,"from_config()"),Eut.forEach(t),MHo=r(zZ,` class
method.`),zZ.forEach(t),EHo=i(Ks),rL=n(Ks,"P",{});var rGe=s(rL);CHo=r(rGe,"This class cannot be instantiated directly using "),jpe=n(rGe,"CODE",{});var Cut=s(jpe);wHo=r(Cut,"__init__()"),Cut.forEach(t),AHo=r(rGe," (throws an error)."),rGe.forEach(t),yHo=i(Ks),gt=n(Ks,"DIV",{class:!0});var r6=s(gt);T(tL.$$.fragment,r6),LHo=i(r6),Dpe=n(r6,"P",{});var wut=s(Dpe);xHo=r(wut,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),wut.forEach(t),$Ho=i(r6),td=n(r6,"P",{});var WZ=s(td);kHo=r(WZ,`Note:
Loading a model from its configuration file does `),Gpe=n(WZ,"STRONG",{});var Aut=s(Gpe);SHo=r(Aut,"not"),Aut.forEach(t),RHo=r(WZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),MX=n(WZ,"A",{href:!0});var yut=s(MX);PHo=r(yut,"from_pretrained()"),yut.forEach(t),BHo=r(WZ," to load the model weights."),WZ.forEach(t),IHo=i(r6),T(rF.$$.fragment,r6),r6.forEach(t),NHo=i(Ks),so=n(Ks,"DIV",{class:!0});var fa=s(so);T(aL.$$.fragment,fa),qHo=i(fa),Ope=n(fa,"P",{});var Lut=s(Ope);jHo=r(Lut,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Lut.forEach(t),DHo=i(fa),qa=n(fa,"P",{});var t6=s(qa);GHo=r(t6,"The model class to instantiate is selected based on the "),Vpe=n(t6,"CODE",{});var xut=s(Vpe);OHo=r(xut,"model_type"),xut.forEach(t),VHo=r(t6,` property of the config object (either
passed as an argument or loaded from `),Xpe=n(t6,"CODE",{});var $ut=s(Xpe);XHo=r($ut,"pretrained_model_name_or_path"),$ut.forEach(t),zHo=r(t6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zpe=n(t6,"CODE",{});var kut=s(zpe);WHo=r(kut,"pretrained_model_name_or_path"),kut.forEach(t),QHo=r(t6,":"),t6.forEach(t),HHo=i(fa),Wpe=n(fa,"UL",{});var Sut=s(Wpe);tF=n(Sut,"LI",{});var uke=s(tF);Qpe=n(uke,"STRONG",{});var Rut=s(Qpe);UHo=r(Rut,"tapas"),Rut.forEach(t),JHo=r(uke," \u2014 "),EX=n(uke,"A",{href:!0});var Put=s(EX);YHo=r(Put,"TapasForQuestionAnswering"),Put.forEach(t),KHo=r(uke," (TAPAS model)"),uke.forEach(t),Sut.forEach(t),ZHo=i(fa),aF=n(fa,"P",{});var bke=s(aF);eUo=r(bke,"The model is set in evaluation mode by default using "),Hpe=n(bke,"CODE",{});var But=s(Hpe);oUo=r(But,"model.eval()"),But.forEach(t),rUo=r(bke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Upe=n(bke,"CODE",{});var Iut=s(Upe);tUo=r(Iut,"model.train()"),Iut.forEach(t),bke.forEach(t),aUo=i(fa),T(nF.$$.fragment,fa),fa.forEach(t),Ks.forEach(t),Zqe=i(f),ad=n(f,"H2",{class:!0});var tGe=s(ad);sF=n(tGe,"A",{id:!0,class:!0,href:!0});var Nut=s(sF);Jpe=n(Nut,"SPAN",{});var qut=s(Jpe);T(nL.$$.fragment,qut),qut.forEach(t),Nut.forEach(t),nUo=i(tGe),Ype=n(tGe,"SPAN",{});var jut=s(Ype);sUo=r(jut,"AutoModelForImageClassification"),jut.forEach(t),tGe.forEach(t),eje=i(f),jo=n(f,"DIV",{class:!0});var Zs=s(jo);T(sL.$$.fragment,Zs),lUo=i(Zs),nd=n(Zs,"P",{});var QZ=s(nd);iUo=r(QZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),CX=n(QZ,"A",{href:!0});var Dut=s(CX);dUo=r(Dut,"from_pretrained()"),Dut.forEach(t),cUo=r(QZ," class method or the "),wX=n(QZ,"A",{href:!0});var Gut=s(wX);fUo=r(Gut,"from_config()"),Gut.forEach(t),mUo=r(QZ,` class
method.`),QZ.forEach(t),gUo=i(Zs),lL=n(Zs,"P",{});var aGe=s(lL);hUo=r(aGe,"This class cannot be instantiated directly using "),Kpe=n(aGe,"CODE",{});var Out=s(Kpe);pUo=r(Out,"__init__()"),Out.forEach(t),_Uo=r(aGe," (throws an error)."),aGe.forEach(t),uUo=i(Zs),ht=n(Zs,"DIV",{class:!0});var a6=s(ht);T(iL.$$.fragment,a6),bUo=i(a6),Zpe=n(a6,"P",{});var Vut=s(Zpe);vUo=r(Vut,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Vut.forEach(t),FUo=i(a6),sd=n(a6,"P",{});var HZ=s(sd);TUo=r(HZ,`Note:
Loading a model from its configuration file does `),e_e=n(HZ,"STRONG",{});var Xut=s(e_e);MUo=r(Xut,"not"),Xut.forEach(t),EUo=r(HZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),AX=n(HZ,"A",{href:!0});var zut=s(AX);CUo=r(zut,"from_pretrained()"),zut.forEach(t),wUo=r(HZ," to load the model weights."),HZ.forEach(t),AUo=i(a6),T(lF.$$.fragment,a6),a6.forEach(t),yUo=i(Zs),lo=n(Zs,"DIV",{class:!0});var ma=s(lo);T(dL.$$.fragment,ma),LUo=i(ma),o_e=n(ma,"P",{});var Wut=s(o_e);xUo=r(Wut,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Wut.forEach(t),$Uo=i(ma),ja=n(ma,"P",{});var n6=s(ja);kUo=r(n6,"The model class to instantiate is selected based on the "),r_e=n(n6,"CODE",{});var Qut=s(r_e);SUo=r(Qut,"model_type"),Qut.forEach(t),RUo=r(n6,` property of the config object (either
passed as an argument or loaded from `),t_e=n(n6,"CODE",{});var Hut=s(t_e);PUo=r(Hut,"pretrained_model_name_or_path"),Hut.forEach(t),BUo=r(n6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a_e=n(n6,"CODE",{});var Uut=s(a_e);IUo=r(Uut,"pretrained_model_name_or_path"),Uut.forEach(t),NUo=r(n6,":"),n6.forEach(t),qUo=i(ma),Fe=n(ma,"UL",{});var Me=s(Fe);iF=n(Me,"LI",{});var vke=s(iF);n_e=n(vke,"STRONG",{});var Jut=s(n_e);jUo=r(Jut,"beit"),Jut.forEach(t),DUo=r(vke," \u2014 "),yX=n(vke,"A",{href:!0});var Yut=s(yX);GUo=r(Yut,"BeitForImageClassification"),Yut.forEach(t),OUo=r(vke," (BEiT model)"),vke.forEach(t),VUo=i(Me),dF=n(Me,"LI",{});var Fke=s(dF);s_e=n(Fke,"STRONG",{});var Kut=s(s_e);XUo=r(Kut,"convnext"),Kut.forEach(t),zUo=r(Fke," \u2014 "),LX=n(Fke,"A",{href:!0});var Zut=s(LX);WUo=r(Zut,"ConvNextForImageClassification"),Zut.forEach(t),QUo=r(Fke," (ConvNext model)"),Fke.forEach(t),HUo=i(Me),cF=n(Me,"LI",{});var Tke=s(cF);l_e=n(Tke,"STRONG",{});var e1t=s(l_e);UUo=r(e1t,"cvt"),e1t.forEach(t),JUo=r(Tke," \u2014 "),xX=n(Tke,"A",{href:!0});var o1t=s(xX);YUo=r(o1t,"CvtForImageClassification"),o1t.forEach(t),KUo=r(Tke," (CvT model)"),Tke.forEach(t),ZUo=i(Me),fF=n(Me,"LI",{});var Mke=s(fF);i_e=n(Mke,"STRONG",{});var r1t=s(i_e);eJo=r(r1t,"data2vec-vision"),r1t.forEach(t),oJo=r(Mke," \u2014 "),$X=n(Mke,"A",{href:!0});var t1t=s($X);rJo=r(t1t,"Data2VecVisionForImageClassification"),t1t.forEach(t),tJo=r(Mke," (Data2VecVision model)"),Mke.forEach(t),aJo=i(Me),Bs=n(Me,"LI",{});var H$=s(Bs);d_e=n(H$,"STRONG",{});var a1t=s(d_e);nJo=r(a1t,"deit"),a1t.forEach(t),sJo=r(H$," \u2014 "),kX=n(H$,"A",{href:!0});var n1t=s(kX);lJo=r(n1t,"DeiTForImageClassification"),n1t.forEach(t),iJo=r(H$," or "),SX=n(H$,"A",{href:!0});var s1t=s(SX);dJo=r(s1t,"DeiTForImageClassificationWithTeacher"),s1t.forEach(t),cJo=r(H$," (DeiT model)"),H$.forEach(t),fJo=i(Me),mF=n(Me,"LI",{});var Eke=s(mF);c_e=n(Eke,"STRONG",{});var l1t=s(c_e);mJo=r(l1t,"imagegpt"),l1t.forEach(t),gJo=r(Eke," \u2014 "),RX=n(Eke,"A",{href:!0});var i1t=s(RX);hJo=r(i1t,"ImageGPTForImageClassification"),i1t.forEach(t),pJo=r(Eke," (ImageGPT model)"),Eke.forEach(t),_Jo=i(Me),pt=n(Me,"LI",{});var hf=s(pt);f_e=n(hf,"STRONG",{});var d1t=s(f_e);uJo=r(d1t,"perceiver"),d1t.forEach(t),bJo=r(hf," \u2014 "),PX=n(hf,"A",{href:!0});var c1t=s(PX);vJo=r(c1t,"PerceiverForImageClassificationLearned"),c1t.forEach(t),FJo=r(hf," or "),BX=n(hf,"A",{href:!0});var f1t=s(BX);TJo=r(f1t,"PerceiverForImageClassificationFourier"),f1t.forEach(t),MJo=r(hf," or "),IX=n(hf,"A",{href:!0});var m1t=s(IX);EJo=r(m1t,"PerceiverForImageClassificationConvProcessing"),m1t.forEach(t),CJo=r(hf," (Perceiver model)"),hf.forEach(t),wJo=i(Me),gF=n(Me,"LI",{});var Cke=s(gF);m_e=n(Cke,"STRONG",{});var g1t=s(m_e);AJo=r(g1t,"poolformer"),g1t.forEach(t),yJo=r(Cke," \u2014 "),NX=n(Cke,"A",{href:!0});var h1t=s(NX);LJo=r(h1t,"PoolFormerForImageClassification"),h1t.forEach(t),xJo=r(Cke," (PoolFormer model)"),Cke.forEach(t),$Jo=i(Me),hF=n(Me,"LI",{});var wke=s(hF);g_e=n(wke,"STRONG",{});var p1t=s(g_e);kJo=r(p1t,"regnet"),p1t.forEach(t),SJo=r(wke," \u2014 "),qX=n(wke,"A",{href:!0});var _1t=s(qX);RJo=r(_1t,"RegNetForImageClassification"),_1t.forEach(t),PJo=r(wke," (RegNet model)"),wke.forEach(t),BJo=i(Me),pF=n(Me,"LI",{});var Ake=s(pF);h_e=n(Ake,"STRONG",{});var u1t=s(h_e);IJo=r(u1t,"resnet"),u1t.forEach(t),NJo=r(Ake," \u2014 "),jX=n(Ake,"A",{href:!0});var b1t=s(jX);qJo=r(b1t,"ResNetForImageClassification"),b1t.forEach(t),jJo=r(Ake," (ResNet model)"),Ake.forEach(t),DJo=i(Me),_F=n(Me,"LI",{});var yke=s(_F);p_e=n(yke,"STRONG",{});var v1t=s(p_e);GJo=r(v1t,"segformer"),v1t.forEach(t),OJo=r(yke," \u2014 "),DX=n(yke,"A",{href:!0});var F1t=s(DX);VJo=r(F1t,"SegformerForImageClassification"),F1t.forEach(t),XJo=r(yke," (SegFormer model)"),yke.forEach(t),zJo=i(Me),uF=n(Me,"LI",{});var Lke=s(uF);__e=n(Lke,"STRONG",{});var T1t=s(__e);WJo=r(T1t,"swin"),T1t.forEach(t),QJo=r(Lke," \u2014 "),GX=n(Lke,"A",{href:!0});var M1t=s(GX);HJo=r(M1t,"SwinForImageClassification"),M1t.forEach(t),UJo=r(Lke," (Swin model)"),Lke.forEach(t),JJo=i(Me),bF=n(Me,"LI",{});var xke=s(bF);u_e=n(xke,"STRONG",{});var E1t=s(u_e);YJo=r(E1t,"van"),E1t.forEach(t),KJo=r(xke," \u2014 "),OX=n(xke,"A",{href:!0});var C1t=s(OX);ZJo=r(C1t,"VanForImageClassification"),C1t.forEach(t),eYo=r(xke," (VAN model)"),xke.forEach(t),oYo=i(Me),vF=n(Me,"LI",{});var $ke=s(vF);b_e=n($ke,"STRONG",{});var w1t=s(b_e);rYo=r(w1t,"vit"),w1t.forEach(t),tYo=r($ke," \u2014 "),VX=n($ke,"A",{href:!0});var A1t=s(VX);aYo=r(A1t,"ViTForImageClassification"),A1t.forEach(t),nYo=r($ke," (ViT model)"),$ke.forEach(t),Me.forEach(t),sYo=i(ma),FF=n(ma,"P",{});var kke=s(FF);lYo=r(kke,"The model is set in evaluation mode by default using "),v_e=n(kke,"CODE",{});var y1t=s(v_e);iYo=r(y1t,"model.eval()"),y1t.forEach(t),dYo=r(kke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),F_e=n(kke,"CODE",{});var L1t=s(F_e);cYo=r(L1t,"model.train()"),L1t.forEach(t),kke.forEach(t),fYo=i(ma),T(TF.$$.fragment,ma),ma.forEach(t),Zs.forEach(t),oje=i(f),ld=n(f,"H2",{class:!0});var nGe=s(ld);MF=n(nGe,"A",{id:!0,class:!0,href:!0});var x1t=s(MF);T_e=n(x1t,"SPAN",{});var $1t=s(T_e);T(cL.$$.fragment,$1t),$1t.forEach(t),x1t.forEach(t),mYo=i(nGe),M_e=n(nGe,"SPAN",{});var k1t=s(M_e);gYo=r(k1t,"AutoModelForVision2Seq"),k1t.forEach(t),nGe.forEach(t),rje=i(f),Do=n(f,"DIV",{class:!0});var el=s(Do);T(fL.$$.fragment,el),hYo=i(el),id=n(el,"P",{});var UZ=s(id);pYo=r(UZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),XX=n(UZ,"A",{href:!0});var S1t=s(XX);_Yo=r(S1t,"from_pretrained()"),S1t.forEach(t),uYo=r(UZ," class method or the "),zX=n(UZ,"A",{href:!0});var R1t=s(zX);bYo=r(R1t,"from_config()"),R1t.forEach(t),vYo=r(UZ,` class
method.`),UZ.forEach(t),FYo=i(el),mL=n(el,"P",{});var sGe=s(mL);TYo=r(sGe,"This class cannot be instantiated directly using "),E_e=n(sGe,"CODE",{});var P1t=s(E_e);MYo=r(P1t,"__init__()"),P1t.forEach(t),EYo=r(sGe," (throws an error)."),sGe.forEach(t),CYo=i(el),_t=n(el,"DIV",{class:!0});var s6=s(_t);T(gL.$$.fragment,s6),wYo=i(s6),C_e=n(s6,"P",{});var B1t=s(C_e);AYo=r(B1t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),B1t.forEach(t),yYo=i(s6),dd=n(s6,"P",{});var JZ=s(dd);LYo=r(JZ,`Note:
Loading a model from its configuration file does `),w_e=n(JZ,"STRONG",{});var I1t=s(w_e);xYo=r(I1t,"not"),I1t.forEach(t),$Yo=r(JZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),WX=n(JZ,"A",{href:!0});var N1t=s(WX);kYo=r(N1t,"from_pretrained()"),N1t.forEach(t),SYo=r(JZ," to load the model weights."),JZ.forEach(t),RYo=i(s6),T(EF.$$.fragment,s6),s6.forEach(t),PYo=i(el),io=n(el,"DIV",{class:!0});var ga=s(io);T(hL.$$.fragment,ga),BYo=i(ga),A_e=n(ga,"P",{});var q1t=s(A_e);IYo=r(q1t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),q1t.forEach(t),NYo=i(ga),Da=n(ga,"P",{});var l6=s(Da);qYo=r(l6,"The model class to instantiate is selected based on the "),y_e=n(l6,"CODE",{});var j1t=s(y_e);jYo=r(j1t,"model_type"),j1t.forEach(t),DYo=r(l6,` property of the config object (either
passed as an argument or loaded from `),L_e=n(l6,"CODE",{});var D1t=s(L_e);GYo=r(D1t,"pretrained_model_name_or_path"),D1t.forEach(t),OYo=r(l6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x_e=n(l6,"CODE",{});var G1t=s(x_e);VYo=r(G1t,"pretrained_model_name_or_path"),G1t.forEach(t),XYo=r(l6,":"),l6.forEach(t),zYo=i(ga),$_e=n(ga,"UL",{});var O1t=s($_e);CF=n(O1t,"LI",{});var Ske=s(CF);k_e=n(Ske,"STRONG",{});var V1t=s(k_e);WYo=r(V1t,"vision-encoder-decoder"),V1t.forEach(t),QYo=r(Ske," \u2014 "),QX=n(Ske,"A",{href:!0});var X1t=s(QX);HYo=r(X1t,"VisionEncoderDecoderModel"),X1t.forEach(t),UYo=r(Ske," (Vision Encoder decoder model)"),Ske.forEach(t),O1t.forEach(t),JYo=i(ga),wF=n(ga,"P",{});var Rke=s(wF);YYo=r(Rke,"The model is set in evaluation mode by default using "),S_e=n(Rke,"CODE",{});var z1t=s(S_e);KYo=r(z1t,"model.eval()"),z1t.forEach(t),ZYo=r(Rke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),R_e=n(Rke,"CODE",{});var W1t=s(R_e);eKo=r(W1t,"model.train()"),W1t.forEach(t),Rke.forEach(t),oKo=i(ga),T(AF.$$.fragment,ga),ga.forEach(t),el.forEach(t),tje=i(f),cd=n(f,"H2",{class:!0});var lGe=s(cd);yF=n(lGe,"A",{id:!0,class:!0,href:!0});var Q1t=s(yF);P_e=n(Q1t,"SPAN",{});var H1t=s(P_e);T(pL.$$.fragment,H1t),H1t.forEach(t),Q1t.forEach(t),rKo=i(lGe),B_e=n(lGe,"SPAN",{});var U1t=s(B_e);tKo=r(U1t,"AutoModelForAudioClassification"),U1t.forEach(t),lGe.forEach(t),aje=i(f),Go=n(f,"DIV",{class:!0});var ol=s(Go);T(_L.$$.fragment,ol),aKo=i(ol),fd=n(ol,"P",{});var YZ=s(fd);nKo=r(YZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),HX=n(YZ,"A",{href:!0});var J1t=s(HX);sKo=r(J1t,"from_pretrained()"),J1t.forEach(t),lKo=r(YZ," class method or the "),UX=n(YZ,"A",{href:!0});var Y1t=s(UX);iKo=r(Y1t,"from_config()"),Y1t.forEach(t),dKo=r(YZ,` class
method.`),YZ.forEach(t),cKo=i(ol),uL=n(ol,"P",{});var iGe=s(uL);fKo=r(iGe,"This class cannot be instantiated directly using "),I_e=n(iGe,"CODE",{});var K1t=s(I_e);mKo=r(K1t,"__init__()"),K1t.forEach(t),gKo=r(iGe," (throws an error)."),iGe.forEach(t),hKo=i(ol),ut=n(ol,"DIV",{class:!0});var i6=s(ut);T(bL.$$.fragment,i6),pKo=i(i6),N_e=n(i6,"P",{});var Z1t=s(N_e);_Ko=r(Z1t,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Z1t.forEach(t),uKo=i(i6),md=n(i6,"P",{});var KZ=s(md);bKo=r(KZ,`Note:
Loading a model from its configuration file does `),q_e=n(KZ,"STRONG",{});var ebt=s(q_e);vKo=r(ebt,"not"),ebt.forEach(t),FKo=r(KZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),JX=n(KZ,"A",{href:!0});var obt=s(JX);TKo=r(obt,"from_pretrained()"),obt.forEach(t),MKo=r(KZ," to load the model weights."),KZ.forEach(t),EKo=i(i6),T(LF.$$.fragment,i6),i6.forEach(t),CKo=i(ol),co=n(ol,"DIV",{class:!0});var ha=s(co);T(vL.$$.fragment,ha),wKo=i(ha),j_e=n(ha,"P",{});var rbt=s(j_e);AKo=r(rbt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),rbt.forEach(t),yKo=i(ha),Ga=n(ha,"P",{});var d6=s(Ga);LKo=r(d6,"The model class to instantiate is selected based on the "),D_e=n(d6,"CODE",{});var tbt=s(D_e);xKo=r(tbt,"model_type"),tbt.forEach(t),$Ko=r(d6,` property of the config object (either
passed as an argument or loaded from `),G_e=n(d6,"CODE",{});var abt=s(G_e);kKo=r(abt,"pretrained_model_name_or_path"),abt.forEach(t),SKo=r(d6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O_e=n(d6,"CODE",{});var nbt=s(O_e);RKo=r(nbt,"pretrained_model_name_or_path"),nbt.forEach(t),PKo=r(d6,":"),d6.forEach(t),BKo=i(ha),Se=n(ha,"UL",{});var Ve=s(Se);xF=n(Ve,"LI",{});var Pke=s(xF);V_e=n(Pke,"STRONG",{});var sbt=s(V_e);IKo=r(sbt,"data2vec-audio"),sbt.forEach(t),NKo=r(Pke," \u2014 "),YX=n(Pke,"A",{href:!0});var lbt=s(YX);qKo=r(lbt,"Data2VecAudioForSequenceClassification"),lbt.forEach(t),jKo=r(Pke," (Data2VecAudio model)"),Pke.forEach(t),DKo=i(Ve),$F=n(Ve,"LI",{});var Bke=s($F);X_e=n(Bke,"STRONG",{});var ibt=s(X_e);GKo=r(ibt,"hubert"),ibt.forEach(t),OKo=r(Bke," \u2014 "),KX=n(Bke,"A",{href:!0});var dbt=s(KX);VKo=r(dbt,"HubertForSequenceClassification"),dbt.forEach(t),XKo=r(Bke," (Hubert model)"),Bke.forEach(t),zKo=i(Ve),kF=n(Ve,"LI",{});var Ike=s(kF);z_e=n(Ike,"STRONG",{});var cbt=s(z_e);WKo=r(cbt,"sew"),cbt.forEach(t),QKo=r(Ike," \u2014 "),ZX=n(Ike,"A",{href:!0});var fbt=s(ZX);HKo=r(fbt,"SEWForSequenceClassification"),fbt.forEach(t),UKo=r(Ike," (SEW model)"),Ike.forEach(t),JKo=i(Ve),SF=n(Ve,"LI",{});var Nke=s(SF);W_e=n(Nke,"STRONG",{});var mbt=s(W_e);YKo=r(mbt,"sew-d"),mbt.forEach(t),KKo=r(Nke," \u2014 "),ez=n(Nke,"A",{href:!0});var gbt=s(ez);ZKo=r(gbt,"SEWDForSequenceClassification"),gbt.forEach(t),eZo=r(Nke," (SEW-D model)"),Nke.forEach(t),oZo=i(Ve),RF=n(Ve,"LI",{});var qke=s(RF);Q_e=n(qke,"STRONG",{});var hbt=s(Q_e);rZo=r(hbt,"unispeech"),hbt.forEach(t),tZo=r(qke," \u2014 "),oz=n(qke,"A",{href:!0});var pbt=s(oz);aZo=r(pbt,"UniSpeechForSequenceClassification"),pbt.forEach(t),nZo=r(qke," (UniSpeech model)"),qke.forEach(t),sZo=i(Ve),PF=n(Ve,"LI",{});var jke=s(PF);H_e=n(jke,"STRONG",{});var _bt=s(H_e);lZo=r(_bt,"unispeech-sat"),_bt.forEach(t),iZo=r(jke," \u2014 "),rz=n(jke,"A",{href:!0});var ubt=s(rz);dZo=r(ubt,"UniSpeechSatForSequenceClassification"),ubt.forEach(t),cZo=r(jke," (UniSpeechSat model)"),jke.forEach(t),fZo=i(Ve),BF=n(Ve,"LI",{});var Dke=s(BF);U_e=n(Dke,"STRONG",{});var bbt=s(U_e);mZo=r(bbt,"wav2vec2"),bbt.forEach(t),gZo=r(Dke," \u2014 "),tz=n(Dke,"A",{href:!0});var vbt=s(tz);hZo=r(vbt,"Wav2Vec2ForSequenceClassification"),vbt.forEach(t),pZo=r(Dke," (Wav2Vec2 model)"),Dke.forEach(t),_Zo=i(Ve),IF=n(Ve,"LI",{});var Gke=s(IF);J_e=n(Gke,"STRONG",{});var Fbt=s(J_e);uZo=r(Fbt,"wav2vec2-conformer"),Fbt.forEach(t),bZo=r(Gke," \u2014 "),az=n(Gke,"A",{href:!0});var Tbt=s(az);vZo=r(Tbt,"Wav2Vec2ConformerForSequenceClassification"),Tbt.forEach(t),FZo=r(Gke," (Wav2Vec2-Conformer model)"),Gke.forEach(t),TZo=i(Ve),NF=n(Ve,"LI",{});var Oke=s(NF);Y_e=n(Oke,"STRONG",{});var Mbt=s(Y_e);MZo=r(Mbt,"wavlm"),Mbt.forEach(t),EZo=r(Oke," \u2014 "),nz=n(Oke,"A",{href:!0});var Ebt=s(nz);CZo=r(Ebt,"WavLMForSequenceClassification"),Ebt.forEach(t),wZo=r(Oke," (WavLM model)"),Oke.forEach(t),Ve.forEach(t),AZo=i(ha),qF=n(ha,"P",{});var Vke=s(qF);yZo=r(Vke,"The model is set in evaluation mode by default using "),K_e=n(Vke,"CODE",{});var Cbt=s(K_e);LZo=r(Cbt,"model.eval()"),Cbt.forEach(t),xZo=r(Vke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Z_e=n(Vke,"CODE",{});var wbt=s(Z_e);$Zo=r(wbt,"model.train()"),wbt.forEach(t),Vke.forEach(t),kZo=i(ha),T(jF.$$.fragment,ha),ha.forEach(t),ol.forEach(t),nje=i(f),gd=n(f,"H2",{class:!0});var dGe=s(gd);DF=n(dGe,"A",{id:!0,class:!0,href:!0});var Abt=s(DF);eue=n(Abt,"SPAN",{});var ybt=s(eue);T(FL.$$.fragment,ybt),ybt.forEach(t),Abt.forEach(t),SZo=i(dGe),oue=n(dGe,"SPAN",{});var Lbt=s(oue);RZo=r(Lbt,"AutoModelForAudioFrameClassification"),Lbt.forEach(t),dGe.forEach(t),sje=i(f),Oo=n(f,"DIV",{class:!0});var rl=s(Oo);T(TL.$$.fragment,rl),PZo=i(rl),hd=n(rl,"P",{});var ZZ=s(hd);BZo=r(ZZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),sz=n(ZZ,"A",{href:!0});var xbt=s(sz);IZo=r(xbt,"from_pretrained()"),xbt.forEach(t),NZo=r(ZZ," class method or the "),lz=n(ZZ,"A",{href:!0});var $bt=s(lz);qZo=r($bt,"from_config()"),$bt.forEach(t),jZo=r(ZZ,` class
method.`),ZZ.forEach(t),DZo=i(rl),ML=n(rl,"P",{});var cGe=s(ML);GZo=r(cGe,"This class cannot be instantiated directly using "),rue=n(cGe,"CODE",{});var kbt=s(rue);OZo=r(kbt,"__init__()"),kbt.forEach(t),VZo=r(cGe," (throws an error)."),cGe.forEach(t),XZo=i(rl),bt=n(rl,"DIV",{class:!0});var c6=s(bt);T(EL.$$.fragment,c6),zZo=i(c6),tue=n(c6,"P",{});var Sbt=s(tue);WZo=r(Sbt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Sbt.forEach(t),QZo=i(c6),pd=n(c6,"P",{});var eee=s(pd);HZo=r(eee,`Note:
Loading a model from its configuration file does `),aue=n(eee,"STRONG",{});var Rbt=s(aue);UZo=r(Rbt,"not"),Rbt.forEach(t),JZo=r(eee,` load the model weights. It only affects the
model\u2019s configuration. Use `),iz=n(eee,"A",{href:!0});var Pbt=s(iz);YZo=r(Pbt,"from_pretrained()"),Pbt.forEach(t),KZo=r(eee," to load the model weights."),eee.forEach(t),ZZo=i(c6),T(GF.$$.fragment,c6),c6.forEach(t),eer=i(rl),fo=n(rl,"DIV",{class:!0});var pa=s(fo);T(CL.$$.fragment,pa),oer=i(pa),nue=n(pa,"P",{});var Bbt=s(nue);rer=r(Bbt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Bbt.forEach(t),ter=i(pa),Oa=n(pa,"P",{});var f6=s(Oa);aer=r(f6,"The model class to instantiate is selected based on the "),sue=n(f6,"CODE",{});var Ibt=s(sue);ner=r(Ibt,"model_type"),Ibt.forEach(t),ser=r(f6,` property of the config object (either
passed as an argument or loaded from `),lue=n(f6,"CODE",{});var Nbt=s(lue);ler=r(Nbt,"pretrained_model_name_or_path"),Nbt.forEach(t),ier=r(f6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iue=n(f6,"CODE",{});var qbt=s(iue);der=r(qbt,"pretrained_model_name_or_path"),qbt.forEach(t),cer=r(f6,":"),f6.forEach(t),fer=i(pa),Kr=n(pa,"UL",{});var tl=s(Kr);OF=n(tl,"LI",{});var Xke=s(OF);due=n(Xke,"STRONG",{});var jbt=s(due);mer=r(jbt,"data2vec-audio"),jbt.forEach(t),ger=r(Xke," \u2014 "),dz=n(Xke,"A",{href:!0});var Dbt=s(dz);her=r(Dbt,"Data2VecAudioForAudioFrameClassification"),Dbt.forEach(t),per=r(Xke," (Data2VecAudio model)"),Xke.forEach(t),_er=i(tl),VF=n(tl,"LI",{});var zke=s(VF);cue=n(zke,"STRONG",{});var Gbt=s(cue);uer=r(Gbt,"unispeech-sat"),Gbt.forEach(t),ber=r(zke," \u2014 "),cz=n(zke,"A",{href:!0});var Obt=s(cz);ver=r(Obt,"UniSpeechSatForAudioFrameClassification"),Obt.forEach(t),Fer=r(zke," (UniSpeechSat model)"),zke.forEach(t),Ter=i(tl),XF=n(tl,"LI",{});var Wke=s(XF);fue=n(Wke,"STRONG",{});var Vbt=s(fue);Mer=r(Vbt,"wav2vec2"),Vbt.forEach(t),Eer=r(Wke," \u2014 "),fz=n(Wke,"A",{href:!0});var Xbt=s(fz);Cer=r(Xbt,"Wav2Vec2ForAudioFrameClassification"),Xbt.forEach(t),wer=r(Wke," (Wav2Vec2 model)"),Wke.forEach(t),Aer=i(tl),zF=n(tl,"LI",{});var Qke=s(zF);mue=n(Qke,"STRONG",{});var zbt=s(mue);yer=r(zbt,"wav2vec2-conformer"),zbt.forEach(t),Ler=r(Qke," \u2014 "),mz=n(Qke,"A",{href:!0});var Wbt=s(mz);xer=r(Wbt,"Wav2Vec2ConformerForAudioFrameClassification"),Wbt.forEach(t),$er=r(Qke," (Wav2Vec2-Conformer model)"),Qke.forEach(t),ker=i(tl),WF=n(tl,"LI",{});var Hke=s(WF);gue=n(Hke,"STRONG",{});var Qbt=s(gue);Ser=r(Qbt,"wavlm"),Qbt.forEach(t),Rer=r(Hke," \u2014 "),gz=n(Hke,"A",{href:!0});var Hbt=s(gz);Per=r(Hbt,"WavLMForAudioFrameClassification"),Hbt.forEach(t),Ber=r(Hke," (WavLM model)"),Hke.forEach(t),tl.forEach(t),Ier=i(pa),QF=n(pa,"P",{});var Uke=s(QF);Ner=r(Uke,"The model is set in evaluation mode by default using "),hue=n(Uke,"CODE",{});var Ubt=s(hue);qer=r(Ubt,"model.eval()"),Ubt.forEach(t),jer=r(Uke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pue=n(Uke,"CODE",{});var Jbt=s(pue);Der=r(Jbt,"model.train()"),Jbt.forEach(t),Uke.forEach(t),Ger=i(pa),T(HF.$$.fragment,pa),pa.forEach(t),rl.forEach(t),lje=i(f),_d=n(f,"H2",{class:!0});var fGe=s(_d);UF=n(fGe,"A",{id:!0,class:!0,href:!0});var Ybt=s(UF);_ue=n(Ybt,"SPAN",{});var Kbt=s(_ue);T(wL.$$.fragment,Kbt),Kbt.forEach(t),Ybt.forEach(t),Oer=i(fGe),uue=n(fGe,"SPAN",{});var Zbt=s(uue);Ver=r(Zbt,"AutoModelForCTC"),Zbt.forEach(t),fGe.forEach(t),ije=i(f),Vo=n(f,"DIV",{class:!0});var al=s(Vo);T(AL.$$.fragment,al),Xer=i(al),ud=n(al,"P",{});var oee=s(ud);zer=r(oee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),hz=n(oee,"A",{href:!0});var e2t=s(hz);Wer=r(e2t,"from_pretrained()"),e2t.forEach(t),Qer=r(oee," class method or the "),pz=n(oee,"A",{href:!0});var o2t=s(pz);Her=r(o2t,"from_config()"),o2t.forEach(t),Uer=r(oee,` class
method.`),oee.forEach(t),Jer=i(al),yL=n(al,"P",{});var mGe=s(yL);Yer=r(mGe,"This class cannot be instantiated directly using "),bue=n(mGe,"CODE",{});var r2t=s(bue);Ker=r(r2t,"__init__()"),r2t.forEach(t),Zer=r(mGe," (throws an error)."),mGe.forEach(t),eor=i(al),vt=n(al,"DIV",{class:!0});var m6=s(vt);T(LL.$$.fragment,m6),oor=i(m6),vue=n(m6,"P",{});var t2t=s(vue);ror=r(t2t,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),t2t.forEach(t),tor=i(m6),bd=n(m6,"P",{});var ree=s(bd);aor=r(ree,`Note:
Loading a model from its configuration file does `),Fue=n(ree,"STRONG",{});var a2t=s(Fue);nor=r(a2t,"not"),a2t.forEach(t),sor=r(ree,` load the model weights. It only affects the
model\u2019s configuration. Use `),_z=n(ree,"A",{href:!0});var n2t=s(_z);lor=r(n2t,"from_pretrained()"),n2t.forEach(t),ior=r(ree," to load the model weights."),ree.forEach(t),dor=i(m6),T(JF.$$.fragment,m6),m6.forEach(t),cor=i(al),mo=n(al,"DIV",{class:!0});var _a=s(mo);T(xL.$$.fragment,_a),mor=i(_a),Tue=n(_a,"P",{});var s2t=s(Tue);gor=r(s2t,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),s2t.forEach(t),hor=i(_a),Va=n(_a,"P",{});var g6=s(Va);por=r(g6,"The model class to instantiate is selected based on the "),Mue=n(g6,"CODE",{});var l2t=s(Mue);_or=r(l2t,"model_type"),l2t.forEach(t),uor=r(g6,` property of the config object (either
passed as an argument or loaded from `),Eue=n(g6,"CODE",{});var i2t=s(Eue);bor=r(i2t,"pretrained_model_name_or_path"),i2t.forEach(t),vor=r(g6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cue=n(g6,"CODE",{});var d2t=s(Cue);For=r(d2t,"pretrained_model_name_or_path"),d2t.forEach(t),Tor=r(g6,":"),g6.forEach(t),Mor=i(_a),Re=n(_a,"UL",{});var Xe=s(Re);YF=n(Xe,"LI",{});var Jke=s(YF);wue=n(Jke,"STRONG",{});var c2t=s(wue);Eor=r(c2t,"data2vec-audio"),c2t.forEach(t),Cor=r(Jke," \u2014 "),uz=n(Jke,"A",{href:!0});var f2t=s(uz);wor=r(f2t,"Data2VecAudioForCTC"),f2t.forEach(t),Aor=r(Jke," (Data2VecAudio model)"),Jke.forEach(t),yor=i(Xe),KF=n(Xe,"LI",{});var Yke=s(KF);Aue=n(Yke,"STRONG",{});var m2t=s(Aue);Lor=r(m2t,"hubert"),m2t.forEach(t),xor=r(Yke," \u2014 "),bz=n(Yke,"A",{href:!0});var g2t=s(bz);$or=r(g2t,"HubertForCTC"),g2t.forEach(t),kor=r(Yke," (Hubert model)"),Yke.forEach(t),Sor=i(Xe),ZF=n(Xe,"LI",{});var Kke=s(ZF);yue=n(Kke,"STRONG",{});var h2t=s(yue);Ror=r(h2t,"sew"),h2t.forEach(t),Por=r(Kke," \u2014 "),vz=n(Kke,"A",{href:!0});var p2t=s(vz);Bor=r(p2t,"SEWForCTC"),p2t.forEach(t),Ior=r(Kke," (SEW model)"),Kke.forEach(t),Nor=i(Xe),e0=n(Xe,"LI",{});var Zke=s(e0);Lue=n(Zke,"STRONG",{});var _2t=s(Lue);qor=r(_2t,"sew-d"),_2t.forEach(t),jor=r(Zke," \u2014 "),Fz=n(Zke,"A",{href:!0});var u2t=s(Fz);Dor=r(u2t,"SEWDForCTC"),u2t.forEach(t),Gor=r(Zke," (SEW-D model)"),Zke.forEach(t),Oor=i(Xe),o0=n(Xe,"LI",{});var eSe=s(o0);xue=n(eSe,"STRONG",{});var b2t=s(xue);Vor=r(b2t,"unispeech"),b2t.forEach(t),Xor=r(eSe," \u2014 "),Tz=n(eSe,"A",{href:!0});var v2t=s(Tz);zor=r(v2t,"UniSpeechForCTC"),v2t.forEach(t),Wor=r(eSe," (UniSpeech model)"),eSe.forEach(t),Qor=i(Xe),r0=n(Xe,"LI",{});var oSe=s(r0);$ue=n(oSe,"STRONG",{});var F2t=s($ue);Hor=r(F2t,"unispeech-sat"),F2t.forEach(t),Uor=r(oSe," \u2014 "),Mz=n(oSe,"A",{href:!0});var T2t=s(Mz);Jor=r(T2t,"UniSpeechSatForCTC"),T2t.forEach(t),Yor=r(oSe," (UniSpeechSat model)"),oSe.forEach(t),Kor=i(Xe),t0=n(Xe,"LI",{});var rSe=s(t0);kue=n(rSe,"STRONG",{});var M2t=s(kue);Zor=r(M2t,"wav2vec2"),M2t.forEach(t),err=r(rSe," \u2014 "),Ez=n(rSe,"A",{href:!0});var E2t=s(Ez);orr=r(E2t,"Wav2Vec2ForCTC"),E2t.forEach(t),rrr=r(rSe," (Wav2Vec2 model)"),rSe.forEach(t),trr=i(Xe),a0=n(Xe,"LI",{});var tSe=s(a0);Sue=n(tSe,"STRONG",{});var C2t=s(Sue);arr=r(C2t,"wav2vec2-conformer"),C2t.forEach(t),nrr=r(tSe," \u2014 "),Cz=n(tSe,"A",{href:!0});var w2t=s(Cz);srr=r(w2t,"Wav2Vec2ConformerForCTC"),w2t.forEach(t),lrr=r(tSe," (Wav2Vec2-Conformer model)"),tSe.forEach(t),irr=i(Xe),n0=n(Xe,"LI",{});var aSe=s(n0);Rue=n(aSe,"STRONG",{});var A2t=s(Rue);drr=r(A2t,"wavlm"),A2t.forEach(t),crr=r(aSe," \u2014 "),wz=n(aSe,"A",{href:!0});var y2t=s(wz);frr=r(y2t,"WavLMForCTC"),y2t.forEach(t),mrr=r(aSe," (WavLM model)"),aSe.forEach(t),Xe.forEach(t),grr=i(_a),s0=n(_a,"P",{});var nSe=s(s0);hrr=r(nSe,"The model is set in evaluation mode by default using "),Pue=n(nSe,"CODE",{});var L2t=s(Pue);prr=r(L2t,"model.eval()"),L2t.forEach(t),_rr=r(nSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bue=n(nSe,"CODE",{});var x2t=s(Bue);urr=r(x2t,"model.train()"),x2t.forEach(t),nSe.forEach(t),brr=i(_a),T(l0.$$.fragment,_a),_a.forEach(t),al.forEach(t),dje=i(f),vd=n(f,"H2",{class:!0});var gGe=s(vd);i0=n(gGe,"A",{id:!0,class:!0,href:!0});var $2t=s(i0);Iue=n($2t,"SPAN",{});var k2t=s(Iue);T($L.$$.fragment,k2t),k2t.forEach(t),$2t.forEach(t),vrr=i(gGe),Nue=n(gGe,"SPAN",{});var S2t=s(Nue);Frr=r(S2t,"AutoModelForSpeechSeq2Seq"),S2t.forEach(t),gGe.forEach(t),cje=i(f),Xo=n(f,"DIV",{class:!0});var nl=s(Xo);T(kL.$$.fragment,nl),Trr=i(nl),Fd=n(nl,"P",{});var tee=s(Fd);Mrr=r(tee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Az=n(tee,"A",{href:!0});var R2t=s(Az);Err=r(R2t,"from_pretrained()"),R2t.forEach(t),Crr=r(tee," class method or the "),yz=n(tee,"A",{href:!0});var P2t=s(yz);wrr=r(P2t,"from_config()"),P2t.forEach(t),Arr=r(tee,` class
method.`),tee.forEach(t),yrr=i(nl),SL=n(nl,"P",{});var hGe=s(SL);Lrr=r(hGe,"This class cannot be instantiated directly using "),que=n(hGe,"CODE",{});var B2t=s(que);xrr=r(B2t,"__init__()"),B2t.forEach(t),$rr=r(hGe," (throws an error)."),hGe.forEach(t),krr=i(nl),Ft=n(nl,"DIV",{class:!0});var h6=s(Ft);T(RL.$$.fragment,h6),Srr=i(h6),jue=n(h6,"P",{});var I2t=s(jue);Rrr=r(I2t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),I2t.forEach(t),Prr=i(h6),Td=n(h6,"P",{});var aee=s(Td);Brr=r(aee,`Note:
Loading a model from its configuration file does `),Due=n(aee,"STRONG",{});var N2t=s(Due);Irr=r(N2t,"not"),N2t.forEach(t),Nrr=r(aee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Lz=n(aee,"A",{href:!0});var q2t=s(Lz);qrr=r(q2t,"from_pretrained()"),q2t.forEach(t),jrr=r(aee," to load the model weights."),aee.forEach(t),Drr=i(h6),T(d0.$$.fragment,h6),h6.forEach(t),Grr=i(nl),go=n(nl,"DIV",{class:!0});var ua=s(go);T(PL.$$.fragment,ua),Orr=i(ua),Gue=n(ua,"P",{});var j2t=s(Gue);Vrr=r(j2t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),j2t.forEach(t),Xrr=i(ua),Xa=n(ua,"P",{});var p6=s(Xa);zrr=r(p6,"The model class to instantiate is selected based on the "),Oue=n(p6,"CODE",{});var D2t=s(Oue);Wrr=r(D2t,"model_type"),D2t.forEach(t),Qrr=r(p6,` property of the config object (either
passed as an argument or loaded from `),Vue=n(p6,"CODE",{});var G2t=s(Vue);Hrr=r(G2t,"pretrained_model_name_or_path"),G2t.forEach(t),Urr=r(p6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xue=n(p6,"CODE",{});var O2t=s(Xue);Jrr=r(O2t,"pretrained_model_name_or_path"),O2t.forEach(t),Yrr=r(p6,":"),p6.forEach(t),Krr=i(ua),BL=n(ua,"UL",{});var pGe=s(BL);c0=n(pGe,"LI",{});var sSe=s(c0);zue=n(sSe,"STRONG",{});var V2t=s(zue);Zrr=r(V2t,"speech-encoder-decoder"),V2t.forEach(t),etr=r(sSe," \u2014 "),xz=n(sSe,"A",{href:!0});var X2t=s(xz);otr=r(X2t,"SpeechEncoderDecoderModel"),X2t.forEach(t),rtr=r(sSe," (Speech Encoder decoder model)"),sSe.forEach(t),ttr=i(pGe),f0=n(pGe,"LI",{});var lSe=s(f0);Wue=n(lSe,"STRONG",{});var z2t=s(Wue);atr=r(z2t,"speech_to_text"),z2t.forEach(t),ntr=r(lSe," \u2014 "),$z=n(lSe,"A",{href:!0});var W2t=s($z);str=r(W2t,"Speech2TextForConditionalGeneration"),W2t.forEach(t),ltr=r(lSe," (Speech2Text model)"),lSe.forEach(t),pGe.forEach(t),itr=i(ua),m0=n(ua,"P",{});var iSe=s(m0);dtr=r(iSe,"The model is set in evaluation mode by default using "),Que=n(iSe,"CODE",{});var Q2t=s(Que);ctr=r(Q2t,"model.eval()"),Q2t.forEach(t),ftr=r(iSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hue=n(iSe,"CODE",{});var H2t=s(Hue);mtr=r(H2t,"model.train()"),H2t.forEach(t),iSe.forEach(t),gtr=i(ua),T(g0.$$.fragment,ua),ua.forEach(t),nl.forEach(t),fje=i(f),Md=n(f,"H2",{class:!0});var _Ge=s(Md);h0=n(_Ge,"A",{id:!0,class:!0,href:!0});var U2t=s(h0);Uue=n(U2t,"SPAN",{});var J2t=s(Uue);T(IL.$$.fragment,J2t),J2t.forEach(t),U2t.forEach(t),htr=i(_Ge),Jue=n(_Ge,"SPAN",{});var Y2t=s(Jue);ptr=r(Y2t,"AutoModelForAudioXVector"),Y2t.forEach(t),_Ge.forEach(t),mje=i(f),zo=n(f,"DIV",{class:!0});var sl=s(zo);T(NL.$$.fragment,sl),_tr=i(sl),Ed=n(sl,"P",{});var nee=s(Ed);utr=r(nee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),kz=n(nee,"A",{href:!0});var K2t=s(kz);btr=r(K2t,"from_pretrained()"),K2t.forEach(t),vtr=r(nee," class method or the "),Sz=n(nee,"A",{href:!0});var Z2t=s(Sz);Ftr=r(Z2t,"from_config()"),Z2t.forEach(t),Ttr=r(nee,` class
method.`),nee.forEach(t),Mtr=i(sl),qL=n(sl,"P",{});var uGe=s(qL);Etr=r(uGe,"This class cannot be instantiated directly using "),Yue=n(uGe,"CODE",{});var e5t=s(Yue);Ctr=r(e5t,"__init__()"),e5t.forEach(t),wtr=r(uGe," (throws an error)."),uGe.forEach(t),Atr=i(sl),Tt=n(sl,"DIV",{class:!0});var _6=s(Tt);T(jL.$$.fragment,_6),ytr=i(_6),Kue=n(_6,"P",{});var o5t=s(Kue);Ltr=r(o5t,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),o5t.forEach(t),xtr=i(_6),Cd=n(_6,"P",{});var see=s(Cd);$tr=r(see,`Note:
Loading a model from its configuration file does `),Zue=n(see,"STRONG",{});var r5t=s(Zue);ktr=r(r5t,"not"),r5t.forEach(t),Str=r(see,` load the model weights. It only affects the
model\u2019s configuration. Use `),Rz=n(see,"A",{href:!0});var t5t=s(Rz);Rtr=r(t5t,"from_pretrained()"),t5t.forEach(t),Ptr=r(see," to load the model weights."),see.forEach(t),Btr=i(_6),T(p0.$$.fragment,_6),_6.forEach(t),Itr=i(sl),ho=n(sl,"DIV",{class:!0});var ba=s(ho);T(DL.$$.fragment,ba),Ntr=i(ba),e1e=n(ba,"P",{});var a5t=s(e1e);qtr=r(a5t,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),a5t.forEach(t),jtr=i(ba),za=n(ba,"P",{});var u6=s(za);Dtr=r(u6,"The model class to instantiate is selected based on the "),o1e=n(u6,"CODE",{});var n5t=s(o1e);Gtr=r(n5t,"model_type"),n5t.forEach(t),Otr=r(u6,` property of the config object (either
passed as an argument or loaded from `),r1e=n(u6,"CODE",{});var s5t=s(r1e);Vtr=r(s5t,"pretrained_model_name_or_path"),s5t.forEach(t),Xtr=r(u6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t1e=n(u6,"CODE",{});var l5t=s(t1e);ztr=r(l5t,"pretrained_model_name_or_path"),l5t.forEach(t),Wtr=r(u6,":"),u6.forEach(t),Qtr=i(ba),Zr=n(ba,"UL",{});var ll=s(Zr);_0=n(ll,"LI",{});var dSe=s(_0);a1e=n(dSe,"STRONG",{});var i5t=s(a1e);Htr=r(i5t,"data2vec-audio"),i5t.forEach(t),Utr=r(dSe," \u2014 "),Pz=n(dSe,"A",{href:!0});var d5t=s(Pz);Jtr=r(d5t,"Data2VecAudioForXVector"),d5t.forEach(t),Ytr=r(dSe," (Data2VecAudio model)"),dSe.forEach(t),Ktr=i(ll),u0=n(ll,"LI",{});var cSe=s(u0);n1e=n(cSe,"STRONG",{});var c5t=s(n1e);Ztr=r(c5t,"unispeech-sat"),c5t.forEach(t),ear=r(cSe," \u2014 "),Bz=n(cSe,"A",{href:!0});var f5t=s(Bz);oar=r(f5t,"UniSpeechSatForXVector"),f5t.forEach(t),rar=r(cSe," (UniSpeechSat model)"),cSe.forEach(t),tar=i(ll),b0=n(ll,"LI",{});var fSe=s(b0);s1e=n(fSe,"STRONG",{});var m5t=s(s1e);aar=r(m5t,"wav2vec2"),m5t.forEach(t),nar=r(fSe," \u2014 "),Iz=n(fSe,"A",{href:!0});var g5t=s(Iz);sar=r(g5t,"Wav2Vec2ForXVector"),g5t.forEach(t),lar=r(fSe," (Wav2Vec2 model)"),fSe.forEach(t),iar=i(ll),v0=n(ll,"LI",{});var mSe=s(v0);l1e=n(mSe,"STRONG",{});var h5t=s(l1e);dar=r(h5t,"wav2vec2-conformer"),h5t.forEach(t),car=r(mSe," \u2014 "),Nz=n(mSe,"A",{href:!0});var p5t=s(Nz);far=r(p5t,"Wav2Vec2ConformerForXVector"),p5t.forEach(t),mar=r(mSe," (Wav2Vec2-Conformer model)"),mSe.forEach(t),gar=i(ll),F0=n(ll,"LI",{});var gSe=s(F0);i1e=n(gSe,"STRONG",{});var _5t=s(i1e);har=r(_5t,"wavlm"),_5t.forEach(t),par=r(gSe," \u2014 "),qz=n(gSe,"A",{href:!0});var u5t=s(qz);_ar=r(u5t,"WavLMForXVector"),u5t.forEach(t),uar=r(gSe," (WavLM model)"),gSe.forEach(t),ll.forEach(t),bar=i(ba),T0=n(ba,"P",{});var hSe=s(T0);Far=r(hSe,"The model is set in evaluation mode by default using "),d1e=n(hSe,"CODE",{});var b5t=s(d1e);Tar=r(b5t,"model.eval()"),b5t.forEach(t),Mar=r(hSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),c1e=n(hSe,"CODE",{});var v5t=s(c1e);Ear=r(v5t,"model.train()"),v5t.forEach(t),hSe.forEach(t),Car=i(ba),T(M0.$$.fragment,ba),ba.forEach(t),sl.forEach(t),gje=i(f),wd=n(f,"H2",{class:!0});var bGe=s(wd);E0=n(bGe,"A",{id:!0,class:!0,href:!0});var F5t=s(E0);f1e=n(F5t,"SPAN",{});var T5t=s(f1e);T(GL.$$.fragment,T5t),T5t.forEach(t),F5t.forEach(t),war=i(bGe),m1e=n(bGe,"SPAN",{});var M5t=s(m1e);Aar=r(M5t,"AutoModelForMaskedImageModeling"),M5t.forEach(t),bGe.forEach(t),hje=i(f),Wo=n(f,"DIV",{class:!0});var il=s(Wo);T(OL.$$.fragment,il),yar=i(il),Ad=n(il,"P",{});var lee=s(Ad);Lar=r(lee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),jz=n(lee,"A",{href:!0});var E5t=s(jz);xar=r(E5t,"from_pretrained()"),E5t.forEach(t),$ar=r(lee," class method or the "),Dz=n(lee,"A",{href:!0});var C5t=s(Dz);kar=r(C5t,"from_config()"),C5t.forEach(t),Sar=r(lee,` class
method.`),lee.forEach(t),Rar=i(il),VL=n(il,"P",{});var vGe=s(VL);Par=r(vGe,"This class cannot be instantiated directly using "),g1e=n(vGe,"CODE",{});var w5t=s(g1e);Bar=r(w5t,"__init__()"),w5t.forEach(t),Iar=r(vGe," (throws an error)."),vGe.forEach(t),Nar=i(il),Mt=n(il,"DIV",{class:!0});var b6=s(Mt);T(XL.$$.fragment,b6),qar=i(b6),h1e=n(b6,"P",{});var A5t=s(h1e);jar=r(A5t,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),A5t.forEach(t),Dar=i(b6),yd=n(b6,"P",{});var iee=s(yd);Gar=r(iee,`Note:
Loading a model from its configuration file does `),p1e=n(iee,"STRONG",{});var y5t=s(p1e);Oar=r(y5t,"not"),y5t.forEach(t),Var=r(iee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Gz=n(iee,"A",{href:!0});var L5t=s(Gz);Xar=r(L5t,"from_pretrained()"),L5t.forEach(t),zar=r(iee," to load the model weights."),iee.forEach(t),War=i(b6),T(C0.$$.fragment,b6),b6.forEach(t),Qar=i(il),po=n(il,"DIV",{class:!0});var va=s(po);T(zL.$$.fragment,va),Har=i(va),_1e=n(va,"P",{});var x5t=s(_1e);Uar=r(x5t,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),x5t.forEach(t),Jar=i(va),Wa=n(va,"P",{});var v6=s(Wa);Yar=r(v6,"The model class to instantiate is selected based on the "),u1e=n(v6,"CODE",{});var $5t=s(u1e);Kar=r($5t,"model_type"),$5t.forEach(t),Zar=r(v6,` property of the config object (either
passed as an argument or loaded from `),b1e=n(v6,"CODE",{});var k5t=s(b1e);enr=r(k5t,"pretrained_model_name_or_path"),k5t.forEach(t),onr=r(v6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v1e=n(v6,"CODE",{});var S5t=s(v1e);rnr=r(S5t,"pretrained_model_name_or_path"),S5t.forEach(t),tnr=r(v6,":"),v6.forEach(t),anr=i(va),Ld=n(va,"UL",{});var dee=s(Ld);w0=n(dee,"LI",{});var pSe=s(w0);F1e=n(pSe,"STRONG",{});var R5t=s(F1e);nnr=r(R5t,"deit"),R5t.forEach(t),snr=r(pSe," \u2014 "),Oz=n(pSe,"A",{href:!0});var P5t=s(Oz);lnr=r(P5t,"DeiTForMaskedImageModeling"),P5t.forEach(t),inr=r(pSe," (DeiT model)"),pSe.forEach(t),dnr=i(dee),A0=n(dee,"LI",{});var _Se=s(A0);T1e=n(_Se,"STRONG",{});var B5t=s(T1e);cnr=r(B5t,"swin"),B5t.forEach(t),fnr=r(_Se," \u2014 "),Vz=n(_Se,"A",{href:!0});var I5t=s(Vz);mnr=r(I5t,"SwinForMaskedImageModeling"),I5t.forEach(t),gnr=r(_Se," (Swin model)"),_Se.forEach(t),hnr=i(dee),y0=n(dee,"LI",{});var uSe=s(y0);M1e=n(uSe,"STRONG",{});var N5t=s(M1e);pnr=r(N5t,"vit"),N5t.forEach(t),_nr=r(uSe," \u2014 "),Xz=n(uSe,"A",{href:!0});var q5t=s(Xz);unr=r(q5t,"ViTForMaskedImageModeling"),q5t.forEach(t),bnr=r(uSe," (ViT model)"),uSe.forEach(t),dee.forEach(t),vnr=i(va),L0=n(va,"P",{});var bSe=s(L0);Fnr=r(bSe,"The model is set in evaluation mode by default using "),E1e=n(bSe,"CODE",{});var j5t=s(E1e);Tnr=r(j5t,"model.eval()"),j5t.forEach(t),Mnr=r(bSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),C1e=n(bSe,"CODE",{});var D5t=s(C1e);Enr=r(D5t,"model.train()"),D5t.forEach(t),bSe.forEach(t),Cnr=i(va),T(x0.$$.fragment,va),va.forEach(t),il.forEach(t),pje=i(f),xd=n(f,"H2",{class:!0});var FGe=s(xd);$0=n(FGe,"A",{id:!0,class:!0,href:!0});var G5t=s($0);w1e=n(G5t,"SPAN",{});var O5t=s(w1e);T(WL.$$.fragment,O5t),O5t.forEach(t),G5t.forEach(t),wnr=i(FGe),A1e=n(FGe,"SPAN",{});var V5t=s(A1e);Anr=r(V5t,"AutoModelForObjectDetection"),V5t.forEach(t),FGe.forEach(t),_je=i(f),Qo=n(f,"DIV",{class:!0});var dl=s(Qo);T(QL.$$.fragment,dl),ynr=i(dl),$d=n(dl,"P",{});var cee=s($d);Lnr=r(cee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),zz=n(cee,"A",{href:!0});var X5t=s(zz);xnr=r(X5t,"from_pretrained()"),X5t.forEach(t),$nr=r(cee," class method or the "),Wz=n(cee,"A",{href:!0});var z5t=s(Wz);knr=r(z5t,"from_config()"),z5t.forEach(t),Snr=r(cee,` class
method.`),cee.forEach(t),Rnr=i(dl),HL=n(dl,"P",{});var TGe=s(HL);Pnr=r(TGe,"This class cannot be instantiated directly using "),y1e=n(TGe,"CODE",{});var W5t=s(y1e);Bnr=r(W5t,"__init__()"),W5t.forEach(t),Inr=r(TGe," (throws an error)."),TGe.forEach(t),Nnr=i(dl),Et=n(dl,"DIV",{class:!0});var F6=s(Et);T(UL.$$.fragment,F6),qnr=i(F6),L1e=n(F6,"P",{});var Q5t=s(L1e);jnr=r(Q5t,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Q5t.forEach(t),Dnr=i(F6),kd=n(F6,"P",{});var fee=s(kd);Gnr=r(fee,`Note:
Loading a model from its configuration file does `),x1e=n(fee,"STRONG",{});var H5t=s(x1e);Onr=r(H5t,"not"),H5t.forEach(t),Vnr=r(fee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Qz=n(fee,"A",{href:!0});var U5t=s(Qz);Xnr=r(U5t,"from_pretrained()"),U5t.forEach(t),znr=r(fee," to load the model weights."),fee.forEach(t),Wnr=i(F6),T(k0.$$.fragment,F6),F6.forEach(t),Qnr=i(dl),_o=n(dl,"DIV",{class:!0});var Fa=s(_o);T(JL.$$.fragment,Fa),Hnr=i(Fa),$1e=n(Fa,"P",{});var J5t=s($1e);Unr=r(J5t,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),J5t.forEach(t),Jnr=i(Fa),Qa=n(Fa,"P",{});var T6=s(Qa);Ynr=r(T6,"The model class to instantiate is selected based on the "),k1e=n(T6,"CODE",{});var Y5t=s(k1e);Knr=r(Y5t,"model_type"),Y5t.forEach(t),Znr=r(T6,` property of the config object (either
passed as an argument or loaded from `),S1e=n(T6,"CODE",{});var K5t=s(S1e);esr=r(K5t,"pretrained_model_name_or_path"),K5t.forEach(t),osr=r(T6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R1e=n(T6,"CODE",{});var Z5t=s(R1e);rsr=r(Z5t,"pretrained_model_name_or_path"),Z5t.forEach(t),tsr=r(T6,":"),T6.forEach(t),asr=i(Fa),YL=n(Fa,"UL",{});var MGe=s(YL);S0=n(MGe,"LI",{});var vSe=s(S0);P1e=n(vSe,"STRONG",{});var evt=s(P1e);nsr=r(evt,"detr"),evt.forEach(t),ssr=r(vSe," \u2014 "),Hz=n(vSe,"A",{href:!0});var ovt=s(Hz);lsr=r(ovt,"DetrForObjectDetection"),ovt.forEach(t),isr=r(vSe," (DETR model)"),vSe.forEach(t),dsr=i(MGe),R0=n(MGe,"LI",{});var FSe=s(R0);B1e=n(FSe,"STRONG",{});var rvt=s(B1e);csr=r(rvt,"yolos"),rvt.forEach(t),fsr=r(FSe," \u2014 "),Uz=n(FSe,"A",{href:!0});var tvt=s(Uz);msr=r(tvt,"YolosForObjectDetection"),tvt.forEach(t),gsr=r(FSe," (YOLOS model)"),FSe.forEach(t),MGe.forEach(t),hsr=i(Fa),P0=n(Fa,"P",{});var TSe=s(P0);psr=r(TSe,"The model is set in evaluation mode by default using "),I1e=n(TSe,"CODE",{});var avt=s(I1e);_sr=r(avt,"model.eval()"),avt.forEach(t),usr=r(TSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),N1e=n(TSe,"CODE",{});var nvt=s(N1e);bsr=r(nvt,"model.train()"),nvt.forEach(t),TSe.forEach(t),vsr=i(Fa),T(B0.$$.fragment,Fa),Fa.forEach(t),dl.forEach(t),uje=i(f),Sd=n(f,"H2",{class:!0});var EGe=s(Sd);I0=n(EGe,"A",{id:!0,class:!0,href:!0});var svt=s(I0);q1e=n(svt,"SPAN",{});var lvt=s(q1e);T(KL.$$.fragment,lvt),lvt.forEach(t),svt.forEach(t),Fsr=i(EGe),j1e=n(EGe,"SPAN",{});var ivt=s(j1e);Tsr=r(ivt,"AutoModelForImageSegmentation"),ivt.forEach(t),EGe.forEach(t),bje=i(f),Ho=n(f,"DIV",{class:!0});var cl=s(Ho);T(ZL.$$.fragment,cl),Msr=i(cl),Rd=n(cl,"P",{});var mee=s(Rd);Esr=r(mee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),Jz=n(mee,"A",{href:!0});var dvt=s(Jz);Csr=r(dvt,"from_pretrained()"),dvt.forEach(t),wsr=r(mee," class method or the "),Yz=n(mee,"A",{href:!0});var cvt=s(Yz);Asr=r(cvt,"from_config()"),cvt.forEach(t),ysr=r(mee,` class
method.`),mee.forEach(t),Lsr=i(cl),e8=n(cl,"P",{});var CGe=s(e8);xsr=r(CGe,"This class cannot be instantiated directly using "),D1e=n(CGe,"CODE",{});var fvt=s(D1e);$sr=r(fvt,"__init__()"),fvt.forEach(t),ksr=r(CGe," (throws an error)."),CGe.forEach(t),Ssr=i(cl),Ct=n(cl,"DIV",{class:!0});var M6=s(Ct);T(o8.$$.fragment,M6),Rsr=i(M6),G1e=n(M6,"P",{});var mvt=s(G1e);Psr=r(mvt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),mvt.forEach(t),Bsr=i(M6),Pd=n(M6,"P",{});var gee=s(Pd);Isr=r(gee,`Note:
Loading a model from its configuration file does `),O1e=n(gee,"STRONG",{});var gvt=s(O1e);Nsr=r(gvt,"not"),gvt.forEach(t),qsr=r(gee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Kz=n(gee,"A",{href:!0});var hvt=s(Kz);jsr=r(hvt,"from_pretrained()"),hvt.forEach(t),Dsr=r(gee," to load the model weights."),gee.forEach(t),Gsr=i(M6),T(N0.$$.fragment,M6),M6.forEach(t),Osr=i(cl),uo=n(cl,"DIV",{class:!0});var Ta=s(uo);T(r8.$$.fragment,Ta),Vsr=i(Ta),V1e=n(Ta,"P",{});var pvt=s(V1e);Xsr=r(pvt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),pvt.forEach(t),zsr=i(Ta),Ha=n(Ta,"P",{});var E6=s(Ha);Wsr=r(E6,"The model class to instantiate is selected based on the "),X1e=n(E6,"CODE",{});var _vt=s(X1e);Qsr=r(_vt,"model_type"),_vt.forEach(t),Hsr=r(E6,` property of the config object (either
passed as an argument or loaded from `),z1e=n(E6,"CODE",{});var uvt=s(z1e);Usr=r(uvt,"pretrained_model_name_or_path"),uvt.forEach(t),Jsr=r(E6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W1e=n(E6,"CODE",{});var bvt=s(W1e);Ysr=r(bvt,"pretrained_model_name_or_path"),bvt.forEach(t),Ksr=r(E6,":"),E6.forEach(t),Zsr=i(Ta),Q1e=n(Ta,"UL",{});var vvt=s(Q1e);q0=n(vvt,"LI",{});var MSe=s(q0);H1e=n(MSe,"STRONG",{});var Fvt=s(H1e);elr=r(Fvt,"detr"),Fvt.forEach(t),olr=r(MSe," \u2014 "),Zz=n(MSe,"A",{href:!0});var Tvt=s(Zz);rlr=r(Tvt,"DetrForSegmentation"),Tvt.forEach(t),tlr=r(MSe," (DETR model)"),MSe.forEach(t),vvt.forEach(t),alr=i(Ta),j0=n(Ta,"P",{});var ESe=s(j0);nlr=r(ESe,"The model is set in evaluation mode by default using "),U1e=n(ESe,"CODE",{});var Mvt=s(U1e);slr=r(Mvt,"model.eval()"),Mvt.forEach(t),llr=r(ESe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),J1e=n(ESe,"CODE",{});var Evt=s(J1e);ilr=r(Evt,"model.train()"),Evt.forEach(t),ESe.forEach(t),dlr=i(Ta),T(D0.$$.fragment,Ta),Ta.forEach(t),cl.forEach(t),vje=i(f),Bd=n(f,"H2",{class:!0});var wGe=s(Bd);G0=n(wGe,"A",{id:!0,class:!0,href:!0});var Cvt=s(G0);Y1e=n(Cvt,"SPAN",{});var wvt=s(Y1e);T(t8.$$.fragment,wvt),wvt.forEach(t),Cvt.forEach(t),clr=i(wGe),K1e=n(wGe,"SPAN",{});var Avt=s(K1e);flr=r(Avt,"AutoModelForSemanticSegmentation"),Avt.forEach(t),wGe.forEach(t),Fje=i(f),Uo=n(f,"DIV",{class:!0});var fl=s(Uo);T(a8.$$.fragment,fl),mlr=i(fl),Id=n(fl,"P",{});var hee=s(Id);glr=r(hee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),eW=n(hee,"A",{href:!0});var yvt=s(eW);hlr=r(yvt,"from_pretrained()"),yvt.forEach(t),plr=r(hee," class method or the "),oW=n(hee,"A",{href:!0});var Lvt=s(oW);_lr=r(Lvt,"from_config()"),Lvt.forEach(t),ulr=r(hee,` class
method.`),hee.forEach(t),blr=i(fl),n8=n(fl,"P",{});var AGe=s(n8);vlr=r(AGe,"This class cannot be instantiated directly using "),Z1e=n(AGe,"CODE",{});var xvt=s(Z1e);Flr=r(xvt,"__init__()"),xvt.forEach(t),Tlr=r(AGe," (throws an error)."),AGe.forEach(t),Mlr=i(fl),wt=n(fl,"DIV",{class:!0});var C6=s(wt);T(s8.$$.fragment,C6),Elr=i(C6),ebe=n(C6,"P",{});var $vt=s(ebe);Clr=r($vt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),$vt.forEach(t),wlr=i(C6),Nd=n(C6,"P",{});var pee=s(Nd);Alr=r(pee,`Note:
Loading a model from its configuration file does `),obe=n(pee,"STRONG",{});var kvt=s(obe);ylr=r(kvt,"not"),kvt.forEach(t),Llr=r(pee,` load the model weights. It only affects the
model\u2019s configuration. Use `),rW=n(pee,"A",{href:!0});var Svt=s(rW);xlr=r(Svt,"from_pretrained()"),Svt.forEach(t),$lr=r(pee," to load the model weights."),pee.forEach(t),klr=i(C6),T(O0.$$.fragment,C6),C6.forEach(t),Slr=i(fl),bo=n(fl,"DIV",{class:!0});var Ma=s(bo);T(l8.$$.fragment,Ma),Rlr=i(Ma),rbe=n(Ma,"P",{});var Rvt=s(rbe);Plr=r(Rvt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Rvt.forEach(t),Blr=i(Ma),Ua=n(Ma,"P",{});var w6=s(Ua);Ilr=r(w6,"The model class to instantiate is selected based on the "),tbe=n(w6,"CODE",{});var Pvt=s(tbe);Nlr=r(Pvt,"model_type"),Pvt.forEach(t),qlr=r(w6,` property of the config object (either
passed as an argument or loaded from `),abe=n(w6,"CODE",{});var Bvt=s(abe);jlr=r(Bvt,"pretrained_model_name_or_path"),Bvt.forEach(t),Dlr=r(w6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nbe=n(w6,"CODE",{});var Ivt=s(nbe);Glr=r(Ivt,"pretrained_model_name_or_path"),Ivt.forEach(t),Olr=r(w6,":"),w6.forEach(t),Vlr=i(Ma),Ja=n(Ma,"UL",{});var A6=s(Ja);V0=n(A6,"LI",{});var CSe=s(V0);sbe=n(CSe,"STRONG",{});var Nvt=s(sbe);Xlr=r(Nvt,"beit"),Nvt.forEach(t),zlr=r(CSe," \u2014 "),tW=n(CSe,"A",{href:!0});var qvt=s(tW);Wlr=r(qvt,"BeitForSemanticSegmentation"),qvt.forEach(t),Qlr=r(CSe," (BEiT model)"),CSe.forEach(t),Hlr=i(A6),X0=n(A6,"LI",{});var wSe=s(X0);lbe=n(wSe,"STRONG",{});var jvt=s(lbe);Ulr=r(jvt,"data2vec-vision"),jvt.forEach(t),Jlr=r(wSe," \u2014 "),aW=n(wSe,"A",{href:!0});var Dvt=s(aW);Ylr=r(Dvt,"Data2VecVisionForSemanticSegmentation"),Dvt.forEach(t),Klr=r(wSe," (Data2VecVision model)"),wSe.forEach(t),Zlr=i(A6),z0=n(A6,"LI",{});var ASe=s(z0);ibe=n(ASe,"STRONG",{});var Gvt=s(ibe);eir=r(Gvt,"dpt"),Gvt.forEach(t),oir=r(ASe," \u2014 "),nW=n(ASe,"A",{href:!0});var Ovt=s(nW);rir=r(Ovt,"DPTForSemanticSegmentation"),Ovt.forEach(t),tir=r(ASe," (DPT model)"),ASe.forEach(t),air=i(A6),W0=n(A6,"LI",{});var ySe=s(W0);dbe=n(ySe,"STRONG",{});var Vvt=s(dbe);nir=r(Vvt,"segformer"),Vvt.forEach(t),sir=r(ySe," \u2014 "),sW=n(ySe,"A",{href:!0});var Xvt=s(sW);lir=r(Xvt,"SegformerForSemanticSegmentation"),Xvt.forEach(t),iir=r(ySe," (SegFormer model)"),ySe.forEach(t),A6.forEach(t),dir=i(Ma),Q0=n(Ma,"P",{});var LSe=s(Q0);cir=r(LSe,"The model is set in evaluation mode by default using "),cbe=n(LSe,"CODE",{});var zvt=s(cbe);fir=r(zvt,"model.eval()"),zvt.forEach(t),mir=r(LSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fbe=n(LSe,"CODE",{});var Wvt=s(fbe);gir=r(Wvt,"model.train()"),Wvt.forEach(t),LSe.forEach(t),hir=i(Ma),T(H0.$$.fragment,Ma),Ma.forEach(t),fl.forEach(t),Tje=i(f),qd=n(f,"H2",{class:!0});var yGe=s(qd);U0=n(yGe,"A",{id:!0,class:!0,href:!0});var Qvt=s(U0);mbe=n(Qvt,"SPAN",{});var Hvt=s(mbe);T(i8.$$.fragment,Hvt),Hvt.forEach(t),Qvt.forEach(t),pir=i(yGe),gbe=n(yGe,"SPAN",{});var Uvt=s(gbe);_ir=r(Uvt,"AutoModelForInstanceSegmentation"),Uvt.forEach(t),yGe.forEach(t),Mje=i(f),Jo=n(f,"DIV",{class:!0});var ml=s(Jo);T(d8.$$.fragment,ml),uir=i(ml),jd=n(ml,"P",{});var _ee=s(jd);bir=r(_ee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),lW=n(_ee,"A",{href:!0});var Jvt=s(lW);vir=r(Jvt,"from_pretrained()"),Jvt.forEach(t),Fir=r(_ee," class method or the "),iW=n(_ee,"A",{href:!0});var Yvt=s(iW);Tir=r(Yvt,"from_config()"),Yvt.forEach(t),Mir=r(_ee,` class
method.`),_ee.forEach(t),Eir=i(ml),c8=n(ml,"P",{});var LGe=s(c8);Cir=r(LGe,"This class cannot be instantiated directly using "),hbe=n(LGe,"CODE",{});var Kvt=s(hbe);wir=r(Kvt,"__init__()"),Kvt.forEach(t),Air=r(LGe," (throws an error)."),LGe.forEach(t),yir=i(ml),At=n(ml,"DIV",{class:!0});var y6=s(At);T(f8.$$.fragment,y6),Lir=i(y6),pbe=n(y6,"P",{});var Zvt=s(pbe);xir=r(Zvt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Zvt.forEach(t),$ir=i(y6),Dd=n(y6,"P",{});var uee=s(Dd);kir=r(uee,`Note:
Loading a model from its configuration file does `),_be=n(uee,"STRONG",{});var eFt=s(_be);Sir=r(eFt,"not"),eFt.forEach(t),Rir=r(uee,` load the model weights. It only affects the
model\u2019s configuration. Use `),dW=n(uee,"A",{href:!0});var oFt=s(dW);Pir=r(oFt,"from_pretrained()"),oFt.forEach(t),Bir=r(uee," to load the model weights."),uee.forEach(t),Iir=i(y6),T(J0.$$.fragment,y6),y6.forEach(t),Nir=i(ml),vo=n(ml,"DIV",{class:!0});var Ea=s(vo);T(m8.$$.fragment,Ea),qir=i(Ea),ube=n(Ea,"P",{});var rFt=s(ube);jir=r(rFt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),rFt.forEach(t),Dir=i(Ea),Ya=n(Ea,"P",{});var L6=s(Ya);Gir=r(L6,"The model class to instantiate is selected based on the "),bbe=n(L6,"CODE",{});var tFt=s(bbe);Oir=r(tFt,"model_type"),tFt.forEach(t),Vir=r(L6,` property of the config object (either
passed as an argument or loaded from `),vbe=n(L6,"CODE",{});var aFt=s(vbe);Xir=r(aFt,"pretrained_model_name_or_path"),aFt.forEach(t),zir=r(L6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fbe=n(L6,"CODE",{});var nFt=s(Fbe);Wir=r(nFt,"pretrained_model_name_or_path"),nFt.forEach(t),Qir=r(L6,":"),L6.forEach(t),Hir=i(Ea),Tbe=n(Ea,"UL",{});var sFt=s(Tbe);Y0=n(sFt,"LI",{});var xSe=s(Y0);Mbe=n(xSe,"STRONG",{});var lFt=s(Mbe);Uir=r(lFt,"maskformer"),lFt.forEach(t),Jir=r(xSe," \u2014 "),cW=n(xSe,"A",{href:!0});var iFt=s(cW);Yir=r(iFt,"MaskFormerForInstanceSegmentation"),iFt.forEach(t),Kir=r(xSe," (MaskFormer model)"),xSe.forEach(t),sFt.forEach(t),Zir=i(Ea),K0=n(Ea,"P",{});var $Se=s(K0);edr=r($Se,"The model is set in evaluation mode by default using "),Ebe=n($Se,"CODE",{});var dFt=s(Ebe);odr=r(dFt,"model.eval()"),dFt.forEach(t),rdr=r($Se,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cbe=n($Se,"CODE",{});var cFt=s(Cbe);tdr=r(cFt,"model.train()"),cFt.forEach(t),$Se.forEach(t),adr=i(Ea),T(Z0.$$.fragment,Ea),Ea.forEach(t),ml.forEach(t),Eje=i(f),Gd=n(f,"H2",{class:!0});var xGe=s(Gd);eT=n(xGe,"A",{id:!0,class:!0,href:!0});var fFt=s(eT);wbe=n(fFt,"SPAN",{});var mFt=s(wbe);T(g8.$$.fragment,mFt),mFt.forEach(t),fFt.forEach(t),ndr=i(xGe),Abe=n(xGe,"SPAN",{});var gFt=s(Abe);sdr=r(gFt,"TFAutoModel"),gFt.forEach(t),xGe.forEach(t),Cje=i(f),Yo=n(f,"DIV",{class:!0});var gl=s(Yo);T(h8.$$.fragment,gl),ldr=i(gl),Od=n(gl,"P",{});var bee=s(Od);idr=r(bee,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),fW=n(bee,"A",{href:!0});var hFt=s(fW);ddr=r(hFt,"from_pretrained()"),hFt.forEach(t),cdr=r(bee," class method or the "),mW=n(bee,"A",{href:!0});var pFt=s(mW);fdr=r(pFt,"from_config()"),pFt.forEach(t),mdr=r(bee,` class
method.`),bee.forEach(t),gdr=i(gl),p8=n(gl,"P",{});var $Ge=s(p8);hdr=r($Ge,"This class cannot be instantiated directly using "),ybe=n($Ge,"CODE",{});var _Ft=s(ybe);pdr=r(_Ft,"__init__()"),_Ft.forEach(t),_dr=r($Ge," (throws an error)."),$Ge.forEach(t),udr=i(gl),yt=n(gl,"DIV",{class:!0});var x6=s(yt);T(_8.$$.fragment,x6),bdr=i(x6),Lbe=n(x6,"P",{});var uFt=s(Lbe);vdr=r(uFt,"Instantiates one of the base model classes of the library from a configuration."),uFt.forEach(t),Fdr=i(x6),Vd=n(x6,"P",{});var vee=s(Vd);Tdr=r(vee,`Note:
Loading a model from its configuration file does `),xbe=n(vee,"STRONG",{});var bFt=s(xbe);Mdr=r(bFt,"not"),bFt.forEach(t),Edr=r(vee,` load the model weights. It only affects the
model\u2019s configuration. Use `),gW=n(vee,"A",{href:!0});var vFt=s(gW);Cdr=r(vFt,"from_pretrained()"),vFt.forEach(t),wdr=r(vee," to load the model weights."),vee.forEach(t),Adr=i(x6),T(oT.$$.fragment,x6),x6.forEach(t),ydr=i(gl),wr=n(gl,"DIV",{class:!0});var hl=s(wr);T(u8.$$.fragment,hl),Ldr=i(hl),$be=n(hl,"P",{});var FFt=s($be);xdr=r(FFt,"Instantiate one of the base model classes of the library from a pretrained model."),FFt.forEach(t),$dr=i(hl),Ka=n(hl,"P",{});var $6=s(Ka);kdr=r($6,"The model class to instantiate is selected based on the "),kbe=n($6,"CODE",{});var TFt=s(kbe);Sdr=r(TFt,"model_type"),TFt.forEach(t),Rdr=r($6,` property of the config object (either
passed as an argument or loaded from `),Sbe=n($6,"CODE",{});var MFt=s(Sbe);Pdr=r(MFt,"pretrained_model_name_or_path"),MFt.forEach(t),Bdr=r($6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rbe=n($6,"CODE",{});var EFt=s(Rbe);Idr=r(EFt,"pretrained_model_name_or_path"),EFt.forEach(t),Ndr=r($6,":"),$6.forEach(t),qdr=i(hl),q=n(hl,"UL",{});var D=s(q);rT=n(D,"LI",{});var kSe=s(rT);Pbe=n(kSe,"STRONG",{});var CFt=s(Pbe);jdr=r(CFt,"albert"),CFt.forEach(t),Ddr=r(kSe," \u2014 "),hW=n(kSe,"A",{href:!0});var wFt=s(hW);Gdr=r(wFt,"TFAlbertModel"),wFt.forEach(t),Odr=r(kSe," (ALBERT model)"),kSe.forEach(t),Vdr=i(D),tT=n(D,"LI",{});var SSe=s(tT);Bbe=n(SSe,"STRONG",{});var AFt=s(Bbe);Xdr=r(AFt,"bart"),AFt.forEach(t),zdr=r(SSe," \u2014 "),pW=n(SSe,"A",{href:!0});var yFt=s(pW);Wdr=r(yFt,"TFBartModel"),yFt.forEach(t),Qdr=r(SSe," (BART model)"),SSe.forEach(t),Hdr=i(D),aT=n(D,"LI",{});var RSe=s(aT);Ibe=n(RSe,"STRONG",{});var LFt=s(Ibe);Udr=r(LFt,"bert"),LFt.forEach(t),Jdr=r(RSe," \u2014 "),_W=n(RSe,"A",{href:!0});var xFt=s(_W);Ydr=r(xFt,"TFBertModel"),xFt.forEach(t),Kdr=r(RSe," (BERT model)"),RSe.forEach(t),Zdr=i(D),nT=n(D,"LI",{});var PSe=s(nT);Nbe=n(PSe,"STRONG",{});var $Ft=s(Nbe);ecr=r($Ft,"blenderbot"),$Ft.forEach(t),ocr=r(PSe," \u2014 "),uW=n(PSe,"A",{href:!0});var kFt=s(uW);rcr=r(kFt,"TFBlenderbotModel"),kFt.forEach(t),tcr=r(PSe," (Blenderbot model)"),PSe.forEach(t),acr=i(D),sT=n(D,"LI",{});var BSe=s(sT);qbe=n(BSe,"STRONG",{});var SFt=s(qbe);ncr=r(SFt,"blenderbot-small"),SFt.forEach(t),scr=r(BSe," \u2014 "),bW=n(BSe,"A",{href:!0});var RFt=s(bW);lcr=r(RFt,"TFBlenderbotSmallModel"),RFt.forEach(t),icr=r(BSe," (BlenderbotSmall model)"),BSe.forEach(t),dcr=i(D),lT=n(D,"LI",{});var ISe=s(lT);jbe=n(ISe,"STRONG",{});var PFt=s(jbe);ccr=r(PFt,"camembert"),PFt.forEach(t),fcr=r(ISe," \u2014 "),vW=n(ISe,"A",{href:!0});var BFt=s(vW);mcr=r(BFt,"TFCamembertModel"),BFt.forEach(t),gcr=r(ISe," (CamemBERT model)"),ISe.forEach(t),hcr=i(D),iT=n(D,"LI",{});var NSe=s(iT);Dbe=n(NSe,"STRONG",{});var IFt=s(Dbe);pcr=r(IFt,"clip"),IFt.forEach(t),_cr=r(NSe," \u2014 "),FW=n(NSe,"A",{href:!0});var NFt=s(FW);ucr=r(NFt,"TFCLIPModel"),NFt.forEach(t),bcr=r(NSe," (CLIP model)"),NSe.forEach(t),vcr=i(D),dT=n(D,"LI",{});var qSe=s(dT);Gbe=n(qSe,"STRONG",{});var qFt=s(Gbe);Fcr=r(qFt,"convbert"),qFt.forEach(t),Tcr=r(qSe," \u2014 "),TW=n(qSe,"A",{href:!0});var jFt=s(TW);Mcr=r(jFt,"TFConvBertModel"),jFt.forEach(t),Ecr=r(qSe," (ConvBERT model)"),qSe.forEach(t),Ccr=i(D),cT=n(D,"LI",{});var jSe=s(cT);Obe=n(jSe,"STRONG",{});var DFt=s(Obe);wcr=r(DFt,"convnext"),DFt.forEach(t),Acr=r(jSe," \u2014 "),MW=n(jSe,"A",{href:!0});var GFt=s(MW);ycr=r(GFt,"TFConvNextModel"),GFt.forEach(t),Lcr=r(jSe," (ConvNext model)"),jSe.forEach(t),xcr=i(D),fT=n(D,"LI",{});var DSe=s(fT);Vbe=n(DSe,"STRONG",{});var OFt=s(Vbe);$cr=r(OFt,"ctrl"),OFt.forEach(t),kcr=r(DSe," \u2014 "),EW=n(DSe,"A",{href:!0});var VFt=s(EW);Scr=r(VFt,"TFCTRLModel"),VFt.forEach(t),Rcr=r(DSe," (CTRL model)"),DSe.forEach(t),Pcr=i(D),mT=n(D,"LI",{});var GSe=s(mT);Xbe=n(GSe,"STRONG",{});var XFt=s(Xbe);Bcr=r(XFt,"data2vec-vision"),XFt.forEach(t),Icr=r(GSe," \u2014 "),CW=n(GSe,"A",{href:!0});var zFt=s(CW);Ncr=r(zFt,"TFData2VecVisionModel"),zFt.forEach(t),qcr=r(GSe," (Data2VecVision model)"),GSe.forEach(t),jcr=i(D),gT=n(D,"LI",{});var OSe=s(gT);zbe=n(OSe,"STRONG",{});var WFt=s(zbe);Dcr=r(WFt,"deberta"),WFt.forEach(t),Gcr=r(OSe," \u2014 "),wW=n(OSe,"A",{href:!0});var QFt=s(wW);Ocr=r(QFt,"TFDebertaModel"),QFt.forEach(t),Vcr=r(OSe," (DeBERTa model)"),OSe.forEach(t),Xcr=i(D),hT=n(D,"LI",{});var VSe=s(hT);Wbe=n(VSe,"STRONG",{});var HFt=s(Wbe);zcr=r(HFt,"deberta-v2"),HFt.forEach(t),Wcr=r(VSe," \u2014 "),AW=n(VSe,"A",{href:!0});var UFt=s(AW);Qcr=r(UFt,"TFDebertaV2Model"),UFt.forEach(t),Hcr=r(VSe," (DeBERTa-v2 model)"),VSe.forEach(t),Ucr=i(D),pT=n(D,"LI",{});var XSe=s(pT);Qbe=n(XSe,"STRONG",{});var JFt=s(Qbe);Jcr=r(JFt,"distilbert"),JFt.forEach(t),Ycr=r(XSe," \u2014 "),yW=n(XSe,"A",{href:!0});var YFt=s(yW);Kcr=r(YFt,"TFDistilBertModel"),YFt.forEach(t),Zcr=r(XSe," (DistilBERT model)"),XSe.forEach(t),efr=i(D),_T=n(D,"LI",{});var zSe=s(_T);Hbe=n(zSe,"STRONG",{});var KFt=s(Hbe);ofr=r(KFt,"dpr"),KFt.forEach(t),rfr=r(zSe," \u2014 "),LW=n(zSe,"A",{href:!0});var ZFt=s(LW);tfr=r(ZFt,"TFDPRQuestionEncoder"),ZFt.forEach(t),afr=r(zSe," (DPR model)"),zSe.forEach(t),nfr=i(D),uT=n(D,"LI",{});var WSe=s(uT);Ube=n(WSe,"STRONG",{});var e0t=s(Ube);sfr=r(e0t,"electra"),e0t.forEach(t),lfr=r(WSe," \u2014 "),xW=n(WSe,"A",{href:!0});var o0t=s(xW);ifr=r(o0t,"TFElectraModel"),o0t.forEach(t),dfr=r(WSe," (ELECTRA model)"),WSe.forEach(t),cfr=i(D),bT=n(D,"LI",{});var QSe=s(bT);Jbe=n(QSe,"STRONG",{});var r0t=s(Jbe);ffr=r(r0t,"flaubert"),r0t.forEach(t),mfr=r(QSe," \u2014 "),$W=n(QSe,"A",{href:!0});var t0t=s($W);gfr=r(t0t,"TFFlaubertModel"),t0t.forEach(t),hfr=r(QSe," (FlauBERT model)"),QSe.forEach(t),pfr=i(D),Is=n(D,"LI",{});var U$=s(Is);Ybe=n(U$,"STRONG",{});var a0t=s(Ybe);_fr=r(a0t,"funnel"),a0t.forEach(t),ufr=r(U$," \u2014 "),kW=n(U$,"A",{href:!0});var n0t=s(kW);bfr=r(n0t,"TFFunnelModel"),n0t.forEach(t),vfr=r(U$," or "),SW=n(U$,"A",{href:!0});var s0t=s(SW);Ffr=r(s0t,"TFFunnelBaseModel"),s0t.forEach(t),Tfr=r(U$," (Funnel Transformer model)"),U$.forEach(t),Mfr=i(D),vT=n(D,"LI",{});var HSe=s(vT);Kbe=n(HSe,"STRONG",{});var l0t=s(Kbe);Efr=r(l0t,"gpt2"),l0t.forEach(t),Cfr=r(HSe," \u2014 "),RW=n(HSe,"A",{href:!0});var i0t=s(RW);wfr=r(i0t,"TFGPT2Model"),i0t.forEach(t),Afr=r(HSe," (OpenAI GPT-2 model)"),HSe.forEach(t),yfr=i(D),FT=n(D,"LI",{});var USe=s(FT);Zbe=n(USe,"STRONG",{});var d0t=s(Zbe);Lfr=r(d0t,"gptj"),d0t.forEach(t),xfr=r(USe," \u2014 "),PW=n(USe,"A",{href:!0});var c0t=s(PW);$fr=r(c0t,"TFGPTJModel"),c0t.forEach(t),kfr=r(USe," (GPT-J model)"),USe.forEach(t),Sfr=i(D),TT=n(D,"LI",{});var JSe=s(TT);e2e=n(JSe,"STRONG",{});var f0t=s(e2e);Rfr=r(f0t,"hubert"),f0t.forEach(t),Pfr=r(JSe," \u2014 "),BW=n(JSe,"A",{href:!0});var m0t=s(BW);Bfr=r(m0t,"TFHubertModel"),m0t.forEach(t),Ifr=r(JSe," (Hubert model)"),JSe.forEach(t),Nfr=i(D),MT=n(D,"LI",{});var YSe=s(MT);o2e=n(YSe,"STRONG",{});var g0t=s(o2e);qfr=r(g0t,"layoutlm"),g0t.forEach(t),jfr=r(YSe," \u2014 "),IW=n(YSe,"A",{href:!0});var h0t=s(IW);Dfr=r(h0t,"TFLayoutLMModel"),h0t.forEach(t),Gfr=r(YSe," (LayoutLM model)"),YSe.forEach(t),Ofr=i(D),ET=n(D,"LI",{});var KSe=s(ET);r2e=n(KSe,"STRONG",{});var p0t=s(r2e);Vfr=r(p0t,"led"),p0t.forEach(t),Xfr=r(KSe," \u2014 "),NW=n(KSe,"A",{href:!0});var _0t=s(NW);zfr=r(_0t,"TFLEDModel"),_0t.forEach(t),Wfr=r(KSe," (LED model)"),KSe.forEach(t),Qfr=i(D),CT=n(D,"LI",{});var ZSe=s(CT);t2e=n(ZSe,"STRONG",{});var u0t=s(t2e);Hfr=r(u0t,"longformer"),u0t.forEach(t),Ufr=r(ZSe," \u2014 "),qW=n(ZSe,"A",{href:!0});var b0t=s(qW);Jfr=r(b0t,"TFLongformerModel"),b0t.forEach(t),Yfr=r(ZSe," (Longformer model)"),ZSe.forEach(t),Kfr=i(D),wT=n(D,"LI",{});var eRe=s(wT);a2e=n(eRe,"STRONG",{});var v0t=s(a2e);Zfr=r(v0t,"lxmert"),v0t.forEach(t),emr=r(eRe," \u2014 "),jW=n(eRe,"A",{href:!0});var F0t=s(jW);omr=r(F0t,"TFLxmertModel"),F0t.forEach(t),rmr=r(eRe," (LXMERT model)"),eRe.forEach(t),tmr=i(D),AT=n(D,"LI",{});var oRe=s(AT);n2e=n(oRe,"STRONG",{});var T0t=s(n2e);amr=r(T0t,"marian"),T0t.forEach(t),nmr=r(oRe," \u2014 "),DW=n(oRe,"A",{href:!0});var M0t=s(DW);smr=r(M0t,"TFMarianModel"),M0t.forEach(t),lmr=r(oRe," (Marian model)"),oRe.forEach(t),imr=i(D),yT=n(D,"LI",{});var rRe=s(yT);s2e=n(rRe,"STRONG",{});var E0t=s(s2e);dmr=r(E0t,"mbart"),E0t.forEach(t),cmr=r(rRe," \u2014 "),GW=n(rRe,"A",{href:!0});var C0t=s(GW);fmr=r(C0t,"TFMBartModel"),C0t.forEach(t),mmr=r(rRe," (mBART model)"),rRe.forEach(t),gmr=i(D),LT=n(D,"LI",{});var tRe=s(LT);l2e=n(tRe,"STRONG",{});var w0t=s(l2e);hmr=r(w0t,"mobilebert"),w0t.forEach(t),pmr=r(tRe," \u2014 "),OW=n(tRe,"A",{href:!0});var A0t=s(OW);_mr=r(A0t,"TFMobileBertModel"),A0t.forEach(t),umr=r(tRe," (MobileBERT model)"),tRe.forEach(t),bmr=i(D),xT=n(D,"LI",{});var aRe=s(xT);i2e=n(aRe,"STRONG",{});var y0t=s(i2e);vmr=r(y0t,"mpnet"),y0t.forEach(t),Fmr=r(aRe," \u2014 "),VW=n(aRe,"A",{href:!0});var L0t=s(VW);Tmr=r(L0t,"TFMPNetModel"),L0t.forEach(t),Mmr=r(aRe," (MPNet model)"),aRe.forEach(t),Emr=i(D),$T=n(D,"LI",{});var nRe=s($T);d2e=n(nRe,"STRONG",{});var x0t=s(d2e);Cmr=r(x0t,"mt5"),x0t.forEach(t),wmr=r(nRe," \u2014 "),XW=n(nRe,"A",{href:!0});var $0t=s(XW);Amr=r($0t,"TFMT5Model"),$0t.forEach(t),ymr=r(nRe," (mT5 model)"),nRe.forEach(t),Lmr=i(D),kT=n(D,"LI",{});var sRe=s(kT);c2e=n(sRe,"STRONG",{});var k0t=s(c2e);xmr=r(k0t,"openai-gpt"),k0t.forEach(t),$mr=r(sRe," \u2014 "),zW=n(sRe,"A",{href:!0});var S0t=s(zW);kmr=r(S0t,"TFOpenAIGPTModel"),S0t.forEach(t),Smr=r(sRe," (OpenAI GPT model)"),sRe.forEach(t),Rmr=i(D),ST=n(D,"LI",{});var lRe=s(ST);f2e=n(lRe,"STRONG",{});var R0t=s(f2e);Pmr=r(R0t,"opt"),R0t.forEach(t),Bmr=r(lRe," \u2014 "),WW=n(lRe,"A",{href:!0});var P0t=s(WW);Imr=r(P0t,"TFOPTModel"),P0t.forEach(t),Nmr=r(lRe," (OPT model)"),lRe.forEach(t),qmr=i(D),RT=n(D,"LI",{});var iRe=s(RT);m2e=n(iRe,"STRONG",{});var B0t=s(m2e);jmr=r(B0t,"pegasus"),B0t.forEach(t),Dmr=r(iRe," \u2014 "),QW=n(iRe,"A",{href:!0});var I0t=s(QW);Gmr=r(I0t,"TFPegasusModel"),I0t.forEach(t),Omr=r(iRe," (Pegasus model)"),iRe.forEach(t),Vmr=i(D),PT=n(D,"LI",{});var dRe=s(PT);g2e=n(dRe,"STRONG",{});var N0t=s(g2e);Xmr=r(N0t,"rembert"),N0t.forEach(t),zmr=r(dRe," \u2014 "),HW=n(dRe,"A",{href:!0});var q0t=s(HW);Wmr=r(q0t,"TFRemBertModel"),q0t.forEach(t),Qmr=r(dRe," (RemBERT model)"),dRe.forEach(t),Hmr=i(D),BT=n(D,"LI",{});var cRe=s(BT);h2e=n(cRe,"STRONG",{});var j0t=s(h2e);Umr=r(j0t,"roberta"),j0t.forEach(t),Jmr=r(cRe," \u2014 "),UW=n(cRe,"A",{href:!0});var D0t=s(UW);Ymr=r(D0t,"TFRobertaModel"),D0t.forEach(t),Kmr=r(cRe," (RoBERTa model)"),cRe.forEach(t),Zmr=i(D),IT=n(D,"LI",{});var fRe=s(IT);p2e=n(fRe,"STRONG",{});var G0t=s(p2e);egr=r(G0t,"roformer"),G0t.forEach(t),ogr=r(fRe," \u2014 "),JW=n(fRe,"A",{href:!0});var O0t=s(JW);rgr=r(O0t,"TFRoFormerModel"),O0t.forEach(t),tgr=r(fRe," (RoFormer model)"),fRe.forEach(t),agr=i(D),NT=n(D,"LI",{});var mRe=s(NT);_2e=n(mRe,"STRONG",{});var V0t=s(_2e);ngr=r(V0t,"speech_to_text"),V0t.forEach(t),sgr=r(mRe," \u2014 "),YW=n(mRe,"A",{href:!0});var X0t=s(YW);lgr=r(X0t,"TFSpeech2TextModel"),X0t.forEach(t),igr=r(mRe," (Speech2Text model)"),mRe.forEach(t),dgr=i(D),qT=n(D,"LI",{});var gRe=s(qT);u2e=n(gRe,"STRONG",{});var z0t=s(u2e);cgr=r(z0t,"swin"),z0t.forEach(t),fgr=r(gRe," \u2014 "),KW=n(gRe,"A",{href:!0});var W0t=s(KW);mgr=r(W0t,"TFSwinModel"),W0t.forEach(t),ggr=r(gRe," (Swin model)"),gRe.forEach(t),hgr=i(D),jT=n(D,"LI",{});var hRe=s(jT);b2e=n(hRe,"STRONG",{});var Q0t=s(b2e);pgr=r(Q0t,"t5"),Q0t.forEach(t),_gr=r(hRe," \u2014 "),ZW=n(hRe,"A",{href:!0});var H0t=s(ZW);ugr=r(H0t,"TFT5Model"),H0t.forEach(t),bgr=r(hRe," (T5 model)"),hRe.forEach(t),vgr=i(D),DT=n(D,"LI",{});var pRe=s(DT);v2e=n(pRe,"STRONG",{});var U0t=s(v2e);Fgr=r(U0t,"tapas"),U0t.forEach(t),Tgr=r(pRe," \u2014 "),eQ=n(pRe,"A",{href:!0});var J0t=s(eQ);Mgr=r(J0t,"TFTapasModel"),J0t.forEach(t),Egr=r(pRe," (TAPAS model)"),pRe.forEach(t),Cgr=i(D),GT=n(D,"LI",{});var _Re=s(GT);F2e=n(_Re,"STRONG",{});var Y0t=s(F2e);wgr=r(Y0t,"transfo-xl"),Y0t.forEach(t),Agr=r(_Re," \u2014 "),oQ=n(_Re,"A",{href:!0});var K0t=s(oQ);ygr=r(K0t,"TFTransfoXLModel"),K0t.forEach(t),Lgr=r(_Re," (Transformer-XL model)"),_Re.forEach(t),xgr=i(D),OT=n(D,"LI",{});var uRe=s(OT);T2e=n(uRe,"STRONG",{});var Z0t=s(T2e);$gr=r(Z0t,"vit"),Z0t.forEach(t),kgr=r(uRe," \u2014 "),rQ=n(uRe,"A",{href:!0});var eTt=s(rQ);Sgr=r(eTt,"TFViTModel"),eTt.forEach(t),Rgr=r(uRe," (ViT model)"),uRe.forEach(t),Pgr=i(D),VT=n(D,"LI",{});var bRe=s(VT);M2e=n(bRe,"STRONG",{});var oTt=s(M2e);Bgr=r(oTt,"vit_mae"),oTt.forEach(t),Igr=r(bRe," \u2014 "),tQ=n(bRe,"A",{href:!0});var rTt=s(tQ);Ngr=r(rTt,"TFViTMAEModel"),rTt.forEach(t),qgr=r(bRe," (ViTMAE model)"),bRe.forEach(t),jgr=i(D),XT=n(D,"LI",{});var vRe=s(XT);E2e=n(vRe,"STRONG",{});var tTt=s(E2e);Dgr=r(tTt,"wav2vec2"),tTt.forEach(t),Ggr=r(vRe," \u2014 "),aQ=n(vRe,"A",{href:!0});var aTt=s(aQ);Ogr=r(aTt,"TFWav2Vec2Model"),aTt.forEach(t),Vgr=r(vRe," (Wav2Vec2 model)"),vRe.forEach(t),Xgr=i(D),zT=n(D,"LI",{});var FRe=s(zT);C2e=n(FRe,"STRONG",{});var nTt=s(C2e);zgr=r(nTt,"xlm"),nTt.forEach(t),Wgr=r(FRe," \u2014 "),nQ=n(FRe,"A",{href:!0});var sTt=s(nQ);Qgr=r(sTt,"TFXLMModel"),sTt.forEach(t),Hgr=r(FRe," (XLM model)"),FRe.forEach(t),Ugr=i(D),WT=n(D,"LI",{});var TRe=s(WT);w2e=n(TRe,"STRONG",{});var lTt=s(w2e);Jgr=r(lTt,"xlm-roberta"),lTt.forEach(t),Ygr=r(TRe," \u2014 "),sQ=n(TRe,"A",{href:!0});var iTt=s(sQ);Kgr=r(iTt,"TFXLMRobertaModel"),iTt.forEach(t),Zgr=r(TRe," (XLM-RoBERTa model)"),TRe.forEach(t),ehr=i(D),QT=n(D,"LI",{});var MRe=s(QT);A2e=n(MRe,"STRONG",{});var dTt=s(A2e);ohr=r(dTt,"xlnet"),dTt.forEach(t),rhr=r(MRe," \u2014 "),lQ=n(MRe,"A",{href:!0});var cTt=s(lQ);thr=r(cTt,"TFXLNetModel"),cTt.forEach(t),ahr=r(MRe," (XLNet model)"),MRe.forEach(t),D.forEach(t),nhr=i(hl),T(HT.$$.fragment,hl),hl.forEach(t),gl.forEach(t),wje=i(f),Xd=n(f,"H2",{class:!0});var kGe=s(Xd);UT=n(kGe,"A",{id:!0,class:!0,href:!0});var fTt=s(UT);y2e=n(fTt,"SPAN",{});var mTt=s(y2e);T(b8.$$.fragment,mTt),mTt.forEach(t),fTt.forEach(t),shr=i(kGe),L2e=n(kGe,"SPAN",{});var gTt=s(L2e);lhr=r(gTt,"TFAutoModelForPreTraining"),gTt.forEach(t),kGe.forEach(t),Aje=i(f),Ko=n(f,"DIV",{class:!0});var pl=s(Ko);T(v8.$$.fragment,pl),ihr=i(pl),zd=n(pl,"P",{});var Fee=s(zd);dhr=r(Fee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),iQ=n(Fee,"A",{href:!0});var hTt=s(iQ);chr=r(hTt,"from_pretrained()"),hTt.forEach(t),fhr=r(Fee," class method or the "),dQ=n(Fee,"A",{href:!0});var pTt=s(dQ);mhr=r(pTt,"from_config()"),pTt.forEach(t),ghr=r(Fee,` class
method.`),Fee.forEach(t),hhr=i(pl),F8=n(pl,"P",{});var SGe=s(F8);phr=r(SGe,"This class cannot be instantiated directly using "),x2e=n(SGe,"CODE",{});var _Tt=s(x2e);_hr=r(_Tt,"__init__()"),_Tt.forEach(t),uhr=r(SGe," (throws an error)."),SGe.forEach(t),bhr=i(pl),Lt=n(pl,"DIV",{class:!0});var k6=s(Lt);T(T8.$$.fragment,k6),vhr=i(k6),$2e=n(k6,"P",{});var uTt=s($2e);Fhr=r(uTt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),uTt.forEach(t),Thr=i(k6),Wd=n(k6,"P",{});var Tee=s(Wd);Mhr=r(Tee,`Note:
Loading a model from its configuration file does `),k2e=n(Tee,"STRONG",{});var bTt=s(k2e);Ehr=r(bTt,"not"),bTt.forEach(t),Chr=r(Tee,` load the model weights. It only affects the
model\u2019s configuration. Use `),cQ=n(Tee,"A",{href:!0});var vTt=s(cQ);whr=r(vTt,"from_pretrained()"),vTt.forEach(t),Ahr=r(Tee," to load the model weights."),Tee.forEach(t),yhr=i(k6),T(JT.$$.fragment,k6),k6.forEach(t),Lhr=i(pl),Ar=n(pl,"DIV",{class:!0});var _l=s(Ar);T(M8.$$.fragment,_l),xhr=i(_l),S2e=n(_l,"P",{});var FTt=s(S2e);$hr=r(FTt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),FTt.forEach(t),khr=i(_l),Za=n(_l,"P",{});var S6=s(Za);Shr=r(S6,"The model class to instantiate is selected based on the "),R2e=n(S6,"CODE",{});var TTt=s(R2e);Rhr=r(TTt,"model_type"),TTt.forEach(t),Phr=r(S6,` property of the config object (either
passed as an argument or loaded from `),P2e=n(S6,"CODE",{});var MTt=s(P2e);Bhr=r(MTt,"pretrained_model_name_or_path"),MTt.forEach(t),Ihr=r(S6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B2e=n(S6,"CODE",{});var ETt=s(B2e);Nhr=r(ETt,"pretrained_model_name_or_path"),ETt.forEach(t),qhr=r(S6,":"),S6.forEach(t),jhr=i(_l),se=n(_l,"UL",{});var le=s(se);YT=n(le,"LI",{});var ERe=s(YT);I2e=n(ERe,"STRONG",{});var CTt=s(I2e);Dhr=r(CTt,"albert"),CTt.forEach(t),Ghr=r(ERe," \u2014 "),fQ=n(ERe,"A",{href:!0});var wTt=s(fQ);Ohr=r(wTt,"TFAlbertForPreTraining"),wTt.forEach(t),Vhr=r(ERe," (ALBERT model)"),ERe.forEach(t),Xhr=i(le),KT=n(le,"LI",{});var CRe=s(KT);N2e=n(CRe,"STRONG",{});var ATt=s(N2e);zhr=r(ATt,"bart"),ATt.forEach(t),Whr=r(CRe," \u2014 "),mQ=n(CRe,"A",{href:!0});var yTt=s(mQ);Qhr=r(yTt,"TFBartForConditionalGeneration"),yTt.forEach(t),Hhr=r(CRe," (BART model)"),CRe.forEach(t),Uhr=i(le),ZT=n(le,"LI",{});var wRe=s(ZT);q2e=n(wRe,"STRONG",{});var LTt=s(q2e);Jhr=r(LTt,"bert"),LTt.forEach(t),Yhr=r(wRe," \u2014 "),gQ=n(wRe,"A",{href:!0});var xTt=s(gQ);Khr=r(xTt,"TFBertForPreTraining"),xTt.forEach(t),Zhr=r(wRe," (BERT model)"),wRe.forEach(t),epr=i(le),e7=n(le,"LI",{});var ARe=s(e7);j2e=n(ARe,"STRONG",{});var $Tt=s(j2e);opr=r($Tt,"camembert"),$Tt.forEach(t),rpr=r(ARe," \u2014 "),hQ=n(ARe,"A",{href:!0});var kTt=s(hQ);tpr=r(kTt,"TFCamembertForMaskedLM"),kTt.forEach(t),apr=r(ARe," (CamemBERT model)"),ARe.forEach(t),npr=i(le),o7=n(le,"LI",{});var yRe=s(o7);D2e=n(yRe,"STRONG",{});var STt=s(D2e);spr=r(STt,"ctrl"),STt.forEach(t),lpr=r(yRe," \u2014 "),pQ=n(yRe,"A",{href:!0});var RTt=s(pQ);ipr=r(RTt,"TFCTRLLMHeadModel"),RTt.forEach(t),dpr=r(yRe," (CTRL model)"),yRe.forEach(t),cpr=i(le),r7=n(le,"LI",{});var LRe=s(r7);G2e=n(LRe,"STRONG",{});var PTt=s(G2e);fpr=r(PTt,"distilbert"),PTt.forEach(t),mpr=r(LRe," \u2014 "),_Q=n(LRe,"A",{href:!0});var BTt=s(_Q);gpr=r(BTt,"TFDistilBertForMaskedLM"),BTt.forEach(t),hpr=r(LRe," (DistilBERT model)"),LRe.forEach(t),ppr=i(le),t7=n(le,"LI",{});var xRe=s(t7);O2e=n(xRe,"STRONG",{});var ITt=s(O2e);_pr=r(ITt,"electra"),ITt.forEach(t),upr=r(xRe," \u2014 "),uQ=n(xRe,"A",{href:!0});var NTt=s(uQ);bpr=r(NTt,"TFElectraForPreTraining"),NTt.forEach(t),vpr=r(xRe," (ELECTRA model)"),xRe.forEach(t),Fpr=i(le),a7=n(le,"LI",{});var $Re=s(a7);V2e=n($Re,"STRONG",{});var qTt=s(V2e);Tpr=r(qTt,"flaubert"),qTt.forEach(t),Mpr=r($Re," \u2014 "),bQ=n($Re,"A",{href:!0});var jTt=s(bQ);Epr=r(jTt,"TFFlaubertWithLMHeadModel"),jTt.forEach(t),Cpr=r($Re," (FlauBERT model)"),$Re.forEach(t),wpr=i(le),n7=n(le,"LI",{});var kRe=s(n7);X2e=n(kRe,"STRONG",{});var DTt=s(X2e);Apr=r(DTt,"funnel"),DTt.forEach(t),ypr=r(kRe," \u2014 "),vQ=n(kRe,"A",{href:!0});var GTt=s(vQ);Lpr=r(GTt,"TFFunnelForPreTraining"),GTt.forEach(t),xpr=r(kRe," (Funnel Transformer model)"),kRe.forEach(t),$pr=i(le),s7=n(le,"LI",{});var SRe=s(s7);z2e=n(SRe,"STRONG",{});var OTt=s(z2e);kpr=r(OTt,"gpt2"),OTt.forEach(t),Spr=r(SRe," \u2014 "),FQ=n(SRe,"A",{href:!0});var VTt=s(FQ);Rpr=r(VTt,"TFGPT2LMHeadModel"),VTt.forEach(t),Ppr=r(SRe," (OpenAI GPT-2 model)"),SRe.forEach(t),Bpr=i(le),l7=n(le,"LI",{});var RRe=s(l7);W2e=n(RRe,"STRONG",{});var XTt=s(W2e);Ipr=r(XTt,"layoutlm"),XTt.forEach(t),Npr=r(RRe," \u2014 "),TQ=n(RRe,"A",{href:!0});var zTt=s(TQ);qpr=r(zTt,"TFLayoutLMForMaskedLM"),zTt.forEach(t),jpr=r(RRe," (LayoutLM model)"),RRe.forEach(t),Dpr=i(le),i7=n(le,"LI",{});var PRe=s(i7);Q2e=n(PRe,"STRONG",{});var WTt=s(Q2e);Gpr=r(WTt,"lxmert"),WTt.forEach(t),Opr=r(PRe," \u2014 "),MQ=n(PRe,"A",{href:!0});var QTt=s(MQ);Vpr=r(QTt,"TFLxmertForPreTraining"),QTt.forEach(t),Xpr=r(PRe," (LXMERT model)"),PRe.forEach(t),zpr=i(le),d7=n(le,"LI",{});var BRe=s(d7);H2e=n(BRe,"STRONG",{});var HTt=s(H2e);Wpr=r(HTt,"mobilebert"),HTt.forEach(t),Qpr=r(BRe," \u2014 "),EQ=n(BRe,"A",{href:!0});var UTt=s(EQ);Hpr=r(UTt,"TFMobileBertForPreTraining"),UTt.forEach(t),Upr=r(BRe," (MobileBERT model)"),BRe.forEach(t),Jpr=i(le),c7=n(le,"LI",{});var IRe=s(c7);U2e=n(IRe,"STRONG",{});var JTt=s(U2e);Ypr=r(JTt,"mpnet"),JTt.forEach(t),Kpr=r(IRe," \u2014 "),CQ=n(IRe,"A",{href:!0});var YTt=s(CQ);Zpr=r(YTt,"TFMPNetForMaskedLM"),YTt.forEach(t),e_r=r(IRe," (MPNet model)"),IRe.forEach(t),o_r=i(le),f7=n(le,"LI",{});var NRe=s(f7);J2e=n(NRe,"STRONG",{});var KTt=s(J2e);r_r=r(KTt,"openai-gpt"),KTt.forEach(t),t_r=r(NRe," \u2014 "),wQ=n(NRe,"A",{href:!0});var ZTt=s(wQ);a_r=r(ZTt,"TFOpenAIGPTLMHeadModel"),ZTt.forEach(t),n_r=r(NRe," (OpenAI GPT model)"),NRe.forEach(t),s_r=i(le),m7=n(le,"LI",{});var qRe=s(m7);Y2e=n(qRe,"STRONG",{});var e7t=s(Y2e);l_r=r(e7t,"roberta"),e7t.forEach(t),i_r=r(qRe," \u2014 "),AQ=n(qRe,"A",{href:!0});var o7t=s(AQ);d_r=r(o7t,"TFRobertaForMaskedLM"),o7t.forEach(t),c_r=r(qRe," (RoBERTa model)"),qRe.forEach(t),f_r=i(le),g7=n(le,"LI",{});var jRe=s(g7);K2e=n(jRe,"STRONG",{});var r7t=s(K2e);m_r=r(r7t,"t5"),r7t.forEach(t),g_r=r(jRe," \u2014 "),yQ=n(jRe,"A",{href:!0});var t7t=s(yQ);h_r=r(t7t,"TFT5ForConditionalGeneration"),t7t.forEach(t),p_r=r(jRe," (T5 model)"),jRe.forEach(t),__r=i(le),h7=n(le,"LI",{});var DRe=s(h7);Z2e=n(DRe,"STRONG",{});var a7t=s(Z2e);u_r=r(a7t,"tapas"),a7t.forEach(t),b_r=r(DRe," \u2014 "),LQ=n(DRe,"A",{href:!0});var n7t=s(LQ);v_r=r(n7t,"TFTapasForMaskedLM"),n7t.forEach(t),F_r=r(DRe," (TAPAS model)"),DRe.forEach(t),T_r=i(le),p7=n(le,"LI",{});var GRe=s(p7);e5e=n(GRe,"STRONG",{});var s7t=s(e5e);M_r=r(s7t,"transfo-xl"),s7t.forEach(t),E_r=r(GRe," \u2014 "),xQ=n(GRe,"A",{href:!0});var l7t=s(xQ);C_r=r(l7t,"TFTransfoXLLMHeadModel"),l7t.forEach(t),w_r=r(GRe," (Transformer-XL model)"),GRe.forEach(t),A_r=i(le),_7=n(le,"LI",{});var ORe=s(_7);o5e=n(ORe,"STRONG",{});var i7t=s(o5e);y_r=r(i7t,"vit_mae"),i7t.forEach(t),L_r=r(ORe," \u2014 "),$Q=n(ORe,"A",{href:!0});var d7t=s($Q);x_r=r(d7t,"TFViTMAEForPreTraining"),d7t.forEach(t),$_r=r(ORe," (ViTMAE model)"),ORe.forEach(t),k_r=i(le),u7=n(le,"LI",{});var VRe=s(u7);r5e=n(VRe,"STRONG",{});var c7t=s(r5e);S_r=r(c7t,"xlm"),c7t.forEach(t),R_r=r(VRe," \u2014 "),kQ=n(VRe,"A",{href:!0});var f7t=s(kQ);P_r=r(f7t,"TFXLMWithLMHeadModel"),f7t.forEach(t),B_r=r(VRe," (XLM model)"),VRe.forEach(t),I_r=i(le),b7=n(le,"LI",{});var XRe=s(b7);t5e=n(XRe,"STRONG",{});var m7t=s(t5e);N_r=r(m7t,"xlm-roberta"),m7t.forEach(t),q_r=r(XRe," \u2014 "),SQ=n(XRe,"A",{href:!0});var g7t=s(SQ);j_r=r(g7t,"TFXLMRobertaForMaskedLM"),g7t.forEach(t),D_r=r(XRe," (XLM-RoBERTa model)"),XRe.forEach(t),G_r=i(le),v7=n(le,"LI",{});var zRe=s(v7);a5e=n(zRe,"STRONG",{});var h7t=s(a5e);O_r=r(h7t,"xlnet"),h7t.forEach(t),V_r=r(zRe," \u2014 "),RQ=n(zRe,"A",{href:!0});var p7t=s(RQ);X_r=r(p7t,"TFXLNetLMHeadModel"),p7t.forEach(t),z_r=r(zRe," (XLNet model)"),zRe.forEach(t),le.forEach(t),W_r=i(_l),T(F7.$$.fragment,_l),_l.forEach(t),pl.forEach(t),yje=i(f),Qd=n(f,"H2",{class:!0});var RGe=s(Qd);T7=n(RGe,"A",{id:!0,class:!0,href:!0});var _7t=s(T7);n5e=n(_7t,"SPAN",{});var u7t=s(n5e);T(E8.$$.fragment,u7t),u7t.forEach(t),_7t.forEach(t),Q_r=i(RGe),s5e=n(RGe,"SPAN",{});var b7t=s(s5e);H_r=r(b7t,"TFAutoModelForCausalLM"),b7t.forEach(t),RGe.forEach(t),Lje=i(f),Zo=n(f,"DIV",{class:!0});var ul=s(Zo);T(C8.$$.fragment,ul),U_r=i(ul),Hd=n(ul,"P",{});var Mee=s(Hd);J_r=r(Mee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),PQ=n(Mee,"A",{href:!0});var v7t=s(PQ);Y_r=r(v7t,"from_pretrained()"),v7t.forEach(t),K_r=r(Mee," class method or the "),BQ=n(Mee,"A",{href:!0});var F7t=s(BQ);Z_r=r(F7t,"from_config()"),F7t.forEach(t),eur=r(Mee,` class
method.`),Mee.forEach(t),our=i(ul),w8=n(ul,"P",{});var PGe=s(w8);rur=r(PGe,"This class cannot be instantiated directly using "),l5e=n(PGe,"CODE",{});var T7t=s(l5e);tur=r(T7t,"__init__()"),T7t.forEach(t),aur=r(PGe," (throws an error)."),PGe.forEach(t),nur=i(ul),xt=n(ul,"DIV",{class:!0});var R6=s(xt);T(A8.$$.fragment,R6),sur=i(R6),i5e=n(R6,"P",{});var M7t=s(i5e);lur=r(M7t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),M7t.forEach(t),iur=i(R6),Ud=n(R6,"P",{});var Eee=s(Ud);dur=r(Eee,`Note:
Loading a model from its configuration file does `),d5e=n(Eee,"STRONG",{});var E7t=s(d5e);cur=r(E7t,"not"),E7t.forEach(t),fur=r(Eee,` load the model weights. It only affects the
model\u2019s configuration. Use `),IQ=n(Eee,"A",{href:!0});var C7t=s(IQ);mur=r(C7t,"from_pretrained()"),C7t.forEach(t),gur=r(Eee," to load the model weights."),Eee.forEach(t),hur=i(R6),T(M7.$$.fragment,R6),R6.forEach(t),pur=i(ul),yr=n(ul,"DIV",{class:!0});var bl=s(yr);T(y8.$$.fragment,bl),_ur=i(bl),c5e=n(bl,"P",{});var w7t=s(c5e);uur=r(w7t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),w7t.forEach(t),bur=i(bl),en=n(bl,"P",{});var P6=s(en);vur=r(P6,"The model class to instantiate is selected based on the "),f5e=n(P6,"CODE",{});var A7t=s(f5e);Fur=r(A7t,"model_type"),A7t.forEach(t),Tur=r(P6,` property of the config object (either
passed as an argument or loaded from `),m5e=n(P6,"CODE",{});var y7t=s(m5e);Mur=r(y7t,"pretrained_model_name_or_path"),y7t.forEach(t),Eur=r(P6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g5e=n(P6,"CODE",{});var L7t=s(g5e);Cur=r(L7t,"pretrained_model_name_or_path"),L7t.forEach(t),wur=r(P6,":"),P6.forEach(t),Aur=i(bl),Te=n(bl,"UL",{});var Ce=s(Te);E7=n(Ce,"LI",{});var WRe=s(E7);h5e=n(WRe,"STRONG",{});var x7t=s(h5e);yur=r(x7t,"bert"),x7t.forEach(t),Lur=r(WRe," \u2014 "),NQ=n(WRe,"A",{href:!0});var $7t=s(NQ);xur=r($7t,"TFBertLMHeadModel"),$7t.forEach(t),$ur=r(WRe," (BERT model)"),WRe.forEach(t),kur=i(Ce),C7=n(Ce,"LI",{});var QRe=s(C7);p5e=n(QRe,"STRONG",{});var k7t=s(p5e);Sur=r(k7t,"camembert"),k7t.forEach(t),Rur=r(QRe," \u2014 "),qQ=n(QRe,"A",{href:!0});var S7t=s(qQ);Pur=r(S7t,"TFCamembertForCausalLM"),S7t.forEach(t),Bur=r(QRe," (CamemBERT model)"),QRe.forEach(t),Iur=i(Ce),w7=n(Ce,"LI",{});var HRe=s(w7);_5e=n(HRe,"STRONG",{});var R7t=s(_5e);Nur=r(R7t,"ctrl"),R7t.forEach(t),qur=r(HRe," \u2014 "),jQ=n(HRe,"A",{href:!0});var P7t=s(jQ);jur=r(P7t,"TFCTRLLMHeadModel"),P7t.forEach(t),Dur=r(HRe," (CTRL model)"),HRe.forEach(t),Gur=i(Ce),A7=n(Ce,"LI",{});var URe=s(A7);u5e=n(URe,"STRONG",{});var B7t=s(u5e);Our=r(B7t,"gpt2"),B7t.forEach(t),Vur=r(URe," \u2014 "),DQ=n(URe,"A",{href:!0});var I7t=s(DQ);Xur=r(I7t,"TFGPT2LMHeadModel"),I7t.forEach(t),zur=r(URe," (OpenAI GPT-2 model)"),URe.forEach(t),Wur=i(Ce),y7=n(Ce,"LI",{});var JRe=s(y7);b5e=n(JRe,"STRONG",{});var N7t=s(b5e);Qur=r(N7t,"gptj"),N7t.forEach(t),Hur=r(JRe," \u2014 "),GQ=n(JRe,"A",{href:!0});var q7t=s(GQ);Uur=r(q7t,"TFGPTJForCausalLM"),q7t.forEach(t),Jur=r(JRe," (GPT-J model)"),JRe.forEach(t),Yur=i(Ce),L7=n(Ce,"LI",{});var YRe=s(L7);v5e=n(YRe,"STRONG",{});var j7t=s(v5e);Kur=r(j7t,"openai-gpt"),j7t.forEach(t),Zur=r(YRe," \u2014 "),OQ=n(YRe,"A",{href:!0});var D7t=s(OQ);e1r=r(D7t,"TFOpenAIGPTLMHeadModel"),D7t.forEach(t),o1r=r(YRe," (OpenAI GPT model)"),YRe.forEach(t),r1r=i(Ce),x7=n(Ce,"LI",{});var KRe=s(x7);F5e=n(KRe,"STRONG",{});var G7t=s(F5e);t1r=r(G7t,"opt"),G7t.forEach(t),a1r=r(KRe," \u2014 "),VQ=n(KRe,"A",{href:!0});var O7t=s(VQ);n1r=r(O7t,"TFOPTForCausalLM"),O7t.forEach(t),s1r=r(KRe," (OPT model)"),KRe.forEach(t),l1r=i(Ce),$7=n(Ce,"LI",{});var ZRe=s($7);T5e=n(ZRe,"STRONG",{});var V7t=s(T5e);i1r=r(V7t,"rembert"),V7t.forEach(t),d1r=r(ZRe," \u2014 "),XQ=n(ZRe,"A",{href:!0});var X7t=s(XQ);c1r=r(X7t,"TFRemBertForCausalLM"),X7t.forEach(t),f1r=r(ZRe," (RemBERT model)"),ZRe.forEach(t),m1r=i(Ce),k7=n(Ce,"LI",{});var ePe=s(k7);M5e=n(ePe,"STRONG",{});var z7t=s(M5e);g1r=r(z7t,"roberta"),z7t.forEach(t),h1r=r(ePe," \u2014 "),zQ=n(ePe,"A",{href:!0});var W7t=s(zQ);p1r=r(W7t,"TFRobertaForCausalLM"),W7t.forEach(t),_1r=r(ePe," (RoBERTa model)"),ePe.forEach(t),u1r=i(Ce),S7=n(Ce,"LI",{});var oPe=s(S7);E5e=n(oPe,"STRONG",{});var Q7t=s(E5e);b1r=r(Q7t,"roformer"),Q7t.forEach(t),v1r=r(oPe," \u2014 "),WQ=n(oPe,"A",{href:!0});var H7t=s(WQ);F1r=r(H7t,"TFRoFormerForCausalLM"),H7t.forEach(t),T1r=r(oPe," (RoFormer model)"),oPe.forEach(t),M1r=i(Ce),R7=n(Ce,"LI",{});var rPe=s(R7);C5e=n(rPe,"STRONG",{});var U7t=s(C5e);E1r=r(U7t,"transfo-xl"),U7t.forEach(t),C1r=r(rPe," \u2014 "),QQ=n(rPe,"A",{href:!0});var J7t=s(QQ);w1r=r(J7t,"TFTransfoXLLMHeadModel"),J7t.forEach(t),A1r=r(rPe," (Transformer-XL model)"),rPe.forEach(t),y1r=i(Ce),P7=n(Ce,"LI",{});var tPe=s(P7);w5e=n(tPe,"STRONG",{});var Y7t=s(w5e);L1r=r(Y7t,"xlm"),Y7t.forEach(t),x1r=r(tPe," \u2014 "),HQ=n(tPe,"A",{href:!0});var K7t=s(HQ);$1r=r(K7t,"TFXLMWithLMHeadModel"),K7t.forEach(t),k1r=r(tPe," (XLM model)"),tPe.forEach(t),S1r=i(Ce),B7=n(Ce,"LI",{});var aPe=s(B7);A5e=n(aPe,"STRONG",{});var Z7t=s(A5e);R1r=r(Z7t,"xlnet"),Z7t.forEach(t),P1r=r(aPe," \u2014 "),UQ=n(aPe,"A",{href:!0});var eMt=s(UQ);B1r=r(eMt,"TFXLNetLMHeadModel"),eMt.forEach(t),I1r=r(aPe," (XLNet model)"),aPe.forEach(t),Ce.forEach(t),N1r=i(bl),T(I7.$$.fragment,bl),bl.forEach(t),ul.forEach(t),xje=i(f),Jd=n(f,"H2",{class:!0});var BGe=s(Jd);N7=n(BGe,"A",{id:!0,class:!0,href:!0});var oMt=s(N7);y5e=n(oMt,"SPAN",{});var rMt=s(y5e);T(L8.$$.fragment,rMt),rMt.forEach(t),oMt.forEach(t),q1r=i(BGe),L5e=n(BGe,"SPAN",{});var tMt=s(L5e);j1r=r(tMt,"TFAutoModelForImageClassification"),tMt.forEach(t),BGe.forEach(t),$je=i(f),er=n(f,"DIV",{class:!0});var vl=s(er);T(x8.$$.fragment,vl),D1r=i(vl),Yd=n(vl,"P",{});var Cee=s(Yd);G1r=r(Cee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),JQ=n(Cee,"A",{href:!0});var aMt=s(JQ);O1r=r(aMt,"from_pretrained()"),aMt.forEach(t),V1r=r(Cee," class method or the "),YQ=n(Cee,"A",{href:!0});var nMt=s(YQ);X1r=r(nMt,"from_config()"),nMt.forEach(t),z1r=r(Cee,` class
method.`),Cee.forEach(t),W1r=i(vl),$8=n(vl,"P",{});var IGe=s($8);Q1r=r(IGe,"This class cannot be instantiated directly using "),x5e=n(IGe,"CODE",{});var sMt=s(x5e);H1r=r(sMt,"__init__()"),sMt.forEach(t),U1r=r(IGe," (throws an error)."),IGe.forEach(t),J1r=i(vl),$t=n(vl,"DIV",{class:!0});var B6=s($t);T(k8.$$.fragment,B6),Y1r=i(B6),$5e=n(B6,"P",{});var lMt=s($5e);K1r=r(lMt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),lMt.forEach(t),Z1r=i(B6),Kd=n(B6,"P",{});var wee=s(Kd);ebr=r(wee,`Note:
Loading a model from its configuration file does `),k5e=n(wee,"STRONG",{});var iMt=s(k5e);obr=r(iMt,"not"),iMt.forEach(t),rbr=r(wee,` load the model weights. It only affects the
model\u2019s configuration. Use `),KQ=n(wee,"A",{href:!0});var dMt=s(KQ);tbr=r(dMt,"from_pretrained()"),dMt.forEach(t),abr=r(wee," to load the model weights."),wee.forEach(t),nbr=i(B6),T(q7.$$.fragment,B6),B6.forEach(t),sbr=i(vl),Lr=n(vl,"DIV",{class:!0});var Fl=s(Lr);T(S8.$$.fragment,Fl),lbr=i(Fl),S5e=n(Fl,"P",{});var cMt=s(S5e);ibr=r(cMt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),cMt.forEach(t),dbr=i(Fl),on=n(Fl,"P",{});var I6=s(on);cbr=r(I6,"The model class to instantiate is selected based on the "),R5e=n(I6,"CODE",{});var fMt=s(R5e);fbr=r(fMt,"model_type"),fMt.forEach(t),mbr=r(I6,` property of the config object (either
passed as an argument or loaded from `),P5e=n(I6,"CODE",{});var mMt=s(P5e);gbr=r(mMt,"pretrained_model_name_or_path"),mMt.forEach(t),hbr=r(I6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B5e=n(I6,"CODE",{});var gMt=s(B5e);pbr=r(gMt,"pretrained_model_name_or_path"),gMt.forEach(t),_br=r(I6,":"),I6.forEach(t),ubr=i(Fl),rn=n(Fl,"UL",{});var N6=s(rn);j7=n(N6,"LI",{});var nPe=s(j7);I5e=n(nPe,"STRONG",{});var hMt=s(I5e);bbr=r(hMt,"convnext"),hMt.forEach(t),vbr=r(nPe," \u2014 "),ZQ=n(nPe,"A",{href:!0});var pMt=s(ZQ);Fbr=r(pMt,"TFConvNextForImageClassification"),pMt.forEach(t),Tbr=r(nPe," (ConvNext model)"),nPe.forEach(t),Mbr=i(N6),D7=n(N6,"LI",{});var sPe=s(D7);N5e=n(sPe,"STRONG",{});var _Mt=s(N5e);Ebr=r(_Mt,"data2vec-vision"),_Mt.forEach(t),Cbr=r(sPe," \u2014 "),eH=n(sPe,"A",{href:!0});var uMt=s(eH);wbr=r(uMt,"TFData2VecVisionForImageClassification"),uMt.forEach(t),Abr=r(sPe," (Data2VecVision model)"),sPe.forEach(t),ybr=i(N6),G7=n(N6,"LI",{});var lPe=s(G7);q5e=n(lPe,"STRONG",{});var bMt=s(q5e);Lbr=r(bMt,"swin"),bMt.forEach(t),xbr=r(lPe," \u2014 "),oH=n(lPe,"A",{href:!0});var vMt=s(oH);$br=r(vMt,"TFSwinForImageClassification"),vMt.forEach(t),kbr=r(lPe," (Swin model)"),lPe.forEach(t),Sbr=i(N6),O7=n(N6,"LI",{});var iPe=s(O7);j5e=n(iPe,"STRONG",{});var FMt=s(j5e);Rbr=r(FMt,"vit"),FMt.forEach(t),Pbr=r(iPe," \u2014 "),rH=n(iPe,"A",{href:!0});var TMt=s(rH);Bbr=r(TMt,"TFViTForImageClassification"),TMt.forEach(t),Ibr=r(iPe," (ViT model)"),iPe.forEach(t),N6.forEach(t),Nbr=i(Fl),T(V7.$$.fragment,Fl),Fl.forEach(t),vl.forEach(t),kje=i(f),Zd=n(f,"H2",{class:!0});var NGe=s(Zd);X7=n(NGe,"A",{id:!0,class:!0,href:!0});var MMt=s(X7);D5e=n(MMt,"SPAN",{});var EMt=s(D5e);T(R8.$$.fragment,EMt),EMt.forEach(t),MMt.forEach(t),qbr=i(NGe),G5e=n(NGe,"SPAN",{});var CMt=s(G5e);jbr=r(CMt,"TFAutoModelForMaskedLM"),CMt.forEach(t),NGe.forEach(t),Sje=i(f),or=n(f,"DIV",{class:!0});var Tl=s(or);T(P8.$$.fragment,Tl),Dbr=i(Tl),ec=n(Tl,"P",{});var Aee=s(ec);Gbr=r(Aee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),tH=n(Aee,"A",{href:!0});var wMt=s(tH);Obr=r(wMt,"from_pretrained()"),wMt.forEach(t),Vbr=r(Aee," class method or the "),aH=n(Aee,"A",{href:!0});var AMt=s(aH);Xbr=r(AMt,"from_config()"),AMt.forEach(t),zbr=r(Aee,` class
method.`),Aee.forEach(t),Wbr=i(Tl),B8=n(Tl,"P",{});var qGe=s(B8);Qbr=r(qGe,"This class cannot be instantiated directly using "),O5e=n(qGe,"CODE",{});var yMt=s(O5e);Hbr=r(yMt,"__init__()"),yMt.forEach(t),Ubr=r(qGe," (throws an error)."),qGe.forEach(t),Jbr=i(Tl),kt=n(Tl,"DIV",{class:!0});var q6=s(kt);T(I8.$$.fragment,q6),Ybr=i(q6),V5e=n(q6,"P",{});var LMt=s(V5e);Kbr=r(LMt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),LMt.forEach(t),Zbr=i(q6),oc=n(q6,"P",{});var yee=s(oc);e2r=r(yee,`Note:
Loading a model from its configuration file does `),X5e=n(yee,"STRONG",{});var xMt=s(X5e);o2r=r(xMt,"not"),xMt.forEach(t),r2r=r(yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),nH=n(yee,"A",{href:!0});var $Mt=s(nH);t2r=r($Mt,"from_pretrained()"),$Mt.forEach(t),a2r=r(yee," to load the model weights."),yee.forEach(t),n2r=i(q6),T(z7.$$.fragment,q6),q6.forEach(t),s2r=i(Tl),xr=n(Tl,"DIV",{class:!0});var Ml=s(xr);T(N8.$$.fragment,Ml),l2r=i(Ml),z5e=n(Ml,"P",{});var kMt=s(z5e);i2r=r(kMt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),kMt.forEach(t),d2r=i(Ml),tn=n(Ml,"P",{});var j6=s(tn);c2r=r(j6,"The model class to instantiate is selected based on the "),W5e=n(j6,"CODE",{});var SMt=s(W5e);f2r=r(SMt,"model_type"),SMt.forEach(t),m2r=r(j6,` property of the config object (either
passed as an argument or loaded from `),Q5e=n(j6,"CODE",{});var RMt=s(Q5e);g2r=r(RMt,"pretrained_model_name_or_path"),RMt.forEach(t),h2r=r(j6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H5e=n(j6,"CODE",{});var PMt=s(H5e);p2r=r(PMt,"pretrained_model_name_or_path"),PMt.forEach(t),_2r=r(j6,":"),j6.forEach(t),u2r=i(Ml),ie=n(Ml,"UL",{});var fe=s(ie);W7=n(fe,"LI",{});var dPe=s(W7);U5e=n(dPe,"STRONG",{});var BMt=s(U5e);b2r=r(BMt,"albert"),BMt.forEach(t),v2r=r(dPe," \u2014 "),sH=n(dPe,"A",{href:!0});var IMt=s(sH);F2r=r(IMt,"TFAlbertForMaskedLM"),IMt.forEach(t),T2r=r(dPe," (ALBERT model)"),dPe.forEach(t),M2r=i(fe),Q7=n(fe,"LI",{});var cPe=s(Q7);J5e=n(cPe,"STRONG",{});var NMt=s(J5e);E2r=r(NMt,"bert"),NMt.forEach(t),C2r=r(cPe," \u2014 "),lH=n(cPe,"A",{href:!0});var qMt=s(lH);w2r=r(qMt,"TFBertForMaskedLM"),qMt.forEach(t),A2r=r(cPe," (BERT model)"),cPe.forEach(t),y2r=i(fe),H7=n(fe,"LI",{});var fPe=s(H7);Y5e=n(fPe,"STRONG",{});var jMt=s(Y5e);L2r=r(jMt,"camembert"),jMt.forEach(t),x2r=r(fPe," \u2014 "),iH=n(fPe,"A",{href:!0});var DMt=s(iH);$2r=r(DMt,"TFCamembertForMaskedLM"),DMt.forEach(t),k2r=r(fPe," (CamemBERT model)"),fPe.forEach(t),S2r=i(fe),U7=n(fe,"LI",{});var mPe=s(U7);K5e=n(mPe,"STRONG",{});var GMt=s(K5e);R2r=r(GMt,"convbert"),GMt.forEach(t),P2r=r(mPe," \u2014 "),dH=n(mPe,"A",{href:!0});var OMt=s(dH);B2r=r(OMt,"TFConvBertForMaskedLM"),OMt.forEach(t),I2r=r(mPe," (ConvBERT model)"),mPe.forEach(t),N2r=i(fe),J7=n(fe,"LI",{});var gPe=s(J7);Z5e=n(gPe,"STRONG",{});var VMt=s(Z5e);q2r=r(VMt,"deberta"),VMt.forEach(t),j2r=r(gPe," \u2014 "),cH=n(gPe,"A",{href:!0});var XMt=s(cH);D2r=r(XMt,"TFDebertaForMaskedLM"),XMt.forEach(t),G2r=r(gPe," (DeBERTa model)"),gPe.forEach(t),O2r=i(fe),Y7=n(fe,"LI",{});var hPe=s(Y7);eve=n(hPe,"STRONG",{});var zMt=s(eve);V2r=r(zMt,"deberta-v2"),zMt.forEach(t),X2r=r(hPe," \u2014 "),fH=n(hPe,"A",{href:!0});var WMt=s(fH);z2r=r(WMt,"TFDebertaV2ForMaskedLM"),WMt.forEach(t),W2r=r(hPe," (DeBERTa-v2 model)"),hPe.forEach(t),Q2r=i(fe),K7=n(fe,"LI",{});var pPe=s(K7);ove=n(pPe,"STRONG",{});var QMt=s(ove);H2r=r(QMt,"distilbert"),QMt.forEach(t),U2r=r(pPe," \u2014 "),mH=n(pPe,"A",{href:!0});var HMt=s(mH);J2r=r(HMt,"TFDistilBertForMaskedLM"),HMt.forEach(t),Y2r=r(pPe," (DistilBERT model)"),pPe.forEach(t),K2r=i(fe),Z7=n(fe,"LI",{});var _Pe=s(Z7);rve=n(_Pe,"STRONG",{});var UMt=s(rve);Z2r=r(UMt,"electra"),UMt.forEach(t),e5r=r(_Pe," \u2014 "),gH=n(_Pe,"A",{href:!0});var JMt=s(gH);o5r=r(JMt,"TFElectraForMaskedLM"),JMt.forEach(t),r5r=r(_Pe," (ELECTRA model)"),_Pe.forEach(t),t5r=i(fe),eM=n(fe,"LI",{});var uPe=s(eM);tve=n(uPe,"STRONG",{});var YMt=s(tve);a5r=r(YMt,"flaubert"),YMt.forEach(t),n5r=r(uPe," \u2014 "),hH=n(uPe,"A",{href:!0});var KMt=s(hH);s5r=r(KMt,"TFFlaubertWithLMHeadModel"),KMt.forEach(t),l5r=r(uPe," (FlauBERT model)"),uPe.forEach(t),i5r=i(fe),oM=n(fe,"LI",{});var bPe=s(oM);ave=n(bPe,"STRONG",{});var ZMt=s(ave);d5r=r(ZMt,"funnel"),ZMt.forEach(t),c5r=r(bPe," \u2014 "),pH=n(bPe,"A",{href:!0});var e4t=s(pH);f5r=r(e4t,"TFFunnelForMaskedLM"),e4t.forEach(t),m5r=r(bPe," (Funnel Transformer model)"),bPe.forEach(t),g5r=i(fe),rM=n(fe,"LI",{});var vPe=s(rM);nve=n(vPe,"STRONG",{});var o4t=s(nve);h5r=r(o4t,"layoutlm"),o4t.forEach(t),p5r=r(vPe," \u2014 "),_H=n(vPe,"A",{href:!0});var r4t=s(_H);_5r=r(r4t,"TFLayoutLMForMaskedLM"),r4t.forEach(t),u5r=r(vPe," (LayoutLM model)"),vPe.forEach(t),b5r=i(fe),tM=n(fe,"LI",{});var FPe=s(tM);sve=n(FPe,"STRONG",{});var t4t=s(sve);v5r=r(t4t,"longformer"),t4t.forEach(t),F5r=r(FPe," \u2014 "),uH=n(FPe,"A",{href:!0});var a4t=s(uH);T5r=r(a4t,"TFLongformerForMaskedLM"),a4t.forEach(t),M5r=r(FPe," (Longformer model)"),FPe.forEach(t),E5r=i(fe),aM=n(fe,"LI",{});var TPe=s(aM);lve=n(TPe,"STRONG",{});var n4t=s(lve);C5r=r(n4t,"mobilebert"),n4t.forEach(t),w5r=r(TPe," \u2014 "),bH=n(TPe,"A",{href:!0});var s4t=s(bH);A5r=r(s4t,"TFMobileBertForMaskedLM"),s4t.forEach(t),y5r=r(TPe," (MobileBERT model)"),TPe.forEach(t),L5r=i(fe),nM=n(fe,"LI",{});var MPe=s(nM);ive=n(MPe,"STRONG",{});var l4t=s(ive);x5r=r(l4t,"mpnet"),l4t.forEach(t),$5r=r(MPe," \u2014 "),vH=n(MPe,"A",{href:!0});var i4t=s(vH);k5r=r(i4t,"TFMPNetForMaskedLM"),i4t.forEach(t),S5r=r(MPe," (MPNet model)"),MPe.forEach(t),R5r=i(fe),sM=n(fe,"LI",{});var EPe=s(sM);dve=n(EPe,"STRONG",{});var d4t=s(dve);P5r=r(d4t,"rembert"),d4t.forEach(t),B5r=r(EPe," \u2014 "),FH=n(EPe,"A",{href:!0});var c4t=s(FH);I5r=r(c4t,"TFRemBertForMaskedLM"),c4t.forEach(t),N5r=r(EPe," (RemBERT model)"),EPe.forEach(t),q5r=i(fe),lM=n(fe,"LI",{});var CPe=s(lM);cve=n(CPe,"STRONG",{});var f4t=s(cve);j5r=r(f4t,"roberta"),f4t.forEach(t),D5r=r(CPe," \u2014 "),TH=n(CPe,"A",{href:!0});var m4t=s(TH);G5r=r(m4t,"TFRobertaForMaskedLM"),m4t.forEach(t),O5r=r(CPe," (RoBERTa model)"),CPe.forEach(t),V5r=i(fe),iM=n(fe,"LI",{});var wPe=s(iM);fve=n(wPe,"STRONG",{});var g4t=s(fve);X5r=r(g4t,"roformer"),g4t.forEach(t),z5r=r(wPe," \u2014 "),MH=n(wPe,"A",{href:!0});var h4t=s(MH);W5r=r(h4t,"TFRoFormerForMaskedLM"),h4t.forEach(t),Q5r=r(wPe," (RoFormer model)"),wPe.forEach(t),H5r=i(fe),dM=n(fe,"LI",{});var APe=s(dM);mve=n(APe,"STRONG",{});var p4t=s(mve);U5r=r(p4t,"tapas"),p4t.forEach(t),J5r=r(APe," \u2014 "),EH=n(APe,"A",{href:!0});var _4t=s(EH);Y5r=r(_4t,"TFTapasForMaskedLM"),_4t.forEach(t),K5r=r(APe," (TAPAS model)"),APe.forEach(t),Z5r=i(fe),cM=n(fe,"LI",{});var yPe=s(cM);gve=n(yPe,"STRONG",{});var u4t=s(gve);evr=r(u4t,"xlm"),u4t.forEach(t),ovr=r(yPe," \u2014 "),CH=n(yPe,"A",{href:!0});var b4t=s(CH);rvr=r(b4t,"TFXLMWithLMHeadModel"),b4t.forEach(t),tvr=r(yPe," (XLM model)"),yPe.forEach(t),avr=i(fe),fM=n(fe,"LI",{});var LPe=s(fM);hve=n(LPe,"STRONG",{});var v4t=s(hve);nvr=r(v4t,"xlm-roberta"),v4t.forEach(t),svr=r(LPe," \u2014 "),wH=n(LPe,"A",{href:!0});var F4t=s(wH);lvr=r(F4t,"TFXLMRobertaForMaskedLM"),F4t.forEach(t),ivr=r(LPe," (XLM-RoBERTa model)"),LPe.forEach(t),fe.forEach(t),dvr=i(Ml),T(mM.$$.fragment,Ml),Ml.forEach(t),Tl.forEach(t),Rje=i(f),rc=n(f,"H2",{class:!0});var jGe=s(rc);gM=n(jGe,"A",{id:!0,class:!0,href:!0});var T4t=s(gM);pve=n(T4t,"SPAN",{});var M4t=s(pve);T(q8.$$.fragment,M4t),M4t.forEach(t),T4t.forEach(t),cvr=i(jGe),_ve=n(jGe,"SPAN",{});var E4t=s(_ve);fvr=r(E4t,"TFAutoModelForSeq2SeqLM"),E4t.forEach(t),jGe.forEach(t),Pje=i(f),rr=n(f,"DIV",{class:!0});var El=s(rr);T(j8.$$.fragment,El),mvr=i(El),tc=n(El,"P",{});var Lee=s(tc);gvr=r(Lee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),AH=n(Lee,"A",{href:!0});var C4t=s(AH);hvr=r(C4t,"from_pretrained()"),C4t.forEach(t),pvr=r(Lee," class method or the "),yH=n(Lee,"A",{href:!0});var w4t=s(yH);_vr=r(w4t,"from_config()"),w4t.forEach(t),uvr=r(Lee,` class
method.`),Lee.forEach(t),bvr=i(El),D8=n(El,"P",{});var DGe=s(D8);vvr=r(DGe,"This class cannot be instantiated directly using "),uve=n(DGe,"CODE",{});var A4t=s(uve);Fvr=r(A4t,"__init__()"),A4t.forEach(t),Tvr=r(DGe," (throws an error)."),DGe.forEach(t),Mvr=i(El),St=n(El,"DIV",{class:!0});var D6=s(St);T(G8.$$.fragment,D6),Evr=i(D6),bve=n(D6,"P",{});var y4t=s(bve);Cvr=r(y4t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),y4t.forEach(t),wvr=i(D6),ac=n(D6,"P",{});var xee=s(ac);Avr=r(xee,`Note:
Loading a model from its configuration file does `),vve=n(xee,"STRONG",{});var L4t=s(vve);yvr=r(L4t,"not"),L4t.forEach(t),Lvr=r(xee,` load the model weights. It only affects the
model\u2019s configuration. Use `),LH=n(xee,"A",{href:!0});var x4t=s(LH);xvr=r(x4t,"from_pretrained()"),x4t.forEach(t),$vr=r(xee," to load the model weights."),xee.forEach(t),kvr=i(D6),T(hM.$$.fragment,D6),D6.forEach(t),Svr=i(El),$r=n(El,"DIV",{class:!0});var Cl=s($r);T(O8.$$.fragment,Cl),Rvr=i(Cl),Fve=n(Cl,"P",{});var $4t=s(Fve);Pvr=r($4t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),$4t.forEach(t),Bvr=i(Cl),an=n(Cl,"P",{});var G6=s(an);Ivr=r(G6,"The model class to instantiate is selected based on the "),Tve=n(G6,"CODE",{});var k4t=s(Tve);Nvr=r(k4t,"model_type"),k4t.forEach(t),qvr=r(G6,` property of the config object (either
passed as an argument or loaded from `),Mve=n(G6,"CODE",{});var S4t=s(Mve);jvr=r(S4t,"pretrained_model_name_or_path"),S4t.forEach(t),Dvr=r(G6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Eve=n(G6,"CODE",{});var R4t=s(Eve);Gvr=r(R4t,"pretrained_model_name_or_path"),R4t.forEach(t),Ovr=r(G6,":"),G6.forEach(t),Vvr=i(Cl),ye=n(Cl,"UL",{});var Be=s(ye);pM=n(Be,"LI",{});var xPe=s(pM);Cve=n(xPe,"STRONG",{});var P4t=s(Cve);Xvr=r(P4t,"bart"),P4t.forEach(t),zvr=r(xPe," \u2014 "),xH=n(xPe,"A",{href:!0});var B4t=s(xH);Wvr=r(B4t,"TFBartForConditionalGeneration"),B4t.forEach(t),Qvr=r(xPe," (BART model)"),xPe.forEach(t),Hvr=i(Be),_M=n(Be,"LI",{});var $Pe=s(_M);wve=n($Pe,"STRONG",{});var I4t=s(wve);Uvr=r(I4t,"blenderbot"),I4t.forEach(t),Jvr=r($Pe," \u2014 "),$H=n($Pe,"A",{href:!0});var N4t=s($H);Yvr=r(N4t,"TFBlenderbotForConditionalGeneration"),N4t.forEach(t),Kvr=r($Pe," (Blenderbot model)"),$Pe.forEach(t),Zvr=i(Be),uM=n(Be,"LI",{});var kPe=s(uM);Ave=n(kPe,"STRONG",{});var q4t=s(Ave);eFr=r(q4t,"blenderbot-small"),q4t.forEach(t),oFr=r(kPe," \u2014 "),kH=n(kPe,"A",{href:!0});var j4t=s(kH);rFr=r(j4t,"TFBlenderbotSmallForConditionalGeneration"),j4t.forEach(t),tFr=r(kPe," (BlenderbotSmall model)"),kPe.forEach(t),aFr=i(Be),bM=n(Be,"LI",{});var SPe=s(bM);yve=n(SPe,"STRONG",{});var D4t=s(yve);nFr=r(D4t,"encoder-decoder"),D4t.forEach(t),sFr=r(SPe," \u2014 "),SH=n(SPe,"A",{href:!0});var G4t=s(SH);lFr=r(G4t,"TFEncoderDecoderModel"),G4t.forEach(t),iFr=r(SPe," (Encoder decoder model)"),SPe.forEach(t),dFr=i(Be),vM=n(Be,"LI",{});var RPe=s(vM);Lve=n(RPe,"STRONG",{});var O4t=s(Lve);cFr=r(O4t,"led"),O4t.forEach(t),fFr=r(RPe," \u2014 "),RH=n(RPe,"A",{href:!0});var V4t=s(RH);mFr=r(V4t,"TFLEDForConditionalGeneration"),V4t.forEach(t),gFr=r(RPe," (LED model)"),RPe.forEach(t),hFr=i(Be),FM=n(Be,"LI",{});var PPe=s(FM);xve=n(PPe,"STRONG",{});var X4t=s(xve);pFr=r(X4t,"marian"),X4t.forEach(t),_Fr=r(PPe," \u2014 "),PH=n(PPe,"A",{href:!0});var z4t=s(PH);uFr=r(z4t,"TFMarianMTModel"),z4t.forEach(t),bFr=r(PPe," (Marian model)"),PPe.forEach(t),vFr=i(Be),TM=n(Be,"LI",{});var BPe=s(TM);$ve=n(BPe,"STRONG",{});var W4t=s($ve);FFr=r(W4t,"mbart"),W4t.forEach(t),TFr=r(BPe," \u2014 "),BH=n(BPe,"A",{href:!0});var Q4t=s(BH);MFr=r(Q4t,"TFMBartForConditionalGeneration"),Q4t.forEach(t),EFr=r(BPe," (mBART model)"),BPe.forEach(t),CFr=i(Be),MM=n(Be,"LI",{});var IPe=s(MM);kve=n(IPe,"STRONG",{});var H4t=s(kve);wFr=r(H4t,"mt5"),H4t.forEach(t),AFr=r(IPe," \u2014 "),IH=n(IPe,"A",{href:!0});var U4t=s(IH);yFr=r(U4t,"TFMT5ForConditionalGeneration"),U4t.forEach(t),LFr=r(IPe," (mT5 model)"),IPe.forEach(t),xFr=i(Be),EM=n(Be,"LI",{});var NPe=s(EM);Sve=n(NPe,"STRONG",{});var J4t=s(Sve);$Fr=r(J4t,"pegasus"),J4t.forEach(t),kFr=r(NPe," \u2014 "),NH=n(NPe,"A",{href:!0});var Y4t=s(NH);SFr=r(Y4t,"TFPegasusForConditionalGeneration"),Y4t.forEach(t),RFr=r(NPe," (Pegasus model)"),NPe.forEach(t),PFr=i(Be),CM=n(Be,"LI",{});var qPe=s(CM);Rve=n(qPe,"STRONG",{});var K4t=s(Rve);BFr=r(K4t,"t5"),K4t.forEach(t),IFr=r(qPe," \u2014 "),qH=n(qPe,"A",{href:!0});var Z4t=s(qH);NFr=r(Z4t,"TFT5ForConditionalGeneration"),Z4t.forEach(t),qFr=r(qPe," (T5 model)"),qPe.forEach(t),Be.forEach(t),jFr=i(Cl),T(wM.$$.fragment,Cl),Cl.forEach(t),El.forEach(t),Bje=i(f),nc=n(f,"H2",{class:!0});var GGe=s(nc);AM=n(GGe,"A",{id:!0,class:!0,href:!0});var eEt=s(AM);Pve=n(eEt,"SPAN",{});var oEt=s(Pve);T(V8.$$.fragment,oEt),oEt.forEach(t),eEt.forEach(t),DFr=i(GGe),Bve=n(GGe,"SPAN",{});var rEt=s(Bve);GFr=r(rEt,"TFAutoModelForSequenceClassification"),rEt.forEach(t),GGe.forEach(t),Ije=i(f),tr=n(f,"DIV",{class:!0});var wl=s(tr);T(X8.$$.fragment,wl),OFr=i(wl),sc=n(wl,"P",{});var $ee=s(sc);VFr=r($ee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),jH=n($ee,"A",{href:!0});var tEt=s(jH);XFr=r(tEt,"from_pretrained()"),tEt.forEach(t),zFr=r($ee," class method or the "),DH=n($ee,"A",{href:!0});var aEt=s(DH);WFr=r(aEt,"from_config()"),aEt.forEach(t),QFr=r($ee,` class
method.`),$ee.forEach(t),HFr=i(wl),z8=n(wl,"P",{});var OGe=s(z8);UFr=r(OGe,"This class cannot be instantiated directly using "),Ive=n(OGe,"CODE",{});var nEt=s(Ive);JFr=r(nEt,"__init__()"),nEt.forEach(t),YFr=r(OGe," (throws an error)."),OGe.forEach(t),KFr=i(wl),Rt=n(wl,"DIV",{class:!0});var O6=s(Rt);T(W8.$$.fragment,O6),ZFr=i(O6),Nve=n(O6,"P",{});var sEt=s(Nve);e0r=r(sEt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),sEt.forEach(t),o0r=i(O6),lc=n(O6,"P",{});var kee=s(lc);r0r=r(kee,`Note:
Loading a model from its configuration file does `),qve=n(kee,"STRONG",{});var lEt=s(qve);t0r=r(lEt,"not"),lEt.forEach(t),a0r=r(kee,` load the model weights. It only affects the
model\u2019s configuration. Use `),GH=n(kee,"A",{href:!0});var iEt=s(GH);n0r=r(iEt,"from_pretrained()"),iEt.forEach(t),s0r=r(kee," to load the model weights."),kee.forEach(t),l0r=i(O6),T(yM.$$.fragment,O6),O6.forEach(t),i0r=i(wl),kr=n(wl,"DIV",{class:!0});var Al=s(kr);T(Q8.$$.fragment,Al),d0r=i(Al),jve=n(Al,"P",{});var dEt=s(jve);c0r=r(dEt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),dEt.forEach(t),f0r=i(Al),nn=n(Al,"P",{});var V6=s(nn);m0r=r(V6,"The model class to instantiate is selected based on the "),Dve=n(V6,"CODE",{});var cEt=s(Dve);g0r=r(cEt,"model_type"),cEt.forEach(t),h0r=r(V6,` property of the config object (either
passed as an argument or loaded from `),Gve=n(V6,"CODE",{});var fEt=s(Gve);p0r=r(fEt,"pretrained_model_name_or_path"),fEt.forEach(t),_0r=r(V6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ove=n(V6,"CODE",{});var mEt=s(Ove);u0r=r(mEt,"pretrained_model_name_or_path"),mEt.forEach(t),b0r=r(V6,":"),V6.forEach(t),v0r=i(Al),oe=n(Al,"UL",{});var ae=s(oe);LM=n(ae,"LI",{});var jPe=s(LM);Vve=n(jPe,"STRONG",{});var gEt=s(Vve);F0r=r(gEt,"albert"),gEt.forEach(t),T0r=r(jPe," \u2014 "),OH=n(jPe,"A",{href:!0});var hEt=s(OH);M0r=r(hEt,"TFAlbertForSequenceClassification"),hEt.forEach(t),E0r=r(jPe," (ALBERT model)"),jPe.forEach(t),C0r=i(ae),xM=n(ae,"LI",{});var DPe=s(xM);Xve=n(DPe,"STRONG",{});var pEt=s(Xve);w0r=r(pEt,"bert"),pEt.forEach(t),A0r=r(DPe," \u2014 "),VH=n(DPe,"A",{href:!0});var _Et=s(VH);y0r=r(_Et,"TFBertForSequenceClassification"),_Et.forEach(t),L0r=r(DPe," (BERT model)"),DPe.forEach(t),x0r=i(ae),$M=n(ae,"LI",{});var GPe=s($M);zve=n(GPe,"STRONG",{});var uEt=s(zve);$0r=r(uEt,"camembert"),uEt.forEach(t),k0r=r(GPe," \u2014 "),XH=n(GPe,"A",{href:!0});var bEt=s(XH);S0r=r(bEt,"TFCamembertForSequenceClassification"),bEt.forEach(t),R0r=r(GPe," (CamemBERT model)"),GPe.forEach(t),P0r=i(ae),kM=n(ae,"LI",{});var OPe=s(kM);Wve=n(OPe,"STRONG",{});var vEt=s(Wve);B0r=r(vEt,"convbert"),vEt.forEach(t),I0r=r(OPe," \u2014 "),zH=n(OPe,"A",{href:!0});var FEt=s(zH);N0r=r(FEt,"TFConvBertForSequenceClassification"),FEt.forEach(t),q0r=r(OPe," (ConvBERT model)"),OPe.forEach(t),j0r=i(ae),SM=n(ae,"LI",{});var VPe=s(SM);Qve=n(VPe,"STRONG",{});var TEt=s(Qve);D0r=r(TEt,"ctrl"),TEt.forEach(t),G0r=r(VPe," \u2014 "),WH=n(VPe,"A",{href:!0});var MEt=s(WH);O0r=r(MEt,"TFCTRLForSequenceClassification"),MEt.forEach(t),V0r=r(VPe," (CTRL model)"),VPe.forEach(t),X0r=i(ae),RM=n(ae,"LI",{});var XPe=s(RM);Hve=n(XPe,"STRONG",{});var EEt=s(Hve);z0r=r(EEt,"deberta"),EEt.forEach(t),W0r=r(XPe," \u2014 "),QH=n(XPe,"A",{href:!0});var CEt=s(QH);Q0r=r(CEt,"TFDebertaForSequenceClassification"),CEt.forEach(t),H0r=r(XPe," (DeBERTa model)"),XPe.forEach(t),U0r=i(ae),PM=n(ae,"LI",{});var zPe=s(PM);Uve=n(zPe,"STRONG",{});var wEt=s(Uve);J0r=r(wEt,"deberta-v2"),wEt.forEach(t),Y0r=r(zPe," \u2014 "),HH=n(zPe,"A",{href:!0});var AEt=s(HH);K0r=r(AEt,"TFDebertaV2ForSequenceClassification"),AEt.forEach(t),Z0r=r(zPe," (DeBERTa-v2 model)"),zPe.forEach(t),eTr=i(ae),BM=n(ae,"LI",{});var WPe=s(BM);Jve=n(WPe,"STRONG",{});var yEt=s(Jve);oTr=r(yEt,"distilbert"),yEt.forEach(t),rTr=r(WPe," \u2014 "),UH=n(WPe,"A",{href:!0});var LEt=s(UH);tTr=r(LEt,"TFDistilBertForSequenceClassification"),LEt.forEach(t),aTr=r(WPe," (DistilBERT model)"),WPe.forEach(t),nTr=i(ae),IM=n(ae,"LI",{});var QPe=s(IM);Yve=n(QPe,"STRONG",{});var xEt=s(Yve);sTr=r(xEt,"electra"),xEt.forEach(t),lTr=r(QPe," \u2014 "),JH=n(QPe,"A",{href:!0});var $Et=s(JH);iTr=r($Et,"TFElectraForSequenceClassification"),$Et.forEach(t),dTr=r(QPe," (ELECTRA model)"),QPe.forEach(t),cTr=i(ae),NM=n(ae,"LI",{});var HPe=s(NM);Kve=n(HPe,"STRONG",{});var kEt=s(Kve);fTr=r(kEt,"flaubert"),kEt.forEach(t),mTr=r(HPe," \u2014 "),YH=n(HPe,"A",{href:!0});var SEt=s(YH);gTr=r(SEt,"TFFlaubertForSequenceClassification"),SEt.forEach(t),hTr=r(HPe," (FlauBERT model)"),HPe.forEach(t),pTr=i(ae),qM=n(ae,"LI",{});var UPe=s(qM);Zve=n(UPe,"STRONG",{});var REt=s(Zve);_Tr=r(REt,"funnel"),REt.forEach(t),uTr=r(UPe," \u2014 "),KH=n(UPe,"A",{href:!0});var PEt=s(KH);bTr=r(PEt,"TFFunnelForSequenceClassification"),PEt.forEach(t),vTr=r(UPe," (Funnel Transformer model)"),UPe.forEach(t),FTr=i(ae),jM=n(ae,"LI",{});var JPe=s(jM);eFe=n(JPe,"STRONG",{});var BEt=s(eFe);TTr=r(BEt,"gpt2"),BEt.forEach(t),MTr=r(JPe," \u2014 "),ZH=n(JPe,"A",{href:!0});var IEt=s(ZH);ETr=r(IEt,"TFGPT2ForSequenceClassification"),IEt.forEach(t),CTr=r(JPe," (OpenAI GPT-2 model)"),JPe.forEach(t),wTr=i(ae),DM=n(ae,"LI",{});var YPe=s(DM);oFe=n(YPe,"STRONG",{});var NEt=s(oFe);ATr=r(NEt,"gptj"),NEt.forEach(t),yTr=r(YPe," \u2014 "),eU=n(YPe,"A",{href:!0});var qEt=s(eU);LTr=r(qEt,"TFGPTJForSequenceClassification"),qEt.forEach(t),xTr=r(YPe," (GPT-J model)"),YPe.forEach(t),$Tr=i(ae),GM=n(ae,"LI",{});var KPe=s(GM);rFe=n(KPe,"STRONG",{});var jEt=s(rFe);kTr=r(jEt,"layoutlm"),jEt.forEach(t),STr=r(KPe," \u2014 "),oU=n(KPe,"A",{href:!0});var DEt=s(oU);RTr=r(DEt,"TFLayoutLMForSequenceClassification"),DEt.forEach(t),PTr=r(KPe," (LayoutLM model)"),KPe.forEach(t),BTr=i(ae),OM=n(ae,"LI",{});var ZPe=s(OM);tFe=n(ZPe,"STRONG",{});var GEt=s(tFe);ITr=r(GEt,"longformer"),GEt.forEach(t),NTr=r(ZPe," \u2014 "),rU=n(ZPe,"A",{href:!0});var OEt=s(rU);qTr=r(OEt,"TFLongformerForSequenceClassification"),OEt.forEach(t),jTr=r(ZPe," (Longformer model)"),ZPe.forEach(t),DTr=i(ae),VM=n(ae,"LI",{});var eBe=s(VM);aFe=n(eBe,"STRONG",{});var VEt=s(aFe);GTr=r(VEt,"mobilebert"),VEt.forEach(t),OTr=r(eBe," \u2014 "),tU=n(eBe,"A",{href:!0});var XEt=s(tU);VTr=r(XEt,"TFMobileBertForSequenceClassification"),XEt.forEach(t),XTr=r(eBe," (MobileBERT model)"),eBe.forEach(t),zTr=i(ae),XM=n(ae,"LI",{});var oBe=s(XM);nFe=n(oBe,"STRONG",{});var zEt=s(nFe);WTr=r(zEt,"mpnet"),zEt.forEach(t),QTr=r(oBe," \u2014 "),aU=n(oBe,"A",{href:!0});var WEt=s(aU);HTr=r(WEt,"TFMPNetForSequenceClassification"),WEt.forEach(t),UTr=r(oBe," (MPNet model)"),oBe.forEach(t),JTr=i(ae),zM=n(ae,"LI",{});var rBe=s(zM);sFe=n(rBe,"STRONG",{});var QEt=s(sFe);YTr=r(QEt,"openai-gpt"),QEt.forEach(t),KTr=r(rBe," \u2014 "),nU=n(rBe,"A",{href:!0});var HEt=s(nU);ZTr=r(HEt,"TFOpenAIGPTForSequenceClassification"),HEt.forEach(t),e7r=r(rBe," (OpenAI GPT model)"),rBe.forEach(t),o7r=i(ae),WM=n(ae,"LI",{});var tBe=s(WM);lFe=n(tBe,"STRONG",{});var UEt=s(lFe);r7r=r(UEt,"rembert"),UEt.forEach(t),t7r=r(tBe," \u2014 "),sU=n(tBe,"A",{href:!0});var JEt=s(sU);a7r=r(JEt,"TFRemBertForSequenceClassification"),JEt.forEach(t),n7r=r(tBe," (RemBERT model)"),tBe.forEach(t),s7r=i(ae),QM=n(ae,"LI",{});var aBe=s(QM);iFe=n(aBe,"STRONG",{});var YEt=s(iFe);l7r=r(YEt,"roberta"),YEt.forEach(t),i7r=r(aBe," \u2014 "),lU=n(aBe,"A",{href:!0});var KEt=s(lU);d7r=r(KEt,"TFRobertaForSequenceClassification"),KEt.forEach(t),c7r=r(aBe," (RoBERTa model)"),aBe.forEach(t),f7r=i(ae),HM=n(ae,"LI",{});var nBe=s(HM);dFe=n(nBe,"STRONG",{});var ZEt=s(dFe);m7r=r(ZEt,"roformer"),ZEt.forEach(t),g7r=r(nBe," \u2014 "),iU=n(nBe,"A",{href:!0});var eCt=s(iU);h7r=r(eCt,"TFRoFormerForSequenceClassification"),eCt.forEach(t),p7r=r(nBe," (RoFormer model)"),nBe.forEach(t),_7r=i(ae),UM=n(ae,"LI",{});var sBe=s(UM);cFe=n(sBe,"STRONG",{});var oCt=s(cFe);u7r=r(oCt,"tapas"),oCt.forEach(t),b7r=r(sBe," \u2014 "),dU=n(sBe,"A",{href:!0});var rCt=s(dU);v7r=r(rCt,"TFTapasForSequenceClassification"),rCt.forEach(t),F7r=r(sBe," (TAPAS model)"),sBe.forEach(t),T7r=i(ae),JM=n(ae,"LI",{});var lBe=s(JM);fFe=n(lBe,"STRONG",{});var tCt=s(fFe);M7r=r(tCt,"transfo-xl"),tCt.forEach(t),E7r=r(lBe," \u2014 "),cU=n(lBe,"A",{href:!0});var aCt=s(cU);C7r=r(aCt,"TFTransfoXLForSequenceClassification"),aCt.forEach(t),w7r=r(lBe," (Transformer-XL model)"),lBe.forEach(t),A7r=i(ae),YM=n(ae,"LI",{});var iBe=s(YM);mFe=n(iBe,"STRONG",{});var nCt=s(mFe);y7r=r(nCt,"xlm"),nCt.forEach(t),L7r=r(iBe," \u2014 "),fU=n(iBe,"A",{href:!0});var sCt=s(fU);x7r=r(sCt,"TFXLMForSequenceClassification"),sCt.forEach(t),$7r=r(iBe," (XLM model)"),iBe.forEach(t),k7r=i(ae),KM=n(ae,"LI",{});var dBe=s(KM);gFe=n(dBe,"STRONG",{});var lCt=s(gFe);S7r=r(lCt,"xlm-roberta"),lCt.forEach(t),R7r=r(dBe," \u2014 "),mU=n(dBe,"A",{href:!0});var iCt=s(mU);P7r=r(iCt,"TFXLMRobertaForSequenceClassification"),iCt.forEach(t),B7r=r(dBe," (XLM-RoBERTa model)"),dBe.forEach(t),I7r=i(ae),ZM=n(ae,"LI",{});var cBe=s(ZM);hFe=n(cBe,"STRONG",{});var dCt=s(hFe);N7r=r(dCt,"xlnet"),dCt.forEach(t),q7r=r(cBe," \u2014 "),gU=n(cBe,"A",{href:!0});var cCt=s(gU);j7r=r(cCt,"TFXLNetForSequenceClassification"),cCt.forEach(t),D7r=r(cBe," (XLNet model)"),cBe.forEach(t),ae.forEach(t),G7r=i(Al),T(e4.$$.fragment,Al),Al.forEach(t),wl.forEach(t),Nje=i(f),ic=n(f,"H2",{class:!0});var VGe=s(ic);o4=n(VGe,"A",{id:!0,class:!0,href:!0});var fCt=s(o4);pFe=n(fCt,"SPAN",{});var mCt=s(pFe);T(H8.$$.fragment,mCt),mCt.forEach(t),fCt.forEach(t),O7r=i(VGe),_Fe=n(VGe,"SPAN",{});var gCt=s(_Fe);V7r=r(gCt,"TFAutoModelForMultipleChoice"),gCt.forEach(t),VGe.forEach(t),qje=i(f),ar=n(f,"DIV",{class:!0});var yl=s(ar);T(U8.$$.fragment,yl),X7r=i(yl),dc=n(yl,"P",{});var See=s(dc);z7r=r(See,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),hU=n(See,"A",{href:!0});var hCt=s(hU);W7r=r(hCt,"from_pretrained()"),hCt.forEach(t),Q7r=r(See," class method or the "),pU=n(See,"A",{href:!0});var pCt=s(pU);H7r=r(pCt,"from_config()"),pCt.forEach(t),U7r=r(See,` class
method.`),See.forEach(t),J7r=i(yl),J8=n(yl,"P",{});var XGe=s(J8);Y7r=r(XGe,"This class cannot be instantiated directly using "),uFe=n(XGe,"CODE",{});var _Ct=s(uFe);K7r=r(_Ct,"__init__()"),_Ct.forEach(t),Z7r=r(XGe," (throws an error)."),XGe.forEach(t),eMr=i(yl),Pt=n(yl,"DIV",{class:!0});var X6=s(Pt);T(Y8.$$.fragment,X6),oMr=i(X6),bFe=n(X6,"P",{});var uCt=s(bFe);rMr=r(uCt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),uCt.forEach(t),tMr=i(X6),cc=n(X6,"P",{});var Ree=s(cc);aMr=r(Ree,`Note:
Loading a model from its configuration file does `),vFe=n(Ree,"STRONG",{});var bCt=s(vFe);nMr=r(bCt,"not"),bCt.forEach(t),sMr=r(Ree,` load the model weights. It only affects the
model\u2019s configuration. Use `),_U=n(Ree,"A",{href:!0});var vCt=s(_U);lMr=r(vCt,"from_pretrained()"),vCt.forEach(t),iMr=r(Ree," to load the model weights."),Ree.forEach(t),dMr=i(X6),T(r4.$$.fragment,X6),X6.forEach(t),cMr=i(yl),Sr=n(yl,"DIV",{class:!0});var Ll=s(Sr);T(K8.$$.fragment,Ll),fMr=i(Ll),FFe=n(Ll,"P",{});var FCt=s(FFe);mMr=r(FCt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),FCt.forEach(t),gMr=i(Ll),sn=n(Ll,"P",{});var z6=s(sn);hMr=r(z6,"The model class to instantiate is selected based on the "),TFe=n(z6,"CODE",{});var TCt=s(TFe);pMr=r(TCt,"model_type"),TCt.forEach(t),_Mr=r(z6,` property of the config object (either
passed as an argument or loaded from `),MFe=n(z6,"CODE",{});var MCt=s(MFe);uMr=r(MCt,"pretrained_model_name_or_path"),MCt.forEach(t),bMr=r(z6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),EFe=n(z6,"CODE",{});var ECt=s(EFe);vMr=r(ECt,"pretrained_model_name_or_path"),ECt.forEach(t),FMr=r(z6,":"),z6.forEach(t),TMr=i(Ll),pe=n(Ll,"UL",{});var be=s(pe);t4=n(be,"LI",{});var fBe=s(t4);CFe=n(fBe,"STRONG",{});var CCt=s(CFe);MMr=r(CCt,"albert"),CCt.forEach(t),EMr=r(fBe," \u2014 "),uU=n(fBe,"A",{href:!0});var wCt=s(uU);CMr=r(wCt,"TFAlbertForMultipleChoice"),wCt.forEach(t),wMr=r(fBe," (ALBERT model)"),fBe.forEach(t),AMr=i(be),a4=n(be,"LI",{});var mBe=s(a4);wFe=n(mBe,"STRONG",{});var ACt=s(wFe);yMr=r(ACt,"bert"),ACt.forEach(t),LMr=r(mBe," \u2014 "),bU=n(mBe,"A",{href:!0});var yCt=s(bU);xMr=r(yCt,"TFBertForMultipleChoice"),yCt.forEach(t),$Mr=r(mBe," (BERT model)"),mBe.forEach(t),kMr=i(be),n4=n(be,"LI",{});var gBe=s(n4);AFe=n(gBe,"STRONG",{});var LCt=s(AFe);SMr=r(LCt,"camembert"),LCt.forEach(t),RMr=r(gBe," \u2014 "),vU=n(gBe,"A",{href:!0});var xCt=s(vU);PMr=r(xCt,"TFCamembertForMultipleChoice"),xCt.forEach(t),BMr=r(gBe," (CamemBERT model)"),gBe.forEach(t),IMr=i(be),s4=n(be,"LI",{});var hBe=s(s4);yFe=n(hBe,"STRONG",{});var $Ct=s(yFe);NMr=r($Ct,"convbert"),$Ct.forEach(t),qMr=r(hBe," \u2014 "),FU=n(hBe,"A",{href:!0});var kCt=s(FU);jMr=r(kCt,"TFConvBertForMultipleChoice"),kCt.forEach(t),DMr=r(hBe," (ConvBERT model)"),hBe.forEach(t),GMr=i(be),l4=n(be,"LI",{});var pBe=s(l4);LFe=n(pBe,"STRONG",{});var SCt=s(LFe);OMr=r(SCt,"distilbert"),SCt.forEach(t),VMr=r(pBe," \u2014 "),TU=n(pBe,"A",{href:!0});var RCt=s(TU);XMr=r(RCt,"TFDistilBertForMultipleChoice"),RCt.forEach(t),zMr=r(pBe," (DistilBERT model)"),pBe.forEach(t),WMr=i(be),i4=n(be,"LI",{});var _Be=s(i4);xFe=n(_Be,"STRONG",{});var PCt=s(xFe);QMr=r(PCt,"electra"),PCt.forEach(t),HMr=r(_Be," \u2014 "),MU=n(_Be,"A",{href:!0});var BCt=s(MU);UMr=r(BCt,"TFElectraForMultipleChoice"),BCt.forEach(t),JMr=r(_Be," (ELECTRA model)"),_Be.forEach(t),YMr=i(be),d4=n(be,"LI",{});var uBe=s(d4);$Fe=n(uBe,"STRONG",{});var ICt=s($Fe);KMr=r(ICt,"flaubert"),ICt.forEach(t),ZMr=r(uBe," \u2014 "),EU=n(uBe,"A",{href:!0});var NCt=s(EU);e4r=r(NCt,"TFFlaubertForMultipleChoice"),NCt.forEach(t),o4r=r(uBe," (FlauBERT model)"),uBe.forEach(t),r4r=i(be),c4=n(be,"LI",{});var bBe=s(c4);kFe=n(bBe,"STRONG",{});var qCt=s(kFe);t4r=r(qCt,"funnel"),qCt.forEach(t),a4r=r(bBe," \u2014 "),CU=n(bBe,"A",{href:!0});var jCt=s(CU);n4r=r(jCt,"TFFunnelForMultipleChoice"),jCt.forEach(t),s4r=r(bBe," (Funnel Transformer model)"),bBe.forEach(t),l4r=i(be),f4=n(be,"LI",{});var vBe=s(f4);SFe=n(vBe,"STRONG",{});var DCt=s(SFe);i4r=r(DCt,"longformer"),DCt.forEach(t),d4r=r(vBe," \u2014 "),wU=n(vBe,"A",{href:!0});var GCt=s(wU);c4r=r(GCt,"TFLongformerForMultipleChoice"),GCt.forEach(t),f4r=r(vBe," (Longformer model)"),vBe.forEach(t),m4r=i(be),m4=n(be,"LI",{});var FBe=s(m4);RFe=n(FBe,"STRONG",{});var OCt=s(RFe);g4r=r(OCt,"mobilebert"),OCt.forEach(t),h4r=r(FBe," \u2014 "),AU=n(FBe,"A",{href:!0});var VCt=s(AU);p4r=r(VCt,"TFMobileBertForMultipleChoice"),VCt.forEach(t),_4r=r(FBe," (MobileBERT model)"),FBe.forEach(t),u4r=i(be),g4=n(be,"LI",{});var TBe=s(g4);PFe=n(TBe,"STRONG",{});var XCt=s(PFe);b4r=r(XCt,"mpnet"),XCt.forEach(t),v4r=r(TBe," \u2014 "),yU=n(TBe,"A",{href:!0});var zCt=s(yU);F4r=r(zCt,"TFMPNetForMultipleChoice"),zCt.forEach(t),T4r=r(TBe," (MPNet model)"),TBe.forEach(t),M4r=i(be),h4=n(be,"LI",{});var MBe=s(h4);BFe=n(MBe,"STRONG",{});var WCt=s(BFe);E4r=r(WCt,"rembert"),WCt.forEach(t),C4r=r(MBe," \u2014 "),LU=n(MBe,"A",{href:!0});var QCt=s(LU);w4r=r(QCt,"TFRemBertForMultipleChoice"),QCt.forEach(t),A4r=r(MBe," (RemBERT model)"),MBe.forEach(t),y4r=i(be),p4=n(be,"LI",{});var EBe=s(p4);IFe=n(EBe,"STRONG",{});var HCt=s(IFe);L4r=r(HCt,"roberta"),HCt.forEach(t),x4r=r(EBe," \u2014 "),xU=n(EBe,"A",{href:!0});var UCt=s(xU);$4r=r(UCt,"TFRobertaForMultipleChoice"),UCt.forEach(t),k4r=r(EBe," (RoBERTa model)"),EBe.forEach(t),S4r=i(be),_4=n(be,"LI",{});var CBe=s(_4);NFe=n(CBe,"STRONG",{});var JCt=s(NFe);R4r=r(JCt,"roformer"),JCt.forEach(t),P4r=r(CBe," \u2014 "),$U=n(CBe,"A",{href:!0});var YCt=s($U);B4r=r(YCt,"TFRoFormerForMultipleChoice"),YCt.forEach(t),I4r=r(CBe," (RoFormer model)"),CBe.forEach(t),N4r=i(be),u4=n(be,"LI",{});var wBe=s(u4);qFe=n(wBe,"STRONG",{});var KCt=s(qFe);q4r=r(KCt,"xlm"),KCt.forEach(t),j4r=r(wBe," \u2014 "),kU=n(wBe,"A",{href:!0});var ZCt=s(kU);D4r=r(ZCt,"TFXLMForMultipleChoice"),ZCt.forEach(t),G4r=r(wBe," (XLM model)"),wBe.forEach(t),O4r=i(be),b4=n(be,"LI",{});var ABe=s(b4);jFe=n(ABe,"STRONG",{});var e3t=s(jFe);V4r=r(e3t,"xlm-roberta"),e3t.forEach(t),X4r=r(ABe," \u2014 "),SU=n(ABe,"A",{href:!0});var o3t=s(SU);z4r=r(o3t,"TFXLMRobertaForMultipleChoice"),o3t.forEach(t),W4r=r(ABe," (XLM-RoBERTa model)"),ABe.forEach(t),Q4r=i(be),v4=n(be,"LI",{});var yBe=s(v4);DFe=n(yBe,"STRONG",{});var r3t=s(DFe);H4r=r(r3t,"xlnet"),r3t.forEach(t),U4r=r(yBe," \u2014 "),RU=n(yBe,"A",{href:!0});var t3t=s(RU);J4r=r(t3t,"TFXLNetForMultipleChoice"),t3t.forEach(t),Y4r=r(yBe," (XLNet model)"),yBe.forEach(t),be.forEach(t),K4r=i(Ll),T(F4.$$.fragment,Ll),Ll.forEach(t),yl.forEach(t),jje=i(f),fc=n(f,"H2",{class:!0});var zGe=s(fc);T4=n(zGe,"A",{id:!0,class:!0,href:!0});var a3t=s(T4);GFe=n(a3t,"SPAN",{});var n3t=s(GFe);T(Z8.$$.fragment,n3t),n3t.forEach(t),a3t.forEach(t),Z4r=i(zGe),OFe=n(zGe,"SPAN",{});var s3t=s(OFe);eEr=r(s3t,"TFAutoModelForNextSentencePrediction"),s3t.forEach(t),zGe.forEach(t),Dje=i(f),nr=n(f,"DIV",{class:!0});var xl=s(nr);T(e9.$$.fragment,xl),oEr=i(xl),mc=n(xl,"P",{});var Pee=s(mc);rEr=r(Pee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),PU=n(Pee,"A",{href:!0});var l3t=s(PU);tEr=r(l3t,"from_pretrained()"),l3t.forEach(t),aEr=r(Pee," class method or the "),BU=n(Pee,"A",{href:!0});var i3t=s(BU);nEr=r(i3t,"from_config()"),i3t.forEach(t),sEr=r(Pee,` class
method.`),Pee.forEach(t),lEr=i(xl),o9=n(xl,"P",{});var WGe=s(o9);iEr=r(WGe,"This class cannot be instantiated directly using "),VFe=n(WGe,"CODE",{});var d3t=s(VFe);dEr=r(d3t,"__init__()"),d3t.forEach(t),cEr=r(WGe," (throws an error)."),WGe.forEach(t),fEr=i(xl),Bt=n(xl,"DIV",{class:!0});var W6=s(Bt);T(r9.$$.fragment,W6),mEr=i(W6),XFe=n(W6,"P",{});var c3t=s(XFe);gEr=r(c3t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),c3t.forEach(t),hEr=i(W6),gc=n(W6,"P",{});var Bee=s(gc);pEr=r(Bee,`Note:
Loading a model from its configuration file does `),zFe=n(Bee,"STRONG",{});var f3t=s(zFe);_Er=r(f3t,"not"),f3t.forEach(t),uEr=r(Bee,` load the model weights. It only affects the
model\u2019s configuration. Use `),IU=n(Bee,"A",{href:!0});var m3t=s(IU);bEr=r(m3t,"from_pretrained()"),m3t.forEach(t),vEr=r(Bee," to load the model weights."),Bee.forEach(t),FEr=i(W6),T(M4.$$.fragment,W6),W6.forEach(t),TEr=i(xl),Rr=n(xl,"DIV",{class:!0});var $l=s(Rr);T(t9.$$.fragment,$l),MEr=i($l),WFe=n($l,"P",{});var g3t=s(WFe);EEr=r(g3t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),g3t.forEach(t),CEr=i($l),ln=n($l,"P",{});var Q6=s(ln);wEr=r(Q6,"The model class to instantiate is selected based on the "),QFe=n(Q6,"CODE",{});var h3t=s(QFe);AEr=r(h3t,"model_type"),h3t.forEach(t),yEr=r(Q6,` property of the config object (either
passed as an argument or loaded from `),HFe=n(Q6,"CODE",{});var p3t=s(HFe);LEr=r(p3t,"pretrained_model_name_or_path"),p3t.forEach(t),xEr=r(Q6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UFe=n(Q6,"CODE",{});var _3t=s(UFe);$Er=r(_3t,"pretrained_model_name_or_path"),_3t.forEach(t),kEr=r(Q6,":"),Q6.forEach(t),SEr=i($l),a9=n($l,"UL",{});var QGe=s(a9);E4=n(QGe,"LI",{});var LBe=s(E4);JFe=n(LBe,"STRONG",{});var u3t=s(JFe);REr=r(u3t,"bert"),u3t.forEach(t),PEr=r(LBe," \u2014 "),NU=n(LBe,"A",{href:!0});var b3t=s(NU);BEr=r(b3t,"TFBertForNextSentencePrediction"),b3t.forEach(t),IEr=r(LBe," (BERT model)"),LBe.forEach(t),NEr=i(QGe),C4=n(QGe,"LI",{});var xBe=s(C4);YFe=n(xBe,"STRONG",{});var v3t=s(YFe);qEr=r(v3t,"mobilebert"),v3t.forEach(t),jEr=r(xBe," \u2014 "),qU=n(xBe,"A",{href:!0});var F3t=s(qU);DEr=r(F3t,"TFMobileBertForNextSentencePrediction"),F3t.forEach(t),GEr=r(xBe," (MobileBERT model)"),xBe.forEach(t),QGe.forEach(t),OEr=i($l),T(w4.$$.fragment,$l),$l.forEach(t),xl.forEach(t),Gje=i(f),hc=n(f,"H2",{class:!0});var HGe=s(hc);A4=n(HGe,"A",{id:!0,class:!0,href:!0});var T3t=s(A4);KFe=n(T3t,"SPAN",{});var M3t=s(KFe);T(n9.$$.fragment,M3t),M3t.forEach(t),T3t.forEach(t),VEr=i(HGe),ZFe=n(HGe,"SPAN",{});var E3t=s(ZFe);XEr=r(E3t,"TFAutoModelForTableQuestionAnswering"),E3t.forEach(t),HGe.forEach(t),Oje=i(f),sr=n(f,"DIV",{class:!0});var kl=s(sr);T(s9.$$.fragment,kl),zEr=i(kl),pc=n(kl,"P",{});var Iee=s(pc);WEr=r(Iee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),jU=n(Iee,"A",{href:!0});var C3t=s(jU);QEr=r(C3t,"from_pretrained()"),C3t.forEach(t),HEr=r(Iee," class method or the "),DU=n(Iee,"A",{href:!0});var w3t=s(DU);UEr=r(w3t,"from_config()"),w3t.forEach(t),JEr=r(Iee,` class
method.`),Iee.forEach(t),YEr=i(kl),l9=n(kl,"P",{});var UGe=s(l9);KEr=r(UGe,"This class cannot be instantiated directly using "),e0e=n(UGe,"CODE",{});var A3t=s(e0e);ZEr=r(A3t,"__init__()"),A3t.forEach(t),eCr=r(UGe," (throws an error)."),UGe.forEach(t),oCr=i(kl),It=n(kl,"DIV",{class:!0});var H6=s(It);T(i9.$$.fragment,H6),rCr=i(H6),o0e=n(H6,"P",{});var y3t=s(o0e);tCr=r(y3t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),y3t.forEach(t),aCr=i(H6),_c=n(H6,"P",{});var Nee=s(_c);nCr=r(Nee,`Note:
Loading a model from its configuration file does `),r0e=n(Nee,"STRONG",{});var L3t=s(r0e);sCr=r(L3t,"not"),L3t.forEach(t),lCr=r(Nee,` load the model weights. It only affects the
model\u2019s configuration. Use `),GU=n(Nee,"A",{href:!0});var x3t=s(GU);iCr=r(x3t,"from_pretrained()"),x3t.forEach(t),dCr=r(Nee," to load the model weights."),Nee.forEach(t),cCr=i(H6),T(y4.$$.fragment,H6),H6.forEach(t),fCr=i(kl),Pr=n(kl,"DIV",{class:!0});var Sl=s(Pr);T(d9.$$.fragment,Sl),mCr=i(Sl),t0e=n(Sl,"P",{});var $3t=s(t0e);gCr=r($3t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),$3t.forEach(t),hCr=i(Sl),dn=n(Sl,"P",{});var U6=s(dn);pCr=r(U6,"The model class to instantiate is selected based on the "),a0e=n(U6,"CODE",{});var k3t=s(a0e);_Cr=r(k3t,"model_type"),k3t.forEach(t),uCr=r(U6,` property of the config object (either
passed as an argument or loaded from `),n0e=n(U6,"CODE",{});var S3t=s(n0e);bCr=r(S3t,"pretrained_model_name_or_path"),S3t.forEach(t),vCr=r(U6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s0e=n(U6,"CODE",{});var R3t=s(s0e);FCr=r(R3t,"pretrained_model_name_or_path"),R3t.forEach(t),TCr=r(U6,":"),U6.forEach(t),MCr=i(Sl),l0e=n(Sl,"UL",{});var P3t=s(l0e);L4=n(P3t,"LI",{});var $Be=s(L4);i0e=n($Be,"STRONG",{});var B3t=s(i0e);ECr=r(B3t,"tapas"),B3t.forEach(t),CCr=r($Be," \u2014 "),OU=n($Be,"A",{href:!0});var I3t=s(OU);wCr=r(I3t,"TFTapasForQuestionAnswering"),I3t.forEach(t),ACr=r($Be," (TAPAS model)"),$Be.forEach(t),P3t.forEach(t),yCr=i(Sl),T(x4.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),Vje=i(f),uc=n(f,"H2",{class:!0});var JGe=s(uc);$4=n(JGe,"A",{id:!0,class:!0,href:!0});var N3t=s($4);d0e=n(N3t,"SPAN",{});var q3t=s(d0e);T(c9.$$.fragment,q3t),q3t.forEach(t),N3t.forEach(t),LCr=i(JGe),c0e=n(JGe,"SPAN",{});var j3t=s(c0e);xCr=r(j3t,"TFAutoModelForTokenClassification"),j3t.forEach(t),JGe.forEach(t),Xje=i(f),lr=n(f,"DIV",{class:!0});var Rl=s(lr);T(f9.$$.fragment,Rl),$Cr=i(Rl),bc=n(Rl,"P",{});var qee=s(bc);kCr=r(qee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),VU=n(qee,"A",{href:!0});var D3t=s(VU);SCr=r(D3t,"from_pretrained()"),D3t.forEach(t),RCr=r(qee," class method or the "),XU=n(qee,"A",{href:!0});var G3t=s(XU);PCr=r(G3t,"from_config()"),G3t.forEach(t),BCr=r(qee,` class
method.`),qee.forEach(t),ICr=i(Rl),m9=n(Rl,"P",{});var YGe=s(m9);NCr=r(YGe,"This class cannot be instantiated directly using "),f0e=n(YGe,"CODE",{});var O3t=s(f0e);qCr=r(O3t,"__init__()"),O3t.forEach(t),jCr=r(YGe," (throws an error)."),YGe.forEach(t),DCr=i(Rl),Nt=n(Rl,"DIV",{class:!0});var J6=s(Nt);T(g9.$$.fragment,J6),GCr=i(J6),m0e=n(J6,"P",{});var V3t=s(m0e);OCr=r(V3t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),V3t.forEach(t),VCr=i(J6),vc=n(J6,"P",{});var jee=s(vc);XCr=r(jee,`Note:
Loading a model from its configuration file does `),g0e=n(jee,"STRONG",{});var X3t=s(g0e);zCr=r(X3t,"not"),X3t.forEach(t),WCr=r(jee,` load the model weights. It only affects the
model\u2019s configuration. Use `),zU=n(jee,"A",{href:!0});var z3t=s(zU);QCr=r(z3t,"from_pretrained()"),z3t.forEach(t),HCr=r(jee," to load the model weights."),jee.forEach(t),UCr=i(J6),T(k4.$$.fragment,J6),J6.forEach(t),JCr=i(Rl),Br=n(Rl,"DIV",{class:!0});var Pl=s(Br);T(h9.$$.fragment,Pl),YCr=i(Pl),h0e=n(Pl,"P",{});var W3t=s(h0e);KCr=r(W3t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),W3t.forEach(t),ZCr=i(Pl),cn=n(Pl,"P",{});var Y6=s(cn);e3r=r(Y6,"The model class to instantiate is selected based on the "),p0e=n(Y6,"CODE",{});var Q3t=s(p0e);o3r=r(Q3t,"model_type"),Q3t.forEach(t),r3r=r(Y6,` property of the config object (either
passed as an argument or loaded from `),_0e=n(Y6,"CODE",{});var H3t=s(_0e);t3r=r(H3t,"pretrained_model_name_or_path"),H3t.forEach(t),a3r=r(Y6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u0e=n(Y6,"CODE",{});var U3t=s(u0e);n3r=r(U3t,"pretrained_model_name_or_path"),U3t.forEach(t),s3r=r(Y6,":"),Y6.forEach(t),l3r=i(Pl),de=n(Pl,"UL",{});var me=s(de);S4=n(me,"LI",{});var kBe=s(S4);b0e=n(kBe,"STRONG",{});var J3t=s(b0e);i3r=r(J3t,"albert"),J3t.forEach(t),d3r=r(kBe," \u2014 "),WU=n(kBe,"A",{href:!0});var Y3t=s(WU);c3r=r(Y3t,"TFAlbertForTokenClassification"),Y3t.forEach(t),f3r=r(kBe," (ALBERT model)"),kBe.forEach(t),m3r=i(me),R4=n(me,"LI",{});var SBe=s(R4);v0e=n(SBe,"STRONG",{});var K3t=s(v0e);g3r=r(K3t,"bert"),K3t.forEach(t),h3r=r(SBe," \u2014 "),QU=n(SBe,"A",{href:!0});var Z3t=s(QU);p3r=r(Z3t,"TFBertForTokenClassification"),Z3t.forEach(t),_3r=r(SBe," (BERT model)"),SBe.forEach(t),u3r=i(me),P4=n(me,"LI",{});var RBe=s(P4);F0e=n(RBe,"STRONG",{});var ewt=s(F0e);b3r=r(ewt,"camembert"),ewt.forEach(t),v3r=r(RBe," \u2014 "),HU=n(RBe,"A",{href:!0});var owt=s(HU);F3r=r(owt,"TFCamembertForTokenClassification"),owt.forEach(t),T3r=r(RBe," (CamemBERT model)"),RBe.forEach(t),M3r=i(me),B4=n(me,"LI",{});var PBe=s(B4);T0e=n(PBe,"STRONG",{});var rwt=s(T0e);E3r=r(rwt,"convbert"),rwt.forEach(t),C3r=r(PBe," \u2014 "),UU=n(PBe,"A",{href:!0});var twt=s(UU);w3r=r(twt,"TFConvBertForTokenClassification"),twt.forEach(t),A3r=r(PBe," (ConvBERT model)"),PBe.forEach(t),y3r=i(me),I4=n(me,"LI",{});var BBe=s(I4);M0e=n(BBe,"STRONG",{});var awt=s(M0e);L3r=r(awt,"deberta"),awt.forEach(t),x3r=r(BBe," \u2014 "),JU=n(BBe,"A",{href:!0});var nwt=s(JU);$3r=r(nwt,"TFDebertaForTokenClassification"),nwt.forEach(t),k3r=r(BBe," (DeBERTa model)"),BBe.forEach(t),S3r=i(me),N4=n(me,"LI",{});var IBe=s(N4);E0e=n(IBe,"STRONG",{});var swt=s(E0e);R3r=r(swt,"deberta-v2"),swt.forEach(t),P3r=r(IBe," \u2014 "),YU=n(IBe,"A",{href:!0});var lwt=s(YU);B3r=r(lwt,"TFDebertaV2ForTokenClassification"),lwt.forEach(t),I3r=r(IBe," (DeBERTa-v2 model)"),IBe.forEach(t),N3r=i(me),q4=n(me,"LI",{});var NBe=s(q4);C0e=n(NBe,"STRONG",{});var iwt=s(C0e);q3r=r(iwt,"distilbert"),iwt.forEach(t),j3r=r(NBe," \u2014 "),KU=n(NBe,"A",{href:!0});var dwt=s(KU);D3r=r(dwt,"TFDistilBertForTokenClassification"),dwt.forEach(t),G3r=r(NBe," (DistilBERT model)"),NBe.forEach(t),O3r=i(me),j4=n(me,"LI",{});var qBe=s(j4);w0e=n(qBe,"STRONG",{});var cwt=s(w0e);V3r=r(cwt,"electra"),cwt.forEach(t),X3r=r(qBe," \u2014 "),ZU=n(qBe,"A",{href:!0});var fwt=s(ZU);z3r=r(fwt,"TFElectraForTokenClassification"),fwt.forEach(t),W3r=r(qBe," (ELECTRA model)"),qBe.forEach(t),Q3r=i(me),D4=n(me,"LI",{});var jBe=s(D4);A0e=n(jBe,"STRONG",{});var mwt=s(A0e);H3r=r(mwt,"flaubert"),mwt.forEach(t),U3r=r(jBe," \u2014 "),eJ=n(jBe,"A",{href:!0});var gwt=s(eJ);J3r=r(gwt,"TFFlaubertForTokenClassification"),gwt.forEach(t),Y3r=r(jBe," (FlauBERT model)"),jBe.forEach(t),K3r=i(me),G4=n(me,"LI",{});var DBe=s(G4);y0e=n(DBe,"STRONG",{});var hwt=s(y0e);Z3r=r(hwt,"funnel"),hwt.forEach(t),ewr=r(DBe," \u2014 "),oJ=n(DBe,"A",{href:!0});var pwt=s(oJ);owr=r(pwt,"TFFunnelForTokenClassification"),pwt.forEach(t),rwr=r(DBe," (Funnel Transformer model)"),DBe.forEach(t),twr=i(me),O4=n(me,"LI",{});var GBe=s(O4);L0e=n(GBe,"STRONG",{});var _wt=s(L0e);awr=r(_wt,"layoutlm"),_wt.forEach(t),nwr=r(GBe," \u2014 "),rJ=n(GBe,"A",{href:!0});var uwt=s(rJ);swr=r(uwt,"TFLayoutLMForTokenClassification"),uwt.forEach(t),lwr=r(GBe," (LayoutLM model)"),GBe.forEach(t),iwr=i(me),V4=n(me,"LI",{});var OBe=s(V4);x0e=n(OBe,"STRONG",{});var bwt=s(x0e);dwr=r(bwt,"longformer"),bwt.forEach(t),cwr=r(OBe," \u2014 "),tJ=n(OBe,"A",{href:!0});var vwt=s(tJ);fwr=r(vwt,"TFLongformerForTokenClassification"),vwt.forEach(t),mwr=r(OBe," (Longformer model)"),OBe.forEach(t),gwr=i(me),X4=n(me,"LI",{});var VBe=s(X4);$0e=n(VBe,"STRONG",{});var Fwt=s($0e);hwr=r(Fwt,"mobilebert"),Fwt.forEach(t),pwr=r(VBe," \u2014 "),aJ=n(VBe,"A",{href:!0});var Twt=s(aJ);_wr=r(Twt,"TFMobileBertForTokenClassification"),Twt.forEach(t),uwr=r(VBe," (MobileBERT model)"),VBe.forEach(t),bwr=i(me),z4=n(me,"LI",{});var XBe=s(z4);k0e=n(XBe,"STRONG",{});var Mwt=s(k0e);vwr=r(Mwt,"mpnet"),Mwt.forEach(t),Fwr=r(XBe," \u2014 "),nJ=n(XBe,"A",{href:!0});var Ewt=s(nJ);Twr=r(Ewt,"TFMPNetForTokenClassification"),Ewt.forEach(t),Mwr=r(XBe," (MPNet model)"),XBe.forEach(t),Ewr=i(me),W4=n(me,"LI",{});var zBe=s(W4);S0e=n(zBe,"STRONG",{});var Cwt=s(S0e);Cwr=r(Cwt,"rembert"),Cwt.forEach(t),wwr=r(zBe," \u2014 "),sJ=n(zBe,"A",{href:!0});var wwt=s(sJ);Awr=r(wwt,"TFRemBertForTokenClassification"),wwt.forEach(t),ywr=r(zBe," (RemBERT model)"),zBe.forEach(t),Lwr=i(me),Q4=n(me,"LI",{});var WBe=s(Q4);R0e=n(WBe,"STRONG",{});var Awt=s(R0e);xwr=r(Awt,"roberta"),Awt.forEach(t),$wr=r(WBe," \u2014 "),lJ=n(WBe,"A",{href:!0});var ywt=s(lJ);kwr=r(ywt,"TFRobertaForTokenClassification"),ywt.forEach(t),Swr=r(WBe," (RoBERTa model)"),WBe.forEach(t),Rwr=i(me),H4=n(me,"LI",{});var QBe=s(H4);P0e=n(QBe,"STRONG",{});var Lwt=s(P0e);Pwr=r(Lwt,"roformer"),Lwt.forEach(t),Bwr=r(QBe," \u2014 "),iJ=n(QBe,"A",{href:!0});var xwt=s(iJ);Iwr=r(xwt,"TFRoFormerForTokenClassification"),xwt.forEach(t),Nwr=r(QBe," (RoFormer model)"),QBe.forEach(t),qwr=i(me),U4=n(me,"LI",{});var HBe=s(U4);B0e=n(HBe,"STRONG",{});var $wt=s(B0e);jwr=r($wt,"xlm"),$wt.forEach(t),Dwr=r(HBe," \u2014 "),dJ=n(HBe,"A",{href:!0});var kwt=s(dJ);Gwr=r(kwt,"TFXLMForTokenClassification"),kwt.forEach(t),Owr=r(HBe," (XLM model)"),HBe.forEach(t),Vwr=i(me),J4=n(me,"LI",{});var UBe=s(J4);I0e=n(UBe,"STRONG",{});var Swt=s(I0e);Xwr=r(Swt,"xlm-roberta"),Swt.forEach(t),zwr=r(UBe," \u2014 "),cJ=n(UBe,"A",{href:!0});var Rwt=s(cJ);Wwr=r(Rwt,"TFXLMRobertaForTokenClassification"),Rwt.forEach(t),Qwr=r(UBe," (XLM-RoBERTa model)"),UBe.forEach(t),Hwr=i(me),Y4=n(me,"LI",{});var JBe=s(Y4);N0e=n(JBe,"STRONG",{});var Pwt=s(N0e);Uwr=r(Pwt,"xlnet"),Pwt.forEach(t),Jwr=r(JBe," \u2014 "),fJ=n(JBe,"A",{href:!0});var Bwt=s(fJ);Ywr=r(Bwt,"TFXLNetForTokenClassification"),Bwt.forEach(t),Kwr=r(JBe," (XLNet model)"),JBe.forEach(t),me.forEach(t),Zwr=i(Pl),T(K4.$$.fragment,Pl),Pl.forEach(t),Rl.forEach(t),zje=i(f),Fc=n(f,"H2",{class:!0});var KGe=s(Fc);Z4=n(KGe,"A",{id:!0,class:!0,href:!0});var Iwt=s(Z4);q0e=n(Iwt,"SPAN",{});var Nwt=s(q0e);T(p9.$$.fragment,Nwt),Nwt.forEach(t),Iwt.forEach(t),e6r=i(KGe),j0e=n(KGe,"SPAN",{});var qwt=s(j0e);o6r=r(qwt,"TFAutoModelForQuestionAnswering"),qwt.forEach(t),KGe.forEach(t),Wje=i(f),ir=n(f,"DIV",{class:!0});var Bl=s(ir);T(_9.$$.fragment,Bl),r6r=i(Bl),Tc=n(Bl,"P",{});var Dee=s(Tc);t6r=r(Dee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),mJ=n(Dee,"A",{href:!0});var jwt=s(mJ);a6r=r(jwt,"from_pretrained()"),jwt.forEach(t),n6r=r(Dee," class method or the "),gJ=n(Dee,"A",{href:!0});var Dwt=s(gJ);s6r=r(Dwt,"from_config()"),Dwt.forEach(t),l6r=r(Dee,` class
method.`),Dee.forEach(t),i6r=i(Bl),u9=n(Bl,"P",{});var ZGe=s(u9);d6r=r(ZGe,"This class cannot be instantiated directly using "),D0e=n(ZGe,"CODE",{});var Gwt=s(D0e);c6r=r(Gwt,"__init__()"),Gwt.forEach(t),f6r=r(ZGe," (throws an error)."),ZGe.forEach(t),m6r=i(Bl),qt=n(Bl,"DIV",{class:!0});var K6=s(qt);T(b9.$$.fragment,K6),g6r=i(K6),G0e=n(K6,"P",{});var Owt=s(G0e);h6r=r(Owt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Owt.forEach(t),p6r=i(K6),Mc=n(K6,"P",{});var Gee=s(Mc);_6r=r(Gee,`Note:
Loading a model from its configuration file does `),O0e=n(Gee,"STRONG",{});var Vwt=s(O0e);u6r=r(Vwt,"not"),Vwt.forEach(t),b6r=r(Gee,` load the model weights. It only affects the
model\u2019s configuration. Use `),hJ=n(Gee,"A",{href:!0});var Xwt=s(hJ);v6r=r(Xwt,"from_pretrained()"),Xwt.forEach(t),F6r=r(Gee," to load the model weights."),Gee.forEach(t),T6r=i(K6),T(eE.$$.fragment,K6),K6.forEach(t),M6r=i(Bl),Ir=n(Bl,"DIV",{class:!0});var Il=s(Ir);T(v9.$$.fragment,Il),E6r=i(Il),V0e=n(Il,"P",{});var zwt=s(V0e);C6r=r(zwt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),zwt.forEach(t),w6r=i(Il),fn=n(Il,"P",{});var Z6=s(fn);A6r=r(Z6,"The model class to instantiate is selected based on the "),X0e=n(Z6,"CODE",{});var Wwt=s(X0e);y6r=r(Wwt,"model_type"),Wwt.forEach(t),L6r=r(Z6,` property of the config object (either
passed as an argument or loaded from `),z0e=n(Z6,"CODE",{});var Qwt=s(z0e);x6r=r(Qwt,"pretrained_model_name_or_path"),Qwt.forEach(t),$6r=r(Z6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W0e=n(Z6,"CODE",{});var Hwt=s(W0e);k6r=r(Hwt,"pretrained_model_name_or_path"),Hwt.forEach(t),S6r=r(Z6,":"),Z6.forEach(t),R6r=i(Il),ce=n(Il,"UL",{});var ge=s(ce);oE=n(ge,"LI",{});var YBe=s(oE);Q0e=n(YBe,"STRONG",{});var Uwt=s(Q0e);P6r=r(Uwt,"albert"),Uwt.forEach(t),B6r=r(YBe," \u2014 "),pJ=n(YBe,"A",{href:!0});var Jwt=s(pJ);I6r=r(Jwt,"TFAlbertForQuestionAnswering"),Jwt.forEach(t),N6r=r(YBe," (ALBERT model)"),YBe.forEach(t),q6r=i(ge),rE=n(ge,"LI",{});var KBe=s(rE);H0e=n(KBe,"STRONG",{});var Ywt=s(H0e);j6r=r(Ywt,"bert"),Ywt.forEach(t),D6r=r(KBe," \u2014 "),_J=n(KBe,"A",{href:!0});var Kwt=s(_J);G6r=r(Kwt,"TFBertForQuestionAnswering"),Kwt.forEach(t),O6r=r(KBe," (BERT model)"),KBe.forEach(t),V6r=i(ge),tE=n(ge,"LI",{});var ZBe=s(tE);U0e=n(ZBe,"STRONG",{});var Zwt=s(U0e);X6r=r(Zwt,"camembert"),Zwt.forEach(t),z6r=r(ZBe," \u2014 "),uJ=n(ZBe,"A",{href:!0});var e6t=s(uJ);W6r=r(e6t,"TFCamembertForQuestionAnswering"),e6t.forEach(t),Q6r=r(ZBe," (CamemBERT model)"),ZBe.forEach(t),H6r=i(ge),aE=n(ge,"LI",{});var eIe=s(aE);J0e=n(eIe,"STRONG",{});var o6t=s(J0e);U6r=r(o6t,"convbert"),o6t.forEach(t),J6r=r(eIe," \u2014 "),bJ=n(eIe,"A",{href:!0});var r6t=s(bJ);Y6r=r(r6t,"TFConvBertForQuestionAnswering"),r6t.forEach(t),K6r=r(eIe," (ConvBERT model)"),eIe.forEach(t),Z6r=i(ge),nE=n(ge,"LI",{});var oIe=s(nE);Y0e=n(oIe,"STRONG",{});var t6t=s(Y0e);eAr=r(t6t,"deberta"),t6t.forEach(t),oAr=r(oIe," \u2014 "),vJ=n(oIe,"A",{href:!0});var a6t=s(vJ);rAr=r(a6t,"TFDebertaForQuestionAnswering"),a6t.forEach(t),tAr=r(oIe," (DeBERTa model)"),oIe.forEach(t),aAr=i(ge),sE=n(ge,"LI",{});var rIe=s(sE);K0e=n(rIe,"STRONG",{});var n6t=s(K0e);nAr=r(n6t,"deberta-v2"),n6t.forEach(t),sAr=r(rIe," \u2014 "),FJ=n(rIe,"A",{href:!0});var s6t=s(FJ);lAr=r(s6t,"TFDebertaV2ForQuestionAnswering"),s6t.forEach(t),iAr=r(rIe," (DeBERTa-v2 model)"),rIe.forEach(t),dAr=i(ge),lE=n(ge,"LI",{});var tIe=s(lE);Z0e=n(tIe,"STRONG",{});var l6t=s(Z0e);cAr=r(l6t,"distilbert"),l6t.forEach(t),fAr=r(tIe," \u2014 "),TJ=n(tIe,"A",{href:!0});var i6t=s(TJ);mAr=r(i6t,"TFDistilBertForQuestionAnswering"),i6t.forEach(t),gAr=r(tIe," (DistilBERT model)"),tIe.forEach(t),hAr=i(ge),iE=n(ge,"LI",{});var aIe=s(iE);eTe=n(aIe,"STRONG",{});var d6t=s(eTe);pAr=r(d6t,"electra"),d6t.forEach(t),_Ar=r(aIe," \u2014 "),MJ=n(aIe,"A",{href:!0});var c6t=s(MJ);uAr=r(c6t,"TFElectraForQuestionAnswering"),c6t.forEach(t),bAr=r(aIe," (ELECTRA model)"),aIe.forEach(t),vAr=i(ge),dE=n(ge,"LI",{});var nIe=s(dE);oTe=n(nIe,"STRONG",{});var f6t=s(oTe);FAr=r(f6t,"flaubert"),f6t.forEach(t),TAr=r(nIe," \u2014 "),EJ=n(nIe,"A",{href:!0});var m6t=s(EJ);MAr=r(m6t,"TFFlaubertForQuestionAnsweringSimple"),m6t.forEach(t),EAr=r(nIe," (FlauBERT model)"),nIe.forEach(t),CAr=i(ge),cE=n(ge,"LI",{});var sIe=s(cE);rTe=n(sIe,"STRONG",{});var g6t=s(rTe);wAr=r(g6t,"funnel"),g6t.forEach(t),AAr=r(sIe," \u2014 "),CJ=n(sIe,"A",{href:!0});var h6t=s(CJ);yAr=r(h6t,"TFFunnelForQuestionAnswering"),h6t.forEach(t),LAr=r(sIe," (Funnel Transformer model)"),sIe.forEach(t),xAr=i(ge),fE=n(ge,"LI",{});var lIe=s(fE);tTe=n(lIe,"STRONG",{});var p6t=s(tTe);$Ar=r(p6t,"gptj"),p6t.forEach(t),kAr=r(lIe," \u2014 "),wJ=n(lIe,"A",{href:!0});var _6t=s(wJ);SAr=r(_6t,"TFGPTJForQuestionAnswering"),_6t.forEach(t),RAr=r(lIe," (GPT-J model)"),lIe.forEach(t),PAr=i(ge),mE=n(ge,"LI",{});var iIe=s(mE);aTe=n(iIe,"STRONG",{});var u6t=s(aTe);BAr=r(u6t,"longformer"),u6t.forEach(t),IAr=r(iIe," \u2014 "),AJ=n(iIe,"A",{href:!0});var b6t=s(AJ);NAr=r(b6t,"TFLongformerForQuestionAnswering"),b6t.forEach(t),qAr=r(iIe," (Longformer model)"),iIe.forEach(t),jAr=i(ge),gE=n(ge,"LI",{});var dIe=s(gE);nTe=n(dIe,"STRONG",{});var v6t=s(nTe);DAr=r(v6t,"mobilebert"),v6t.forEach(t),GAr=r(dIe," \u2014 "),yJ=n(dIe,"A",{href:!0});var F6t=s(yJ);OAr=r(F6t,"TFMobileBertForQuestionAnswering"),F6t.forEach(t),VAr=r(dIe," (MobileBERT model)"),dIe.forEach(t),XAr=i(ge),hE=n(ge,"LI",{});var cIe=s(hE);sTe=n(cIe,"STRONG",{});var T6t=s(sTe);zAr=r(T6t,"mpnet"),T6t.forEach(t),WAr=r(cIe," \u2014 "),LJ=n(cIe,"A",{href:!0});var M6t=s(LJ);QAr=r(M6t,"TFMPNetForQuestionAnswering"),M6t.forEach(t),HAr=r(cIe," (MPNet model)"),cIe.forEach(t),UAr=i(ge),pE=n(ge,"LI",{});var fIe=s(pE);lTe=n(fIe,"STRONG",{});var E6t=s(lTe);JAr=r(E6t,"rembert"),E6t.forEach(t),YAr=r(fIe," \u2014 "),xJ=n(fIe,"A",{href:!0});var C6t=s(xJ);KAr=r(C6t,"TFRemBertForQuestionAnswering"),C6t.forEach(t),ZAr=r(fIe," (RemBERT model)"),fIe.forEach(t),eyr=i(ge),_E=n(ge,"LI",{});var mIe=s(_E);iTe=n(mIe,"STRONG",{});var w6t=s(iTe);oyr=r(w6t,"roberta"),w6t.forEach(t),ryr=r(mIe," \u2014 "),$J=n(mIe,"A",{href:!0});var A6t=s($J);tyr=r(A6t,"TFRobertaForQuestionAnswering"),A6t.forEach(t),ayr=r(mIe," (RoBERTa model)"),mIe.forEach(t),nyr=i(ge),uE=n(ge,"LI",{});var gIe=s(uE);dTe=n(gIe,"STRONG",{});var y6t=s(dTe);syr=r(y6t,"roformer"),y6t.forEach(t),lyr=r(gIe," \u2014 "),kJ=n(gIe,"A",{href:!0});var L6t=s(kJ);iyr=r(L6t,"TFRoFormerForQuestionAnswering"),L6t.forEach(t),dyr=r(gIe," (RoFormer model)"),gIe.forEach(t),cyr=i(ge),bE=n(ge,"LI",{});var hIe=s(bE);cTe=n(hIe,"STRONG",{});var x6t=s(cTe);fyr=r(x6t,"xlm"),x6t.forEach(t),myr=r(hIe," \u2014 "),SJ=n(hIe,"A",{href:!0});var $6t=s(SJ);gyr=r($6t,"TFXLMForQuestionAnsweringSimple"),$6t.forEach(t),hyr=r(hIe," (XLM model)"),hIe.forEach(t),pyr=i(ge),vE=n(ge,"LI",{});var pIe=s(vE);fTe=n(pIe,"STRONG",{});var k6t=s(fTe);_yr=r(k6t,"xlm-roberta"),k6t.forEach(t),uyr=r(pIe," \u2014 "),RJ=n(pIe,"A",{href:!0});var S6t=s(RJ);byr=r(S6t,"TFXLMRobertaForQuestionAnswering"),S6t.forEach(t),vyr=r(pIe," (XLM-RoBERTa model)"),pIe.forEach(t),Fyr=i(ge),FE=n(ge,"LI",{});var _Ie=s(FE);mTe=n(_Ie,"STRONG",{});var R6t=s(mTe);Tyr=r(R6t,"xlnet"),R6t.forEach(t),Myr=r(_Ie," \u2014 "),PJ=n(_Ie,"A",{href:!0});var P6t=s(PJ);Eyr=r(P6t,"TFXLNetForQuestionAnsweringSimple"),P6t.forEach(t),Cyr=r(_Ie," (XLNet model)"),_Ie.forEach(t),ge.forEach(t),wyr=i(Il),T(TE.$$.fragment,Il),Il.forEach(t),Bl.forEach(t),Qje=i(f),Ec=n(f,"H2",{class:!0});var eOe=s(Ec);ME=n(eOe,"A",{id:!0,class:!0,href:!0});var B6t=s(ME);gTe=n(B6t,"SPAN",{});var I6t=s(gTe);T(F9.$$.fragment,I6t),I6t.forEach(t),B6t.forEach(t),Ayr=i(eOe),hTe=n(eOe,"SPAN",{});var N6t=s(hTe);yyr=r(N6t,"TFAutoModelForVision2Seq"),N6t.forEach(t),eOe.forEach(t),Hje=i(f),dr=n(f,"DIV",{class:!0});var Nl=s(dr);T(T9.$$.fragment,Nl),Lyr=i(Nl),Cc=n(Nl,"P",{});var Oee=s(Cc);xyr=r(Oee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),BJ=n(Oee,"A",{href:!0});var q6t=s(BJ);$yr=r(q6t,"from_pretrained()"),q6t.forEach(t),kyr=r(Oee," class method or the "),IJ=n(Oee,"A",{href:!0});var j6t=s(IJ);Syr=r(j6t,"from_config()"),j6t.forEach(t),Ryr=r(Oee,` class
method.`),Oee.forEach(t),Pyr=i(Nl),M9=n(Nl,"P",{});var oOe=s(M9);Byr=r(oOe,"This class cannot be instantiated directly using "),pTe=n(oOe,"CODE",{});var D6t=s(pTe);Iyr=r(D6t,"__init__()"),D6t.forEach(t),Nyr=r(oOe," (throws an error)."),oOe.forEach(t),qyr=i(Nl),jt=n(Nl,"DIV",{class:!0});var eA=s(jt);T(E9.$$.fragment,eA),jyr=i(eA),_Te=n(eA,"P",{});var G6t=s(_Te);Dyr=r(G6t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),G6t.forEach(t),Gyr=i(eA),wc=n(eA,"P",{});var Vee=s(wc);Oyr=r(Vee,`Note:
Loading a model from its configuration file does `),uTe=n(Vee,"STRONG",{});var O6t=s(uTe);Vyr=r(O6t,"not"),O6t.forEach(t),Xyr=r(Vee,` load the model weights. It only affects the
model\u2019s configuration. Use `),NJ=n(Vee,"A",{href:!0});var V6t=s(NJ);zyr=r(V6t,"from_pretrained()"),V6t.forEach(t),Wyr=r(Vee," to load the model weights."),Vee.forEach(t),Qyr=i(eA),T(EE.$$.fragment,eA),eA.forEach(t),Hyr=i(Nl),Nr=n(Nl,"DIV",{class:!0});var ql=s(Nr);T(C9.$$.fragment,ql),Uyr=i(ql),bTe=n(ql,"P",{});var X6t=s(bTe);Jyr=r(X6t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),X6t.forEach(t),Yyr=i(ql),mn=n(ql,"P",{});var oA=s(mn);Kyr=r(oA,"The model class to instantiate is selected based on the "),vTe=n(oA,"CODE",{});var z6t=s(vTe);Zyr=r(z6t,"model_type"),z6t.forEach(t),eLr=r(oA,` property of the config object (either
passed as an argument or loaded from `),FTe=n(oA,"CODE",{});var W6t=s(FTe);oLr=r(W6t,"pretrained_model_name_or_path"),W6t.forEach(t),rLr=r(oA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TTe=n(oA,"CODE",{});var Q6t=s(TTe);tLr=r(Q6t,"pretrained_model_name_or_path"),Q6t.forEach(t),aLr=r(oA,":"),oA.forEach(t),nLr=i(ql),MTe=n(ql,"UL",{});var H6t=s(MTe);CE=n(H6t,"LI",{});var uIe=s(CE);ETe=n(uIe,"STRONG",{});var U6t=s(ETe);sLr=r(U6t,"vision-encoder-decoder"),U6t.forEach(t),lLr=r(uIe," \u2014 "),qJ=n(uIe,"A",{href:!0});var J6t=s(qJ);iLr=r(J6t,"TFVisionEncoderDecoderModel"),J6t.forEach(t),dLr=r(uIe," (Vision Encoder decoder model)"),uIe.forEach(t),H6t.forEach(t),cLr=i(ql),T(wE.$$.fragment,ql),ql.forEach(t),Nl.forEach(t),Uje=i(f),Ac=n(f,"H2",{class:!0});var rOe=s(Ac);AE=n(rOe,"A",{id:!0,class:!0,href:!0});var Y6t=s(AE);CTe=n(Y6t,"SPAN",{});var K6t=s(CTe);T(w9.$$.fragment,K6t),K6t.forEach(t),Y6t.forEach(t),fLr=i(rOe),wTe=n(rOe,"SPAN",{});var Z6t=s(wTe);mLr=r(Z6t,"TFAutoModelForSpeechSeq2Seq"),Z6t.forEach(t),rOe.forEach(t),Jje=i(f),cr=n(f,"DIV",{class:!0});var jl=s(cr);T(A9.$$.fragment,jl),gLr=i(jl),yc=n(jl,"P",{});var Xee=s(yc);hLr=r(Xee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),jJ=n(Xee,"A",{href:!0});var eAt=s(jJ);pLr=r(eAt,"from_pretrained()"),eAt.forEach(t),_Lr=r(Xee," class method or the "),DJ=n(Xee,"A",{href:!0});var oAt=s(DJ);uLr=r(oAt,"from_config()"),oAt.forEach(t),bLr=r(Xee,` class
method.`),Xee.forEach(t),vLr=i(jl),y9=n(jl,"P",{});var tOe=s(y9);FLr=r(tOe,"This class cannot be instantiated directly using "),ATe=n(tOe,"CODE",{});var rAt=s(ATe);TLr=r(rAt,"__init__()"),rAt.forEach(t),MLr=r(tOe," (throws an error)."),tOe.forEach(t),ELr=i(jl),Dt=n(jl,"DIV",{class:!0});var rA=s(Dt);T(L9.$$.fragment,rA),CLr=i(rA),yTe=n(rA,"P",{});var tAt=s(yTe);wLr=r(tAt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),tAt.forEach(t),ALr=i(rA),Lc=n(rA,"P",{});var zee=s(Lc);yLr=r(zee,`Note:
Loading a model from its configuration file does `),LTe=n(zee,"STRONG",{});var aAt=s(LTe);LLr=r(aAt,"not"),aAt.forEach(t),xLr=r(zee,` load the model weights. It only affects the
model\u2019s configuration. Use `),GJ=n(zee,"A",{href:!0});var nAt=s(GJ);$Lr=r(nAt,"from_pretrained()"),nAt.forEach(t),kLr=r(zee," to load the model weights."),zee.forEach(t),SLr=i(rA),T(yE.$$.fragment,rA),rA.forEach(t),RLr=i(jl),qr=n(jl,"DIV",{class:!0});var Dl=s(qr);T(x9.$$.fragment,Dl),PLr=i(Dl),xTe=n(Dl,"P",{});var sAt=s(xTe);BLr=r(sAt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),sAt.forEach(t),ILr=i(Dl),gn=n(Dl,"P",{});var tA=s(gn);NLr=r(tA,"The model class to instantiate is selected based on the "),$Te=n(tA,"CODE",{});var lAt=s($Te);qLr=r(lAt,"model_type"),lAt.forEach(t),jLr=r(tA,` property of the config object (either
passed as an argument or loaded from `),kTe=n(tA,"CODE",{});var iAt=s(kTe);DLr=r(iAt,"pretrained_model_name_or_path"),iAt.forEach(t),GLr=r(tA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),STe=n(tA,"CODE",{});var dAt=s(STe);OLr=r(dAt,"pretrained_model_name_or_path"),dAt.forEach(t),VLr=r(tA,":"),tA.forEach(t),XLr=i(Dl),RTe=n(Dl,"UL",{});var cAt=s(RTe);LE=n(cAt,"LI",{});var bIe=s(LE);PTe=n(bIe,"STRONG",{});var fAt=s(PTe);zLr=r(fAt,"speech_to_text"),fAt.forEach(t),WLr=r(bIe," \u2014 "),OJ=n(bIe,"A",{href:!0});var mAt=s(OJ);QLr=r(mAt,"TFSpeech2TextForConditionalGeneration"),mAt.forEach(t),HLr=r(bIe," (Speech2Text model)"),bIe.forEach(t),cAt.forEach(t),ULr=i(Dl),T(xE.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),Yje=i(f),xc=n(f,"H2",{class:!0});var aOe=s(xc);$E=n(aOe,"A",{id:!0,class:!0,href:!0});var gAt=s($E);BTe=n(gAt,"SPAN",{});var hAt=s(BTe);T($9.$$.fragment,hAt),hAt.forEach(t),gAt.forEach(t),JLr=i(aOe),ITe=n(aOe,"SPAN",{});var pAt=s(ITe);YLr=r(pAt,"FlaxAutoModel"),pAt.forEach(t),aOe.forEach(t),Kje=i(f),fr=n(f,"DIV",{class:!0});var Gl=s(fr);T(k9.$$.fragment,Gl),KLr=i(Gl),$c=n(Gl,"P",{});var Wee=s($c);ZLr=r(Wee,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),VJ=n(Wee,"A",{href:!0});var _At=s(VJ);e8r=r(_At,"from_pretrained()"),_At.forEach(t),o8r=r(Wee," class method or the "),XJ=n(Wee,"A",{href:!0});var uAt=s(XJ);r8r=r(uAt,"from_config()"),uAt.forEach(t),t8r=r(Wee,` class
method.`),Wee.forEach(t),a8r=i(Gl),S9=n(Gl,"P",{});var nOe=s(S9);n8r=r(nOe,"This class cannot be instantiated directly using "),NTe=n(nOe,"CODE",{});var bAt=s(NTe);s8r=r(bAt,"__init__()"),bAt.forEach(t),l8r=r(nOe," (throws an error)."),nOe.forEach(t),i8r=i(Gl),Gt=n(Gl,"DIV",{class:!0});var aA=s(Gt);T(R9.$$.fragment,aA),d8r=i(aA),qTe=n(aA,"P",{});var vAt=s(qTe);c8r=r(vAt,"Instantiates one of the base model classes of the library from a configuration."),vAt.forEach(t),f8r=i(aA),kc=n(aA,"P",{});var Qee=s(kc);m8r=r(Qee,`Note:
Loading a model from its configuration file does `),jTe=n(Qee,"STRONG",{});var FAt=s(jTe);g8r=r(FAt,"not"),FAt.forEach(t),h8r=r(Qee,` load the model weights. It only affects the
model\u2019s configuration. Use `),zJ=n(Qee,"A",{href:!0});var TAt=s(zJ);p8r=r(TAt,"from_pretrained()"),TAt.forEach(t),_8r=r(Qee," to load the model weights."),Qee.forEach(t),u8r=i(aA),T(kE.$$.fragment,aA),aA.forEach(t),b8r=i(Gl),jr=n(Gl,"DIV",{class:!0});var Ol=s(jr);T(P9.$$.fragment,Ol),v8r=i(Ol),DTe=n(Ol,"P",{});var MAt=s(DTe);F8r=r(MAt,"Instantiate one of the base model classes of the library from a pretrained model."),MAt.forEach(t),T8r=i(Ol),hn=n(Ol,"P",{});var nA=s(hn);M8r=r(nA,"The model class to instantiate is selected based on the "),GTe=n(nA,"CODE",{});var EAt=s(GTe);E8r=r(EAt,"model_type"),EAt.forEach(t),C8r=r(nA,` property of the config object (either
passed as an argument or loaded from `),OTe=n(nA,"CODE",{});var CAt=s(OTe);w8r=r(CAt,"pretrained_model_name_or_path"),CAt.forEach(t),A8r=r(nA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VTe=n(nA,"CODE",{});var wAt=s(VTe);y8r=r(wAt,"pretrained_model_name_or_path"),wAt.forEach(t),L8r=r(nA,":"),nA.forEach(t),x8r=i(Ol),re=n(Ol,"UL",{});var ne=s(re);SE=n(ne,"LI",{});var vIe=s(SE);XTe=n(vIe,"STRONG",{});var AAt=s(XTe);$8r=r(AAt,"albert"),AAt.forEach(t),k8r=r(vIe," \u2014 "),WJ=n(vIe,"A",{href:!0});var yAt=s(WJ);S8r=r(yAt,"FlaxAlbertModel"),yAt.forEach(t),R8r=r(vIe," (ALBERT model)"),vIe.forEach(t),P8r=i(ne),RE=n(ne,"LI",{});var FIe=s(RE);zTe=n(FIe,"STRONG",{});var LAt=s(zTe);B8r=r(LAt,"bart"),LAt.forEach(t),I8r=r(FIe," \u2014 "),QJ=n(FIe,"A",{href:!0});var xAt=s(QJ);N8r=r(xAt,"FlaxBartModel"),xAt.forEach(t),q8r=r(FIe," (BART model)"),FIe.forEach(t),j8r=i(ne),PE=n(ne,"LI",{});var TIe=s(PE);WTe=n(TIe,"STRONG",{});var $At=s(WTe);D8r=r($At,"beit"),$At.forEach(t),G8r=r(TIe," \u2014 "),HJ=n(TIe,"A",{href:!0});var kAt=s(HJ);O8r=r(kAt,"FlaxBeitModel"),kAt.forEach(t),V8r=r(TIe," (BEiT model)"),TIe.forEach(t),X8r=i(ne),BE=n(ne,"LI",{});var MIe=s(BE);QTe=n(MIe,"STRONG",{});var SAt=s(QTe);z8r=r(SAt,"bert"),SAt.forEach(t),W8r=r(MIe," \u2014 "),UJ=n(MIe,"A",{href:!0});var RAt=s(UJ);Q8r=r(RAt,"FlaxBertModel"),RAt.forEach(t),H8r=r(MIe," (BERT model)"),MIe.forEach(t),U8r=i(ne),IE=n(ne,"LI",{});var EIe=s(IE);HTe=n(EIe,"STRONG",{});var PAt=s(HTe);J8r=r(PAt,"big_bird"),PAt.forEach(t),Y8r=r(EIe," \u2014 "),JJ=n(EIe,"A",{href:!0});var BAt=s(JJ);K8r=r(BAt,"FlaxBigBirdModel"),BAt.forEach(t),Z8r=r(EIe," (BigBird model)"),EIe.forEach(t),e9r=i(ne),NE=n(ne,"LI",{});var CIe=s(NE);UTe=n(CIe,"STRONG",{});var IAt=s(UTe);o9r=r(IAt,"blenderbot"),IAt.forEach(t),r9r=r(CIe," \u2014 "),YJ=n(CIe,"A",{href:!0});var NAt=s(YJ);t9r=r(NAt,"FlaxBlenderbotModel"),NAt.forEach(t),a9r=r(CIe," (Blenderbot model)"),CIe.forEach(t),n9r=i(ne),qE=n(ne,"LI",{});var wIe=s(qE);JTe=n(wIe,"STRONG",{});var qAt=s(JTe);s9r=r(qAt,"blenderbot-small"),qAt.forEach(t),l9r=r(wIe," \u2014 "),KJ=n(wIe,"A",{href:!0});var jAt=s(KJ);i9r=r(jAt,"FlaxBlenderbotSmallModel"),jAt.forEach(t),d9r=r(wIe," (BlenderbotSmall model)"),wIe.forEach(t),c9r=i(ne),jE=n(ne,"LI",{});var AIe=s(jE);YTe=n(AIe,"STRONG",{});var DAt=s(YTe);f9r=r(DAt,"clip"),DAt.forEach(t),m9r=r(AIe," \u2014 "),ZJ=n(AIe,"A",{href:!0});var GAt=s(ZJ);g9r=r(GAt,"FlaxCLIPModel"),GAt.forEach(t),h9r=r(AIe," (CLIP model)"),AIe.forEach(t),p9r=i(ne),DE=n(ne,"LI",{});var yIe=s(DE);KTe=n(yIe,"STRONG",{});var OAt=s(KTe);_9r=r(OAt,"distilbert"),OAt.forEach(t),u9r=r(yIe," \u2014 "),eY=n(yIe,"A",{href:!0});var VAt=s(eY);b9r=r(VAt,"FlaxDistilBertModel"),VAt.forEach(t),v9r=r(yIe," (DistilBERT model)"),yIe.forEach(t),F9r=i(ne),GE=n(ne,"LI",{});var LIe=s(GE);ZTe=n(LIe,"STRONG",{});var XAt=s(ZTe);T9r=r(XAt,"electra"),XAt.forEach(t),M9r=r(LIe," \u2014 "),oY=n(LIe,"A",{href:!0});var zAt=s(oY);E9r=r(zAt,"FlaxElectraModel"),zAt.forEach(t),C9r=r(LIe," (ELECTRA model)"),LIe.forEach(t),w9r=i(ne),OE=n(ne,"LI",{});var xIe=s(OE);e7e=n(xIe,"STRONG",{});var WAt=s(e7e);A9r=r(WAt,"gpt2"),WAt.forEach(t),y9r=r(xIe," \u2014 "),rY=n(xIe,"A",{href:!0});var QAt=s(rY);L9r=r(QAt,"FlaxGPT2Model"),QAt.forEach(t),x9r=r(xIe," (OpenAI GPT-2 model)"),xIe.forEach(t),$9r=i(ne),VE=n(ne,"LI",{});var $Ie=s(VE);o7e=n($Ie,"STRONG",{});var HAt=s(o7e);k9r=r(HAt,"gpt_neo"),HAt.forEach(t),S9r=r($Ie," \u2014 "),tY=n($Ie,"A",{href:!0});var UAt=s(tY);R9r=r(UAt,"FlaxGPTNeoModel"),UAt.forEach(t),P9r=r($Ie," (GPT Neo model)"),$Ie.forEach(t),B9r=i(ne),XE=n(ne,"LI",{});var kIe=s(XE);r7e=n(kIe,"STRONG",{});var JAt=s(r7e);I9r=r(JAt,"gptj"),JAt.forEach(t),N9r=r(kIe," \u2014 "),aY=n(kIe,"A",{href:!0});var YAt=s(aY);q9r=r(YAt,"FlaxGPTJModel"),YAt.forEach(t),j9r=r(kIe," (GPT-J model)"),kIe.forEach(t),D9r=i(ne),zE=n(ne,"LI",{});var SIe=s(zE);t7e=n(SIe,"STRONG",{});var KAt=s(t7e);G9r=r(KAt,"marian"),KAt.forEach(t),O9r=r(SIe," \u2014 "),nY=n(SIe,"A",{href:!0});var ZAt=s(nY);V9r=r(ZAt,"FlaxMarianModel"),ZAt.forEach(t),X9r=r(SIe," (Marian model)"),SIe.forEach(t),z9r=i(ne),WE=n(ne,"LI",{});var RIe=s(WE);a7e=n(RIe,"STRONG",{});var eyt=s(a7e);W9r=r(eyt,"mbart"),eyt.forEach(t),Q9r=r(RIe," \u2014 "),sY=n(RIe,"A",{href:!0});var oyt=s(sY);H9r=r(oyt,"FlaxMBartModel"),oyt.forEach(t),U9r=r(RIe," (mBART model)"),RIe.forEach(t),J9r=i(ne),QE=n(ne,"LI",{});var PIe=s(QE);n7e=n(PIe,"STRONG",{});var ryt=s(n7e);Y9r=r(ryt,"mt5"),ryt.forEach(t),K9r=r(PIe," \u2014 "),lY=n(PIe,"A",{href:!0});var tyt=s(lY);Z9r=r(tyt,"FlaxMT5Model"),tyt.forEach(t),exr=r(PIe," (mT5 model)"),PIe.forEach(t),oxr=i(ne),HE=n(ne,"LI",{});var BIe=s(HE);s7e=n(BIe,"STRONG",{});var ayt=s(s7e);rxr=r(ayt,"opt"),ayt.forEach(t),txr=r(BIe," \u2014 "),iY=n(BIe,"A",{href:!0});var nyt=s(iY);axr=r(nyt,"FlaxOPTModel"),nyt.forEach(t),nxr=r(BIe," (OPT model)"),BIe.forEach(t),sxr=i(ne),UE=n(ne,"LI",{});var IIe=s(UE);l7e=n(IIe,"STRONG",{});var syt=s(l7e);lxr=r(syt,"pegasus"),syt.forEach(t),ixr=r(IIe," \u2014 "),dY=n(IIe,"A",{href:!0});var lyt=s(dY);dxr=r(lyt,"FlaxPegasusModel"),lyt.forEach(t),cxr=r(IIe," (Pegasus model)"),IIe.forEach(t),fxr=i(ne),JE=n(ne,"LI",{});var NIe=s(JE);i7e=n(NIe,"STRONG",{});var iyt=s(i7e);mxr=r(iyt,"roberta"),iyt.forEach(t),gxr=r(NIe," \u2014 "),cY=n(NIe,"A",{href:!0});var dyt=s(cY);hxr=r(dyt,"FlaxRobertaModel"),dyt.forEach(t),pxr=r(NIe," (RoBERTa model)"),NIe.forEach(t),_xr=i(ne),YE=n(ne,"LI",{});var qIe=s(YE);d7e=n(qIe,"STRONG",{});var cyt=s(d7e);uxr=r(cyt,"roformer"),cyt.forEach(t),bxr=r(qIe," \u2014 "),fY=n(qIe,"A",{href:!0});var fyt=s(fY);vxr=r(fyt,"FlaxRoFormerModel"),fyt.forEach(t),Fxr=r(qIe," (RoFormer model)"),qIe.forEach(t),Txr=i(ne),KE=n(ne,"LI",{});var jIe=s(KE);c7e=n(jIe,"STRONG",{});var myt=s(c7e);Mxr=r(myt,"t5"),myt.forEach(t),Exr=r(jIe," \u2014 "),mY=n(jIe,"A",{href:!0});var gyt=s(mY);Cxr=r(gyt,"FlaxT5Model"),gyt.forEach(t),wxr=r(jIe," (T5 model)"),jIe.forEach(t),Axr=i(ne),ZE=n(ne,"LI",{});var DIe=s(ZE);f7e=n(DIe,"STRONG",{});var hyt=s(f7e);yxr=r(hyt,"vision-text-dual-encoder"),hyt.forEach(t),Lxr=r(DIe," \u2014 "),gY=n(DIe,"A",{href:!0});var pyt=s(gY);xxr=r(pyt,"FlaxVisionTextDualEncoderModel"),pyt.forEach(t),$xr=r(DIe," (VisionTextDualEncoder model)"),DIe.forEach(t),kxr=i(ne),eC=n(ne,"LI",{});var GIe=s(eC);m7e=n(GIe,"STRONG",{});var _yt=s(m7e);Sxr=r(_yt,"vit"),_yt.forEach(t),Rxr=r(GIe," \u2014 "),hY=n(GIe,"A",{href:!0});var uyt=s(hY);Pxr=r(uyt,"FlaxViTModel"),uyt.forEach(t),Bxr=r(GIe," (ViT model)"),GIe.forEach(t),Ixr=i(ne),oC=n(ne,"LI",{});var OIe=s(oC);g7e=n(OIe,"STRONG",{});var byt=s(g7e);Nxr=r(byt,"wav2vec2"),byt.forEach(t),qxr=r(OIe," \u2014 "),pY=n(OIe,"A",{href:!0});var vyt=s(pY);jxr=r(vyt,"FlaxWav2Vec2Model"),vyt.forEach(t),Dxr=r(OIe," (Wav2Vec2 model)"),OIe.forEach(t),Gxr=i(ne),rC=n(ne,"LI",{});var VIe=s(rC);h7e=n(VIe,"STRONG",{});var Fyt=s(h7e);Oxr=r(Fyt,"xglm"),Fyt.forEach(t),Vxr=r(VIe," \u2014 "),_Y=n(VIe,"A",{href:!0});var Tyt=s(_Y);Xxr=r(Tyt,"FlaxXGLMModel"),Tyt.forEach(t),zxr=r(VIe," (XGLM model)"),VIe.forEach(t),Wxr=i(ne),tC=n(ne,"LI",{});var XIe=s(tC);p7e=n(XIe,"STRONG",{});var Myt=s(p7e);Qxr=r(Myt,"xlm-roberta"),Myt.forEach(t),Hxr=r(XIe," \u2014 "),uY=n(XIe,"A",{href:!0});var Eyt=s(uY);Uxr=r(Eyt,"FlaxXLMRobertaModel"),Eyt.forEach(t),Jxr=r(XIe," (XLM-RoBERTa model)"),XIe.forEach(t),ne.forEach(t),Yxr=i(Ol),T(aC.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),Zje=i(f),Sc=n(f,"H2",{class:!0});var sOe=s(Sc);nC=n(sOe,"A",{id:!0,class:!0,href:!0});var Cyt=s(nC);_7e=n(Cyt,"SPAN",{});var wyt=s(_7e);T(B9.$$.fragment,wyt),wyt.forEach(t),Cyt.forEach(t),Kxr=i(sOe),u7e=n(sOe,"SPAN",{});var Ayt=s(u7e);Zxr=r(Ayt,"FlaxAutoModelForCausalLM"),Ayt.forEach(t),sOe.forEach(t),eDe=i(f),mr=n(f,"DIV",{class:!0});var Vl=s(mr);T(I9.$$.fragment,Vl),e$r=i(Vl),Rc=n(Vl,"P",{});var Hee=s(Rc);o$r=r(Hee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),bY=n(Hee,"A",{href:!0});var yyt=s(bY);r$r=r(yyt,"from_pretrained()"),yyt.forEach(t),t$r=r(Hee," class method or the "),vY=n(Hee,"A",{href:!0});var Lyt=s(vY);a$r=r(Lyt,"from_config()"),Lyt.forEach(t),n$r=r(Hee,` class
method.`),Hee.forEach(t),s$r=i(Vl),N9=n(Vl,"P",{});var lOe=s(N9);l$r=r(lOe,"This class cannot be instantiated directly using "),b7e=n(lOe,"CODE",{});var xyt=s(b7e);i$r=r(xyt,"__init__()"),xyt.forEach(t),d$r=r(lOe," (throws an error)."),lOe.forEach(t),c$r=i(Vl),Ot=n(Vl,"DIV",{class:!0});var sA=s(Ot);T(q9.$$.fragment,sA),f$r=i(sA),v7e=n(sA,"P",{});var $yt=s(v7e);m$r=r($yt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),$yt.forEach(t),g$r=i(sA),Pc=n(sA,"P",{});var Uee=s(Pc);h$r=r(Uee,`Note:
Loading a model from its configuration file does `),F7e=n(Uee,"STRONG",{});var kyt=s(F7e);p$r=r(kyt,"not"),kyt.forEach(t),_$r=r(Uee,` load the model weights. It only affects the
model\u2019s configuration. Use `),FY=n(Uee,"A",{href:!0});var Syt=s(FY);u$r=r(Syt,"from_pretrained()"),Syt.forEach(t),b$r=r(Uee," to load the model weights."),Uee.forEach(t),v$r=i(sA),T(sC.$$.fragment,sA),sA.forEach(t),F$r=i(Vl),Dr=n(Vl,"DIV",{class:!0});var Xl=s(Dr);T(j9.$$.fragment,Xl),T$r=i(Xl),T7e=n(Xl,"P",{});var Ryt=s(T7e);M$r=r(Ryt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Ryt.forEach(t),E$r=i(Xl),pn=n(Xl,"P",{});var lA=s(pn);C$r=r(lA,"The model class to instantiate is selected based on the "),M7e=n(lA,"CODE",{});var Pyt=s(M7e);w$r=r(Pyt,"model_type"),Pyt.forEach(t),A$r=r(lA,` property of the config object (either
passed as an argument or loaded from `),E7e=n(lA,"CODE",{});var Byt=s(E7e);y$r=r(Byt,"pretrained_model_name_or_path"),Byt.forEach(t),L$r=r(lA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C7e=n(lA,"CODE",{});var Iyt=s(C7e);x$r=r(Iyt,"pretrained_model_name_or_path"),Iyt.forEach(t),$$r=r(lA,":"),lA.forEach(t),k$r=i(Xl),Le=n(Xl,"UL",{});var Ie=s(Le);lC=n(Ie,"LI",{});var zIe=s(lC);w7e=n(zIe,"STRONG",{});var Nyt=s(w7e);S$r=r(Nyt,"bart"),Nyt.forEach(t),R$r=r(zIe," \u2014 "),TY=n(zIe,"A",{href:!0});var qyt=s(TY);P$r=r(qyt,"FlaxBartForCausalLM"),qyt.forEach(t),B$r=r(zIe," (BART model)"),zIe.forEach(t),I$r=i(Ie),iC=n(Ie,"LI",{});var WIe=s(iC);A7e=n(WIe,"STRONG",{});var jyt=s(A7e);N$r=r(jyt,"bert"),jyt.forEach(t),q$r=r(WIe," \u2014 "),MY=n(WIe,"A",{href:!0});var Dyt=s(MY);j$r=r(Dyt,"FlaxBertForCausalLM"),Dyt.forEach(t),D$r=r(WIe," (BERT model)"),WIe.forEach(t),G$r=i(Ie),dC=n(Ie,"LI",{});var QIe=s(dC);y7e=n(QIe,"STRONG",{});var Gyt=s(y7e);O$r=r(Gyt,"big_bird"),Gyt.forEach(t),V$r=r(QIe," \u2014 "),EY=n(QIe,"A",{href:!0});var Oyt=s(EY);X$r=r(Oyt,"FlaxBigBirdForCausalLM"),Oyt.forEach(t),z$r=r(QIe," (BigBird model)"),QIe.forEach(t),W$r=i(Ie),cC=n(Ie,"LI",{});var HIe=s(cC);L7e=n(HIe,"STRONG",{});var Vyt=s(L7e);Q$r=r(Vyt,"electra"),Vyt.forEach(t),H$r=r(HIe," \u2014 "),CY=n(HIe,"A",{href:!0});var Xyt=s(CY);U$r=r(Xyt,"FlaxElectraForCausalLM"),Xyt.forEach(t),J$r=r(HIe," (ELECTRA model)"),HIe.forEach(t),Y$r=i(Ie),fC=n(Ie,"LI",{});var UIe=s(fC);x7e=n(UIe,"STRONG",{});var zyt=s(x7e);K$r=r(zyt,"gpt2"),zyt.forEach(t),Z$r=r(UIe," \u2014 "),wY=n(UIe,"A",{href:!0});var Wyt=s(wY);ekr=r(Wyt,"FlaxGPT2LMHeadModel"),Wyt.forEach(t),okr=r(UIe," (OpenAI GPT-2 model)"),UIe.forEach(t),rkr=i(Ie),mC=n(Ie,"LI",{});var JIe=s(mC);$7e=n(JIe,"STRONG",{});var Qyt=s($7e);tkr=r(Qyt,"gpt_neo"),Qyt.forEach(t),akr=r(JIe," \u2014 "),AY=n(JIe,"A",{href:!0});var Hyt=s(AY);nkr=r(Hyt,"FlaxGPTNeoForCausalLM"),Hyt.forEach(t),skr=r(JIe," (GPT Neo model)"),JIe.forEach(t),lkr=i(Ie),gC=n(Ie,"LI",{});var YIe=s(gC);k7e=n(YIe,"STRONG",{});var Uyt=s(k7e);ikr=r(Uyt,"gptj"),Uyt.forEach(t),dkr=r(YIe," \u2014 "),yY=n(YIe,"A",{href:!0});var Jyt=s(yY);ckr=r(Jyt,"FlaxGPTJForCausalLM"),Jyt.forEach(t),fkr=r(YIe," (GPT-J model)"),YIe.forEach(t),mkr=i(Ie),hC=n(Ie,"LI",{});var KIe=s(hC);S7e=n(KIe,"STRONG",{});var Yyt=s(S7e);gkr=r(Yyt,"opt"),Yyt.forEach(t),hkr=r(KIe," \u2014 "),LY=n(KIe,"A",{href:!0});var Kyt=s(LY);pkr=r(Kyt,"FlaxOPTForCausalLM"),Kyt.forEach(t),_kr=r(KIe," (OPT model)"),KIe.forEach(t),ukr=i(Ie),pC=n(Ie,"LI",{});var ZIe=s(pC);R7e=n(ZIe,"STRONG",{});var Zyt=s(R7e);bkr=r(Zyt,"roberta"),Zyt.forEach(t),vkr=r(ZIe," \u2014 "),xY=n(ZIe,"A",{href:!0});var eLt=s(xY);Fkr=r(eLt,"FlaxRobertaForCausalLM"),eLt.forEach(t),Tkr=r(ZIe," (RoBERTa model)"),ZIe.forEach(t),Mkr=i(Ie),_C=n(Ie,"LI",{});var eNe=s(_C);P7e=n(eNe,"STRONG",{});var oLt=s(P7e);Ekr=r(oLt,"xglm"),oLt.forEach(t),Ckr=r(eNe," \u2014 "),$Y=n(eNe,"A",{href:!0});var rLt=s($Y);wkr=r(rLt,"FlaxXGLMForCausalLM"),rLt.forEach(t),Akr=r(eNe," (XGLM model)"),eNe.forEach(t),Ie.forEach(t),ykr=i(Xl),T(uC.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),oDe=i(f),Bc=n(f,"H2",{class:!0});var iOe=s(Bc);bC=n(iOe,"A",{id:!0,class:!0,href:!0});var tLt=s(bC);B7e=n(tLt,"SPAN",{});var aLt=s(B7e);T(D9.$$.fragment,aLt),aLt.forEach(t),tLt.forEach(t),Lkr=i(iOe),I7e=n(iOe,"SPAN",{});var nLt=s(I7e);xkr=r(nLt,"FlaxAutoModelForPreTraining"),nLt.forEach(t),iOe.forEach(t),rDe=i(f),gr=n(f,"DIV",{class:!0});var zl=s(gr);T(G9.$$.fragment,zl),$kr=i(zl),Ic=n(zl,"P",{});var Jee=s(Ic);kkr=r(Jee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),kY=n(Jee,"A",{href:!0});var sLt=s(kY);Skr=r(sLt,"from_pretrained()"),sLt.forEach(t),Rkr=r(Jee," class method or the "),SY=n(Jee,"A",{href:!0});var lLt=s(SY);Pkr=r(lLt,"from_config()"),lLt.forEach(t),Bkr=r(Jee,` class
method.`),Jee.forEach(t),Ikr=i(zl),O9=n(zl,"P",{});var dOe=s(O9);Nkr=r(dOe,"This class cannot be instantiated directly using "),N7e=n(dOe,"CODE",{});var iLt=s(N7e);qkr=r(iLt,"__init__()"),iLt.forEach(t),jkr=r(dOe," (throws an error)."),dOe.forEach(t),Dkr=i(zl),Vt=n(zl,"DIV",{class:!0});var iA=s(Vt);T(V9.$$.fragment,iA),Gkr=i(iA),q7e=n(iA,"P",{});var dLt=s(q7e);Okr=r(dLt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),dLt.forEach(t),Vkr=i(iA),Nc=n(iA,"P",{});var Yee=s(Nc);Xkr=r(Yee,`Note:
Loading a model from its configuration file does `),j7e=n(Yee,"STRONG",{});var cLt=s(j7e);zkr=r(cLt,"not"),cLt.forEach(t),Wkr=r(Yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),RY=n(Yee,"A",{href:!0});var fLt=s(RY);Qkr=r(fLt,"from_pretrained()"),fLt.forEach(t),Hkr=r(Yee," to load the model weights."),Yee.forEach(t),Ukr=i(iA),T(vC.$$.fragment,iA),iA.forEach(t),Jkr=i(zl),Gr=n(zl,"DIV",{class:!0});var Wl=s(Gr);T(X9.$$.fragment,Wl),Ykr=i(Wl),D7e=n(Wl,"P",{});var mLt=s(D7e);Kkr=r(mLt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),mLt.forEach(t),Zkr=i(Wl),_n=n(Wl,"P",{});var dA=s(_n);eSr=r(dA,"The model class to instantiate is selected based on the "),G7e=n(dA,"CODE",{});var gLt=s(G7e);oSr=r(gLt,"model_type"),gLt.forEach(t),rSr=r(dA,` property of the config object (either
passed as an argument or loaded from `),O7e=n(dA,"CODE",{});var hLt=s(O7e);tSr=r(hLt,"pretrained_model_name_or_path"),hLt.forEach(t),aSr=r(dA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V7e=n(dA,"CODE",{});var pLt=s(V7e);nSr=r(pLt,"pretrained_model_name_or_path"),pLt.forEach(t),sSr=r(dA,":"),dA.forEach(t),lSr=i(Wl),Ee=n(Wl,"UL",{});var we=s(Ee);FC=n(we,"LI",{});var oNe=s(FC);X7e=n(oNe,"STRONG",{});var _Lt=s(X7e);iSr=r(_Lt,"albert"),_Lt.forEach(t),dSr=r(oNe," \u2014 "),PY=n(oNe,"A",{href:!0});var uLt=s(PY);cSr=r(uLt,"FlaxAlbertForPreTraining"),uLt.forEach(t),fSr=r(oNe," (ALBERT model)"),oNe.forEach(t),mSr=i(we),TC=n(we,"LI",{});var rNe=s(TC);z7e=n(rNe,"STRONG",{});var bLt=s(z7e);gSr=r(bLt,"bart"),bLt.forEach(t),hSr=r(rNe," \u2014 "),BY=n(rNe,"A",{href:!0});var vLt=s(BY);pSr=r(vLt,"FlaxBartForConditionalGeneration"),vLt.forEach(t),_Sr=r(rNe," (BART model)"),rNe.forEach(t),uSr=i(we),MC=n(we,"LI",{});var tNe=s(MC);W7e=n(tNe,"STRONG",{});var FLt=s(W7e);bSr=r(FLt,"bert"),FLt.forEach(t),vSr=r(tNe," \u2014 "),IY=n(tNe,"A",{href:!0});var TLt=s(IY);FSr=r(TLt,"FlaxBertForPreTraining"),TLt.forEach(t),TSr=r(tNe," (BERT model)"),tNe.forEach(t),MSr=i(we),EC=n(we,"LI",{});var aNe=s(EC);Q7e=n(aNe,"STRONG",{});var MLt=s(Q7e);ESr=r(MLt,"big_bird"),MLt.forEach(t),CSr=r(aNe," \u2014 "),NY=n(aNe,"A",{href:!0});var ELt=s(NY);wSr=r(ELt,"FlaxBigBirdForPreTraining"),ELt.forEach(t),ASr=r(aNe," (BigBird model)"),aNe.forEach(t),ySr=i(we),CC=n(we,"LI",{});var nNe=s(CC);H7e=n(nNe,"STRONG",{});var CLt=s(H7e);LSr=r(CLt,"electra"),CLt.forEach(t),xSr=r(nNe," \u2014 "),qY=n(nNe,"A",{href:!0});var wLt=s(qY);$Sr=r(wLt,"FlaxElectraForPreTraining"),wLt.forEach(t),kSr=r(nNe," (ELECTRA model)"),nNe.forEach(t),SSr=i(we),wC=n(we,"LI",{});var sNe=s(wC);U7e=n(sNe,"STRONG",{});var ALt=s(U7e);RSr=r(ALt,"mbart"),ALt.forEach(t),PSr=r(sNe," \u2014 "),jY=n(sNe,"A",{href:!0});var yLt=s(jY);BSr=r(yLt,"FlaxMBartForConditionalGeneration"),yLt.forEach(t),ISr=r(sNe," (mBART model)"),sNe.forEach(t),NSr=i(we),AC=n(we,"LI",{});var lNe=s(AC);J7e=n(lNe,"STRONG",{});var LLt=s(J7e);qSr=r(LLt,"mt5"),LLt.forEach(t),jSr=r(lNe," \u2014 "),DY=n(lNe,"A",{href:!0});var xLt=s(DY);DSr=r(xLt,"FlaxMT5ForConditionalGeneration"),xLt.forEach(t),GSr=r(lNe," (mT5 model)"),lNe.forEach(t),OSr=i(we),yC=n(we,"LI",{});var iNe=s(yC);Y7e=n(iNe,"STRONG",{});var $Lt=s(Y7e);VSr=r($Lt,"roberta"),$Lt.forEach(t),XSr=r(iNe," \u2014 "),GY=n(iNe,"A",{href:!0});var kLt=s(GY);zSr=r(kLt,"FlaxRobertaForMaskedLM"),kLt.forEach(t),WSr=r(iNe," (RoBERTa model)"),iNe.forEach(t),QSr=i(we),LC=n(we,"LI",{});var dNe=s(LC);K7e=n(dNe,"STRONG",{});var SLt=s(K7e);HSr=r(SLt,"roformer"),SLt.forEach(t),USr=r(dNe," \u2014 "),OY=n(dNe,"A",{href:!0});var RLt=s(OY);JSr=r(RLt,"FlaxRoFormerForMaskedLM"),RLt.forEach(t),YSr=r(dNe," (RoFormer model)"),dNe.forEach(t),KSr=i(we),xC=n(we,"LI",{});var cNe=s(xC);Z7e=n(cNe,"STRONG",{});var PLt=s(Z7e);ZSr=r(PLt,"t5"),PLt.forEach(t),eRr=r(cNe," \u2014 "),VY=n(cNe,"A",{href:!0});var BLt=s(VY);oRr=r(BLt,"FlaxT5ForConditionalGeneration"),BLt.forEach(t),rRr=r(cNe," (T5 model)"),cNe.forEach(t),tRr=i(we),$C=n(we,"LI",{});var fNe=s($C);eMe=n(fNe,"STRONG",{});var ILt=s(eMe);aRr=r(ILt,"wav2vec2"),ILt.forEach(t),nRr=r(fNe," \u2014 "),XY=n(fNe,"A",{href:!0});var NLt=s(XY);sRr=r(NLt,"FlaxWav2Vec2ForPreTraining"),NLt.forEach(t),lRr=r(fNe," (Wav2Vec2 model)"),fNe.forEach(t),iRr=i(we),kC=n(we,"LI",{});var mNe=s(kC);oMe=n(mNe,"STRONG",{});var qLt=s(oMe);dRr=r(qLt,"xlm-roberta"),qLt.forEach(t),cRr=r(mNe," \u2014 "),zY=n(mNe,"A",{href:!0});var jLt=s(zY);fRr=r(jLt,"FlaxXLMRobertaForMaskedLM"),jLt.forEach(t),mRr=r(mNe," (XLM-RoBERTa model)"),mNe.forEach(t),we.forEach(t),gRr=i(Wl),T(SC.$$.fragment,Wl),Wl.forEach(t),zl.forEach(t),tDe=i(f),qc=n(f,"H2",{class:!0});var cOe=s(qc);RC=n(cOe,"A",{id:!0,class:!0,href:!0});var DLt=s(RC);rMe=n(DLt,"SPAN",{});var GLt=s(rMe);T(z9.$$.fragment,GLt),GLt.forEach(t),DLt.forEach(t),hRr=i(cOe),tMe=n(cOe,"SPAN",{});var OLt=s(tMe);pRr=r(OLt,"FlaxAutoModelForMaskedLM"),OLt.forEach(t),cOe.forEach(t),aDe=i(f),hr=n(f,"DIV",{class:!0});var Ql=s(hr);T(W9.$$.fragment,Ql),_Rr=i(Ql),jc=n(Ql,"P",{});var Kee=s(jc);uRr=r(Kee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),WY=n(Kee,"A",{href:!0});var VLt=s(WY);bRr=r(VLt,"from_pretrained()"),VLt.forEach(t),vRr=r(Kee," class method or the "),QY=n(Kee,"A",{href:!0});var XLt=s(QY);FRr=r(XLt,"from_config()"),XLt.forEach(t),TRr=r(Kee,` class
method.`),Kee.forEach(t),MRr=i(Ql),Q9=n(Ql,"P",{});var fOe=s(Q9);ERr=r(fOe,"This class cannot be instantiated directly using "),aMe=n(fOe,"CODE",{});var zLt=s(aMe);CRr=r(zLt,"__init__()"),zLt.forEach(t),wRr=r(fOe," (throws an error)."),fOe.forEach(t),ARr=i(Ql),Xt=n(Ql,"DIV",{class:!0});var cA=s(Xt);T(H9.$$.fragment,cA),yRr=i(cA),nMe=n(cA,"P",{});var WLt=s(nMe);LRr=r(WLt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),WLt.forEach(t),xRr=i(cA),Dc=n(cA,"P",{});var Zee=s(Dc);$Rr=r(Zee,`Note:
Loading a model from its configuration file does `),sMe=n(Zee,"STRONG",{});var QLt=s(sMe);kRr=r(QLt,"not"),QLt.forEach(t),SRr=r(Zee,` load the model weights. It only affects the
model\u2019s configuration. Use `),HY=n(Zee,"A",{href:!0});var HLt=s(HY);RRr=r(HLt,"from_pretrained()"),HLt.forEach(t),PRr=r(Zee," to load the model weights."),Zee.forEach(t),BRr=i(cA),T(PC.$$.fragment,cA),cA.forEach(t),IRr=i(Ql),Or=n(Ql,"DIV",{class:!0});var Hl=s(Or);T(U9.$$.fragment,Hl),NRr=i(Hl),lMe=n(Hl,"P",{});var ULt=s(lMe);qRr=r(ULt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),ULt.forEach(t),jRr=i(Hl),un=n(Hl,"P",{});var fA=s(un);DRr=r(fA,"The model class to instantiate is selected based on the "),iMe=n(fA,"CODE",{});var JLt=s(iMe);GRr=r(JLt,"model_type"),JLt.forEach(t),ORr=r(fA,` property of the config object (either
passed as an argument or loaded from `),dMe=n(fA,"CODE",{});var YLt=s(dMe);VRr=r(YLt,"pretrained_model_name_or_path"),YLt.forEach(t),XRr=r(fA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cMe=n(fA,"CODE",{});var KLt=s(cMe);zRr=r(KLt,"pretrained_model_name_or_path"),KLt.forEach(t),WRr=r(fA,":"),fA.forEach(t),QRr=i(Hl),xe=n(Hl,"UL",{});var Ne=s(xe);BC=n(Ne,"LI",{});var gNe=s(BC);fMe=n(gNe,"STRONG",{});var ZLt=s(fMe);HRr=r(ZLt,"albert"),ZLt.forEach(t),URr=r(gNe," \u2014 "),UY=n(gNe,"A",{href:!0});var e8t=s(UY);JRr=r(e8t,"FlaxAlbertForMaskedLM"),e8t.forEach(t),YRr=r(gNe," (ALBERT model)"),gNe.forEach(t),KRr=i(Ne),IC=n(Ne,"LI",{});var hNe=s(IC);mMe=n(hNe,"STRONG",{});var o8t=s(mMe);ZRr=r(o8t,"bart"),o8t.forEach(t),ePr=r(hNe," \u2014 "),JY=n(hNe,"A",{href:!0});var r8t=s(JY);oPr=r(r8t,"FlaxBartForConditionalGeneration"),r8t.forEach(t),rPr=r(hNe," (BART model)"),hNe.forEach(t),tPr=i(Ne),NC=n(Ne,"LI",{});var pNe=s(NC);gMe=n(pNe,"STRONG",{});var t8t=s(gMe);aPr=r(t8t,"bert"),t8t.forEach(t),nPr=r(pNe," \u2014 "),YY=n(pNe,"A",{href:!0});var a8t=s(YY);sPr=r(a8t,"FlaxBertForMaskedLM"),a8t.forEach(t),lPr=r(pNe," (BERT model)"),pNe.forEach(t),iPr=i(Ne),qC=n(Ne,"LI",{});var _Ne=s(qC);hMe=n(_Ne,"STRONG",{});var n8t=s(hMe);dPr=r(n8t,"big_bird"),n8t.forEach(t),cPr=r(_Ne," \u2014 "),KY=n(_Ne,"A",{href:!0});var s8t=s(KY);fPr=r(s8t,"FlaxBigBirdForMaskedLM"),s8t.forEach(t),mPr=r(_Ne," (BigBird model)"),_Ne.forEach(t),gPr=i(Ne),jC=n(Ne,"LI",{});var uNe=s(jC);pMe=n(uNe,"STRONG",{});var l8t=s(pMe);hPr=r(l8t,"distilbert"),l8t.forEach(t),pPr=r(uNe," \u2014 "),ZY=n(uNe,"A",{href:!0});var i8t=s(ZY);_Pr=r(i8t,"FlaxDistilBertForMaskedLM"),i8t.forEach(t),uPr=r(uNe," (DistilBERT model)"),uNe.forEach(t),bPr=i(Ne),DC=n(Ne,"LI",{});var bNe=s(DC);_Me=n(bNe,"STRONG",{});var d8t=s(_Me);vPr=r(d8t,"electra"),d8t.forEach(t),FPr=r(bNe," \u2014 "),eK=n(bNe,"A",{href:!0});var c8t=s(eK);TPr=r(c8t,"FlaxElectraForMaskedLM"),c8t.forEach(t),MPr=r(bNe," (ELECTRA model)"),bNe.forEach(t),EPr=i(Ne),GC=n(Ne,"LI",{});var vNe=s(GC);uMe=n(vNe,"STRONG",{});var f8t=s(uMe);CPr=r(f8t,"mbart"),f8t.forEach(t),wPr=r(vNe," \u2014 "),oK=n(vNe,"A",{href:!0});var m8t=s(oK);APr=r(m8t,"FlaxMBartForConditionalGeneration"),m8t.forEach(t),yPr=r(vNe," (mBART model)"),vNe.forEach(t),LPr=i(Ne),OC=n(Ne,"LI",{});var FNe=s(OC);bMe=n(FNe,"STRONG",{});var g8t=s(bMe);xPr=r(g8t,"roberta"),g8t.forEach(t),$Pr=r(FNe," \u2014 "),rK=n(FNe,"A",{href:!0});var h8t=s(rK);kPr=r(h8t,"FlaxRobertaForMaskedLM"),h8t.forEach(t),SPr=r(FNe," (RoBERTa model)"),FNe.forEach(t),RPr=i(Ne),VC=n(Ne,"LI",{});var TNe=s(VC);vMe=n(TNe,"STRONG",{});var p8t=s(vMe);PPr=r(p8t,"roformer"),p8t.forEach(t),BPr=r(TNe," \u2014 "),tK=n(TNe,"A",{href:!0});var _8t=s(tK);IPr=r(_8t,"FlaxRoFormerForMaskedLM"),_8t.forEach(t),NPr=r(TNe," (RoFormer model)"),TNe.forEach(t),qPr=i(Ne),XC=n(Ne,"LI",{});var MNe=s(XC);FMe=n(MNe,"STRONG",{});var u8t=s(FMe);jPr=r(u8t,"xlm-roberta"),u8t.forEach(t),DPr=r(MNe," \u2014 "),aK=n(MNe,"A",{href:!0});var b8t=s(aK);GPr=r(b8t,"FlaxXLMRobertaForMaskedLM"),b8t.forEach(t),OPr=r(MNe," (XLM-RoBERTa model)"),MNe.forEach(t),Ne.forEach(t),VPr=i(Hl),T(zC.$$.fragment,Hl),Hl.forEach(t),Ql.forEach(t),nDe=i(f),Gc=n(f,"H2",{class:!0});var mOe=s(Gc);WC=n(mOe,"A",{id:!0,class:!0,href:!0});var v8t=s(WC);TMe=n(v8t,"SPAN",{});var F8t=s(TMe);T(J9.$$.fragment,F8t),F8t.forEach(t),v8t.forEach(t),XPr=i(mOe),MMe=n(mOe,"SPAN",{});var T8t=s(MMe);zPr=r(T8t,"FlaxAutoModelForSeq2SeqLM"),T8t.forEach(t),mOe.forEach(t),sDe=i(f),pr=n(f,"DIV",{class:!0});var Ul=s(pr);T(Y9.$$.fragment,Ul),WPr=i(Ul),Oc=n(Ul,"P",{});var eoe=s(Oc);QPr=r(eoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),nK=n(eoe,"A",{href:!0});var M8t=s(nK);HPr=r(M8t,"from_pretrained()"),M8t.forEach(t),UPr=r(eoe," class method or the "),sK=n(eoe,"A",{href:!0});var E8t=s(sK);JPr=r(E8t,"from_config()"),E8t.forEach(t),YPr=r(eoe,` class
method.`),eoe.forEach(t),KPr=i(Ul),K9=n(Ul,"P",{});var gOe=s(K9);ZPr=r(gOe,"This class cannot be instantiated directly using "),EMe=n(gOe,"CODE",{});var C8t=s(EMe);eBr=r(C8t,"__init__()"),C8t.forEach(t),oBr=r(gOe," (throws an error)."),gOe.forEach(t),rBr=i(Ul),zt=n(Ul,"DIV",{class:!0});var mA=s(zt);T(Z9.$$.fragment,mA),tBr=i(mA),CMe=n(mA,"P",{});var w8t=s(CMe);aBr=r(w8t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),w8t.forEach(t),nBr=i(mA),Vc=n(mA,"P",{});var ooe=s(Vc);sBr=r(ooe,`Note:
Loading a model from its configuration file does `),wMe=n(ooe,"STRONG",{});var A8t=s(wMe);lBr=r(A8t,"not"),A8t.forEach(t),iBr=r(ooe,` load the model weights. It only affects the
model\u2019s configuration. Use `),lK=n(ooe,"A",{href:!0});var y8t=s(lK);dBr=r(y8t,"from_pretrained()"),y8t.forEach(t),cBr=r(ooe," to load the model weights."),ooe.forEach(t),fBr=i(mA),T(QC.$$.fragment,mA),mA.forEach(t),mBr=i(Ul),Vr=n(Ul,"DIV",{class:!0});var Jl=s(Vr);T(ex.$$.fragment,Jl),gBr=i(Jl),AMe=n(Jl,"P",{});var L8t=s(AMe);hBr=r(L8t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),L8t.forEach(t),pBr=i(Jl),bn=n(Jl,"P",{});var gA=s(bn);_Br=r(gA,"The model class to instantiate is selected based on the "),yMe=n(gA,"CODE",{});var x8t=s(yMe);uBr=r(x8t,"model_type"),x8t.forEach(t),bBr=r(gA,` property of the config object (either
passed as an argument or loaded from `),LMe=n(gA,"CODE",{});var $8t=s(LMe);vBr=r($8t,"pretrained_model_name_or_path"),$8t.forEach(t),FBr=r(gA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xMe=n(gA,"CODE",{});var k8t=s(xMe);TBr=r(k8t,"pretrained_model_name_or_path"),k8t.forEach(t),MBr=r(gA,":"),gA.forEach(t),EBr=i(Jl),Pe=n(Jl,"UL",{});var ze=s(Pe);HC=n(ze,"LI",{});var ENe=s(HC);$Me=n(ENe,"STRONG",{});var S8t=s($Me);CBr=r(S8t,"bart"),S8t.forEach(t),wBr=r(ENe," \u2014 "),iK=n(ENe,"A",{href:!0});var R8t=s(iK);ABr=r(R8t,"FlaxBartForConditionalGeneration"),R8t.forEach(t),yBr=r(ENe," (BART model)"),ENe.forEach(t),LBr=i(ze),UC=n(ze,"LI",{});var CNe=s(UC);kMe=n(CNe,"STRONG",{});var P8t=s(kMe);xBr=r(P8t,"blenderbot"),P8t.forEach(t),$Br=r(CNe," \u2014 "),dK=n(CNe,"A",{href:!0});var B8t=s(dK);kBr=r(B8t,"FlaxBlenderbotForConditionalGeneration"),B8t.forEach(t),SBr=r(CNe," (Blenderbot model)"),CNe.forEach(t),RBr=i(ze),JC=n(ze,"LI",{});var wNe=s(JC);SMe=n(wNe,"STRONG",{});var I8t=s(SMe);PBr=r(I8t,"blenderbot-small"),I8t.forEach(t),BBr=r(wNe," \u2014 "),cK=n(wNe,"A",{href:!0});var N8t=s(cK);IBr=r(N8t,"FlaxBlenderbotSmallForConditionalGeneration"),N8t.forEach(t),NBr=r(wNe," (BlenderbotSmall model)"),wNe.forEach(t),qBr=i(ze),YC=n(ze,"LI",{});var ANe=s(YC);RMe=n(ANe,"STRONG",{});var q8t=s(RMe);jBr=r(q8t,"encoder-decoder"),q8t.forEach(t),DBr=r(ANe," \u2014 "),fK=n(ANe,"A",{href:!0});var j8t=s(fK);GBr=r(j8t,"FlaxEncoderDecoderModel"),j8t.forEach(t),OBr=r(ANe," (Encoder decoder model)"),ANe.forEach(t),VBr=i(ze),KC=n(ze,"LI",{});var yNe=s(KC);PMe=n(yNe,"STRONG",{});var D8t=s(PMe);XBr=r(D8t,"marian"),D8t.forEach(t),zBr=r(yNe," \u2014 "),mK=n(yNe,"A",{href:!0});var G8t=s(mK);WBr=r(G8t,"FlaxMarianMTModel"),G8t.forEach(t),QBr=r(yNe," (Marian model)"),yNe.forEach(t),HBr=i(ze),ZC=n(ze,"LI",{});var LNe=s(ZC);BMe=n(LNe,"STRONG",{});var O8t=s(BMe);UBr=r(O8t,"mbart"),O8t.forEach(t),JBr=r(LNe," \u2014 "),gK=n(LNe,"A",{href:!0});var V8t=s(gK);YBr=r(V8t,"FlaxMBartForConditionalGeneration"),V8t.forEach(t),KBr=r(LNe," (mBART model)"),LNe.forEach(t),ZBr=i(ze),e3=n(ze,"LI",{});var xNe=s(e3);IMe=n(xNe,"STRONG",{});var X8t=s(IMe);eIr=r(X8t,"mt5"),X8t.forEach(t),oIr=r(xNe," \u2014 "),hK=n(xNe,"A",{href:!0});var z8t=s(hK);rIr=r(z8t,"FlaxMT5ForConditionalGeneration"),z8t.forEach(t),tIr=r(xNe," (mT5 model)"),xNe.forEach(t),aIr=i(ze),o3=n(ze,"LI",{});var $Ne=s(o3);NMe=n($Ne,"STRONG",{});var W8t=s(NMe);nIr=r(W8t,"pegasus"),W8t.forEach(t),sIr=r($Ne," \u2014 "),pK=n($Ne,"A",{href:!0});var Q8t=s(pK);lIr=r(Q8t,"FlaxPegasusForConditionalGeneration"),Q8t.forEach(t),iIr=r($Ne," (Pegasus model)"),$Ne.forEach(t),dIr=i(ze),r3=n(ze,"LI",{});var kNe=s(r3);qMe=n(kNe,"STRONG",{});var H8t=s(qMe);cIr=r(H8t,"t5"),H8t.forEach(t),fIr=r(kNe," \u2014 "),_K=n(kNe,"A",{href:!0});var U8t=s(_K);mIr=r(U8t,"FlaxT5ForConditionalGeneration"),U8t.forEach(t),gIr=r(kNe," (T5 model)"),kNe.forEach(t),ze.forEach(t),hIr=i(Jl),T(t3.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),lDe=i(f),Xc=n(f,"H2",{class:!0});var hOe=s(Xc);a3=n(hOe,"A",{id:!0,class:!0,href:!0});var J8t=s(a3);jMe=n(J8t,"SPAN",{});var Y8t=s(jMe);T(ox.$$.fragment,Y8t),Y8t.forEach(t),J8t.forEach(t),pIr=i(hOe),DMe=n(hOe,"SPAN",{});var K8t=s(DMe);_Ir=r(K8t,"FlaxAutoModelForSequenceClassification"),K8t.forEach(t),hOe.forEach(t),iDe=i(f),_r=n(f,"DIV",{class:!0});var Yl=s(_r);T(rx.$$.fragment,Yl),uIr=i(Yl),zc=n(Yl,"P",{});var roe=s(zc);bIr=r(roe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),uK=n(roe,"A",{href:!0});var Z8t=s(uK);vIr=r(Z8t,"from_pretrained()"),Z8t.forEach(t),FIr=r(roe," class method or the "),bK=n(roe,"A",{href:!0});var e9t=s(bK);TIr=r(e9t,"from_config()"),e9t.forEach(t),MIr=r(roe,` class
method.`),roe.forEach(t),EIr=i(Yl),tx=n(Yl,"P",{});var pOe=s(tx);CIr=r(pOe,"This class cannot be instantiated directly using "),GMe=n(pOe,"CODE",{});var o9t=s(GMe);wIr=r(o9t,"__init__()"),o9t.forEach(t),AIr=r(pOe," (throws an error)."),pOe.forEach(t),yIr=i(Yl),Wt=n(Yl,"DIV",{class:!0});var hA=s(Wt);T(ax.$$.fragment,hA),LIr=i(hA),OMe=n(hA,"P",{});var r9t=s(OMe);xIr=r(r9t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),r9t.forEach(t),$Ir=i(hA),Wc=n(hA,"P",{});var toe=s(Wc);kIr=r(toe,`Note:
Loading a model from its configuration file does `),VMe=n(toe,"STRONG",{});var t9t=s(VMe);SIr=r(t9t,"not"),t9t.forEach(t),RIr=r(toe,` load the model weights. It only affects the
model\u2019s configuration. Use `),vK=n(toe,"A",{href:!0});var a9t=s(vK);PIr=r(a9t,"from_pretrained()"),a9t.forEach(t),BIr=r(toe," to load the model weights."),toe.forEach(t),IIr=i(hA),T(n3.$$.fragment,hA),hA.forEach(t),NIr=i(Yl),Xr=n(Yl,"DIV",{class:!0});var Kl=s(Xr);T(nx.$$.fragment,Kl),qIr=i(Kl),XMe=n(Kl,"P",{});var n9t=s(XMe);jIr=r(n9t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),n9t.forEach(t),DIr=i(Kl),vn=n(Kl,"P",{});var pA=s(vn);GIr=r(pA,"The model class to instantiate is selected based on the "),zMe=n(pA,"CODE",{});var s9t=s(zMe);OIr=r(s9t,"model_type"),s9t.forEach(t),VIr=r(pA,` property of the config object (either
passed as an argument or loaded from `),WMe=n(pA,"CODE",{});var l9t=s(WMe);XIr=r(l9t,"pretrained_model_name_or_path"),l9t.forEach(t),zIr=r(pA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QMe=n(pA,"CODE",{});var i9t=s(QMe);WIr=r(i9t,"pretrained_model_name_or_path"),i9t.forEach(t),QIr=r(pA,":"),pA.forEach(t),HIr=i(Kl),$e=n(Kl,"UL",{});var qe=s($e);s3=n(qe,"LI",{});var SNe=s(s3);HMe=n(SNe,"STRONG",{});var d9t=s(HMe);UIr=r(d9t,"albert"),d9t.forEach(t),JIr=r(SNe," \u2014 "),FK=n(SNe,"A",{href:!0});var c9t=s(FK);YIr=r(c9t,"FlaxAlbertForSequenceClassification"),c9t.forEach(t),KIr=r(SNe," (ALBERT model)"),SNe.forEach(t),ZIr=i(qe),l3=n(qe,"LI",{});var RNe=s(l3);UMe=n(RNe,"STRONG",{});var f9t=s(UMe);eNr=r(f9t,"bart"),f9t.forEach(t),oNr=r(RNe," \u2014 "),TK=n(RNe,"A",{href:!0});var m9t=s(TK);rNr=r(m9t,"FlaxBartForSequenceClassification"),m9t.forEach(t),tNr=r(RNe," (BART model)"),RNe.forEach(t),aNr=i(qe),i3=n(qe,"LI",{});var PNe=s(i3);JMe=n(PNe,"STRONG",{});var g9t=s(JMe);nNr=r(g9t,"bert"),g9t.forEach(t),sNr=r(PNe," \u2014 "),MK=n(PNe,"A",{href:!0});var h9t=s(MK);lNr=r(h9t,"FlaxBertForSequenceClassification"),h9t.forEach(t),iNr=r(PNe," (BERT model)"),PNe.forEach(t),dNr=i(qe),d3=n(qe,"LI",{});var BNe=s(d3);YMe=n(BNe,"STRONG",{});var p9t=s(YMe);cNr=r(p9t,"big_bird"),p9t.forEach(t),fNr=r(BNe," \u2014 "),EK=n(BNe,"A",{href:!0});var _9t=s(EK);mNr=r(_9t,"FlaxBigBirdForSequenceClassification"),_9t.forEach(t),gNr=r(BNe," (BigBird model)"),BNe.forEach(t),hNr=i(qe),c3=n(qe,"LI",{});var INe=s(c3);KMe=n(INe,"STRONG",{});var u9t=s(KMe);pNr=r(u9t,"distilbert"),u9t.forEach(t),_Nr=r(INe," \u2014 "),CK=n(INe,"A",{href:!0});var b9t=s(CK);uNr=r(b9t,"FlaxDistilBertForSequenceClassification"),b9t.forEach(t),bNr=r(INe," (DistilBERT model)"),INe.forEach(t),vNr=i(qe),f3=n(qe,"LI",{});var NNe=s(f3);ZMe=n(NNe,"STRONG",{});var v9t=s(ZMe);FNr=r(v9t,"electra"),v9t.forEach(t),TNr=r(NNe," \u2014 "),wK=n(NNe,"A",{href:!0});var F9t=s(wK);MNr=r(F9t,"FlaxElectraForSequenceClassification"),F9t.forEach(t),ENr=r(NNe," (ELECTRA model)"),NNe.forEach(t),CNr=i(qe),m3=n(qe,"LI",{});var qNe=s(m3);e4e=n(qNe,"STRONG",{});var T9t=s(e4e);wNr=r(T9t,"mbart"),T9t.forEach(t),ANr=r(qNe," \u2014 "),AK=n(qNe,"A",{href:!0});var M9t=s(AK);yNr=r(M9t,"FlaxMBartForSequenceClassification"),M9t.forEach(t),LNr=r(qNe," (mBART model)"),qNe.forEach(t),xNr=i(qe),g3=n(qe,"LI",{});var jNe=s(g3);o4e=n(jNe,"STRONG",{});var E9t=s(o4e);$Nr=r(E9t,"roberta"),E9t.forEach(t),kNr=r(jNe," \u2014 "),yK=n(jNe,"A",{href:!0});var C9t=s(yK);SNr=r(C9t,"FlaxRobertaForSequenceClassification"),C9t.forEach(t),RNr=r(jNe," (RoBERTa model)"),jNe.forEach(t),PNr=i(qe),h3=n(qe,"LI",{});var DNe=s(h3);r4e=n(DNe,"STRONG",{});var w9t=s(r4e);BNr=r(w9t,"roformer"),w9t.forEach(t),INr=r(DNe," \u2014 "),LK=n(DNe,"A",{href:!0});var A9t=s(LK);NNr=r(A9t,"FlaxRoFormerForSequenceClassification"),A9t.forEach(t),qNr=r(DNe," (RoFormer model)"),DNe.forEach(t),jNr=i(qe),p3=n(qe,"LI",{});var GNe=s(p3);t4e=n(GNe,"STRONG",{});var y9t=s(t4e);DNr=r(y9t,"xlm-roberta"),y9t.forEach(t),GNr=r(GNe," \u2014 "),xK=n(GNe,"A",{href:!0});var L9t=s(xK);ONr=r(L9t,"FlaxXLMRobertaForSequenceClassification"),L9t.forEach(t),VNr=r(GNe," (XLM-RoBERTa model)"),GNe.forEach(t),qe.forEach(t),XNr=i(Kl),T(_3.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),dDe=i(f),Qc=n(f,"H2",{class:!0});var _Oe=s(Qc);u3=n(_Oe,"A",{id:!0,class:!0,href:!0});var x9t=s(u3);a4e=n(x9t,"SPAN",{});var $9t=s(a4e);T(sx.$$.fragment,$9t),$9t.forEach(t),x9t.forEach(t),zNr=i(_Oe),n4e=n(_Oe,"SPAN",{});var k9t=s(n4e);WNr=r(k9t,"FlaxAutoModelForQuestionAnswering"),k9t.forEach(t),_Oe.forEach(t),cDe=i(f),ur=n(f,"DIV",{class:!0});var Zl=s(ur);T(lx.$$.fragment,Zl),QNr=i(Zl),Hc=n(Zl,"P",{});var aoe=s(Hc);HNr=r(aoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),$K=n(aoe,"A",{href:!0});var S9t=s($K);UNr=r(S9t,"from_pretrained()"),S9t.forEach(t),JNr=r(aoe," class method or the "),kK=n(aoe,"A",{href:!0});var R9t=s(kK);YNr=r(R9t,"from_config()"),R9t.forEach(t),KNr=r(aoe,` class
method.`),aoe.forEach(t),ZNr=i(Zl),ix=n(Zl,"P",{});var uOe=s(ix);eqr=r(uOe,"This class cannot be instantiated directly using "),s4e=n(uOe,"CODE",{});var P9t=s(s4e);oqr=r(P9t,"__init__()"),P9t.forEach(t),rqr=r(uOe," (throws an error)."),uOe.forEach(t),tqr=i(Zl),Qt=n(Zl,"DIV",{class:!0});var _A=s(Qt);T(dx.$$.fragment,_A),aqr=i(_A),l4e=n(_A,"P",{});var B9t=s(l4e);nqr=r(B9t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),B9t.forEach(t),sqr=i(_A),Uc=n(_A,"P",{});var noe=s(Uc);lqr=r(noe,`Note:
Loading a model from its configuration file does `),i4e=n(noe,"STRONG",{});var I9t=s(i4e);iqr=r(I9t,"not"),I9t.forEach(t),dqr=r(noe,` load the model weights. It only affects the
model\u2019s configuration. Use `),SK=n(noe,"A",{href:!0});var N9t=s(SK);cqr=r(N9t,"from_pretrained()"),N9t.forEach(t),fqr=r(noe," to load the model weights."),noe.forEach(t),mqr=i(_A),T(b3.$$.fragment,_A),_A.forEach(t),gqr=i(Zl),zr=n(Zl,"DIV",{class:!0});var ei=s(zr);T(cx.$$.fragment,ei),hqr=i(ei),d4e=n(ei,"P",{});var q9t=s(d4e);pqr=r(q9t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),q9t.forEach(t),_qr=i(ei),Fn=n(ei,"P",{});var uA=s(Fn);uqr=r(uA,"The model class to instantiate is selected based on the "),c4e=n(uA,"CODE",{});var j9t=s(c4e);bqr=r(j9t,"model_type"),j9t.forEach(t),vqr=r(uA,` property of the config object (either
passed as an argument or loaded from `),f4e=n(uA,"CODE",{});var D9t=s(f4e);Fqr=r(D9t,"pretrained_model_name_or_path"),D9t.forEach(t),Tqr=r(uA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m4e=n(uA,"CODE",{});var G9t=s(m4e);Mqr=r(G9t,"pretrained_model_name_or_path"),G9t.forEach(t),Eqr=r(uA,":"),uA.forEach(t),Cqr=i(ei),ke=n(ei,"UL",{});var je=s(ke);v3=n(je,"LI",{});var ONe=s(v3);g4e=n(ONe,"STRONG",{});var O9t=s(g4e);wqr=r(O9t,"albert"),O9t.forEach(t),Aqr=r(ONe," \u2014 "),RK=n(ONe,"A",{href:!0});var V9t=s(RK);yqr=r(V9t,"FlaxAlbertForQuestionAnswering"),V9t.forEach(t),Lqr=r(ONe," (ALBERT model)"),ONe.forEach(t),xqr=i(je),F3=n(je,"LI",{});var VNe=s(F3);h4e=n(VNe,"STRONG",{});var X9t=s(h4e);$qr=r(X9t,"bart"),X9t.forEach(t),kqr=r(VNe," \u2014 "),PK=n(VNe,"A",{href:!0});var z9t=s(PK);Sqr=r(z9t,"FlaxBartForQuestionAnswering"),z9t.forEach(t),Rqr=r(VNe," (BART model)"),VNe.forEach(t),Pqr=i(je),T3=n(je,"LI",{});var XNe=s(T3);p4e=n(XNe,"STRONG",{});var W9t=s(p4e);Bqr=r(W9t,"bert"),W9t.forEach(t),Iqr=r(XNe," \u2014 "),BK=n(XNe,"A",{href:!0});var Q9t=s(BK);Nqr=r(Q9t,"FlaxBertForQuestionAnswering"),Q9t.forEach(t),qqr=r(XNe," (BERT model)"),XNe.forEach(t),jqr=i(je),M3=n(je,"LI",{});var zNe=s(M3);_4e=n(zNe,"STRONG",{});var H9t=s(_4e);Dqr=r(H9t,"big_bird"),H9t.forEach(t),Gqr=r(zNe," \u2014 "),IK=n(zNe,"A",{href:!0});var U9t=s(IK);Oqr=r(U9t,"FlaxBigBirdForQuestionAnswering"),U9t.forEach(t),Vqr=r(zNe," (BigBird model)"),zNe.forEach(t),Xqr=i(je),E3=n(je,"LI",{});var WNe=s(E3);u4e=n(WNe,"STRONG",{});var J9t=s(u4e);zqr=r(J9t,"distilbert"),J9t.forEach(t),Wqr=r(WNe," \u2014 "),NK=n(WNe,"A",{href:!0});var Y9t=s(NK);Qqr=r(Y9t,"FlaxDistilBertForQuestionAnswering"),Y9t.forEach(t),Hqr=r(WNe," (DistilBERT model)"),WNe.forEach(t),Uqr=i(je),C3=n(je,"LI",{});var QNe=s(C3);b4e=n(QNe,"STRONG",{});var K9t=s(b4e);Jqr=r(K9t,"electra"),K9t.forEach(t),Yqr=r(QNe," \u2014 "),qK=n(QNe,"A",{href:!0});var Z9t=s(qK);Kqr=r(Z9t,"FlaxElectraForQuestionAnswering"),Z9t.forEach(t),Zqr=r(QNe," (ELECTRA model)"),QNe.forEach(t),ejr=i(je),w3=n(je,"LI",{});var HNe=s(w3);v4e=n(HNe,"STRONG",{});var ext=s(v4e);ojr=r(ext,"mbart"),ext.forEach(t),rjr=r(HNe," \u2014 "),jK=n(HNe,"A",{href:!0});var oxt=s(jK);tjr=r(oxt,"FlaxMBartForQuestionAnswering"),oxt.forEach(t),ajr=r(HNe," (mBART model)"),HNe.forEach(t),njr=i(je),A3=n(je,"LI",{});var UNe=s(A3);F4e=n(UNe,"STRONG",{});var rxt=s(F4e);sjr=r(rxt,"roberta"),rxt.forEach(t),ljr=r(UNe," \u2014 "),DK=n(UNe,"A",{href:!0});var txt=s(DK);ijr=r(txt,"FlaxRobertaForQuestionAnswering"),txt.forEach(t),djr=r(UNe," (RoBERTa model)"),UNe.forEach(t),cjr=i(je),y3=n(je,"LI",{});var JNe=s(y3);T4e=n(JNe,"STRONG",{});var axt=s(T4e);fjr=r(axt,"roformer"),axt.forEach(t),mjr=r(JNe," \u2014 "),GK=n(JNe,"A",{href:!0});var nxt=s(GK);gjr=r(nxt,"FlaxRoFormerForQuestionAnswering"),nxt.forEach(t),hjr=r(JNe," (RoFormer model)"),JNe.forEach(t),pjr=i(je),L3=n(je,"LI",{});var YNe=s(L3);M4e=n(YNe,"STRONG",{});var sxt=s(M4e);_jr=r(sxt,"xlm-roberta"),sxt.forEach(t),ujr=r(YNe," \u2014 "),OK=n(YNe,"A",{href:!0});var lxt=s(OK);bjr=r(lxt,"FlaxXLMRobertaForQuestionAnswering"),lxt.forEach(t),vjr=r(YNe," (XLM-RoBERTa model)"),YNe.forEach(t),je.forEach(t),Fjr=i(ei),T(x3.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),fDe=i(f),Jc=n(f,"H2",{class:!0});var bOe=s(Jc);$3=n(bOe,"A",{id:!0,class:!0,href:!0});var ixt=s($3);E4e=n(ixt,"SPAN",{});var dxt=s(E4e);T(fx.$$.fragment,dxt),dxt.forEach(t),ixt.forEach(t),Tjr=i(bOe),C4e=n(bOe,"SPAN",{});var cxt=s(C4e);Mjr=r(cxt,"FlaxAutoModelForTokenClassification"),cxt.forEach(t),bOe.forEach(t),mDe=i(f),br=n(f,"DIV",{class:!0});var oi=s(br);T(mx.$$.fragment,oi),Ejr=i(oi),Yc=n(oi,"P",{});var soe=s(Yc);Cjr=r(soe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),VK=n(soe,"A",{href:!0});var fxt=s(VK);wjr=r(fxt,"from_pretrained()"),fxt.forEach(t),Ajr=r(soe," class method or the "),XK=n(soe,"A",{href:!0});var mxt=s(XK);yjr=r(mxt,"from_config()"),mxt.forEach(t),Ljr=r(soe,` class
method.`),soe.forEach(t),xjr=i(oi),gx=n(oi,"P",{});var vOe=s(gx);$jr=r(vOe,"This class cannot be instantiated directly using "),w4e=n(vOe,"CODE",{});var gxt=s(w4e);kjr=r(gxt,"__init__()"),gxt.forEach(t),Sjr=r(vOe," (throws an error)."),vOe.forEach(t),Rjr=i(oi),Ht=n(oi,"DIV",{class:!0});var bA=s(Ht);T(hx.$$.fragment,bA),Pjr=i(bA),A4e=n(bA,"P",{});var hxt=s(A4e);Bjr=r(hxt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),hxt.forEach(t),Ijr=i(bA),Kc=n(bA,"P",{});var loe=s(Kc);Njr=r(loe,`Note:
Loading a model from its configuration file does `),y4e=n(loe,"STRONG",{});var pxt=s(y4e);qjr=r(pxt,"not"),pxt.forEach(t),jjr=r(loe,` load the model weights. It only affects the
model\u2019s configuration. Use `),zK=n(loe,"A",{href:!0});var _xt=s(zK);Djr=r(_xt,"from_pretrained()"),_xt.forEach(t),Gjr=r(loe," to load the model weights."),loe.forEach(t),Ojr=i(bA),T(k3.$$.fragment,bA),bA.forEach(t),Vjr=i(oi),Wr=n(oi,"DIV",{class:!0});var ri=s(Wr);T(px.$$.fragment,ri),Xjr=i(ri),L4e=n(ri,"P",{});var uxt=s(L4e);zjr=r(uxt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),uxt.forEach(t),Wjr=i(ri),Tn=n(ri,"P",{});var vA=s(Tn);Qjr=r(vA,"The model class to instantiate is selected based on the "),x4e=n(vA,"CODE",{});var bxt=s(x4e);Hjr=r(bxt,"model_type"),bxt.forEach(t),Ujr=r(vA,` property of the config object (either
passed as an argument or loaded from `),$4e=n(vA,"CODE",{});var vxt=s($4e);Jjr=r(vxt,"pretrained_model_name_or_path"),vxt.forEach(t),Yjr=r(vA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k4e=n(vA,"CODE",{});var Fxt=s(k4e);Kjr=r(Fxt,"pretrained_model_name_or_path"),Fxt.forEach(t),Zjr=r(vA,":"),vA.forEach(t),eDr=i(ri),Ge=n(ri,"UL",{});var Fo=s(Ge);S3=n(Fo,"LI",{});var KNe=s(S3);S4e=n(KNe,"STRONG",{});var Txt=s(S4e);oDr=r(Txt,"albert"),Txt.forEach(t),rDr=r(KNe," \u2014 "),WK=n(KNe,"A",{href:!0});var Mxt=s(WK);tDr=r(Mxt,"FlaxAlbertForTokenClassification"),Mxt.forEach(t),aDr=r(KNe," (ALBERT model)"),KNe.forEach(t),nDr=i(Fo),R3=n(Fo,"LI",{});var ZNe=s(R3);R4e=n(ZNe,"STRONG",{});var Ext=s(R4e);sDr=r(Ext,"bert"),Ext.forEach(t),lDr=r(ZNe," \u2014 "),QK=n(ZNe,"A",{href:!0});var Cxt=s(QK);iDr=r(Cxt,"FlaxBertForTokenClassification"),Cxt.forEach(t),dDr=r(ZNe," (BERT model)"),ZNe.forEach(t),cDr=i(Fo),P3=n(Fo,"LI",{});var eqe=s(P3);P4e=n(eqe,"STRONG",{});var wxt=s(P4e);fDr=r(wxt,"big_bird"),wxt.forEach(t),mDr=r(eqe," \u2014 "),HK=n(eqe,"A",{href:!0});var Axt=s(HK);gDr=r(Axt,"FlaxBigBirdForTokenClassification"),Axt.forEach(t),hDr=r(eqe," (BigBird model)"),eqe.forEach(t),pDr=i(Fo),B3=n(Fo,"LI",{});var oqe=s(B3);B4e=n(oqe,"STRONG",{});var yxt=s(B4e);_Dr=r(yxt,"distilbert"),yxt.forEach(t),uDr=r(oqe," \u2014 "),UK=n(oqe,"A",{href:!0});var Lxt=s(UK);bDr=r(Lxt,"FlaxDistilBertForTokenClassification"),Lxt.forEach(t),vDr=r(oqe," (DistilBERT model)"),oqe.forEach(t),FDr=i(Fo),I3=n(Fo,"LI",{});var rqe=s(I3);I4e=n(rqe,"STRONG",{});var xxt=s(I4e);TDr=r(xxt,"electra"),xxt.forEach(t),MDr=r(rqe," \u2014 "),JK=n(rqe,"A",{href:!0});var $xt=s(JK);EDr=r($xt,"FlaxElectraForTokenClassification"),$xt.forEach(t),CDr=r(rqe," (ELECTRA model)"),rqe.forEach(t),wDr=i(Fo),N3=n(Fo,"LI",{});var tqe=s(N3);N4e=n(tqe,"STRONG",{});var kxt=s(N4e);ADr=r(kxt,"roberta"),kxt.forEach(t),yDr=r(tqe," \u2014 "),YK=n(tqe,"A",{href:!0});var Sxt=s(YK);LDr=r(Sxt,"FlaxRobertaForTokenClassification"),Sxt.forEach(t),xDr=r(tqe," (RoBERTa model)"),tqe.forEach(t),$Dr=i(Fo),q3=n(Fo,"LI",{});var aqe=s(q3);q4e=n(aqe,"STRONG",{});var Rxt=s(q4e);kDr=r(Rxt,"roformer"),Rxt.forEach(t),SDr=r(aqe," \u2014 "),KK=n(aqe,"A",{href:!0});var Pxt=s(KK);RDr=r(Pxt,"FlaxRoFormerForTokenClassification"),Pxt.forEach(t),PDr=r(aqe," (RoFormer model)"),aqe.forEach(t),BDr=i(Fo),j3=n(Fo,"LI",{});var nqe=s(j3);j4e=n(nqe,"STRONG",{});var Bxt=s(j4e);IDr=r(Bxt,"xlm-roberta"),Bxt.forEach(t),NDr=r(nqe," \u2014 "),ZK=n(nqe,"A",{href:!0});var Ixt=s(ZK);qDr=r(Ixt,"FlaxXLMRobertaForTokenClassification"),Ixt.forEach(t),jDr=r(nqe," (XLM-RoBERTa model)"),nqe.forEach(t),Fo.forEach(t),DDr=i(ri),T(D3.$$.fragment,ri),ri.forEach(t),oi.forEach(t),gDe=i(f),Zc=n(f,"H2",{class:!0});var FOe=s(Zc);G3=n(FOe,"A",{id:!0,class:!0,href:!0});var Nxt=s(G3);D4e=n(Nxt,"SPAN",{});var qxt=s(D4e);T(_x.$$.fragment,qxt),qxt.forEach(t),Nxt.forEach(t),GDr=i(FOe),G4e=n(FOe,"SPAN",{});var jxt=s(G4e);ODr=r(jxt,"FlaxAutoModelForMultipleChoice"),jxt.forEach(t),FOe.forEach(t),hDe=i(f),vr=n(f,"DIV",{class:!0});var ti=s(vr);T(ux.$$.fragment,ti),VDr=i(ti),ef=n(ti,"P",{});var ioe=s(ef);XDr=r(ioe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),eZ=n(ioe,"A",{href:!0});var Dxt=s(eZ);zDr=r(Dxt,"from_pretrained()"),Dxt.forEach(t),WDr=r(ioe," class method or the "),oZ=n(ioe,"A",{href:!0});var Gxt=s(oZ);QDr=r(Gxt,"from_config()"),Gxt.forEach(t),HDr=r(ioe,` class
method.`),ioe.forEach(t),UDr=i(ti),bx=n(ti,"P",{});var TOe=s(bx);JDr=r(TOe,"This class cannot be instantiated directly using "),O4e=n(TOe,"CODE",{});var Oxt=s(O4e);YDr=r(Oxt,"__init__()"),Oxt.forEach(t),KDr=r(TOe," (throws an error)."),TOe.forEach(t),ZDr=i(ti),Ut=n(ti,"DIV",{class:!0});var FA=s(Ut);T(vx.$$.fragment,FA),eGr=i(FA),V4e=n(FA,"P",{});var Vxt=s(V4e);oGr=r(Vxt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Vxt.forEach(t),rGr=i(FA),of=n(FA,"P",{});var doe=s(of);tGr=r(doe,`Note:
Loading a model from its configuration file does `),X4e=n(doe,"STRONG",{});var Xxt=s(X4e);aGr=r(Xxt,"not"),Xxt.forEach(t),nGr=r(doe,` load the model weights. It only affects the
model\u2019s configuration. Use `),rZ=n(doe,"A",{href:!0});var zxt=s(rZ);sGr=r(zxt,"from_pretrained()"),zxt.forEach(t),lGr=r(doe," to load the model weights."),doe.forEach(t),iGr=i(FA),T(O3.$$.fragment,FA),FA.forEach(t),dGr=i(ti),Qr=n(ti,"DIV",{class:!0});var ai=s(Qr);T(Fx.$$.fragment,ai),cGr=i(ai),z4e=n(ai,"P",{});var Wxt=s(z4e);fGr=r(Wxt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Wxt.forEach(t),mGr=i(ai),Mn=n(ai,"P",{});var TA=s(Mn);gGr=r(TA,"The model class to instantiate is selected based on the "),W4e=n(TA,"CODE",{});var Qxt=s(W4e);hGr=r(Qxt,"model_type"),Qxt.forEach(t),pGr=r(TA,` property of the config object (either
passed as an argument or loaded from `),Q4e=n(TA,"CODE",{});var Hxt=s(Q4e);_Gr=r(Hxt,"pretrained_model_name_or_path"),Hxt.forEach(t),uGr=r(TA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H4e=n(TA,"CODE",{});var Uxt=s(H4e);bGr=r(Uxt,"pretrained_model_name_or_path"),Uxt.forEach(t),vGr=r(TA,":"),TA.forEach(t),FGr=i(ai),Oe=n(ai,"UL",{});var To=s(Oe);V3=n(To,"LI",{});var sqe=s(V3);U4e=n(sqe,"STRONG",{});var Jxt=s(U4e);TGr=r(Jxt,"albert"),Jxt.forEach(t),MGr=r(sqe," \u2014 "),tZ=n(sqe,"A",{href:!0});var Yxt=s(tZ);EGr=r(Yxt,"FlaxAlbertForMultipleChoice"),Yxt.forEach(t),CGr=r(sqe," (ALBERT model)"),sqe.forEach(t),wGr=i(To),X3=n(To,"LI",{});var lqe=s(X3);J4e=n(lqe,"STRONG",{});var Kxt=s(J4e);AGr=r(Kxt,"bert"),Kxt.forEach(t),yGr=r(lqe," \u2014 "),aZ=n(lqe,"A",{href:!0});var Zxt=s(aZ);LGr=r(Zxt,"FlaxBertForMultipleChoice"),Zxt.forEach(t),xGr=r(lqe," (BERT model)"),lqe.forEach(t),$Gr=i(To),z3=n(To,"LI",{});var iqe=s(z3);Y4e=n(iqe,"STRONG",{});var e$t=s(Y4e);kGr=r(e$t,"big_bird"),e$t.forEach(t),SGr=r(iqe," \u2014 "),nZ=n(iqe,"A",{href:!0});var o$t=s(nZ);RGr=r(o$t,"FlaxBigBirdForMultipleChoice"),o$t.forEach(t),PGr=r(iqe," (BigBird model)"),iqe.forEach(t),BGr=i(To),W3=n(To,"LI",{});var dqe=s(W3);K4e=n(dqe,"STRONG",{});var r$t=s(K4e);IGr=r(r$t,"distilbert"),r$t.forEach(t),NGr=r(dqe," \u2014 "),sZ=n(dqe,"A",{href:!0});var t$t=s(sZ);qGr=r(t$t,"FlaxDistilBertForMultipleChoice"),t$t.forEach(t),jGr=r(dqe," (DistilBERT model)"),dqe.forEach(t),DGr=i(To),Q3=n(To,"LI",{});var cqe=s(Q3);Z4e=n(cqe,"STRONG",{});var a$t=s(Z4e);GGr=r(a$t,"electra"),a$t.forEach(t),OGr=r(cqe," \u2014 "),lZ=n(cqe,"A",{href:!0});var n$t=s(lZ);VGr=r(n$t,"FlaxElectraForMultipleChoice"),n$t.forEach(t),XGr=r(cqe," (ELECTRA model)"),cqe.forEach(t),zGr=i(To),H3=n(To,"LI",{});var fqe=s(H3);eEe=n(fqe,"STRONG",{});var s$t=s(eEe);WGr=r(s$t,"roberta"),s$t.forEach(t),QGr=r(fqe," \u2014 "),iZ=n(fqe,"A",{href:!0});var l$t=s(iZ);HGr=r(l$t,"FlaxRobertaForMultipleChoice"),l$t.forEach(t),UGr=r(fqe," (RoBERTa model)"),fqe.forEach(t),JGr=i(To),U3=n(To,"LI",{});var mqe=s(U3);oEe=n(mqe,"STRONG",{});var i$t=s(oEe);YGr=r(i$t,"roformer"),i$t.forEach(t),KGr=r(mqe," \u2014 "),dZ=n(mqe,"A",{href:!0});var d$t=s(dZ);ZGr=r(d$t,"FlaxRoFormerForMultipleChoice"),d$t.forEach(t),eOr=r(mqe," (RoFormer model)"),mqe.forEach(t),oOr=i(To),J3=n(To,"LI",{});var gqe=s(J3);rEe=n(gqe,"STRONG",{});var c$t=s(rEe);rOr=r(c$t,"xlm-roberta"),c$t.forEach(t),tOr=r(gqe," \u2014 "),cZ=n(gqe,"A",{href:!0});var f$t=s(cZ);aOr=r(f$t,"FlaxXLMRobertaForMultipleChoice"),f$t.forEach(t),nOr=r(gqe," (XLM-RoBERTa model)"),gqe.forEach(t),To.forEach(t),sOr=i(ai),T(Y3.$$.fragment,ai),ai.forEach(t),ti.forEach(t),pDe=i(f),rf=n(f,"H2",{class:!0});var MOe=s(rf);K3=n(MOe,"A",{id:!0,class:!0,href:!0});var m$t=s(K3);tEe=n(m$t,"SPAN",{});var g$t=s(tEe);T(Tx.$$.fragment,g$t),g$t.forEach(t),m$t.forEach(t),lOr=i(MOe),aEe=n(MOe,"SPAN",{});var h$t=s(aEe);iOr=r(h$t,"FlaxAutoModelForNextSentencePrediction"),h$t.forEach(t),MOe.forEach(t),_De=i(f),Fr=n(f,"DIV",{class:!0});var ni=s(Fr);T(Mx.$$.fragment,ni),dOr=i(ni),tf=n(ni,"P",{});var coe=s(tf);cOr=r(coe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),fZ=n(coe,"A",{href:!0});var p$t=s(fZ);fOr=r(p$t,"from_pretrained()"),p$t.forEach(t),mOr=r(coe," class method or the "),mZ=n(coe,"A",{href:!0});var _$t=s(mZ);gOr=r(_$t,"from_config()"),_$t.forEach(t),hOr=r(coe,` class
method.`),coe.forEach(t),pOr=i(ni),Ex=n(ni,"P",{});var EOe=s(Ex);_Or=r(EOe,"This class cannot be instantiated directly using "),nEe=n(EOe,"CODE",{});var u$t=s(nEe);uOr=r(u$t,"__init__()"),u$t.forEach(t),bOr=r(EOe," (throws an error)."),EOe.forEach(t),vOr=i(ni),Jt=n(ni,"DIV",{class:!0});var MA=s(Jt);T(Cx.$$.fragment,MA),FOr=i(MA),sEe=n(MA,"P",{});var b$t=s(sEe);TOr=r(b$t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),b$t.forEach(t),MOr=i(MA),af=n(MA,"P",{});var foe=s(af);EOr=r(foe,`Note:
Loading a model from its configuration file does `),lEe=n(foe,"STRONG",{});var v$t=s(lEe);COr=r(v$t,"not"),v$t.forEach(t),wOr=r(foe,` load the model weights. It only affects the
model\u2019s configuration. Use `),gZ=n(foe,"A",{href:!0});var F$t=s(gZ);AOr=r(F$t,"from_pretrained()"),F$t.forEach(t),yOr=r(foe," to load the model weights."),foe.forEach(t),LOr=i(MA),T(Z3.$$.fragment,MA),MA.forEach(t),xOr=i(ni),Hr=n(ni,"DIV",{class:!0});var si=s(Hr);T(wx.$$.fragment,si),$Or=i(si),iEe=n(si,"P",{});var T$t=s(iEe);kOr=r(T$t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),T$t.forEach(t),SOr=i(si),En=n(si,"P",{});var EA=s(En);ROr=r(EA,"The model class to instantiate is selected based on the "),dEe=n(EA,"CODE",{});var M$t=s(dEe);POr=r(M$t,"model_type"),M$t.forEach(t),BOr=r(EA,` property of the config object (either
passed as an argument or loaded from `),cEe=n(EA,"CODE",{});var E$t=s(cEe);IOr=r(E$t,"pretrained_model_name_or_path"),E$t.forEach(t),NOr=r(EA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fEe=n(EA,"CODE",{});var C$t=s(fEe);qOr=r(C$t,"pretrained_model_name_or_path"),C$t.forEach(t),jOr=r(EA,":"),EA.forEach(t),DOr=i(si),mEe=n(si,"UL",{});var w$t=s(mEe);ew=n(w$t,"LI",{});var hqe=s(ew);gEe=n(hqe,"STRONG",{});var A$t=s(gEe);GOr=r(A$t,"bert"),A$t.forEach(t),OOr=r(hqe," \u2014 "),hZ=n(hqe,"A",{href:!0});var y$t=s(hZ);VOr=r(y$t,"FlaxBertForNextSentencePrediction"),y$t.forEach(t),XOr=r(hqe," (BERT model)"),hqe.forEach(t),w$t.forEach(t),zOr=i(si),T(ow.$$.fragment,si),si.forEach(t),ni.forEach(t),uDe=i(f),nf=n(f,"H2",{class:!0});var COe=s(nf);rw=n(COe,"A",{id:!0,class:!0,href:!0});var L$t=s(rw);hEe=n(L$t,"SPAN",{});var x$t=s(hEe);T(Ax.$$.fragment,x$t),x$t.forEach(t),L$t.forEach(t),WOr=i(COe),pEe=n(COe,"SPAN",{});var $$t=s(pEe);QOr=r($$t,"FlaxAutoModelForImageClassification"),$$t.forEach(t),COe.forEach(t),bDe=i(f),Tr=n(f,"DIV",{class:!0});var li=s(Tr);T(yx.$$.fragment,li),HOr=i(li),sf=n(li,"P",{});var moe=s(sf);UOr=r(moe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),pZ=n(moe,"A",{href:!0});var k$t=s(pZ);JOr=r(k$t,"from_pretrained()"),k$t.forEach(t),YOr=r(moe," class method or the "),_Z=n(moe,"A",{href:!0});var S$t=s(_Z);KOr=r(S$t,"from_config()"),S$t.forEach(t),ZOr=r(moe,` class
method.`),moe.forEach(t),eVr=i(li),Lx=n(li,"P",{});var wOe=s(Lx);oVr=r(wOe,"This class cannot be instantiated directly using "),_Ee=n(wOe,"CODE",{});var R$t=s(_Ee);rVr=r(R$t,"__init__()"),R$t.forEach(t),tVr=r(wOe," (throws an error)."),wOe.forEach(t),aVr=i(li),Yt=n(li,"DIV",{class:!0});var CA=s(Yt);T(xx.$$.fragment,CA),nVr=i(CA),uEe=n(CA,"P",{});var P$t=s(uEe);sVr=r(P$t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),P$t.forEach(t),lVr=i(CA),lf=n(CA,"P",{});var goe=s(lf);iVr=r(goe,`Note:
Loading a model from its configuration file does `),bEe=n(goe,"STRONG",{});var B$t=s(bEe);dVr=r(B$t,"not"),B$t.forEach(t),cVr=r(goe,` load the model weights. It only affects the
model\u2019s configuration. Use `),uZ=n(goe,"A",{href:!0});var I$t=s(uZ);fVr=r(I$t,"from_pretrained()"),I$t.forEach(t),mVr=r(goe," to load the model weights."),goe.forEach(t),gVr=i(CA),T(tw.$$.fragment,CA),CA.forEach(t),hVr=i(li),Ur=n(li,"DIV",{class:!0});var ii=s(Ur);T($x.$$.fragment,ii),pVr=i(ii),vEe=n(ii,"P",{});var N$t=s(vEe);_Vr=r(N$t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),N$t.forEach(t),uVr=i(ii),Cn=n(ii,"P",{});var wA=s(Cn);bVr=r(wA,"The model class to instantiate is selected based on the "),FEe=n(wA,"CODE",{});var q$t=s(FEe);vVr=r(q$t,"model_type"),q$t.forEach(t),FVr=r(wA,` property of the config object (either
passed as an argument or loaded from `),TEe=n(wA,"CODE",{});var j$t=s(TEe);TVr=r(j$t,"pretrained_model_name_or_path"),j$t.forEach(t),MVr=r(wA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MEe=n(wA,"CODE",{});var D$t=s(MEe);EVr=r(D$t,"pretrained_model_name_or_path"),D$t.forEach(t),CVr=r(wA,":"),wA.forEach(t),wVr=i(ii),kx=n(ii,"UL",{});var AOe=s(kx);aw=n(AOe,"LI",{});var pqe=s(aw);EEe=n(pqe,"STRONG",{});var G$t=s(EEe);AVr=r(G$t,"beit"),G$t.forEach(t),yVr=r(pqe," \u2014 "),bZ=n(pqe,"A",{href:!0});var O$t=s(bZ);LVr=r(O$t,"FlaxBeitForImageClassification"),O$t.forEach(t),xVr=r(pqe," (BEiT model)"),pqe.forEach(t),$Vr=i(AOe),nw=n(AOe,"LI",{});var _qe=s(nw);CEe=n(_qe,"STRONG",{});var V$t=s(CEe);kVr=r(V$t,"vit"),V$t.forEach(t),SVr=r(_qe," \u2014 "),vZ=n(_qe,"A",{href:!0});var X$t=s(vZ);RVr=r(X$t,"FlaxViTForImageClassification"),X$t.forEach(t),PVr=r(_qe," (ViT model)"),_qe.forEach(t),AOe.forEach(t),BVr=i(ii),T(sw.$$.fragment,ii),ii.forEach(t),li.forEach(t),vDe=i(f),df=n(f,"H2",{class:!0});var yOe=s(df);lw=n(yOe,"A",{id:!0,class:!0,href:!0});var z$t=s(lw);wEe=n(z$t,"SPAN",{});var W$t=s(wEe);T(Sx.$$.fragment,W$t),W$t.forEach(t),z$t.forEach(t),IVr=i(yOe),AEe=n(yOe,"SPAN",{});var Q$t=s(AEe);NVr=r(Q$t,"FlaxAutoModelForVision2Seq"),Q$t.forEach(t),yOe.forEach(t),FDe=i(f),Mr=n(f,"DIV",{class:!0});var di=s(Mr);T(Rx.$$.fragment,di),qVr=i(di),cf=n(di,"P",{});var hoe=s(cf);jVr=r(hoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),FZ=n(hoe,"A",{href:!0});var H$t=s(FZ);DVr=r(H$t,"from_pretrained()"),H$t.forEach(t),GVr=r(hoe," class method or the "),TZ=n(hoe,"A",{href:!0});var U$t=s(TZ);OVr=r(U$t,"from_config()"),U$t.forEach(t),VVr=r(hoe,` class
method.`),hoe.forEach(t),XVr=i(di),Px=n(di,"P",{});var LOe=s(Px);zVr=r(LOe,"This class cannot be instantiated directly using "),yEe=n(LOe,"CODE",{});var J$t=s(yEe);WVr=r(J$t,"__init__()"),J$t.forEach(t),QVr=r(LOe," (throws an error)."),LOe.forEach(t),HVr=i(di),Kt=n(di,"DIV",{class:!0});var AA=s(Kt);T(Bx.$$.fragment,AA),UVr=i(AA),LEe=n(AA,"P",{});var Y$t=s(LEe);JVr=r(Y$t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Y$t.forEach(t),YVr=i(AA),ff=n(AA,"P",{});var poe=s(ff);KVr=r(poe,`Note:
Loading a model from its configuration file does `),xEe=n(poe,"STRONG",{});var K$t=s(xEe);ZVr=r(K$t,"not"),K$t.forEach(t),eXr=r(poe,` load the model weights. It only affects the
model\u2019s configuration. Use `),MZ=n(poe,"A",{href:!0});var Z$t=s(MZ);oXr=r(Z$t,"from_pretrained()"),Z$t.forEach(t),rXr=r(poe," to load the model weights."),poe.forEach(t),tXr=i(AA),T(iw.$$.fragment,AA),AA.forEach(t),aXr=i(di),Jr=n(di,"DIV",{class:!0});var ci=s(Jr);T(Ix.$$.fragment,ci),nXr=i(ci),$Ee=n(ci,"P",{});var ekt=s($Ee);sXr=r(ekt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),ekt.forEach(t),lXr=i(ci),wn=n(ci,"P",{});var yA=s(wn);iXr=r(yA,"The model class to instantiate is selected based on the "),kEe=n(yA,"CODE",{});var okt=s(kEe);dXr=r(okt,"model_type"),okt.forEach(t),cXr=r(yA,` property of the config object (either
passed as an argument or loaded from `),SEe=n(yA,"CODE",{});var rkt=s(SEe);fXr=r(rkt,"pretrained_model_name_or_path"),rkt.forEach(t),mXr=r(yA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),REe=n(yA,"CODE",{});var tkt=s(REe);gXr=r(tkt,"pretrained_model_name_or_path"),tkt.forEach(t),hXr=r(yA,":"),yA.forEach(t),pXr=i(ci),PEe=n(ci,"UL",{});var akt=s(PEe);dw=n(akt,"LI",{});var uqe=s(dw);BEe=n(uqe,"STRONG",{});var nkt=s(BEe);_Xr=r(nkt,"vision-encoder-decoder"),nkt.forEach(t),uXr=r(uqe," \u2014 "),EZ=n(uqe,"A",{href:!0});var skt=s(EZ);bXr=r(skt,"FlaxVisionEncoderDecoderModel"),skt.forEach(t),vXr=r(uqe," (Vision Encoder decoder model)"),uqe.forEach(t),akt.forEach(t),FXr=i(ci),T(cw.$$.fragment,ci),ci.forEach(t),di.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(cRt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(yn,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.AutoConfig"),c(xn,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.AutoModel"),c($n,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.AutoTokenizer"),c(ui,"href","/docs/transformers/pr_17510/en/model_doc/bert#transformers.BertModel"),c(vf,"id","extending-the-auto-classes"),c(vf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vf,"href","#extending-the-auto-classes"),c(bi,"class","relative group"),c(Tf,"id","transformers.AutoConfig"),c(Tf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Tf,"href","#transformers.AutoConfig"),c(vi,"class","relative group"),c(rk,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(tk,"href","/docs/transformers/pr_17510/en/model_doc/albert#transformers.AlbertConfig"),c(ak,"href","/docs/transformers/pr_17510/en/model_doc/bart#transformers.BartConfig"),c(nk,"href","/docs/transformers/pr_17510/en/model_doc/beit#transformers.BeitConfig"),c(sk,"href","/docs/transformers/pr_17510/en/model_doc/bert#transformers.BertConfig"),c(lk,"href","/docs/transformers/pr_17510/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(ik,"href","/docs/transformers/pr_17510/en/model_doc/big_bird#transformers.BigBirdConfig"),c(dk,"href","/docs/transformers/pr_17510/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(ck,"href","/docs/transformers/pr_17510/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(fk,"href","/docs/transformers/pr_17510/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(mk,"href","/docs/transformers/pr_17510/en/model_doc/camembert#transformers.CamembertConfig"),c(gk,"href","/docs/transformers/pr_17510/en/model_doc/canine#transformers.CanineConfig"),c(hk,"href","/docs/transformers/pr_17510/en/model_doc/clip#transformers.CLIPConfig"),c(pk,"href","/docs/transformers/pr_17510/en/model_doc/convbert#transformers.ConvBertConfig"),c(_k,"href","/docs/transformers/pr_17510/en/model_doc/convnext#transformers.ConvNextConfig"),c(uk,"href","/docs/transformers/pr_17510/en/model_doc/ctrl#transformers.CTRLConfig"),c(bk,"href","/docs/transformers/pr_17510/en/model_doc/cvt#transformers.CvtConfig"),c(vk,"href","/docs/transformers/pr_17510/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(Fk,"href","/docs/transformers/pr_17510/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(Tk,"href","/docs/transformers/pr_17510/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(Mk,"href","/docs/transformers/pr_17510/en/model_doc/deberta#transformers.DebertaConfig"),c(Ek,"href","/docs/transformers/pr_17510/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(Ck,"href","/docs/transformers/pr_17510/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(wk,"href","/docs/transformers/pr_17510/en/model_doc/deit#transformers.DeiTConfig"),c(Ak,"href","/docs/transformers/pr_17510/en/model_doc/detr#transformers.DetrConfig"),c(yk,"href","/docs/transformers/pr_17510/en/model_doc/distilbert#transformers.DistilBertConfig"),c(Lk,"href","/docs/transformers/pr_17510/en/model_doc/dpr#transformers.DPRConfig"),c(xk,"href","/docs/transformers/pr_17510/en/model_doc/dpt#transformers.DPTConfig"),c($k,"href","/docs/transformers/pr_17510/en/model_doc/electra#transformers.ElectraConfig"),c(kk,"href","/docs/transformers/pr_17510/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(Sk,"href","/docs/transformers/pr_17510/en/model_doc/flaubert#transformers.FlaubertConfig"),c(Rk,"href","/docs/transformers/pr_17510/en/model_doc/flava#transformers.FlavaConfig"),c(Pk,"href","/docs/transformers/pr_17510/en/model_doc/fnet#transformers.FNetConfig"),c(Bk,"href","/docs/transformers/pr_17510/en/model_doc/fsmt#transformers.FSMTConfig"),c(Ik,"href","/docs/transformers/pr_17510/en/model_doc/funnel#transformers.FunnelConfig"),c(Nk,"href","/docs/transformers/pr_17510/en/model_doc/glpn#transformers.GLPNConfig"),c(qk,"href","/docs/transformers/pr_17510/en/model_doc/gpt2#transformers.GPT2Config"),c(jk,"href","/docs/transformers/pr_17510/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(Dk,"href","/docs/transformers/pr_17510/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(Gk,"href","/docs/transformers/pr_17510/en/model_doc/gptj#transformers.GPTJConfig"),c(Ok,"href","/docs/transformers/pr_17510/en/model_doc/hubert#transformers.HubertConfig"),c(Vk,"href","/docs/transformers/pr_17510/en/model_doc/ibert#transformers.IBertConfig"),c(Xk,"href","/docs/transformers/pr_17510/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(zk,"href","/docs/transformers/pr_17510/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(Wk,"href","/docs/transformers/pr_17510/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(Qk,"href","/docs/transformers/pr_17510/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(Hk,"href","/docs/transformers/pr_17510/en/model_doc/led#transformers.LEDConfig"),c(Uk,"href","/docs/transformers/pr_17510/en/model_doc/longformer#transformers.LongformerConfig"),c(Jk,"href","/docs/transformers/pr_17510/en/model_doc/luke#transformers.LukeConfig"),c(Yk,"href","/docs/transformers/pr_17510/en/model_doc/lxmert#transformers.LxmertConfig"),c(Kk,"href","/docs/transformers/pr_17510/en/model_doc/m2m_100#transformers.M2M100Config"),c(Zk,"href","/docs/transformers/pr_17510/en/model_doc/marian#transformers.MarianConfig"),c(eS,"href","/docs/transformers/pr_17510/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(oS,"href","/docs/transformers/pr_17510/en/model_doc/mbart#transformers.MBartConfig"),c(rS,"href","/docs/transformers/pr_17510/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(tS,"href","/docs/transformers/pr_17510/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(aS,"href","/docs/transformers/pr_17510/en/model_doc/mpnet#transformers.MPNetConfig"),c(nS,"href","/docs/transformers/pr_17510/en/model_doc/mt5#transformers.MT5Config"),c(sS,"href","/docs/transformers/pr_17510/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(lS,"href","/docs/transformers/pr_17510/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(iS,"href","/docs/transformers/pr_17510/en/model_doc/opt#transformers.OPTConfig"),c(dS,"href","/docs/transformers/pr_17510/en/model_doc/pegasus#transformers.PegasusConfig"),c(cS,"href","/docs/transformers/pr_17510/en/model_doc/perceiver#transformers.PerceiverConfig"),c(fS,"href","/docs/transformers/pr_17510/en/model_doc/plbart#transformers.PLBartConfig"),c(mS,"href","/docs/transformers/pr_17510/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(gS,"href","/docs/transformers/pr_17510/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(hS,"href","/docs/transformers/pr_17510/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(pS,"href","/docs/transformers/pr_17510/en/model_doc/rag#transformers.RagConfig"),c(_S,"href","/docs/transformers/pr_17510/en/model_doc/realm#transformers.RealmConfig"),c(uS,"href","/docs/transformers/pr_17510/en/model_doc/reformer#transformers.ReformerConfig"),c(bS,"href","/docs/transformers/pr_17510/en/model_doc/regnet#transformers.RegNetConfig"),c(vS,"href","/docs/transformers/pr_17510/en/model_doc/rembert#transformers.RemBertConfig"),c(FS,"href","/docs/transformers/pr_17510/en/model_doc/resnet#transformers.ResNetConfig"),c(TS,"href","/docs/transformers/pr_17510/en/model_doc/retribert#transformers.RetriBertConfig"),c(MS,"href","/docs/transformers/pr_17510/en/model_doc/roberta#transformers.RobertaConfig"),c(ES,"href","/docs/transformers/pr_17510/en/model_doc/roformer#transformers.RoFormerConfig"),c(CS,"href","/docs/transformers/pr_17510/en/model_doc/segformer#transformers.SegformerConfig"),c(wS,"href","/docs/transformers/pr_17510/en/model_doc/sew#transformers.SEWConfig"),c(AS,"href","/docs/transformers/pr_17510/en/model_doc/sew-d#transformers.SEWDConfig"),c(yS,"href","/docs/transformers/pr_17510/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(LS,"href","/docs/transformers/pr_17510/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(xS,"href","/docs/transformers/pr_17510/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c($S,"href","/docs/transformers/pr_17510/en/model_doc/splinter#transformers.SplinterConfig"),c(kS,"href","/docs/transformers/pr_17510/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(SS,"href","/docs/transformers/pr_17510/en/model_doc/swin#transformers.SwinConfig"),c(RS,"href","/docs/transformers/pr_17510/en/model_doc/t5#transformers.T5Config"),c(PS,"href","/docs/transformers/pr_17510/en/model_doc/tapas#transformers.TapasConfig"),c(BS,"href","/docs/transformers/pr_17510/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(IS,"href","/docs/transformers/pr_17510/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(NS,"href","/docs/transformers/pr_17510/en/model_doc/trocr#transformers.TrOCRConfig"),c(qS,"href","/docs/transformers/pr_17510/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(jS,"href","/docs/transformers/pr_17510/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(DS,"href","/docs/transformers/pr_17510/en/model_doc/van#transformers.VanConfig"),c(GS,"href","/docs/transformers/pr_17510/en/model_doc/vilt#transformers.ViltConfig"),c(OS,"href","/docs/transformers/pr_17510/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(VS,"href","/docs/transformers/pr_17510/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(XS,"href","/docs/transformers/pr_17510/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(zS,"href","/docs/transformers/pr_17510/en/model_doc/vit#transformers.ViTConfig"),c(WS,"href","/docs/transformers/pr_17510/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(QS,"href","/docs/transformers/pr_17510/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(HS,"href","/docs/transformers/pr_17510/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(US,"href","/docs/transformers/pr_17510/en/model_doc/wavlm#transformers.WavLMConfig"),c(JS,"href","/docs/transformers/pr_17510/en/model_doc/xglm#transformers.XGLMConfig"),c(YS,"href","/docs/transformers/pr_17510/en/model_doc/xlm#transformers.XLMConfig"),c(KS,"href","/docs/transformers/pr_17510/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(ZS,"href","/docs/transformers/pr_17510/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(eR,"href","/docs/transformers/pr_17510/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(oR,"href","/docs/transformers/pr_17510/en/model_doc/xlnet#transformers.XLNetConfig"),c(rR,"href","/docs/transformers/pr_17510/en/model_doc/yolos#transformers.YolosConfig"),c(tR,"href","/docs/transformers/pr_17510/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wg,"id","transformers.AutoTokenizer"),c(wg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wg,"href","#transformers.AutoTokenizer"),c(Ti,"class","relative group"),c(aR,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(nR,"href","/docs/transformers/pr_17510/en/model_doc/albert#transformers.AlbertTokenizer"),c(sR,"href","/docs/transformers/pr_17510/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(lR,"href","/docs/transformers/pr_17510/en/model_doc/bart#transformers.BartTokenizer"),c(iR,"href","/docs/transformers/pr_17510/en/model_doc/bart#transformers.BartTokenizerFast"),c(dR,"href","/docs/transformers/pr_17510/en/model_doc/barthez#transformers.BarthezTokenizer"),c(cR,"href","/docs/transformers/pr_17510/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(fR,"href","/docs/transformers/pr_17510/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(mR,"href","/docs/transformers/pr_17510/en/model_doc/bert#transformers.BertTokenizer"),c(gR,"href","/docs/transformers/pr_17510/en/model_doc/bert#transformers.BertTokenizerFast"),c(hR,"href","/docs/transformers/pr_17510/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(pR,"href","/docs/transformers/pr_17510/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(_R,"href","/docs/transformers/pr_17510/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(uR,"href","/docs/transformers/pr_17510/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(bR,"href","/docs/transformers/pr_17510/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(vR,"href","/docs/transformers/pr_17510/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(FR,"href","/docs/transformers/pr_17510/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(TR,"href","/docs/transformers/pr_17510/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(MR,"href","/docs/transformers/pr_17510/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(ER,"href","/docs/transformers/pr_17510/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(CR,"href","/docs/transformers/pr_17510/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(wR,"href","/docs/transformers/pr_17510/en/model_doc/camembert#transformers.CamembertTokenizer"),c(AR,"href","/docs/transformers/pr_17510/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(yR,"href","/docs/transformers/pr_17510/en/model_doc/canine#transformers.CanineTokenizer"),c(LR,"href","/docs/transformers/pr_17510/en/model_doc/clip#transformers.CLIPTokenizer"),c(xR,"href","/docs/transformers/pr_17510/en/model_doc/clip#transformers.CLIPTokenizerFast"),c($R,"href","/docs/transformers/pr_17510/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(kR,"href","/docs/transformers/pr_17510/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(SR,"href","/docs/transformers/pr_17510/en/model_doc/cpm#transformers.CpmTokenizer"),c(RR,"href","/docs/transformers/pr_17510/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(PR,"href","/docs/transformers/pr_17510/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(BR,"href","/docs/transformers/pr_17510/en/model_doc/roberta#transformers.RobertaTokenizer"),c(IR,"href","/docs/transformers/pr_17510/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(NR,"href","/docs/transformers/pr_17510/en/model_doc/deberta#transformers.DebertaTokenizer"),c(qR,"href","/docs/transformers/pr_17510/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(jR,"href","/docs/transformers/pr_17510/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(DR,"href","/docs/transformers/pr_17510/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(GR,"href","/docs/transformers/pr_17510/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(OR,"href","/docs/transformers/pr_17510/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(VR,"href","/docs/transformers/pr_17510/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(XR,"href","/docs/transformers/pr_17510/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(zR,"href","/docs/transformers/pr_17510/en/model_doc/electra#transformers.ElectraTokenizer"),c(WR,"href","/docs/transformers/pr_17510/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(QR,"href","/docs/transformers/pr_17510/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(HR,"href","/docs/transformers/pr_17510/en/model_doc/fnet#transformers.FNetTokenizer"),c(UR,"href","/docs/transformers/pr_17510/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(JR,"href","/docs/transformers/pr_17510/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(YR,"href","/docs/transformers/pr_17510/en/model_doc/funnel#transformers.FunnelTokenizer"),c(KR,"href","/docs/transformers/pr_17510/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(ZR,"href","/docs/transformers/pr_17510/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(eP,"href","/docs/transformers/pr_17510/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(oP,"href","/docs/transformers/pr_17510/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(rP,"href","/docs/transformers/pr_17510/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(tP,"href","/docs/transformers/pr_17510/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(aP,"href","/docs/transformers/pr_17510/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(nP,"href","/docs/transformers/pr_17510/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(sP,"href","/docs/transformers/pr_17510/en/model_doc/herbert#transformers.HerbertTokenizer"),c(lP,"href","/docs/transformers/pr_17510/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(iP,"href","/docs/transformers/pr_17510/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(dP,"href","/docs/transformers/pr_17510/en/model_doc/roberta#transformers.RobertaTokenizer"),c(cP,"href","/docs/transformers/pr_17510/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(fP,"href","/docs/transformers/pr_17510/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(mP,"href","/docs/transformers/pr_17510/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(gP,"href","/docs/transformers/pr_17510/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(hP,"href","/docs/transformers/pr_17510/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(pP,"href","/docs/transformers/pr_17510/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(_P,"href","/docs/transformers/pr_17510/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(uP,"href","/docs/transformers/pr_17510/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(bP,"href","/docs/transformers/pr_17510/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(vP,"href","/docs/transformers/pr_17510/en/model_doc/led#transformers.LEDTokenizer"),c(FP,"href","/docs/transformers/pr_17510/en/model_doc/led#transformers.LEDTokenizerFast"),c(TP,"href","/docs/transformers/pr_17510/en/model_doc/longformer#transformers.LongformerTokenizer"),c(MP,"href","/docs/transformers/pr_17510/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(EP,"href","/docs/transformers/pr_17510/en/model_doc/luke#transformers.LukeTokenizer"),c(CP,"href","/docs/transformers/pr_17510/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(wP,"href","/docs/transformers/pr_17510/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(AP,"href","/docs/transformers/pr_17510/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(yP,"href","/docs/transformers/pr_17510/en/model_doc/marian#transformers.MarianTokenizer"),c(LP,"href","/docs/transformers/pr_17510/en/model_doc/mbart#transformers.MBartTokenizer"),c(xP,"href","/docs/transformers/pr_17510/en/model_doc/mbart#transformers.MBartTokenizerFast"),c($P,"href","/docs/transformers/pr_17510/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(kP,"href","/docs/transformers/pr_17510/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(SP,"href","/docs/transformers/pr_17510/en/model_doc/bert#transformers.BertTokenizer"),c(RP,"href","/docs/transformers/pr_17510/en/model_doc/bert#transformers.BertTokenizerFast"),c(PP,"href","/docs/transformers/pr_17510/en/model_doc/mluke#transformers.MLukeTokenizer"),c(BP,"href","/docs/transformers/pr_17510/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(IP,"href","/docs/transformers/pr_17510/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(NP,"href","/docs/transformers/pr_17510/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(qP,"href","/docs/transformers/pr_17510/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(jP,"href","/docs/transformers/pr_17510/en/model_doc/t5#transformers.T5Tokenizer"),c(DP,"href","/docs/transformers/pr_17510/en/model_doc/t5#transformers.T5TokenizerFast"),c(GP,"href","/docs/transformers/pr_17510/en/model_doc/albert#transformers.AlbertTokenizer"),c(OP,"href","/docs/transformers/pr_17510/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(VP,"href","/docs/transformers/pr_17510/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(XP,"href","/docs/transformers/pr_17510/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(zP,"href","/docs/transformers/pr_17510/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(WP,"href","/docs/transformers/pr_17510/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(QP,"href","/docs/transformers/pr_17510/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(HP,"href","/docs/transformers/pr_17510/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(UP,"href","/docs/transformers/pr_17510/en/model_doc/phobert#transformers.PhobertTokenizer"),c(JP,"href","/docs/transformers/pr_17510/en/model_doc/plbart#transformers.PLBartTokenizer"),c(YP,"href","/docs/transformers/pr_17510/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(KP,"href","/docs/transformers/pr_17510/en/model_doc/bert#transformers.BertTokenizer"),c(ZP,"href","/docs/transformers/pr_17510/en/model_doc/bert#transformers.BertTokenizerFast"),c(eB,"href","/docs/transformers/pr_17510/en/model_doc/rag#transformers.RagTokenizer"),c(oB,"href","/docs/transformers/pr_17510/en/model_doc/realm#transformers.RealmTokenizer"),c(rB,"href","/docs/transformers/pr_17510/en/model_doc/realm#transformers.RealmTokenizerFast"),c(tB,"href","/docs/transformers/pr_17510/en/model_doc/reformer#transformers.ReformerTokenizer"),c(aB,"href","/docs/transformers/pr_17510/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(nB,"href","/docs/transformers/pr_17510/en/model_doc/rembert#transformers.RemBertTokenizer"),c(sB,"href","/docs/transformers/pr_17510/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(lB,"href","/docs/transformers/pr_17510/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(iB,"href","/docs/transformers/pr_17510/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(dB,"href","/docs/transformers/pr_17510/en/model_doc/roberta#transformers.RobertaTokenizer"),c(cB,"href","/docs/transformers/pr_17510/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(fB,"href","/docs/transformers/pr_17510/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(mB,"href","/docs/transformers/pr_17510/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(gB,"href","/docs/transformers/pr_17510/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(hB,"href","/docs/transformers/pr_17510/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(pB,"href","/docs/transformers/pr_17510/en/model_doc/splinter#transformers.SplinterTokenizer"),c(_B,"href","/docs/transformers/pr_17510/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(uB,"href","/docs/transformers/pr_17510/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(bB,"href","/docs/transformers/pr_17510/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(vB,"href","/docs/transformers/pr_17510/en/model_doc/t5#transformers.T5Tokenizer"),c(FB,"href","/docs/transformers/pr_17510/en/model_doc/t5#transformers.T5TokenizerFast"),c(TB,"href","/docs/transformers/pr_17510/en/model_doc/tapas#transformers.TapasTokenizer"),c(MB,"href","/docs/transformers/pr_17510/en/model_doc/tapex#transformers.TapexTokenizer"),c(EB,"href","/docs/transformers/pr_17510/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(CB,"href","/docs/transformers/pr_17510/en/model_doc/bert#transformers.BertTokenizer"),c(wB,"href","/docs/transformers/pr_17510/en/model_doc/bert#transformers.BertTokenizerFast"),c(AB,"href","/docs/transformers/pr_17510/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(yB,"href","/docs/transformers/pr_17510/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(LB,"href","/docs/transformers/pr_17510/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(xB,"href","/docs/transformers/pr_17510/en/model_doc/xglm#transformers.XGLMTokenizer"),c($B,"href","/docs/transformers/pr_17510/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(kB,"href","/docs/transformers/pr_17510/en/model_doc/xlm#transformers.XLMTokenizer"),c(SB,"href","/docs/transformers/pr_17510/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(RB,"href","/docs/transformers/pr_17510/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(PB,"href","/docs/transformers/pr_17510/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(BB,"href","/docs/transformers/pr_17510/en/model_doc/roberta#transformers.RobertaTokenizer"),c(IB,"href","/docs/transformers/pr_17510/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(NB,"href","/docs/transformers/pr_17510/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(qB,"href","/docs/transformers/pr_17510/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(jB,"href","/docs/transformers/pr_17510/en/model_doc/albert#transformers.AlbertTokenizer"),c(DB,"href","/docs/transformers/pr_17510/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sh,"id","transformers.AutoFeatureExtractor"),c(sh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sh,"href","#transformers.AutoFeatureExtractor"),c(Mi,"class","relative group"),c(GB,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(OB,"href","/docs/transformers/pr_17510/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(VB,"href","/docs/transformers/pr_17510/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(XB,"href","/docs/transformers/pr_17510/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(zB,"href","/docs/transformers/pr_17510/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(WB,"href","/docs/transformers/pr_17510/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(QB,"href","/docs/transformers/pr_17510/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(HB,"href","/docs/transformers/pr_17510/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(UB,"href","/docs/transformers/pr_17510/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(JB,"href","/docs/transformers/pr_17510/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(YB,"href","/docs/transformers/pr_17510/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(KB,"href","/docs/transformers/pr_17510/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(ZB,"href","/docs/transformers/pr_17510/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(eI,"href","/docs/transformers/pr_17510/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(oI,"href","/docs/transformers/pr_17510/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(rI,"href","/docs/transformers/pr_17510/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(tI,"href","/docs/transformers/pr_17510/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(aI,"href","/docs/transformers/pr_17510/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(nI,"href","/docs/transformers/pr_17510/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(sI,"href","/docs/transformers/pr_17510/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(lI,"href","/docs/transformers/pr_17510/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(iI,"href","/docs/transformers/pr_17510/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(dI,"href","/docs/transformers/pr_17510/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(cI,"href","/docs/transformers/pr_17510/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(fI,"href","/docs/transformers/pr_17510/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(mI,"href","/docs/transformers/pr_17510/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(gI,"href","/docs/transformers/pr_17510/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(hI,"href","/docs/transformers/pr_17510/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(pI,"href","/docs/transformers/pr_17510/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(_I,"href","/docs/transformers/pr_17510/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jh,"id","transformers.AutoProcessor"),c(jh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jh,"href","#transformers.AutoProcessor"),c(Ei,"class","relative group"),c(uI,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(bI,"href","/docs/transformers/pr_17510/en/model_doc/clip#transformers.CLIPProcessor"),c(vI,"href","/docs/transformers/pr_17510/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(FI,"href","/docs/transformers/pr_17510/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(TI,"href","/docs/transformers/pr_17510/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(MI,"href","/docs/transformers/pr_17510/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(EI,"href","/docs/transformers/pr_17510/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(CI,"href","/docs/transformers/pr_17510/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(wI,"href","/docs/transformers/pr_17510/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(AI,"href","/docs/transformers/pr_17510/en/model_doc/trocr#transformers.TrOCRProcessor"),c(yI,"href","/docs/transformers/pr_17510/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(LI,"href","/docs/transformers/pr_17510/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(xI,"href","/docs/transformers/pr_17510/en/model_doc/vilt#transformers.ViltProcessor"),c($I,"href","/docs/transformers/pr_17510/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(kI,"href","/docs/transformers/pr_17510/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(SI,"href","/docs/transformers/pr_17510/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(RI,"href","/docs/transformers/pr_17510/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(np,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sp,"id","transformers.AutoModel"),c(sp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sp,"href","#transformers.AutoModel"),c(wi,"class","relative group"),c(PI,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BI,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(II,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NI,"href","/docs/transformers/pr_17510/en/model_doc/albert#transformers.AlbertModel"),c(qI,"href","/docs/transformers/pr_17510/en/model_doc/bart#transformers.BartModel"),c(jI,"href","/docs/transformers/pr_17510/en/model_doc/beit#transformers.BeitModel"),c(DI,"href","/docs/transformers/pr_17510/en/model_doc/bert#transformers.BertModel"),c(GI,"href","/docs/transformers/pr_17510/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(OI,"href","/docs/transformers/pr_17510/en/model_doc/big_bird#transformers.BigBirdModel"),c(VI,"href","/docs/transformers/pr_17510/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(XI,"href","/docs/transformers/pr_17510/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(zI,"href","/docs/transformers/pr_17510/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(WI,"href","/docs/transformers/pr_17510/en/model_doc/camembert#transformers.CamembertModel"),c(QI,"href","/docs/transformers/pr_17510/en/model_doc/canine#transformers.CanineModel"),c(HI,"href","/docs/transformers/pr_17510/en/model_doc/clip#transformers.CLIPModel"),c(UI,"href","/docs/transformers/pr_17510/en/model_doc/convbert#transformers.ConvBertModel"),c(JI,"href","/docs/transformers/pr_17510/en/model_doc/convnext#transformers.ConvNextModel"),c(YI,"href","/docs/transformers/pr_17510/en/model_doc/ctrl#transformers.CTRLModel"),c(KI,"href","/docs/transformers/pr_17510/en/model_doc/cvt#transformers.CvtModel"),c(ZI,"href","/docs/transformers/pr_17510/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(eN,"href","/docs/transformers/pr_17510/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(oN,"href","/docs/transformers/pr_17510/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(rN,"href","/docs/transformers/pr_17510/en/model_doc/deberta#transformers.DebertaModel"),c(tN,"href","/docs/transformers/pr_17510/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(aN,"href","/docs/transformers/pr_17510/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(nN,"href","/docs/transformers/pr_17510/en/model_doc/deit#transformers.DeiTModel"),c(sN,"href","/docs/transformers/pr_17510/en/model_doc/detr#transformers.DetrModel"),c(lN,"href","/docs/transformers/pr_17510/en/model_doc/distilbert#transformers.DistilBertModel"),c(iN,"href","/docs/transformers/pr_17510/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(dN,"href","/docs/transformers/pr_17510/en/model_doc/dpt#transformers.DPTModel"),c(cN,"href","/docs/transformers/pr_17510/en/model_doc/electra#transformers.ElectraModel"),c(fN,"href","/docs/transformers/pr_17510/en/model_doc/flaubert#transformers.FlaubertModel"),c(mN,"href","/docs/transformers/pr_17510/en/model_doc/flava#transformers.FlavaModel"),c(gN,"href","/docs/transformers/pr_17510/en/model_doc/fnet#transformers.FNetModel"),c(hN,"href","/docs/transformers/pr_17510/en/model_doc/fsmt#transformers.FSMTModel"),c(pN,"href","/docs/transformers/pr_17510/en/model_doc/funnel#transformers.FunnelModel"),c(_N,"href","/docs/transformers/pr_17510/en/model_doc/funnel#transformers.FunnelBaseModel"),c(uN,"href","/docs/transformers/pr_17510/en/model_doc/glpn#transformers.GLPNModel"),c(bN,"href","/docs/transformers/pr_17510/en/model_doc/gpt2#transformers.GPT2Model"),c(vN,"href","/docs/transformers/pr_17510/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(FN,"href","/docs/transformers/pr_17510/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(TN,"href","/docs/transformers/pr_17510/en/model_doc/gptj#transformers.GPTJModel"),c(MN,"href","/docs/transformers/pr_17510/en/model_doc/hubert#transformers.HubertModel"),c(EN,"href","/docs/transformers/pr_17510/en/model_doc/ibert#transformers.IBertModel"),c(CN,"href","/docs/transformers/pr_17510/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(wN,"href","/docs/transformers/pr_17510/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(AN,"href","/docs/transformers/pr_17510/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(yN,"href","/docs/transformers/pr_17510/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(LN,"href","/docs/transformers/pr_17510/en/model_doc/led#transformers.LEDModel"),c(xN,"href","/docs/transformers/pr_17510/en/model_doc/longformer#transformers.LongformerModel"),c($N,"href","/docs/transformers/pr_17510/en/model_doc/luke#transformers.LukeModel"),c(kN,"href","/docs/transformers/pr_17510/en/model_doc/lxmert#transformers.LxmertModel"),c(SN,"href","/docs/transformers/pr_17510/en/model_doc/m2m_100#transformers.M2M100Model"),c(RN,"href","/docs/transformers/pr_17510/en/model_doc/marian#transformers.MarianModel"),c(PN,"href","/docs/transformers/pr_17510/en/model_doc/maskformer#transformers.MaskFormerModel"),c(BN,"href","/docs/transformers/pr_17510/en/model_doc/mbart#transformers.MBartModel"),c(IN,"href","/docs/transformers/pr_17510/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(NN,"href","/docs/transformers/pr_17510/en/model_doc/mobilebert#transformers.MobileBertModel"),c(qN,"href","/docs/transformers/pr_17510/en/model_doc/mpnet#transformers.MPNetModel"),c(jN,"href","/docs/transformers/pr_17510/en/model_doc/mt5#transformers.MT5Model"),c(DN,"href","/docs/transformers/pr_17510/en/model_doc/nystromformer#transformers.NystromformerModel"),c(GN,"href","/docs/transformers/pr_17510/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(ON,"href","/docs/transformers/pr_17510/en/model_doc/opt#transformers.OPTModel"),c(VN,"href","/docs/transformers/pr_17510/en/model_doc/pegasus#transformers.PegasusModel"),c(XN,"href","/docs/transformers/pr_17510/en/model_doc/perceiver#transformers.PerceiverModel"),c(zN,"href","/docs/transformers/pr_17510/en/model_doc/plbart#transformers.PLBartModel"),c(WN,"href","/docs/transformers/pr_17510/en/model_doc/poolformer#transformers.PoolFormerModel"),c(QN,"href","/docs/transformers/pr_17510/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(HN,"href","/docs/transformers/pr_17510/en/model_doc/qdqbert#transformers.QDQBertModel"),c(UN,"href","/docs/transformers/pr_17510/en/model_doc/reformer#transformers.ReformerModel"),c(JN,"href","/docs/transformers/pr_17510/en/model_doc/regnet#transformers.RegNetModel"),c(YN,"href","/docs/transformers/pr_17510/en/model_doc/rembert#transformers.RemBertModel"),c(KN,"href","/docs/transformers/pr_17510/en/model_doc/resnet#transformers.ResNetModel"),c(ZN,"href","/docs/transformers/pr_17510/en/model_doc/retribert#transformers.RetriBertModel"),c(eq,"href","/docs/transformers/pr_17510/en/model_doc/roberta#transformers.RobertaModel"),c(oq,"href","/docs/transformers/pr_17510/en/model_doc/roformer#transformers.RoFormerModel"),c(rq,"href","/docs/transformers/pr_17510/en/model_doc/segformer#transformers.SegformerModel"),c(tq,"href","/docs/transformers/pr_17510/en/model_doc/sew#transformers.SEWModel"),c(aq,"href","/docs/transformers/pr_17510/en/model_doc/sew-d#transformers.SEWDModel"),c(nq,"href","/docs/transformers/pr_17510/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(sq,"href","/docs/transformers/pr_17510/en/model_doc/splinter#transformers.SplinterModel"),c(lq,"href","/docs/transformers/pr_17510/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(iq,"href","/docs/transformers/pr_17510/en/model_doc/swin#transformers.SwinModel"),c(dq,"href","/docs/transformers/pr_17510/en/model_doc/t5#transformers.T5Model"),c(cq,"href","/docs/transformers/pr_17510/en/model_doc/tapas#transformers.TapasModel"),c(fq,"href","/docs/transformers/pr_17510/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(mq,"href","/docs/transformers/pr_17510/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(gq,"href","/docs/transformers/pr_17510/en/model_doc/unispeech#transformers.UniSpeechModel"),c(hq,"href","/docs/transformers/pr_17510/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(pq,"href","/docs/transformers/pr_17510/en/model_doc/van#transformers.VanModel"),c(_q,"href","/docs/transformers/pr_17510/en/model_doc/vilt#transformers.ViltModel"),c(uq,"href","/docs/transformers/pr_17510/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(bq,"href","/docs/transformers/pr_17510/en/model_doc/visual_bert#transformers.VisualBertModel"),c(vq,"href","/docs/transformers/pr_17510/en/model_doc/vit#transformers.ViTModel"),c(Fq,"href","/docs/transformers/pr_17510/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(Tq,"href","/docs/transformers/pr_17510/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(Mq,"href","/docs/transformers/pr_17510/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(Eq,"href","/docs/transformers/pr_17510/en/model_doc/wavlm#transformers.WavLMModel"),c(Cq,"href","/docs/transformers/pr_17510/en/model_doc/xglm#transformers.XGLMModel"),c(wq,"href","/docs/transformers/pr_17510/en/model_doc/xlm#transformers.XLMModel"),c(Aq,"href","/docs/transformers/pr_17510/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(yq,"href","/docs/transformers/pr_17510/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(Lq,"href","/docs/transformers/pr_17510/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(xq,"href","/docs/transformers/pr_17510/en/model_doc/xlnet#transformers.XLNetModel"),c($q,"href","/docs/transformers/pr_17510/en/model_doc/yolos#transformers.YolosModel"),c(kq,"href","/docs/transformers/pr_17510/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tu,"id","transformers.AutoModelForPreTraining"),c(tu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tu,"href","#transformers.AutoModelForPreTraining"),c(Li,"class","relative group"),c(Sq,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rq,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Pq,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bq,"href","/docs/transformers/pr_17510/en/model_doc/albert#transformers.AlbertForPreTraining"),c(Iq,"href","/docs/transformers/pr_17510/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Nq,"href","/docs/transformers/pr_17510/en/model_doc/bert#transformers.BertForPreTraining"),c(qq,"href","/docs/transformers/pr_17510/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(jq,"href","/docs/transformers/pr_17510/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(Dq,"href","/docs/transformers/pr_17510/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(Gq,"href","/docs/transformers/pr_17510/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(Oq,"href","/docs/transformers/pr_17510/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(Vq,"href","/docs/transformers/pr_17510/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(Xq,"href","/docs/transformers/pr_17510/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(zq,"href","/docs/transformers/pr_17510/en/model_doc/electra#transformers.ElectraForPreTraining"),c(Wq,"href","/docs/transformers/pr_17510/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(Qq,"href","/docs/transformers/pr_17510/en/model_doc/flava#transformers.FlavaForPreTraining"),c(Hq,"href","/docs/transformers/pr_17510/en/model_doc/fnet#transformers.FNetForPreTraining"),c(Uq,"href","/docs/transformers/pr_17510/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(Jq,"href","/docs/transformers/pr_17510/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(Yq,"href","/docs/transformers/pr_17510/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(Kq,"href","/docs/transformers/pr_17510/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(Zq,"href","/docs/transformers/pr_17510/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(ej,"href","/docs/transformers/pr_17510/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(oj,"href","/docs/transformers/pr_17510/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(rj,"href","/docs/transformers/pr_17510/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(tj,"href","/docs/transformers/pr_17510/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(aj,"href","/docs/transformers/pr_17510/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(nj,"href","/docs/transformers/pr_17510/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(sj,"href","/docs/transformers/pr_17510/en/model_doc/retribert#transformers.RetriBertModel"),c(lj,"href","/docs/transformers/pr_17510/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(ij,"href","/docs/transformers/pr_17510/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(dj,"href","/docs/transformers/pr_17510/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(cj,"href","/docs/transformers/pr_17510/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(fj,"href","/docs/transformers/pr_17510/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(mj,"href","/docs/transformers/pr_17510/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(gj,"href","/docs/transformers/pr_17510/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(hj,"href","/docs/transformers/pr_17510/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(pj,"href","/docs/transformers/pr_17510/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(_j,"href","/docs/transformers/pr_17510/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(uj,"href","/docs/transformers/pr_17510/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(bj,"href","/docs/transformers/pr_17510/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(vj,"href","/docs/transformers/pr_17510/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(Fj,"href","/docs/transformers/pr_17510/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(Tj,"href","/docs/transformers/pr_17510/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(Mj,"href","/docs/transformers/pr_17510/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uu,"id","transformers.AutoModelForCausalLM"),c(Uu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Uu,"href","#transformers.AutoModelForCausalLM"),c(ki,"class","relative group"),c(Ej,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Cj,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wj,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Aj,"href","/docs/transformers/pr_17510/en/model_doc/bart#transformers.BartForCausalLM"),c(yj,"href","/docs/transformers/pr_17510/en/model_doc/bert#transformers.BertLMHeadModel"),c(Lj,"href","/docs/transformers/pr_17510/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(xj,"href","/docs/transformers/pr_17510/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c($j,"href","/docs/transformers/pr_17510/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(kj,"href","/docs/transformers/pr_17510/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(Sj,"href","/docs/transformers/pr_17510/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(Rj,"href","/docs/transformers/pr_17510/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(Pj,"href","/docs/transformers/pr_17510/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(Bj,"href","/docs/transformers/pr_17510/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(Ij,"href","/docs/transformers/pr_17510/en/model_doc/electra#transformers.ElectraForCausalLM"),c(Nj,"href","/docs/transformers/pr_17510/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(qj,"href","/docs/transformers/pr_17510/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(jj,"href","/docs/transformers/pr_17510/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(Dj,"href","/docs/transformers/pr_17510/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(Gj,"href","/docs/transformers/pr_17510/en/model_doc/marian#transformers.MarianForCausalLM"),c(Oj,"href","/docs/transformers/pr_17510/en/model_doc/mbart#transformers.MBartForCausalLM"),c(Vj,"href","/docs/transformers/pr_17510/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(Xj,"href","/docs/transformers/pr_17510/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(zj,"href","/docs/transformers/pr_17510/en/model_doc/opt#transformers.OPTForCausalLM"),c(Wj,"href","/docs/transformers/pr_17510/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(Qj,"href","/docs/transformers/pr_17510/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(Hj,"href","/docs/transformers/pr_17510/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(Uj,"href","/docs/transformers/pr_17510/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(Jj,"href","/docs/transformers/pr_17510/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(Yj,"href","/docs/transformers/pr_17510/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(Kj,"href","/docs/transformers/pr_17510/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(Zj,"href","/docs/transformers/pr_17510/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(eD,"href","/docs/transformers/pr_17510/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(oD,"href","/docs/transformers/pr_17510/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(rD,"href","/docs/transformers/pr_17510/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(tD,"href","/docs/transformers/pr_17510/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(aD,"href","/docs/transformers/pr_17510/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(nD,"href","/docs/transformers/pr_17510/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(sD,"href","/docs/transformers/pr_17510/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(lD,"href","/docs/transformers/pr_17510/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(iD,"href","/docs/transformers/pr_17510/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(I1,"id","transformers.AutoModelForMaskedLM"),c(I1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(I1,"href","#transformers.AutoModelForMaskedLM"),c(Pi,"class","relative group"),c(dD,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cD,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fD,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mD,"href","/docs/transformers/pr_17510/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(gD,"href","/docs/transformers/pr_17510/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(hD,"href","/docs/transformers/pr_17510/en/model_doc/bert#transformers.BertForMaskedLM"),c(pD,"href","/docs/transformers/pr_17510/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(_D,"href","/docs/transformers/pr_17510/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(uD,"href","/docs/transformers/pr_17510/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(bD,"href","/docs/transformers/pr_17510/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(vD,"href","/docs/transformers/pr_17510/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(FD,"href","/docs/transformers/pr_17510/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(TD,"href","/docs/transformers/pr_17510/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(MD,"href","/docs/transformers/pr_17510/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(ED,"href","/docs/transformers/pr_17510/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(CD,"href","/docs/transformers/pr_17510/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(wD,"href","/docs/transformers/pr_17510/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(AD,"href","/docs/transformers/pr_17510/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(yD,"href","/docs/transformers/pr_17510/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(LD,"href","/docs/transformers/pr_17510/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(xD,"href","/docs/transformers/pr_17510/en/model_doc/luke#transformers.LukeForMaskedLM"),c($D,"href","/docs/transformers/pr_17510/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(kD,"href","/docs/transformers/pr_17510/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(SD,"href","/docs/transformers/pr_17510/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(RD,"href","/docs/transformers/pr_17510/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(PD,"href","/docs/transformers/pr_17510/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(BD,"href","/docs/transformers/pr_17510/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(ID,"href","/docs/transformers/pr_17510/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(ND,"href","/docs/transformers/pr_17510/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(qD,"href","/docs/transformers/pr_17510/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(jD,"href","/docs/transformers/pr_17510/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(DD,"href","/docs/transformers/pr_17510/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(GD,"href","/docs/transformers/pr_17510/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(OD,"href","/docs/transformers/pr_17510/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(VD,"href","/docs/transformers/pr_17510/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(XD,"href","/docs/transformers/pr_17510/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(zD,"href","/docs/transformers/pr_17510/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(WD,"href","/docs/transformers/pr_17510/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mb,"id","transformers.AutoModelForSeq2SeqLM"),c(Mb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Mb,"href","#transformers.AutoModelForSeq2SeqLM"),c(Ni,"class","relative group"),c(QD,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HD,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UD,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JD,"href","/docs/transformers/pr_17510/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(YD,"href","/docs/transformers/pr_17510/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(KD,"href","/docs/transformers/pr_17510/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(ZD,"href","/docs/transformers/pr_17510/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(eG,"href","/docs/transformers/pr_17510/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(oG,"href","/docs/transformers/pr_17510/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(rG,"href","/docs/transformers/pr_17510/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(tG,"href","/docs/transformers/pr_17510/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(aG,"href","/docs/transformers/pr_17510/en/model_doc/marian#transformers.MarianMTModel"),c(nG,"href","/docs/transformers/pr_17510/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(sG,"href","/docs/transformers/pr_17510/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(lG,"href","/docs/transformers/pr_17510/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(iG,"href","/docs/transformers/pr_17510/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(dG,"href","/docs/transformers/pr_17510/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(cG,"href","/docs/transformers/pr_17510/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(fG,"href","/docs/transformers/pr_17510/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ob,"id","transformers.AutoModelForSequenceClassification"),c(Ob,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ob,"href","#transformers.AutoModelForSequenceClassification"),c(Di,"class","relative group"),c(mG,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gG,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hG,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pG,"href","/docs/transformers/pr_17510/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(_G,"href","/docs/transformers/pr_17510/en/model_doc/bart#transformers.BartForSequenceClassification"),c(uG,"href","/docs/transformers/pr_17510/en/model_doc/bert#transformers.BertForSequenceClassification"),c(bG,"href","/docs/transformers/pr_17510/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(vG,"href","/docs/transformers/pr_17510/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(FG,"href","/docs/transformers/pr_17510/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(TG,"href","/docs/transformers/pr_17510/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(MG,"href","/docs/transformers/pr_17510/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(EG,"href","/docs/transformers/pr_17510/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(CG,"href","/docs/transformers/pr_17510/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(wG,"href","/docs/transformers/pr_17510/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(AG,"href","/docs/transformers/pr_17510/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(yG,"href","/docs/transformers/pr_17510/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(LG,"href","/docs/transformers/pr_17510/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(xG,"href","/docs/transformers/pr_17510/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c($G,"href","/docs/transformers/pr_17510/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(kG,"href","/docs/transformers/pr_17510/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(SG,"href","/docs/transformers/pr_17510/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(RG,"href","/docs/transformers/pr_17510/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(PG,"href","/docs/transformers/pr_17510/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(BG,"href","/docs/transformers/pr_17510/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(IG,"href","/docs/transformers/pr_17510/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(NG,"href","/docs/transformers/pr_17510/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(qG,"href","/docs/transformers/pr_17510/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(jG,"href","/docs/transformers/pr_17510/en/model_doc/led#transformers.LEDForSequenceClassification"),c(DG,"href","/docs/transformers/pr_17510/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(GG,"href","/docs/transformers/pr_17510/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(OG,"href","/docs/transformers/pr_17510/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(VG,"href","/docs/transformers/pr_17510/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(XG,"href","/docs/transformers/pr_17510/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(zG,"href","/docs/transformers/pr_17510/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(WG,"href","/docs/transformers/pr_17510/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(QG,"href","/docs/transformers/pr_17510/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(HG,"href","/docs/transformers/pr_17510/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(UG,"href","/docs/transformers/pr_17510/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(JG,"href","/docs/transformers/pr_17510/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(YG,"href","/docs/transformers/pr_17510/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(KG,"href","/docs/transformers/pr_17510/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(ZG,"href","/docs/transformers/pr_17510/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(eO,"href","/docs/transformers/pr_17510/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(oO,"href","/docs/transformers/pr_17510/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(rO,"href","/docs/transformers/pr_17510/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(tO,"href","/docs/transformers/pr_17510/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(aO,"href","/docs/transformers/pr_17510/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(nO,"href","/docs/transformers/pr_17510/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(sO,"href","/docs/transformers/pr_17510/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(lO,"href","/docs/transformers/pr_17510/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(j2,"id","transformers.AutoModelForMultipleChoice"),c(j2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(j2,"href","#transformers.AutoModelForMultipleChoice"),c(Vi,"class","relative group"),c(iO,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dO,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cO,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fO,"href","/docs/transformers/pr_17510/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(mO,"href","/docs/transformers/pr_17510/en/model_doc/bert#transformers.BertForMultipleChoice"),c(gO,"href","/docs/transformers/pr_17510/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(hO,"href","/docs/transformers/pr_17510/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(pO,"href","/docs/transformers/pr_17510/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(_O,"href","/docs/transformers/pr_17510/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(uO,"href","/docs/transformers/pr_17510/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(bO,"href","/docs/transformers/pr_17510/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(vO,"href","/docs/transformers/pr_17510/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(FO,"href","/docs/transformers/pr_17510/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(TO,"href","/docs/transformers/pr_17510/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(MO,"href","/docs/transformers/pr_17510/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(EO,"href","/docs/transformers/pr_17510/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(CO,"href","/docs/transformers/pr_17510/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(wO,"href","/docs/transformers/pr_17510/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(AO,"href","/docs/transformers/pr_17510/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(yO,"href","/docs/transformers/pr_17510/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(LO,"href","/docs/transformers/pr_17510/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(xO,"href","/docs/transformers/pr_17510/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c($O,"href","/docs/transformers/pr_17510/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(kO,"href","/docs/transformers/pr_17510/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(SO,"href","/docs/transformers/pr_17510/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(RO,"href","/docs/transformers/pr_17510/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(PO,"href","/docs/transformers/pr_17510/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(BO,"href","/docs/transformers/pr_17510/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(IO,"href","/docs/transformers/pr_17510/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(NO,"href","/docs/transformers/pr_17510/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(qO,"href","/docs/transformers/pr_17510/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(jO,"href","/docs/transformers/pr_17510/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(b5,"id","transformers.AutoModelForNextSentencePrediction"),c(b5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b5,"href","#transformers.AutoModelForNextSentencePrediction"),c(Wi,"class","relative group"),c(DO,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GO,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OO,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VO,"href","/docs/transformers/pr_17510/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(XO,"href","/docs/transformers/pr_17510/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(zO,"href","/docs/transformers/pr_17510/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(WO,"href","/docs/transformers/pr_17510/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(QO,"href","/docs/transformers/pr_17510/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(y5,"id","transformers.AutoModelForTokenClassification"),c(y5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(y5,"href","#transformers.AutoModelForTokenClassification"),c(Ui,"class","relative group"),c(HO,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UO,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JO,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YO,"href","/docs/transformers/pr_17510/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(KO,"href","/docs/transformers/pr_17510/en/model_doc/bert#transformers.BertForTokenClassification"),c(ZO,"href","/docs/transformers/pr_17510/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(eV,"href","/docs/transformers/pr_17510/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(oV,"href","/docs/transformers/pr_17510/en/model_doc/canine#transformers.CanineForTokenClassification"),c(rV,"href","/docs/transformers/pr_17510/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(tV,"href","/docs/transformers/pr_17510/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(aV,"href","/docs/transformers/pr_17510/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(nV,"href","/docs/transformers/pr_17510/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(sV,"href","/docs/transformers/pr_17510/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(lV,"href","/docs/transformers/pr_17510/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(iV,"href","/docs/transformers/pr_17510/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(dV,"href","/docs/transformers/pr_17510/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(cV,"href","/docs/transformers/pr_17510/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(fV,"href","/docs/transformers/pr_17510/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(mV,"href","/docs/transformers/pr_17510/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(gV,"href","/docs/transformers/pr_17510/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(hV,"href","/docs/transformers/pr_17510/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(pV,"href","/docs/transformers/pr_17510/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(_V,"href","/docs/transformers/pr_17510/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(uV,"href","/docs/transformers/pr_17510/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(bV,"href","/docs/transformers/pr_17510/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(vV,"href","/docs/transformers/pr_17510/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(FV,"href","/docs/transformers/pr_17510/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(TV,"href","/docs/transformers/pr_17510/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(MV,"href","/docs/transformers/pr_17510/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(EV,"href","/docs/transformers/pr_17510/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(CV,"href","/docs/transformers/pr_17510/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(wV,"href","/docs/transformers/pr_17510/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(AV,"href","/docs/transformers/pr_17510/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(yV,"href","/docs/transformers/pr_17510/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(LV,"href","/docs/transformers/pr_17510/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(xV,"href","/docs/transformers/pr_17510/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c($V,"href","/docs/transformers/pr_17510/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fv,"id","transformers.AutoModelForQuestionAnswering"),c(fv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fv,"href","#transformers.AutoModelForQuestionAnswering"),c(Ki,"class","relative group"),c(kV,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SV,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RV,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PV,"href","/docs/transformers/pr_17510/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(BV,"href","/docs/transformers/pr_17510/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(IV,"href","/docs/transformers/pr_17510/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(NV,"href","/docs/transformers/pr_17510/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(qV,"href","/docs/transformers/pr_17510/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(jV,"href","/docs/transformers/pr_17510/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(DV,"href","/docs/transformers/pr_17510/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(GV,"href","/docs/transformers/pr_17510/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(OV,"href","/docs/transformers/pr_17510/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(VV,"href","/docs/transformers/pr_17510/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(XV,"href","/docs/transformers/pr_17510/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(zV,"href","/docs/transformers/pr_17510/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(WV,"href","/docs/transformers/pr_17510/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(QV,"href","/docs/transformers/pr_17510/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(HV,"href","/docs/transformers/pr_17510/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(UV,"href","/docs/transformers/pr_17510/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(JV,"href","/docs/transformers/pr_17510/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(YV,"href","/docs/transformers/pr_17510/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(KV,"href","/docs/transformers/pr_17510/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(ZV,"href","/docs/transformers/pr_17510/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(eX,"href","/docs/transformers/pr_17510/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(oX,"href","/docs/transformers/pr_17510/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(rX,"href","/docs/transformers/pr_17510/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(tX,"href","/docs/transformers/pr_17510/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(aX,"href","/docs/transformers/pr_17510/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(nX,"href","/docs/transformers/pr_17510/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(sX,"href","/docs/transformers/pr_17510/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(lX,"href","/docs/transformers/pr_17510/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(iX,"href","/docs/transformers/pr_17510/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(dX,"href","/docs/transformers/pr_17510/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(cX,"href","/docs/transformers/pr_17510/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(fX,"href","/docs/transformers/pr_17510/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(mX,"href","/docs/transformers/pr_17510/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(gX,"href","/docs/transformers/pr_17510/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(hX,"href","/docs/transformers/pr_17510/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(pX,"href","/docs/transformers/pr_17510/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(_X,"href","/docs/transformers/pr_17510/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(uX,"href","/docs/transformers/pr_17510/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(bX,"href","/docs/transformers/pr_17510/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(vX,"href","/docs/transformers/pr_17510/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oF,"id","transformers.AutoModelForTableQuestionAnswering"),c(oF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oF,"href","#transformers.AutoModelForTableQuestionAnswering"),c(od,"class","relative group"),c(FX,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TX,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MX,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EX,"href","/docs/transformers/pr_17510/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sF,"id","transformers.AutoModelForImageClassification"),c(sF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sF,"href","#transformers.AutoModelForImageClassification"),c(ad,"class","relative group"),c(CX,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wX,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AX,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yX,"href","/docs/transformers/pr_17510/en/model_doc/beit#transformers.BeitForImageClassification"),c(LX,"href","/docs/transformers/pr_17510/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(xX,"href","/docs/transformers/pr_17510/en/model_doc/cvt#transformers.CvtForImageClassification"),c($X,"href","/docs/transformers/pr_17510/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(kX,"href","/docs/transformers/pr_17510/en/model_doc/deit#transformers.DeiTForImageClassification"),c(SX,"href","/docs/transformers/pr_17510/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(RX,"href","/docs/transformers/pr_17510/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(PX,"href","/docs/transformers/pr_17510/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(BX,"href","/docs/transformers/pr_17510/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(IX,"href","/docs/transformers/pr_17510/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(NX,"href","/docs/transformers/pr_17510/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(qX,"href","/docs/transformers/pr_17510/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(jX,"href","/docs/transformers/pr_17510/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(DX,"href","/docs/transformers/pr_17510/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(GX,"href","/docs/transformers/pr_17510/en/model_doc/swin#transformers.SwinForImageClassification"),c(OX,"href","/docs/transformers/pr_17510/en/model_doc/van#transformers.VanForImageClassification"),c(VX,"href","/docs/transformers/pr_17510/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MF,"id","transformers.AutoModelForVision2Seq"),c(MF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(MF,"href","#transformers.AutoModelForVision2Seq"),c(ld,"class","relative group"),c(XX,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zX,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WX,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QX,"href","/docs/transformers/pr_17510/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yF,"id","transformers.AutoModelForAudioClassification"),c(yF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yF,"href","#transformers.AutoModelForAudioClassification"),c(cd,"class","relative group"),c(HX,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UX,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JX,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YX,"href","/docs/transformers/pr_17510/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(KX,"href","/docs/transformers/pr_17510/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(ZX,"href","/docs/transformers/pr_17510/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(ez,"href","/docs/transformers/pr_17510/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(oz,"href","/docs/transformers/pr_17510/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(rz,"href","/docs/transformers/pr_17510/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(tz,"href","/docs/transformers/pr_17510/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(az,"href","/docs/transformers/pr_17510/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(nz,"href","/docs/transformers/pr_17510/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DF,"id","transformers.AutoModelForAudioFrameClassification"),c(DF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(DF,"href","#transformers.AutoModelForAudioFrameClassification"),c(gd,"class","relative group"),c(sz,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lz,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iz,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dz,"href","/docs/transformers/pr_17510/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(cz,"href","/docs/transformers/pr_17510/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(fz,"href","/docs/transformers/pr_17510/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(mz,"href","/docs/transformers/pr_17510/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(gz,"href","/docs/transformers/pr_17510/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UF,"id","transformers.AutoModelForCTC"),c(UF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UF,"href","#transformers.AutoModelForCTC"),c(_d,"class","relative group"),c(hz,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pz,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_z,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uz,"href","/docs/transformers/pr_17510/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(bz,"href","/docs/transformers/pr_17510/en/model_doc/hubert#transformers.HubertForCTC"),c(vz,"href","/docs/transformers/pr_17510/en/model_doc/sew#transformers.SEWForCTC"),c(Fz,"href","/docs/transformers/pr_17510/en/model_doc/sew-d#transformers.SEWDForCTC"),c(Tz,"href","/docs/transformers/pr_17510/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(Mz,"href","/docs/transformers/pr_17510/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(Ez,"href","/docs/transformers/pr_17510/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(Cz,"href","/docs/transformers/pr_17510/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(wz,"href","/docs/transformers/pr_17510/en/model_doc/wavlm#transformers.WavLMForCTC"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(i0,"id","transformers.AutoModelForSpeechSeq2Seq"),c(i0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(i0,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(vd,"class","relative group"),c(Az,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yz,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Lz,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xz,"href","/docs/transformers/pr_17510/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c($z,"href","/docs/transformers/pr_17510/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(h0,"id","transformers.AutoModelForAudioXVector"),c(h0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(h0,"href","#transformers.AutoModelForAudioXVector"),c(Md,"class","relative group"),c(kz,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Sz,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Rz,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pz,"href","/docs/transformers/pr_17510/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(Bz,"href","/docs/transformers/pr_17510/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(Iz,"href","/docs/transformers/pr_17510/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(Nz,"href","/docs/transformers/pr_17510/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(qz,"href","/docs/transformers/pr_17510/en/model_doc/wavlm#transformers.WavLMForXVector"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(E0,"id","transformers.AutoModelForMaskedImageModeling"),c(E0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(E0,"href","#transformers.AutoModelForMaskedImageModeling"),c(wd,"class","relative group"),c(jz,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dz,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Gz,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oz,"href","/docs/transformers/pr_17510/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(Vz,"href","/docs/transformers/pr_17510/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(Xz,"href","/docs/transformers/pr_17510/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($0,"id","transformers.AutoModelForObjectDetection"),c($0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($0,"href","#transformers.AutoModelForObjectDetection"),c(xd,"class","relative group"),c(zz,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wz,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Qz,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Hz,"href","/docs/transformers/pr_17510/en/model_doc/detr#transformers.DetrForObjectDetection"),c(Uz,"href","/docs/transformers/pr_17510/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(I0,"id","transformers.AutoModelForImageSegmentation"),c(I0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(I0,"href","#transformers.AutoModelForImageSegmentation"),c(Sd,"class","relative group"),c(Jz,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yz,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Kz,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zz,"href","/docs/transformers/pr_17510/en/model_doc/detr#transformers.DetrForSegmentation"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G0,"id","transformers.AutoModelForSemanticSegmentation"),c(G0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G0,"href","#transformers.AutoModelForSemanticSegmentation"),c(Bd,"class","relative group"),c(eW,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oW,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rW,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tW,"href","/docs/transformers/pr_17510/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(aW,"href","/docs/transformers/pr_17510/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(nW,"href","/docs/transformers/pr_17510/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(sW,"href","/docs/transformers/pr_17510/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U0,"id","transformers.AutoModelForInstanceSegmentation"),c(U0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U0,"href","#transformers.AutoModelForInstanceSegmentation"),c(qd,"class","relative group"),c(lW,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iW,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dW,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cW,"href","/docs/transformers/pr_17510/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eT,"id","transformers.TFAutoModel"),c(eT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eT,"href","#transformers.TFAutoModel"),c(Gd,"class","relative group"),c(fW,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mW,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gW,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hW,"href","/docs/transformers/pr_17510/en/model_doc/albert#transformers.TFAlbertModel"),c(pW,"href","/docs/transformers/pr_17510/en/model_doc/bart#transformers.TFBartModel"),c(_W,"href","/docs/transformers/pr_17510/en/model_doc/bert#transformers.TFBertModel"),c(uW,"href","/docs/transformers/pr_17510/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(bW,"href","/docs/transformers/pr_17510/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(vW,"href","/docs/transformers/pr_17510/en/model_doc/camembert#transformers.TFCamembertModel"),c(FW,"href","/docs/transformers/pr_17510/en/model_doc/clip#transformers.TFCLIPModel"),c(TW,"href","/docs/transformers/pr_17510/en/model_doc/convbert#transformers.TFConvBertModel"),c(MW,"href","/docs/transformers/pr_17510/en/model_doc/convnext#transformers.TFConvNextModel"),c(EW,"href","/docs/transformers/pr_17510/en/model_doc/ctrl#transformers.TFCTRLModel"),c(CW,"href","/docs/transformers/pr_17510/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(wW,"href","/docs/transformers/pr_17510/en/model_doc/deberta#transformers.TFDebertaModel"),c(AW,"href","/docs/transformers/pr_17510/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(yW,"href","/docs/transformers/pr_17510/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(LW,"href","/docs/transformers/pr_17510/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(xW,"href","/docs/transformers/pr_17510/en/model_doc/electra#transformers.TFElectraModel"),c($W,"href","/docs/transformers/pr_17510/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(kW,"href","/docs/transformers/pr_17510/en/model_doc/funnel#transformers.TFFunnelModel"),c(SW,"href","/docs/transformers/pr_17510/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(RW,"href","/docs/transformers/pr_17510/en/model_doc/gpt2#transformers.TFGPT2Model"),c(PW,"href","/docs/transformers/pr_17510/en/model_doc/gptj#transformers.TFGPTJModel"),c(BW,"href","/docs/transformers/pr_17510/en/model_doc/hubert#transformers.TFHubertModel"),c(IW,"href","/docs/transformers/pr_17510/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(NW,"href","/docs/transformers/pr_17510/en/model_doc/led#transformers.TFLEDModel"),c(qW,"href","/docs/transformers/pr_17510/en/model_doc/longformer#transformers.TFLongformerModel"),c(jW,"href","/docs/transformers/pr_17510/en/model_doc/lxmert#transformers.TFLxmertModel"),c(DW,"href","/docs/transformers/pr_17510/en/model_doc/marian#transformers.TFMarianModel"),c(GW,"href","/docs/transformers/pr_17510/en/model_doc/mbart#transformers.TFMBartModel"),c(OW,"href","/docs/transformers/pr_17510/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(VW,"href","/docs/transformers/pr_17510/en/model_doc/mpnet#transformers.TFMPNetModel"),c(XW,"href","/docs/transformers/pr_17510/en/model_doc/mt5#transformers.TFMT5Model"),c(zW,"href","/docs/transformers/pr_17510/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(WW,"href","/docs/transformers/pr_17510/en/model_doc/opt#transformers.TFOPTModel"),c(QW,"href","/docs/transformers/pr_17510/en/model_doc/pegasus#transformers.TFPegasusModel"),c(HW,"href","/docs/transformers/pr_17510/en/model_doc/rembert#transformers.TFRemBertModel"),c(UW,"href","/docs/transformers/pr_17510/en/model_doc/roberta#transformers.TFRobertaModel"),c(JW,"href","/docs/transformers/pr_17510/en/model_doc/roformer#transformers.TFRoFormerModel"),c(YW,"href","/docs/transformers/pr_17510/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(KW,"href","/docs/transformers/pr_17510/en/model_doc/swin#transformers.TFSwinModel"),c(ZW,"href","/docs/transformers/pr_17510/en/model_doc/t5#transformers.TFT5Model"),c(eQ,"href","/docs/transformers/pr_17510/en/model_doc/tapas#transformers.TFTapasModel"),c(oQ,"href","/docs/transformers/pr_17510/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(rQ,"href","/docs/transformers/pr_17510/en/model_doc/vit#transformers.TFViTModel"),c(tQ,"href","/docs/transformers/pr_17510/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(aQ,"href","/docs/transformers/pr_17510/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(nQ,"href","/docs/transformers/pr_17510/en/model_doc/xlm#transformers.TFXLMModel"),c(sQ,"href","/docs/transformers/pr_17510/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(lQ,"href","/docs/transformers/pr_17510/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UT,"id","transformers.TFAutoModelForPreTraining"),c(UT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UT,"href","#transformers.TFAutoModelForPreTraining"),c(Xd,"class","relative group"),c(iQ,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dQ,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cQ,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fQ,"href","/docs/transformers/pr_17510/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(mQ,"href","/docs/transformers/pr_17510/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(gQ,"href","/docs/transformers/pr_17510/en/model_doc/bert#transformers.TFBertForPreTraining"),c(hQ,"href","/docs/transformers/pr_17510/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(pQ,"href","/docs/transformers/pr_17510/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(_Q,"href","/docs/transformers/pr_17510/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(uQ,"href","/docs/transformers/pr_17510/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(bQ,"href","/docs/transformers/pr_17510/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(vQ,"href","/docs/transformers/pr_17510/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(FQ,"href","/docs/transformers/pr_17510/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(TQ,"href","/docs/transformers/pr_17510/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(MQ,"href","/docs/transformers/pr_17510/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(EQ,"href","/docs/transformers/pr_17510/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(CQ,"href","/docs/transformers/pr_17510/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(wQ,"href","/docs/transformers/pr_17510/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(AQ,"href","/docs/transformers/pr_17510/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(yQ,"href","/docs/transformers/pr_17510/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(LQ,"href","/docs/transformers/pr_17510/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(xQ,"href","/docs/transformers/pr_17510/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c($Q,"href","/docs/transformers/pr_17510/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(kQ,"href","/docs/transformers/pr_17510/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(SQ,"href","/docs/transformers/pr_17510/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(RQ,"href","/docs/transformers/pr_17510/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T7,"id","transformers.TFAutoModelForCausalLM"),c(T7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T7,"href","#transformers.TFAutoModelForCausalLM"),c(Qd,"class","relative group"),c(PQ,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BQ,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IQ,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NQ,"href","/docs/transformers/pr_17510/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(qQ,"href","/docs/transformers/pr_17510/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(jQ,"href","/docs/transformers/pr_17510/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(DQ,"href","/docs/transformers/pr_17510/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(GQ,"href","/docs/transformers/pr_17510/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(OQ,"href","/docs/transformers/pr_17510/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(VQ,"href","/docs/transformers/pr_17510/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(XQ,"href","/docs/transformers/pr_17510/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(zQ,"href","/docs/transformers/pr_17510/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(WQ,"href","/docs/transformers/pr_17510/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(QQ,"href","/docs/transformers/pr_17510/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(HQ,"href","/docs/transformers/pr_17510/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(UQ,"href","/docs/transformers/pr_17510/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(N7,"id","transformers.TFAutoModelForImageClassification"),c(N7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(N7,"href","#transformers.TFAutoModelForImageClassification"),c(Jd,"class","relative group"),c(JQ,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YQ,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KQ,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZQ,"href","/docs/transformers/pr_17510/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(eH,"href","/docs/transformers/pr_17510/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(oH,"href","/docs/transformers/pr_17510/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(rH,"href","/docs/transformers/pr_17510/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(X7,"id","transformers.TFAutoModelForMaskedLM"),c(X7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X7,"href","#transformers.TFAutoModelForMaskedLM"),c(Zd,"class","relative group"),c(tH,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aH,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nH,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sH,"href","/docs/transformers/pr_17510/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(lH,"href","/docs/transformers/pr_17510/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(iH,"href","/docs/transformers/pr_17510/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(dH,"href","/docs/transformers/pr_17510/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(cH,"href","/docs/transformers/pr_17510/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(fH,"href","/docs/transformers/pr_17510/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(mH,"href","/docs/transformers/pr_17510/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(gH,"href","/docs/transformers/pr_17510/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(hH,"href","/docs/transformers/pr_17510/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(pH,"href","/docs/transformers/pr_17510/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(_H,"href","/docs/transformers/pr_17510/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(uH,"href","/docs/transformers/pr_17510/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(bH,"href","/docs/transformers/pr_17510/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(vH,"href","/docs/transformers/pr_17510/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(FH,"href","/docs/transformers/pr_17510/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(TH,"href","/docs/transformers/pr_17510/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(MH,"href","/docs/transformers/pr_17510/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(EH,"href","/docs/transformers/pr_17510/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(CH,"href","/docs/transformers/pr_17510/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(wH,"href","/docs/transformers/pr_17510/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gM,"id","transformers.TFAutoModelForSeq2SeqLM"),c(gM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gM,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(rc,"class","relative group"),c(AH,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yH,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LH,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xH,"href","/docs/transformers/pr_17510/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c($H,"href","/docs/transformers/pr_17510/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(kH,"href","/docs/transformers/pr_17510/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(SH,"href","/docs/transformers/pr_17510/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(RH,"href","/docs/transformers/pr_17510/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(PH,"href","/docs/transformers/pr_17510/en/model_doc/marian#transformers.TFMarianMTModel"),c(BH,"href","/docs/transformers/pr_17510/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(IH,"href","/docs/transformers/pr_17510/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(NH,"href","/docs/transformers/pr_17510/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(qH,"href","/docs/transformers/pr_17510/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AM,"id","transformers.TFAutoModelForSequenceClassification"),c(AM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(AM,"href","#transformers.TFAutoModelForSequenceClassification"),c(nc,"class","relative group"),c(jH,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DH,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GH,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OH,"href","/docs/transformers/pr_17510/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(VH,"href","/docs/transformers/pr_17510/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(XH,"href","/docs/transformers/pr_17510/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(zH,"href","/docs/transformers/pr_17510/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(WH,"href","/docs/transformers/pr_17510/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(QH,"href","/docs/transformers/pr_17510/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(HH,"href","/docs/transformers/pr_17510/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(UH,"href","/docs/transformers/pr_17510/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(JH,"href","/docs/transformers/pr_17510/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(YH,"href","/docs/transformers/pr_17510/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(KH,"href","/docs/transformers/pr_17510/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(ZH,"href","/docs/transformers/pr_17510/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(eU,"href","/docs/transformers/pr_17510/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(oU,"href","/docs/transformers/pr_17510/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(rU,"href","/docs/transformers/pr_17510/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(tU,"href","/docs/transformers/pr_17510/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(aU,"href","/docs/transformers/pr_17510/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(nU,"href","/docs/transformers/pr_17510/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(sU,"href","/docs/transformers/pr_17510/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(lU,"href","/docs/transformers/pr_17510/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(iU,"href","/docs/transformers/pr_17510/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(dU,"href","/docs/transformers/pr_17510/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(cU,"href","/docs/transformers/pr_17510/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(fU,"href","/docs/transformers/pr_17510/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(mU,"href","/docs/transformers/pr_17510/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(gU,"href","/docs/transformers/pr_17510/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(o4,"id","transformers.TFAutoModelForMultipleChoice"),c(o4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o4,"href","#transformers.TFAutoModelForMultipleChoice"),c(ic,"class","relative group"),c(hU,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pU,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_U,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uU,"href","/docs/transformers/pr_17510/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(bU,"href","/docs/transformers/pr_17510/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(vU,"href","/docs/transformers/pr_17510/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(FU,"href","/docs/transformers/pr_17510/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(TU,"href","/docs/transformers/pr_17510/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(MU,"href","/docs/transformers/pr_17510/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(EU,"href","/docs/transformers/pr_17510/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(CU,"href","/docs/transformers/pr_17510/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(wU,"href","/docs/transformers/pr_17510/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(AU,"href","/docs/transformers/pr_17510/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(yU,"href","/docs/transformers/pr_17510/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(LU,"href","/docs/transformers/pr_17510/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(xU,"href","/docs/transformers/pr_17510/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c($U,"href","/docs/transformers/pr_17510/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(kU,"href","/docs/transformers/pr_17510/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(SU,"href","/docs/transformers/pr_17510/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(RU,"href","/docs/transformers/pr_17510/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T4,"id","transformers.TFAutoModelForNextSentencePrediction"),c(T4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T4,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(fc,"class","relative group"),c(PU,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BU,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IU,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NU,"href","/docs/transformers/pr_17510/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(qU,"href","/docs/transformers/pr_17510/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A4,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(A4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A4,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(hc,"class","relative group"),c(jU,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DU,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GU,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OU,"href","/docs/transformers/pr_17510/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($4,"id","transformers.TFAutoModelForTokenClassification"),c($4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($4,"href","#transformers.TFAutoModelForTokenClassification"),c(uc,"class","relative group"),c(VU,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XU,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zU,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WU,"href","/docs/transformers/pr_17510/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(QU,"href","/docs/transformers/pr_17510/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(HU,"href","/docs/transformers/pr_17510/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(UU,"href","/docs/transformers/pr_17510/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(JU,"href","/docs/transformers/pr_17510/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(YU,"href","/docs/transformers/pr_17510/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(KU,"href","/docs/transformers/pr_17510/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(ZU,"href","/docs/transformers/pr_17510/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(eJ,"href","/docs/transformers/pr_17510/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(oJ,"href","/docs/transformers/pr_17510/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(rJ,"href","/docs/transformers/pr_17510/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(tJ,"href","/docs/transformers/pr_17510/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(aJ,"href","/docs/transformers/pr_17510/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(nJ,"href","/docs/transformers/pr_17510/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(sJ,"href","/docs/transformers/pr_17510/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(lJ,"href","/docs/transformers/pr_17510/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(iJ,"href","/docs/transformers/pr_17510/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(dJ,"href","/docs/transformers/pr_17510/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(cJ,"href","/docs/transformers/pr_17510/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(fJ,"href","/docs/transformers/pr_17510/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Z4,"id","transformers.TFAutoModelForQuestionAnswering"),c(Z4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Z4,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Fc,"class","relative group"),c(mJ,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gJ,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hJ,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pJ,"href","/docs/transformers/pr_17510/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(_J,"href","/docs/transformers/pr_17510/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(uJ,"href","/docs/transformers/pr_17510/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(bJ,"href","/docs/transformers/pr_17510/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(vJ,"href","/docs/transformers/pr_17510/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(FJ,"href","/docs/transformers/pr_17510/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(TJ,"href","/docs/transformers/pr_17510/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(MJ,"href","/docs/transformers/pr_17510/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(EJ,"href","/docs/transformers/pr_17510/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(CJ,"href","/docs/transformers/pr_17510/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(wJ,"href","/docs/transformers/pr_17510/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(AJ,"href","/docs/transformers/pr_17510/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(yJ,"href","/docs/transformers/pr_17510/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(LJ,"href","/docs/transformers/pr_17510/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(xJ,"href","/docs/transformers/pr_17510/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c($J,"href","/docs/transformers/pr_17510/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(kJ,"href","/docs/transformers/pr_17510/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(SJ,"href","/docs/transformers/pr_17510/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(RJ,"href","/docs/transformers/pr_17510/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(PJ,"href","/docs/transformers/pr_17510/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ME,"id","transformers.TFAutoModelForVision2Seq"),c(ME,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ME,"href","#transformers.TFAutoModelForVision2Seq"),c(Ec,"class","relative group"),c(BJ,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IJ,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NJ,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qJ,"href","/docs/transformers/pr_17510/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AE,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(AE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(AE,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Ac,"class","relative group"),c(jJ,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DJ,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GJ,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OJ,"href","/docs/transformers/pr_17510/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($E,"id","transformers.FlaxAutoModel"),c($E,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($E,"href","#transformers.FlaxAutoModel"),c(xc,"class","relative group"),c(VJ,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XJ,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zJ,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WJ,"href","/docs/transformers/pr_17510/en/model_doc/albert#transformers.FlaxAlbertModel"),c(QJ,"href","/docs/transformers/pr_17510/en/model_doc/bart#transformers.FlaxBartModel"),c(HJ,"href","/docs/transformers/pr_17510/en/model_doc/beit#transformers.FlaxBeitModel"),c(UJ,"href","/docs/transformers/pr_17510/en/model_doc/bert#transformers.FlaxBertModel"),c(JJ,"href","/docs/transformers/pr_17510/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(YJ,"href","/docs/transformers/pr_17510/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(KJ,"href","/docs/transformers/pr_17510/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(ZJ,"href","/docs/transformers/pr_17510/en/model_doc/clip#transformers.FlaxCLIPModel"),c(eY,"href","/docs/transformers/pr_17510/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(oY,"href","/docs/transformers/pr_17510/en/model_doc/electra#transformers.FlaxElectraModel"),c(rY,"href","/docs/transformers/pr_17510/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(tY,"href","/docs/transformers/pr_17510/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(aY,"href","/docs/transformers/pr_17510/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(nY,"href","/docs/transformers/pr_17510/en/model_doc/marian#transformers.FlaxMarianModel"),c(sY,"href","/docs/transformers/pr_17510/en/model_doc/mbart#transformers.FlaxMBartModel"),c(lY,"href","/docs/transformers/pr_17510/en/model_doc/mt5#transformers.FlaxMT5Model"),c(iY,"href","/docs/transformers/pr_17510/en/model_doc/opt#transformers.FlaxOPTModel"),c(dY,"href","/docs/transformers/pr_17510/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(cY,"href","/docs/transformers/pr_17510/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(fY,"href","/docs/transformers/pr_17510/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(mY,"href","/docs/transformers/pr_17510/en/model_doc/t5#transformers.FlaxT5Model"),c(gY,"href","/docs/transformers/pr_17510/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(hY,"href","/docs/transformers/pr_17510/en/model_doc/vit#transformers.FlaxViTModel"),c(pY,"href","/docs/transformers/pr_17510/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(_Y,"href","/docs/transformers/pr_17510/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(uY,"href","/docs/transformers/pr_17510/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nC,"id","transformers.FlaxAutoModelForCausalLM"),c(nC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nC,"href","#transformers.FlaxAutoModelForCausalLM"),c(Sc,"class","relative group"),c(bY,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vY,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FY,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TY,"href","/docs/transformers/pr_17510/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(MY,"href","/docs/transformers/pr_17510/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(EY,"href","/docs/transformers/pr_17510/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(CY,"href","/docs/transformers/pr_17510/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(wY,"href","/docs/transformers/pr_17510/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(AY,"href","/docs/transformers/pr_17510/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(yY,"href","/docs/transformers/pr_17510/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(LY,"href","/docs/transformers/pr_17510/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(xY,"href","/docs/transformers/pr_17510/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c($Y,"href","/docs/transformers/pr_17510/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bC,"id","transformers.FlaxAutoModelForPreTraining"),c(bC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bC,"href","#transformers.FlaxAutoModelForPreTraining"),c(Bc,"class","relative group"),c(kY,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SY,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RY,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PY,"href","/docs/transformers/pr_17510/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(BY,"href","/docs/transformers/pr_17510/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(IY,"href","/docs/transformers/pr_17510/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(NY,"href","/docs/transformers/pr_17510/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(qY,"href","/docs/transformers/pr_17510/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(jY,"href","/docs/transformers/pr_17510/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(DY,"href","/docs/transformers/pr_17510/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(GY,"href","/docs/transformers/pr_17510/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(OY,"href","/docs/transformers/pr_17510/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(VY,"href","/docs/transformers/pr_17510/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(XY,"href","/docs/transformers/pr_17510/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(zY,"href","/docs/transformers/pr_17510/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RC,"id","transformers.FlaxAutoModelForMaskedLM"),c(RC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(RC,"href","#transformers.FlaxAutoModelForMaskedLM"),c(qc,"class","relative group"),c(WY,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QY,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HY,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UY,"href","/docs/transformers/pr_17510/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(JY,"href","/docs/transformers/pr_17510/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(YY,"href","/docs/transformers/pr_17510/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(KY,"href","/docs/transformers/pr_17510/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(ZY,"href","/docs/transformers/pr_17510/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(eK,"href","/docs/transformers/pr_17510/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(oK,"href","/docs/transformers/pr_17510/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(rK,"href","/docs/transformers/pr_17510/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(tK,"href","/docs/transformers/pr_17510/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(aK,"href","/docs/transformers/pr_17510/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WC,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(WC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(WC,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Gc,"class","relative group"),c(nK,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sK,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lK,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iK,"href","/docs/transformers/pr_17510/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(dK,"href","/docs/transformers/pr_17510/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(cK,"href","/docs/transformers/pr_17510/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(fK,"href","/docs/transformers/pr_17510/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(mK,"href","/docs/transformers/pr_17510/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(gK,"href","/docs/transformers/pr_17510/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(hK,"href","/docs/transformers/pr_17510/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(pK,"href","/docs/transformers/pr_17510/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(_K,"href","/docs/transformers/pr_17510/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(a3,"id","transformers.FlaxAutoModelForSequenceClassification"),c(a3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a3,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Xc,"class","relative group"),c(uK,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bK,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vK,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FK,"href","/docs/transformers/pr_17510/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(TK,"href","/docs/transformers/pr_17510/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(MK,"href","/docs/transformers/pr_17510/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(EK,"href","/docs/transformers/pr_17510/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(CK,"href","/docs/transformers/pr_17510/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(wK,"href","/docs/transformers/pr_17510/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(AK,"href","/docs/transformers/pr_17510/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(yK,"href","/docs/transformers/pr_17510/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(LK,"href","/docs/transformers/pr_17510/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(xK,"href","/docs/transformers/pr_17510/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(u3,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(u3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u3,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Qc,"class","relative group"),c($K,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kK,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SK,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RK,"href","/docs/transformers/pr_17510/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(PK,"href","/docs/transformers/pr_17510/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(BK,"href","/docs/transformers/pr_17510/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(IK,"href","/docs/transformers/pr_17510/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(NK,"href","/docs/transformers/pr_17510/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(qK,"href","/docs/transformers/pr_17510/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(jK,"href","/docs/transformers/pr_17510/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(DK,"href","/docs/transformers/pr_17510/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(GK,"href","/docs/transformers/pr_17510/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(OK,"href","/docs/transformers/pr_17510/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($3,"id","transformers.FlaxAutoModelForTokenClassification"),c($3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($3,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Jc,"class","relative group"),c(VK,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XK,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zK,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WK,"href","/docs/transformers/pr_17510/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(QK,"href","/docs/transformers/pr_17510/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(HK,"href","/docs/transformers/pr_17510/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(UK,"href","/docs/transformers/pr_17510/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(JK,"href","/docs/transformers/pr_17510/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(YK,"href","/docs/transformers/pr_17510/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(KK,"href","/docs/transformers/pr_17510/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(ZK,"href","/docs/transformers/pr_17510/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G3,"id","transformers.FlaxAutoModelForMultipleChoice"),c(G3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G3,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Zc,"class","relative group"),c(eZ,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oZ,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rZ,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tZ,"href","/docs/transformers/pr_17510/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(aZ,"href","/docs/transformers/pr_17510/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(nZ,"href","/docs/transformers/pr_17510/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(sZ,"href","/docs/transformers/pr_17510/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(lZ,"href","/docs/transformers/pr_17510/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(iZ,"href","/docs/transformers/pr_17510/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(dZ,"href","/docs/transformers/pr_17510/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(cZ,"href","/docs/transformers/pr_17510/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(K3,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(K3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(K3,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(rf,"class","relative group"),c(fZ,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mZ,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gZ,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hZ,"href","/docs/transformers/pr_17510/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rw,"id","transformers.FlaxAutoModelForImageClassification"),c(rw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rw,"href","#transformers.FlaxAutoModelForImageClassification"),c(nf,"class","relative group"),c(pZ,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_Z,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uZ,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bZ,"href","/docs/transformers/pr_17510/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(vZ,"href","/docs/transformers/pr_17510/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lw,"id","transformers.FlaxAutoModelForVision2Seq"),c(lw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lw,"href","#transformers.FlaxAutoModelForVision2Seq"),c(df,"class","relative group"),c(FZ,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TZ,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MZ,"href","/docs/transformers/pr_17510/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EZ,"href","/docs/transformers/pr_17510/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(d,_,null),e(p,h),e(p,Mo),e(Mo,fi),b(f,pf,u),b(f,rt,u),e(rt,mi),e(rt,gi),e(gi,LA),e(rt,_f),b(f,De,u),b(f,We,u),e(We,hi),e(We,yn),e(yn,xA),e(We,Ln),e(We,xn),e(xn,$A),e(We,pi),e(We,$n),e($n,kA),e(We,_i),b(f,uf,u),M(Ca,f,u),b(f,Qe,u),b(f,Ae,u),e(Ae,J$),e(Ae,ui),e(ui,Y$),e(Ae,K$),b(f,Eo,u),b(f,wa,u),e(wa,Z$),e(wa,bf),e(bf,ek),e(wa,xOe),b(f,bqe,u),b(f,bi,u),e(bi,vf),e(vf,_oe),M(SA,_oe,null),e(bi,$Oe),e(bi,uoe),e(uoe,kOe),b(f,vqe,u),b(f,kn,u),e(kn,SOe),e(kn,boe),e(boe,ROe),e(kn,POe),e(kn,voe),e(voe,BOe),e(kn,IOe),b(f,Fqe,u),M(RA,f,u),b(f,Tqe,u),b(f,ok,u),e(ok,NOe),b(f,Mqe,u),M(Ff,f,u),b(f,Eqe,u),b(f,vi,u),e(vi,Tf),e(Tf,Foe),M(PA,Foe,null),e(vi,qOe),e(vi,Toe),e(Toe,jOe),b(f,Cqe,u),b(f,Co,u),M(BA,Co,null),e(Co,DOe),e(Co,IA),e(IA,GOe),e(IA,rk),e(rk,OOe),e(IA,VOe),e(Co,XOe),e(Co,NA),e(NA,zOe),e(NA,Moe),e(Moe,WOe),e(NA,QOe),e(Co,HOe),e(Co,Er),M(qA,Er,null),e(Er,UOe),e(Er,Eoe),e(Eoe,JOe),e(Er,YOe),e(Er,Fi),e(Fi,KOe),e(Fi,Coe),e(Coe,ZOe),e(Fi,eVe),e(Fi,woe),e(woe,oVe),e(Fi,rVe),e(Er,tVe),e(Er,A),e(A,Mf),e(Mf,Aoe),e(Aoe,aVe),e(Mf,nVe),e(Mf,tk),e(tk,sVe),e(Mf,lVe),e(A,iVe),e(A,Ef),e(Ef,yoe),e(yoe,dVe),e(Ef,cVe),e(Ef,ak),e(ak,fVe),e(Ef,mVe),e(A,gVe),e(A,Cf),e(Cf,Loe),e(Loe,hVe),e(Cf,pVe),e(Cf,nk),e(nk,_Ve),e(Cf,uVe),e(A,bVe),e(A,wf),e(wf,xoe),e(xoe,vVe),e(wf,FVe),e(wf,sk),e(sk,TVe),e(wf,MVe),e(A,EVe),e(A,Af),e(Af,$oe),e($oe,CVe),e(Af,wVe),e(Af,lk),e(lk,AVe),e(Af,yVe),e(A,LVe),e(A,yf),e(yf,koe),e(koe,xVe),e(yf,$Ve),e(yf,ik),e(ik,kVe),e(yf,SVe),e(A,RVe),e(A,Lf),e(Lf,Soe),e(Soe,PVe),e(Lf,BVe),e(Lf,dk),e(dk,IVe),e(Lf,NVe),e(A,qVe),e(A,xf),e(xf,Roe),e(Roe,jVe),e(xf,DVe),e(xf,ck),e(ck,GVe),e(xf,OVe),e(A,VVe),e(A,$f),e($f,Poe),e(Poe,XVe),e($f,zVe),e($f,fk),e(fk,WVe),e($f,QVe),e(A,HVe),e(A,kf),e(kf,Boe),e(Boe,UVe),e(kf,JVe),e(kf,mk),e(mk,YVe),e(kf,KVe),e(A,ZVe),e(A,Sf),e(Sf,Ioe),e(Ioe,eXe),e(Sf,oXe),e(Sf,gk),e(gk,rXe),e(Sf,tXe),e(A,aXe),e(A,Rf),e(Rf,Noe),e(Noe,nXe),e(Rf,sXe),e(Rf,hk),e(hk,lXe),e(Rf,iXe),e(A,dXe),e(A,Pf),e(Pf,qoe),e(qoe,cXe),e(Pf,fXe),e(Pf,pk),e(pk,mXe),e(Pf,gXe),e(A,hXe),e(A,Bf),e(Bf,joe),e(joe,pXe),e(Bf,_Xe),e(Bf,_k),e(_k,uXe),e(Bf,bXe),e(A,vXe),e(A,If),e(If,Doe),e(Doe,FXe),e(If,TXe),e(If,uk),e(uk,MXe),e(If,EXe),e(A,CXe),e(A,Nf),e(Nf,Goe),e(Goe,wXe),e(Nf,AXe),e(Nf,bk),e(bk,yXe),e(Nf,LXe),e(A,xXe),e(A,qf),e(qf,Ooe),e(Ooe,$Xe),e(qf,kXe),e(qf,vk),e(vk,SXe),e(qf,RXe),e(A,PXe),e(A,jf),e(jf,Voe),e(Voe,BXe),e(jf,IXe),e(jf,Fk),e(Fk,NXe),e(jf,qXe),e(A,jXe),e(A,Df),e(Df,Xoe),e(Xoe,DXe),e(Df,GXe),e(Df,Tk),e(Tk,OXe),e(Df,VXe),e(A,XXe),e(A,Gf),e(Gf,zoe),e(zoe,zXe),e(Gf,WXe),e(Gf,Mk),e(Mk,QXe),e(Gf,HXe),e(A,UXe),e(A,Of),e(Of,Woe),e(Woe,JXe),e(Of,YXe),e(Of,Ek),e(Ek,KXe),e(Of,ZXe),e(A,eze),e(A,Vf),e(Vf,Qoe),e(Qoe,oze),e(Vf,rze),e(Vf,Ck),e(Ck,tze),e(Vf,aze),e(A,nze),e(A,Xf),e(Xf,Hoe),e(Hoe,sze),e(Xf,lze),e(Xf,wk),e(wk,ize),e(Xf,dze),e(A,cze),e(A,zf),e(zf,Uoe),e(Uoe,fze),e(zf,mze),e(zf,Ak),e(Ak,gze),e(zf,hze),e(A,pze),e(A,Wf),e(Wf,Joe),e(Joe,_ze),e(Wf,uze),e(Wf,yk),e(yk,bze),e(Wf,vze),e(A,Fze),e(A,Qf),e(Qf,Yoe),e(Yoe,Tze),e(Qf,Mze),e(Qf,Lk),e(Lk,Eze),e(Qf,Cze),e(A,wze),e(A,Hf),e(Hf,Koe),e(Koe,Aze),e(Hf,yze),e(Hf,xk),e(xk,Lze),e(Hf,xze),e(A,$ze),e(A,Uf),e(Uf,Zoe),e(Zoe,kze),e(Uf,Sze),e(Uf,$k),e($k,Rze),e(Uf,Pze),e(A,Bze),e(A,Jf),e(Jf,ere),e(ere,Ize),e(Jf,Nze),e(Jf,kk),e(kk,qze),e(Jf,jze),e(A,Dze),e(A,Yf),e(Yf,ore),e(ore,Gze),e(Yf,Oze),e(Yf,Sk),e(Sk,Vze),e(Yf,Xze),e(A,zze),e(A,Kf),e(Kf,rre),e(rre,Wze),e(Kf,Qze),e(Kf,Rk),e(Rk,Hze),e(Kf,Uze),e(A,Jze),e(A,Zf),e(Zf,tre),e(tre,Yze),e(Zf,Kze),e(Zf,Pk),e(Pk,Zze),e(Zf,eWe),e(A,oWe),e(A,em),e(em,are),e(are,rWe),e(em,tWe),e(em,Bk),e(Bk,aWe),e(em,nWe),e(A,sWe),e(A,om),e(om,nre),e(nre,lWe),e(om,iWe),e(om,Ik),e(Ik,dWe),e(om,cWe),e(A,fWe),e(A,rm),e(rm,sre),e(sre,mWe),e(rm,gWe),e(rm,Nk),e(Nk,hWe),e(rm,pWe),e(A,_We),e(A,tm),e(tm,lre),e(lre,uWe),e(tm,bWe),e(tm,qk),e(qk,vWe),e(tm,FWe),e(A,TWe),e(A,am),e(am,ire),e(ire,MWe),e(am,EWe),e(am,jk),e(jk,CWe),e(am,wWe),e(A,AWe),e(A,nm),e(nm,dre),e(dre,yWe),e(nm,LWe),e(nm,Dk),e(Dk,xWe),e(nm,$We),e(A,kWe),e(A,sm),e(sm,cre),e(cre,SWe),e(sm,RWe),e(sm,Gk),e(Gk,PWe),e(sm,BWe),e(A,IWe),e(A,lm),e(lm,fre),e(fre,NWe),e(lm,qWe),e(lm,Ok),e(Ok,jWe),e(lm,DWe),e(A,GWe),e(A,im),e(im,mre),e(mre,OWe),e(im,VWe),e(im,Vk),e(Vk,XWe),e(im,zWe),e(A,WWe),e(A,dm),e(dm,gre),e(gre,QWe),e(dm,HWe),e(dm,Xk),e(Xk,UWe),e(dm,JWe),e(A,YWe),e(A,cm),e(cm,hre),e(hre,KWe),e(cm,ZWe),e(cm,zk),e(zk,eQe),e(cm,oQe),e(A,rQe),e(A,fm),e(fm,pre),e(pre,tQe),e(fm,aQe),e(fm,Wk),e(Wk,nQe),e(fm,sQe),e(A,lQe),e(A,mm),e(mm,_re),e(_re,iQe),e(mm,dQe),e(mm,Qk),e(Qk,cQe),e(mm,fQe),e(A,mQe),e(A,gm),e(gm,ure),e(ure,gQe),e(gm,hQe),e(gm,Hk),e(Hk,pQe),e(gm,_Qe),e(A,uQe),e(A,hm),e(hm,bre),e(bre,bQe),e(hm,vQe),e(hm,Uk),e(Uk,FQe),e(hm,TQe),e(A,MQe),e(A,pm),e(pm,vre),e(vre,EQe),e(pm,CQe),e(pm,Jk),e(Jk,wQe),e(pm,AQe),e(A,yQe),e(A,_m),e(_m,Fre),e(Fre,LQe),e(_m,xQe),e(_m,Yk),e(Yk,$Qe),e(_m,kQe),e(A,SQe),e(A,um),e(um,Tre),e(Tre,RQe),e(um,PQe),e(um,Kk),e(Kk,BQe),e(um,IQe),e(A,NQe),e(A,bm),e(bm,Mre),e(Mre,qQe),e(bm,jQe),e(bm,Zk),e(Zk,DQe),e(bm,GQe),e(A,OQe),e(A,vm),e(vm,Ere),e(Ere,VQe),e(vm,XQe),e(vm,eS),e(eS,zQe),e(vm,WQe),e(A,QQe),e(A,Fm),e(Fm,Cre),e(Cre,HQe),e(Fm,UQe),e(Fm,oS),e(oS,JQe),e(Fm,YQe),e(A,KQe),e(A,Tm),e(Tm,wre),e(wre,ZQe),e(Tm,eHe),e(Tm,rS),e(rS,oHe),e(Tm,rHe),e(A,tHe),e(A,Mm),e(Mm,Are),e(Are,aHe),e(Mm,nHe),e(Mm,tS),e(tS,sHe),e(Mm,lHe),e(A,iHe),e(A,Em),e(Em,yre),e(yre,dHe),e(Em,cHe),e(Em,aS),e(aS,fHe),e(Em,mHe),e(A,gHe),e(A,Cm),e(Cm,Lre),e(Lre,hHe),e(Cm,pHe),e(Cm,nS),e(nS,_He),e(Cm,uHe),e(A,bHe),e(A,wm),e(wm,xre),e(xre,vHe),e(wm,FHe),e(wm,sS),e(sS,THe),e(wm,MHe),e(A,EHe),e(A,Am),e(Am,$re),e($re,CHe),e(Am,wHe),e(Am,lS),e(lS,AHe),e(Am,yHe),e(A,LHe),e(A,ym),e(ym,kre),e(kre,xHe),e(ym,$He),e(ym,iS),e(iS,kHe),e(ym,SHe),e(A,RHe),e(A,Lm),e(Lm,Sre),e(Sre,PHe),e(Lm,BHe),e(Lm,dS),e(dS,IHe),e(Lm,NHe),e(A,qHe),e(A,xm),e(xm,Rre),e(Rre,jHe),e(xm,DHe),e(xm,cS),e(cS,GHe),e(xm,OHe),e(A,VHe),e(A,$m),e($m,Pre),e(Pre,XHe),e($m,zHe),e($m,fS),e(fS,WHe),e($m,QHe),e(A,HHe),e(A,km),e(km,Bre),e(Bre,UHe),e(km,JHe),e(km,mS),e(mS,YHe),e(km,KHe),e(A,ZHe),e(A,Sm),e(Sm,Ire),e(Ire,eUe),e(Sm,oUe),e(Sm,gS),e(gS,rUe),e(Sm,tUe),e(A,aUe),e(A,Rm),e(Rm,Nre),e(Nre,nUe),e(Rm,sUe),e(Rm,hS),e(hS,lUe),e(Rm,iUe),e(A,dUe),e(A,Pm),e(Pm,qre),e(qre,cUe),e(Pm,fUe),e(Pm,pS),e(pS,mUe),e(Pm,gUe),e(A,hUe),e(A,Bm),e(Bm,jre),e(jre,pUe),e(Bm,_Ue),e(Bm,_S),e(_S,uUe),e(Bm,bUe),e(A,vUe),e(A,Im),e(Im,Dre),e(Dre,FUe),e(Im,TUe),e(Im,uS),e(uS,MUe),e(Im,EUe),e(A,CUe),e(A,Nm),e(Nm,Gre),e(Gre,wUe),e(Nm,AUe),e(Nm,bS),e(bS,yUe),e(Nm,LUe),e(A,xUe),e(A,qm),e(qm,Ore),e(Ore,$Ue),e(qm,kUe),e(qm,vS),e(vS,SUe),e(qm,RUe),e(A,PUe),e(A,jm),e(jm,Vre),e(Vre,BUe),e(jm,IUe),e(jm,FS),e(FS,NUe),e(jm,qUe),e(A,jUe),e(A,Dm),e(Dm,Xre),e(Xre,DUe),e(Dm,GUe),e(Dm,TS),e(TS,OUe),e(Dm,VUe),e(A,XUe),e(A,Gm),e(Gm,zre),e(zre,zUe),e(Gm,WUe),e(Gm,MS),e(MS,QUe),e(Gm,HUe),e(A,UUe),e(A,Om),e(Om,Wre),e(Wre,JUe),e(Om,YUe),e(Om,ES),e(ES,KUe),e(Om,ZUe),e(A,eJe),e(A,Vm),e(Vm,Qre),e(Qre,oJe),e(Vm,rJe),e(Vm,CS),e(CS,tJe),e(Vm,aJe),e(A,nJe),e(A,Xm),e(Xm,Hre),e(Hre,sJe),e(Xm,lJe),e(Xm,wS),e(wS,iJe),e(Xm,dJe),e(A,cJe),e(A,zm),e(zm,Ure),e(Ure,fJe),e(zm,mJe),e(zm,AS),e(AS,gJe),e(zm,hJe),e(A,pJe),e(A,Wm),e(Wm,Jre),e(Jre,_Je),e(Wm,uJe),e(Wm,yS),e(yS,bJe),e(Wm,vJe),e(A,FJe),e(A,Qm),e(Qm,Yre),e(Yre,TJe),e(Qm,MJe),e(Qm,LS),e(LS,EJe),e(Qm,CJe),e(A,wJe),e(A,Hm),e(Hm,Kre),e(Kre,AJe),e(Hm,yJe),e(Hm,xS),e(xS,LJe),e(Hm,xJe),e(A,$Je),e(A,Um),e(Um,Zre),e(Zre,kJe),e(Um,SJe),e(Um,$S),e($S,RJe),e(Um,PJe),e(A,BJe),e(A,Jm),e(Jm,ete),e(ete,IJe),e(Jm,NJe),e(Jm,kS),e(kS,qJe),e(Jm,jJe),e(A,DJe),e(A,Ym),e(Ym,ote),e(ote,GJe),e(Ym,OJe),e(Ym,SS),e(SS,VJe),e(Ym,XJe),e(A,zJe),e(A,Km),e(Km,rte),e(rte,WJe),e(Km,QJe),e(Km,RS),e(RS,HJe),e(Km,UJe),e(A,JJe),e(A,Zm),e(Zm,tte),e(tte,YJe),e(Zm,KJe),e(Zm,PS),e(PS,ZJe),e(Zm,eYe),e(A,oYe),e(A,eg),e(eg,ate),e(ate,rYe),e(eg,tYe),e(eg,BS),e(BS,aYe),e(eg,nYe),e(A,sYe),e(A,og),e(og,nte),e(nte,lYe),e(og,iYe),e(og,IS),e(IS,dYe),e(og,cYe),e(A,fYe),e(A,rg),e(rg,ste),e(ste,mYe),e(rg,gYe),e(rg,NS),e(NS,hYe),e(rg,pYe),e(A,_Ye),e(A,tg),e(tg,lte),e(lte,uYe),e(tg,bYe),e(tg,qS),e(qS,vYe),e(tg,FYe),e(A,TYe),e(A,ag),e(ag,ite),e(ite,MYe),e(ag,EYe),e(ag,jS),e(jS,CYe),e(ag,wYe),e(A,AYe),e(A,ng),e(ng,dte),e(dte,yYe),e(ng,LYe),e(ng,DS),e(DS,xYe),e(ng,$Ye),e(A,kYe),e(A,sg),e(sg,cte),e(cte,SYe),e(sg,RYe),e(sg,GS),e(GS,PYe),e(sg,BYe),e(A,IYe),e(A,lg),e(lg,fte),e(fte,NYe),e(lg,qYe),e(lg,OS),e(OS,jYe),e(lg,DYe),e(A,GYe),e(A,ig),e(ig,mte),e(mte,OYe),e(ig,VYe),e(ig,VS),e(VS,XYe),e(ig,zYe),e(A,WYe),e(A,dg),e(dg,gte),e(gte,QYe),e(dg,HYe),e(dg,XS),e(XS,UYe),e(dg,JYe),e(A,YYe),e(A,cg),e(cg,hte),e(hte,KYe),e(cg,ZYe),e(cg,zS),e(zS,eKe),e(cg,oKe),e(A,rKe),e(A,fg),e(fg,pte),e(pte,tKe),e(fg,aKe),e(fg,WS),e(WS,nKe),e(fg,sKe),e(A,lKe),e(A,mg),e(mg,_te),e(_te,iKe),e(mg,dKe),e(mg,QS),e(QS,cKe),e(mg,fKe),e(A,mKe),e(A,gg),e(gg,ute),e(ute,gKe),e(gg,hKe),e(gg,HS),e(HS,pKe),e(gg,_Ke),e(A,uKe),e(A,hg),e(hg,bte),e(bte,bKe),e(hg,vKe),e(hg,US),e(US,FKe),e(hg,TKe),e(A,MKe),e(A,pg),e(pg,vte),e(vte,EKe),e(pg,CKe),e(pg,JS),e(JS,wKe),e(pg,AKe),e(A,yKe),e(A,_g),e(_g,Fte),e(Fte,LKe),e(_g,xKe),e(_g,YS),e(YS,$Ke),e(_g,kKe),e(A,SKe),e(A,ug),e(ug,Tte),e(Tte,RKe),e(ug,PKe),e(ug,KS),e(KS,BKe),e(ug,IKe),e(A,NKe),e(A,bg),e(bg,Mte),e(Mte,qKe),e(bg,jKe),e(bg,ZS),e(ZS,DKe),e(bg,GKe),e(A,OKe),e(A,vg),e(vg,Ete),e(Ete,VKe),e(vg,XKe),e(vg,eR),e(eR,zKe),e(vg,WKe),e(A,QKe),e(A,Fg),e(Fg,Cte),e(Cte,HKe),e(Fg,UKe),e(Fg,oR),e(oR,JKe),e(Fg,YKe),e(A,KKe),e(A,Tg),e(Tg,wte),e(wte,ZKe),e(Tg,eZe),e(Tg,rR),e(rR,oZe),e(Tg,rZe),e(A,tZe),e(A,Mg),e(Mg,Ate),e(Ate,aZe),e(Mg,nZe),e(Mg,tR),e(tR,sZe),e(Mg,lZe),e(Er,iZe),M(Eg,Er,null),e(Co,dZe),e(Co,Cg),M(jA,Cg,null),e(Cg,cZe),e(Cg,yte),e(yte,fZe),b(f,wqe,u),b(f,Ti,u),e(Ti,wg),e(wg,Lte),M(DA,Lte,null),e(Ti,mZe),e(Ti,xte),e(xte,gZe),b(f,Aqe,u),b(f,wo,u),M(GA,wo,null),e(wo,hZe),e(wo,OA),e(OA,pZe),e(OA,aR),e(aR,_Ze),e(OA,uZe),e(wo,bZe),e(wo,VA),e(VA,vZe),e(VA,$te),e($te,FZe),e(VA,TZe),e(wo,MZe),e(wo,Cr),M(XA,Cr,null),e(Cr,EZe),e(Cr,kte),e(kte,CZe),e(Cr,wZe),e(Cr,Aa),e(Aa,AZe),e(Aa,Ste),e(Ste,yZe),e(Aa,LZe),e(Aa,Rte),e(Rte,xZe),e(Aa,$Ze),e(Aa,Pte),e(Pte,kZe),e(Aa,SZe),e(Cr,RZe),e(Cr,k),e(k,Sn),e(Sn,Bte),e(Bte,PZe),e(Sn,BZe),e(Sn,nR),e(nR,IZe),e(Sn,NZe),e(Sn,sR),e(sR,qZe),e(Sn,jZe),e(k,DZe),e(k,Rn),e(Rn,Ite),e(Ite,GZe),e(Rn,OZe),e(Rn,lR),e(lR,VZe),e(Rn,XZe),e(Rn,iR),e(iR,zZe),e(Rn,WZe),e(k,QZe),e(k,Pn),e(Pn,Nte),e(Nte,HZe),e(Pn,UZe),e(Pn,dR),e(dR,JZe),e(Pn,YZe),e(Pn,cR),e(cR,KZe),e(Pn,ZZe),e(k,eeo),e(k,Ag),e(Ag,qte),e(qte,oeo),e(Ag,reo),e(Ag,fR),e(fR,teo),e(Ag,aeo),e(k,neo),e(k,Bn),e(Bn,jte),e(jte,seo),e(Bn,leo),e(Bn,mR),e(mR,ieo),e(Bn,deo),e(Bn,gR),e(gR,ceo),e(Bn,feo),e(k,meo),e(k,yg),e(yg,Dte),e(Dte,geo),e(yg,heo),e(yg,hR),e(hR,peo),e(yg,_eo),e(k,ueo),e(k,Lg),e(Lg,Gte),e(Gte,beo),e(Lg,veo),e(Lg,pR),e(pR,Feo),e(Lg,Teo),e(k,Meo),e(k,xg),e(xg,Ote),e(Ote,Eeo),e(xg,Ceo),e(xg,_R),e(_R,weo),e(xg,Aeo),e(k,yeo),e(k,In),e(In,Vte),e(Vte,Leo),e(In,xeo),e(In,uR),e(uR,$eo),e(In,keo),e(In,bR),e(bR,Seo),e(In,Reo),e(k,Peo),e(k,Nn),e(Nn,Xte),e(Xte,Beo),e(Nn,Ieo),e(Nn,vR),e(vR,Neo),e(Nn,qeo),e(Nn,FR),e(FR,jeo),e(Nn,Deo),e(k,Geo),e(k,qn),e(qn,zte),e(zte,Oeo),e(qn,Veo),e(qn,TR),e(TR,Xeo),e(qn,zeo),e(qn,MR),e(MR,Weo),e(qn,Qeo),e(k,Heo),e(k,$g),e($g,Wte),e(Wte,Ueo),e($g,Jeo),e($g,ER),e(ER,Yeo),e($g,Keo),e(k,Zeo),e(k,kg),e(kg,Qte),e(Qte,eoo),e(kg,ooo),e(kg,CR),e(CR,roo),e(kg,too),e(k,aoo),e(k,jn),e(jn,Hte),e(Hte,noo),e(jn,soo),e(jn,wR),e(wR,loo),e(jn,ioo),e(jn,AR),e(AR,doo),e(jn,coo),e(k,foo),e(k,Sg),e(Sg,Ute),e(Ute,moo),e(Sg,goo),e(Sg,yR),e(yR,hoo),e(Sg,poo),e(k,_oo),e(k,Dn),e(Dn,Jte),e(Jte,uoo),e(Dn,boo),e(Dn,LR),e(LR,voo),e(Dn,Foo),e(Dn,xR),e(xR,Too),e(Dn,Moo),e(k,Eoo),e(k,Gn),e(Gn,Yte),e(Yte,Coo),e(Gn,woo),e(Gn,$R),e($R,Aoo),e(Gn,yoo),e(Gn,kR),e(kR,Loo),e(Gn,xoo),e(k,$oo),e(k,On),e(On,Kte),e(Kte,koo),e(On,Soo),e(On,SR),e(SR,Roo),e(On,Poo),e(On,RR),e(RR,Boo),e(On,Ioo),e(k,Noo),e(k,Rg),e(Rg,Zte),e(Zte,qoo),e(Rg,joo),e(Rg,PR),e(PR,Doo),e(Rg,Goo),e(k,Ooo),e(k,Vn),e(Vn,eae),e(eae,Voo),e(Vn,Xoo),e(Vn,BR),e(BR,zoo),e(Vn,Woo),e(Vn,IR),e(IR,Qoo),e(Vn,Hoo),e(k,Uoo),e(k,Xn),e(Xn,oae),e(oae,Joo),e(Xn,Yoo),e(Xn,NR),e(NR,Koo),e(Xn,Zoo),e(Xn,qR),e(qR,ero),e(Xn,oro),e(k,rro),e(k,zn),e(zn,rae),e(rae,tro),e(zn,aro),e(zn,jR),e(jR,nro),e(zn,sro),e(zn,DR),e(DR,lro),e(zn,iro),e(k,dro),e(k,Wn),e(Wn,tae),e(tae,cro),e(Wn,fro),e(Wn,GR),e(GR,mro),e(Wn,gro),e(Wn,OR),e(OR,hro),e(Wn,pro),e(k,_ro),e(k,Qn),e(Qn,aae),e(aae,uro),e(Qn,bro),e(Qn,VR),e(VR,vro),e(Qn,Fro),e(Qn,XR),e(XR,Tro),e(Qn,Mro),e(k,Ero),e(k,Hn),e(Hn,nae),e(nae,Cro),e(Hn,wro),e(Hn,zR),e(zR,Aro),e(Hn,yro),e(Hn,WR),e(WR,Lro),e(Hn,xro),e(k,$ro),e(k,Pg),e(Pg,sae),e(sae,kro),e(Pg,Sro),e(Pg,QR),e(QR,Rro),e(Pg,Pro),e(k,Bro),e(k,Un),e(Un,lae),e(lae,Iro),e(Un,Nro),e(Un,HR),e(HR,qro),e(Un,jro),e(Un,UR),e(UR,Dro),e(Un,Gro),e(k,Oro),e(k,Bg),e(Bg,iae),e(iae,Vro),e(Bg,Xro),e(Bg,JR),e(JR,zro),e(Bg,Wro),e(k,Qro),e(k,Jn),e(Jn,dae),e(dae,Hro),e(Jn,Uro),e(Jn,YR),e(YR,Jro),e(Jn,Yro),e(Jn,KR),e(KR,Kro),e(Jn,Zro),e(k,eto),e(k,Yn),e(Yn,cae),e(cae,oto),e(Yn,rto),e(Yn,ZR),e(ZR,tto),e(Yn,ato),e(Yn,eP),e(eP,nto),e(Yn,sto),e(k,lto),e(k,Kn),e(Kn,fae),e(fae,ito),e(Kn,dto),e(Kn,oP),e(oP,cto),e(Kn,fto),e(Kn,rP),e(rP,mto),e(Kn,gto),e(k,hto),e(k,Ig),e(Ig,mae),e(mae,pto),e(Ig,_to),e(Ig,tP),e(tP,uto),e(Ig,bto),e(k,vto),e(k,Zn),e(Zn,gae),e(gae,Fto),e(Zn,Tto),e(Zn,aP),e(aP,Mto),e(Zn,Eto),e(Zn,nP),e(nP,Cto),e(Zn,wto),e(k,Ato),e(k,es),e(es,hae),e(hae,yto),e(es,Lto),e(es,sP),e(sP,xto),e(es,$to),e(es,lP),e(lP,kto),e(es,Sto),e(k,Rto),e(k,Ng),e(Ng,pae),e(pae,Pto),e(Ng,Bto),e(Ng,iP),e(iP,Ito),e(Ng,Nto),e(k,qto),e(k,os),e(os,_ae),e(_ae,jto),e(os,Dto),e(os,dP),e(dP,Gto),e(os,Oto),e(os,cP),e(cP,Vto),e(os,Xto),e(k,zto),e(k,rs),e(rs,uae),e(uae,Wto),e(rs,Qto),e(rs,fP),e(fP,Hto),e(rs,Uto),e(rs,mP),e(mP,Jto),e(rs,Yto),e(k,Kto),e(k,ts),e(ts,bae),e(bae,Zto),e(ts,eao),e(ts,gP),e(gP,oao),e(ts,rao),e(ts,hP),e(hP,tao),e(ts,aao),e(k,nao),e(k,as),e(as,vae),e(vae,sao),e(as,lao),e(as,pP),e(pP,iao),e(as,dao),e(as,_P),e(_P,cao),e(as,fao),e(k,mao),e(k,ns),e(ns,Fae),e(Fae,gao),e(ns,hao),e(ns,uP),e(uP,pao),e(ns,_ao),e(ns,bP),e(bP,uao),e(ns,bao),e(k,vao),e(k,ss),e(ss,Tae),e(Tae,Fao),e(ss,Tao),e(ss,vP),e(vP,Mao),e(ss,Eao),e(ss,FP),e(FP,Cao),e(ss,wao),e(k,Aao),e(k,ls),e(ls,Mae),e(Mae,yao),e(ls,Lao),e(ls,TP),e(TP,xao),e(ls,$ao),e(ls,MP),e(MP,kao),e(ls,Sao),e(k,Rao),e(k,qg),e(qg,Eae),e(Eae,Pao),e(qg,Bao),e(qg,EP),e(EP,Iao),e(qg,Nao),e(k,qao),e(k,is),e(is,Cae),e(Cae,jao),e(is,Dao),e(is,CP),e(CP,Gao),e(is,Oao),e(is,wP),e(wP,Vao),e(is,Xao),e(k,zao),e(k,jg),e(jg,wae),e(wae,Wao),e(jg,Qao),e(jg,AP),e(AP,Hao),e(jg,Uao),e(k,Jao),e(k,Dg),e(Dg,Aae),e(Aae,Yao),e(Dg,Kao),e(Dg,yP),e(yP,Zao),e(Dg,eno),e(k,ono),e(k,ds),e(ds,yae),e(yae,rno),e(ds,tno),e(ds,LP),e(LP,ano),e(ds,nno),e(ds,xP),e(xP,sno),e(ds,lno),e(k,ino),e(k,cs),e(cs,Lae),e(Lae,dno),e(cs,cno),e(cs,$P),e($P,fno),e(cs,mno),e(cs,kP),e(kP,gno),e(cs,hno),e(k,pno),e(k,fs),e(fs,xae),e(xae,_no),e(fs,uno),e(fs,SP),e(SP,bno),e(fs,vno),e(fs,RP),e(RP,Fno),e(fs,Tno),e(k,Mno),e(k,Gg),e(Gg,$ae),e($ae,Eno),e(Gg,Cno),e(Gg,PP),e(PP,wno),e(Gg,Ano),e(k,yno),e(k,ms),e(ms,kae),e(kae,Lno),e(ms,xno),e(ms,BP),e(BP,$no),e(ms,kno),e(ms,IP),e(IP,Sno),e(ms,Rno),e(k,Pno),e(k,gs),e(gs,Sae),e(Sae,Bno),e(gs,Ino),e(gs,NP),e(NP,Nno),e(gs,qno),e(gs,qP),e(qP,jno),e(gs,Dno),e(k,Gno),e(k,hs),e(hs,Rae),e(Rae,Ono),e(hs,Vno),e(hs,jP),e(jP,Xno),e(hs,zno),e(hs,DP),e(DP,Wno),e(hs,Qno),e(k,Hno),e(k,ps),e(ps,Pae),e(Pae,Uno),e(ps,Jno),e(ps,GP),e(GP,Yno),e(ps,Kno),e(ps,OP),e(OP,Zno),e(ps,eso),e(k,oso),e(k,_s),e(_s,Bae),e(Bae,rso),e(_s,tso),e(_s,VP),e(VP,aso),e(_s,nso),e(_s,XP),e(XP,sso),e(_s,lso),e(k,iso),e(k,Og),e(Og,Iae),e(Iae,dso),e(Og,cso),e(Og,zP),e(zP,fso),e(Og,mso),e(k,gso),e(k,us),e(us,Nae),e(Nae,hso),e(us,pso),e(us,WP),e(WP,_so),e(us,uso),e(us,QP),e(QP,bso),e(us,vso),e(k,Fso),e(k,Vg),e(Vg,qae),e(qae,Tso),e(Vg,Mso),e(Vg,HP),e(HP,Eso),e(Vg,Cso),e(k,wso),e(k,Xg),e(Xg,jae),e(jae,Aso),e(Xg,yso),e(Xg,UP),e(UP,Lso),e(Xg,xso),e(k,$so),e(k,zg),e(zg,Dae),e(Dae,kso),e(zg,Sso),e(zg,JP),e(JP,Rso),e(zg,Pso),e(k,Bso),e(k,Wg),e(Wg,Gae),e(Gae,Iso),e(Wg,Nso),e(Wg,YP),e(YP,qso),e(Wg,jso),e(k,Dso),e(k,bs),e(bs,Oae),e(Oae,Gso),e(bs,Oso),e(bs,KP),e(KP,Vso),e(bs,Xso),e(bs,ZP),e(ZP,zso),e(bs,Wso),e(k,Qso),e(k,Qg),e(Qg,Vae),e(Vae,Hso),e(Qg,Uso),e(Qg,eB),e(eB,Jso),e(Qg,Yso),e(k,Kso),e(k,vs),e(vs,Xae),e(Xae,Zso),e(vs,elo),e(vs,oB),e(oB,olo),e(vs,rlo),e(vs,rB),e(rB,tlo),e(vs,alo),e(k,nlo),e(k,Fs),e(Fs,zae),e(zae,slo),e(Fs,llo),e(Fs,tB),e(tB,ilo),e(Fs,dlo),e(Fs,aB),e(aB,clo),e(Fs,flo),e(k,mlo),e(k,Ts),e(Ts,Wae),e(Wae,glo),e(Ts,hlo),e(Ts,nB),e(nB,plo),e(Ts,_lo),e(Ts,sB),e(sB,ulo),e(Ts,blo),e(k,vlo),e(k,Ms),e(Ms,Qae),e(Qae,Flo),e(Ms,Tlo),e(Ms,lB),e(lB,Mlo),e(Ms,Elo),e(Ms,iB),e(iB,Clo),e(Ms,wlo),e(k,Alo),e(k,Es),e(Es,Hae),e(Hae,ylo),e(Es,Llo),e(Es,dB),e(dB,xlo),e(Es,$lo),e(Es,cB),e(cB,klo),e(Es,Slo),e(k,Rlo),e(k,Cs),e(Cs,Uae),e(Uae,Plo),e(Cs,Blo),e(Cs,fB),e(fB,Ilo),e(Cs,Nlo),e(Cs,mB),e(mB,qlo),e(Cs,jlo),e(k,Dlo),e(k,Hg),e(Hg,Jae),e(Jae,Glo),e(Hg,Olo),e(Hg,gB),e(gB,Vlo),e(Hg,Xlo),e(k,zlo),e(k,Ug),e(Ug,Yae),e(Yae,Wlo),e(Ug,Qlo),e(Ug,hB),e(hB,Hlo),e(Ug,Ulo),e(k,Jlo),e(k,ws),e(ws,Kae),e(Kae,Ylo),e(ws,Klo),e(ws,pB),e(pB,Zlo),e(ws,eio),e(ws,_B),e(_B,oio),e(ws,rio),e(k,tio),e(k,As),e(As,Zae),e(Zae,aio),e(As,nio),e(As,uB),e(uB,sio),e(As,lio),e(As,bB),e(bB,iio),e(As,dio),e(k,cio),e(k,ys),e(ys,ene),e(ene,fio),e(ys,mio),e(ys,vB),e(vB,gio),e(ys,hio),e(ys,FB),e(FB,pio),e(ys,_io),e(k,uio),e(k,Jg),e(Jg,one),e(one,bio),e(Jg,vio),e(Jg,TB),e(TB,Fio),e(Jg,Tio),e(k,Mio),e(k,Yg),e(Yg,rne),e(rne,Eio),e(Yg,Cio),e(Yg,MB),e(MB,wio),e(Yg,Aio),e(k,yio),e(k,Kg),e(Kg,tne),e(tne,Lio),e(Kg,xio),e(Kg,EB),e(EB,$io),e(Kg,kio),e(k,Sio),e(k,Ls),e(Ls,ane),e(ane,Rio),e(Ls,Pio),e(Ls,CB),e(CB,Bio),e(Ls,Iio),e(Ls,wB),e(wB,Nio),e(Ls,qio),e(k,jio),e(k,Zg),e(Zg,nne),e(nne,Dio),e(Zg,Gio),e(Zg,AB),e(AB,Oio),e(Zg,Vio),e(k,Xio),e(k,eh),e(eh,sne),e(sne,zio),e(eh,Wio),e(eh,yB),e(yB,Qio),e(eh,Hio),e(k,Uio),e(k,oh),e(oh,lne),e(lne,Jio),e(oh,Yio),e(oh,LB),e(LB,Kio),e(oh,Zio),e(k,edo),e(k,xs),e(xs,ine),e(ine,odo),e(xs,rdo),e(xs,xB),e(xB,tdo),e(xs,ado),e(xs,$B),e($B,ndo),e(xs,sdo),e(k,ldo),e(k,rh),e(rh,dne),e(dne,ido),e(rh,ddo),e(rh,kB),e(kB,cdo),e(rh,fdo),e(k,mdo),e(k,th),e(th,cne),e(cne,gdo),e(th,hdo),e(th,SB),e(SB,pdo),e(th,_do),e(k,udo),e(k,$s),e($s,fne),e(fne,bdo),e($s,vdo),e($s,RB),e(RB,Fdo),e($s,Tdo),e($s,PB),e(PB,Mdo),e($s,Edo),e(k,Cdo),e(k,ks),e(ks,mne),e(mne,wdo),e(ks,Ado),e(ks,BB),e(BB,ydo),e(ks,Ldo),e(ks,IB),e(IB,xdo),e(ks,$do),e(k,kdo),e(k,Ss),e(Ss,gne),e(gne,Sdo),e(Ss,Rdo),e(Ss,NB),e(NB,Pdo),e(Ss,Bdo),e(Ss,qB),e(qB,Ido),e(Ss,Ndo),e(k,qdo),e(k,Rs),e(Rs,hne),e(hne,jdo),e(Rs,Ddo),e(Rs,jB),e(jB,Gdo),e(Rs,Odo),e(Rs,DB),e(DB,Vdo),e(Rs,Xdo),e(Cr,zdo),M(ah,Cr,null),e(wo,Wdo),e(wo,nh),M(zA,nh,null),e(nh,Qdo),e(nh,pne),e(pne,Hdo),b(f,yqe,u),b(f,Mi,u),e(Mi,sh),e(sh,_ne),M(WA,_ne,null),e(Mi,Udo),e(Mi,une),e(une,Jdo),b(f,Lqe,u),b(f,Ao,u),M(QA,Ao,null),e(Ao,Ydo),e(Ao,HA),e(HA,Kdo),e(HA,GB),e(GB,Zdo),e(HA,eco),e(Ao,oco),e(Ao,UA),e(UA,rco),e(UA,bne),e(bne,tco),e(UA,aco),e(Ao,nco),e(Ao,He),M(JA,He,null),e(He,sco),e(He,vne),e(vne,lco),e(He,ico),e(He,ya),e(ya,dco),e(ya,Fne),e(Fne,cco),e(ya,fco),e(ya,Tne),e(Tne,mco),e(ya,gco),e(ya,Mne),e(Mne,hco),e(ya,pco),e(He,_co),e(He,Y),e(Y,lh),e(lh,Ene),e(Ene,uco),e(lh,bco),e(lh,OB),e(OB,vco),e(lh,Fco),e(Y,Tco),e(Y,ih),e(ih,Cne),e(Cne,Mco),e(ih,Eco),e(ih,VB),e(VB,Cco),e(ih,wco),e(Y,Aco),e(Y,dh),e(dh,wne),e(wne,yco),e(dh,Lco),e(dh,XB),e(XB,xco),e(dh,$co),e(Y,kco),e(Y,ch),e(ch,Ane),e(Ane,Sco),e(ch,Rco),e(ch,zB),e(zB,Pco),e(ch,Bco),e(Y,Ico),e(Y,fh),e(fh,yne),e(yne,Nco),e(fh,qco),e(fh,WB),e(WB,jco),e(fh,Dco),e(Y,Gco),e(Y,mh),e(mh,Lne),e(Lne,Oco),e(mh,Vco),e(mh,QB),e(QB,Xco),e(mh,zco),e(Y,Wco),e(Y,gh),e(gh,xne),e(xne,Qco),e(gh,Hco),e(gh,HB),e(HB,Uco),e(gh,Jco),e(Y,Yco),e(Y,hh),e(hh,$ne),e($ne,Kco),e(hh,Zco),e(hh,UB),e(UB,efo),e(hh,ofo),e(Y,rfo),e(Y,ph),e(ph,kne),e(kne,tfo),e(ph,afo),e(ph,JB),e(JB,nfo),e(ph,sfo),e(Y,lfo),e(Y,_h),e(_h,Sne),e(Sne,ifo),e(_h,dfo),e(_h,YB),e(YB,cfo),e(_h,ffo),e(Y,mfo),e(Y,uh),e(uh,Rne),e(Rne,gfo),e(uh,hfo),e(uh,KB),e(KB,pfo),e(uh,_fo),e(Y,ufo),e(Y,bh),e(bh,Pne),e(Pne,bfo),e(bh,vfo),e(bh,ZB),e(ZB,Ffo),e(bh,Tfo),e(Y,Mfo),e(Y,vh),e(vh,Bne),e(Bne,Efo),e(vh,Cfo),e(vh,eI),e(eI,wfo),e(vh,Afo),e(Y,yfo),e(Y,Fh),e(Fh,Ine),e(Ine,Lfo),e(Fh,xfo),e(Fh,oI),e(oI,$fo),e(Fh,kfo),e(Y,Sfo),e(Y,Th),e(Th,Nne),e(Nne,Rfo),e(Th,Pfo),e(Th,rI),e(rI,Bfo),e(Th,Ifo),e(Y,Nfo),e(Y,Mh),e(Mh,qne),e(qne,qfo),e(Mh,jfo),e(Mh,tI),e(tI,Dfo),e(Mh,Gfo),e(Y,Ofo),e(Y,Eh),e(Eh,jne),e(jne,Vfo),e(Eh,Xfo),e(Eh,aI),e(aI,zfo),e(Eh,Wfo),e(Y,Qfo),e(Y,Ch),e(Ch,Dne),e(Dne,Hfo),e(Ch,Ufo),e(Ch,nI),e(nI,Jfo),e(Ch,Yfo),e(Y,Kfo),e(Y,wh),e(wh,Gne),e(Gne,Zfo),e(wh,emo),e(wh,sI),e(sI,omo),e(wh,rmo),e(Y,tmo),e(Y,Ah),e(Ah,One),e(One,amo),e(Ah,nmo),e(Ah,lI),e(lI,smo),e(Ah,lmo),e(Y,imo),e(Y,yh),e(yh,Vne),e(Vne,dmo),e(yh,cmo),e(yh,iI),e(iI,fmo),e(yh,mmo),e(Y,gmo),e(Y,Lh),e(Lh,Xne),e(Xne,hmo),e(Lh,pmo),e(Lh,dI),e(dI,_mo),e(Lh,umo),e(Y,bmo),e(Y,xh),e(xh,zne),e(zne,vmo),e(xh,Fmo),e(xh,cI),e(cI,Tmo),e(xh,Mmo),e(Y,Emo),e(Y,$h),e($h,Wne),e(Wne,Cmo),e($h,wmo),e($h,fI),e(fI,Amo),e($h,ymo),e(Y,Lmo),e(Y,kh),e(kh,Qne),e(Qne,xmo),e(kh,$mo),e(kh,mI),e(mI,kmo),e(kh,Smo),e(Y,Rmo),e(Y,Sh),e(Sh,Hne),e(Hne,Pmo),e(Sh,Bmo),e(Sh,gI),e(gI,Imo),e(Sh,Nmo),e(Y,qmo),e(Y,Rh),e(Rh,Une),e(Une,jmo),e(Rh,Dmo),e(Rh,hI),e(hI,Gmo),e(Rh,Omo),e(Y,Vmo),e(Y,Ph),e(Ph,Jne),e(Jne,Xmo),e(Ph,zmo),e(Ph,pI),e(pI,Wmo),e(Ph,Qmo),e(Y,Hmo),e(Y,Bh),e(Bh,Yne),e(Yne,Umo),e(Bh,Jmo),e(Bh,_I),e(_I,Ymo),e(Bh,Kmo),e(He,Zmo),M(Ih,He,null),e(He,ego),M(Nh,He,null),e(Ao,ogo),e(Ao,qh),M(YA,qh,null),e(qh,rgo),e(qh,Kne),e(Kne,tgo),b(f,xqe,u),b(f,Ei,u),e(Ei,jh),e(jh,Zne),M(KA,Zne,null),e(Ei,ago),e(Ei,ese),e(ese,ngo),b(f,$qe,u),b(f,yo,u),M(ZA,yo,null),e(yo,sgo),e(yo,ey),e(ey,lgo),e(ey,uI),e(uI,igo),e(ey,dgo),e(yo,cgo),e(yo,oy),e(oy,fgo),e(oy,ose),e(ose,mgo),e(oy,ggo),e(yo,hgo),e(yo,Ue),M(ry,Ue,null),e(Ue,pgo),e(Ue,rse),e(rse,_go),e(Ue,ugo),e(Ue,Ci),e(Ci,bgo),e(Ci,tse),e(tse,vgo),e(Ci,Fgo),e(Ci,ase),e(ase,Tgo),e(Ci,Mgo),e(Ue,Ego),e(Ue,he),e(he,Dh),e(Dh,nse),e(nse,Cgo),e(Dh,wgo),e(Dh,bI),e(bI,Ago),e(Dh,ygo),e(he,Lgo),e(he,Gh),e(Gh,sse),e(sse,xgo),e(Gh,$go),e(Gh,lse),e(lse,kgo),e(Gh,Sgo),e(he,Rgo),e(he,Oh),e(Oh,ise),e(ise,Pgo),e(Oh,Bgo),e(Oh,vI),e(vI,Igo),e(Oh,Ngo),e(he,qgo),e(he,Vh),e(Vh,dse),e(dse,jgo),e(Vh,Dgo),e(Vh,FI),e(FI,Ggo),e(Vh,Ogo),e(he,Vgo),e(he,Xh),e(Xh,cse),e(cse,Xgo),e(Xh,zgo),e(Xh,TI),e(TI,Wgo),e(Xh,Qgo),e(he,Hgo),e(he,zh),e(zh,fse),e(fse,Ugo),e(zh,Jgo),e(zh,MI),e(MI,Ygo),e(zh,Kgo),e(he,Zgo),e(he,Wh),e(Wh,mse),e(mse,eho),e(Wh,oho),e(Wh,EI),e(EI,rho),e(Wh,tho),e(he,aho),e(he,Qh),e(Qh,gse),e(gse,nho),e(Qh,sho),e(Qh,CI),e(CI,lho),e(Qh,iho),e(he,dho),e(he,Hh),e(Hh,hse),e(hse,cho),e(Hh,fho),e(Hh,wI),e(wI,mho),e(Hh,gho),e(he,hho),e(he,Uh),e(Uh,pse),e(pse,pho),e(Uh,_ho),e(Uh,AI),e(AI,uho),e(Uh,bho),e(he,vho),e(he,Jh),e(Jh,_se),e(_se,Fho),e(Jh,Tho),e(Jh,yI),e(yI,Mho),e(Jh,Eho),e(he,Cho),e(he,Yh),e(Yh,use),e(use,who),e(Yh,Aho),e(Yh,LI),e(LI,yho),e(Yh,Lho),e(he,xho),e(he,Kh),e(Kh,bse),e(bse,$ho),e(Kh,kho),e(Kh,xI),e(xI,Sho),e(Kh,Rho),e(he,Pho),e(he,Zh),e(Zh,vse),e(vse,Bho),e(Zh,Iho),e(Zh,$I),e($I,Nho),e(Zh,qho),e(he,jho),e(he,ep),e(ep,Fse),e(Fse,Dho),e(ep,Gho),e(ep,kI),e(kI,Oho),e(ep,Vho),e(he,Xho),e(he,op),e(op,Tse),e(Tse,zho),e(op,Who),e(op,SI),e(SI,Qho),e(op,Hho),e(he,Uho),e(he,rp),e(rp,Mse),e(Mse,Jho),e(rp,Yho),e(rp,RI),e(RI,Kho),e(rp,Zho),e(Ue,epo),M(tp,Ue,null),e(Ue,opo),M(ap,Ue,null),e(yo,rpo),e(yo,np),M(ty,np,null),e(np,tpo),e(np,Ese),e(Ese,apo),b(f,kqe,u),b(f,wi,u),e(wi,sp),e(sp,Cse),M(ay,Cse,null),e(wi,npo),e(wi,wse),e(wse,spo),b(f,Sqe,u),b(f,Lo,u),M(ny,Lo,null),e(Lo,lpo),e(Lo,Ai),e(Ai,ipo),e(Ai,PI),e(PI,dpo),e(Ai,cpo),e(Ai,BI),e(BI,fpo),e(Ai,mpo),e(Lo,gpo),e(Lo,sy),e(sy,hpo),e(sy,Ase),e(Ase,ppo),e(sy,_po),e(Lo,upo),e(Lo,tt),M(ly,tt,null),e(tt,bpo),e(tt,yse),e(yse,vpo),e(tt,Fpo),e(tt,yi),e(yi,Tpo),e(yi,Lse),e(Lse,Mpo),e(yi,Epo),e(yi,II),e(II,Cpo),e(yi,wpo),e(tt,Apo),M(lp,tt,null),e(Lo,ypo),e(Lo,Je),M(iy,Je,null),e(Je,Lpo),e(Je,xse),e(xse,xpo),e(Je,$po),e(Je,La),e(La,kpo),e(La,$se),e($se,Spo),e(La,Rpo),e(La,kse),e(kse,Ppo),e(La,Bpo),e(La,Sse),e(Sse,Ipo),e(La,Npo),e(Je,qpo),e(Je,x),e(x,ip),e(ip,Rse),e(Rse,jpo),e(ip,Dpo),e(ip,NI),e(NI,Gpo),e(ip,Opo),e(x,Vpo),e(x,dp),e(dp,Pse),e(Pse,Xpo),e(dp,zpo),e(dp,qI),e(qI,Wpo),e(dp,Qpo),e(x,Hpo),e(x,cp),e(cp,Bse),e(Bse,Upo),e(cp,Jpo),e(cp,jI),e(jI,Ypo),e(cp,Kpo),e(x,Zpo),e(x,fp),e(fp,Ise),e(Ise,e_o),e(fp,o_o),e(fp,DI),e(DI,r_o),e(fp,t_o),e(x,a_o),e(x,mp),e(mp,Nse),e(Nse,n_o),e(mp,s_o),e(mp,GI),e(GI,l_o),e(mp,i_o),e(x,d_o),e(x,gp),e(gp,qse),e(qse,c_o),e(gp,f_o),e(gp,OI),e(OI,m_o),e(gp,g_o),e(x,h_o),e(x,hp),e(hp,jse),e(jse,p_o),e(hp,__o),e(hp,VI),e(VI,u_o),e(hp,b_o),e(x,v_o),e(x,pp),e(pp,Dse),e(Dse,F_o),e(pp,T_o),e(pp,XI),e(XI,M_o),e(pp,E_o),e(x,C_o),e(x,_p),e(_p,Gse),e(Gse,w_o),e(_p,A_o),e(_p,zI),e(zI,y_o),e(_p,L_o),e(x,x_o),e(x,up),e(up,Ose),e(Ose,$_o),e(up,k_o),e(up,WI),e(WI,S_o),e(up,R_o),e(x,P_o),e(x,bp),e(bp,Vse),e(Vse,B_o),e(bp,I_o),e(bp,QI),e(QI,N_o),e(bp,q_o),e(x,j_o),e(x,vp),e(vp,Xse),e(Xse,D_o),e(vp,G_o),e(vp,HI),e(HI,O_o),e(vp,V_o),e(x,X_o),e(x,Fp),e(Fp,zse),e(zse,z_o),e(Fp,W_o),e(Fp,UI),e(UI,Q_o),e(Fp,H_o),e(x,U_o),e(x,Tp),e(Tp,Wse),e(Wse,J_o),e(Tp,Y_o),e(Tp,JI),e(JI,K_o),e(Tp,Z_o),e(x,euo),e(x,Mp),e(Mp,Qse),e(Qse,ouo),e(Mp,ruo),e(Mp,YI),e(YI,tuo),e(Mp,auo),e(x,nuo),e(x,Ep),e(Ep,Hse),e(Hse,suo),e(Ep,luo),e(Ep,KI),e(KI,iuo),e(Ep,duo),e(x,cuo),e(x,Cp),e(Cp,Use),e(Use,fuo),e(Cp,muo),e(Cp,ZI),e(ZI,guo),e(Cp,huo),e(x,puo),e(x,wp),e(wp,Jse),e(Jse,_uo),e(wp,uuo),e(wp,eN),e(eN,buo),e(wp,vuo),e(x,Fuo),e(x,Ap),e(Ap,Yse),e(Yse,Tuo),e(Ap,Muo),e(Ap,oN),e(oN,Euo),e(Ap,Cuo),e(x,wuo),e(x,yp),e(yp,Kse),e(Kse,Auo),e(yp,yuo),e(yp,rN),e(rN,Luo),e(yp,xuo),e(x,$uo),e(x,Lp),e(Lp,Zse),e(Zse,kuo),e(Lp,Suo),e(Lp,tN),e(tN,Ruo),e(Lp,Puo),e(x,Buo),e(x,xp),e(xp,ele),e(ele,Iuo),e(xp,Nuo),e(xp,aN),e(aN,quo),e(xp,juo),e(x,Duo),e(x,$p),e($p,ole),e(ole,Guo),e($p,Ouo),e($p,nN),e(nN,Vuo),e($p,Xuo),e(x,zuo),e(x,kp),e(kp,rle),e(rle,Wuo),e(kp,Quo),e(kp,sN),e(sN,Huo),e(kp,Uuo),e(x,Juo),e(x,Sp),e(Sp,tle),e(tle,Yuo),e(Sp,Kuo),e(Sp,lN),e(lN,Zuo),e(Sp,e1o),e(x,o1o),e(x,Rp),e(Rp,ale),e(ale,r1o),e(Rp,t1o),e(Rp,iN),e(iN,a1o),e(Rp,n1o),e(x,s1o),e(x,Pp),e(Pp,nle),e(nle,l1o),e(Pp,i1o),e(Pp,dN),e(dN,d1o),e(Pp,c1o),e(x,f1o),e(x,Bp),e(Bp,sle),e(sle,m1o),e(Bp,g1o),e(Bp,cN),e(cN,h1o),e(Bp,p1o),e(x,_1o),e(x,Ip),e(Ip,lle),e(lle,u1o),e(Ip,b1o),e(Ip,fN),e(fN,v1o),e(Ip,F1o),e(x,T1o),e(x,Np),e(Np,ile),e(ile,M1o),e(Np,E1o),e(Np,mN),e(mN,C1o),e(Np,w1o),e(x,A1o),e(x,qp),e(qp,dle),e(dle,y1o),e(qp,L1o),e(qp,gN),e(gN,x1o),e(qp,$1o),e(x,k1o),e(x,jp),e(jp,cle),e(cle,S1o),e(jp,R1o),e(jp,hN),e(hN,P1o),e(jp,B1o),e(x,I1o),e(x,Ps),e(Ps,fle),e(fle,N1o),e(Ps,q1o),e(Ps,pN),e(pN,j1o),e(Ps,D1o),e(Ps,_N),e(_N,G1o),e(Ps,O1o),e(x,V1o),e(x,Dp),e(Dp,mle),e(mle,X1o),e(Dp,z1o),e(Dp,uN),e(uN,W1o),e(Dp,Q1o),e(x,H1o),e(x,Gp),e(Gp,gle),e(gle,U1o),e(Gp,J1o),e(Gp,bN),e(bN,Y1o),e(Gp,K1o),e(x,Z1o),e(x,Op),e(Op,hle),e(hle,ebo),e(Op,obo),e(Op,vN),e(vN,rbo),e(Op,tbo),e(x,abo),e(x,Vp),e(Vp,ple),e(ple,nbo),e(Vp,sbo),e(Vp,FN),e(FN,lbo),e(Vp,ibo),e(x,dbo),e(x,Xp),e(Xp,_le),e(_le,cbo),e(Xp,fbo),e(Xp,TN),e(TN,mbo),e(Xp,gbo),e(x,hbo),e(x,zp),e(zp,ule),e(ule,pbo),e(zp,_bo),e(zp,MN),e(MN,ubo),e(zp,bbo),e(x,vbo),e(x,Wp),e(Wp,ble),e(ble,Fbo),e(Wp,Tbo),e(Wp,EN),e(EN,Mbo),e(Wp,Ebo),e(x,Cbo),e(x,Qp),e(Qp,vle),e(vle,wbo),e(Qp,Abo),e(Qp,CN),e(CN,ybo),e(Qp,Lbo),e(x,xbo),e(x,Hp),e(Hp,Fle),e(Fle,$bo),e(Hp,kbo),e(Hp,wN),e(wN,Sbo),e(Hp,Rbo),e(x,Pbo),e(x,Up),e(Up,Tle),e(Tle,Bbo),e(Up,Ibo),e(Up,AN),e(AN,Nbo),e(Up,qbo),e(x,jbo),e(x,Jp),e(Jp,Mle),e(Mle,Dbo),e(Jp,Gbo),e(Jp,yN),e(yN,Obo),e(Jp,Vbo),e(x,Xbo),e(x,Yp),e(Yp,Ele),e(Ele,zbo),e(Yp,Wbo),e(Yp,LN),e(LN,Qbo),e(Yp,Hbo),e(x,Ubo),e(x,Kp),e(Kp,Cle),e(Cle,Jbo),e(Kp,Ybo),e(Kp,xN),e(xN,Kbo),e(Kp,Zbo),e(x,e2o),e(x,Zp),e(Zp,wle),e(wle,o2o),e(Zp,r2o),e(Zp,$N),e($N,t2o),e(Zp,a2o),e(x,n2o),e(x,e_),e(e_,Ale),e(Ale,s2o),e(e_,l2o),e(e_,kN),e(kN,i2o),e(e_,d2o),e(x,c2o),e(x,o_),e(o_,yle),e(yle,f2o),e(o_,m2o),e(o_,SN),e(SN,g2o),e(o_,h2o),e(x,p2o),e(x,r_),e(r_,Lle),e(Lle,_2o),e(r_,u2o),e(r_,RN),e(RN,b2o),e(r_,v2o),e(x,F2o),e(x,t_),e(t_,xle),e(xle,T2o),e(t_,M2o),e(t_,PN),e(PN,E2o),e(t_,C2o),e(x,w2o),e(x,a_),e(a_,$le),e($le,A2o),e(a_,y2o),e(a_,BN),e(BN,L2o),e(a_,x2o),e(x,$2o),e(x,n_),e(n_,kle),e(kle,k2o),e(n_,S2o),e(n_,IN),e(IN,R2o),e(n_,P2o),e(x,B2o),e(x,s_),e(s_,Sle),e(Sle,I2o),e(s_,N2o),e(s_,NN),e(NN,q2o),e(s_,j2o),e(x,D2o),e(x,l_),e(l_,Rle),e(Rle,G2o),e(l_,O2o),e(l_,qN),e(qN,V2o),e(l_,X2o),e(x,z2o),e(x,i_),e(i_,Ple),e(Ple,W2o),e(i_,Q2o),e(i_,jN),e(jN,H2o),e(i_,U2o),e(x,J2o),e(x,d_),e(d_,Ble),e(Ble,Y2o),e(d_,K2o),e(d_,DN),e(DN,Z2o),e(d_,e5o),e(x,o5o),e(x,c_),e(c_,Ile),e(Ile,r5o),e(c_,t5o),e(c_,GN),e(GN,a5o),e(c_,n5o),e(x,s5o),e(x,f_),e(f_,Nle),e(Nle,l5o),e(f_,i5o),e(f_,ON),e(ON,d5o),e(f_,c5o),e(x,f5o),e(x,m_),e(m_,qle),e(qle,m5o),e(m_,g5o),e(m_,VN),e(VN,h5o),e(m_,p5o),e(x,_5o),e(x,g_),e(g_,jle),e(jle,u5o),e(g_,b5o),e(g_,XN),e(XN,v5o),e(g_,F5o),e(x,T5o),e(x,h_),e(h_,Dle),e(Dle,M5o),e(h_,E5o),e(h_,zN),e(zN,C5o),e(h_,w5o),e(x,A5o),e(x,p_),e(p_,Gle),e(Gle,y5o),e(p_,L5o),e(p_,WN),e(WN,x5o),e(p_,$5o),e(x,k5o),e(x,__),e(__,Ole),e(Ole,S5o),e(__,R5o),e(__,QN),e(QN,P5o),e(__,B5o),e(x,I5o),e(x,u_),e(u_,Vle),e(Vle,N5o),e(u_,q5o),e(u_,HN),e(HN,j5o),e(u_,D5o),e(x,G5o),e(x,b_),e(b_,Xle),e(Xle,O5o),e(b_,V5o),e(b_,UN),e(UN,X5o),e(b_,z5o),e(x,W5o),e(x,v_),e(v_,zle),e(zle,Q5o),e(v_,H5o),e(v_,JN),e(JN,U5o),e(v_,J5o),e(x,Y5o),e(x,F_),e(F_,Wle),e(Wle,K5o),e(F_,Z5o),e(F_,YN),e(YN,evo),e(F_,ovo),e(x,rvo),e(x,T_),e(T_,Qle),e(Qle,tvo),e(T_,avo),e(T_,KN),e(KN,nvo),e(T_,svo),e(x,lvo),e(x,M_),e(M_,Hle),e(Hle,ivo),e(M_,dvo),e(M_,ZN),e(ZN,cvo),e(M_,fvo),e(x,mvo),e(x,E_),e(E_,Ule),e(Ule,gvo),e(E_,hvo),e(E_,eq),e(eq,pvo),e(E_,_vo),e(x,uvo),e(x,C_),e(C_,Jle),e(Jle,bvo),e(C_,vvo),e(C_,oq),e(oq,Fvo),e(C_,Tvo),e(x,Mvo),e(x,w_),e(w_,Yle),e(Yle,Evo),e(w_,Cvo),e(w_,rq),e(rq,wvo),e(w_,Avo),e(x,yvo),e(x,A_),e(A_,Kle),e(Kle,Lvo),e(A_,xvo),e(A_,tq),e(tq,$vo),e(A_,kvo),e(x,Svo),e(x,y_),e(y_,Zle),e(Zle,Rvo),e(y_,Pvo),e(y_,aq),e(aq,Bvo),e(y_,Ivo),e(x,Nvo),e(x,L_),e(L_,eie),e(eie,qvo),e(L_,jvo),e(L_,nq),e(nq,Dvo),e(L_,Gvo),e(x,Ovo),e(x,x_),e(x_,oie),e(oie,Vvo),e(x_,Xvo),e(x_,sq),e(sq,zvo),e(x_,Wvo),e(x,Qvo),e(x,$_),e($_,rie),e(rie,Hvo),e($_,Uvo),e($_,lq),e(lq,Jvo),e($_,Yvo),e(x,Kvo),e(x,k_),e(k_,tie),e(tie,Zvo),e(k_,eFo),e(k_,iq),e(iq,oFo),e(k_,rFo),e(x,tFo),e(x,S_),e(S_,aie),e(aie,aFo),e(S_,nFo),e(S_,dq),e(dq,sFo),e(S_,lFo),e(x,iFo),e(x,R_),e(R_,nie),e(nie,dFo),e(R_,cFo),e(R_,cq),e(cq,fFo),e(R_,mFo),e(x,gFo),e(x,P_),e(P_,sie),e(sie,hFo),e(P_,pFo),e(P_,fq),e(fq,_Fo),e(P_,uFo),e(x,bFo),e(x,B_),e(B_,lie),e(lie,vFo),e(B_,FFo),e(B_,mq),e(mq,TFo),e(B_,MFo),e(x,EFo),e(x,I_),e(I_,iie),e(iie,CFo),e(I_,wFo),e(I_,gq),e(gq,AFo),e(I_,yFo),e(x,LFo),e(x,N_),e(N_,die),e(die,xFo),e(N_,$Fo),e(N_,hq),e(hq,kFo),e(N_,SFo),e(x,RFo),e(x,q_),e(q_,cie),e(cie,PFo),e(q_,BFo),e(q_,pq),e(pq,IFo),e(q_,NFo),e(x,qFo),e(x,j_),e(j_,fie),e(fie,jFo),e(j_,DFo),e(j_,_q),e(_q,GFo),e(j_,OFo),e(x,VFo),e(x,D_),e(D_,mie),e(mie,XFo),e(D_,zFo),e(D_,uq),e(uq,WFo),e(D_,QFo),e(x,HFo),e(x,G_),e(G_,gie),e(gie,UFo),e(G_,JFo),e(G_,bq),e(bq,YFo),e(G_,KFo),e(x,ZFo),e(x,O_),e(O_,hie),e(hie,e0o),e(O_,o0o),e(O_,vq),e(vq,r0o),e(O_,t0o),e(x,a0o),e(x,V_),e(V_,pie),e(pie,n0o),e(V_,s0o),e(V_,Fq),e(Fq,l0o),e(V_,i0o),e(x,d0o),e(x,X_),e(X_,_ie),e(_ie,c0o),e(X_,f0o),e(X_,Tq),e(Tq,m0o),e(X_,g0o),e(x,h0o),e(x,z_),e(z_,uie),e(uie,p0o),e(z_,_0o),e(z_,Mq),e(Mq,u0o),e(z_,b0o),e(x,v0o),e(x,W_),e(W_,bie),e(bie,F0o),e(W_,T0o),e(W_,Eq),e(Eq,M0o),e(W_,E0o),e(x,C0o),e(x,Q_),e(Q_,vie),e(vie,w0o),e(Q_,A0o),e(Q_,Cq),e(Cq,y0o),e(Q_,L0o),e(x,x0o),e(x,H_),e(H_,Fie),e(Fie,$0o),e(H_,k0o),e(H_,wq),e(wq,S0o),e(H_,R0o),e(x,P0o),e(x,U_),e(U_,Tie),e(Tie,B0o),e(U_,I0o),e(U_,Aq),e(Aq,N0o),e(U_,q0o),e(x,j0o),e(x,J_),e(J_,Mie),e(Mie,D0o),e(J_,G0o),e(J_,yq),e(yq,O0o),e(J_,V0o),e(x,X0o),e(x,Y_),e(Y_,Eie),e(Eie,z0o),e(Y_,W0o),e(Y_,Lq),e(Lq,Q0o),e(Y_,H0o),e(x,U0o),e(x,K_),e(K_,Cie),e(Cie,J0o),e(K_,Y0o),e(K_,xq),e(xq,K0o),e(K_,Z0o),e(x,eTo),e(x,Z_),e(Z_,wie),e(wie,oTo),e(Z_,rTo),e(Z_,$q),e($q,tTo),e(Z_,aTo),e(x,nTo),e(x,eu),e(eu,Aie),e(Aie,sTo),e(eu,lTo),e(eu,kq),e(kq,iTo),e(eu,dTo),e(Je,cTo),e(Je,ou),e(ou,fTo),e(ou,yie),e(yie,mTo),e(ou,gTo),e(ou,Lie),e(Lie,hTo),e(Je,pTo),M(ru,Je,null),b(f,Rqe,u),b(f,Li,u),e(Li,tu),e(tu,xie),M(dy,xie,null),e(Li,_To),e(Li,$ie),e($ie,uTo),b(f,Pqe,u),b(f,xo,u),M(cy,xo,null),e(xo,bTo),e(xo,xi),e(xi,vTo),e(xi,Sq),e(Sq,FTo),e(xi,TTo),e(xi,Rq),e(Rq,MTo),e(xi,ETo),e(xo,CTo),e(xo,fy),e(fy,wTo),e(fy,kie),e(kie,ATo),e(fy,yTo),e(xo,LTo),e(xo,at),M(my,at,null),e(at,xTo),e(at,Sie),e(Sie,$To),e(at,kTo),e(at,$i),e($i,STo),e($i,Rie),e(Rie,RTo),e($i,PTo),e($i,Pq),e(Pq,BTo),e($i,ITo),e(at,NTo),M(au,at,null),e(xo,qTo),e(xo,Ye),M(gy,Ye,null),e(Ye,jTo),e(Ye,Pie),e(Pie,DTo),e(Ye,GTo),e(Ye,xa),e(xa,OTo),e(xa,Bie),e(Bie,VTo),e(xa,XTo),e(xa,Iie),e(Iie,zTo),e(xa,WTo),e(xa,Nie),e(Nie,QTo),e(xa,HTo),e(Ye,UTo),e(Ye,G),e(G,nu),e(nu,qie),e(qie,JTo),e(nu,YTo),e(nu,Bq),e(Bq,KTo),e(nu,ZTo),e(G,e7o),e(G,su),e(su,jie),e(jie,o7o),e(su,r7o),e(su,Iq),e(Iq,t7o),e(su,a7o),e(G,n7o),e(G,lu),e(lu,Die),e(Die,s7o),e(lu,l7o),e(lu,Nq),e(Nq,i7o),e(lu,d7o),e(G,c7o),e(G,iu),e(iu,Gie),e(Gie,f7o),e(iu,m7o),e(iu,qq),e(qq,g7o),e(iu,h7o),e(G,p7o),e(G,du),e(du,Oie),e(Oie,_7o),e(du,u7o),e(du,jq),e(jq,b7o),e(du,v7o),e(G,F7o),e(G,cu),e(cu,Vie),e(Vie,T7o),e(cu,M7o),e(cu,Dq),e(Dq,E7o),e(cu,C7o),e(G,w7o),e(G,fu),e(fu,Xie),e(Xie,A7o),e(fu,y7o),e(fu,Gq),e(Gq,L7o),e(fu,x7o),e(G,$7o),e(G,mu),e(mu,zie),e(zie,k7o),e(mu,S7o),e(mu,Oq),e(Oq,R7o),e(mu,P7o),e(G,B7o),e(G,gu),e(gu,Wie),e(Wie,I7o),e(gu,N7o),e(gu,Vq),e(Vq,q7o),e(gu,j7o),e(G,D7o),e(G,hu),e(hu,Qie),e(Qie,G7o),e(hu,O7o),e(hu,Xq),e(Xq,V7o),e(hu,X7o),e(G,z7o),e(G,pu),e(pu,Hie),e(Hie,W7o),e(pu,Q7o),e(pu,zq),e(zq,H7o),e(pu,U7o),e(G,J7o),e(G,_u),e(_u,Uie),e(Uie,Y7o),e(_u,K7o),e(_u,Wq),e(Wq,Z7o),e(_u,eMo),e(G,oMo),e(G,uu),e(uu,Jie),e(Jie,rMo),e(uu,tMo),e(uu,Qq),e(Qq,aMo),e(uu,nMo),e(G,sMo),e(G,bu),e(bu,Yie),e(Yie,lMo),e(bu,iMo),e(bu,Hq),e(Hq,dMo),e(bu,cMo),e(G,fMo),e(G,vu),e(vu,Kie),e(Kie,mMo),e(vu,gMo),e(vu,Uq),e(Uq,hMo),e(vu,pMo),e(G,_Mo),e(G,Fu),e(Fu,Zie),e(Zie,uMo),e(Fu,bMo),e(Fu,Jq),e(Jq,vMo),e(Fu,FMo),e(G,TMo),e(G,Tu),e(Tu,ede),e(ede,MMo),e(Tu,EMo),e(Tu,Yq),e(Yq,CMo),e(Tu,wMo),e(G,AMo),e(G,Mu),e(Mu,ode),e(ode,yMo),e(Mu,LMo),e(Mu,Kq),e(Kq,xMo),e(Mu,$Mo),e(G,kMo),e(G,Eu),e(Eu,rde),e(rde,SMo),e(Eu,RMo),e(Eu,Zq),e(Zq,PMo),e(Eu,BMo),e(G,IMo),e(G,Cu),e(Cu,tde),e(tde,NMo),e(Cu,qMo),e(Cu,ej),e(ej,jMo),e(Cu,DMo),e(G,GMo),e(G,wu),e(wu,ade),e(ade,OMo),e(wu,VMo),e(wu,oj),e(oj,XMo),e(wu,zMo),e(G,WMo),e(G,Au),e(Au,nde),e(nde,QMo),e(Au,HMo),e(Au,rj),e(rj,UMo),e(Au,JMo),e(G,YMo),e(G,yu),e(yu,sde),e(sde,KMo),e(yu,ZMo),e(yu,tj),e(tj,e4o),e(yu,o4o),e(G,r4o),e(G,Lu),e(Lu,lde),e(lde,t4o),e(Lu,a4o),e(Lu,aj),e(aj,n4o),e(Lu,s4o),e(G,l4o),e(G,xu),e(xu,ide),e(ide,i4o),e(xu,d4o),e(xu,nj),e(nj,c4o),e(xu,f4o),e(G,m4o),e(G,$u),e($u,dde),e(dde,g4o),e($u,h4o),e($u,sj),e(sj,p4o),e($u,_4o),e(G,u4o),e(G,ku),e(ku,cde),e(cde,b4o),e(ku,v4o),e(ku,lj),e(lj,F4o),e(ku,T4o),e(G,M4o),e(G,Su),e(Su,fde),e(fde,E4o),e(Su,C4o),e(Su,ij),e(ij,w4o),e(Su,A4o),e(G,y4o),e(G,Ru),e(Ru,mde),e(mde,L4o),e(Ru,x4o),e(Ru,dj),e(dj,$4o),e(Ru,k4o),e(G,S4o),e(G,Pu),e(Pu,gde),e(gde,R4o),e(Pu,P4o),e(Pu,cj),e(cj,B4o),e(Pu,I4o),e(G,N4o),e(G,Bu),e(Bu,hde),e(hde,q4o),e(Bu,j4o),e(Bu,fj),e(fj,D4o),e(Bu,G4o),e(G,O4o),e(G,Iu),e(Iu,pde),e(pde,V4o),e(Iu,X4o),e(Iu,mj),e(mj,z4o),e(Iu,W4o),e(G,Q4o),e(G,Nu),e(Nu,_de),e(_de,H4o),e(Nu,U4o),e(Nu,gj),e(gj,J4o),e(Nu,Y4o),e(G,K4o),e(G,qu),e(qu,ude),e(ude,Z4o),e(qu,eEo),e(qu,hj),e(hj,oEo),e(qu,rEo),e(G,tEo),e(G,ju),e(ju,bde),e(bde,aEo),e(ju,nEo),e(ju,pj),e(pj,sEo),e(ju,lEo),e(G,iEo),e(G,Du),e(Du,vde),e(vde,dEo),e(Du,cEo),e(Du,_j),e(_j,fEo),e(Du,mEo),e(G,gEo),e(G,Gu),e(Gu,Fde),e(Fde,hEo),e(Gu,pEo),e(Gu,uj),e(uj,_Eo),e(Gu,uEo),e(G,bEo),e(G,Ou),e(Ou,Tde),e(Tde,vEo),e(Ou,FEo),e(Ou,bj),e(bj,TEo),e(Ou,MEo),e(G,EEo),e(G,Vu),e(Vu,Mde),e(Mde,CEo),e(Vu,wEo),e(Vu,vj),e(vj,AEo),e(Vu,yEo),e(G,LEo),e(G,Xu),e(Xu,Ede),e(Ede,xEo),e(Xu,$Eo),e(Xu,Fj),e(Fj,kEo),e(Xu,SEo),e(G,REo),e(G,zu),e(zu,Cde),e(Cde,PEo),e(zu,BEo),e(zu,Tj),e(Tj,IEo),e(zu,NEo),e(G,qEo),e(G,Wu),e(Wu,wde),e(wde,jEo),e(Wu,DEo),e(Wu,Mj),e(Mj,GEo),e(Wu,OEo),e(Ye,VEo),e(Ye,Qu),e(Qu,XEo),e(Qu,Ade),e(Ade,zEo),e(Qu,WEo),e(Qu,yde),e(yde,QEo),e(Ye,HEo),M(Hu,Ye,null),b(f,Bqe,u),b(f,ki,u),e(ki,Uu),e(Uu,Lde),M(hy,Lde,null),e(ki,UEo),e(ki,xde),e(xde,JEo),b(f,Iqe,u),b(f,$o,u),M(py,$o,null),e($o,YEo),e($o,Si),e(Si,KEo),e(Si,Ej),e(Ej,ZEo),e(Si,eCo),e(Si,Cj),e(Cj,oCo),e(Si,rCo),e($o,tCo),e($o,_y),e(_y,aCo),e(_y,$de),e($de,nCo),e(_y,sCo),e($o,lCo),e($o,nt),M(uy,nt,null),e(nt,iCo),e(nt,kde),e(kde,dCo),e(nt,cCo),e(nt,Ri),e(Ri,fCo),e(Ri,Sde),e(Sde,mCo),e(Ri,gCo),e(Ri,wj),e(wj,hCo),e(Ri,pCo),e(nt,_Co),M(Ju,nt,null),e($o,uCo),e($o,Ke),M(by,Ke,null),e(Ke,bCo),e(Ke,Rde),e(Rde,vCo),e(Ke,FCo),e(Ke,$a),e($a,TCo),e($a,Pde),e(Pde,MCo),e($a,ECo),e($a,Bde),e(Bde,CCo),e($a,wCo),e($a,Ide),e(Ide,ACo),e($a,yCo),e(Ke,LCo),e(Ke,z),e(z,Yu),e(Yu,Nde),e(Nde,xCo),e(Yu,$Co),e(Yu,Aj),e(Aj,kCo),e(Yu,SCo),e(z,RCo),e(z,Ku),e(Ku,qde),e(qde,PCo),e(Ku,BCo),e(Ku,yj),e(yj,ICo),e(Ku,NCo),e(z,qCo),e(z,Zu),e(Zu,jde),e(jde,jCo),e(Zu,DCo),e(Zu,Lj),e(Lj,GCo),e(Zu,OCo),e(z,VCo),e(z,e1),e(e1,Dde),e(Dde,XCo),e(e1,zCo),e(e1,xj),e(xj,WCo),e(e1,QCo),e(z,HCo),e(z,o1),e(o1,Gde),e(Gde,UCo),e(o1,JCo),e(o1,$j),e($j,YCo),e(o1,KCo),e(z,ZCo),e(z,r1),e(r1,Ode),e(Ode,e3o),e(r1,o3o),e(r1,kj),e(kj,r3o),e(r1,t3o),e(z,a3o),e(z,t1),e(t1,Vde),e(Vde,n3o),e(t1,s3o),e(t1,Sj),e(Sj,l3o),e(t1,i3o),e(z,d3o),e(z,a1),e(a1,Xde),e(Xde,c3o),e(a1,f3o),e(a1,Rj),e(Rj,m3o),e(a1,g3o),e(z,h3o),e(z,n1),e(n1,zde),e(zde,p3o),e(n1,_3o),e(n1,Pj),e(Pj,u3o),e(n1,b3o),e(z,v3o),e(z,s1),e(s1,Wde),e(Wde,F3o),e(s1,T3o),e(s1,Bj),e(Bj,M3o),e(s1,E3o),e(z,C3o),e(z,l1),e(l1,Qde),e(Qde,w3o),e(l1,A3o),e(l1,Ij),e(Ij,y3o),e(l1,L3o),e(z,x3o),e(z,i1),e(i1,Hde),e(Hde,$3o),e(i1,k3o),e(i1,Nj),e(Nj,S3o),e(i1,R3o),e(z,P3o),e(z,d1),e(d1,Ude),e(Ude,B3o),e(d1,I3o),e(d1,qj),e(qj,N3o),e(d1,q3o),e(z,j3o),e(z,c1),e(c1,Jde),e(Jde,D3o),e(c1,G3o),e(c1,jj),e(jj,O3o),e(c1,V3o),e(z,X3o),e(z,f1),e(f1,Yde),e(Yde,z3o),e(f1,W3o),e(f1,Dj),e(Dj,Q3o),e(f1,H3o),e(z,U3o),e(z,m1),e(m1,Kde),e(Kde,J3o),e(m1,Y3o),e(m1,Gj),e(Gj,K3o),e(m1,Z3o),e(z,ewo),e(z,g1),e(g1,Zde),e(Zde,owo),e(g1,rwo),e(g1,Oj),e(Oj,two),e(g1,awo),e(z,nwo),e(z,h1),e(h1,ece),e(ece,swo),e(h1,lwo),e(h1,Vj),e(Vj,iwo),e(h1,dwo),e(z,cwo),e(z,p1),e(p1,oce),e(oce,fwo),e(p1,mwo),e(p1,Xj),e(Xj,gwo),e(p1,hwo),e(z,pwo),e(z,_1),e(_1,rce),e(rce,_wo),e(_1,uwo),e(_1,zj),e(zj,bwo),e(_1,vwo),e(z,Fwo),e(z,u1),e(u1,tce),e(tce,Two),e(u1,Mwo),e(u1,Wj),e(Wj,Ewo),e(u1,Cwo),e(z,wwo),e(z,b1),e(b1,ace),e(ace,Awo),e(b1,ywo),e(b1,Qj),e(Qj,Lwo),e(b1,xwo),e(z,$wo),e(z,v1),e(v1,nce),e(nce,kwo),e(v1,Swo),e(v1,Hj),e(Hj,Rwo),e(v1,Pwo),e(z,Bwo),e(z,F1),e(F1,sce),e(sce,Iwo),e(F1,Nwo),e(F1,Uj),e(Uj,qwo),e(F1,jwo),e(z,Dwo),e(z,T1),e(T1,lce),e(lce,Gwo),e(T1,Owo),e(T1,Jj),e(Jj,Vwo),e(T1,Xwo),e(z,zwo),e(z,M1),e(M1,ice),e(ice,Wwo),e(M1,Qwo),e(M1,Yj),e(Yj,Hwo),e(M1,Uwo),e(z,Jwo),e(z,E1),e(E1,dce),e(dce,Ywo),e(E1,Kwo),e(E1,Kj),e(Kj,Zwo),e(E1,e6o),e(z,o6o),e(z,C1),e(C1,cce),e(cce,r6o),e(C1,t6o),e(C1,Zj),e(Zj,a6o),e(C1,n6o),e(z,s6o),e(z,w1),e(w1,fce),e(fce,l6o),e(w1,i6o),e(w1,eD),e(eD,d6o),e(w1,c6o),e(z,f6o),e(z,A1),e(A1,mce),e(mce,m6o),e(A1,g6o),e(A1,oD),e(oD,h6o),e(A1,p6o),e(z,_6o),e(z,y1),e(y1,gce),e(gce,u6o),e(y1,b6o),e(y1,rD),e(rD,v6o),e(y1,F6o),e(z,T6o),e(z,L1),e(L1,hce),e(hce,M6o),e(L1,E6o),e(L1,tD),e(tD,C6o),e(L1,w6o),e(z,A6o),e(z,x1),e(x1,pce),e(pce,y6o),e(x1,L6o),e(x1,aD),e(aD,x6o),e(x1,$6o),e(z,k6o),e(z,$1),e($1,_ce),e(_ce,S6o),e($1,R6o),e($1,nD),e(nD,P6o),e($1,B6o),e(z,I6o),e(z,k1),e(k1,uce),e(uce,N6o),e(k1,q6o),e(k1,sD),e(sD,j6o),e(k1,D6o),e(z,G6o),e(z,S1),e(S1,bce),e(bce,O6o),e(S1,V6o),e(S1,lD),e(lD,X6o),e(S1,z6o),e(z,W6o),e(z,R1),e(R1,vce),e(vce,Q6o),e(R1,H6o),e(R1,iD),e(iD,U6o),e(R1,J6o),e(Ke,Y6o),e(Ke,P1),e(P1,K6o),e(P1,Fce),e(Fce,Z6o),e(P1,eAo),e(P1,Tce),e(Tce,oAo),e(Ke,rAo),M(B1,Ke,null),b(f,Nqe,u),b(f,Pi,u),e(Pi,I1),e(I1,Mce),M(vy,Mce,null),e(Pi,tAo),e(Pi,Ece),e(Ece,aAo),b(f,qqe,u),b(f,ko,u),M(Fy,ko,null),e(ko,nAo),e(ko,Bi),e(Bi,sAo),e(Bi,dD),e(dD,lAo),e(Bi,iAo),e(Bi,cD),e(cD,dAo),e(Bi,cAo),e(ko,fAo),e(ko,Ty),e(Ty,mAo),e(Ty,Cce),e(Cce,gAo),e(Ty,hAo),e(ko,pAo),e(ko,st),M(My,st,null),e(st,_Ao),e(st,wce),e(wce,uAo),e(st,bAo),e(st,Ii),e(Ii,vAo),e(Ii,Ace),e(Ace,FAo),e(Ii,TAo),e(Ii,fD),e(fD,MAo),e(Ii,EAo),e(st,CAo),M(N1,st,null),e(ko,wAo),e(ko,Ze),M(Ey,Ze,null),e(Ze,AAo),e(Ze,yce),e(yce,yAo),e(Ze,LAo),e(Ze,ka),e(ka,xAo),e(ka,Lce),e(Lce,$Ao),e(ka,kAo),e(ka,xce),e(xce,SAo),e(ka,RAo),e(ka,$ce),e($ce,PAo),e(ka,BAo),e(Ze,IAo),e(Ze,W),e(W,q1),e(q1,kce),e(kce,NAo),e(q1,qAo),e(q1,mD),e(mD,jAo),e(q1,DAo),e(W,GAo),e(W,j1),e(j1,Sce),e(Sce,OAo),e(j1,VAo),e(j1,gD),e(gD,XAo),e(j1,zAo),e(W,WAo),e(W,D1),e(D1,Rce),e(Rce,QAo),e(D1,HAo),e(D1,hD),e(hD,UAo),e(D1,JAo),e(W,YAo),e(W,G1),e(G1,Pce),e(Pce,KAo),e(G1,ZAo),e(G1,pD),e(pD,eyo),e(G1,oyo),e(W,ryo),e(W,O1),e(O1,Bce),e(Bce,tyo),e(O1,ayo),e(O1,_D),e(_D,nyo),e(O1,syo),e(W,lyo),e(W,V1),e(V1,Ice),e(Ice,iyo),e(V1,dyo),e(V1,uD),e(uD,cyo),e(V1,fyo),e(W,myo),e(W,X1),e(X1,Nce),e(Nce,gyo),e(X1,hyo),e(X1,bD),e(bD,pyo),e(X1,_yo),e(W,uyo),e(W,z1),e(z1,qce),e(qce,byo),e(z1,vyo),e(z1,vD),e(vD,Fyo),e(z1,Tyo),e(W,Myo),e(W,W1),e(W1,jce),e(jce,Eyo),e(W1,Cyo),e(W1,FD),e(FD,wyo),e(W1,Ayo),e(W,yyo),e(W,Q1),e(Q1,Dce),e(Dce,Lyo),e(Q1,xyo),e(Q1,TD),e(TD,$yo),e(Q1,kyo),e(W,Syo),e(W,H1),e(H1,Gce),e(Gce,Ryo),e(H1,Pyo),e(H1,MD),e(MD,Byo),e(H1,Iyo),e(W,Nyo),e(W,U1),e(U1,Oce),e(Oce,qyo),e(U1,jyo),e(U1,ED),e(ED,Dyo),e(U1,Gyo),e(W,Oyo),e(W,J1),e(J1,Vce),e(Vce,Vyo),e(J1,Xyo),e(J1,CD),e(CD,zyo),e(J1,Wyo),e(W,Qyo),e(W,Y1),e(Y1,Xce),e(Xce,Hyo),e(Y1,Uyo),e(Y1,wD),e(wD,Jyo),e(Y1,Yyo),e(W,Kyo),e(W,K1),e(K1,zce),e(zce,Zyo),e(K1,eLo),e(K1,AD),e(AD,oLo),e(K1,rLo),e(W,tLo),e(W,Z1),e(Z1,Wce),e(Wce,aLo),e(Z1,nLo),e(Z1,yD),e(yD,sLo),e(Z1,lLo),e(W,iLo),e(W,eb),e(eb,Qce),e(Qce,dLo),e(eb,cLo),e(eb,LD),e(LD,fLo),e(eb,mLo),e(W,gLo),e(W,ob),e(ob,Hce),e(Hce,hLo),e(ob,pLo),e(ob,xD),e(xD,_Lo),e(ob,uLo),e(W,bLo),e(W,rb),e(rb,Uce),e(Uce,vLo),e(rb,FLo),e(rb,$D),e($D,TLo),e(rb,MLo),e(W,ELo),e(W,tb),e(tb,Jce),e(Jce,CLo),e(tb,wLo),e(tb,kD),e(kD,ALo),e(tb,yLo),e(W,LLo),e(W,ab),e(ab,Yce),e(Yce,xLo),e(ab,$Lo),e(ab,SD),e(SD,kLo),e(ab,SLo),e(W,RLo),e(W,nb),e(nb,Kce),e(Kce,PLo),e(nb,BLo),e(nb,RD),e(RD,ILo),e(nb,NLo),e(W,qLo),e(W,sb),e(sb,Zce),e(Zce,jLo),e(sb,DLo),e(sb,PD),e(PD,GLo),e(sb,OLo),e(W,VLo),e(W,lb),e(lb,efe),e(efe,XLo),e(lb,zLo),e(lb,BD),e(BD,WLo),e(lb,QLo),e(W,HLo),e(W,ib),e(ib,ofe),e(ofe,ULo),e(ib,JLo),e(ib,ID),e(ID,YLo),e(ib,KLo),e(W,ZLo),e(W,db),e(db,rfe),e(rfe,e8o),e(db,o8o),e(db,ND),e(ND,r8o),e(db,t8o),e(W,a8o),e(W,cb),e(cb,tfe),e(tfe,n8o),e(cb,s8o),e(cb,qD),e(qD,l8o),e(cb,i8o),e(W,d8o),e(W,fb),e(fb,afe),e(afe,c8o),e(fb,f8o),e(fb,jD),e(jD,m8o),e(fb,g8o),e(W,h8o),e(W,mb),e(mb,nfe),e(nfe,p8o),e(mb,_8o),e(mb,DD),e(DD,u8o),e(mb,b8o),e(W,v8o),e(W,gb),e(gb,sfe),e(sfe,F8o),e(gb,T8o),e(gb,GD),e(GD,M8o),e(gb,E8o),e(W,C8o),e(W,hb),e(hb,lfe),e(lfe,w8o),e(hb,A8o),e(hb,OD),e(OD,y8o),e(hb,L8o),e(W,x8o),e(W,pb),e(pb,ife),e(ife,$8o),e(pb,k8o),e(pb,dfe),e(dfe,S8o),e(pb,R8o),e(W,P8o),e(W,_b),e(_b,cfe),e(cfe,B8o),e(_b,I8o),e(_b,VD),e(VD,N8o),e(_b,q8o),e(W,j8o),e(W,ub),e(ub,ffe),e(ffe,D8o),e(ub,G8o),e(ub,XD),e(XD,O8o),e(ub,V8o),e(W,X8o),e(W,bb),e(bb,mfe),e(mfe,z8o),e(bb,W8o),e(bb,zD),e(zD,Q8o),e(bb,H8o),e(W,U8o),e(W,vb),e(vb,gfe),e(gfe,J8o),e(vb,Y8o),e(vb,WD),e(WD,K8o),e(vb,Z8o),e(Ze,e9o),e(Ze,Fb),e(Fb,o9o),e(Fb,hfe),e(hfe,r9o),e(Fb,t9o),e(Fb,pfe),e(pfe,a9o),e(Ze,n9o),M(Tb,Ze,null),b(f,jqe,u),b(f,Ni,u),e(Ni,Mb),e(Mb,_fe),M(Cy,_fe,null),e(Ni,s9o),e(Ni,ufe),e(ufe,l9o),b(f,Dqe,u),b(f,So,u),M(wy,So,null),e(So,i9o),e(So,qi),e(qi,d9o),e(qi,QD),e(QD,c9o),e(qi,f9o),e(qi,HD),e(HD,m9o),e(qi,g9o),e(So,h9o),e(So,Ay),e(Ay,p9o),e(Ay,bfe),e(bfe,_9o),e(Ay,u9o),e(So,b9o),e(So,lt),M(yy,lt,null),e(lt,v9o),e(lt,vfe),e(vfe,F9o),e(lt,T9o),e(lt,ji),e(ji,M9o),e(ji,Ffe),e(Ffe,E9o),e(ji,C9o),e(ji,UD),e(UD,w9o),e(ji,A9o),e(lt,y9o),M(Eb,lt,null),e(So,L9o),e(So,eo),M(Ly,eo,null),e(eo,x9o),e(eo,Tfe),e(Tfe,$9o),e(eo,k9o),e(eo,Sa),e(Sa,S9o),e(Sa,Mfe),e(Mfe,R9o),e(Sa,P9o),e(Sa,Efe),e(Efe,B9o),e(Sa,I9o),e(Sa,Cfe),e(Cfe,N9o),e(Sa,q9o),e(eo,j9o),e(eo,_e),e(_e,Cb),e(Cb,wfe),e(wfe,D9o),e(Cb,G9o),e(Cb,JD),e(JD,O9o),e(Cb,V9o),e(_e,X9o),e(_e,wb),e(wb,Afe),e(Afe,z9o),e(wb,W9o),e(wb,YD),e(YD,Q9o),e(wb,H9o),e(_e,U9o),e(_e,Ab),e(Ab,yfe),e(yfe,J9o),e(Ab,Y9o),e(Ab,KD),e(KD,K9o),e(Ab,Z9o),e(_e,exo),e(_e,yb),e(yb,Lfe),e(Lfe,oxo),e(yb,rxo),e(yb,ZD),e(ZD,txo),e(yb,axo),e(_e,nxo),e(_e,Lb),e(Lb,xfe),e(xfe,sxo),e(Lb,lxo),e(Lb,eG),e(eG,ixo),e(Lb,dxo),e(_e,cxo),e(_e,xb),e(xb,$fe),e($fe,fxo),e(xb,mxo),e(xb,oG),e(oG,gxo),e(xb,hxo),e(_e,pxo),e(_e,$b),e($b,kfe),e(kfe,_xo),e($b,uxo),e($b,rG),e(rG,bxo),e($b,vxo),e(_e,Fxo),e(_e,kb),e(kb,Sfe),e(Sfe,Txo),e(kb,Mxo),e(kb,tG),e(tG,Exo),e(kb,Cxo),e(_e,wxo),e(_e,Sb),e(Sb,Rfe),e(Rfe,Axo),e(Sb,yxo),e(Sb,aG),e(aG,Lxo),e(Sb,xxo),e(_e,$xo),e(_e,Rb),e(Rb,Pfe),e(Pfe,kxo),e(Rb,Sxo),e(Rb,nG),e(nG,Rxo),e(Rb,Pxo),e(_e,Bxo),e(_e,Pb),e(Pb,Bfe),e(Bfe,Ixo),e(Pb,Nxo),e(Pb,sG),e(sG,qxo),e(Pb,jxo),e(_e,Dxo),e(_e,Bb),e(Bb,Ife),e(Ife,Gxo),e(Bb,Oxo),e(Bb,lG),e(lG,Vxo),e(Bb,Xxo),e(_e,zxo),e(_e,Ib),e(Ib,Nfe),e(Nfe,Wxo),e(Ib,Qxo),e(Ib,iG),e(iG,Hxo),e(Ib,Uxo),e(_e,Jxo),e(_e,Nb),e(Nb,qfe),e(qfe,Yxo),e(Nb,Kxo),e(Nb,dG),e(dG,Zxo),e(Nb,e$o),e(_e,o$o),e(_e,qb),e(qb,jfe),e(jfe,r$o),e(qb,t$o),e(qb,cG),e(cG,a$o),e(qb,n$o),e(_e,s$o),e(_e,jb),e(jb,Dfe),e(Dfe,l$o),e(jb,i$o),e(jb,fG),e(fG,d$o),e(jb,c$o),e(eo,f$o),e(eo,Db),e(Db,m$o),e(Db,Gfe),e(Gfe,g$o),e(Db,h$o),e(Db,Ofe),e(Ofe,p$o),e(eo,_$o),M(Gb,eo,null),b(f,Gqe,u),b(f,Di,u),e(Di,Ob),e(Ob,Vfe),M(xy,Vfe,null),e(Di,u$o),e(Di,Xfe),e(Xfe,b$o),b(f,Oqe,u),b(f,Ro,u),M($y,Ro,null),e(Ro,v$o),e(Ro,Gi),e(Gi,F$o),e(Gi,mG),e(mG,T$o),e(Gi,M$o),e(Gi,gG),e(gG,E$o),e(Gi,C$o),e(Ro,w$o),e(Ro,ky),e(ky,A$o),e(ky,zfe),e(zfe,y$o),e(ky,L$o),e(Ro,x$o),e(Ro,it),M(Sy,it,null),e(it,$$o),e(it,Wfe),e(Wfe,k$o),e(it,S$o),e(it,Oi),e(Oi,R$o),e(Oi,Qfe),e(Qfe,P$o),e(Oi,B$o),e(Oi,hG),e(hG,I$o),e(Oi,N$o),e(it,q$o),M(Vb,it,null),e(Ro,j$o),e(Ro,oo),M(Ry,oo,null),e(oo,D$o),e(oo,Hfe),e(Hfe,G$o),e(oo,O$o),e(oo,Ra),e(Ra,V$o),e(Ra,Ufe),e(Ufe,X$o),e(Ra,z$o),e(Ra,Jfe),e(Jfe,W$o),e(Ra,Q$o),e(Ra,Yfe),e(Yfe,H$o),e(Ra,U$o),e(oo,J$o),e(oo,N),e(N,Xb),e(Xb,Kfe),e(Kfe,Y$o),e(Xb,K$o),e(Xb,pG),e(pG,Z$o),e(Xb,eko),e(N,oko),e(N,zb),e(zb,Zfe),e(Zfe,rko),e(zb,tko),e(zb,_G),e(_G,ako),e(zb,nko),e(N,sko),e(N,Wb),e(Wb,eme),e(eme,lko),e(Wb,iko),e(Wb,uG),e(uG,dko),e(Wb,cko),e(N,fko),e(N,Qb),e(Qb,ome),e(ome,mko),e(Qb,gko),e(Qb,bG),e(bG,hko),e(Qb,pko),e(N,_ko),e(N,Hb),e(Hb,rme),e(rme,uko),e(Hb,bko),e(Hb,vG),e(vG,vko),e(Hb,Fko),e(N,Tko),e(N,Ub),e(Ub,tme),e(tme,Mko),e(Ub,Eko),e(Ub,FG),e(FG,Cko),e(Ub,wko),e(N,Ako),e(N,Jb),e(Jb,ame),e(ame,yko),e(Jb,Lko),e(Jb,TG),e(TG,xko),e(Jb,$ko),e(N,kko),e(N,Yb),e(Yb,nme),e(nme,Sko),e(Yb,Rko),e(Yb,MG),e(MG,Pko),e(Yb,Bko),e(N,Iko),e(N,Kb),e(Kb,sme),e(sme,Nko),e(Kb,qko),e(Kb,EG),e(EG,jko),e(Kb,Dko),e(N,Gko),e(N,Zb),e(Zb,lme),e(lme,Oko),e(Zb,Vko),e(Zb,CG),e(CG,Xko),e(Zb,zko),e(N,Wko),e(N,e2),e(e2,ime),e(ime,Qko),e(e2,Hko),e(e2,wG),e(wG,Uko),e(e2,Jko),e(N,Yko),e(N,o2),e(o2,dme),e(dme,Kko),e(o2,Zko),e(o2,AG),e(AG,eSo),e(o2,oSo),e(N,rSo),e(N,r2),e(r2,cme),e(cme,tSo),e(r2,aSo),e(r2,yG),e(yG,nSo),e(r2,sSo),e(N,lSo),e(N,t2),e(t2,fme),e(fme,iSo),e(t2,dSo),e(t2,LG),e(LG,cSo),e(t2,fSo),e(N,mSo),e(N,a2),e(a2,mme),e(mme,gSo),e(a2,hSo),e(a2,xG),e(xG,pSo),e(a2,_So),e(N,uSo),e(N,n2),e(n2,gme),e(gme,bSo),e(n2,vSo),e(n2,$G),e($G,FSo),e(n2,TSo),e(N,MSo),e(N,s2),e(s2,hme),e(hme,ESo),e(s2,CSo),e(s2,kG),e(kG,wSo),e(s2,ASo),e(N,ySo),e(N,l2),e(l2,pme),e(pme,LSo),e(l2,xSo),e(l2,SG),e(SG,$So),e(l2,kSo),e(N,SSo),e(N,i2),e(i2,_me),e(_me,RSo),e(i2,PSo),e(i2,RG),e(RG,BSo),e(i2,ISo),e(N,NSo),e(N,d2),e(d2,ume),e(ume,qSo),e(d2,jSo),e(d2,PG),e(PG,DSo),e(d2,GSo),e(N,OSo),e(N,c2),e(c2,bme),e(bme,VSo),e(c2,XSo),e(c2,BG),e(BG,zSo),e(c2,WSo),e(N,QSo),e(N,f2),e(f2,vme),e(vme,HSo),e(f2,USo),e(f2,IG),e(IG,JSo),e(f2,YSo),e(N,KSo),e(N,m2),e(m2,Fme),e(Fme,ZSo),e(m2,eRo),e(m2,NG),e(NG,oRo),e(m2,rRo),e(N,tRo),e(N,g2),e(g2,Tme),e(Tme,aRo),e(g2,nRo),e(g2,qG),e(qG,sRo),e(g2,lRo),e(N,iRo),e(N,h2),e(h2,Mme),e(Mme,dRo),e(h2,cRo),e(h2,jG),e(jG,fRo),e(h2,mRo),e(N,gRo),e(N,p2),e(p2,Eme),e(Eme,hRo),e(p2,pRo),e(p2,DG),e(DG,_Ro),e(p2,uRo),e(N,bRo),e(N,_2),e(_2,Cme),e(Cme,vRo),e(_2,FRo),e(_2,GG),e(GG,TRo),e(_2,MRo),e(N,ERo),e(N,u2),e(u2,wme),e(wme,CRo),e(u2,wRo),e(u2,OG),e(OG,ARo),e(u2,yRo),e(N,LRo),e(N,b2),e(b2,Ame),e(Ame,xRo),e(b2,$Ro),e(b2,VG),e(VG,kRo),e(b2,SRo),e(N,RRo),e(N,v2),e(v2,yme),e(yme,PRo),e(v2,BRo),e(v2,XG),e(XG,IRo),e(v2,NRo),e(N,qRo),e(N,F2),e(F2,Lme),e(Lme,jRo),e(F2,DRo),e(F2,zG),e(zG,GRo),e(F2,ORo),e(N,VRo),e(N,T2),e(T2,xme),e(xme,XRo),e(T2,zRo),e(T2,WG),e(WG,WRo),e(T2,QRo),e(N,HRo),e(N,M2),e(M2,$me),e($me,URo),e(M2,JRo),e(M2,QG),e(QG,YRo),e(M2,KRo),e(N,ZRo),e(N,E2),e(E2,kme),e(kme,ePo),e(E2,oPo),e(E2,HG),e(HG,rPo),e(E2,tPo),e(N,aPo),e(N,C2),e(C2,Sme),e(Sme,nPo),e(C2,sPo),e(C2,UG),e(UG,lPo),e(C2,iPo),e(N,dPo),e(N,w2),e(w2,Rme),e(Rme,cPo),e(w2,fPo),e(w2,JG),e(JG,mPo),e(w2,gPo),e(N,hPo),e(N,A2),e(A2,Pme),e(Pme,pPo),e(A2,_Po),e(A2,YG),e(YG,uPo),e(A2,bPo),e(N,vPo),e(N,y2),e(y2,Bme),e(Bme,FPo),e(y2,TPo),e(y2,KG),e(KG,MPo),e(y2,EPo),e(N,CPo),e(N,L2),e(L2,Ime),e(Ime,wPo),e(L2,APo),e(L2,ZG),e(ZG,yPo),e(L2,LPo),e(N,xPo),e(N,x2),e(x2,Nme),e(Nme,$Po),e(x2,kPo),e(x2,eO),e(eO,SPo),e(x2,RPo),e(N,PPo),e(N,$2),e($2,qme),e(qme,BPo),e($2,IPo),e($2,oO),e(oO,NPo),e($2,qPo),e(N,jPo),e(N,k2),e(k2,jme),e(jme,DPo),e(k2,GPo),e(k2,rO),e(rO,OPo),e(k2,VPo),e(N,XPo),e(N,S2),e(S2,Dme),e(Dme,zPo),e(S2,WPo),e(S2,tO),e(tO,QPo),e(S2,HPo),e(N,UPo),e(N,R2),e(R2,Gme),e(Gme,JPo),e(R2,YPo),e(R2,aO),e(aO,KPo),e(R2,ZPo),e(N,eBo),e(N,P2),e(P2,Ome),e(Ome,oBo),e(P2,rBo),e(P2,nO),e(nO,tBo),e(P2,aBo),e(N,nBo),e(N,B2),e(B2,Vme),e(Vme,sBo),e(B2,lBo),e(B2,sO),e(sO,iBo),e(B2,dBo),e(N,cBo),e(N,I2),e(I2,Xme),e(Xme,fBo),e(I2,mBo),e(I2,lO),e(lO,gBo),e(I2,hBo),e(oo,pBo),e(oo,N2),e(N2,_Bo),e(N2,zme),e(zme,uBo),e(N2,bBo),e(N2,Wme),e(Wme,vBo),e(oo,FBo),M(q2,oo,null),b(f,Vqe,u),b(f,Vi,u),e(Vi,j2),e(j2,Qme),M(Py,Qme,null),e(Vi,TBo),e(Vi,Hme),e(Hme,MBo),b(f,Xqe,u),b(f,Po,u),M(By,Po,null),e(Po,EBo),e(Po,Xi),e(Xi,CBo),e(Xi,iO),e(iO,wBo),e(Xi,ABo),e(Xi,dO),e(dO,yBo),e(Xi,LBo),e(Po,xBo),e(Po,Iy),e(Iy,$Bo),e(Iy,Ume),e(Ume,kBo),e(Iy,SBo),e(Po,RBo),e(Po,dt),M(Ny,dt,null),e(dt,PBo),e(dt,Jme),e(Jme,BBo),e(dt,IBo),e(dt,zi),e(zi,NBo),e(zi,Yme),e(Yme,qBo),e(zi,jBo),e(zi,cO),e(cO,DBo),e(zi,GBo),e(dt,OBo),M(D2,dt,null),e(Po,VBo),e(Po,ro),M(qy,ro,null),e(ro,XBo),e(ro,Kme),e(Kme,zBo),e(ro,WBo),e(ro,Pa),e(Pa,QBo),e(Pa,Zme),e(Zme,HBo),e(Pa,UBo),e(Pa,ege),e(ege,JBo),e(Pa,YBo),e(Pa,oge),e(oge,KBo),e(Pa,ZBo),e(ro,eIo),e(ro,K),e(K,G2),e(G2,rge),e(rge,oIo),e(G2,rIo),e(G2,fO),e(fO,tIo),e(G2,aIo),e(K,nIo),e(K,O2),e(O2,tge),e(tge,sIo),e(O2,lIo),e(O2,mO),e(mO,iIo),e(O2,dIo),e(K,cIo),e(K,V2),e(V2,age),e(age,fIo),e(V2,mIo),e(V2,gO),e(gO,gIo),e(V2,hIo),e(K,pIo),e(K,X2),e(X2,nge),e(nge,_Io),e(X2,uIo),e(X2,hO),e(hO,bIo),e(X2,vIo),e(K,FIo),e(K,z2),e(z2,sge),e(sge,TIo),e(z2,MIo),e(z2,pO),e(pO,EIo),e(z2,CIo),e(K,wIo),e(K,W2),e(W2,lge),e(lge,AIo),e(W2,yIo),e(W2,_O),e(_O,LIo),e(W2,xIo),e(K,$Io),e(K,Q2),e(Q2,ige),e(ige,kIo),e(Q2,SIo),e(Q2,uO),e(uO,RIo),e(Q2,PIo),e(K,BIo),e(K,H2),e(H2,dge),e(dge,IIo),e(H2,NIo),e(H2,bO),e(bO,qIo),e(H2,jIo),e(K,DIo),e(K,U2),e(U2,cge),e(cge,GIo),e(U2,OIo),e(U2,vO),e(vO,VIo),e(U2,XIo),e(K,zIo),e(K,J2),e(J2,fge),e(fge,WIo),e(J2,QIo),e(J2,FO),e(FO,HIo),e(J2,UIo),e(K,JIo),e(K,Y2),e(Y2,mge),e(mge,YIo),e(Y2,KIo),e(Y2,TO),e(TO,ZIo),e(Y2,eNo),e(K,oNo),e(K,K2),e(K2,gge),e(gge,rNo),e(K2,tNo),e(K2,MO),e(MO,aNo),e(K2,nNo),e(K,sNo),e(K,Z2),e(Z2,hge),e(hge,lNo),e(Z2,iNo),e(Z2,EO),e(EO,dNo),e(Z2,cNo),e(K,fNo),e(K,e5),e(e5,pge),e(pge,mNo),e(e5,gNo),e(e5,CO),e(CO,hNo),e(e5,pNo),e(K,_No),e(K,o5),e(o5,_ge),e(_ge,uNo),e(o5,bNo),e(o5,wO),e(wO,vNo),e(o5,FNo),e(K,TNo),e(K,r5),e(r5,uge),e(uge,MNo),e(r5,ENo),e(r5,AO),e(AO,CNo),e(r5,wNo),e(K,ANo),e(K,t5),e(t5,bge),e(bge,yNo),e(t5,LNo),e(t5,yO),e(yO,xNo),e(t5,$No),e(K,kNo),e(K,a5),e(a5,vge),e(vge,SNo),e(a5,RNo),e(a5,LO),e(LO,PNo),e(a5,BNo),e(K,INo),e(K,n5),e(n5,Fge),e(Fge,NNo),e(n5,qNo),e(n5,xO),e(xO,jNo),e(n5,DNo),e(K,GNo),e(K,s5),e(s5,Tge),e(Tge,ONo),e(s5,VNo),e(s5,$O),e($O,XNo),e(s5,zNo),e(K,WNo),e(K,l5),e(l5,Mge),e(Mge,QNo),e(l5,HNo),e(l5,kO),e(kO,UNo),e(l5,JNo),e(K,YNo),e(K,i5),e(i5,Ege),e(Ege,KNo),e(i5,ZNo),e(i5,SO),e(SO,eqo),e(i5,oqo),e(K,rqo),e(K,d5),e(d5,Cge),e(Cge,tqo),e(d5,aqo),e(d5,RO),e(RO,nqo),e(d5,sqo),e(K,lqo),e(K,c5),e(c5,wge),e(wge,iqo),e(c5,dqo),e(c5,PO),e(PO,cqo),e(c5,fqo),e(K,mqo),e(K,f5),e(f5,Age),e(Age,gqo),e(f5,hqo),e(f5,BO),e(BO,pqo),e(f5,_qo),e(K,uqo),e(K,m5),e(m5,yge),e(yge,bqo),e(m5,vqo),e(m5,IO),e(IO,Fqo),e(m5,Tqo),e(K,Mqo),e(K,g5),e(g5,Lge),e(Lge,Eqo),e(g5,Cqo),e(g5,NO),e(NO,wqo),e(g5,Aqo),e(K,yqo),e(K,h5),e(h5,xge),e(xge,Lqo),e(h5,xqo),e(h5,qO),e(qO,$qo),e(h5,kqo),e(K,Sqo),e(K,p5),e(p5,$ge),e($ge,Rqo),e(p5,Pqo),e(p5,jO),e(jO,Bqo),e(p5,Iqo),e(ro,Nqo),e(ro,_5),e(_5,qqo),e(_5,kge),e(kge,jqo),e(_5,Dqo),e(_5,Sge),e(Sge,Gqo),e(ro,Oqo),M(u5,ro,null),b(f,zqe,u),b(f,Wi,u),e(Wi,b5),e(b5,Rge),M(jy,Rge,null),e(Wi,Vqo),e(Wi,Pge),e(Pge,Xqo),b(f,Wqe,u),b(f,Bo,u),M(Dy,Bo,null),e(Bo,zqo),e(Bo,Qi),e(Qi,Wqo),e(Qi,DO),e(DO,Qqo),e(Qi,Hqo),e(Qi,GO),e(GO,Uqo),e(Qi,Jqo),e(Bo,Yqo),e(Bo,Gy),e(Gy,Kqo),e(Gy,Bge),e(Bge,Zqo),e(Gy,ejo),e(Bo,ojo),e(Bo,ct),M(Oy,ct,null),e(ct,rjo),e(ct,Ige),e(Ige,tjo),e(ct,ajo),e(ct,Hi),e(Hi,njo),e(Hi,Nge),e(Nge,sjo),e(Hi,ljo),e(Hi,OO),e(OO,ijo),e(Hi,djo),e(ct,cjo),M(v5,ct,null),e(Bo,fjo),e(Bo,to),M(Vy,to,null),e(to,mjo),e(to,qge),e(qge,gjo),e(to,hjo),e(to,Ba),e(Ba,pjo),e(Ba,jge),e(jge,_jo),e(Ba,ujo),e(Ba,Dge),e(Dge,bjo),e(Ba,vjo),e(Ba,Gge),e(Gge,Fjo),e(Ba,Tjo),e(to,Mjo),e(to,Yr),e(Yr,F5),e(F5,Oge),e(Oge,Ejo),e(F5,Cjo),e(F5,VO),e(VO,wjo),e(F5,Ajo),e(Yr,yjo),e(Yr,T5),e(T5,Vge),e(Vge,Ljo),e(T5,xjo),e(T5,XO),e(XO,$jo),e(T5,kjo),e(Yr,Sjo),e(Yr,M5),e(M5,Xge),e(Xge,Rjo),e(M5,Pjo),e(M5,zO),e(zO,Bjo),e(M5,Ijo),e(Yr,Njo),e(Yr,E5),e(E5,zge),e(zge,qjo),e(E5,jjo),e(E5,WO),e(WO,Djo),e(E5,Gjo),e(Yr,Ojo),e(Yr,C5),e(C5,Wge),e(Wge,Vjo),e(C5,Xjo),e(C5,QO),e(QO,zjo),e(C5,Wjo),e(to,Qjo),e(to,w5),e(w5,Hjo),e(w5,Qge),e(Qge,Ujo),e(w5,Jjo),e(w5,Hge),e(Hge,Yjo),e(to,Kjo),M(A5,to,null),b(f,Qqe,u),b(f,Ui,u),e(Ui,y5),e(y5,Uge),M(Xy,Uge,null),e(Ui,Zjo),e(Ui,Jge),e(Jge,eDo),b(f,Hqe,u),b(f,Io,u),M(zy,Io,null),e(Io,oDo),e(Io,Ji),e(Ji,rDo),e(Ji,HO),e(HO,tDo),e(Ji,aDo),e(Ji,UO),e(UO,nDo),e(Ji,sDo),e(Io,lDo),e(Io,Wy),e(Wy,iDo),e(Wy,Yge),e(Yge,dDo),e(Wy,cDo),e(Io,fDo),e(Io,ft),M(Qy,ft,null),e(ft,mDo),e(ft,Kge),e(Kge,gDo),e(ft,hDo),e(ft,Yi),e(Yi,pDo),e(Yi,Zge),e(Zge,_Do),e(Yi,uDo),e(Yi,JO),e(JO,bDo),e(Yi,vDo),e(ft,FDo),M(L5,ft,null),e(Io,TDo),e(Io,ao),M(Hy,ao,null),e(ao,MDo),e(ao,ehe),e(ehe,EDo),e(ao,CDo),e(ao,Ia),e(Ia,wDo),e(Ia,ohe),e(ohe,ADo),e(Ia,yDo),e(Ia,rhe),e(rhe,LDo),e(Ia,xDo),e(Ia,the),e(the,$Do),e(Ia,kDo),e(ao,SDo),e(ao,U),e(U,x5),e(x5,ahe),e(ahe,RDo),e(x5,PDo),e(x5,YO),e(YO,BDo),e(x5,IDo),e(U,NDo),e(U,$5),e($5,nhe),e(nhe,qDo),e($5,jDo),e($5,KO),e(KO,DDo),e($5,GDo),e(U,ODo),e(U,k5),e(k5,she),e(she,VDo),e(k5,XDo),e(k5,ZO),e(ZO,zDo),e(k5,WDo),e(U,QDo),e(U,S5),e(S5,lhe),e(lhe,HDo),e(S5,UDo),e(S5,eV),e(eV,JDo),e(S5,YDo),e(U,KDo),e(U,R5),e(R5,ihe),e(ihe,ZDo),e(R5,eGo),e(R5,oV),e(oV,oGo),e(R5,rGo),e(U,tGo),e(U,P5),e(P5,dhe),e(dhe,aGo),e(P5,nGo),e(P5,rV),e(rV,sGo),e(P5,lGo),e(U,iGo),e(U,B5),e(B5,che),e(che,dGo),e(B5,cGo),e(B5,tV),e(tV,fGo),e(B5,mGo),e(U,gGo),e(U,I5),e(I5,fhe),e(fhe,hGo),e(I5,pGo),e(I5,aV),e(aV,_Go),e(I5,uGo),e(U,bGo),e(U,N5),e(N5,mhe),e(mhe,vGo),e(N5,FGo),e(N5,nV),e(nV,TGo),e(N5,MGo),e(U,EGo),e(U,q5),e(q5,ghe),e(ghe,CGo),e(q5,wGo),e(q5,sV),e(sV,AGo),e(q5,yGo),e(U,LGo),e(U,j5),e(j5,hhe),e(hhe,xGo),e(j5,$Go),e(j5,lV),e(lV,kGo),e(j5,SGo),e(U,RGo),e(U,D5),e(D5,phe),e(phe,PGo),e(D5,BGo),e(D5,iV),e(iV,IGo),e(D5,NGo),e(U,qGo),e(U,G5),e(G5,_he),e(_he,jGo),e(G5,DGo),e(G5,dV),e(dV,GGo),e(G5,OGo),e(U,VGo),e(U,O5),e(O5,uhe),e(uhe,XGo),e(O5,zGo),e(O5,cV),e(cV,WGo),e(O5,QGo),e(U,HGo),e(U,V5),e(V5,bhe),e(bhe,UGo),e(V5,JGo),e(V5,fV),e(fV,YGo),e(V5,KGo),e(U,ZGo),e(U,X5),e(X5,vhe),e(vhe,eOo),e(X5,oOo),e(X5,mV),e(mV,rOo),e(X5,tOo),e(U,aOo),e(U,z5),e(z5,Fhe),e(Fhe,nOo),e(z5,sOo),e(z5,gV),e(gV,lOo),e(z5,iOo),e(U,dOo),e(U,W5),e(W5,The),e(The,cOo),e(W5,fOo),e(W5,hV),e(hV,mOo),e(W5,gOo),e(U,hOo),e(U,Q5),e(Q5,Mhe),e(Mhe,pOo),e(Q5,_Oo),e(Q5,pV),e(pV,uOo),e(Q5,bOo),e(U,vOo),e(U,H5),e(H5,Ehe),e(Ehe,FOo),e(H5,TOo),e(H5,_V),e(_V,MOo),e(H5,EOo),e(U,COo),e(U,U5),e(U5,Che),e(Che,wOo),e(U5,AOo),e(U5,uV),e(uV,yOo),e(U5,LOo),e(U,xOo),e(U,J5),e(J5,whe),e(whe,$Oo),e(J5,kOo),e(J5,bV),e(bV,SOo),e(J5,ROo),e(U,POo),e(U,Y5),e(Y5,Ahe),e(Ahe,BOo),e(Y5,IOo),e(Y5,vV),e(vV,NOo),e(Y5,qOo),e(U,jOo),e(U,K5),e(K5,yhe),e(yhe,DOo),e(K5,GOo),e(K5,FV),e(FV,OOo),e(K5,VOo),e(U,XOo),e(U,Z5),e(Z5,Lhe),e(Lhe,zOo),e(Z5,WOo),e(Z5,TV),e(TV,QOo),e(Z5,HOo),e(U,UOo),e(U,ev),e(ev,xhe),e(xhe,JOo),e(ev,YOo),e(ev,MV),e(MV,KOo),e(ev,ZOo),e(U,eVo),e(U,ov),e(ov,$he),e($he,oVo),e(ov,rVo),e(ov,EV),e(EV,tVo),e(ov,aVo),e(U,nVo),e(U,rv),e(rv,khe),e(khe,sVo),e(rv,lVo),e(rv,CV),e(CV,iVo),e(rv,dVo),e(U,cVo),e(U,tv),e(tv,She),e(She,fVo),e(tv,mVo),e(tv,wV),e(wV,gVo),e(tv,hVo),e(U,pVo),e(U,av),e(av,Rhe),e(Rhe,_Vo),e(av,uVo),e(av,AV),e(AV,bVo),e(av,vVo),e(U,FVo),e(U,nv),e(nv,Phe),e(Phe,TVo),e(nv,MVo),e(nv,yV),e(yV,EVo),e(nv,CVo),e(U,wVo),e(U,sv),e(sv,Bhe),e(Bhe,AVo),e(sv,yVo),e(sv,LV),e(LV,LVo),e(sv,xVo),e(U,$Vo),e(U,lv),e(lv,Ihe),e(Ihe,kVo),e(lv,SVo),e(lv,xV),e(xV,RVo),e(lv,PVo),e(U,BVo),e(U,iv),e(iv,Nhe),e(Nhe,IVo),e(iv,NVo),e(iv,$V),e($V,qVo),e(iv,jVo),e(ao,DVo),e(ao,dv),e(dv,GVo),e(dv,qhe),e(qhe,OVo),e(dv,VVo),e(dv,jhe),e(jhe,XVo),e(ao,zVo),M(cv,ao,null),b(f,Uqe,u),b(f,Ki,u),e(Ki,fv),e(fv,Dhe),M(Uy,Dhe,null),e(Ki,WVo),e(Ki,Ghe),e(Ghe,QVo),b(f,Jqe,u),b(f,No,u),M(Jy,No,null),e(No,HVo),e(No,Zi),e(Zi,UVo),e(Zi,kV),e(kV,JVo),e(Zi,YVo),e(Zi,SV),e(SV,KVo),e(Zi,ZVo),e(No,eXo),e(No,Yy),e(Yy,oXo),e(Yy,Ohe),e(Ohe,rXo),e(Yy,tXo),e(No,aXo),e(No,mt),M(Ky,mt,null),e(mt,nXo),e(mt,Vhe),e(Vhe,sXo),e(mt,lXo),e(mt,ed),e(ed,iXo),e(ed,Xhe),e(Xhe,dXo),e(ed,cXo),e(ed,RV),e(RV,fXo),e(ed,mXo),e(mt,gXo),M(mv,mt,null),e(No,hXo),e(No,no),M(Zy,no,null),e(no,pXo),e(no,zhe),e(zhe,_Xo),e(no,uXo),e(no,Na),e(Na,bXo),e(Na,Whe),e(Whe,vXo),e(Na,FXo),e(Na,Qhe),e(Qhe,TXo),e(Na,MXo),e(Na,Hhe),e(Hhe,EXo),e(Na,CXo),e(no,wXo),e(no,V),e(V,gv),e(gv,Uhe),e(Uhe,AXo),e(gv,yXo),e(gv,PV),e(PV,LXo),e(gv,xXo),e(V,$Xo),e(V,hv),e(hv,Jhe),e(Jhe,kXo),e(hv,SXo),e(hv,BV),e(BV,RXo),e(hv,PXo),e(V,BXo),e(V,pv),e(pv,Yhe),e(Yhe,IXo),e(pv,NXo),e(pv,IV),e(IV,qXo),e(pv,jXo),e(V,DXo),e(V,_v),e(_v,Khe),e(Khe,GXo),e(_v,OXo),e(_v,NV),e(NV,VXo),e(_v,XXo),e(V,zXo),e(V,uv),e(uv,Zhe),e(Zhe,WXo),e(uv,QXo),e(uv,qV),e(qV,HXo),e(uv,UXo),e(V,JXo),e(V,bv),e(bv,epe),e(epe,YXo),e(bv,KXo),e(bv,jV),e(jV,ZXo),e(bv,ezo),e(V,ozo),e(V,vv),e(vv,ope),e(ope,rzo),e(vv,tzo),e(vv,DV),e(DV,azo),e(vv,nzo),e(V,szo),e(V,Fv),e(Fv,rpe),e(rpe,lzo),e(Fv,izo),e(Fv,GV),e(GV,dzo),e(Fv,czo),e(V,fzo),e(V,Tv),e(Tv,tpe),e(tpe,mzo),e(Tv,gzo),e(Tv,OV),e(OV,hzo),e(Tv,pzo),e(V,_zo),e(V,Mv),e(Mv,ape),e(ape,uzo),e(Mv,bzo),e(Mv,VV),e(VV,vzo),e(Mv,Fzo),e(V,Tzo),e(V,Ev),e(Ev,npe),e(npe,Mzo),e(Ev,Ezo),e(Ev,XV),e(XV,Czo),e(Ev,wzo),e(V,Azo),e(V,Cv),e(Cv,spe),e(spe,yzo),e(Cv,Lzo),e(Cv,zV),e(zV,xzo),e(Cv,$zo),e(V,kzo),e(V,wv),e(wv,lpe),e(lpe,Szo),e(wv,Rzo),e(wv,WV),e(WV,Pzo),e(wv,Bzo),e(V,Izo),e(V,Av),e(Av,ipe),e(ipe,Nzo),e(Av,qzo),e(Av,QV),e(QV,jzo),e(Av,Dzo),e(V,Gzo),e(V,yv),e(yv,dpe),e(dpe,Ozo),e(yv,Vzo),e(yv,HV),e(HV,Xzo),e(yv,zzo),e(V,Wzo),e(V,Lv),e(Lv,cpe),e(cpe,Qzo),e(Lv,Hzo),e(Lv,UV),e(UV,Uzo),e(Lv,Jzo),e(V,Yzo),e(V,xv),e(xv,fpe),e(fpe,Kzo),e(xv,Zzo),e(xv,JV),e(JV,eWo),e(xv,oWo),e(V,rWo),e(V,$v),e($v,mpe),e(mpe,tWo),e($v,aWo),e($v,YV),e(YV,nWo),e($v,sWo),e(V,lWo),e(V,kv),e(kv,gpe),e(gpe,iWo),e(kv,dWo),e(kv,KV),e(KV,cWo),e(kv,fWo),e(V,mWo),e(V,Sv),e(Sv,hpe),e(hpe,gWo),e(Sv,hWo),e(Sv,ZV),e(ZV,pWo),e(Sv,_Wo),e(V,uWo),e(V,Rv),e(Rv,ppe),e(ppe,bWo),e(Rv,vWo),e(Rv,eX),e(eX,FWo),e(Rv,TWo),e(V,MWo),e(V,Pv),e(Pv,_pe),e(_pe,EWo),e(Pv,CWo),e(Pv,oX),e(oX,wWo),e(Pv,AWo),e(V,yWo),e(V,Bv),e(Bv,upe),e(upe,LWo),e(Bv,xWo),e(Bv,rX),e(rX,$Wo),e(Bv,kWo),e(V,SWo),e(V,Iv),e(Iv,bpe),e(bpe,RWo),e(Iv,PWo),e(Iv,tX),e(tX,BWo),e(Iv,IWo),e(V,NWo),e(V,Nv),e(Nv,vpe),e(vpe,qWo),e(Nv,jWo),e(Nv,aX),e(aX,DWo),e(Nv,GWo),e(V,OWo),e(V,qv),e(qv,Fpe),e(Fpe,VWo),e(qv,XWo),e(qv,nX),e(nX,zWo),e(qv,WWo),e(V,QWo),e(V,jv),e(jv,Tpe),e(Tpe,HWo),e(jv,UWo),e(jv,sX),e(sX,JWo),e(jv,YWo),e(V,KWo),e(V,Dv),e(Dv,Mpe),e(Mpe,ZWo),e(Dv,eQo),e(Dv,lX),e(lX,oQo),e(Dv,rQo),e(V,tQo),e(V,Gv),e(Gv,Epe),e(Epe,aQo),e(Gv,nQo),e(Gv,iX),e(iX,sQo),e(Gv,lQo),e(V,iQo),e(V,Ov),e(Ov,Cpe),e(Cpe,dQo),e(Ov,cQo),e(Ov,dX),e(dX,fQo),e(Ov,mQo),e(V,gQo),e(V,Vv),e(Vv,wpe),e(wpe,hQo),e(Vv,pQo),e(Vv,cX),e(cX,_Qo),e(Vv,uQo),e(V,bQo),e(V,Xv),e(Xv,Ape),e(Ape,vQo),e(Xv,FQo),e(Xv,fX),e(fX,TQo),e(Xv,MQo),e(V,EQo),e(V,zv),e(zv,ype),e(ype,CQo),e(zv,wQo),e(zv,mX),e(mX,AQo),e(zv,yQo),e(V,LQo),e(V,Wv),e(Wv,Lpe),e(Lpe,xQo),e(Wv,$Qo),e(Wv,gX),e(gX,kQo),e(Wv,SQo),e(V,RQo),e(V,Qv),e(Qv,xpe),e(xpe,PQo),e(Qv,BQo),e(Qv,hX),e(hX,IQo),e(Qv,NQo),e(V,qQo),e(V,Hv),e(Hv,$pe),e($pe,jQo),e(Hv,DQo),e(Hv,pX),e(pX,GQo),e(Hv,OQo),e(V,VQo),e(V,Uv),e(Uv,kpe),e(kpe,XQo),e(Uv,zQo),e(Uv,_X),e(_X,WQo),e(Uv,QQo),e(V,HQo),e(V,Jv),e(Jv,Spe),e(Spe,UQo),e(Jv,JQo),e(Jv,uX),e(uX,YQo),e(Jv,KQo),e(V,ZQo),e(V,Yv),e(Yv,Rpe),e(Rpe,eHo),e(Yv,oHo),e(Yv,bX),e(bX,rHo),e(Yv,tHo),e(V,aHo),e(V,Kv),e(Kv,Ppe),e(Ppe,nHo),e(Kv,sHo),e(Kv,vX),e(vX,lHo),e(Kv,iHo),e(no,dHo),e(no,Zv),e(Zv,cHo),e(Zv,Bpe),e(Bpe,fHo),e(Zv,mHo),e(Zv,Ipe),e(Ipe,gHo),e(no,hHo),M(eF,no,null),b(f,Yqe,u),b(f,od,u),e(od,oF),e(oF,Npe),M(eL,Npe,null),e(od,pHo),e(od,qpe),e(qpe,_Ho),b(f,Kqe,u),b(f,qo,u),M(oL,qo,null),e(qo,uHo),e(qo,rd),e(rd,bHo),e(rd,FX),e(FX,vHo),e(rd,FHo),e(rd,TX),e(TX,THo),e(rd,MHo),e(qo,EHo),e(qo,rL),e(rL,CHo),e(rL,jpe),e(jpe,wHo),e(rL,AHo),e(qo,yHo),e(qo,gt),M(tL,gt,null),e(gt,LHo),e(gt,Dpe),e(Dpe,xHo),e(gt,$Ho),e(gt,td),e(td,kHo),e(td,Gpe),e(Gpe,SHo),e(td,RHo),e(td,MX),e(MX,PHo),e(td,BHo),e(gt,IHo),M(rF,gt,null),e(qo,NHo),e(qo,so),M(aL,so,null),e(so,qHo),e(so,Ope),e(Ope,jHo),e(so,DHo),e(so,qa),e(qa,GHo),e(qa,Vpe),e(Vpe,OHo),e(qa,VHo),e(qa,Xpe),e(Xpe,XHo),e(qa,zHo),e(qa,zpe),e(zpe,WHo),e(qa,QHo),e(so,HHo),e(so,Wpe),e(Wpe,tF),e(tF,Qpe),e(Qpe,UHo),e(tF,JHo),e(tF,EX),e(EX,YHo),e(tF,KHo),e(so,ZHo),e(so,aF),e(aF,eUo),e(aF,Hpe),e(Hpe,oUo),e(aF,rUo),e(aF,Upe),e(Upe,tUo),e(so,aUo),M(nF,so,null),b(f,Zqe,u),b(f,ad,u),e(ad,sF),e(sF,Jpe),M(nL,Jpe,null),e(ad,nUo),e(ad,Ype),e(Ype,sUo),b(f,eje,u),b(f,jo,u),M(sL,jo,null),e(jo,lUo),e(jo,nd),e(nd,iUo),e(nd,CX),e(CX,dUo),e(nd,cUo),e(nd,wX),e(wX,fUo),e(nd,mUo),e(jo,gUo),e(jo,lL),e(lL,hUo),e(lL,Kpe),e(Kpe,pUo),e(lL,_Uo),e(jo,uUo),e(jo,ht),M(iL,ht,null),e(ht,bUo),e(ht,Zpe),e(Zpe,vUo),e(ht,FUo),e(ht,sd),e(sd,TUo),e(sd,e_e),e(e_e,MUo),e(sd,EUo),e(sd,AX),e(AX,CUo),e(sd,wUo),e(ht,AUo),M(lF,ht,null),e(jo,yUo),e(jo,lo),M(dL,lo,null),e(lo,LUo),e(lo,o_e),e(o_e,xUo),e(lo,$Uo),e(lo,ja),e(ja,kUo),e(ja,r_e),e(r_e,SUo),e(ja,RUo),e(ja,t_e),e(t_e,PUo),e(ja,BUo),e(ja,a_e),e(a_e,IUo),e(ja,NUo),e(lo,qUo),e(lo,Fe),e(Fe,iF),e(iF,n_e),e(n_e,jUo),e(iF,DUo),e(iF,yX),e(yX,GUo),e(iF,OUo),e(Fe,VUo),e(Fe,dF),e(dF,s_e),e(s_e,XUo),e(dF,zUo),e(dF,LX),e(LX,WUo),e(dF,QUo),e(Fe,HUo),e(Fe,cF),e(cF,l_e),e(l_e,UUo),e(cF,JUo),e(cF,xX),e(xX,YUo),e(cF,KUo),e(Fe,ZUo),e(Fe,fF),e(fF,i_e),e(i_e,eJo),e(fF,oJo),e(fF,$X),e($X,rJo),e(fF,tJo),e(Fe,aJo),e(Fe,Bs),e(Bs,d_e),e(d_e,nJo),e(Bs,sJo),e(Bs,kX),e(kX,lJo),e(Bs,iJo),e(Bs,SX),e(SX,dJo),e(Bs,cJo),e(Fe,fJo),e(Fe,mF),e(mF,c_e),e(c_e,mJo),e(mF,gJo),e(mF,RX),e(RX,hJo),e(mF,pJo),e(Fe,_Jo),e(Fe,pt),e(pt,f_e),e(f_e,uJo),e(pt,bJo),e(pt,PX),e(PX,vJo),e(pt,FJo),e(pt,BX),e(BX,TJo),e(pt,MJo),e(pt,IX),e(IX,EJo),e(pt,CJo),e(Fe,wJo),e(Fe,gF),e(gF,m_e),e(m_e,AJo),e(gF,yJo),e(gF,NX),e(NX,LJo),e(gF,xJo),e(Fe,$Jo),e(Fe,hF),e(hF,g_e),e(g_e,kJo),e(hF,SJo),e(hF,qX),e(qX,RJo),e(hF,PJo),e(Fe,BJo),e(Fe,pF),e(pF,h_e),e(h_e,IJo),e(pF,NJo),e(pF,jX),e(jX,qJo),e(pF,jJo),e(Fe,DJo),e(Fe,_F),e(_F,p_e),e(p_e,GJo),e(_F,OJo),e(_F,DX),e(DX,VJo),e(_F,XJo),e(Fe,zJo),e(Fe,uF),e(uF,__e),e(__e,WJo),e(uF,QJo),e(uF,GX),e(GX,HJo),e(uF,UJo),e(Fe,JJo),e(Fe,bF),e(bF,u_e),e(u_e,YJo),e(bF,KJo),e(bF,OX),e(OX,ZJo),e(bF,eYo),e(Fe,oYo),e(Fe,vF),e(vF,b_e),e(b_e,rYo),e(vF,tYo),e(vF,VX),e(VX,aYo),e(vF,nYo),e(lo,sYo),e(lo,FF),e(FF,lYo),e(FF,v_e),e(v_e,iYo),e(FF,dYo),e(FF,F_e),e(F_e,cYo),e(lo,fYo),M(TF,lo,null),b(f,oje,u),b(f,ld,u),e(ld,MF),e(MF,T_e),M(cL,T_e,null),e(ld,mYo),e(ld,M_e),e(M_e,gYo),b(f,rje,u),b(f,Do,u),M(fL,Do,null),e(Do,hYo),e(Do,id),e(id,pYo),e(id,XX),e(XX,_Yo),e(id,uYo),e(id,zX),e(zX,bYo),e(id,vYo),e(Do,FYo),e(Do,mL),e(mL,TYo),e(mL,E_e),e(E_e,MYo),e(mL,EYo),e(Do,CYo),e(Do,_t),M(gL,_t,null),e(_t,wYo),e(_t,C_e),e(C_e,AYo),e(_t,yYo),e(_t,dd),e(dd,LYo),e(dd,w_e),e(w_e,xYo),e(dd,$Yo),e(dd,WX),e(WX,kYo),e(dd,SYo),e(_t,RYo),M(EF,_t,null),e(Do,PYo),e(Do,io),M(hL,io,null),e(io,BYo),e(io,A_e),e(A_e,IYo),e(io,NYo),e(io,Da),e(Da,qYo),e(Da,y_e),e(y_e,jYo),e(Da,DYo),e(Da,L_e),e(L_e,GYo),e(Da,OYo),e(Da,x_e),e(x_e,VYo),e(Da,XYo),e(io,zYo),e(io,$_e),e($_e,CF),e(CF,k_e),e(k_e,WYo),e(CF,QYo),e(CF,QX),e(QX,HYo),e(CF,UYo),e(io,JYo),e(io,wF),e(wF,YYo),e(wF,S_e),e(S_e,KYo),e(wF,ZYo),e(wF,R_e),e(R_e,eKo),e(io,oKo),M(AF,io,null),b(f,tje,u),b(f,cd,u),e(cd,yF),e(yF,P_e),M(pL,P_e,null),e(cd,rKo),e(cd,B_e),e(B_e,tKo),b(f,aje,u),b(f,Go,u),M(_L,Go,null),e(Go,aKo),e(Go,fd),e(fd,nKo),e(fd,HX),e(HX,sKo),e(fd,lKo),e(fd,UX),e(UX,iKo),e(fd,dKo),e(Go,cKo),e(Go,uL),e(uL,fKo),e(uL,I_e),e(I_e,mKo),e(uL,gKo),e(Go,hKo),e(Go,ut),M(bL,ut,null),e(ut,pKo),e(ut,N_e),e(N_e,_Ko),e(ut,uKo),e(ut,md),e(md,bKo),e(md,q_e),e(q_e,vKo),e(md,FKo),e(md,JX),e(JX,TKo),e(md,MKo),e(ut,EKo),M(LF,ut,null),e(Go,CKo),e(Go,co),M(vL,co,null),e(co,wKo),e(co,j_e),e(j_e,AKo),e(co,yKo),e(co,Ga),e(Ga,LKo),e(Ga,D_e),e(D_e,xKo),e(Ga,$Ko),e(Ga,G_e),e(G_e,kKo),e(Ga,SKo),e(Ga,O_e),e(O_e,RKo),e(Ga,PKo),e(co,BKo),e(co,Se),e(Se,xF),e(xF,V_e),e(V_e,IKo),e(xF,NKo),e(xF,YX),e(YX,qKo),e(xF,jKo),e(Se,DKo),e(Se,$F),e($F,X_e),e(X_e,GKo),e($F,OKo),e($F,KX),e(KX,VKo),e($F,XKo),e(Se,zKo),e(Se,kF),e(kF,z_e),e(z_e,WKo),e(kF,QKo),e(kF,ZX),e(ZX,HKo),e(kF,UKo),e(Se,JKo),e(Se,SF),e(SF,W_e),e(W_e,YKo),e(SF,KKo),e(SF,ez),e(ez,ZKo),e(SF,eZo),e(Se,oZo),e(Se,RF),e(RF,Q_e),e(Q_e,rZo),e(RF,tZo),e(RF,oz),e(oz,aZo),e(RF,nZo),e(Se,sZo),e(Se,PF),e(PF,H_e),e(H_e,lZo),e(PF,iZo),e(PF,rz),e(rz,dZo),e(PF,cZo),e(Se,fZo),e(Se,BF),e(BF,U_e),e(U_e,mZo),e(BF,gZo),e(BF,tz),e(tz,hZo),e(BF,pZo),e(Se,_Zo),e(Se,IF),e(IF,J_e),e(J_e,uZo),e(IF,bZo),e(IF,az),e(az,vZo),e(IF,FZo),e(Se,TZo),e(Se,NF),e(NF,Y_e),e(Y_e,MZo),e(NF,EZo),e(NF,nz),e(nz,CZo),e(NF,wZo),e(co,AZo),e(co,qF),e(qF,yZo),e(qF,K_e),e(K_e,LZo),e(qF,xZo),e(qF,Z_e),e(Z_e,$Zo),e(co,kZo),M(jF,co,null),b(f,nje,u),b(f,gd,u),e(gd,DF),e(DF,eue),M(FL,eue,null),e(gd,SZo),e(gd,oue),e(oue,RZo),b(f,sje,u),b(f,Oo,u),M(TL,Oo,null),e(Oo,PZo),e(Oo,hd),e(hd,BZo),e(hd,sz),e(sz,IZo),e(hd,NZo),e(hd,lz),e(lz,qZo),e(hd,jZo),e(Oo,DZo),e(Oo,ML),e(ML,GZo),e(ML,rue),e(rue,OZo),e(ML,VZo),e(Oo,XZo),e(Oo,bt),M(EL,bt,null),e(bt,zZo),e(bt,tue),e(tue,WZo),e(bt,QZo),e(bt,pd),e(pd,HZo),e(pd,aue),e(aue,UZo),e(pd,JZo),e(pd,iz),e(iz,YZo),e(pd,KZo),e(bt,ZZo),M(GF,bt,null),e(Oo,eer),e(Oo,fo),M(CL,fo,null),e(fo,oer),e(fo,nue),e(nue,rer),e(fo,ter),e(fo,Oa),e(Oa,aer),e(Oa,sue),e(sue,ner),e(Oa,ser),e(Oa,lue),e(lue,ler),e(Oa,ier),e(Oa,iue),e(iue,der),e(Oa,cer),e(fo,fer),e(fo,Kr),e(Kr,OF),e(OF,due),e(due,mer),e(OF,ger),e(OF,dz),e(dz,her),e(OF,per),e(Kr,_er),e(Kr,VF),e(VF,cue),e(cue,uer),e(VF,ber),e(VF,cz),e(cz,ver),e(VF,Fer),e(Kr,Ter),e(Kr,XF),e(XF,fue),e(fue,Mer),e(XF,Eer),e(XF,fz),e(fz,Cer),e(XF,wer),e(Kr,Aer),e(Kr,zF),e(zF,mue),e(mue,yer),e(zF,Ler),e(zF,mz),e(mz,xer),e(zF,$er),e(Kr,ker),e(Kr,WF),e(WF,gue),e(gue,Ser),e(WF,Rer),e(WF,gz),e(gz,Per),e(WF,Ber),e(fo,Ier),e(fo,QF),e(QF,Ner),e(QF,hue),e(hue,qer),e(QF,jer),e(QF,pue),e(pue,Der),e(fo,Ger),M(HF,fo,null),b(f,lje,u),b(f,_d,u),e(_d,UF),e(UF,_ue),M(wL,_ue,null),e(_d,Oer),e(_d,uue),e(uue,Ver),b(f,ije,u),b(f,Vo,u),M(AL,Vo,null),e(Vo,Xer),e(Vo,ud),e(ud,zer),e(ud,hz),e(hz,Wer),e(ud,Qer),e(ud,pz),e(pz,Her),e(ud,Uer),e(Vo,Jer),e(Vo,yL),e(yL,Yer),e(yL,bue),e(bue,Ker),e(yL,Zer),e(Vo,eor),e(Vo,vt),M(LL,vt,null),e(vt,oor),e(vt,vue),e(vue,ror),e(vt,tor),e(vt,bd),e(bd,aor),e(bd,Fue),e(Fue,nor),e(bd,sor),e(bd,_z),e(_z,lor),e(bd,ior),e(vt,dor),M(JF,vt,null),e(Vo,cor),e(Vo,mo),M(xL,mo,null),e(mo,mor),e(mo,Tue),e(Tue,gor),e(mo,hor),e(mo,Va),e(Va,por),e(Va,Mue),e(Mue,_or),e(Va,uor),e(Va,Eue),e(Eue,bor),e(Va,vor),e(Va,Cue),e(Cue,For),e(Va,Tor),e(mo,Mor),e(mo,Re),e(Re,YF),e(YF,wue),e(wue,Eor),e(YF,Cor),e(YF,uz),e(uz,wor),e(YF,Aor),e(Re,yor),e(Re,KF),e(KF,Aue),e(Aue,Lor),e(KF,xor),e(KF,bz),e(bz,$or),e(KF,kor),e(Re,Sor),e(Re,ZF),e(ZF,yue),e(yue,Ror),e(ZF,Por),e(ZF,vz),e(vz,Bor),e(ZF,Ior),e(Re,Nor),e(Re,e0),e(e0,Lue),e(Lue,qor),e(e0,jor),e(e0,Fz),e(Fz,Dor),e(e0,Gor),e(Re,Oor),e(Re,o0),e(o0,xue),e(xue,Vor),e(o0,Xor),e(o0,Tz),e(Tz,zor),e(o0,Wor),e(Re,Qor),e(Re,r0),e(r0,$ue),e($ue,Hor),e(r0,Uor),e(r0,Mz),e(Mz,Jor),e(r0,Yor),e(Re,Kor),e(Re,t0),e(t0,kue),e(kue,Zor),e(t0,err),e(t0,Ez),e(Ez,orr),e(t0,rrr),e(Re,trr),e(Re,a0),e(a0,Sue),e(Sue,arr),e(a0,nrr),e(a0,Cz),e(Cz,srr),e(a0,lrr),e(Re,irr),e(Re,n0),e(n0,Rue),e(Rue,drr),e(n0,crr),e(n0,wz),e(wz,frr),e(n0,mrr),e(mo,grr),e(mo,s0),e(s0,hrr),e(s0,Pue),e(Pue,prr),e(s0,_rr),e(s0,Bue),e(Bue,urr),e(mo,brr),M(l0,mo,null),b(f,dje,u),b(f,vd,u),e(vd,i0),e(i0,Iue),M($L,Iue,null),e(vd,vrr),e(vd,Nue),e(Nue,Frr),b(f,cje,u),b(f,Xo,u),M(kL,Xo,null),e(Xo,Trr),e(Xo,Fd),e(Fd,Mrr),e(Fd,Az),e(Az,Err),e(Fd,Crr),e(Fd,yz),e(yz,wrr),e(Fd,Arr),e(Xo,yrr),e(Xo,SL),e(SL,Lrr),e(SL,que),e(que,xrr),e(SL,$rr),e(Xo,krr),e(Xo,Ft),M(RL,Ft,null),e(Ft,Srr),e(Ft,jue),e(jue,Rrr),e(Ft,Prr),e(Ft,Td),e(Td,Brr),e(Td,Due),e(Due,Irr),e(Td,Nrr),e(Td,Lz),e(Lz,qrr),e(Td,jrr),e(Ft,Drr),M(d0,Ft,null),e(Xo,Grr),e(Xo,go),M(PL,go,null),e(go,Orr),e(go,Gue),e(Gue,Vrr),e(go,Xrr),e(go,Xa),e(Xa,zrr),e(Xa,Oue),e(Oue,Wrr),e(Xa,Qrr),e(Xa,Vue),e(Vue,Hrr),e(Xa,Urr),e(Xa,Xue),e(Xue,Jrr),e(Xa,Yrr),e(go,Krr),e(go,BL),e(BL,c0),e(c0,zue),e(zue,Zrr),e(c0,etr),e(c0,xz),e(xz,otr),e(c0,rtr),e(BL,ttr),e(BL,f0),e(f0,Wue),e(Wue,atr),e(f0,ntr),e(f0,$z),e($z,str),e(f0,ltr),e(go,itr),e(go,m0),e(m0,dtr),e(m0,Que),e(Que,ctr),e(m0,ftr),e(m0,Hue),e(Hue,mtr),e(go,gtr),M(g0,go,null),b(f,fje,u),b(f,Md,u),e(Md,h0),e(h0,Uue),M(IL,Uue,null),e(Md,htr),e(Md,Jue),e(Jue,ptr),b(f,mje,u),b(f,zo,u),M(NL,zo,null),e(zo,_tr),e(zo,Ed),e(Ed,utr),e(Ed,kz),e(kz,btr),e(Ed,vtr),e(Ed,Sz),e(Sz,Ftr),e(Ed,Ttr),e(zo,Mtr),e(zo,qL),e(qL,Etr),e(qL,Yue),e(Yue,Ctr),e(qL,wtr),e(zo,Atr),e(zo,Tt),M(jL,Tt,null),e(Tt,ytr),e(Tt,Kue),e(Kue,Ltr),e(Tt,xtr),e(Tt,Cd),e(Cd,$tr),e(Cd,Zue),e(Zue,ktr),e(Cd,Str),e(Cd,Rz),e(Rz,Rtr),e(Cd,Ptr),e(Tt,Btr),M(p0,Tt,null),e(zo,Itr),e(zo,ho),M(DL,ho,null),e(ho,Ntr),e(ho,e1e),e(e1e,qtr),e(ho,jtr),e(ho,za),e(za,Dtr),e(za,o1e),e(o1e,Gtr),e(za,Otr),e(za,r1e),e(r1e,Vtr),e(za,Xtr),e(za,t1e),e(t1e,ztr),e(za,Wtr),e(ho,Qtr),e(ho,Zr),e(Zr,_0),e(_0,a1e),e(a1e,Htr),e(_0,Utr),e(_0,Pz),e(Pz,Jtr),e(_0,Ytr),e(Zr,Ktr),e(Zr,u0),e(u0,n1e),e(n1e,Ztr),e(u0,ear),e(u0,Bz),e(Bz,oar),e(u0,rar),e(Zr,tar),e(Zr,b0),e(b0,s1e),e(s1e,aar),e(b0,nar),e(b0,Iz),e(Iz,sar),e(b0,lar),e(Zr,iar),e(Zr,v0),e(v0,l1e),e(l1e,dar),e(v0,car),e(v0,Nz),e(Nz,far),e(v0,mar),e(Zr,gar),e(Zr,F0),e(F0,i1e),e(i1e,har),e(F0,par),e(F0,qz),e(qz,_ar),e(F0,uar),e(ho,bar),e(ho,T0),e(T0,Far),e(T0,d1e),e(d1e,Tar),e(T0,Mar),e(T0,c1e),e(c1e,Ear),e(ho,Car),M(M0,ho,null),b(f,gje,u),b(f,wd,u),e(wd,E0),e(E0,f1e),M(GL,f1e,null),e(wd,war),e(wd,m1e),e(m1e,Aar),b(f,hje,u),b(f,Wo,u),M(OL,Wo,null),e(Wo,yar),e(Wo,Ad),e(Ad,Lar),e(Ad,jz),e(jz,xar),e(Ad,$ar),e(Ad,Dz),e(Dz,kar),e(Ad,Sar),e(Wo,Rar),e(Wo,VL),e(VL,Par),e(VL,g1e),e(g1e,Bar),e(VL,Iar),e(Wo,Nar),e(Wo,Mt),M(XL,Mt,null),e(Mt,qar),e(Mt,h1e),e(h1e,jar),e(Mt,Dar),e(Mt,yd),e(yd,Gar),e(yd,p1e),e(p1e,Oar),e(yd,Var),e(yd,Gz),e(Gz,Xar),e(yd,zar),e(Mt,War),M(C0,Mt,null),e(Wo,Qar),e(Wo,po),M(zL,po,null),e(po,Har),e(po,_1e),e(_1e,Uar),e(po,Jar),e(po,Wa),e(Wa,Yar),e(Wa,u1e),e(u1e,Kar),e(Wa,Zar),e(Wa,b1e),e(b1e,enr),e(Wa,onr),e(Wa,v1e),e(v1e,rnr),e(Wa,tnr),e(po,anr),e(po,Ld),e(Ld,w0),e(w0,F1e),e(F1e,nnr),e(w0,snr),e(w0,Oz),e(Oz,lnr),e(w0,inr),e(Ld,dnr),e(Ld,A0),e(A0,T1e),e(T1e,cnr),e(A0,fnr),e(A0,Vz),e(Vz,mnr),e(A0,gnr),e(Ld,hnr),e(Ld,y0),e(y0,M1e),e(M1e,pnr),e(y0,_nr),e(y0,Xz),e(Xz,unr),e(y0,bnr),e(po,vnr),e(po,L0),e(L0,Fnr),e(L0,E1e),e(E1e,Tnr),e(L0,Mnr),e(L0,C1e),e(C1e,Enr),e(po,Cnr),M(x0,po,null),b(f,pje,u),b(f,xd,u),e(xd,$0),e($0,w1e),M(WL,w1e,null),e(xd,wnr),e(xd,A1e),e(A1e,Anr),b(f,_je,u),b(f,Qo,u),M(QL,Qo,null),e(Qo,ynr),e(Qo,$d),e($d,Lnr),e($d,zz),e(zz,xnr),e($d,$nr),e($d,Wz),e(Wz,knr),e($d,Snr),e(Qo,Rnr),e(Qo,HL),e(HL,Pnr),e(HL,y1e),e(y1e,Bnr),e(HL,Inr),e(Qo,Nnr),e(Qo,Et),M(UL,Et,null),e(Et,qnr),e(Et,L1e),e(L1e,jnr),e(Et,Dnr),e(Et,kd),e(kd,Gnr),e(kd,x1e),e(x1e,Onr),e(kd,Vnr),e(kd,Qz),e(Qz,Xnr),e(kd,znr),e(Et,Wnr),M(k0,Et,null),e(Qo,Qnr),e(Qo,_o),M(JL,_o,null),e(_o,Hnr),e(_o,$1e),e($1e,Unr),e(_o,Jnr),e(_o,Qa),e(Qa,Ynr),e(Qa,k1e),e(k1e,Knr),e(Qa,Znr),e(Qa,S1e),e(S1e,esr),e(Qa,osr),e(Qa,R1e),e(R1e,rsr),e(Qa,tsr),e(_o,asr),e(_o,YL),e(YL,S0),e(S0,P1e),e(P1e,nsr),e(S0,ssr),e(S0,Hz),e(Hz,lsr),e(S0,isr),e(YL,dsr),e(YL,R0),e(R0,B1e),e(B1e,csr),e(R0,fsr),e(R0,Uz),e(Uz,msr),e(R0,gsr),e(_o,hsr),e(_o,P0),e(P0,psr),e(P0,I1e),e(I1e,_sr),e(P0,usr),e(P0,N1e),e(N1e,bsr),e(_o,vsr),M(B0,_o,null),b(f,uje,u),b(f,Sd,u),e(Sd,I0),e(I0,q1e),M(KL,q1e,null),e(Sd,Fsr),e(Sd,j1e),e(j1e,Tsr),b(f,bje,u),b(f,Ho,u),M(ZL,Ho,null),e(Ho,Msr),e(Ho,Rd),e(Rd,Esr),e(Rd,Jz),e(Jz,Csr),e(Rd,wsr),e(Rd,Yz),e(Yz,Asr),e(Rd,ysr),e(Ho,Lsr),e(Ho,e8),e(e8,xsr),e(e8,D1e),e(D1e,$sr),e(e8,ksr),e(Ho,Ssr),e(Ho,Ct),M(o8,Ct,null),e(Ct,Rsr),e(Ct,G1e),e(G1e,Psr),e(Ct,Bsr),e(Ct,Pd),e(Pd,Isr),e(Pd,O1e),e(O1e,Nsr),e(Pd,qsr),e(Pd,Kz),e(Kz,jsr),e(Pd,Dsr),e(Ct,Gsr),M(N0,Ct,null),e(Ho,Osr),e(Ho,uo),M(r8,uo,null),e(uo,Vsr),e(uo,V1e),e(V1e,Xsr),e(uo,zsr),e(uo,Ha),e(Ha,Wsr),e(Ha,X1e),e(X1e,Qsr),e(Ha,Hsr),e(Ha,z1e),e(z1e,Usr),e(Ha,Jsr),e(Ha,W1e),e(W1e,Ysr),e(Ha,Ksr),e(uo,Zsr),e(uo,Q1e),e(Q1e,q0),e(q0,H1e),e(H1e,elr),e(q0,olr),e(q0,Zz),e(Zz,rlr),e(q0,tlr),e(uo,alr),e(uo,j0),e(j0,nlr),e(j0,U1e),e(U1e,slr),e(j0,llr),e(j0,J1e),e(J1e,ilr),e(uo,dlr),M(D0,uo,null),b(f,vje,u),b(f,Bd,u),e(Bd,G0),e(G0,Y1e),M(t8,Y1e,null),e(Bd,clr),e(Bd,K1e),e(K1e,flr),b(f,Fje,u),b(f,Uo,u),M(a8,Uo,null),e(Uo,mlr),e(Uo,Id),e(Id,glr),e(Id,eW),e(eW,hlr),e(Id,plr),e(Id,oW),e(oW,_lr),e(Id,ulr),e(Uo,blr),e(Uo,n8),e(n8,vlr),e(n8,Z1e),e(Z1e,Flr),e(n8,Tlr),e(Uo,Mlr),e(Uo,wt),M(s8,wt,null),e(wt,Elr),e(wt,ebe),e(ebe,Clr),e(wt,wlr),e(wt,Nd),e(Nd,Alr),e(Nd,obe),e(obe,ylr),e(Nd,Llr),e(Nd,rW),e(rW,xlr),e(Nd,$lr),e(wt,klr),M(O0,wt,null),e(Uo,Slr),e(Uo,bo),M(l8,bo,null),e(bo,Rlr),e(bo,rbe),e(rbe,Plr),e(bo,Blr),e(bo,Ua),e(Ua,Ilr),e(Ua,tbe),e(tbe,Nlr),e(Ua,qlr),e(Ua,abe),e(abe,jlr),e(Ua,Dlr),e(Ua,nbe),e(nbe,Glr),e(Ua,Olr),e(bo,Vlr),e(bo,Ja),e(Ja,V0),e(V0,sbe),e(sbe,Xlr),e(V0,zlr),e(V0,tW),e(tW,Wlr),e(V0,Qlr),e(Ja,Hlr),e(Ja,X0),e(X0,lbe),e(lbe,Ulr),e(X0,Jlr),e(X0,aW),e(aW,Ylr),e(X0,Klr),e(Ja,Zlr),e(Ja,z0),e(z0,ibe),e(ibe,eir),e(z0,oir),e(z0,nW),e(nW,rir),e(z0,tir),e(Ja,air),e(Ja,W0),e(W0,dbe),e(dbe,nir),e(W0,sir),e(W0,sW),e(sW,lir),e(W0,iir),e(bo,dir),e(bo,Q0),e(Q0,cir),e(Q0,cbe),e(cbe,fir),e(Q0,mir),e(Q0,fbe),e(fbe,gir),e(bo,hir),M(H0,bo,null),b(f,Tje,u),b(f,qd,u),e(qd,U0),e(U0,mbe),M(i8,mbe,null),e(qd,pir),e(qd,gbe),e(gbe,_ir),b(f,Mje,u),b(f,Jo,u),M(d8,Jo,null),e(Jo,uir),e(Jo,jd),e(jd,bir),e(jd,lW),e(lW,vir),e(jd,Fir),e(jd,iW),e(iW,Tir),e(jd,Mir),e(Jo,Eir),e(Jo,c8),e(c8,Cir),e(c8,hbe),e(hbe,wir),e(c8,Air),e(Jo,yir),e(Jo,At),M(f8,At,null),e(At,Lir),e(At,pbe),e(pbe,xir),e(At,$ir),e(At,Dd),e(Dd,kir),e(Dd,_be),e(_be,Sir),e(Dd,Rir),e(Dd,dW),e(dW,Pir),e(Dd,Bir),e(At,Iir),M(J0,At,null),e(Jo,Nir),e(Jo,vo),M(m8,vo,null),e(vo,qir),e(vo,ube),e(ube,jir),e(vo,Dir),e(vo,Ya),e(Ya,Gir),e(Ya,bbe),e(bbe,Oir),e(Ya,Vir),e(Ya,vbe),e(vbe,Xir),e(Ya,zir),e(Ya,Fbe),e(Fbe,Wir),e(Ya,Qir),e(vo,Hir),e(vo,Tbe),e(Tbe,Y0),e(Y0,Mbe),e(Mbe,Uir),e(Y0,Jir),e(Y0,cW),e(cW,Yir),e(Y0,Kir),e(vo,Zir),e(vo,K0),e(K0,edr),e(K0,Ebe),e(Ebe,odr),e(K0,rdr),e(K0,Cbe),e(Cbe,tdr),e(vo,adr),M(Z0,vo,null),b(f,Eje,u),b(f,Gd,u),e(Gd,eT),e(eT,wbe),M(g8,wbe,null),e(Gd,ndr),e(Gd,Abe),e(Abe,sdr),b(f,Cje,u),b(f,Yo,u),M(h8,Yo,null),e(Yo,ldr),e(Yo,Od),e(Od,idr),e(Od,fW),e(fW,ddr),e(Od,cdr),e(Od,mW),e(mW,fdr),e(Od,mdr),e(Yo,gdr),e(Yo,p8),e(p8,hdr),e(p8,ybe),e(ybe,pdr),e(p8,_dr),e(Yo,udr),e(Yo,yt),M(_8,yt,null),e(yt,bdr),e(yt,Lbe),e(Lbe,vdr),e(yt,Fdr),e(yt,Vd),e(Vd,Tdr),e(Vd,xbe),e(xbe,Mdr),e(Vd,Edr),e(Vd,gW),e(gW,Cdr),e(Vd,wdr),e(yt,Adr),M(oT,yt,null),e(Yo,ydr),e(Yo,wr),M(u8,wr,null),e(wr,Ldr),e(wr,$be),e($be,xdr),e(wr,$dr),e(wr,Ka),e(Ka,kdr),e(Ka,kbe),e(kbe,Sdr),e(Ka,Rdr),e(Ka,Sbe),e(Sbe,Pdr),e(Ka,Bdr),e(Ka,Rbe),e(Rbe,Idr),e(Ka,Ndr),e(wr,qdr),e(wr,q),e(q,rT),e(rT,Pbe),e(Pbe,jdr),e(rT,Ddr),e(rT,hW),e(hW,Gdr),e(rT,Odr),e(q,Vdr),e(q,tT),e(tT,Bbe),e(Bbe,Xdr),e(tT,zdr),e(tT,pW),e(pW,Wdr),e(tT,Qdr),e(q,Hdr),e(q,aT),e(aT,Ibe),e(Ibe,Udr),e(aT,Jdr),e(aT,_W),e(_W,Ydr),e(aT,Kdr),e(q,Zdr),e(q,nT),e(nT,Nbe),e(Nbe,ecr),e(nT,ocr),e(nT,uW),e(uW,rcr),e(nT,tcr),e(q,acr),e(q,sT),e(sT,qbe),e(qbe,ncr),e(sT,scr),e(sT,bW),e(bW,lcr),e(sT,icr),e(q,dcr),e(q,lT),e(lT,jbe),e(jbe,ccr),e(lT,fcr),e(lT,vW),e(vW,mcr),e(lT,gcr),e(q,hcr),e(q,iT),e(iT,Dbe),e(Dbe,pcr),e(iT,_cr),e(iT,FW),e(FW,ucr),e(iT,bcr),e(q,vcr),e(q,dT),e(dT,Gbe),e(Gbe,Fcr),e(dT,Tcr),e(dT,TW),e(TW,Mcr),e(dT,Ecr),e(q,Ccr),e(q,cT),e(cT,Obe),e(Obe,wcr),e(cT,Acr),e(cT,MW),e(MW,ycr),e(cT,Lcr),e(q,xcr),e(q,fT),e(fT,Vbe),e(Vbe,$cr),e(fT,kcr),e(fT,EW),e(EW,Scr),e(fT,Rcr),e(q,Pcr),e(q,mT),e(mT,Xbe),e(Xbe,Bcr),e(mT,Icr),e(mT,CW),e(CW,Ncr),e(mT,qcr),e(q,jcr),e(q,gT),e(gT,zbe),e(zbe,Dcr),e(gT,Gcr),e(gT,wW),e(wW,Ocr),e(gT,Vcr),e(q,Xcr),e(q,hT),e(hT,Wbe),e(Wbe,zcr),e(hT,Wcr),e(hT,AW),e(AW,Qcr),e(hT,Hcr),e(q,Ucr),e(q,pT),e(pT,Qbe),e(Qbe,Jcr),e(pT,Ycr),e(pT,yW),e(yW,Kcr),e(pT,Zcr),e(q,efr),e(q,_T),e(_T,Hbe),e(Hbe,ofr),e(_T,rfr),e(_T,LW),e(LW,tfr),e(_T,afr),e(q,nfr),e(q,uT),e(uT,Ube),e(Ube,sfr),e(uT,lfr),e(uT,xW),e(xW,ifr),e(uT,dfr),e(q,cfr),e(q,bT),e(bT,Jbe),e(Jbe,ffr),e(bT,mfr),e(bT,$W),e($W,gfr),e(bT,hfr),e(q,pfr),e(q,Is),e(Is,Ybe),e(Ybe,_fr),e(Is,ufr),e(Is,kW),e(kW,bfr),e(Is,vfr),e(Is,SW),e(SW,Ffr),e(Is,Tfr),e(q,Mfr),e(q,vT),e(vT,Kbe),e(Kbe,Efr),e(vT,Cfr),e(vT,RW),e(RW,wfr),e(vT,Afr),e(q,yfr),e(q,FT),e(FT,Zbe),e(Zbe,Lfr),e(FT,xfr),e(FT,PW),e(PW,$fr),e(FT,kfr),e(q,Sfr),e(q,TT),e(TT,e2e),e(e2e,Rfr),e(TT,Pfr),e(TT,BW),e(BW,Bfr),e(TT,Ifr),e(q,Nfr),e(q,MT),e(MT,o2e),e(o2e,qfr),e(MT,jfr),e(MT,IW),e(IW,Dfr),e(MT,Gfr),e(q,Ofr),e(q,ET),e(ET,r2e),e(r2e,Vfr),e(ET,Xfr),e(ET,NW),e(NW,zfr),e(ET,Wfr),e(q,Qfr),e(q,CT),e(CT,t2e),e(t2e,Hfr),e(CT,Ufr),e(CT,qW),e(qW,Jfr),e(CT,Yfr),e(q,Kfr),e(q,wT),e(wT,a2e),e(a2e,Zfr),e(wT,emr),e(wT,jW),e(jW,omr),e(wT,rmr),e(q,tmr),e(q,AT),e(AT,n2e),e(n2e,amr),e(AT,nmr),e(AT,DW),e(DW,smr),e(AT,lmr),e(q,imr),e(q,yT),e(yT,s2e),e(s2e,dmr),e(yT,cmr),e(yT,GW),e(GW,fmr),e(yT,mmr),e(q,gmr),e(q,LT),e(LT,l2e),e(l2e,hmr),e(LT,pmr),e(LT,OW),e(OW,_mr),e(LT,umr),e(q,bmr),e(q,xT),e(xT,i2e),e(i2e,vmr),e(xT,Fmr),e(xT,VW),e(VW,Tmr),e(xT,Mmr),e(q,Emr),e(q,$T),e($T,d2e),e(d2e,Cmr),e($T,wmr),e($T,XW),e(XW,Amr),e($T,ymr),e(q,Lmr),e(q,kT),e(kT,c2e),e(c2e,xmr),e(kT,$mr),e(kT,zW),e(zW,kmr),e(kT,Smr),e(q,Rmr),e(q,ST),e(ST,f2e),e(f2e,Pmr),e(ST,Bmr),e(ST,WW),e(WW,Imr),e(ST,Nmr),e(q,qmr),e(q,RT),e(RT,m2e),e(m2e,jmr),e(RT,Dmr),e(RT,QW),e(QW,Gmr),e(RT,Omr),e(q,Vmr),e(q,PT),e(PT,g2e),e(g2e,Xmr),e(PT,zmr),e(PT,HW),e(HW,Wmr),e(PT,Qmr),e(q,Hmr),e(q,BT),e(BT,h2e),e(h2e,Umr),e(BT,Jmr),e(BT,UW),e(UW,Ymr),e(BT,Kmr),e(q,Zmr),e(q,IT),e(IT,p2e),e(p2e,egr),e(IT,ogr),e(IT,JW),e(JW,rgr),e(IT,tgr),e(q,agr),e(q,NT),e(NT,_2e),e(_2e,ngr),e(NT,sgr),e(NT,YW),e(YW,lgr),e(NT,igr),e(q,dgr),e(q,qT),e(qT,u2e),e(u2e,cgr),e(qT,fgr),e(qT,KW),e(KW,mgr),e(qT,ggr),e(q,hgr),e(q,jT),e(jT,b2e),e(b2e,pgr),e(jT,_gr),e(jT,ZW),e(ZW,ugr),e(jT,bgr),e(q,vgr),e(q,DT),e(DT,v2e),e(v2e,Fgr),e(DT,Tgr),e(DT,eQ),e(eQ,Mgr),e(DT,Egr),e(q,Cgr),e(q,GT),e(GT,F2e),e(F2e,wgr),e(GT,Agr),e(GT,oQ),e(oQ,ygr),e(GT,Lgr),e(q,xgr),e(q,OT),e(OT,T2e),e(T2e,$gr),e(OT,kgr),e(OT,rQ),e(rQ,Sgr),e(OT,Rgr),e(q,Pgr),e(q,VT),e(VT,M2e),e(M2e,Bgr),e(VT,Igr),e(VT,tQ),e(tQ,Ngr),e(VT,qgr),e(q,jgr),e(q,XT),e(XT,E2e),e(E2e,Dgr),e(XT,Ggr),e(XT,aQ),e(aQ,Ogr),e(XT,Vgr),e(q,Xgr),e(q,zT),e(zT,C2e),e(C2e,zgr),e(zT,Wgr),e(zT,nQ),e(nQ,Qgr),e(zT,Hgr),e(q,Ugr),e(q,WT),e(WT,w2e),e(w2e,Jgr),e(WT,Ygr),e(WT,sQ),e(sQ,Kgr),e(WT,Zgr),e(q,ehr),e(q,QT),e(QT,A2e),e(A2e,ohr),e(QT,rhr),e(QT,lQ),e(lQ,thr),e(QT,ahr),e(wr,nhr),M(HT,wr,null),b(f,wje,u),b(f,Xd,u),e(Xd,UT),e(UT,y2e),M(b8,y2e,null),e(Xd,shr),e(Xd,L2e),e(L2e,lhr),b(f,Aje,u),b(f,Ko,u),M(v8,Ko,null),e(Ko,ihr),e(Ko,zd),e(zd,dhr),e(zd,iQ),e(iQ,chr),e(zd,fhr),e(zd,dQ),e(dQ,mhr),e(zd,ghr),e(Ko,hhr),e(Ko,F8),e(F8,phr),e(F8,x2e),e(x2e,_hr),e(F8,uhr),e(Ko,bhr),e(Ko,Lt),M(T8,Lt,null),e(Lt,vhr),e(Lt,$2e),e($2e,Fhr),e(Lt,Thr),e(Lt,Wd),e(Wd,Mhr),e(Wd,k2e),e(k2e,Ehr),e(Wd,Chr),e(Wd,cQ),e(cQ,whr),e(Wd,Ahr),e(Lt,yhr),M(JT,Lt,null),e(Ko,Lhr),e(Ko,Ar),M(M8,Ar,null),e(Ar,xhr),e(Ar,S2e),e(S2e,$hr),e(Ar,khr),e(Ar,Za),e(Za,Shr),e(Za,R2e),e(R2e,Rhr),e(Za,Phr),e(Za,P2e),e(P2e,Bhr),e(Za,Ihr),e(Za,B2e),e(B2e,Nhr),e(Za,qhr),e(Ar,jhr),e(Ar,se),e(se,YT),e(YT,I2e),e(I2e,Dhr),e(YT,Ghr),e(YT,fQ),e(fQ,Ohr),e(YT,Vhr),e(se,Xhr),e(se,KT),e(KT,N2e),e(N2e,zhr),e(KT,Whr),e(KT,mQ),e(mQ,Qhr),e(KT,Hhr),e(se,Uhr),e(se,ZT),e(ZT,q2e),e(q2e,Jhr),e(ZT,Yhr),e(ZT,gQ),e(gQ,Khr),e(ZT,Zhr),e(se,epr),e(se,e7),e(e7,j2e),e(j2e,opr),e(e7,rpr),e(e7,hQ),e(hQ,tpr),e(e7,apr),e(se,npr),e(se,o7),e(o7,D2e),e(D2e,spr),e(o7,lpr),e(o7,pQ),e(pQ,ipr),e(o7,dpr),e(se,cpr),e(se,r7),e(r7,G2e),e(G2e,fpr),e(r7,mpr),e(r7,_Q),e(_Q,gpr),e(r7,hpr),e(se,ppr),e(se,t7),e(t7,O2e),e(O2e,_pr),e(t7,upr),e(t7,uQ),e(uQ,bpr),e(t7,vpr),e(se,Fpr),e(se,a7),e(a7,V2e),e(V2e,Tpr),e(a7,Mpr),e(a7,bQ),e(bQ,Epr),e(a7,Cpr),e(se,wpr),e(se,n7),e(n7,X2e),e(X2e,Apr),e(n7,ypr),e(n7,vQ),e(vQ,Lpr),e(n7,xpr),e(se,$pr),e(se,s7),e(s7,z2e),e(z2e,kpr),e(s7,Spr),e(s7,FQ),e(FQ,Rpr),e(s7,Ppr),e(se,Bpr),e(se,l7),e(l7,W2e),e(W2e,Ipr),e(l7,Npr),e(l7,TQ),e(TQ,qpr),e(l7,jpr),e(se,Dpr),e(se,i7),e(i7,Q2e),e(Q2e,Gpr),e(i7,Opr),e(i7,MQ),e(MQ,Vpr),e(i7,Xpr),e(se,zpr),e(se,d7),e(d7,H2e),e(H2e,Wpr),e(d7,Qpr),e(d7,EQ),e(EQ,Hpr),e(d7,Upr),e(se,Jpr),e(se,c7),e(c7,U2e),e(U2e,Ypr),e(c7,Kpr),e(c7,CQ),e(CQ,Zpr),e(c7,e_r),e(se,o_r),e(se,f7),e(f7,J2e),e(J2e,r_r),e(f7,t_r),e(f7,wQ),e(wQ,a_r),e(f7,n_r),e(se,s_r),e(se,m7),e(m7,Y2e),e(Y2e,l_r),e(m7,i_r),e(m7,AQ),e(AQ,d_r),e(m7,c_r),e(se,f_r),e(se,g7),e(g7,K2e),e(K2e,m_r),e(g7,g_r),e(g7,yQ),e(yQ,h_r),e(g7,p_r),e(se,__r),e(se,h7),e(h7,Z2e),e(Z2e,u_r),e(h7,b_r),e(h7,LQ),e(LQ,v_r),e(h7,F_r),e(se,T_r),e(se,p7),e(p7,e5e),e(e5e,M_r),e(p7,E_r),e(p7,xQ),e(xQ,C_r),e(p7,w_r),e(se,A_r),e(se,_7),e(_7,o5e),e(o5e,y_r),e(_7,L_r),e(_7,$Q),e($Q,x_r),e(_7,$_r),e(se,k_r),e(se,u7),e(u7,r5e),e(r5e,S_r),e(u7,R_r),e(u7,kQ),e(kQ,P_r),e(u7,B_r),e(se,I_r),e(se,b7),e(b7,t5e),e(t5e,N_r),e(b7,q_r),e(b7,SQ),e(SQ,j_r),e(b7,D_r),e(se,G_r),e(se,v7),e(v7,a5e),e(a5e,O_r),e(v7,V_r),e(v7,RQ),e(RQ,X_r),e(v7,z_r),e(Ar,W_r),M(F7,Ar,null),b(f,yje,u),b(f,Qd,u),e(Qd,T7),e(T7,n5e),M(E8,n5e,null),e(Qd,Q_r),e(Qd,s5e),e(s5e,H_r),b(f,Lje,u),b(f,Zo,u),M(C8,Zo,null),e(Zo,U_r),e(Zo,Hd),e(Hd,J_r),e(Hd,PQ),e(PQ,Y_r),e(Hd,K_r),e(Hd,BQ),e(BQ,Z_r),e(Hd,eur),e(Zo,our),e(Zo,w8),e(w8,rur),e(w8,l5e),e(l5e,tur),e(w8,aur),e(Zo,nur),e(Zo,xt),M(A8,xt,null),e(xt,sur),e(xt,i5e),e(i5e,lur),e(xt,iur),e(xt,Ud),e(Ud,dur),e(Ud,d5e),e(d5e,cur),e(Ud,fur),e(Ud,IQ),e(IQ,mur),e(Ud,gur),e(xt,hur),M(M7,xt,null),e(Zo,pur),e(Zo,yr),M(y8,yr,null),e(yr,_ur),e(yr,c5e),e(c5e,uur),e(yr,bur),e(yr,en),e(en,vur),e(en,f5e),e(f5e,Fur),e(en,Tur),e(en,m5e),e(m5e,Mur),e(en,Eur),e(en,g5e),e(g5e,Cur),e(en,wur),e(yr,Aur),e(yr,Te),e(Te,E7),e(E7,h5e),e(h5e,yur),e(E7,Lur),e(E7,NQ),e(NQ,xur),e(E7,$ur),e(Te,kur),e(Te,C7),e(C7,p5e),e(p5e,Sur),e(C7,Rur),e(C7,qQ),e(qQ,Pur),e(C7,Bur),e(Te,Iur),e(Te,w7),e(w7,_5e),e(_5e,Nur),e(w7,qur),e(w7,jQ),e(jQ,jur),e(w7,Dur),e(Te,Gur),e(Te,A7),e(A7,u5e),e(u5e,Our),e(A7,Vur),e(A7,DQ),e(DQ,Xur),e(A7,zur),e(Te,Wur),e(Te,y7),e(y7,b5e),e(b5e,Qur),e(y7,Hur),e(y7,GQ),e(GQ,Uur),e(y7,Jur),e(Te,Yur),e(Te,L7),e(L7,v5e),e(v5e,Kur),e(L7,Zur),e(L7,OQ),e(OQ,e1r),e(L7,o1r),e(Te,r1r),e(Te,x7),e(x7,F5e),e(F5e,t1r),e(x7,a1r),e(x7,VQ),e(VQ,n1r),e(x7,s1r),e(Te,l1r),e(Te,$7),e($7,T5e),e(T5e,i1r),e($7,d1r),e($7,XQ),e(XQ,c1r),e($7,f1r),e(Te,m1r),e(Te,k7),e(k7,M5e),e(M5e,g1r),e(k7,h1r),e(k7,zQ),e(zQ,p1r),e(k7,_1r),e(Te,u1r),e(Te,S7),e(S7,E5e),e(E5e,b1r),e(S7,v1r),e(S7,WQ),e(WQ,F1r),e(S7,T1r),e(Te,M1r),e(Te,R7),e(R7,C5e),e(C5e,E1r),e(R7,C1r),e(R7,QQ),e(QQ,w1r),e(R7,A1r),e(Te,y1r),e(Te,P7),e(P7,w5e),e(w5e,L1r),e(P7,x1r),e(P7,HQ),e(HQ,$1r),e(P7,k1r),e(Te,S1r),e(Te,B7),e(B7,A5e),e(A5e,R1r),e(B7,P1r),e(B7,UQ),e(UQ,B1r),e(B7,I1r),e(yr,N1r),M(I7,yr,null),b(f,xje,u),b(f,Jd,u),e(Jd,N7),e(N7,y5e),M(L8,y5e,null),e(Jd,q1r),e(Jd,L5e),e(L5e,j1r),b(f,$je,u),b(f,er,u),M(x8,er,null),e(er,D1r),e(er,Yd),e(Yd,G1r),e(Yd,JQ),e(JQ,O1r),e(Yd,V1r),e(Yd,YQ),e(YQ,X1r),e(Yd,z1r),e(er,W1r),e(er,$8),e($8,Q1r),e($8,x5e),e(x5e,H1r),e($8,U1r),e(er,J1r),e(er,$t),M(k8,$t,null),e($t,Y1r),e($t,$5e),e($5e,K1r),e($t,Z1r),e($t,Kd),e(Kd,ebr),e(Kd,k5e),e(k5e,obr),e(Kd,rbr),e(Kd,KQ),e(KQ,tbr),e(Kd,abr),e($t,nbr),M(q7,$t,null),e(er,sbr),e(er,Lr),M(S8,Lr,null),e(Lr,lbr),e(Lr,S5e),e(S5e,ibr),e(Lr,dbr),e(Lr,on),e(on,cbr),e(on,R5e),e(R5e,fbr),e(on,mbr),e(on,P5e),e(P5e,gbr),e(on,hbr),e(on,B5e),e(B5e,pbr),e(on,_br),e(Lr,ubr),e(Lr,rn),e(rn,j7),e(j7,I5e),e(I5e,bbr),e(j7,vbr),e(j7,ZQ),e(ZQ,Fbr),e(j7,Tbr),e(rn,Mbr),e(rn,D7),e(D7,N5e),e(N5e,Ebr),e(D7,Cbr),e(D7,eH),e(eH,wbr),e(D7,Abr),e(rn,ybr),e(rn,G7),e(G7,q5e),e(q5e,Lbr),e(G7,xbr),e(G7,oH),e(oH,$br),e(G7,kbr),e(rn,Sbr),e(rn,O7),e(O7,j5e),e(j5e,Rbr),e(O7,Pbr),e(O7,rH),e(rH,Bbr),e(O7,Ibr),e(Lr,Nbr),M(V7,Lr,null),b(f,kje,u),b(f,Zd,u),e(Zd,X7),e(X7,D5e),M(R8,D5e,null),e(Zd,qbr),e(Zd,G5e),e(G5e,jbr),b(f,Sje,u),b(f,or,u),M(P8,or,null),e(or,Dbr),e(or,ec),e(ec,Gbr),e(ec,tH),e(tH,Obr),e(ec,Vbr),e(ec,aH),e(aH,Xbr),e(ec,zbr),e(or,Wbr),e(or,B8),e(B8,Qbr),e(B8,O5e),e(O5e,Hbr),e(B8,Ubr),e(or,Jbr),e(or,kt),M(I8,kt,null),e(kt,Ybr),e(kt,V5e),e(V5e,Kbr),e(kt,Zbr),e(kt,oc),e(oc,e2r),e(oc,X5e),e(X5e,o2r),e(oc,r2r),e(oc,nH),e(nH,t2r),e(oc,a2r),e(kt,n2r),M(z7,kt,null),e(or,s2r),e(or,xr),M(N8,xr,null),e(xr,l2r),e(xr,z5e),e(z5e,i2r),e(xr,d2r),e(xr,tn),e(tn,c2r),e(tn,W5e),e(W5e,f2r),e(tn,m2r),e(tn,Q5e),e(Q5e,g2r),e(tn,h2r),e(tn,H5e),e(H5e,p2r),e(tn,_2r),e(xr,u2r),e(xr,ie),e(ie,W7),e(W7,U5e),e(U5e,b2r),e(W7,v2r),e(W7,sH),e(sH,F2r),e(W7,T2r),e(ie,M2r),e(ie,Q7),e(Q7,J5e),e(J5e,E2r),e(Q7,C2r),e(Q7,lH),e(lH,w2r),e(Q7,A2r),e(ie,y2r),e(ie,H7),e(H7,Y5e),e(Y5e,L2r),e(H7,x2r),e(H7,iH),e(iH,$2r),e(H7,k2r),e(ie,S2r),e(ie,U7),e(U7,K5e),e(K5e,R2r),e(U7,P2r),e(U7,dH),e(dH,B2r),e(U7,I2r),e(ie,N2r),e(ie,J7),e(J7,Z5e),e(Z5e,q2r),e(J7,j2r),e(J7,cH),e(cH,D2r),e(J7,G2r),e(ie,O2r),e(ie,Y7),e(Y7,eve),e(eve,V2r),e(Y7,X2r),e(Y7,fH),e(fH,z2r),e(Y7,W2r),e(ie,Q2r),e(ie,K7),e(K7,ove),e(ove,H2r),e(K7,U2r),e(K7,mH),e(mH,J2r),e(K7,Y2r),e(ie,K2r),e(ie,Z7),e(Z7,rve),e(rve,Z2r),e(Z7,e5r),e(Z7,gH),e(gH,o5r),e(Z7,r5r),e(ie,t5r),e(ie,eM),e(eM,tve),e(tve,a5r),e(eM,n5r),e(eM,hH),e(hH,s5r),e(eM,l5r),e(ie,i5r),e(ie,oM),e(oM,ave),e(ave,d5r),e(oM,c5r),e(oM,pH),e(pH,f5r),e(oM,m5r),e(ie,g5r),e(ie,rM),e(rM,nve),e(nve,h5r),e(rM,p5r),e(rM,_H),e(_H,_5r),e(rM,u5r),e(ie,b5r),e(ie,tM),e(tM,sve),e(sve,v5r),e(tM,F5r),e(tM,uH),e(uH,T5r),e(tM,M5r),e(ie,E5r),e(ie,aM),e(aM,lve),e(lve,C5r),e(aM,w5r),e(aM,bH),e(bH,A5r),e(aM,y5r),e(ie,L5r),e(ie,nM),e(nM,ive),e(ive,x5r),e(nM,$5r),e(nM,vH),e(vH,k5r),e(nM,S5r),e(ie,R5r),e(ie,sM),e(sM,dve),e(dve,P5r),e(sM,B5r),e(sM,FH),e(FH,I5r),e(sM,N5r),e(ie,q5r),e(ie,lM),e(lM,cve),e(cve,j5r),e(lM,D5r),e(lM,TH),e(TH,G5r),e(lM,O5r),e(ie,V5r),e(ie,iM),e(iM,fve),e(fve,X5r),e(iM,z5r),e(iM,MH),e(MH,W5r),e(iM,Q5r),e(ie,H5r),e(ie,dM),e(dM,mve),e(mve,U5r),e(dM,J5r),e(dM,EH),e(EH,Y5r),e(dM,K5r),e(ie,Z5r),e(ie,cM),e(cM,gve),e(gve,evr),e(cM,ovr),e(cM,CH),e(CH,rvr),e(cM,tvr),e(ie,avr),e(ie,fM),e(fM,hve),e(hve,nvr),e(fM,svr),e(fM,wH),e(wH,lvr),e(fM,ivr),e(xr,dvr),M(mM,xr,null),b(f,Rje,u),b(f,rc,u),e(rc,gM),e(gM,pve),M(q8,pve,null),e(rc,cvr),e(rc,_ve),e(_ve,fvr),b(f,Pje,u),b(f,rr,u),M(j8,rr,null),e(rr,mvr),e(rr,tc),e(tc,gvr),e(tc,AH),e(AH,hvr),e(tc,pvr),e(tc,yH),e(yH,_vr),e(tc,uvr),e(rr,bvr),e(rr,D8),e(D8,vvr),e(D8,uve),e(uve,Fvr),e(D8,Tvr),e(rr,Mvr),e(rr,St),M(G8,St,null),e(St,Evr),e(St,bve),e(bve,Cvr),e(St,wvr),e(St,ac),e(ac,Avr),e(ac,vve),e(vve,yvr),e(ac,Lvr),e(ac,LH),e(LH,xvr),e(ac,$vr),e(St,kvr),M(hM,St,null),e(rr,Svr),e(rr,$r),M(O8,$r,null),e($r,Rvr),e($r,Fve),e(Fve,Pvr),e($r,Bvr),e($r,an),e(an,Ivr),e(an,Tve),e(Tve,Nvr),e(an,qvr),e(an,Mve),e(Mve,jvr),e(an,Dvr),e(an,Eve),e(Eve,Gvr),e(an,Ovr),e($r,Vvr),e($r,ye),e(ye,pM),e(pM,Cve),e(Cve,Xvr),e(pM,zvr),e(pM,xH),e(xH,Wvr),e(pM,Qvr),e(ye,Hvr),e(ye,_M),e(_M,wve),e(wve,Uvr),e(_M,Jvr),e(_M,$H),e($H,Yvr),e(_M,Kvr),e(ye,Zvr),e(ye,uM),e(uM,Ave),e(Ave,eFr),e(uM,oFr),e(uM,kH),e(kH,rFr),e(uM,tFr),e(ye,aFr),e(ye,bM),e(bM,yve),e(yve,nFr),e(bM,sFr),e(bM,SH),e(SH,lFr),e(bM,iFr),e(ye,dFr),e(ye,vM),e(vM,Lve),e(Lve,cFr),e(vM,fFr),e(vM,RH),e(RH,mFr),e(vM,gFr),e(ye,hFr),e(ye,FM),e(FM,xve),e(xve,pFr),e(FM,_Fr),e(FM,PH),e(PH,uFr),e(FM,bFr),e(ye,vFr),e(ye,TM),e(TM,$ve),e($ve,FFr),e(TM,TFr),e(TM,BH),e(BH,MFr),e(TM,EFr),e(ye,CFr),e(ye,MM),e(MM,kve),e(kve,wFr),e(MM,AFr),e(MM,IH),e(IH,yFr),e(MM,LFr),e(ye,xFr),e(ye,EM),e(EM,Sve),e(Sve,$Fr),e(EM,kFr),e(EM,NH),e(NH,SFr),e(EM,RFr),e(ye,PFr),e(ye,CM),e(CM,Rve),e(Rve,BFr),e(CM,IFr),e(CM,qH),e(qH,NFr),e(CM,qFr),e($r,jFr),M(wM,$r,null),b(f,Bje,u),b(f,nc,u),e(nc,AM),e(AM,Pve),M(V8,Pve,null),e(nc,DFr),e(nc,Bve),e(Bve,GFr),b(f,Ije,u),b(f,tr,u),M(X8,tr,null),e(tr,OFr),e(tr,sc),e(sc,VFr),e(sc,jH),e(jH,XFr),e(sc,zFr),e(sc,DH),e(DH,WFr),e(sc,QFr),e(tr,HFr),e(tr,z8),e(z8,UFr),e(z8,Ive),e(Ive,JFr),e(z8,YFr),e(tr,KFr),e(tr,Rt),M(W8,Rt,null),e(Rt,ZFr),e(Rt,Nve),e(Nve,e0r),e(Rt,o0r),e(Rt,lc),e(lc,r0r),e(lc,qve),e(qve,t0r),e(lc,a0r),e(lc,GH),e(GH,n0r),e(lc,s0r),e(Rt,l0r),M(yM,Rt,null),e(tr,i0r),e(tr,kr),M(Q8,kr,null),e(kr,d0r),e(kr,jve),e(jve,c0r),e(kr,f0r),e(kr,nn),e(nn,m0r),e(nn,Dve),e(Dve,g0r),e(nn,h0r),e(nn,Gve),e(Gve,p0r),e(nn,_0r),e(nn,Ove),e(Ove,u0r),e(nn,b0r),e(kr,v0r),e(kr,oe),e(oe,LM),e(LM,Vve),e(Vve,F0r),e(LM,T0r),e(LM,OH),e(OH,M0r),e(LM,E0r),e(oe,C0r),e(oe,xM),e(xM,Xve),e(Xve,w0r),e(xM,A0r),e(xM,VH),e(VH,y0r),e(xM,L0r),e(oe,x0r),e(oe,$M),e($M,zve),e(zve,$0r),e($M,k0r),e($M,XH),e(XH,S0r),e($M,R0r),e(oe,P0r),e(oe,kM),e(kM,Wve),e(Wve,B0r),e(kM,I0r),e(kM,zH),e(zH,N0r),e(kM,q0r),e(oe,j0r),e(oe,SM),e(SM,Qve),e(Qve,D0r),e(SM,G0r),e(SM,WH),e(WH,O0r),e(SM,V0r),e(oe,X0r),e(oe,RM),e(RM,Hve),e(Hve,z0r),e(RM,W0r),e(RM,QH),e(QH,Q0r),e(RM,H0r),e(oe,U0r),e(oe,PM),e(PM,Uve),e(Uve,J0r),e(PM,Y0r),e(PM,HH),e(HH,K0r),e(PM,Z0r),e(oe,eTr),e(oe,BM),e(BM,Jve),e(Jve,oTr),e(BM,rTr),e(BM,UH),e(UH,tTr),e(BM,aTr),e(oe,nTr),e(oe,IM),e(IM,Yve),e(Yve,sTr),e(IM,lTr),e(IM,JH),e(JH,iTr),e(IM,dTr),e(oe,cTr),e(oe,NM),e(NM,Kve),e(Kve,fTr),e(NM,mTr),e(NM,YH),e(YH,gTr),e(NM,hTr),e(oe,pTr),e(oe,qM),e(qM,Zve),e(Zve,_Tr),e(qM,uTr),e(qM,KH),e(KH,bTr),e(qM,vTr),e(oe,FTr),e(oe,jM),e(jM,eFe),e(eFe,TTr),e(jM,MTr),e(jM,ZH),e(ZH,ETr),e(jM,CTr),e(oe,wTr),e(oe,DM),e(DM,oFe),e(oFe,ATr),e(DM,yTr),e(DM,eU),e(eU,LTr),e(DM,xTr),e(oe,$Tr),e(oe,GM),e(GM,rFe),e(rFe,kTr),e(GM,STr),e(GM,oU),e(oU,RTr),e(GM,PTr),e(oe,BTr),e(oe,OM),e(OM,tFe),e(tFe,ITr),e(OM,NTr),e(OM,rU),e(rU,qTr),e(OM,jTr),e(oe,DTr),e(oe,VM),e(VM,aFe),e(aFe,GTr),e(VM,OTr),e(VM,tU),e(tU,VTr),e(VM,XTr),e(oe,zTr),e(oe,XM),e(XM,nFe),e(nFe,WTr),e(XM,QTr),e(XM,aU),e(aU,HTr),e(XM,UTr),e(oe,JTr),e(oe,zM),e(zM,sFe),e(sFe,YTr),e(zM,KTr),e(zM,nU),e(nU,ZTr),e(zM,e7r),e(oe,o7r),e(oe,WM),e(WM,lFe),e(lFe,r7r),e(WM,t7r),e(WM,sU),e(sU,a7r),e(WM,n7r),e(oe,s7r),e(oe,QM),e(QM,iFe),e(iFe,l7r),e(QM,i7r),e(QM,lU),e(lU,d7r),e(QM,c7r),e(oe,f7r),e(oe,HM),e(HM,dFe),e(dFe,m7r),e(HM,g7r),e(HM,iU),e(iU,h7r),e(HM,p7r),e(oe,_7r),e(oe,UM),e(UM,cFe),e(cFe,u7r),e(UM,b7r),e(UM,dU),e(dU,v7r),e(UM,F7r),e(oe,T7r),e(oe,JM),e(JM,fFe),e(fFe,M7r),e(JM,E7r),e(JM,cU),e(cU,C7r),e(JM,w7r),e(oe,A7r),e(oe,YM),e(YM,mFe),e(mFe,y7r),e(YM,L7r),e(YM,fU),e(fU,x7r),e(YM,$7r),e(oe,k7r),e(oe,KM),e(KM,gFe),e(gFe,S7r),e(KM,R7r),e(KM,mU),e(mU,P7r),e(KM,B7r),e(oe,I7r),e(oe,ZM),e(ZM,hFe),e(hFe,N7r),e(ZM,q7r),e(ZM,gU),e(gU,j7r),e(ZM,D7r),e(kr,G7r),M(e4,kr,null),b(f,Nje,u),b(f,ic,u),e(ic,o4),e(o4,pFe),M(H8,pFe,null),e(ic,O7r),e(ic,_Fe),e(_Fe,V7r),b(f,qje,u),b(f,ar,u),M(U8,ar,null),e(ar,X7r),e(ar,dc),e(dc,z7r),e(dc,hU),e(hU,W7r),e(dc,Q7r),e(dc,pU),e(pU,H7r),e(dc,U7r),e(ar,J7r),e(ar,J8),e(J8,Y7r),e(J8,uFe),e(uFe,K7r),e(J8,Z7r),e(ar,eMr),e(ar,Pt),M(Y8,Pt,null),e(Pt,oMr),e(Pt,bFe),e(bFe,rMr),e(Pt,tMr),e(Pt,cc),e(cc,aMr),e(cc,vFe),e(vFe,nMr),e(cc,sMr),e(cc,_U),e(_U,lMr),e(cc,iMr),e(Pt,dMr),M(r4,Pt,null),e(ar,cMr),e(ar,Sr),M(K8,Sr,null),e(Sr,fMr),e(Sr,FFe),e(FFe,mMr),e(Sr,gMr),e(Sr,sn),e(sn,hMr),e(sn,TFe),e(TFe,pMr),e(sn,_Mr),e(sn,MFe),e(MFe,uMr),e(sn,bMr),e(sn,EFe),e(EFe,vMr),e(sn,FMr),e(Sr,TMr),e(Sr,pe),e(pe,t4),e(t4,CFe),e(CFe,MMr),e(t4,EMr),e(t4,uU),e(uU,CMr),e(t4,wMr),e(pe,AMr),e(pe,a4),e(a4,wFe),e(wFe,yMr),e(a4,LMr),e(a4,bU),e(bU,xMr),e(a4,$Mr),e(pe,kMr),e(pe,n4),e(n4,AFe),e(AFe,SMr),e(n4,RMr),e(n4,vU),e(vU,PMr),e(n4,BMr),e(pe,IMr),e(pe,s4),e(s4,yFe),e(yFe,NMr),e(s4,qMr),e(s4,FU),e(FU,jMr),e(s4,DMr),e(pe,GMr),e(pe,l4),e(l4,LFe),e(LFe,OMr),e(l4,VMr),e(l4,TU),e(TU,XMr),e(l4,zMr),e(pe,WMr),e(pe,i4),e(i4,xFe),e(xFe,QMr),e(i4,HMr),e(i4,MU),e(MU,UMr),e(i4,JMr),e(pe,YMr),e(pe,d4),e(d4,$Fe),e($Fe,KMr),e(d4,ZMr),e(d4,EU),e(EU,e4r),e(d4,o4r),e(pe,r4r),e(pe,c4),e(c4,kFe),e(kFe,t4r),e(c4,a4r),e(c4,CU),e(CU,n4r),e(c4,s4r),e(pe,l4r),e(pe,f4),e(f4,SFe),e(SFe,i4r),e(f4,d4r),e(f4,wU),e(wU,c4r),e(f4,f4r),e(pe,m4r),e(pe,m4),e(m4,RFe),e(RFe,g4r),e(m4,h4r),e(m4,AU),e(AU,p4r),e(m4,_4r),e(pe,u4r),e(pe,g4),e(g4,PFe),e(PFe,b4r),e(g4,v4r),e(g4,yU),e(yU,F4r),e(g4,T4r),e(pe,M4r),e(pe,h4),e(h4,BFe),e(BFe,E4r),e(h4,C4r),e(h4,LU),e(LU,w4r),e(h4,A4r),e(pe,y4r),e(pe,p4),e(p4,IFe),e(IFe,L4r),e(p4,x4r),e(p4,xU),e(xU,$4r),e(p4,k4r),e(pe,S4r),e(pe,_4),e(_4,NFe),e(NFe,R4r),e(_4,P4r),e(_4,$U),e($U,B4r),e(_4,I4r),e(pe,N4r),e(pe,u4),e(u4,qFe),e(qFe,q4r),e(u4,j4r),e(u4,kU),e(kU,D4r),e(u4,G4r),e(pe,O4r),e(pe,b4),e(b4,jFe),e(jFe,V4r),e(b4,X4r),e(b4,SU),e(SU,z4r),e(b4,W4r),e(pe,Q4r),e(pe,v4),e(v4,DFe),e(DFe,H4r),e(v4,U4r),e(v4,RU),e(RU,J4r),e(v4,Y4r),e(Sr,K4r),M(F4,Sr,null),b(f,jje,u),b(f,fc,u),e(fc,T4),e(T4,GFe),M(Z8,GFe,null),e(fc,Z4r),e(fc,OFe),e(OFe,eEr),b(f,Dje,u),b(f,nr,u),M(e9,nr,null),e(nr,oEr),e(nr,mc),e(mc,rEr),e(mc,PU),e(PU,tEr),e(mc,aEr),e(mc,BU),e(BU,nEr),e(mc,sEr),e(nr,lEr),e(nr,o9),e(o9,iEr),e(o9,VFe),e(VFe,dEr),e(o9,cEr),e(nr,fEr),e(nr,Bt),M(r9,Bt,null),e(Bt,mEr),e(Bt,XFe),e(XFe,gEr),e(Bt,hEr),e(Bt,gc),e(gc,pEr),e(gc,zFe),e(zFe,_Er),e(gc,uEr),e(gc,IU),e(IU,bEr),e(gc,vEr),e(Bt,FEr),M(M4,Bt,null),e(nr,TEr),e(nr,Rr),M(t9,Rr,null),e(Rr,MEr),e(Rr,WFe),e(WFe,EEr),e(Rr,CEr),e(Rr,ln),e(ln,wEr),e(ln,QFe),e(QFe,AEr),e(ln,yEr),e(ln,HFe),e(HFe,LEr),e(ln,xEr),e(ln,UFe),e(UFe,$Er),e(ln,kEr),e(Rr,SEr),e(Rr,a9),e(a9,E4),e(E4,JFe),e(JFe,REr),e(E4,PEr),e(E4,NU),e(NU,BEr),e(E4,IEr),e(a9,NEr),e(a9,C4),e(C4,YFe),e(YFe,qEr),e(C4,jEr),e(C4,qU),e(qU,DEr),e(C4,GEr),e(Rr,OEr),M(w4,Rr,null),b(f,Gje,u),b(f,hc,u),e(hc,A4),e(A4,KFe),M(n9,KFe,null),e(hc,VEr),e(hc,ZFe),e(ZFe,XEr),b(f,Oje,u),b(f,sr,u),M(s9,sr,null),e(sr,zEr),e(sr,pc),e(pc,WEr),e(pc,jU),e(jU,QEr),e(pc,HEr),e(pc,DU),e(DU,UEr),e(pc,JEr),e(sr,YEr),e(sr,l9),e(l9,KEr),e(l9,e0e),e(e0e,ZEr),e(l9,eCr),e(sr,oCr),e(sr,It),M(i9,It,null),e(It,rCr),e(It,o0e),e(o0e,tCr),e(It,aCr),e(It,_c),e(_c,nCr),e(_c,r0e),e(r0e,sCr),e(_c,lCr),e(_c,GU),e(GU,iCr),e(_c,dCr),e(It,cCr),M(y4,It,null),e(sr,fCr),e(sr,Pr),M(d9,Pr,null),e(Pr,mCr),e(Pr,t0e),e(t0e,gCr),e(Pr,hCr),e(Pr,dn),e(dn,pCr),e(dn,a0e),e(a0e,_Cr),e(dn,uCr),e(dn,n0e),e(n0e,bCr),e(dn,vCr),e(dn,s0e),e(s0e,FCr),e(dn,TCr),e(Pr,MCr),e(Pr,l0e),e(l0e,L4),e(L4,i0e),e(i0e,ECr),e(L4,CCr),e(L4,OU),e(OU,wCr),e(L4,ACr),e(Pr,yCr),M(x4,Pr,null),b(f,Vje,u),b(f,uc,u),e(uc,$4),e($4,d0e),M(c9,d0e,null),e(uc,LCr),e(uc,c0e),e(c0e,xCr),b(f,Xje,u),b(f,lr,u),M(f9,lr,null),e(lr,$Cr),e(lr,bc),e(bc,kCr),e(bc,VU),e(VU,SCr),e(bc,RCr),e(bc,XU),e(XU,PCr),e(bc,BCr),e(lr,ICr),e(lr,m9),e(m9,NCr),e(m9,f0e),e(f0e,qCr),e(m9,jCr),e(lr,DCr),e(lr,Nt),M(g9,Nt,null),e(Nt,GCr),e(Nt,m0e),e(m0e,OCr),e(Nt,VCr),e(Nt,vc),e(vc,XCr),e(vc,g0e),e(g0e,zCr),e(vc,WCr),e(vc,zU),e(zU,QCr),e(vc,HCr),e(Nt,UCr),M(k4,Nt,null),e(lr,JCr),e(lr,Br),M(h9,Br,null),e(Br,YCr),e(Br,h0e),e(h0e,KCr),e(Br,ZCr),e(Br,cn),e(cn,e3r),e(cn,p0e),e(p0e,o3r),e(cn,r3r),e(cn,_0e),e(_0e,t3r),e(cn,a3r),e(cn,u0e),e(u0e,n3r),e(cn,s3r),e(Br,l3r),e(Br,de),e(de,S4),e(S4,b0e),e(b0e,i3r),e(S4,d3r),e(S4,WU),e(WU,c3r),e(S4,f3r),e(de,m3r),e(de,R4),e(R4,v0e),e(v0e,g3r),e(R4,h3r),e(R4,QU),e(QU,p3r),e(R4,_3r),e(de,u3r),e(de,P4),e(P4,F0e),e(F0e,b3r),e(P4,v3r),e(P4,HU),e(HU,F3r),e(P4,T3r),e(de,M3r),e(de,B4),e(B4,T0e),e(T0e,E3r),e(B4,C3r),e(B4,UU),e(UU,w3r),e(B4,A3r),e(de,y3r),e(de,I4),e(I4,M0e),e(M0e,L3r),e(I4,x3r),e(I4,JU),e(JU,$3r),e(I4,k3r),e(de,S3r),e(de,N4),e(N4,E0e),e(E0e,R3r),e(N4,P3r),e(N4,YU),e(YU,B3r),e(N4,I3r),e(de,N3r),e(de,q4),e(q4,C0e),e(C0e,q3r),e(q4,j3r),e(q4,KU),e(KU,D3r),e(q4,G3r),e(de,O3r),e(de,j4),e(j4,w0e),e(w0e,V3r),e(j4,X3r),e(j4,ZU),e(ZU,z3r),e(j4,W3r),e(de,Q3r),e(de,D4),e(D4,A0e),e(A0e,H3r),e(D4,U3r),e(D4,eJ),e(eJ,J3r),e(D4,Y3r),e(de,K3r),e(de,G4),e(G4,y0e),e(y0e,Z3r),e(G4,ewr),e(G4,oJ),e(oJ,owr),e(G4,rwr),e(de,twr),e(de,O4),e(O4,L0e),e(L0e,awr),e(O4,nwr),e(O4,rJ),e(rJ,swr),e(O4,lwr),e(de,iwr),e(de,V4),e(V4,x0e),e(x0e,dwr),e(V4,cwr),e(V4,tJ),e(tJ,fwr),e(V4,mwr),e(de,gwr),e(de,X4),e(X4,$0e),e($0e,hwr),e(X4,pwr),e(X4,aJ),e(aJ,_wr),e(X4,uwr),e(de,bwr),e(de,z4),e(z4,k0e),e(k0e,vwr),e(z4,Fwr),e(z4,nJ),e(nJ,Twr),e(z4,Mwr),e(de,Ewr),e(de,W4),e(W4,S0e),e(S0e,Cwr),e(W4,wwr),e(W4,sJ),e(sJ,Awr),e(W4,ywr),e(de,Lwr),e(de,Q4),e(Q4,R0e),e(R0e,xwr),e(Q4,$wr),e(Q4,lJ),e(lJ,kwr),e(Q4,Swr),e(de,Rwr),e(de,H4),e(H4,P0e),e(P0e,Pwr),e(H4,Bwr),e(H4,iJ),e(iJ,Iwr),e(H4,Nwr),e(de,qwr),e(de,U4),e(U4,B0e),e(B0e,jwr),e(U4,Dwr),e(U4,dJ),e(dJ,Gwr),e(U4,Owr),e(de,Vwr),e(de,J4),e(J4,I0e),e(I0e,Xwr),e(J4,zwr),e(J4,cJ),e(cJ,Wwr),e(J4,Qwr),e(de,Hwr),e(de,Y4),e(Y4,N0e),e(N0e,Uwr),e(Y4,Jwr),e(Y4,fJ),e(fJ,Ywr),e(Y4,Kwr),e(Br,Zwr),M(K4,Br,null),b(f,zje,u),b(f,Fc,u),e(Fc,Z4),e(Z4,q0e),M(p9,q0e,null),e(Fc,e6r),e(Fc,j0e),e(j0e,o6r),b(f,Wje,u),b(f,ir,u),M(_9,ir,null),e(ir,r6r),e(ir,Tc),e(Tc,t6r),e(Tc,mJ),e(mJ,a6r),e(Tc,n6r),e(Tc,gJ),e(gJ,s6r),e(Tc,l6r),e(ir,i6r),e(ir,u9),e(u9,d6r),e(u9,D0e),e(D0e,c6r),e(u9,f6r),e(ir,m6r),e(ir,qt),M(b9,qt,null),e(qt,g6r),e(qt,G0e),e(G0e,h6r),e(qt,p6r),e(qt,Mc),e(Mc,_6r),e(Mc,O0e),e(O0e,u6r),e(Mc,b6r),e(Mc,hJ),e(hJ,v6r),e(Mc,F6r),e(qt,T6r),M(eE,qt,null),e(ir,M6r),e(ir,Ir),M(v9,Ir,null),e(Ir,E6r),e(Ir,V0e),e(V0e,C6r),e(Ir,w6r),e(Ir,fn),e(fn,A6r),e(fn,X0e),e(X0e,y6r),e(fn,L6r),e(fn,z0e),e(z0e,x6r),e(fn,$6r),e(fn,W0e),e(W0e,k6r),e(fn,S6r),e(Ir,R6r),e(Ir,ce),e(ce,oE),e(oE,Q0e),e(Q0e,P6r),e(oE,B6r),e(oE,pJ),e(pJ,I6r),e(oE,N6r),e(ce,q6r),e(ce,rE),e(rE,H0e),e(H0e,j6r),e(rE,D6r),e(rE,_J),e(_J,G6r),e(rE,O6r),e(ce,V6r),e(ce,tE),e(tE,U0e),e(U0e,X6r),e(tE,z6r),e(tE,uJ),e(uJ,W6r),e(tE,Q6r),e(ce,H6r),e(ce,aE),e(aE,J0e),e(J0e,U6r),e(aE,J6r),e(aE,bJ),e(bJ,Y6r),e(aE,K6r),e(ce,Z6r),e(ce,nE),e(nE,Y0e),e(Y0e,eAr),e(nE,oAr),e(nE,vJ),e(vJ,rAr),e(nE,tAr),e(ce,aAr),e(ce,sE),e(sE,K0e),e(K0e,nAr),e(sE,sAr),e(sE,FJ),e(FJ,lAr),e(sE,iAr),e(ce,dAr),e(ce,lE),e(lE,Z0e),e(Z0e,cAr),e(lE,fAr),e(lE,TJ),e(TJ,mAr),e(lE,gAr),e(ce,hAr),e(ce,iE),e(iE,eTe),e(eTe,pAr),e(iE,_Ar),e(iE,MJ),e(MJ,uAr),e(iE,bAr),e(ce,vAr),e(ce,dE),e(dE,oTe),e(oTe,FAr),e(dE,TAr),e(dE,EJ),e(EJ,MAr),e(dE,EAr),e(ce,CAr),e(ce,cE),e(cE,rTe),e(rTe,wAr),e(cE,AAr),e(cE,CJ),e(CJ,yAr),e(cE,LAr),e(ce,xAr),e(ce,fE),e(fE,tTe),e(tTe,$Ar),e(fE,kAr),e(fE,wJ),e(wJ,SAr),e(fE,RAr),e(ce,PAr),e(ce,mE),e(mE,aTe),e(aTe,BAr),e(mE,IAr),e(mE,AJ),e(AJ,NAr),e(mE,qAr),e(ce,jAr),e(ce,gE),e(gE,nTe),e(nTe,DAr),e(gE,GAr),e(gE,yJ),e(yJ,OAr),e(gE,VAr),e(ce,XAr),e(ce,hE),e(hE,sTe),e(sTe,zAr),e(hE,WAr),e(hE,LJ),e(LJ,QAr),e(hE,HAr),e(ce,UAr),e(ce,pE),e(pE,lTe),e(lTe,JAr),e(pE,YAr),e(pE,xJ),e(xJ,KAr),e(pE,ZAr),e(ce,eyr),e(ce,_E),e(_E,iTe),e(iTe,oyr),e(_E,ryr),e(_E,$J),e($J,tyr),e(_E,ayr),e(ce,nyr),e(ce,uE),e(uE,dTe),e(dTe,syr),e(uE,lyr),e(uE,kJ),e(kJ,iyr),e(uE,dyr),e(ce,cyr),e(ce,bE),e(bE,cTe),e(cTe,fyr),e(bE,myr),e(bE,SJ),e(SJ,gyr),e(bE,hyr),e(ce,pyr),e(ce,vE),e(vE,fTe),e(fTe,_yr),e(vE,uyr),e(vE,RJ),e(RJ,byr),e(vE,vyr),e(ce,Fyr),e(ce,FE),e(FE,mTe),e(mTe,Tyr),e(FE,Myr),e(FE,PJ),e(PJ,Eyr),e(FE,Cyr),e(Ir,wyr),M(TE,Ir,null),b(f,Qje,u),b(f,Ec,u),e(Ec,ME),e(ME,gTe),M(F9,gTe,null),e(Ec,Ayr),e(Ec,hTe),e(hTe,yyr),b(f,Hje,u),b(f,dr,u),M(T9,dr,null),e(dr,Lyr),e(dr,Cc),e(Cc,xyr),e(Cc,BJ),e(BJ,$yr),e(Cc,kyr),e(Cc,IJ),e(IJ,Syr),e(Cc,Ryr),e(dr,Pyr),e(dr,M9),e(M9,Byr),e(M9,pTe),e(pTe,Iyr),e(M9,Nyr),e(dr,qyr),e(dr,jt),M(E9,jt,null),e(jt,jyr),e(jt,_Te),e(_Te,Dyr),e(jt,Gyr),e(jt,wc),e(wc,Oyr),e(wc,uTe),e(uTe,Vyr),e(wc,Xyr),e(wc,NJ),e(NJ,zyr),e(wc,Wyr),e(jt,Qyr),M(EE,jt,null),e(dr,Hyr),e(dr,Nr),M(C9,Nr,null),e(Nr,Uyr),e(Nr,bTe),e(bTe,Jyr),e(Nr,Yyr),e(Nr,mn),e(mn,Kyr),e(mn,vTe),e(vTe,Zyr),e(mn,eLr),e(mn,FTe),e(FTe,oLr),e(mn,rLr),e(mn,TTe),e(TTe,tLr),e(mn,aLr),e(Nr,nLr),e(Nr,MTe),e(MTe,CE),e(CE,ETe),e(ETe,sLr),e(CE,lLr),e(CE,qJ),e(qJ,iLr),e(CE,dLr),e(Nr,cLr),M(wE,Nr,null),b(f,Uje,u),b(f,Ac,u),e(Ac,AE),e(AE,CTe),M(w9,CTe,null),e(Ac,fLr),e(Ac,wTe),e(wTe,mLr),b(f,Jje,u),b(f,cr,u),M(A9,cr,null),e(cr,gLr),e(cr,yc),e(yc,hLr),e(yc,jJ),e(jJ,pLr),e(yc,_Lr),e(yc,DJ),e(DJ,uLr),e(yc,bLr),e(cr,vLr),e(cr,y9),e(y9,FLr),e(y9,ATe),e(ATe,TLr),e(y9,MLr),e(cr,ELr),e(cr,Dt),M(L9,Dt,null),e(Dt,CLr),e(Dt,yTe),e(yTe,wLr),e(Dt,ALr),e(Dt,Lc),e(Lc,yLr),e(Lc,LTe),e(LTe,LLr),e(Lc,xLr),e(Lc,GJ),e(GJ,$Lr),e(Lc,kLr),e(Dt,SLr),M(yE,Dt,null),e(cr,RLr),e(cr,qr),M(x9,qr,null),e(qr,PLr),e(qr,xTe),e(xTe,BLr),e(qr,ILr),e(qr,gn),e(gn,NLr),e(gn,$Te),e($Te,qLr),e(gn,jLr),e(gn,kTe),e(kTe,DLr),e(gn,GLr),e(gn,STe),e(STe,OLr),e(gn,VLr),e(qr,XLr),e(qr,RTe),e(RTe,LE),e(LE,PTe),e(PTe,zLr),e(LE,WLr),e(LE,OJ),e(OJ,QLr),e(LE,HLr),e(qr,ULr),M(xE,qr,null),b(f,Yje,u),b(f,xc,u),e(xc,$E),e($E,BTe),M($9,BTe,null),e(xc,JLr),e(xc,ITe),e(ITe,YLr),b(f,Kje,u),b(f,fr,u),M(k9,fr,null),e(fr,KLr),e(fr,$c),e($c,ZLr),e($c,VJ),e(VJ,e8r),e($c,o8r),e($c,XJ),e(XJ,r8r),e($c,t8r),e(fr,a8r),e(fr,S9),e(S9,n8r),e(S9,NTe),e(NTe,s8r),e(S9,l8r),e(fr,i8r),e(fr,Gt),M(R9,Gt,null),e(Gt,d8r),e(Gt,qTe),e(qTe,c8r),e(Gt,f8r),e(Gt,kc),e(kc,m8r),e(kc,jTe),e(jTe,g8r),e(kc,h8r),e(kc,zJ),e(zJ,p8r),e(kc,_8r),e(Gt,u8r),M(kE,Gt,null),e(fr,b8r),e(fr,jr),M(P9,jr,null),e(jr,v8r),e(jr,DTe),e(DTe,F8r),e(jr,T8r),e(jr,hn),e(hn,M8r),e(hn,GTe),e(GTe,E8r),e(hn,C8r),e(hn,OTe),e(OTe,w8r),e(hn,A8r),e(hn,VTe),e(VTe,y8r),e(hn,L8r),e(jr,x8r),e(jr,re),e(re,SE),e(SE,XTe),e(XTe,$8r),e(SE,k8r),e(SE,WJ),e(WJ,S8r),e(SE,R8r),e(re,P8r),e(re,RE),e(RE,zTe),e(zTe,B8r),e(RE,I8r),e(RE,QJ),e(QJ,N8r),e(RE,q8r),e(re,j8r),e(re,PE),e(PE,WTe),e(WTe,D8r),e(PE,G8r),e(PE,HJ),e(HJ,O8r),e(PE,V8r),e(re,X8r),e(re,BE),e(BE,QTe),e(QTe,z8r),e(BE,W8r),e(BE,UJ),e(UJ,Q8r),e(BE,H8r),e(re,U8r),e(re,IE),e(IE,HTe),e(HTe,J8r),e(IE,Y8r),e(IE,JJ),e(JJ,K8r),e(IE,Z8r),e(re,e9r),e(re,NE),e(NE,UTe),e(UTe,o9r),e(NE,r9r),e(NE,YJ),e(YJ,t9r),e(NE,a9r),e(re,n9r),e(re,qE),e(qE,JTe),e(JTe,s9r),e(qE,l9r),e(qE,KJ),e(KJ,i9r),e(qE,d9r),e(re,c9r),e(re,jE),e(jE,YTe),e(YTe,f9r),e(jE,m9r),e(jE,ZJ),e(ZJ,g9r),e(jE,h9r),e(re,p9r),e(re,DE),e(DE,KTe),e(KTe,_9r),e(DE,u9r),e(DE,eY),e(eY,b9r),e(DE,v9r),e(re,F9r),e(re,GE),e(GE,ZTe),e(ZTe,T9r),e(GE,M9r),e(GE,oY),e(oY,E9r),e(GE,C9r),e(re,w9r),e(re,OE),e(OE,e7e),e(e7e,A9r),e(OE,y9r),e(OE,rY),e(rY,L9r),e(OE,x9r),e(re,$9r),e(re,VE),e(VE,o7e),e(o7e,k9r),e(VE,S9r),e(VE,tY),e(tY,R9r),e(VE,P9r),e(re,B9r),e(re,XE),e(XE,r7e),e(r7e,I9r),e(XE,N9r),e(XE,aY),e(aY,q9r),e(XE,j9r),e(re,D9r),e(re,zE),e(zE,t7e),e(t7e,G9r),e(zE,O9r),e(zE,nY),e(nY,V9r),e(zE,X9r),e(re,z9r),e(re,WE),e(WE,a7e),e(a7e,W9r),e(WE,Q9r),e(WE,sY),e(sY,H9r),e(WE,U9r),e(re,J9r),e(re,QE),e(QE,n7e),e(n7e,Y9r),e(QE,K9r),e(QE,lY),e(lY,Z9r),e(QE,exr),e(re,oxr),e(re,HE),e(HE,s7e),e(s7e,rxr),e(HE,txr),e(HE,iY),e(iY,axr),e(HE,nxr),e(re,sxr),e(re,UE),e(UE,l7e),e(l7e,lxr),e(UE,ixr),e(UE,dY),e(dY,dxr),e(UE,cxr),e(re,fxr),e(re,JE),e(JE,i7e),e(i7e,mxr),e(JE,gxr),e(JE,cY),e(cY,hxr),e(JE,pxr),e(re,_xr),e(re,YE),e(YE,d7e),e(d7e,uxr),e(YE,bxr),e(YE,fY),e(fY,vxr),e(YE,Fxr),e(re,Txr),e(re,KE),e(KE,c7e),e(c7e,Mxr),e(KE,Exr),e(KE,mY),e(mY,Cxr),e(KE,wxr),e(re,Axr),e(re,ZE),e(ZE,f7e),e(f7e,yxr),e(ZE,Lxr),e(ZE,gY),e(gY,xxr),e(ZE,$xr),e(re,kxr),e(re,eC),e(eC,m7e),e(m7e,Sxr),e(eC,Rxr),e(eC,hY),e(hY,Pxr),e(eC,Bxr),e(re,Ixr),e(re,oC),e(oC,g7e),e(g7e,Nxr),e(oC,qxr),e(oC,pY),e(pY,jxr),e(oC,Dxr),e(re,Gxr),e(re,rC),e(rC,h7e),e(h7e,Oxr),e(rC,Vxr),e(rC,_Y),e(_Y,Xxr),e(rC,zxr),e(re,Wxr),e(re,tC),e(tC,p7e),e(p7e,Qxr),e(tC,Hxr),e(tC,uY),e(uY,Uxr),e(tC,Jxr),e(jr,Yxr),M(aC,jr,null),b(f,Zje,u),b(f,Sc,u),e(Sc,nC),e(nC,_7e),M(B9,_7e,null),e(Sc,Kxr),e(Sc,u7e),e(u7e,Zxr),b(f,eDe,u),b(f,mr,u),M(I9,mr,null),e(mr,e$r),e(mr,Rc),e(Rc,o$r),e(Rc,bY),e(bY,r$r),e(Rc,t$r),e(Rc,vY),e(vY,a$r),e(Rc,n$r),e(mr,s$r),e(mr,N9),e(N9,l$r),e(N9,b7e),e(b7e,i$r),e(N9,d$r),e(mr,c$r),e(mr,Ot),M(q9,Ot,null),e(Ot,f$r),e(Ot,v7e),e(v7e,m$r),e(Ot,g$r),e(Ot,Pc),e(Pc,h$r),e(Pc,F7e),e(F7e,p$r),e(Pc,_$r),e(Pc,FY),e(FY,u$r),e(Pc,b$r),e(Ot,v$r),M(sC,Ot,null),e(mr,F$r),e(mr,Dr),M(j9,Dr,null),e(Dr,T$r),e(Dr,T7e),e(T7e,M$r),e(Dr,E$r),e(Dr,pn),e(pn,C$r),e(pn,M7e),e(M7e,w$r),e(pn,A$r),e(pn,E7e),e(E7e,y$r),e(pn,L$r),e(pn,C7e),e(C7e,x$r),e(pn,$$r),e(Dr,k$r),e(Dr,Le),e(Le,lC),e(lC,w7e),e(w7e,S$r),e(lC,R$r),e(lC,TY),e(TY,P$r),e(lC,B$r),e(Le,I$r),e(Le,iC),e(iC,A7e),e(A7e,N$r),e(iC,q$r),e(iC,MY),e(MY,j$r),e(iC,D$r),e(Le,G$r),e(Le,dC),e(dC,y7e),e(y7e,O$r),e(dC,V$r),e(dC,EY),e(EY,X$r),e(dC,z$r),e(Le,W$r),e(Le,cC),e(cC,L7e),e(L7e,Q$r),e(cC,H$r),e(cC,CY),e(CY,U$r),e(cC,J$r),e(Le,Y$r),e(Le,fC),e(fC,x7e),e(x7e,K$r),e(fC,Z$r),e(fC,wY),e(wY,ekr),e(fC,okr),e(Le,rkr),e(Le,mC),e(mC,$7e),e($7e,tkr),e(mC,akr),e(mC,AY),e(AY,nkr),e(mC,skr),e(Le,lkr),e(Le,gC),e(gC,k7e),e(k7e,ikr),e(gC,dkr),e(gC,yY),e(yY,ckr),e(gC,fkr),e(Le,mkr),e(Le,hC),e(hC,S7e),e(S7e,gkr),e(hC,hkr),e(hC,LY),e(LY,pkr),e(hC,_kr),e(Le,ukr),e(Le,pC),e(pC,R7e),e(R7e,bkr),e(pC,vkr),e(pC,xY),e(xY,Fkr),e(pC,Tkr),e(Le,Mkr),e(Le,_C),e(_C,P7e),e(P7e,Ekr),e(_C,Ckr),e(_C,$Y),e($Y,wkr),e(_C,Akr),e(Dr,ykr),M(uC,Dr,null),b(f,oDe,u),b(f,Bc,u),e(Bc,bC),e(bC,B7e),M(D9,B7e,null),e(Bc,Lkr),e(Bc,I7e),e(I7e,xkr),b(f,rDe,u),b(f,gr,u),M(G9,gr,null),e(gr,$kr),e(gr,Ic),e(Ic,kkr),e(Ic,kY),e(kY,Skr),e(Ic,Rkr),e(Ic,SY),e(SY,Pkr),e(Ic,Bkr),e(gr,Ikr),e(gr,O9),e(O9,Nkr),e(O9,N7e),e(N7e,qkr),e(O9,jkr),e(gr,Dkr),e(gr,Vt),M(V9,Vt,null),e(Vt,Gkr),e(Vt,q7e),e(q7e,Okr),e(Vt,Vkr),e(Vt,Nc),e(Nc,Xkr),e(Nc,j7e),e(j7e,zkr),e(Nc,Wkr),e(Nc,RY),e(RY,Qkr),e(Nc,Hkr),e(Vt,Ukr),M(vC,Vt,null),e(gr,Jkr),e(gr,Gr),M(X9,Gr,null),e(Gr,Ykr),e(Gr,D7e),e(D7e,Kkr),e(Gr,Zkr),e(Gr,_n),e(_n,eSr),e(_n,G7e),e(G7e,oSr),e(_n,rSr),e(_n,O7e),e(O7e,tSr),e(_n,aSr),e(_n,V7e),e(V7e,nSr),e(_n,sSr),e(Gr,lSr),e(Gr,Ee),e(Ee,FC),e(FC,X7e),e(X7e,iSr),e(FC,dSr),e(FC,PY),e(PY,cSr),e(FC,fSr),e(Ee,mSr),e(Ee,TC),e(TC,z7e),e(z7e,gSr),e(TC,hSr),e(TC,BY),e(BY,pSr),e(TC,_Sr),e(Ee,uSr),e(Ee,MC),e(MC,W7e),e(W7e,bSr),e(MC,vSr),e(MC,IY),e(IY,FSr),e(MC,TSr),e(Ee,MSr),e(Ee,EC),e(EC,Q7e),e(Q7e,ESr),e(EC,CSr),e(EC,NY),e(NY,wSr),e(EC,ASr),e(Ee,ySr),e(Ee,CC),e(CC,H7e),e(H7e,LSr),e(CC,xSr),e(CC,qY),e(qY,$Sr),e(CC,kSr),e(Ee,SSr),e(Ee,wC),e(wC,U7e),e(U7e,RSr),e(wC,PSr),e(wC,jY),e(jY,BSr),e(wC,ISr),e(Ee,NSr),e(Ee,AC),e(AC,J7e),e(J7e,qSr),e(AC,jSr),e(AC,DY),e(DY,DSr),e(AC,GSr),e(Ee,OSr),e(Ee,yC),e(yC,Y7e),e(Y7e,VSr),e(yC,XSr),e(yC,GY),e(GY,zSr),e(yC,WSr),e(Ee,QSr),e(Ee,LC),e(LC,K7e),e(K7e,HSr),e(LC,USr),e(LC,OY),e(OY,JSr),e(LC,YSr),e(Ee,KSr),e(Ee,xC),e(xC,Z7e),e(Z7e,ZSr),e(xC,eRr),e(xC,VY),e(VY,oRr),e(xC,rRr),e(Ee,tRr),e(Ee,$C),e($C,eMe),e(eMe,aRr),e($C,nRr),e($C,XY),e(XY,sRr),e($C,lRr),e(Ee,iRr),e(Ee,kC),e(kC,oMe),e(oMe,dRr),e(kC,cRr),e(kC,zY),e(zY,fRr),e(kC,mRr),e(Gr,gRr),M(SC,Gr,null),b(f,tDe,u),b(f,qc,u),e(qc,RC),e(RC,rMe),M(z9,rMe,null),e(qc,hRr),e(qc,tMe),e(tMe,pRr),b(f,aDe,u),b(f,hr,u),M(W9,hr,null),e(hr,_Rr),e(hr,jc),e(jc,uRr),e(jc,WY),e(WY,bRr),e(jc,vRr),e(jc,QY),e(QY,FRr),e(jc,TRr),e(hr,MRr),e(hr,Q9),e(Q9,ERr),e(Q9,aMe),e(aMe,CRr),e(Q9,wRr),e(hr,ARr),e(hr,Xt),M(H9,Xt,null),e(Xt,yRr),e(Xt,nMe),e(nMe,LRr),e(Xt,xRr),e(Xt,Dc),e(Dc,$Rr),e(Dc,sMe),e(sMe,kRr),e(Dc,SRr),e(Dc,HY),e(HY,RRr),e(Dc,PRr),e(Xt,BRr),M(PC,Xt,null),e(hr,IRr),e(hr,Or),M(U9,Or,null),e(Or,NRr),e(Or,lMe),e(lMe,qRr),e(Or,jRr),e(Or,un),e(un,DRr),e(un,iMe),e(iMe,GRr),e(un,ORr),e(un,dMe),e(dMe,VRr),e(un,XRr),e(un,cMe),e(cMe,zRr),e(un,WRr),e(Or,QRr),e(Or,xe),e(xe,BC),e(BC,fMe),e(fMe,HRr),e(BC,URr),e(BC,UY),e(UY,JRr),e(BC,YRr),e(xe,KRr),e(xe,IC),e(IC,mMe),e(mMe,ZRr),e(IC,ePr),e(IC,JY),e(JY,oPr),e(IC,rPr),e(xe,tPr),e(xe,NC),e(NC,gMe),e(gMe,aPr),e(NC,nPr),e(NC,YY),e(YY,sPr),e(NC,lPr),e(xe,iPr),e(xe,qC),e(qC,hMe),e(hMe,dPr),e(qC,cPr),e(qC,KY),e(KY,fPr),e(qC,mPr),e(xe,gPr),e(xe,jC),e(jC,pMe),e(pMe,hPr),e(jC,pPr),e(jC,ZY),e(ZY,_Pr),e(jC,uPr),e(xe,bPr),e(xe,DC),e(DC,_Me),e(_Me,vPr),e(DC,FPr),e(DC,eK),e(eK,TPr),e(DC,MPr),e(xe,EPr),e(xe,GC),e(GC,uMe),e(uMe,CPr),e(GC,wPr),e(GC,oK),e(oK,APr),e(GC,yPr),e(xe,LPr),e(xe,OC),e(OC,bMe),e(bMe,xPr),e(OC,$Pr),e(OC,rK),e(rK,kPr),e(OC,SPr),e(xe,RPr),e(xe,VC),e(VC,vMe),e(vMe,PPr),e(VC,BPr),e(VC,tK),e(tK,IPr),e(VC,NPr),e(xe,qPr),e(xe,XC),e(XC,FMe),e(FMe,jPr),e(XC,DPr),e(XC,aK),e(aK,GPr),e(XC,OPr),e(Or,VPr),M(zC,Or,null),b(f,nDe,u),b(f,Gc,u),e(Gc,WC),e(WC,TMe),M(J9,TMe,null),e(Gc,XPr),e(Gc,MMe),e(MMe,zPr),b(f,sDe,u),b(f,pr,u),M(Y9,pr,null),e(pr,WPr),e(pr,Oc),e(Oc,QPr),e(Oc,nK),e(nK,HPr),e(Oc,UPr),e(Oc,sK),e(sK,JPr),e(Oc,YPr),e(pr,KPr),e(pr,K9),e(K9,ZPr),e(K9,EMe),e(EMe,eBr),e(K9,oBr),e(pr,rBr),e(pr,zt),M(Z9,zt,null),e(zt,tBr),e(zt,CMe),e(CMe,aBr),e(zt,nBr),e(zt,Vc),e(Vc,sBr),e(Vc,wMe),e(wMe,lBr),e(Vc,iBr),e(Vc,lK),e(lK,dBr),e(Vc,cBr),e(zt,fBr),M(QC,zt,null),e(pr,mBr),e(pr,Vr),M(ex,Vr,null),e(Vr,gBr),e(Vr,AMe),e(AMe,hBr),e(Vr,pBr),e(Vr,bn),e(bn,_Br),e(bn,yMe),e(yMe,uBr),e(bn,bBr),e(bn,LMe),e(LMe,vBr),e(bn,FBr),e(bn,xMe),e(xMe,TBr),e(bn,MBr),e(Vr,EBr),e(Vr,Pe),e(Pe,HC),e(HC,$Me),e($Me,CBr),e(HC,wBr),e(HC,iK),e(iK,ABr),e(HC,yBr),e(Pe,LBr),e(Pe,UC),e(UC,kMe),e(kMe,xBr),e(UC,$Br),e(UC,dK),e(dK,kBr),e(UC,SBr),e(Pe,RBr),e(Pe,JC),e(JC,SMe),e(SMe,PBr),e(JC,BBr),e(JC,cK),e(cK,IBr),e(JC,NBr),e(Pe,qBr),e(Pe,YC),e(YC,RMe),e(RMe,jBr),e(YC,DBr),e(YC,fK),e(fK,GBr),e(YC,OBr),e(Pe,VBr),e(Pe,KC),e(KC,PMe),e(PMe,XBr),e(KC,zBr),e(KC,mK),e(mK,WBr),e(KC,QBr),e(Pe,HBr),e(Pe,ZC),e(ZC,BMe),e(BMe,UBr),e(ZC,JBr),e(ZC,gK),e(gK,YBr),e(ZC,KBr),e(Pe,ZBr),e(Pe,e3),e(e3,IMe),e(IMe,eIr),e(e3,oIr),e(e3,hK),e(hK,rIr),e(e3,tIr),e(Pe,aIr),e(Pe,o3),e(o3,NMe),e(NMe,nIr),e(o3,sIr),e(o3,pK),e(pK,lIr),e(o3,iIr),e(Pe,dIr),e(Pe,r3),e(r3,qMe),e(qMe,cIr),e(r3,fIr),e(r3,_K),e(_K,mIr),e(r3,gIr),e(Vr,hIr),M(t3,Vr,null),b(f,lDe,u),b(f,Xc,u),e(Xc,a3),e(a3,jMe),M(ox,jMe,null),e(Xc,pIr),e(Xc,DMe),e(DMe,_Ir),b(f,iDe,u),b(f,_r,u),M(rx,_r,null),e(_r,uIr),e(_r,zc),e(zc,bIr),e(zc,uK),e(uK,vIr),e(zc,FIr),e(zc,bK),e(bK,TIr),e(zc,MIr),e(_r,EIr),e(_r,tx),e(tx,CIr),e(tx,GMe),e(GMe,wIr),e(tx,AIr),e(_r,yIr),e(_r,Wt),M(ax,Wt,null),e(Wt,LIr),e(Wt,OMe),e(OMe,xIr),e(Wt,$Ir),e(Wt,Wc),e(Wc,kIr),e(Wc,VMe),e(VMe,SIr),e(Wc,RIr),e(Wc,vK),e(vK,PIr),e(Wc,BIr),e(Wt,IIr),M(n3,Wt,null),e(_r,NIr),e(_r,Xr),M(nx,Xr,null),e(Xr,qIr),e(Xr,XMe),e(XMe,jIr),e(Xr,DIr),e(Xr,vn),e(vn,GIr),e(vn,zMe),e(zMe,OIr),e(vn,VIr),e(vn,WMe),e(WMe,XIr),e(vn,zIr),e(vn,QMe),e(QMe,WIr),e(vn,QIr),e(Xr,HIr),e(Xr,$e),e($e,s3),e(s3,HMe),e(HMe,UIr),e(s3,JIr),e(s3,FK),e(FK,YIr),e(s3,KIr),e($e,ZIr),e($e,l3),e(l3,UMe),e(UMe,eNr),e(l3,oNr),e(l3,TK),e(TK,rNr),e(l3,tNr),e($e,aNr),e($e,i3),e(i3,JMe),e(JMe,nNr),e(i3,sNr),e(i3,MK),e(MK,lNr),e(i3,iNr),e($e,dNr),e($e,d3),e(d3,YMe),e(YMe,cNr),e(d3,fNr),e(d3,EK),e(EK,mNr),e(d3,gNr),e($e,hNr),e($e,c3),e(c3,KMe),e(KMe,pNr),e(c3,_Nr),e(c3,CK),e(CK,uNr),e(c3,bNr),e($e,vNr),e($e,f3),e(f3,ZMe),e(ZMe,FNr),e(f3,TNr),e(f3,wK),e(wK,MNr),e(f3,ENr),e($e,CNr),e($e,m3),e(m3,e4e),e(e4e,wNr),e(m3,ANr),e(m3,AK),e(AK,yNr),e(m3,LNr),e($e,xNr),e($e,g3),e(g3,o4e),e(o4e,$Nr),e(g3,kNr),e(g3,yK),e(yK,SNr),e(g3,RNr),e($e,PNr),e($e,h3),e(h3,r4e),e(r4e,BNr),e(h3,INr),e(h3,LK),e(LK,NNr),e(h3,qNr),e($e,jNr),e($e,p3),e(p3,t4e),e(t4e,DNr),e(p3,GNr),e(p3,xK),e(xK,ONr),e(p3,VNr),e(Xr,XNr),M(_3,Xr,null),b(f,dDe,u),b(f,Qc,u),e(Qc,u3),e(u3,a4e),M(sx,a4e,null),e(Qc,zNr),e(Qc,n4e),e(n4e,WNr),b(f,cDe,u),b(f,ur,u),M(lx,ur,null),e(ur,QNr),e(ur,Hc),e(Hc,HNr),e(Hc,$K),e($K,UNr),e(Hc,JNr),e(Hc,kK),e(kK,YNr),e(Hc,KNr),e(ur,ZNr),e(ur,ix),e(ix,eqr),e(ix,s4e),e(s4e,oqr),e(ix,rqr),e(ur,tqr),e(ur,Qt),M(dx,Qt,null),e(Qt,aqr),e(Qt,l4e),e(l4e,nqr),e(Qt,sqr),e(Qt,Uc),e(Uc,lqr),e(Uc,i4e),e(i4e,iqr),e(Uc,dqr),e(Uc,SK),e(SK,cqr),e(Uc,fqr),e(Qt,mqr),M(b3,Qt,null),e(ur,gqr),e(ur,zr),M(cx,zr,null),e(zr,hqr),e(zr,d4e),e(d4e,pqr),e(zr,_qr),e(zr,Fn),e(Fn,uqr),e(Fn,c4e),e(c4e,bqr),e(Fn,vqr),e(Fn,f4e),e(f4e,Fqr),e(Fn,Tqr),e(Fn,m4e),e(m4e,Mqr),e(Fn,Eqr),e(zr,Cqr),e(zr,ke),e(ke,v3),e(v3,g4e),e(g4e,wqr),e(v3,Aqr),e(v3,RK),e(RK,yqr),e(v3,Lqr),e(ke,xqr),e(ke,F3),e(F3,h4e),e(h4e,$qr),e(F3,kqr),e(F3,PK),e(PK,Sqr),e(F3,Rqr),e(ke,Pqr),e(ke,T3),e(T3,p4e),e(p4e,Bqr),e(T3,Iqr),e(T3,BK),e(BK,Nqr),e(T3,qqr),e(ke,jqr),e(ke,M3),e(M3,_4e),e(_4e,Dqr),e(M3,Gqr),e(M3,IK),e(IK,Oqr),e(M3,Vqr),e(ke,Xqr),e(ke,E3),e(E3,u4e),e(u4e,zqr),e(E3,Wqr),e(E3,NK),e(NK,Qqr),e(E3,Hqr),e(ke,Uqr),e(ke,C3),e(C3,b4e),e(b4e,Jqr),e(C3,Yqr),e(C3,qK),e(qK,Kqr),e(C3,Zqr),e(ke,ejr),e(ke,w3),e(w3,v4e),e(v4e,ojr),e(w3,rjr),e(w3,jK),e(jK,tjr),e(w3,ajr),e(ke,njr),e(ke,A3),e(A3,F4e),e(F4e,sjr),e(A3,ljr),e(A3,DK),e(DK,ijr),e(A3,djr),e(ke,cjr),e(ke,y3),e(y3,T4e),e(T4e,fjr),e(y3,mjr),e(y3,GK),e(GK,gjr),e(y3,hjr),e(ke,pjr),e(ke,L3),e(L3,M4e),e(M4e,_jr),e(L3,ujr),e(L3,OK),e(OK,bjr),e(L3,vjr),e(zr,Fjr),M(x3,zr,null),b(f,fDe,u),b(f,Jc,u),e(Jc,$3),e($3,E4e),M(fx,E4e,null),e(Jc,Tjr),e(Jc,C4e),e(C4e,Mjr),b(f,mDe,u),b(f,br,u),M(mx,br,null),e(br,Ejr),e(br,Yc),e(Yc,Cjr),e(Yc,VK),e(VK,wjr),e(Yc,Ajr),e(Yc,XK),e(XK,yjr),e(Yc,Ljr),e(br,xjr),e(br,gx),e(gx,$jr),e(gx,w4e),e(w4e,kjr),e(gx,Sjr),e(br,Rjr),e(br,Ht),M(hx,Ht,null),e(Ht,Pjr),e(Ht,A4e),e(A4e,Bjr),e(Ht,Ijr),e(Ht,Kc),e(Kc,Njr),e(Kc,y4e),e(y4e,qjr),e(Kc,jjr),e(Kc,zK),e(zK,Djr),e(Kc,Gjr),e(Ht,Ojr),M(k3,Ht,null),e(br,Vjr),e(br,Wr),M(px,Wr,null),e(Wr,Xjr),e(Wr,L4e),e(L4e,zjr),e(Wr,Wjr),e(Wr,Tn),e(Tn,Qjr),e(Tn,x4e),e(x4e,Hjr),e(Tn,Ujr),e(Tn,$4e),e($4e,Jjr),e(Tn,Yjr),e(Tn,k4e),e(k4e,Kjr),e(Tn,Zjr),e(Wr,eDr),e(Wr,Ge),e(Ge,S3),e(S3,S4e),e(S4e,oDr),e(S3,rDr),e(S3,WK),e(WK,tDr),e(S3,aDr),e(Ge,nDr),e(Ge,R3),e(R3,R4e),e(R4e,sDr),e(R3,lDr),e(R3,QK),e(QK,iDr),e(R3,dDr),e(Ge,cDr),e(Ge,P3),e(P3,P4e),e(P4e,fDr),e(P3,mDr),e(P3,HK),e(HK,gDr),e(P3,hDr),e(Ge,pDr),e(Ge,B3),e(B3,B4e),e(B4e,_Dr),e(B3,uDr),e(B3,UK),e(UK,bDr),e(B3,vDr),e(Ge,FDr),e(Ge,I3),e(I3,I4e),e(I4e,TDr),e(I3,MDr),e(I3,JK),e(JK,EDr),e(I3,CDr),e(Ge,wDr),e(Ge,N3),e(N3,N4e),e(N4e,ADr),e(N3,yDr),e(N3,YK),e(YK,LDr),e(N3,xDr),e(Ge,$Dr),e(Ge,q3),e(q3,q4e),e(q4e,kDr),e(q3,SDr),e(q3,KK),e(KK,RDr),e(q3,PDr),e(Ge,BDr),e(Ge,j3),e(j3,j4e),e(j4e,IDr),e(j3,NDr),e(j3,ZK),e(ZK,qDr),e(j3,jDr),e(Wr,DDr),M(D3,Wr,null),b(f,gDe,u),b(f,Zc,u),e(Zc,G3),e(G3,D4e),M(_x,D4e,null),e(Zc,GDr),e(Zc,G4e),e(G4e,ODr),b(f,hDe,u),b(f,vr,u),M(ux,vr,null),e(vr,VDr),e(vr,ef),e(ef,XDr),e(ef,eZ),e(eZ,zDr),e(ef,WDr),e(ef,oZ),e(oZ,QDr),e(ef,HDr),e(vr,UDr),e(vr,bx),e(bx,JDr),e(bx,O4e),e(O4e,YDr),e(bx,KDr),e(vr,ZDr),e(vr,Ut),M(vx,Ut,null),e(Ut,eGr),e(Ut,V4e),e(V4e,oGr),e(Ut,rGr),e(Ut,of),e(of,tGr),e(of,X4e),e(X4e,aGr),e(of,nGr),e(of,rZ),e(rZ,sGr),e(of,lGr),e(Ut,iGr),M(O3,Ut,null),e(vr,dGr),e(vr,Qr),M(Fx,Qr,null),e(Qr,cGr),e(Qr,z4e),e(z4e,fGr),e(Qr,mGr),e(Qr,Mn),e(Mn,gGr),e(Mn,W4e),e(W4e,hGr),e(Mn,pGr),e(Mn,Q4e),e(Q4e,_Gr),e(Mn,uGr),e(Mn,H4e),e(H4e,bGr),e(Mn,vGr),e(Qr,FGr),e(Qr,Oe),e(Oe,V3),e(V3,U4e),e(U4e,TGr),e(V3,MGr),e(V3,tZ),e(tZ,EGr),e(V3,CGr),e(Oe,wGr),e(Oe,X3),e(X3,J4e),e(J4e,AGr),e(X3,yGr),e(X3,aZ),e(aZ,LGr),e(X3,xGr),e(Oe,$Gr),e(Oe,z3),e(z3,Y4e),e(Y4e,kGr),e(z3,SGr),e(z3,nZ),e(nZ,RGr),e(z3,PGr),e(Oe,BGr),e(Oe,W3),e(W3,K4e),e(K4e,IGr),e(W3,NGr),e(W3,sZ),e(sZ,qGr),e(W3,jGr),e(Oe,DGr),e(Oe,Q3),e(Q3,Z4e),e(Z4e,GGr),e(Q3,OGr),e(Q3,lZ),e(lZ,VGr),e(Q3,XGr),e(Oe,zGr),e(Oe,H3),e(H3,eEe),e(eEe,WGr),e(H3,QGr),e(H3,iZ),e(iZ,HGr),e(H3,UGr),e(Oe,JGr),e(Oe,U3),e(U3,oEe),e(oEe,YGr),e(U3,KGr),e(U3,dZ),e(dZ,ZGr),e(U3,eOr),e(Oe,oOr),e(Oe,J3),e(J3,rEe),e(rEe,rOr),e(J3,tOr),e(J3,cZ),e(cZ,aOr),e(J3,nOr),e(Qr,sOr),M(Y3,Qr,null),b(f,pDe,u),b(f,rf,u),e(rf,K3),e(K3,tEe),M(Tx,tEe,null),e(rf,lOr),e(rf,aEe),e(aEe,iOr),b(f,_De,u),b(f,Fr,u),M(Mx,Fr,null),e(Fr,dOr),e(Fr,tf),e(tf,cOr),e(tf,fZ),e(fZ,fOr),e(tf,mOr),e(tf,mZ),e(mZ,gOr),e(tf,hOr),e(Fr,pOr),e(Fr,Ex),e(Ex,_Or),e(Ex,nEe),e(nEe,uOr),e(Ex,bOr),e(Fr,vOr),e(Fr,Jt),M(Cx,Jt,null),e(Jt,FOr),e(Jt,sEe),e(sEe,TOr),e(Jt,MOr),e(Jt,af),e(af,EOr),e(af,lEe),e(lEe,COr),e(af,wOr),e(af,gZ),e(gZ,AOr),e(af,yOr),e(Jt,LOr),M(Z3,Jt,null),e(Fr,xOr),e(Fr,Hr),M(wx,Hr,null),e(Hr,$Or),e(Hr,iEe),e(iEe,kOr),e(Hr,SOr),e(Hr,En),e(En,ROr),e(En,dEe),e(dEe,POr),e(En,BOr),e(En,cEe),e(cEe,IOr),e(En,NOr),e(En,fEe),e(fEe,qOr),e(En,jOr),e(Hr,DOr),e(Hr,mEe),e(mEe,ew),e(ew,gEe),e(gEe,GOr),e(ew,OOr),e(ew,hZ),e(hZ,VOr),e(ew,XOr),e(Hr,zOr),M(ow,Hr,null),b(f,uDe,u),b(f,nf,u),e(nf,rw),e(rw,hEe),M(Ax,hEe,null),e(nf,WOr),e(nf,pEe),e(pEe,QOr),b(f,bDe,u),b(f,Tr,u),M(yx,Tr,null),e(Tr,HOr),e(Tr,sf),e(sf,UOr),e(sf,pZ),e(pZ,JOr),e(sf,YOr),e(sf,_Z),e(_Z,KOr),e(sf,ZOr),e(Tr,eVr),e(Tr,Lx),e(Lx,oVr),e(Lx,_Ee),e(_Ee,rVr),e(Lx,tVr),e(Tr,aVr),e(Tr,Yt),M(xx,Yt,null),e(Yt,nVr),e(Yt,uEe),e(uEe,sVr),e(Yt,lVr),e(Yt,lf),e(lf,iVr),e(lf,bEe),e(bEe,dVr),e(lf,cVr),e(lf,uZ),e(uZ,fVr),e(lf,mVr),e(Yt,gVr),M(tw,Yt,null),e(Tr,hVr),e(Tr,Ur),M($x,Ur,null),e(Ur,pVr),e(Ur,vEe),e(vEe,_Vr),e(Ur,uVr),e(Ur,Cn),e(Cn,bVr),e(Cn,FEe),e(FEe,vVr),e(Cn,FVr),e(Cn,TEe),e(TEe,TVr),e(Cn,MVr),e(Cn,MEe),e(MEe,EVr),e(Cn,CVr),e(Ur,wVr),e(Ur,kx),e(kx,aw),e(aw,EEe),e(EEe,AVr),e(aw,yVr),e(aw,bZ),e(bZ,LVr),e(aw,xVr),e(kx,$Vr),e(kx,nw),e(nw,CEe),e(CEe,kVr),e(nw,SVr),e(nw,vZ),e(vZ,RVr),e(nw,PVr),e(Ur,BVr),M(sw,Ur,null),b(f,vDe,u),b(f,df,u),e(df,lw),e(lw,wEe),M(Sx,wEe,null),e(df,IVr),e(df,AEe),e(AEe,NVr),b(f,FDe,u),b(f,Mr,u),M(Rx,Mr,null),e(Mr,qVr),e(Mr,cf),e(cf,jVr),e(cf,FZ),e(FZ,DVr),e(cf,GVr),e(cf,TZ),e(TZ,OVr),e(cf,VVr),e(Mr,XVr),e(Mr,Px),e(Px,zVr),e(Px,yEe),e(yEe,WVr),e(Px,QVr),e(Mr,HVr),e(Mr,Kt),M(Bx,Kt,null),e(Kt,UVr),e(Kt,LEe),e(LEe,JVr),e(Kt,YVr),e(Kt,ff),e(ff,KVr),e(ff,xEe),e(xEe,ZVr),e(ff,eXr),e(ff,MZ),e(MZ,oXr),e(ff,rXr),e(Kt,tXr),M(iw,Kt,null),e(Mr,aXr),e(Mr,Jr),M(Ix,Jr,null),e(Jr,nXr),e(Jr,$Ee),e($Ee,sXr),e(Jr,lXr),e(Jr,wn),e(wn,iXr),e(wn,kEe),e(kEe,dXr),e(wn,cXr),e(wn,SEe),e(SEe,fXr),e(wn,mXr),e(wn,REe),e(REe,gXr),e(wn,hXr),e(Jr,pXr),e(Jr,PEe),e(PEe,dw),e(dw,BEe),e(BEe,_Xr),e(dw,uXr),e(dw,EZ),e(EZ,bXr),e(dw,vXr),e(Jr,FXr),M(cw,Jr,null),TDe=!0},p(f,[u]){const Nx={};u&2&&(Nx.$$scope={dirty:u,ctx:f}),Ff.$set(Nx);const IEe={};u&2&&(IEe.$$scope={dirty:u,ctx:f}),Eg.$set(IEe);const NEe={};u&2&&(NEe.$$scope={dirty:u,ctx:f}),ah.$set(NEe);const qEe={};u&2&&(qEe.$$scope={dirty:u,ctx:f}),Ih.$set(qEe);const qx={};u&2&&(qx.$$scope={dirty:u,ctx:f}),Nh.$set(qx);const jEe={};u&2&&(jEe.$$scope={dirty:u,ctx:f}),tp.$set(jEe);const An={};u&2&&(An.$$scope={dirty:u,ctx:f}),ap.$set(An);const DEe={};u&2&&(DEe.$$scope={dirty:u,ctx:f}),lp.$set(DEe);const GEe={};u&2&&(GEe.$$scope={dirty:u,ctx:f}),ru.$set(GEe);const OEe={};u&2&&(OEe.$$scope={dirty:u,ctx:f}),au.$set(OEe);const jx={};u&2&&(jx.$$scope={dirty:u,ctx:f}),Hu.$set(jx);const VEe={};u&2&&(VEe.$$scope={dirty:u,ctx:f}),Ju.$set(VEe);const Dx={};u&2&&(Dx.$$scope={dirty:u,ctx:f}),B1.$set(Dx);const XEe={};u&2&&(XEe.$$scope={dirty:u,ctx:f}),N1.$set(XEe);const Gx={};u&2&&(Gx.$$scope={dirty:u,ctx:f}),Tb.$set(Gx);const zEe={};u&2&&(zEe.$$scope={dirty:u,ctx:f}),Eb.$set(zEe);const WEe={};u&2&&(WEe.$$scope={dirty:u,ctx:f}),Gb.$set(WEe);const QEe={};u&2&&(QEe.$$scope={dirty:u,ctx:f}),Vb.$set(QEe);const mf={};u&2&&(mf.$$scope={dirty:u,ctx:f}),q2.$set(mf);const HEe={};u&2&&(HEe.$$scope={dirty:u,ctx:f}),D2.$set(HEe);const UEe={};u&2&&(UEe.$$scope={dirty:u,ctx:f}),u5.$set(UEe);const JEe={};u&2&&(JEe.$$scope={dirty:u,ctx:f}),v5.$set(JEe);const Ox={};u&2&&(Ox.$$scope={dirty:u,ctx:f}),A5.$set(Ox);const YEe={};u&2&&(YEe.$$scope={dirty:u,ctx:f}),L5.$set(YEe);const KEe={};u&2&&(KEe.$$scope={dirty:u,ctx:f}),cv.$set(KEe);const ZEe={};u&2&&(ZEe.$$scope={dirty:u,ctx:f}),mv.$set(ZEe);const et={};u&2&&(et.$$scope={dirty:u,ctx:f}),eF.$set(et);const Vx={};u&2&&(Vx.$$scope={dirty:u,ctx:f}),rF.$set(Vx);const eCe={};u&2&&(eCe.$$scope={dirty:u,ctx:f}),nF.$set(eCe);const Xx={};u&2&&(Xx.$$scope={dirty:u,ctx:f}),lF.$set(Xx);const oCe={};u&2&&(oCe.$$scope={dirty:u,ctx:f}),TF.$set(oCe);const ot={};u&2&&(ot.$$scope={dirty:u,ctx:f}),EF.$set(ot);const rCe={};u&2&&(rCe.$$scope={dirty:u,ctx:f}),AF.$set(rCe);const gf={};u&2&&(gf.$$scope={dirty:u,ctx:f}),LF.$set(gf);const tCe={};u&2&&(tCe.$$scope={dirty:u,ctx:f}),jF.$set(tCe);const aCe={};u&2&&(aCe.$$scope={dirty:u,ctx:f}),GF.$set(aCe);const y={};u&2&&(y.$$scope={dirty:u,ctx:f}),HF.$set(y);const fw={};u&2&&(fw.$$scope={dirty:u,ctx:f}),JF.$set(fw);const nCe={};u&2&&(nCe.$$scope={dirty:u,ctx:f}),l0.$set(nCe);const sCe={};u&2&&(sCe.$$scope={dirty:u,ctx:f}),d0.$set(sCe);const mw={};u&2&&(mw.$$scope={dirty:u,ctx:f}),g0.$set(mw);const lCe={};u&2&&(lCe.$$scope={dirty:u,ctx:f}),p0.$set(lCe);const iCe={};u&2&&(iCe.$$scope={dirty:u,ctx:f}),M0.$set(iCe);const gw={};u&2&&(gw.$$scope={dirty:u,ctx:f}),C0.$set(gw);const dCe={};u&2&&(dCe.$$scope={dirty:u,ctx:f}),x0.$set(dCe);const cCe={};u&2&&(cCe.$$scope={dirty:u,ctx:f}),k0.$set(cCe);const hw={};u&2&&(hw.$$scope={dirty:u,ctx:f}),B0.$set(hw);const fCe={};u&2&&(fCe.$$scope={dirty:u,ctx:f}),N0.$set(fCe);const mCe={};u&2&&(mCe.$$scope={dirty:u,ctx:f}),D0.$set(mCe);const pw={};u&2&&(pw.$$scope={dirty:u,ctx:f}),O0.$set(pw);const gCe={};u&2&&(gCe.$$scope={dirty:u,ctx:f}),H0.$set(gCe);const hCe={};u&2&&(hCe.$$scope={dirty:u,ctx:f}),J0.$set(hCe);const _w={};u&2&&(_w.$$scope={dirty:u,ctx:f}),Z0.$set(_w);const pCe={};u&2&&(pCe.$$scope={dirty:u,ctx:f}),oT.$set(pCe);const _Ce={};u&2&&(_Ce.$$scope={dirty:u,ctx:f}),HT.$set(_Ce);const uw={};u&2&&(uw.$$scope={dirty:u,ctx:f}),JT.$set(uw);const uCe={};u&2&&(uCe.$$scope={dirty:u,ctx:f}),F7.$set(uCe);const bCe={};u&2&&(bCe.$$scope={dirty:u,ctx:f}),M7.$set(bCe);const bw={};u&2&&(bw.$$scope={dirty:u,ctx:f}),I7.$set(bw);const vCe={};u&2&&(vCe.$$scope={dirty:u,ctx:f}),q7.$set(vCe);const FCe={};u&2&&(FCe.$$scope={dirty:u,ctx:f}),V7.$set(FCe);const vw={};u&2&&(vw.$$scope={dirty:u,ctx:f}),z7.$set(vw);const TCe={};u&2&&(TCe.$$scope={dirty:u,ctx:f}),mM.$set(TCe);const MCe={};u&2&&(MCe.$$scope={dirty:u,ctx:f}),hM.$set(MCe);const Fw={};u&2&&(Fw.$$scope={dirty:u,ctx:f}),wM.$set(Fw);const ECe={};u&2&&(ECe.$$scope={dirty:u,ctx:f}),yM.$set(ECe);const CCe={};u&2&&(CCe.$$scope={dirty:u,ctx:f}),e4.$set(CCe);const Tw={};u&2&&(Tw.$$scope={dirty:u,ctx:f}),r4.$set(Tw);const wCe={};u&2&&(wCe.$$scope={dirty:u,ctx:f}),F4.$set(wCe);const ACe={};u&2&&(ACe.$$scope={dirty:u,ctx:f}),M4.$set(ACe);const Mw={};u&2&&(Mw.$$scope={dirty:u,ctx:f}),w4.$set(Mw);const yCe={};u&2&&(yCe.$$scope={dirty:u,ctx:f}),y4.$set(yCe);const LCe={};u&2&&(LCe.$$scope={dirty:u,ctx:f}),x4.$set(LCe);const Ew={};u&2&&(Ew.$$scope={dirty:u,ctx:f}),k4.$set(Ew);const xCe={};u&2&&(xCe.$$scope={dirty:u,ctx:f}),K4.$set(xCe);const $Ce={};u&2&&($Ce.$$scope={dirty:u,ctx:f}),eE.$set($Ce);const Cw={};u&2&&(Cw.$$scope={dirty:u,ctx:f}),TE.$set(Cw);const kCe={};u&2&&(kCe.$$scope={dirty:u,ctx:f}),EE.$set(kCe);const SCe={};u&2&&(SCe.$$scope={dirty:u,ctx:f}),wE.$set(SCe);const ww={};u&2&&(ww.$$scope={dirty:u,ctx:f}),yE.$set(ww);const RCe={};u&2&&(RCe.$$scope={dirty:u,ctx:f}),xE.$set(RCe);const PCe={};u&2&&(PCe.$$scope={dirty:u,ctx:f}),kE.$set(PCe);const Aw={};u&2&&(Aw.$$scope={dirty:u,ctx:f}),aC.$set(Aw);const BCe={};u&2&&(BCe.$$scope={dirty:u,ctx:f}),sC.$set(BCe);const ICe={};u&2&&(ICe.$$scope={dirty:u,ctx:f}),uC.$set(ICe);const yw={};u&2&&(yw.$$scope={dirty:u,ctx:f}),vC.$set(yw);const NCe={};u&2&&(NCe.$$scope={dirty:u,ctx:f}),SC.$set(NCe);const qCe={};u&2&&(qCe.$$scope={dirty:u,ctx:f}),PC.$set(qCe);const Lw={};u&2&&(Lw.$$scope={dirty:u,ctx:f}),zC.$set(Lw);const jCe={};u&2&&(jCe.$$scope={dirty:u,ctx:f}),QC.$set(jCe);const DCe={};u&2&&(DCe.$$scope={dirty:u,ctx:f}),t3.$set(DCe);const xw={};u&2&&(xw.$$scope={dirty:u,ctx:f}),n3.$set(xw);const GCe={};u&2&&(GCe.$$scope={dirty:u,ctx:f}),_3.$set(GCe);const OCe={};u&2&&(OCe.$$scope={dirty:u,ctx:f}),b3.$set(OCe);const $w={};u&2&&($w.$$scope={dirty:u,ctx:f}),x3.$set($w);const VCe={};u&2&&(VCe.$$scope={dirty:u,ctx:f}),k3.$set(VCe);const XCe={};u&2&&(XCe.$$scope={dirty:u,ctx:f}),D3.$set(XCe);const kw={};u&2&&(kw.$$scope={dirty:u,ctx:f}),O3.$set(kw);const zCe={};u&2&&(zCe.$$scope={dirty:u,ctx:f}),Y3.$set(zCe);const WCe={};u&2&&(WCe.$$scope={dirty:u,ctx:f}),Z3.$set(WCe);const Sw={};u&2&&(Sw.$$scope={dirty:u,ctx:f}),ow.$set(Sw);const QCe={};u&2&&(QCe.$$scope={dirty:u,ctx:f}),tw.$set(QCe);const HCe={};u&2&&(HCe.$$scope={dirty:u,ctx:f}),sw.$set(HCe);const Rw={};u&2&&(Rw.$$scope={dirty:u,ctx:f}),iw.$set(Rw);const UCe={};u&2&&(UCe.$$scope={dirty:u,ctx:f}),cw.$set(UCe)},i(f){TDe||(E(d.$$.fragment,f),E(Ca.$$.fragment,f),E(SA.$$.fragment,f),E(RA.$$.fragment,f),E(Ff.$$.fragment,f),E(PA.$$.fragment,f),E(BA.$$.fragment,f),E(qA.$$.fragment,f),E(Eg.$$.fragment,f),E(jA.$$.fragment,f),E(DA.$$.fragment,f),E(GA.$$.fragment,f),E(XA.$$.fragment,f),E(ah.$$.fragment,f),E(zA.$$.fragment,f),E(WA.$$.fragment,f),E(QA.$$.fragment,f),E(JA.$$.fragment,f),E(Ih.$$.fragment,f),E(Nh.$$.fragment,f),E(YA.$$.fragment,f),E(KA.$$.fragment,f),E(ZA.$$.fragment,f),E(ry.$$.fragment,f),E(tp.$$.fragment,f),E(ap.$$.fragment,f),E(ty.$$.fragment,f),E(ay.$$.fragment,f),E(ny.$$.fragment,f),E(ly.$$.fragment,f),E(lp.$$.fragment,f),E(iy.$$.fragment,f),E(ru.$$.fragment,f),E(dy.$$.fragment,f),E(cy.$$.fragment,f),E(my.$$.fragment,f),E(au.$$.fragment,f),E(gy.$$.fragment,f),E(Hu.$$.fragment,f),E(hy.$$.fragment,f),E(py.$$.fragment,f),E(uy.$$.fragment,f),E(Ju.$$.fragment,f),E(by.$$.fragment,f),E(B1.$$.fragment,f),E(vy.$$.fragment,f),E(Fy.$$.fragment,f),E(My.$$.fragment,f),E(N1.$$.fragment,f),E(Ey.$$.fragment,f),E(Tb.$$.fragment,f),E(Cy.$$.fragment,f),E(wy.$$.fragment,f),E(yy.$$.fragment,f),E(Eb.$$.fragment,f),E(Ly.$$.fragment,f),E(Gb.$$.fragment,f),E(xy.$$.fragment,f),E($y.$$.fragment,f),E(Sy.$$.fragment,f),E(Vb.$$.fragment,f),E(Ry.$$.fragment,f),E(q2.$$.fragment,f),E(Py.$$.fragment,f),E(By.$$.fragment,f),E(Ny.$$.fragment,f),E(D2.$$.fragment,f),E(qy.$$.fragment,f),E(u5.$$.fragment,f),E(jy.$$.fragment,f),E(Dy.$$.fragment,f),E(Oy.$$.fragment,f),E(v5.$$.fragment,f),E(Vy.$$.fragment,f),E(A5.$$.fragment,f),E(Xy.$$.fragment,f),E(zy.$$.fragment,f),E(Qy.$$.fragment,f),E(L5.$$.fragment,f),E(Hy.$$.fragment,f),E(cv.$$.fragment,f),E(Uy.$$.fragment,f),E(Jy.$$.fragment,f),E(Ky.$$.fragment,f),E(mv.$$.fragment,f),E(Zy.$$.fragment,f),E(eF.$$.fragment,f),E(eL.$$.fragment,f),E(oL.$$.fragment,f),E(tL.$$.fragment,f),E(rF.$$.fragment,f),E(aL.$$.fragment,f),E(nF.$$.fragment,f),E(nL.$$.fragment,f),E(sL.$$.fragment,f),E(iL.$$.fragment,f),E(lF.$$.fragment,f),E(dL.$$.fragment,f),E(TF.$$.fragment,f),E(cL.$$.fragment,f),E(fL.$$.fragment,f),E(gL.$$.fragment,f),E(EF.$$.fragment,f),E(hL.$$.fragment,f),E(AF.$$.fragment,f),E(pL.$$.fragment,f),E(_L.$$.fragment,f),E(bL.$$.fragment,f),E(LF.$$.fragment,f),E(vL.$$.fragment,f),E(jF.$$.fragment,f),E(FL.$$.fragment,f),E(TL.$$.fragment,f),E(EL.$$.fragment,f),E(GF.$$.fragment,f),E(CL.$$.fragment,f),E(HF.$$.fragment,f),E(wL.$$.fragment,f),E(AL.$$.fragment,f),E(LL.$$.fragment,f),E(JF.$$.fragment,f),E(xL.$$.fragment,f),E(l0.$$.fragment,f),E($L.$$.fragment,f),E(kL.$$.fragment,f),E(RL.$$.fragment,f),E(d0.$$.fragment,f),E(PL.$$.fragment,f),E(g0.$$.fragment,f),E(IL.$$.fragment,f),E(NL.$$.fragment,f),E(jL.$$.fragment,f),E(p0.$$.fragment,f),E(DL.$$.fragment,f),E(M0.$$.fragment,f),E(GL.$$.fragment,f),E(OL.$$.fragment,f),E(XL.$$.fragment,f),E(C0.$$.fragment,f),E(zL.$$.fragment,f),E(x0.$$.fragment,f),E(WL.$$.fragment,f),E(QL.$$.fragment,f),E(UL.$$.fragment,f),E(k0.$$.fragment,f),E(JL.$$.fragment,f),E(B0.$$.fragment,f),E(KL.$$.fragment,f),E(ZL.$$.fragment,f),E(o8.$$.fragment,f),E(N0.$$.fragment,f),E(r8.$$.fragment,f),E(D0.$$.fragment,f),E(t8.$$.fragment,f),E(a8.$$.fragment,f),E(s8.$$.fragment,f),E(O0.$$.fragment,f),E(l8.$$.fragment,f),E(H0.$$.fragment,f),E(i8.$$.fragment,f),E(d8.$$.fragment,f),E(f8.$$.fragment,f),E(J0.$$.fragment,f),E(m8.$$.fragment,f),E(Z0.$$.fragment,f),E(g8.$$.fragment,f),E(h8.$$.fragment,f),E(_8.$$.fragment,f),E(oT.$$.fragment,f),E(u8.$$.fragment,f),E(HT.$$.fragment,f),E(b8.$$.fragment,f),E(v8.$$.fragment,f),E(T8.$$.fragment,f),E(JT.$$.fragment,f),E(M8.$$.fragment,f),E(F7.$$.fragment,f),E(E8.$$.fragment,f),E(C8.$$.fragment,f),E(A8.$$.fragment,f),E(M7.$$.fragment,f),E(y8.$$.fragment,f),E(I7.$$.fragment,f),E(L8.$$.fragment,f),E(x8.$$.fragment,f),E(k8.$$.fragment,f),E(q7.$$.fragment,f),E(S8.$$.fragment,f),E(V7.$$.fragment,f),E(R8.$$.fragment,f),E(P8.$$.fragment,f),E(I8.$$.fragment,f),E(z7.$$.fragment,f),E(N8.$$.fragment,f),E(mM.$$.fragment,f),E(q8.$$.fragment,f),E(j8.$$.fragment,f),E(G8.$$.fragment,f),E(hM.$$.fragment,f),E(O8.$$.fragment,f),E(wM.$$.fragment,f),E(V8.$$.fragment,f),E(X8.$$.fragment,f),E(W8.$$.fragment,f),E(yM.$$.fragment,f),E(Q8.$$.fragment,f),E(e4.$$.fragment,f),E(H8.$$.fragment,f),E(U8.$$.fragment,f),E(Y8.$$.fragment,f),E(r4.$$.fragment,f),E(K8.$$.fragment,f),E(F4.$$.fragment,f),E(Z8.$$.fragment,f),E(e9.$$.fragment,f),E(r9.$$.fragment,f),E(M4.$$.fragment,f),E(t9.$$.fragment,f),E(w4.$$.fragment,f),E(n9.$$.fragment,f),E(s9.$$.fragment,f),E(i9.$$.fragment,f),E(y4.$$.fragment,f),E(d9.$$.fragment,f),E(x4.$$.fragment,f),E(c9.$$.fragment,f),E(f9.$$.fragment,f),E(g9.$$.fragment,f),E(k4.$$.fragment,f),E(h9.$$.fragment,f),E(K4.$$.fragment,f),E(p9.$$.fragment,f),E(_9.$$.fragment,f),E(b9.$$.fragment,f),E(eE.$$.fragment,f),E(v9.$$.fragment,f),E(TE.$$.fragment,f),E(F9.$$.fragment,f),E(T9.$$.fragment,f),E(E9.$$.fragment,f),E(EE.$$.fragment,f),E(C9.$$.fragment,f),E(wE.$$.fragment,f),E(w9.$$.fragment,f),E(A9.$$.fragment,f),E(L9.$$.fragment,f),E(yE.$$.fragment,f),E(x9.$$.fragment,f),E(xE.$$.fragment,f),E($9.$$.fragment,f),E(k9.$$.fragment,f),E(R9.$$.fragment,f),E(kE.$$.fragment,f),E(P9.$$.fragment,f),E(aC.$$.fragment,f),E(B9.$$.fragment,f),E(I9.$$.fragment,f),E(q9.$$.fragment,f),E(sC.$$.fragment,f),E(j9.$$.fragment,f),E(uC.$$.fragment,f),E(D9.$$.fragment,f),E(G9.$$.fragment,f),E(V9.$$.fragment,f),E(vC.$$.fragment,f),E(X9.$$.fragment,f),E(SC.$$.fragment,f),E(z9.$$.fragment,f),E(W9.$$.fragment,f),E(H9.$$.fragment,f),E(PC.$$.fragment,f),E(U9.$$.fragment,f),E(zC.$$.fragment,f),E(J9.$$.fragment,f),E(Y9.$$.fragment,f),E(Z9.$$.fragment,f),E(QC.$$.fragment,f),E(ex.$$.fragment,f),E(t3.$$.fragment,f),E(ox.$$.fragment,f),E(rx.$$.fragment,f),E(ax.$$.fragment,f),E(n3.$$.fragment,f),E(nx.$$.fragment,f),E(_3.$$.fragment,f),E(sx.$$.fragment,f),E(lx.$$.fragment,f),E(dx.$$.fragment,f),E(b3.$$.fragment,f),E(cx.$$.fragment,f),E(x3.$$.fragment,f),E(fx.$$.fragment,f),E(mx.$$.fragment,f),E(hx.$$.fragment,f),E(k3.$$.fragment,f),E(px.$$.fragment,f),E(D3.$$.fragment,f),E(_x.$$.fragment,f),E(ux.$$.fragment,f),E(vx.$$.fragment,f),E(O3.$$.fragment,f),E(Fx.$$.fragment,f),E(Y3.$$.fragment,f),E(Tx.$$.fragment,f),E(Mx.$$.fragment,f),E(Cx.$$.fragment,f),E(Z3.$$.fragment,f),E(wx.$$.fragment,f),E(ow.$$.fragment,f),E(Ax.$$.fragment,f),E(yx.$$.fragment,f),E(xx.$$.fragment,f),E(tw.$$.fragment,f),E($x.$$.fragment,f),E(sw.$$.fragment,f),E(Sx.$$.fragment,f),E(Rx.$$.fragment,f),E(Bx.$$.fragment,f),E(iw.$$.fragment,f),E(Ix.$$.fragment,f),E(cw.$$.fragment,f),TDe=!0)},o(f){C(d.$$.fragment,f),C(Ca.$$.fragment,f),C(SA.$$.fragment,f),C(RA.$$.fragment,f),C(Ff.$$.fragment,f),C(PA.$$.fragment,f),C(BA.$$.fragment,f),C(qA.$$.fragment,f),C(Eg.$$.fragment,f),C(jA.$$.fragment,f),C(DA.$$.fragment,f),C(GA.$$.fragment,f),C(XA.$$.fragment,f),C(ah.$$.fragment,f),C(zA.$$.fragment,f),C(WA.$$.fragment,f),C(QA.$$.fragment,f),C(JA.$$.fragment,f),C(Ih.$$.fragment,f),C(Nh.$$.fragment,f),C(YA.$$.fragment,f),C(KA.$$.fragment,f),C(ZA.$$.fragment,f),C(ry.$$.fragment,f),C(tp.$$.fragment,f),C(ap.$$.fragment,f),C(ty.$$.fragment,f),C(ay.$$.fragment,f),C(ny.$$.fragment,f),C(ly.$$.fragment,f),C(lp.$$.fragment,f),C(iy.$$.fragment,f),C(ru.$$.fragment,f),C(dy.$$.fragment,f),C(cy.$$.fragment,f),C(my.$$.fragment,f),C(au.$$.fragment,f),C(gy.$$.fragment,f),C(Hu.$$.fragment,f),C(hy.$$.fragment,f),C(py.$$.fragment,f),C(uy.$$.fragment,f),C(Ju.$$.fragment,f),C(by.$$.fragment,f),C(B1.$$.fragment,f),C(vy.$$.fragment,f),C(Fy.$$.fragment,f),C(My.$$.fragment,f),C(N1.$$.fragment,f),C(Ey.$$.fragment,f),C(Tb.$$.fragment,f),C(Cy.$$.fragment,f),C(wy.$$.fragment,f),C(yy.$$.fragment,f),C(Eb.$$.fragment,f),C(Ly.$$.fragment,f),C(Gb.$$.fragment,f),C(xy.$$.fragment,f),C($y.$$.fragment,f),C(Sy.$$.fragment,f),C(Vb.$$.fragment,f),C(Ry.$$.fragment,f),C(q2.$$.fragment,f),C(Py.$$.fragment,f),C(By.$$.fragment,f),C(Ny.$$.fragment,f),C(D2.$$.fragment,f),C(qy.$$.fragment,f),C(u5.$$.fragment,f),C(jy.$$.fragment,f),C(Dy.$$.fragment,f),C(Oy.$$.fragment,f),C(v5.$$.fragment,f),C(Vy.$$.fragment,f),C(A5.$$.fragment,f),C(Xy.$$.fragment,f),C(zy.$$.fragment,f),C(Qy.$$.fragment,f),C(L5.$$.fragment,f),C(Hy.$$.fragment,f),C(cv.$$.fragment,f),C(Uy.$$.fragment,f),C(Jy.$$.fragment,f),C(Ky.$$.fragment,f),C(mv.$$.fragment,f),C(Zy.$$.fragment,f),C(eF.$$.fragment,f),C(eL.$$.fragment,f),C(oL.$$.fragment,f),C(tL.$$.fragment,f),C(rF.$$.fragment,f),C(aL.$$.fragment,f),C(nF.$$.fragment,f),C(nL.$$.fragment,f),C(sL.$$.fragment,f),C(iL.$$.fragment,f),C(lF.$$.fragment,f),C(dL.$$.fragment,f),C(TF.$$.fragment,f),C(cL.$$.fragment,f),C(fL.$$.fragment,f),C(gL.$$.fragment,f),C(EF.$$.fragment,f),C(hL.$$.fragment,f),C(AF.$$.fragment,f),C(pL.$$.fragment,f),C(_L.$$.fragment,f),C(bL.$$.fragment,f),C(LF.$$.fragment,f),C(vL.$$.fragment,f),C(jF.$$.fragment,f),C(FL.$$.fragment,f),C(TL.$$.fragment,f),C(EL.$$.fragment,f),C(GF.$$.fragment,f),C(CL.$$.fragment,f),C(HF.$$.fragment,f),C(wL.$$.fragment,f),C(AL.$$.fragment,f),C(LL.$$.fragment,f),C(JF.$$.fragment,f),C(xL.$$.fragment,f),C(l0.$$.fragment,f),C($L.$$.fragment,f),C(kL.$$.fragment,f),C(RL.$$.fragment,f),C(d0.$$.fragment,f),C(PL.$$.fragment,f),C(g0.$$.fragment,f),C(IL.$$.fragment,f),C(NL.$$.fragment,f),C(jL.$$.fragment,f),C(p0.$$.fragment,f),C(DL.$$.fragment,f),C(M0.$$.fragment,f),C(GL.$$.fragment,f),C(OL.$$.fragment,f),C(XL.$$.fragment,f),C(C0.$$.fragment,f),C(zL.$$.fragment,f),C(x0.$$.fragment,f),C(WL.$$.fragment,f),C(QL.$$.fragment,f),C(UL.$$.fragment,f),C(k0.$$.fragment,f),C(JL.$$.fragment,f),C(B0.$$.fragment,f),C(KL.$$.fragment,f),C(ZL.$$.fragment,f),C(o8.$$.fragment,f),C(N0.$$.fragment,f),C(r8.$$.fragment,f),C(D0.$$.fragment,f),C(t8.$$.fragment,f),C(a8.$$.fragment,f),C(s8.$$.fragment,f),C(O0.$$.fragment,f),C(l8.$$.fragment,f),C(H0.$$.fragment,f),C(i8.$$.fragment,f),C(d8.$$.fragment,f),C(f8.$$.fragment,f),C(J0.$$.fragment,f),C(m8.$$.fragment,f),C(Z0.$$.fragment,f),C(g8.$$.fragment,f),C(h8.$$.fragment,f),C(_8.$$.fragment,f),C(oT.$$.fragment,f),C(u8.$$.fragment,f),C(HT.$$.fragment,f),C(b8.$$.fragment,f),C(v8.$$.fragment,f),C(T8.$$.fragment,f),C(JT.$$.fragment,f),C(M8.$$.fragment,f),C(F7.$$.fragment,f),C(E8.$$.fragment,f),C(C8.$$.fragment,f),C(A8.$$.fragment,f),C(M7.$$.fragment,f),C(y8.$$.fragment,f),C(I7.$$.fragment,f),C(L8.$$.fragment,f),C(x8.$$.fragment,f),C(k8.$$.fragment,f),C(q7.$$.fragment,f),C(S8.$$.fragment,f),C(V7.$$.fragment,f),C(R8.$$.fragment,f),C(P8.$$.fragment,f),C(I8.$$.fragment,f),C(z7.$$.fragment,f),C(N8.$$.fragment,f),C(mM.$$.fragment,f),C(q8.$$.fragment,f),C(j8.$$.fragment,f),C(G8.$$.fragment,f),C(hM.$$.fragment,f),C(O8.$$.fragment,f),C(wM.$$.fragment,f),C(V8.$$.fragment,f),C(X8.$$.fragment,f),C(W8.$$.fragment,f),C(yM.$$.fragment,f),C(Q8.$$.fragment,f),C(e4.$$.fragment,f),C(H8.$$.fragment,f),C(U8.$$.fragment,f),C(Y8.$$.fragment,f),C(r4.$$.fragment,f),C(K8.$$.fragment,f),C(F4.$$.fragment,f),C(Z8.$$.fragment,f),C(e9.$$.fragment,f),C(r9.$$.fragment,f),C(M4.$$.fragment,f),C(t9.$$.fragment,f),C(w4.$$.fragment,f),C(n9.$$.fragment,f),C(s9.$$.fragment,f),C(i9.$$.fragment,f),C(y4.$$.fragment,f),C(d9.$$.fragment,f),C(x4.$$.fragment,f),C(c9.$$.fragment,f),C(f9.$$.fragment,f),C(g9.$$.fragment,f),C(k4.$$.fragment,f),C(h9.$$.fragment,f),C(K4.$$.fragment,f),C(p9.$$.fragment,f),C(_9.$$.fragment,f),C(b9.$$.fragment,f),C(eE.$$.fragment,f),C(v9.$$.fragment,f),C(TE.$$.fragment,f),C(F9.$$.fragment,f),C(T9.$$.fragment,f),C(E9.$$.fragment,f),C(EE.$$.fragment,f),C(C9.$$.fragment,f),C(wE.$$.fragment,f),C(w9.$$.fragment,f),C(A9.$$.fragment,f),C(L9.$$.fragment,f),C(yE.$$.fragment,f),C(x9.$$.fragment,f),C(xE.$$.fragment,f),C($9.$$.fragment,f),C(k9.$$.fragment,f),C(R9.$$.fragment,f),C(kE.$$.fragment,f),C(P9.$$.fragment,f),C(aC.$$.fragment,f),C(B9.$$.fragment,f),C(I9.$$.fragment,f),C(q9.$$.fragment,f),C(sC.$$.fragment,f),C(j9.$$.fragment,f),C(uC.$$.fragment,f),C(D9.$$.fragment,f),C(G9.$$.fragment,f),C(V9.$$.fragment,f),C(vC.$$.fragment,f),C(X9.$$.fragment,f),C(SC.$$.fragment,f),C(z9.$$.fragment,f),C(W9.$$.fragment,f),C(H9.$$.fragment,f),C(PC.$$.fragment,f),C(U9.$$.fragment,f),C(zC.$$.fragment,f),C(J9.$$.fragment,f),C(Y9.$$.fragment,f),C(Z9.$$.fragment,f),C(QC.$$.fragment,f),C(ex.$$.fragment,f),C(t3.$$.fragment,f),C(ox.$$.fragment,f),C(rx.$$.fragment,f),C(ax.$$.fragment,f),C(n3.$$.fragment,f),C(nx.$$.fragment,f),C(_3.$$.fragment,f),C(sx.$$.fragment,f),C(lx.$$.fragment,f),C(dx.$$.fragment,f),C(b3.$$.fragment,f),C(cx.$$.fragment,f),C(x3.$$.fragment,f),C(fx.$$.fragment,f),C(mx.$$.fragment,f),C(hx.$$.fragment,f),C(k3.$$.fragment,f),C(px.$$.fragment,f),C(D3.$$.fragment,f),C(_x.$$.fragment,f),C(ux.$$.fragment,f),C(vx.$$.fragment,f),C(O3.$$.fragment,f),C(Fx.$$.fragment,f),C(Y3.$$.fragment,f),C(Tx.$$.fragment,f),C(Mx.$$.fragment,f),C(Cx.$$.fragment,f),C(Z3.$$.fragment,f),C(wx.$$.fragment,f),C(ow.$$.fragment,f),C(Ax.$$.fragment,f),C(yx.$$.fragment,f),C(xx.$$.fragment,f),C(tw.$$.fragment,f),C($x.$$.fragment,f),C(sw.$$.fragment,f),C(Sx.$$.fragment,f),C(Rx.$$.fragment,f),C(Bx.$$.fragment,f),C(iw.$$.fragment,f),C(Ix.$$.fragment,f),C(cw.$$.fragment,f),TDe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(pf),f&&t(rt),f&&t(De),f&&t(We),f&&t(uf),w(Ca,f),f&&t(Qe),f&&t(Ae),f&&t(Eo),f&&t(wa),f&&t(bqe),f&&t(bi),w(SA),f&&t(vqe),f&&t(kn),f&&t(Fqe),w(RA,f),f&&t(Tqe),f&&t(ok),f&&t(Mqe),w(Ff,f),f&&t(Eqe),f&&t(vi),w(PA),f&&t(Cqe),f&&t(Co),w(BA),w(qA),w(Eg),w(jA),f&&t(wqe),f&&t(Ti),w(DA),f&&t(Aqe),f&&t(wo),w(GA),w(XA),w(ah),w(zA),f&&t(yqe),f&&t(Mi),w(WA),f&&t(Lqe),f&&t(Ao),w(QA),w(JA),w(Ih),w(Nh),w(YA),f&&t(xqe),f&&t(Ei),w(KA),f&&t($qe),f&&t(yo),w(ZA),w(ry),w(tp),w(ap),w(ty),f&&t(kqe),f&&t(wi),w(ay),f&&t(Sqe),f&&t(Lo),w(ny),w(ly),w(lp),w(iy),w(ru),f&&t(Rqe),f&&t(Li),w(dy),f&&t(Pqe),f&&t(xo),w(cy),w(my),w(au),w(gy),w(Hu),f&&t(Bqe),f&&t(ki),w(hy),f&&t(Iqe),f&&t($o),w(py),w(uy),w(Ju),w(by),w(B1),f&&t(Nqe),f&&t(Pi),w(vy),f&&t(qqe),f&&t(ko),w(Fy),w(My),w(N1),w(Ey),w(Tb),f&&t(jqe),f&&t(Ni),w(Cy),f&&t(Dqe),f&&t(So),w(wy),w(yy),w(Eb),w(Ly),w(Gb),f&&t(Gqe),f&&t(Di),w(xy),f&&t(Oqe),f&&t(Ro),w($y),w(Sy),w(Vb),w(Ry),w(q2),f&&t(Vqe),f&&t(Vi),w(Py),f&&t(Xqe),f&&t(Po),w(By),w(Ny),w(D2),w(qy),w(u5),f&&t(zqe),f&&t(Wi),w(jy),f&&t(Wqe),f&&t(Bo),w(Dy),w(Oy),w(v5),w(Vy),w(A5),f&&t(Qqe),f&&t(Ui),w(Xy),f&&t(Hqe),f&&t(Io),w(zy),w(Qy),w(L5),w(Hy),w(cv),f&&t(Uqe),f&&t(Ki),w(Uy),f&&t(Jqe),f&&t(No),w(Jy),w(Ky),w(mv),w(Zy),w(eF),f&&t(Yqe),f&&t(od),w(eL),f&&t(Kqe),f&&t(qo),w(oL),w(tL),w(rF),w(aL),w(nF),f&&t(Zqe),f&&t(ad),w(nL),f&&t(eje),f&&t(jo),w(sL),w(iL),w(lF),w(dL),w(TF),f&&t(oje),f&&t(ld),w(cL),f&&t(rje),f&&t(Do),w(fL),w(gL),w(EF),w(hL),w(AF),f&&t(tje),f&&t(cd),w(pL),f&&t(aje),f&&t(Go),w(_L),w(bL),w(LF),w(vL),w(jF),f&&t(nje),f&&t(gd),w(FL),f&&t(sje),f&&t(Oo),w(TL),w(EL),w(GF),w(CL),w(HF),f&&t(lje),f&&t(_d),w(wL),f&&t(ije),f&&t(Vo),w(AL),w(LL),w(JF),w(xL),w(l0),f&&t(dje),f&&t(vd),w($L),f&&t(cje),f&&t(Xo),w(kL),w(RL),w(d0),w(PL),w(g0),f&&t(fje),f&&t(Md),w(IL),f&&t(mje),f&&t(zo),w(NL),w(jL),w(p0),w(DL),w(M0),f&&t(gje),f&&t(wd),w(GL),f&&t(hje),f&&t(Wo),w(OL),w(XL),w(C0),w(zL),w(x0),f&&t(pje),f&&t(xd),w(WL),f&&t(_je),f&&t(Qo),w(QL),w(UL),w(k0),w(JL),w(B0),f&&t(uje),f&&t(Sd),w(KL),f&&t(bje),f&&t(Ho),w(ZL),w(o8),w(N0),w(r8),w(D0),f&&t(vje),f&&t(Bd),w(t8),f&&t(Fje),f&&t(Uo),w(a8),w(s8),w(O0),w(l8),w(H0),f&&t(Tje),f&&t(qd),w(i8),f&&t(Mje),f&&t(Jo),w(d8),w(f8),w(J0),w(m8),w(Z0),f&&t(Eje),f&&t(Gd),w(g8),f&&t(Cje),f&&t(Yo),w(h8),w(_8),w(oT),w(u8),w(HT),f&&t(wje),f&&t(Xd),w(b8),f&&t(Aje),f&&t(Ko),w(v8),w(T8),w(JT),w(M8),w(F7),f&&t(yje),f&&t(Qd),w(E8),f&&t(Lje),f&&t(Zo),w(C8),w(A8),w(M7),w(y8),w(I7),f&&t(xje),f&&t(Jd),w(L8),f&&t($je),f&&t(er),w(x8),w(k8),w(q7),w(S8),w(V7),f&&t(kje),f&&t(Zd),w(R8),f&&t(Sje),f&&t(or),w(P8),w(I8),w(z7),w(N8),w(mM),f&&t(Rje),f&&t(rc),w(q8),f&&t(Pje),f&&t(rr),w(j8),w(G8),w(hM),w(O8),w(wM),f&&t(Bje),f&&t(nc),w(V8),f&&t(Ije),f&&t(tr),w(X8),w(W8),w(yM),w(Q8),w(e4),f&&t(Nje),f&&t(ic),w(H8),f&&t(qje),f&&t(ar),w(U8),w(Y8),w(r4),w(K8),w(F4),f&&t(jje),f&&t(fc),w(Z8),f&&t(Dje),f&&t(nr),w(e9),w(r9),w(M4),w(t9),w(w4),f&&t(Gje),f&&t(hc),w(n9),f&&t(Oje),f&&t(sr),w(s9),w(i9),w(y4),w(d9),w(x4),f&&t(Vje),f&&t(uc),w(c9),f&&t(Xje),f&&t(lr),w(f9),w(g9),w(k4),w(h9),w(K4),f&&t(zje),f&&t(Fc),w(p9),f&&t(Wje),f&&t(ir),w(_9),w(b9),w(eE),w(v9),w(TE),f&&t(Qje),f&&t(Ec),w(F9),f&&t(Hje),f&&t(dr),w(T9),w(E9),w(EE),w(C9),w(wE),f&&t(Uje),f&&t(Ac),w(w9),f&&t(Jje),f&&t(cr),w(A9),w(L9),w(yE),w(x9),w(xE),f&&t(Yje),f&&t(xc),w($9),f&&t(Kje),f&&t(fr),w(k9),w(R9),w(kE),w(P9),w(aC),f&&t(Zje),f&&t(Sc),w(B9),f&&t(eDe),f&&t(mr),w(I9),w(q9),w(sC),w(j9),w(uC),f&&t(oDe),f&&t(Bc),w(D9),f&&t(rDe),f&&t(gr),w(G9),w(V9),w(vC),w(X9),w(SC),f&&t(tDe),f&&t(qc),w(z9),f&&t(aDe),f&&t(hr),w(W9),w(H9),w(PC),w(U9),w(zC),f&&t(nDe),f&&t(Gc),w(J9),f&&t(sDe),f&&t(pr),w(Y9),w(Z9),w(QC),w(ex),w(t3),f&&t(lDe),f&&t(Xc),w(ox),f&&t(iDe),f&&t(_r),w(rx),w(ax),w(n3),w(nx),w(_3),f&&t(dDe),f&&t(Qc),w(sx),f&&t(cDe),f&&t(ur),w(lx),w(dx),w(b3),w(cx),w(x3),f&&t(fDe),f&&t(Jc),w(fx),f&&t(mDe),f&&t(br),w(mx),w(hx),w(k3),w(px),w(D3),f&&t(gDe),f&&t(Zc),w(_x),f&&t(hDe),f&&t(vr),w(ux),w(vx),w(O3),w(Fx),w(Y3),f&&t(pDe),f&&t(rf),w(Tx),f&&t(_De),f&&t(Fr),w(Mx),w(Cx),w(Z3),w(wx),w(ow),f&&t(uDe),f&&t(nf),w(Ax),f&&t(bDe),f&&t(Tr),w(yx),w(xx),w(tw),w($x),w(sw),f&&t(vDe),f&&t(df),w(Sx),f&&t(FDe),f&&t(Mr),w(Rx),w(Bx),w(iw),w(Ix),w(cw)}}}const cRt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function fRt(L){return fkt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class bRt extends lkt{constructor(g){super();ikt(this,g,fRt,dRt,dkt,{})}}export{bRt as default,cRt as metadata};
