import{S as BXt,i as IXt,s as NXt,e as a,k as l,w as F,t as o,M as qXt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as jXt,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as Aot}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as re}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function DXt($){let g,v,p,m,_,d,h,Eo,wi,Sf,nt,Ai,Li,z6,Rf,Oe,Qe,yi,Rn,Q6,Pn,Bn,W6,xi,In,H6,$i,Pf,$a;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Eo=o(`, make sure its
`),wi=a("code"),Sf=o("model_type"),nt=o(" attribute is set to the same key you use when registering the config (here "),Ai=a("code"),Li=o('"new-model"'),z6=o(")."),Rf=l(),Oe=a("p"),Qe=o("Likewise, if your "),yi=a("code"),Rn=o("NewModel"),Q6=o(" is a subclass of "),Pn=a("a"),Bn=o("PreTrainedModel"),W6=o(`, make sure its
`),xi=a("code"),In=o("config_class"),H6=o(` attribute is set to the same class you use when registering the model (here
`),$i=a("code"),Pf=o("NewModelConfig"),$a=o(")."),this.h()},l(We){g=n(We,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var wS=s(p);m=r(wS,"NewModelConfig"),wS.forEach(t),_=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var ki=s(d);h=r(ki,"PretrainedConfig"),ki.forEach(t),Eo=r(Ae,`, make sure its
`),wi=n(Ae,"CODE",{});var AS=s(wi);Sf=r(AS,"model_type"),AS.forEach(t),nt=r(Ae," attribute is set to the same key you use when registering the config (here "),Ai=n(Ae,"CODE",{});var LS=s(Ai);Li=r(LS,'"new-model"'),LS.forEach(t),z6=r(Ae,")."),Ae.forEach(t),Rf=i(We),Oe=n(We,"P",{});var Co=s(Oe);Qe=r(Co,"Likewise, if your "),yi=n(Co,"CODE",{});var ka=s(yi);Rn=r(ka,"NewModel"),ka.forEach(t),Q6=r(Co," is a subclass of "),Pn=n(Co,"A",{href:!0});var yS=s(Pn);Bn=r(yS,"PreTrainedModel"),yS.forEach(t),W6=r(Co,`, make sure its
`),xi=n(Co,"CODE",{});var Bf=s(xi);In=r(Bf,"config_class"),Bf.forEach(t),H6=r(Co,` attribute is set to the same class you use when registering the model (here
`),$i=n(Co,"CODE",{});var xS=s($i);Pf=r(xS,"NewModelConfig"),xS.forEach(t),$a=r(Co,")."),Co.forEach(t),this.h()},h(){c(Pn,"href","/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel")},m(We,Ae){b(We,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,d),e(d,h),e(g,Eo),e(g,wi),e(wi,Sf),e(g,nt),e(g,Ai),e(Ai,Li),e(g,z6),b(We,Rf,Ae),b(We,Oe,Ae),e(Oe,Qe),e(Oe,yi),e(yi,Rn),e(Oe,Q6),e(Oe,Pn),e(Pn,Bn),e(Oe,W6),e(Oe,xi),e(xi,In),e(Oe,H6),e(Oe,$i),e($i,Pf),e(Oe,$a)},d(We){We&&t(g),We&&t(Rf),We&&t(Oe)}}}function GXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VXt($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Eo=s(p);m=r(Eo,"use_auth_token=True"),Eo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function XXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zXt($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Eo=s(p);m=r(Eo,"use_auth_token=True"),Eo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function QXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ezt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ozt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rzt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tzt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function azt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nzt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function szt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lzt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function izt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dzt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function czt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fzt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mzt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gzt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hzt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pzt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _zt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uzt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bzt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vzt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Fzt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Tzt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Mzt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ezt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Czt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wzt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Azt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Lzt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yzt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xzt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $zt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kzt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Szt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Rzt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Pzt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Bzt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Izt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Nzt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qzt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jzt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Dzt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gzt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ozt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vzt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Xzt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zzt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qzt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Wzt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Hzt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Uzt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jzt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Yzt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Kzt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Zzt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Qt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function AQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Qt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jQt($){let g,v,p,m,_,d,h,Eo,wi,Sf,nt,Ai,Li,z6,Rf,Oe,Qe,yi,Rn,Q6,Pn,Bn,W6,xi,In,H6,$i,Pf,$a,We,Ae,wS,ki,AS,LS,Co,ka,yS,Bf,xS,xWe,hVe,Si,If,aae,U6,$We,nae,kWe,pVe,Nn,SWe,sae,RWe,PWe,lae,BWe,IWe,_Ve,J6,uVe,$S,NWe,bVe,Nf,vVe,Ri,qf,iae,Y6,qWe,dae,jWe,FVe,wo,K6,DWe,Z6,GWe,kS,OWe,VWe,XWe,eL,zWe,cae,QWe,WWe,HWe,Ar,oL,UWe,fae,JWe,YWe,Pi,KWe,mae,ZWe,eHe,gae,oHe,rHe,tHe,A,jf,hae,aHe,nHe,SS,sHe,lHe,iHe,Df,pae,dHe,cHe,RS,fHe,mHe,gHe,Gf,_ae,hHe,pHe,PS,_He,uHe,bHe,Of,uae,vHe,FHe,BS,THe,MHe,EHe,Vf,bae,CHe,wHe,IS,AHe,LHe,yHe,Xf,vae,xHe,$He,NS,kHe,SHe,RHe,zf,Fae,PHe,BHe,qS,IHe,NHe,qHe,Qf,Tae,jHe,DHe,jS,GHe,OHe,VHe,Wf,Mae,XHe,zHe,DS,QHe,WHe,HHe,Hf,Eae,UHe,JHe,GS,YHe,KHe,ZHe,Uf,Cae,eUe,oUe,OS,rUe,tUe,aUe,Jf,wae,nUe,sUe,VS,lUe,iUe,dUe,Yf,Aae,cUe,fUe,XS,mUe,gUe,hUe,Kf,Lae,pUe,_Ue,zS,uUe,bUe,vUe,Zf,yae,FUe,TUe,QS,MUe,EUe,CUe,em,xae,wUe,AUe,WS,LUe,yUe,xUe,om,$ae,$Ue,kUe,HS,SUe,RUe,PUe,rm,kae,BUe,IUe,US,NUe,qUe,jUe,tm,Sae,DUe,GUe,JS,OUe,VUe,XUe,am,Rae,zUe,QUe,YS,WUe,HUe,UUe,nm,Pae,JUe,YUe,KS,KUe,ZUe,eJe,sm,Bae,oJe,rJe,ZS,tJe,aJe,nJe,lm,Iae,sJe,lJe,eR,iJe,dJe,cJe,im,Nae,fJe,mJe,oR,gJe,hJe,pJe,dm,qae,_Je,uJe,rR,bJe,vJe,FJe,cm,jae,TJe,MJe,tR,EJe,CJe,wJe,fm,Dae,AJe,LJe,aR,yJe,xJe,$Je,mm,Gae,kJe,SJe,nR,RJe,PJe,BJe,gm,Oae,IJe,NJe,sR,qJe,jJe,DJe,hm,Vae,GJe,OJe,lR,VJe,XJe,zJe,pm,Xae,QJe,WJe,iR,HJe,UJe,JJe,_m,zae,YJe,KJe,dR,ZJe,eYe,oYe,um,Qae,rYe,tYe,cR,aYe,nYe,sYe,bm,Wae,lYe,iYe,fR,dYe,cYe,fYe,vm,Hae,mYe,gYe,mR,hYe,pYe,_Ye,Fm,Uae,uYe,bYe,gR,vYe,FYe,TYe,Tm,Jae,MYe,EYe,hR,CYe,wYe,AYe,Mm,Yae,LYe,yYe,pR,xYe,$Ye,kYe,Em,Kae,SYe,RYe,_R,PYe,BYe,IYe,Cm,Zae,NYe,qYe,uR,jYe,DYe,GYe,wm,ene,OYe,VYe,bR,XYe,zYe,QYe,Am,one,WYe,HYe,vR,UYe,JYe,YYe,Lm,rne,KYe,ZYe,FR,eKe,oKe,rKe,ym,tne,tKe,aKe,TR,nKe,sKe,lKe,xm,ane,iKe,dKe,MR,cKe,fKe,mKe,$m,nne,gKe,hKe,ER,pKe,_Ke,uKe,km,sne,bKe,vKe,CR,FKe,TKe,MKe,Sm,lne,EKe,CKe,wR,wKe,AKe,LKe,Rm,ine,yKe,xKe,AR,$Ke,kKe,SKe,Pm,dne,RKe,PKe,LR,BKe,IKe,NKe,Bm,cne,qKe,jKe,yR,DKe,GKe,OKe,Im,fne,VKe,XKe,xR,zKe,QKe,WKe,Nm,mne,HKe,UKe,$R,JKe,YKe,KKe,qm,gne,ZKe,eZe,kR,oZe,rZe,tZe,jm,hne,aZe,nZe,SR,sZe,lZe,iZe,Dm,pne,dZe,cZe,RR,fZe,mZe,gZe,Gm,_ne,hZe,pZe,PR,_Ze,uZe,bZe,Om,une,vZe,FZe,BR,TZe,MZe,EZe,Vm,bne,CZe,wZe,IR,AZe,LZe,yZe,Xm,vne,xZe,$Ze,NR,kZe,SZe,RZe,zm,Fne,PZe,BZe,qR,IZe,NZe,qZe,Qm,Tne,jZe,DZe,jR,GZe,OZe,VZe,Wm,Mne,XZe,zZe,DR,QZe,WZe,HZe,Hm,Ene,UZe,JZe,GR,YZe,KZe,ZZe,Um,Cne,eeo,oeo,OR,reo,teo,aeo,Jm,wne,neo,seo,VR,leo,ieo,deo,Ym,Ane,ceo,feo,XR,meo,geo,heo,Km,Lne,peo,_eo,zR,ueo,beo,veo,Zm,yne,Feo,Teo,QR,Meo,Eeo,Ceo,eg,xne,weo,Aeo,WR,Leo,yeo,xeo,og,$ne,$eo,keo,HR,Seo,Reo,Peo,rg,kne,Beo,Ieo,UR,Neo,qeo,jeo,tg,Sne,Deo,Geo,JR,Oeo,Veo,Xeo,ag,Rne,zeo,Qeo,YR,Weo,Heo,Ueo,ng,Pne,Jeo,Yeo,KR,Keo,Zeo,eoo,sg,Bne,ooo,roo,ZR,too,aoo,noo,lg,Ine,soo,loo,eP,ioo,doo,coo,ig,Nne,foo,moo,oP,goo,hoo,poo,dg,qne,_oo,uoo,rP,boo,voo,Foo,cg,jne,Too,Moo,tP,Eoo,Coo,woo,fg,Dne,Aoo,Loo,aP,yoo,xoo,$oo,mg,Gne,koo,Soo,nP,Roo,Poo,Boo,gg,One,Ioo,Noo,sP,qoo,joo,Doo,hg,Vne,Goo,Ooo,lP,Voo,Xoo,zoo,pg,Xne,Qoo,Woo,iP,Hoo,Uoo,Joo,_g,zne,Yoo,Koo,dP,Zoo,ero,oro,ug,Qne,rro,tro,cP,aro,nro,sro,bg,Wne,lro,iro,fP,dro,cro,fro,vg,Hne,mro,gro,mP,hro,pro,_ro,Fg,Une,uro,bro,gP,vro,Fro,Tro,Tg,Jne,Mro,Ero,hP,Cro,wro,Aro,Mg,Yne,Lro,yro,pP,xro,$ro,kro,Eg,Kne,Sro,Rro,_P,Pro,Bro,Iro,Cg,Zne,Nro,qro,uP,jro,Dro,Gro,wg,ese,Oro,Vro,bP,Xro,zro,Qro,Ag,ose,Wro,Hro,vP,Uro,Jro,Yro,Lg,rse,Kro,Zro,FP,eto,oto,rto,yg,tse,tto,ato,TP,nto,sto,lto,xg,ase,ito,dto,MP,cto,fto,mto,$g,nse,gto,hto,EP,pto,_to,uto,kg,sse,bto,vto,CP,Fto,Tto,Mto,Sg,lse,Eto,Cto,wP,wto,Ato,Lto,Rg,ise,yto,xto,AP,$to,kto,Sto,Pg,dse,Rto,Pto,LP,Bto,Ito,Nto,Bg,cse,qto,jto,yP,Dto,Gto,Oto,Ig,fse,Vto,Xto,xP,zto,Qto,Wto,Ng,mse,Hto,Uto,$P,Jto,Yto,Kto,qg,gse,Zto,eao,kP,oao,rao,tao,jg,hse,aao,nao,SP,sao,lao,iao,Dg,pse,dao,cao,RP,fao,mao,gao,Gg,_se,hao,pao,PP,_ao,uao,bao,Og,use,vao,Fao,BP,Tao,Mao,Eao,Vg,bse,Cao,wao,IP,Aao,Lao,yao,Xg,vse,xao,$ao,NP,kao,Sao,Rao,zg,Fse,Pao,Bao,qP,Iao,Nao,qao,Qg,Tse,jao,Dao,jP,Gao,Oao,Vao,Wg,Mse,Xao,zao,DP,Qao,Wao,Hao,Hg,Uao,Ug,rL,Jao,Ese,Yao,TVe,Bi,Jg,Cse,tL,Kao,wse,Zao,MVe,Ao,aL,eno,nL,ono,GP,rno,tno,ano,sL,nno,Ase,sno,lno,ino,Lr,lL,dno,Lse,cno,fno,Sa,mno,yse,gno,hno,xse,pno,_no,$se,uno,bno,vno,k,qn,kse,Fno,Tno,OP,Mno,Eno,VP,Cno,wno,Ano,jn,Sse,Lno,yno,XP,xno,$no,zP,kno,Sno,Rno,Dn,Rse,Pno,Bno,QP,Ino,Nno,WP,qno,jno,Dno,Yg,Pse,Gno,Ono,HP,Vno,Xno,zno,Gn,Bse,Qno,Wno,UP,Hno,Uno,JP,Jno,Yno,Kno,Kg,Ise,Zno,eso,YP,oso,rso,tso,Zg,Nse,aso,nso,KP,sso,lso,iso,eh,qse,dso,cso,ZP,fso,mso,gso,On,jse,hso,pso,eB,_so,uso,oB,bso,vso,Fso,Vn,Dse,Tso,Mso,rB,Eso,Cso,tB,wso,Aso,Lso,Xn,Gse,yso,xso,aB,$so,kso,nB,Sso,Rso,Pso,oh,Ose,Bso,Iso,sB,Nso,qso,jso,rh,Vse,Dso,Gso,lB,Oso,Vso,Xso,th,Xse,zso,Qso,iB,Wso,Hso,Uso,zn,zse,Jso,Yso,dB,Kso,Zso,cB,elo,olo,rlo,ah,Qse,tlo,alo,fB,nlo,slo,llo,Qn,Wse,ilo,dlo,mB,clo,flo,gB,mlo,glo,hlo,Wn,Hse,plo,_lo,hB,ulo,blo,pB,vlo,Flo,Tlo,Hn,Use,Mlo,Elo,_B,Clo,wlo,uB,Alo,Llo,ylo,Un,Jse,xlo,$lo,bB,klo,Slo,vB,Rlo,Plo,Blo,nh,Yse,Ilo,Nlo,FB,qlo,jlo,Dlo,Jn,Kse,Glo,Olo,TB,Vlo,Xlo,MB,zlo,Qlo,Wlo,Yn,Zse,Hlo,Ulo,EB,Jlo,Ylo,CB,Klo,Zlo,eio,Kn,ele,oio,rio,wB,tio,aio,AB,nio,sio,lio,Zn,ole,iio,dio,LB,cio,fio,yB,mio,gio,hio,es,rle,pio,_io,xB,uio,bio,$B,vio,Fio,Tio,os,tle,Mio,Eio,kB,Cio,wio,SB,Aio,Lio,yio,sh,ale,xio,$io,RB,kio,Sio,Rio,rs,nle,Pio,Bio,PB,Iio,Nio,BB,qio,jio,Dio,lh,sle,Gio,Oio,IB,Vio,Xio,zio,ts,lle,Qio,Wio,NB,Hio,Uio,qB,Jio,Yio,Kio,as,ile,Zio,edo,jB,odo,rdo,DB,tdo,ado,ndo,ns,dle,sdo,ldo,GB,ido,ddo,OB,cdo,fdo,mdo,ih,cle,gdo,hdo,VB,pdo,_do,udo,ss,fle,bdo,vdo,XB,Fdo,Tdo,zB,Mdo,Edo,Cdo,ls,mle,wdo,Ado,QB,Ldo,ydo,WB,xdo,$do,kdo,is,gle,Sdo,Rdo,HB,Pdo,Bdo,UB,Ido,Ndo,qdo,dh,hle,jdo,Ddo,JB,Gdo,Odo,Vdo,ds,ple,Xdo,zdo,YB,Qdo,Wdo,KB,Hdo,Udo,Jdo,cs,_le,Ydo,Kdo,ZB,Zdo,eco,eI,oco,rco,tco,fs,ule,aco,nco,oI,sco,lco,rI,ico,dco,cco,ms,ble,fco,mco,tI,gco,hco,aI,pco,_co,uco,gs,vle,bco,vco,nI,Fco,Tco,sI,Mco,Eco,Cco,hs,Fle,wco,Aco,lI,Lco,yco,iI,xco,$co,kco,ps,Tle,Sco,Rco,dI,Pco,Bco,cI,Ico,Nco,qco,_s,Mle,jco,Dco,fI,Gco,Oco,mI,Vco,Xco,zco,ch,Ele,Qco,Wco,gI,Hco,Uco,Jco,us,Cle,Yco,Kco,hI,Zco,efo,pI,ofo,rfo,tfo,fh,wle,afo,nfo,_I,sfo,lfo,ifo,mh,Ale,dfo,cfo,uI,ffo,mfo,gfo,bs,Lle,hfo,pfo,bI,_fo,ufo,vI,bfo,vfo,Ffo,vs,yle,Tfo,Mfo,FI,Efo,Cfo,TI,wfo,Afo,Lfo,Fs,xle,yfo,xfo,MI,$fo,kfo,EI,Sfo,Rfo,Pfo,gh,$le,Bfo,Ifo,CI,Nfo,qfo,jfo,Ts,kle,Dfo,Gfo,wI,Ofo,Vfo,AI,Xfo,zfo,Qfo,Ms,Sle,Wfo,Hfo,LI,Ufo,Jfo,yI,Yfo,Kfo,Zfo,Es,Rle,emo,omo,xI,rmo,tmo,$I,amo,nmo,smo,Cs,Ple,lmo,imo,kI,dmo,cmo,SI,fmo,mmo,gmo,ws,Ble,hmo,pmo,RI,_mo,umo,PI,bmo,vmo,Fmo,As,Ile,Tmo,Mmo,BI,Emo,Cmo,II,wmo,Amo,Lmo,Ls,Nle,ymo,xmo,NI,$mo,kmo,qI,Smo,Rmo,Pmo,hh,qle,Bmo,Imo,jI,Nmo,qmo,jmo,ys,jle,Dmo,Gmo,DI,Omo,Vmo,GI,Xmo,zmo,Qmo,ph,Dle,Wmo,Hmo,OI,Umo,Jmo,Ymo,_h,Gle,Kmo,Zmo,VI,ego,ogo,rgo,uh,Ole,tgo,ago,XI,ngo,sgo,lgo,bh,Vle,igo,dgo,zI,cgo,fgo,mgo,xs,Xle,ggo,hgo,QI,pgo,_go,WI,ugo,bgo,vgo,vh,zle,Fgo,Tgo,HI,Mgo,Ego,Cgo,$s,Qle,wgo,Ago,UI,Lgo,ygo,JI,xgo,$go,kgo,ks,Wle,Sgo,Rgo,YI,Pgo,Bgo,KI,Igo,Ngo,qgo,Ss,Hle,jgo,Dgo,ZI,Ggo,Ogo,eN,Vgo,Xgo,zgo,Rs,Ule,Qgo,Wgo,oN,Hgo,Ugo,rN,Jgo,Ygo,Kgo,Ps,Jle,Zgo,eho,tN,oho,rho,aN,tho,aho,nho,Bs,Yle,sho,lho,nN,iho,dho,sN,cho,fho,mho,Fh,Kle,gho,hho,lN,pho,_ho,uho,Th,Zle,bho,vho,iN,Fho,Tho,Mho,Is,eie,Eho,Cho,dN,who,Aho,cN,Lho,yho,xho,Ns,oie,$ho,kho,fN,Sho,Rho,mN,Pho,Bho,Iho,qs,rie,Nho,qho,gN,jho,Dho,hN,Gho,Oho,Vho,Mh,tie,Xho,zho,pN,Qho,Who,Hho,Eh,aie,Uho,Jho,_N,Yho,Kho,Zho,Ch,nie,epo,opo,uN,rpo,tpo,apo,js,sie,npo,spo,bN,lpo,ipo,vN,dpo,cpo,fpo,Ds,lie,mpo,gpo,FN,hpo,ppo,TN,_po,upo,bpo,wh,iie,vpo,Fpo,MN,Tpo,Mpo,Epo,Ah,die,Cpo,wpo,EN,Apo,Lpo,ypo,Lh,cie,xpo,$po,CN,kpo,Spo,Rpo,Gs,fie,Ppo,Bpo,wN,Ipo,Npo,AN,qpo,jpo,Dpo,yh,mie,Gpo,Opo,LN,Vpo,Xpo,zpo,xh,gie,Qpo,Wpo,yN,Hpo,Upo,Jpo,Os,hie,Ypo,Kpo,xN,Zpo,e_o,$N,o_o,r_o,t_o,Vs,pie,a_o,n_o,kN,s_o,l_o,SN,i_o,d_o,c_o,Xs,_ie,f_o,m_o,RN,g_o,h_o,PN,p_o,__o,u_o,zs,uie,b_o,v_o,BN,F_o,T_o,IN,M_o,E_o,C_o,$h,w_o,kh,iL,A_o,bie,L_o,EVe,Ii,Sh,vie,dL,y_o,Fie,x_o,CVe,Lo,cL,$_o,fL,k_o,NN,S_o,R_o,P_o,mL,B_o,Tie,I_o,N_o,q_o,He,gL,j_o,Mie,D_o,G_o,Ra,O_o,Eie,V_o,X_o,Cie,z_o,Q_o,wie,W_o,H_o,U_o,Y,Rh,Aie,J_o,Y_o,qN,K_o,Z_o,euo,Ph,Lie,ouo,ruo,jN,tuo,auo,nuo,Bh,yie,suo,luo,DN,iuo,duo,cuo,Ih,xie,fuo,muo,GN,guo,huo,puo,Nh,$ie,_uo,uuo,ON,buo,vuo,Fuo,qh,kie,Tuo,Muo,VN,Euo,Cuo,wuo,jh,Sie,Auo,Luo,XN,yuo,xuo,$uo,Dh,Rie,kuo,Suo,zN,Ruo,Puo,Buo,Gh,Pie,Iuo,Nuo,QN,quo,juo,Duo,Oh,Bie,Guo,Ouo,WN,Vuo,Xuo,zuo,Vh,Iie,Quo,Wuo,HN,Huo,Uuo,Juo,Xh,Nie,Yuo,Kuo,UN,Zuo,e1o,o1o,zh,qie,r1o,t1o,JN,a1o,n1o,s1o,Qh,jie,l1o,i1o,YN,d1o,c1o,f1o,Wh,Die,m1o,g1o,KN,h1o,p1o,_1o,Hh,Gie,u1o,b1o,ZN,v1o,F1o,T1o,Uh,Oie,M1o,E1o,eq,C1o,w1o,A1o,Jh,Vie,L1o,y1o,oq,x1o,$1o,k1o,Yh,Xie,S1o,R1o,rq,P1o,B1o,I1o,Kh,zie,N1o,q1o,tq,j1o,D1o,G1o,Zh,Qie,O1o,V1o,aq,X1o,z1o,Q1o,ep,Wie,W1o,H1o,nq,U1o,J1o,Y1o,op,Hie,K1o,Z1o,sq,e2o,o2o,r2o,rp,Uie,t2o,a2o,lq,n2o,s2o,l2o,tp,Jie,i2o,d2o,iq,c2o,f2o,m2o,ap,Yie,g2o,h2o,dq,p2o,_2o,u2o,np,Kie,b2o,v2o,cq,F2o,T2o,M2o,sp,Zie,E2o,C2o,fq,w2o,A2o,L2o,lp,ede,y2o,x2o,mq,$2o,k2o,S2o,ip,ode,R2o,P2o,gq,B2o,I2o,N2o,dp,rde,q2o,j2o,hq,D2o,G2o,O2o,cp,tde,V2o,X2o,pq,z2o,Q2o,W2o,fp,ade,H2o,U2o,_q,J2o,Y2o,K2o,mp,Z2o,gp,ebo,hp,hL,obo,nde,rbo,wVe,Ni,pp,sde,pL,tbo,lde,abo,AVe,yo,_L,nbo,uL,sbo,uq,lbo,ibo,dbo,bL,cbo,ide,fbo,mbo,gbo,Ue,vL,hbo,dde,pbo,_bo,qi,ubo,cde,bbo,vbo,fde,Fbo,Tbo,Mbo,he,_p,mde,Ebo,Cbo,bq,wbo,Abo,Lbo,up,gde,ybo,xbo,hde,$bo,kbo,Sbo,bp,pde,Rbo,Pbo,vq,Bbo,Ibo,Nbo,vp,_de,qbo,jbo,Fq,Dbo,Gbo,Obo,Fp,ude,Vbo,Xbo,Tq,zbo,Qbo,Wbo,Tp,bde,Hbo,Ubo,Mq,Jbo,Ybo,Kbo,Mp,vde,Zbo,evo,Eq,ovo,rvo,tvo,Ep,Fde,avo,nvo,Cq,svo,lvo,ivo,Cp,Tde,dvo,cvo,wq,fvo,mvo,gvo,wp,Mde,hvo,pvo,Aq,_vo,uvo,bvo,Ap,Ede,vvo,Fvo,Lq,Tvo,Mvo,Evo,Lp,Cde,Cvo,wvo,yq,Avo,Lvo,yvo,yp,wde,xvo,$vo,xq,kvo,Svo,Rvo,xp,Ade,Pvo,Bvo,$q,Ivo,Nvo,qvo,$p,Lde,jvo,Dvo,kq,Gvo,Ovo,Vvo,kp,yde,Xvo,zvo,Sq,Qvo,Wvo,Hvo,Sp,xde,Uvo,Jvo,Rq,Yvo,Kvo,Zvo,Rp,$de,e3o,o3o,Pq,r3o,t3o,a3o,Pp,n3o,Bp,s3o,Ip,FL,l3o,kde,i3o,LVe,ji,Np,Sde,TL,d3o,Rde,c3o,yVe,xo,ML,f3o,Di,m3o,Bq,g3o,h3o,Iq,p3o,_3o,u3o,EL,b3o,Pde,v3o,F3o,T3o,st,CL,M3o,Bde,E3o,C3o,Gi,w3o,Ide,A3o,L3o,Nq,y3o,x3o,$3o,qp,k3o,Je,wL,S3o,Nde,R3o,P3o,Pa,B3o,qde,I3o,N3o,jde,q3o,j3o,Dde,D3o,G3o,O3o,y,jp,Gde,V3o,X3o,qq,z3o,Q3o,W3o,Dp,Ode,H3o,U3o,jq,J3o,Y3o,K3o,Gp,Vde,Z3o,e5o,Dq,o5o,r5o,t5o,Op,Xde,a5o,n5o,Gq,s5o,l5o,i5o,Vp,zde,d5o,c5o,Oq,f5o,m5o,g5o,Xp,Qde,h5o,p5o,Vq,_5o,u5o,b5o,zp,Wde,v5o,F5o,Xq,T5o,M5o,E5o,Qp,Hde,C5o,w5o,zq,A5o,L5o,y5o,Wp,Ude,x5o,$5o,Qq,k5o,S5o,R5o,Hp,Jde,P5o,B5o,Wq,I5o,N5o,q5o,Up,Yde,j5o,D5o,Hq,G5o,O5o,V5o,Jp,Kde,X5o,z5o,Uq,Q5o,W5o,H5o,Yp,Zde,U5o,J5o,Jq,Y5o,K5o,Z5o,Kp,ece,eFo,oFo,Yq,rFo,tFo,aFo,Zp,oce,nFo,sFo,Kq,lFo,iFo,dFo,e_,rce,cFo,fFo,Zq,mFo,gFo,hFo,o_,tce,pFo,_Fo,ej,uFo,bFo,vFo,r_,ace,FFo,TFo,oj,MFo,EFo,CFo,t_,nce,wFo,AFo,rj,LFo,yFo,xFo,a_,sce,$Fo,kFo,tj,SFo,RFo,PFo,n_,lce,BFo,IFo,aj,NFo,qFo,jFo,s_,ice,DFo,GFo,nj,OFo,VFo,XFo,l_,dce,zFo,QFo,sj,WFo,HFo,UFo,i_,cce,JFo,YFo,lj,KFo,ZFo,eTo,d_,fce,oTo,rTo,ij,tTo,aTo,nTo,c_,mce,sTo,lTo,dj,iTo,dTo,cTo,f_,gce,fTo,mTo,cj,gTo,hTo,pTo,m_,hce,_To,uTo,fj,bTo,vTo,FTo,g_,pce,TTo,MTo,mj,ETo,CTo,wTo,h_,_ce,ATo,LTo,gj,yTo,xTo,$To,p_,uce,kTo,STo,hj,RTo,PTo,BTo,__,bce,ITo,NTo,pj,qTo,jTo,DTo,u_,vce,GTo,OTo,_j,VTo,XTo,zTo,b_,Fce,QTo,WTo,uj,HTo,UTo,JTo,Qs,Tce,YTo,KTo,bj,ZTo,e7o,vj,o7o,r7o,t7o,v_,Mce,a7o,n7o,Fj,s7o,l7o,i7o,F_,Ece,d7o,c7o,Tj,f7o,m7o,g7o,T_,Cce,h7o,p7o,Mj,_7o,u7o,b7o,M_,wce,v7o,F7o,Ej,T7o,M7o,E7o,E_,Ace,C7o,w7o,Cj,A7o,L7o,y7o,C_,Lce,x7o,$7o,wj,k7o,S7o,R7o,w_,yce,P7o,B7o,Aj,I7o,N7o,q7o,A_,xce,j7o,D7o,Lj,G7o,O7o,V7o,L_,$ce,X7o,z7o,yj,Q7o,W7o,H7o,y_,kce,U7o,J7o,xj,Y7o,K7o,Z7o,x_,Sce,e9o,o9o,$j,r9o,t9o,a9o,$_,Rce,n9o,s9o,kj,l9o,i9o,d9o,k_,Pce,c9o,f9o,Sj,m9o,g9o,h9o,S_,Bce,p9o,_9o,Rj,u9o,b9o,v9o,R_,Ice,F9o,T9o,Pj,M9o,E9o,C9o,P_,Nce,w9o,A9o,Bj,L9o,y9o,x9o,B_,qce,$9o,k9o,Ij,S9o,R9o,P9o,I_,jce,B9o,I9o,Nj,N9o,q9o,j9o,N_,Dce,D9o,G9o,qj,O9o,V9o,X9o,q_,Gce,z9o,Q9o,jj,W9o,H9o,U9o,j_,Oce,J9o,Y9o,Dj,K9o,Z9o,eMo,D_,Vce,oMo,rMo,Gj,tMo,aMo,nMo,G_,Xce,sMo,lMo,Oj,iMo,dMo,cMo,O_,zce,fMo,mMo,Vj,gMo,hMo,pMo,V_,Qce,_Mo,uMo,Xj,bMo,vMo,FMo,X_,Wce,TMo,MMo,zj,EMo,CMo,wMo,z_,Hce,AMo,LMo,Qj,yMo,xMo,$Mo,Q_,Uce,kMo,SMo,Wj,RMo,PMo,BMo,W_,Jce,IMo,NMo,Hj,qMo,jMo,DMo,H_,Yce,GMo,OMo,Uj,VMo,XMo,zMo,U_,Kce,QMo,WMo,Jj,HMo,UMo,JMo,J_,Zce,YMo,KMo,Yj,ZMo,e4o,o4o,Y_,efe,r4o,t4o,Kj,a4o,n4o,s4o,K_,ofe,l4o,i4o,Zj,d4o,c4o,f4o,Z_,rfe,m4o,g4o,eD,h4o,p4o,_4o,eu,tfe,u4o,b4o,oD,v4o,F4o,T4o,ou,afe,M4o,E4o,rD,C4o,w4o,A4o,ru,nfe,L4o,y4o,tD,x4o,$4o,k4o,tu,sfe,S4o,R4o,aD,P4o,B4o,I4o,au,lfe,N4o,q4o,nD,j4o,D4o,G4o,nu,ife,O4o,V4o,sD,X4o,z4o,Q4o,su,dfe,W4o,H4o,lD,U4o,J4o,Y4o,lu,cfe,K4o,Z4o,iD,eEo,oEo,rEo,iu,ffe,tEo,aEo,dD,nEo,sEo,lEo,du,mfe,iEo,dEo,cD,cEo,fEo,mEo,cu,gfe,gEo,hEo,fD,pEo,_Eo,uEo,fu,hfe,bEo,vEo,mD,FEo,TEo,MEo,mu,pfe,EEo,CEo,gD,wEo,AEo,LEo,gu,_fe,yEo,xEo,hD,$Eo,kEo,SEo,hu,ufe,REo,PEo,pD,BEo,IEo,NEo,pu,bfe,qEo,jEo,_D,DEo,GEo,OEo,_u,vfe,VEo,XEo,uD,zEo,QEo,WEo,uu,Ffe,HEo,UEo,bD,JEo,YEo,KEo,bu,Tfe,ZEo,eCo,vD,oCo,rCo,tCo,vu,Mfe,aCo,nCo,FD,sCo,lCo,iCo,Fu,Efe,dCo,cCo,TD,fCo,mCo,gCo,Tu,Cfe,hCo,pCo,MD,_Co,uCo,bCo,Mu,wfe,vCo,FCo,ED,TCo,MCo,ECo,Eu,Afe,CCo,wCo,CD,ACo,LCo,yCo,Cu,Lfe,xCo,$Co,wD,kCo,SCo,RCo,wu,yfe,PCo,BCo,AD,ICo,NCo,qCo,Au,xfe,jCo,DCo,LD,GCo,OCo,VCo,Lu,$fe,XCo,zCo,yD,QCo,WCo,HCo,yu,kfe,UCo,JCo,xD,YCo,KCo,ZCo,xu,Sfe,e0o,o0o,$D,r0o,t0o,a0o,$u,Rfe,n0o,s0o,kD,l0o,i0o,d0o,ku,Pfe,c0o,f0o,SD,m0o,g0o,h0o,Su,Bfe,p0o,_0o,RD,u0o,b0o,v0o,Ru,Ife,F0o,T0o,PD,M0o,E0o,C0o,Pu,Nfe,w0o,A0o,BD,L0o,y0o,x0o,Bu,qfe,$0o,k0o,ID,S0o,R0o,P0o,Iu,jfe,B0o,I0o,ND,N0o,q0o,j0o,Nu,Dfe,D0o,G0o,qD,O0o,V0o,X0o,qu,Gfe,z0o,Q0o,jD,W0o,H0o,U0o,ju,Ofe,J0o,Y0o,DD,K0o,Z0o,ewo,Du,owo,Vfe,rwo,two,Xfe,awo,nwo,Gu,xVe,Oi,Ou,zfe,AL,swo,Qfe,lwo,$Ve,$o,LL,iwo,Vi,dwo,GD,cwo,fwo,OD,mwo,gwo,hwo,yL,pwo,Wfe,_wo,uwo,bwo,lt,xL,vwo,Hfe,Fwo,Two,Xi,Mwo,Ufe,Ewo,Cwo,VD,wwo,Awo,Lwo,Vu,ywo,Ye,$L,xwo,Jfe,$wo,kwo,Ba,Swo,Yfe,Rwo,Pwo,Kfe,Bwo,Iwo,Zfe,Nwo,qwo,jwo,G,Xu,eme,Dwo,Gwo,XD,Owo,Vwo,Xwo,zu,ome,zwo,Qwo,zD,Wwo,Hwo,Uwo,Qu,rme,Jwo,Ywo,QD,Kwo,Zwo,eAo,Wu,tme,oAo,rAo,WD,tAo,aAo,nAo,Hu,ame,sAo,lAo,HD,iAo,dAo,cAo,Uu,nme,fAo,mAo,UD,gAo,hAo,pAo,Ju,sme,_Ao,uAo,JD,bAo,vAo,FAo,Yu,lme,TAo,MAo,YD,EAo,CAo,wAo,Ku,ime,AAo,LAo,KD,yAo,xAo,$Ao,Zu,dme,kAo,SAo,ZD,RAo,PAo,BAo,e1,cme,IAo,NAo,eG,qAo,jAo,DAo,o1,fme,GAo,OAo,oG,VAo,XAo,zAo,r1,mme,QAo,WAo,rG,HAo,UAo,JAo,t1,gme,YAo,KAo,tG,ZAo,e6o,o6o,a1,hme,r6o,t6o,aG,a6o,n6o,s6o,n1,pme,l6o,i6o,nG,d6o,c6o,f6o,s1,_me,m6o,g6o,sG,h6o,p6o,_6o,l1,ume,u6o,b6o,lG,v6o,F6o,T6o,i1,bme,M6o,E6o,iG,C6o,w6o,A6o,d1,vme,L6o,y6o,dG,x6o,$6o,k6o,c1,Fme,S6o,R6o,cG,P6o,B6o,I6o,f1,Tme,N6o,q6o,fG,j6o,D6o,G6o,m1,Mme,O6o,V6o,mG,X6o,z6o,Q6o,g1,Eme,W6o,H6o,gG,U6o,J6o,Y6o,h1,Cme,K6o,Z6o,hG,eLo,oLo,rLo,p1,wme,tLo,aLo,pG,nLo,sLo,lLo,_1,Ame,iLo,dLo,_G,cLo,fLo,mLo,u1,Lme,gLo,hLo,uG,pLo,_Lo,uLo,b1,yme,bLo,vLo,bG,FLo,TLo,MLo,v1,xme,ELo,CLo,vG,wLo,ALo,LLo,F1,$me,yLo,xLo,FG,$Lo,kLo,SLo,T1,kme,RLo,PLo,TG,BLo,ILo,NLo,M1,Sme,qLo,jLo,MG,DLo,GLo,OLo,E1,Rme,VLo,XLo,EG,zLo,QLo,WLo,C1,Pme,HLo,ULo,CG,JLo,YLo,KLo,w1,Bme,ZLo,eyo,wG,oyo,ryo,tyo,A1,Ime,ayo,nyo,AG,syo,lyo,iyo,L1,Nme,dyo,cyo,LG,fyo,myo,gyo,y1,qme,hyo,pyo,yG,_yo,uyo,byo,x1,jme,vyo,Fyo,xG,Tyo,Myo,Eyo,$1,Dme,Cyo,wyo,$G,Ayo,Lyo,yyo,k1,Gme,xyo,$yo,kG,kyo,Syo,Ryo,S1,Ome,Pyo,Byo,SG,Iyo,Nyo,qyo,R1,Vme,jyo,Dyo,RG,Gyo,Oyo,Vyo,P1,Xme,Xyo,zyo,PG,Qyo,Wyo,Hyo,B1,Uyo,zme,Jyo,Yyo,Qme,Kyo,Zyo,I1,kVe,zi,N1,Wme,kL,e8o,Hme,o8o,SVe,ko,SL,r8o,Qi,t8o,BG,a8o,n8o,IG,s8o,l8o,i8o,RL,d8o,Ume,c8o,f8o,m8o,it,PL,g8o,Jme,h8o,p8o,Wi,_8o,Yme,u8o,b8o,NG,v8o,F8o,T8o,q1,M8o,Ke,BL,E8o,Kme,C8o,w8o,Ia,A8o,Zme,L8o,y8o,ege,x8o,$8o,oge,k8o,S8o,R8o,z,j1,rge,P8o,B8o,qG,I8o,N8o,q8o,D1,tge,j8o,D8o,jG,G8o,O8o,V8o,G1,age,X8o,z8o,DG,Q8o,W8o,H8o,O1,nge,U8o,J8o,GG,Y8o,K8o,Z8o,V1,sge,exo,oxo,OG,rxo,txo,axo,X1,lge,nxo,sxo,VG,lxo,ixo,dxo,z1,ige,cxo,fxo,XG,mxo,gxo,hxo,Q1,dge,pxo,_xo,zG,uxo,bxo,vxo,W1,cge,Fxo,Txo,QG,Mxo,Exo,Cxo,H1,fge,wxo,Axo,WG,Lxo,yxo,xxo,U1,mge,$xo,kxo,HG,Sxo,Rxo,Pxo,J1,gge,Bxo,Ixo,UG,Nxo,qxo,jxo,Y1,hge,Dxo,Gxo,JG,Oxo,Vxo,Xxo,K1,pge,zxo,Qxo,YG,Wxo,Hxo,Uxo,Z1,_ge,Jxo,Yxo,KG,Kxo,Zxo,e$o,e2,uge,o$o,r$o,ZG,t$o,a$o,n$o,o2,bge,s$o,l$o,eO,i$o,d$o,c$o,r2,vge,f$o,m$o,oO,g$o,h$o,p$o,t2,Fge,_$o,u$o,rO,b$o,v$o,F$o,a2,Tge,T$o,M$o,tO,E$o,C$o,w$o,n2,Mge,A$o,L$o,aO,y$o,x$o,$$o,s2,Ege,k$o,S$o,nO,R$o,P$o,B$o,l2,Cge,I$o,N$o,sO,q$o,j$o,D$o,i2,wge,G$o,O$o,lO,V$o,X$o,z$o,d2,Age,Q$o,W$o,iO,H$o,U$o,J$o,c2,Lge,Y$o,K$o,dO,Z$o,eko,oko,f2,yge,rko,tko,cO,ako,nko,sko,m2,xge,lko,iko,fO,dko,cko,fko,g2,$ge,mko,gko,mO,hko,pko,_ko,h2,kge,uko,bko,gO,vko,Fko,Tko,p2,Sge,Mko,Eko,hO,Cko,wko,Ako,_2,Rge,Lko,yko,pO,xko,$ko,kko,u2,Pge,Sko,Rko,_O,Pko,Bko,Iko,b2,Bge,Nko,qko,uO,jko,Dko,Gko,v2,Ige,Oko,Vko,bO,Xko,zko,Qko,F2,Nge,Wko,Hko,vO,Uko,Jko,Yko,T2,qge,Kko,Zko,FO,eSo,oSo,rSo,M2,jge,tSo,aSo,TO,nSo,sSo,lSo,E2,Dge,iSo,dSo,MO,cSo,fSo,mSo,C2,Gge,gSo,hSo,EO,pSo,_So,uSo,w2,bSo,Oge,vSo,FSo,Vge,TSo,MSo,A2,RVe,Hi,L2,Xge,IL,ESo,zge,CSo,PVe,So,NL,wSo,Ui,ASo,CO,LSo,ySo,wO,xSo,$So,kSo,qL,SSo,Qge,RSo,PSo,BSo,dt,jL,ISo,Wge,NSo,qSo,Ji,jSo,Hge,DSo,GSo,AO,OSo,VSo,XSo,y2,zSo,Ze,DL,QSo,Uge,WSo,HSo,Na,USo,Jge,JSo,YSo,Yge,KSo,ZSo,Kge,eRo,oRo,rRo,W,x2,Zge,tRo,aRo,LO,nRo,sRo,lRo,$2,ehe,iRo,dRo,yO,cRo,fRo,mRo,k2,ohe,gRo,hRo,xO,pRo,_Ro,uRo,S2,rhe,bRo,vRo,$O,FRo,TRo,MRo,R2,the,ERo,CRo,kO,wRo,ARo,LRo,P2,ahe,yRo,xRo,SO,$Ro,kRo,SRo,B2,nhe,RRo,PRo,RO,BRo,IRo,NRo,I2,she,qRo,jRo,PO,DRo,GRo,ORo,N2,lhe,VRo,XRo,BO,zRo,QRo,WRo,q2,ihe,HRo,URo,IO,JRo,YRo,KRo,j2,dhe,ZRo,ePo,NO,oPo,rPo,tPo,D2,che,aPo,nPo,qO,sPo,lPo,iPo,G2,fhe,dPo,cPo,jO,fPo,mPo,gPo,O2,mhe,hPo,pPo,DO,_Po,uPo,bPo,V2,ghe,vPo,FPo,GO,TPo,MPo,EPo,X2,hhe,CPo,wPo,OO,APo,LPo,yPo,z2,phe,xPo,$Po,VO,kPo,SPo,RPo,Q2,_he,PPo,BPo,XO,IPo,NPo,qPo,W2,uhe,jPo,DPo,zO,GPo,OPo,VPo,H2,bhe,XPo,zPo,QO,QPo,WPo,HPo,U2,vhe,UPo,JPo,WO,YPo,KPo,ZPo,J2,Fhe,eBo,oBo,HO,rBo,tBo,aBo,Y2,The,nBo,sBo,UO,lBo,iBo,dBo,K2,Mhe,cBo,fBo,JO,mBo,gBo,hBo,Z2,Ehe,pBo,_Bo,YO,uBo,bBo,vBo,eb,Che,FBo,TBo,KO,MBo,EBo,CBo,ob,whe,wBo,ABo,ZO,LBo,yBo,xBo,rb,Ahe,$Bo,kBo,eV,SBo,RBo,PBo,tb,Lhe,BBo,IBo,oV,NBo,qBo,jBo,ab,yhe,DBo,GBo,rV,OBo,VBo,XBo,nb,xhe,zBo,QBo,tV,WBo,HBo,UBo,sb,$he,JBo,YBo,aV,KBo,ZBo,eIo,lb,khe,oIo,rIo,nV,tIo,aIo,nIo,ib,She,sIo,lIo,Rhe,iIo,dIo,cIo,db,Phe,fIo,mIo,sV,gIo,hIo,pIo,cb,Bhe,_Io,uIo,lV,bIo,vIo,FIo,fb,Ihe,TIo,MIo,iV,EIo,CIo,wIo,mb,Nhe,AIo,LIo,dV,yIo,xIo,$Io,gb,kIo,qhe,SIo,RIo,jhe,PIo,BIo,hb,BVe,Yi,pb,Dhe,GL,IIo,Ghe,NIo,IVe,Ro,OL,qIo,Ki,jIo,cV,DIo,GIo,fV,OIo,VIo,XIo,VL,zIo,Ohe,QIo,WIo,HIo,ct,XL,UIo,Vhe,JIo,YIo,Zi,KIo,Xhe,ZIo,eNo,mV,oNo,rNo,tNo,_b,aNo,eo,zL,nNo,zhe,sNo,lNo,qa,iNo,Qhe,dNo,cNo,Whe,fNo,mNo,Hhe,gNo,hNo,pNo,pe,ub,Uhe,_No,uNo,gV,bNo,vNo,FNo,bb,Jhe,TNo,MNo,hV,ENo,CNo,wNo,vb,Yhe,ANo,LNo,pV,yNo,xNo,$No,Fb,Khe,kNo,SNo,_V,RNo,PNo,BNo,Tb,Zhe,INo,NNo,uV,qNo,jNo,DNo,Mb,epe,GNo,ONo,bV,VNo,XNo,zNo,Eb,ope,QNo,WNo,vV,HNo,UNo,JNo,Cb,rpe,YNo,KNo,FV,ZNo,eqo,oqo,wb,tpe,rqo,tqo,TV,aqo,nqo,sqo,Ab,ape,lqo,iqo,MV,dqo,cqo,fqo,Lb,npe,mqo,gqo,EV,hqo,pqo,_qo,yb,spe,uqo,bqo,CV,vqo,Fqo,Tqo,xb,lpe,Mqo,Eqo,wV,Cqo,wqo,Aqo,$b,ipe,Lqo,yqo,AV,xqo,$qo,kqo,kb,dpe,Sqo,Rqo,LV,Pqo,Bqo,Iqo,Sb,cpe,Nqo,qqo,yV,jqo,Dqo,Gqo,Rb,fpe,Oqo,Vqo,xV,Xqo,zqo,Qqo,Pb,mpe,Wqo,Hqo,$V,Uqo,Jqo,Yqo,Bb,Kqo,gpe,Zqo,ejo,hpe,ojo,rjo,Ib,NVe,ed,Nb,ppe,QL,tjo,_pe,ajo,qVe,Po,WL,njo,od,sjo,kV,ljo,ijo,SV,djo,cjo,fjo,HL,mjo,upe,gjo,hjo,pjo,ft,UL,_jo,bpe,ujo,bjo,rd,vjo,vpe,Fjo,Tjo,RV,Mjo,Ejo,Cjo,qb,wjo,oo,JL,Ajo,Fpe,Ljo,yjo,ja,xjo,Tpe,$jo,kjo,Mpe,Sjo,Rjo,Epe,Pjo,Bjo,Ijo,N,jb,Cpe,Njo,qjo,PV,jjo,Djo,Gjo,Db,wpe,Ojo,Vjo,BV,Xjo,zjo,Qjo,Gb,Ape,Wjo,Hjo,IV,Ujo,Jjo,Yjo,Ob,Lpe,Kjo,Zjo,NV,eDo,oDo,rDo,Vb,ype,tDo,aDo,qV,nDo,sDo,lDo,Xb,xpe,iDo,dDo,jV,cDo,fDo,mDo,zb,$pe,gDo,hDo,DV,pDo,_Do,uDo,Qb,kpe,bDo,vDo,GV,FDo,TDo,MDo,Wb,Spe,EDo,CDo,OV,wDo,ADo,LDo,Hb,Rpe,yDo,xDo,VV,$Do,kDo,SDo,Ub,Ppe,RDo,PDo,XV,BDo,IDo,NDo,Jb,Bpe,qDo,jDo,zV,DDo,GDo,ODo,Yb,Ipe,VDo,XDo,QV,zDo,QDo,WDo,Kb,Npe,HDo,UDo,WV,JDo,YDo,KDo,Zb,qpe,ZDo,eGo,HV,oGo,rGo,tGo,ev,jpe,aGo,nGo,UV,sGo,lGo,iGo,ov,Dpe,dGo,cGo,JV,fGo,mGo,gGo,rv,Gpe,hGo,pGo,YV,_Go,uGo,bGo,tv,Ope,vGo,FGo,KV,TGo,MGo,EGo,av,Vpe,CGo,wGo,ZV,AGo,LGo,yGo,nv,Xpe,xGo,$Go,eX,kGo,SGo,RGo,sv,zpe,PGo,BGo,oX,IGo,NGo,qGo,lv,Qpe,jGo,DGo,rX,GGo,OGo,VGo,iv,Wpe,XGo,zGo,tX,QGo,WGo,HGo,dv,Hpe,UGo,JGo,aX,YGo,KGo,ZGo,cv,Upe,eOo,oOo,nX,rOo,tOo,aOo,fv,Jpe,nOo,sOo,sX,lOo,iOo,dOo,mv,Ype,cOo,fOo,lX,mOo,gOo,hOo,gv,Kpe,pOo,_Oo,iX,uOo,bOo,vOo,hv,Zpe,FOo,TOo,dX,MOo,EOo,COo,pv,e_e,wOo,AOo,cX,LOo,yOo,xOo,_v,o_e,$Oo,kOo,fX,SOo,ROo,POo,uv,r_e,BOo,IOo,mX,NOo,qOo,jOo,bv,t_e,DOo,GOo,gX,OOo,VOo,XOo,vv,a_e,zOo,QOo,hX,WOo,HOo,UOo,Fv,n_e,JOo,YOo,pX,KOo,ZOo,eVo,Tv,s_e,oVo,rVo,_X,tVo,aVo,nVo,Mv,l_e,sVo,lVo,uX,iVo,dVo,cVo,Ev,i_e,fVo,mVo,bX,gVo,hVo,pVo,Cv,d_e,_Vo,uVo,vX,bVo,vVo,FVo,wv,c_e,TVo,MVo,FX,EVo,CVo,wVo,Av,f_e,AVo,LVo,TX,yVo,xVo,$Vo,Lv,m_e,kVo,SVo,MX,RVo,PVo,BVo,yv,g_e,IVo,NVo,EX,qVo,jVo,DVo,xv,h_e,GVo,OVo,CX,VVo,XVo,zVo,$v,p_e,QVo,WVo,wX,HVo,UVo,JVo,kv,__e,YVo,KVo,AX,ZVo,eXo,oXo,Sv,u_e,rXo,tXo,LX,aXo,nXo,sXo,Rv,b_e,lXo,iXo,yX,dXo,cXo,fXo,Pv,v_e,mXo,gXo,xX,hXo,pXo,_Xo,Bv,uXo,F_e,bXo,vXo,T_e,FXo,TXo,Iv,jVe,td,Nv,M_e,YL,MXo,E_e,EXo,DVe,Bo,KL,CXo,ad,wXo,$X,AXo,LXo,kX,yXo,xXo,$Xo,ZL,kXo,C_e,SXo,RXo,PXo,mt,ey,BXo,w_e,IXo,NXo,nd,qXo,A_e,jXo,DXo,SX,GXo,OXo,VXo,qv,XXo,ro,oy,zXo,L_e,QXo,WXo,Da,HXo,y_e,UXo,JXo,x_e,YXo,KXo,$_e,ZXo,ezo,ozo,Z,jv,k_e,rzo,tzo,RX,azo,nzo,szo,Dv,S_e,lzo,izo,PX,dzo,czo,fzo,Gv,R_e,mzo,gzo,BX,hzo,pzo,_zo,Ov,P_e,uzo,bzo,IX,vzo,Fzo,Tzo,Vv,B_e,Mzo,Ezo,NX,Czo,wzo,Azo,Xv,I_e,Lzo,yzo,qX,xzo,$zo,kzo,zv,N_e,Szo,Rzo,jX,Pzo,Bzo,Izo,Qv,q_e,Nzo,qzo,DX,jzo,Dzo,Gzo,Wv,j_e,Ozo,Vzo,GX,Xzo,zzo,Qzo,Hv,D_e,Wzo,Hzo,OX,Uzo,Jzo,Yzo,Uv,G_e,Kzo,Zzo,VX,eQo,oQo,rQo,Jv,O_e,tQo,aQo,XX,nQo,sQo,lQo,Yv,V_e,iQo,dQo,zX,cQo,fQo,mQo,Kv,X_e,gQo,hQo,QX,pQo,_Qo,uQo,Zv,z_e,bQo,vQo,WX,FQo,TQo,MQo,e3,Q_e,EQo,CQo,HX,wQo,AQo,LQo,o3,W_e,yQo,xQo,UX,$Qo,kQo,SQo,r3,H_e,RQo,PQo,JX,BQo,IQo,NQo,t3,U_e,qQo,jQo,YX,DQo,GQo,OQo,a3,J_e,VQo,XQo,KX,zQo,QQo,WQo,n3,Y_e,HQo,UQo,ZX,JQo,YQo,KQo,s3,K_e,ZQo,eWo,ez,oWo,rWo,tWo,l3,Z_e,aWo,nWo,oz,sWo,lWo,iWo,i3,eue,dWo,cWo,rz,fWo,mWo,gWo,d3,oue,hWo,pWo,tz,_Wo,uWo,bWo,c3,rue,vWo,FWo,az,TWo,MWo,EWo,f3,tue,CWo,wWo,nz,AWo,LWo,yWo,m3,aue,xWo,$Wo,sz,kWo,SWo,RWo,g3,nue,PWo,BWo,lz,IWo,NWo,qWo,h3,sue,jWo,DWo,iz,GWo,OWo,VWo,p3,XWo,lue,zWo,QWo,iue,WWo,HWo,_3,GVe,sd,u3,due,ry,UWo,cue,JWo,OVe,Io,ty,YWo,ld,KWo,dz,ZWo,eHo,cz,oHo,rHo,tHo,ay,aHo,fue,nHo,sHo,lHo,gt,ny,iHo,mue,dHo,cHo,id,fHo,gue,mHo,gHo,fz,hHo,pHo,_Ho,b3,uHo,to,sy,bHo,hue,vHo,FHo,Ga,THo,pue,MHo,EHo,_ue,CHo,wHo,uue,AHo,LHo,yHo,No,v3,bue,xHo,$Ho,mz,kHo,SHo,RHo,F3,vue,PHo,BHo,gz,IHo,NHo,qHo,T3,Fue,jHo,DHo,hz,GHo,OHo,VHo,M3,Tue,XHo,zHo,pz,QHo,WHo,HHo,E3,Mue,UHo,JHo,_z,YHo,KHo,ZHo,C3,Eue,eUo,oUo,uz,rUo,tUo,aUo,w3,nUo,Cue,sUo,lUo,wue,iUo,dUo,A3,VVe,dd,L3,Aue,ly,cUo,Lue,fUo,XVe,qo,iy,mUo,cd,gUo,bz,hUo,pUo,vz,_Uo,uUo,bUo,dy,vUo,yue,FUo,TUo,MUo,ht,cy,EUo,xue,CUo,wUo,fd,AUo,$ue,LUo,yUo,Fz,xUo,$Uo,kUo,y3,SUo,ao,fy,RUo,kue,PUo,BUo,Oa,IUo,Sue,NUo,qUo,Rue,jUo,DUo,Pue,GUo,OUo,VUo,U,x3,Bue,XUo,zUo,Tz,QUo,WUo,HUo,$3,Iue,UUo,JUo,Mz,YUo,KUo,ZUo,k3,Nue,eJo,oJo,Ez,rJo,tJo,aJo,S3,que,nJo,sJo,Cz,lJo,iJo,dJo,R3,jue,cJo,fJo,wz,mJo,gJo,hJo,P3,Due,pJo,_Jo,Az,uJo,bJo,vJo,B3,Gue,FJo,TJo,Lz,MJo,EJo,CJo,I3,Oue,wJo,AJo,yz,LJo,yJo,xJo,N3,Vue,$Jo,kJo,xz,SJo,RJo,PJo,q3,Xue,BJo,IJo,$z,NJo,qJo,jJo,j3,zue,DJo,GJo,kz,OJo,VJo,XJo,D3,Que,zJo,QJo,Sz,WJo,HJo,UJo,G3,Wue,JJo,YJo,Rz,KJo,ZJo,eYo,O3,Hue,oYo,rYo,Pz,tYo,aYo,nYo,V3,Uue,sYo,lYo,Bz,iYo,dYo,cYo,X3,Jue,fYo,mYo,Iz,gYo,hYo,pYo,z3,Yue,_Yo,uYo,Nz,bYo,vYo,FYo,Q3,Kue,TYo,MYo,qz,EYo,CYo,wYo,W3,Zue,AYo,LYo,jz,yYo,xYo,$Yo,H3,e1e,kYo,SYo,Dz,RYo,PYo,BYo,U3,o1e,IYo,NYo,Gz,qYo,jYo,DYo,J3,r1e,GYo,OYo,Oz,VYo,XYo,zYo,Y3,t1e,QYo,WYo,Vz,HYo,UYo,JYo,K3,a1e,YYo,KYo,Xz,ZYo,eKo,oKo,Z3,n1e,rKo,tKo,zz,aKo,nKo,sKo,e5,s1e,lKo,iKo,Qz,dKo,cKo,fKo,o5,l1e,mKo,gKo,Wz,hKo,pKo,_Ko,r5,i1e,uKo,bKo,Hz,vKo,FKo,TKo,t5,d1e,MKo,EKo,Uz,CKo,wKo,AKo,a5,c1e,LKo,yKo,Jz,xKo,$Ko,kKo,n5,f1e,SKo,RKo,Yz,PKo,BKo,IKo,s5,m1e,NKo,qKo,Kz,jKo,DKo,GKo,l5,g1e,OKo,VKo,Zz,XKo,zKo,QKo,i5,h1e,WKo,HKo,eQ,UKo,JKo,YKo,d5,p1e,KKo,ZKo,oQ,eZo,oZo,rZo,c5,_1e,tZo,aZo,rQ,nZo,sZo,lZo,f5,iZo,u1e,dZo,cZo,b1e,fZo,mZo,m5,zVe,md,g5,v1e,my,gZo,F1e,hZo,QVe,jo,gy,pZo,gd,_Zo,tQ,uZo,bZo,aQ,vZo,FZo,TZo,hy,MZo,T1e,EZo,CZo,wZo,pt,py,AZo,M1e,LZo,yZo,hd,xZo,E1e,$Zo,kZo,nQ,SZo,RZo,PZo,h5,BZo,no,_y,IZo,C1e,NZo,qZo,Va,jZo,w1e,DZo,GZo,A1e,OZo,VZo,L1e,XZo,zZo,QZo,V,p5,y1e,WZo,HZo,sQ,UZo,JZo,YZo,_5,x1e,KZo,ZZo,lQ,eer,oer,rer,u5,$1e,ter,aer,iQ,ner,ser,ler,b5,k1e,ier,der,dQ,cer,fer,mer,v5,S1e,ger,her,cQ,per,_er,uer,F5,R1e,ber,ver,fQ,Fer,Ter,Mer,T5,P1e,Eer,Cer,mQ,wer,Aer,Ler,M5,B1e,yer,xer,gQ,$er,ker,Ser,E5,I1e,Rer,Per,hQ,Ber,Ier,Ner,C5,N1e,qer,jer,pQ,Der,Ger,Oer,w5,q1e,Ver,Xer,_Q,zer,Qer,Wer,A5,j1e,Her,Uer,uQ,Jer,Yer,Ker,L5,D1e,Zer,eor,bQ,oor,ror,tor,y5,G1e,aor,nor,vQ,sor,lor,ior,x5,O1e,dor,cor,FQ,mor,gor,hor,$5,V1e,por,_or,TQ,uor,bor,vor,k5,X1e,For,Tor,MQ,Mor,Eor,Cor,S5,z1e,wor,Aor,EQ,Lor,yor,xor,R5,Q1e,$or,kor,CQ,Sor,Ror,Por,P5,W1e,Bor,Ior,wQ,Nor,qor,jor,B5,H1e,Dor,Gor,AQ,Oor,Vor,Xor,I5,U1e,zor,Qor,LQ,Wor,Hor,Uor,N5,J1e,Jor,Yor,yQ,Kor,Zor,err,q5,Y1e,orr,rrr,xQ,trr,arr,nrr,j5,K1e,srr,lrr,$Q,irr,drr,crr,D5,Z1e,frr,mrr,kQ,grr,hrr,prr,G5,e2e,_rr,urr,SQ,brr,vrr,Frr,O5,o2e,Trr,Mrr,RQ,Err,Crr,wrr,V5,r2e,Arr,Lrr,PQ,yrr,xrr,$rr,X5,t2e,krr,Srr,BQ,Rrr,Prr,Brr,z5,a2e,Irr,Nrr,IQ,qrr,jrr,Drr,Q5,n2e,Grr,Orr,NQ,Vrr,Xrr,zrr,W5,s2e,Qrr,Wrr,qQ,Hrr,Urr,Jrr,H5,l2e,Yrr,Krr,jQ,Zrr,etr,otr,U5,i2e,rtr,ttr,DQ,atr,ntr,str,J5,d2e,ltr,itr,GQ,dtr,ctr,ftr,Y5,c2e,mtr,gtr,OQ,htr,ptr,_tr,K5,f2e,utr,btr,VQ,vtr,Ftr,Ttr,Z5,m2e,Mtr,Etr,XQ,Ctr,wtr,Atr,eF,g2e,Ltr,ytr,zQ,xtr,$tr,ktr,oF,h2e,Str,Rtr,QQ,Ptr,Btr,Itr,rF,p2e,Ntr,qtr,WQ,jtr,Dtr,Gtr,tF,Otr,_2e,Vtr,Xtr,u2e,ztr,Qtr,aF,WVe,pd,nF,b2e,uy,Wtr,v2e,Htr,HVe,Do,by,Utr,_d,Jtr,HQ,Ytr,Ktr,UQ,Ztr,ear,oar,vy,rar,F2e,tar,aar,nar,_t,Fy,sar,T2e,lar,iar,ud,dar,M2e,car,far,JQ,mar,gar,har,sF,par,so,Ty,_ar,E2e,uar,bar,Xa,Far,C2e,Tar,Mar,w2e,Ear,Car,A2e,war,Aar,Lar,L2e,lF,y2e,yar,xar,YQ,$ar,kar,Sar,iF,Rar,x2e,Par,Bar,$2e,Iar,Nar,dF,UVe,bd,cF,k2e,My,qar,S2e,jar,JVe,Go,Ey,Dar,vd,Gar,KQ,Oar,Var,ZQ,Xar,zar,Qar,Cy,War,R2e,Har,Uar,Jar,ut,wy,Yar,P2e,Kar,Zar,Fd,enr,B2e,onr,rnr,eW,tnr,anr,nnr,fF,snr,lo,Ay,lnr,I2e,inr,dnr,za,cnr,N2e,fnr,mnr,q2e,gnr,hnr,j2e,pnr,_nr,unr,Fe,mF,D2e,bnr,vnr,oW,Fnr,Tnr,Mnr,gF,G2e,Enr,Cnr,rW,wnr,Anr,Lnr,hF,O2e,ynr,xnr,tW,$nr,knr,Snr,pF,V2e,Rnr,Pnr,aW,Bnr,Inr,Nnr,Ws,X2e,qnr,jnr,nW,Dnr,Gnr,sW,Onr,Vnr,Xnr,_F,z2e,znr,Qnr,lW,Wnr,Hnr,Unr,Hs,Q2e,Jnr,Ynr,iW,Knr,Znr,dW,esr,osr,rsr,bt,W2e,tsr,asr,cW,nsr,ssr,fW,lsr,isr,mW,dsr,csr,fsr,uF,H2e,msr,gsr,gW,hsr,psr,_sr,bF,U2e,usr,bsr,hW,vsr,Fsr,Tsr,vF,J2e,Msr,Esr,pW,Csr,wsr,Asr,FF,Y2e,Lsr,ysr,_W,xsr,$sr,ksr,TF,K2e,Ssr,Rsr,uW,Psr,Bsr,Isr,MF,Z2e,Nsr,qsr,bW,jsr,Dsr,Gsr,EF,ebe,Osr,Vsr,vW,Xsr,zsr,Qsr,CF,Wsr,obe,Hsr,Usr,rbe,Jsr,Ysr,wF,YVe,Td,AF,tbe,Ly,Ksr,abe,Zsr,KVe,Oo,yy,elr,Md,olr,FW,rlr,tlr,TW,alr,nlr,slr,xy,llr,nbe,ilr,dlr,clr,vt,$y,flr,sbe,mlr,glr,Ed,hlr,lbe,plr,_lr,MW,ulr,blr,vlr,LF,Flr,io,ky,Tlr,ibe,Mlr,Elr,Qa,Clr,dbe,wlr,Alr,cbe,Llr,ylr,fbe,xlr,$lr,klr,mbe,yF,gbe,Slr,Rlr,EW,Plr,Blr,Ilr,xF,Nlr,hbe,qlr,jlr,pbe,Dlr,Glr,$F,ZVe,Cd,kF,_be,Sy,Olr,ube,Vlr,eXe,Vo,Ry,Xlr,wd,zlr,CW,Qlr,Wlr,wW,Hlr,Ulr,Jlr,Py,Ylr,bbe,Klr,Zlr,eir,Ft,By,oir,vbe,rir,tir,Ad,air,Fbe,nir,sir,AW,lir,iir,dir,SF,cir,co,Iy,fir,Tbe,mir,gir,Wa,hir,Mbe,pir,_ir,Ebe,uir,bir,Cbe,vir,Fir,Tir,wbe,RF,Abe,Mir,Eir,LW,Cir,wir,Air,PF,Lir,Lbe,yir,xir,ybe,$ir,kir,BF,oXe,Ld,IF,xbe,Ny,Sir,$be,Rir,rXe,Xo,qy,Pir,yd,Bir,yW,Iir,Nir,xW,qir,jir,Dir,jy,Gir,kbe,Oir,Vir,Xir,Tt,Dy,zir,Sbe,Qir,Wir,xd,Hir,Rbe,Uir,Jir,$W,Yir,Kir,Zir,NF,edr,fo,Gy,odr,Pbe,rdr,tdr,Ha,adr,Bbe,ndr,sdr,Ibe,ldr,idr,Nbe,ddr,cdr,fdr,Pe,qF,qbe,mdr,gdr,kW,hdr,pdr,_dr,jF,jbe,udr,bdr,SW,vdr,Fdr,Tdr,DF,Dbe,Mdr,Edr,RW,Cdr,wdr,Adr,GF,Gbe,Ldr,ydr,PW,xdr,$dr,kdr,OF,Obe,Sdr,Rdr,BW,Pdr,Bdr,Idr,VF,Vbe,Ndr,qdr,IW,jdr,Ddr,Gdr,XF,Xbe,Odr,Vdr,NW,Xdr,zdr,Qdr,zF,zbe,Wdr,Hdr,qW,Udr,Jdr,Ydr,QF,Qbe,Kdr,Zdr,jW,ecr,ocr,rcr,WF,tcr,Wbe,acr,ncr,Hbe,scr,lcr,HF,tXe,$d,UF,Ube,Oy,icr,Jbe,dcr,aXe,zo,Vy,ccr,kd,fcr,DW,mcr,gcr,GW,hcr,pcr,_cr,Xy,ucr,Ybe,bcr,vcr,Fcr,Mt,zy,Tcr,Kbe,Mcr,Ecr,Sd,Ccr,Zbe,wcr,Acr,OW,Lcr,ycr,xcr,JF,$cr,mo,Qy,kcr,eve,Scr,Rcr,Ua,Pcr,ove,Bcr,Icr,rve,Ncr,qcr,tve,jcr,Dcr,Gcr,et,YF,ave,Ocr,Vcr,VW,Xcr,zcr,Qcr,KF,nve,Wcr,Hcr,XW,Ucr,Jcr,Ycr,ZF,sve,Kcr,Zcr,zW,efr,ofr,rfr,eT,lve,tfr,afr,QW,nfr,sfr,lfr,oT,ive,ifr,dfr,WW,cfr,ffr,mfr,rT,gfr,dve,hfr,pfr,cve,_fr,ufr,tT,nXe,Rd,aT,fve,Wy,bfr,mve,vfr,sXe,Qo,Hy,Ffr,Pd,Tfr,HW,Mfr,Efr,UW,Cfr,wfr,Afr,Uy,Lfr,gve,yfr,xfr,$fr,Et,Jy,kfr,hve,Sfr,Rfr,Bd,Pfr,pve,Bfr,Ifr,JW,Nfr,qfr,jfr,nT,Dfr,go,Yy,Gfr,_ve,Ofr,Vfr,Ja,Xfr,uve,zfr,Qfr,bve,Wfr,Hfr,vve,Ufr,Jfr,Yfr,Le,sT,Fve,Kfr,Zfr,YW,emr,omr,rmr,lT,Tve,tmr,amr,KW,nmr,smr,lmr,iT,Mve,imr,dmr,ZW,cmr,fmr,mmr,dT,Eve,gmr,hmr,eH,pmr,_mr,umr,cT,Cve,bmr,vmr,oH,Fmr,Tmr,Mmr,fT,wve,Emr,Cmr,rH,wmr,Amr,Lmr,mT,Ave,ymr,xmr,tH,$mr,kmr,Smr,gT,Lve,Rmr,Pmr,aH,Bmr,Imr,Nmr,hT,yve,qmr,jmr,nH,Dmr,Gmr,Omr,pT,xve,Vmr,Xmr,sH,zmr,Qmr,Wmr,_T,Hmr,$ve,Umr,Jmr,kve,Ymr,Kmr,uT,lXe,Id,bT,Sve,Ky,Zmr,Rve,egr,iXe,Wo,Zy,ogr,Nd,rgr,lH,tgr,agr,iH,ngr,sgr,lgr,e8,igr,Pve,dgr,cgr,fgr,Ct,o8,mgr,Bve,ggr,hgr,qd,pgr,Ive,_gr,ugr,dH,bgr,vgr,Fgr,vT,Tgr,ho,r8,Mgr,Nve,Egr,Cgr,Ya,wgr,qve,Agr,Lgr,jve,ygr,xgr,Dve,$gr,kgr,Sgr,t8,FT,Gve,Rgr,Pgr,cH,Bgr,Igr,Ngr,TT,Ove,qgr,jgr,fH,Dgr,Ggr,Ogr,MT,Vgr,Vve,Xgr,zgr,Xve,Qgr,Wgr,ET,dXe,jd,CT,zve,a8,Hgr,Qve,Ugr,cXe,Ho,n8,Jgr,Dd,Ygr,mH,Kgr,Zgr,gH,ehr,ohr,rhr,s8,thr,Wve,ahr,nhr,shr,wt,l8,lhr,Hve,ihr,dhr,Gd,chr,Uve,fhr,mhr,hH,ghr,hhr,phr,wT,_hr,po,i8,uhr,Jve,bhr,vhr,Ka,Fhr,Yve,Thr,Mhr,Kve,Ehr,Chr,Zve,whr,Ahr,Lhr,ot,AT,e3e,yhr,xhr,pH,$hr,khr,Shr,LT,o3e,Rhr,Phr,_H,Bhr,Ihr,Nhr,yT,r3e,qhr,jhr,uH,Dhr,Ghr,Ohr,xT,t3e,Vhr,Xhr,bH,zhr,Qhr,Whr,$T,a3e,Hhr,Uhr,vH,Jhr,Yhr,Khr,kT,Zhr,n3e,epr,opr,s3e,rpr,tpr,ST,fXe,Od,RT,l3e,d8,apr,i3e,npr,mXe,Uo,c8,spr,Vd,lpr,FH,ipr,dpr,TH,cpr,fpr,mpr,f8,gpr,d3e,hpr,ppr,_pr,At,m8,upr,c3e,bpr,vpr,Xd,Fpr,f3e,Tpr,Mpr,MH,Epr,Cpr,wpr,PT,Apr,_o,g8,Lpr,m3e,ypr,xpr,Za,$pr,g3e,kpr,Spr,h3e,Rpr,Ppr,p3e,Bpr,Ipr,Npr,zd,BT,_3e,qpr,jpr,EH,Dpr,Gpr,Opr,IT,u3e,Vpr,Xpr,CH,zpr,Qpr,Wpr,NT,b3e,Hpr,Upr,wH,Jpr,Ypr,Kpr,qT,Zpr,v3e,e_r,o_r,F3e,r_r,t_r,jT,gXe,Qd,DT,T3e,h8,a_r,M3e,n_r,hXe,Jo,p8,s_r,Wd,l_r,AH,i_r,d_r,LH,c_r,f_r,m_r,_8,g_r,E3e,h_r,p_r,__r,Lt,u8,u_r,C3e,b_r,v_r,Hd,F_r,w3e,T_r,M_r,yH,E_r,C_r,w_r,GT,A_r,uo,b8,L_r,A3e,y_r,x_r,en,$_r,L3e,k_r,S_r,y3e,R_r,P_r,x3e,B_r,I_r,N_r,v8,OT,$3e,q_r,j_r,xH,D_r,G_r,O_r,VT,k3e,V_r,X_r,$H,z_r,Q_r,W_r,XT,H_r,S3e,U_r,J_r,R3e,Y_r,K_r,zT,pXe,Ud,QT,P3e,F8,Z_r,B3e,eur,_Xe,Yo,T8,our,Jd,rur,kH,tur,aur,SH,nur,sur,lur,M8,iur,I3e,dur,cur,fur,yt,E8,mur,N3e,gur,hur,Yd,pur,q3e,_ur,uur,RH,bur,vur,Fur,WT,Tur,bo,C8,Mur,j3e,Eur,Cur,on,wur,D3e,Aur,Lur,G3e,yur,xur,O3e,$ur,kur,Sur,V3e,HT,X3e,Rur,Pur,PH,Bur,Iur,Nur,UT,qur,z3e,jur,Dur,Q3e,Gur,Our,JT,uXe,Kd,YT,W3e,w8,Vur,H3e,Xur,bXe,Ko,A8,zur,Zd,Qur,BH,Wur,Hur,IH,Uur,Jur,Yur,L8,Kur,U3e,Zur,e1r,o1r,xt,y8,r1r,J3e,t1r,a1r,ec,n1r,Y3e,s1r,l1r,NH,i1r,d1r,c1r,KT,f1r,vo,x8,m1r,K3e,g1r,h1r,rn,p1r,Z3e,_1r,u1r,e5e,b1r,v1r,o5e,F1r,T1r,M1r,tn,ZT,r5e,E1r,C1r,qH,w1r,A1r,L1r,e7,t5e,y1r,x1r,jH,$1r,k1r,S1r,o7,a5e,R1r,P1r,DH,B1r,I1r,N1r,r7,n5e,q1r,j1r,GH,D1r,G1r,O1r,t7,V1r,s5e,X1r,z1r,l5e,Q1r,W1r,a7,vXe,oc,n7,i5e,$8,H1r,d5e,U1r,FXe,Zo,k8,J1r,rc,Y1r,OH,K1r,Z1r,VH,e2r,o2r,r2r,S8,t2r,c5e,a2r,n2r,s2r,$t,R8,l2r,f5e,i2r,d2r,tc,c2r,m5e,f2r,m2r,XH,g2r,h2r,p2r,s7,_2r,Fo,P8,u2r,g5e,b2r,v2r,an,F2r,h5e,T2r,M2r,p5e,E2r,C2r,_5e,w2r,A2r,L2r,u5e,l7,b5e,y2r,x2r,zH,$2r,k2r,S2r,i7,R2r,v5e,P2r,B2r,F5e,I2r,N2r,d7,TXe,ac,c7,T5e,B8,q2r,M5e,j2r,MXe,er,I8,D2r,nc,G2r,QH,O2r,V2r,WH,X2r,z2r,Q2r,N8,W2r,E5e,H2r,U2r,J2r,kt,q8,Y2r,C5e,K2r,Z2r,sc,ebr,w5e,obr,rbr,HH,tbr,abr,nbr,f7,sbr,yr,j8,lbr,A5e,ibr,dbr,nn,cbr,L5e,fbr,mbr,y5e,gbr,hbr,x5e,pbr,_br,ubr,j,m7,$5e,bbr,vbr,UH,Fbr,Tbr,Mbr,g7,k5e,Ebr,Cbr,JH,wbr,Abr,Lbr,h7,S5e,ybr,xbr,YH,$br,kbr,Sbr,p7,R5e,Rbr,Pbr,KH,Bbr,Ibr,Nbr,_7,P5e,qbr,jbr,ZH,Dbr,Gbr,Obr,u7,B5e,Vbr,Xbr,eU,zbr,Qbr,Wbr,b7,I5e,Hbr,Ubr,oU,Jbr,Ybr,Kbr,v7,N5e,Zbr,evr,rU,ovr,rvr,tvr,F7,q5e,avr,nvr,tU,svr,lvr,ivr,T7,j5e,dvr,cvr,aU,fvr,mvr,gvr,M7,D5e,hvr,pvr,nU,_vr,uvr,bvr,E7,G5e,vvr,Fvr,sU,Tvr,Mvr,Evr,C7,O5e,Cvr,wvr,lU,Avr,Lvr,yvr,w7,V5e,xvr,$vr,iU,kvr,Svr,Rvr,A7,X5e,Pvr,Bvr,dU,Ivr,Nvr,qvr,L7,z5e,jvr,Dvr,cU,Gvr,Ovr,Vvr,y7,Q5e,Xvr,zvr,fU,Qvr,Wvr,Hvr,Us,W5e,Uvr,Jvr,mU,Yvr,Kvr,gU,Zvr,e3r,o3r,x7,H5e,r3r,t3r,hU,a3r,n3r,s3r,$7,U5e,l3r,i3r,pU,d3r,c3r,f3r,k7,J5e,m3r,g3r,_U,h3r,p3r,_3r,S7,Y5e,u3r,b3r,uU,v3r,F3r,T3r,R7,K5e,M3r,E3r,bU,C3r,w3r,A3r,P7,Z5e,L3r,y3r,vU,x3r,$3r,k3r,B7,eFe,S3r,R3r,FU,P3r,B3r,I3r,I7,oFe,N3r,q3r,TU,j3r,D3r,G3r,N7,rFe,O3r,V3r,MU,X3r,z3r,Q3r,q7,tFe,W3r,H3r,EU,U3r,J3r,Y3r,j7,aFe,K3r,Z3r,CU,e5r,o5r,r5r,D7,nFe,t5r,a5r,wU,n5r,s5r,l5r,G7,sFe,i5r,d5r,AU,c5r,f5r,m5r,O7,lFe,g5r,h5r,LU,p5r,_5r,u5r,V7,iFe,b5r,v5r,yU,F5r,T5r,M5r,X7,dFe,E5r,C5r,xU,w5r,A5r,L5r,z7,cFe,y5r,x5r,$U,$5r,k5r,S5r,Q7,fFe,R5r,P5r,kU,B5r,I5r,N5r,W7,mFe,q5r,j5r,SU,D5r,G5r,O5r,H7,gFe,V5r,X5r,RU,z5r,Q5r,W5r,U7,hFe,H5r,U5r,PU,J5r,Y5r,K5r,J7,pFe,Z5r,eFr,BU,oFr,rFr,tFr,Y7,_Fe,aFr,nFr,IU,sFr,lFr,iFr,K7,uFe,dFr,cFr,NU,fFr,mFr,gFr,Z7,bFe,hFr,pFr,qU,_Fr,uFr,bFr,e9,vFe,vFr,FFr,jU,TFr,MFr,EFr,o9,FFe,CFr,wFr,DU,AFr,LFr,yFr,r9,TFe,xFr,$Fr,GU,kFr,SFr,RFr,t9,MFe,PFr,BFr,OU,IFr,NFr,qFr,a9,EFe,jFr,DFr,VU,GFr,OFr,VFr,n9,EXe,lc,s9,CFe,D8,XFr,wFe,zFr,CXe,or,G8,QFr,ic,WFr,XU,HFr,UFr,zU,JFr,YFr,KFr,O8,ZFr,AFe,eTr,oTr,rTr,St,V8,tTr,LFe,aTr,nTr,dc,sTr,yFe,lTr,iTr,QU,dTr,cTr,fTr,l9,mTr,xr,X8,gTr,xFe,hTr,pTr,sn,_Tr,$Fe,uTr,bTr,kFe,vTr,FTr,SFe,TTr,MTr,ETr,se,i9,RFe,CTr,wTr,WU,ATr,LTr,yTr,d9,PFe,xTr,$Tr,HU,kTr,STr,RTr,c9,BFe,PTr,BTr,UU,ITr,NTr,qTr,f9,IFe,jTr,DTr,JU,GTr,OTr,VTr,m9,NFe,XTr,zTr,YU,QTr,WTr,HTr,g9,qFe,UTr,JTr,KU,YTr,KTr,ZTr,h9,jFe,e7r,o7r,ZU,r7r,t7r,a7r,p9,DFe,n7r,s7r,eJ,l7r,i7r,d7r,_9,GFe,c7r,f7r,oJ,m7r,g7r,h7r,u9,OFe,p7r,_7r,rJ,u7r,b7r,v7r,b9,VFe,F7r,T7r,tJ,M7r,E7r,C7r,v9,XFe,w7r,A7r,aJ,L7r,y7r,x7r,F9,zFe,$7r,k7r,nJ,S7r,R7r,P7r,T9,QFe,B7r,I7r,sJ,N7r,q7r,j7r,M9,WFe,D7r,G7r,lJ,O7r,V7r,X7r,E9,HFe,z7r,Q7r,iJ,W7r,H7r,U7r,C9,UFe,J7r,Y7r,dJ,K7r,Z7r,e9r,w9,JFe,o9r,r9r,cJ,t9r,a9r,n9r,A9,YFe,s9r,l9r,fJ,i9r,d9r,c9r,L9,KFe,f9r,m9r,mJ,g9r,h9r,p9r,y9,ZFe,_9r,u9r,gJ,b9r,v9r,F9r,x9,eTe,T9r,M9r,hJ,E9r,C9r,w9r,$9,oTe,A9r,L9r,pJ,y9r,x9r,$9r,k9,wXe,cc,S9,rTe,z8,k9r,tTe,S9r,AXe,rr,Q8,R9r,fc,P9r,_J,B9r,I9r,uJ,N9r,q9r,j9r,W8,D9r,aTe,G9r,O9r,V9r,Rt,H8,X9r,nTe,z9r,Q9r,mc,W9r,sTe,H9r,U9r,bJ,J9r,Y9r,K9r,R9,Z9r,$r,U8,eMr,lTe,oMr,rMr,ln,tMr,iTe,aMr,nMr,dTe,sMr,lMr,cTe,iMr,dMr,cMr,Me,P9,fTe,fMr,mMr,vJ,gMr,hMr,pMr,B9,mTe,_Mr,uMr,FJ,bMr,vMr,FMr,I9,gTe,TMr,MMr,TJ,EMr,CMr,wMr,N9,hTe,AMr,LMr,MJ,yMr,xMr,$Mr,q9,pTe,kMr,SMr,EJ,RMr,PMr,BMr,j9,_Te,IMr,NMr,CJ,qMr,jMr,DMr,D9,uTe,GMr,OMr,wJ,VMr,XMr,zMr,G9,bTe,QMr,WMr,AJ,HMr,UMr,JMr,O9,vTe,YMr,KMr,LJ,ZMr,e4r,o4r,V9,FTe,r4r,t4r,yJ,a4r,n4r,s4r,X9,TTe,l4r,i4r,xJ,d4r,c4r,f4r,z9,MTe,m4r,g4r,$J,h4r,p4r,_4r,Q9,ETe,u4r,b4r,kJ,v4r,F4r,T4r,W9,LXe,gc,H9,CTe,J8,M4r,wTe,E4r,yXe,tr,Y8,C4r,hc,w4r,SJ,A4r,L4r,RJ,y4r,x4r,$4r,K8,k4r,ATe,S4r,R4r,P4r,Pt,Z8,B4r,LTe,I4r,N4r,pc,q4r,yTe,j4r,D4r,PJ,G4r,O4r,V4r,U9,X4r,kr,ex,z4r,xTe,Q4r,W4r,dn,H4r,$Te,U4r,J4r,kTe,Y4r,K4r,STe,Z4r,eEr,oEr,rt,J9,RTe,rEr,tEr,BJ,aEr,nEr,sEr,Y9,PTe,lEr,iEr,IJ,dEr,cEr,fEr,K9,BTe,mEr,gEr,NJ,hEr,pEr,_Er,Z9,ITe,uEr,bEr,qJ,vEr,FEr,TEr,eM,NTe,MEr,EEr,jJ,CEr,wEr,AEr,oM,xXe,_c,rM,qTe,ox,LEr,jTe,yEr,$Xe,ar,rx,xEr,uc,$Er,DJ,kEr,SEr,GJ,REr,PEr,BEr,tx,IEr,DTe,NEr,qEr,jEr,Bt,ax,DEr,GTe,GEr,OEr,bc,VEr,OTe,XEr,zEr,OJ,QEr,WEr,HEr,tM,UEr,Sr,nx,JEr,VTe,YEr,KEr,cn,ZEr,XTe,eCr,oCr,zTe,rCr,tCr,QTe,aCr,nCr,sCr,ie,aM,WTe,lCr,iCr,VJ,dCr,cCr,fCr,nM,HTe,mCr,gCr,XJ,hCr,pCr,_Cr,sM,UTe,uCr,bCr,zJ,vCr,FCr,TCr,lM,JTe,MCr,ECr,QJ,CCr,wCr,ACr,iM,YTe,LCr,yCr,WJ,xCr,$Cr,kCr,dM,KTe,SCr,RCr,HJ,PCr,BCr,ICr,cM,ZTe,NCr,qCr,UJ,jCr,DCr,GCr,fM,e7e,OCr,VCr,JJ,XCr,zCr,QCr,mM,o7e,WCr,HCr,YJ,UCr,JCr,YCr,gM,r7e,KCr,ZCr,KJ,e0r,o0r,r0r,hM,t7e,t0r,a0r,ZJ,n0r,s0r,l0r,pM,a7e,i0r,d0r,eY,c0r,f0r,m0r,_M,n7e,g0r,h0r,oY,p0r,_0r,u0r,uM,s7e,b0r,v0r,rY,F0r,T0r,M0r,bM,l7e,E0r,C0r,tY,w0r,A0r,L0r,vM,i7e,y0r,x0r,aY,$0r,k0r,S0r,FM,d7e,R0r,P0r,nY,B0r,I0r,N0r,TM,c7e,q0r,j0r,sY,D0r,G0r,O0r,MM,f7e,V0r,X0r,lY,z0r,Q0r,W0r,EM,m7e,H0r,U0r,iY,J0r,Y0r,K0r,CM,kXe,vc,wM,g7e,sx,Z0r,h7e,ewr,SXe,nr,lx,owr,Fc,rwr,dY,twr,awr,cY,nwr,swr,lwr,ix,iwr,p7e,dwr,cwr,fwr,It,dx,mwr,_7e,gwr,hwr,Tc,pwr,u7e,_wr,uwr,fY,bwr,vwr,Fwr,AM,Twr,Rr,cx,Mwr,b7e,Ewr,Cwr,fn,wwr,v7e,Awr,Lwr,F7e,ywr,xwr,T7e,$wr,kwr,Swr,ye,LM,M7e,Rwr,Pwr,mY,Bwr,Iwr,Nwr,yM,E7e,qwr,jwr,gY,Dwr,Gwr,Owr,xM,C7e,Vwr,Xwr,hY,zwr,Qwr,Wwr,$M,w7e,Hwr,Uwr,pY,Jwr,Ywr,Kwr,kM,A7e,Zwr,eAr,_Y,oAr,rAr,tAr,SM,L7e,aAr,nAr,uY,sAr,lAr,iAr,RM,y7e,dAr,cAr,bY,fAr,mAr,gAr,PM,x7e,hAr,pAr,vY,_Ar,uAr,bAr,BM,$7e,vAr,FAr,FY,TAr,MAr,EAr,IM,k7e,CAr,wAr,TY,AAr,LAr,yAr,NM,RXe,Mc,qM,S7e,fx,xAr,R7e,$Ar,PXe,sr,mx,kAr,Ec,SAr,MY,RAr,PAr,EY,BAr,IAr,NAr,gx,qAr,P7e,jAr,DAr,GAr,Nt,hx,OAr,B7e,VAr,XAr,Cc,zAr,I7e,QAr,WAr,CY,HAr,UAr,JAr,jM,YAr,Pr,px,KAr,N7e,ZAr,e6r,mn,o6r,q7e,r6r,t6r,j7e,a6r,n6r,D7e,s6r,l6r,i6r,te,DM,G7e,d6r,c6r,wY,f6r,m6r,g6r,GM,O7e,h6r,p6r,AY,_6r,u6r,b6r,OM,V7e,v6r,F6r,LY,T6r,M6r,E6r,VM,X7e,C6r,w6r,yY,A6r,L6r,y6r,XM,z7e,x6r,$6r,xY,k6r,S6r,R6r,zM,Q7e,P6r,B6r,$Y,I6r,N6r,q6r,QM,W7e,j6r,D6r,kY,G6r,O6r,V6r,WM,H7e,X6r,z6r,SY,Q6r,W6r,H6r,HM,U7e,U6r,J6r,RY,Y6r,K6r,Z6r,UM,J7e,eLr,oLr,PY,rLr,tLr,aLr,JM,Y7e,nLr,sLr,BY,lLr,iLr,dLr,YM,K7e,cLr,fLr,IY,mLr,gLr,hLr,KM,Z7e,pLr,_Lr,NY,uLr,bLr,vLr,ZM,e9e,FLr,TLr,qY,MLr,ELr,CLr,e4,o9e,wLr,ALr,jY,LLr,yLr,xLr,o4,r9e,$Lr,kLr,DY,SLr,RLr,PLr,r4,t9e,BLr,ILr,GY,NLr,qLr,jLr,t4,a9e,DLr,GLr,OY,OLr,VLr,XLr,a4,n9e,zLr,QLr,VY,WLr,HLr,ULr,n4,s9e,JLr,YLr,XY,KLr,ZLr,eyr,s4,l9e,oyr,ryr,zY,tyr,ayr,nyr,l4,i9e,syr,lyr,QY,iyr,dyr,cyr,i4,d9e,fyr,myr,WY,gyr,hyr,pyr,d4,c9e,_yr,uyr,HY,byr,vyr,Fyr,c4,f9e,Tyr,Myr,UY,Eyr,Cyr,wyr,f4,m9e,Ayr,Lyr,JY,yyr,xyr,$yr,m4,BXe,wc,g4,g9e,_x,kyr,h9e,Syr,IXe,lr,ux,Ryr,Ac,Pyr,YY,Byr,Iyr,KY,Nyr,qyr,jyr,bx,Dyr,p9e,Gyr,Oyr,Vyr,qt,vx,Xyr,_9e,zyr,Qyr,Lc,Wyr,u9e,Hyr,Uyr,ZY,Jyr,Yyr,Kyr,h4,Zyr,Br,Fx,e8r,b9e,o8r,r8r,gn,t8r,v9e,a8r,n8r,F9e,s8r,l8r,T9e,i8r,d8r,c8r,_e,p4,M9e,f8r,m8r,eK,g8r,h8r,p8r,_4,E9e,_8r,u8r,oK,b8r,v8r,F8r,u4,C9e,T8r,M8r,rK,E8r,C8r,w8r,b4,w9e,A8r,L8r,tK,y8r,x8r,$8r,v4,A9e,k8r,S8r,aK,R8r,P8r,B8r,F4,L9e,I8r,N8r,nK,q8r,j8r,D8r,T4,y9e,G8r,O8r,sK,V8r,X8r,z8r,M4,x9e,Q8r,W8r,lK,H8r,U8r,J8r,E4,$9e,Y8r,K8r,iK,Z8r,exr,oxr,C4,k9e,rxr,txr,dK,axr,nxr,sxr,w4,S9e,lxr,ixr,cK,dxr,cxr,fxr,A4,R9e,mxr,gxr,fK,hxr,pxr,_xr,L4,P9e,uxr,bxr,mK,vxr,Fxr,Txr,y4,B9e,Mxr,Exr,gK,Cxr,wxr,Axr,x4,I9e,Lxr,yxr,hK,xxr,$xr,kxr,$4,N9e,Sxr,Rxr,pK,Pxr,Bxr,Ixr,k4,q9e,Nxr,qxr,_K,jxr,Dxr,Gxr,S4,NXe,yc,R4,j9e,Tx,Oxr,D9e,Vxr,qXe,ir,Mx,Xxr,xc,zxr,uK,Qxr,Wxr,bK,Hxr,Uxr,Jxr,Ex,Yxr,G9e,Kxr,Zxr,e$r,jt,Cx,o$r,O9e,r$r,t$r,$c,a$r,V9e,n$r,s$r,vK,l$r,i$r,d$r,P4,c$r,Ir,wx,f$r,X9e,m$r,g$r,hn,h$r,z9e,p$r,_$r,Q9e,u$r,b$r,W9e,v$r,F$r,T$r,Ax,B4,H9e,M$r,E$r,FK,C$r,w$r,A$r,I4,U9e,L$r,y$r,TK,x$r,$$r,k$r,N4,jXe,kc,q4,J9e,Lx,S$r,Y9e,R$r,DXe,dr,yx,P$r,Sc,B$r,MK,I$r,N$r,EK,q$r,j$r,D$r,xx,G$r,K9e,O$r,V$r,X$r,Dt,$x,z$r,Z9e,Q$r,W$r,Rc,H$r,eMe,U$r,J$r,CK,Y$r,K$r,Z$r,j4,ekr,Nr,kx,okr,oMe,rkr,tkr,pn,akr,rMe,nkr,skr,tMe,lkr,ikr,aMe,dkr,ckr,fkr,nMe,D4,sMe,mkr,gkr,wK,hkr,pkr,_kr,G4,GXe,Pc,O4,lMe,Sx,ukr,iMe,bkr,OXe,cr,Rx,vkr,Bc,Fkr,AK,Tkr,Mkr,LK,Ekr,Ckr,wkr,Px,Akr,dMe,Lkr,ykr,xkr,Gt,Bx,$kr,cMe,kkr,Skr,Ic,Rkr,fMe,Pkr,Bkr,yK,Ikr,Nkr,qkr,V4,jkr,qr,Ix,Dkr,mMe,Gkr,Okr,_n,Vkr,gMe,Xkr,zkr,hMe,Qkr,Wkr,pMe,Hkr,Ukr,Jkr,de,X4,_Me,Ykr,Kkr,xK,Zkr,eSr,oSr,z4,uMe,rSr,tSr,$K,aSr,nSr,sSr,Q4,bMe,lSr,iSr,kK,dSr,cSr,fSr,W4,vMe,mSr,gSr,SK,hSr,pSr,_Sr,H4,FMe,uSr,bSr,RK,vSr,FSr,TSr,U4,TMe,MSr,ESr,PK,CSr,wSr,ASr,J4,MMe,LSr,ySr,BK,xSr,$Sr,kSr,Y4,EMe,SSr,RSr,IK,PSr,BSr,ISr,K4,CMe,NSr,qSr,NK,jSr,DSr,GSr,Z4,wMe,OSr,VSr,qK,XSr,zSr,QSr,eE,AMe,WSr,HSr,jK,USr,JSr,YSr,oE,LMe,KSr,ZSr,DK,eRr,oRr,rRr,rE,yMe,tRr,aRr,GK,nRr,sRr,lRr,tE,xMe,iRr,dRr,OK,cRr,fRr,mRr,aE,$Me,gRr,hRr,VK,pRr,_Rr,uRr,nE,kMe,bRr,vRr,XK,FRr,TRr,MRr,sE,SMe,ERr,CRr,zK,wRr,ARr,LRr,lE,RMe,yRr,xRr,QK,$Rr,kRr,SRr,iE,PMe,RRr,PRr,WK,BRr,IRr,NRr,dE,BMe,qRr,jRr,HK,DRr,GRr,ORr,cE,VXe,Nc,fE,IMe,Nx,VRr,NMe,XRr,XXe,fr,qx,zRr,qc,QRr,UK,WRr,HRr,JK,URr,JRr,YRr,jx,KRr,qMe,ZRr,ePr,oPr,Ot,Dx,rPr,jMe,tPr,aPr,jc,nPr,DMe,sPr,lPr,YK,iPr,dPr,cPr,mE,fPr,jr,Gx,mPr,GMe,gPr,hPr,un,pPr,OMe,_Pr,uPr,VMe,bPr,vPr,XMe,FPr,TPr,MPr,ce,gE,zMe,EPr,CPr,KK,wPr,APr,LPr,hE,QMe,yPr,xPr,ZK,$Pr,kPr,SPr,pE,WMe,RPr,PPr,eZ,BPr,IPr,NPr,_E,HMe,qPr,jPr,oZ,DPr,GPr,OPr,uE,UMe,VPr,XPr,rZ,zPr,QPr,WPr,bE,JMe,HPr,UPr,tZ,JPr,YPr,KPr,vE,YMe,ZPr,eBr,aZ,oBr,rBr,tBr,FE,KMe,aBr,nBr,nZ,sBr,lBr,iBr,TE,ZMe,dBr,cBr,sZ,fBr,mBr,gBr,ME,e4e,hBr,pBr,lZ,_Br,uBr,bBr,EE,o4e,vBr,FBr,iZ,TBr,MBr,EBr,CE,r4e,CBr,wBr,dZ,ABr,LBr,yBr,wE,t4e,xBr,$Br,cZ,kBr,SBr,RBr,AE,a4e,PBr,BBr,fZ,IBr,NBr,qBr,LE,n4e,jBr,DBr,mZ,GBr,OBr,VBr,yE,s4e,XBr,zBr,gZ,QBr,WBr,HBr,xE,l4e,UBr,JBr,hZ,YBr,KBr,ZBr,$E,i4e,eIr,oIr,pZ,rIr,tIr,aIr,kE,d4e,nIr,sIr,_Z,lIr,iIr,dIr,SE,c4e,cIr,fIr,uZ,mIr,gIr,hIr,RE,zXe,Dc,PE,f4e,Ox,pIr,m4e,_Ir,QXe,mr,Vx,uIr,Gc,bIr,bZ,vIr,FIr,vZ,TIr,MIr,EIr,Xx,CIr,g4e,wIr,AIr,LIr,Vt,zx,yIr,h4e,xIr,$Ir,Oc,kIr,p4e,SIr,RIr,FZ,PIr,BIr,IIr,BE,NIr,Dr,Qx,qIr,_4e,jIr,DIr,bn,GIr,u4e,OIr,VIr,b4e,XIr,zIr,v4e,QIr,WIr,HIr,F4e,IE,T4e,UIr,JIr,TZ,YIr,KIr,ZIr,NE,WXe,Vc,qE,M4e,Wx,eNr,E4e,oNr,HXe,gr,Hx,rNr,Xc,tNr,MZ,aNr,nNr,EZ,sNr,lNr,iNr,Ux,dNr,C4e,cNr,fNr,mNr,Xt,Jx,gNr,w4e,hNr,pNr,zc,_Nr,A4e,uNr,bNr,CZ,vNr,FNr,TNr,jE,MNr,Gr,Yx,ENr,L4e,CNr,wNr,vn,ANr,y4e,LNr,yNr,x4e,xNr,$Nr,$4e,kNr,SNr,RNr,k4e,DE,S4e,PNr,BNr,wZ,INr,NNr,qNr,GE,UXe,Qc,OE,R4e,Kx,jNr,P4e,DNr,JXe,hr,Zx,GNr,Wc,ONr,AZ,VNr,XNr,LZ,zNr,QNr,WNr,e$,HNr,B4e,UNr,JNr,YNr,zt,o$,KNr,I4e,ZNr,eqr,Hc,oqr,N4e,rqr,tqr,yZ,aqr,nqr,sqr,VE,lqr,Or,r$,iqr,q4e,dqr,cqr,Fn,fqr,j4e,mqr,gqr,D4e,hqr,pqr,G4e,_qr,uqr,bqr,oe,XE,O4e,vqr,Fqr,xZ,Tqr,Mqr,Eqr,zE,V4e,Cqr,wqr,$Z,Aqr,Lqr,yqr,QE,X4e,xqr,$qr,kZ,kqr,Sqr,Rqr,WE,z4e,Pqr,Bqr,SZ,Iqr,Nqr,qqr,HE,Q4e,jqr,Dqr,RZ,Gqr,Oqr,Vqr,UE,W4e,Xqr,zqr,PZ,Qqr,Wqr,Hqr,JE,H4e,Uqr,Jqr,BZ,Yqr,Kqr,Zqr,YE,U4e,ejr,ojr,IZ,rjr,tjr,ajr,KE,J4e,njr,sjr,NZ,ljr,ijr,djr,ZE,Y4e,cjr,fjr,qZ,mjr,gjr,hjr,eC,K4e,pjr,_jr,jZ,ujr,bjr,vjr,oC,Z4e,Fjr,Tjr,DZ,Mjr,Ejr,Cjr,rC,eEe,wjr,Ajr,GZ,Ljr,yjr,xjr,tC,oEe,$jr,kjr,OZ,Sjr,Rjr,Pjr,aC,rEe,Bjr,Ijr,VZ,Njr,qjr,jjr,nC,tEe,Djr,Gjr,XZ,Ojr,Vjr,Xjr,sC,aEe,zjr,Qjr,zZ,Wjr,Hjr,Ujr,lC,nEe,Jjr,Yjr,QZ,Kjr,Zjr,eDr,iC,sEe,oDr,rDr,WZ,tDr,aDr,nDr,dC,lEe,sDr,lDr,HZ,iDr,dDr,cDr,cC,iEe,fDr,mDr,UZ,gDr,hDr,pDr,fC,dEe,_Dr,uDr,JZ,bDr,vDr,FDr,mC,cEe,TDr,MDr,YZ,EDr,CDr,wDr,gC,fEe,ADr,LDr,KZ,yDr,xDr,$Dr,hC,mEe,kDr,SDr,ZZ,RDr,PDr,BDr,pC,gEe,IDr,NDr,eee,qDr,jDr,DDr,_C,hEe,GDr,ODr,oee,VDr,XDr,zDr,uC,YXe,Uc,bC,pEe,t$,QDr,_Ee,WDr,KXe,pr,a$,HDr,Jc,UDr,ree,JDr,YDr,tee,KDr,ZDr,eGr,n$,oGr,uEe,rGr,tGr,aGr,Qt,s$,nGr,bEe,sGr,lGr,Yc,iGr,vEe,dGr,cGr,aee,fGr,mGr,gGr,vC,hGr,Vr,l$,pGr,FEe,_Gr,uGr,Tn,bGr,TEe,vGr,FGr,MEe,TGr,MGr,EEe,EGr,CGr,wGr,xe,FC,CEe,AGr,LGr,nee,yGr,xGr,$Gr,TC,wEe,kGr,SGr,see,RGr,PGr,BGr,MC,AEe,IGr,NGr,lee,qGr,jGr,DGr,EC,LEe,GGr,OGr,iee,VGr,XGr,zGr,CC,yEe,QGr,WGr,dee,HGr,UGr,JGr,wC,xEe,YGr,KGr,cee,ZGr,eOr,oOr,AC,$Ee,rOr,tOr,fee,aOr,nOr,sOr,LC,kEe,lOr,iOr,mee,dOr,cOr,fOr,yC,SEe,mOr,gOr,gee,hOr,pOr,_Or,xC,REe,uOr,bOr,hee,vOr,FOr,TOr,$C,ZXe,Kc,kC,PEe,i$,MOr,BEe,EOr,eze,_r,d$,COr,Zc,wOr,pee,AOr,LOr,_ee,yOr,xOr,$Or,c$,kOr,IEe,SOr,ROr,POr,Wt,f$,BOr,NEe,IOr,NOr,ef,qOr,qEe,jOr,DOr,uee,GOr,OOr,VOr,SC,XOr,Xr,m$,zOr,jEe,QOr,WOr,Mn,HOr,DEe,UOr,JOr,GEe,YOr,KOr,OEe,ZOr,eVr,oVr,Ee,RC,VEe,rVr,tVr,bee,aVr,nVr,sVr,PC,XEe,lVr,iVr,vee,dVr,cVr,fVr,BC,zEe,mVr,gVr,Fee,hVr,pVr,_Vr,IC,QEe,uVr,bVr,Tee,vVr,FVr,TVr,NC,WEe,MVr,EVr,Mee,CVr,wVr,AVr,qC,HEe,LVr,yVr,Eee,xVr,$Vr,kVr,jC,UEe,SVr,RVr,Cee,PVr,BVr,IVr,DC,JEe,NVr,qVr,wee,jVr,DVr,GVr,GC,YEe,OVr,VVr,Aee,XVr,zVr,QVr,OC,KEe,WVr,HVr,Lee,UVr,JVr,YVr,VC,ZEe,KVr,ZVr,yee,eXr,oXr,rXr,XC,eCe,tXr,aXr,xee,nXr,sXr,lXr,zC,oCe,iXr,dXr,$ee,cXr,fXr,mXr,QC,oze,of,WC,rCe,g$,gXr,tCe,hXr,rze,ur,h$,pXr,rf,_Xr,kee,uXr,bXr,See,vXr,FXr,TXr,p$,MXr,aCe,EXr,CXr,wXr,Ht,_$,AXr,nCe,LXr,yXr,tf,xXr,sCe,$Xr,kXr,Ree,SXr,RXr,PXr,HC,BXr,zr,u$,IXr,lCe,NXr,qXr,En,jXr,iCe,DXr,GXr,dCe,OXr,VXr,cCe,XXr,zXr,QXr,$e,UC,fCe,WXr,HXr,Pee,UXr,JXr,YXr,JC,mCe,KXr,ZXr,Bee,ezr,ozr,rzr,YC,gCe,tzr,azr,Iee,nzr,szr,lzr,KC,hCe,izr,dzr,Nee,czr,fzr,mzr,ZC,pCe,gzr,hzr,qee,pzr,_zr,uzr,e0,_Ce,bzr,vzr,jee,Fzr,Tzr,Mzr,o0,uCe,Ezr,Czr,Dee,wzr,Azr,Lzr,r0,bCe,yzr,xzr,Gee,$zr,kzr,Szr,t0,vCe,Rzr,Pzr,Oee,Bzr,Izr,Nzr,a0,FCe,qzr,jzr,Vee,Dzr,Gzr,Ozr,n0,tze,af,s0,TCe,b$,Vzr,MCe,Xzr,aze,br,v$,zzr,nf,Qzr,Xee,Wzr,Hzr,zee,Uzr,Jzr,Yzr,F$,Kzr,ECe,Zzr,eQr,oQr,Ut,T$,rQr,CCe,tQr,aQr,sf,nQr,wCe,sQr,lQr,Qee,iQr,dQr,cQr,l0,fQr,Qr,M$,mQr,ACe,gQr,hQr,Cn,pQr,LCe,_Qr,uQr,yCe,bQr,vQr,xCe,FQr,TQr,MQr,ke,i0,$Ce,EQr,CQr,Wee,wQr,AQr,LQr,d0,kCe,yQr,xQr,Hee,$Qr,kQr,SQr,c0,SCe,RQr,PQr,Uee,BQr,IQr,NQr,f0,RCe,qQr,jQr,Jee,DQr,GQr,OQr,m0,PCe,VQr,XQr,Yee,zQr,QQr,WQr,g0,BCe,HQr,UQr,Kee,JQr,YQr,KQr,h0,ICe,ZQr,eWr,Zee,oWr,rWr,tWr,p0,NCe,aWr,nWr,eoe,sWr,lWr,iWr,_0,qCe,dWr,cWr,ooe,fWr,mWr,gWr,u0,jCe,hWr,pWr,roe,_Wr,uWr,bWr,b0,nze,lf,v0,DCe,E$,vWr,GCe,FWr,sze,vr,C$,TWr,df,MWr,toe,EWr,CWr,aoe,wWr,AWr,LWr,w$,yWr,OCe,xWr,$Wr,kWr,Jt,A$,SWr,VCe,RWr,PWr,cf,BWr,XCe,IWr,NWr,noe,qWr,jWr,DWr,F0,GWr,Wr,L$,OWr,zCe,VWr,XWr,wn,zWr,QCe,QWr,WWr,WCe,HWr,UWr,HCe,JWr,YWr,KWr,Se,T0,UCe,ZWr,eHr,soe,oHr,rHr,tHr,M0,JCe,aHr,nHr,loe,sHr,lHr,iHr,E0,YCe,dHr,cHr,ioe,fHr,mHr,gHr,C0,KCe,hHr,pHr,doe,_Hr,uHr,bHr,w0,ZCe,vHr,FHr,coe,THr,MHr,EHr,A0,e0e,CHr,wHr,foe,AHr,LHr,yHr,L0,o0e,xHr,$Hr,moe,kHr,SHr,RHr,y0,r0e,PHr,BHr,goe,IHr,NHr,qHr,x0,t0e,jHr,DHr,hoe,GHr,OHr,VHr,$0,a0e,XHr,zHr,poe,QHr,WHr,HHr,k0,lze,ff,S0,n0e,y$,UHr,s0e,JHr,ize,Fr,x$,YHr,mf,KHr,_oe,ZHr,eUr,uoe,oUr,rUr,tUr,$$,aUr,l0e,nUr,sUr,lUr,Yt,k$,iUr,i0e,dUr,cUr,gf,fUr,d0e,mUr,gUr,boe,hUr,pUr,_Ur,R0,uUr,Hr,S$,bUr,c0e,vUr,FUr,An,TUr,f0e,MUr,EUr,m0e,CUr,wUr,g0e,AUr,LUr,yUr,Re,P0,h0e,xUr,$Ur,voe,kUr,SUr,RUr,B0,p0e,PUr,BUr,Foe,IUr,NUr,qUr,I0,_0e,jUr,DUr,Toe,GUr,OUr,VUr,N0,u0e,XUr,zUr,Moe,QUr,WUr,HUr,q0,b0e,UUr,JUr,Eoe,YUr,KUr,ZUr,j0,v0e,eJr,oJr,Coe,rJr,tJr,aJr,D0,F0e,nJr,sJr,woe,lJr,iJr,dJr,G0,T0e,cJr,fJr,Aoe,mJr,gJr,hJr,O0,M0e,pJr,_Jr,Loe,uJr,bJr,vJr,V0,E0e,FJr,TJr,yoe,MJr,EJr,CJr,X0,dze,hf,z0,C0e,R$,wJr,w0e,AJr,cze,Tr,P$,LJr,pf,yJr,xoe,xJr,$Jr,$oe,kJr,SJr,RJr,B$,PJr,A0e,BJr,IJr,NJr,Kt,I$,qJr,L0e,jJr,DJr,_f,GJr,y0e,OJr,VJr,koe,XJr,zJr,QJr,Q0,WJr,Ur,N$,HJr,x0e,UJr,JJr,Ln,YJr,$0e,KJr,ZJr,k0e,eYr,oYr,S0e,rYr,tYr,aYr,Ve,W0,R0e,nYr,sYr,Soe,lYr,iYr,dYr,H0,P0e,cYr,fYr,Roe,mYr,gYr,hYr,U0,B0e,pYr,_Yr,Poe,uYr,bYr,vYr,J0,I0e,FYr,TYr,Boe,MYr,EYr,CYr,Y0,N0e,wYr,AYr,Ioe,LYr,yYr,xYr,K0,q0e,$Yr,kYr,Noe,SYr,RYr,PYr,Z0,j0e,BYr,IYr,qoe,NYr,qYr,jYr,ew,D0e,DYr,GYr,joe,OYr,VYr,XYr,ow,fze,uf,rw,G0e,q$,zYr,O0e,QYr,mze,Mr,j$,WYr,bf,HYr,Doe,UYr,JYr,Goe,YYr,KYr,ZYr,D$,eKr,V0e,oKr,rKr,tKr,Zt,G$,aKr,X0e,nKr,sKr,vf,lKr,z0e,iKr,dKr,Ooe,cKr,fKr,mKr,tw,gKr,Jr,O$,hKr,Q0e,pKr,_Kr,yn,uKr,W0e,bKr,vKr,H0e,FKr,TKr,U0e,MKr,EKr,CKr,Xe,aw,J0e,wKr,AKr,Voe,LKr,yKr,xKr,nw,Y0e,$Kr,kKr,Xoe,SKr,RKr,PKr,sw,K0e,BKr,IKr,zoe,NKr,qKr,jKr,lw,Z0e,DKr,GKr,Qoe,OKr,VKr,XKr,iw,ewe,zKr,QKr,Woe,WKr,HKr,UKr,dw,owe,JKr,YKr,Hoe,KKr,ZKr,eZr,cw,rwe,oZr,rZr,Uoe,tZr,aZr,nZr,fw,twe,sZr,lZr,Joe,iZr,dZr,cZr,mw,gze,Ff,gw,awe,V$,fZr,nwe,mZr,hze,Er,X$,gZr,Tf,hZr,Yoe,pZr,_Zr,Koe,uZr,bZr,vZr,z$,FZr,swe,TZr,MZr,EZr,ea,Q$,CZr,lwe,wZr,AZr,Mf,LZr,iwe,yZr,xZr,Zoe,$Zr,kZr,SZr,hw,RZr,Yr,W$,PZr,dwe,BZr,IZr,xn,NZr,cwe,qZr,jZr,fwe,DZr,GZr,mwe,OZr,VZr,XZr,gwe,pw,hwe,zZr,QZr,ere,WZr,HZr,UZr,_w,pze,Ef,uw,pwe,H$,JZr,_we,YZr,_ze,Cr,U$,KZr,Cf,ZZr,ore,eet,oet,rre,ret,tet,aet,J$,net,uwe,set,iet,det,oa,Y$,cet,bwe,fet,met,wf,get,vwe,het,pet,tre,_et,uet,bet,bw,vet,Kr,K$,Fet,Fwe,Tet,Met,$n,Eet,Twe,Cet,wet,Mwe,Aet,Let,Ewe,yet,xet,$et,Z$,vw,Cwe,ket,Set,are,Ret,Pet,Bet,Fw,wwe,Iet,Net,nre,qet,jet,Det,Tw,uze,Af,Mw,Awe,ek,Get,Lwe,Oet,bze,wr,ok,Vet,Lf,Xet,sre,zet,Qet,lre,Wet,Het,Uet,rk,Jet,ywe,Yet,Ket,Zet,ra,tk,eot,xwe,oot,rot,yf,tot,$we,aot,not,ire,sot,lot,iot,Ew,dot,Zr,ak,cot,kwe,fot,mot,kn,got,Swe,hot,pot,Rwe,_ot,uot,Pwe,bot,vot,Fot,Bwe,Cw,Iwe,Tot,Mot,dre,Eot,Cot,wot,ww,vze;return d=new re({}),$a=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),U6=new re({}),J6=new P({props:{code:"",highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Nf=new Aot({props:{warning:!0,$$slots:{default:[DXt]},$$scope:{ctx:$}}}),Y6=new re({}),K6=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/configuration_auto.py#L607"}}),oL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/configuration_auto.py#L630"}}),Hg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[GXt]},$$scope:{ctx:$}}}),rL=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/configuration_auto.py#L753"}}),tL=new re({}),aL=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/tokenization_auto.py#L403"}}),lL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17953/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/tokenization_auto.py#L417"}}),$h=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[OXt]},$$scope:{ctx:$}}}),iL=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/tokenization_auto.py#L616"}}),dL=new re({}),cL=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/feature_extraction_auto.py#L194"}}),gL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17953/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/feature_extraction_auto.py#L208"}}),mp=new Aot({props:{$$slots:{default:[VXt]},$$scope:{ctx:$}}}),gp=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[XXt]},$$scope:{ctx:$}}}),hL=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/feature_extraction_auto.py#L335"}}),pL=new re({}),_L=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/processing_auto.py#L89"}}),vL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/processing_auto.py#L103"}}),Pp=new Aot({props:{$$slots:{default:[zXt]},$$scope:{ctx:$}}}),Bp=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[QXt]},$$scope:{ctx:$}}}),FL=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/processing_auto.py#L256"}}),TL=new re({}),ML=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/modeling_auto.py#L779"}}),CL=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17953/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/codegen#transformers.CodeGenModel">CodeGenModel</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17953/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/groupvit#transformers.GroupViTConfig">GroupViTConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/groupvit#transformers.GroupViTModel">GroupViTModel</a> (GroupViT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/mvp#transformers.MvpModel">MvpModel</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/nezha#transformers.NezhaModel">NezhaModel</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/auto_factory.py#L389"}}),qp=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[WXt]},$$scope:{ctx:$}}}),wL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/auto_factory.py#L417"}}),Gu=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[HXt]},$$scope:{ctx:$}}}),AL=new re({}),LL=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/modeling_auto.py#L786"}}),xL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17953/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/nezha#transformers.NezhaForPreTraining">NezhaForPreTraining</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/auto_factory.py#L389"}}),Vu=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[UXt]},$$scope:{ctx:$}}}),$L=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/auto_factory.py#L417"}}),I1=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[JXt]},$$scope:{ctx:$}}}),kL=new re({}),SL=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/modeling_auto.py#L801"}}),PL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17953/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/codegen#transformers.CodeGenForCausalLM">CodeGenForCausalLM</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/mvp#transformers.MvpForCausalLM">MvpForCausalLM</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/auto_factory.py#L389"}}),q1=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[YXt]},$$scope:{ctx:$}}}),BL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/auto_factory.py#L417"}}),A2=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[KXt]},$$scope:{ctx:$}}}),IL=new re({}),NL=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/modeling_auto.py#L808"}}),jL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17953/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/nezha#transformers.NezhaForMaskedLM">NezhaForMaskedLM</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/auto_factory.py#L389"}}),y2=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[ZXt]},$$scope:{ctx:$}}}),DL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/auto_factory.py#L417"}}),hb=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[ezt]},$$scope:{ctx:$}}}),GL=new re({}),OL=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/modeling_auto.py#L815"}}),XL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17953/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/auto_factory.py#L389"}}),_b=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[ozt]},$$scope:{ctx:$}}}),zL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/auto_factory.py#L417"}}),Ib=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[rzt]},$$scope:{ctx:$}}}),QL=new re({}),WL=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/modeling_auto.py#L824"}}),UL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17953/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/bloom#transformers.BloomForSequenceClassification">BloomForSequenceClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/mvp#transformers.MvpForSequenceClassification">MvpForSequenceClassification</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/nezha#transformers.NezhaForSequenceClassification">NezhaForSequenceClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/auto_factory.py#L389"}}),qb=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[tzt]},$$scope:{ctx:$}}}),JL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/auto_factory.py#L417"}}),Iv=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[azt]},$$scope:{ctx:$}}}),YL=new re({}),KL=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/modeling_auto.py#L869"}}),ey=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17953/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/nezha#transformers.NezhaForMultipleChoice">NezhaForMultipleChoice</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/auto_factory.py#L389"}}),qv=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[nzt]},$$scope:{ctx:$}}}),oy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/auto_factory.py#L417"}}),_3=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[szt]},$$scope:{ctx:$}}}),ry=new re({}),ty=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/modeling_auto.py#L876"}}),ny=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17953/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction">NezhaForNextSentencePrediction</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/auto_factory.py#L389"}}),b3=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[lzt]},$$scope:{ctx:$}}}),sy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/auto_factory.py#L417"}}),A3=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[izt]},$$scope:{ctx:$}}}),ly=new re({}),iy=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/modeling_auto.py#L862"}}),cy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17953/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/bloom#transformers.BloomForTokenClassification">BloomForTokenClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/nezha#transformers.NezhaForTokenClassification">NezhaForTokenClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/auto_factory.py#L389"}}),y3=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[dzt]},$$scope:{ctx:$}}}),fy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/auto_factory.py#L417"}}),m5=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[czt]},$$scope:{ctx:$}}}),my=new re({}),gy=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/modeling_auto.py#L833"}}),py=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17953/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/mvp#transformers.MvpForQuestionAnswering">MvpForQuestionAnswering</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/nezha#transformers.NezhaForQuestionAnswering">NezhaForQuestionAnswering</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/auto_factory.py#L389"}}),h5=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[fzt]},$$scope:{ctx:$}}}),_y=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/auto_factory.py#L417"}}),aF=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[mzt]},$$scope:{ctx:$}}}),uy=new re({}),by=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/modeling_auto.py#L840"}}),Fy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17953/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/auto_factory.py#L389"}}),sF=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[gzt]},$$scope:{ctx:$}}}),Ty=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/auto_factory.py#L417"}}),dF=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[hzt]},$$scope:{ctx:$}}}),My=new re({}),Ey=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/modeling_auto.py#L885"}}),wy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17953/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17953/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/pr_17953/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17953/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17953/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/auto_factory.py#L389"}}),fF=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[pzt]},$$scope:{ctx:$}}}),Ay=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/auto_factory.py#L417"}}),wF=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[_zt]},$$scope:{ctx:$}}}),Ly=new re({}),yy=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/modeling_auto.py#L924"}}),$y=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17953/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/auto_factory.py#L389"}}),LF=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[uzt]},$$scope:{ctx:$}}}),ky=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/auto_factory.py#L417"}}),$F=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[bzt]},$$scope:{ctx:$}}}),Sy=new re({}),Ry=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/modeling_auto.py#L851"}}),By=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17953/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/auto_factory.py#L389"}}),SF=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[vzt]},$$scope:{ctx:$}}}),Iy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/auto_factory.py#L417"}}),BF=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[Fzt]},$$scope:{ctx:$}}}),Ny=new re({}),qy=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/modeling_auto.py#L931"}}),Dy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17953/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/auto_factory.py#L389"}}),NF=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[Tzt]},$$scope:{ctx:$}}}),Gy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/auto_factory.py#L417"}}),HF=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[Mzt]},$$scope:{ctx:$}}}),Oy=new re({}),Vy=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/modeling_auto.py#L954"}}),zy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17953/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/auto_factory.py#L389"}}),JF=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[Ezt]},$$scope:{ctx:$}}}),Qy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/auto_factory.py#L417"}}),tT=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[Czt]},$$scope:{ctx:$}}}),Wy=new re({}),Hy=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/modeling_auto.py#L938"}}),Jy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17953/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/auto_factory.py#L389"}}),nT=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[wzt]},$$scope:{ctx:$}}}),Yy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/auto_factory.py#L417"}}),uT=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[Azt]},$$scope:{ctx:$}}}),Ky=new re({}),Zy=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/modeling_auto.py#L945"}}),o8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17953/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/auto_factory.py#L389"}}),vT=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[Lzt]},$$scope:{ctx:$}}}),r8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/auto_factory.py#L417"}}),ET=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[yzt]},$$scope:{ctx:$}}}),a8=new re({}),n8=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/modeling_auto.py#L963"}}),l8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17953/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/auto_factory.py#L389"}}),wT=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[xzt]},$$scope:{ctx:$}}}),i8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/auto_factory.py#L417"}}),ST=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[$zt]},$$scope:{ctx:$}}}),d8=new re({}),c8=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/modeling_auto.py#L970"}}),m8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17953/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/auto_factory.py#L389"}}),PT=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[kzt]},$$scope:{ctx:$}}}),g8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/auto_factory.py#L417"}}),jT=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[Szt]},$$scope:{ctx:$}}}),h8=new re({}),p8=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/modeling_auto.py#L917"}}),u8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17953/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/auto_factory.py#L389"}}),GT=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[Rzt]},$$scope:{ctx:$}}}),b8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/auto_factory.py#L417"}}),zT=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[Pzt]},$$scope:{ctx:$}}}),F8=new re({}),T8=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/modeling_auto.py#L892"}}),E8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17953/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/auto_factory.py#L389"}}),WT=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[Bzt]},$$scope:{ctx:$}}}),C8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/auto_factory.py#L417"}}),JT=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[Izt]},$$scope:{ctx:$}}}),w8=new re({}),A8=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/modeling_auto.py#L899"}}),y8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17953/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/auto_factory.py#L389"}}),KT=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[Nzt]},$$scope:{ctx:$}}}),x8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/auto_factory.py#L417"}}),a7=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[qzt]},$$scope:{ctx:$}}}),$8=new re({}),k8=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/modeling_auto.py#L908"}}),R8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17953/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/auto_factory.py#L389"}}),s7=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[jzt]},$$scope:{ctx:$}}}),P8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/auto_factory.py#L417"}}),d7=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[Dzt]},$$scope:{ctx:$}}}),B8=new re({}),I8=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/modeling_tf_auto.py#L408"}}),q8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17953/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17953/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/regnet#transformers.TFRegNetModel">TFRegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/auto_factory.py#L389"}}),f7=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[Gzt]},$$scope:{ctx:$}}}),j8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/auto_factory.py#L417"}}),n9=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[Ozt]},$$scope:{ctx:$}}}),D8=new re({}),G8=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/modeling_tf_auto.py#L415"}}),V8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17953/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/auto_factory.py#L389"}}),l9=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[Vzt]},$$scope:{ctx:$}}}),X8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/auto_factory.py#L417"}}),k9=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Xzt]},$$scope:{ctx:$}}}),z8=new re({}),Q8=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/modeling_tf_auto.py#L430"}}),H8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17953/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/auto_factory.py#L389"}}),R9=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[zzt]},$$scope:{ctx:$}}}),U8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/auto_factory.py#L417"}}),W9=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Qzt]},$$scope:{ctx:$}}}),J8=new re({}),Y8=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/modeling_tf_auto.py#L446"}}),Z8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17953/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/regnet#transformers.TFRegNetForImageClassification">TFRegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/auto_factory.py#L389"}}),U9=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[Wzt]},$$scope:{ctx:$}}}),ex=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/auto_factory.py#L417"}}),oM=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Hzt]},$$scope:{ctx:$}}}),ox=new re({}),rx=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/modeling_tf_auto.py#L471"}}),ax=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17953/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/auto_factory.py#L389"}}),tM=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[Uzt]},$$scope:{ctx:$}}}),nx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/auto_factory.py#L417"}}),CM=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Jzt]},$$scope:{ctx:$}}}),sx=new re({}),lx=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/modeling_tf_auto.py#L478"}}),dx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17953/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/auto_factory.py#L389"}}),AM=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Yzt]},$$scope:{ctx:$}}}),cx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/auto_factory.py#L417"}}),NM=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Kzt]},$$scope:{ctx:$}}}),fx=new re({}),mx=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/modeling_tf_auto.py#L487"}}),hx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17953/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/auto_factory.py#L389"}}),jM=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[Zzt]},$$scope:{ctx:$}}}),px=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/auto_factory.py#L417"}}),m4=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[eQt]},$$scope:{ctx:$}}}),_x=new re({}),ux=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/modeling_tf_auto.py#L523"}}),vx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17953/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/auto_factory.py#L389"}}),h4=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[oQt]},$$scope:{ctx:$}}}),Fx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/auto_factory.py#L417"}}),S4=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[rQt]},$$scope:{ctx:$}}}),Tx=new re({}),Mx=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/modeling_tf_auto.py#L530"}}),Cx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17953/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/auto_factory.py#L389"}}),P4=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[tQt]},$$scope:{ctx:$}}}),wx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/auto_factory.py#L417"}}),N4=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[aQt]},$$scope:{ctx:$}}}),Lx=new re({}),yx=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/modeling_tf_auto.py#L503"}}),$x=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17953/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/auto_factory.py#L389"}}),j4=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[nQt]},$$scope:{ctx:$}}}),kx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/auto_factory.py#L417"}}),G4=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[sQt]},$$scope:{ctx:$}}}),Sx=new re({}),Rx=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/modeling_tf_auto.py#L514"}}),Bx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17953/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/auto_factory.py#L389"}}),V4=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[lQt]},$$scope:{ctx:$}}}),Ix=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/auto_factory.py#L417"}}),cE=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[iQt]},$$scope:{ctx:$}}}),Nx=new re({}),qx=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/modeling_tf_auto.py#L496"}}),Dx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17953/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/auto_factory.py#L389"}}),mE=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[dQt]},$$scope:{ctx:$}}}),Gx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/auto_factory.py#L417"}}),RE=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[cQt]},$$scope:{ctx:$}}}),Ox=new re({}),Vx=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/modeling_tf_auto.py#L464"}}),zx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17953/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/auto_factory.py#L389"}}),BE=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[fQt]},$$scope:{ctx:$}}}),Qx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/auto_factory.py#L417"}}),NE=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[mQt]},$$scope:{ctx:$}}}),Wx=new re({}),Hx=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/modeling_tf_auto.py#L539"}}),Jx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17953/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/auto_factory.py#L389"}}),jE=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[gQt]},$$scope:{ctx:$}}}),Yx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/auto_factory.py#L417"}}),GE=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[hQt]},$$scope:{ctx:$}}}),Kx=new re({}),Zx=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/modeling_flax_auto.py#L246"}}),o$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17953/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/auto_factory.py#L389"}}),VE=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[pQt]},$$scope:{ctx:$}}}),r$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/auto_factory.py#L417"}}),uC=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[_Qt]},$$scope:{ctx:$}}}),t$=new re({}),a$=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/modeling_flax_auto.py#L260"}}),s$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17953/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/auto_factory.py#L389"}}),vC=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[uQt]},$$scope:{ctx:$}}}),l$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/auto_factory.py#L417"}}),$C=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[bQt]},$$scope:{ctx:$}}}),i$=new re({}),d$=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/modeling_flax_auto.py#L253"}}),f$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17953/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/auto_factory.py#L389"}}),SC=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[vQt]},$$scope:{ctx:$}}}),m$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/auto_factory.py#L417"}}),QC=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[FQt]},$$scope:{ctx:$}}}),g$=new re({}),h$=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/modeling_flax_auto.py#L267"}}),_$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17953/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/auto_factory.py#L389"}}),HC=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[TQt]},$$scope:{ctx:$}}}),u$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/auto_factory.py#L417"}}),n0=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[MQt]},$$scope:{ctx:$}}}),b$=new re({}),v$=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),T$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17953/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/auto_factory.py#L389"}}),l0=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[EQt]},$$scope:{ctx:$}}}),M$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/auto_factory.py#L417"}}),b0=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[CQt]},$$scope:{ctx:$}}}),E$=new re({}),C$=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),A$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17953/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/auto_factory.py#L389"}}),F0=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[wQt]},$$scope:{ctx:$}}}),L$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/auto_factory.py#L417"}}),k0=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[AQt]},$$scope:{ctx:$}}}),y$=new re({}),x$=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),k$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17953/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/auto_factory.py#L389"}}),R0=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[LQt]},$$scope:{ctx:$}}}),S$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/auto_factory.py#L417"}}),X0=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[yQt]},$$scope:{ctx:$}}}),R$=new re({}),P$=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),I$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17953/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/auto_factory.py#L389"}}),Q0=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[xQt]},$$scope:{ctx:$}}}),N$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/auto_factory.py#L417"}}),ow=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[$Qt]},$$scope:{ctx:$}}}),q$=new re({}),j$=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/modeling_flax_auto.py#L308"}}),G$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17953/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/auto_factory.py#L389"}}),tw=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[kQt]},$$scope:{ctx:$}}}),O$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/auto_factory.py#L417"}}),mw=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[SQt]},$$scope:{ctx:$}}}),V$=new re({}),X$=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),Q$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17953/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/auto_factory.py#L389"}}),hw=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[RQt]},$$scope:{ctx:$}}}),W$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/auto_factory.py#L417"}}),_w=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[PQt]},$$scope:{ctx:$}}}),H$=new re({}),U$=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),Y$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17953/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17953/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/auto_factory.py#L389"}}),bw=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[BQt]},$$scope:{ctx:$}}}),K$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/auto_factory.py#L417"}}),Tw=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[IQt]},$$scope:{ctx:$}}}),ek=new re({}),ok=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),tk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17953/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17953/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/auto_factory.py#L389"}}),Ew=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[NQt]},$$scope:{ctx:$}}}),ak=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17953/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17953/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17953/src/transformers/models/auto/auto_factory.py#L417"}}),ww=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[qQt]},$$scope:{ctx:$}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(d.$$.fragment),h=l(),Eo=a("span"),wi=o("Auto Classes"),Sf=l(),nt=a("p"),Ai=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Li=a("code"),z6=o("from_pretrained()"),Rf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Oe=l(),Qe=a("p"),yi=o("Instantiating one of "),Rn=a("a"),Q6=o("AutoConfig"),Pn=o(", "),Bn=a("a"),W6=o("AutoModel"),xi=o(`, and
`),In=a("a"),H6=o("AutoTokenizer"),$i=o(" will directly create a class of the relevant architecture. For instance"),Pf=l(),F($a.$$.fragment),We=l(),Ae=a("p"),wS=o("will create a model that is an instance of "),ki=a("a"),AS=o("BertModel"),LS=o("."),Co=l(),ka=a("p"),yS=o("There is one class of "),Bf=a("code"),xS=o("AutoModel"),xWe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),hVe=l(),Si=a("h2"),If=a("a"),aae=a("span"),F(U6.$$.fragment),$We=l(),nae=a("span"),kWe=o("Extending the Auto Classes"),pVe=l(),Nn=a("p"),SWe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),sae=a("code"),RWe=o("NewModel"),PWe=o(", make sure you have a "),lae=a("code"),BWe=o("NewModelConfig"),IWe=o(` then you can add those to the auto
classes like this:`),_Ve=l(),F(J6.$$.fragment),uVe=l(),$S=a("p"),NWe=o("You will then be able to use the auto classes like you would usually do!"),bVe=l(),F(Nf.$$.fragment),vVe=l(),Ri=a("h2"),qf=a("a"),iae=a("span"),F(Y6.$$.fragment),qWe=l(),dae=a("span"),jWe=o("AutoConfig"),FVe=l(),wo=a("div"),F(K6.$$.fragment),DWe=l(),Z6=a("p"),GWe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),kS=a("a"),OWe=o("from_pretrained()"),VWe=o(" class method."),XWe=l(),eL=a("p"),zWe=o("This class cannot be instantiated directly using "),cae=a("code"),QWe=o("__init__()"),WWe=o(" (throws an error)."),HWe=l(),Ar=a("div"),F(oL.$$.fragment),UWe=l(),fae=a("p"),JWe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),YWe=l(),Pi=a("p"),KWe=o("The configuration class to instantiate is selected based on the "),mae=a("code"),ZWe=o("model_type"),eHe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),gae=a("code"),oHe=o("pretrained_model_name_or_path"),rHe=o(":"),tHe=l(),A=a("ul"),jf=a("li"),hae=a("strong"),aHe=o("albert"),nHe=o(" \u2014 "),SS=a("a"),sHe=o("AlbertConfig"),lHe=o(" (ALBERT model)"),iHe=l(),Df=a("li"),pae=a("strong"),dHe=o("bart"),cHe=o(" \u2014 "),RS=a("a"),fHe=o("BartConfig"),mHe=o(" (BART model)"),gHe=l(),Gf=a("li"),_ae=a("strong"),hHe=o("beit"),pHe=o(" \u2014 "),PS=a("a"),_He=o("BeitConfig"),uHe=o(" (BEiT model)"),bHe=l(),Of=a("li"),uae=a("strong"),vHe=o("bert"),FHe=o(" \u2014 "),BS=a("a"),THe=o("BertConfig"),MHe=o(" (BERT model)"),EHe=l(),Vf=a("li"),bae=a("strong"),CHe=o("bert-generation"),wHe=o(" \u2014 "),IS=a("a"),AHe=o("BertGenerationConfig"),LHe=o(" (Bert Generation model)"),yHe=l(),Xf=a("li"),vae=a("strong"),xHe=o("big_bird"),$He=o(" \u2014 "),NS=a("a"),kHe=o("BigBirdConfig"),SHe=o(" (BigBird model)"),RHe=l(),zf=a("li"),Fae=a("strong"),PHe=o("bigbird_pegasus"),BHe=o(" \u2014 "),qS=a("a"),IHe=o("BigBirdPegasusConfig"),NHe=o(" (BigBird-Pegasus model)"),qHe=l(),Qf=a("li"),Tae=a("strong"),jHe=o("blenderbot"),DHe=o(" \u2014 "),jS=a("a"),GHe=o("BlenderbotConfig"),OHe=o(" (Blenderbot model)"),VHe=l(),Wf=a("li"),Mae=a("strong"),XHe=o("blenderbot-small"),zHe=o(" \u2014 "),DS=a("a"),QHe=o("BlenderbotSmallConfig"),WHe=o(" (BlenderbotSmall model)"),HHe=l(),Hf=a("li"),Eae=a("strong"),UHe=o("bloom"),JHe=o(" \u2014 "),GS=a("a"),YHe=o("BloomConfig"),KHe=o(" (BLOOM model)"),ZHe=l(),Uf=a("li"),Cae=a("strong"),eUe=o("camembert"),oUe=o(" \u2014 "),OS=a("a"),rUe=o("CamembertConfig"),tUe=o(" (CamemBERT model)"),aUe=l(),Jf=a("li"),wae=a("strong"),nUe=o("canine"),sUe=o(" \u2014 "),VS=a("a"),lUe=o("CanineConfig"),iUe=o(" (CANINE model)"),dUe=l(),Yf=a("li"),Aae=a("strong"),cUe=o("clip"),fUe=o(" \u2014 "),XS=a("a"),mUe=o("CLIPConfig"),gUe=o(" (CLIP model)"),hUe=l(),Kf=a("li"),Lae=a("strong"),pUe=o("codegen"),_Ue=o(" \u2014 "),zS=a("a"),uUe=o("CodeGenConfig"),bUe=o(" (CodeGen model)"),vUe=l(),Zf=a("li"),yae=a("strong"),FUe=o("convbert"),TUe=o(" \u2014 "),QS=a("a"),MUe=o("ConvBertConfig"),EUe=o(" (ConvBERT model)"),CUe=l(),em=a("li"),xae=a("strong"),wUe=o("convnext"),AUe=o(" \u2014 "),WS=a("a"),LUe=o("ConvNextConfig"),yUe=o(" (ConvNeXT model)"),xUe=l(),om=a("li"),$ae=a("strong"),$Ue=o("ctrl"),kUe=o(" \u2014 "),HS=a("a"),SUe=o("CTRLConfig"),RUe=o(" (CTRL model)"),PUe=l(),rm=a("li"),kae=a("strong"),BUe=o("cvt"),IUe=o(" \u2014 "),US=a("a"),NUe=o("CvtConfig"),qUe=o(" (CvT model)"),jUe=l(),tm=a("li"),Sae=a("strong"),DUe=o("data2vec-audio"),GUe=o(" \u2014 "),JS=a("a"),OUe=o("Data2VecAudioConfig"),VUe=o(" (Data2VecAudio model)"),XUe=l(),am=a("li"),Rae=a("strong"),zUe=o("data2vec-text"),QUe=o(" \u2014 "),YS=a("a"),WUe=o("Data2VecTextConfig"),HUe=o(" (Data2VecText model)"),UUe=l(),nm=a("li"),Pae=a("strong"),JUe=o("data2vec-vision"),YUe=o(" \u2014 "),KS=a("a"),KUe=o("Data2VecVisionConfig"),ZUe=o(" (Data2VecVision model)"),eJe=l(),sm=a("li"),Bae=a("strong"),oJe=o("deberta"),rJe=o(" \u2014 "),ZS=a("a"),tJe=o("DebertaConfig"),aJe=o(" (DeBERTa model)"),nJe=l(),lm=a("li"),Iae=a("strong"),sJe=o("deberta-v2"),lJe=o(" \u2014 "),eR=a("a"),iJe=o("DebertaV2Config"),dJe=o(" (DeBERTa-v2 model)"),cJe=l(),im=a("li"),Nae=a("strong"),fJe=o("decision_transformer"),mJe=o(" \u2014 "),oR=a("a"),gJe=o("DecisionTransformerConfig"),hJe=o(" (Decision Transformer model)"),pJe=l(),dm=a("li"),qae=a("strong"),_Je=o("deit"),uJe=o(" \u2014 "),rR=a("a"),bJe=o("DeiTConfig"),vJe=o(" (DeiT model)"),FJe=l(),cm=a("li"),jae=a("strong"),TJe=o("detr"),MJe=o(" \u2014 "),tR=a("a"),EJe=o("DetrConfig"),CJe=o(" (DETR model)"),wJe=l(),fm=a("li"),Dae=a("strong"),AJe=o("distilbert"),LJe=o(" \u2014 "),aR=a("a"),yJe=o("DistilBertConfig"),xJe=o(" (DistilBERT model)"),$Je=l(),mm=a("li"),Gae=a("strong"),kJe=o("dpr"),SJe=o(" \u2014 "),nR=a("a"),RJe=o("DPRConfig"),PJe=o(" (DPR model)"),BJe=l(),gm=a("li"),Oae=a("strong"),IJe=o("dpt"),NJe=o(" \u2014 "),sR=a("a"),qJe=o("DPTConfig"),jJe=o(" (DPT model)"),DJe=l(),hm=a("li"),Vae=a("strong"),GJe=o("electra"),OJe=o(" \u2014 "),lR=a("a"),VJe=o("ElectraConfig"),XJe=o(" (ELECTRA model)"),zJe=l(),pm=a("li"),Xae=a("strong"),QJe=o("encoder-decoder"),WJe=o(" \u2014 "),iR=a("a"),HJe=o("EncoderDecoderConfig"),UJe=o(" (Encoder decoder model)"),JJe=l(),_m=a("li"),zae=a("strong"),YJe=o("flaubert"),KJe=o(" \u2014 "),dR=a("a"),ZJe=o("FlaubertConfig"),eYe=o(" (FlauBERT model)"),oYe=l(),um=a("li"),Qae=a("strong"),rYe=o("flava"),tYe=o(" \u2014 "),cR=a("a"),aYe=o("FlavaConfig"),nYe=o(" (FLAVA model)"),sYe=l(),bm=a("li"),Wae=a("strong"),lYe=o("fnet"),iYe=o(" \u2014 "),fR=a("a"),dYe=o("FNetConfig"),cYe=o(" (FNet model)"),fYe=l(),vm=a("li"),Hae=a("strong"),mYe=o("fsmt"),gYe=o(" \u2014 "),mR=a("a"),hYe=o("FSMTConfig"),pYe=o(" (FairSeq Machine-Translation model)"),_Ye=l(),Fm=a("li"),Uae=a("strong"),uYe=o("funnel"),bYe=o(" \u2014 "),gR=a("a"),vYe=o("FunnelConfig"),FYe=o(" (Funnel Transformer model)"),TYe=l(),Tm=a("li"),Jae=a("strong"),MYe=o("glpn"),EYe=o(" \u2014 "),hR=a("a"),CYe=o("GLPNConfig"),wYe=o(" (GLPN model)"),AYe=l(),Mm=a("li"),Yae=a("strong"),LYe=o("gpt2"),yYe=o(" \u2014 "),pR=a("a"),xYe=o("GPT2Config"),$Ye=o(" (OpenAI GPT-2 model)"),kYe=l(),Em=a("li"),Kae=a("strong"),SYe=o("gpt_neo"),RYe=o(" \u2014 "),_R=a("a"),PYe=o("GPTNeoConfig"),BYe=o(" (GPT Neo model)"),IYe=l(),Cm=a("li"),Zae=a("strong"),NYe=o("gpt_neox"),qYe=o(" \u2014 "),uR=a("a"),jYe=o("GPTNeoXConfig"),DYe=o(" (GPT NeoX model)"),GYe=l(),wm=a("li"),ene=a("strong"),OYe=o("gptj"),VYe=o(" \u2014 "),bR=a("a"),XYe=o("GPTJConfig"),zYe=o(" (GPT-J model)"),QYe=l(),Am=a("li"),one=a("strong"),WYe=o("groupvit"),HYe=o(" \u2014 "),vR=a("a"),UYe=o("GroupViTConfig"),JYe=o(" (GroupViT model)"),YYe=l(),Lm=a("li"),rne=a("strong"),KYe=o("hubert"),ZYe=o(" \u2014 "),FR=a("a"),eKe=o("HubertConfig"),oKe=o(" (Hubert model)"),rKe=l(),ym=a("li"),tne=a("strong"),tKe=o("ibert"),aKe=o(" \u2014 "),TR=a("a"),nKe=o("IBertConfig"),sKe=o(" (I-BERT model)"),lKe=l(),xm=a("li"),ane=a("strong"),iKe=o("imagegpt"),dKe=o(" \u2014 "),MR=a("a"),cKe=o("ImageGPTConfig"),fKe=o(" (ImageGPT model)"),mKe=l(),$m=a("li"),nne=a("strong"),gKe=o("layoutlm"),hKe=o(" \u2014 "),ER=a("a"),pKe=o("LayoutLMConfig"),_Ke=o(" (LayoutLM model)"),uKe=l(),km=a("li"),sne=a("strong"),bKe=o("layoutlmv2"),vKe=o(" \u2014 "),CR=a("a"),FKe=o("LayoutLMv2Config"),TKe=o(" (LayoutLMv2 model)"),MKe=l(),Sm=a("li"),lne=a("strong"),EKe=o("layoutlmv3"),CKe=o(" \u2014 "),wR=a("a"),wKe=o("LayoutLMv3Config"),AKe=o(" (LayoutLMv3 model)"),LKe=l(),Rm=a("li"),ine=a("strong"),yKe=o("led"),xKe=o(" \u2014 "),AR=a("a"),$Ke=o("LEDConfig"),kKe=o(" (LED model)"),SKe=l(),Pm=a("li"),dne=a("strong"),RKe=o("levit"),PKe=o(" \u2014 "),LR=a("a"),BKe=o("LevitConfig"),IKe=o(" (LeViT model)"),NKe=l(),Bm=a("li"),cne=a("strong"),qKe=o("longformer"),jKe=o(" \u2014 "),yR=a("a"),DKe=o("LongformerConfig"),GKe=o(" (Longformer model)"),OKe=l(),Im=a("li"),fne=a("strong"),VKe=o("longt5"),XKe=o(" \u2014 "),xR=a("a"),zKe=o("LongT5Config"),QKe=o(" (LongT5 model)"),WKe=l(),Nm=a("li"),mne=a("strong"),HKe=o("luke"),UKe=o(" \u2014 "),$R=a("a"),JKe=o("LukeConfig"),YKe=o(" (LUKE model)"),KKe=l(),qm=a("li"),gne=a("strong"),ZKe=o("lxmert"),eZe=o(" \u2014 "),kR=a("a"),oZe=o("LxmertConfig"),rZe=o(" (LXMERT model)"),tZe=l(),jm=a("li"),hne=a("strong"),aZe=o("m2m_100"),nZe=o(" \u2014 "),SR=a("a"),sZe=o("M2M100Config"),lZe=o(" (M2M100 model)"),iZe=l(),Dm=a("li"),pne=a("strong"),dZe=o("marian"),cZe=o(" \u2014 "),RR=a("a"),fZe=o("MarianConfig"),mZe=o(" (Marian model)"),gZe=l(),Gm=a("li"),_ne=a("strong"),hZe=o("maskformer"),pZe=o(" \u2014 "),PR=a("a"),_Ze=o("MaskFormerConfig"),uZe=o(" (MaskFormer model)"),bZe=l(),Om=a("li"),une=a("strong"),vZe=o("mbart"),FZe=o(" \u2014 "),BR=a("a"),TZe=o("MBartConfig"),MZe=o(" (mBART model)"),EZe=l(),Vm=a("li"),bne=a("strong"),CZe=o("mctct"),wZe=o(" \u2014 "),IR=a("a"),AZe=o("MCTCTConfig"),LZe=o(" (M-CTC-T model)"),yZe=l(),Xm=a("li"),vne=a("strong"),xZe=o("megatron-bert"),$Ze=o(" \u2014 "),NR=a("a"),kZe=o("MegatronBertConfig"),SZe=o(" (Megatron-BERT model)"),RZe=l(),zm=a("li"),Fne=a("strong"),PZe=o("mobilebert"),BZe=o(" \u2014 "),qR=a("a"),IZe=o("MobileBertConfig"),NZe=o(" (MobileBERT model)"),qZe=l(),Qm=a("li"),Tne=a("strong"),jZe=o("mpnet"),DZe=o(" \u2014 "),jR=a("a"),GZe=o("MPNetConfig"),OZe=o(" (MPNet model)"),VZe=l(),Wm=a("li"),Mne=a("strong"),XZe=o("mt5"),zZe=o(" \u2014 "),DR=a("a"),QZe=o("MT5Config"),WZe=o(" (MT5 model)"),HZe=l(),Hm=a("li"),Ene=a("strong"),UZe=o("mvp"),JZe=o(" \u2014 "),GR=a("a"),YZe=o("MvpConfig"),KZe=o(" (MVP model)"),ZZe=l(),Um=a("li"),Cne=a("strong"),eeo=o("nezha"),oeo=o(" \u2014 "),OR=a("a"),reo=o("NezhaConfig"),teo=o(" (Nezha model)"),aeo=l(),Jm=a("li"),wne=a("strong"),neo=o("nystromformer"),seo=o(" \u2014 "),VR=a("a"),leo=o("NystromformerConfig"),ieo=o(" (Nystr\xF6mformer model)"),deo=l(),Ym=a("li"),Ane=a("strong"),ceo=o("openai-gpt"),feo=o(" \u2014 "),XR=a("a"),meo=o("OpenAIGPTConfig"),geo=o(" (OpenAI GPT model)"),heo=l(),Km=a("li"),Lne=a("strong"),peo=o("opt"),_eo=o(" \u2014 "),zR=a("a"),ueo=o("OPTConfig"),beo=o(" (OPT model)"),veo=l(),Zm=a("li"),yne=a("strong"),Feo=o("pegasus"),Teo=o(" \u2014 "),QR=a("a"),Meo=o("PegasusConfig"),Eeo=o(" (Pegasus model)"),Ceo=l(),eg=a("li"),xne=a("strong"),weo=o("perceiver"),Aeo=o(" \u2014 "),WR=a("a"),Leo=o("PerceiverConfig"),yeo=o(" (Perceiver model)"),xeo=l(),og=a("li"),$ne=a("strong"),$eo=o("plbart"),keo=o(" \u2014 "),HR=a("a"),Seo=o("PLBartConfig"),Reo=o(" (PLBart model)"),Peo=l(),rg=a("li"),kne=a("strong"),Beo=o("poolformer"),Ieo=o(" \u2014 "),UR=a("a"),Neo=o("PoolFormerConfig"),qeo=o(" (PoolFormer model)"),jeo=l(),tg=a("li"),Sne=a("strong"),Deo=o("prophetnet"),Geo=o(" \u2014 "),JR=a("a"),Oeo=o("ProphetNetConfig"),Veo=o(" (ProphetNet model)"),Xeo=l(),ag=a("li"),Rne=a("strong"),zeo=o("qdqbert"),Qeo=o(" \u2014 "),YR=a("a"),Weo=o("QDQBertConfig"),Heo=o(" (QDQBert model)"),Ueo=l(),ng=a("li"),Pne=a("strong"),Jeo=o("rag"),Yeo=o(" \u2014 "),KR=a("a"),Keo=o("RagConfig"),Zeo=o(" (RAG model)"),eoo=l(),sg=a("li"),Bne=a("strong"),ooo=o("realm"),roo=o(" \u2014 "),ZR=a("a"),too=o("RealmConfig"),aoo=o(" (REALM model)"),noo=l(),lg=a("li"),Ine=a("strong"),soo=o("reformer"),loo=o(" \u2014 "),eP=a("a"),ioo=o("ReformerConfig"),doo=o(" (Reformer model)"),coo=l(),ig=a("li"),Nne=a("strong"),foo=o("regnet"),moo=o(" \u2014 "),oP=a("a"),goo=o("RegNetConfig"),hoo=o(" (RegNet model)"),poo=l(),dg=a("li"),qne=a("strong"),_oo=o("rembert"),uoo=o(" \u2014 "),rP=a("a"),boo=o("RemBertConfig"),voo=o(" (RemBERT model)"),Foo=l(),cg=a("li"),jne=a("strong"),Too=o("resnet"),Moo=o(" \u2014 "),tP=a("a"),Eoo=o("ResNetConfig"),Coo=o(" (ResNet model)"),woo=l(),fg=a("li"),Dne=a("strong"),Aoo=o("retribert"),Loo=o(" \u2014 "),aP=a("a"),yoo=o("RetriBertConfig"),xoo=o(" (RetriBERT model)"),$oo=l(),mg=a("li"),Gne=a("strong"),koo=o("roberta"),Soo=o(" \u2014 "),nP=a("a"),Roo=o("RobertaConfig"),Poo=o(" (RoBERTa model)"),Boo=l(),gg=a("li"),One=a("strong"),Ioo=o("roformer"),Noo=o(" \u2014 "),sP=a("a"),qoo=o("RoFormerConfig"),joo=o(" (RoFormer model)"),Doo=l(),hg=a("li"),Vne=a("strong"),Goo=o("segformer"),Ooo=o(" \u2014 "),lP=a("a"),Voo=o("SegformerConfig"),Xoo=o(" (SegFormer model)"),zoo=l(),pg=a("li"),Xne=a("strong"),Qoo=o("sew"),Woo=o(" \u2014 "),iP=a("a"),Hoo=o("SEWConfig"),Uoo=o(" (SEW model)"),Joo=l(),_g=a("li"),zne=a("strong"),Yoo=o("sew-d"),Koo=o(" \u2014 "),dP=a("a"),Zoo=o("SEWDConfig"),ero=o(" (SEW-D model)"),oro=l(),ug=a("li"),Qne=a("strong"),rro=o("speech-encoder-decoder"),tro=o(" \u2014 "),cP=a("a"),aro=o("SpeechEncoderDecoderConfig"),nro=o(" (Speech Encoder decoder model)"),sro=l(),bg=a("li"),Wne=a("strong"),lro=o("speech_to_text"),iro=o(" \u2014 "),fP=a("a"),dro=o("Speech2TextConfig"),cro=o(" (Speech2Text model)"),fro=l(),vg=a("li"),Hne=a("strong"),mro=o("speech_to_text_2"),gro=o(" \u2014 "),mP=a("a"),hro=o("Speech2Text2Config"),pro=o(" (Speech2Text2 model)"),_ro=l(),Fg=a("li"),Une=a("strong"),uro=o("splinter"),bro=o(" \u2014 "),gP=a("a"),vro=o("SplinterConfig"),Fro=o(" (Splinter model)"),Tro=l(),Tg=a("li"),Jne=a("strong"),Mro=o("squeezebert"),Ero=o(" \u2014 "),hP=a("a"),Cro=o("SqueezeBertConfig"),wro=o(" (SqueezeBERT model)"),Aro=l(),Mg=a("li"),Yne=a("strong"),Lro=o("swin"),yro=o(" \u2014 "),pP=a("a"),xro=o("SwinConfig"),$ro=o(" (Swin Transformer model)"),kro=l(),Eg=a("li"),Kne=a("strong"),Sro=o("t5"),Rro=o(" \u2014 "),_P=a("a"),Pro=o("T5Config"),Bro=o(" (T5 model)"),Iro=l(),Cg=a("li"),Zne=a("strong"),Nro=o("tapas"),qro=o(" \u2014 "),uP=a("a"),jro=o("TapasConfig"),Dro=o(" (TAPAS model)"),Gro=l(),wg=a("li"),ese=a("strong"),Oro=o("trajectory_transformer"),Vro=o(" \u2014 "),bP=a("a"),Xro=o("TrajectoryTransformerConfig"),zro=o(" (Trajectory Transformer model)"),Qro=l(),Ag=a("li"),ose=a("strong"),Wro=o("transfo-xl"),Hro=o(" \u2014 "),vP=a("a"),Uro=o("TransfoXLConfig"),Jro=o(" (Transformer-XL model)"),Yro=l(),Lg=a("li"),rse=a("strong"),Kro=o("trocr"),Zro=o(" \u2014 "),FP=a("a"),eto=o("TrOCRConfig"),oto=o(" (TrOCR model)"),rto=l(),yg=a("li"),tse=a("strong"),tto=o("unispeech"),ato=o(" \u2014 "),TP=a("a"),nto=o("UniSpeechConfig"),sto=o(" (UniSpeech model)"),lto=l(),xg=a("li"),ase=a("strong"),ito=o("unispeech-sat"),dto=o(" \u2014 "),MP=a("a"),cto=o("UniSpeechSatConfig"),fto=o(" (UniSpeechSat model)"),mto=l(),$g=a("li"),nse=a("strong"),gto=o("van"),hto=o(" \u2014 "),EP=a("a"),pto=o("VanConfig"),_to=o(" (VAN model)"),uto=l(),kg=a("li"),sse=a("strong"),bto=o("vilt"),vto=o(" \u2014 "),CP=a("a"),Fto=o("ViltConfig"),Tto=o(" (ViLT model)"),Mto=l(),Sg=a("li"),lse=a("strong"),Eto=o("vision-encoder-decoder"),Cto=o(" \u2014 "),wP=a("a"),wto=o("VisionEncoderDecoderConfig"),Ato=o(" (Vision Encoder decoder model)"),Lto=l(),Rg=a("li"),ise=a("strong"),yto=o("vision-text-dual-encoder"),xto=o(" \u2014 "),AP=a("a"),$to=o("VisionTextDualEncoderConfig"),kto=o(" (VisionTextDualEncoder model)"),Sto=l(),Pg=a("li"),dse=a("strong"),Rto=o("visual_bert"),Pto=o(" \u2014 "),LP=a("a"),Bto=o("VisualBertConfig"),Ito=o(" (VisualBERT model)"),Nto=l(),Bg=a("li"),cse=a("strong"),qto=o("vit"),jto=o(" \u2014 "),yP=a("a"),Dto=o("ViTConfig"),Gto=o(" (ViT model)"),Oto=l(),Ig=a("li"),fse=a("strong"),Vto=o("vit_mae"),Xto=o(" \u2014 "),xP=a("a"),zto=o("ViTMAEConfig"),Qto=o(" (ViTMAE model)"),Wto=l(),Ng=a("li"),mse=a("strong"),Hto=o("wav2vec2"),Uto=o(" \u2014 "),$P=a("a"),Jto=o("Wav2Vec2Config"),Yto=o(" (Wav2Vec2 model)"),Kto=l(),qg=a("li"),gse=a("strong"),Zto=o("wav2vec2-conformer"),eao=o(" \u2014 "),kP=a("a"),oao=o("Wav2Vec2ConformerConfig"),rao=o(" (Wav2Vec2-Conformer model)"),tao=l(),jg=a("li"),hse=a("strong"),aao=o("wavlm"),nao=o(" \u2014 "),SP=a("a"),sao=o("WavLMConfig"),lao=o(" (WavLM model)"),iao=l(),Dg=a("li"),pse=a("strong"),dao=o("xglm"),cao=o(" \u2014 "),RP=a("a"),fao=o("XGLMConfig"),mao=o(" (XGLM model)"),gao=l(),Gg=a("li"),_se=a("strong"),hao=o("xlm"),pao=o(" \u2014 "),PP=a("a"),_ao=o("XLMConfig"),uao=o(" (XLM model)"),bao=l(),Og=a("li"),use=a("strong"),vao=o("xlm-prophetnet"),Fao=o(" \u2014 "),BP=a("a"),Tao=o("XLMProphetNetConfig"),Mao=o(" (XLM-ProphetNet model)"),Eao=l(),Vg=a("li"),bse=a("strong"),Cao=o("xlm-roberta"),wao=o(" \u2014 "),IP=a("a"),Aao=o("XLMRobertaConfig"),Lao=o(" (XLM-RoBERTa model)"),yao=l(),Xg=a("li"),vse=a("strong"),xao=o("xlm-roberta-xl"),$ao=o(" \u2014 "),NP=a("a"),kao=o("XLMRobertaXLConfig"),Sao=o(" (XLM-RoBERTa-XL model)"),Rao=l(),zg=a("li"),Fse=a("strong"),Pao=o("xlnet"),Bao=o(" \u2014 "),qP=a("a"),Iao=o("XLNetConfig"),Nao=o(" (XLNet model)"),qao=l(),Qg=a("li"),Tse=a("strong"),jao=o("yolos"),Dao=o(" \u2014 "),jP=a("a"),Gao=o("YolosConfig"),Oao=o(" (YOLOS model)"),Vao=l(),Wg=a("li"),Mse=a("strong"),Xao=o("yoso"),zao=o(" \u2014 "),DP=a("a"),Qao=o("YosoConfig"),Wao=o(" (YOSO model)"),Hao=l(),F(Hg.$$.fragment),Uao=l(),Ug=a("div"),F(rL.$$.fragment),Jao=l(),Ese=a("p"),Yao=o("Register a new configuration for this class."),TVe=l(),Bi=a("h2"),Jg=a("a"),Cse=a("span"),F(tL.$$.fragment),Kao=l(),wse=a("span"),Zao=o("AutoTokenizer"),MVe=l(),Ao=a("div"),F(aL.$$.fragment),eno=l(),nL=a("p"),ono=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),GP=a("a"),rno=o("AutoTokenizer.from_pretrained()"),tno=o(" class method."),ano=l(),sL=a("p"),nno=o("This class cannot be instantiated directly using "),Ase=a("code"),sno=o("__init__()"),lno=o(" (throws an error)."),ino=l(),Lr=a("div"),F(lL.$$.fragment),dno=l(),Lse=a("p"),cno=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),fno=l(),Sa=a("p"),mno=o("The tokenizer class to instantiate is selected based on the "),yse=a("code"),gno=o("model_type"),hno=o(` property of the config object (either
passed as an argument or loaded from `),xse=a("code"),pno=o("pretrained_model_name_or_path"),_no=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$se=a("code"),uno=o("pretrained_model_name_or_path"),bno=o(":"),vno=l(),k=a("ul"),qn=a("li"),kse=a("strong"),Fno=o("albert"),Tno=o(" \u2014 "),OP=a("a"),Mno=o("AlbertTokenizer"),Eno=o(" or "),VP=a("a"),Cno=o("AlbertTokenizerFast"),wno=o(" (ALBERT model)"),Ano=l(),jn=a("li"),Sse=a("strong"),Lno=o("bart"),yno=o(" \u2014 "),XP=a("a"),xno=o("BartTokenizer"),$no=o(" or "),zP=a("a"),kno=o("BartTokenizerFast"),Sno=o(" (BART model)"),Rno=l(),Dn=a("li"),Rse=a("strong"),Pno=o("barthez"),Bno=o(" \u2014 "),QP=a("a"),Ino=o("BarthezTokenizer"),Nno=o(" or "),WP=a("a"),qno=o("BarthezTokenizerFast"),jno=o(" (BARThez model)"),Dno=l(),Yg=a("li"),Pse=a("strong"),Gno=o("bartpho"),Ono=o(" \u2014 "),HP=a("a"),Vno=o("BartphoTokenizer"),Xno=o(" (BARTpho model)"),zno=l(),Gn=a("li"),Bse=a("strong"),Qno=o("bert"),Wno=o(" \u2014 "),UP=a("a"),Hno=o("BertTokenizer"),Uno=o(" or "),JP=a("a"),Jno=o("BertTokenizerFast"),Yno=o(" (BERT model)"),Kno=l(),Kg=a("li"),Ise=a("strong"),Zno=o("bert-generation"),eso=o(" \u2014 "),YP=a("a"),oso=o("BertGenerationTokenizer"),rso=o(" (Bert Generation model)"),tso=l(),Zg=a("li"),Nse=a("strong"),aso=o("bert-japanese"),nso=o(" \u2014 "),KP=a("a"),sso=o("BertJapaneseTokenizer"),lso=o(" (BertJapanese model)"),iso=l(),eh=a("li"),qse=a("strong"),dso=o("bertweet"),cso=o(" \u2014 "),ZP=a("a"),fso=o("BertweetTokenizer"),mso=o(" (BERTweet model)"),gso=l(),On=a("li"),jse=a("strong"),hso=o("big_bird"),pso=o(" \u2014 "),eB=a("a"),_so=o("BigBirdTokenizer"),uso=o(" or "),oB=a("a"),bso=o("BigBirdTokenizerFast"),vso=o(" (BigBird model)"),Fso=l(),Vn=a("li"),Dse=a("strong"),Tso=o("bigbird_pegasus"),Mso=o(" \u2014 "),rB=a("a"),Eso=o("PegasusTokenizer"),Cso=o(" or "),tB=a("a"),wso=o("PegasusTokenizerFast"),Aso=o(" (BigBird-Pegasus model)"),Lso=l(),Xn=a("li"),Gse=a("strong"),yso=o("blenderbot"),xso=o(" \u2014 "),aB=a("a"),$so=o("BlenderbotTokenizer"),kso=o(" or "),nB=a("a"),Sso=o("BlenderbotTokenizerFast"),Rso=o(" (Blenderbot model)"),Pso=l(),oh=a("li"),Ose=a("strong"),Bso=o("blenderbot-small"),Iso=o(" \u2014 "),sB=a("a"),Nso=o("BlenderbotSmallTokenizer"),qso=o(" (BlenderbotSmall model)"),jso=l(),rh=a("li"),Vse=a("strong"),Dso=o("bloom"),Gso=o(" \u2014 "),lB=a("a"),Oso=o("BloomTokenizerFast"),Vso=o(" (BLOOM model)"),Xso=l(),th=a("li"),Xse=a("strong"),zso=o("byt5"),Qso=o(" \u2014 "),iB=a("a"),Wso=o("ByT5Tokenizer"),Hso=o(" (ByT5 model)"),Uso=l(),zn=a("li"),zse=a("strong"),Jso=o("camembert"),Yso=o(" \u2014 "),dB=a("a"),Kso=o("CamembertTokenizer"),Zso=o(" or "),cB=a("a"),elo=o("CamembertTokenizerFast"),olo=o(" (CamemBERT model)"),rlo=l(),ah=a("li"),Qse=a("strong"),tlo=o("canine"),alo=o(" \u2014 "),fB=a("a"),nlo=o("CanineTokenizer"),slo=o(" (CANINE model)"),llo=l(),Qn=a("li"),Wse=a("strong"),ilo=o("clip"),dlo=o(" \u2014 "),mB=a("a"),clo=o("CLIPTokenizer"),flo=o(" or "),gB=a("a"),mlo=o("CLIPTokenizerFast"),glo=o(" (CLIP model)"),hlo=l(),Wn=a("li"),Hse=a("strong"),plo=o("codegen"),_lo=o(" \u2014 "),hB=a("a"),ulo=o("CodeGenTokenizer"),blo=o(" or "),pB=a("a"),vlo=o("CodeGenTokenizerFast"),Flo=o(" (CodeGen model)"),Tlo=l(),Hn=a("li"),Use=a("strong"),Mlo=o("convbert"),Elo=o(" \u2014 "),_B=a("a"),Clo=o("ConvBertTokenizer"),wlo=o(" or "),uB=a("a"),Alo=o("ConvBertTokenizerFast"),Llo=o(" (ConvBERT model)"),ylo=l(),Un=a("li"),Jse=a("strong"),xlo=o("cpm"),$lo=o(" \u2014 "),bB=a("a"),klo=o("CpmTokenizer"),Slo=o(" or "),vB=a("a"),Rlo=o("CpmTokenizerFast"),Plo=o(" (CPM model)"),Blo=l(),nh=a("li"),Yse=a("strong"),Ilo=o("ctrl"),Nlo=o(" \u2014 "),FB=a("a"),qlo=o("CTRLTokenizer"),jlo=o(" (CTRL model)"),Dlo=l(),Jn=a("li"),Kse=a("strong"),Glo=o("data2vec-text"),Olo=o(" \u2014 "),TB=a("a"),Vlo=o("RobertaTokenizer"),Xlo=o(" or "),MB=a("a"),zlo=o("RobertaTokenizerFast"),Qlo=o(" (Data2VecText model)"),Wlo=l(),Yn=a("li"),Zse=a("strong"),Hlo=o("deberta"),Ulo=o(" \u2014 "),EB=a("a"),Jlo=o("DebertaTokenizer"),Ylo=o(" or "),CB=a("a"),Klo=o("DebertaTokenizerFast"),Zlo=o(" (DeBERTa model)"),eio=l(),Kn=a("li"),ele=a("strong"),oio=o("deberta-v2"),rio=o(" \u2014 "),wB=a("a"),tio=o("DebertaV2Tokenizer"),aio=o(" or "),AB=a("a"),nio=o("DebertaV2TokenizerFast"),sio=o(" (DeBERTa-v2 model)"),lio=l(),Zn=a("li"),ole=a("strong"),iio=o("distilbert"),dio=o(" \u2014 "),LB=a("a"),cio=o("DistilBertTokenizer"),fio=o(" or "),yB=a("a"),mio=o("DistilBertTokenizerFast"),gio=o(" (DistilBERT model)"),hio=l(),es=a("li"),rle=a("strong"),pio=o("dpr"),_io=o(" \u2014 "),xB=a("a"),uio=o("DPRQuestionEncoderTokenizer"),bio=o(" or "),$B=a("a"),vio=o("DPRQuestionEncoderTokenizerFast"),Fio=o(" (DPR model)"),Tio=l(),os=a("li"),tle=a("strong"),Mio=o("electra"),Eio=o(" \u2014 "),kB=a("a"),Cio=o("ElectraTokenizer"),wio=o(" or "),SB=a("a"),Aio=o("ElectraTokenizerFast"),Lio=o(" (ELECTRA model)"),yio=l(),sh=a("li"),ale=a("strong"),xio=o("flaubert"),$io=o(" \u2014 "),RB=a("a"),kio=o("FlaubertTokenizer"),Sio=o(" (FlauBERT model)"),Rio=l(),rs=a("li"),nle=a("strong"),Pio=o("fnet"),Bio=o(" \u2014 "),PB=a("a"),Iio=o("FNetTokenizer"),Nio=o(" or "),BB=a("a"),qio=o("FNetTokenizerFast"),jio=o(" (FNet model)"),Dio=l(),lh=a("li"),sle=a("strong"),Gio=o("fsmt"),Oio=o(" \u2014 "),IB=a("a"),Vio=o("FSMTTokenizer"),Xio=o(" (FairSeq Machine-Translation model)"),zio=l(),ts=a("li"),lle=a("strong"),Qio=o("funnel"),Wio=o(" \u2014 "),NB=a("a"),Hio=o("FunnelTokenizer"),Uio=o(" or "),qB=a("a"),Jio=o("FunnelTokenizerFast"),Yio=o(" (Funnel Transformer model)"),Kio=l(),as=a("li"),ile=a("strong"),Zio=o("gpt2"),edo=o(" \u2014 "),jB=a("a"),odo=o("GPT2Tokenizer"),rdo=o(" or "),DB=a("a"),tdo=o("GPT2TokenizerFast"),ado=o(" (OpenAI GPT-2 model)"),ndo=l(),ns=a("li"),dle=a("strong"),sdo=o("gpt_neo"),ldo=o(" \u2014 "),GB=a("a"),ido=o("GPT2Tokenizer"),ddo=o(" or "),OB=a("a"),cdo=o("GPT2TokenizerFast"),fdo=o(" (GPT Neo model)"),mdo=l(),ih=a("li"),cle=a("strong"),gdo=o("gpt_neox"),hdo=o(" \u2014 "),VB=a("a"),pdo=o("GPTNeoXTokenizerFast"),_do=o(" (GPT NeoX model)"),udo=l(),ss=a("li"),fle=a("strong"),bdo=o("gptj"),vdo=o(" \u2014 "),XB=a("a"),Fdo=o("GPT2Tokenizer"),Tdo=o(" or "),zB=a("a"),Mdo=o("GPT2TokenizerFast"),Edo=o(" (GPT-J model)"),Cdo=l(),ls=a("li"),mle=a("strong"),wdo=o("groupvit"),Ado=o(" \u2014 "),QB=a("a"),Ldo=o("CLIPTokenizer"),ydo=o(" or "),WB=a("a"),xdo=o("CLIPTokenizerFast"),$do=o(" (GroupViT model)"),kdo=l(),is=a("li"),gle=a("strong"),Sdo=o("herbert"),Rdo=o(" \u2014 "),HB=a("a"),Pdo=o("HerbertTokenizer"),Bdo=o(" or "),UB=a("a"),Ido=o("HerbertTokenizerFast"),Ndo=o(" (HerBERT model)"),qdo=l(),dh=a("li"),hle=a("strong"),jdo=o("hubert"),Ddo=o(" \u2014 "),JB=a("a"),Gdo=o("Wav2Vec2CTCTokenizer"),Odo=o(" (Hubert model)"),Vdo=l(),ds=a("li"),ple=a("strong"),Xdo=o("ibert"),zdo=o(" \u2014 "),YB=a("a"),Qdo=o("RobertaTokenizer"),Wdo=o(" or "),KB=a("a"),Hdo=o("RobertaTokenizerFast"),Udo=o(" (I-BERT model)"),Jdo=l(),cs=a("li"),_le=a("strong"),Ydo=o("layoutlm"),Kdo=o(" \u2014 "),ZB=a("a"),Zdo=o("LayoutLMTokenizer"),eco=o(" or "),eI=a("a"),oco=o("LayoutLMTokenizerFast"),rco=o(" (LayoutLM model)"),tco=l(),fs=a("li"),ule=a("strong"),aco=o("layoutlmv2"),nco=o(" \u2014 "),oI=a("a"),sco=o("LayoutLMv2Tokenizer"),lco=o(" or "),rI=a("a"),ico=o("LayoutLMv2TokenizerFast"),dco=o(" (LayoutLMv2 model)"),cco=l(),ms=a("li"),ble=a("strong"),fco=o("layoutlmv3"),mco=o(" \u2014 "),tI=a("a"),gco=o("LayoutLMv3Tokenizer"),hco=o(" or "),aI=a("a"),pco=o("LayoutLMv3TokenizerFast"),_co=o(" (LayoutLMv3 model)"),uco=l(),gs=a("li"),vle=a("strong"),bco=o("layoutxlm"),vco=o(" \u2014 "),nI=a("a"),Fco=o("LayoutXLMTokenizer"),Tco=o(" or "),sI=a("a"),Mco=o("LayoutXLMTokenizerFast"),Eco=o(" (LayoutXLM model)"),Cco=l(),hs=a("li"),Fle=a("strong"),wco=o("led"),Aco=o(" \u2014 "),lI=a("a"),Lco=o("LEDTokenizer"),yco=o(" or "),iI=a("a"),xco=o("LEDTokenizerFast"),$co=o(" (LED model)"),kco=l(),ps=a("li"),Tle=a("strong"),Sco=o("longformer"),Rco=o(" \u2014 "),dI=a("a"),Pco=o("LongformerTokenizer"),Bco=o(" or "),cI=a("a"),Ico=o("LongformerTokenizerFast"),Nco=o(" (Longformer model)"),qco=l(),_s=a("li"),Mle=a("strong"),jco=o("longt5"),Dco=o(" \u2014 "),fI=a("a"),Gco=o("T5Tokenizer"),Oco=o(" or "),mI=a("a"),Vco=o("T5TokenizerFast"),Xco=o(" (LongT5 model)"),zco=l(),ch=a("li"),Ele=a("strong"),Qco=o("luke"),Wco=o(" \u2014 "),gI=a("a"),Hco=o("LukeTokenizer"),Uco=o(" (LUKE model)"),Jco=l(),us=a("li"),Cle=a("strong"),Yco=o("lxmert"),Kco=o(" \u2014 "),hI=a("a"),Zco=o("LxmertTokenizer"),efo=o(" or "),pI=a("a"),ofo=o("LxmertTokenizerFast"),rfo=o(" (LXMERT model)"),tfo=l(),fh=a("li"),wle=a("strong"),afo=o("m2m_100"),nfo=o(" \u2014 "),_I=a("a"),sfo=o("M2M100Tokenizer"),lfo=o(" (M2M100 model)"),ifo=l(),mh=a("li"),Ale=a("strong"),dfo=o("marian"),cfo=o(" \u2014 "),uI=a("a"),ffo=o("MarianTokenizer"),mfo=o(" (Marian model)"),gfo=l(),bs=a("li"),Lle=a("strong"),hfo=o("mbart"),pfo=o(" \u2014 "),bI=a("a"),_fo=o("MBartTokenizer"),ufo=o(" or "),vI=a("a"),bfo=o("MBartTokenizerFast"),vfo=o(" (mBART model)"),Ffo=l(),vs=a("li"),yle=a("strong"),Tfo=o("mbart50"),Mfo=o(" \u2014 "),FI=a("a"),Efo=o("MBart50Tokenizer"),Cfo=o(" or "),TI=a("a"),wfo=o("MBart50TokenizerFast"),Afo=o(" (mBART-50 model)"),Lfo=l(),Fs=a("li"),xle=a("strong"),yfo=o("megatron-bert"),xfo=o(" \u2014 "),MI=a("a"),$fo=o("BertTokenizer"),kfo=o(" or "),EI=a("a"),Sfo=o("BertTokenizerFast"),Rfo=o(" (Megatron-BERT model)"),Pfo=l(),gh=a("li"),$le=a("strong"),Bfo=o("mluke"),Ifo=o(" \u2014 "),CI=a("a"),Nfo=o("MLukeTokenizer"),qfo=o(" (mLUKE model)"),jfo=l(),Ts=a("li"),kle=a("strong"),Dfo=o("mobilebert"),Gfo=o(" \u2014 "),wI=a("a"),Ofo=o("MobileBertTokenizer"),Vfo=o(" or "),AI=a("a"),Xfo=o("MobileBertTokenizerFast"),zfo=o(" (MobileBERT model)"),Qfo=l(),Ms=a("li"),Sle=a("strong"),Wfo=o("mpnet"),Hfo=o(" \u2014 "),LI=a("a"),Ufo=o("MPNetTokenizer"),Jfo=o(" or "),yI=a("a"),Yfo=o("MPNetTokenizerFast"),Kfo=o(" (MPNet model)"),Zfo=l(),Es=a("li"),Rle=a("strong"),emo=o("mt5"),omo=o(" \u2014 "),xI=a("a"),rmo=o("MT5Tokenizer"),tmo=o(" or "),$I=a("a"),amo=o("MT5TokenizerFast"),nmo=o(" (MT5 model)"),smo=l(),Cs=a("li"),Ple=a("strong"),lmo=o("mvp"),imo=o(" \u2014 "),kI=a("a"),dmo=o("MvpTokenizer"),cmo=o(" or "),SI=a("a"),fmo=o("MvpTokenizerFast"),mmo=o(" (MVP model)"),gmo=l(),ws=a("li"),Ble=a("strong"),hmo=o("nezha"),pmo=o(" \u2014 "),RI=a("a"),_mo=o("BertTokenizer"),umo=o(" or "),PI=a("a"),bmo=o("BertTokenizerFast"),vmo=o(" (Nezha model)"),Fmo=l(),As=a("li"),Ile=a("strong"),Tmo=o("nystromformer"),Mmo=o(" \u2014 "),BI=a("a"),Emo=o("AlbertTokenizer"),Cmo=o(" or "),II=a("a"),wmo=o("AlbertTokenizerFast"),Amo=o(" (Nystr\xF6mformer model)"),Lmo=l(),Ls=a("li"),Nle=a("strong"),ymo=o("openai-gpt"),xmo=o(" \u2014 "),NI=a("a"),$mo=o("OpenAIGPTTokenizer"),kmo=o(" or "),qI=a("a"),Smo=o("OpenAIGPTTokenizerFast"),Rmo=o(" (OpenAI GPT model)"),Pmo=l(),hh=a("li"),qle=a("strong"),Bmo=o("opt"),Imo=o(" \u2014 "),jI=a("a"),Nmo=o("GPT2Tokenizer"),qmo=o(" (OPT model)"),jmo=l(),ys=a("li"),jle=a("strong"),Dmo=o("pegasus"),Gmo=o(" \u2014 "),DI=a("a"),Omo=o("PegasusTokenizer"),Vmo=o(" or "),GI=a("a"),Xmo=o("PegasusTokenizerFast"),zmo=o(" (Pegasus model)"),Qmo=l(),ph=a("li"),Dle=a("strong"),Wmo=o("perceiver"),Hmo=o(" \u2014 "),OI=a("a"),Umo=o("PerceiverTokenizer"),Jmo=o(" (Perceiver model)"),Ymo=l(),_h=a("li"),Gle=a("strong"),Kmo=o("phobert"),Zmo=o(" \u2014 "),VI=a("a"),ego=o("PhobertTokenizer"),ogo=o(" (PhoBERT model)"),rgo=l(),uh=a("li"),Ole=a("strong"),tgo=o("plbart"),ago=o(" \u2014 "),XI=a("a"),ngo=o("PLBartTokenizer"),sgo=o(" (PLBart model)"),lgo=l(),bh=a("li"),Vle=a("strong"),igo=o("prophetnet"),dgo=o(" \u2014 "),zI=a("a"),cgo=o("ProphetNetTokenizer"),fgo=o(" (ProphetNet model)"),mgo=l(),xs=a("li"),Xle=a("strong"),ggo=o("qdqbert"),hgo=o(" \u2014 "),QI=a("a"),pgo=o("BertTokenizer"),_go=o(" or "),WI=a("a"),ugo=o("BertTokenizerFast"),bgo=o(" (QDQBert model)"),vgo=l(),vh=a("li"),zle=a("strong"),Fgo=o("rag"),Tgo=o(" \u2014 "),HI=a("a"),Mgo=o("RagTokenizer"),Ego=o(" (RAG model)"),Cgo=l(),$s=a("li"),Qle=a("strong"),wgo=o("realm"),Ago=o(" \u2014 "),UI=a("a"),Lgo=o("RealmTokenizer"),ygo=o(" or "),JI=a("a"),xgo=o("RealmTokenizerFast"),$go=o(" (REALM model)"),kgo=l(),ks=a("li"),Wle=a("strong"),Sgo=o("reformer"),Rgo=o(" \u2014 "),YI=a("a"),Pgo=o("ReformerTokenizer"),Bgo=o(" or "),KI=a("a"),Igo=o("ReformerTokenizerFast"),Ngo=o(" (Reformer model)"),qgo=l(),Ss=a("li"),Hle=a("strong"),jgo=o("rembert"),Dgo=o(" \u2014 "),ZI=a("a"),Ggo=o("RemBertTokenizer"),Ogo=o(" or "),eN=a("a"),Vgo=o("RemBertTokenizerFast"),Xgo=o(" (RemBERT model)"),zgo=l(),Rs=a("li"),Ule=a("strong"),Qgo=o("retribert"),Wgo=o(" \u2014 "),oN=a("a"),Hgo=o("RetriBertTokenizer"),Ugo=o(" or "),rN=a("a"),Jgo=o("RetriBertTokenizerFast"),Ygo=o(" (RetriBERT model)"),Kgo=l(),Ps=a("li"),Jle=a("strong"),Zgo=o("roberta"),eho=o(" \u2014 "),tN=a("a"),oho=o("RobertaTokenizer"),rho=o(" or "),aN=a("a"),tho=o("RobertaTokenizerFast"),aho=o(" (RoBERTa model)"),nho=l(),Bs=a("li"),Yle=a("strong"),sho=o("roformer"),lho=o(" \u2014 "),nN=a("a"),iho=o("RoFormerTokenizer"),dho=o(" or "),sN=a("a"),cho=o("RoFormerTokenizerFast"),fho=o(" (RoFormer model)"),mho=l(),Fh=a("li"),Kle=a("strong"),gho=o("speech_to_text"),hho=o(" \u2014 "),lN=a("a"),pho=o("Speech2TextTokenizer"),_ho=o(" (Speech2Text model)"),uho=l(),Th=a("li"),Zle=a("strong"),bho=o("speech_to_text_2"),vho=o(" \u2014 "),iN=a("a"),Fho=o("Speech2Text2Tokenizer"),Tho=o(" (Speech2Text2 model)"),Mho=l(),Is=a("li"),eie=a("strong"),Eho=o("splinter"),Cho=o(" \u2014 "),dN=a("a"),who=o("SplinterTokenizer"),Aho=o(" or "),cN=a("a"),Lho=o("SplinterTokenizerFast"),yho=o(" (Splinter model)"),xho=l(),Ns=a("li"),oie=a("strong"),$ho=o("squeezebert"),kho=o(" \u2014 "),fN=a("a"),Sho=o("SqueezeBertTokenizer"),Rho=o(" or "),mN=a("a"),Pho=o("SqueezeBertTokenizerFast"),Bho=o(" (SqueezeBERT model)"),Iho=l(),qs=a("li"),rie=a("strong"),Nho=o("t5"),qho=o(" \u2014 "),gN=a("a"),jho=o("T5Tokenizer"),Dho=o(" or "),hN=a("a"),Gho=o("T5TokenizerFast"),Oho=o(" (T5 model)"),Vho=l(),Mh=a("li"),tie=a("strong"),Xho=o("tapas"),zho=o(" \u2014 "),pN=a("a"),Qho=o("TapasTokenizer"),Who=o(" (TAPAS model)"),Hho=l(),Eh=a("li"),aie=a("strong"),Uho=o("tapex"),Jho=o(" \u2014 "),_N=a("a"),Yho=o("TapexTokenizer"),Kho=o(" (TAPEX model)"),Zho=l(),Ch=a("li"),nie=a("strong"),epo=o("transfo-xl"),opo=o(" \u2014 "),uN=a("a"),rpo=o("TransfoXLTokenizer"),tpo=o(" (Transformer-XL model)"),apo=l(),js=a("li"),sie=a("strong"),npo=o("vilt"),spo=o(" \u2014 "),bN=a("a"),lpo=o("BertTokenizer"),ipo=o(" or "),vN=a("a"),dpo=o("BertTokenizerFast"),cpo=o(" (ViLT model)"),fpo=l(),Ds=a("li"),lie=a("strong"),mpo=o("visual_bert"),gpo=o(" \u2014 "),FN=a("a"),hpo=o("BertTokenizer"),ppo=o(" or "),TN=a("a"),_po=o("BertTokenizerFast"),upo=o(" (VisualBERT model)"),bpo=l(),wh=a("li"),iie=a("strong"),vpo=o("wav2vec2"),Fpo=o(" \u2014 "),MN=a("a"),Tpo=o("Wav2Vec2CTCTokenizer"),Mpo=o(" (Wav2Vec2 model)"),Epo=l(),Ah=a("li"),die=a("strong"),Cpo=o("wav2vec2-conformer"),wpo=o(" \u2014 "),EN=a("a"),Apo=o("Wav2Vec2CTCTokenizer"),Lpo=o(" (Wav2Vec2-Conformer model)"),ypo=l(),Lh=a("li"),cie=a("strong"),xpo=o("wav2vec2_phoneme"),$po=o(" \u2014 "),CN=a("a"),kpo=o("Wav2Vec2PhonemeCTCTokenizer"),Spo=o(" (Wav2Vec2Phoneme model)"),Rpo=l(),Gs=a("li"),fie=a("strong"),Ppo=o("xglm"),Bpo=o(" \u2014 "),wN=a("a"),Ipo=o("XGLMTokenizer"),Npo=o(" or "),AN=a("a"),qpo=o("XGLMTokenizerFast"),jpo=o(" (XGLM model)"),Dpo=l(),yh=a("li"),mie=a("strong"),Gpo=o("xlm"),Opo=o(" \u2014 "),LN=a("a"),Vpo=o("XLMTokenizer"),Xpo=o(" (XLM model)"),zpo=l(),xh=a("li"),gie=a("strong"),Qpo=o("xlm-prophetnet"),Wpo=o(" \u2014 "),yN=a("a"),Hpo=o("XLMProphetNetTokenizer"),Upo=o(" (XLM-ProphetNet model)"),Jpo=l(),Os=a("li"),hie=a("strong"),Ypo=o("xlm-roberta"),Kpo=o(" \u2014 "),xN=a("a"),Zpo=o("XLMRobertaTokenizer"),e_o=o(" or "),$N=a("a"),o_o=o("XLMRobertaTokenizerFast"),r_o=o(" (XLM-RoBERTa model)"),t_o=l(),Vs=a("li"),pie=a("strong"),a_o=o("xlm-roberta-xl"),n_o=o(" \u2014 "),kN=a("a"),s_o=o("RobertaTokenizer"),l_o=o(" or "),SN=a("a"),i_o=o("RobertaTokenizerFast"),d_o=o(" (XLM-RoBERTa-XL model)"),c_o=l(),Xs=a("li"),_ie=a("strong"),f_o=o("xlnet"),m_o=o(" \u2014 "),RN=a("a"),g_o=o("XLNetTokenizer"),h_o=o(" or "),PN=a("a"),p_o=o("XLNetTokenizerFast"),__o=o(" (XLNet model)"),u_o=l(),zs=a("li"),uie=a("strong"),b_o=o("yoso"),v_o=o(" \u2014 "),BN=a("a"),F_o=o("AlbertTokenizer"),T_o=o(" or "),IN=a("a"),M_o=o("AlbertTokenizerFast"),E_o=o(" (YOSO model)"),C_o=l(),F($h.$$.fragment),w_o=l(),kh=a("div"),F(iL.$$.fragment),A_o=l(),bie=a("p"),L_o=o("Register a new tokenizer in this mapping."),EVe=l(),Ii=a("h2"),Sh=a("a"),vie=a("span"),F(dL.$$.fragment),y_o=l(),Fie=a("span"),x_o=o("AutoFeatureExtractor"),CVe=l(),Lo=a("div"),F(cL.$$.fragment),$_o=l(),fL=a("p"),k_o=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),NN=a("a"),S_o=o("AutoFeatureExtractor.from_pretrained()"),R_o=o(" class method."),P_o=l(),mL=a("p"),B_o=o("This class cannot be instantiated directly using "),Tie=a("code"),I_o=o("__init__()"),N_o=o(" (throws an error)."),q_o=l(),He=a("div"),F(gL.$$.fragment),j_o=l(),Mie=a("p"),D_o=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),G_o=l(),Ra=a("p"),O_o=o("The feature extractor class to instantiate is selected based on the "),Eie=a("code"),V_o=o("model_type"),X_o=o(` property of the config object
(either passed as an argument or loaded from `),Cie=a("code"),z_o=o("pretrained_model_name_or_path"),Q_o=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),wie=a("code"),W_o=o("pretrained_model_name_or_path"),H_o=o(":"),U_o=l(),Y=a("ul"),Rh=a("li"),Aie=a("strong"),J_o=o("beit"),Y_o=o(" \u2014 "),qN=a("a"),K_o=o("BeitFeatureExtractor"),Z_o=o(" (BEiT model)"),euo=l(),Ph=a("li"),Lie=a("strong"),ouo=o("clip"),ruo=o(" \u2014 "),jN=a("a"),tuo=o("CLIPFeatureExtractor"),auo=o(" (CLIP model)"),nuo=l(),Bh=a("li"),yie=a("strong"),suo=o("convnext"),luo=o(" \u2014 "),DN=a("a"),iuo=o("ConvNextFeatureExtractor"),duo=o(" (ConvNeXT model)"),cuo=l(),Ih=a("li"),xie=a("strong"),fuo=o("cvt"),muo=o(" \u2014 "),GN=a("a"),guo=o("ConvNextFeatureExtractor"),huo=o(" (CvT model)"),puo=l(),Nh=a("li"),$ie=a("strong"),_uo=o("data2vec-audio"),uuo=o(" \u2014 "),ON=a("a"),buo=o("Wav2Vec2FeatureExtractor"),vuo=o(" (Data2VecAudio model)"),Fuo=l(),qh=a("li"),kie=a("strong"),Tuo=o("data2vec-vision"),Muo=o(" \u2014 "),VN=a("a"),Euo=o("BeitFeatureExtractor"),Cuo=o(" (Data2VecVision model)"),wuo=l(),jh=a("li"),Sie=a("strong"),Auo=o("deit"),Luo=o(" \u2014 "),XN=a("a"),yuo=o("DeiTFeatureExtractor"),xuo=o(" (DeiT model)"),$uo=l(),Dh=a("li"),Rie=a("strong"),kuo=o("detr"),Suo=o(" \u2014 "),zN=a("a"),Ruo=o("DetrFeatureExtractor"),Puo=o(" (DETR model)"),Buo=l(),Gh=a("li"),Pie=a("strong"),Iuo=o("dpt"),Nuo=o(" \u2014 "),QN=a("a"),quo=o("DPTFeatureExtractor"),juo=o(" (DPT model)"),Duo=l(),Oh=a("li"),Bie=a("strong"),Guo=o("flava"),Ouo=o(" \u2014 "),WN=a("a"),Vuo=o("FlavaFeatureExtractor"),Xuo=o(" (FLAVA model)"),zuo=l(),Vh=a("li"),Iie=a("strong"),Quo=o("glpn"),Wuo=o(" \u2014 "),HN=a("a"),Huo=o("GLPNFeatureExtractor"),Uuo=o(" (GLPN model)"),Juo=l(),Xh=a("li"),Nie=a("strong"),Yuo=o("groupvit"),Kuo=o(" \u2014 "),UN=a("a"),Zuo=o("CLIPFeatureExtractor"),e1o=o(" (GroupViT model)"),o1o=l(),zh=a("li"),qie=a("strong"),r1o=o("hubert"),t1o=o(" \u2014 "),JN=a("a"),a1o=o("Wav2Vec2FeatureExtractor"),n1o=o(" (Hubert model)"),s1o=l(),Qh=a("li"),jie=a("strong"),l1o=o("imagegpt"),i1o=o(" \u2014 "),YN=a("a"),d1o=o("ImageGPTFeatureExtractor"),c1o=o(" (ImageGPT model)"),f1o=l(),Wh=a("li"),Die=a("strong"),m1o=o("layoutlmv2"),g1o=o(" \u2014 "),KN=a("a"),h1o=o("LayoutLMv2FeatureExtractor"),p1o=o(" (LayoutLMv2 model)"),_1o=l(),Hh=a("li"),Gie=a("strong"),u1o=o("layoutlmv3"),b1o=o(" \u2014 "),ZN=a("a"),v1o=o("LayoutLMv3FeatureExtractor"),F1o=o(" (LayoutLMv3 model)"),T1o=l(),Uh=a("li"),Oie=a("strong"),M1o=o("levit"),E1o=o(" \u2014 "),eq=a("a"),C1o=o("LevitFeatureExtractor"),w1o=o(" (LeViT model)"),A1o=l(),Jh=a("li"),Vie=a("strong"),L1o=o("maskformer"),y1o=o(" \u2014 "),oq=a("a"),x1o=o("MaskFormerFeatureExtractor"),$1o=o(" (MaskFormer model)"),k1o=l(),Yh=a("li"),Xie=a("strong"),S1o=o("mctct"),R1o=o(" \u2014 "),rq=a("a"),P1o=o("MCTCTFeatureExtractor"),B1o=o(" (M-CTC-T model)"),I1o=l(),Kh=a("li"),zie=a("strong"),N1o=o("perceiver"),q1o=o(" \u2014 "),tq=a("a"),j1o=o("PerceiverFeatureExtractor"),D1o=o(" (Perceiver model)"),G1o=l(),Zh=a("li"),Qie=a("strong"),O1o=o("poolformer"),V1o=o(" \u2014 "),aq=a("a"),X1o=o("PoolFormerFeatureExtractor"),z1o=o(" (PoolFormer model)"),Q1o=l(),ep=a("li"),Wie=a("strong"),W1o=o("regnet"),H1o=o(" \u2014 "),nq=a("a"),U1o=o("ConvNextFeatureExtractor"),J1o=o(" (RegNet model)"),Y1o=l(),op=a("li"),Hie=a("strong"),K1o=o("resnet"),Z1o=o(" \u2014 "),sq=a("a"),e2o=o("ConvNextFeatureExtractor"),o2o=o(" (ResNet model)"),r2o=l(),rp=a("li"),Uie=a("strong"),t2o=o("segformer"),a2o=o(" \u2014 "),lq=a("a"),n2o=o("SegformerFeatureExtractor"),s2o=o(" (SegFormer model)"),l2o=l(),tp=a("li"),Jie=a("strong"),i2o=o("speech_to_text"),d2o=o(" \u2014 "),iq=a("a"),c2o=o("Speech2TextFeatureExtractor"),f2o=o(" (Speech2Text model)"),m2o=l(),ap=a("li"),Yie=a("strong"),g2o=o("swin"),h2o=o(" \u2014 "),dq=a("a"),p2o=o("ViTFeatureExtractor"),_2o=o(" (Swin Transformer model)"),u2o=l(),np=a("li"),Kie=a("strong"),b2o=o("van"),v2o=o(" \u2014 "),cq=a("a"),F2o=o("ConvNextFeatureExtractor"),T2o=o(" (VAN model)"),M2o=l(),sp=a("li"),Zie=a("strong"),E2o=o("vilt"),C2o=o(" \u2014 "),fq=a("a"),w2o=o("ViltFeatureExtractor"),A2o=o(" (ViLT model)"),L2o=l(),lp=a("li"),ede=a("strong"),y2o=o("vit"),x2o=o(" \u2014 "),mq=a("a"),$2o=o("ViTFeatureExtractor"),k2o=o(" (ViT model)"),S2o=l(),ip=a("li"),ode=a("strong"),R2o=o("vit_mae"),P2o=o(" \u2014 "),gq=a("a"),B2o=o("ViTFeatureExtractor"),I2o=o(" (ViTMAE model)"),N2o=l(),dp=a("li"),rde=a("strong"),q2o=o("wav2vec2"),j2o=o(" \u2014 "),hq=a("a"),D2o=o("Wav2Vec2FeatureExtractor"),G2o=o(" (Wav2Vec2 model)"),O2o=l(),cp=a("li"),tde=a("strong"),V2o=o("wav2vec2-conformer"),X2o=o(" \u2014 "),pq=a("a"),z2o=o("Wav2Vec2FeatureExtractor"),Q2o=o(" (Wav2Vec2-Conformer model)"),W2o=l(),fp=a("li"),ade=a("strong"),H2o=o("yolos"),U2o=o(" \u2014 "),_q=a("a"),J2o=o("YolosFeatureExtractor"),Y2o=o(" (YOLOS model)"),K2o=l(),F(mp.$$.fragment),Z2o=l(),F(gp.$$.fragment),ebo=l(),hp=a("div"),F(hL.$$.fragment),obo=l(),nde=a("p"),rbo=o("Register a new feature extractor for this class."),wVe=l(),Ni=a("h2"),pp=a("a"),sde=a("span"),F(pL.$$.fragment),tbo=l(),lde=a("span"),abo=o("AutoProcessor"),AVe=l(),yo=a("div"),F(_L.$$.fragment),nbo=l(),uL=a("p"),sbo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),uq=a("a"),lbo=o("AutoProcessor.from_pretrained()"),ibo=o(" class method."),dbo=l(),bL=a("p"),cbo=o("This class cannot be instantiated directly using "),ide=a("code"),fbo=o("__init__()"),mbo=o(" (throws an error)."),gbo=l(),Ue=a("div"),F(vL.$$.fragment),hbo=l(),dde=a("p"),pbo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),_bo=l(),qi=a("p"),ubo=o("The processor class to instantiate is selected based on the "),cde=a("code"),bbo=o("model_type"),vbo=o(` property of the config object (either
passed as an argument or loaded from `),fde=a("code"),Fbo=o("pretrained_model_name_or_path"),Tbo=o(" if possible):"),Mbo=l(),he=a("ul"),_p=a("li"),mde=a("strong"),Ebo=o("clip"),Cbo=o(" \u2014 "),bq=a("a"),wbo=o("CLIPProcessor"),Abo=o(" (CLIP model)"),Lbo=l(),up=a("li"),gde=a("strong"),ybo=o("flava"),xbo=o(" \u2014 "),hde=a("code"),$bo=o("FLAVAProcessor"),kbo=o(" (FLAVA model)"),Sbo=l(),bp=a("li"),pde=a("strong"),Rbo=o("groupvit"),Pbo=o(" \u2014 "),vq=a("a"),Bbo=o("CLIPProcessor"),Ibo=o(" (GroupViT model)"),Nbo=l(),vp=a("li"),_de=a("strong"),qbo=o("layoutlmv2"),jbo=o(" \u2014 "),Fq=a("a"),Dbo=o("LayoutLMv2Processor"),Gbo=o(" (LayoutLMv2 model)"),Obo=l(),Fp=a("li"),ude=a("strong"),Vbo=o("layoutlmv3"),Xbo=o(" \u2014 "),Tq=a("a"),zbo=o("LayoutLMv3Processor"),Qbo=o(" (LayoutLMv3 model)"),Wbo=l(),Tp=a("li"),bde=a("strong"),Hbo=o("layoutxlm"),Ubo=o(" \u2014 "),Mq=a("a"),Jbo=o("LayoutXLMProcessor"),Ybo=o(" (LayoutXLM model)"),Kbo=l(),Mp=a("li"),vde=a("strong"),Zbo=o("sew"),evo=o(" \u2014 "),Eq=a("a"),ovo=o("Wav2Vec2Processor"),rvo=o(" (SEW model)"),tvo=l(),Ep=a("li"),Fde=a("strong"),avo=o("sew-d"),nvo=o(" \u2014 "),Cq=a("a"),svo=o("Wav2Vec2Processor"),lvo=o(" (SEW-D model)"),ivo=l(),Cp=a("li"),Tde=a("strong"),dvo=o("speech_to_text"),cvo=o(" \u2014 "),wq=a("a"),fvo=o("Speech2TextProcessor"),mvo=o(" (Speech2Text model)"),gvo=l(),wp=a("li"),Mde=a("strong"),hvo=o("speech_to_text_2"),pvo=o(" \u2014 "),Aq=a("a"),_vo=o("Speech2Text2Processor"),uvo=o(" (Speech2Text2 model)"),bvo=l(),Ap=a("li"),Ede=a("strong"),vvo=o("trocr"),Fvo=o(" \u2014 "),Lq=a("a"),Tvo=o("TrOCRProcessor"),Mvo=o(" (TrOCR model)"),Evo=l(),Lp=a("li"),Cde=a("strong"),Cvo=o("unispeech"),wvo=o(" \u2014 "),yq=a("a"),Avo=o("Wav2Vec2Processor"),Lvo=o(" (UniSpeech model)"),yvo=l(),yp=a("li"),wde=a("strong"),xvo=o("unispeech-sat"),$vo=o(" \u2014 "),xq=a("a"),kvo=o("Wav2Vec2Processor"),Svo=o(" (UniSpeechSat model)"),Rvo=l(),xp=a("li"),Ade=a("strong"),Pvo=o("vilt"),Bvo=o(" \u2014 "),$q=a("a"),Ivo=o("ViltProcessor"),Nvo=o(" (ViLT model)"),qvo=l(),$p=a("li"),Lde=a("strong"),jvo=o("vision-text-dual-encoder"),Dvo=o(" \u2014 "),kq=a("a"),Gvo=o("VisionTextDualEncoderProcessor"),Ovo=o(" (VisionTextDualEncoder model)"),Vvo=l(),kp=a("li"),yde=a("strong"),Xvo=o("wav2vec2"),zvo=o(" \u2014 "),Sq=a("a"),Qvo=o("Wav2Vec2Processor"),Wvo=o(" (Wav2Vec2 model)"),Hvo=l(),Sp=a("li"),xde=a("strong"),Uvo=o("wav2vec2-conformer"),Jvo=o(" \u2014 "),Rq=a("a"),Yvo=o("Wav2Vec2Processor"),Kvo=o(" (Wav2Vec2-Conformer model)"),Zvo=l(),Rp=a("li"),$de=a("strong"),e3o=o("wavlm"),o3o=o(" \u2014 "),Pq=a("a"),r3o=o("Wav2Vec2Processor"),t3o=o(" (WavLM model)"),a3o=l(),F(Pp.$$.fragment),n3o=l(),F(Bp.$$.fragment),s3o=l(),Ip=a("div"),F(FL.$$.fragment),l3o=l(),kde=a("p"),i3o=o("Register a new processor for this class."),LVe=l(),ji=a("h2"),Np=a("a"),Sde=a("span"),F(TL.$$.fragment),d3o=l(),Rde=a("span"),c3o=o("AutoModel"),yVe=l(),xo=a("div"),F(ML.$$.fragment),f3o=l(),Di=a("p"),m3o=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Bq=a("a"),g3o=o("from_pretrained()"),h3o=o(" class method or the "),Iq=a("a"),p3o=o("from_config()"),_3o=o(` class
method.`),u3o=l(),EL=a("p"),b3o=o("This class cannot be instantiated directly using "),Pde=a("code"),v3o=o("__init__()"),F3o=o(" (throws an error)."),T3o=l(),st=a("div"),F(CL.$$.fragment),M3o=l(),Bde=a("p"),E3o=o("Instantiates one of the base model classes of the library from a configuration."),C3o=l(),Gi=a("p"),w3o=o(`Note:
Loading a model from its configuration file does `),Ide=a("strong"),A3o=o("not"),L3o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Nq=a("a"),y3o=o("from_pretrained()"),x3o=o(" to load the model weights."),$3o=l(),F(qp.$$.fragment),k3o=l(),Je=a("div"),F(wL.$$.fragment),S3o=l(),Nde=a("p"),R3o=o("Instantiate one of the base model classes of the library from a pretrained model."),P3o=l(),Pa=a("p"),B3o=o("The model class to instantiate is selected based on the "),qde=a("code"),I3o=o("model_type"),N3o=o(` property of the config object (either
passed as an argument or loaded from `),jde=a("code"),q3o=o("pretrained_model_name_or_path"),j3o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dde=a("code"),D3o=o("pretrained_model_name_or_path"),G3o=o(":"),O3o=l(),y=a("ul"),jp=a("li"),Gde=a("strong"),V3o=o("albert"),X3o=o(" \u2014 "),qq=a("a"),z3o=o("AlbertModel"),Q3o=o(" (ALBERT model)"),W3o=l(),Dp=a("li"),Ode=a("strong"),H3o=o("bart"),U3o=o(" \u2014 "),jq=a("a"),J3o=o("BartModel"),Y3o=o(" (BART model)"),K3o=l(),Gp=a("li"),Vde=a("strong"),Z3o=o("beit"),e5o=o(" \u2014 "),Dq=a("a"),o5o=o("BeitModel"),r5o=o(" (BEiT model)"),t5o=l(),Op=a("li"),Xde=a("strong"),a5o=o("bert"),n5o=o(" \u2014 "),Gq=a("a"),s5o=o("BertModel"),l5o=o(" (BERT model)"),i5o=l(),Vp=a("li"),zde=a("strong"),d5o=o("bert-generation"),c5o=o(" \u2014 "),Oq=a("a"),f5o=o("BertGenerationEncoder"),m5o=o(" (Bert Generation model)"),g5o=l(),Xp=a("li"),Qde=a("strong"),h5o=o("big_bird"),p5o=o(" \u2014 "),Vq=a("a"),_5o=o("BigBirdModel"),u5o=o(" (BigBird model)"),b5o=l(),zp=a("li"),Wde=a("strong"),v5o=o("bigbird_pegasus"),F5o=o(" \u2014 "),Xq=a("a"),T5o=o("BigBirdPegasusModel"),M5o=o(" (BigBird-Pegasus model)"),E5o=l(),Qp=a("li"),Hde=a("strong"),C5o=o("blenderbot"),w5o=o(" \u2014 "),zq=a("a"),A5o=o("BlenderbotModel"),L5o=o(" (Blenderbot model)"),y5o=l(),Wp=a("li"),Ude=a("strong"),x5o=o("blenderbot-small"),$5o=o(" \u2014 "),Qq=a("a"),k5o=o("BlenderbotSmallModel"),S5o=o(" (BlenderbotSmall model)"),R5o=l(),Hp=a("li"),Jde=a("strong"),P5o=o("bloom"),B5o=o(" \u2014 "),Wq=a("a"),I5o=o("BloomModel"),N5o=o(" (BLOOM model)"),q5o=l(),Up=a("li"),Yde=a("strong"),j5o=o("camembert"),D5o=o(" \u2014 "),Hq=a("a"),G5o=o("CamembertModel"),O5o=o(" (CamemBERT model)"),V5o=l(),Jp=a("li"),Kde=a("strong"),X5o=o("canine"),z5o=o(" \u2014 "),Uq=a("a"),Q5o=o("CanineModel"),W5o=o(" (CANINE model)"),H5o=l(),Yp=a("li"),Zde=a("strong"),U5o=o("clip"),J5o=o(" \u2014 "),Jq=a("a"),Y5o=o("CLIPModel"),K5o=o(" (CLIP model)"),Z5o=l(),Kp=a("li"),ece=a("strong"),eFo=o("codegen"),oFo=o(" \u2014 "),Yq=a("a"),rFo=o("CodeGenModel"),tFo=o(" (CodeGen model)"),aFo=l(),Zp=a("li"),oce=a("strong"),nFo=o("convbert"),sFo=o(" \u2014 "),Kq=a("a"),lFo=o("ConvBertModel"),iFo=o(" (ConvBERT model)"),dFo=l(),e_=a("li"),rce=a("strong"),cFo=o("convnext"),fFo=o(" \u2014 "),Zq=a("a"),mFo=o("ConvNextModel"),gFo=o(" (ConvNeXT model)"),hFo=l(),o_=a("li"),tce=a("strong"),pFo=o("ctrl"),_Fo=o(" \u2014 "),ej=a("a"),uFo=o("CTRLModel"),bFo=o(" (CTRL model)"),vFo=l(),r_=a("li"),ace=a("strong"),FFo=o("cvt"),TFo=o(" \u2014 "),oj=a("a"),MFo=o("CvtModel"),EFo=o(" (CvT model)"),CFo=l(),t_=a("li"),nce=a("strong"),wFo=o("data2vec-audio"),AFo=o(" \u2014 "),rj=a("a"),LFo=o("Data2VecAudioModel"),yFo=o(" (Data2VecAudio model)"),xFo=l(),a_=a("li"),sce=a("strong"),$Fo=o("data2vec-text"),kFo=o(" \u2014 "),tj=a("a"),SFo=o("Data2VecTextModel"),RFo=o(" (Data2VecText model)"),PFo=l(),n_=a("li"),lce=a("strong"),BFo=o("data2vec-vision"),IFo=o(" \u2014 "),aj=a("a"),NFo=o("Data2VecVisionModel"),qFo=o(" (Data2VecVision model)"),jFo=l(),s_=a("li"),ice=a("strong"),DFo=o("deberta"),GFo=o(" \u2014 "),nj=a("a"),OFo=o("DebertaModel"),VFo=o(" (DeBERTa model)"),XFo=l(),l_=a("li"),dce=a("strong"),zFo=o("deberta-v2"),QFo=o(" \u2014 "),sj=a("a"),WFo=o("DebertaV2Model"),HFo=o(" (DeBERTa-v2 model)"),UFo=l(),i_=a("li"),cce=a("strong"),JFo=o("decision_transformer"),YFo=o(" \u2014 "),lj=a("a"),KFo=o("DecisionTransformerModel"),ZFo=o(" (Decision Transformer model)"),eTo=l(),d_=a("li"),fce=a("strong"),oTo=o("deit"),rTo=o(" \u2014 "),ij=a("a"),tTo=o("DeiTModel"),aTo=o(" (DeiT model)"),nTo=l(),c_=a("li"),mce=a("strong"),sTo=o("detr"),lTo=o(" \u2014 "),dj=a("a"),iTo=o("DetrModel"),dTo=o(" (DETR model)"),cTo=l(),f_=a("li"),gce=a("strong"),fTo=o("distilbert"),mTo=o(" \u2014 "),cj=a("a"),gTo=o("DistilBertModel"),hTo=o(" (DistilBERT model)"),pTo=l(),m_=a("li"),hce=a("strong"),_To=o("dpr"),uTo=o(" \u2014 "),fj=a("a"),bTo=o("DPRQuestionEncoder"),vTo=o(" (DPR model)"),FTo=l(),g_=a("li"),pce=a("strong"),TTo=o("dpt"),MTo=o(" \u2014 "),mj=a("a"),ETo=o("DPTModel"),CTo=o(" (DPT model)"),wTo=l(),h_=a("li"),_ce=a("strong"),ATo=o("electra"),LTo=o(" \u2014 "),gj=a("a"),yTo=o("ElectraModel"),xTo=o(" (ELECTRA model)"),$To=l(),p_=a("li"),uce=a("strong"),kTo=o("flaubert"),STo=o(" \u2014 "),hj=a("a"),RTo=o("FlaubertModel"),PTo=o(" (FlauBERT model)"),BTo=l(),__=a("li"),bce=a("strong"),ITo=o("flava"),NTo=o(" \u2014 "),pj=a("a"),qTo=o("FlavaModel"),jTo=o(" (FLAVA model)"),DTo=l(),u_=a("li"),vce=a("strong"),GTo=o("fnet"),OTo=o(" \u2014 "),_j=a("a"),VTo=o("FNetModel"),XTo=o(" (FNet model)"),zTo=l(),b_=a("li"),Fce=a("strong"),QTo=o("fsmt"),WTo=o(" \u2014 "),uj=a("a"),HTo=o("FSMTModel"),UTo=o(" (FairSeq Machine-Translation model)"),JTo=l(),Qs=a("li"),Tce=a("strong"),YTo=o("funnel"),KTo=o(" \u2014 "),bj=a("a"),ZTo=o("FunnelModel"),e7o=o(" or "),vj=a("a"),o7o=o("FunnelBaseModel"),r7o=o(" (Funnel Transformer model)"),t7o=l(),v_=a("li"),Mce=a("strong"),a7o=o("glpn"),n7o=o(" \u2014 "),Fj=a("a"),s7o=o("GLPNModel"),l7o=o(" (GLPN model)"),i7o=l(),F_=a("li"),Ece=a("strong"),d7o=o("gpt2"),c7o=o(" \u2014 "),Tj=a("a"),f7o=o("GPT2Model"),m7o=o(" (OpenAI GPT-2 model)"),g7o=l(),T_=a("li"),Cce=a("strong"),h7o=o("gpt_neo"),p7o=o(" \u2014 "),Mj=a("a"),_7o=o("GPTNeoModel"),u7o=o(" (GPT Neo model)"),b7o=l(),M_=a("li"),wce=a("strong"),v7o=o("gpt_neox"),F7o=o(" \u2014 "),Ej=a("a"),T7o=o("GPTNeoXModel"),M7o=o(" (GPT NeoX model)"),E7o=l(),E_=a("li"),Ace=a("strong"),C7o=o("gptj"),w7o=o(" \u2014 "),Cj=a("a"),A7o=o("GPTJModel"),L7o=o(" (GPT-J model)"),y7o=l(),C_=a("li"),Lce=a("strong"),x7o=o("groupvit"),$7o=o(" \u2014 "),wj=a("a"),k7o=o("GroupViTModel"),S7o=o(" (GroupViT model)"),R7o=l(),w_=a("li"),yce=a("strong"),P7o=o("hubert"),B7o=o(" \u2014 "),Aj=a("a"),I7o=o("HubertModel"),N7o=o(" (Hubert model)"),q7o=l(),A_=a("li"),xce=a("strong"),j7o=o("ibert"),D7o=o(" \u2014 "),Lj=a("a"),G7o=o("IBertModel"),O7o=o(" (I-BERT model)"),V7o=l(),L_=a("li"),$ce=a("strong"),X7o=o("imagegpt"),z7o=o(" \u2014 "),yj=a("a"),Q7o=o("ImageGPTModel"),W7o=o(" (ImageGPT model)"),H7o=l(),y_=a("li"),kce=a("strong"),U7o=o("layoutlm"),J7o=o(" \u2014 "),xj=a("a"),Y7o=o("LayoutLMModel"),K7o=o(" (LayoutLM model)"),Z7o=l(),x_=a("li"),Sce=a("strong"),e9o=o("layoutlmv2"),o9o=o(" \u2014 "),$j=a("a"),r9o=o("LayoutLMv2Model"),t9o=o(" (LayoutLMv2 model)"),a9o=l(),$_=a("li"),Rce=a("strong"),n9o=o("layoutlmv3"),s9o=o(" \u2014 "),kj=a("a"),l9o=o("LayoutLMv3Model"),i9o=o(" (LayoutLMv3 model)"),d9o=l(),k_=a("li"),Pce=a("strong"),c9o=o("led"),f9o=o(" \u2014 "),Sj=a("a"),m9o=o("LEDModel"),g9o=o(" (LED model)"),h9o=l(),S_=a("li"),Bce=a("strong"),p9o=o("levit"),_9o=o(" \u2014 "),Rj=a("a"),u9o=o("LevitModel"),b9o=o(" (LeViT model)"),v9o=l(),R_=a("li"),Ice=a("strong"),F9o=o("longformer"),T9o=o(" \u2014 "),Pj=a("a"),M9o=o("LongformerModel"),E9o=o(" (Longformer model)"),C9o=l(),P_=a("li"),Nce=a("strong"),w9o=o("longt5"),A9o=o(" \u2014 "),Bj=a("a"),L9o=o("LongT5Model"),y9o=o(" (LongT5 model)"),x9o=l(),B_=a("li"),qce=a("strong"),$9o=o("luke"),k9o=o(" \u2014 "),Ij=a("a"),S9o=o("LukeModel"),R9o=o(" (LUKE model)"),P9o=l(),I_=a("li"),jce=a("strong"),B9o=o("lxmert"),I9o=o(" \u2014 "),Nj=a("a"),N9o=o("LxmertModel"),q9o=o(" (LXMERT model)"),j9o=l(),N_=a("li"),Dce=a("strong"),D9o=o("m2m_100"),G9o=o(" \u2014 "),qj=a("a"),O9o=o("M2M100Model"),V9o=o(" (M2M100 model)"),X9o=l(),q_=a("li"),Gce=a("strong"),z9o=o("marian"),Q9o=o(" \u2014 "),jj=a("a"),W9o=o("MarianModel"),H9o=o(" (Marian model)"),U9o=l(),j_=a("li"),Oce=a("strong"),J9o=o("maskformer"),Y9o=o(" \u2014 "),Dj=a("a"),K9o=o("MaskFormerModel"),Z9o=o(" (MaskFormer model)"),eMo=l(),D_=a("li"),Vce=a("strong"),oMo=o("mbart"),rMo=o(" \u2014 "),Gj=a("a"),tMo=o("MBartModel"),aMo=o(" (mBART model)"),nMo=l(),G_=a("li"),Xce=a("strong"),sMo=o("mctct"),lMo=o(" \u2014 "),Oj=a("a"),iMo=o("MCTCTModel"),dMo=o(" (M-CTC-T model)"),cMo=l(),O_=a("li"),zce=a("strong"),fMo=o("megatron-bert"),mMo=o(" \u2014 "),Vj=a("a"),gMo=o("MegatronBertModel"),hMo=o(" (Megatron-BERT model)"),pMo=l(),V_=a("li"),Qce=a("strong"),_Mo=o("mobilebert"),uMo=o(" \u2014 "),Xj=a("a"),bMo=o("MobileBertModel"),vMo=o(" (MobileBERT model)"),FMo=l(),X_=a("li"),Wce=a("strong"),TMo=o("mpnet"),MMo=o(" \u2014 "),zj=a("a"),EMo=o("MPNetModel"),CMo=o(" (MPNet model)"),wMo=l(),z_=a("li"),Hce=a("strong"),AMo=o("mt5"),LMo=o(" \u2014 "),Qj=a("a"),yMo=o("MT5Model"),xMo=o(" (MT5 model)"),$Mo=l(),Q_=a("li"),Uce=a("strong"),kMo=o("mvp"),SMo=o(" \u2014 "),Wj=a("a"),RMo=o("MvpModel"),PMo=o(" (MVP model)"),BMo=l(),W_=a("li"),Jce=a("strong"),IMo=o("nezha"),NMo=o(" \u2014 "),Hj=a("a"),qMo=o("NezhaModel"),jMo=o(" (Nezha model)"),DMo=l(),H_=a("li"),Yce=a("strong"),GMo=o("nystromformer"),OMo=o(" \u2014 "),Uj=a("a"),VMo=o("NystromformerModel"),XMo=o(" (Nystr\xF6mformer model)"),zMo=l(),U_=a("li"),Kce=a("strong"),QMo=o("openai-gpt"),WMo=o(" \u2014 "),Jj=a("a"),HMo=o("OpenAIGPTModel"),UMo=o(" (OpenAI GPT model)"),JMo=l(),J_=a("li"),Zce=a("strong"),YMo=o("opt"),KMo=o(" \u2014 "),Yj=a("a"),ZMo=o("OPTModel"),e4o=o(" (OPT model)"),o4o=l(),Y_=a("li"),efe=a("strong"),r4o=o("pegasus"),t4o=o(" \u2014 "),Kj=a("a"),a4o=o("PegasusModel"),n4o=o(" (Pegasus model)"),s4o=l(),K_=a("li"),ofe=a("strong"),l4o=o("perceiver"),i4o=o(" \u2014 "),Zj=a("a"),d4o=o("PerceiverModel"),c4o=o(" (Perceiver model)"),f4o=l(),Z_=a("li"),rfe=a("strong"),m4o=o("plbart"),g4o=o(" \u2014 "),eD=a("a"),h4o=o("PLBartModel"),p4o=o(" (PLBart model)"),_4o=l(),eu=a("li"),tfe=a("strong"),u4o=o("poolformer"),b4o=o(" \u2014 "),oD=a("a"),v4o=o("PoolFormerModel"),F4o=o(" (PoolFormer model)"),T4o=l(),ou=a("li"),afe=a("strong"),M4o=o("prophetnet"),E4o=o(" \u2014 "),rD=a("a"),C4o=o("ProphetNetModel"),w4o=o(" (ProphetNet model)"),A4o=l(),ru=a("li"),nfe=a("strong"),L4o=o("qdqbert"),y4o=o(" \u2014 "),tD=a("a"),x4o=o("QDQBertModel"),$4o=o(" (QDQBert model)"),k4o=l(),tu=a("li"),sfe=a("strong"),S4o=o("reformer"),R4o=o(" \u2014 "),aD=a("a"),P4o=o("ReformerModel"),B4o=o(" (Reformer model)"),I4o=l(),au=a("li"),lfe=a("strong"),N4o=o("regnet"),q4o=o(" \u2014 "),nD=a("a"),j4o=o("RegNetModel"),D4o=o(" (RegNet model)"),G4o=l(),nu=a("li"),ife=a("strong"),O4o=o("rembert"),V4o=o(" \u2014 "),sD=a("a"),X4o=o("RemBertModel"),z4o=o(" (RemBERT model)"),Q4o=l(),su=a("li"),dfe=a("strong"),W4o=o("resnet"),H4o=o(" \u2014 "),lD=a("a"),U4o=o("ResNetModel"),J4o=o(" (ResNet model)"),Y4o=l(),lu=a("li"),cfe=a("strong"),K4o=o("retribert"),Z4o=o(" \u2014 "),iD=a("a"),eEo=o("RetriBertModel"),oEo=o(" (RetriBERT model)"),rEo=l(),iu=a("li"),ffe=a("strong"),tEo=o("roberta"),aEo=o(" \u2014 "),dD=a("a"),nEo=o("RobertaModel"),sEo=o(" (RoBERTa model)"),lEo=l(),du=a("li"),mfe=a("strong"),iEo=o("roformer"),dEo=o(" \u2014 "),cD=a("a"),cEo=o("RoFormerModel"),fEo=o(" (RoFormer model)"),mEo=l(),cu=a("li"),gfe=a("strong"),gEo=o("segformer"),hEo=o(" \u2014 "),fD=a("a"),pEo=o("SegformerModel"),_Eo=o(" (SegFormer model)"),uEo=l(),fu=a("li"),hfe=a("strong"),bEo=o("sew"),vEo=o(" \u2014 "),mD=a("a"),FEo=o("SEWModel"),TEo=o(" (SEW model)"),MEo=l(),mu=a("li"),pfe=a("strong"),EEo=o("sew-d"),CEo=o(" \u2014 "),gD=a("a"),wEo=o("SEWDModel"),AEo=o(" (SEW-D model)"),LEo=l(),gu=a("li"),_fe=a("strong"),yEo=o("speech_to_text"),xEo=o(" \u2014 "),hD=a("a"),$Eo=o("Speech2TextModel"),kEo=o(" (Speech2Text model)"),SEo=l(),hu=a("li"),ufe=a("strong"),REo=o("splinter"),PEo=o(" \u2014 "),pD=a("a"),BEo=o("SplinterModel"),IEo=o(" (Splinter model)"),NEo=l(),pu=a("li"),bfe=a("strong"),qEo=o("squeezebert"),jEo=o(" \u2014 "),_D=a("a"),DEo=o("SqueezeBertModel"),GEo=o(" (SqueezeBERT model)"),OEo=l(),_u=a("li"),vfe=a("strong"),VEo=o("swin"),XEo=o(" \u2014 "),uD=a("a"),zEo=o("SwinModel"),QEo=o(" (Swin Transformer model)"),WEo=l(),uu=a("li"),Ffe=a("strong"),HEo=o("t5"),UEo=o(" \u2014 "),bD=a("a"),JEo=o("T5Model"),YEo=o(" (T5 model)"),KEo=l(),bu=a("li"),Tfe=a("strong"),ZEo=o("tapas"),eCo=o(" \u2014 "),vD=a("a"),oCo=o("TapasModel"),rCo=o(" (TAPAS model)"),tCo=l(),vu=a("li"),Mfe=a("strong"),aCo=o("trajectory_transformer"),nCo=o(" \u2014 "),FD=a("a"),sCo=o("TrajectoryTransformerModel"),lCo=o(" (Trajectory Transformer model)"),iCo=l(),Fu=a("li"),Efe=a("strong"),dCo=o("transfo-xl"),cCo=o(" \u2014 "),TD=a("a"),fCo=o("TransfoXLModel"),mCo=o(" (Transformer-XL model)"),gCo=l(),Tu=a("li"),Cfe=a("strong"),hCo=o("unispeech"),pCo=o(" \u2014 "),MD=a("a"),_Co=o("UniSpeechModel"),uCo=o(" (UniSpeech model)"),bCo=l(),Mu=a("li"),wfe=a("strong"),vCo=o("unispeech-sat"),FCo=o(" \u2014 "),ED=a("a"),TCo=o("UniSpeechSatModel"),MCo=o(" (UniSpeechSat model)"),ECo=l(),Eu=a("li"),Afe=a("strong"),CCo=o("van"),wCo=o(" \u2014 "),CD=a("a"),ACo=o("VanModel"),LCo=o(" (VAN model)"),yCo=l(),Cu=a("li"),Lfe=a("strong"),xCo=o("vilt"),$Co=o(" \u2014 "),wD=a("a"),kCo=o("ViltModel"),SCo=o(" (ViLT model)"),RCo=l(),wu=a("li"),yfe=a("strong"),PCo=o("vision-text-dual-encoder"),BCo=o(" \u2014 "),AD=a("a"),ICo=o("VisionTextDualEncoderModel"),NCo=o(" (VisionTextDualEncoder model)"),qCo=l(),Au=a("li"),xfe=a("strong"),jCo=o("visual_bert"),DCo=o(" \u2014 "),LD=a("a"),GCo=o("VisualBertModel"),OCo=o(" (VisualBERT model)"),VCo=l(),Lu=a("li"),$fe=a("strong"),XCo=o("vit"),zCo=o(" \u2014 "),yD=a("a"),QCo=o("ViTModel"),WCo=o(" (ViT model)"),HCo=l(),yu=a("li"),kfe=a("strong"),UCo=o("vit_mae"),JCo=o(" \u2014 "),xD=a("a"),YCo=o("ViTMAEModel"),KCo=o(" (ViTMAE model)"),ZCo=l(),xu=a("li"),Sfe=a("strong"),e0o=o("wav2vec2"),o0o=o(" \u2014 "),$D=a("a"),r0o=o("Wav2Vec2Model"),t0o=o(" (Wav2Vec2 model)"),a0o=l(),$u=a("li"),Rfe=a("strong"),n0o=o("wav2vec2-conformer"),s0o=o(" \u2014 "),kD=a("a"),l0o=o("Wav2Vec2ConformerModel"),i0o=o(" (Wav2Vec2-Conformer model)"),d0o=l(),ku=a("li"),Pfe=a("strong"),c0o=o("wavlm"),f0o=o(" \u2014 "),SD=a("a"),m0o=o("WavLMModel"),g0o=o(" (WavLM model)"),h0o=l(),Su=a("li"),Bfe=a("strong"),p0o=o("xglm"),_0o=o(" \u2014 "),RD=a("a"),u0o=o("XGLMModel"),b0o=o(" (XGLM model)"),v0o=l(),Ru=a("li"),Ife=a("strong"),F0o=o("xlm"),T0o=o(" \u2014 "),PD=a("a"),M0o=o("XLMModel"),E0o=o(" (XLM model)"),C0o=l(),Pu=a("li"),Nfe=a("strong"),w0o=o("xlm-prophetnet"),A0o=o(" \u2014 "),BD=a("a"),L0o=o("XLMProphetNetModel"),y0o=o(" (XLM-ProphetNet model)"),x0o=l(),Bu=a("li"),qfe=a("strong"),$0o=o("xlm-roberta"),k0o=o(" \u2014 "),ID=a("a"),S0o=o("XLMRobertaModel"),R0o=o(" (XLM-RoBERTa model)"),P0o=l(),Iu=a("li"),jfe=a("strong"),B0o=o("xlm-roberta-xl"),I0o=o(" \u2014 "),ND=a("a"),N0o=o("XLMRobertaXLModel"),q0o=o(" (XLM-RoBERTa-XL model)"),j0o=l(),Nu=a("li"),Dfe=a("strong"),D0o=o("xlnet"),G0o=o(" \u2014 "),qD=a("a"),O0o=o("XLNetModel"),V0o=o(" (XLNet model)"),X0o=l(),qu=a("li"),Gfe=a("strong"),z0o=o("yolos"),Q0o=o(" \u2014 "),jD=a("a"),W0o=o("YolosModel"),H0o=o(" (YOLOS model)"),U0o=l(),ju=a("li"),Ofe=a("strong"),J0o=o("yoso"),Y0o=o(" \u2014 "),DD=a("a"),K0o=o("YosoModel"),Z0o=o(" (YOSO model)"),ewo=l(),Du=a("p"),owo=o("The model is set in evaluation mode by default using "),Vfe=a("code"),rwo=o("model.eval()"),two=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xfe=a("code"),awo=o("model.train()"),nwo=l(),F(Gu.$$.fragment),xVe=l(),Oi=a("h2"),Ou=a("a"),zfe=a("span"),F(AL.$$.fragment),swo=l(),Qfe=a("span"),lwo=o("AutoModelForPreTraining"),$Ve=l(),$o=a("div"),F(LL.$$.fragment),iwo=l(),Vi=a("p"),dwo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),GD=a("a"),cwo=o("from_pretrained()"),fwo=o(" class method or the "),OD=a("a"),mwo=o("from_config()"),gwo=o(` class
method.`),hwo=l(),yL=a("p"),pwo=o("This class cannot be instantiated directly using "),Wfe=a("code"),_wo=o("__init__()"),uwo=o(" (throws an error)."),bwo=l(),lt=a("div"),F(xL.$$.fragment),vwo=l(),Hfe=a("p"),Fwo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Two=l(),Xi=a("p"),Mwo=o(`Note:
Loading a model from its configuration file does `),Ufe=a("strong"),Ewo=o("not"),Cwo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VD=a("a"),wwo=o("from_pretrained()"),Awo=o(" to load the model weights."),Lwo=l(),F(Vu.$$.fragment),ywo=l(),Ye=a("div"),F($L.$$.fragment),xwo=l(),Jfe=a("p"),$wo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),kwo=l(),Ba=a("p"),Swo=o("The model class to instantiate is selected based on the "),Yfe=a("code"),Rwo=o("model_type"),Pwo=o(` property of the config object (either
passed as an argument or loaded from `),Kfe=a("code"),Bwo=o("pretrained_model_name_or_path"),Iwo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zfe=a("code"),Nwo=o("pretrained_model_name_or_path"),qwo=o(":"),jwo=l(),G=a("ul"),Xu=a("li"),eme=a("strong"),Dwo=o("albert"),Gwo=o(" \u2014 "),XD=a("a"),Owo=o("AlbertForPreTraining"),Vwo=o(" (ALBERT model)"),Xwo=l(),zu=a("li"),ome=a("strong"),zwo=o("bart"),Qwo=o(" \u2014 "),zD=a("a"),Wwo=o("BartForConditionalGeneration"),Hwo=o(" (BART model)"),Uwo=l(),Qu=a("li"),rme=a("strong"),Jwo=o("bert"),Ywo=o(" \u2014 "),QD=a("a"),Kwo=o("BertForPreTraining"),Zwo=o(" (BERT model)"),eAo=l(),Wu=a("li"),tme=a("strong"),oAo=o("big_bird"),rAo=o(" \u2014 "),WD=a("a"),tAo=o("BigBirdForPreTraining"),aAo=o(" (BigBird model)"),nAo=l(),Hu=a("li"),ame=a("strong"),sAo=o("bloom"),lAo=o(" \u2014 "),HD=a("a"),iAo=o("BloomForCausalLM"),dAo=o(" (BLOOM model)"),cAo=l(),Uu=a("li"),nme=a("strong"),fAo=o("camembert"),mAo=o(" \u2014 "),UD=a("a"),gAo=o("CamembertForMaskedLM"),hAo=o(" (CamemBERT model)"),pAo=l(),Ju=a("li"),sme=a("strong"),_Ao=o("ctrl"),uAo=o(" \u2014 "),JD=a("a"),bAo=o("CTRLLMHeadModel"),vAo=o(" (CTRL model)"),FAo=l(),Yu=a("li"),lme=a("strong"),TAo=o("data2vec-text"),MAo=o(" \u2014 "),YD=a("a"),EAo=o("Data2VecTextForMaskedLM"),CAo=o(" (Data2VecText model)"),wAo=l(),Ku=a("li"),ime=a("strong"),AAo=o("deberta"),LAo=o(" \u2014 "),KD=a("a"),yAo=o("DebertaForMaskedLM"),xAo=o(" (DeBERTa model)"),$Ao=l(),Zu=a("li"),dme=a("strong"),kAo=o("deberta-v2"),SAo=o(" \u2014 "),ZD=a("a"),RAo=o("DebertaV2ForMaskedLM"),PAo=o(" (DeBERTa-v2 model)"),BAo=l(),e1=a("li"),cme=a("strong"),IAo=o("distilbert"),NAo=o(" \u2014 "),eG=a("a"),qAo=o("DistilBertForMaskedLM"),jAo=o(" (DistilBERT model)"),DAo=l(),o1=a("li"),fme=a("strong"),GAo=o("electra"),OAo=o(" \u2014 "),oG=a("a"),VAo=o("ElectraForPreTraining"),XAo=o(" (ELECTRA model)"),zAo=l(),r1=a("li"),mme=a("strong"),QAo=o("flaubert"),WAo=o(" \u2014 "),rG=a("a"),HAo=o("FlaubertWithLMHeadModel"),UAo=o(" (FlauBERT model)"),JAo=l(),t1=a("li"),gme=a("strong"),YAo=o("flava"),KAo=o(" \u2014 "),tG=a("a"),ZAo=o("FlavaForPreTraining"),e6o=o(" (FLAVA model)"),o6o=l(),a1=a("li"),hme=a("strong"),r6o=o("fnet"),t6o=o(" \u2014 "),aG=a("a"),a6o=o("FNetForPreTraining"),n6o=o(" (FNet model)"),s6o=l(),n1=a("li"),pme=a("strong"),l6o=o("fsmt"),i6o=o(" \u2014 "),nG=a("a"),d6o=o("FSMTForConditionalGeneration"),c6o=o(" (FairSeq Machine-Translation model)"),f6o=l(),s1=a("li"),_me=a("strong"),m6o=o("funnel"),g6o=o(" \u2014 "),sG=a("a"),h6o=o("FunnelForPreTraining"),p6o=o(" (Funnel Transformer model)"),_6o=l(),l1=a("li"),ume=a("strong"),u6o=o("gpt2"),b6o=o(" \u2014 "),lG=a("a"),v6o=o("GPT2LMHeadModel"),F6o=o(" (OpenAI GPT-2 model)"),T6o=l(),i1=a("li"),bme=a("strong"),M6o=o("ibert"),E6o=o(" \u2014 "),iG=a("a"),C6o=o("IBertForMaskedLM"),w6o=o(" (I-BERT model)"),A6o=l(),d1=a("li"),vme=a("strong"),L6o=o("layoutlm"),y6o=o(" \u2014 "),dG=a("a"),x6o=o("LayoutLMForMaskedLM"),$6o=o(" (LayoutLM model)"),k6o=l(),c1=a("li"),Fme=a("strong"),S6o=o("longformer"),R6o=o(" \u2014 "),cG=a("a"),P6o=o("LongformerForMaskedLM"),B6o=o(" (Longformer model)"),I6o=l(),f1=a("li"),Tme=a("strong"),N6o=o("lxmert"),q6o=o(" \u2014 "),fG=a("a"),j6o=o("LxmertForPreTraining"),D6o=o(" (LXMERT model)"),G6o=l(),m1=a("li"),Mme=a("strong"),O6o=o("megatron-bert"),V6o=o(" \u2014 "),mG=a("a"),X6o=o("MegatronBertForPreTraining"),z6o=o(" (Megatron-BERT model)"),Q6o=l(),g1=a("li"),Eme=a("strong"),W6o=o("mobilebert"),H6o=o(" \u2014 "),gG=a("a"),U6o=o("MobileBertForPreTraining"),J6o=o(" (MobileBERT model)"),Y6o=l(),h1=a("li"),Cme=a("strong"),K6o=o("mpnet"),Z6o=o(" \u2014 "),hG=a("a"),eLo=o("MPNetForMaskedLM"),oLo=o(" (MPNet model)"),rLo=l(),p1=a("li"),wme=a("strong"),tLo=o("mvp"),aLo=o(" \u2014 "),pG=a("a"),nLo=o("MvpForConditionalGeneration"),sLo=o(" (MVP model)"),lLo=l(),_1=a("li"),Ame=a("strong"),iLo=o("nezha"),dLo=o(" \u2014 "),_G=a("a"),cLo=o("NezhaForPreTraining"),fLo=o(" (Nezha model)"),mLo=l(),u1=a("li"),Lme=a("strong"),gLo=o("openai-gpt"),hLo=o(" \u2014 "),uG=a("a"),pLo=o("OpenAIGPTLMHeadModel"),_Lo=o(" (OpenAI GPT model)"),uLo=l(),b1=a("li"),yme=a("strong"),bLo=o("retribert"),vLo=o(" \u2014 "),bG=a("a"),FLo=o("RetriBertModel"),TLo=o(" (RetriBERT model)"),MLo=l(),v1=a("li"),xme=a("strong"),ELo=o("roberta"),CLo=o(" \u2014 "),vG=a("a"),wLo=o("RobertaForMaskedLM"),ALo=o(" (RoBERTa model)"),LLo=l(),F1=a("li"),$me=a("strong"),yLo=o("splinter"),xLo=o(" \u2014 "),FG=a("a"),$Lo=o("SplinterForPreTraining"),kLo=o(" (Splinter model)"),SLo=l(),T1=a("li"),kme=a("strong"),RLo=o("squeezebert"),PLo=o(" \u2014 "),TG=a("a"),BLo=o("SqueezeBertForMaskedLM"),ILo=o(" (SqueezeBERT model)"),NLo=l(),M1=a("li"),Sme=a("strong"),qLo=o("t5"),jLo=o(" \u2014 "),MG=a("a"),DLo=o("T5ForConditionalGeneration"),GLo=o(" (T5 model)"),OLo=l(),E1=a("li"),Rme=a("strong"),VLo=o("tapas"),XLo=o(" \u2014 "),EG=a("a"),zLo=o("TapasForMaskedLM"),QLo=o(" (TAPAS model)"),WLo=l(),C1=a("li"),Pme=a("strong"),HLo=o("transfo-xl"),ULo=o(" \u2014 "),CG=a("a"),JLo=o("TransfoXLLMHeadModel"),YLo=o(" (Transformer-XL model)"),KLo=l(),w1=a("li"),Bme=a("strong"),ZLo=o("unispeech"),eyo=o(" \u2014 "),wG=a("a"),oyo=o("UniSpeechForPreTraining"),ryo=o(" (UniSpeech model)"),tyo=l(),A1=a("li"),Ime=a("strong"),ayo=o("unispeech-sat"),nyo=o(" \u2014 "),AG=a("a"),syo=o("UniSpeechSatForPreTraining"),lyo=o(" (UniSpeechSat model)"),iyo=l(),L1=a("li"),Nme=a("strong"),dyo=o("visual_bert"),cyo=o(" \u2014 "),LG=a("a"),fyo=o("VisualBertForPreTraining"),myo=o(" (VisualBERT model)"),gyo=l(),y1=a("li"),qme=a("strong"),hyo=o("vit_mae"),pyo=o(" \u2014 "),yG=a("a"),_yo=o("ViTMAEForPreTraining"),uyo=o(" (ViTMAE model)"),byo=l(),x1=a("li"),jme=a("strong"),vyo=o("wav2vec2"),Fyo=o(" \u2014 "),xG=a("a"),Tyo=o("Wav2Vec2ForPreTraining"),Myo=o(" (Wav2Vec2 model)"),Eyo=l(),$1=a("li"),Dme=a("strong"),Cyo=o("wav2vec2-conformer"),wyo=o(" \u2014 "),$G=a("a"),Ayo=o("Wav2Vec2ConformerForPreTraining"),Lyo=o(" (Wav2Vec2-Conformer model)"),yyo=l(),k1=a("li"),Gme=a("strong"),xyo=o("xlm"),$yo=o(" \u2014 "),kG=a("a"),kyo=o("XLMWithLMHeadModel"),Syo=o(" (XLM model)"),Ryo=l(),S1=a("li"),Ome=a("strong"),Pyo=o("xlm-roberta"),Byo=o(" \u2014 "),SG=a("a"),Iyo=o("XLMRobertaForMaskedLM"),Nyo=o(" (XLM-RoBERTa model)"),qyo=l(),R1=a("li"),Vme=a("strong"),jyo=o("xlm-roberta-xl"),Dyo=o(" \u2014 "),RG=a("a"),Gyo=o("XLMRobertaXLForMaskedLM"),Oyo=o(" (XLM-RoBERTa-XL model)"),Vyo=l(),P1=a("li"),Xme=a("strong"),Xyo=o("xlnet"),zyo=o(" \u2014 "),PG=a("a"),Qyo=o("XLNetLMHeadModel"),Wyo=o(" (XLNet model)"),Hyo=l(),B1=a("p"),Uyo=o("The model is set in evaluation mode by default using "),zme=a("code"),Jyo=o("model.eval()"),Yyo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qme=a("code"),Kyo=o("model.train()"),Zyo=l(),F(I1.$$.fragment),kVe=l(),zi=a("h2"),N1=a("a"),Wme=a("span"),F(kL.$$.fragment),e8o=l(),Hme=a("span"),o8o=o("AutoModelForCausalLM"),SVe=l(),ko=a("div"),F(SL.$$.fragment),r8o=l(),Qi=a("p"),t8o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),BG=a("a"),a8o=o("from_pretrained()"),n8o=o(" class method or the "),IG=a("a"),s8o=o("from_config()"),l8o=o(` class
method.`),i8o=l(),RL=a("p"),d8o=o("This class cannot be instantiated directly using "),Ume=a("code"),c8o=o("__init__()"),f8o=o(" (throws an error)."),m8o=l(),it=a("div"),F(PL.$$.fragment),g8o=l(),Jme=a("p"),h8o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),p8o=l(),Wi=a("p"),_8o=o(`Note:
Loading a model from its configuration file does `),Yme=a("strong"),u8o=o("not"),b8o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NG=a("a"),v8o=o("from_pretrained()"),F8o=o(" to load the model weights."),T8o=l(),F(q1.$$.fragment),M8o=l(),Ke=a("div"),F(BL.$$.fragment),E8o=l(),Kme=a("p"),C8o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),w8o=l(),Ia=a("p"),A8o=o("The model class to instantiate is selected based on the "),Zme=a("code"),L8o=o("model_type"),y8o=o(` property of the config object (either
passed as an argument or loaded from `),ege=a("code"),x8o=o("pretrained_model_name_or_path"),$8o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oge=a("code"),k8o=o("pretrained_model_name_or_path"),S8o=o(":"),R8o=l(),z=a("ul"),j1=a("li"),rge=a("strong"),P8o=o("bart"),B8o=o(" \u2014 "),qG=a("a"),I8o=o("BartForCausalLM"),N8o=o(" (BART model)"),q8o=l(),D1=a("li"),tge=a("strong"),j8o=o("bert"),D8o=o(" \u2014 "),jG=a("a"),G8o=o("BertLMHeadModel"),O8o=o(" (BERT model)"),V8o=l(),G1=a("li"),age=a("strong"),X8o=o("bert-generation"),z8o=o(" \u2014 "),DG=a("a"),Q8o=o("BertGenerationDecoder"),W8o=o(" (Bert Generation model)"),H8o=l(),O1=a("li"),nge=a("strong"),U8o=o("big_bird"),J8o=o(" \u2014 "),GG=a("a"),Y8o=o("BigBirdForCausalLM"),K8o=o(" (BigBird model)"),Z8o=l(),V1=a("li"),sge=a("strong"),exo=o("bigbird_pegasus"),oxo=o(" \u2014 "),OG=a("a"),rxo=o("BigBirdPegasusForCausalLM"),txo=o(" (BigBird-Pegasus model)"),axo=l(),X1=a("li"),lge=a("strong"),nxo=o("blenderbot"),sxo=o(" \u2014 "),VG=a("a"),lxo=o("BlenderbotForCausalLM"),ixo=o(" (Blenderbot model)"),dxo=l(),z1=a("li"),ige=a("strong"),cxo=o("blenderbot-small"),fxo=o(" \u2014 "),XG=a("a"),mxo=o("BlenderbotSmallForCausalLM"),gxo=o(" (BlenderbotSmall model)"),hxo=l(),Q1=a("li"),dge=a("strong"),pxo=o("bloom"),_xo=o(" \u2014 "),zG=a("a"),uxo=o("BloomForCausalLM"),bxo=o(" (BLOOM model)"),vxo=l(),W1=a("li"),cge=a("strong"),Fxo=o("camembert"),Txo=o(" \u2014 "),QG=a("a"),Mxo=o("CamembertForCausalLM"),Exo=o(" (CamemBERT model)"),Cxo=l(),H1=a("li"),fge=a("strong"),wxo=o("codegen"),Axo=o(" \u2014 "),WG=a("a"),Lxo=o("CodeGenForCausalLM"),yxo=o(" (CodeGen model)"),xxo=l(),U1=a("li"),mge=a("strong"),$xo=o("ctrl"),kxo=o(" \u2014 "),HG=a("a"),Sxo=o("CTRLLMHeadModel"),Rxo=o(" (CTRL model)"),Pxo=l(),J1=a("li"),gge=a("strong"),Bxo=o("data2vec-text"),Ixo=o(" \u2014 "),UG=a("a"),Nxo=o("Data2VecTextForCausalLM"),qxo=o(" (Data2VecText model)"),jxo=l(),Y1=a("li"),hge=a("strong"),Dxo=o("electra"),Gxo=o(" \u2014 "),JG=a("a"),Oxo=o("ElectraForCausalLM"),Vxo=o(" (ELECTRA model)"),Xxo=l(),K1=a("li"),pge=a("strong"),zxo=o("gpt2"),Qxo=o(" \u2014 "),YG=a("a"),Wxo=o("GPT2LMHeadModel"),Hxo=o(" (OpenAI GPT-2 model)"),Uxo=l(),Z1=a("li"),_ge=a("strong"),Jxo=o("gpt_neo"),Yxo=o(" \u2014 "),KG=a("a"),Kxo=o("GPTNeoForCausalLM"),Zxo=o(" (GPT Neo model)"),e$o=l(),e2=a("li"),uge=a("strong"),o$o=o("gpt_neox"),r$o=o(" \u2014 "),ZG=a("a"),t$o=o("GPTNeoXForCausalLM"),a$o=o(" (GPT NeoX model)"),n$o=l(),o2=a("li"),bge=a("strong"),s$o=o("gptj"),l$o=o(" \u2014 "),eO=a("a"),i$o=o("GPTJForCausalLM"),d$o=o(" (GPT-J model)"),c$o=l(),r2=a("li"),vge=a("strong"),f$o=o("marian"),m$o=o(" \u2014 "),oO=a("a"),g$o=o("MarianForCausalLM"),h$o=o(" (Marian model)"),p$o=l(),t2=a("li"),Fge=a("strong"),_$o=o("mbart"),u$o=o(" \u2014 "),rO=a("a"),b$o=o("MBartForCausalLM"),v$o=o(" (mBART model)"),F$o=l(),a2=a("li"),Tge=a("strong"),T$o=o("megatron-bert"),M$o=o(" \u2014 "),tO=a("a"),E$o=o("MegatronBertForCausalLM"),C$o=o(" (Megatron-BERT model)"),w$o=l(),n2=a("li"),Mge=a("strong"),A$o=o("mvp"),L$o=o(" \u2014 "),aO=a("a"),y$o=o("MvpForCausalLM"),x$o=o(" (MVP model)"),$$o=l(),s2=a("li"),Ege=a("strong"),k$o=o("openai-gpt"),S$o=o(" \u2014 "),nO=a("a"),R$o=o("OpenAIGPTLMHeadModel"),P$o=o(" (OpenAI GPT model)"),B$o=l(),l2=a("li"),Cge=a("strong"),I$o=o("opt"),N$o=o(" \u2014 "),sO=a("a"),q$o=o("OPTForCausalLM"),j$o=o(" (OPT model)"),D$o=l(),i2=a("li"),wge=a("strong"),G$o=o("pegasus"),O$o=o(" \u2014 "),lO=a("a"),V$o=o("PegasusForCausalLM"),X$o=o(" (Pegasus model)"),z$o=l(),d2=a("li"),Age=a("strong"),Q$o=o("plbart"),W$o=o(" \u2014 "),iO=a("a"),H$o=o("PLBartForCausalLM"),U$o=o(" (PLBart model)"),J$o=l(),c2=a("li"),Lge=a("strong"),Y$o=o("prophetnet"),K$o=o(" \u2014 "),dO=a("a"),Z$o=o("ProphetNetForCausalLM"),eko=o(" (ProphetNet model)"),oko=l(),f2=a("li"),yge=a("strong"),rko=o("qdqbert"),tko=o(" \u2014 "),cO=a("a"),ako=o("QDQBertLMHeadModel"),nko=o(" (QDQBert model)"),sko=l(),m2=a("li"),xge=a("strong"),lko=o("reformer"),iko=o(" \u2014 "),fO=a("a"),dko=o("ReformerModelWithLMHead"),cko=o(" (Reformer model)"),fko=l(),g2=a("li"),$ge=a("strong"),mko=o("rembert"),gko=o(" \u2014 "),mO=a("a"),hko=o("RemBertForCausalLM"),pko=o(" (RemBERT model)"),_ko=l(),h2=a("li"),kge=a("strong"),uko=o("roberta"),bko=o(" \u2014 "),gO=a("a"),vko=o("RobertaForCausalLM"),Fko=o(" (RoBERTa model)"),Tko=l(),p2=a("li"),Sge=a("strong"),Mko=o("roformer"),Eko=o(" \u2014 "),hO=a("a"),Cko=o("RoFormerForCausalLM"),wko=o(" (RoFormer model)"),Ako=l(),_2=a("li"),Rge=a("strong"),Lko=o("speech_to_text_2"),yko=o(" \u2014 "),pO=a("a"),xko=o("Speech2Text2ForCausalLM"),$ko=o(" (Speech2Text2 model)"),kko=l(),u2=a("li"),Pge=a("strong"),Sko=o("transfo-xl"),Rko=o(" \u2014 "),_O=a("a"),Pko=o("TransfoXLLMHeadModel"),Bko=o(" (Transformer-XL model)"),Iko=l(),b2=a("li"),Bge=a("strong"),Nko=o("trocr"),qko=o(" \u2014 "),uO=a("a"),jko=o("TrOCRForCausalLM"),Dko=o(" (TrOCR model)"),Gko=l(),v2=a("li"),Ige=a("strong"),Oko=o("xglm"),Vko=o(" \u2014 "),bO=a("a"),Xko=o("XGLMForCausalLM"),zko=o(" (XGLM model)"),Qko=l(),F2=a("li"),Nge=a("strong"),Wko=o("xlm"),Hko=o(" \u2014 "),vO=a("a"),Uko=o("XLMWithLMHeadModel"),Jko=o(" (XLM model)"),Yko=l(),T2=a("li"),qge=a("strong"),Kko=o("xlm-prophetnet"),Zko=o(" \u2014 "),FO=a("a"),eSo=o("XLMProphetNetForCausalLM"),oSo=o(" (XLM-ProphetNet model)"),rSo=l(),M2=a("li"),jge=a("strong"),tSo=o("xlm-roberta"),aSo=o(" \u2014 "),TO=a("a"),nSo=o("XLMRobertaForCausalLM"),sSo=o(" (XLM-RoBERTa model)"),lSo=l(),E2=a("li"),Dge=a("strong"),iSo=o("xlm-roberta-xl"),dSo=o(" \u2014 "),MO=a("a"),cSo=o("XLMRobertaXLForCausalLM"),fSo=o(" (XLM-RoBERTa-XL model)"),mSo=l(),C2=a("li"),Gge=a("strong"),gSo=o("xlnet"),hSo=o(" \u2014 "),EO=a("a"),pSo=o("XLNetLMHeadModel"),_So=o(" (XLNet model)"),uSo=l(),w2=a("p"),bSo=o("The model is set in evaluation mode by default using "),Oge=a("code"),vSo=o("model.eval()"),FSo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vge=a("code"),TSo=o("model.train()"),MSo=l(),F(A2.$$.fragment),RVe=l(),Hi=a("h2"),L2=a("a"),Xge=a("span"),F(IL.$$.fragment),ESo=l(),zge=a("span"),CSo=o("AutoModelForMaskedLM"),PVe=l(),So=a("div"),F(NL.$$.fragment),wSo=l(),Ui=a("p"),ASo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),CO=a("a"),LSo=o("from_pretrained()"),ySo=o(" class method or the "),wO=a("a"),xSo=o("from_config()"),$So=o(` class
method.`),kSo=l(),qL=a("p"),SSo=o("This class cannot be instantiated directly using "),Qge=a("code"),RSo=o("__init__()"),PSo=o(" (throws an error)."),BSo=l(),dt=a("div"),F(jL.$$.fragment),ISo=l(),Wge=a("p"),NSo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),qSo=l(),Ji=a("p"),jSo=o(`Note:
Loading a model from its configuration file does `),Hge=a("strong"),DSo=o("not"),GSo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AO=a("a"),OSo=o("from_pretrained()"),VSo=o(" to load the model weights."),XSo=l(),F(y2.$$.fragment),zSo=l(),Ze=a("div"),F(DL.$$.fragment),QSo=l(),Uge=a("p"),WSo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),HSo=l(),Na=a("p"),USo=o("The model class to instantiate is selected based on the "),Jge=a("code"),JSo=o("model_type"),YSo=o(` property of the config object (either
passed as an argument or loaded from `),Yge=a("code"),KSo=o("pretrained_model_name_or_path"),ZSo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kge=a("code"),eRo=o("pretrained_model_name_or_path"),oRo=o(":"),rRo=l(),W=a("ul"),x2=a("li"),Zge=a("strong"),tRo=o("albert"),aRo=o(" \u2014 "),LO=a("a"),nRo=o("AlbertForMaskedLM"),sRo=o(" (ALBERT model)"),lRo=l(),$2=a("li"),ehe=a("strong"),iRo=o("bart"),dRo=o(" \u2014 "),yO=a("a"),cRo=o("BartForConditionalGeneration"),fRo=o(" (BART model)"),mRo=l(),k2=a("li"),ohe=a("strong"),gRo=o("bert"),hRo=o(" \u2014 "),xO=a("a"),pRo=o("BertForMaskedLM"),_Ro=o(" (BERT model)"),uRo=l(),S2=a("li"),rhe=a("strong"),bRo=o("big_bird"),vRo=o(" \u2014 "),$O=a("a"),FRo=o("BigBirdForMaskedLM"),TRo=o(" (BigBird model)"),MRo=l(),R2=a("li"),the=a("strong"),ERo=o("camembert"),CRo=o(" \u2014 "),kO=a("a"),wRo=o("CamembertForMaskedLM"),ARo=o(" (CamemBERT model)"),LRo=l(),P2=a("li"),ahe=a("strong"),yRo=o("convbert"),xRo=o(" \u2014 "),SO=a("a"),$Ro=o("ConvBertForMaskedLM"),kRo=o(" (ConvBERT model)"),SRo=l(),B2=a("li"),nhe=a("strong"),RRo=o("data2vec-text"),PRo=o(" \u2014 "),RO=a("a"),BRo=o("Data2VecTextForMaskedLM"),IRo=o(" (Data2VecText model)"),NRo=l(),I2=a("li"),she=a("strong"),qRo=o("deberta"),jRo=o(" \u2014 "),PO=a("a"),DRo=o("DebertaForMaskedLM"),GRo=o(" (DeBERTa model)"),ORo=l(),N2=a("li"),lhe=a("strong"),VRo=o("deberta-v2"),XRo=o(" \u2014 "),BO=a("a"),zRo=o("DebertaV2ForMaskedLM"),QRo=o(" (DeBERTa-v2 model)"),WRo=l(),q2=a("li"),ihe=a("strong"),HRo=o("distilbert"),URo=o(" \u2014 "),IO=a("a"),JRo=o("DistilBertForMaskedLM"),YRo=o(" (DistilBERT model)"),KRo=l(),j2=a("li"),dhe=a("strong"),ZRo=o("electra"),ePo=o(" \u2014 "),NO=a("a"),oPo=o("ElectraForMaskedLM"),rPo=o(" (ELECTRA model)"),tPo=l(),D2=a("li"),che=a("strong"),aPo=o("flaubert"),nPo=o(" \u2014 "),qO=a("a"),sPo=o("FlaubertWithLMHeadModel"),lPo=o(" (FlauBERT model)"),iPo=l(),G2=a("li"),fhe=a("strong"),dPo=o("fnet"),cPo=o(" \u2014 "),jO=a("a"),fPo=o("FNetForMaskedLM"),mPo=o(" (FNet model)"),gPo=l(),O2=a("li"),mhe=a("strong"),hPo=o("funnel"),pPo=o(" \u2014 "),DO=a("a"),_Po=o("FunnelForMaskedLM"),uPo=o(" (Funnel Transformer model)"),bPo=l(),V2=a("li"),ghe=a("strong"),vPo=o("ibert"),FPo=o(" \u2014 "),GO=a("a"),TPo=o("IBertForMaskedLM"),MPo=o(" (I-BERT model)"),EPo=l(),X2=a("li"),hhe=a("strong"),CPo=o("layoutlm"),wPo=o(" \u2014 "),OO=a("a"),APo=o("LayoutLMForMaskedLM"),LPo=o(" (LayoutLM model)"),yPo=l(),z2=a("li"),phe=a("strong"),xPo=o("longformer"),$Po=o(" \u2014 "),VO=a("a"),kPo=o("LongformerForMaskedLM"),SPo=o(" (Longformer model)"),RPo=l(),Q2=a("li"),_he=a("strong"),PPo=o("luke"),BPo=o(" \u2014 "),XO=a("a"),IPo=o("LukeForMaskedLM"),NPo=o(" (LUKE model)"),qPo=l(),W2=a("li"),uhe=a("strong"),jPo=o("mbart"),DPo=o(" \u2014 "),zO=a("a"),GPo=o("MBartForConditionalGeneration"),OPo=o(" (mBART model)"),VPo=l(),H2=a("li"),bhe=a("strong"),XPo=o("megatron-bert"),zPo=o(" \u2014 "),QO=a("a"),QPo=o("MegatronBertForMaskedLM"),WPo=o(" (Megatron-BERT model)"),HPo=l(),U2=a("li"),vhe=a("strong"),UPo=o("mobilebert"),JPo=o(" \u2014 "),WO=a("a"),YPo=o("MobileBertForMaskedLM"),KPo=o(" (MobileBERT model)"),ZPo=l(),J2=a("li"),Fhe=a("strong"),eBo=o("mpnet"),oBo=o(" \u2014 "),HO=a("a"),rBo=o("MPNetForMaskedLM"),tBo=o(" (MPNet model)"),aBo=l(),Y2=a("li"),The=a("strong"),nBo=o("mvp"),sBo=o(" \u2014 "),UO=a("a"),lBo=o("MvpForConditionalGeneration"),iBo=o(" (MVP model)"),dBo=l(),K2=a("li"),Mhe=a("strong"),cBo=o("nezha"),fBo=o(" \u2014 "),JO=a("a"),mBo=o("NezhaForMaskedLM"),gBo=o(" (Nezha model)"),hBo=l(),Z2=a("li"),Ehe=a("strong"),pBo=o("nystromformer"),_Bo=o(" \u2014 "),YO=a("a"),uBo=o("NystromformerForMaskedLM"),bBo=o(" (Nystr\xF6mformer model)"),vBo=l(),eb=a("li"),Che=a("strong"),FBo=o("perceiver"),TBo=o(" \u2014 "),KO=a("a"),MBo=o("PerceiverForMaskedLM"),EBo=o(" (Perceiver model)"),CBo=l(),ob=a("li"),whe=a("strong"),wBo=o("qdqbert"),ABo=o(" \u2014 "),ZO=a("a"),LBo=o("QDQBertForMaskedLM"),yBo=o(" (QDQBert model)"),xBo=l(),rb=a("li"),Ahe=a("strong"),$Bo=o("reformer"),kBo=o(" \u2014 "),eV=a("a"),SBo=o("ReformerForMaskedLM"),RBo=o(" (Reformer model)"),PBo=l(),tb=a("li"),Lhe=a("strong"),BBo=o("rembert"),IBo=o(" \u2014 "),oV=a("a"),NBo=o("RemBertForMaskedLM"),qBo=o(" (RemBERT model)"),jBo=l(),ab=a("li"),yhe=a("strong"),DBo=o("roberta"),GBo=o(" \u2014 "),rV=a("a"),OBo=o("RobertaForMaskedLM"),VBo=o(" (RoBERTa model)"),XBo=l(),nb=a("li"),xhe=a("strong"),zBo=o("roformer"),QBo=o(" \u2014 "),tV=a("a"),WBo=o("RoFormerForMaskedLM"),HBo=o(" (RoFormer model)"),UBo=l(),sb=a("li"),$he=a("strong"),JBo=o("squeezebert"),YBo=o(" \u2014 "),aV=a("a"),KBo=o("SqueezeBertForMaskedLM"),ZBo=o(" (SqueezeBERT model)"),eIo=l(),lb=a("li"),khe=a("strong"),oIo=o("tapas"),rIo=o(" \u2014 "),nV=a("a"),tIo=o("TapasForMaskedLM"),aIo=o(" (TAPAS model)"),nIo=l(),ib=a("li"),She=a("strong"),sIo=o("wav2vec2"),lIo=o(" \u2014 "),Rhe=a("code"),iIo=o("Wav2Vec2ForMaskedLM"),dIo=o(" (Wav2Vec2 model)"),cIo=l(),db=a("li"),Phe=a("strong"),fIo=o("xlm"),mIo=o(" \u2014 "),sV=a("a"),gIo=o("XLMWithLMHeadModel"),hIo=o(" (XLM model)"),pIo=l(),cb=a("li"),Bhe=a("strong"),_Io=o("xlm-roberta"),uIo=o(" \u2014 "),lV=a("a"),bIo=o("XLMRobertaForMaskedLM"),vIo=o(" (XLM-RoBERTa model)"),FIo=l(),fb=a("li"),Ihe=a("strong"),TIo=o("xlm-roberta-xl"),MIo=o(" \u2014 "),iV=a("a"),EIo=o("XLMRobertaXLForMaskedLM"),CIo=o(" (XLM-RoBERTa-XL model)"),wIo=l(),mb=a("li"),Nhe=a("strong"),AIo=o("yoso"),LIo=o(" \u2014 "),dV=a("a"),yIo=o("YosoForMaskedLM"),xIo=o(" (YOSO model)"),$Io=l(),gb=a("p"),kIo=o("The model is set in evaluation mode by default using "),qhe=a("code"),SIo=o("model.eval()"),RIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jhe=a("code"),PIo=o("model.train()"),BIo=l(),F(hb.$$.fragment),BVe=l(),Yi=a("h2"),pb=a("a"),Dhe=a("span"),F(GL.$$.fragment),IIo=l(),Ghe=a("span"),NIo=o("AutoModelForSeq2SeqLM"),IVe=l(),Ro=a("div"),F(OL.$$.fragment),qIo=l(),Ki=a("p"),jIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),cV=a("a"),DIo=o("from_pretrained()"),GIo=o(" class method or the "),fV=a("a"),OIo=o("from_config()"),VIo=o(` class
method.`),XIo=l(),VL=a("p"),zIo=o("This class cannot be instantiated directly using "),Ohe=a("code"),QIo=o("__init__()"),WIo=o(" (throws an error)."),HIo=l(),ct=a("div"),F(XL.$$.fragment),UIo=l(),Vhe=a("p"),JIo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),YIo=l(),Zi=a("p"),KIo=o(`Note:
Loading a model from its configuration file does `),Xhe=a("strong"),ZIo=o("not"),eNo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mV=a("a"),oNo=o("from_pretrained()"),rNo=o(" to load the model weights."),tNo=l(),F(_b.$$.fragment),aNo=l(),eo=a("div"),F(zL.$$.fragment),nNo=l(),zhe=a("p"),sNo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),lNo=l(),qa=a("p"),iNo=o("The model class to instantiate is selected based on the "),Qhe=a("code"),dNo=o("model_type"),cNo=o(` property of the config object (either
passed as an argument or loaded from `),Whe=a("code"),fNo=o("pretrained_model_name_or_path"),mNo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hhe=a("code"),gNo=o("pretrained_model_name_or_path"),hNo=o(":"),pNo=l(),pe=a("ul"),ub=a("li"),Uhe=a("strong"),_No=o("bart"),uNo=o(" \u2014 "),gV=a("a"),bNo=o("BartForConditionalGeneration"),vNo=o(" (BART model)"),FNo=l(),bb=a("li"),Jhe=a("strong"),TNo=o("bigbird_pegasus"),MNo=o(" \u2014 "),hV=a("a"),ENo=o("BigBirdPegasusForConditionalGeneration"),CNo=o(" (BigBird-Pegasus model)"),wNo=l(),vb=a("li"),Yhe=a("strong"),ANo=o("blenderbot"),LNo=o(" \u2014 "),pV=a("a"),yNo=o("BlenderbotForConditionalGeneration"),xNo=o(" (Blenderbot model)"),$No=l(),Fb=a("li"),Khe=a("strong"),kNo=o("blenderbot-small"),SNo=o(" \u2014 "),_V=a("a"),RNo=o("BlenderbotSmallForConditionalGeneration"),PNo=o(" (BlenderbotSmall model)"),BNo=l(),Tb=a("li"),Zhe=a("strong"),INo=o("encoder-decoder"),NNo=o(" \u2014 "),uV=a("a"),qNo=o("EncoderDecoderModel"),jNo=o(" (Encoder decoder model)"),DNo=l(),Mb=a("li"),epe=a("strong"),GNo=o("fsmt"),ONo=o(" \u2014 "),bV=a("a"),VNo=o("FSMTForConditionalGeneration"),XNo=o(" (FairSeq Machine-Translation model)"),zNo=l(),Eb=a("li"),ope=a("strong"),QNo=o("led"),WNo=o(" \u2014 "),vV=a("a"),HNo=o("LEDForConditionalGeneration"),UNo=o(" (LED model)"),JNo=l(),Cb=a("li"),rpe=a("strong"),YNo=o("longt5"),KNo=o(" \u2014 "),FV=a("a"),ZNo=o("LongT5ForConditionalGeneration"),eqo=o(" (LongT5 model)"),oqo=l(),wb=a("li"),tpe=a("strong"),rqo=o("m2m_100"),tqo=o(" \u2014 "),TV=a("a"),aqo=o("M2M100ForConditionalGeneration"),nqo=o(" (M2M100 model)"),sqo=l(),Ab=a("li"),ape=a("strong"),lqo=o("marian"),iqo=o(" \u2014 "),MV=a("a"),dqo=o("MarianMTModel"),cqo=o(" (Marian model)"),fqo=l(),Lb=a("li"),npe=a("strong"),mqo=o("mbart"),gqo=o(" \u2014 "),EV=a("a"),hqo=o("MBartForConditionalGeneration"),pqo=o(" (mBART model)"),_qo=l(),yb=a("li"),spe=a("strong"),uqo=o("mt5"),bqo=o(" \u2014 "),CV=a("a"),vqo=o("MT5ForConditionalGeneration"),Fqo=o(" (MT5 model)"),Tqo=l(),xb=a("li"),lpe=a("strong"),Mqo=o("mvp"),Eqo=o(" \u2014 "),wV=a("a"),Cqo=o("MvpForConditionalGeneration"),wqo=o(" (MVP model)"),Aqo=l(),$b=a("li"),ipe=a("strong"),Lqo=o("pegasus"),yqo=o(" \u2014 "),AV=a("a"),xqo=o("PegasusForConditionalGeneration"),$qo=o(" (Pegasus model)"),kqo=l(),kb=a("li"),dpe=a("strong"),Sqo=o("plbart"),Rqo=o(" \u2014 "),LV=a("a"),Pqo=o("PLBartForConditionalGeneration"),Bqo=o(" (PLBart model)"),Iqo=l(),Sb=a("li"),cpe=a("strong"),Nqo=o("prophetnet"),qqo=o(" \u2014 "),yV=a("a"),jqo=o("ProphetNetForConditionalGeneration"),Dqo=o(" (ProphetNet model)"),Gqo=l(),Rb=a("li"),fpe=a("strong"),Oqo=o("t5"),Vqo=o(" \u2014 "),xV=a("a"),Xqo=o("T5ForConditionalGeneration"),zqo=o(" (T5 model)"),Qqo=l(),Pb=a("li"),mpe=a("strong"),Wqo=o("xlm-prophetnet"),Hqo=o(" \u2014 "),$V=a("a"),Uqo=o("XLMProphetNetForConditionalGeneration"),Jqo=o(" (XLM-ProphetNet model)"),Yqo=l(),Bb=a("p"),Kqo=o("The model is set in evaluation mode by default using "),gpe=a("code"),Zqo=o("model.eval()"),ejo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hpe=a("code"),ojo=o("model.train()"),rjo=l(),F(Ib.$$.fragment),NVe=l(),ed=a("h2"),Nb=a("a"),ppe=a("span"),F(QL.$$.fragment),tjo=l(),_pe=a("span"),ajo=o("AutoModelForSequenceClassification"),qVe=l(),Po=a("div"),F(WL.$$.fragment),njo=l(),od=a("p"),sjo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),kV=a("a"),ljo=o("from_pretrained()"),ijo=o(" class method or the "),SV=a("a"),djo=o("from_config()"),cjo=o(` class
method.`),fjo=l(),HL=a("p"),mjo=o("This class cannot be instantiated directly using "),upe=a("code"),gjo=o("__init__()"),hjo=o(" (throws an error)."),pjo=l(),ft=a("div"),F(UL.$$.fragment),_jo=l(),bpe=a("p"),ujo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),bjo=l(),rd=a("p"),vjo=o(`Note:
Loading a model from its configuration file does `),vpe=a("strong"),Fjo=o("not"),Tjo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RV=a("a"),Mjo=o("from_pretrained()"),Ejo=o(" to load the model weights."),Cjo=l(),F(qb.$$.fragment),wjo=l(),oo=a("div"),F(JL.$$.fragment),Ajo=l(),Fpe=a("p"),Ljo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),yjo=l(),ja=a("p"),xjo=o("The model class to instantiate is selected based on the "),Tpe=a("code"),$jo=o("model_type"),kjo=o(` property of the config object (either
passed as an argument or loaded from `),Mpe=a("code"),Sjo=o("pretrained_model_name_or_path"),Rjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Epe=a("code"),Pjo=o("pretrained_model_name_or_path"),Bjo=o(":"),Ijo=l(),N=a("ul"),jb=a("li"),Cpe=a("strong"),Njo=o("albert"),qjo=o(" \u2014 "),PV=a("a"),jjo=o("AlbertForSequenceClassification"),Djo=o(" (ALBERT model)"),Gjo=l(),Db=a("li"),wpe=a("strong"),Ojo=o("bart"),Vjo=o(" \u2014 "),BV=a("a"),Xjo=o("BartForSequenceClassification"),zjo=o(" (BART model)"),Qjo=l(),Gb=a("li"),Ape=a("strong"),Wjo=o("bert"),Hjo=o(" \u2014 "),IV=a("a"),Ujo=o("BertForSequenceClassification"),Jjo=o(" (BERT model)"),Yjo=l(),Ob=a("li"),Lpe=a("strong"),Kjo=o("big_bird"),Zjo=o(" \u2014 "),NV=a("a"),eDo=o("BigBirdForSequenceClassification"),oDo=o(" (BigBird model)"),rDo=l(),Vb=a("li"),ype=a("strong"),tDo=o("bigbird_pegasus"),aDo=o(" \u2014 "),qV=a("a"),nDo=o("BigBirdPegasusForSequenceClassification"),sDo=o(" (BigBird-Pegasus model)"),lDo=l(),Xb=a("li"),xpe=a("strong"),iDo=o("bloom"),dDo=o(" \u2014 "),jV=a("a"),cDo=o("BloomForSequenceClassification"),fDo=o(" (BLOOM model)"),mDo=l(),zb=a("li"),$pe=a("strong"),gDo=o("camembert"),hDo=o(" \u2014 "),DV=a("a"),pDo=o("CamembertForSequenceClassification"),_Do=o(" (CamemBERT model)"),uDo=l(),Qb=a("li"),kpe=a("strong"),bDo=o("canine"),vDo=o(" \u2014 "),GV=a("a"),FDo=o("CanineForSequenceClassification"),TDo=o(" (CANINE model)"),MDo=l(),Wb=a("li"),Spe=a("strong"),EDo=o("convbert"),CDo=o(" \u2014 "),OV=a("a"),wDo=o("ConvBertForSequenceClassification"),ADo=o(" (ConvBERT model)"),LDo=l(),Hb=a("li"),Rpe=a("strong"),yDo=o("ctrl"),xDo=o(" \u2014 "),VV=a("a"),$Do=o("CTRLForSequenceClassification"),kDo=o(" (CTRL model)"),SDo=l(),Ub=a("li"),Ppe=a("strong"),RDo=o("data2vec-text"),PDo=o(" \u2014 "),XV=a("a"),BDo=o("Data2VecTextForSequenceClassification"),IDo=o(" (Data2VecText model)"),NDo=l(),Jb=a("li"),Bpe=a("strong"),qDo=o("deberta"),jDo=o(" \u2014 "),zV=a("a"),DDo=o("DebertaForSequenceClassification"),GDo=o(" (DeBERTa model)"),ODo=l(),Yb=a("li"),Ipe=a("strong"),VDo=o("deberta-v2"),XDo=o(" \u2014 "),QV=a("a"),zDo=o("DebertaV2ForSequenceClassification"),QDo=o(" (DeBERTa-v2 model)"),WDo=l(),Kb=a("li"),Npe=a("strong"),HDo=o("distilbert"),UDo=o(" \u2014 "),WV=a("a"),JDo=o("DistilBertForSequenceClassification"),YDo=o(" (DistilBERT model)"),KDo=l(),Zb=a("li"),qpe=a("strong"),ZDo=o("electra"),eGo=o(" \u2014 "),HV=a("a"),oGo=o("ElectraForSequenceClassification"),rGo=o(" (ELECTRA model)"),tGo=l(),ev=a("li"),jpe=a("strong"),aGo=o("flaubert"),nGo=o(" \u2014 "),UV=a("a"),sGo=o("FlaubertForSequenceClassification"),lGo=o(" (FlauBERT model)"),iGo=l(),ov=a("li"),Dpe=a("strong"),dGo=o("fnet"),cGo=o(" \u2014 "),JV=a("a"),fGo=o("FNetForSequenceClassification"),mGo=o(" (FNet model)"),gGo=l(),rv=a("li"),Gpe=a("strong"),hGo=o("funnel"),pGo=o(" \u2014 "),YV=a("a"),_Go=o("FunnelForSequenceClassification"),uGo=o(" (Funnel Transformer model)"),bGo=l(),tv=a("li"),Ope=a("strong"),vGo=o("gpt2"),FGo=o(" \u2014 "),KV=a("a"),TGo=o("GPT2ForSequenceClassification"),MGo=o(" (OpenAI GPT-2 model)"),EGo=l(),av=a("li"),Vpe=a("strong"),CGo=o("gpt_neo"),wGo=o(" \u2014 "),ZV=a("a"),AGo=o("GPTNeoForSequenceClassification"),LGo=o(" (GPT Neo model)"),yGo=l(),nv=a("li"),Xpe=a("strong"),xGo=o("gptj"),$Go=o(" \u2014 "),eX=a("a"),kGo=o("GPTJForSequenceClassification"),SGo=o(" (GPT-J model)"),RGo=l(),sv=a("li"),zpe=a("strong"),PGo=o("ibert"),BGo=o(" \u2014 "),oX=a("a"),IGo=o("IBertForSequenceClassification"),NGo=o(" (I-BERT model)"),qGo=l(),lv=a("li"),Qpe=a("strong"),jGo=o("layoutlm"),DGo=o(" \u2014 "),rX=a("a"),GGo=o("LayoutLMForSequenceClassification"),OGo=o(" (LayoutLM model)"),VGo=l(),iv=a("li"),Wpe=a("strong"),XGo=o("layoutlmv2"),zGo=o(" \u2014 "),tX=a("a"),QGo=o("LayoutLMv2ForSequenceClassification"),WGo=o(" (LayoutLMv2 model)"),HGo=l(),dv=a("li"),Hpe=a("strong"),UGo=o("layoutlmv3"),JGo=o(" \u2014 "),aX=a("a"),YGo=o("LayoutLMv3ForSequenceClassification"),KGo=o(" (LayoutLMv3 model)"),ZGo=l(),cv=a("li"),Upe=a("strong"),eOo=o("led"),oOo=o(" \u2014 "),nX=a("a"),rOo=o("LEDForSequenceClassification"),tOo=o(" (LED model)"),aOo=l(),fv=a("li"),Jpe=a("strong"),nOo=o("longformer"),sOo=o(" \u2014 "),sX=a("a"),lOo=o("LongformerForSequenceClassification"),iOo=o(" (Longformer model)"),dOo=l(),mv=a("li"),Ype=a("strong"),cOo=o("mbart"),fOo=o(" \u2014 "),lX=a("a"),mOo=o("MBartForSequenceClassification"),gOo=o(" (mBART model)"),hOo=l(),gv=a("li"),Kpe=a("strong"),pOo=o("megatron-bert"),_Oo=o(" \u2014 "),iX=a("a"),uOo=o("MegatronBertForSequenceClassification"),bOo=o(" (Megatron-BERT model)"),vOo=l(),hv=a("li"),Zpe=a("strong"),FOo=o("mobilebert"),TOo=o(" \u2014 "),dX=a("a"),MOo=o("MobileBertForSequenceClassification"),EOo=o(" (MobileBERT model)"),COo=l(),pv=a("li"),e_e=a("strong"),wOo=o("mpnet"),AOo=o(" \u2014 "),cX=a("a"),LOo=o("MPNetForSequenceClassification"),yOo=o(" (MPNet model)"),xOo=l(),_v=a("li"),o_e=a("strong"),$Oo=o("mvp"),kOo=o(" \u2014 "),fX=a("a"),SOo=o("MvpForSequenceClassification"),ROo=o(" (MVP model)"),POo=l(),uv=a("li"),r_e=a("strong"),BOo=o("nezha"),IOo=o(" \u2014 "),mX=a("a"),NOo=o("NezhaForSequenceClassification"),qOo=o(" (Nezha model)"),jOo=l(),bv=a("li"),t_e=a("strong"),DOo=o("nystromformer"),GOo=o(" \u2014 "),gX=a("a"),OOo=o("NystromformerForSequenceClassification"),VOo=o(" (Nystr\xF6mformer model)"),XOo=l(),vv=a("li"),a_e=a("strong"),zOo=o("openai-gpt"),QOo=o(" \u2014 "),hX=a("a"),WOo=o("OpenAIGPTForSequenceClassification"),HOo=o(" (OpenAI GPT model)"),UOo=l(),Fv=a("li"),n_e=a("strong"),JOo=o("perceiver"),YOo=o(" \u2014 "),pX=a("a"),KOo=o("PerceiverForSequenceClassification"),ZOo=o(" (Perceiver model)"),eVo=l(),Tv=a("li"),s_e=a("strong"),oVo=o("plbart"),rVo=o(" \u2014 "),_X=a("a"),tVo=o("PLBartForSequenceClassification"),aVo=o(" (PLBart model)"),nVo=l(),Mv=a("li"),l_e=a("strong"),sVo=o("qdqbert"),lVo=o(" \u2014 "),uX=a("a"),iVo=o("QDQBertForSequenceClassification"),dVo=o(" (QDQBert model)"),cVo=l(),Ev=a("li"),i_e=a("strong"),fVo=o("reformer"),mVo=o(" \u2014 "),bX=a("a"),gVo=o("ReformerForSequenceClassification"),hVo=o(" (Reformer model)"),pVo=l(),Cv=a("li"),d_e=a("strong"),_Vo=o("rembert"),uVo=o(" \u2014 "),vX=a("a"),bVo=o("RemBertForSequenceClassification"),vVo=o(" (RemBERT model)"),FVo=l(),wv=a("li"),c_e=a("strong"),TVo=o("roberta"),MVo=o(" \u2014 "),FX=a("a"),EVo=o("RobertaForSequenceClassification"),CVo=o(" (RoBERTa model)"),wVo=l(),Av=a("li"),f_e=a("strong"),AVo=o("roformer"),LVo=o(" \u2014 "),TX=a("a"),yVo=o("RoFormerForSequenceClassification"),xVo=o(" (RoFormer model)"),$Vo=l(),Lv=a("li"),m_e=a("strong"),kVo=o("squeezebert"),SVo=o(" \u2014 "),MX=a("a"),RVo=o("SqueezeBertForSequenceClassification"),PVo=o(" (SqueezeBERT model)"),BVo=l(),yv=a("li"),g_e=a("strong"),IVo=o("tapas"),NVo=o(" \u2014 "),EX=a("a"),qVo=o("TapasForSequenceClassification"),jVo=o(" (TAPAS model)"),DVo=l(),xv=a("li"),h_e=a("strong"),GVo=o("transfo-xl"),OVo=o(" \u2014 "),CX=a("a"),VVo=o("TransfoXLForSequenceClassification"),XVo=o(" (Transformer-XL model)"),zVo=l(),$v=a("li"),p_e=a("strong"),QVo=o("xlm"),WVo=o(" \u2014 "),wX=a("a"),HVo=o("XLMForSequenceClassification"),UVo=o(" (XLM model)"),JVo=l(),kv=a("li"),__e=a("strong"),YVo=o("xlm-roberta"),KVo=o(" \u2014 "),AX=a("a"),ZVo=o("XLMRobertaForSequenceClassification"),eXo=o(" (XLM-RoBERTa model)"),oXo=l(),Sv=a("li"),u_e=a("strong"),rXo=o("xlm-roberta-xl"),tXo=o(" \u2014 "),LX=a("a"),aXo=o("XLMRobertaXLForSequenceClassification"),nXo=o(" (XLM-RoBERTa-XL model)"),sXo=l(),Rv=a("li"),b_e=a("strong"),lXo=o("xlnet"),iXo=o(" \u2014 "),yX=a("a"),dXo=o("XLNetForSequenceClassification"),cXo=o(" (XLNet model)"),fXo=l(),Pv=a("li"),v_e=a("strong"),mXo=o("yoso"),gXo=o(" \u2014 "),xX=a("a"),hXo=o("YosoForSequenceClassification"),pXo=o(" (YOSO model)"),_Xo=l(),Bv=a("p"),uXo=o("The model is set in evaluation mode by default using "),F_e=a("code"),bXo=o("model.eval()"),vXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),T_e=a("code"),FXo=o("model.train()"),TXo=l(),F(Iv.$$.fragment),jVe=l(),td=a("h2"),Nv=a("a"),M_e=a("span"),F(YL.$$.fragment),MXo=l(),E_e=a("span"),EXo=o("AutoModelForMultipleChoice"),DVe=l(),Bo=a("div"),F(KL.$$.fragment),CXo=l(),ad=a("p"),wXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),$X=a("a"),AXo=o("from_pretrained()"),LXo=o(" class method or the "),kX=a("a"),yXo=o("from_config()"),xXo=o(` class
method.`),$Xo=l(),ZL=a("p"),kXo=o("This class cannot be instantiated directly using "),C_e=a("code"),SXo=o("__init__()"),RXo=o(" (throws an error)."),PXo=l(),mt=a("div"),F(ey.$$.fragment),BXo=l(),w_e=a("p"),IXo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),NXo=l(),nd=a("p"),qXo=o(`Note:
Loading a model from its configuration file does `),A_e=a("strong"),jXo=o("not"),DXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SX=a("a"),GXo=o("from_pretrained()"),OXo=o(" to load the model weights."),VXo=l(),F(qv.$$.fragment),XXo=l(),ro=a("div"),F(oy.$$.fragment),zXo=l(),L_e=a("p"),QXo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),WXo=l(),Da=a("p"),HXo=o("The model class to instantiate is selected based on the "),y_e=a("code"),UXo=o("model_type"),JXo=o(` property of the config object (either
passed as an argument or loaded from `),x_e=a("code"),YXo=o("pretrained_model_name_or_path"),KXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$_e=a("code"),ZXo=o("pretrained_model_name_or_path"),ezo=o(":"),ozo=l(),Z=a("ul"),jv=a("li"),k_e=a("strong"),rzo=o("albert"),tzo=o(" \u2014 "),RX=a("a"),azo=o("AlbertForMultipleChoice"),nzo=o(" (ALBERT model)"),szo=l(),Dv=a("li"),S_e=a("strong"),lzo=o("bert"),izo=o(" \u2014 "),PX=a("a"),dzo=o("BertForMultipleChoice"),czo=o(" (BERT model)"),fzo=l(),Gv=a("li"),R_e=a("strong"),mzo=o("big_bird"),gzo=o(" \u2014 "),BX=a("a"),hzo=o("BigBirdForMultipleChoice"),pzo=o(" (BigBird model)"),_zo=l(),Ov=a("li"),P_e=a("strong"),uzo=o("camembert"),bzo=o(" \u2014 "),IX=a("a"),vzo=o("CamembertForMultipleChoice"),Fzo=o(" (CamemBERT model)"),Tzo=l(),Vv=a("li"),B_e=a("strong"),Mzo=o("canine"),Ezo=o(" \u2014 "),NX=a("a"),Czo=o("CanineForMultipleChoice"),wzo=o(" (CANINE model)"),Azo=l(),Xv=a("li"),I_e=a("strong"),Lzo=o("convbert"),yzo=o(" \u2014 "),qX=a("a"),xzo=o("ConvBertForMultipleChoice"),$zo=o(" (ConvBERT model)"),kzo=l(),zv=a("li"),N_e=a("strong"),Szo=o("data2vec-text"),Rzo=o(" \u2014 "),jX=a("a"),Pzo=o("Data2VecTextForMultipleChoice"),Bzo=o(" (Data2VecText model)"),Izo=l(),Qv=a("li"),q_e=a("strong"),Nzo=o("deberta-v2"),qzo=o(" \u2014 "),DX=a("a"),jzo=o("DebertaV2ForMultipleChoice"),Dzo=o(" (DeBERTa-v2 model)"),Gzo=l(),Wv=a("li"),j_e=a("strong"),Ozo=o("distilbert"),Vzo=o(" \u2014 "),GX=a("a"),Xzo=o("DistilBertForMultipleChoice"),zzo=o(" (DistilBERT model)"),Qzo=l(),Hv=a("li"),D_e=a("strong"),Wzo=o("electra"),Hzo=o(" \u2014 "),OX=a("a"),Uzo=o("ElectraForMultipleChoice"),Jzo=o(" (ELECTRA model)"),Yzo=l(),Uv=a("li"),G_e=a("strong"),Kzo=o("flaubert"),Zzo=o(" \u2014 "),VX=a("a"),eQo=o("FlaubertForMultipleChoice"),oQo=o(" (FlauBERT model)"),rQo=l(),Jv=a("li"),O_e=a("strong"),tQo=o("fnet"),aQo=o(" \u2014 "),XX=a("a"),nQo=o("FNetForMultipleChoice"),sQo=o(" (FNet model)"),lQo=l(),Yv=a("li"),V_e=a("strong"),iQo=o("funnel"),dQo=o(" \u2014 "),zX=a("a"),cQo=o("FunnelForMultipleChoice"),fQo=o(" (Funnel Transformer model)"),mQo=l(),Kv=a("li"),X_e=a("strong"),gQo=o("ibert"),hQo=o(" \u2014 "),QX=a("a"),pQo=o("IBertForMultipleChoice"),_Qo=o(" (I-BERT model)"),uQo=l(),Zv=a("li"),z_e=a("strong"),bQo=o("longformer"),vQo=o(" \u2014 "),WX=a("a"),FQo=o("LongformerForMultipleChoice"),TQo=o(" (Longformer model)"),MQo=l(),e3=a("li"),Q_e=a("strong"),EQo=o("megatron-bert"),CQo=o(" \u2014 "),HX=a("a"),wQo=o("MegatronBertForMultipleChoice"),AQo=o(" (Megatron-BERT model)"),LQo=l(),o3=a("li"),W_e=a("strong"),yQo=o("mobilebert"),xQo=o(" \u2014 "),UX=a("a"),$Qo=o("MobileBertForMultipleChoice"),kQo=o(" (MobileBERT model)"),SQo=l(),r3=a("li"),H_e=a("strong"),RQo=o("mpnet"),PQo=o(" \u2014 "),JX=a("a"),BQo=o("MPNetForMultipleChoice"),IQo=o(" (MPNet model)"),NQo=l(),t3=a("li"),U_e=a("strong"),qQo=o("nezha"),jQo=o(" \u2014 "),YX=a("a"),DQo=o("NezhaForMultipleChoice"),GQo=o(" (Nezha model)"),OQo=l(),a3=a("li"),J_e=a("strong"),VQo=o("nystromformer"),XQo=o(" \u2014 "),KX=a("a"),zQo=o("NystromformerForMultipleChoice"),QQo=o(" (Nystr\xF6mformer model)"),WQo=l(),n3=a("li"),Y_e=a("strong"),HQo=o("qdqbert"),UQo=o(" \u2014 "),ZX=a("a"),JQo=o("QDQBertForMultipleChoice"),YQo=o(" (QDQBert model)"),KQo=l(),s3=a("li"),K_e=a("strong"),ZQo=o("rembert"),eWo=o(" \u2014 "),ez=a("a"),oWo=o("RemBertForMultipleChoice"),rWo=o(" (RemBERT model)"),tWo=l(),l3=a("li"),Z_e=a("strong"),aWo=o("roberta"),nWo=o(" \u2014 "),oz=a("a"),sWo=o("RobertaForMultipleChoice"),lWo=o(" (RoBERTa model)"),iWo=l(),i3=a("li"),eue=a("strong"),dWo=o("roformer"),cWo=o(" \u2014 "),rz=a("a"),fWo=o("RoFormerForMultipleChoice"),mWo=o(" (RoFormer model)"),gWo=l(),d3=a("li"),oue=a("strong"),hWo=o("squeezebert"),pWo=o(" \u2014 "),tz=a("a"),_Wo=o("SqueezeBertForMultipleChoice"),uWo=o(" (SqueezeBERT model)"),bWo=l(),c3=a("li"),rue=a("strong"),vWo=o("xlm"),FWo=o(" \u2014 "),az=a("a"),TWo=o("XLMForMultipleChoice"),MWo=o(" (XLM model)"),EWo=l(),f3=a("li"),tue=a("strong"),CWo=o("xlm-roberta"),wWo=o(" \u2014 "),nz=a("a"),AWo=o("XLMRobertaForMultipleChoice"),LWo=o(" (XLM-RoBERTa model)"),yWo=l(),m3=a("li"),aue=a("strong"),xWo=o("xlm-roberta-xl"),$Wo=o(" \u2014 "),sz=a("a"),kWo=o("XLMRobertaXLForMultipleChoice"),SWo=o(" (XLM-RoBERTa-XL model)"),RWo=l(),g3=a("li"),nue=a("strong"),PWo=o("xlnet"),BWo=o(" \u2014 "),lz=a("a"),IWo=o("XLNetForMultipleChoice"),NWo=o(" (XLNet model)"),qWo=l(),h3=a("li"),sue=a("strong"),jWo=o("yoso"),DWo=o(" \u2014 "),iz=a("a"),GWo=o("YosoForMultipleChoice"),OWo=o(" (YOSO model)"),VWo=l(),p3=a("p"),XWo=o("The model is set in evaluation mode by default using "),lue=a("code"),zWo=o("model.eval()"),QWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),iue=a("code"),WWo=o("model.train()"),HWo=l(),F(_3.$$.fragment),GVe=l(),sd=a("h2"),u3=a("a"),due=a("span"),F(ry.$$.fragment),UWo=l(),cue=a("span"),JWo=o("AutoModelForNextSentencePrediction"),OVe=l(),Io=a("div"),F(ty.$$.fragment),YWo=l(),ld=a("p"),KWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),dz=a("a"),ZWo=o("from_pretrained()"),eHo=o(" class method or the "),cz=a("a"),oHo=o("from_config()"),rHo=o(` class
method.`),tHo=l(),ay=a("p"),aHo=o("This class cannot be instantiated directly using "),fue=a("code"),nHo=o("__init__()"),sHo=o(" (throws an error)."),lHo=l(),gt=a("div"),F(ny.$$.fragment),iHo=l(),mue=a("p"),dHo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),cHo=l(),id=a("p"),fHo=o(`Note:
Loading a model from its configuration file does `),gue=a("strong"),mHo=o("not"),gHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fz=a("a"),hHo=o("from_pretrained()"),pHo=o(" to load the model weights."),_Ho=l(),F(b3.$$.fragment),uHo=l(),to=a("div"),F(sy.$$.fragment),bHo=l(),hue=a("p"),vHo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),FHo=l(),Ga=a("p"),THo=o("The model class to instantiate is selected based on the "),pue=a("code"),MHo=o("model_type"),EHo=o(` property of the config object (either
passed as an argument or loaded from `),_ue=a("code"),CHo=o("pretrained_model_name_or_path"),wHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uue=a("code"),AHo=o("pretrained_model_name_or_path"),LHo=o(":"),yHo=l(),No=a("ul"),v3=a("li"),bue=a("strong"),xHo=o("bert"),$Ho=o(" \u2014 "),mz=a("a"),kHo=o("BertForNextSentencePrediction"),SHo=o(" (BERT model)"),RHo=l(),F3=a("li"),vue=a("strong"),PHo=o("fnet"),BHo=o(" \u2014 "),gz=a("a"),IHo=o("FNetForNextSentencePrediction"),NHo=o(" (FNet model)"),qHo=l(),T3=a("li"),Fue=a("strong"),jHo=o("megatron-bert"),DHo=o(" \u2014 "),hz=a("a"),GHo=o("MegatronBertForNextSentencePrediction"),OHo=o(" (Megatron-BERT model)"),VHo=l(),M3=a("li"),Tue=a("strong"),XHo=o("mobilebert"),zHo=o(" \u2014 "),pz=a("a"),QHo=o("MobileBertForNextSentencePrediction"),WHo=o(" (MobileBERT model)"),HHo=l(),E3=a("li"),Mue=a("strong"),UHo=o("nezha"),JHo=o(" \u2014 "),_z=a("a"),YHo=o("NezhaForNextSentencePrediction"),KHo=o(" (Nezha model)"),ZHo=l(),C3=a("li"),Eue=a("strong"),eUo=o("qdqbert"),oUo=o(" \u2014 "),uz=a("a"),rUo=o("QDQBertForNextSentencePrediction"),tUo=o(" (QDQBert model)"),aUo=l(),w3=a("p"),nUo=o("The model is set in evaluation mode by default using "),Cue=a("code"),sUo=o("model.eval()"),lUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wue=a("code"),iUo=o("model.train()"),dUo=l(),F(A3.$$.fragment),VVe=l(),dd=a("h2"),L3=a("a"),Aue=a("span"),F(ly.$$.fragment),cUo=l(),Lue=a("span"),fUo=o("AutoModelForTokenClassification"),XVe=l(),qo=a("div"),F(iy.$$.fragment),mUo=l(),cd=a("p"),gUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),bz=a("a"),hUo=o("from_pretrained()"),pUo=o(" class method or the "),vz=a("a"),_Uo=o("from_config()"),uUo=o(` class
method.`),bUo=l(),dy=a("p"),vUo=o("This class cannot be instantiated directly using "),yue=a("code"),FUo=o("__init__()"),TUo=o(" (throws an error)."),MUo=l(),ht=a("div"),F(cy.$$.fragment),EUo=l(),xue=a("p"),CUo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),wUo=l(),fd=a("p"),AUo=o(`Note:
Loading a model from its configuration file does `),$ue=a("strong"),LUo=o("not"),yUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Fz=a("a"),xUo=o("from_pretrained()"),$Uo=o(" to load the model weights."),kUo=l(),F(y3.$$.fragment),SUo=l(),ao=a("div"),F(fy.$$.fragment),RUo=l(),kue=a("p"),PUo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),BUo=l(),Oa=a("p"),IUo=o("The model class to instantiate is selected based on the "),Sue=a("code"),NUo=o("model_type"),qUo=o(` property of the config object (either
passed as an argument or loaded from `),Rue=a("code"),jUo=o("pretrained_model_name_or_path"),DUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pue=a("code"),GUo=o("pretrained_model_name_or_path"),OUo=o(":"),VUo=l(),U=a("ul"),x3=a("li"),Bue=a("strong"),XUo=o("albert"),zUo=o(" \u2014 "),Tz=a("a"),QUo=o("AlbertForTokenClassification"),WUo=o(" (ALBERT model)"),HUo=l(),$3=a("li"),Iue=a("strong"),UUo=o("bert"),JUo=o(" \u2014 "),Mz=a("a"),YUo=o("BertForTokenClassification"),KUo=o(" (BERT model)"),ZUo=l(),k3=a("li"),Nue=a("strong"),eJo=o("big_bird"),oJo=o(" \u2014 "),Ez=a("a"),rJo=o("BigBirdForTokenClassification"),tJo=o(" (BigBird model)"),aJo=l(),S3=a("li"),que=a("strong"),nJo=o("bloom"),sJo=o(" \u2014 "),Cz=a("a"),lJo=o("BloomForTokenClassification"),iJo=o(" (BLOOM model)"),dJo=l(),R3=a("li"),jue=a("strong"),cJo=o("camembert"),fJo=o(" \u2014 "),wz=a("a"),mJo=o("CamembertForTokenClassification"),gJo=o(" (CamemBERT model)"),hJo=l(),P3=a("li"),Due=a("strong"),pJo=o("canine"),_Jo=o(" \u2014 "),Az=a("a"),uJo=o("CanineForTokenClassification"),bJo=o(" (CANINE model)"),vJo=l(),B3=a("li"),Gue=a("strong"),FJo=o("convbert"),TJo=o(" \u2014 "),Lz=a("a"),MJo=o("ConvBertForTokenClassification"),EJo=o(" (ConvBERT model)"),CJo=l(),I3=a("li"),Oue=a("strong"),wJo=o("data2vec-text"),AJo=o(" \u2014 "),yz=a("a"),LJo=o("Data2VecTextForTokenClassification"),yJo=o(" (Data2VecText model)"),xJo=l(),N3=a("li"),Vue=a("strong"),$Jo=o("deberta"),kJo=o(" \u2014 "),xz=a("a"),SJo=o("DebertaForTokenClassification"),RJo=o(" (DeBERTa model)"),PJo=l(),q3=a("li"),Xue=a("strong"),BJo=o("deberta-v2"),IJo=o(" \u2014 "),$z=a("a"),NJo=o("DebertaV2ForTokenClassification"),qJo=o(" (DeBERTa-v2 model)"),jJo=l(),j3=a("li"),zue=a("strong"),DJo=o("distilbert"),GJo=o(" \u2014 "),kz=a("a"),OJo=o("DistilBertForTokenClassification"),VJo=o(" (DistilBERT model)"),XJo=l(),D3=a("li"),Que=a("strong"),zJo=o("electra"),QJo=o(" \u2014 "),Sz=a("a"),WJo=o("ElectraForTokenClassification"),HJo=o(" (ELECTRA model)"),UJo=l(),G3=a("li"),Wue=a("strong"),JJo=o("flaubert"),YJo=o(" \u2014 "),Rz=a("a"),KJo=o("FlaubertForTokenClassification"),ZJo=o(" (FlauBERT model)"),eYo=l(),O3=a("li"),Hue=a("strong"),oYo=o("fnet"),rYo=o(" \u2014 "),Pz=a("a"),tYo=o("FNetForTokenClassification"),aYo=o(" (FNet model)"),nYo=l(),V3=a("li"),Uue=a("strong"),sYo=o("funnel"),lYo=o(" \u2014 "),Bz=a("a"),iYo=o("FunnelForTokenClassification"),dYo=o(" (Funnel Transformer model)"),cYo=l(),X3=a("li"),Jue=a("strong"),fYo=o("gpt2"),mYo=o(" \u2014 "),Iz=a("a"),gYo=o("GPT2ForTokenClassification"),hYo=o(" (OpenAI GPT-2 model)"),pYo=l(),z3=a("li"),Yue=a("strong"),_Yo=o("ibert"),uYo=o(" \u2014 "),Nz=a("a"),bYo=o("IBertForTokenClassification"),vYo=o(" (I-BERT model)"),FYo=l(),Q3=a("li"),Kue=a("strong"),TYo=o("layoutlm"),MYo=o(" \u2014 "),qz=a("a"),EYo=o("LayoutLMForTokenClassification"),CYo=o(" (LayoutLM model)"),wYo=l(),W3=a("li"),Zue=a("strong"),AYo=o("layoutlmv2"),LYo=o(" \u2014 "),jz=a("a"),yYo=o("LayoutLMv2ForTokenClassification"),xYo=o(" (LayoutLMv2 model)"),$Yo=l(),H3=a("li"),e1e=a("strong"),kYo=o("layoutlmv3"),SYo=o(" \u2014 "),Dz=a("a"),RYo=o("LayoutLMv3ForTokenClassification"),PYo=o(" (LayoutLMv3 model)"),BYo=l(),U3=a("li"),o1e=a("strong"),IYo=o("longformer"),NYo=o(" \u2014 "),Gz=a("a"),qYo=o("LongformerForTokenClassification"),jYo=o(" (Longformer model)"),DYo=l(),J3=a("li"),r1e=a("strong"),GYo=o("megatron-bert"),OYo=o(" \u2014 "),Oz=a("a"),VYo=o("MegatronBertForTokenClassification"),XYo=o(" (Megatron-BERT model)"),zYo=l(),Y3=a("li"),t1e=a("strong"),QYo=o("mobilebert"),WYo=o(" \u2014 "),Vz=a("a"),HYo=o("MobileBertForTokenClassification"),UYo=o(" (MobileBERT model)"),JYo=l(),K3=a("li"),a1e=a("strong"),YYo=o("mpnet"),KYo=o(" \u2014 "),Xz=a("a"),ZYo=o("MPNetForTokenClassification"),eKo=o(" (MPNet model)"),oKo=l(),Z3=a("li"),n1e=a("strong"),rKo=o("nezha"),tKo=o(" \u2014 "),zz=a("a"),aKo=o("NezhaForTokenClassification"),nKo=o(" (Nezha model)"),sKo=l(),e5=a("li"),s1e=a("strong"),lKo=o("nystromformer"),iKo=o(" \u2014 "),Qz=a("a"),dKo=o("NystromformerForTokenClassification"),cKo=o(" (Nystr\xF6mformer model)"),fKo=l(),o5=a("li"),l1e=a("strong"),mKo=o("qdqbert"),gKo=o(" \u2014 "),Wz=a("a"),hKo=o("QDQBertForTokenClassification"),pKo=o(" (QDQBert model)"),_Ko=l(),r5=a("li"),i1e=a("strong"),uKo=o("rembert"),bKo=o(" \u2014 "),Hz=a("a"),vKo=o("RemBertForTokenClassification"),FKo=o(" (RemBERT model)"),TKo=l(),t5=a("li"),d1e=a("strong"),MKo=o("roberta"),EKo=o(" \u2014 "),Uz=a("a"),CKo=o("RobertaForTokenClassification"),wKo=o(" (RoBERTa model)"),AKo=l(),a5=a("li"),c1e=a("strong"),LKo=o("roformer"),yKo=o(" \u2014 "),Jz=a("a"),xKo=o("RoFormerForTokenClassification"),$Ko=o(" (RoFormer model)"),kKo=l(),n5=a("li"),f1e=a("strong"),SKo=o("squeezebert"),RKo=o(" \u2014 "),Yz=a("a"),PKo=o("SqueezeBertForTokenClassification"),BKo=o(" (SqueezeBERT model)"),IKo=l(),s5=a("li"),m1e=a("strong"),NKo=o("xlm"),qKo=o(" \u2014 "),Kz=a("a"),jKo=o("XLMForTokenClassification"),DKo=o(" (XLM model)"),GKo=l(),l5=a("li"),g1e=a("strong"),OKo=o("xlm-roberta"),VKo=o(" \u2014 "),Zz=a("a"),XKo=o("XLMRobertaForTokenClassification"),zKo=o(" (XLM-RoBERTa model)"),QKo=l(),i5=a("li"),h1e=a("strong"),WKo=o("xlm-roberta-xl"),HKo=o(" \u2014 "),eQ=a("a"),UKo=o("XLMRobertaXLForTokenClassification"),JKo=o(" (XLM-RoBERTa-XL model)"),YKo=l(),d5=a("li"),p1e=a("strong"),KKo=o("xlnet"),ZKo=o(" \u2014 "),oQ=a("a"),eZo=o("XLNetForTokenClassification"),oZo=o(" (XLNet model)"),rZo=l(),c5=a("li"),_1e=a("strong"),tZo=o("yoso"),aZo=o(" \u2014 "),rQ=a("a"),nZo=o("YosoForTokenClassification"),sZo=o(" (YOSO model)"),lZo=l(),f5=a("p"),iZo=o("The model is set in evaluation mode by default using "),u1e=a("code"),dZo=o("model.eval()"),cZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),b1e=a("code"),fZo=o("model.train()"),mZo=l(),F(m5.$$.fragment),zVe=l(),md=a("h2"),g5=a("a"),v1e=a("span"),F(my.$$.fragment),gZo=l(),F1e=a("span"),hZo=o("AutoModelForQuestionAnswering"),QVe=l(),jo=a("div"),F(gy.$$.fragment),pZo=l(),gd=a("p"),_Zo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),tQ=a("a"),uZo=o("from_pretrained()"),bZo=o(" class method or the "),aQ=a("a"),vZo=o("from_config()"),FZo=o(` class
method.`),TZo=l(),hy=a("p"),MZo=o("This class cannot be instantiated directly using "),T1e=a("code"),EZo=o("__init__()"),CZo=o(" (throws an error)."),wZo=l(),pt=a("div"),F(py.$$.fragment),AZo=l(),M1e=a("p"),LZo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),yZo=l(),hd=a("p"),xZo=o(`Note:
Loading a model from its configuration file does `),E1e=a("strong"),$Zo=o("not"),kZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nQ=a("a"),SZo=o("from_pretrained()"),RZo=o(" to load the model weights."),PZo=l(),F(h5.$$.fragment),BZo=l(),no=a("div"),F(_y.$$.fragment),IZo=l(),C1e=a("p"),NZo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),qZo=l(),Va=a("p"),jZo=o("The model class to instantiate is selected based on the "),w1e=a("code"),DZo=o("model_type"),GZo=o(` property of the config object (either
passed as an argument or loaded from `),A1e=a("code"),OZo=o("pretrained_model_name_or_path"),VZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L1e=a("code"),XZo=o("pretrained_model_name_or_path"),zZo=o(":"),QZo=l(),V=a("ul"),p5=a("li"),y1e=a("strong"),WZo=o("albert"),HZo=o(" \u2014 "),sQ=a("a"),UZo=o("AlbertForQuestionAnswering"),JZo=o(" (ALBERT model)"),YZo=l(),_5=a("li"),x1e=a("strong"),KZo=o("bart"),ZZo=o(" \u2014 "),lQ=a("a"),eer=o("BartForQuestionAnswering"),oer=o(" (BART model)"),rer=l(),u5=a("li"),$1e=a("strong"),ter=o("bert"),aer=o(" \u2014 "),iQ=a("a"),ner=o("BertForQuestionAnswering"),ser=o(" (BERT model)"),ler=l(),b5=a("li"),k1e=a("strong"),ier=o("big_bird"),der=o(" \u2014 "),dQ=a("a"),cer=o("BigBirdForQuestionAnswering"),fer=o(" (BigBird model)"),mer=l(),v5=a("li"),S1e=a("strong"),ger=o("bigbird_pegasus"),her=o(" \u2014 "),cQ=a("a"),per=o("BigBirdPegasusForQuestionAnswering"),_er=o(" (BigBird-Pegasus model)"),uer=l(),F5=a("li"),R1e=a("strong"),ber=o("camembert"),ver=o(" \u2014 "),fQ=a("a"),Fer=o("CamembertForQuestionAnswering"),Ter=o(" (CamemBERT model)"),Mer=l(),T5=a("li"),P1e=a("strong"),Eer=o("canine"),Cer=o(" \u2014 "),mQ=a("a"),wer=o("CanineForQuestionAnswering"),Aer=o(" (CANINE model)"),Ler=l(),M5=a("li"),B1e=a("strong"),yer=o("convbert"),xer=o(" \u2014 "),gQ=a("a"),$er=o("ConvBertForQuestionAnswering"),ker=o(" (ConvBERT model)"),Ser=l(),E5=a("li"),I1e=a("strong"),Rer=o("data2vec-text"),Per=o(" \u2014 "),hQ=a("a"),Ber=o("Data2VecTextForQuestionAnswering"),Ier=o(" (Data2VecText model)"),Ner=l(),C5=a("li"),N1e=a("strong"),qer=o("deberta"),jer=o(" \u2014 "),pQ=a("a"),Der=o("DebertaForQuestionAnswering"),Ger=o(" (DeBERTa model)"),Oer=l(),w5=a("li"),q1e=a("strong"),Ver=o("deberta-v2"),Xer=o(" \u2014 "),_Q=a("a"),zer=o("DebertaV2ForQuestionAnswering"),Qer=o(" (DeBERTa-v2 model)"),Wer=l(),A5=a("li"),j1e=a("strong"),Her=o("distilbert"),Uer=o(" \u2014 "),uQ=a("a"),Jer=o("DistilBertForQuestionAnswering"),Yer=o(" (DistilBERT model)"),Ker=l(),L5=a("li"),D1e=a("strong"),Zer=o("electra"),eor=o(" \u2014 "),bQ=a("a"),oor=o("ElectraForQuestionAnswering"),ror=o(" (ELECTRA model)"),tor=l(),y5=a("li"),G1e=a("strong"),aor=o("flaubert"),nor=o(" \u2014 "),vQ=a("a"),sor=o("FlaubertForQuestionAnsweringSimple"),lor=o(" (FlauBERT model)"),ior=l(),x5=a("li"),O1e=a("strong"),dor=o("fnet"),cor=o(" \u2014 "),FQ=a("a"),mor=o("FNetForQuestionAnswering"),gor=o(" (FNet model)"),hor=l(),$5=a("li"),V1e=a("strong"),por=o("funnel"),_or=o(" \u2014 "),TQ=a("a"),uor=o("FunnelForQuestionAnswering"),bor=o(" (Funnel Transformer model)"),vor=l(),k5=a("li"),X1e=a("strong"),For=o("gptj"),Tor=o(" \u2014 "),MQ=a("a"),Mor=o("GPTJForQuestionAnswering"),Eor=o(" (GPT-J model)"),Cor=l(),S5=a("li"),z1e=a("strong"),wor=o("ibert"),Aor=o(" \u2014 "),EQ=a("a"),Lor=o("IBertForQuestionAnswering"),yor=o(" (I-BERT model)"),xor=l(),R5=a("li"),Q1e=a("strong"),$or=o("layoutlmv2"),kor=o(" \u2014 "),CQ=a("a"),Sor=o("LayoutLMv2ForQuestionAnswering"),Ror=o(" (LayoutLMv2 model)"),Por=l(),P5=a("li"),W1e=a("strong"),Bor=o("layoutlmv3"),Ior=o(" \u2014 "),wQ=a("a"),Nor=o("LayoutLMv3ForQuestionAnswering"),qor=o(" (LayoutLMv3 model)"),jor=l(),B5=a("li"),H1e=a("strong"),Dor=o("led"),Gor=o(" \u2014 "),AQ=a("a"),Oor=o("LEDForQuestionAnswering"),Vor=o(" (LED model)"),Xor=l(),I5=a("li"),U1e=a("strong"),zor=o("longformer"),Qor=o(" \u2014 "),LQ=a("a"),Wor=o("LongformerForQuestionAnswering"),Hor=o(" (Longformer model)"),Uor=l(),N5=a("li"),J1e=a("strong"),Jor=o("lxmert"),Yor=o(" \u2014 "),yQ=a("a"),Kor=o("LxmertForQuestionAnswering"),Zor=o(" (LXMERT model)"),err=l(),q5=a("li"),Y1e=a("strong"),orr=o("mbart"),rrr=o(" \u2014 "),xQ=a("a"),trr=o("MBartForQuestionAnswering"),arr=o(" (mBART model)"),nrr=l(),j5=a("li"),K1e=a("strong"),srr=o("megatron-bert"),lrr=o(" \u2014 "),$Q=a("a"),irr=o("MegatronBertForQuestionAnswering"),drr=o(" (Megatron-BERT model)"),crr=l(),D5=a("li"),Z1e=a("strong"),frr=o("mobilebert"),mrr=o(" \u2014 "),kQ=a("a"),grr=o("MobileBertForQuestionAnswering"),hrr=o(" (MobileBERT model)"),prr=l(),G5=a("li"),e2e=a("strong"),_rr=o("mpnet"),urr=o(" \u2014 "),SQ=a("a"),brr=o("MPNetForQuestionAnswering"),vrr=o(" (MPNet model)"),Frr=l(),O5=a("li"),o2e=a("strong"),Trr=o("mvp"),Mrr=o(" \u2014 "),RQ=a("a"),Err=o("MvpForQuestionAnswering"),Crr=o(" (MVP model)"),wrr=l(),V5=a("li"),r2e=a("strong"),Arr=o("nezha"),Lrr=o(" \u2014 "),PQ=a("a"),yrr=o("NezhaForQuestionAnswering"),xrr=o(" (Nezha model)"),$rr=l(),X5=a("li"),t2e=a("strong"),krr=o("nystromformer"),Srr=o(" \u2014 "),BQ=a("a"),Rrr=o("NystromformerForQuestionAnswering"),Prr=o(" (Nystr\xF6mformer model)"),Brr=l(),z5=a("li"),a2e=a("strong"),Irr=o("qdqbert"),Nrr=o(" \u2014 "),IQ=a("a"),qrr=o("QDQBertForQuestionAnswering"),jrr=o(" (QDQBert model)"),Drr=l(),Q5=a("li"),n2e=a("strong"),Grr=o("reformer"),Orr=o(" \u2014 "),NQ=a("a"),Vrr=o("ReformerForQuestionAnswering"),Xrr=o(" (Reformer model)"),zrr=l(),W5=a("li"),s2e=a("strong"),Qrr=o("rembert"),Wrr=o(" \u2014 "),qQ=a("a"),Hrr=o("RemBertForQuestionAnswering"),Urr=o(" (RemBERT model)"),Jrr=l(),H5=a("li"),l2e=a("strong"),Yrr=o("roberta"),Krr=o(" \u2014 "),jQ=a("a"),Zrr=o("RobertaForQuestionAnswering"),etr=o(" (RoBERTa model)"),otr=l(),U5=a("li"),i2e=a("strong"),rtr=o("roformer"),ttr=o(" \u2014 "),DQ=a("a"),atr=o("RoFormerForQuestionAnswering"),ntr=o(" (RoFormer model)"),str=l(),J5=a("li"),d2e=a("strong"),ltr=o("splinter"),itr=o(" \u2014 "),GQ=a("a"),dtr=o("SplinterForQuestionAnswering"),ctr=o(" (Splinter model)"),ftr=l(),Y5=a("li"),c2e=a("strong"),mtr=o("squeezebert"),gtr=o(" \u2014 "),OQ=a("a"),htr=o("SqueezeBertForQuestionAnswering"),ptr=o(" (SqueezeBERT model)"),_tr=l(),K5=a("li"),f2e=a("strong"),utr=o("xlm"),btr=o(" \u2014 "),VQ=a("a"),vtr=o("XLMForQuestionAnsweringSimple"),Ftr=o(" (XLM model)"),Ttr=l(),Z5=a("li"),m2e=a("strong"),Mtr=o("xlm-roberta"),Etr=o(" \u2014 "),XQ=a("a"),Ctr=o("XLMRobertaForQuestionAnswering"),wtr=o(" (XLM-RoBERTa model)"),Atr=l(),eF=a("li"),g2e=a("strong"),Ltr=o("xlm-roberta-xl"),ytr=o(" \u2014 "),zQ=a("a"),xtr=o("XLMRobertaXLForQuestionAnswering"),$tr=o(" (XLM-RoBERTa-XL model)"),ktr=l(),oF=a("li"),h2e=a("strong"),Str=o("xlnet"),Rtr=o(" \u2014 "),QQ=a("a"),Ptr=o("XLNetForQuestionAnsweringSimple"),Btr=o(" (XLNet model)"),Itr=l(),rF=a("li"),p2e=a("strong"),Ntr=o("yoso"),qtr=o(" \u2014 "),WQ=a("a"),jtr=o("YosoForQuestionAnswering"),Dtr=o(" (YOSO model)"),Gtr=l(),tF=a("p"),Otr=o("The model is set in evaluation mode by default using "),_2e=a("code"),Vtr=o("model.eval()"),Xtr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),u2e=a("code"),ztr=o("model.train()"),Qtr=l(),F(aF.$$.fragment),WVe=l(),pd=a("h2"),nF=a("a"),b2e=a("span"),F(uy.$$.fragment),Wtr=l(),v2e=a("span"),Htr=o("AutoModelForTableQuestionAnswering"),HVe=l(),Do=a("div"),F(by.$$.fragment),Utr=l(),_d=a("p"),Jtr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),HQ=a("a"),Ytr=o("from_pretrained()"),Ktr=o(" class method or the "),UQ=a("a"),Ztr=o("from_config()"),ear=o(` class
method.`),oar=l(),vy=a("p"),rar=o("This class cannot be instantiated directly using "),F2e=a("code"),tar=o("__init__()"),aar=o(" (throws an error)."),nar=l(),_t=a("div"),F(Fy.$$.fragment),sar=l(),T2e=a("p"),lar=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),iar=l(),ud=a("p"),dar=o(`Note:
Loading a model from its configuration file does `),M2e=a("strong"),car=o("not"),far=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JQ=a("a"),mar=o("from_pretrained()"),gar=o(" to load the model weights."),har=l(),F(sF.$$.fragment),par=l(),so=a("div"),F(Ty.$$.fragment),_ar=l(),E2e=a("p"),uar=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),bar=l(),Xa=a("p"),Far=o("The model class to instantiate is selected based on the "),C2e=a("code"),Tar=o("model_type"),Mar=o(` property of the config object (either
passed as an argument or loaded from `),w2e=a("code"),Ear=o("pretrained_model_name_or_path"),Car=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A2e=a("code"),war=o("pretrained_model_name_or_path"),Aar=o(":"),Lar=l(),L2e=a("ul"),lF=a("li"),y2e=a("strong"),yar=o("tapas"),xar=o(" \u2014 "),YQ=a("a"),$ar=o("TapasForQuestionAnswering"),kar=o(" (TAPAS model)"),Sar=l(),iF=a("p"),Rar=o("The model is set in evaluation mode by default using "),x2e=a("code"),Par=o("model.eval()"),Bar=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$2e=a("code"),Iar=o("model.train()"),Nar=l(),F(dF.$$.fragment),UVe=l(),bd=a("h2"),cF=a("a"),k2e=a("span"),F(My.$$.fragment),qar=l(),S2e=a("span"),jar=o("AutoModelForImageClassification"),JVe=l(),Go=a("div"),F(Ey.$$.fragment),Dar=l(),vd=a("p"),Gar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),KQ=a("a"),Oar=o("from_pretrained()"),Var=o(" class method or the "),ZQ=a("a"),Xar=o("from_config()"),zar=o(` class
method.`),Qar=l(),Cy=a("p"),War=o("This class cannot be instantiated directly using "),R2e=a("code"),Har=o("__init__()"),Uar=o(" (throws an error)."),Jar=l(),ut=a("div"),F(wy.$$.fragment),Yar=l(),P2e=a("p"),Kar=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Zar=l(),Fd=a("p"),enr=o(`Note:
Loading a model from its configuration file does `),B2e=a("strong"),onr=o("not"),rnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eW=a("a"),tnr=o("from_pretrained()"),anr=o(" to load the model weights."),nnr=l(),F(fF.$$.fragment),snr=l(),lo=a("div"),F(Ay.$$.fragment),lnr=l(),I2e=a("p"),inr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),dnr=l(),za=a("p"),cnr=o("The model class to instantiate is selected based on the "),N2e=a("code"),fnr=o("model_type"),mnr=o(` property of the config object (either
passed as an argument or loaded from `),q2e=a("code"),gnr=o("pretrained_model_name_or_path"),hnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j2e=a("code"),pnr=o("pretrained_model_name_or_path"),_nr=o(":"),unr=l(),Fe=a("ul"),mF=a("li"),D2e=a("strong"),bnr=o("beit"),vnr=o(" \u2014 "),oW=a("a"),Fnr=o("BeitForImageClassification"),Tnr=o(" (BEiT model)"),Mnr=l(),gF=a("li"),G2e=a("strong"),Enr=o("convnext"),Cnr=o(" \u2014 "),rW=a("a"),wnr=o("ConvNextForImageClassification"),Anr=o(" (ConvNeXT model)"),Lnr=l(),hF=a("li"),O2e=a("strong"),ynr=o("cvt"),xnr=o(" \u2014 "),tW=a("a"),$nr=o("CvtForImageClassification"),knr=o(" (CvT model)"),Snr=l(),pF=a("li"),V2e=a("strong"),Rnr=o("data2vec-vision"),Pnr=o(" \u2014 "),aW=a("a"),Bnr=o("Data2VecVisionForImageClassification"),Inr=o(" (Data2VecVision model)"),Nnr=l(),Ws=a("li"),X2e=a("strong"),qnr=o("deit"),jnr=o(" \u2014 "),nW=a("a"),Dnr=o("DeiTForImageClassification"),Gnr=o(" or "),sW=a("a"),Onr=o("DeiTForImageClassificationWithTeacher"),Vnr=o(" (DeiT model)"),Xnr=l(),_F=a("li"),z2e=a("strong"),znr=o("imagegpt"),Qnr=o(" \u2014 "),lW=a("a"),Wnr=o("ImageGPTForImageClassification"),Hnr=o(" (ImageGPT model)"),Unr=l(),Hs=a("li"),Q2e=a("strong"),Jnr=o("levit"),Ynr=o(" \u2014 "),iW=a("a"),Knr=o("LevitForImageClassification"),Znr=o(" or "),dW=a("a"),esr=o("LevitForImageClassificationWithTeacher"),osr=o(" (LeViT model)"),rsr=l(),bt=a("li"),W2e=a("strong"),tsr=o("perceiver"),asr=o(" \u2014 "),cW=a("a"),nsr=o("PerceiverForImageClassificationLearned"),ssr=o(" or "),fW=a("a"),lsr=o("PerceiverForImageClassificationFourier"),isr=o(" or "),mW=a("a"),dsr=o("PerceiverForImageClassificationConvProcessing"),csr=o(" (Perceiver model)"),fsr=l(),uF=a("li"),H2e=a("strong"),msr=o("poolformer"),gsr=o(" \u2014 "),gW=a("a"),hsr=o("PoolFormerForImageClassification"),psr=o(" (PoolFormer model)"),_sr=l(),bF=a("li"),U2e=a("strong"),usr=o("regnet"),bsr=o(" \u2014 "),hW=a("a"),vsr=o("RegNetForImageClassification"),Fsr=o(" (RegNet model)"),Tsr=l(),vF=a("li"),J2e=a("strong"),Msr=o("resnet"),Esr=o(" \u2014 "),pW=a("a"),Csr=o("ResNetForImageClassification"),wsr=o(" (ResNet model)"),Asr=l(),FF=a("li"),Y2e=a("strong"),Lsr=o("segformer"),ysr=o(" \u2014 "),_W=a("a"),xsr=o("SegformerForImageClassification"),$sr=o(" (SegFormer model)"),ksr=l(),TF=a("li"),K2e=a("strong"),Ssr=o("swin"),Rsr=o(" \u2014 "),uW=a("a"),Psr=o("SwinForImageClassification"),Bsr=o(" (Swin Transformer model)"),Isr=l(),MF=a("li"),Z2e=a("strong"),Nsr=o("van"),qsr=o(" \u2014 "),bW=a("a"),jsr=o("VanForImageClassification"),Dsr=o(" (VAN model)"),Gsr=l(),EF=a("li"),ebe=a("strong"),Osr=o("vit"),Vsr=o(" \u2014 "),vW=a("a"),Xsr=o("ViTForImageClassification"),zsr=o(" (ViT model)"),Qsr=l(),CF=a("p"),Wsr=o("The model is set in evaluation mode by default using "),obe=a("code"),Hsr=o("model.eval()"),Usr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rbe=a("code"),Jsr=o("model.train()"),Ysr=l(),F(wF.$$.fragment),YVe=l(),Td=a("h2"),AF=a("a"),tbe=a("span"),F(Ly.$$.fragment),Ksr=l(),abe=a("span"),Zsr=o("AutoModelForVision2Seq"),KVe=l(),Oo=a("div"),F(yy.$$.fragment),elr=l(),Md=a("p"),olr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),FW=a("a"),rlr=o("from_pretrained()"),tlr=o(" class method or the "),TW=a("a"),alr=o("from_config()"),nlr=o(` class
method.`),slr=l(),xy=a("p"),llr=o("This class cannot be instantiated directly using "),nbe=a("code"),ilr=o("__init__()"),dlr=o(" (throws an error)."),clr=l(),vt=a("div"),F($y.$$.fragment),flr=l(),sbe=a("p"),mlr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),glr=l(),Ed=a("p"),hlr=o(`Note:
Loading a model from its configuration file does `),lbe=a("strong"),plr=o("not"),_lr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MW=a("a"),ulr=o("from_pretrained()"),blr=o(" to load the model weights."),vlr=l(),F(LF.$$.fragment),Flr=l(),io=a("div"),F(ky.$$.fragment),Tlr=l(),ibe=a("p"),Mlr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Elr=l(),Qa=a("p"),Clr=o("The model class to instantiate is selected based on the "),dbe=a("code"),wlr=o("model_type"),Alr=o(` property of the config object (either
passed as an argument or loaded from `),cbe=a("code"),Llr=o("pretrained_model_name_or_path"),ylr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fbe=a("code"),xlr=o("pretrained_model_name_or_path"),$lr=o(":"),klr=l(),mbe=a("ul"),yF=a("li"),gbe=a("strong"),Slr=o("vision-encoder-decoder"),Rlr=o(" \u2014 "),EW=a("a"),Plr=o("VisionEncoderDecoderModel"),Blr=o(" (Vision Encoder decoder model)"),Ilr=l(),xF=a("p"),Nlr=o("The model is set in evaluation mode by default using "),hbe=a("code"),qlr=o("model.eval()"),jlr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pbe=a("code"),Dlr=o("model.train()"),Glr=l(),F($F.$$.fragment),ZVe=l(),Cd=a("h2"),kF=a("a"),_be=a("span"),F(Sy.$$.fragment),Olr=l(),ube=a("span"),Vlr=o("AutoModelForVisualQuestionAnswering"),eXe=l(),Vo=a("div"),F(Ry.$$.fragment),Xlr=l(),wd=a("p"),zlr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),CW=a("a"),Qlr=o("from_pretrained()"),Wlr=o(" class method or the "),wW=a("a"),Hlr=o("from_config()"),Ulr=o(` class
method.`),Jlr=l(),Py=a("p"),Ylr=o("This class cannot be instantiated directly using "),bbe=a("code"),Klr=o("__init__()"),Zlr=o(" (throws an error)."),eir=l(),Ft=a("div"),F(By.$$.fragment),oir=l(),vbe=a("p"),rir=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),tir=l(),Ad=a("p"),air=o(`Note:
Loading a model from its configuration file does `),Fbe=a("strong"),nir=o("not"),sir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AW=a("a"),lir=o("from_pretrained()"),iir=o(" to load the model weights."),dir=l(),F(SF.$$.fragment),cir=l(),co=a("div"),F(Iy.$$.fragment),fir=l(),Tbe=a("p"),mir=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),gir=l(),Wa=a("p"),hir=o("The model class to instantiate is selected based on the "),Mbe=a("code"),pir=o("model_type"),_ir=o(` property of the config object (either
passed as an argument or loaded from `),Ebe=a("code"),uir=o("pretrained_model_name_or_path"),bir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cbe=a("code"),vir=o("pretrained_model_name_or_path"),Fir=o(":"),Tir=l(),wbe=a("ul"),RF=a("li"),Abe=a("strong"),Mir=o("vilt"),Eir=o(" \u2014 "),LW=a("a"),Cir=o("ViltForQuestionAnswering"),wir=o(" (ViLT model)"),Air=l(),PF=a("p"),Lir=o("The model is set in evaluation mode by default using "),Lbe=a("code"),yir=o("model.eval()"),xir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ybe=a("code"),$ir=o("model.train()"),kir=l(),F(BF.$$.fragment),oXe=l(),Ld=a("h2"),IF=a("a"),xbe=a("span"),F(Ny.$$.fragment),Sir=l(),$be=a("span"),Rir=o("AutoModelForAudioClassification"),rXe=l(),Xo=a("div"),F(qy.$$.fragment),Pir=l(),yd=a("p"),Bir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),yW=a("a"),Iir=o("from_pretrained()"),Nir=o(" class method or the "),xW=a("a"),qir=o("from_config()"),jir=o(` class
method.`),Dir=l(),jy=a("p"),Gir=o("This class cannot be instantiated directly using "),kbe=a("code"),Oir=o("__init__()"),Vir=o(" (throws an error)."),Xir=l(),Tt=a("div"),F(Dy.$$.fragment),zir=l(),Sbe=a("p"),Qir=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Wir=l(),xd=a("p"),Hir=o(`Note:
Loading a model from its configuration file does `),Rbe=a("strong"),Uir=o("not"),Jir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$W=a("a"),Yir=o("from_pretrained()"),Kir=o(" to load the model weights."),Zir=l(),F(NF.$$.fragment),edr=l(),fo=a("div"),F(Gy.$$.fragment),odr=l(),Pbe=a("p"),rdr=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),tdr=l(),Ha=a("p"),adr=o("The model class to instantiate is selected based on the "),Bbe=a("code"),ndr=o("model_type"),sdr=o(` property of the config object (either
passed as an argument or loaded from `),Ibe=a("code"),ldr=o("pretrained_model_name_or_path"),idr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nbe=a("code"),ddr=o("pretrained_model_name_or_path"),cdr=o(":"),fdr=l(),Pe=a("ul"),qF=a("li"),qbe=a("strong"),mdr=o("data2vec-audio"),gdr=o(" \u2014 "),kW=a("a"),hdr=o("Data2VecAudioForSequenceClassification"),pdr=o(" (Data2VecAudio model)"),_dr=l(),jF=a("li"),jbe=a("strong"),udr=o("hubert"),bdr=o(" \u2014 "),SW=a("a"),vdr=o("HubertForSequenceClassification"),Fdr=o(" (Hubert model)"),Tdr=l(),DF=a("li"),Dbe=a("strong"),Mdr=o("sew"),Edr=o(" \u2014 "),RW=a("a"),Cdr=o("SEWForSequenceClassification"),wdr=o(" (SEW model)"),Adr=l(),GF=a("li"),Gbe=a("strong"),Ldr=o("sew-d"),ydr=o(" \u2014 "),PW=a("a"),xdr=o("SEWDForSequenceClassification"),$dr=o(" (SEW-D model)"),kdr=l(),OF=a("li"),Obe=a("strong"),Sdr=o("unispeech"),Rdr=o(" \u2014 "),BW=a("a"),Pdr=o("UniSpeechForSequenceClassification"),Bdr=o(" (UniSpeech model)"),Idr=l(),VF=a("li"),Vbe=a("strong"),Ndr=o("unispeech-sat"),qdr=o(" \u2014 "),IW=a("a"),jdr=o("UniSpeechSatForSequenceClassification"),Ddr=o(" (UniSpeechSat model)"),Gdr=l(),XF=a("li"),Xbe=a("strong"),Odr=o("wav2vec2"),Vdr=o(" \u2014 "),NW=a("a"),Xdr=o("Wav2Vec2ForSequenceClassification"),zdr=o(" (Wav2Vec2 model)"),Qdr=l(),zF=a("li"),zbe=a("strong"),Wdr=o("wav2vec2-conformer"),Hdr=o(" \u2014 "),qW=a("a"),Udr=o("Wav2Vec2ConformerForSequenceClassification"),Jdr=o(" (Wav2Vec2-Conformer model)"),Ydr=l(),QF=a("li"),Qbe=a("strong"),Kdr=o("wavlm"),Zdr=o(" \u2014 "),jW=a("a"),ecr=o("WavLMForSequenceClassification"),ocr=o(" (WavLM model)"),rcr=l(),WF=a("p"),tcr=o("The model is set in evaluation mode by default using "),Wbe=a("code"),acr=o("model.eval()"),ncr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hbe=a("code"),scr=o("model.train()"),lcr=l(),F(HF.$$.fragment),tXe=l(),$d=a("h2"),UF=a("a"),Ube=a("span"),F(Oy.$$.fragment),icr=l(),Jbe=a("span"),dcr=o("AutoModelForAudioFrameClassification"),aXe=l(),zo=a("div"),F(Vy.$$.fragment),ccr=l(),kd=a("p"),fcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),DW=a("a"),mcr=o("from_pretrained()"),gcr=o(" class method or the "),GW=a("a"),hcr=o("from_config()"),pcr=o(` class
method.`),_cr=l(),Xy=a("p"),ucr=o("This class cannot be instantiated directly using "),Ybe=a("code"),bcr=o("__init__()"),vcr=o(" (throws an error)."),Fcr=l(),Mt=a("div"),F(zy.$$.fragment),Tcr=l(),Kbe=a("p"),Mcr=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Ecr=l(),Sd=a("p"),Ccr=o(`Note:
Loading a model from its configuration file does `),Zbe=a("strong"),wcr=o("not"),Acr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OW=a("a"),Lcr=o("from_pretrained()"),ycr=o(" to load the model weights."),xcr=l(),F(JF.$$.fragment),$cr=l(),mo=a("div"),F(Qy.$$.fragment),kcr=l(),eve=a("p"),Scr=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Rcr=l(),Ua=a("p"),Pcr=o("The model class to instantiate is selected based on the "),ove=a("code"),Bcr=o("model_type"),Icr=o(` property of the config object (either
passed as an argument or loaded from `),rve=a("code"),Ncr=o("pretrained_model_name_or_path"),qcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tve=a("code"),jcr=o("pretrained_model_name_or_path"),Dcr=o(":"),Gcr=l(),et=a("ul"),YF=a("li"),ave=a("strong"),Ocr=o("data2vec-audio"),Vcr=o(" \u2014 "),VW=a("a"),Xcr=o("Data2VecAudioForAudioFrameClassification"),zcr=o(" (Data2VecAudio model)"),Qcr=l(),KF=a("li"),nve=a("strong"),Wcr=o("unispeech-sat"),Hcr=o(" \u2014 "),XW=a("a"),Ucr=o("UniSpeechSatForAudioFrameClassification"),Jcr=o(" (UniSpeechSat model)"),Ycr=l(),ZF=a("li"),sve=a("strong"),Kcr=o("wav2vec2"),Zcr=o(" \u2014 "),zW=a("a"),efr=o("Wav2Vec2ForAudioFrameClassification"),ofr=o(" (Wav2Vec2 model)"),rfr=l(),eT=a("li"),lve=a("strong"),tfr=o("wav2vec2-conformer"),afr=o(" \u2014 "),QW=a("a"),nfr=o("Wav2Vec2ConformerForAudioFrameClassification"),sfr=o(" (Wav2Vec2-Conformer model)"),lfr=l(),oT=a("li"),ive=a("strong"),ifr=o("wavlm"),dfr=o(" \u2014 "),WW=a("a"),cfr=o("WavLMForAudioFrameClassification"),ffr=o(" (WavLM model)"),mfr=l(),rT=a("p"),gfr=o("The model is set in evaluation mode by default using "),dve=a("code"),hfr=o("model.eval()"),pfr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cve=a("code"),_fr=o("model.train()"),ufr=l(),F(tT.$$.fragment),nXe=l(),Rd=a("h2"),aT=a("a"),fve=a("span"),F(Wy.$$.fragment),bfr=l(),mve=a("span"),vfr=o("AutoModelForCTC"),sXe=l(),Qo=a("div"),F(Hy.$$.fragment),Ffr=l(),Pd=a("p"),Tfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),HW=a("a"),Mfr=o("from_pretrained()"),Efr=o(" class method or the "),UW=a("a"),Cfr=o("from_config()"),wfr=o(` class
method.`),Afr=l(),Uy=a("p"),Lfr=o("This class cannot be instantiated directly using "),gve=a("code"),yfr=o("__init__()"),xfr=o(" (throws an error)."),$fr=l(),Et=a("div"),F(Jy.$$.fragment),kfr=l(),hve=a("p"),Sfr=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Rfr=l(),Bd=a("p"),Pfr=o(`Note:
Loading a model from its configuration file does `),pve=a("strong"),Bfr=o("not"),Ifr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JW=a("a"),Nfr=o("from_pretrained()"),qfr=o(" to load the model weights."),jfr=l(),F(nT.$$.fragment),Dfr=l(),go=a("div"),F(Yy.$$.fragment),Gfr=l(),_ve=a("p"),Ofr=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Vfr=l(),Ja=a("p"),Xfr=o("The model class to instantiate is selected based on the "),uve=a("code"),zfr=o("model_type"),Qfr=o(` property of the config object (either
passed as an argument or loaded from `),bve=a("code"),Wfr=o("pretrained_model_name_or_path"),Hfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vve=a("code"),Ufr=o("pretrained_model_name_or_path"),Jfr=o(":"),Yfr=l(),Le=a("ul"),sT=a("li"),Fve=a("strong"),Kfr=o("data2vec-audio"),Zfr=o(" \u2014 "),YW=a("a"),emr=o("Data2VecAudioForCTC"),omr=o(" (Data2VecAudio model)"),rmr=l(),lT=a("li"),Tve=a("strong"),tmr=o("hubert"),amr=o(" \u2014 "),KW=a("a"),nmr=o("HubertForCTC"),smr=o(" (Hubert model)"),lmr=l(),iT=a("li"),Mve=a("strong"),imr=o("mctct"),dmr=o(" \u2014 "),ZW=a("a"),cmr=o("MCTCTForCTC"),fmr=o(" (M-CTC-T model)"),mmr=l(),dT=a("li"),Eve=a("strong"),gmr=o("sew"),hmr=o(" \u2014 "),eH=a("a"),pmr=o("SEWForCTC"),_mr=o(" (SEW model)"),umr=l(),cT=a("li"),Cve=a("strong"),bmr=o("sew-d"),vmr=o(" \u2014 "),oH=a("a"),Fmr=o("SEWDForCTC"),Tmr=o(" (SEW-D model)"),Mmr=l(),fT=a("li"),wve=a("strong"),Emr=o("unispeech"),Cmr=o(" \u2014 "),rH=a("a"),wmr=o("UniSpeechForCTC"),Amr=o(" (UniSpeech model)"),Lmr=l(),mT=a("li"),Ave=a("strong"),ymr=o("unispeech-sat"),xmr=o(" \u2014 "),tH=a("a"),$mr=o("UniSpeechSatForCTC"),kmr=o(" (UniSpeechSat model)"),Smr=l(),gT=a("li"),Lve=a("strong"),Rmr=o("wav2vec2"),Pmr=o(" \u2014 "),aH=a("a"),Bmr=o("Wav2Vec2ForCTC"),Imr=o(" (Wav2Vec2 model)"),Nmr=l(),hT=a("li"),yve=a("strong"),qmr=o("wav2vec2-conformer"),jmr=o(" \u2014 "),nH=a("a"),Dmr=o("Wav2Vec2ConformerForCTC"),Gmr=o(" (Wav2Vec2-Conformer model)"),Omr=l(),pT=a("li"),xve=a("strong"),Vmr=o("wavlm"),Xmr=o(" \u2014 "),sH=a("a"),zmr=o("WavLMForCTC"),Qmr=o(" (WavLM model)"),Wmr=l(),_T=a("p"),Hmr=o("The model is set in evaluation mode by default using "),$ve=a("code"),Umr=o("model.eval()"),Jmr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kve=a("code"),Ymr=o("model.train()"),Kmr=l(),F(uT.$$.fragment),lXe=l(),Id=a("h2"),bT=a("a"),Sve=a("span"),F(Ky.$$.fragment),Zmr=l(),Rve=a("span"),egr=o("AutoModelForSpeechSeq2Seq"),iXe=l(),Wo=a("div"),F(Zy.$$.fragment),ogr=l(),Nd=a("p"),rgr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),lH=a("a"),tgr=o("from_pretrained()"),agr=o(" class method or the "),iH=a("a"),ngr=o("from_config()"),sgr=o(` class
method.`),lgr=l(),e8=a("p"),igr=o("This class cannot be instantiated directly using "),Pve=a("code"),dgr=o("__init__()"),cgr=o(" (throws an error)."),fgr=l(),Ct=a("div"),F(o8.$$.fragment),mgr=l(),Bve=a("p"),ggr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),hgr=l(),qd=a("p"),pgr=o(`Note:
Loading a model from its configuration file does `),Ive=a("strong"),_gr=o("not"),ugr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dH=a("a"),bgr=o("from_pretrained()"),vgr=o(" to load the model weights."),Fgr=l(),F(vT.$$.fragment),Tgr=l(),ho=a("div"),F(r8.$$.fragment),Mgr=l(),Nve=a("p"),Egr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Cgr=l(),Ya=a("p"),wgr=o("The model class to instantiate is selected based on the "),qve=a("code"),Agr=o("model_type"),Lgr=o(` property of the config object (either
passed as an argument or loaded from `),jve=a("code"),ygr=o("pretrained_model_name_or_path"),xgr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dve=a("code"),$gr=o("pretrained_model_name_or_path"),kgr=o(":"),Sgr=l(),t8=a("ul"),FT=a("li"),Gve=a("strong"),Rgr=o("speech-encoder-decoder"),Pgr=o(" \u2014 "),cH=a("a"),Bgr=o("SpeechEncoderDecoderModel"),Igr=o(" (Speech Encoder decoder model)"),Ngr=l(),TT=a("li"),Ove=a("strong"),qgr=o("speech_to_text"),jgr=o(" \u2014 "),fH=a("a"),Dgr=o("Speech2TextForConditionalGeneration"),Ggr=o(" (Speech2Text model)"),Ogr=l(),MT=a("p"),Vgr=o("The model is set in evaluation mode by default using "),Vve=a("code"),Xgr=o("model.eval()"),zgr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xve=a("code"),Qgr=o("model.train()"),Wgr=l(),F(ET.$$.fragment),dXe=l(),jd=a("h2"),CT=a("a"),zve=a("span"),F(a8.$$.fragment),Hgr=l(),Qve=a("span"),Ugr=o("AutoModelForAudioXVector"),cXe=l(),Ho=a("div"),F(n8.$$.fragment),Jgr=l(),Dd=a("p"),Ygr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),mH=a("a"),Kgr=o("from_pretrained()"),Zgr=o(" class method or the "),gH=a("a"),ehr=o("from_config()"),ohr=o(` class
method.`),rhr=l(),s8=a("p"),thr=o("This class cannot be instantiated directly using "),Wve=a("code"),ahr=o("__init__()"),nhr=o(" (throws an error)."),shr=l(),wt=a("div"),F(l8.$$.fragment),lhr=l(),Hve=a("p"),ihr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),dhr=l(),Gd=a("p"),chr=o(`Note:
Loading a model from its configuration file does `),Uve=a("strong"),fhr=o("not"),mhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hH=a("a"),ghr=o("from_pretrained()"),hhr=o(" to load the model weights."),phr=l(),F(wT.$$.fragment),_hr=l(),po=a("div"),F(i8.$$.fragment),uhr=l(),Jve=a("p"),bhr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),vhr=l(),Ka=a("p"),Fhr=o("The model class to instantiate is selected based on the "),Yve=a("code"),Thr=o("model_type"),Mhr=o(` property of the config object (either
passed as an argument or loaded from `),Kve=a("code"),Ehr=o("pretrained_model_name_or_path"),Chr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zve=a("code"),whr=o("pretrained_model_name_or_path"),Ahr=o(":"),Lhr=l(),ot=a("ul"),AT=a("li"),e3e=a("strong"),yhr=o("data2vec-audio"),xhr=o(" \u2014 "),pH=a("a"),$hr=o("Data2VecAudioForXVector"),khr=o(" (Data2VecAudio model)"),Shr=l(),LT=a("li"),o3e=a("strong"),Rhr=o("unispeech-sat"),Phr=o(" \u2014 "),_H=a("a"),Bhr=o("UniSpeechSatForXVector"),Ihr=o(" (UniSpeechSat model)"),Nhr=l(),yT=a("li"),r3e=a("strong"),qhr=o("wav2vec2"),jhr=o(" \u2014 "),uH=a("a"),Dhr=o("Wav2Vec2ForXVector"),Ghr=o(" (Wav2Vec2 model)"),Ohr=l(),xT=a("li"),t3e=a("strong"),Vhr=o("wav2vec2-conformer"),Xhr=o(" \u2014 "),bH=a("a"),zhr=o("Wav2Vec2ConformerForXVector"),Qhr=o(" (Wav2Vec2-Conformer model)"),Whr=l(),$T=a("li"),a3e=a("strong"),Hhr=o("wavlm"),Uhr=o(" \u2014 "),vH=a("a"),Jhr=o("WavLMForXVector"),Yhr=o(" (WavLM model)"),Khr=l(),kT=a("p"),Zhr=o("The model is set in evaluation mode by default using "),n3e=a("code"),epr=o("model.eval()"),opr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),s3e=a("code"),rpr=o("model.train()"),tpr=l(),F(ST.$$.fragment),fXe=l(),Od=a("h2"),RT=a("a"),l3e=a("span"),F(d8.$$.fragment),apr=l(),i3e=a("span"),npr=o("AutoModelForMaskedImageModeling"),mXe=l(),Uo=a("div"),F(c8.$$.fragment),spr=l(),Vd=a("p"),lpr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),FH=a("a"),ipr=o("from_pretrained()"),dpr=o(" class method or the "),TH=a("a"),cpr=o("from_config()"),fpr=o(` class
method.`),mpr=l(),f8=a("p"),gpr=o("This class cannot be instantiated directly using "),d3e=a("code"),hpr=o("__init__()"),ppr=o(" (throws an error)."),_pr=l(),At=a("div"),F(m8.$$.fragment),upr=l(),c3e=a("p"),bpr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),vpr=l(),Xd=a("p"),Fpr=o(`Note:
Loading a model from its configuration file does `),f3e=a("strong"),Tpr=o("not"),Mpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MH=a("a"),Epr=o("from_pretrained()"),Cpr=o(" to load the model weights."),wpr=l(),F(PT.$$.fragment),Apr=l(),_o=a("div"),F(g8.$$.fragment),Lpr=l(),m3e=a("p"),ypr=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),xpr=l(),Za=a("p"),$pr=o("The model class to instantiate is selected based on the "),g3e=a("code"),kpr=o("model_type"),Spr=o(` property of the config object (either
passed as an argument or loaded from `),h3e=a("code"),Rpr=o("pretrained_model_name_or_path"),Ppr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p3e=a("code"),Bpr=o("pretrained_model_name_or_path"),Ipr=o(":"),Npr=l(),zd=a("ul"),BT=a("li"),_3e=a("strong"),qpr=o("deit"),jpr=o(" \u2014 "),EH=a("a"),Dpr=o("DeiTForMaskedImageModeling"),Gpr=o(" (DeiT model)"),Opr=l(),IT=a("li"),u3e=a("strong"),Vpr=o("swin"),Xpr=o(" \u2014 "),CH=a("a"),zpr=o("SwinForMaskedImageModeling"),Qpr=o(" (Swin Transformer model)"),Wpr=l(),NT=a("li"),b3e=a("strong"),Hpr=o("vit"),Upr=o(" \u2014 "),wH=a("a"),Jpr=o("ViTForMaskedImageModeling"),Ypr=o(" (ViT model)"),Kpr=l(),qT=a("p"),Zpr=o("The model is set in evaluation mode by default using "),v3e=a("code"),e_r=o("model.eval()"),o_r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),F3e=a("code"),r_r=o("model.train()"),t_r=l(),F(jT.$$.fragment),gXe=l(),Qd=a("h2"),DT=a("a"),T3e=a("span"),F(h8.$$.fragment),a_r=l(),M3e=a("span"),n_r=o("AutoModelForObjectDetection"),hXe=l(),Jo=a("div"),F(p8.$$.fragment),s_r=l(),Wd=a("p"),l_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),AH=a("a"),i_r=o("from_pretrained()"),d_r=o(" class method or the "),LH=a("a"),c_r=o("from_config()"),f_r=o(` class
method.`),m_r=l(),_8=a("p"),g_r=o("This class cannot be instantiated directly using "),E3e=a("code"),h_r=o("__init__()"),p_r=o(" (throws an error)."),__r=l(),Lt=a("div"),F(u8.$$.fragment),u_r=l(),C3e=a("p"),b_r=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),v_r=l(),Hd=a("p"),F_r=o(`Note:
Loading a model from its configuration file does `),w3e=a("strong"),T_r=o("not"),M_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yH=a("a"),E_r=o("from_pretrained()"),C_r=o(" to load the model weights."),w_r=l(),F(GT.$$.fragment),A_r=l(),uo=a("div"),F(b8.$$.fragment),L_r=l(),A3e=a("p"),y_r=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),x_r=l(),en=a("p"),$_r=o("The model class to instantiate is selected based on the "),L3e=a("code"),k_r=o("model_type"),S_r=o(` property of the config object (either
passed as an argument or loaded from `),y3e=a("code"),R_r=o("pretrained_model_name_or_path"),P_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x3e=a("code"),B_r=o("pretrained_model_name_or_path"),I_r=o(":"),N_r=l(),v8=a("ul"),OT=a("li"),$3e=a("strong"),q_r=o("detr"),j_r=o(" \u2014 "),xH=a("a"),D_r=o("DetrForObjectDetection"),G_r=o(" (DETR model)"),O_r=l(),VT=a("li"),k3e=a("strong"),V_r=o("yolos"),X_r=o(" \u2014 "),$H=a("a"),z_r=o("YolosForObjectDetection"),Q_r=o(" (YOLOS model)"),W_r=l(),XT=a("p"),H_r=o("The model is set in evaluation mode by default using "),S3e=a("code"),U_r=o("model.eval()"),J_r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),R3e=a("code"),Y_r=o("model.train()"),K_r=l(),F(zT.$$.fragment),pXe=l(),Ud=a("h2"),QT=a("a"),P3e=a("span"),F(F8.$$.fragment),Z_r=l(),B3e=a("span"),eur=o("AutoModelForImageSegmentation"),_Xe=l(),Yo=a("div"),F(T8.$$.fragment),our=l(),Jd=a("p"),rur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),kH=a("a"),tur=o("from_pretrained()"),aur=o(" class method or the "),SH=a("a"),nur=o("from_config()"),sur=o(` class
method.`),lur=l(),M8=a("p"),iur=o("This class cannot be instantiated directly using "),I3e=a("code"),dur=o("__init__()"),cur=o(" (throws an error)."),fur=l(),yt=a("div"),F(E8.$$.fragment),mur=l(),N3e=a("p"),gur=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),hur=l(),Yd=a("p"),pur=o(`Note:
Loading a model from its configuration file does `),q3e=a("strong"),_ur=o("not"),uur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RH=a("a"),bur=o("from_pretrained()"),vur=o(" to load the model weights."),Fur=l(),F(WT.$$.fragment),Tur=l(),bo=a("div"),F(C8.$$.fragment),Mur=l(),j3e=a("p"),Eur=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Cur=l(),on=a("p"),wur=o("The model class to instantiate is selected based on the "),D3e=a("code"),Aur=o("model_type"),Lur=o(` property of the config object (either
passed as an argument or loaded from `),G3e=a("code"),yur=o("pretrained_model_name_or_path"),xur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O3e=a("code"),$ur=o("pretrained_model_name_or_path"),kur=o(":"),Sur=l(),V3e=a("ul"),HT=a("li"),X3e=a("strong"),Rur=o("detr"),Pur=o(" \u2014 "),PH=a("a"),Bur=o("DetrForSegmentation"),Iur=o(" (DETR model)"),Nur=l(),UT=a("p"),qur=o("The model is set in evaluation mode by default using "),z3e=a("code"),jur=o("model.eval()"),Dur=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Q3e=a("code"),Gur=o("model.train()"),Our=l(),F(JT.$$.fragment),uXe=l(),Kd=a("h2"),YT=a("a"),W3e=a("span"),F(w8.$$.fragment),Vur=l(),H3e=a("span"),Xur=o("AutoModelForSemanticSegmentation"),bXe=l(),Ko=a("div"),F(A8.$$.fragment),zur=l(),Zd=a("p"),Qur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),BH=a("a"),Wur=o("from_pretrained()"),Hur=o(" class method or the "),IH=a("a"),Uur=o("from_config()"),Jur=o(` class
method.`),Yur=l(),L8=a("p"),Kur=o("This class cannot be instantiated directly using "),U3e=a("code"),Zur=o("__init__()"),e1r=o(" (throws an error)."),o1r=l(),xt=a("div"),F(y8.$$.fragment),r1r=l(),J3e=a("p"),t1r=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),a1r=l(),ec=a("p"),n1r=o(`Note:
Loading a model from its configuration file does `),Y3e=a("strong"),s1r=o("not"),l1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NH=a("a"),i1r=o("from_pretrained()"),d1r=o(" to load the model weights."),c1r=l(),F(KT.$$.fragment),f1r=l(),vo=a("div"),F(x8.$$.fragment),m1r=l(),K3e=a("p"),g1r=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),h1r=l(),rn=a("p"),p1r=o("The model class to instantiate is selected based on the "),Z3e=a("code"),_1r=o("model_type"),u1r=o(` property of the config object (either
passed as an argument or loaded from `),e5e=a("code"),b1r=o("pretrained_model_name_or_path"),v1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o5e=a("code"),F1r=o("pretrained_model_name_or_path"),T1r=o(":"),M1r=l(),tn=a("ul"),ZT=a("li"),r5e=a("strong"),E1r=o("beit"),C1r=o(" \u2014 "),qH=a("a"),w1r=o("BeitForSemanticSegmentation"),A1r=o(" (BEiT model)"),L1r=l(),e7=a("li"),t5e=a("strong"),y1r=o("data2vec-vision"),x1r=o(" \u2014 "),jH=a("a"),$1r=o("Data2VecVisionForSemanticSegmentation"),k1r=o(" (Data2VecVision model)"),S1r=l(),o7=a("li"),a5e=a("strong"),R1r=o("dpt"),P1r=o(" \u2014 "),DH=a("a"),B1r=o("DPTForSemanticSegmentation"),I1r=o(" (DPT model)"),N1r=l(),r7=a("li"),n5e=a("strong"),q1r=o("segformer"),j1r=o(" \u2014 "),GH=a("a"),D1r=o("SegformerForSemanticSegmentation"),G1r=o(" (SegFormer model)"),O1r=l(),t7=a("p"),V1r=o("The model is set in evaluation mode by default using "),s5e=a("code"),X1r=o("model.eval()"),z1r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),l5e=a("code"),Q1r=o("model.train()"),W1r=l(),F(a7.$$.fragment),vXe=l(),oc=a("h2"),n7=a("a"),i5e=a("span"),F($8.$$.fragment),H1r=l(),d5e=a("span"),U1r=o("AutoModelForInstanceSegmentation"),FXe=l(),Zo=a("div"),F(k8.$$.fragment),J1r=l(),rc=a("p"),Y1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),OH=a("a"),K1r=o("from_pretrained()"),Z1r=o(" class method or the "),VH=a("a"),e2r=o("from_config()"),o2r=o(` class
method.`),r2r=l(),S8=a("p"),t2r=o("This class cannot be instantiated directly using "),c5e=a("code"),a2r=o("__init__()"),n2r=o(" (throws an error)."),s2r=l(),$t=a("div"),F(R8.$$.fragment),l2r=l(),f5e=a("p"),i2r=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),d2r=l(),tc=a("p"),c2r=o(`Note:
Loading a model from its configuration file does `),m5e=a("strong"),f2r=o("not"),m2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XH=a("a"),g2r=o("from_pretrained()"),h2r=o(" to load the model weights."),p2r=l(),F(s7.$$.fragment),_2r=l(),Fo=a("div"),F(P8.$$.fragment),u2r=l(),g5e=a("p"),b2r=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),v2r=l(),an=a("p"),F2r=o("The model class to instantiate is selected based on the "),h5e=a("code"),T2r=o("model_type"),M2r=o(` property of the config object (either
passed as an argument or loaded from `),p5e=a("code"),E2r=o("pretrained_model_name_or_path"),C2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_5e=a("code"),w2r=o("pretrained_model_name_or_path"),A2r=o(":"),L2r=l(),u5e=a("ul"),l7=a("li"),b5e=a("strong"),y2r=o("maskformer"),x2r=o(" \u2014 "),zH=a("a"),$2r=o("MaskFormerForInstanceSegmentation"),k2r=o(" (MaskFormer model)"),S2r=l(),i7=a("p"),R2r=o("The model is set in evaluation mode by default using "),v5e=a("code"),P2r=o("model.eval()"),B2r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),F5e=a("code"),I2r=o("model.train()"),N2r=l(),F(d7.$$.fragment),TXe=l(),ac=a("h2"),c7=a("a"),T5e=a("span"),F(B8.$$.fragment),q2r=l(),M5e=a("span"),j2r=o("TFAutoModel"),MXe=l(),er=a("div"),F(I8.$$.fragment),D2r=l(),nc=a("p"),G2r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),QH=a("a"),O2r=o("from_pretrained()"),V2r=o(" class method or the "),WH=a("a"),X2r=o("from_config()"),z2r=o(` class
method.`),Q2r=l(),N8=a("p"),W2r=o("This class cannot be instantiated directly using "),E5e=a("code"),H2r=o("__init__()"),U2r=o(" (throws an error)."),J2r=l(),kt=a("div"),F(q8.$$.fragment),Y2r=l(),C5e=a("p"),K2r=o("Instantiates one of the base model classes of the library from a configuration."),Z2r=l(),sc=a("p"),ebr=o(`Note:
Loading a model from its configuration file does `),w5e=a("strong"),obr=o("not"),rbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HH=a("a"),tbr=o("from_pretrained()"),abr=o(" to load the model weights."),nbr=l(),F(f7.$$.fragment),sbr=l(),yr=a("div"),F(j8.$$.fragment),lbr=l(),A5e=a("p"),ibr=o("Instantiate one of the base model classes of the library from a pretrained model."),dbr=l(),nn=a("p"),cbr=o("The model class to instantiate is selected based on the "),L5e=a("code"),fbr=o("model_type"),mbr=o(` property of the config object (either
passed as an argument or loaded from `),y5e=a("code"),gbr=o("pretrained_model_name_or_path"),hbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x5e=a("code"),pbr=o("pretrained_model_name_or_path"),_br=o(":"),ubr=l(),j=a("ul"),m7=a("li"),$5e=a("strong"),bbr=o("albert"),vbr=o(" \u2014 "),UH=a("a"),Fbr=o("TFAlbertModel"),Tbr=o(" (ALBERT model)"),Mbr=l(),g7=a("li"),k5e=a("strong"),Ebr=o("bart"),Cbr=o(" \u2014 "),JH=a("a"),wbr=o("TFBartModel"),Abr=o(" (BART model)"),Lbr=l(),h7=a("li"),S5e=a("strong"),ybr=o("bert"),xbr=o(" \u2014 "),YH=a("a"),$br=o("TFBertModel"),kbr=o(" (BERT model)"),Sbr=l(),p7=a("li"),R5e=a("strong"),Rbr=o("blenderbot"),Pbr=o(" \u2014 "),KH=a("a"),Bbr=o("TFBlenderbotModel"),Ibr=o(" (Blenderbot model)"),Nbr=l(),_7=a("li"),P5e=a("strong"),qbr=o("blenderbot-small"),jbr=o(" \u2014 "),ZH=a("a"),Dbr=o("TFBlenderbotSmallModel"),Gbr=o(" (BlenderbotSmall model)"),Obr=l(),u7=a("li"),B5e=a("strong"),Vbr=o("camembert"),Xbr=o(" \u2014 "),eU=a("a"),zbr=o("TFCamembertModel"),Qbr=o(" (CamemBERT model)"),Wbr=l(),b7=a("li"),I5e=a("strong"),Hbr=o("clip"),Ubr=o(" \u2014 "),oU=a("a"),Jbr=o("TFCLIPModel"),Ybr=o(" (CLIP model)"),Kbr=l(),v7=a("li"),N5e=a("strong"),Zbr=o("convbert"),evr=o(" \u2014 "),rU=a("a"),ovr=o("TFConvBertModel"),rvr=o(" (ConvBERT model)"),tvr=l(),F7=a("li"),q5e=a("strong"),avr=o("convnext"),nvr=o(" \u2014 "),tU=a("a"),svr=o("TFConvNextModel"),lvr=o(" (ConvNeXT model)"),ivr=l(),T7=a("li"),j5e=a("strong"),dvr=o("ctrl"),cvr=o(" \u2014 "),aU=a("a"),fvr=o("TFCTRLModel"),mvr=o(" (CTRL model)"),gvr=l(),M7=a("li"),D5e=a("strong"),hvr=o("data2vec-vision"),pvr=o(" \u2014 "),nU=a("a"),_vr=o("TFData2VecVisionModel"),uvr=o(" (Data2VecVision model)"),bvr=l(),E7=a("li"),G5e=a("strong"),vvr=o("deberta"),Fvr=o(" \u2014 "),sU=a("a"),Tvr=o("TFDebertaModel"),Mvr=o(" (DeBERTa model)"),Evr=l(),C7=a("li"),O5e=a("strong"),Cvr=o("deberta-v2"),wvr=o(" \u2014 "),lU=a("a"),Avr=o("TFDebertaV2Model"),Lvr=o(" (DeBERTa-v2 model)"),yvr=l(),w7=a("li"),V5e=a("strong"),xvr=o("distilbert"),$vr=o(" \u2014 "),iU=a("a"),kvr=o("TFDistilBertModel"),Svr=o(" (DistilBERT model)"),Rvr=l(),A7=a("li"),X5e=a("strong"),Pvr=o("dpr"),Bvr=o(" \u2014 "),dU=a("a"),Ivr=o("TFDPRQuestionEncoder"),Nvr=o(" (DPR model)"),qvr=l(),L7=a("li"),z5e=a("strong"),jvr=o("electra"),Dvr=o(" \u2014 "),cU=a("a"),Gvr=o("TFElectraModel"),Ovr=o(" (ELECTRA model)"),Vvr=l(),y7=a("li"),Q5e=a("strong"),Xvr=o("flaubert"),zvr=o(" \u2014 "),fU=a("a"),Qvr=o("TFFlaubertModel"),Wvr=o(" (FlauBERT model)"),Hvr=l(),Us=a("li"),W5e=a("strong"),Uvr=o("funnel"),Jvr=o(" \u2014 "),mU=a("a"),Yvr=o("TFFunnelModel"),Kvr=o(" or "),gU=a("a"),Zvr=o("TFFunnelBaseModel"),e3r=o(" (Funnel Transformer model)"),o3r=l(),x7=a("li"),H5e=a("strong"),r3r=o("gpt2"),t3r=o(" \u2014 "),hU=a("a"),a3r=o("TFGPT2Model"),n3r=o(" (OpenAI GPT-2 model)"),s3r=l(),$7=a("li"),U5e=a("strong"),l3r=o("gptj"),i3r=o(" \u2014 "),pU=a("a"),d3r=o("TFGPTJModel"),c3r=o(" (GPT-J model)"),f3r=l(),k7=a("li"),J5e=a("strong"),m3r=o("hubert"),g3r=o(" \u2014 "),_U=a("a"),h3r=o("TFHubertModel"),p3r=o(" (Hubert model)"),_3r=l(),S7=a("li"),Y5e=a("strong"),u3r=o("layoutlm"),b3r=o(" \u2014 "),uU=a("a"),v3r=o("TFLayoutLMModel"),F3r=o(" (LayoutLM model)"),T3r=l(),R7=a("li"),K5e=a("strong"),M3r=o("led"),E3r=o(" \u2014 "),bU=a("a"),C3r=o("TFLEDModel"),w3r=o(" (LED model)"),A3r=l(),P7=a("li"),Z5e=a("strong"),L3r=o("longformer"),y3r=o(" \u2014 "),vU=a("a"),x3r=o("TFLongformerModel"),$3r=o(" (Longformer model)"),k3r=l(),B7=a("li"),eFe=a("strong"),S3r=o("lxmert"),R3r=o(" \u2014 "),FU=a("a"),P3r=o("TFLxmertModel"),B3r=o(" (LXMERT model)"),I3r=l(),I7=a("li"),oFe=a("strong"),N3r=o("marian"),q3r=o(" \u2014 "),TU=a("a"),j3r=o("TFMarianModel"),D3r=o(" (Marian model)"),G3r=l(),N7=a("li"),rFe=a("strong"),O3r=o("mbart"),V3r=o(" \u2014 "),MU=a("a"),X3r=o("TFMBartModel"),z3r=o(" (mBART model)"),Q3r=l(),q7=a("li"),tFe=a("strong"),W3r=o("mobilebert"),H3r=o(" \u2014 "),EU=a("a"),U3r=o("TFMobileBertModel"),J3r=o(" (MobileBERT model)"),Y3r=l(),j7=a("li"),aFe=a("strong"),K3r=o("mpnet"),Z3r=o(" \u2014 "),CU=a("a"),e5r=o("TFMPNetModel"),o5r=o(" (MPNet model)"),r5r=l(),D7=a("li"),nFe=a("strong"),t5r=o("mt5"),a5r=o(" \u2014 "),wU=a("a"),n5r=o("TFMT5Model"),s5r=o(" (MT5 model)"),l5r=l(),G7=a("li"),sFe=a("strong"),i5r=o("openai-gpt"),d5r=o(" \u2014 "),AU=a("a"),c5r=o("TFOpenAIGPTModel"),f5r=o(" (OpenAI GPT model)"),m5r=l(),O7=a("li"),lFe=a("strong"),g5r=o("opt"),h5r=o(" \u2014 "),LU=a("a"),p5r=o("TFOPTModel"),_5r=o(" (OPT model)"),u5r=l(),V7=a("li"),iFe=a("strong"),b5r=o("pegasus"),v5r=o(" \u2014 "),yU=a("a"),F5r=o("TFPegasusModel"),T5r=o(" (Pegasus model)"),M5r=l(),X7=a("li"),dFe=a("strong"),E5r=o("regnet"),C5r=o(" \u2014 "),xU=a("a"),w5r=o("TFRegNetModel"),A5r=o(" (RegNet model)"),L5r=l(),z7=a("li"),cFe=a("strong"),y5r=o("rembert"),x5r=o(" \u2014 "),$U=a("a"),$5r=o("TFRemBertModel"),k5r=o(" (RemBERT model)"),S5r=l(),Q7=a("li"),fFe=a("strong"),R5r=o("roberta"),P5r=o(" \u2014 "),kU=a("a"),B5r=o("TFRobertaModel"),I5r=o(" (RoBERTa model)"),N5r=l(),W7=a("li"),mFe=a("strong"),q5r=o("roformer"),j5r=o(" \u2014 "),SU=a("a"),D5r=o("TFRoFormerModel"),G5r=o(" (RoFormer model)"),O5r=l(),H7=a("li"),gFe=a("strong"),V5r=o("speech_to_text"),X5r=o(" \u2014 "),RU=a("a"),z5r=o("TFSpeech2TextModel"),Q5r=o(" (Speech2Text model)"),W5r=l(),U7=a("li"),hFe=a("strong"),H5r=o("swin"),U5r=o(" \u2014 "),PU=a("a"),J5r=o("TFSwinModel"),Y5r=o(" (Swin Transformer model)"),K5r=l(),J7=a("li"),pFe=a("strong"),Z5r=o("t5"),eFr=o(" \u2014 "),BU=a("a"),oFr=o("TFT5Model"),rFr=o(" (T5 model)"),tFr=l(),Y7=a("li"),_Fe=a("strong"),aFr=o("tapas"),nFr=o(" \u2014 "),IU=a("a"),sFr=o("TFTapasModel"),lFr=o(" (TAPAS model)"),iFr=l(),K7=a("li"),uFe=a("strong"),dFr=o("transfo-xl"),cFr=o(" \u2014 "),NU=a("a"),fFr=o("TFTransfoXLModel"),mFr=o(" (Transformer-XL model)"),gFr=l(),Z7=a("li"),bFe=a("strong"),hFr=o("vit"),pFr=o(" \u2014 "),qU=a("a"),_Fr=o("TFViTModel"),uFr=o(" (ViT model)"),bFr=l(),e9=a("li"),vFe=a("strong"),vFr=o("vit_mae"),FFr=o(" \u2014 "),jU=a("a"),TFr=o("TFViTMAEModel"),MFr=o(" (ViTMAE model)"),EFr=l(),o9=a("li"),FFe=a("strong"),CFr=o("wav2vec2"),wFr=o(" \u2014 "),DU=a("a"),AFr=o("TFWav2Vec2Model"),LFr=o(" (Wav2Vec2 model)"),yFr=l(),r9=a("li"),TFe=a("strong"),xFr=o("xlm"),$Fr=o(" \u2014 "),GU=a("a"),kFr=o("TFXLMModel"),SFr=o(" (XLM model)"),RFr=l(),t9=a("li"),MFe=a("strong"),PFr=o("xlm-roberta"),BFr=o(" \u2014 "),OU=a("a"),IFr=o("TFXLMRobertaModel"),NFr=o(" (XLM-RoBERTa model)"),qFr=l(),a9=a("li"),EFe=a("strong"),jFr=o("xlnet"),DFr=o(" \u2014 "),VU=a("a"),GFr=o("TFXLNetModel"),OFr=o(" (XLNet model)"),VFr=l(),F(n9.$$.fragment),EXe=l(),lc=a("h2"),s9=a("a"),CFe=a("span"),F(D8.$$.fragment),XFr=l(),wFe=a("span"),zFr=o("TFAutoModelForPreTraining"),CXe=l(),or=a("div"),F(G8.$$.fragment),QFr=l(),ic=a("p"),WFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),XU=a("a"),HFr=o("from_pretrained()"),UFr=o(" class method or the "),zU=a("a"),JFr=o("from_config()"),YFr=o(` class
method.`),KFr=l(),O8=a("p"),ZFr=o("This class cannot be instantiated directly using "),AFe=a("code"),eTr=o("__init__()"),oTr=o(" (throws an error)."),rTr=l(),St=a("div"),F(V8.$$.fragment),tTr=l(),LFe=a("p"),aTr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),nTr=l(),dc=a("p"),sTr=o(`Note:
Loading a model from its configuration file does `),yFe=a("strong"),lTr=o("not"),iTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QU=a("a"),dTr=o("from_pretrained()"),cTr=o(" to load the model weights."),fTr=l(),F(l9.$$.fragment),mTr=l(),xr=a("div"),F(X8.$$.fragment),gTr=l(),xFe=a("p"),hTr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),pTr=l(),sn=a("p"),_Tr=o("The model class to instantiate is selected based on the "),$Fe=a("code"),uTr=o("model_type"),bTr=o(` property of the config object (either
passed as an argument or loaded from `),kFe=a("code"),vTr=o("pretrained_model_name_or_path"),FTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),SFe=a("code"),TTr=o("pretrained_model_name_or_path"),MTr=o(":"),ETr=l(),se=a("ul"),i9=a("li"),RFe=a("strong"),CTr=o("albert"),wTr=o(" \u2014 "),WU=a("a"),ATr=o("TFAlbertForPreTraining"),LTr=o(" (ALBERT model)"),yTr=l(),d9=a("li"),PFe=a("strong"),xTr=o("bart"),$Tr=o(" \u2014 "),HU=a("a"),kTr=o("TFBartForConditionalGeneration"),STr=o(" (BART model)"),RTr=l(),c9=a("li"),BFe=a("strong"),PTr=o("bert"),BTr=o(" \u2014 "),UU=a("a"),ITr=o("TFBertForPreTraining"),NTr=o(" (BERT model)"),qTr=l(),f9=a("li"),IFe=a("strong"),jTr=o("camembert"),DTr=o(" \u2014 "),JU=a("a"),GTr=o("TFCamembertForMaskedLM"),OTr=o(" (CamemBERT model)"),VTr=l(),m9=a("li"),NFe=a("strong"),XTr=o("ctrl"),zTr=o(" \u2014 "),YU=a("a"),QTr=o("TFCTRLLMHeadModel"),WTr=o(" (CTRL model)"),HTr=l(),g9=a("li"),qFe=a("strong"),UTr=o("distilbert"),JTr=o(" \u2014 "),KU=a("a"),YTr=o("TFDistilBertForMaskedLM"),KTr=o(" (DistilBERT model)"),ZTr=l(),h9=a("li"),jFe=a("strong"),e7r=o("electra"),o7r=o(" \u2014 "),ZU=a("a"),r7r=o("TFElectraForPreTraining"),t7r=o(" (ELECTRA model)"),a7r=l(),p9=a("li"),DFe=a("strong"),n7r=o("flaubert"),s7r=o(" \u2014 "),eJ=a("a"),l7r=o("TFFlaubertWithLMHeadModel"),i7r=o(" (FlauBERT model)"),d7r=l(),_9=a("li"),GFe=a("strong"),c7r=o("funnel"),f7r=o(" \u2014 "),oJ=a("a"),m7r=o("TFFunnelForPreTraining"),g7r=o(" (Funnel Transformer model)"),h7r=l(),u9=a("li"),OFe=a("strong"),p7r=o("gpt2"),_7r=o(" \u2014 "),rJ=a("a"),u7r=o("TFGPT2LMHeadModel"),b7r=o(" (OpenAI GPT-2 model)"),v7r=l(),b9=a("li"),VFe=a("strong"),F7r=o("layoutlm"),T7r=o(" \u2014 "),tJ=a("a"),M7r=o("TFLayoutLMForMaskedLM"),E7r=o(" (LayoutLM model)"),C7r=l(),v9=a("li"),XFe=a("strong"),w7r=o("lxmert"),A7r=o(" \u2014 "),aJ=a("a"),L7r=o("TFLxmertForPreTraining"),y7r=o(" (LXMERT model)"),x7r=l(),F9=a("li"),zFe=a("strong"),$7r=o("mobilebert"),k7r=o(" \u2014 "),nJ=a("a"),S7r=o("TFMobileBertForPreTraining"),R7r=o(" (MobileBERT model)"),P7r=l(),T9=a("li"),QFe=a("strong"),B7r=o("mpnet"),I7r=o(" \u2014 "),sJ=a("a"),N7r=o("TFMPNetForMaskedLM"),q7r=o(" (MPNet model)"),j7r=l(),M9=a("li"),WFe=a("strong"),D7r=o("openai-gpt"),G7r=o(" \u2014 "),lJ=a("a"),O7r=o("TFOpenAIGPTLMHeadModel"),V7r=o(" (OpenAI GPT model)"),X7r=l(),E9=a("li"),HFe=a("strong"),z7r=o("roberta"),Q7r=o(" \u2014 "),iJ=a("a"),W7r=o("TFRobertaForMaskedLM"),H7r=o(" (RoBERTa model)"),U7r=l(),C9=a("li"),UFe=a("strong"),J7r=o("t5"),Y7r=o(" \u2014 "),dJ=a("a"),K7r=o("TFT5ForConditionalGeneration"),Z7r=o(" (T5 model)"),e9r=l(),w9=a("li"),JFe=a("strong"),o9r=o("tapas"),r9r=o(" \u2014 "),cJ=a("a"),t9r=o("TFTapasForMaskedLM"),a9r=o(" (TAPAS model)"),n9r=l(),A9=a("li"),YFe=a("strong"),s9r=o("transfo-xl"),l9r=o(" \u2014 "),fJ=a("a"),i9r=o("TFTransfoXLLMHeadModel"),d9r=o(" (Transformer-XL model)"),c9r=l(),L9=a("li"),KFe=a("strong"),f9r=o("vit_mae"),m9r=o(" \u2014 "),mJ=a("a"),g9r=o("TFViTMAEForPreTraining"),h9r=o(" (ViTMAE model)"),p9r=l(),y9=a("li"),ZFe=a("strong"),_9r=o("xlm"),u9r=o(" \u2014 "),gJ=a("a"),b9r=o("TFXLMWithLMHeadModel"),v9r=o(" (XLM model)"),F9r=l(),x9=a("li"),eTe=a("strong"),T9r=o("xlm-roberta"),M9r=o(" \u2014 "),hJ=a("a"),E9r=o("TFXLMRobertaForMaskedLM"),C9r=o(" (XLM-RoBERTa model)"),w9r=l(),$9=a("li"),oTe=a("strong"),A9r=o("xlnet"),L9r=o(" \u2014 "),pJ=a("a"),y9r=o("TFXLNetLMHeadModel"),x9r=o(" (XLNet model)"),$9r=l(),F(k9.$$.fragment),wXe=l(),cc=a("h2"),S9=a("a"),rTe=a("span"),F(z8.$$.fragment),k9r=l(),tTe=a("span"),S9r=o("TFAutoModelForCausalLM"),AXe=l(),rr=a("div"),F(Q8.$$.fragment),R9r=l(),fc=a("p"),P9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),_J=a("a"),B9r=o("from_pretrained()"),I9r=o(" class method or the "),uJ=a("a"),N9r=o("from_config()"),q9r=o(` class
method.`),j9r=l(),W8=a("p"),D9r=o("This class cannot be instantiated directly using "),aTe=a("code"),G9r=o("__init__()"),O9r=o(" (throws an error)."),V9r=l(),Rt=a("div"),F(H8.$$.fragment),X9r=l(),nTe=a("p"),z9r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Q9r=l(),mc=a("p"),W9r=o(`Note:
Loading a model from its configuration file does `),sTe=a("strong"),H9r=o("not"),U9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bJ=a("a"),J9r=o("from_pretrained()"),Y9r=o(" to load the model weights."),K9r=l(),F(R9.$$.fragment),Z9r=l(),$r=a("div"),F(U8.$$.fragment),eMr=l(),lTe=a("p"),oMr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),rMr=l(),ln=a("p"),tMr=o("The model class to instantiate is selected based on the "),iTe=a("code"),aMr=o("model_type"),nMr=o(` property of the config object (either
passed as an argument or loaded from `),dTe=a("code"),sMr=o("pretrained_model_name_or_path"),lMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cTe=a("code"),iMr=o("pretrained_model_name_or_path"),dMr=o(":"),cMr=l(),Me=a("ul"),P9=a("li"),fTe=a("strong"),fMr=o("bert"),mMr=o(" \u2014 "),vJ=a("a"),gMr=o("TFBertLMHeadModel"),hMr=o(" (BERT model)"),pMr=l(),B9=a("li"),mTe=a("strong"),_Mr=o("camembert"),uMr=o(" \u2014 "),FJ=a("a"),bMr=o("TFCamembertForCausalLM"),vMr=o(" (CamemBERT model)"),FMr=l(),I9=a("li"),gTe=a("strong"),TMr=o("ctrl"),MMr=o(" \u2014 "),TJ=a("a"),EMr=o("TFCTRLLMHeadModel"),CMr=o(" (CTRL model)"),wMr=l(),N9=a("li"),hTe=a("strong"),AMr=o("gpt2"),LMr=o(" \u2014 "),MJ=a("a"),yMr=o("TFGPT2LMHeadModel"),xMr=o(" (OpenAI GPT-2 model)"),$Mr=l(),q9=a("li"),pTe=a("strong"),kMr=o("gptj"),SMr=o(" \u2014 "),EJ=a("a"),RMr=o("TFGPTJForCausalLM"),PMr=o(" (GPT-J model)"),BMr=l(),j9=a("li"),_Te=a("strong"),IMr=o("openai-gpt"),NMr=o(" \u2014 "),CJ=a("a"),qMr=o("TFOpenAIGPTLMHeadModel"),jMr=o(" (OpenAI GPT model)"),DMr=l(),D9=a("li"),uTe=a("strong"),GMr=o("opt"),OMr=o(" \u2014 "),wJ=a("a"),VMr=o("TFOPTForCausalLM"),XMr=o(" (OPT model)"),zMr=l(),G9=a("li"),bTe=a("strong"),QMr=o("rembert"),WMr=o(" \u2014 "),AJ=a("a"),HMr=o("TFRemBertForCausalLM"),UMr=o(" (RemBERT model)"),JMr=l(),O9=a("li"),vTe=a("strong"),YMr=o("roberta"),KMr=o(" \u2014 "),LJ=a("a"),ZMr=o("TFRobertaForCausalLM"),e4r=o(" (RoBERTa model)"),o4r=l(),V9=a("li"),FTe=a("strong"),r4r=o("roformer"),t4r=o(" \u2014 "),yJ=a("a"),a4r=o("TFRoFormerForCausalLM"),n4r=o(" (RoFormer model)"),s4r=l(),X9=a("li"),TTe=a("strong"),l4r=o("transfo-xl"),i4r=o(" \u2014 "),xJ=a("a"),d4r=o("TFTransfoXLLMHeadModel"),c4r=o(" (Transformer-XL model)"),f4r=l(),z9=a("li"),MTe=a("strong"),m4r=o("xlm"),g4r=o(" \u2014 "),$J=a("a"),h4r=o("TFXLMWithLMHeadModel"),p4r=o(" (XLM model)"),_4r=l(),Q9=a("li"),ETe=a("strong"),u4r=o("xlnet"),b4r=o(" \u2014 "),kJ=a("a"),v4r=o("TFXLNetLMHeadModel"),F4r=o(" (XLNet model)"),T4r=l(),F(W9.$$.fragment),LXe=l(),gc=a("h2"),H9=a("a"),CTe=a("span"),F(J8.$$.fragment),M4r=l(),wTe=a("span"),E4r=o("TFAutoModelForImageClassification"),yXe=l(),tr=a("div"),F(Y8.$$.fragment),C4r=l(),hc=a("p"),w4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),SJ=a("a"),A4r=o("from_pretrained()"),L4r=o(" class method or the "),RJ=a("a"),y4r=o("from_config()"),x4r=o(` class
method.`),$4r=l(),K8=a("p"),k4r=o("This class cannot be instantiated directly using "),ATe=a("code"),S4r=o("__init__()"),R4r=o(" (throws an error)."),P4r=l(),Pt=a("div"),F(Z8.$$.fragment),B4r=l(),LTe=a("p"),I4r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),N4r=l(),pc=a("p"),q4r=o(`Note:
Loading a model from its configuration file does `),yTe=a("strong"),j4r=o("not"),D4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PJ=a("a"),G4r=o("from_pretrained()"),O4r=o(" to load the model weights."),V4r=l(),F(U9.$$.fragment),X4r=l(),kr=a("div"),F(ex.$$.fragment),z4r=l(),xTe=a("p"),Q4r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),W4r=l(),dn=a("p"),H4r=o("The model class to instantiate is selected based on the "),$Te=a("code"),U4r=o("model_type"),J4r=o(` property of the config object (either
passed as an argument or loaded from `),kTe=a("code"),Y4r=o("pretrained_model_name_or_path"),K4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),STe=a("code"),Z4r=o("pretrained_model_name_or_path"),eEr=o(":"),oEr=l(),rt=a("ul"),J9=a("li"),RTe=a("strong"),rEr=o("convnext"),tEr=o(" \u2014 "),BJ=a("a"),aEr=o("TFConvNextForImageClassification"),nEr=o(" (ConvNeXT model)"),sEr=l(),Y9=a("li"),PTe=a("strong"),lEr=o("data2vec-vision"),iEr=o(" \u2014 "),IJ=a("a"),dEr=o("TFData2VecVisionForImageClassification"),cEr=o(" (Data2VecVision model)"),fEr=l(),K9=a("li"),BTe=a("strong"),mEr=o("regnet"),gEr=o(" \u2014 "),NJ=a("a"),hEr=o("TFRegNetForImageClassification"),pEr=o(" (RegNet model)"),_Er=l(),Z9=a("li"),ITe=a("strong"),uEr=o("swin"),bEr=o(" \u2014 "),qJ=a("a"),vEr=o("TFSwinForImageClassification"),FEr=o(" (Swin Transformer model)"),TEr=l(),eM=a("li"),NTe=a("strong"),MEr=o("vit"),EEr=o(" \u2014 "),jJ=a("a"),CEr=o("TFViTForImageClassification"),wEr=o(" (ViT model)"),AEr=l(),F(oM.$$.fragment),xXe=l(),_c=a("h2"),rM=a("a"),qTe=a("span"),F(ox.$$.fragment),LEr=l(),jTe=a("span"),yEr=o("TFAutoModelForMaskedLM"),$Xe=l(),ar=a("div"),F(rx.$$.fragment),xEr=l(),uc=a("p"),$Er=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),DJ=a("a"),kEr=o("from_pretrained()"),SEr=o(" class method or the "),GJ=a("a"),REr=o("from_config()"),PEr=o(` class
method.`),BEr=l(),tx=a("p"),IEr=o("This class cannot be instantiated directly using "),DTe=a("code"),NEr=o("__init__()"),qEr=o(" (throws an error)."),jEr=l(),Bt=a("div"),F(ax.$$.fragment),DEr=l(),GTe=a("p"),GEr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),OEr=l(),bc=a("p"),VEr=o(`Note:
Loading a model from its configuration file does `),OTe=a("strong"),XEr=o("not"),zEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OJ=a("a"),QEr=o("from_pretrained()"),WEr=o(" to load the model weights."),HEr=l(),F(tM.$$.fragment),UEr=l(),Sr=a("div"),F(nx.$$.fragment),JEr=l(),VTe=a("p"),YEr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),KEr=l(),cn=a("p"),ZEr=o("The model class to instantiate is selected based on the "),XTe=a("code"),eCr=o("model_type"),oCr=o(` property of the config object (either
passed as an argument or loaded from `),zTe=a("code"),rCr=o("pretrained_model_name_or_path"),tCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QTe=a("code"),aCr=o("pretrained_model_name_or_path"),nCr=o(":"),sCr=l(),ie=a("ul"),aM=a("li"),WTe=a("strong"),lCr=o("albert"),iCr=o(" \u2014 "),VJ=a("a"),dCr=o("TFAlbertForMaskedLM"),cCr=o(" (ALBERT model)"),fCr=l(),nM=a("li"),HTe=a("strong"),mCr=o("bert"),gCr=o(" \u2014 "),XJ=a("a"),hCr=o("TFBertForMaskedLM"),pCr=o(" (BERT model)"),_Cr=l(),sM=a("li"),UTe=a("strong"),uCr=o("camembert"),bCr=o(" \u2014 "),zJ=a("a"),vCr=o("TFCamembertForMaskedLM"),FCr=o(" (CamemBERT model)"),TCr=l(),lM=a("li"),JTe=a("strong"),MCr=o("convbert"),ECr=o(" \u2014 "),QJ=a("a"),CCr=o("TFConvBertForMaskedLM"),wCr=o(" (ConvBERT model)"),ACr=l(),iM=a("li"),YTe=a("strong"),LCr=o("deberta"),yCr=o(" \u2014 "),WJ=a("a"),xCr=o("TFDebertaForMaskedLM"),$Cr=o(" (DeBERTa model)"),kCr=l(),dM=a("li"),KTe=a("strong"),SCr=o("deberta-v2"),RCr=o(" \u2014 "),HJ=a("a"),PCr=o("TFDebertaV2ForMaskedLM"),BCr=o(" (DeBERTa-v2 model)"),ICr=l(),cM=a("li"),ZTe=a("strong"),NCr=o("distilbert"),qCr=o(" \u2014 "),UJ=a("a"),jCr=o("TFDistilBertForMaskedLM"),DCr=o(" (DistilBERT model)"),GCr=l(),fM=a("li"),e7e=a("strong"),OCr=o("electra"),VCr=o(" \u2014 "),JJ=a("a"),XCr=o("TFElectraForMaskedLM"),zCr=o(" (ELECTRA model)"),QCr=l(),mM=a("li"),o7e=a("strong"),WCr=o("flaubert"),HCr=o(" \u2014 "),YJ=a("a"),UCr=o("TFFlaubertWithLMHeadModel"),JCr=o(" (FlauBERT model)"),YCr=l(),gM=a("li"),r7e=a("strong"),KCr=o("funnel"),ZCr=o(" \u2014 "),KJ=a("a"),e0r=o("TFFunnelForMaskedLM"),o0r=o(" (Funnel Transformer model)"),r0r=l(),hM=a("li"),t7e=a("strong"),t0r=o("layoutlm"),a0r=o(" \u2014 "),ZJ=a("a"),n0r=o("TFLayoutLMForMaskedLM"),s0r=o(" (LayoutLM model)"),l0r=l(),pM=a("li"),a7e=a("strong"),i0r=o("longformer"),d0r=o(" \u2014 "),eY=a("a"),c0r=o("TFLongformerForMaskedLM"),f0r=o(" (Longformer model)"),m0r=l(),_M=a("li"),n7e=a("strong"),g0r=o("mobilebert"),h0r=o(" \u2014 "),oY=a("a"),p0r=o("TFMobileBertForMaskedLM"),_0r=o(" (MobileBERT model)"),u0r=l(),uM=a("li"),s7e=a("strong"),b0r=o("mpnet"),v0r=o(" \u2014 "),rY=a("a"),F0r=o("TFMPNetForMaskedLM"),T0r=o(" (MPNet model)"),M0r=l(),bM=a("li"),l7e=a("strong"),E0r=o("rembert"),C0r=o(" \u2014 "),tY=a("a"),w0r=o("TFRemBertForMaskedLM"),A0r=o(" (RemBERT model)"),L0r=l(),vM=a("li"),i7e=a("strong"),y0r=o("roberta"),x0r=o(" \u2014 "),aY=a("a"),$0r=o("TFRobertaForMaskedLM"),k0r=o(" (RoBERTa model)"),S0r=l(),FM=a("li"),d7e=a("strong"),R0r=o("roformer"),P0r=o(" \u2014 "),nY=a("a"),B0r=o("TFRoFormerForMaskedLM"),I0r=o(" (RoFormer model)"),N0r=l(),TM=a("li"),c7e=a("strong"),q0r=o("tapas"),j0r=o(" \u2014 "),sY=a("a"),D0r=o("TFTapasForMaskedLM"),G0r=o(" (TAPAS model)"),O0r=l(),MM=a("li"),f7e=a("strong"),V0r=o("xlm"),X0r=o(" \u2014 "),lY=a("a"),z0r=o("TFXLMWithLMHeadModel"),Q0r=o(" (XLM model)"),W0r=l(),EM=a("li"),m7e=a("strong"),H0r=o("xlm-roberta"),U0r=o(" \u2014 "),iY=a("a"),J0r=o("TFXLMRobertaForMaskedLM"),Y0r=o(" (XLM-RoBERTa model)"),K0r=l(),F(CM.$$.fragment),kXe=l(),vc=a("h2"),wM=a("a"),g7e=a("span"),F(sx.$$.fragment),Z0r=l(),h7e=a("span"),ewr=o("TFAutoModelForSeq2SeqLM"),SXe=l(),nr=a("div"),F(lx.$$.fragment),owr=l(),Fc=a("p"),rwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),dY=a("a"),twr=o("from_pretrained()"),awr=o(" class method or the "),cY=a("a"),nwr=o("from_config()"),swr=o(` class
method.`),lwr=l(),ix=a("p"),iwr=o("This class cannot be instantiated directly using "),p7e=a("code"),dwr=o("__init__()"),cwr=o(" (throws an error)."),fwr=l(),It=a("div"),F(dx.$$.fragment),mwr=l(),_7e=a("p"),gwr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),hwr=l(),Tc=a("p"),pwr=o(`Note:
Loading a model from its configuration file does `),u7e=a("strong"),_wr=o("not"),uwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fY=a("a"),bwr=o("from_pretrained()"),vwr=o(" to load the model weights."),Fwr=l(),F(AM.$$.fragment),Twr=l(),Rr=a("div"),F(cx.$$.fragment),Mwr=l(),b7e=a("p"),Ewr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Cwr=l(),fn=a("p"),wwr=o("The model class to instantiate is selected based on the "),v7e=a("code"),Awr=o("model_type"),Lwr=o(` property of the config object (either
passed as an argument or loaded from `),F7e=a("code"),ywr=o("pretrained_model_name_or_path"),xwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T7e=a("code"),$wr=o("pretrained_model_name_or_path"),kwr=o(":"),Swr=l(),ye=a("ul"),LM=a("li"),M7e=a("strong"),Rwr=o("bart"),Pwr=o(" \u2014 "),mY=a("a"),Bwr=o("TFBartForConditionalGeneration"),Iwr=o(" (BART model)"),Nwr=l(),yM=a("li"),E7e=a("strong"),qwr=o("blenderbot"),jwr=o(" \u2014 "),gY=a("a"),Dwr=o("TFBlenderbotForConditionalGeneration"),Gwr=o(" (Blenderbot model)"),Owr=l(),xM=a("li"),C7e=a("strong"),Vwr=o("blenderbot-small"),Xwr=o(" \u2014 "),hY=a("a"),zwr=o("TFBlenderbotSmallForConditionalGeneration"),Qwr=o(" (BlenderbotSmall model)"),Wwr=l(),$M=a("li"),w7e=a("strong"),Hwr=o("encoder-decoder"),Uwr=o(" \u2014 "),pY=a("a"),Jwr=o("TFEncoderDecoderModel"),Ywr=o(" (Encoder decoder model)"),Kwr=l(),kM=a("li"),A7e=a("strong"),Zwr=o("led"),eAr=o(" \u2014 "),_Y=a("a"),oAr=o("TFLEDForConditionalGeneration"),rAr=o(" (LED model)"),tAr=l(),SM=a("li"),L7e=a("strong"),aAr=o("marian"),nAr=o(" \u2014 "),uY=a("a"),sAr=o("TFMarianMTModel"),lAr=o(" (Marian model)"),iAr=l(),RM=a("li"),y7e=a("strong"),dAr=o("mbart"),cAr=o(" \u2014 "),bY=a("a"),fAr=o("TFMBartForConditionalGeneration"),mAr=o(" (mBART model)"),gAr=l(),PM=a("li"),x7e=a("strong"),hAr=o("mt5"),pAr=o(" \u2014 "),vY=a("a"),_Ar=o("TFMT5ForConditionalGeneration"),uAr=o(" (MT5 model)"),bAr=l(),BM=a("li"),$7e=a("strong"),vAr=o("pegasus"),FAr=o(" \u2014 "),FY=a("a"),TAr=o("TFPegasusForConditionalGeneration"),MAr=o(" (Pegasus model)"),EAr=l(),IM=a("li"),k7e=a("strong"),CAr=o("t5"),wAr=o(" \u2014 "),TY=a("a"),AAr=o("TFT5ForConditionalGeneration"),LAr=o(" (T5 model)"),yAr=l(),F(NM.$$.fragment),RXe=l(),Mc=a("h2"),qM=a("a"),S7e=a("span"),F(fx.$$.fragment),xAr=l(),R7e=a("span"),$Ar=o("TFAutoModelForSequenceClassification"),PXe=l(),sr=a("div"),F(mx.$$.fragment),kAr=l(),Ec=a("p"),SAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),MY=a("a"),RAr=o("from_pretrained()"),PAr=o(" class method or the "),EY=a("a"),BAr=o("from_config()"),IAr=o(` class
method.`),NAr=l(),gx=a("p"),qAr=o("This class cannot be instantiated directly using "),P7e=a("code"),jAr=o("__init__()"),DAr=o(" (throws an error)."),GAr=l(),Nt=a("div"),F(hx.$$.fragment),OAr=l(),B7e=a("p"),VAr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),XAr=l(),Cc=a("p"),zAr=o(`Note:
Loading a model from its configuration file does `),I7e=a("strong"),QAr=o("not"),WAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CY=a("a"),HAr=o("from_pretrained()"),UAr=o(" to load the model weights."),JAr=l(),F(jM.$$.fragment),YAr=l(),Pr=a("div"),F(px.$$.fragment),KAr=l(),N7e=a("p"),ZAr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),e6r=l(),mn=a("p"),o6r=o("The model class to instantiate is selected based on the "),q7e=a("code"),r6r=o("model_type"),t6r=o(` property of the config object (either
passed as an argument or loaded from `),j7e=a("code"),a6r=o("pretrained_model_name_or_path"),n6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D7e=a("code"),s6r=o("pretrained_model_name_or_path"),l6r=o(":"),i6r=l(),te=a("ul"),DM=a("li"),G7e=a("strong"),d6r=o("albert"),c6r=o(" \u2014 "),wY=a("a"),f6r=o("TFAlbertForSequenceClassification"),m6r=o(" (ALBERT model)"),g6r=l(),GM=a("li"),O7e=a("strong"),h6r=o("bert"),p6r=o(" \u2014 "),AY=a("a"),_6r=o("TFBertForSequenceClassification"),u6r=o(" (BERT model)"),b6r=l(),OM=a("li"),V7e=a("strong"),v6r=o("camembert"),F6r=o(" \u2014 "),LY=a("a"),T6r=o("TFCamembertForSequenceClassification"),M6r=o(" (CamemBERT model)"),E6r=l(),VM=a("li"),X7e=a("strong"),C6r=o("convbert"),w6r=o(" \u2014 "),yY=a("a"),A6r=o("TFConvBertForSequenceClassification"),L6r=o(" (ConvBERT model)"),y6r=l(),XM=a("li"),z7e=a("strong"),x6r=o("ctrl"),$6r=o(" \u2014 "),xY=a("a"),k6r=o("TFCTRLForSequenceClassification"),S6r=o(" (CTRL model)"),R6r=l(),zM=a("li"),Q7e=a("strong"),P6r=o("deberta"),B6r=o(" \u2014 "),$Y=a("a"),I6r=o("TFDebertaForSequenceClassification"),N6r=o(" (DeBERTa model)"),q6r=l(),QM=a("li"),W7e=a("strong"),j6r=o("deberta-v2"),D6r=o(" \u2014 "),kY=a("a"),G6r=o("TFDebertaV2ForSequenceClassification"),O6r=o(" (DeBERTa-v2 model)"),V6r=l(),WM=a("li"),H7e=a("strong"),X6r=o("distilbert"),z6r=o(" \u2014 "),SY=a("a"),Q6r=o("TFDistilBertForSequenceClassification"),W6r=o(" (DistilBERT model)"),H6r=l(),HM=a("li"),U7e=a("strong"),U6r=o("electra"),J6r=o(" \u2014 "),RY=a("a"),Y6r=o("TFElectraForSequenceClassification"),K6r=o(" (ELECTRA model)"),Z6r=l(),UM=a("li"),J7e=a("strong"),eLr=o("flaubert"),oLr=o(" \u2014 "),PY=a("a"),rLr=o("TFFlaubertForSequenceClassification"),tLr=o(" (FlauBERT model)"),aLr=l(),JM=a("li"),Y7e=a("strong"),nLr=o("funnel"),sLr=o(" \u2014 "),BY=a("a"),lLr=o("TFFunnelForSequenceClassification"),iLr=o(" (Funnel Transformer model)"),dLr=l(),YM=a("li"),K7e=a("strong"),cLr=o("gpt2"),fLr=o(" \u2014 "),IY=a("a"),mLr=o("TFGPT2ForSequenceClassification"),gLr=o(" (OpenAI GPT-2 model)"),hLr=l(),KM=a("li"),Z7e=a("strong"),pLr=o("gptj"),_Lr=o(" \u2014 "),NY=a("a"),uLr=o("TFGPTJForSequenceClassification"),bLr=o(" (GPT-J model)"),vLr=l(),ZM=a("li"),e9e=a("strong"),FLr=o("layoutlm"),TLr=o(" \u2014 "),qY=a("a"),MLr=o("TFLayoutLMForSequenceClassification"),ELr=o(" (LayoutLM model)"),CLr=l(),e4=a("li"),o9e=a("strong"),wLr=o("longformer"),ALr=o(" \u2014 "),jY=a("a"),LLr=o("TFLongformerForSequenceClassification"),yLr=o(" (Longformer model)"),xLr=l(),o4=a("li"),r9e=a("strong"),$Lr=o("mobilebert"),kLr=o(" \u2014 "),DY=a("a"),SLr=o("TFMobileBertForSequenceClassification"),RLr=o(" (MobileBERT model)"),PLr=l(),r4=a("li"),t9e=a("strong"),BLr=o("mpnet"),ILr=o(" \u2014 "),GY=a("a"),NLr=o("TFMPNetForSequenceClassification"),qLr=o(" (MPNet model)"),jLr=l(),t4=a("li"),a9e=a("strong"),DLr=o("openai-gpt"),GLr=o(" \u2014 "),OY=a("a"),OLr=o("TFOpenAIGPTForSequenceClassification"),VLr=o(" (OpenAI GPT model)"),XLr=l(),a4=a("li"),n9e=a("strong"),zLr=o("rembert"),QLr=o(" \u2014 "),VY=a("a"),WLr=o("TFRemBertForSequenceClassification"),HLr=o(" (RemBERT model)"),ULr=l(),n4=a("li"),s9e=a("strong"),JLr=o("roberta"),YLr=o(" \u2014 "),XY=a("a"),KLr=o("TFRobertaForSequenceClassification"),ZLr=o(" (RoBERTa model)"),eyr=l(),s4=a("li"),l9e=a("strong"),oyr=o("roformer"),ryr=o(" \u2014 "),zY=a("a"),tyr=o("TFRoFormerForSequenceClassification"),ayr=o(" (RoFormer model)"),nyr=l(),l4=a("li"),i9e=a("strong"),syr=o("tapas"),lyr=o(" \u2014 "),QY=a("a"),iyr=o("TFTapasForSequenceClassification"),dyr=o(" (TAPAS model)"),cyr=l(),i4=a("li"),d9e=a("strong"),fyr=o("transfo-xl"),myr=o(" \u2014 "),WY=a("a"),gyr=o("TFTransfoXLForSequenceClassification"),hyr=o(" (Transformer-XL model)"),pyr=l(),d4=a("li"),c9e=a("strong"),_yr=o("xlm"),uyr=o(" \u2014 "),HY=a("a"),byr=o("TFXLMForSequenceClassification"),vyr=o(" (XLM model)"),Fyr=l(),c4=a("li"),f9e=a("strong"),Tyr=o("xlm-roberta"),Myr=o(" \u2014 "),UY=a("a"),Eyr=o("TFXLMRobertaForSequenceClassification"),Cyr=o(" (XLM-RoBERTa model)"),wyr=l(),f4=a("li"),m9e=a("strong"),Ayr=o("xlnet"),Lyr=o(" \u2014 "),JY=a("a"),yyr=o("TFXLNetForSequenceClassification"),xyr=o(" (XLNet model)"),$yr=l(),F(m4.$$.fragment),BXe=l(),wc=a("h2"),g4=a("a"),g9e=a("span"),F(_x.$$.fragment),kyr=l(),h9e=a("span"),Syr=o("TFAutoModelForMultipleChoice"),IXe=l(),lr=a("div"),F(ux.$$.fragment),Ryr=l(),Ac=a("p"),Pyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),YY=a("a"),Byr=o("from_pretrained()"),Iyr=o(" class method or the "),KY=a("a"),Nyr=o("from_config()"),qyr=o(` class
method.`),jyr=l(),bx=a("p"),Dyr=o("This class cannot be instantiated directly using "),p9e=a("code"),Gyr=o("__init__()"),Oyr=o(" (throws an error)."),Vyr=l(),qt=a("div"),F(vx.$$.fragment),Xyr=l(),_9e=a("p"),zyr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Qyr=l(),Lc=a("p"),Wyr=o(`Note:
Loading a model from its configuration file does `),u9e=a("strong"),Hyr=o("not"),Uyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZY=a("a"),Jyr=o("from_pretrained()"),Yyr=o(" to load the model weights."),Kyr=l(),F(h4.$$.fragment),Zyr=l(),Br=a("div"),F(Fx.$$.fragment),e8r=l(),b9e=a("p"),o8r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),r8r=l(),gn=a("p"),t8r=o("The model class to instantiate is selected based on the "),v9e=a("code"),a8r=o("model_type"),n8r=o(` property of the config object (either
passed as an argument or loaded from `),F9e=a("code"),s8r=o("pretrained_model_name_or_path"),l8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T9e=a("code"),i8r=o("pretrained_model_name_or_path"),d8r=o(":"),c8r=l(),_e=a("ul"),p4=a("li"),M9e=a("strong"),f8r=o("albert"),m8r=o(" \u2014 "),eK=a("a"),g8r=o("TFAlbertForMultipleChoice"),h8r=o(" (ALBERT model)"),p8r=l(),_4=a("li"),E9e=a("strong"),_8r=o("bert"),u8r=o(" \u2014 "),oK=a("a"),b8r=o("TFBertForMultipleChoice"),v8r=o(" (BERT model)"),F8r=l(),u4=a("li"),C9e=a("strong"),T8r=o("camembert"),M8r=o(" \u2014 "),rK=a("a"),E8r=o("TFCamembertForMultipleChoice"),C8r=o(" (CamemBERT model)"),w8r=l(),b4=a("li"),w9e=a("strong"),A8r=o("convbert"),L8r=o(" \u2014 "),tK=a("a"),y8r=o("TFConvBertForMultipleChoice"),x8r=o(" (ConvBERT model)"),$8r=l(),v4=a("li"),A9e=a("strong"),k8r=o("distilbert"),S8r=o(" \u2014 "),aK=a("a"),R8r=o("TFDistilBertForMultipleChoice"),P8r=o(" (DistilBERT model)"),B8r=l(),F4=a("li"),L9e=a("strong"),I8r=o("electra"),N8r=o(" \u2014 "),nK=a("a"),q8r=o("TFElectraForMultipleChoice"),j8r=o(" (ELECTRA model)"),D8r=l(),T4=a("li"),y9e=a("strong"),G8r=o("flaubert"),O8r=o(" \u2014 "),sK=a("a"),V8r=o("TFFlaubertForMultipleChoice"),X8r=o(" (FlauBERT model)"),z8r=l(),M4=a("li"),x9e=a("strong"),Q8r=o("funnel"),W8r=o(" \u2014 "),lK=a("a"),H8r=o("TFFunnelForMultipleChoice"),U8r=o(" (Funnel Transformer model)"),J8r=l(),E4=a("li"),$9e=a("strong"),Y8r=o("longformer"),K8r=o(" \u2014 "),iK=a("a"),Z8r=o("TFLongformerForMultipleChoice"),exr=o(" (Longformer model)"),oxr=l(),C4=a("li"),k9e=a("strong"),rxr=o("mobilebert"),txr=o(" \u2014 "),dK=a("a"),axr=o("TFMobileBertForMultipleChoice"),nxr=o(" (MobileBERT model)"),sxr=l(),w4=a("li"),S9e=a("strong"),lxr=o("mpnet"),ixr=o(" \u2014 "),cK=a("a"),dxr=o("TFMPNetForMultipleChoice"),cxr=o(" (MPNet model)"),fxr=l(),A4=a("li"),R9e=a("strong"),mxr=o("rembert"),gxr=o(" \u2014 "),fK=a("a"),hxr=o("TFRemBertForMultipleChoice"),pxr=o(" (RemBERT model)"),_xr=l(),L4=a("li"),P9e=a("strong"),uxr=o("roberta"),bxr=o(" \u2014 "),mK=a("a"),vxr=o("TFRobertaForMultipleChoice"),Fxr=o(" (RoBERTa model)"),Txr=l(),y4=a("li"),B9e=a("strong"),Mxr=o("roformer"),Exr=o(" \u2014 "),gK=a("a"),Cxr=o("TFRoFormerForMultipleChoice"),wxr=o(" (RoFormer model)"),Axr=l(),x4=a("li"),I9e=a("strong"),Lxr=o("xlm"),yxr=o(" \u2014 "),hK=a("a"),xxr=o("TFXLMForMultipleChoice"),$xr=o(" (XLM model)"),kxr=l(),$4=a("li"),N9e=a("strong"),Sxr=o("xlm-roberta"),Rxr=o(" \u2014 "),pK=a("a"),Pxr=o("TFXLMRobertaForMultipleChoice"),Bxr=o(" (XLM-RoBERTa model)"),Ixr=l(),k4=a("li"),q9e=a("strong"),Nxr=o("xlnet"),qxr=o(" \u2014 "),_K=a("a"),jxr=o("TFXLNetForMultipleChoice"),Dxr=o(" (XLNet model)"),Gxr=l(),F(S4.$$.fragment),NXe=l(),yc=a("h2"),R4=a("a"),j9e=a("span"),F(Tx.$$.fragment),Oxr=l(),D9e=a("span"),Vxr=o("TFAutoModelForNextSentencePrediction"),qXe=l(),ir=a("div"),F(Mx.$$.fragment),Xxr=l(),xc=a("p"),zxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),uK=a("a"),Qxr=o("from_pretrained()"),Wxr=o(" class method or the "),bK=a("a"),Hxr=o("from_config()"),Uxr=o(` class
method.`),Jxr=l(),Ex=a("p"),Yxr=o("This class cannot be instantiated directly using "),G9e=a("code"),Kxr=o("__init__()"),Zxr=o(" (throws an error)."),e$r=l(),jt=a("div"),F(Cx.$$.fragment),o$r=l(),O9e=a("p"),r$r=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),t$r=l(),$c=a("p"),a$r=o(`Note:
Loading a model from its configuration file does `),V9e=a("strong"),n$r=o("not"),s$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vK=a("a"),l$r=o("from_pretrained()"),i$r=o(" to load the model weights."),d$r=l(),F(P4.$$.fragment),c$r=l(),Ir=a("div"),F(wx.$$.fragment),f$r=l(),X9e=a("p"),m$r=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),g$r=l(),hn=a("p"),h$r=o("The model class to instantiate is selected based on the "),z9e=a("code"),p$r=o("model_type"),_$r=o(` property of the config object (either
passed as an argument or loaded from `),Q9e=a("code"),u$r=o("pretrained_model_name_or_path"),b$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W9e=a("code"),v$r=o("pretrained_model_name_or_path"),F$r=o(":"),T$r=l(),Ax=a("ul"),B4=a("li"),H9e=a("strong"),M$r=o("bert"),E$r=o(" \u2014 "),FK=a("a"),C$r=o("TFBertForNextSentencePrediction"),w$r=o(" (BERT model)"),A$r=l(),I4=a("li"),U9e=a("strong"),L$r=o("mobilebert"),y$r=o(" \u2014 "),TK=a("a"),x$r=o("TFMobileBertForNextSentencePrediction"),$$r=o(" (MobileBERT model)"),k$r=l(),F(N4.$$.fragment),jXe=l(),kc=a("h2"),q4=a("a"),J9e=a("span"),F(Lx.$$.fragment),S$r=l(),Y9e=a("span"),R$r=o("TFAutoModelForTableQuestionAnswering"),DXe=l(),dr=a("div"),F(yx.$$.fragment),P$r=l(),Sc=a("p"),B$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),MK=a("a"),I$r=o("from_pretrained()"),N$r=o(" class method or the "),EK=a("a"),q$r=o("from_config()"),j$r=o(` class
method.`),D$r=l(),xx=a("p"),G$r=o("This class cannot be instantiated directly using "),K9e=a("code"),O$r=o("__init__()"),V$r=o(" (throws an error)."),X$r=l(),Dt=a("div"),F($x.$$.fragment),z$r=l(),Z9e=a("p"),Q$r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),W$r=l(),Rc=a("p"),H$r=o(`Note:
Loading a model from its configuration file does `),eMe=a("strong"),U$r=o("not"),J$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CK=a("a"),Y$r=o("from_pretrained()"),K$r=o(" to load the model weights."),Z$r=l(),F(j4.$$.fragment),ekr=l(),Nr=a("div"),F(kx.$$.fragment),okr=l(),oMe=a("p"),rkr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),tkr=l(),pn=a("p"),akr=o("The model class to instantiate is selected based on the "),rMe=a("code"),nkr=o("model_type"),skr=o(` property of the config object (either
passed as an argument or loaded from `),tMe=a("code"),lkr=o("pretrained_model_name_or_path"),ikr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aMe=a("code"),dkr=o("pretrained_model_name_or_path"),ckr=o(":"),fkr=l(),nMe=a("ul"),D4=a("li"),sMe=a("strong"),mkr=o("tapas"),gkr=o(" \u2014 "),wK=a("a"),hkr=o("TFTapasForQuestionAnswering"),pkr=o(" (TAPAS model)"),_kr=l(),F(G4.$$.fragment),GXe=l(),Pc=a("h2"),O4=a("a"),lMe=a("span"),F(Sx.$$.fragment),ukr=l(),iMe=a("span"),bkr=o("TFAutoModelForTokenClassification"),OXe=l(),cr=a("div"),F(Rx.$$.fragment),vkr=l(),Bc=a("p"),Fkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),AK=a("a"),Tkr=o("from_pretrained()"),Mkr=o(" class method or the "),LK=a("a"),Ekr=o("from_config()"),Ckr=o(` class
method.`),wkr=l(),Px=a("p"),Akr=o("This class cannot be instantiated directly using "),dMe=a("code"),Lkr=o("__init__()"),ykr=o(" (throws an error)."),xkr=l(),Gt=a("div"),F(Bx.$$.fragment),$kr=l(),cMe=a("p"),kkr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Skr=l(),Ic=a("p"),Rkr=o(`Note:
Loading a model from its configuration file does `),fMe=a("strong"),Pkr=o("not"),Bkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yK=a("a"),Ikr=o("from_pretrained()"),Nkr=o(" to load the model weights."),qkr=l(),F(V4.$$.fragment),jkr=l(),qr=a("div"),F(Ix.$$.fragment),Dkr=l(),mMe=a("p"),Gkr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Okr=l(),_n=a("p"),Vkr=o("The model class to instantiate is selected based on the "),gMe=a("code"),Xkr=o("model_type"),zkr=o(` property of the config object (either
passed as an argument or loaded from `),hMe=a("code"),Qkr=o("pretrained_model_name_or_path"),Wkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pMe=a("code"),Hkr=o("pretrained_model_name_or_path"),Ukr=o(":"),Jkr=l(),de=a("ul"),X4=a("li"),_Me=a("strong"),Ykr=o("albert"),Kkr=o(" \u2014 "),xK=a("a"),Zkr=o("TFAlbertForTokenClassification"),eSr=o(" (ALBERT model)"),oSr=l(),z4=a("li"),uMe=a("strong"),rSr=o("bert"),tSr=o(" \u2014 "),$K=a("a"),aSr=o("TFBertForTokenClassification"),nSr=o(" (BERT model)"),sSr=l(),Q4=a("li"),bMe=a("strong"),lSr=o("camembert"),iSr=o(" \u2014 "),kK=a("a"),dSr=o("TFCamembertForTokenClassification"),cSr=o(" (CamemBERT model)"),fSr=l(),W4=a("li"),vMe=a("strong"),mSr=o("convbert"),gSr=o(" \u2014 "),SK=a("a"),hSr=o("TFConvBertForTokenClassification"),pSr=o(" (ConvBERT model)"),_Sr=l(),H4=a("li"),FMe=a("strong"),uSr=o("deberta"),bSr=o(" \u2014 "),RK=a("a"),vSr=o("TFDebertaForTokenClassification"),FSr=o(" (DeBERTa model)"),TSr=l(),U4=a("li"),TMe=a("strong"),MSr=o("deberta-v2"),ESr=o(" \u2014 "),PK=a("a"),CSr=o("TFDebertaV2ForTokenClassification"),wSr=o(" (DeBERTa-v2 model)"),ASr=l(),J4=a("li"),MMe=a("strong"),LSr=o("distilbert"),ySr=o(" \u2014 "),BK=a("a"),xSr=o("TFDistilBertForTokenClassification"),$Sr=o(" (DistilBERT model)"),kSr=l(),Y4=a("li"),EMe=a("strong"),SSr=o("electra"),RSr=o(" \u2014 "),IK=a("a"),PSr=o("TFElectraForTokenClassification"),BSr=o(" (ELECTRA model)"),ISr=l(),K4=a("li"),CMe=a("strong"),NSr=o("flaubert"),qSr=o(" \u2014 "),NK=a("a"),jSr=o("TFFlaubertForTokenClassification"),DSr=o(" (FlauBERT model)"),GSr=l(),Z4=a("li"),wMe=a("strong"),OSr=o("funnel"),VSr=o(" \u2014 "),qK=a("a"),XSr=o("TFFunnelForTokenClassification"),zSr=o(" (Funnel Transformer model)"),QSr=l(),eE=a("li"),AMe=a("strong"),WSr=o("layoutlm"),HSr=o(" \u2014 "),jK=a("a"),USr=o("TFLayoutLMForTokenClassification"),JSr=o(" (LayoutLM model)"),YSr=l(),oE=a("li"),LMe=a("strong"),KSr=o("longformer"),ZSr=o(" \u2014 "),DK=a("a"),eRr=o("TFLongformerForTokenClassification"),oRr=o(" (Longformer model)"),rRr=l(),rE=a("li"),yMe=a("strong"),tRr=o("mobilebert"),aRr=o(" \u2014 "),GK=a("a"),nRr=o("TFMobileBertForTokenClassification"),sRr=o(" (MobileBERT model)"),lRr=l(),tE=a("li"),xMe=a("strong"),iRr=o("mpnet"),dRr=o(" \u2014 "),OK=a("a"),cRr=o("TFMPNetForTokenClassification"),fRr=o(" (MPNet model)"),mRr=l(),aE=a("li"),$Me=a("strong"),gRr=o("rembert"),hRr=o(" \u2014 "),VK=a("a"),pRr=o("TFRemBertForTokenClassification"),_Rr=o(" (RemBERT model)"),uRr=l(),nE=a("li"),kMe=a("strong"),bRr=o("roberta"),vRr=o(" \u2014 "),XK=a("a"),FRr=o("TFRobertaForTokenClassification"),TRr=o(" (RoBERTa model)"),MRr=l(),sE=a("li"),SMe=a("strong"),ERr=o("roformer"),CRr=o(" \u2014 "),zK=a("a"),wRr=o("TFRoFormerForTokenClassification"),ARr=o(" (RoFormer model)"),LRr=l(),lE=a("li"),RMe=a("strong"),yRr=o("xlm"),xRr=o(" \u2014 "),QK=a("a"),$Rr=o("TFXLMForTokenClassification"),kRr=o(" (XLM model)"),SRr=l(),iE=a("li"),PMe=a("strong"),RRr=o("xlm-roberta"),PRr=o(" \u2014 "),WK=a("a"),BRr=o("TFXLMRobertaForTokenClassification"),IRr=o(" (XLM-RoBERTa model)"),NRr=l(),dE=a("li"),BMe=a("strong"),qRr=o("xlnet"),jRr=o(" \u2014 "),HK=a("a"),DRr=o("TFXLNetForTokenClassification"),GRr=o(" (XLNet model)"),ORr=l(),F(cE.$$.fragment),VXe=l(),Nc=a("h2"),fE=a("a"),IMe=a("span"),F(Nx.$$.fragment),VRr=l(),NMe=a("span"),XRr=o("TFAutoModelForQuestionAnswering"),XXe=l(),fr=a("div"),F(qx.$$.fragment),zRr=l(),qc=a("p"),QRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),UK=a("a"),WRr=o("from_pretrained()"),HRr=o(" class method or the "),JK=a("a"),URr=o("from_config()"),JRr=o(` class
method.`),YRr=l(),jx=a("p"),KRr=o("This class cannot be instantiated directly using "),qMe=a("code"),ZRr=o("__init__()"),ePr=o(" (throws an error)."),oPr=l(),Ot=a("div"),F(Dx.$$.fragment),rPr=l(),jMe=a("p"),tPr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),aPr=l(),jc=a("p"),nPr=o(`Note:
Loading a model from its configuration file does `),DMe=a("strong"),sPr=o("not"),lPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YK=a("a"),iPr=o("from_pretrained()"),dPr=o(" to load the model weights."),cPr=l(),F(mE.$$.fragment),fPr=l(),jr=a("div"),F(Gx.$$.fragment),mPr=l(),GMe=a("p"),gPr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),hPr=l(),un=a("p"),pPr=o("The model class to instantiate is selected based on the "),OMe=a("code"),_Pr=o("model_type"),uPr=o(` property of the config object (either
passed as an argument or loaded from `),VMe=a("code"),bPr=o("pretrained_model_name_or_path"),vPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XMe=a("code"),FPr=o("pretrained_model_name_or_path"),TPr=o(":"),MPr=l(),ce=a("ul"),gE=a("li"),zMe=a("strong"),EPr=o("albert"),CPr=o(" \u2014 "),KK=a("a"),wPr=o("TFAlbertForQuestionAnswering"),APr=o(" (ALBERT model)"),LPr=l(),hE=a("li"),QMe=a("strong"),yPr=o("bert"),xPr=o(" \u2014 "),ZK=a("a"),$Pr=o("TFBertForQuestionAnswering"),kPr=o(" (BERT model)"),SPr=l(),pE=a("li"),WMe=a("strong"),RPr=o("camembert"),PPr=o(" \u2014 "),eZ=a("a"),BPr=o("TFCamembertForQuestionAnswering"),IPr=o(" (CamemBERT model)"),NPr=l(),_E=a("li"),HMe=a("strong"),qPr=o("convbert"),jPr=o(" \u2014 "),oZ=a("a"),DPr=o("TFConvBertForQuestionAnswering"),GPr=o(" (ConvBERT model)"),OPr=l(),uE=a("li"),UMe=a("strong"),VPr=o("deberta"),XPr=o(" \u2014 "),rZ=a("a"),zPr=o("TFDebertaForQuestionAnswering"),QPr=o(" (DeBERTa model)"),WPr=l(),bE=a("li"),JMe=a("strong"),HPr=o("deberta-v2"),UPr=o(" \u2014 "),tZ=a("a"),JPr=o("TFDebertaV2ForQuestionAnswering"),YPr=o(" (DeBERTa-v2 model)"),KPr=l(),vE=a("li"),YMe=a("strong"),ZPr=o("distilbert"),eBr=o(" \u2014 "),aZ=a("a"),oBr=o("TFDistilBertForQuestionAnswering"),rBr=o(" (DistilBERT model)"),tBr=l(),FE=a("li"),KMe=a("strong"),aBr=o("electra"),nBr=o(" \u2014 "),nZ=a("a"),sBr=o("TFElectraForQuestionAnswering"),lBr=o(" (ELECTRA model)"),iBr=l(),TE=a("li"),ZMe=a("strong"),dBr=o("flaubert"),cBr=o(" \u2014 "),sZ=a("a"),fBr=o("TFFlaubertForQuestionAnsweringSimple"),mBr=o(" (FlauBERT model)"),gBr=l(),ME=a("li"),e4e=a("strong"),hBr=o("funnel"),pBr=o(" \u2014 "),lZ=a("a"),_Br=o("TFFunnelForQuestionAnswering"),uBr=o(" (Funnel Transformer model)"),bBr=l(),EE=a("li"),o4e=a("strong"),vBr=o("gptj"),FBr=o(" \u2014 "),iZ=a("a"),TBr=o("TFGPTJForQuestionAnswering"),MBr=o(" (GPT-J model)"),EBr=l(),CE=a("li"),r4e=a("strong"),CBr=o("longformer"),wBr=o(" \u2014 "),dZ=a("a"),ABr=o("TFLongformerForQuestionAnswering"),LBr=o(" (Longformer model)"),yBr=l(),wE=a("li"),t4e=a("strong"),xBr=o("mobilebert"),$Br=o(" \u2014 "),cZ=a("a"),kBr=o("TFMobileBertForQuestionAnswering"),SBr=o(" (MobileBERT model)"),RBr=l(),AE=a("li"),a4e=a("strong"),PBr=o("mpnet"),BBr=o(" \u2014 "),fZ=a("a"),IBr=o("TFMPNetForQuestionAnswering"),NBr=o(" (MPNet model)"),qBr=l(),LE=a("li"),n4e=a("strong"),jBr=o("rembert"),DBr=o(" \u2014 "),mZ=a("a"),GBr=o("TFRemBertForQuestionAnswering"),OBr=o(" (RemBERT model)"),VBr=l(),yE=a("li"),s4e=a("strong"),XBr=o("roberta"),zBr=o(" \u2014 "),gZ=a("a"),QBr=o("TFRobertaForQuestionAnswering"),WBr=o(" (RoBERTa model)"),HBr=l(),xE=a("li"),l4e=a("strong"),UBr=o("roformer"),JBr=o(" \u2014 "),hZ=a("a"),YBr=o("TFRoFormerForQuestionAnswering"),KBr=o(" (RoFormer model)"),ZBr=l(),$E=a("li"),i4e=a("strong"),eIr=o("xlm"),oIr=o(" \u2014 "),pZ=a("a"),rIr=o("TFXLMForQuestionAnsweringSimple"),tIr=o(" (XLM model)"),aIr=l(),kE=a("li"),d4e=a("strong"),nIr=o("xlm-roberta"),sIr=o(" \u2014 "),_Z=a("a"),lIr=o("TFXLMRobertaForQuestionAnswering"),iIr=o(" (XLM-RoBERTa model)"),dIr=l(),SE=a("li"),c4e=a("strong"),cIr=o("xlnet"),fIr=o(" \u2014 "),uZ=a("a"),mIr=o("TFXLNetForQuestionAnsweringSimple"),gIr=o(" (XLNet model)"),hIr=l(),F(RE.$$.fragment),zXe=l(),Dc=a("h2"),PE=a("a"),f4e=a("span"),F(Ox.$$.fragment),pIr=l(),m4e=a("span"),_Ir=o("TFAutoModelForVision2Seq"),QXe=l(),mr=a("div"),F(Vx.$$.fragment),uIr=l(),Gc=a("p"),bIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),bZ=a("a"),vIr=o("from_pretrained()"),FIr=o(" class method or the "),vZ=a("a"),TIr=o("from_config()"),MIr=o(` class
method.`),EIr=l(),Xx=a("p"),CIr=o("This class cannot be instantiated directly using "),g4e=a("code"),wIr=o("__init__()"),AIr=o(" (throws an error)."),LIr=l(),Vt=a("div"),F(zx.$$.fragment),yIr=l(),h4e=a("p"),xIr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),$Ir=l(),Oc=a("p"),kIr=o(`Note:
Loading a model from its configuration file does `),p4e=a("strong"),SIr=o("not"),RIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FZ=a("a"),PIr=o("from_pretrained()"),BIr=o(" to load the model weights."),IIr=l(),F(BE.$$.fragment),NIr=l(),Dr=a("div"),F(Qx.$$.fragment),qIr=l(),_4e=a("p"),jIr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),DIr=l(),bn=a("p"),GIr=o("The model class to instantiate is selected based on the "),u4e=a("code"),OIr=o("model_type"),VIr=o(` property of the config object (either
passed as an argument or loaded from `),b4e=a("code"),XIr=o("pretrained_model_name_or_path"),zIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v4e=a("code"),QIr=o("pretrained_model_name_or_path"),WIr=o(":"),HIr=l(),F4e=a("ul"),IE=a("li"),T4e=a("strong"),UIr=o("vision-encoder-decoder"),JIr=o(" \u2014 "),TZ=a("a"),YIr=o("TFVisionEncoderDecoderModel"),KIr=o(" (Vision Encoder decoder model)"),ZIr=l(),F(NE.$$.fragment),WXe=l(),Vc=a("h2"),qE=a("a"),M4e=a("span"),F(Wx.$$.fragment),eNr=l(),E4e=a("span"),oNr=o("TFAutoModelForSpeechSeq2Seq"),HXe=l(),gr=a("div"),F(Hx.$$.fragment),rNr=l(),Xc=a("p"),tNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),MZ=a("a"),aNr=o("from_pretrained()"),nNr=o(" class method or the "),EZ=a("a"),sNr=o("from_config()"),lNr=o(` class
method.`),iNr=l(),Ux=a("p"),dNr=o("This class cannot be instantiated directly using "),C4e=a("code"),cNr=o("__init__()"),fNr=o(" (throws an error)."),mNr=l(),Xt=a("div"),F(Jx.$$.fragment),gNr=l(),w4e=a("p"),hNr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),pNr=l(),zc=a("p"),_Nr=o(`Note:
Loading a model from its configuration file does `),A4e=a("strong"),uNr=o("not"),bNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CZ=a("a"),vNr=o("from_pretrained()"),FNr=o(" to load the model weights."),TNr=l(),F(jE.$$.fragment),MNr=l(),Gr=a("div"),F(Yx.$$.fragment),ENr=l(),L4e=a("p"),CNr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),wNr=l(),vn=a("p"),ANr=o("The model class to instantiate is selected based on the "),y4e=a("code"),LNr=o("model_type"),yNr=o(` property of the config object (either
passed as an argument or loaded from `),x4e=a("code"),xNr=o("pretrained_model_name_or_path"),$Nr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$4e=a("code"),kNr=o("pretrained_model_name_or_path"),SNr=o(":"),RNr=l(),k4e=a("ul"),DE=a("li"),S4e=a("strong"),PNr=o("speech_to_text"),BNr=o(" \u2014 "),wZ=a("a"),INr=o("TFSpeech2TextForConditionalGeneration"),NNr=o(" (Speech2Text model)"),qNr=l(),F(GE.$$.fragment),UXe=l(),Qc=a("h2"),OE=a("a"),R4e=a("span"),F(Kx.$$.fragment),jNr=l(),P4e=a("span"),DNr=o("FlaxAutoModel"),JXe=l(),hr=a("div"),F(Zx.$$.fragment),GNr=l(),Wc=a("p"),ONr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),AZ=a("a"),VNr=o("from_pretrained()"),XNr=o(" class method or the "),LZ=a("a"),zNr=o("from_config()"),QNr=o(` class
method.`),WNr=l(),e$=a("p"),HNr=o("This class cannot be instantiated directly using "),B4e=a("code"),UNr=o("__init__()"),JNr=o(" (throws an error)."),YNr=l(),zt=a("div"),F(o$.$$.fragment),KNr=l(),I4e=a("p"),ZNr=o("Instantiates one of the base model classes of the library from a configuration."),eqr=l(),Hc=a("p"),oqr=o(`Note:
Loading a model from its configuration file does `),N4e=a("strong"),rqr=o("not"),tqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yZ=a("a"),aqr=o("from_pretrained()"),nqr=o(" to load the model weights."),sqr=l(),F(VE.$$.fragment),lqr=l(),Or=a("div"),F(r$.$$.fragment),iqr=l(),q4e=a("p"),dqr=o("Instantiate one of the base model classes of the library from a pretrained model."),cqr=l(),Fn=a("p"),fqr=o("The model class to instantiate is selected based on the "),j4e=a("code"),mqr=o("model_type"),gqr=o(` property of the config object (either
passed as an argument or loaded from `),D4e=a("code"),hqr=o("pretrained_model_name_or_path"),pqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G4e=a("code"),_qr=o("pretrained_model_name_or_path"),uqr=o(":"),bqr=l(),oe=a("ul"),XE=a("li"),O4e=a("strong"),vqr=o("albert"),Fqr=o(" \u2014 "),xZ=a("a"),Tqr=o("FlaxAlbertModel"),Mqr=o(" (ALBERT model)"),Eqr=l(),zE=a("li"),V4e=a("strong"),Cqr=o("bart"),wqr=o(" \u2014 "),$Z=a("a"),Aqr=o("FlaxBartModel"),Lqr=o(" (BART model)"),yqr=l(),QE=a("li"),X4e=a("strong"),xqr=o("beit"),$qr=o(" \u2014 "),kZ=a("a"),kqr=o("FlaxBeitModel"),Sqr=o(" (BEiT model)"),Rqr=l(),WE=a("li"),z4e=a("strong"),Pqr=o("bert"),Bqr=o(" \u2014 "),SZ=a("a"),Iqr=o("FlaxBertModel"),Nqr=o(" (BERT model)"),qqr=l(),HE=a("li"),Q4e=a("strong"),jqr=o("big_bird"),Dqr=o(" \u2014 "),RZ=a("a"),Gqr=o("FlaxBigBirdModel"),Oqr=o(" (BigBird model)"),Vqr=l(),UE=a("li"),W4e=a("strong"),Xqr=o("blenderbot"),zqr=o(" \u2014 "),PZ=a("a"),Qqr=o("FlaxBlenderbotModel"),Wqr=o(" (Blenderbot model)"),Hqr=l(),JE=a("li"),H4e=a("strong"),Uqr=o("blenderbot-small"),Jqr=o(" \u2014 "),BZ=a("a"),Yqr=o("FlaxBlenderbotSmallModel"),Kqr=o(" (BlenderbotSmall model)"),Zqr=l(),YE=a("li"),U4e=a("strong"),ejr=o("clip"),ojr=o(" \u2014 "),IZ=a("a"),rjr=o("FlaxCLIPModel"),tjr=o(" (CLIP model)"),ajr=l(),KE=a("li"),J4e=a("strong"),njr=o("distilbert"),sjr=o(" \u2014 "),NZ=a("a"),ljr=o("FlaxDistilBertModel"),ijr=o(" (DistilBERT model)"),djr=l(),ZE=a("li"),Y4e=a("strong"),cjr=o("electra"),fjr=o(" \u2014 "),qZ=a("a"),mjr=o("FlaxElectraModel"),gjr=o(" (ELECTRA model)"),hjr=l(),eC=a("li"),K4e=a("strong"),pjr=o("gpt2"),_jr=o(" \u2014 "),jZ=a("a"),ujr=o("FlaxGPT2Model"),bjr=o(" (OpenAI GPT-2 model)"),vjr=l(),oC=a("li"),Z4e=a("strong"),Fjr=o("gpt_neo"),Tjr=o(" \u2014 "),DZ=a("a"),Mjr=o("FlaxGPTNeoModel"),Ejr=o(" (GPT Neo model)"),Cjr=l(),rC=a("li"),eEe=a("strong"),wjr=o("gptj"),Ajr=o(" \u2014 "),GZ=a("a"),Ljr=o("FlaxGPTJModel"),yjr=o(" (GPT-J model)"),xjr=l(),tC=a("li"),oEe=a("strong"),$jr=o("longt5"),kjr=o(" \u2014 "),OZ=a("a"),Sjr=o("FlaxLongT5Model"),Rjr=o(" (LongT5 model)"),Pjr=l(),aC=a("li"),rEe=a("strong"),Bjr=o("marian"),Ijr=o(" \u2014 "),VZ=a("a"),Njr=o("FlaxMarianModel"),qjr=o(" (Marian model)"),jjr=l(),nC=a("li"),tEe=a("strong"),Djr=o("mbart"),Gjr=o(" \u2014 "),XZ=a("a"),Ojr=o("FlaxMBartModel"),Vjr=o(" (mBART model)"),Xjr=l(),sC=a("li"),aEe=a("strong"),zjr=o("mt5"),Qjr=o(" \u2014 "),zZ=a("a"),Wjr=o("FlaxMT5Model"),Hjr=o(" (MT5 model)"),Ujr=l(),lC=a("li"),nEe=a("strong"),Jjr=o("opt"),Yjr=o(" \u2014 "),QZ=a("a"),Kjr=o("FlaxOPTModel"),Zjr=o(" (OPT model)"),eDr=l(),iC=a("li"),sEe=a("strong"),oDr=o("pegasus"),rDr=o(" \u2014 "),WZ=a("a"),tDr=o("FlaxPegasusModel"),aDr=o(" (Pegasus model)"),nDr=l(),dC=a("li"),lEe=a("strong"),sDr=o("roberta"),lDr=o(" \u2014 "),HZ=a("a"),iDr=o("FlaxRobertaModel"),dDr=o(" (RoBERTa model)"),cDr=l(),cC=a("li"),iEe=a("strong"),fDr=o("roformer"),mDr=o(" \u2014 "),UZ=a("a"),gDr=o("FlaxRoFormerModel"),hDr=o(" (RoFormer model)"),pDr=l(),fC=a("li"),dEe=a("strong"),_Dr=o("t5"),uDr=o(" \u2014 "),JZ=a("a"),bDr=o("FlaxT5Model"),vDr=o(" (T5 model)"),FDr=l(),mC=a("li"),cEe=a("strong"),TDr=o("vision-text-dual-encoder"),MDr=o(" \u2014 "),YZ=a("a"),EDr=o("FlaxVisionTextDualEncoderModel"),CDr=o(" (VisionTextDualEncoder model)"),wDr=l(),gC=a("li"),fEe=a("strong"),ADr=o("vit"),LDr=o(" \u2014 "),KZ=a("a"),yDr=o("FlaxViTModel"),xDr=o(" (ViT model)"),$Dr=l(),hC=a("li"),mEe=a("strong"),kDr=o("wav2vec2"),SDr=o(" \u2014 "),ZZ=a("a"),RDr=o("FlaxWav2Vec2Model"),PDr=o(" (Wav2Vec2 model)"),BDr=l(),pC=a("li"),gEe=a("strong"),IDr=o("xglm"),NDr=o(" \u2014 "),eee=a("a"),qDr=o("FlaxXGLMModel"),jDr=o(" (XGLM model)"),DDr=l(),_C=a("li"),hEe=a("strong"),GDr=o("xlm-roberta"),ODr=o(" \u2014 "),oee=a("a"),VDr=o("FlaxXLMRobertaModel"),XDr=o(" (XLM-RoBERTa model)"),zDr=l(),F(uC.$$.fragment),YXe=l(),Uc=a("h2"),bC=a("a"),pEe=a("span"),F(t$.$$.fragment),QDr=l(),_Ee=a("span"),WDr=o("FlaxAutoModelForCausalLM"),KXe=l(),pr=a("div"),F(a$.$$.fragment),HDr=l(),Jc=a("p"),UDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),ree=a("a"),JDr=o("from_pretrained()"),YDr=o(" class method or the "),tee=a("a"),KDr=o("from_config()"),ZDr=o(` class
method.`),eGr=l(),n$=a("p"),oGr=o("This class cannot be instantiated directly using "),uEe=a("code"),rGr=o("__init__()"),tGr=o(" (throws an error)."),aGr=l(),Qt=a("div"),F(s$.$$.fragment),nGr=l(),bEe=a("p"),sGr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),lGr=l(),Yc=a("p"),iGr=o(`Note:
Loading a model from its configuration file does `),vEe=a("strong"),dGr=o("not"),cGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aee=a("a"),fGr=o("from_pretrained()"),mGr=o(" to load the model weights."),gGr=l(),F(vC.$$.fragment),hGr=l(),Vr=a("div"),F(l$.$$.fragment),pGr=l(),FEe=a("p"),_Gr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),uGr=l(),Tn=a("p"),bGr=o("The model class to instantiate is selected based on the "),TEe=a("code"),vGr=o("model_type"),FGr=o(` property of the config object (either
passed as an argument or loaded from `),MEe=a("code"),TGr=o("pretrained_model_name_or_path"),MGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),EEe=a("code"),EGr=o("pretrained_model_name_or_path"),CGr=o(":"),wGr=l(),xe=a("ul"),FC=a("li"),CEe=a("strong"),AGr=o("bart"),LGr=o(" \u2014 "),nee=a("a"),yGr=o("FlaxBartForCausalLM"),xGr=o(" (BART model)"),$Gr=l(),TC=a("li"),wEe=a("strong"),kGr=o("bert"),SGr=o(" \u2014 "),see=a("a"),RGr=o("FlaxBertForCausalLM"),PGr=o(" (BERT model)"),BGr=l(),MC=a("li"),AEe=a("strong"),IGr=o("big_bird"),NGr=o(" \u2014 "),lee=a("a"),qGr=o("FlaxBigBirdForCausalLM"),jGr=o(" (BigBird model)"),DGr=l(),EC=a("li"),LEe=a("strong"),GGr=o("electra"),OGr=o(" \u2014 "),iee=a("a"),VGr=o("FlaxElectraForCausalLM"),XGr=o(" (ELECTRA model)"),zGr=l(),CC=a("li"),yEe=a("strong"),QGr=o("gpt2"),WGr=o(" \u2014 "),dee=a("a"),HGr=o("FlaxGPT2LMHeadModel"),UGr=o(" (OpenAI GPT-2 model)"),JGr=l(),wC=a("li"),xEe=a("strong"),YGr=o("gpt_neo"),KGr=o(" \u2014 "),cee=a("a"),ZGr=o("FlaxGPTNeoForCausalLM"),eOr=o(" (GPT Neo model)"),oOr=l(),AC=a("li"),$Ee=a("strong"),rOr=o("gptj"),tOr=o(" \u2014 "),fee=a("a"),aOr=o("FlaxGPTJForCausalLM"),nOr=o(" (GPT-J model)"),sOr=l(),LC=a("li"),kEe=a("strong"),lOr=o("opt"),iOr=o(" \u2014 "),mee=a("a"),dOr=o("FlaxOPTForCausalLM"),cOr=o(" (OPT model)"),fOr=l(),yC=a("li"),SEe=a("strong"),mOr=o("roberta"),gOr=o(" \u2014 "),gee=a("a"),hOr=o("FlaxRobertaForCausalLM"),pOr=o(" (RoBERTa model)"),_Or=l(),xC=a("li"),REe=a("strong"),uOr=o("xglm"),bOr=o(" \u2014 "),hee=a("a"),vOr=o("FlaxXGLMForCausalLM"),FOr=o(" (XGLM model)"),TOr=l(),F($C.$$.fragment),ZXe=l(),Kc=a("h2"),kC=a("a"),PEe=a("span"),F(i$.$$.fragment),MOr=l(),BEe=a("span"),EOr=o("FlaxAutoModelForPreTraining"),eze=l(),_r=a("div"),F(d$.$$.fragment),COr=l(),Zc=a("p"),wOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),pee=a("a"),AOr=o("from_pretrained()"),LOr=o(" class method or the "),_ee=a("a"),yOr=o("from_config()"),xOr=o(` class
method.`),$Or=l(),c$=a("p"),kOr=o("This class cannot be instantiated directly using "),IEe=a("code"),SOr=o("__init__()"),ROr=o(" (throws an error)."),POr=l(),Wt=a("div"),F(f$.$$.fragment),BOr=l(),NEe=a("p"),IOr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),NOr=l(),ef=a("p"),qOr=o(`Note:
Loading a model from its configuration file does `),qEe=a("strong"),jOr=o("not"),DOr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uee=a("a"),GOr=o("from_pretrained()"),OOr=o(" to load the model weights."),VOr=l(),F(SC.$$.fragment),XOr=l(),Xr=a("div"),F(m$.$$.fragment),zOr=l(),jEe=a("p"),QOr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),WOr=l(),Mn=a("p"),HOr=o("The model class to instantiate is selected based on the "),DEe=a("code"),UOr=o("model_type"),JOr=o(` property of the config object (either
passed as an argument or loaded from `),GEe=a("code"),YOr=o("pretrained_model_name_or_path"),KOr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OEe=a("code"),ZOr=o("pretrained_model_name_or_path"),eVr=o(":"),oVr=l(),Ee=a("ul"),RC=a("li"),VEe=a("strong"),rVr=o("albert"),tVr=o(" \u2014 "),bee=a("a"),aVr=o("FlaxAlbertForPreTraining"),nVr=o(" (ALBERT model)"),sVr=l(),PC=a("li"),XEe=a("strong"),lVr=o("bart"),iVr=o(" \u2014 "),vee=a("a"),dVr=o("FlaxBartForConditionalGeneration"),cVr=o(" (BART model)"),fVr=l(),BC=a("li"),zEe=a("strong"),mVr=o("bert"),gVr=o(" \u2014 "),Fee=a("a"),hVr=o("FlaxBertForPreTraining"),pVr=o(" (BERT model)"),_Vr=l(),IC=a("li"),QEe=a("strong"),uVr=o("big_bird"),bVr=o(" \u2014 "),Tee=a("a"),vVr=o("FlaxBigBirdForPreTraining"),FVr=o(" (BigBird model)"),TVr=l(),NC=a("li"),WEe=a("strong"),MVr=o("electra"),EVr=o(" \u2014 "),Mee=a("a"),CVr=o("FlaxElectraForPreTraining"),wVr=o(" (ELECTRA model)"),AVr=l(),qC=a("li"),HEe=a("strong"),LVr=o("longt5"),yVr=o(" \u2014 "),Eee=a("a"),xVr=o("FlaxLongT5ForConditionalGeneration"),$Vr=o(" (LongT5 model)"),kVr=l(),jC=a("li"),UEe=a("strong"),SVr=o("mbart"),RVr=o(" \u2014 "),Cee=a("a"),PVr=o("FlaxMBartForConditionalGeneration"),BVr=o(" (mBART model)"),IVr=l(),DC=a("li"),JEe=a("strong"),NVr=o("mt5"),qVr=o(" \u2014 "),wee=a("a"),jVr=o("FlaxMT5ForConditionalGeneration"),DVr=o(" (MT5 model)"),GVr=l(),GC=a("li"),YEe=a("strong"),OVr=o("roberta"),VVr=o(" \u2014 "),Aee=a("a"),XVr=o("FlaxRobertaForMaskedLM"),zVr=o(" (RoBERTa model)"),QVr=l(),OC=a("li"),KEe=a("strong"),WVr=o("roformer"),HVr=o(" \u2014 "),Lee=a("a"),UVr=o("FlaxRoFormerForMaskedLM"),JVr=o(" (RoFormer model)"),YVr=l(),VC=a("li"),ZEe=a("strong"),KVr=o("t5"),ZVr=o(" \u2014 "),yee=a("a"),eXr=o("FlaxT5ForConditionalGeneration"),oXr=o(" (T5 model)"),rXr=l(),XC=a("li"),eCe=a("strong"),tXr=o("wav2vec2"),aXr=o(" \u2014 "),xee=a("a"),nXr=o("FlaxWav2Vec2ForPreTraining"),sXr=o(" (Wav2Vec2 model)"),lXr=l(),zC=a("li"),oCe=a("strong"),iXr=o("xlm-roberta"),dXr=o(" \u2014 "),$ee=a("a"),cXr=o("FlaxXLMRobertaForMaskedLM"),fXr=o(" (XLM-RoBERTa model)"),mXr=l(),F(QC.$$.fragment),oze=l(),of=a("h2"),WC=a("a"),rCe=a("span"),F(g$.$$.fragment),gXr=l(),tCe=a("span"),hXr=o("FlaxAutoModelForMaskedLM"),rze=l(),ur=a("div"),F(h$.$$.fragment),pXr=l(),rf=a("p"),_Xr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),kee=a("a"),uXr=o("from_pretrained()"),bXr=o(" class method or the "),See=a("a"),vXr=o("from_config()"),FXr=o(` class
method.`),TXr=l(),p$=a("p"),MXr=o("This class cannot be instantiated directly using "),aCe=a("code"),EXr=o("__init__()"),CXr=o(" (throws an error)."),wXr=l(),Ht=a("div"),F(_$.$$.fragment),AXr=l(),nCe=a("p"),LXr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),yXr=l(),tf=a("p"),xXr=o(`Note:
Loading a model from its configuration file does `),sCe=a("strong"),$Xr=o("not"),kXr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ree=a("a"),SXr=o("from_pretrained()"),RXr=o(" to load the model weights."),PXr=l(),F(HC.$$.fragment),BXr=l(),zr=a("div"),F(u$.$$.fragment),IXr=l(),lCe=a("p"),NXr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),qXr=l(),En=a("p"),jXr=o("The model class to instantiate is selected based on the "),iCe=a("code"),DXr=o("model_type"),GXr=o(` property of the config object (either
passed as an argument or loaded from `),dCe=a("code"),OXr=o("pretrained_model_name_or_path"),VXr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cCe=a("code"),XXr=o("pretrained_model_name_or_path"),zXr=o(":"),QXr=l(),$e=a("ul"),UC=a("li"),fCe=a("strong"),WXr=o("albert"),HXr=o(" \u2014 "),Pee=a("a"),UXr=o("FlaxAlbertForMaskedLM"),JXr=o(" (ALBERT model)"),YXr=l(),JC=a("li"),mCe=a("strong"),KXr=o("bart"),ZXr=o(" \u2014 "),Bee=a("a"),ezr=o("FlaxBartForConditionalGeneration"),ozr=o(" (BART model)"),rzr=l(),YC=a("li"),gCe=a("strong"),tzr=o("bert"),azr=o(" \u2014 "),Iee=a("a"),nzr=o("FlaxBertForMaskedLM"),szr=o(" (BERT model)"),lzr=l(),KC=a("li"),hCe=a("strong"),izr=o("big_bird"),dzr=o(" \u2014 "),Nee=a("a"),czr=o("FlaxBigBirdForMaskedLM"),fzr=o(" (BigBird model)"),mzr=l(),ZC=a("li"),pCe=a("strong"),gzr=o("distilbert"),hzr=o(" \u2014 "),qee=a("a"),pzr=o("FlaxDistilBertForMaskedLM"),_zr=o(" (DistilBERT model)"),uzr=l(),e0=a("li"),_Ce=a("strong"),bzr=o("electra"),vzr=o(" \u2014 "),jee=a("a"),Fzr=o("FlaxElectraForMaskedLM"),Tzr=o(" (ELECTRA model)"),Mzr=l(),o0=a("li"),uCe=a("strong"),Ezr=o("mbart"),Czr=o(" \u2014 "),Dee=a("a"),wzr=o("FlaxMBartForConditionalGeneration"),Azr=o(" (mBART model)"),Lzr=l(),r0=a("li"),bCe=a("strong"),yzr=o("roberta"),xzr=o(" \u2014 "),Gee=a("a"),$zr=o("FlaxRobertaForMaskedLM"),kzr=o(" (RoBERTa model)"),Szr=l(),t0=a("li"),vCe=a("strong"),Rzr=o("roformer"),Pzr=o(" \u2014 "),Oee=a("a"),Bzr=o("FlaxRoFormerForMaskedLM"),Izr=o(" (RoFormer model)"),Nzr=l(),a0=a("li"),FCe=a("strong"),qzr=o("xlm-roberta"),jzr=o(" \u2014 "),Vee=a("a"),Dzr=o("FlaxXLMRobertaForMaskedLM"),Gzr=o(" (XLM-RoBERTa model)"),Ozr=l(),F(n0.$$.fragment),tze=l(),af=a("h2"),s0=a("a"),TCe=a("span"),F(b$.$$.fragment),Vzr=l(),MCe=a("span"),Xzr=o("FlaxAutoModelForSeq2SeqLM"),aze=l(),br=a("div"),F(v$.$$.fragment),zzr=l(),nf=a("p"),Qzr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Xee=a("a"),Wzr=o("from_pretrained()"),Hzr=o(" class method or the "),zee=a("a"),Uzr=o("from_config()"),Jzr=o(` class
method.`),Yzr=l(),F$=a("p"),Kzr=o("This class cannot be instantiated directly using "),ECe=a("code"),Zzr=o("__init__()"),eQr=o(" (throws an error)."),oQr=l(),Ut=a("div"),F(T$.$$.fragment),rQr=l(),CCe=a("p"),tQr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),aQr=l(),sf=a("p"),nQr=o(`Note:
Loading a model from its configuration file does `),wCe=a("strong"),sQr=o("not"),lQr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Qee=a("a"),iQr=o("from_pretrained()"),dQr=o(" to load the model weights."),cQr=l(),F(l0.$$.fragment),fQr=l(),Qr=a("div"),F(M$.$$.fragment),mQr=l(),ACe=a("p"),gQr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),hQr=l(),Cn=a("p"),pQr=o("The model class to instantiate is selected based on the "),LCe=a("code"),_Qr=o("model_type"),uQr=o(` property of the config object (either
passed as an argument or loaded from `),yCe=a("code"),bQr=o("pretrained_model_name_or_path"),vQr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xCe=a("code"),FQr=o("pretrained_model_name_or_path"),TQr=o(":"),MQr=l(),ke=a("ul"),i0=a("li"),$Ce=a("strong"),EQr=o("bart"),CQr=o(" \u2014 "),Wee=a("a"),wQr=o("FlaxBartForConditionalGeneration"),AQr=o(" (BART model)"),LQr=l(),d0=a("li"),kCe=a("strong"),yQr=o("blenderbot"),xQr=o(" \u2014 "),Hee=a("a"),$Qr=o("FlaxBlenderbotForConditionalGeneration"),kQr=o(" (Blenderbot model)"),SQr=l(),c0=a("li"),SCe=a("strong"),RQr=o("blenderbot-small"),PQr=o(" \u2014 "),Uee=a("a"),BQr=o("FlaxBlenderbotSmallForConditionalGeneration"),IQr=o(" (BlenderbotSmall model)"),NQr=l(),f0=a("li"),RCe=a("strong"),qQr=o("encoder-decoder"),jQr=o(" \u2014 "),Jee=a("a"),DQr=o("FlaxEncoderDecoderModel"),GQr=o(" (Encoder decoder model)"),OQr=l(),m0=a("li"),PCe=a("strong"),VQr=o("longt5"),XQr=o(" \u2014 "),Yee=a("a"),zQr=o("FlaxLongT5ForConditionalGeneration"),QQr=o(" (LongT5 model)"),WQr=l(),g0=a("li"),BCe=a("strong"),HQr=o("marian"),UQr=o(" \u2014 "),Kee=a("a"),JQr=o("FlaxMarianMTModel"),YQr=o(" (Marian model)"),KQr=l(),h0=a("li"),ICe=a("strong"),ZQr=o("mbart"),eWr=o(" \u2014 "),Zee=a("a"),oWr=o("FlaxMBartForConditionalGeneration"),rWr=o(" (mBART model)"),tWr=l(),p0=a("li"),NCe=a("strong"),aWr=o("mt5"),nWr=o(" \u2014 "),eoe=a("a"),sWr=o("FlaxMT5ForConditionalGeneration"),lWr=o(" (MT5 model)"),iWr=l(),_0=a("li"),qCe=a("strong"),dWr=o("pegasus"),cWr=o(" \u2014 "),ooe=a("a"),fWr=o("FlaxPegasusForConditionalGeneration"),mWr=o(" (Pegasus model)"),gWr=l(),u0=a("li"),jCe=a("strong"),hWr=o("t5"),pWr=o(" \u2014 "),roe=a("a"),_Wr=o("FlaxT5ForConditionalGeneration"),uWr=o(" (T5 model)"),bWr=l(),F(b0.$$.fragment),nze=l(),lf=a("h2"),v0=a("a"),DCe=a("span"),F(E$.$$.fragment),vWr=l(),GCe=a("span"),FWr=o("FlaxAutoModelForSequenceClassification"),sze=l(),vr=a("div"),F(C$.$$.fragment),TWr=l(),df=a("p"),MWr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),toe=a("a"),EWr=o("from_pretrained()"),CWr=o(" class method or the "),aoe=a("a"),wWr=o("from_config()"),AWr=o(` class
method.`),LWr=l(),w$=a("p"),yWr=o("This class cannot be instantiated directly using "),OCe=a("code"),xWr=o("__init__()"),$Wr=o(" (throws an error)."),kWr=l(),Jt=a("div"),F(A$.$$.fragment),SWr=l(),VCe=a("p"),RWr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),PWr=l(),cf=a("p"),BWr=o(`Note:
Loading a model from its configuration file does `),XCe=a("strong"),IWr=o("not"),NWr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),noe=a("a"),qWr=o("from_pretrained()"),jWr=o(" to load the model weights."),DWr=l(),F(F0.$$.fragment),GWr=l(),Wr=a("div"),F(L$.$$.fragment),OWr=l(),zCe=a("p"),VWr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),XWr=l(),wn=a("p"),zWr=o("The model class to instantiate is selected based on the "),QCe=a("code"),QWr=o("model_type"),WWr=o(` property of the config object (either
passed as an argument or loaded from `),WCe=a("code"),HWr=o("pretrained_model_name_or_path"),UWr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HCe=a("code"),JWr=o("pretrained_model_name_or_path"),YWr=o(":"),KWr=l(),Se=a("ul"),T0=a("li"),UCe=a("strong"),ZWr=o("albert"),eHr=o(" \u2014 "),soe=a("a"),oHr=o("FlaxAlbertForSequenceClassification"),rHr=o(" (ALBERT model)"),tHr=l(),M0=a("li"),JCe=a("strong"),aHr=o("bart"),nHr=o(" \u2014 "),loe=a("a"),sHr=o("FlaxBartForSequenceClassification"),lHr=o(" (BART model)"),iHr=l(),E0=a("li"),YCe=a("strong"),dHr=o("bert"),cHr=o(" \u2014 "),ioe=a("a"),fHr=o("FlaxBertForSequenceClassification"),mHr=o(" (BERT model)"),gHr=l(),C0=a("li"),KCe=a("strong"),hHr=o("big_bird"),pHr=o(" \u2014 "),doe=a("a"),_Hr=o("FlaxBigBirdForSequenceClassification"),uHr=o(" (BigBird model)"),bHr=l(),w0=a("li"),ZCe=a("strong"),vHr=o("distilbert"),FHr=o(" \u2014 "),coe=a("a"),THr=o("FlaxDistilBertForSequenceClassification"),MHr=o(" (DistilBERT model)"),EHr=l(),A0=a("li"),e0e=a("strong"),CHr=o("electra"),wHr=o(" \u2014 "),foe=a("a"),AHr=o("FlaxElectraForSequenceClassification"),LHr=o(" (ELECTRA model)"),yHr=l(),L0=a("li"),o0e=a("strong"),xHr=o("mbart"),$Hr=o(" \u2014 "),moe=a("a"),kHr=o("FlaxMBartForSequenceClassification"),SHr=o(" (mBART model)"),RHr=l(),y0=a("li"),r0e=a("strong"),PHr=o("roberta"),BHr=o(" \u2014 "),goe=a("a"),IHr=o("FlaxRobertaForSequenceClassification"),NHr=o(" (RoBERTa model)"),qHr=l(),x0=a("li"),t0e=a("strong"),jHr=o("roformer"),DHr=o(" \u2014 "),hoe=a("a"),GHr=o("FlaxRoFormerForSequenceClassification"),OHr=o(" (RoFormer model)"),VHr=l(),$0=a("li"),a0e=a("strong"),XHr=o("xlm-roberta"),zHr=o(" \u2014 "),poe=a("a"),QHr=o("FlaxXLMRobertaForSequenceClassification"),WHr=o(" (XLM-RoBERTa model)"),HHr=l(),F(k0.$$.fragment),lze=l(),ff=a("h2"),S0=a("a"),n0e=a("span"),F(y$.$$.fragment),UHr=l(),s0e=a("span"),JHr=o("FlaxAutoModelForQuestionAnswering"),ize=l(),Fr=a("div"),F(x$.$$.fragment),YHr=l(),mf=a("p"),KHr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),_oe=a("a"),ZHr=o("from_pretrained()"),eUr=o(" class method or the "),uoe=a("a"),oUr=o("from_config()"),rUr=o(` class
method.`),tUr=l(),$$=a("p"),aUr=o("This class cannot be instantiated directly using "),l0e=a("code"),nUr=o("__init__()"),sUr=o(" (throws an error)."),lUr=l(),Yt=a("div"),F(k$.$$.fragment),iUr=l(),i0e=a("p"),dUr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),cUr=l(),gf=a("p"),fUr=o(`Note:
Loading a model from its configuration file does `),d0e=a("strong"),mUr=o("not"),gUr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),boe=a("a"),hUr=o("from_pretrained()"),pUr=o(" to load the model weights."),_Ur=l(),F(R0.$$.fragment),uUr=l(),Hr=a("div"),F(S$.$$.fragment),bUr=l(),c0e=a("p"),vUr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),FUr=l(),An=a("p"),TUr=o("The model class to instantiate is selected based on the "),f0e=a("code"),MUr=o("model_type"),EUr=o(` property of the config object (either
passed as an argument or loaded from `),m0e=a("code"),CUr=o("pretrained_model_name_or_path"),wUr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g0e=a("code"),AUr=o("pretrained_model_name_or_path"),LUr=o(":"),yUr=l(),Re=a("ul"),P0=a("li"),h0e=a("strong"),xUr=o("albert"),$Ur=o(" \u2014 "),voe=a("a"),kUr=o("FlaxAlbertForQuestionAnswering"),SUr=o(" (ALBERT model)"),RUr=l(),B0=a("li"),p0e=a("strong"),PUr=o("bart"),BUr=o(" \u2014 "),Foe=a("a"),IUr=o("FlaxBartForQuestionAnswering"),NUr=o(" (BART model)"),qUr=l(),I0=a("li"),_0e=a("strong"),jUr=o("bert"),DUr=o(" \u2014 "),Toe=a("a"),GUr=o("FlaxBertForQuestionAnswering"),OUr=o(" (BERT model)"),VUr=l(),N0=a("li"),u0e=a("strong"),XUr=o("big_bird"),zUr=o(" \u2014 "),Moe=a("a"),QUr=o("FlaxBigBirdForQuestionAnswering"),WUr=o(" (BigBird model)"),HUr=l(),q0=a("li"),b0e=a("strong"),UUr=o("distilbert"),JUr=o(" \u2014 "),Eoe=a("a"),YUr=o("FlaxDistilBertForQuestionAnswering"),KUr=o(" (DistilBERT model)"),ZUr=l(),j0=a("li"),v0e=a("strong"),eJr=o("electra"),oJr=o(" \u2014 "),Coe=a("a"),rJr=o("FlaxElectraForQuestionAnswering"),tJr=o(" (ELECTRA model)"),aJr=l(),D0=a("li"),F0e=a("strong"),nJr=o("mbart"),sJr=o(" \u2014 "),woe=a("a"),lJr=o("FlaxMBartForQuestionAnswering"),iJr=o(" (mBART model)"),dJr=l(),G0=a("li"),T0e=a("strong"),cJr=o("roberta"),fJr=o(" \u2014 "),Aoe=a("a"),mJr=o("FlaxRobertaForQuestionAnswering"),gJr=o(" (RoBERTa model)"),hJr=l(),O0=a("li"),M0e=a("strong"),pJr=o("roformer"),_Jr=o(" \u2014 "),Loe=a("a"),uJr=o("FlaxRoFormerForQuestionAnswering"),bJr=o(" (RoFormer model)"),vJr=l(),V0=a("li"),E0e=a("strong"),FJr=o("xlm-roberta"),TJr=o(" \u2014 "),yoe=a("a"),MJr=o("FlaxXLMRobertaForQuestionAnswering"),EJr=o(" (XLM-RoBERTa model)"),CJr=l(),F(X0.$$.fragment),dze=l(),hf=a("h2"),z0=a("a"),C0e=a("span"),F(R$.$$.fragment),wJr=l(),w0e=a("span"),AJr=o("FlaxAutoModelForTokenClassification"),cze=l(),Tr=a("div"),F(P$.$$.fragment),LJr=l(),pf=a("p"),yJr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),xoe=a("a"),xJr=o("from_pretrained()"),$Jr=o(" class method or the "),$oe=a("a"),kJr=o("from_config()"),SJr=o(` class
method.`),RJr=l(),B$=a("p"),PJr=o("This class cannot be instantiated directly using "),A0e=a("code"),BJr=o("__init__()"),IJr=o(" (throws an error)."),NJr=l(),Kt=a("div"),F(I$.$$.fragment),qJr=l(),L0e=a("p"),jJr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),DJr=l(),_f=a("p"),GJr=o(`Note:
Loading a model from its configuration file does `),y0e=a("strong"),OJr=o("not"),VJr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),koe=a("a"),XJr=o("from_pretrained()"),zJr=o(" to load the model weights."),QJr=l(),F(Q0.$$.fragment),WJr=l(),Ur=a("div"),F(N$.$$.fragment),HJr=l(),x0e=a("p"),UJr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),JJr=l(),Ln=a("p"),YJr=o("The model class to instantiate is selected based on the "),$0e=a("code"),KJr=o("model_type"),ZJr=o(` property of the config object (either
passed as an argument or loaded from `),k0e=a("code"),eYr=o("pretrained_model_name_or_path"),oYr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S0e=a("code"),rYr=o("pretrained_model_name_or_path"),tYr=o(":"),aYr=l(),Ve=a("ul"),W0=a("li"),R0e=a("strong"),nYr=o("albert"),sYr=o(" \u2014 "),Soe=a("a"),lYr=o("FlaxAlbertForTokenClassification"),iYr=o(" (ALBERT model)"),dYr=l(),H0=a("li"),P0e=a("strong"),cYr=o("bert"),fYr=o(" \u2014 "),Roe=a("a"),mYr=o("FlaxBertForTokenClassification"),gYr=o(" (BERT model)"),hYr=l(),U0=a("li"),B0e=a("strong"),pYr=o("big_bird"),_Yr=o(" \u2014 "),Poe=a("a"),uYr=o("FlaxBigBirdForTokenClassification"),bYr=o(" (BigBird model)"),vYr=l(),J0=a("li"),I0e=a("strong"),FYr=o("distilbert"),TYr=o(" \u2014 "),Boe=a("a"),MYr=o("FlaxDistilBertForTokenClassification"),EYr=o(" (DistilBERT model)"),CYr=l(),Y0=a("li"),N0e=a("strong"),wYr=o("electra"),AYr=o(" \u2014 "),Ioe=a("a"),LYr=o("FlaxElectraForTokenClassification"),yYr=o(" (ELECTRA model)"),xYr=l(),K0=a("li"),q0e=a("strong"),$Yr=o("roberta"),kYr=o(" \u2014 "),Noe=a("a"),SYr=o("FlaxRobertaForTokenClassification"),RYr=o(" (RoBERTa model)"),PYr=l(),Z0=a("li"),j0e=a("strong"),BYr=o("roformer"),IYr=o(" \u2014 "),qoe=a("a"),NYr=o("FlaxRoFormerForTokenClassification"),qYr=o(" (RoFormer model)"),jYr=l(),ew=a("li"),D0e=a("strong"),DYr=o("xlm-roberta"),GYr=o(" \u2014 "),joe=a("a"),OYr=o("FlaxXLMRobertaForTokenClassification"),VYr=o(" (XLM-RoBERTa model)"),XYr=l(),F(ow.$$.fragment),fze=l(),uf=a("h2"),rw=a("a"),G0e=a("span"),F(q$.$$.fragment),zYr=l(),O0e=a("span"),QYr=o("FlaxAutoModelForMultipleChoice"),mze=l(),Mr=a("div"),F(j$.$$.fragment),WYr=l(),bf=a("p"),HYr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Doe=a("a"),UYr=o("from_pretrained()"),JYr=o(" class method or the "),Goe=a("a"),YYr=o("from_config()"),KYr=o(` class
method.`),ZYr=l(),D$=a("p"),eKr=o("This class cannot be instantiated directly using "),V0e=a("code"),oKr=o("__init__()"),rKr=o(" (throws an error)."),tKr=l(),Zt=a("div"),F(G$.$$.fragment),aKr=l(),X0e=a("p"),nKr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),sKr=l(),vf=a("p"),lKr=o(`Note:
Loading a model from its configuration file does `),z0e=a("strong"),iKr=o("not"),dKr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ooe=a("a"),cKr=o("from_pretrained()"),fKr=o(" to load the model weights."),mKr=l(),F(tw.$$.fragment),gKr=l(),Jr=a("div"),F(O$.$$.fragment),hKr=l(),Q0e=a("p"),pKr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),_Kr=l(),yn=a("p"),uKr=o("The model class to instantiate is selected based on the "),W0e=a("code"),bKr=o("model_type"),vKr=o(` property of the config object (either
passed as an argument or loaded from `),H0e=a("code"),FKr=o("pretrained_model_name_or_path"),TKr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U0e=a("code"),MKr=o("pretrained_model_name_or_path"),EKr=o(":"),CKr=l(),Xe=a("ul"),aw=a("li"),J0e=a("strong"),wKr=o("albert"),AKr=o(" \u2014 "),Voe=a("a"),LKr=o("FlaxAlbertForMultipleChoice"),yKr=o(" (ALBERT model)"),xKr=l(),nw=a("li"),Y0e=a("strong"),$Kr=o("bert"),kKr=o(" \u2014 "),Xoe=a("a"),SKr=o("FlaxBertForMultipleChoice"),RKr=o(" (BERT model)"),PKr=l(),sw=a("li"),K0e=a("strong"),BKr=o("big_bird"),IKr=o(" \u2014 "),zoe=a("a"),NKr=o("FlaxBigBirdForMultipleChoice"),qKr=o(" (BigBird model)"),jKr=l(),lw=a("li"),Z0e=a("strong"),DKr=o("distilbert"),GKr=o(" \u2014 "),Qoe=a("a"),OKr=o("FlaxDistilBertForMultipleChoice"),VKr=o(" (DistilBERT model)"),XKr=l(),iw=a("li"),ewe=a("strong"),zKr=o("electra"),QKr=o(" \u2014 "),Woe=a("a"),WKr=o("FlaxElectraForMultipleChoice"),HKr=o(" (ELECTRA model)"),UKr=l(),dw=a("li"),owe=a("strong"),JKr=o("roberta"),YKr=o(" \u2014 "),Hoe=a("a"),KKr=o("FlaxRobertaForMultipleChoice"),ZKr=o(" (RoBERTa model)"),eZr=l(),cw=a("li"),rwe=a("strong"),oZr=o("roformer"),rZr=o(" \u2014 "),Uoe=a("a"),tZr=o("FlaxRoFormerForMultipleChoice"),aZr=o(" (RoFormer model)"),nZr=l(),fw=a("li"),twe=a("strong"),sZr=o("xlm-roberta"),lZr=o(" \u2014 "),Joe=a("a"),iZr=o("FlaxXLMRobertaForMultipleChoice"),dZr=o(" (XLM-RoBERTa model)"),cZr=l(),F(mw.$$.fragment),gze=l(),Ff=a("h2"),gw=a("a"),awe=a("span"),F(V$.$$.fragment),fZr=l(),nwe=a("span"),mZr=o("FlaxAutoModelForNextSentencePrediction"),hze=l(),Er=a("div"),F(X$.$$.fragment),gZr=l(),Tf=a("p"),hZr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Yoe=a("a"),pZr=o("from_pretrained()"),_Zr=o(" class method or the "),Koe=a("a"),uZr=o("from_config()"),bZr=o(` class
method.`),vZr=l(),z$=a("p"),FZr=o("This class cannot be instantiated directly using "),swe=a("code"),TZr=o("__init__()"),MZr=o(" (throws an error)."),EZr=l(),ea=a("div"),F(Q$.$$.fragment),CZr=l(),lwe=a("p"),wZr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),AZr=l(),Mf=a("p"),LZr=o(`Note:
Loading a model from its configuration file does `),iwe=a("strong"),yZr=o("not"),xZr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Zoe=a("a"),$Zr=o("from_pretrained()"),kZr=o(" to load the model weights."),SZr=l(),F(hw.$$.fragment),RZr=l(),Yr=a("div"),F(W$.$$.fragment),PZr=l(),dwe=a("p"),BZr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),IZr=l(),xn=a("p"),NZr=o("The model class to instantiate is selected based on the "),cwe=a("code"),qZr=o("model_type"),jZr=o(` property of the config object (either
passed as an argument or loaded from `),fwe=a("code"),DZr=o("pretrained_model_name_or_path"),GZr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mwe=a("code"),OZr=o("pretrained_model_name_or_path"),VZr=o(":"),XZr=l(),gwe=a("ul"),pw=a("li"),hwe=a("strong"),zZr=o("bert"),QZr=o(" \u2014 "),ere=a("a"),WZr=o("FlaxBertForNextSentencePrediction"),HZr=o(" (BERT model)"),UZr=l(),F(_w.$$.fragment),pze=l(),Ef=a("h2"),uw=a("a"),pwe=a("span"),F(H$.$$.fragment),JZr=l(),_we=a("span"),YZr=o("FlaxAutoModelForImageClassification"),_ze=l(),Cr=a("div"),F(U$.$$.fragment),KZr=l(),Cf=a("p"),ZZr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),ore=a("a"),eet=o("from_pretrained()"),oet=o(" class method or the "),rre=a("a"),ret=o("from_config()"),tet=o(` class
method.`),aet=l(),J$=a("p"),net=o("This class cannot be instantiated directly using "),uwe=a("code"),set=o("__init__()"),iet=o(" (throws an error)."),det=l(),oa=a("div"),F(Y$.$$.fragment),cet=l(),bwe=a("p"),fet=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),met=l(),wf=a("p"),get=o(`Note:
Loading a model from its configuration file does `),vwe=a("strong"),het=o("not"),pet=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tre=a("a"),_et=o("from_pretrained()"),uet=o(" to load the model weights."),bet=l(),F(bw.$$.fragment),vet=l(),Kr=a("div"),F(K$.$$.fragment),Fet=l(),Fwe=a("p"),Tet=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Met=l(),$n=a("p"),Eet=o("The model class to instantiate is selected based on the "),Twe=a("code"),Cet=o("model_type"),wet=o(` property of the config object (either
passed as an argument or loaded from `),Mwe=a("code"),Aet=o("pretrained_model_name_or_path"),Let=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ewe=a("code"),yet=o("pretrained_model_name_or_path"),xet=o(":"),$et=l(),Z$=a("ul"),vw=a("li"),Cwe=a("strong"),ket=o("beit"),Set=o(" \u2014 "),are=a("a"),Ret=o("FlaxBeitForImageClassification"),Pet=o(" (BEiT model)"),Bet=l(),Fw=a("li"),wwe=a("strong"),Iet=o("vit"),Net=o(" \u2014 "),nre=a("a"),qet=o("FlaxViTForImageClassification"),jet=o(" (ViT model)"),Det=l(),F(Tw.$$.fragment),uze=l(),Af=a("h2"),Mw=a("a"),Awe=a("span"),F(ek.$$.fragment),Get=l(),Lwe=a("span"),Oet=o("FlaxAutoModelForVision2Seq"),bze=l(),wr=a("div"),F(ok.$$.fragment),Vet=l(),Lf=a("p"),Xet=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),sre=a("a"),zet=o("from_pretrained()"),Qet=o(" class method or the "),lre=a("a"),Wet=o("from_config()"),Het=o(` class
method.`),Uet=l(),rk=a("p"),Jet=o("This class cannot be instantiated directly using "),ywe=a("code"),Yet=o("__init__()"),Ket=o(" (throws an error)."),Zet=l(),ra=a("div"),F(tk.$$.fragment),eot=l(),xwe=a("p"),oot=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),rot=l(),yf=a("p"),tot=o(`Note:
Loading a model from its configuration file does `),$we=a("strong"),aot=o("not"),not=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ire=a("a"),sot=o("from_pretrained()"),lot=o(" to load the model weights."),iot=l(),F(Ew.$$.fragment),dot=l(),Zr=a("div"),F(ak.$$.fragment),cot=l(),kwe=a("p"),fot=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),mot=l(),kn=a("p"),got=o("The model class to instantiate is selected based on the "),Swe=a("code"),hot=o("model_type"),pot=o(` property of the config object (either
passed as an argument or loaded from `),Rwe=a("code"),_ot=o("pretrained_model_name_or_path"),uot=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pwe=a("code"),bot=o("pretrained_model_name_or_path"),vot=o(":"),Fot=l(),Bwe=a("ul"),Cw=a("li"),Iwe=a("strong"),Tot=o("vision-encoder-decoder"),Mot=o(" \u2014 "),dre=a("a"),Eot=o("FlaxVisionEncoderDecoderModel"),Cot=o(" (Vision Encoder decoder model)"),wot=l(),F(ww.$$.fragment),this.h()},l(f){const u=qXt('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var nk=s(p);m=n(nk,"A",{id:!0,class:!0,href:!0});var Nwe=s(m);_=n(Nwe,"SPAN",{});var qwe=s(_);T(d.$$.fragment,qwe),qwe.forEach(t),Nwe.forEach(t),h=i(nk),Eo=n(nk,"SPAN",{});var jwe=s(Eo);wi=r(jwe,"Auto Classes"),jwe.forEach(t),nk.forEach(t),Sf=i(f),nt=n(f,"P",{});var sk=s(nt);Ai=r(sk,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Li=n(sk,"CODE",{});var Dwe=s(Li);z6=r(Dwe,"from_pretrained()"),Dwe.forEach(t),Rf=r(sk,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),sk.forEach(t),Oe=i(f),Qe=n(f,"P",{});var Sn=s(Qe);yi=r(Sn,"Instantiating one of "),Rn=n(Sn,"A",{href:!0});var Gwe=s(Rn);Q6=r(Gwe,"AutoConfig"),Gwe.forEach(t),Pn=r(Sn,", "),Bn=n(Sn,"A",{href:!0});var Owe=s(Bn);W6=r(Owe,"AutoModel"),Owe.forEach(t),xi=r(Sn,`, and
`),In=n(Sn,"A",{href:!0});var Vwe=s(In);H6=r(Vwe,"AutoTokenizer"),Vwe.forEach(t),$i=r(Sn," will directly create a class of the relevant architecture. For instance"),Sn.forEach(t),Pf=i(f),T($a.$$.fragment,f),We=i(f),Ae=n(f,"P",{});var lk=s(Ae);wS=r(lk,"will create a model that is an instance of "),ki=n(lk,"A",{href:!0});var Xwe=s(ki);AS=r(Xwe,"BertModel"),Xwe.forEach(t),LS=r(lk,"."),lk.forEach(t),Co=i(f),ka=n(f,"P",{});var ik=s(ka);yS=r(ik,"There is one class of "),Bf=n(ik,"CODE",{});var zwe=s(Bf);xS=r(zwe,"AutoModel"),zwe.forEach(t),xWe=r(ik," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),ik.forEach(t),hVe=i(f),Si=n(f,"H2",{class:!0});var dk=s(Si);If=n(dk,"A",{id:!0,class:!0,href:!0});var Qwe=s(If);aae=n(Qwe,"SPAN",{});var Wwe=s(aae);T(U6.$$.fragment,Wwe),Wwe.forEach(t),Qwe.forEach(t),$We=i(dk),nae=n(dk,"SPAN",{});var Hwe=s(nae);kWe=r(Hwe,"Extending the Auto Classes"),Hwe.forEach(t),dk.forEach(t),pVe=i(f),Nn=n(f,"P",{});var xf=s(Nn);SWe=r(xf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),sae=n(xf,"CODE",{});var Uwe=s(sae);RWe=r(Uwe,"NewModel"),Uwe.forEach(t),PWe=r(xf,", make sure you have a "),lae=n(xf,"CODE",{});var Jwe=s(lae);BWe=r(Jwe,"NewModelConfig"),Jwe.forEach(t),IWe=r(xf,` then you can add those to the auto
classes like this:`),xf.forEach(t),_Ve=i(f),T(J6.$$.fragment,f),uVe=i(f),$S=n(f,"P",{});var Ywe=s($S);NWe=r(Ywe,"You will then be able to use the auto classes like you would usually do!"),Ywe.forEach(t),bVe=i(f),T(Nf.$$.fragment,f),vVe=i(f),Ri=n(f,"H2",{class:!0});var ck=s(Ri);qf=n(ck,"A",{id:!0,class:!0,href:!0});var Kwe=s(qf);iae=n(Kwe,"SPAN",{});var Zwe=s(iae);T(Y6.$$.fragment,Zwe),Zwe.forEach(t),Kwe.forEach(t),qWe=i(ck),dae=n(ck,"SPAN",{});var eAe=s(dae);jWe=r(eAe,"AutoConfig"),eAe.forEach(t),ck.forEach(t),FVe=i(f),wo=n(f,"DIV",{class:!0});var tt=s(wo);T(K6.$$.fragment,tt),DWe=i(tt),Z6=n(tt,"P",{});var fk=s(Z6);GWe=r(fk,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),kS=n(fk,"A",{href:!0});var oAe=s(kS);OWe=r(oAe,"from_pretrained()"),oAe.forEach(t),VWe=r(fk," class method."),fk.forEach(t),XWe=i(tt),eL=n(tt,"P",{});var mk=s(eL);zWe=r(mk,"This class cannot be instantiated directly using "),cae=n(mk,"CODE",{});var rAe=s(cae);QWe=r(rAe,"__init__()"),rAe.forEach(t),WWe=r(mk," (throws an error)."),mk.forEach(t),HWe=i(tt),Ar=n(tt,"DIV",{class:!0});var at=s(Ar);T(oL.$$.fragment,at),UWe=i(at),fae=n(at,"P",{});var tAe=s(fae);JWe=r(tAe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),tAe.forEach(t),YWe=i(at),Pi=n(at,"P",{});var $f=s(Pi);KWe=r($f,"The configuration class to instantiate is selected based on the "),mae=n($f,"CODE",{});var aAe=s(mae);ZWe=r(aAe,"model_type"),aAe.forEach(t),eHe=r($f,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),gae=n($f,"CODE",{});var nAe=s(gae);oHe=r(nAe,"pretrained_model_name_or_path"),nAe.forEach(t),rHe=r($f,":"),$f.forEach(t),tHe=i(at),A=n(at,"UL",{});var L=s(A);jf=n(L,"LI",{});var Aw=s(jf);hae=n(Aw,"STRONG",{});var sAe=s(hae);aHe=r(sAe,"albert"),sAe.forEach(t),nHe=r(Aw," \u2014 "),SS=n(Aw,"A",{href:!0});var lAe=s(SS);sHe=r(lAe,"AlbertConfig"),lAe.forEach(t),lHe=r(Aw," (ALBERT model)"),Aw.forEach(t),iHe=i(L),Df=n(L,"LI",{});var Lw=s(Df);pae=n(Lw,"STRONG",{});var iAe=s(pae);dHe=r(iAe,"bart"),iAe.forEach(t),cHe=r(Lw," \u2014 "),RS=n(Lw,"A",{href:!0});var dAe=s(RS);fHe=r(dAe,"BartConfig"),dAe.forEach(t),mHe=r(Lw," (BART model)"),Lw.forEach(t),gHe=i(L),Gf=n(L,"LI",{});var yw=s(Gf);_ae=n(yw,"STRONG",{});var cAe=s(_ae);hHe=r(cAe,"beit"),cAe.forEach(t),pHe=r(yw," \u2014 "),PS=n(yw,"A",{href:!0});var fAe=s(PS);_He=r(fAe,"BeitConfig"),fAe.forEach(t),uHe=r(yw," (BEiT model)"),yw.forEach(t),bHe=i(L),Of=n(L,"LI",{});var xw=s(Of);uae=n(xw,"STRONG",{});var mAe=s(uae);vHe=r(mAe,"bert"),mAe.forEach(t),FHe=r(xw," \u2014 "),BS=n(xw,"A",{href:!0});var gAe=s(BS);THe=r(gAe,"BertConfig"),gAe.forEach(t),MHe=r(xw," (BERT model)"),xw.forEach(t),EHe=i(L),Vf=n(L,"LI",{});var $w=s(Vf);bae=n($w,"STRONG",{});var hAe=s(bae);CHe=r(hAe,"bert-generation"),hAe.forEach(t),wHe=r($w," \u2014 "),IS=n($w,"A",{href:!0});var pAe=s(IS);AHe=r(pAe,"BertGenerationConfig"),pAe.forEach(t),LHe=r($w," (Bert Generation model)"),$w.forEach(t),yHe=i(L),Xf=n(L,"LI",{});var kw=s(Xf);vae=n(kw,"STRONG",{});var _Ae=s(vae);xHe=r(_Ae,"big_bird"),_Ae.forEach(t),$He=r(kw," \u2014 "),NS=n(kw,"A",{href:!0});var uAe=s(NS);kHe=r(uAe,"BigBirdConfig"),uAe.forEach(t),SHe=r(kw," (BigBird model)"),kw.forEach(t),RHe=i(L),zf=n(L,"LI",{});var Sw=s(zf);Fae=n(Sw,"STRONG",{});var bAe=s(Fae);PHe=r(bAe,"bigbird_pegasus"),bAe.forEach(t),BHe=r(Sw," \u2014 "),qS=n(Sw,"A",{href:!0});var vAe=s(qS);IHe=r(vAe,"BigBirdPegasusConfig"),vAe.forEach(t),NHe=r(Sw," (BigBird-Pegasus model)"),Sw.forEach(t),qHe=i(L),Qf=n(L,"LI",{});var Rw=s(Qf);Tae=n(Rw,"STRONG",{});var FAe=s(Tae);jHe=r(FAe,"blenderbot"),FAe.forEach(t),DHe=r(Rw," \u2014 "),jS=n(Rw,"A",{href:!0});var TAe=s(jS);GHe=r(TAe,"BlenderbotConfig"),TAe.forEach(t),OHe=r(Rw," (Blenderbot model)"),Rw.forEach(t),VHe=i(L),Wf=n(L,"LI",{});var Pw=s(Wf);Mae=n(Pw,"STRONG",{});var MAe=s(Mae);XHe=r(MAe,"blenderbot-small"),MAe.forEach(t),zHe=r(Pw," \u2014 "),DS=n(Pw,"A",{href:!0});var EAe=s(DS);QHe=r(EAe,"BlenderbotSmallConfig"),EAe.forEach(t),WHe=r(Pw," (BlenderbotSmall model)"),Pw.forEach(t),HHe=i(L),Hf=n(L,"LI",{});var Bw=s(Hf);Eae=n(Bw,"STRONG",{});var CAe=s(Eae);UHe=r(CAe,"bloom"),CAe.forEach(t),JHe=r(Bw," \u2014 "),GS=n(Bw,"A",{href:!0});var wAe=s(GS);YHe=r(wAe,"BloomConfig"),wAe.forEach(t),KHe=r(Bw," (BLOOM model)"),Bw.forEach(t),ZHe=i(L),Uf=n(L,"LI",{});var Iw=s(Uf);Cae=n(Iw,"STRONG",{});var AAe=s(Cae);eUe=r(AAe,"camembert"),AAe.forEach(t),oUe=r(Iw," \u2014 "),OS=n(Iw,"A",{href:!0});var LAe=s(OS);rUe=r(LAe,"CamembertConfig"),LAe.forEach(t),tUe=r(Iw," (CamemBERT model)"),Iw.forEach(t),aUe=i(L),Jf=n(L,"LI",{});var Nw=s(Jf);wae=n(Nw,"STRONG",{});var yAe=s(wae);nUe=r(yAe,"canine"),yAe.forEach(t),sUe=r(Nw," \u2014 "),VS=n(Nw,"A",{href:!0});var xAe=s(VS);lUe=r(xAe,"CanineConfig"),xAe.forEach(t),iUe=r(Nw," (CANINE model)"),Nw.forEach(t),dUe=i(L),Yf=n(L,"LI",{});var qw=s(Yf);Aae=n(qw,"STRONG",{});var $Ae=s(Aae);cUe=r($Ae,"clip"),$Ae.forEach(t),fUe=r(qw," \u2014 "),XS=n(qw,"A",{href:!0});var kAe=s(XS);mUe=r(kAe,"CLIPConfig"),kAe.forEach(t),gUe=r(qw," (CLIP model)"),qw.forEach(t),hUe=i(L),Kf=n(L,"LI",{});var jw=s(Kf);Lae=n(jw,"STRONG",{});var SAe=s(Lae);pUe=r(SAe,"codegen"),SAe.forEach(t),_Ue=r(jw," \u2014 "),zS=n(jw,"A",{href:!0});var RAe=s(zS);uUe=r(RAe,"CodeGenConfig"),RAe.forEach(t),bUe=r(jw," (CodeGen model)"),jw.forEach(t),vUe=i(L),Zf=n(L,"LI",{});var Dw=s(Zf);yae=n(Dw,"STRONG",{});var PAe=s(yae);FUe=r(PAe,"convbert"),PAe.forEach(t),TUe=r(Dw," \u2014 "),QS=n(Dw,"A",{href:!0});var BAe=s(QS);MUe=r(BAe,"ConvBertConfig"),BAe.forEach(t),EUe=r(Dw," (ConvBERT model)"),Dw.forEach(t),CUe=i(L),em=n(L,"LI",{});var Gw=s(em);xae=n(Gw,"STRONG",{});var IAe=s(xae);wUe=r(IAe,"convnext"),IAe.forEach(t),AUe=r(Gw," \u2014 "),WS=n(Gw,"A",{href:!0});var NAe=s(WS);LUe=r(NAe,"ConvNextConfig"),NAe.forEach(t),yUe=r(Gw," (ConvNeXT model)"),Gw.forEach(t),xUe=i(L),om=n(L,"LI",{});var Ow=s(om);$ae=n(Ow,"STRONG",{});var qAe=s($ae);$Ue=r(qAe,"ctrl"),qAe.forEach(t),kUe=r(Ow," \u2014 "),HS=n(Ow,"A",{href:!0});var jAe=s(HS);SUe=r(jAe,"CTRLConfig"),jAe.forEach(t),RUe=r(Ow," (CTRL model)"),Ow.forEach(t),PUe=i(L),rm=n(L,"LI",{});var Vw=s(rm);kae=n(Vw,"STRONG",{});var DAe=s(kae);BUe=r(DAe,"cvt"),DAe.forEach(t),IUe=r(Vw," \u2014 "),US=n(Vw,"A",{href:!0});var GAe=s(US);NUe=r(GAe,"CvtConfig"),GAe.forEach(t),qUe=r(Vw," (CvT model)"),Vw.forEach(t),jUe=i(L),tm=n(L,"LI",{});var Xw=s(tm);Sae=n(Xw,"STRONG",{});var OAe=s(Sae);DUe=r(OAe,"data2vec-audio"),OAe.forEach(t),GUe=r(Xw," \u2014 "),JS=n(Xw,"A",{href:!0});var VAe=s(JS);OUe=r(VAe,"Data2VecAudioConfig"),VAe.forEach(t),VUe=r(Xw," (Data2VecAudio model)"),Xw.forEach(t),XUe=i(L),am=n(L,"LI",{});var zw=s(am);Rae=n(zw,"STRONG",{});var XAe=s(Rae);zUe=r(XAe,"data2vec-text"),XAe.forEach(t),QUe=r(zw," \u2014 "),YS=n(zw,"A",{href:!0});var zAe=s(YS);WUe=r(zAe,"Data2VecTextConfig"),zAe.forEach(t),HUe=r(zw," (Data2VecText model)"),zw.forEach(t),UUe=i(L),nm=n(L,"LI",{});var Qw=s(nm);Pae=n(Qw,"STRONG",{});var QAe=s(Pae);JUe=r(QAe,"data2vec-vision"),QAe.forEach(t),YUe=r(Qw," \u2014 "),KS=n(Qw,"A",{href:!0});var WAe=s(KS);KUe=r(WAe,"Data2VecVisionConfig"),WAe.forEach(t),ZUe=r(Qw," (Data2VecVision model)"),Qw.forEach(t),eJe=i(L),sm=n(L,"LI",{});var Ww=s(sm);Bae=n(Ww,"STRONG",{});var HAe=s(Bae);oJe=r(HAe,"deberta"),HAe.forEach(t),rJe=r(Ww," \u2014 "),ZS=n(Ww,"A",{href:!0});var UAe=s(ZS);tJe=r(UAe,"DebertaConfig"),UAe.forEach(t),aJe=r(Ww," (DeBERTa model)"),Ww.forEach(t),nJe=i(L),lm=n(L,"LI",{});var Hw=s(lm);Iae=n(Hw,"STRONG",{});var JAe=s(Iae);sJe=r(JAe,"deberta-v2"),JAe.forEach(t),lJe=r(Hw," \u2014 "),eR=n(Hw,"A",{href:!0});var YAe=s(eR);iJe=r(YAe,"DebertaV2Config"),YAe.forEach(t),dJe=r(Hw," (DeBERTa-v2 model)"),Hw.forEach(t),cJe=i(L),im=n(L,"LI",{});var Uw=s(im);Nae=n(Uw,"STRONG",{});var Lot=s(Nae);fJe=r(Lot,"decision_transformer"),Lot.forEach(t),mJe=r(Uw," \u2014 "),oR=n(Uw,"A",{href:!0});var yot=s(oR);gJe=r(yot,"DecisionTransformerConfig"),yot.forEach(t),hJe=r(Uw," (Decision Transformer model)"),Uw.forEach(t),pJe=i(L),dm=n(L,"LI",{});var KAe=s(dm);qae=n(KAe,"STRONG",{});var xot=s(qae);_Je=r(xot,"deit"),xot.forEach(t),uJe=r(KAe," \u2014 "),rR=n(KAe,"A",{href:!0});var $ot=s(rR);bJe=r($ot,"DeiTConfig"),$ot.forEach(t),vJe=r(KAe," (DeiT model)"),KAe.forEach(t),FJe=i(L),cm=n(L,"LI",{});var ZAe=s(cm);jae=n(ZAe,"STRONG",{});var kot=s(jae);TJe=r(kot,"detr"),kot.forEach(t),MJe=r(ZAe," \u2014 "),tR=n(ZAe,"A",{href:!0});var Sot=s(tR);EJe=r(Sot,"DetrConfig"),Sot.forEach(t),CJe=r(ZAe," (DETR model)"),ZAe.forEach(t),wJe=i(L),fm=n(L,"LI",{});var e6e=s(fm);Dae=n(e6e,"STRONG",{});var Rot=s(Dae);AJe=r(Rot,"distilbert"),Rot.forEach(t),LJe=r(e6e," \u2014 "),aR=n(e6e,"A",{href:!0});var Pot=s(aR);yJe=r(Pot,"DistilBertConfig"),Pot.forEach(t),xJe=r(e6e," (DistilBERT model)"),e6e.forEach(t),$Je=i(L),mm=n(L,"LI",{});var o6e=s(mm);Gae=n(o6e,"STRONG",{});var Bot=s(Gae);kJe=r(Bot,"dpr"),Bot.forEach(t),SJe=r(o6e," \u2014 "),nR=n(o6e,"A",{href:!0});var Iot=s(nR);RJe=r(Iot,"DPRConfig"),Iot.forEach(t),PJe=r(o6e," (DPR model)"),o6e.forEach(t),BJe=i(L),gm=n(L,"LI",{});var r6e=s(gm);Oae=n(r6e,"STRONG",{});var Not=s(Oae);IJe=r(Not,"dpt"),Not.forEach(t),NJe=r(r6e," \u2014 "),sR=n(r6e,"A",{href:!0});var qot=s(sR);qJe=r(qot,"DPTConfig"),qot.forEach(t),jJe=r(r6e," (DPT model)"),r6e.forEach(t),DJe=i(L),hm=n(L,"LI",{});var t6e=s(hm);Vae=n(t6e,"STRONG",{});var jot=s(Vae);GJe=r(jot,"electra"),jot.forEach(t),OJe=r(t6e," \u2014 "),lR=n(t6e,"A",{href:!0});var Dot=s(lR);VJe=r(Dot,"ElectraConfig"),Dot.forEach(t),XJe=r(t6e," (ELECTRA model)"),t6e.forEach(t),zJe=i(L),pm=n(L,"LI",{});var a6e=s(pm);Xae=n(a6e,"STRONG",{});var Got=s(Xae);QJe=r(Got,"encoder-decoder"),Got.forEach(t),WJe=r(a6e," \u2014 "),iR=n(a6e,"A",{href:!0});var Oot=s(iR);HJe=r(Oot,"EncoderDecoderConfig"),Oot.forEach(t),UJe=r(a6e," (Encoder decoder model)"),a6e.forEach(t),JJe=i(L),_m=n(L,"LI",{});var n6e=s(_m);zae=n(n6e,"STRONG",{});var Vot=s(zae);YJe=r(Vot,"flaubert"),Vot.forEach(t),KJe=r(n6e," \u2014 "),dR=n(n6e,"A",{href:!0});var Xot=s(dR);ZJe=r(Xot,"FlaubertConfig"),Xot.forEach(t),eYe=r(n6e," (FlauBERT model)"),n6e.forEach(t),oYe=i(L),um=n(L,"LI",{});var s6e=s(um);Qae=n(s6e,"STRONG",{});var zot=s(Qae);rYe=r(zot,"flava"),zot.forEach(t),tYe=r(s6e," \u2014 "),cR=n(s6e,"A",{href:!0});var Qot=s(cR);aYe=r(Qot,"FlavaConfig"),Qot.forEach(t),nYe=r(s6e," (FLAVA model)"),s6e.forEach(t),sYe=i(L),bm=n(L,"LI",{});var l6e=s(bm);Wae=n(l6e,"STRONG",{});var Wot=s(Wae);lYe=r(Wot,"fnet"),Wot.forEach(t),iYe=r(l6e," \u2014 "),fR=n(l6e,"A",{href:!0});var Hot=s(fR);dYe=r(Hot,"FNetConfig"),Hot.forEach(t),cYe=r(l6e," (FNet model)"),l6e.forEach(t),fYe=i(L),vm=n(L,"LI",{});var i6e=s(vm);Hae=n(i6e,"STRONG",{});var Uot=s(Hae);mYe=r(Uot,"fsmt"),Uot.forEach(t),gYe=r(i6e," \u2014 "),mR=n(i6e,"A",{href:!0});var Jot=s(mR);hYe=r(Jot,"FSMTConfig"),Jot.forEach(t),pYe=r(i6e," (FairSeq Machine-Translation model)"),i6e.forEach(t),_Ye=i(L),Fm=n(L,"LI",{});var d6e=s(Fm);Uae=n(d6e,"STRONG",{});var Yot=s(Uae);uYe=r(Yot,"funnel"),Yot.forEach(t),bYe=r(d6e," \u2014 "),gR=n(d6e,"A",{href:!0});var Kot=s(gR);vYe=r(Kot,"FunnelConfig"),Kot.forEach(t),FYe=r(d6e," (Funnel Transformer model)"),d6e.forEach(t),TYe=i(L),Tm=n(L,"LI",{});var c6e=s(Tm);Jae=n(c6e,"STRONG",{});var Zot=s(Jae);MYe=r(Zot,"glpn"),Zot.forEach(t),EYe=r(c6e," \u2014 "),hR=n(c6e,"A",{href:!0});var ert=s(hR);CYe=r(ert,"GLPNConfig"),ert.forEach(t),wYe=r(c6e," (GLPN model)"),c6e.forEach(t),AYe=i(L),Mm=n(L,"LI",{});var f6e=s(Mm);Yae=n(f6e,"STRONG",{});var ort=s(Yae);LYe=r(ort,"gpt2"),ort.forEach(t),yYe=r(f6e," \u2014 "),pR=n(f6e,"A",{href:!0});var rrt=s(pR);xYe=r(rrt,"GPT2Config"),rrt.forEach(t),$Ye=r(f6e," (OpenAI GPT-2 model)"),f6e.forEach(t),kYe=i(L),Em=n(L,"LI",{});var m6e=s(Em);Kae=n(m6e,"STRONG",{});var trt=s(Kae);SYe=r(trt,"gpt_neo"),trt.forEach(t),RYe=r(m6e," \u2014 "),_R=n(m6e,"A",{href:!0});var art=s(_R);PYe=r(art,"GPTNeoConfig"),art.forEach(t),BYe=r(m6e," (GPT Neo model)"),m6e.forEach(t),IYe=i(L),Cm=n(L,"LI",{});var g6e=s(Cm);Zae=n(g6e,"STRONG",{});var nrt=s(Zae);NYe=r(nrt,"gpt_neox"),nrt.forEach(t),qYe=r(g6e," \u2014 "),uR=n(g6e,"A",{href:!0});var srt=s(uR);jYe=r(srt,"GPTNeoXConfig"),srt.forEach(t),DYe=r(g6e," (GPT NeoX model)"),g6e.forEach(t),GYe=i(L),wm=n(L,"LI",{});var h6e=s(wm);ene=n(h6e,"STRONG",{});var lrt=s(ene);OYe=r(lrt,"gptj"),lrt.forEach(t),VYe=r(h6e," \u2014 "),bR=n(h6e,"A",{href:!0});var irt=s(bR);XYe=r(irt,"GPTJConfig"),irt.forEach(t),zYe=r(h6e," (GPT-J model)"),h6e.forEach(t),QYe=i(L),Am=n(L,"LI",{});var p6e=s(Am);one=n(p6e,"STRONG",{});var drt=s(one);WYe=r(drt,"groupvit"),drt.forEach(t),HYe=r(p6e," \u2014 "),vR=n(p6e,"A",{href:!0});var crt=s(vR);UYe=r(crt,"GroupViTConfig"),crt.forEach(t),JYe=r(p6e," (GroupViT model)"),p6e.forEach(t),YYe=i(L),Lm=n(L,"LI",{});var _6e=s(Lm);rne=n(_6e,"STRONG",{});var frt=s(rne);KYe=r(frt,"hubert"),frt.forEach(t),ZYe=r(_6e," \u2014 "),FR=n(_6e,"A",{href:!0});var mrt=s(FR);eKe=r(mrt,"HubertConfig"),mrt.forEach(t),oKe=r(_6e," (Hubert model)"),_6e.forEach(t),rKe=i(L),ym=n(L,"LI",{});var u6e=s(ym);tne=n(u6e,"STRONG",{});var grt=s(tne);tKe=r(grt,"ibert"),grt.forEach(t),aKe=r(u6e," \u2014 "),TR=n(u6e,"A",{href:!0});var hrt=s(TR);nKe=r(hrt,"IBertConfig"),hrt.forEach(t),sKe=r(u6e," (I-BERT model)"),u6e.forEach(t),lKe=i(L),xm=n(L,"LI",{});var b6e=s(xm);ane=n(b6e,"STRONG",{});var prt=s(ane);iKe=r(prt,"imagegpt"),prt.forEach(t),dKe=r(b6e," \u2014 "),MR=n(b6e,"A",{href:!0});var _rt=s(MR);cKe=r(_rt,"ImageGPTConfig"),_rt.forEach(t),fKe=r(b6e," (ImageGPT model)"),b6e.forEach(t),mKe=i(L),$m=n(L,"LI",{});var v6e=s($m);nne=n(v6e,"STRONG",{});var urt=s(nne);gKe=r(urt,"layoutlm"),urt.forEach(t),hKe=r(v6e," \u2014 "),ER=n(v6e,"A",{href:!0});var brt=s(ER);pKe=r(brt,"LayoutLMConfig"),brt.forEach(t),_Ke=r(v6e," (LayoutLM model)"),v6e.forEach(t),uKe=i(L),km=n(L,"LI",{});var F6e=s(km);sne=n(F6e,"STRONG",{});var vrt=s(sne);bKe=r(vrt,"layoutlmv2"),vrt.forEach(t),vKe=r(F6e," \u2014 "),CR=n(F6e,"A",{href:!0});var Frt=s(CR);FKe=r(Frt,"LayoutLMv2Config"),Frt.forEach(t),TKe=r(F6e," (LayoutLMv2 model)"),F6e.forEach(t),MKe=i(L),Sm=n(L,"LI",{});var T6e=s(Sm);lne=n(T6e,"STRONG",{});var Trt=s(lne);EKe=r(Trt,"layoutlmv3"),Trt.forEach(t),CKe=r(T6e," \u2014 "),wR=n(T6e,"A",{href:!0});var Mrt=s(wR);wKe=r(Mrt,"LayoutLMv3Config"),Mrt.forEach(t),AKe=r(T6e," (LayoutLMv3 model)"),T6e.forEach(t),LKe=i(L),Rm=n(L,"LI",{});var M6e=s(Rm);ine=n(M6e,"STRONG",{});var Ert=s(ine);yKe=r(Ert,"led"),Ert.forEach(t),xKe=r(M6e," \u2014 "),AR=n(M6e,"A",{href:!0});var Crt=s(AR);$Ke=r(Crt,"LEDConfig"),Crt.forEach(t),kKe=r(M6e," (LED model)"),M6e.forEach(t),SKe=i(L),Pm=n(L,"LI",{});var E6e=s(Pm);dne=n(E6e,"STRONG",{});var wrt=s(dne);RKe=r(wrt,"levit"),wrt.forEach(t),PKe=r(E6e," \u2014 "),LR=n(E6e,"A",{href:!0});var Art=s(LR);BKe=r(Art,"LevitConfig"),Art.forEach(t),IKe=r(E6e," (LeViT model)"),E6e.forEach(t),NKe=i(L),Bm=n(L,"LI",{});var C6e=s(Bm);cne=n(C6e,"STRONG",{});var Lrt=s(cne);qKe=r(Lrt,"longformer"),Lrt.forEach(t),jKe=r(C6e," \u2014 "),yR=n(C6e,"A",{href:!0});var yrt=s(yR);DKe=r(yrt,"LongformerConfig"),yrt.forEach(t),GKe=r(C6e," (Longformer model)"),C6e.forEach(t),OKe=i(L),Im=n(L,"LI",{});var w6e=s(Im);fne=n(w6e,"STRONG",{});var xrt=s(fne);VKe=r(xrt,"longt5"),xrt.forEach(t),XKe=r(w6e," \u2014 "),xR=n(w6e,"A",{href:!0});var $rt=s(xR);zKe=r($rt,"LongT5Config"),$rt.forEach(t),QKe=r(w6e," (LongT5 model)"),w6e.forEach(t),WKe=i(L),Nm=n(L,"LI",{});var A6e=s(Nm);mne=n(A6e,"STRONG",{});var krt=s(mne);HKe=r(krt,"luke"),krt.forEach(t),UKe=r(A6e," \u2014 "),$R=n(A6e,"A",{href:!0});var Srt=s($R);JKe=r(Srt,"LukeConfig"),Srt.forEach(t),YKe=r(A6e," (LUKE model)"),A6e.forEach(t),KKe=i(L),qm=n(L,"LI",{});var L6e=s(qm);gne=n(L6e,"STRONG",{});var Rrt=s(gne);ZKe=r(Rrt,"lxmert"),Rrt.forEach(t),eZe=r(L6e," \u2014 "),kR=n(L6e,"A",{href:!0});var Prt=s(kR);oZe=r(Prt,"LxmertConfig"),Prt.forEach(t),rZe=r(L6e," (LXMERT model)"),L6e.forEach(t),tZe=i(L),jm=n(L,"LI",{});var y6e=s(jm);hne=n(y6e,"STRONG",{});var Brt=s(hne);aZe=r(Brt,"m2m_100"),Brt.forEach(t),nZe=r(y6e," \u2014 "),SR=n(y6e,"A",{href:!0});var Irt=s(SR);sZe=r(Irt,"M2M100Config"),Irt.forEach(t),lZe=r(y6e," (M2M100 model)"),y6e.forEach(t),iZe=i(L),Dm=n(L,"LI",{});var x6e=s(Dm);pne=n(x6e,"STRONG",{});var Nrt=s(pne);dZe=r(Nrt,"marian"),Nrt.forEach(t),cZe=r(x6e," \u2014 "),RR=n(x6e,"A",{href:!0});var qrt=s(RR);fZe=r(qrt,"MarianConfig"),qrt.forEach(t),mZe=r(x6e," (Marian model)"),x6e.forEach(t),gZe=i(L),Gm=n(L,"LI",{});var $6e=s(Gm);_ne=n($6e,"STRONG",{});var jrt=s(_ne);hZe=r(jrt,"maskformer"),jrt.forEach(t),pZe=r($6e," \u2014 "),PR=n($6e,"A",{href:!0});var Drt=s(PR);_Ze=r(Drt,"MaskFormerConfig"),Drt.forEach(t),uZe=r($6e," (MaskFormer model)"),$6e.forEach(t),bZe=i(L),Om=n(L,"LI",{});var k6e=s(Om);une=n(k6e,"STRONG",{});var Grt=s(une);vZe=r(Grt,"mbart"),Grt.forEach(t),FZe=r(k6e," \u2014 "),BR=n(k6e,"A",{href:!0});var Ort=s(BR);TZe=r(Ort,"MBartConfig"),Ort.forEach(t),MZe=r(k6e," (mBART model)"),k6e.forEach(t),EZe=i(L),Vm=n(L,"LI",{});var S6e=s(Vm);bne=n(S6e,"STRONG",{});var Vrt=s(bne);CZe=r(Vrt,"mctct"),Vrt.forEach(t),wZe=r(S6e," \u2014 "),IR=n(S6e,"A",{href:!0});var Xrt=s(IR);AZe=r(Xrt,"MCTCTConfig"),Xrt.forEach(t),LZe=r(S6e," (M-CTC-T model)"),S6e.forEach(t),yZe=i(L),Xm=n(L,"LI",{});var R6e=s(Xm);vne=n(R6e,"STRONG",{});var zrt=s(vne);xZe=r(zrt,"megatron-bert"),zrt.forEach(t),$Ze=r(R6e," \u2014 "),NR=n(R6e,"A",{href:!0});var Qrt=s(NR);kZe=r(Qrt,"MegatronBertConfig"),Qrt.forEach(t),SZe=r(R6e," (Megatron-BERT model)"),R6e.forEach(t),RZe=i(L),zm=n(L,"LI",{});var P6e=s(zm);Fne=n(P6e,"STRONG",{});var Wrt=s(Fne);PZe=r(Wrt,"mobilebert"),Wrt.forEach(t),BZe=r(P6e," \u2014 "),qR=n(P6e,"A",{href:!0});var Hrt=s(qR);IZe=r(Hrt,"MobileBertConfig"),Hrt.forEach(t),NZe=r(P6e," (MobileBERT model)"),P6e.forEach(t),qZe=i(L),Qm=n(L,"LI",{});var B6e=s(Qm);Tne=n(B6e,"STRONG",{});var Urt=s(Tne);jZe=r(Urt,"mpnet"),Urt.forEach(t),DZe=r(B6e," \u2014 "),jR=n(B6e,"A",{href:!0});var Jrt=s(jR);GZe=r(Jrt,"MPNetConfig"),Jrt.forEach(t),OZe=r(B6e," (MPNet model)"),B6e.forEach(t),VZe=i(L),Wm=n(L,"LI",{});var I6e=s(Wm);Mne=n(I6e,"STRONG",{});var Yrt=s(Mne);XZe=r(Yrt,"mt5"),Yrt.forEach(t),zZe=r(I6e," \u2014 "),DR=n(I6e,"A",{href:!0});var Krt=s(DR);QZe=r(Krt,"MT5Config"),Krt.forEach(t),WZe=r(I6e," (MT5 model)"),I6e.forEach(t),HZe=i(L),Hm=n(L,"LI",{});var N6e=s(Hm);Ene=n(N6e,"STRONG",{});var Zrt=s(Ene);UZe=r(Zrt,"mvp"),Zrt.forEach(t),JZe=r(N6e," \u2014 "),GR=n(N6e,"A",{href:!0});var ett=s(GR);YZe=r(ett,"MvpConfig"),ett.forEach(t),KZe=r(N6e," (MVP model)"),N6e.forEach(t),ZZe=i(L),Um=n(L,"LI",{});var q6e=s(Um);Cne=n(q6e,"STRONG",{});var ott=s(Cne);eeo=r(ott,"nezha"),ott.forEach(t),oeo=r(q6e," \u2014 "),OR=n(q6e,"A",{href:!0});var rtt=s(OR);reo=r(rtt,"NezhaConfig"),rtt.forEach(t),teo=r(q6e," (Nezha model)"),q6e.forEach(t),aeo=i(L),Jm=n(L,"LI",{});var j6e=s(Jm);wne=n(j6e,"STRONG",{});var ttt=s(wne);neo=r(ttt,"nystromformer"),ttt.forEach(t),seo=r(j6e," \u2014 "),VR=n(j6e,"A",{href:!0});var att=s(VR);leo=r(att,"NystromformerConfig"),att.forEach(t),ieo=r(j6e," (Nystr\xF6mformer model)"),j6e.forEach(t),deo=i(L),Ym=n(L,"LI",{});var D6e=s(Ym);Ane=n(D6e,"STRONG",{});var ntt=s(Ane);ceo=r(ntt,"openai-gpt"),ntt.forEach(t),feo=r(D6e," \u2014 "),XR=n(D6e,"A",{href:!0});var stt=s(XR);meo=r(stt,"OpenAIGPTConfig"),stt.forEach(t),geo=r(D6e," (OpenAI GPT model)"),D6e.forEach(t),heo=i(L),Km=n(L,"LI",{});var G6e=s(Km);Lne=n(G6e,"STRONG",{});var ltt=s(Lne);peo=r(ltt,"opt"),ltt.forEach(t),_eo=r(G6e," \u2014 "),zR=n(G6e,"A",{href:!0});var itt=s(zR);ueo=r(itt,"OPTConfig"),itt.forEach(t),beo=r(G6e," (OPT model)"),G6e.forEach(t),veo=i(L),Zm=n(L,"LI",{});var O6e=s(Zm);yne=n(O6e,"STRONG",{});var dtt=s(yne);Feo=r(dtt,"pegasus"),dtt.forEach(t),Teo=r(O6e," \u2014 "),QR=n(O6e,"A",{href:!0});var ctt=s(QR);Meo=r(ctt,"PegasusConfig"),ctt.forEach(t),Eeo=r(O6e," (Pegasus model)"),O6e.forEach(t),Ceo=i(L),eg=n(L,"LI",{});var V6e=s(eg);xne=n(V6e,"STRONG",{});var ftt=s(xne);weo=r(ftt,"perceiver"),ftt.forEach(t),Aeo=r(V6e," \u2014 "),WR=n(V6e,"A",{href:!0});var mtt=s(WR);Leo=r(mtt,"PerceiverConfig"),mtt.forEach(t),yeo=r(V6e," (Perceiver model)"),V6e.forEach(t),xeo=i(L),og=n(L,"LI",{});var X6e=s(og);$ne=n(X6e,"STRONG",{});var gtt=s($ne);$eo=r(gtt,"plbart"),gtt.forEach(t),keo=r(X6e," \u2014 "),HR=n(X6e,"A",{href:!0});var htt=s(HR);Seo=r(htt,"PLBartConfig"),htt.forEach(t),Reo=r(X6e," (PLBart model)"),X6e.forEach(t),Peo=i(L),rg=n(L,"LI",{});var z6e=s(rg);kne=n(z6e,"STRONG",{});var ptt=s(kne);Beo=r(ptt,"poolformer"),ptt.forEach(t),Ieo=r(z6e," \u2014 "),UR=n(z6e,"A",{href:!0});var _tt=s(UR);Neo=r(_tt,"PoolFormerConfig"),_tt.forEach(t),qeo=r(z6e," (PoolFormer model)"),z6e.forEach(t),jeo=i(L),tg=n(L,"LI",{});var Q6e=s(tg);Sne=n(Q6e,"STRONG",{});var utt=s(Sne);Deo=r(utt,"prophetnet"),utt.forEach(t),Geo=r(Q6e," \u2014 "),JR=n(Q6e,"A",{href:!0});var btt=s(JR);Oeo=r(btt,"ProphetNetConfig"),btt.forEach(t),Veo=r(Q6e," (ProphetNet model)"),Q6e.forEach(t),Xeo=i(L),ag=n(L,"LI",{});var W6e=s(ag);Rne=n(W6e,"STRONG",{});var vtt=s(Rne);zeo=r(vtt,"qdqbert"),vtt.forEach(t),Qeo=r(W6e," \u2014 "),YR=n(W6e,"A",{href:!0});var Ftt=s(YR);Weo=r(Ftt,"QDQBertConfig"),Ftt.forEach(t),Heo=r(W6e," (QDQBert model)"),W6e.forEach(t),Ueo=i(L),ng=n(L,"LI",{});var H6e=s(ng);Pne=n(H6e,"STRONG",{});var Ttt=s(Pne);Jeo=r(Ttt,"rag"),Ttt.forEach(t),Yeo=r(H6e," \u2014 "),KR=n(H6e,"A",{href:!0});var Mtt=s(KR);Keo=r(Mtt,"RagConfig"),Mtt.forEach(t),Zeo=r(H6e," (RAG model)"),H6e.forEach(t),eoo=i(L),sg=n(L,"LI",{});var U6e=s(sg);Bne=n(U6e,"STRONG",{});var Ett=s(Bne);ooo=r(Ett,"realm"),Ett.forEach(t),roo=r(U6e," \u2014 "),ZR=n(U6e,"A",{href:!0});var Ctt=s(ZR);too=r(Ctt,"RealmConfig"),Ctt.forEach(t),aoo=r(U6e," (REALM model)"),U6e.forEach(t),noo=i(L),lg=n(L,"LI",{});var J6e=s(lg);Ine=n(J6e,"STRONG",{});var wtt=s(Ine);soo=r(wtt,"reformer"),wtt.forEach(t),loo=r(J6e," \u2014 "),eP=n(J6e,"A",{href:!0});var Att=s(eP);ioo=r(Att,"ReformerConfig"),Att.forEach(t),doo=r(J6e," (Reformer model)"),J6e.forEach(t),coo=i(L),ig=n(L,"LI",{});var Y6e=s(ig);Nne=n(Y6e,"STRONG",{});var Ltt=s(Nne);foo=r(Ltt,"regnet"),Ltt.forEach(t),moo=r(Y6e," \u2014 "),oP=n(Y6e,"A",{href:!0});var ytt=s(oP);goo=r(ytt,"RegNetConfig"),ytt.forEach(t),hoo=r(Y6e," (RegNet model)"),Y6e.forEach(t),poo=i(L),dg=n(L,"LI",{});var K6e=s(dg);qne=n(K6e,"STRONG",{});var xtt=s(qne);_oo=r(xtt,"rembert"),xtt.forEach(t),uoo=r(K6e," \u2014 "),rP=n(K6e,"A",{href:!0});var $tt=s(rP);boo=r($tt,"RemBertConfig"),$tt.forEach(t),voo=r(K6e," (RemBERT model)"),K6e.forEach(t),Foo=i(L),cg=n(L,"LI",{});var Z6e=s(cg);jne=n(Z6e,"STRONG",{});var ktt=s(jne);Too=r(ktt,"resnet"),ktt.forEach(t),Moo=r(Z6e," \u2014 "),tP=n(Z6e,"A",{href:!0});var Stt=s(tP);Eoo=r(Stt,"ResNetConfig"),Stt.forEach(t),Coo=r(Z6e," (ResNet model)"),Z6e.forEach(t),woo=i(L),fg=n(L,"LI",{});var eLe=s(fg);Dne=n(eLe,"STRONG",{});var Rtt=s(Dne);Aoo=r(Rtt,"retribert"),Rtt.forEach(t),Loo=r(eLe," \u2014 "),aP=n(eLe,"A",{href:!0});var Ptt=s(aP);yoo=r(Ptt,"RetriBertConfig"),Ptt.forEach(t),xoo=r(eLe," (RetriBERT model)"),eLe.forEach(t),$oo=i(L),mg=n(L,"LI",{});var oLe=s(mg);Gne=n(oLe,"STRONG",{});var Btt=s(Gne);koo=r(Btt,"roberta"),Btt.forEach(t),Soo=r(oLe," \u2014 "),nP=n(oLe,"A",{href:!0});var Itt=s(nP);Roo=r(Itt,"RobertaConfig"),Itt.forEach(t),Poo=r(oLe," (RoBERTa model)"),oLe.forEach(t),Boo=i(L),gg=n(L,"LI",{});var rLe=s(gg);One=n(rLe,"STRONG",{});var Ntt=s(One);Ioo=r(Ntt,"roformer"),Ntt.forEach(t),Noo=r(rLe," \u2014 "),sP=n(rLe,"A",{href:!0});var qtt=s(sP);qoo=r(qtt,"RoFormerConfig"),qtt.forEach(t),joo=r(rLe," (RoFormer model)"),rLe.forEach(t),Doo=i(L),hg=n(L,"LI",{});var tLe=s(hg);Vne=n(tLe,"STRONG",{});var jtt=s(Vne);Goo=r(jtt,"segformer"),jtt.forEach(t),Ooo=r(tLe," \u2014 "),lP=n(tLe,"A",{href:!0});var Dtt=s(lP);Voo=r(Dtt,"SegformerConfig"),Dtt.forEach(t),Xoo=r(tLe," (SegFormer model)"),tLe.forEach(t),zoo=i(L),pg=n(L,"LI",{});var aLe=s(pg);Xne=n(aLe,"STRONG",{});var Gtt=s(Xne);Qoo=r(Gtt,"sew"),Gtt.forEach(t),Woo=r(aLe," \u2014 "),iP=n(aLe,"A",{href:!0});var Ott=s(iP);Hoo=r(Ott,"SEWConfig"),Ott.forEach(t),Uoo=r(aLe," (SEW model)"),aLe.forEach(t),Joo=i(L),_g=n(L,"LI",{});var nLe=s(_g);zne=n(nLe,"STRONG",{});var Vtt=s(zne);Yoo=r(Vtt,"sew-d"),Vtt.forEach(t),Koo=r(nLe," \u2014 "),dP=n(nLe,"A",{href:!0});var Xtt=s(dP);Zoo=r(Xtt,"SEWDConfig"),Xtt.forEach(t),ero=r(nLe," (SEW-D model)"),nLe.forEach(t),oro=i(L),ug=n(L,"LI",{});var sLe=s(ug);Qne=n(sLe,"STRONG",{});var ztt=s(Qne);rro=r(ztt,"speech-encoder-decoder"),ztt.forEach(t),tro=r(sLe," \u2014 "),cP=n(sLe,"A",{href:!0});var Qtt=s(cP);aro=r(Qtt,"SpeechEncoderDecoderConfig"),Qtt.forEach(t),nro=r(sLe," (Speech Encoder decoder model)"),sLe.forEach(t),sro=i(L),bg=n(L,"LI",{});var lLe=s(bg);Wne=n(lLe,"STRONG",{});var Wtt=s(Wne);lro=r(Wtt,"speech_to_text"),Wtt.forEach(t),iro=r(lLe," \u2014 "),fP=n(lLe,"A",{href:!0});var Htt=s(fP);dro=r(Htt,"Speech2TextConfig"),Htt.forEach(t),cro=r(lLe," (Speech2Text model)"),lLe.forEach(t),fro=i(L),vg=n(L,"LI",{});var iLe=s(vg);Hne=n(iLe,"STRONG",{});var Utt=s(Hne);mro=r(Utt,"speech_to_text_2"),Utt.forEach(t),gro=r(iLe," \u2014 "),mP=n(iLe,"A",{href:!0});var Jtt=s(mP);hro=r(Jtt,"Speech2Text2Config"),Jtt.forEach(t),pro=r(iLe," (Speech2Text2 model)"),iLe.forEach(t),_ro=i(L),Fg=n(L,"LI",{});var dLe=s(Fg);Une=n(dLe,"STRONG",{});var Ytt=s(Une);uro=r(Ytt,"splinter"),Ytt.forEach(t),bro=r(dLe," \u2014 "),gP=n(dLe,"A",{href:!0});var Ktt=s(gP);vro=r(Ktt,"SplinterConfig"),Ktt.forEach(t),Fro=r(dLe," (Splinter model)"),dLe.forEach(t),Tro=i(L),Tg=n(L,"LI",{});var cLe=s(Tg);Jne=n(cLe,"STRONG",{});var Ztt=s(Jne);Mro=r(Ztt,"squeezebert"),Ztt.forEach(t),Ero=r(cLe," \u2014 "),hP=n(cLe,"A",{href:!0});var eat=s(hP);Cro=r(eat,"SqueezeBertConfig"),eat.forEach(t),wro=r(cLe," (SqueezeBERT model)"),cLe.forEach(t),Aro=i(L),Mg=n(L,"LI",{});var fLe=s(Mg);Yne=n(fLe,"STRONG",{});var oat=s(Yne);Lro=r(oat,"swin"),oat.forEach(t),yro=r(fLe," \u2014 "),pP=n(fLe,"A",{href:!0});var rat=s(pP);xro=r(rat,"SwinConfig"),rat.forEach(t),$ro=r(fLe," (Swin Transformer model)"),fLe.forEach(t),kro=i(L),Eg=n(L,"LI",{});var mLe=s(Eg);Kne=n(mLe,"STRONG",{});var tat=s(Kne);Sro=r(tat,"t5"),tat.forEach(t),Rro=r(mLe," \u2014 "),_P=n(mLe,"A",{href:!0});var aat=s(_P);Pro=r(aat,"T5Config"),aat.forEach(t),Bro=r(mLe," (T5 model)"),mLe.forEach(t),Iro=i(L),Cg=n(L,"LI",{});var gLe=s(Cg);Zne=n(gLe,"STRONG",{});var nat=s(Zne);Nro=r(nat,"tapas"),nat.forEach(t),qro=r(gLe," \u2014 "),uP=n(gLe,"A",{href:!0});var sat=s(uP);jro=r(sat,"TapasConfig"),sat.forEach(t),Dro=r(gLe," (TAPAS model)"),gLe.forEach(t),Gro=i(L),wg=n(L,"LI",{});var hLe=s(wg);ese=n(hLe,"STRONG",{});var lat=s(ese);Oro=r(lat,"trajectory_transformer"),lat.forEach(t),Vro=r(hLe," \u2014 "),bP=n(hLe,"A",{href:!0});var iat=s(bP);Xro=r(iat,"TrajectoryTransformerConfig"),iat.forEach(t),zro=r(hLe," (Trajectory Transformer model)"),hLe.forEach(t),Qro=i(L),Ag=n(L,"LI",{});var pLe=s(Ag);ose=n(pLe,"STRONG",{});var dat=s(ose);Wro=r(dat,"transfo-xl"),dat.forEach(t),Hro=r(pLe," \u2014 "),vP=n(pLe,"A",{href:!0});var cat=s(vP);Uro=r(cat,"TransfoXLConfig"),cat.forEach(t),Jro=r(pLe," (Transformer-XL model)"),pLe.forEach(t),Yro=i(L),Lg=n(L,"LI",{});var _Le=s(Lg);rse=n(_Le,"STRONG",{});var fat=s(rse);Kro=r(fat,"trocr"),fat.forEach(t),Zro=r(_Le," \u2014 "),FP=n(_Le,"A",{href:!0});var mat=s(FP);eto=r(mat,"TrOCRConfig"),mat.forEach(t),oto=r(_Le," (TrOCR model)"),_Le.forEach(t),rto=i(L),yg=n(L,"LI",{});var uLe=s(yg);tse=n(uLe,"STRONG",{});var gat=s(tse);tto=r(gat,"unispeech"),gat.forEach(t),ato=r(uLe," \u2014 "),TP=n(uLe,"A",{href:!0});var hat=s(TP);nto=r(hat,"UniSpeechConfig"),hat.forEach(t),sto=r(uLe," (UniSpeech model)"),uLe.forEach(t),lto=i(L),xg=n(L,"LI",{});var bLe=s(xg);ase=n(bLe,"STRONG",{});var pat=s(ase);ito=r(pat,"unispeech-sat"),pat.forEach(t),dto=r(bLe," \u2014 "),MP=n(bLe,"A",{href:!0});var _at=s(MP);cto=r(_at,"UniSpeechSatConfig"),_at.forEach(t),fto=r(bLe," (UniSpeechSat model)"),bLe.forEach(t),mto=i(L),$g=n(L,"LI",{});var vLe=s($g);nse=n(vLe,"STRONG",{});var uat=s(nse);gto=r(uat,"van"),uat.forEach(t),hto=r(vLe," \u2014 "),EP=n(vLe,"A",{href:!0});var bat=s(EP);pto=r(bat,"VanConfig"),bat.forEach(t),_to=r(vLe," (VAN model)"),vLe.forEach(t),uto=i(L),kg=n(L,"LI",{});var FLe=s(kg);sse=n(FLe,"STRONG",{});var vat=s(sse);bto=r(vat,"vilt"),vat.forEach(t),vto=r(FLe," \u2014 "),CP=n(FLe,"A",{href:!0});var Fat=s(CP);Fto=r(Fat,"ViltConfig"),Fat.forEach(t),Tto=r(FLe," (ViLT model)"),FLe.forEach(t),Mto=i(L),Sg=n(L,"LI",{});var TLe=s(Sg);lse=n(TLe,"STRONG",{});var Tat=s(lse);Eto=r(Tat,"vision-encoder-decoder"),Tat.forEach(t),Cto=r(TLe," \u2014 "),wP=n(TLe,"A",{href:!0});var Mat=s(wP);wto=r(Mat,"VisionEncoderDecoderConfig"),Mat.forEach(t),Ato=r(TLe," (Vision Encoder decoder model)"),TLe.forEach(t),Lto=i(L),Rg=n(L,"LI",{});var MLe=s(Rg);ise=n(MLe,"STRONG",{});var Eat=s(ise);yto=r(Eat,"vision-text-dual-encoder"),Eat.forEach(t),xto=r(MLe," \u2014 "),AP=n(MLe,"A",{href:!0});var Cat=s(AP);$to=r(Cat,"VisionTextDualEncoderConfig"),Cat.forEach(t),kto=r(MLe," (VisionTextDualEncoder model)"),MLe.forEach(t),Sto=i(L),Pg=n(L,"LI",{});var ELe=s(Pg);dse=n(ELe,"STRONG",{});var wat=s(dse);Rto=r(wat,"visual_bert"),wat.forEach(t),Pto=r(ELe," \u2014 "),LP=n(ELe,"A",{href:!0});var Aat=s(LP);Bto=r(Aat,"VisualBertConfig"),Aat.forEach(t),Ito=r(ELe," (VisualBERT model)"),ELe.forEach(t),Nto=i(L),Bg=n(L,"LI",{});var CLe=s(Bg);cse=n(CLe,"STRONG",{});var Lat=s(cse);qto=r(Lat,"vit"),Lat.forEach(t),jto=r(CLe," \u2014 "),yP=n(CLe,"A",{href:!0});var yat=s(yP);Dto=r(yat,"ViTConfig"),yat.forEach(t),Gto=r(CLe," (ViT model)"),CLe.forEach(t),Oto=i(L),Ig=n(L,"LI",{});var wLe=s(Ig);fse=n(wLe,"STRONG",{});var xat=s(fse);Vto=r(xat,"vit_mae"),xat.forEach(t),Xto=r(wLe," \u2014 "),xP=n(wLe,"A",{href:!0});var $at=s(xP);zto=r($at,"ViTMAEConfig"),$at.forEach(t),Qto=r(wLe," (ViTMAE model)"),wLe.forEach(t),Wto=i(L),Ng=n(L,"LI",{});var ALe=s(Ng);mse=n(ALe,"STRONG",{});var kat=s(mse);Hto=r(kat,"wav2vec2"),kat.forEach(t),Uto=r(ALe," \u2014 "),$P=n(ALe,"A",{href:!0});var Sat=s($P);Jto=r(Sat,"Wav2Vec2Config"),Sat.forEach(t),Yto=r(ALe," (Wav2Vec2 model)"),ALe.forEach(t),Kto=i(L),qg=n(L,"LI",{});var LLe=s(qg);gse=n(LLe,"STRONG",{});var Rat=s(gse);Zto=r(Rat,"wav2vec2-conformer"),Rat.forEach(t),eao=r(LLe," \u2014 "),kP=n(LLe,"A",{href:!0});var Pat=s(kP);oao=r(Pat,"Wav2Vec2ConformerConfig"),Pat.forEach(t),rao=r(LLe," (Wav2Vec2-Conformer model)"),LLe.forEach(t),tao=i(L),jg=n(L,"LI",{});var yLe=s(jg);hse=n(yLe,"STRONG",{});var Bat=s(hse);aao=r(Bat,"wavlm"),Bat.forEach(t),nao=r(yLe," \u2014 "),SP=n(yLe,"A",{href:!0});var Iat=s(SP);sao=r(Iat,"WavLMConfig"),Iat.forEach(t),lao=r(yLe," (WavLM model)"),yLe.forEach(t),iao=i(L),Dg=n(L,"LI",{});var xLe=s(Dg);pse=n(xLe,"STRONG",{});var Nat=s(pse);dao=r(Nat,"xglm"),Nat.forEach(t),cao=r(xLe," \u2014 "),RP=n(xLe,"A",{href:!0});var qat=s(RP);fao=r(qat,"XGLMConfig"),qat.forEach(t),mao=r(xLe," (XGLM model)"),xLe.forEach(t),gao=i(L),Gg=n(L,"LI",{});var $Le=s(Gg);_se=n($Le,"STRONG",{});var jat=s(_se);hao=r(jat,"xlm"),jat.forEach(t),pao=r($Le," \u2014 "),PP=n($Le,"A",{href:!0});var Dat=s(PP);_ao=r(Dat,"XLMConfig"),Dat.forEach(t),uao=r($Le," (XLM model)"),$Le.forEach(t),bao=i(L),Og=n(L,"LI",{});var kLe=s(Og);use=n(kLe,"STRONG",{});var Gat=s(use);vao=r(Gat,"xlm-prophetnet"),Gat.forEach(t),Fao=r(kLe," \u2014 "),BP=n(kLe,"A",{href:!0});var Oat=s(BP);Tao=r(Oat,"XLMProphetNetConfig"),Oat.forEach(t),Mao=r(kLe," (XLM-ProphetNet model)"),kLe.forEach(t),Eao=i(L),Vg=n(L,"LI",{});var SLe=s(Vg);bse=n(SLe,"STRONG",{});var Vat=s(bse);Cao=r(Vat,"xlm-roberta"),Vat.forEach(t),wao=r(SLe," \u2014 "),IP=n(SLe,"A",{href:!0});var Xat=s(IP);Aao=r(Xat,"XLMRobertaConfig"),Xat.forEach(t),Lao=r(SLe," (XLM-RoBERTa model)"),SLe.forEach(t),yao=i(L),Xg=n(L,"LI",{});var RLe=s(Xg);vse=n(RLe,"STRONG",{});var zat=s(vse);xao=r(zat,"xlm-roberta-xl"),zat.forEach(t),$ao=r(RLe," \u2014 "),NP=n(RLe,"A",{href:!0});var Qat=s(NP);kao=r(Qat,"XLMRobertaXLConfig"),Qat.forEach(t),Sao=r(RLe," (XLM-RoBERTa-XL model)"),RLe.forEach(t),Rao=i(L),zg=n(L,"LI",{});var PLe=s(zg);Fse=n(PLe,"STRONG",{});var Wat=s(Fse);Pao=r(Wat,"xlnet"),Wat.forEach(t),Bao=r(PLe," \u2014 "),qP=n(PLe,"A",{href:!0});var Hat=s(qP);Iao=r(Hat,"XLNetConfig"),Hat.forEach(t),Nao=r(PLe," (XLNet model)"),PLe.forEach(t),qao=i(L),Qg=n(L,"LI",{});var BLe=s(Qg);Tse=n(BLe,"STRONG",{});var Uat=s(Tse);jao=r(Uat,"yolos"),Uat.forEach(t),Dao=r(BLe," \u2014 "),jP=n(BLe,"A",{href:!0});var Jat=s(jP);Gao=r(Jat,"YolosConfig"),Jat.forEach(t),Oao=r(BLe," (YOLOS model)"),BLe.forEach(t),Vao=i(L),Wg=n(L,"LI",{});var ILe=s(Wg);Mse=n(ILe,"STRONG",{});var Yat=s(Mse);Xao=r(Yat,"yoso"),Yat.forEach(t),zao=r(ILe," \u2014 "),DP=n(ILe,"A",{href:!0});var Kat=s(DP);Qao=r(Kat,"YosoConfig"),Kat.forEach(t),Wao=r(ILe," (YOSO model)"),ILe.forEach(t),L.forEach(t),Hao=i(at),T(Hg.$$.fragment,at),at.forEach(t),Uao=i(tt),Ug=n(tt,"DIV",{class:!0});var Fze=s(Ug);T(rL.$$.fragment,Fze),Jao=i(Fze),Ese=n(Fze,"P",{});var Zat=s(Ese);Yao=r(Zat,"Register a new configuration for this class."),Zat.forEach(t),Fze.forEach(t),tt.forEach(t),TVe=i(f),Bi=n(f,"H2",{class:!0});var Tze=s(Bi);Jg=n(Tze,"A",{id:!0,class:!0,href:!0});var ent=s(Jg);Cse=n(ent,"SPAN",{});var ont=s(Cse);T(tL.$$.fragment,ont),ont.forEach(t),ent.forEach(t),Kao=i(Tze),wse=n(Tze,"SPAN",{});var rnt=s(wse);Zao=r(rnt,"AutoTokenizer"),rnt.forEach(t),Tze.forEach(t),MVe=i(f),Ao=n(f,"DIV",{class:!0});var Js=s(Ao);T(aL.$$.fragment,Js),eno=i(Js),nL=n(Js,"P",{});var Mze=s(nL);ono=r(Mze,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),GP=n(Mze,"A",{href:!0});var tnt=s(GP);rno=r(tnt,"AutoTokenizer.from_pretrained()"),tnt.forEach(t),tno=r(Mze," class method."),Mze.forEach(t),ano=i(Js),sL=n(Js,"P",{});var Eze=s(sL);nno=r(Eze,"This class cannot be instantiated directly using "),Ase=n(Eze,"CODE",{});var ant=s(Ase);sno=r(ant,"__init__()"),ant.forEach(t),lno=r(Eze," (throws an error)."),Eze.forEach(t),ino=i(Js),Lr=n(Js,"DIV",{class:!0});var Ys=s(Lr);T(lL.$$.fragment,Ys),dno=i(Ys),Lse=n(Ys,"P",{});var nnt=s(Lse);cno=r(nnt,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),nnt.forEach(t),fno=i(Ys),Sa=n(Ys,"P",{});var Jw=s(Sa);mno=r(Jw,"The tokenizer class to instantiate is selected based on the "),yse=n(Jw,"CODE",{});var snt=s(yse);gno=r(snt,"model_type"),snt.forEach(t),hno=r(Jw,` property of the config object (either
passed as an argument or loaded from `),xse=n(Jw,"CODE",{});var lnt=s(xse);pno=r(lnt,"pretrained_model_name_or_path"),lnt.forEach(t),_no=r(Jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$se=n(Jw,"CODE",{});var int=s($se);uno=r(int,"pretrained_model_name_or_path"),int.forEach(t),bno=r(Jw,":"),Jw.forEach(t),vno=i(Ys),k=n(Ys,"UL",{});var S=s(k);qn=n(S,"LI",{});var gk=s(qn);kse=n(gk,"STRONG",{});var dnt=s(kse);Fno=r(dnt,"albert"),dnt.forEach(t),Tno=r(gk," \u2014 "),OP=n(gk,"A",{href:!0});var cnt=s(OP);Mno=r(cnt,"AlbertTokenizer"),cnt.forEach(t),Eno=r(gk," or "),VP=n(gk,"A",{href:!0});var fnt=s(VP);Cno=r(fnt,"AlbertTokenizerFast"),fnt.forEach(t),wno=r(gk," (ALBERT model)"),gk.forEach(t),Ano=i(S),jn=n(S,"LI",{});var hk=s(jn);Sse=n(hk,"STRONG",{});var mnt=s(Sse);Lno=r(mnt,"bart"),mnt.forEach(t),yno=r(hk," \u2014 "),XP=n(hk,"A",{href:!0});var gnt=s(XP);xno=r(gnt,"BartTokenizer"),gnt.forEach(t),$no=r(hk," or "),zP=n(hk,"A",{href:!0});var hnt=s(zP);kno=r(hnt,"BartTokenizerFast"),hnt.forEach(t),Sno=r(hk," (BART model)"),hk.forEach(t),Rno=i(S),Dn=n(S,"LI",{});var pk=s(Dn);Rse=n(pk,"STRONG",{});var pnt=s(Rse);Pno=r(pnt,"barthez"),pnt.forEach(t),Bno=r(pk," \u2014 "),QP=n(pk,"A",{href:!0});var _nt=s(QP);Ino=r(_nt,"BarthezTokenizer"),_nt.forEach(t),Nno=r(pk," or "),WP=n(pk,"A",{href:!0});var unt=s(WP);qno=r(unt,"BarthezTokenizerFast"),unt.forEach(t),jno=r(pk," (BARThez model)"),pk.forEach(t),Dno=i(S),Yg=n(S,"LI",{});var NLe=s(Yg);Pse=n(NLe,"STRONG",{});var bnt=s(Pse);Gno=r(bnt,"bartpho"),bnt.forEach(t),Ono=r(NLe," \u2014 "),HP=n(NLe,"A",{href:!0});var vnt=s(HP);Vno=r(vnt,"BartphoTokenizer"),vnt.forEach(t),Xno=r(NLe," (BARTpho model)"),NLe.forEach(t),zno=i(S),Gn=n(S,"LI",{});var _k=s(Gn);Bse=n(_k,"STRONG",{});var Fnt=s(Bse);Qno=r(Fnt,"bert"),Fnt.forEach(t),Wno=r(_k," \u2014 "),UP=n(_k,"A",{href:!0});var Tnt=s(UP);Hno=r(Tnt,"BertTokenizer"),Tnt.forEach(t),Uno=r(_k," or "),JP=n(_k,"A",{href:!0});var Mnt=s(JP);Jno=r(Mnt,"BertTokenizerFast"),Mnt.forEach(t),Yno=r(_k," (BERT model)"),_k.forEach(t),Kno=i(S),Kg=n(S,"LI",{});var qLe=s(Kg);Ise=n(qLe,"STRONG",{});var Ent=s(Ise);Zno=r(Ent,"bert-generation"),Ent.forEach(t),eso=r(qLe," \u2014 "),YP=n(qLe,"A",{href:!0});var Cnt=s(YP);oso=r(Cnt,"BertGenerationTokenizer"),Cnt.forEach(t),rso=r(qLe," (Bert Generation model)"),qLe.forEach(t),tso=i(S),Zg=n(S,"LI",{});var jLe=s(Zg);Nse=n(jLe,"STRONG",{});var wnt=s(Nse);aso=r(wnt,"bert-japanese"),wnt.forEach(t),nso=r(jLe," \u2014 "),KP=n(jLe,"A",{href:!0});var Ant=s(KP);sso=r(Ant,"BertJapaneseTokenizer"),Ant.forEach(t),lso=r(jLe," (BertJapanese model)"),jLe.forEach(t),iso=i(S),eh=n(S,"LI",{});var DLe=s(eh);qse=n(DLe,"STRONG",{});var Lnt=s(qse);dso=r(Lnt,"bertweet"),Lnt.forEach(t),cso=r(DLe," \u2014 "),ZP=n(DLe,"A",{href:!0});var ynt=s(ZP);fso=r(ynt,"BertweetTokenizer"),ynt.forEach(t),mso=r(DLe," (BERTweet model)"),DLe.forEach(t),gso=i(S),On=n(S,"LI",{});var uk=s(On);jse=n(uk,"STRONG",{});var xnt=s(jse);hso=r(xnt,"big_bird"),xnt.forEach(t),pso=r(uk," \u2014 "),eB=n(uk,"A",{href:!0});var $nt=s(eB);_so=r($nt,"BigBirdTokenizer"),$nt.forEach(t),uso=r(uk," or "),oB=n(uk,"A",{href:!0});var knt=s(oB);bso=r(knt,"BigBirdTokenizerFast"),knt.forEach(t),vso=r(uk," (BigBird model)"),uk.forEach(t),Fso=i(S),Vn=n(S,"LI",{});var bk=s(Vn);Dse=n(bk,"STRONG",{});var Snt=s(Dse);Tso=r(Snt,"bigbird_pegasus"),Snt.forEach(t),Mso=r(bk," \u2014 "),rB=n(bk,"A",{href:!0});var Rnt=s(rB);Eso=r(Rnt,"PegasusTokenizer"),Rnt.forEach(t),Cso=r(bk," or "),tB=n(bk,"A",{href:!0});var Pnt=s(tB);wso=r(Pnt,"PegasusTokenizerFast"),Pnt.forEach(t),Aso=r(bk," (BigBird-Pegasus model)"),bk.forEach(t),Lso=i(S),Xn=n(S,"LI",{});var vk=s(Xn);Gse=n(vk,"STRONG",{});var Bnt=s(Gse);yso=r(Bnt,"blenderbot"),Bnt.forEach(t),xso=r(vk," \u2014 "),aB=n(vk,"A",{href:!0});var Int=s(aB);$so=r(Int,"BlenderbotTokenizer"),Int.forEach(t),kso=r(vk," or "),nB=n(vk,"A",{href:!0});var Nnt=s(nB);Sso=r(Nnt,"BlenderbotTokenizerFast"),Nnt.forEach(t),Rso=r(vk," (Blenderbot model)"),vk.forEach(t),Pso=i(S),oh=n(S,"LI",{});var GLe=s(oh);Ose=n(GLe,"STRONG",{});var qnt=s(Ose);Bso=r(qnt,"blenderbot-small"),qnt.forEach(t),Iso=r(GLe," \u2014 "),sB=n(GLe,"A",{href:!0});var jnt=s(sB);Nso=r(jnt,"BlenderbotSmallTokenizer"),jnt.forEach(t),qso=r(GLe," (BlenderbotSmall model)"),GLe.forEach(t),jso=i(S),rh=n(S,"LI",{});var OLe=s(rh);Vse=n(OLe,"STRONG",{});var Dnt=s(Vse);Dso=r(Dnt,"bloom"),Dnt.forEach(t),Gso=r(OLe," \u2014 "),lB=n(OLe,"A",{href:!0});var Gnt=s(lB);Oso=r(Gnt,"BloomTokenizerFast"),Gnt.forEach(t),Vso=r(OLe," (BLOOM model)"),OLe.forEach(t),Xso=i(S),th=n(S,"LI",{});var VLe=s(th);Xse=n(VLe,"STRONG",{});var Ont=s(Xse);zso=r(Ont,"byt5"),Ont.forEach(t),Qso=r(VLe," \u2014 "),iB=n(VLe,"A",{href:!0});var Vnt=s(iB);Wso=r(Vnt,"ByT5Tokenizer"),Vnt.forEach(t),Hso=r(VLe," (ByT5 model)"),VLe.forEach(t),Uso=i(S),zn=n(S,"LI",{});var Fk=s(zn);zse=n(Fk,"STRONG",{});var Xnt=s(zse);Jso=r(Xnt,"camembert"),Xnt.forEach(t),Yso=r(Fk," \u2014 "),dB=n(Fk,"A",{href:!0});var znt=s(dB);Kso=r(znt,"CamembertTokenizer"),znt.forEach(t),Zso=r(Fk," or "),cB=n(Fk,"A",{href:!0});var Qnt=s(cB);elo=r(Qnt,"CamembertTokenizerFast"),Qnt.forEach(t),olo=r(Fk," (CamemBERT model)"),Fk.forEach(t),rlo=i(S),ah=n(S,"LI",{});var XLe=s(ah);Qse=n(XLe,"STRONG",{});var Wnt=s(Qse);tlo=r(Wnt,"canine"),Wnt.forEach(t),alo=r(XLe," \u2014 "),fB=n(XLe,"A",{href:!0});var Hnt=s(fB);nlo=r(Hnt,"CanineTokenizer"),Hnt.forEach(t),slo=r(XLe," (CANINE model)"),XLe.forEach(t),llo=i(S),Qn=n(S,"LI",{});var Tk=s(Qn);Wse=n(Tk,"STRONG",{});var Unt=s(Wse);ilo=r(Unt,"clip"),Unt.forEach(t),dlo=r(Tk," \u2014 "),mB=n(Tk,"A",{href:!0});var Jnt=s(mB);clo=r(Jnt,"CLIPTokenizer"),Jnt.forEach(t),flo=r(Tk," or "),gB=n(Tk,"A",{href:!0});var Ynt=s(gB);mlo=r(Ynt,"CLIPTokenizerFast"),Ynt.forEach(t),glo=r(Tk," (CLIP model)"),Tk.forEach(t),hlo=i(S),Wn=n(S,"LI",{});var Mk=s(Wn);Hse=n(Mk,"STRONG",{});var Knt=s(Hse);plo=r(Knt,"codegen"),Knt.forEach(t),_lo=r(Mk," \u2014 "),hB=n(Mk,"A",{href:!0});var Znt=s(hB);ulo=r(Znt,"CodeGenTokenizer"),Znt.forEach(t),blo=r(Mk," or "),pB=n(Mk,"A",{href:!0});var est=s(pB);vlo=r(est,"CodeGenTokenizerFast"),est.forEach(t),Flo=r(Mk," (CodeGen model)"),Mk.forEach(t),Tlo=i(S),Hn=n(S,"LI",{});var Ek=s(Hn);Use=n(Ek,"STRONG",{});var ost=s(Use);Mlo=r(ost,"convbert"),ost.forEach(t),Elo=r(Ek," \u2014 "),_B=n(Ek,"A",{href:!0});var rst=s(_B);Clo=r(rst,"ConvBertTokenizer"),rst.forEach(t),wlo=r(Ek," or "),uB=n(Ek,"A",{href:!0});var tst=s(uB);Alo=r(tst,"ConvBertTokenizerFast"),tst.forEach(t),Llo=r(Ek," (ConvBERT model)"),Ek.forEach(t),ylo=i(S),Un=n(S,"LI",{});var Ck=s(Un);Jse=n(Ck,"STRONG",{});var ast=s(Jse);xlo=r(ast,"cpm"),ast.forEach(t),$lo=r(Ck," \u2014 "),bB=n(Ck,"A",{href:!0});var nst=s(bB);klo=r(nst,"CpmTokenizer"),nst.forEach(t),Slo=r(Ck," or "),vB=n(Ck,"A",{href:!0});var sst=s(vB);Rlo=r(sst,"CpmTokenizerFast"),sst.forEach(t),Plo=r(Ck," (CPM model)"),Ck.forEach(t),Blo=i(S),nh=n(S,"LI",{});var zLe=s(nh);Yse=n(zLe,"STRONG",{});var lst=s(Yse);Ilo=r(lst,"ctrl"),lst.forEach(t),Nlo=r(zLe," \u2014 "),FB=n(zLe,"A",{href:!0});var ist=s(FB);qlo=r(ist,"CTRLTokenizer"),ist.forEach(t),jlo=r(zLe," (CTRL model)"),zLe.forEach(t),Dlo=i(S),Jn=n(S,"LI",{});var wk=s(Jn);Kse=n(wk,"STRONG",{});var dst=s(Kse);Glo=r(dst,"data2vec-text"),dst.forEach(t),Olo=r(wk," \u2014 "),TB=n(wk,"A",{href:!0});var cst=s(TB);Vlo=r(cst,"RobertaTokenizer"),cst.forEach(t),Xlo=r(wk," or "),MB=n(wk,"A",{href:!0});var fst=s(MB);zlo=r(fst,"RobertaTokenizerFast"),fst.forEach(t),Qlo=r(wk," (Data2VecText model)"),wk.forEach(t),Wlo=i(S),Yn=n(S,"LI",{});var Ak=s(Yn);Zse=n(Ak,"STRONG",{});var mst=s(Zse);Hlo=r(mst,"deberta"),mst.forEach(t),Ulo=r(Ak," \u2014 "),EB=n(Ak,"A",{href:!0});var gst=s(EB);Jlo=r(gst,"DebertaTokenizer"),gst.forEach(t),Ylo=r(Ak," or "),CB=n(Ak,"A",{href:!0});var hst=s(CB);Klo=r(hst,"DebertaTokenizerFast"),hst.forEach(t),Zlo=r(Ak," (DeBERTa model)"),Ak.forEach(t),eio=i(S),Kn=n(S,"LI",{});var Lk=s(Kn);ele=n(Lk,"STRONG",{});var pst=s(ele);oio=r(pst,"deberta-v2"),pst.forEach(t),rio=r(Lk," \u2014 "),wB=n(Lk,"A",{href:!0});var _st=s(wB);tio=r(_st,"DebertaV2Tokenizer"),_st.forEach(t),aio=r(Lk," or "),AB=n(Lk,"A",{href:!0});var ust=s(AB);nio=r(ust,"DebertaV2TokenizerFast"),ust.forEach(t),sio=r(Lk," (DeBERTa-v2 model)"),Lk.forEach(t),lio=i(S),Zn=n(S,"LI",{});var yk=s(Zn);ole=n(yk,"STRONG",{});var bst=s(ole);iio=r(bst,"distilbert"),bst.forEach(t),dio=r(yk," \u2014 "),LB=n(yk,"A",{href:!0});var vst=s(LB);cio=r(vst,"DistilBertTokenizer"),vst.forEach(t),fio=r(yk," or "),yB=n(yk,"A",{href:!0});var Fst=s(yB);mio=r(Fst,"DistilBertTokenizerFast"),Fst.forEach(t),gio=r(yk," (DistilBERT model)"),yk.forEach(t),hio=i(S),es=n(S,"LI",{});var xk=s(es);rle=n(xk,"STRONG",{});var Tst=s(rle);pio=r(Tst,"dpr"),Tst.forEach(t),_io=r(xk," \u2014 "),xB=n(xk,"A",{href:!0});var Mst=s(xB);uio=r(Mst,"DPRQuestionEncoderTokenizer"),Mst.forEach(t),bio=r(xk," or "),$B=n(xk,"A",{href:!0});var Est=s($B);vio=r(Est,"DPRQuestionEncoderTokenizerFast"),Est.forEach(t),Fio=r(xk," (DPR model)"),xk.forEach(t),Tio=i(S),os=n(S,"LI",{});var $k=s(os);tle=n($k,"STRONG",{});var Cst=s(tle);Mio=r(Cst,"electra"),Cst.forEach(t),Eio=r($k," \u2014 "),kB=n($k,"A",{href:!0});var wst=s(kB);Cio=r(wst,"ElectraTokenizer"),wst.forEach(t),wio=r($k," or "),SB=n($k,"A",{href:!0});var Ast=s(SB);Aio=r(Ast,"ElectraTokenizerFast"),Ast.forEach(t),Lio=r($k," (ELECTRA model)"),$k.forEach(t),yio=i(S),sh=n(S,"LI",{});var QLe=s(sh);ale=n(QLe,"STRONG",{});var Lst=s(ale);xio=r(Lst,"flaubert"),Lst.forEach(t),$io=r(QLe," \u2014 "),RB=n(QLe,"A",{href:!0});var yst=s(RB);kio=r(yst,"FlaubertTokenizer"),yst.forEach(t),Sio=r(QLe," (FlauBERT model)"),QLe.forEach(t),Rio=i(S),rs=n(S,"LI",{});var kk=s(rs);nle=n(kk,"STRONG",{});var xst=s(nle);Pio=r(xst,"fnet"),xst.forEach(t),Bio=r(kk," \u2014 "),PB=n(kk,"A",{href:!0});var $st=s(PB);Iio=r($st,"FNetTokenizer"),$st.forEach(t),Nio=r(kk," or "),BB=n(kk,"A",{href:!0});var kst=s(BB);qio=r(kst,"FNetTokenizerFast"),kst.forEach(t),jio=r(kk," (FNet model)"),kk.forEach(t),Dio=i(S),lh=n(S,"LI",{});var WLe=s(lh);sle=n(WLe,"STRONG",{});var Sst=s(sle);Gio=r(Sst,"fsmt"),Sst.forEach(t),Oio=r(WLe," \u2014 "),IB=n(WLe,"A",{href:!0});var Rst=s(IB);Vio=r(Rst,"FSMTTokenizer"),Rst.forEach(t),Xio=r(WLe," (FairSeq Machine-Translation model)"),WLe.forEach(t),zio=i(S),ts=n(S,"LI",{});var Sk=s(ts);lle=n(Sk,"STRONG",{});var Pst=s(lle);Qio=r(Pst,"funnel"),Pst.forEach(t),Wio=r(Sk," \u2014 "),NB=n(Sk,"A",{href:!0});var Bst=s(NB);Hio=r(Bst,"FunnelTokenizer"),Bst.forEach(t),Uio=r(Sk," or "),qB=n(Sk,"A",{href:!0});var Ist=s(qB);Jio=r(Ist,"FunnelTokenizerFast"),Ist.forEach(t),Yio=r(Sk," (Funnel Transformer model)"),Sk.forEach(t),Kio=i(S),as=n(S,"LI",{});var Rk=s(as);ile=n(Rk,"STRONG",{});var Nst=s(ile);Zio=r(Nst,"gpt2"),Nst.forEach(t),edo=r(Rk," \u2014 "),jB=n(Rk,"A",{href:!0});var qst=s(jB);odo=r(qst,"GPT2Tokenizer"),qst.forEach(t),rdo=r(Rk," or "),DB=n(Rk,"A",{href:!0});var jst=s(DB);tdo=r(jst,"GPT2TokenizerFast"),jst.forEach(t),ado=r(Rk," (OpenAI GPT-2 model)"),Rk.forEach(t),ndo=i(S),ns=n(S,"LI",{});var Pk=s(ns);dle=n(Pk,"STRONG",{});var Dst=s(dle);sdo=r(Dst,"gpt_neo"),Dst.forEach(t),ldo=r(Pk," \u2014 "),GB=n(Pk,"A",{href:!0});var Gst=s(GB);ido=r(Gst,"GPT2Tokenizer"),Gst.forEach(t),ddo=r(Pk," or "),OB=n(Pk,"A",{href:!0});var Ost=s(OB);cdo=r(Ost,"GPT2TokenizerFast"),Ost.forEach(t),fdo=r(Pk," (GPT Neo model)"),Pk.forEach(t),mdo=i(S),ih=n(S,"LI",{});var HLe=s(ih);cle=n(HLe,"STRONG",{});var Vst=s(cle);gdo=r(Vst,"gpt_neox"),Vst.forEach(t),hdo=r(HLe," \u2014 "),VB=n(HLe,"A",{href:!0});var Xst=s(VB);pdo=r(Xst,"GPTNeoXTokenizerFast"),Xst.forEach(t),_do=r(HLe," (GPT NeoX model)"),HLe.forEach(t),udo=i(S),ss=n(S,"LI",{});var Bk=s(ss);fle=n(Bk,"STRONG",{});var zst=s(fle);bdo=r(zst,"gptj"),zst.forEach(t),vdo=r(Bk," \u2014 "),XB=n(Bk,"A",{href:!0});var Qst=s(XB);Fdo=r(Qst,"GPT2Tokenizer"),Qst.forEach(t),Tdo=r(Bk," or "),zB=n(Bk,"A",{href:!0});var Wst=s(zB);Mdo=r(Wst,"GPT2TokenizerFast"),Wst.forEach(t),Edo=r(Bk," (GPT-J model)"),Bk.forEach(t),Cdo=i(S),ls=n(S,"LI",{});var Ik=s(ls);mle=n(Ik,"STRONG",{});var Hst=s(mle);wdo=r(Hst,"groupvit"),Hst.forEach(t),Ado=r(Ik," \u2014 "),QB=n(Ik,"A",{href:!0});var Ust=s(QB);Ldo=r(Ust,"CLIPTokenizer"),Ust.forEach(t),ydo=r(Ik," or "),WB=n(Ik,"A",{href:!0});var Jst=s(WB);xdo=r(Jst,"CLIPTokenizerFast"),Jst.forEach(t),$do=r(Ik," (GroupViT model)"),Ik.forEach(t),kdo=i(S),is=n(S,"LI",{});var Nk=s(is);gle=n(Nk,"STRONG",{});var Yst=s(gle);Sdo=r(Yst,"herbert"),Yst.forEach(t),Rdo=r(Nk," \u2014 "),HB=n(Nk,"A",{href:!0});var Kst=s(HB);Pdo=r(Kst,"HerbertTokenizer"),Kst.forEach(t),Bdo=r(Nk," or "),UB=n(Nk,"A",{href:!0});var Zst=s(UB);Ido=r(Zst,"HerbertTokenizerFast"),Zst.forEach(t),Ndo=r(Nk," (HerBERT model)"),Nk.forEach(t),qdo=i(S),dh=n(S,"LI",{});var ULe=s(dh);hle=n(ULe,"STRONG",{});var elt=s(hle);jdo=r(elt,"hubert"),elt.forEach(t),Ddo=r(ULe," \u2014 "),JB=n(ULe,"A",{href:!0});var olt=s(JB);Gdo=r(olt,"Wav2Vec2CTCTokenizer"),olt.forEach(t),Odo=r(ULe," (Hubert model)"),ULe.forEach(t),Vdo=i(S),ds=n(S,"LI",{});var qk=s(ds);ple=n(qk,"STRONG",{});var rlt=s(ple);Xdo=r(rlt,"ibert"),rlt.forEach(t),zdo=r(qk," \u2014 "),YB=n(qk,"A",{href:!0});var tlt=s(YB);Qdo=r(tlt,"RobertaTokenizer"),tlt.forEach(t),Wdo=r(qk," or "),KB=n(qk,"A",{href:!0});var alt=s(KB);Hdo=r(alt,"RobertaTokenizerFast"),alt.forEach(t),Udo=r(qk," (I-BERT model)"),qk.forEach(t),Jdo=i(S),cs=n(S,"LI",{});var jk=s(cs);_le=n(jk,"STRONG",{});var nlt=s(_le);Ydo=r(nlt,"layoutlm"),nlt.forEach(t),Kdo=r(jk," \u2014 "),ZB=n(jk,"A",{href:!0});var slt=s(ZB);Zdo=r(slt,"LayoutLMTokenizer"),slt.forEach(t),eco=r(jk," or "),eI=n(jk,"A",{href:!0});var llt=s(eI);oco=r(llt,"LayoutLMTokenizerFast"),llt.forEach(t),rco=r(jk," (LayoutLM model)"),jk.forEach(t),tco=i(S),fs=n(S,"LI",{});var Dk=s(fs);ule=n(Dk,"STRONG",{});var ilt=s(ule);aco=r(ilt,"layoutlmv2"),ilt.forEach(t),nco=r(Dk," \u2014 "),oI=n(Dk,"A",{href:!0});var dlt=s(oI);sco=r(dlt,"LayoutLMv2Tokenizer"),dlt.forEach(t),lco=r(Dk," or "),rI=n(Dk,"A",{href:!0});var clt=s(rI);ico=r(clt,"LayoutLMv2TokenizerFast"),clt.forEach(t),dco=r(Dk," (LayoutLMv2 model)"),Dk.forEach(t),cco=i(S),ms=n(S,"LI",{});var Gk=s(ms);ble=n(Gk,"STRONG",{});var flt=s(ble);fco=r(flt,"layoutlmv3"),flt.forEach(t),mco=r(Gk," \u2014 "),tI=n(Gk,"A",{href:!0});var mlt=s(tI);gco=r(mlt,"LayoutLMv3Tokenizer"),mlt.forEach(t),hco=r(Gk," or "),aI=n(Gk,"A",{href:!0});var glt=s(aI);pco=r(glt,"LayoutLMv3TokenizerFast"),glt.forEach(t),_co=r(Gk," (LayoutLMv3 model)"),Gk.forEach(t),uco=i(S),gs=n(S,"LI",{});var Ok=s(gs);vle=n(Ok,"STRONG",{});var hlt=s(vle);bco=r(hlt,"layoutxlm"),hlt.forEach(t),vco=r(Ok," \u2014 "),nI=n(Ok,"A",{href:!0});var plt=s(nI);Fco=r(plt,"LayoutXLMTokenizer"),plt.forEach(t),Tco=r(Ok," or "),sI=n(Ok,"A",{href:!0});var _lt=s(sI);Mco=r(_lt,"LayoutXLMTokenizerFast"),_lt.forEach(t),Eco=r(Ok," (LayoutXLM model)"),Ok.forEach(t),Cco=i(S),hs=n(S,"LI",{});var Vk=s(hs);Fle=n(Vk,"STRONG",{});var ult=s(Fle);wco=r(ult,"led"),ult.forEach(t),Aco=r(Vk," \u2014 "),lI=n(Vk,"A",{href:!0});var blt=s(lI);Lco=r(blt,"LEDTokenizer"),blt.forEach(t),yco=r(Vk," or "),iI=n(Vk,"A",{href:!0});var vlt=s(iI);xco=r(vlt,"LEDTokenizerFast"),vlt.forEach(t),$co=r(Vk," (LED model)"),Vk.forEach(t),kco=i(S),ps=n(S,"LI",{});var Xk=s(ps);Tle=n(Xk,"STRONG",{});var Flt=s(Tle);Sco=r(Flt,"longformer"),Flt.forEach(t),Rco=r(Xk," \u2014 "),dI=n(Xk,"A",{href:!0});var Tlt=s(dI);Pco=r(Tlt,"LongformerTokenizer"),Tlt.forEach(t),Bco=r(Xk," or "),cI=n(Xk,"A",{href:!0});var Mlt=s(cI);Ico=r(Mlt,"LongformerTokenizerFast"),Mlt.forEach(t),Nco=r(Xk," (Longformer model)"),Xk.forEach(t),qco=i(S),_s=n(S,"LI",{});var zk=s(_s);Mle=n(zk,"STRONG",{});var Elt=s(Mle);jco=r(Elt,"longt5"),Elt.forEach(t),Dco=r(zk," \u2014 "),fI=n(zk,"A",{href:!0});var Clt=s(fI);Gco=r(Clt,"T5Tokenizer"),Clt.forEach(t),Oco=r(zk," or "),mI=n(zk,"A",{href:!0});var wlt=s(mI);Vco=r(wlt,"T5TokenizerFast"),wlt.forEach(t),Xco=r(zk," (LongT5 model)"),zk.forEach(t),zco=i(S),ch=n(S,"LI",{});var JLe=s(ch);Ele=n(JLe,"STRONG",{});var Alt=s(Ele);Qco=r(Alt,"luke"),Alt.forEach(t),Wco=r(JLe," \u2014 "),gI=n(JLe,"A",{href:!0});var Llt=s(gI);Hco=r(Llt,"LukeTokenizer"),Llt.forEach(t),Uco=r(JLe," (LUKE model)"),JLe.forEach(t),Jco=i(S),us=n(S,"LI",{});var Qk=s(us);Cle=n(Qk,"STRONG",{});var ylt=s(Cle);Yco=r(ylt,"lxmert"),ylt.forEach(t),Kco=r(Qk," \u2014 "),hI=n(Qk,"A",{href:!0});var xlt=s(hI);Zco=r(xlt,"LxmertTokenizer"),xlt.forEach(t),efo=r(Qk," or "),pI=n(Qk,"A",{href:!0});var $lt=s(pI);ofo=r($lt,"LxmertTokenizerFast"),$lt.forEach(t),rfo=r(Qk," (LXMERT model)"),Qk.forEach(t),tfo=i(S),fh=n(S,"LI",{});var YLe=s(fh);wle=n(YLe,"STRONG",{});var klt=s(wle);afo=r(klt,"m2m_100"),klt.forEach(t),nfo=r(YLe," \u2014 "),_I=n(YLe,"A",{href:!0});var Slt=s(_I);sfo=r(Slt,"M2M100Tokenizer"),Slt.forEach(t),lfo=r(YLe," (M2M100 model)"),YLe.forEach(t),ifo=i(S),mh=n(S,"LI",{});var KLe=s(mh);Ale=n(KLe,"STRONG",{});var Rlt=s(Ale);dfo=r(Rlt,"marian"),Rlt.forEach(t),cfo=r(KLe," \u2014 "),uI=n(KLe,"A",{href:!0});var Plt=s(uI);ffo=r(Plt,"MarianTokenizer"),Plt.forEach(t),mfo=r(KLe," (Marian model)"),KLe.forEach(t),gfo=i(S),bs=n(S,"LI",{});var Wk=s(bs);Lle=n(Wk,"STRONG",{});var Blt=s(Lle);hfo=r(Blt,"mbart"),Blt.forEach(t),pfo=r(Wk," \u2014 "),bI=n(Wk,"A",{href:!0});var Ilt=s(bI);_fo=r(Ilt,"MBartTokenizer"),Ilt.forEach(t),ufo=r(Wk," or "),vI=n(Wk,"A",{href:!0});var Nlt=s(vI);bfo=r(Nlt,"MBartTokenizerFast"),Nlt.forEach(t),vfo=r(Wk," (mBART model)"),Wk.forEach(t),Ffo=i(S),vs=n(S,"LI",{});var Hk=s(vs);yle=n(Hk,"STRONG",{});var qlt=s(yle);Tfo=r(qlt,"mbart50"),qlt.forEach(t),Mfo=r(Hk," \u2014 "),FI=n(Hk,"A",{href:!0});var jlt=s(FI);Efo=r(jlt,"MBart50Tokenizer"),jlt.forEach(t),Cfo=r(Hk," or "),TI=n(Hk,"A",{href:!0});var Dlt=s(TI);wfo=r(Dlt,"MBart50TokenizerFast"),Dlt.forEach(t),Afo=r(Hk," (mBART-50 model)"),Hk.forEach(t),Lfo=i(S),Fs=n(S,"LI",{});var Uk=s(Fs);xle=n(Uk,"STRONG",{});var Glt=s(xle);yfo=r(Glt,"megatron-bert"),Glt.forEach(t),xfo=r(Uk," \u2014 "),MI=n(Uk,"A",{href:!0});var Olt=s(MI);$fo=r(Olt,"BertTokenizer"),Olt.forEach(t),kfo=r(Uk," or "),EI=n(Uk,"A",{href:!0});var Vlt=s(EI);Sfo=r(Vlt,"BertTokenizerFast"),Vlt.forEach(t),Rfo=r(Uk," (Megatron-BERT model)"),Uk.forEach(t),Pfo=i(S),gh=n(S,"LI",{});var ZLe=s(gh);$le=n(ZLe,"STRONG",{});var Xlt=s($le);Bfo=r(Xlt,"mluke"),Xlt.forEach(t),Ifo=r(ZLe," \u2014 "),CI=n(ZLe,"A",{href:!0});var zlt=s(CI);Nfo=r(zlt,"MLukeTokenizer"),zlt.forEach(t),qfo=r(ZLe," (mLUKE model)"),ZLe.forEach(t),jfo=i(S),Ts=n(S,"LI",{});var Jk=s(Ts);kle=n(Jk,"STRONG",{});var Qlt=s(kle);Dfo=r(Qlt,"mobilebert"),Qlt.forEach(t),Gfo=r(Jk," \u2014 "),wI=n(Jk,"A",{href:!0});var Wlt=s(wI);Ofo=r(Wlt,"MobileBertTokenizer"),Wlt.forEach(t),Vfo=r(Jk," or "),AI=n(Jk,"A",{href:!0});var Hlt=s(AI);Xfo=r(Hlt,"MobileBertTokenizerFast"),Hlt.forEach(t),zfo=r(Jk," (MobileBERT model)"),Jk.forEach(t),Qfo=i(S),Ms=n(S,"LI",{});var Yk=s(Ms);Sle=n(Yk,"STRONG",{});var Ult=s(Sle);Wfo=r(Ult,"mpnet"),Ult.forEach(t),Hfo=r(Yk," \u2014 "),LI=n(Yk,"A",{href:!0});var Jlt=s(LI);Ufo=r(Jlt,"MPNetTokenizer"),Jlt.forEach(t),Jfo=r(Yk," or "),yI=n(Yk,"A",{href:!0});var Ylt=s(yI);Yfo=r(Ylt,"MPNetTokenizerFast"),Ylt.forEach(t),Kfo=r(Yk," (MPNet model)"),Yk.forEach(t),Zfo=i(S),Es=n(S,"LI",{});var Kk=s(Es);Rle=n(Kk,"STRONG",{});var Klt=s(Rle);emo=r(Klt,"mt5"),Klt.forEach(t),omo=r(Kk," \u2014 "),xI=n(Kk,"A",{href:!0});var Zlt=s(xI);rmo=r(Zlt,"MT5Tokenizer"),Zlt.forEach(t),tmo=r(Kk," or "),$I=n(Kk,"A",{href:!0});var eit=s($I);amo=r(eit,"MT5TokenizerFast"),eit.forEach(t),nmo=r(Kk," (MT5 model)"),Kk.forEach(t),smo=i(S),Cs=n(S,"LI",{});var Zk=s(Cs);Ple=n(Zk,"STRONG",{});var oit=s(Ple);lmo=r(oit,"mvp"),oit.forEach(t),imo=r(Zk," \u2014 "),kI=n(Zk,"A",{href:!0});var rit=s(kI);dmo=r(rit,"MvpTokenizer"),rit.forEach(t),cmo=r(Zk," or "),SI=n(Zk,"A",{href:!0});var tit=s(SI);fmo=r(tit,"MvpTokenizerFast"),tit.forEach(t),mmo=r(Zk," (MVP model)"),Zk.forEach(t),gmo=i(S),ws=n(S,"LI",{});var eS=s(ws);Ble=n(eS,"STRONG",{});var ait=s(Ble);hmo=r(ait,"nezha"),ait.forEach(t),pmo=r(eS," \u2014 "),RI=n(eS,"A",{href:!0});var nit=s(RI);_mo=r(nit,"BertTokenizer"),nit.forEach(t),umo=r(eS," or "),PI=n(eS,"A",{href:!0});var sit=s(PI);bmo=r(sit,"BertTokenizerFast"),sit.forEach(t),vmo=r(eS," (Nezha model)"),eS.forEach(t),Fmo=i(S),As=n(S,"LI",{});var oS=s(As);Ile=n(oS,"STRONG",{});var lit=s(Ile);Tmo=r(lit,"nystromformer"),lit.forEach(t),Mmo=r(oS," \u2014 "),BI=n(oS,"A",{href:!0});var iit=s(BI);Emo=r(iit,"AlbertTokenizer"),iit.forEach(t),Cmo=r(oS," or "),II=n(oS,"A",{href:!0});var dit=s(II);wmo=r(dit,"AlbertTokenizerFast"),dit.forEach(t),Amo=r(oS," (Nystr\xF6mformer model)"),oS.forEach(t),Lmo=i(S),Ls=n(S,"LI",{});var rS=s(Ls);Nle=n(rS,"STRONG",{});var cit=s(Nle);ymo=r(cit,"openai-gpt"),cit.forEach(t),xmo=r(rS," \u2014 "),NI=n(rS,"A",{href:!0});var fit=s(NI);$mo=r(fit,"OpenAIGPTTokenizer"),fit.forEach(t),kmo=r(rS," or "),qI=n(rS,"A",{href:!0});var mit=s(qI);Smo=r(mit,"OpenAIGPTTokenizerFast"),mit.forEach(t),Rmo=r(rS," (OpenAI GPT model)"),rS.forEach(t),Pmo=i(S),hh=n(S,"LI",{});var eye=s(hh);qle=n(eye,"STRONG",{});var git=s(qle);Bmo=r(git,"opt"),git.forEach(t),Imo=r(eye," \u2014 "),jI=n(eye,"A",{href:!0});var hit=s(jI);Nmo=r(hit,"GPT2Tokenizer"),hit.forEach(t),qmo=r(eye," (OPT model)"),eye.forEach(t),jmo=i(S),ys=n(S,"LI",{});var tS=s(ys);jle=n(tS,"STRONG",{});var pit=s(jle);Dmo=r(pit,"pegasus"),pit.forEach(t),Gmo=r(tS," \u2014 "),DI=n(tS,"A",{href:!0});var _it=s(DI);Omo=r(_it,"PegasusTokenizer"),_it.forEach(t),Vmo=r(tS," or "),GI=n(tS,"A",{href:!0});var uit=s(GI);Xmo=r(uit,"PegasusTokenizerFast"),uit.forEach(t),zmo=r(tS," (Pegasus model)"),tS.forEach(t),Qmo=i(S),ph=n(S,"LI",{});var oye=s(ph);Dle=n(oye,"STRONG",{});var bit=s(Dle);Wmo=r(bit,"perceiver"),bit.forEach(t),Hmo=r(oye," \u2014 "),OI=n(oye,"A",{href:!0});var vit=s(OI);Umo=r(vit,"PerceiverTokenizer"),vit.forEach(t),Jmo=r(oye," (Perceiver model)"),oye.forEach(t),Ymo=i(S),_h=n(S,"LI",{});var rye=s(_h);Gle=n(rye,"STRONG",{});var Fit=s(Gle);Kmo=r(Fit,"phobert"),Fit.forEach(t),Zmo=r(rye," \u2014 "),VI=n(rye,"A",{href:!0});var Tit=s(VI);ego=r(Tit,"PhobertTokenizer"),Tit.forEach(t),ogo=r(rye," (PhoBERT model)"),rye.forEach(t),rgo=i(S),uh=n(S,"LI",{});var tye=s(uh);Ole=n(tye,"STRONG",{});var Mit=s(Ole);tgo=r(Mit,"plbart"),Mit.forEach(t),ago=r(tye," \u2014 "),XI=n(tye,"A",{href:!0});var Eit=s(XI);ngo=r(Eit,"PLBartTokenizer"),Eit.forEach(t),sgo=r(tye," (PLBart model)"),tye.forEach(t),lgo=i(S),bh=n(S,"LI",{});var aye=s(bh);Vle=n(aye,"STRONG",{});var Cit=s(Vle);igo=r(Cit,"prophetnet"),Cit.forEach(t),dgo=r(aye," \u2014 "),zI=n(aye,"A",{href:!0});var wit=s(zI);cgo=r(wit,"ProphetNetTokenizer"),wit.forEach(t),fgo=r(aye," (ProphetNet model)"),aye.forEach(t),mgo=i(S),xs=n(S,"LI",{});var aS=s(xs);Xle=n(aS,"STRONG",{});var Ait=s(Xle);ggo=r(Ait,"qdqbert"),Ait.forEach(t),hgo=r(aS," \u2014 "),QI=n(aS,"A",{href:!0});var Lit=s(QI);pgo=r(Lit,"BertTokenizer"),Lit.forEach(t),_go=r(aS," or "),WI=n(aS,"A",{href:!0});var yit=s(WI);ugo=r(yit,"BertTokenizerFast"),yit.forEach(t),bgo=r(aS," (QDQBert model)"),aS.forEach(t),vgo=i(S),vh=n(S,"LI",{});var nye=s(vh);zle=n(nye,"STRONG",{});var xit=s(zle);Fgo=r(xit,"rag"),xit.forEach(t),Tgo=r(nye," \u2014 "),HI=n(nye,"A",{href:!0});var $it=s(HI);Mgo=r($it,"RagTokenizer"),$it.forEach(t),Ego=r(nye," (RAG model)"),nye.forEach(t),Cgo=i(S),$s=n(S,"LI",{});var nS=s($s);Qle=n(nS,"STRONG",{});var kit=s(Qle);wgo=r(kit,"realm"),kit.forEach(t),Ago=r(nS," \u2014 "),UI=n(nS,"A",{href:!0});var Sit=s(UI);Lgo=r(Sit,"RealmTokenizer"),Sit.forEach(t),ygo=r(nS," or "),JI=n(nS,"A",{href:!0});var Rit=s(JI);xgo=r(Rit,"RealmTokenizerFast"),Rit.forEach(t),$go=r(nS," (REALM model)"),nS.forEach(t),kgo=i(S),ks=n(S,"LI",{});var sS=s(ks);Wle=n(sS,"STRONG",{});var Pit=s(Wle);Sgo=r(Pit,"reformer"),Pit.forEach(t),Rgo=r(sS," \u2014 "),YI=n(sS,"A",{href:!0});var Bit=s(YI);Pgo=r(Bit,"ReformerTokenizer"),Bit.forEach(t),Bgo=r(sS," or "),KI=n(sS,"A",{href:!0});var Iit=s(KI);Igo=r(Iit,"ReformerTokenizerFast"),Iit.forEach(t),Ngo=r(sS," (Reformer model)"),sS.forEach(t),qgo=i(S),Ss=n(S,"LI",{});var lS=s(Ss);Hle=n(lS,"STRONG",{});var Nit=s(Hle);jgo=r(Nit,"rembert"),Nit.forEach(t),Dgo=r(lS," \u2014 "),ZI=n(lS,"A",{href:!0});var qit=s(ZI);Ggo=r(qit,"RemBertTokenizer"),qit.forEach(t),Ogo=r(lS," or "),eN=n(lS,"A",{href:!0});var jit=s(eN);Vgo=r(jit,"RemBertTokenizerFast"),jit.forEach(t),Xgo=r(lS," (RemBERT model)"),lS.forEach(t),zgo=i(S),Rs=n(S,"LI",{});var iS=s(Rs);Ule=n(iS,"STRONG",{});var Dit=s(Ule);Qgo=r(Dit,"retribert"),Dit.forEach(t),Wgo=r(iS," \u2014 "),oN=n(iS,"A",{href:!0});var Git=s(oN);Hgo=r(Git,"RetriBertTokenizer"),Git.forEach(t),Ugo=r(iS," or "),rN=n(iS,"A",{href:!0});var Oit=s(rN);Jgo=r(Oit,"RetriBertTokenizerFast"),Oit.forEach(t),Ygo=r(iS," (RetriBERT model)"),iS.forEach(t),Kgo=i(S),Ps=n(S,"LI",{});var dS=s(Ps);Jle=n(dS,"STRONG",{});var Vit=s(Jle);Zgo=r(Vit,"roberta"),Vit.forEach(t),eho=r(dS," \u2014 "),tN=n(dS,"A",{href:!0});var Xit=s(tN);oho=r(Xit,"RobertaTokenizer"),Xit.forEach(t),rho=r(dS," or "),aN=n(dS,"A",{href:!0});var zit=s(aN);tho=r(zit,"RobertaTokenizerFast"),zit.forEach(t),aho=r(dS," (RoBERTa model)"),dS.forEach(t),nho=i(S),Bs=n(S,"LI",{});var cS=s(Bs);Yle=n(cS,"STRONG",{});var Qit=s(Yle);sho=r(Qit,"roformer"),Qit.forEach(t),lho=r(cS," \u2014 "),nN=n(cS,"A",{href:!0});var Wit=s(nN);iho=r(Wit,"RoFormerTokenizer"),Wit.forEach(t),dho=r(cS," or "),sN=n(cS,"A",{href:!0});var Hit=s(sN);cho=r(Hit,"RoFormerTokenizerFast"),Hit.forEach(t),fho=r(cS," (RoFormer model)"),cS.forEach(t),mho=i(S),Fh=n(S,"LI",{});var sye=s(Fh);Kle=n(sye,"STRONG",{});var Uit=s(Kle);gho=r(Uit,"speech_to_text"),Uit.forEach(t),hho=r(sye," \u2014 "),lN=n(sye,"A",{href:!0});var Jit=s(lN);pho=r(Jit,"Speech2TextTokenizer"),Jit.forEach(t),_ho=r(sye," (Speech2Text model)"),sye.forEach(t),uho=i(S),Th=n(S,"LI",{});var lye=s(Th);Zle=n(lye,"STRONG",{});var Yit=s(Zle);bho=r(Yit,"speech_to_text_2"),Yit.forEach(t),vho=r(lye," \u2014 "),iN=n(lye,"A",{href:!0});var Kit=s(iN);Fho=r(Kit,"Speech2Text2Tokenizer"),Kit.forEach(t),Tho=r(lye," (Speech2Text2 model)"),lye.forEach(t),Mho=i(S),Is=n(S,"LI",{});var fS=s(Is);eie=n(fS,"STRONG",{});var Zit=s(eie);Eho=r(Zit,"splinter"),Zit.forEach(t),Cho=r(fS," \u2014 "),dN=n(fS,"A",{href:!0});var edt=s(dN);who=r(edt,"SplinterTokenizer"),edt.forEach(t),Aho=r(fS," or "),cN=n(fS,"A",{href:!0});var odt=s(cN);Lho=r(odt,"SplinterTokenizerFast"),odt.forEach(t),yho=r(fS," (Splinter model)"),fS.forEach(t),xho=i(S),Ns=n(S,"LI",{});var mS=s(Ns);oie=n(mS,"STRONG",{});var rdt=s(oie);$ho=r(rdt,"squeezebert"),rdt.forEach(t),kho=r(mS," \u2014 "),fN=n(mS,"A",{href:!0});var tdt=s(fN);Sho=r(tdt,"SqueezeBertTokenizer"),tdt.forEach(t),Rho=r(mS," or "),mN=n(mS,"A",{href:!0});var adt=s(mN);Pho=r(adt,"SqueezeBertTokenizerFast"),adt.forEach(t),Bho=r(mS," (SqueezeBERT model)"),mS.forEach(t),Iho=i(S),qs=n(S,"LI",{});var gS=s(qs);rie=n(gS,"STRONG",{});var ndt=s(rie);Nho=r(ndt,"t5"),ndt.forEach(t),qho=r(gS," \u2014 "),gN=n(gS,"A",{href:!0});var sdt=s(gN);jho=r(sdt,"T5Tokenizer"),sdt.forEach(t),Dho=r(gS," or "),hN=n(gS,"A",{href:!0});var ldt=s(hN);Gho=r(ldt,"T5TokenizerFast"),ldt.forEach(t),Oho=r(gS," (T5 model)"),gS.forEach(t),Vho=i(S),Mh=n(S,"LI",{});var iye=s(Mh);tie=n(iye,"STRONG",{});var idt=s(tie);Xho=r(idt,"tapas"),idt.forEach(t),zho=r(iye," \u2014 "),pN=n(iye,"A",{href:!0});var ddt=s(pN);Qho=r(ddt,"TapasTokenizer"),ddt.forEach(t),Who=r(iye," (TAPAS model)"),iye.forEach(t),Hho=i(S),Eh=n(S,"LI",{});var dye=s(Eh);aie=n(dye,"STRONG",{});var cdt=s(aie);Uho=r(cdt,"tapex"),cdt.forEach(t),Jho=r(dye," \u2014 "),_N=n(dye,"A",{href:!0});var fdt=s(_N);Yho=r(fdt,"TapexTokenizer"),fdt.forEach(t),Kho=r(dye," (TAPEX model)"),dye.forEach(t),Zho=i(S),Ch=n(S,"LI",{});var cye=s(Ch);nie=n(cye,"STRONG",{});var mdt=s(nie);epo=r(mdt,"transfo-xl"),mdt.forEach(t),opo=r(cye," \u2014 "),uN=n(cye,"A",{href:!0});var gdt=s(uN);rpo=r(gdt,"TransfoXLTokenizer"),gdt.forEach(t),tpo=r(cye," (Transformer-XL model)"),cye.forEach(t),apo=i(S),js=n(S,"LI",{});var hS=s(js);sie=n(hS,"STRONG",{});var hdt=s(sie);npo=r(hdt,"vilt"),hdt.forEach(t),spo=r(hS," \u2014 "),bN=n(hS,"A",{href:!0});var pdt=s(bN);lpo=r(pdt,"BertTokenizer"),pdt.forEach(t),ipo=r(hS," or "),vN=n(hS,"A",{href:!0});var _dt=s(vN);dpo=r(_dt,"BertTokenizerFast"),_dt.forEach(t),cpo=r(hS," (ViLT model)"),hS.forEach(t),fpo=i(S),Ds=n(S,"LI",{});var pS=s(Ds);lie=n(pS,"STRONG",{});var udt=s(lie);mpo=r(udt,"visual_bert"),udt.forEach(t),gpo=r(pS," \u2014 "),FN=n(pS,"A",{href:!0});var bdt=s(FN);hpo=r(bdt,"BertTokenizer"),bdt.forEach(t),ppo=r(pS," or "),TN=n(pS,"A",{href:!0});var vdt=s(TN);_po=r(vdt,"BertTokenizerFast"),vdt.forEach(t),upo=r(pS," (VisualBERT model)"),pS.forEach(t),bpo=i(S),wh=n(S,"LI",{});var fye=s(wh);iie=n(fye,"STRONG",{});var Fdt=s(iie);vpo=r(Fdt,"wav2vec2"),Fdt.forEach(t),Fpo=r(fye," \u2014 "),MN=n(fye,"A",{href:!0});var Tdt=s(MN);Tpo=r(Tdt,"Wav2Vec2CTCTokenizer"),Tdt.forEach(t),Mpo=r(fye," (Wav2Vec2 model)"),fye.forEach(t),Epo=i(S),Ah=n(S,"LI",{});var mye=s(Ah);die=n(mye,"STRONG",{});var Mdt=s(die);Cpo=r(Mdt,"wav2vec2-conformer"),Mdt.forEach(t),wpo=r(mye," \u2014 "),EN=n(mye,"A",{href:!0});var Edt=s(EN);Apo=r(Edt,"Wav2Vec2CTCTokenizer"),Edt.forEach(t),Lpo=r(mye," (Wav2Vec2-Conformer model)"),mye.forEach(t),ypo=i(S),Lh=n(S,"LI",{});var gye=s(Lh);cie=n(gye,"STRONG",{});var Cdt=s(cie);xpo=r(Cdt,"wav2vec2_phoneme"),Cdt.forEach(t),$po=r(gye," \u2014 "),CN=n(gye,"A",{href:!0});var wdt=s(CN);kpo=r(wdt,"Wav2Vec2PhonemeCTCTokenizer"),wdt.forEach(t),Spo=r(gye," (Wav2Vec2Phoneme model)"),gye.forEach(t),Rpo=i(S),Gs=n(S,"LI",{});var _S=s(Gs);fie=n(_S,"STRONG",{});var Adt=s(fie);Ppo=r(Adt,"xglm"),Adt.forEach(t),Bpo=r(_S," \u2014 "),wN=n(_S,"A",{href:!0});var Ldt=s(wN);Ipo=r(Ldt,"XGLMTokenizer"),Ldt.forEach(t),Npo=r(_S," or "),AN=n(_S,"A",{href:!0});var ydt=s(AN);qpo=r(ydt,"XGLMTokenizerFast"),ydt.forEach(t),jpo=r(_S," (XGLM model)"),_S.forEach(t),Dpo=i(S),yh=n(S,"LI",{});var hye=s(yh);mie=n(hye,"STRONG",{});var xdt=s(mie);Gpo=r(xdt,"xlm"),xdt.forEach(t),Opo=r(hye," \u2014 "),LN=n(hye,"A",{href:!0});var $dt=s(LN);Vpo=r($dt,"XLMTokenizer"),$dt.forEach(t),Xpo=r(hye," (XLM model)"),hye.forEach(t),zpo=i(S),xh=n(S,"LI",{});var pye=s(xh);gie=n(pye,"STRONG",{});var kdt=s(gie);Qpo=r(kdt,"xlm-prophetnet"),kdt.forEach(t),Wpo=r(pye," \u2014 "),yN=n(pye,"A",{href:!0});var Sdt=s(yN);Hpo=r(Sdt,"XLMProphetNetTokenizer"),Sdt.forEach(t),Upo=r(pye," (XLM-ProphetNet model)"),pye.forEach(t),Jpo=i(S),Os=n(S,"LI",{});var uS=s(Os);hie=n(uS,"STRONG",{});var Rdt=s(hie);Ypo=r(Rdt,"xlm-roberta"),Rdt.forEach(t),Kpo=r(uS," \u2014 "),xN=n(uS,"A",{href:!0});var Pdt=s(xN);Zpo=r(Pdt,"XLMRobertaTokenizer"),Pdt.forEach(t),e_o=r(uS," or "),$N=n(uS,"A",{href:!0});var Bdt=s($N);o_o=r(Bdt,"XLMRobertaTokenizerFast"),Bdt.forEach(t),r_o=r(uS," (XLM-RoBERTa model)"),uS.forEach(t),t_o=i(S),Vs=n(S,"LI",{});var bS=s(Vs);pie=n(bS,"STRONG",{});var Idt=s(pie);a_o=r(Idt,"xlm-roberta-xl"),Idt.forEach(t),n_o=r(bS," \u2014 "),kN=n(bS,"A",{href:!0});var Ndt=s(kN);s_o=r(Ndt,"RobertaTokenizer"),Ndt.forEach(t),l_o=r(bS," or "),SN=n(bS,"A",{href:!0});var qdt=s(SN);i_o=r(qdt,"RobertaTokenizerFast"),qdt.forEach(t),d_o=r(bS," (XLM-RoBERTa-XL model)"),bS.forEach(t),c_o=i(S),Xs=n(S,"LI",{});var vS=s(Xs);_ie=n(vS,"STRONG",{});var jdt=s(_ie);f_o=r(jdt,"xlnet"),jdt.forEach(t),m_o=r(vS," \u2014 "),RN=n(vS,"A",{href:!0});var Ddt=s(RN);g_o=r(Ddt,"XLNetTokenizer"),Ddt.forEach(t),h_o=r(vS," or "),PN=n(vS,"A",{href:!0});var Gdt=s(PN);p_o=r(Gdt,"XLNetTokenizerFast"),Gdt.forEach(t),__o=r(vS," (XLNet model)"),vS.forEach(t),u_o=i(S),zs=n(S,"LI",{});var FS=s(zs);uie=n(FS,"STRONG",{});var Odt=s(uie);b_o=r(Odt,"yoso"),Odt.forEach(t),v_o=r(FS," \u2014 "),BN=n(FS,"A",{href:!0});var Vdt=s(BN);F_o=r(Vdt,"AlbertTokenizer"),Vdt.forEach(t),T_o=r(FS," or "),IN=n(FS,"A",{href:!0});var Xdt=s(IN);M_o=r(Xdt,"AlbertTokenizerFast"),Xdt.forEach(t),E_o=r(FS," (YOSO model)"),FS.forEach(t),S.forEach(t),C_o=i(Ys),T($h.$$.fragment,Ys),Ys.forEach(t),w_o=i(Js),kh=n(Js,"DIV",{class:!0});var Cze=s(kh);T(iL.$$.fragment,Cze),A_o=i(Cze),bie=n(Cze,"P",{});var zdt=s(bie);L_o=r(zdt,"Register a new tokenizer in this mapping."),zdt.forEach(t),Cze.forEach(t),Js.forEach(t),EVe=i(f),Ii=n(f,"H2",{class:!0});var wze=s(Ii);Sh=n(wze,"A",{id:!0,class:!0,href:!0});var Qdt=s(Sh);vie=n(Qdt,"SPAN",{});var Wdt=s(vie);T(dL.$$.fragment,Wdt),Wdt.forEach(t),Qdt.forEach(t),y_o=i(wze),Fie=n(wze,"SPAN",{});var Hdt=s(Fie);x_o=r(Hdt,"AutoFeatureExtractor"),Hdt.forEach(t),wze.forEach(t),CVe=i(f),Lo=n(f,"DIV",{class:!0});var Ks=s(Lo);T(cL.$$.fragment,Ks),$_o=i(Ks),fL=n(Ks,"P",{});var Aze=s(fL);k_o=r(Aze,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),NN=n(Aze,"A",{href:!0});var Udt=s(NN);S_o=r(Udt,"AutoFeatureExtractor.from_pretrained()"),Udt.forEach(t),R_o=r(Aze," class method."),Aze.forEach(t),P_o=i(Ks),mL=n(Ks,"P",{});var Lze=s(mL);B_o=r(Lze,"This class cannot be instantiated directly using "),Tie=n(Lze,"CODE",{});var Jdt=s(Tie);I_o=r(Jdt,"__init__()"),Jdt.forEach(t),N_o=r(Lze," (throws an error)."),Lze.forEach(t),q_o=i(Ks),He=n(Ks,"DIV",{class:!0});var ta=s(He);T(gL.$$.fragment,ta),j_o=i(ta),Mie=n(ta,"P",{});var Ydt=s(Mie);D_o=r(Ydt,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Ydt.forEach(t),G_o=i(ta),Ra=n(ta,"P",{});var Yw=s(Ra);O_o=r(Yw,"The feature extractor class to instantiate is selected based on the "),Eie=n(Yw,"CODE",{});var Kdt=s(Eie);V_o=r(Kdt,"model_type"),Kdt.forEach(t),X_o=r(Yw,` property of the config object
(either passed as an argument or loaded from `),Cie=n(Yw,"CODE",{});var Zdt=s(Cie);z_o=r(Zdt,"pretrained_model_name_or_path"),Zdt.forEach(t),Q_o=r(Yw,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),wie=n(Yw,"CODE",{});var ect=s(wie);W_o=r(ect,"pretrained_model_name_or_path"),ect.forEach(t),H_o=r(Yw,":"),Yw.forEach(t),U_o=i(ta),Y=n(ta,"UL",{});var K=s(Y);Rh=n(K,"LI",{});var _ye=s(Rh);Aie=n(_ye,"STRONG",{});var oct=s(Aie);J_o=r(oct,"beit"),oct.forEach(t),Y_o=r(_ye," \u2014 "),qN=n(_ye,"A",{href:!0});var rct=s(qN);K_o=r(rct,"BeitFeatureExtractor"),rct.forEach(t),Z_o=r(_ye," (BEiT model)"),_ye.forEach(t),euo=i(K),Ph=n(K,"LI",{});var uye=s(Ph);Lie=n(uye,"STRONG",{});var tct=s(Lie);ouo=r(tct,"clip"),tct.forEach(t),ruo=r(uye," \u2014 "),jN=n(uye,"A",{href:!0});var act=s(jN);tuo=r(act,"CLIPFeatureExtractor"),act.forEach(t),auo=r(uye," (CLIP model)"),uye.forEach(t),nuo=i(K),Bh=n(K,"LI",{});var bye=s(Bh);yie=n(bye,"STRONG",{});var nct=s(yie);suo=r(nct,"convnext"),nct.forEach(t),luo=r(bye," \u2014 "),DN=n(bye,"A",{href:!0});var sct=s(DN);iuo=r(sct,"ConvNextFeatureExtractor"),sct.forEach(t),duo=r(bye," (ConvNeXT model)"),bye.forEach(t),cuo=i(K),Ih=n(K,"LI",{});var vye=s(Ih);xie=n(vye,"STRONG",{});var lct=s(xie);fuo=r(lct,"cvt"),lct.forEach(t),muo=r(vye," \u2014 "),GN=n(vye,"A",{href:!0});var ict=s(GN);guo=r(ict,"ConvNextFeatureExtractor"),ict.forEach(t),huo=r(vye," (CvT model)"),vye.forEach(t),puo=i(K),Nh=n(K,"LI",{});var Fye=s(Nh);$ie=n(Fye,"STRONG",{});var dct=s($ie);_uo=r(dct,"data2vec-audio"),dct.forEach(t),uuo=r(Fye," \u2014 "),ON=n(Fye,"A",{href:!0});var cct=s(ON);buo=r(cct,"Wav2Vec2FeatureExtractor"),cct.forEach(t),vuo=r(Fye," (Data2VecAudio model)"),Fye.forEach(t),Fuo=i(K),qh=n(K,"LI",{});var Tye=s(qh);kie=n(Tye,"STRONG",{});var fct=s(kie);Tuo=r(fct,"data2vec-vision"),fct.forEach(t),Muo=r(Tye," \u2014 "),VN=n(Tye,"A",{href:!0});var mct=s(VN);Euo=r(mct,"BeitFeatureExtractor"),mct.forEach(t),Cuo=r(Tye," (Data2VecVision model)"),Tye.forEach(t),wuo=i(K),jh=n(K,"LI",{});var Mye=s(jh);Sie=n(Mye,"STRONG",{});var gct=s(Sie);Auo=r(gct,"deit"),gct.forEach(t),Luo=r(Mye," \u2014 "),XN=n(Mye,"A",{href:!0});var hct=s(XN);yuo=r(hct,"DeiTFeatureExtractor"),hct.forEach(t),xuo=r(Mye," (DeiT model)"),Mye.forEach(t),$uo=i(K),Dh=n(K,"LI",{});var Eye=s(Dh);Rie=n(Eye,"STRONG",{});var pct=s(Rie);kuo=r(pct,"detr"),pct.forEach(t),Suo=r(Eye," \u2014 "),zN=n(Eye,"A",{href:!0});var _ct=s(zN);Ruo=r(_ct,"DetrFeatureExtractor"),_ct.forEach(t),Puo=r(Eye," (DETR model)"),Eye.forEach(t),Buo=i(K),Gh=n(K,"LI",{});var Cye=s(Gh);Pie=n(Cye,"STRONG",{});var uct=s(Pie);Iuo=r(uct,"dpt"),uct.forEach(t),Nuo=r(Cye," \u2014 "),QN=n(Cye,"A",{href:!0});var bct=s(QN);quo=r(bct,"DPTFeatureExtractor"),bct.forEach(t),juo=r(Cye," (DPT model)"),Cye.forEach(t),Duo=i(K),Oh=n(K,"LI",{});var wye=s(Oh);Bie=n(wye,"STRONG",{});var vct=s(Bie);Guo=r(vct,"flava"),vct.forEach(t),Ouo=r(wye," \u2014 "),WN=n(wye,"A",{href:!0});var Fct=s(WN);Vuo=r(Fct,"FlavaFeatureExtractor"),Fct.forEach(t),Xuo=r(wye," (FLAVA model)"),wye.forEach(t),zuo=i(K),Vh=n(K,"LI",{});var Aye=s(Vh);Iie=n(Aye,"STRONG",{});var Tct=s(Iie);Quo=r(Tct,"glpn"),Tct.forEach(t),Wuo=r(Aye," \u2014 "),HN=n(Aye,"A",{href:!0});var Mct=s(HN);Huo=r(Mct,"GLPNFeatureExtractor"),Mct.forEach(t),Uuo=r(Aye," (GLPN model)"),Aye.forEach(t),Juo=i(K),Xh=n(K,"LI",{});var Lye=s(Xh);Nie=n(Lye,"STRONG",{});var Ect=s(Nie);Yuo=r(Ect,"groupvit"),Ect.forEach(t),Kuo=r(Lye," \u2014 "),UN=n(Lye,"A",{href:!0});var Cct=s(UN);Zuo=r(Cct,"CLIPFeatureExtractor"),Cct.forEach(t),e1o=r(Lye," (GroupViT model)"),Lye.forEach(t),o1o=i(K),zh=n(K,"LI",{});var yye=s(zh);qie=n(yye,"STRONG",{});var wct=s(qie);r1o=r(wct,"hubert"),wct.forEach(t),t1o=r(yye," \u2014 "),JN=n(yye,"A",{href:!0});var Act=s(JN);a1o=r(Act,"Wav2Vec2FeatureExtractor"),Act.forEach(t),n1o=r(yye," (Hubert model)"),yye.forEach(t),s1o=i(K),Qh=n(K,"LI",{});var xye=s(Qh);jie=n(xye,"STRONG",{});var Lct=s(jie);l1o=r(Lct,"imagegpt"),Lct.forEach(t),i1o=r(xye," \u2014 "),YN=n(xye,"A",{href:!0});var yct=s(YN);d1o=r(yct,"ImageGPTFeatureExtractor"),yct.forEach(t),c1o=r(xye," (ImageGPT model)"),xye.forEach(t),f1o=i(K),Wh=n(K,"LI",{});var $ye=s(Wh);Die=n($ye,"STRONG",{});var xct=s(Die);m1o=r(xct,"layoutlmv2"),xct.forEach(t),g1o=r($ye," \u2014 "),KN=n($ye,"A",{href:!0});var $ct=s(KN);h1o=r($ct,"LayoutLMv2FeatureExtractor"),$ct.forEach(t),p1o=r($ye," (LayoutLMv2 model)"),$ye.forEach(t),_1o=i(K),Hh=n(K,"LI",{});var kye=s(Hh);Gie=n(kye,"STRONG",{});var kct=s(Gie);u1o=r(kct,"layoutlmv3"),kct.forEach(t),b1o=r(kye," \u2014 "),ZN=n(kye,"A",{href:!0});var Sct=s(ZN);v1o=r(Sct,"LayoutLMv3FeatureExtractor"),Sct.forEach(t),F1o=r(kye," (LayoutLMv3 model)"),kye.forEach(t),T1o=i(K),Uh=n(K,"LI",{});var Sye=s(Uh);Oie=n(Sye,"STRONG",{});var Rct=s(Oie);M1o=r(Rct,"levit"),Rct.forEach(t),E1o=r(Sye," \u2014 "),eq=n(Sye,"A",{href:!0});var Pct=s(eq);C1o=r(Pct,"LevitFeatureExtractor"),Pct.forEach(t),w1o=r(Sye," (LeViT model)"),Sye.forEach(t),A1o=i(K),Jh=n(K,"LI",{});var Rye=s(Jh);Vie=n(Rye,"STRONG",{});var Bct=s(Vie);L1o=r(Bct,"maskformer"),Bct.forEach(t),y1o=r(Rye," \u2014 "),oq=n(Rye,"A",{href:!0});var Ict=s(oq);x1o=r(Ict,"MaskFormerFeatureExtractor"),Ict.forEach(t),$1o=r(Rye," (MaskFormer model)"),Rye.forEach(t),k1o=i(K),Yh=n(K,"LI",{});var Pye=s(Yh);Xie=n(Pye,"STRONG",{});var Nct=s(Xie);S1o=r(Nct,"mctct"),Nct.forEach(t),R1o=r(Pye," \u2014 "),rq=n(Pye,"A",{href:!0});var qct=s(rq);P1o=r(qct,"MCTCTFeatureExtractor"),qct.forEach(t),B1o=r(Pye," (M-CTC-T model)"),Pye.forEach(t),I1o=i(K),Kh=n(K,"LI",{});var Bye=s(Kh);zie=n(Bye,"STRONG",{});var jct=s(zie);N1o=r(jct,"perceiver"),jct.forEach(t),q1o=r(Bye," \u2014 "),tq=n(Bye,"A",{href:!0});var Dct=s(tq);j1o=r(Dct,"PerceiverFeatureExtractor"),Dct.forEach(t),D1o=r(Bye," (Perceiver model)"),Bye.forEach(t),G1o=i(K),Zh=n(K,"LI",{});var Iye=s(Zh);Qie=n(Iye,"STRONG",{});var Gct=s(Qie);O1o=r(Gct,"poolformer"),Gct.forEach(t),V1o=r(Iye," \u2014 "),aq=n(Iye,"A",{href:!0});var Oct=s(aq);X1o=r(Oct,"PoolFormerFeatureExtractor"),Oct.forEach(t),z1o=r(Iye," (PoolFormer model)"),Iye.forEach(t),Q1o=i(K),ep=n(K,"LI",{});var Nye=s(ep);Wie=n(Nye,"STRONG",{});var Vct=s(Wie);W1o=r(Vct,"regnet"),Vct.forEach(t),H1o=r(Nye," \u2014 "),nq=n(Nye,"A",{href:!0});var Xct=s(nq);U1o=r(Xct,"ConvNextFeatureExtractor"),Xct.forEach(t),J1o=r(Nye," (RegNet model)"),Nye.forEach(t),Y1o=i(K),op=n(K,"LI",{});var qye=s(op);Hie=n(qye,"STRONG",{});var zct=s(Hie);K1o=r(zct,"resnet"),zct.forEach(t),Z1o=r(qye," \u2014 "),sq=n(qye,"A",{href:!0});var Qct=s(sq);e2o=r(Qct,"ConvNextFeatureExtractor"),Qct.forEach(t),o2o=r(qye," (ResNet model)"),qye.forEach(t),r2o=i(K),rp=n(K,"LI",{});var jye=s(rp);Uie=n(jye,"STRONG",{});var Wct=s(Uie);t2o=r(Wct,"segformer"),Wct.forEach(t),a2o=r(jye," \u2014 "),lq=n(jye,"A",{href:!0});var Hct=s(lq);n2o=r(Hct,"SegformerFeatureExtractor"),Hct.forEach(t),s2o=r(jye," (SegFormer model)"),jye.forEach(t),l2o=i(K),tp=n(K,"LI",{});var Dye=s(tp);Jie=n(Dye,"STRONG",{});var Uct=s(Jie);i2o=r(Uct,"speech_to_text"),Uct.forEach(t),d2o=r(Dye," \u2014 "),iq=n(Dye,"A",{href:!0});var Jct=s(iq);c2o=r(Jct,"Speech2TextFeatureExtractor"),Jct.forEach(t),f2o=r(Dye," (Speech2Text model)"),Dye.forEach(t),m2o=i(K),ap=n(K,"LI",{});var Gye=s(ap);Yie=n(Gye,"STRONG",{});var Yct=s(Yie);g2o=r(Yct,"swin"),Yct.forEach(t),h2o=r(Gye," \u2014 "),dq=n(Gye,"A",{href:!0});var Kct=s(dq);p2o=r(Kct,"ViTFeatureExtractor"),Kct.forEach(t),_2o=r(Gye," (Swin Transformer model)"),Gye.forEach(t),u2o=i(K),np=n(K,"LI",{});var Oye=s(np);Kie=n(Oye,"STRONG",{});var Zct=s(Kie);b2o=r(Zct,"van"),Zct.forEach(t),v2o=r(Oye," \u2014 "),cq=n(Oye,"A",{href:!0});var eft=s(cq);F2o=r(eft,"ConvNextFeatureExtractor"),eft.forEach(t),T2o=r(Oye," (VAN model)"),Oye.forEach(t),M2o=i(K),sp=n(K,"LI",{});var Vye=s(sp);Zie=n(Vye,"STRONG",{});var oft=s(Zie);E2o=r(oft,"vilt"),oft.forEach(t),C2o=r(Vye," \u2014 "),fq=n(Vye,"A",{href:!0});var rft=s(fq);w2o=r(rft,"ViltFeatureExtractor"),rft.forEach(t),A2o=r(Vye," (ViLT model)"),Vye.forEach(t),L2o=i(K),lp=n(K,"LI",{});var Xye=s(lp);ede=n(Xye,"STRONG",{});var tft=s(ede);y2o=r(tft,"vit"),tft.forEach(t),x2o=r(Xye," \u2014 "),mq=n(Xye,"A",{href:!0});var aft=s(mq);$2o=r(aft,"ViTFeatureExtractor"),aft.forEach(t),k2o=r(Xye," (ViT model)"),Xye.forEach(t),S2o=i(K),ip=n(K,"LI",{});var zye=s(ip);ode=n(zye,"STRONG",{});var nft=s(ode);R2o=r(nft,"vit_mae"),nft.forEach(t),P2o=r(zye," \u2014 "),gq=n(zye,"A",{href:!0});var sft=s(gq);B2o=r(sft,"ViTFeatureExtractor"),sft.forEach(t),I2o=r(zye," (ViTMAE model)"),zye.forEach(t),N2o=i(K),dp=n(K,"LI",{});var Qye=s(dp);rde=n(Qye,"STRONG",{});var lft=s(rde);q2o=r(lft,"wav2vec2"),lft.forEach(t),j2o=r(Qye," \u2014 "),hq=n(Qye,"A",{href:!0});var ift=s(hq);D2o=r(ift,"Wav2Vec2FeatureExtractor"),ift.forEach(t),G2o=r(Qye," (Wav2Vec2 model)"),Qye.forEach(t),O2o=i(K),cp=n(K,"LI",{});var Wye=s(cp);tde=n(Wye,"STRONG",{});var dft=s(tde);V2o=r(dft,"wav2vec2-conformer"),dft.forEach(t),X2o=r(Wye," \u2014 "),pq=n(Wye,"A",{href:!0});var cft=s(pq);z2o=r(cft,"Wav2Vec2FeatureExtractor"),cft.forEach(t),Q2o=r(Wye," (Wav2Vec2-Conformer model)"),Wye.forEach(t),W2o=i(K),fp=n(K,"LI",{});var Hye=s(fp);ade=n(Hye,"STRONG",{});var fft=s(ade);H2o=r(fft,"yolos"),fft.forEach(t),U2o=r(Hye," \u2014 "),_q=n(Hye,"A",{href:!0});var mft=s(_q);J2o=r(mft,"YolosFeatureExtractor"),mft.forEach(t),Y2o=r(Hye," (YOLOS model)"),Hye.forEach(t),K.forEach(t),K2o=i(ta),T(mp.$$.fragment,ta),Z2o=i(ta),T(gp.$$.fragment,ta),ta.forEach(t),ebo=i(Ks),hp=n(Ks,"DIV",{class:!0});var yze=s(hp);T(hL.$$.fragment,yze),obo=i(yze),nde=n(yze,"P",{});var gft=s(nde);rbo=r(gft,"Register a new feature extractor for this class."),gft.forEach(t),yze.forEach(t),Ks.forEach(t),wVe=i(f),Ni=n(f,"H2",{class:!0});var xze=s(Ni);pp=n(xze,"A",{id:!0,class:!0,href:!0});var hft=s(pp);sde=n(hft,"SPAN",{});var pft=s(sde);T(pL.$$.fragment,pft),pft.forEach(t),hft.forEach(t),tbo=i(xze),lde=n(xze,"SPAN",{});var _ft=s(lde);abo=r(_ft,"AutoProcessor"),_ft.forEach(t),xze.forEach(t),AVe=i(f),yo=n(f,"DIV",{class:!0});var Zs=s(yo);T(_L.$$.fragment,Zs),nbo=i(Zs),uL=n(Zs,"P",{});var $ze=s(uL);sbo=r($ze,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),uq=n($ze,"A",{href:!0});var uft=s(uq);lbo=r(uft,"AutoProcessor.from_pretrained()"),uft.forEach(t),ibo=r($ze," class method."),$ze.forEach(t),dbo=i(Zs),bL=n(Zs,"P",{});var kze=s(bL);cbo=r(kze,"This class cannot be instantiated directly using "),ide=n(kze,"CODE",{});var bft=s(ide);fbo=r(bft,"__init__()"),bft.forEach(t),mbo=r(kze," (throws an error)."),kze.forEach(t),gbo=i(Zs),Ue=n(Zs,"DIV",{class:!0});var aa=s(Ue);T(vL.$$.fragment,aa),hbo=i(aa),dde=n(aa,"P",{});var vft=s(dde);pbo=r(vft,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),vft.forEach(t),_bo=i(aa),qi=n(aa,"P",{});var cre=s(qi);ubo=r(cre,"The processor class to instantiate is selected based on the "),cde=n(cre,"CODE",{});var Fft=s(cde);bbo=r(Fft,"model_type"),Fft.forEach(t),vbo=r(cre,` property of the config object (either
passed as an argument or loaded from `),fde=n(cre,"CODE",{});var Tft=s(fde);Fbo=r(Tft,"pretrained_model_name_or_path"),Tft.forEach(t),Tbo=r(cre," if possible):"),cre.forEach(t),Mbo=i(aa),he=n(aa,"UL",{});var ue=s(he);_p=n(ue,"LI",{});var Uye=s(_p);mde=n(Uye,"STRONG",{});var Mft=s(mde);Ebo=r(Mft,"clip"),Mft.forEach(t),Cbo=r(Uye," \u2014 "),bq=n(Uye,"A",{href:!0});var Eft=s(bq);wbo=r(Eft,"CLIPProcessor"),Eft.forEach(t),Abo=r(Uye," (CLIP model)"),Uye.forEach(t),Lbo=i(ue),up=n(ue,"LI",{});var Jye=s(up);gde=n(Jye,"STRONG",{});var Cft=s(gde);ybo=r(Cft,"flava"),Cft.forEach(t),xbo=r(Jye," \u2014 "),hde=n(Jye,"CODE",{});var wft=s(hde);$bo=r(wft,"FLAVAProcessor"),wft.forEach(t),kbo=r(Jye," (FLAVA model)"),Jye.forEach(t),Sbo=i(ue),bp=n(ue,"LI",{});var Yye=s(bp);pde=n(Yye,"STRONG",{});var Aft=s(pde);Rbo=r(Aft,"groupvit"),Aft.forEach(t),Pbo=r(Yye," \u2014 "),vq=n(Yye,"A",{href:!0});var Lft=s(vq);Bbo=r(Lft,"CLIPProcessor"),Lft.forEach(t),Ibo=r(Yye," (GroupViT model)"),Yye.forEach(t),Nbo=i(ue),vp=n(ue,"LI",{});var Kye=s(vp);_de=n(Kye,"STRONG",{});var yft=s(_de);qbo=r(yft,"layoutlmv2"),yft.forEach(t),jbo=r(Kye," \u2014 "),Fq=n(Kye,"A",{href:!0});var xft=s(Fq);Dbo=r(xft,"LayoutLMv2Processor"),xft.forEach(t),Gbo=r(Kye," (LayoutLMv2 model)"),Kye.forEach(t),Obo=i(ue),Fp=n(ue,"LI",{});var Zye=s(Fp);ude=n(Zye,"STRONG",{});var $ft=s(ude);Vbo=r($ft,"layoutlmv3"),$ft.forEach(t),Xbo=r(Zye," \u2014 "),Tq=n(Zye,"A",{href:!0});var kft=s(Tq);zbo=r(kft,"LayoutLMv3Processor"),kft.forEach(t),Qbo=r(Zye," (LayoutLMv3 model)"),Zye.forEach(t),Wbo=i(ue),Tp=n(ue,"LI",{});var e8e=s(Tp);bde=n(e8e,"STRONG",{});var Sft=s(bde);Hbo=r(Sft,"layoutxlm"),Sft.forEach(t),Ubo=r(e8e," \u2014 "),Mq=n(e8e,"A",{href:!0});var Rft=s(Mq);Jbo=r(Rft,"LayoutXLMProcessor"),Rft.forEach(t),Ybo=r(e8e," (LayoutXLM model)"),e8e.forEach(t),Kbo=i(ue),Mp=n(ue,"LI",{});var o8e=s(Mp);vde=n(o8e,"STRONG",{});var Pft=s(vde);Zbo=r(Pft,"sew"),Pft.forEach(t),evo=r(o8e," \u2014 "),Eq=n(o8e,"A",{href:!0});var Bft=s(Eq);ovo=r(Bft,"Wav2Vec2Processor"),Bft.forEach(t),rvo=r(o8e," (SEW model)"),o8e.forEach(t),tvo=i(ue),Ep=n(ue,"LI",{});var r8e=s(Ep);Fde=n(r8e,"STRONG",{});var Ift=s(Fde);avo=r(Ift,"sew-d"),Ift.forEach(t),nvo=r(r8e," \u2014 "),Cq=n(r8e,"A",{href:!0});var Nft=s(Cq);svo=r(Nft,"Wav2Vec2Processor"),Nft.forEach(t),lvo=r(r8e," (SEW-D model)"),r8e.forEach(t),ivo=i(ue),Cp=n(ue,"LI",{});var t8e=s(Cp);Tde=n(t8e,"STRONG",{});var qft=s(Tde);dvo=r(qft,"speech_to_text"),qft.forEach(t),cvo=r(t8e," \u2014 "),wq=n(t8e,"A",{href:!0});var jft=s(wq);fvo=r(jft,"Speech2TextProcessor"),jft.forEach(t),mvo=r(t8e," (Speech2Text model)"),t8e.forEach(t),gvo=i(ue),wp=n(ue,"LI",{});var a8e=s(wp);Mde=n(a8e,"STRONG",{});var Dft=s(Mde);hvo=r(Dft,"speech_to_text_2"),Dft.forEach(t),pvo=r(a8e," \u2014 "),Aq=n(a8e,"A",{href:!0});var Gft=s(Aq);_vo=r(Gft,"Speech2Text2Processor"),Gft.forEach(t),uvo=r(a8e," (Speech2Text2 model)"),a8e.forEach(t),bvo=i(ue),Ap=n(ue,"LI",{});var n8e=s(Ap);Ede=n(n8e,"STRONG",{});var Oft=s(Ede);vvo=r(Oft,"trocr"),Oft.forEach(t),Fvo=r(n8e," \u2014 "),Lq=n(n8e,"A",{href:!0});var Vft=s(Lq);Tvo=r(Vft,"TrOCRProcessor"),Vft.forEach(t),Mvo=r(n8e," (TrOCR model)"),n8e.forEach(t),Evo=i(ue),Lp=n(ue,"LI",{});var s8e=s(Lp);Cde=n(s8e,"STRONG",{});var Xft=s(Cde);Cvo=r(Xft,"unispeech"),Xft.forEach(t),wvo=r(s8e," \u2014 "),yq=n(s8e,"A",{href:!0});var zft=s(yq);Avo=r(zft,"Wav2Vec2Processor"),zft.forEach(t),Lvo=r(s8e," (UniSpeech model)"),s8e.forEach(t),yvo=i(ue),yp=n(ue,"LI",{});var l8e=s(yp);wde=n(l8e,"STRONG",{});var Qft=s(wde);xvo=r(Qft,"unispeech-sat"),Qft.forEach(t),$vo=r(l8e," \u2014 "),xq=n(l8e,"A",{href:!0});var Wft=s(xq);kvo=r(Wft,"Wav2Vec2Processor"),Wft.forEach(t),Svo=r(l8e," (UniSpeechSat model)"),l8e.forEach(t),Rvo=i(ue),xp=n(ue,"LI",{});var i8e=s(xp);Ade=n(i8e,"STRONG",{});var Hft=s(Ade);Pvo=r(Hft,"vilt"),Hft.forEach(t),Bvo=r(i8e," \u2014 "),$q=n(i8e,"A",{href:!0});var Uft=s($q);Ivo=r(Uft,"ViltProcessor"),Uft.forEach(t),Nvo=r(i8e," (ViLT model)"),i8e.forEach(t),qvo=i(ue),$p=n(ue,"LI",{});var d8e=s($p);Lde=n(d8e,"STRONG",{});var Jft=s(Lde);jvo=r(Jft,"vision-text-dual-encoder"),Jft.forEach(t),Dvo=r(d8e," \u2014 "),kq=n(d8e,"A",{href:!0});var Yft=s(kq);Gvo=r(Yft,"VisionTextDualEncoderProcessor"),Yft.forEach(t),Ovo=r(d8e," (VisionTextDualEncoder model)"),d8e.forEach(t),Vvo=i(ue),kp=n(ue,"LI",{});var c8e=s(kp);yde=n(c8e,"STRONG",{});var Kft=s(yde);Xvo=r(Kft,"wav2vec2"),Kft.forEach(t),zvo=r(c8e," \u2014 "),Sq=n(c8e,"A",{href:!0});var Zft=s(Sq);Qvo=r(Zft,"Wav2Vec2Processor"),Zft.forEach(t),Wvo=r(c8e," (Wav2Vec2 model)"),c8e.forEach(t),Hvo=i(ue),Sp=n(ue,"LI",{});var f8e=s(Sp);xde=n(f8e,"STRONG",{});var emt=s(xde);Uvo=r(emt,"wav2vec2-conformer"),emt.forEach(t),Jvo=r(f8e," \u2014 "),Rq=n(f8e,"A",{href:!0});var omt=s(Rq);Yvo=r(omt,"Wav2Vec2Processor"),omt.forEach(t),Kvo=r(f8e," (Wav2Vec2-Conformer model)"),f8e.forEach(t),Zvo=i(ue),Rp=n(ue,"LI",{});var m8e=s(Rp);$de=n(m8e,"STRONG",{});var rmt=s($de);e3o=r(rmt,"wavlm"),rmt.forEach(t),o3o=r(m8e," \u2014 "),Pq=n(m8e,"A",{href:!0});var tmt=s(Pq);r3o=r(tmt,"Wav2Vec2Processor"),tmt.forEach(t),t3o=r(m8e," (WavLM model)"),m8e.forEach(t),ue.forEach(t),a3o=i(aa),T(Pp.$$.fragment,aa),n3o=i(aa),T(Bp.$$.fragment,aa),aa.forEach(t),s3o=i(Zs),Ip=n(Zs,"DIV",{class:!0});var Sze=s(Ip);T(FL.$$.fragment,Sze),l3o=i(Sze),kde=n(Sze,"P",{});var amt=s(kde);i3o=r(amt,"Register a new processor for this class."),amt.forEach(t),Sze.forEach(t),Zs.forEach(t),LVe=i(f),ji=n(f,"H2",{class:!0});var Rze=s(ji);Np=n(Rze,"A",{id:!0,class:!0,href:!0});var nmt=s(Np);Sde=n(nmt,"SPAN",{});var smt=s(Sde);T(TL.$$.fragment,smt),smt.forEach(t),nmt.forEach(t),d3o=i(Rze),Rde=n(Rze,"SPAN",{});var lmt=s(Rde);c3o=r(lmt,"AutoModel"),lmt.forEach(t),Rze.forEach(t),yVe=i(f),xo=n(f,"DIV",{class:!0});var el=s(xo);T(ML.$$.fragment,el),f3o=i(el),Di=n(el,"P",{});var fre=s(Di);m3o=r(fre,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Bq=n(fre,"A",{href:!0});var imt=s(Bq);g3o=r(imt,"from_pretrained()"),imt.forEach(t),h3o=r(fre," class method or the "),Iq=n(fre,"A",{href:!0});var dmt=s(Iq);p3o=r(dmt,"from_config()"),dmt.forEach(t),_3o=r(fre,` class
method.`),fre.forEach(t),u3o=i(el),EL=n(el,"P",{});var Pze=s(EL);b3o=r(Pze,"This class cannot be instantiated directly using "),Pde=n(Pze,"CODE",{});var cmt=s(Pde);v3o=r(cmt,"__init__()"),cmt.forEach(t),F3o=r(Pze," (throws an error)."),Pze.forEach(t),T3o=i(el),st=n(el,"DIV",{class:!0});var Kw=s(st);T(CL.$$.fragment,Kw),M3o=i(Kw),Bde=n(Kw,"P",{});var fmt=s(Bde);E3o=r(fmt,"Instantiates one of the base model classes of the library from a configuration."),fmt.forEach(t),C3o=i(Kw),Gi=n(Kw,"P",{});var mre=s(Gi);w3o=r(mre,`Note:
Loading a model from its configuration file does `),Ide=n(mre,"STRONG",{});var mmt=s(Ide);A3o=r(mmt,"not"),mmt.forEach(t),L3o=r(mre,` load the model weights. It only affects the
model\u2019s configuration. Use `),Nq=n(mre,"A",{href:!0});var gmt=s(Nq);y3o=r(gmt,"from_pretrained()"),gmt.forEach(t),x3o=r(mre," to load the model weights."),mre.forEach(t),$3o=i(Kw),T(qp.$$.fragment,Kw),Kw.forEach(t),k3o=i(el),Je=n(el,"DIV",{class:!0});var na=s(Je);T(wL.$$.fragment,na),S3o=i(na),Nde=n(na,"P",{});var hmt=s(Nde);R3o=r(hmt,"Instantiate one of the base model classes of the library from a pretrained model."),hmt.forEach(t),P3o=i(na),Pa=n(na,"P",{});var Zw=s(Pa);B3o=r(Zw,"The model class to instantiate is selected based on the "),qde=n(Zw,"CODE",{});var pmt=s(qde);I3o=r(pmt,"model_type"),pmt.forEach(t),N3o=r(Zw,` property of the config object (either
passed as an argument or loaded from `),jde=n(Zw,"CODE",{});var _mt=s(jde);q3o=r(_mt,"pretrained_model_name_or_path"),_mt.forEach(t),j3o=r(Zw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dde=n(Zw,"CODE",{});var umt=s(Dde);D3o=r(umt,"pretrained_model_name_or_path"),umt.forEach(t),G3o=r(Zw,":"),Zw.forEach(t),O3o=i(na),y=n(na,"UL",{});var x=s(y);jp=n(x,"LI",{});var g8e=s(jp);Gde=n(g8e,"STRONG",{});var bmt=s(Gde);V3o=r(bmt,"albert"),bmt.forEach(t),X3o=r(g8e," \u2014 "),qq=n(g8e,"A",{href:!0});var vmt=s(qq);z3o=r(vmt,"AlbertModel"),vmt.forEach(t),Q3o=r(g8e," (ALBERT model)"),g8e.forEach(t),W3o=i(x),Dp=n(x,"LI",{});var h8e=s(Dp);Ode=n(h8e,"STRONG",{});var Fmt=s(Ode);H3o=r(Fmt,"bart"),Fmt.forEach(t),U3o=r(h8e," \u2014 "),jq=n(h8e,"A",{href:!0});var Tmt=s(jq);J3o=r(Tmt,"BartModel"),Tmt.forEach(t),Y3o=r(h8e," (BART model)"),h8e.forEach(t),K3o=i(x),Gp=n(x,"LI",{});var p8e=s(Gp);Vde=n(p8e,"STRONG",{});var Mmt=s(Vde);Z3o=r(Mmt,"beit"),Mmt.forEach(t),e5o=r(p8e," \u2014 "),Dq=n(p8e,"A",{href:!0});var Emt=s(Dq);o5o=r(Emt,"BeitModel"),Emt.forEach(t),r5o=r(p8e," (BEiT model)"),p8e.forEach(t),t5o=i(x),Op=n(x,"LI",{});var _8e=s(Op);Xde=n(_8e,"STRONG",{});var Cmt=s(Xde);a5o=r(Cmt,"bert"),Cmt.forEach(t),n5o=r(_8e," \u2014 "),Gq=n(_8e,"A",{href:!0});var wmt=s(Gq);s5o=r(wmt,"BertModel"),wmt.forEach(t),l5o=r(_8e," (BERT model)"),_8e.forEach(t),i5o=i(x),Vp=n(x,"LI",{});var u8e=s(Vp);zde=n(u8e,"STRONG",{});var Amt=s(zde);d5o=r(Amt,"bert-generation"),Amt.forEach(t),c5o=r(u8e," \u2014 "),Oq=n(u8e,"A",{href:!0});var Lmt=s(Oq);f5o=r(Lmt,"BertGenerationEncoder"),Lmt.forEach(t),m5o=r(u8e," (Bert Generation model)"),u8e.forEach(t),g5o=i(x),Xp=n(x,"LI",{});var b8e=s(Xp);Qde=n(b8e,"STRONG",{});var ymt=s(Qde);h5o=r(ymt,"big_bird"),ymt.forEach(t),p5o=r(b8e," \u2014 "),Vq=n(b8e,"A",{href:!0});var xmt=s(Vq);_5o=r(xmt,"BigBirdModel"),xmt.forEach(t),u5o=r(b8e," (BigBird model)"),b8e.forEach(t),b5o=i(x),zp=n(x,"LI",{});var v8e=s(zp);Wde=n(v8e,"STRONG",{});var $mt=s(Wde);v5o=r($mt,"bigbird_pegasus"),$mt.forEach(t),F5o=r(v8e," \u2014 "),Xq=n(v8e,"A",{href:!0});var kmt=s(Xq);T5o=r(kmt,"BigBirdPegasusModel"),kmt.forEach(t),M5o=r(v8e," (BigBird-Pegasus model)"),v8e.forEach(t),E5o=i(x),Qp=n(x,"LI",{});var F8e=s(Qp);Hde=n(F8e,"STRONG",{});var Smt=s(Hde);C5o=r(Smt,"blenderbot"),Smt.forEach(t),w5o=r(F8e," \u2014 "),zq=n(F8e,"A",{href:!0});var Rmt=s(zq);A5o=r(Rmt,"BlenderbotModel"),Rmt.forEach(t),L5o=r(F8e," (Blenderbot model)"),F8e.forEach(t),y5o=i(x),Wp=n(x,"LI",{});var T8e=s(Wp);Ude=n(T8e,"STRONG",{});var Pmt=s(Ude);x5o=r(Pmt,"blenderbot-small"),Pmt.forEach(t),$5o=r(T8e," \u2014 "),Qq=n(T8e,"A",{href:!0});var Bmt=s(Qq);k5o=r(Bmt,"BlenderbotSmallModel"),Bmt.forEach(t),S5o=r(T8e," (BlenderbotSmall model)"),T8e.forEach(t),R5o=i(x),Hp=n(x,"LI",{});var M8e=s(Hp);Jde=n(M8e,"STRONG",{});var Imt=s(Jde);P5o=r(Imt,"bloom"),Imt.forEach(t),B5o=r(M8e," \u2014 "),Wq=n(M8e,"A",{href:!0});var Nmt=s(Wq);I5o=r(Nmt,"BloomModel"),Nmt.forEach(t),N5o=r(M8e," (BLOOM model)"),M8e.forEach(t),q5o=i(x),Up=n(x,"LI",{});var E8e=s(Up);Yde=n(E8e,"STRONG",{});var qmt=s(Yde);j5o=r(qmt,"camembert"),qmt.forEach(t),D5o=r(E8e," \u2014 "),Hq=n(E8e,"A",{href:!0});var jmt=s(Hq);G5o=r(jmt,"CamembertModel"),jmt.forEach(t),O5o=r(E8e," (CamemBERT model)"),E8e.forEach(t),V5o=i(x),Jp=n(x,"LI",{});var C8e=s(Jp);Kde=n(C8e,"STRONG",{});var Dmt=s(Kde);X5o=r(Dmt,"canine"),Dmt.forEach(t),z5o=r(C8e," \u2014 "),Uq=n(C8e,"A",{href:!0});var Gmt=s(Uq);Q5o=r(Gmt,"CanineModel"),Gmt.forEach(t),W5o=r(C8e," (CANINE model)"),C8e.forEach(t),H5o=i(x),Yp=n(x,"LI",{});var w8e=s(Yp);Zde=n(w8e,"STRONG",{});var Omt=s(Zde);U5o=r(Omt,"clip"),Omt.forEach(t),J5o=r(w8e," \u2014 "),Jq=n(w8e,"A",{href:!0});var Vmt=s(Jq);Y5o=r(Vmt,"CLIPModel"),Vmt.forEach(t),K5o=r(w8e," (CLIP model)"),w8e.forEach(t),Z5o=i(x),Kp=n(x,"LI",{});var A8e=s(Kp);ece=n(A8e,"STRONG",{});var Xmt=s(ece);eFo=r(Xmt,"codegen"),Xmt.forEach(t),oFo=r(A8e," \u2014 "),Yq=n(A8e,"A",{href:!0});var zmt=s(Yq);rFo=r(zmt,"CodeGenModel"),zmt.forEach(t),tFo=r(A8e," (CodeGen model)"),A8e.forEach(t),aFo=i(x),Zp=n(x,"LI",{});var L8e=s(Zp);oce=n(L8e,"STRONG",{});var Qmt=s(oce);nFo=r(Qmt,"convbert"),Qmt.forEach(t),sFo=r(L8e," \u2014 "),Kq=n(L8e,"A",{href:!0});var Wmt=s(Kq);lFo=r(Wmt,"ConvBertModel"),Wmt.forEach(t),iFo=r(L8e," (ConvBERT model)"),L8e.forEach(t),dFo=i(x),e_=n(x,"LI",{});var y8e=s(e_);rce=n(y8e,"STRONG",{});var Hmt=s(rce);cFo=r(Hmt,"convnext"),Hmt.forEach(t),fFo=r(y8e," \u2014 "),Zq=n(y8e,"A",{href:!0});var Umt=s(Zq);mFo=r(Umt,"ConvNextModel"),Umt.forEach(t),gFo=r(y8e," (ConvNeXT model)"),y8e.forEach(t),hFo=i(x),o_=n(x,"LI",{});var x8e=s(o_);tce=n(x8e,"STRONG",{});var Jmt=s(tce);pFo=r(Jmt,"ctrl"),Jmt.forEach(t),_Fo=r(x8e," \u2014 "),ej=n(x8e,"A",{href:!0});var Ymt=s(ej);uFo=r(Ymt,"CTRLModel"),Ymt.forEach(t),bFo=r(x8e," (CTRL model)"),x8e.forEach(t),vFo=i(x),r_=n(x,"LI",{});var $8e=s(r_);ace=n($8e,"STRONG",{});var Kmt=s(ace);FFo=r(Kmt,"cvt"),Kmt.forEach(t),TFo=r($8e," \u2014 "),oj=n($8e,"A",{href:!0});var Zmt=s(oj);MFo=r(Zmt,"CvtModel"),Zmt.forEach(t),EFo=r($8e," (CvT model)"),$8e.forEach(t),CFo=i(x),t_=n(x,"LI",{});var k8e=s(t_);nce=n(k8e,"STRONG",{});var egt=s(nce);wFo=r(egt,"data2vec-audio"),egt.forEach(t),AFo=r(k8e," \u2014 "),rj=n(k8e,"A",{href:!0});var ogt=s(rj);LFo=r(ogt,"Data2VecAudioModel"),ogt.forEach(t),yFo=r(k8e," (Data2VecAudio model)"),k8e.forEach(t),xFo=i(x),a_=n(x,"LI",{});var S8e=s(a_);sce=n(S8e,"STRONG",{});var rgt=s(sce);$Fo=r(rgt,"data2vec-text"),rgt.forEach(t),kFo=r(S8e," \u2014 "),tj=n(S8e,"A",{href:!0});var tgt=s(tj);SFo=r(tgt,"Data2VecTextModel"),tgt.forEach(t),RFo=r(S8e," (Data2VecText model)"),S8e.forEach(t),PFo=i(x),n_=n(x,"LI",{});var R8e=s(n_);lce=n(R8e,"STRONG",{});var agt=s(lce);BFo=r(agt,"data2vec-vision"),agt.forEach(t),IFo=r(R8e," \u2014 "),aj=n(R8e,"A",{href:!0});var ngt=s(aj);NFo=r(ngt,"Data2VecVisionModel"),ngt.forEach(t),qFo=r(R8e," (Data2VecVision model)"),R8e.forEach(t),jFo=i(x),s_=n(x,"LI",{});var P8e=s(s_);ice=n(P8e,"STRONG",{});var sgt=s(ice);DFo=r(sgt,"deberta"),sgt.forEach(t),GFo=r(P8e," \u2014 "),nj=n(P8e,"A",{href:!0});var lgt=s(nj);OFo=r(lgt,"DebertaModel"),lgt.forEach(t),VFo=r(P8e," (DeBERTa model)"),P8e.forEach(t),XFo=i(x),l_=n(x,"LI",{});var B8e=s(l_);dce=n(B8e,"STRONG",{});var igt=s(dce);zFo=r(igt,"deberta-v2"),igt.forEach(t),QFo=r(B8e," \u2014 "),sj=n(B8e,"A",{href:!0});var dgt=s(sj);WFo=r(dgt,"DebertaV2Model"),dgt.forEach(t),HFo=r(B8e," (DeBERTa-v2 model)"),B8e.forEach(t),UFo=i(x),i_=n(x,"LI",{});var I8e=s(i_);cce=n(I8e,"STRONG",{});var cgt=s(cce);JFo=r(cgt,"decision_transformer"),cgt.forEach(t),YFo=r(I8e," \u2014 "),lj=n(I8e,"A",{href:!0});var fgt=s(lj);KFo=r(fgt,"DecisionTransformerModel"),fgt.forEach(t),ZFo=r(I8e," (Decision Transformer model)"),I8e.forEach(t),eTo=i(x),d_=n(x,"LI",{});var N8e=s(d_);fce=n(N8e,"STRONG",{});var mgt=s(fce);oTo=r(mgt,"deit"),mgt.forEach(t),rTo=r(N8e," \u2014 "),ij=n(N8e,"A",{href:!0});var ggt=s(ij);tTo=r(ggt,"DeiTModel"),ggt.forEach(t),aTo=r(N8e," (DeiT model)"),N8e.forEach(t),nTo=i(x),c_=n(x,"LI",{});var q8e=s(c_);mce=n(q8e,"STRONG",{});var hgt=s(mce);sTo=r(hgt,"detr"),hgt.forEach(t),lTo=r(q8e," \u2014 "),dj=n(q8e,"A",{href:!0});var pgt=s(dj);iTo=r(pgt,"DetrModel"),pgt.forEach(t),dTo=r(q8e," (DETR model)"),q8e.forEach(t),cTo=i(x),f_=n(x,"LI",{});var j8e=s(f_);gce=n(j8e,"STRONG",{});var _gt=s(gce);fTo=r(_gt,"distilbert"),_gt.forEach(t),mTo=r(j8e," \u2014 "),cj=n(j8e,"A",{href:!0});var ugt=s(cj);gTo=r(ugt,"DistilBertModel"),ugt.forEach(t),hTo=r(j8e," (DistilBERT model)"),j8e.forEach(t),pTo=i(x),m_=n(x,"LI",{});var D8e=s(m_);hce=n(D8e,"STRONG",{});var bgt=s(hce);_To=r(bgt,"dpr"),bgt.forEach(t),uTo=r(D8e," \u2014 "),fj=n(D8e,"A",{href:!0});var vgt=s(fj);bTo=r(vgt,"DPRQuestionEncoder"),vgt.forEach(t),vTo=r(D8e," (DPR model)"),D8e.forEach(t),FTo=i(x),g_=n(x,"LI",{});var G8e=s(g_);pce=n(G8e,"STRONG",{});var Fgt=s(pce);TTo=r(Fgt,"dpt"),Fgt.forEach(t),MTo=r(G8e," \u2014 "),mj=n(G8e,"A",{href:!0});var Tgt=s(mj);ETo=r(Tgt,"DPTModel"),Tgt.forEach(t),CTo=r(G8e," (DPT model)"),G8e.forEach(t),wTo=i(x),h_=n(x,"LI",{});var O8e=s(h_);_ce=n(O8e,"STRONG",{});var Mgt=s(_ce);ATo=r(Mgt,"electra"),Mgt.forEach(t),LTo=r(O8e," \u2014 "),gj=n(O8e,"A",{href:!0});var Egt=s(gj);yTo=r(Egt,"ElectraModel"),Egt.forEach(t),xTo=r(O8e," (ELECTRA model)"),O8e.forEach(t),$To=i(x),p_=n(x,"LI",{});var V8e=s(p_);uce=n(V8e,"STRONG",{});var Cgt=s(uce);kTo=r(Cgt,"flaubert"),Cgt.forEach(t),STo=r(V8e," \u2014 "),hj=n(V8e,"A",{href:!0});var wgt=s(hj);RTo=r(wgt,"FlaubertModel"),wgt.forEach(t),PTo=r(V8e," (FlauBERT model)"),V8e.forEach(t),BTo=i(x),__=n(x,"LI",{});var X8e=s(__);bce=n(X8e,"STRONG",{});var Agt=s(bce);ITo=r(Agt,"flava"),Agt.forEach(t),NTo=r(X8e," \u2014 "),pj=n(X8e,"A",{href:!0});var Lgt=s(pj);qTo=r(Lgt,"FlavaModel"),Lgt.forEach(t),jTo=r(X8e," (FLAVA model)"),X8e.forEach(t),DTo=i(x),u_=n(x,"LI",{});var z8e=s(u_);vce=n(z8e,"STRONG",{});var ygt=s(vce);GTo=r(ygt,"fnet"),ygt.forEach(t),OTo=r(z8e," \u2014 "),_j=n(z8e,"A",{href:!0});var xgt=s(_j);VTo=r(xgt,"FNetModel"),xgt.forEach(t),XTo=r(z8e," (FNet model)"),z8e.forEach(t),zTo=i(x),b_=n(x,"LI",{});var Q8e=s(b_);Fce=n(Q8e,"STRONG",{});var $gt=s(Fce);QTo=r($gt,"fsmt"),$gt.forEach(t),WTo=r(Q8e," \u2014 "),uj=n(Q8e,"A",{href:!0});var kgt=s(uj);HTo=r(kgt,"FSMTModel"),kgt.forEach(t),UTo=r(Q8e," (FairSeq Machine-Translation model)"),Q8e.forEach(t),JTo=i(x),Qs=n(x,"LI",{});var TS=s(Qs);Tce=n(TS,"STRONG",{});var Sgt=s(Tce);YTo=r(Sgt,"funnel"),Sgt.forEach(t),KTo=r(TS," \u2014 "),bj=n(TS,"A",{href:!0});var Rgt=s(bj);ZTo=r(Rgt,"FunnelModel"),Rgt.forEach(t),e7o=r(TS," or "),vj=n(TS,"A",{href:!0});var Pgt=s(vj);o7o=r(Pgt,"FunnelBaseModel"),Pgt.forEach(t),r7o=r(TS," (Funnel Transformer model)"),TS.forEach(t),t7o=i(x),v_=n(x,"LI",{});var W8e=s(v_);Mce=n(W8e,"STRONG",{});var Bgt=s(Mce);a7o=r(Bgt,"glpn"),Bgt.forEach(t),n7o=r(W8e," \u2014 "),Fj=n(W8e,"A",{href:!0});var Igt=s(Fj);s7o=r(Igt,"GLPNModel"),Igt.forEach(t),l7o=r(W8e," (GLPN model)"),W8e.forEach(t),i7o=i(x),F_=n(x,"LI",{});var H8e=s(F_);Ece=n(H8e,"STRONG",{});var Ngt=s(Ece);d7o=r(Ngt,"gpt2"),Ngt.forEach(t),c7o=r(H8e," \u2014 "),Tj=n(H8e,"A",{href:!0});var qgt=s(Tj);f7o=r(qgt,"GPT2Model"),qgt.forEach(t),m7o=r(H8e," (OpenAI GPT-2 model)"),H8e.forEach(t),g7o=i(x),T_=n(x,"LI",{});var U8e=s(T_);Cce=n(U8e,"STRONG",{});var jgt=s(Cce);h7o=r(jgt,"gpt_neo"),jgt.forEach(t),p7o=r(U8e," \u2014 "),Mj=n(U8e,"A",{href:!0});var Dgt=s(Mj);_7o=r(Dgt,"GPTNeoModel"),Dgt.forEach(t),u7o=r(U8e," (GPT Neo model)"),U8e.forEach(t),b7o=i(x),M_=n(x,"LI",{});var J8e=s(M_);wce=n(J8e,"STRONG",{});var Ggt=s(wce);v7o=r(Ggt,"gpt_neox"),Ggt.forEach(t),F7o=r(J8e," \u2014 "),Ej=n(J8e,"A",{href:!0});var Ogt=s(Ej);T7o=r(Ogt,"GPTNeoXModel"),Ogt.forEach(t),M7o=r(J8e," (GPT NeoX model)"),J8e.forEach(t),E7o=i(x),E_=n(x,"LI",{});var Y8e=s(E_);Ace=n(Y8e,"STRONG",{});var Vgt=s(Ace);C7o=r(Vgt,"gptj"),Vgt.forEach(t),w7o=r(Y8e," \u2014 "),Cj=n(Y8e,"A",{href:!0});var Xgt=s(Cj);A7o=r(Xgt,"GPTJModel"),Xgt.forEach(t),L7o=r(Y8e," (GPT-J model)"),Y8e.forEach(t),y7o=i(x),C_=n(x,"LI",{});var K8e=s(C_);Lce=n(K8e,"STRONG",{});var zgt=s(Lce);x7o=r(zgt,"groupvit"),zgt.forEach(t),$7o=r(K8e," \u2014 "),wj=n(K8e,"A",{href:!0});var Qgt=s(wj);k7o=r(Qgt,"GroupViTModel"),Qgt.forEach(t),S7o=r(K8e," (GroupViT model)"),K8e.forEach(t),R7o=i(x),w_=n(x,"LI",{});var Z8e=s(w_);yce=n(Z8e,"STRONG",{});var Wgt=s(yce);P7o=r(Wgt,"hubert"),Wgt.forEach(t),B7o=r(Z8e," \u2014 "),Aj=n(Z8e,"A",{href:!0});var Hgt=s(Aj);I7o=r(Hgt,"HubertModel"),Hgt.forEach(t),N7o=r(Z8e," (Hubert model)"),Z8e.forEach(t),q7o=i(x),A_=n(x,"LI",{});var exe=s(A_);xce=n(exe,"STRONG",{});var Ugt=s(xce);j7o=r(Ugt,"ibert"),Ugt.forEach(t),D7o=r(exe," \u2014 "),Lj=n(exe,"A",{href:!0});var Jgt=s(Lj);G7o=r(Jgt,"IBertModel"),Jgt.forEach(t),O7o=r(exe," (I-BERT model)"),exe.forEach(t),V7o=i(x),L_=n(x,"LI",{});var oxe=s(L_);$ce=n(oxe,"STRONG",{});var Ygt=s($ce);X7o=r(Ygt,"imagegpt"),Ygt.forEach(t),z7o=r(oxe," \u2014 "),yj=n(oxe,"A",{href:!0});var Kgt=s(yj);Q7o=r(Kgt,"ImageGPTModel"),Kgt.forEach(t),W7o=r(oxe," (ImageGPT model)"),oxe.forEach(t),H7o=i(x),y_=n(x,"LI",{});var rxe=s(y_);kce=n(rxe,"STRONG",{});var Zgt=s(kce);U7o=r(Zgt,"layoutlm"),Zgt.forEach(t),J7o=r(rxe," \u2014 "),xj=n(rxe,"A",{href:!0});var eht=s(xj);Y7o=r(eht,"LayoutLMModel"),eht.forEach(t),K7o=r(rxe," (LayoutLM model)"),rxe.forEach(t),Z7o=i(x),x_=n(x,"LI",{});var txe=s(x_);Sce=n(txe,"STRONG",{});var oht=s(Sce);e9o=r(oht,"layoutlmv2"),oht.forEach(t),o9o=r(txe," \u2014 "),$j=n(txe,"A",{href:!0});var rht=s($j);r9o=r(rht,"LayoutLMv2Model"),rht.forEach(t),t9o=r(txe," (LayoutLMv2 model)"),txe.forEach(t),a9o=i(x),$_=n(x,"LI",{});var axe=s($_);Rce=n(axe,"STRONG",{});var tht=s(Rce);n9o=r(tht,"layoutlmv3"),tht.forEach(t),s9o=r(axe," \u2014 "),kj=n(axe,"A",{href:!0});var aht=s(kj);l9o=r(aht,"LayoutLMv3Model"),aht.forEach(t),i9o=r(axe," (LayoutLMv3 model)"),axe.forEach(t),d9o=i(x),k_=n(x,"LI",{});var nxe=s(k_);Pce=n(nxe,"STRONG",{});var nht=s(Pce);c9o=r(nht,"led"),nht.forEach(t),f9o=r(nxe," \u2014 "),Sj=n(nxe,"A",{href:!0});var sht=s(Sj);m9o=r(sht,"LEDModel"),sht.forEach(t),g9o=r(nxe," (LED model)"),nxe.forEach(t),h9o=i(x),S_=n(x,"LI",{});var sxe=s(S_);Bce=n(sxe,"STRONG",{});var lht=s(Bce);p9o=r(lht,"levit"),lht.forEach(t),_9o=r(sxe," \u2014 "),Rj=n(sxe,"A",{href:!0});var iht=s(Rj);u9o=r(iht,"LevitModel"),iht.forEach(t),b9o=r(sxe," (LeViT model)"),sxe.forEach(t),v9o=i(x),R_=n(x,"LI",{});var lxe=s(R_);Ice=n(lxe,"STRONG",{});var dht=s(Ice);F9o=r(dht,"longformer"),dht.forEach(t),T9o=r(lxe," \u2014 "),Pj=n(lxe,"A",{href:!0});var cht=s(Pj);M9o=r(cht,"LongformerModel"),cht.forEach(t),E9o=r(lxe," (Longformer model)"),lxe.forEach(t),C9o=i(x),P_=n(x,"LI",{});var ixe=s(P_);Nce=n(ixe,"STRONG",{});var fht=s(Nce);w9o=r(fht,"longt5"),fht.forEach(t),A9o=r(ixe," \u2014 "),Bj=n(ixe,"A",{href:!0});var mht=s(Bj);L9o=r(mht,"LongT5Model"),mht.forEach(t),y9o=r(ixe," (LongT5 model)"),ixe.forEach(t),x9o=i(x),B_=n(x,"LI",{});var dxe=s(B_);qce=n(dxe,"STRONG",{});var ght=s(qce);$9o=r(ght,"luke"),ght.forEach(t),k9o=r(dxe," \u2014 "),Ij=n(dxe,"A",{href:!0});var hht=s(Ij);S9o=r(hht,"LukeModel"),hht.forEach(t),R9o=r(dxe," (LUKE model)"),dxe.forEach(t),P9o=i(x),I_=n(x,"LI",{});var cxe=s(I_);jce=n(cxe,"STRONG",{});var pht=s(jce);B9o=r(pht,"lxmert"),pht.forEach(t),I9o=r(cxe," \u2014 "),Nj=n(cxe,"A",{href:!0});var _ht=s(Nj);N9o=r(_ht,"LxmertModel"),_ht.forEach(t),q9o=r(cxe," (LXMERT model)"),cxe.forEach(t),j9o=i(x),N_=n(x,"LI",{});var fxe=s(N_);Dce=n(fxe,"STRONG",{});var uht=s(Dce);D9o=r(uht,"m2m_100"),uht.forEach(t),G9o=r(fxe," \u2014 "),qj=n(fxe,"A",{href:!0});var bht=s(qj);O9o=r(bht,"M2M100Model"),bht.forEach(t),V9o=r(fxe," (M2M100 model)"),fxe.forEach(t),X9o=i(x),q_=n(x,"LI",{});var mxe=s(q_);Gce=n(mxe,"STRONG",{});var vht=s(Gce);z9o=r(vht,"marian"),vht.forEach(t),Q9o=r(mxe," \u2014 "),jj=n(mxe,"A",{href:!0});var Fht=s(jj);W9o=r(Fht,"MarianModel"),Fht.forEach(t),H9o=r(mxe," (Marian model)"),mxe.forEach(t),U9o=i(x),j_=n(x,"LI",{});var gxe=s(j_);Oce=n(gxe,"STRONG",{});var Tht=s(Oce);J9o=r(Tht,"maskformer"),Tht.forEach(t),Y9o=r(gxe," \u2014 "),Dj=n(gxe,"A",{href:!0});var Mht=s(Dj);K9o=r(Mht,"MaskFormerModel"),Mht.forEach(t),Z9o=r(gxe," (MaskFormer model)"),gxe.forEach(t),eMo=i(x),D_=n(x,"LI",{});var hxe=s(D_);Vce=n(hxe,"STRONG",{});var Eht=s(Vce);oMo=r(Eht,"mbart"),Eht.forEach(t),rMo=r(hxe," \u2014 "),Gj=n(hxe,"A",{href:!0});var Cht=s(Gj);tMo=r(Cht,"MBartModel"),Cht.forEach(t),aMo=r(hxe," (mBART model)"),hxe.forEach(t),nMo=i(x),G_=n(x,"LI",{});var pxe=s(G_);Xce=n(pxe,"STRONG",{});var wht=s(Xce);sMo=r(wht,"mctct"),wht.forEach(t),lMo=r(pxe," \u2014 "),Oj=n(pxe,"A",{href:!0});var Aht=s(Oj);iMo=r(Aht,"MCTCTModel"),Aht.forEach(t),dMo=r(pxe," (M-CTC-T model)"),pxe.forEach(t),cMo=i(x),O_=n(x,"LI",{});var _xe=s(O_);zce=n(_xe,"STRONG",{});var Lht=s(zce);fMo=r(Lht,"megatron-bert"),Lht.forEach(t),mMo=r(_xe," \u2014 "),Vj=n(_xe,"A",{href:!0});var yht=s(Vj);gMo=r(yht,"MegatronBertModel"),yht.forEach(t),hMo=r(_xe," (Megatron-BERT model)"),_xe.forEach(t),pMo=i(x),V_=n(x,"LI",{});var uxe=s(V_);Qce=n(uxe,"STRONG",{});var xht=s(Qce);_Mo=r(xht,"mobilebert"),xht.forEach(t),uMo=r(uxe," \u2014 "),Xj=n(uxe,"A",{href:!0});var $ht=s(Xj);bMo=r($ht,"MobileBertModel"),$ht.forEach(t),vMo=r(uxe," (MobileBERT model)"),uxe.forEach(t),FMo=i(x),X_=n(x,"LI",{});var bxe=s(X_);Wce=n(bxe,"STRONG",{});var kht=s(Wce);TMo=r(kht,"mpnet"),kht.forEach(t),MMo=r(bxe," \u2014 "),zj=n(bxe,"A",{href:!0});var Sht=s(zj);EMo=r(Sht,"MPNetModel"),Sht.forEach(t),CMo=r(bxe," (MPNet model)"),bxe.forEach(t),wMo=i(x),z_=n(x,"LI",{});var vxe=s(z_);Hce=n(vxe,"STRONG",{});var Rht=s(Hce);AMo=r(Rht,"mt5"),Rht.forEach(t),LMo=r(vxe," \u2014 "),Qj=n(vxe,"A",{href:!0});var Pht=s(Qj);yMo=r(Pht,"MT5Model"),Pht.forEach(t),xMo=r(vxe," (MT5 model)"),vxe.forEach(t),$Mo=i(x),Q_=n(x,"LI",{});var Fxe=s(Q_);Uce=n(Fxe,"STRONG",{});var Bht=s(Uce);kMo=r(Bht,"mvp"),Bht.forEach(t),SMo=r(Fxe," \u2014 "),Wj=n(Fxe,"A",{href:!0});var Iht=s(Wj);RMo=r(Iht,"MvpModel"),Iht.forEach(t),PMo=r(Fxe," (MVP model)"),Fxe.forEach(t),BMo=i(x),W_=n(x,"LI",{});var Txe=s(W_);Jce=n(Txe,"STRONG",{});var Nht=s(Jce);IMo=r(Nht,"nezha"),Nht.forEach(t),NMo=r(Txe," \u2014 "),Hj=n(Txe,"A",{href:!0});var qht=s(Hj);qMo=r(qht,"NezhaModel"),qht.forEach(t),jMo=r(Txe," (Nezha model)"),Txe.forEach(t),DMo=i(x),H_=n(x,"LI",{});var Mxe=s(H_);Yce=n(Mxe,"STRONG",{});var jht=s(Yce);GMo=r(jht,"nystromformer"),jht.forEach(t),OMo=r(Mxe," \u2014 "),Uj=n(Mxe,"A",{href:!0});var Dht=s(Uj);VMo=r(Dht,"NystromformerModel"),Dht.forEach(t),XMo=r(Mxe," (Nystr\xF6mformer model)"),Mxe.forEach(t),zMo=i(x),U_=n(x,"LI",{});var Exe=s(U_);Kce=n(Exe,"STRONG",{});var Ght=s(Kce);QMo=r(Ght,"openai-gpt"),Ght.forEach(t),WMo=r(Exe," \u2014 "),Jj=n(Exe,"A",{href:!0});var Oht=s(Jj);HMo=r(Oht,"OpenAIGPTModel"),Oht.forEach(t),UMo=r(Exe," (OpenAI GPT model)"),Exe.forEach(t),JMo=i(x),J_=n(x,"LI",{});var Cxe=s(J_);Zce=n(Cxe,"STRONG",{});var Vht=s(Zce);YMo=r(Vht,"opt"),Vht.forEach(t),KMo=r(Cxe," \u2014 "),Yj=n(Cxe,"A",{href:!0});var Xht=s(Yj);ZMo=r(Xht,"OPTModel"),Xht.forEach(t),e4o=r(Cxe," (OPT model)"),Cxe.forEach(t),o4o=i(x),Y_=n(x,"LI",{});var wxe=s(Y_);efe=n(wxe,"STRONG",{});var zht=s(efe);r4o=r(zht,"pegasus"),zht.forEach(t),t4o=r(wxe," \u2014 "),Kj=n(wxe,"A",{href:!0});var Qht=s(Kj);a4o=r(Qht,"PegasusModel"),Qht.forEach(t),n4o=r(wxe," (Pegasus model)"),wxe.forEach(t),s4o=i(x),K_=n(x,"LI",{});var Axe=s(K_);ofe=n(Axe,"STRONG",{});var Wht=s(ofe);l4o=r(Wht,"perceiver"),Wht.forEach(t),i4o=r(Axe," \u2014 "),Zj=n(Axe,"A",{href:!0});var Hht=s(Zj);d4o=r(Hht,"PerceiverModel"),Hht.forEach(t),c4o=r(Axe," (Perceiver model)"),Axe.forEach(t),f4o=i(x),Z_=n(x,"LI",{});var Lxe=s(Z_);rfe=n(Lxe,"STRONG",{});var Uht=s(rfe);m4o=r(Uht,"plbart"),Uht.forEach(t),g4o=r(Lxe," \u2014 "),eD=n(Lxe,"A",{href:!0});var Jht=s(eD);h4o=r(Jht,"PLBartModel"),Jht.forEach(t),p4o=r(Lxe," (PLBart model)"),Lxe.forEach(t),_4o=i(x),eu=n(x,"LI",{});var yxe=s(eu);tfe=n(yxe,"STRONG",{});var Yht=s(tfe);u4o=r(Yht,"poolformer"),Yht.forEach(t),b4o=r(yxe," \u2014 "),oD=n(yxe,"A",{href:!0});var Kht=s(oD);v4o=r(Kht,"PoolFormerModel"),Kht.forEach(t),F4o=r(yxe," (PoolFormer model)"),yxe.forEach(t),T4o=i(x),ou=n(x,"LI",{});var xxe=s(ou);afe=n(xxe,"STRONG",{});var Zht=s(afe);M4o=r(Zht,"prophetnet"),Zht.forEach(t),E4o=r(xxe," \u2014 "),rD=n(xxe,"A",{href:!0});var ept=s(rD);C4o=r(ept,"ProphetNetModel"),ept.forEach(t),w4o=r(xxe," (ProphetNet model)"),xxe.forEach(t),A4o=i(x),ru=n(x,"LI",{});var $xe=s(ru);nfe=n($xe,"STRONG",{});var opt=s(nfe);L4o=r(opt,"qdqbert"),opt.forEach(t),y4o=r($xe," \u2014 "),tD=n($xe,"A",{href:!0});var rpt=s(tD);x4o=r(rpt,"QDQBertModel"),rpt.forEach(t),$4o=r($xe," (QDQBert model)"),$xe.forEach(t),k4o=i(x),tu=n(x,"LI",{});var kxe=s(tu);sfe=n(kxe,"STRONG",{});var tpt=s(sfe);S4o=r(tpt,"reformer"),tpt.forEach(t),R4o=r(kxe," \u2014 "),aD=n(kxe,"A",{href:!0});var apt=s(aD);P4o=r(apt,"ReformerModel"),apt.forEach(t),B4o=r(kxe," (Reformer model)"),kxe.forEach(t),I4o=i(x),au=n(x,"LI",{});var Sxe=s(au);lfe=n(Sxe,"STRONG",{});var npt=s(lfe);N4o=r(npt,"regnet"),npt.forEach(t),q4o=r(Sxe," \u2014 "),nD=n(Sxe,"A",{href:!0});var spt=s(nD);j4o=r(spt,"RegNetModel"),spt.forEach(t),D4o=r(Sxe," (RegNet model)"),Sxe.forEach(t),G4o=i(x),nu=n(x,"LI",{});var Rxe=s(nu);ife=n(Rxe,"STRONG",{});var lpt=s(ife);O4o=r(lpt,"rembert"),lpt.forEach(t),V4o=r(Rxe," \u2014 "),sD=n(Rxe,"A",{href:!0});var ipt=s(sD);X4o=r(ipt,"RemBertModel"),ipt.forEach(t),z4o=r(Rxe," (RemBERT model)"),Rxe.forEach(t),Q4o=i(x),su=n(x,"LI",{});var Pxe=s(su);dfe=n(Pxe,"STRONG",{});var dpt=s(dfe);W4o=r(dpt,"resnet"),dpt.forEach(t),H4o=r(Pxe," \u2014 "),lD=n(Pxe,"A",{href:!0});var cpt=s(lD);U4o=r(cpt,"ResNetModel"),cpt.forEach(t),J4o=r(Pxe," (ResNet model)"),Pxe.forEach(t),Y4o=i(x),lu=n(x,"LI",{});var Bxe=s(lu);cfe=n(Bxe,"STRONG",{});var fpt=s(cfe);K4o=r(fpt,"retribert"),fpt.forEach(t),Z4o=r(Bxe," \u2014 "),iD=n(Bxe,"A",{href:!0});var mpt=s(iD);eEo=r(mpt,"RetriBertModel"),mpt.forEach(t),oEo=r(Bxe," (RetriBERT model)"),Bxe.forEach(t),rEo=i(x),iu=n(x,"LI",{});var Ixe=s(iu);ffe=n(Ixe,"STRONG",{});var gpt=s(ffe);tEo=r(gpt,"roberta"),gpt.forEach(t),aEo=r(Ixe," \u2014 "),dD=n(Ixe,"A",{href:!0});var hpt=s(dD);nEo=r(hpt,"RobertaModel"),hpt.forEach(t),sEo=r(Ixe," (RoBERTa model)"),Ixe.forEach(t),lEo=i(x),du=n(x,"LI",{});var Nxe=s(du);mfe=n(Nxe,"STRONG",{});var ppt=s(mfe);iEo=r(ppt,"roformer"),ppt.forEach(t),dEo=r(Nxe," \u2014 "),cD=n(Nxe,"A",{href:!0});var _pt=s(cD);cEo=r(_pt,"RoFormerModel"),_pt.forEach(t),fEo=r(Nxe," (RoFormer model)"),Nxe.forEach(t),mEo=i(x),cu=n(x,"LI",{});var qxe=s(cu);gfe=n(qxe,"STRONG",{});var upt=s(gfe);gEo=r(upt,"segformer"),upt.forEach(t),hEo=r(qxe," \u2014 "),fD=n(qxe,"A",{href:!0});var bpt=s(fD);pEo=r(bpt,"SegformerModel"),bpt.forEach(t),_Eo=r(qxe," (SegFormer model)"),qxe.forEach(t),uEo=i(x),fu=n(x,"LI",{});var jxe=s(fu);hfe=n(jxe,"STRONG",{});var vpt=s(hfe);bEo=r(vpt,"sew"),vpt.forEach(t),vEo=r(jxe," \u2014 "),mD=n(jxe,"A",{href:!0});var Fpt=s(mD);FEo=r(Fpt,"SEWModel"),Fpt.forEach(t),TEo=r(jxe," (SEW model)"),jxe.forEach(t),MEo=i(x),mu=n(x,"LI",{});var Dxe=s(mu);pfe=n(Dxe,"STRONG",{});var Tpt=s(pfe);EEo=r(Tpt,"sew-d"),Tpt.forEach(t),CEo=r(Dxe," \u2014 "),gD=n(Dxe,"A",{href:!0});var Mpt=s(gD);wEo=r(Mpt,"SEWDModel"),Mpt.forEach(t),AEo=r(Dxe," (SEW-D model)"),Dxe.forEach(t),LEo=i(x),gu=n(x,"LI",{});var Gxe=s(gu);_fe=n(Gxe,"STRONG",{});var Ept=s(_fe);yEo=r(Ept,"speech_to_text"),Ept.forEach(t),xEo=r(Gxe," \u2014 "),hD=n(Gxe,"A",{href:!0});var Cpt=s(hD);$Eo=r(Cpt,"Speech2TextModel"),Cpt.forEach(t),kEo=r(Gxe," (Speech2Text model)"),Gxe.forEach(t),SEo=i(x),hu=n(x,"LI",{});var Oxe=s(hu);ufe=n(Oxe,"STRONG",{});var wpt=s(ufe);REo=r(wpt,"splinter"),wpt.forEach(t),PEo=r(Oxe," \u2014 "),pD=n(Oxe,"A",{href:!0});var Apt=s(pD);BEo=r(Apt,"SplinterModel"),Apt.forEach(t),IEo=r(Oxe," (Splinter model)"),Oxe.forEach(t),NEo=i(x),pu=n(x,"LI",{});var Vxe=s(pu);bfe=n(Vxe,"STRONG",{});var Lpt=s(bfe);qEo=r(Lpt,"squeezebert"),Lpt.forEach(t),jEo=r(Vxe," \u2014 "),_D=n(Vxe,"A",{href:!0});var ypt=s(_D);DEo=r(ypt,"SqueezeBertModel"),ypt.forEach(t),GEo=r(Vxe," (SqueezeBERT model)"),Vxe.forEach(t),OEo=i(x),_u=n(x,"LI",{});var Xxe=s(_u);vfe=n(Xxe,"STRONG",{});var xpt=s(vfe);VEo=r(xpt,"swin"),xpt.forEach(t),XEo=r(Xxe," \u2014 "),uD=n(Xxe,"A",{href:!0});var $pt=s(uD);zEo=r($pt,"SwinModel"),$pt.forEach(t),QEo=r(Xxe," (Swin Transformer model)"),Xxe.forEach(t),WEo=i(x),uu=n(x,"LI",{});var zxe=s(uu);Ffe=n(zxe,"STRONG",{});var kpt=s(Ffe);HEo=r(kpt,"t5"),kpt.forEach(t),UEo=r(zxe," \u2014 "),bD=n(zxe,"A",{href:!0});var Spt=s(bD);JEo=r(Spt,"T5Model"),Spt.forEach(t),YEo=r(zxe," (T5 model)"),zxe.forEach(t),KEo=i(x),bu=n(x,"LI",{});var Qxe=s(bu);Tfe=n(Qxe,"STRONG",{});var Rpt=s(Tfe);ZEo=r(Rpt,"tapas"),Rpt.forEach(t),eCo=r(Qxe," \u2014 "),vD=n(Qxe,"A",{href:!0});var Ppt=s(vD);oCo=r(Ppt,"TapasModel"),Ppt.forEach(t),rCo=r(Qxe," (TAPAS model)"),Qxe.forEach(t),tCo=i(x),vu=n(x,"LI",{});var Wxe=s(vu);Mfe=n(Wxe,"STRONG",{});var Bpt=s(Mfe);aCo=r(Bpt,"trajectory_transformer"),Bpt.forEach(t),nCo=r(Wxe," \u2014 "),FD=n(Wxe,"A",{href:!0});var Ipt=s(FD);sCo=r(Ipt,"TrajectoryTransformerModel"),Ipt.forEach(t),lCo=r(Wxe," (Trajectory Transformer model)"),Wxe.forEach(t),iCo=i(x),Fu=n(x,"LI",{});var Hxe=s(Fu);Efe=n(Hxe,"STRONG",{});var Npt=s(Efe);dCo=r(Npt,"transfo-xl"),Npt.forEach(t),cCo=r(Hxe," \u2014 "),TD=n(Hxe,"A",{href:!0});var qpt=s(TD);fCo=r(qpt,"TransfoXLModel"),qpt.forEach(t),mCo=r(Hxe," (Transformer-XL model)"),Hxe.forEach(t),gCo=i(x),Tu=n(x,"LI",{});var Uxe=s(Tu);Cfe=n(Uxe,"STRONG",{});var jpt=s(Cfe);hCo=r(jpt,"unispeech"),jpt.forEach(t),pCo=r(Uxe," \u2014 "),MD=n(Uxe,"A",{href:!0});var Dpt=s(MD);_Co=r(Dpt,"UniSpeechModel"),Dpt.forEach(t),uCo=r(Uxe," (UniSpeech model)"),Uxe.forEach(t),bCo=i(x),Mu=n(x,"LI",{});var Jxe=s(Mu);wfe=n(Jxe,"STRONG",{});var Gpt=s(wfe);vCo=r(Gpt,"unispeech-sat"),Gpt.forEach(t),FCo=r(Jxe," \u2014 "),ED=n(Jxe,"A",{href:!0});var Opt=s(ED);TCo=r(Opt,"UniSpeechSatModel"),Opt.forEach(t),MCo=r(Jxe," (UniSpeechSat model)"),Jxe.forEach(t),ECo=i(x),Eu=n(x,"LI",{});var Yxe=s(Eu);Afe=n(Yxe,"STRONG",{});var Vpt=s(Afe);CCo=r(Vpt,"van"),Vpt.forEach(t),wCo=r(Yxe," \u2014 "),CD=n(Yxe,"A",{href:!0});var Xpt=s(CD);ACo=r(Xpt,"VanModel"),Xpt.forEach(t),LCo=r(Yxe," (VAN model)"),Yxe.forEach(t),yCo=i(x),Cu=n(x,"LI",{});var Kxe=s(Cu);Lfe=n(Kxe,"STRONG",{});var zpt=s(Lfe);xCo=r(zpt,"vilt"),zpt.forEach(t),$Co=r(Kxe," \u2014 "),wD=n(Kxe,"A",{href:!0});var Qpt=s(wD);kCo=r(Qpt,"ViltModel"),Qpt.forEach(t),SCo=r(Kxe," (ViLT model)"),Kxe.forEach(t),RCo=i(x),wu=n(x,"LI",{});var Zxe=s(wu);yfe=n(Zxe,"STRONG",{});var Wpt=s(yfe);PCo=r(Wpt,"vision-text-dual-encoder"),Wpt.forEach(t),BCo=r(Zxe," \u2014 "),AD=n(Zxe,"A",{href:!0});var Hpt=s(AD);ICo=r(Hpt,"VisionTextDualEncoderModel"),Hpt.forEach(t),NCo=r(Zxe," (VisionTextDualEncoder model)"),Zxe.forEach(t),qCo=i(x),Au=n(x,"LI",{});var e$e=s(Au);xfe=n(e$e,"STRONG",{});var Upt=s(xfe);jCo=r(Upt,"visual_bert"),Upt.forEach(t),DCo=r(e$e," \u2014 "),LD=n(e$e,"A",{href:!0});var Jpt=s(LD);GCo=r(Jpt,"VisualBertModel"),Jpt.forEach(t),OCo=r(e$e," (VisualBERT model)"),e$e.forEach(t),VCo=i(x),Lu=n(x,"LI",{});var o$e=s(Lu);$fe=n(o$e,"STRONG",{});var Ypt=s($fe);XCo=r(Ypt,"vit"),Ypt.forEach(t),zCo=r(o$e," \u2014 "),yD=n(o$e,"A",{href:!0});var Kpt=s(yD);QCo=r(Kpt,"ViTModel"),Kpt.forEach(t),WCo=r(o$e," (ViT model)"),o$e.forEach(t),HCo=i(x),yu=n(x,"LI",{});var r$e=s(yu);kfe=n(r$e,"STRONG",{});var Zpt=s(kfe);UCo=r(Zpt,"vit_mae"),Zpt.forEach(t),JCo=r(r$e," \u2014 "),xD=n(r$e,"A",{href:!0});var e_t=s(xD);YCo=r(e_t,"ViTMAEModel"),e_t.forEach(t),KCo=r(r$e," (ViTMAE model)"),r$e.forEach(t),ZCo=i(x),xu=n(x,"LI",{});var t$e=s(xu);Sfe=n(t$e,"STRONG",{});var o_t=s(Sfe);e0o=r(o_t,"wav2vec2"),o_t.forEach(t),o0o=r(t$e," \u2014 "),$D=n(t$e,"A",{href:!0});var r_t=s($D);r0o=r(r_t,"Wav2Vec2Model"),r_t.forEach(t),t0o=r(t$e," (Wav2Vec2 model)"),t$e.forEach(t),a0o=i(x),$u=n(x,"LI",{});var a$e=s($u);Rfe=n(a$e,"STRONG",{});var t_t=s(Rfe);n0o=r(t_t,"wav2vec2-conformer"),t_t.forEach(t),s0o=r(a$e," \u2014 "),kD=n(a$e,"A",{href:!0});var a_t=s(kD);l0o=r(a_t,"Wav2Vec2ConformerModel"),a_t.forEach(t),i0o=r(a$e," (Wav2Vec2-Conformer model)"),a$e.forEach(t),d0o=i(x),ku=n(x,"LI",{});var n$e=s(ku);Pfe=n(n$e,"STRONG",{});var n_t=s(Pfe);c0o=r(n_t,"wavlm"),n_t.forEach(t),f0o=r(n$e," \u2014 "),SD=n(n$e,"A",{href:!0});var s_t=s(SD);m0o=r(s_t,"WavLMModel"),s_t.forEach(t),g0o=r(n$e," (WavLM model)"),n$e.forEach(t),h0o=i(x),Su=n(x,"LI",{});var s$e=s(Su);Bfe=n(s$e,"STRONG",{});var l_t=s(Bfe);p0o=r(l_t,"xglm"),l_t.forEach(t),_0o=r(s$e," \u2014 "),RD=n(s$e,"A",{href:!0});var i_t=s(RD);u0o=r(i_t,"XGLMModel"),i_t.forEach(t),b0o=r(s$e," (XGLM model)"),s$e.forEach(t),v0o=i(x),Ru=n(x,"LI",{});var l$e=s(Ru);Ife=n(l$e,"STRONG",{});var d_t=s(Ife);F0o=r(d_t,"xlm"),d_t.forEach(t),T0o=r(l$e," \u2014 "),PD=n(l$e,"A",{href:!0});var c_t=s(PD);M0o=r(c_t,"XLMModel"),c_t.forEach(t),E0o=r(l$e," (XLM model)"),l$e.forEach(t),C0o=i(x),Pu=n(x,"LI",{});var i$e=s(Pu);Nfe=n(i$e,"STRONG",{});var f_t=s(Nfe);w0o=r(f_t,"xlm-prophetnet"),f_t.forEach(t),A0o=r(i$e," \u2014 "),BD=n(i$e,"A",{href:!0});var m_t=s(BD);L0o=r(m_t,"XLMProphetNetModel"),m_t.forEach(t),y0o=r(i$e," (XLM-ProphetNet model)"),i$e.forEach(t),x0o=i(x),Bu=n(x,"LI",{});var d$e=s(Bu);qfe=n(d$e,"STRONG",{});var g_t=s(qfe);$0o=r(g_t,"xlm-roberta"),g_t.forEach(t),k0o=r(d$e," \u2014 "),ID=n(d$e,"A",{href:!0});var h_t=s(ID);S0o=r(h_t,"XLMRobertaModel"),h_t.forEach(t),R0o=r(d$e," (XLM-RoBERTa model)"),d$e.forEach(t),P0o=i(x),Iu=n(x,"LI",{});var c$e=s(Iu);jfe=n(c$e,"STRONG",{});var p_t=s(jfe);B0o=r(p_t,"xlm-roberta-xl"),p_t.forEach(t),I0o=r(c$e," \u2014 "),ND=n(c$e,"A",{href:!0});var __t=s(ND);N0o=r(__t,"XLMRobertaXLModel"),__t.forEach(t),q0o=r(c$e," (XLM-RoBERTa-XL model)"),c$e.forEach(t),j0o=i(x),Nu=n(x,"LI",{});var f$e=s(Nu);Dfe=n(f$e,"STRONG",{});var u_t=s(Dfe);D0o=r(u_t,"xlnet"),u_t.forEach(t),G0o=r(f$e," \u2014 "),qD=n(f$e,"A",{href:!0});var b_t=s(qD);O0o=r(b_t,"XLNetModel"),b_t.forEach(t),V0o=r(f$e," (XLNet model)"),f$e.forEach(t),X0o=i(x),qu=n(x,"LI",{});var m$e=s(qu);Gfe=n(m$e,"STRONG",{});var v_t=s(Gfe);z0o=r(v_t,"yolos"),v_t.forEach(t),Q0o=r(m$e," \u2014 "),jD=n(m$e,"A",{href:!0});var F_t=s(jD);W0o=r(F_t,"YolosModel"),F_t.forEach(t),H0o=r(m$e," (YOLOS model)"),m$e.forEach(t),U0o=i(x),ju=n(x,"LI",{});var g$e=s(ju);Ofe=n(g$e,"STRONG",{});var T_t=s(Ofe);J0o=r(T_t,"yoso"),T_t.forEach(t),Y0o=r(g$e," \u2014 "),DD=n(g$e,"A",{href:!0});var M_t=s(DD);K0o=r(M_t,"YosoModel"),M_t.forEach(t),Z0o=r(g$e," (YOSO model)"),g$e.forEach(t),x.forEach(t),ewo=i(na),Du=n(na,"P",{});var h$e=s(Du);owo=r(h$e,"The model is set in evaluation mode by default using "),Vfe=n(h$e,"CODE",{});var E_t=s(Vfe);rwo=r(E_t,"model.eval()"),E_t.forEach(t),two=r(h$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xfe=n(h$e,"CODE",{});var C_t=s(Xfe);awo=r(C_t,"model.train()"),C_t.forEach(t),h$e.forEach(t),nwo=i(na),T(Gu.$$.fragment,na),na.forEach(t),el.forEach(t),xVe=i(f),Oi=n(f,"H2",{class:!0});var Bze=s(Oi);Ou=n(Bze,"A",{id:!0,class:!0,href:!0});var w_t=s(Ou);zfe=n(w_t,"SPAN",{});var A_t=s(zfe);T(AL.$$.fragment,A_t),A_t.forEach(t),w_t.forEach(t),swo=i(Bze),Qfe=n(Bze,"SPAN",{});var L_t=s(Qfe);lwo=r(L_t,"AutoModelForPreTraining"),L_t.forEach(t),Bze.forEach(t),$Ve=i(f),$o=n(f,"DIV",{class:!0});var ol=s($o);T(LL.$$.fragment,ol),iwo=i(ol),Vi=n(ol,"P",{});var gre=s(Vi);dwo=r(gre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),GD=n(gre,"A",{href:!0});var y_t=s(GD);cwo=r(y_t,"from_pretrained()"),y_t.forEach(t),fwo=r(gre," class method or the "),OD=n(gre,"A",{href:!0});var x_t=s(OD);mwo=r(x_t,"from_config()"),x_t.forEach(t),gwo=r(gre,` class
method.`),gre.forEach(t),hwo=i(ol),yL=n(ol,"P",{});var Ize=s(yL);pwo=r(Ize,"This class cannot be instantiated directly using "),Wfe=n(Ize,"CODE",{});var $_t=s(Wfe);_wo=r($_t,"__init__()"),$_t.forEach(t),uwo=r(Ize," (throws an error)."),Ize.forEach(t),bwo=i(ol),lt=n(ol,"DIV",{class:!0});var eA=s(lt);T(xL.$$.fragment,eA),vwo=i(eA),Hfe=n(eA,"P",{});var k_t=s(Hfe);Fwo=r(k_t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),k_t.forEach(t),Two=i(eA),Xi=n(eA,"P",{});var hre=s(Xi);Mwo=r(hre,`Note:
Loading a model from its configuration file does `),Ufe=n(hre,"STRONG",{});var S_t=s(Ufe);Ewo=r(S_t,"not"),S_t.forEach(t),Cwo=r(hre,` load the model weights. It only affects the
model\u2019s configuration. Use `),VD=n(hre,"A",{href:!0});var R_t=s(VD);wwo=r(R_t,"from_pretrained()"),R_t.forEach(t),Awo=r(hre," to load the model weights."),hre.forEach(t),Lwo=i(eA),T(Vu.$$.fragment,eA),eA.forEach(t),ywo=i(ol),Ye=n(ol,"DIV",{class:!0});var sa=s(Ye);T($L.$$.fragment,sa),xwo=i(sa),Jfe=n(sa,"P",{});var P_t=s(Jfe);$wo=r(P_t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),P_t.forEach(t),kwo=i(sa),Ba=n(sa,"P",{});var oA=s(Ba);Swo=r(oA,"The model class to instantiate is selected based on the "),Yfe=n(oA,"CODE",{});var B_t=s(Yfe);Rwo=r(B_t,"model_type"),B_t.forEach(t),Pwo=r(oA,` property of the config object (either
passed as an argument or loaded from `),Kfe=n(oA,"CODE",{});var I_t=s(Kfe);Bwo=r(I_t,"pretrained_model_name_or_path"),I_t.forEach(t),Iwo=r(oA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zfe=n(oA,"CODE",{});var N_t=s(Zfe);Nwo=r(N_t,"pretrained_model_name_or_path"),N_t.forEach(t),qwo=r(oA,":"),oA.forEach(t),jwo=i(sa),G=n(sa,"UL",{});var O=s(G);Xu=n(O,"LI",{});var p$e=s(Xu);eme=n(p$e,"STRONG",{});var q_t=s(eme);Dwo=r(q_t,"albert"),q_t.forEach(t),Gwo=r(p$e," \u2014 "),XD=n(p$e,"A",{href:!0});var j_t=s(XD);Owo=r(j_t,"AlbertForPreTraining"),j_t.forEach(t),Vwo=r(p$e," (ALBERT model)"),p$e.forEach(t),Xwo=i(O),zu=n(O,"LI",{});var _$e=s(zu);ome=n(_$e,"STRONG",{});var D_t=s(ome);zwo=r(D_t,"bart"),D_t.forEach(t),Qwo=r(_$e," \u2014 "),zD=n(_$e,"A",{href:!0});var G_t=s(zD);Wwo=r(G_t,"BartForConditionalGeneration"),G_t.forEach(t),Hwo=r(_$e," (BART model)"),_$e.forEach(t),Uwo=i(O),Qu=n(O,"LI",{});var u$e=s(Qu);rme=n(u$e,"STRONG",{});var O_t=s(rme);Jwo=r(O_t,"bert"),O_t.forEach(t),Ywo=r(u$e," \u2014 "),QD=n(u$e,"A",{href:!0});var V_t=s(QD);Kwo=r(V_t,"BertForPreTraining"),V_t.forEach(t),Zwo=r(u$e," (BERT model)"),u$e.forEach(t),eAo=i(O),Wu=n(O,"LI",{});var b$e=s(Wu);tme=n(b$e,"STRONG",{});var X_t=s(tme);oAo=r(X_t,"big_bird"),X_t.forEach(t),rAo=r(b$e," \u2014 "),WD=n(b$e,"A",{href:!0});var z_t=s(WD);tAo=r(z_t,"BigBirdForPreTraining"),z_t.forEach(t),aAo=r(b$e," (BigBird model)"),b$e.forEach(t),nAo=i(O),Hu=n(O,"LI",{});var v$e=s(Hu);ame=n(v$e,"STRONG",{});var Q_t=s(ame);sAo=r(Q_t,"bloom"),Q_t.forEach(t),lAo=r(v$e," \u2014 "),HD=n(v$e,"A",{href:!0});var W_t=s(HD);iAo=r(W_t,"BloomForCausalLM"),W_t.forEach(t),dAo=r(v$e," (BLOOM model)"),v$e.forEach(t),cAo=i(O),Uu=n(O,"LI",{});var F$e=s(Uu);nme=n(F$e,"STRONG",{});var H_t=s(nme);fAo=r(H_t,"camembert"),H_t.forEach(t),mAo=r(F$e," \u2014 "),UD=n(F$e,"A",{href:!0});var U_t=s(UD);gAo=r(U_t,"CamembertForMaskedLM"),U_t.forEach(t),hAo=r(F$e," (CamemBERT model)"),F$e.forEach(t),pAo=i(O),Ju=n(O,"LI",{});var T$e=s(Ju);sme=n(T$e,"STRONG",{});var J_t=s(sme);_Ao=r(J_t,"ctrl"),J_t.forEach(t),uAo=r(T$e," \u2014 "),JD=n(T$e,"A",{href:!0});var Y_t=s(JD);bAo=r(Y_t,"CTRLLMHeadModel"),Y_t.forEach(t),vAo=r(T$e," (CTRL model)"),T$e.forEach(t),FAo=i(O),Yu=n(O,"LI",{});var M$e=s(Yu);lme=n(M$e,"STRONG",{});var K_t=s(lme);TAo=r(K_t,"data2vec-text"),K_t.forEach(t),MAo=r(M$e," \u2014 "),YD=n(M$e,"A",{href:!0});var Z_t=s(YD);EAo=r(Z_t,"Data2VecTextForMaskedLM"),Z_t.forEach(t),CAo=r(M$e," (Data2VecText model)"),M$e.forEach(t),wAo=i(O),Ku=n(O,"LI",{});var E$e=s(Ku);ime=n(E$e,"STRONG",{});var eut=s(ime);AAo=r(eut,"deberta"),eut.forEach(t),LAo=r(E$e," \u2014 "),KD=n(E$e,"A",{href:!0});var out=s(KD);yAo=r(out,"DebertaForMaskedLM"),out.forEach(t),xAo=r(E$e," (DeBERTa model)"),E$e.forEach(t),$Ao=i(O),Zu=n(O,"LI",{});var C$e=s(Zu);dme=n(C$e,"STRONG",{});var rut=s(dme);kAo=r(rut,"deberta-v2"),rut.forEach(t),SAo=r(C$e," \u2014 "),ZD=n(C$e,"A",{href:!0});var tut=s(ZD);RAo=r(tut,"DebertaV2ForMaskedLM"),tut.forEach(t),PAo=r(C$e," (DeBERTa-v2 model)"),C$e.forEach(t),BAo=i(O),e1=n(O,"LI",{});var w$e=s(e1);cme=n(w$e,"STRONG",{});var aut=s(cme);IAo=r(aut,"distilbert"),aut.forEach(t),NAo=r(w$e," \u2014 "),eG=n(w$e,"A",{href:!0});var nut=s(eG);qAo=r(nut,"DistilBertForMaskedLM"),nut.forEach(t),jAo=r(w$e," (DistilBERT model)"),w$e.forEach(t),DAo=i(O),o1=n(O,"LI",{});var A$e=s(o1);fme=n(A$e,"STRONG",{});var sut=s(fme);GAo=r(sut,"electra"),sut.forEach(t),OAo=r(A$e," \u2014 "),oG=n(A$e,"A",{href:!0});var lut=s(oG);VAo=r(lut,"ElectraForPreTraining"),lut.forEach(t),XAo=r(A$e," (ELECTRA model)"),A$e.forEach(t),zAo=i(O),r1=n(O,"LI",{});var L$e=s(r1);mme=n(L$e,"STRONG",{});var iut=s(mme);QAo=r(iut,"flaubert"),iut.forEach(t),WAo=r(L$e," \u2014 "),rG=n(L$e,"A",{href:!0});var dut=s(rG);HAo=r(dut,"FlaubertWithLMHeadModel"),dut.forEach(t),UAo=r(L$e," (FlauBERT model)"),L$e.forEach(t),JAo=i(O),t1=n(O,"LI",{});var y$e=s(t1);gme=n(y$e,"STRONG",{});var cut=s(gme);YAo=r(cut,"flava"),cut.forEach(t),KAo=r(y$e," \u2014 "),tG=n(y$e,"A",{href:!0});var fut=s(tG);ZAo=r(fut,"FlavaForPreTraining"),fut.forEach(t),e6o=r(y$e," (FLAVA model)"),y$e.forEach(t),o6o=i(O),a1=n(O,"LI",{});var x$e=s(a1);hme=n(x$e,"STRONG",{});var mut=s(hme);r6o=r(mut,"fnet"),mut.forEach(t),t6o=r(x$e," \u2014 "),aG=n(x$e,"A",{href:!0});var gut=s(aG);a6o=r(gut,"FNetForPreTraining"),gut.forEach(t),n6o=r(x$e," (FNet model)"),x$e.forEach(t),s6o=i(O),n1=n(O,"LI",{});var $$e=s(n1);pme=n($$e,"STRONG",{});var hut=s(pme);l6o=r(hut,"fsmt"),hut.forEach(t),i6o=r($$e," \u2014 "),nG=n($$e,"A",{href:!0});var put=s(nG);d6o=r(put,"FSMTForConditionalGeneration"),put.forEach(t),c6o=r($$e," (FairSeq Machine-Translation model)"),$$e.forEach(t),f6o=i(O),s1=n(O,"LI",{});var k$e=s(s1);_me=n(k$e,"STRONG",{});var _ut=s(_me);m6o=r(_ut,"funnel"),_ut.forEach(t),g6o=r(k$e," \u2014 "),sG=n(k$e,"A",{href:!0});var uut=s(sG);h6o=r(uut,"FunnelForPreTraining"),uut.forEach(t),p6o=r(k$e," (Funnel Transformer model)"),k$e.forEach(t),_6o=i(O),l1=n(O,"LI",{});var S$e=s(l1);ume=n(S$e,"STRONG",{});var but=s(ume);u6o=r(but,"gpt2"),but.forEach(t),b6o=r(S$e," \u2014 "),lG=n(S$e,"A",{href:!0});var vut=s(lG);v6o=r(vut,"GPT2LMHeadModel"),vut.forEach(t),F6o=r(S$e," (OpenAI GPT-2 model)"),S$e.forEach(t),T6o=i(O),i1=n(O,"LI",{});var R$e=s(i1);bme=n(R$e,"STRONG",{});var Fut=s(bme);M6o=r(Fut,"ibert"),Fut.forEach(t),E6o=r(R$e," \u2014 "),iG=n(R$e,"A",{href:!0});var Tut=s(iG);C6o=r(Tut,"IBertForMaskedLM"),Tut.forEach(t),w6o=r(R$e," (I-BERT model)"),R$e.forEach(t),A6o=i(O),d1=n(O,"LI",{});var P$e=s(d1);vme=n(P$e,"STRONG",{});var Mut=s(vme);L6o=r(Mut,"layoutlm"),Mut.forEach(t),y6o=r(P$e," \u2014 "),dG=n(P$e,"A",{href:!0});var Eut=s(dG);x6o=r(Eut,"LayoutLMForMaskedLM"),Eut.forEach(t),$6o=r(P$e," (LayoutLM model)"),P$e.forEach(t),k6o=i(O),c1=n(O,"LI",{});var B$e=s(c1);Fme=n(B$e,"STRONG",{});var Cut=s(Fme);S6o=r(Cut,"longformer"),Cut.forEach(t),R6o=r(B$e," \u2014 "),cG=n(B$e,"A",{href:!0});var wut=s(cG);P6o=r(wut,"LongformerForMaskedLM"),wut.forEach(t),B6o=r(B$e," (Longformer model)"),B$e.forEach(t),I6o=i(O),f1=n(O,"LI",{});var I$e=s(f1);Tme=n(I$e,"STRONG",{});var Aut=s(Tme);N6o=r(Aut,"lxmert"),Aut.forEach(t),q6o=r(I$e," \u2014 "),fG=n(I$e,"A",{href:!0});var Lut=s(fG);j6o=r(Lut,"LxmertForPreTraining"),Lut.forEach(t),D6o=r(I$e," (LXMERT model)"),I$e.forEach(t),G6o=i(O),m1=n(O,"LI",{});var N$e=s(m1);Mme=n(N$e,"STRONG",{});var yut=s(Mme);O6o=r(yut,"megatron-bert"),yut.forEach(t),V6o=r(N$e," \u2014 "),mG=n(N$e,"A",{href:!0});var xut=s(mG);X6o=r(xut,"MegatronBertForPreTraining"),xut.forEach(t),z6o=r(N$e," (Megatron-BERT model)"),N$e.forEach(t),Q6o=i(O),g1=n(O,"LI",{});var q$e=s(g1);Eme=n(q$e,"STRONG",{});var $ut=s(Eme);W6o=r($ut,"mobilebert"),$ut.forEach(t),H6o=r(q$e," \u2014 "),gG=n(q$e,"A",{href:!0});var kut=s(gG);U6o=r(kut,"MobileBertForPreTraining"),kut.forEach(t),J6o=r(q$e," (MobileBERT model)"),q$e.forEach(t),Y6o=i(O),h1=n(O,"LI",{});var j$e=s(h1);Cme=n(j$e,"STRONG",{});var Sut=s(Cme);K6o=r(Sut,"mpnet"),Sut.forEach(t),Z6o=r(j$e," \u2014 "),hG=n(j$e,"A",{href:!0});var Rut=s(hG);eLo=r(Rut,"MPNetForMaskedLM"),Rut.forEach(t),oLo=r(j$e," (MPNet model)"),j$e.forEach(t),rLo=i(O),p1=n(O,"LI",{});var D$e=s(p1);wme=n(D$e,"STRONG",{});var Put=s(wme);tLo=r(Put,"mvp"),Put.forEach(t),aLo=r(D$e," \u2014 "),pG=n(D$e,"A",{href:!0});var But=s(pG);nLo=r(But,"MvpForConditionalGeneration"),But.forEach(t),sLo=r(D$e," (MVP model)"),D$e.forEach(t),lLo=i(O),_1=n(O,"LI",{});var G$e=s(_1);Ame=n(G$e,"STRONG",{});var Iut=s(Ame);iLo=r(Iut,"nezha"),Iut.forEach(t),dLo=r(G$e," \u2014 "),_G=n(G$e,"A",{href:!0});var Nut=s(_G);cLo=r(Nut,"NezhaForPreTraining"),Nut.forEach(t),fLo=r(G$e," (Nezha model)"),G$e.forEach(t),mLo=i(O),u1=n(O,"LI",{});var O$e=s(u1);Lme=n(O$e,"STRONG",{});var qut=s(Lme);gLo=r(qut,"openai-gpt"),qut.forEach(t),hLo=r(O$e," \u2014 "),uG=n(O$e,"A",{href:!0});var jut=s(uG);pLo=r(jut,"OpenAIGPTLMHeadModel"),jut.forEach(t),_Lo=r(O$e," (OpenAI GPT model)"),O$e.forEach(t),uLo=i(O),b1=n(O,"LI",{});var V$e=s(b1);yme=n(V$e,"STRONG",{});var Dut=s(yme);bLo=r(Dut,"retribert"),Dut.forEach(t),vLo=r(V$e," \u2014 "),bG=n(V$e,"A",{href:!0});var Gut=s(bG);FLo=r(Gut,"RetriBertModel"),Gut.forEach(t),TLo=r(V$e," (RetriBERT model)"),V$e.forEach(t),MLo=i(O),v1=n(O,"LI",{});var X$e=s(v1);xme=n(X$e,"STRONG",{});var Out=s(xme);ELo=r(Out,"roberta"),Out.forEach(t),CLo=r(X$e," \u2014 "),vG=n(X$e,"A",{href:!0});var Vut=s(vG);wLo=r(Vut,"RobertaForMaskedLM"),Vut.forEach(t),ALo=r(X$e," (RoBERTa model)"),X$e.forEach(t),LLo=i(O),F1=n(O,"LI",{});var z$e=s(F1);$me=n(z$e,"STRONG",{});var Xut=s($me);yLo=r(Xut,"splinter"),Xut.forEach(t),xLo=r(z$e," \u2014 "),FG=n(z$e,"A",{href:!0});var zut=s(FG);$Lo=r(zut,"SplinterForPreTraining"),zut.forEach(t),kLo=r(z$e," (Splinter model)"),z$e.forEach(t),SLo=i(O),T1=n(O,"LI",{});var Q$e=s(T1);kme=n(Q$e,"STRONG",{});var Qut=s(kme);RLo=r(Qut,"squeezebert"),Qut.forEach(t),PLo=r(Q$e," \u2014 "),TG=n(Q$e,"A",{href:!0});var Wut=s(TG);BLo=r(Wut,"SqueezeBertForMaskedLM"),Wut.forEach(t),ILo=r(Q$e," (SqueezeBERT model)"),Q$e.forEach(t),NLo=i(O),M1=n(O,"LI",{});var W$e=s(M1);Sme=n(W$e,"STRONG",{});var Hut=s(Sme);qLo=r(Hut,"t5"),Hut.forEach(t),jLo=r(W$e," \u2014 "),MG=n(W$e,"A",{href:!0});var Uut=s(MG);DLo=r(Uut,"T5ForConditionalGeneration"),Uut.forEach(t),GLo=r(W$e," (T5 model)"),W$e.forEach(t),OLo=i(O),E1=n(O,"LI",{});var H$e=s(E1);Rme=n(H$e,"STRONG",{});var Jut=s(Rme);VLo=r(Jut,"tapas"),Jut.forEach(t),XLo=r(H$e," \u2014 "),EG=n(H$e,"A",{href:!0});var Yut=s(EG);zLo=r(Yut,"TapasForMaskedLM"),Yut.forEach(t),QLo=r(H$e," (TAPAS model)"),H$e.forEach(t),WLo=i(O),C1=n(O,"LI",{});var U$e=s(C1);Pme=n(U$e,"STRONG",{});var Kut=s(Pme);HLo=r(Kut,"transfo-xl"),Kut.forEach(t),ULo=r(U$e," \u2014 "),CG=n(U$e,"A",{href:!0});var Zut=s(CG);JLo=r(Zut,"TransfoXLLMHeadModel"),Zut.forEach(t),YLo=r(U$e," (Transformer-XL model)"),U$e.forEach(t),KLo=i(O),w1=n(O,"LI",{});var J$e=s(w1);Bme=n(J$e,"STRONG",{});var e1t=s(Bme);ZLo=r(e1t,"unispeech"),e1t.forEach(t),eyo=r(J$e," \u2014 "),wG=n(J$e,"A",{href:!0});var o1t=s(wG);oyo=r(o1t,"UniSpeechForPreTraining"),o1t.forEach(t),ryo=r(J$e," (UniSpeech model)"),J$e.forEach(t),tyo=i(O),A1=n(O,"LI",{});var Y$e=s(A1);Ime=n(Y$e,"STRONG",{});var r1t=s(Ime);ayo=r(r1t,"unispeech-sat"),r1t.forEach(t),nyo=r(Y$e," \u2014 "),AG=n(Y$e,"A",{href:!0});var t1t=s(AG);syo=r(t1t,"UniSpeechSatForPreTraining"),t1t.forEach(t),lyo=r(Y$e," (UniSpeechSat model)"),Y$e.forEach(t),iyo=i(O),L1=n(O,"LI",{});var K$e=s(L1);Nme=n(K$e,"STRONG",{});var a1t=s(Nme);dyo=r(a1t,"visual_bert"),a1t.forEach(t),cyo=r(K$e," \u2014 "),LG=n(K$e,"A",{href:!0});var n1t=s(LG);fyo=r(n1t,"VisualBertForPreTraining"),n1t.forEach(t),myo=r(K$e," (VisualBERT model)"),K$e.forEach(t),gyo=i(O),y1=n(O,"LI",{});var Z$e=s(y1);qme=n(Z$e,"STRONG",{});var s1t=s(qme);hyo=r(s1t,"vit_mae"),s1t.forEach(t),pyo=r(Z$e," \u2014 "),yG=n(Z$e,"A",{href:!0});var l1t=s(yG);_yo=r(l1t,"ViTMAEForPreTraining"),l1t.forEach(t),uyo=r(Z$e," (ViTMAE model)"),Z$e.forEach(t),byo=i(O),x1=n(O,"LI",{});var eke=s(x1);jme=n(eke,"STRONG",{});var i1t=s(jme);vyo=r(i1t,"wav2vec2"),i1t.forEach(t),Fyo=r(eke," \u2014 "),xG=n(eke,"A",{href:!0});var d1t=s(xG);Tyo=r(d1t,"Wav2Vec2ForPreTraining"),d1t.forEach(t),Myo=r(eke," (Wav2Vec2 model)"),eke.forEach(t),Eyo=i(O),$1=n(O,"LI",{});var oke=s($1);Dme=n(oke,"STRONG",{});var c1t=s(Dme);Cyo=r(c1t,"wav2vec2-conformer"),c1t.forEach(t),wyo=r(oke," \u2014 "),$G=n(oke,"A",{href:!0});var f1t=s($G);Ayo=r(f1t,"Wav2Vec2ConformerForPreTraining"),f1t.forEach(t),Lyo=r(oke," (Wav2Vec2-Conformer model)"),oke.forEach(t),yyo=i(O),k1=n(O,"LI",{});var rke=s(k1);Gme=n(rke,"STRONG",{});var m1t=s(Gme);xyo=r(m1t,"xlm"),m1t.forEach(t),$yo=r(rke," \u2014 "),kG=n(rke,"A",{href:!0});var g1t=s(kG);kyo=r(g1t,"XLMWithLMHeadModel"),g1t.forEach(t),Syo=r(rke," (XLM model)"),rke.forEach(t),Ryo=i(O),S1=n(O,"LI",{});var tke=s(S1);Ome=n(tke,"STRONG",{});var h1t=s(Ome);Pyo=r(h1t,"xlm-roberta"),h1t.forEach(t),Byo=r(tke," \u2014 "),SG=n(tke,"A",{href:!0});var p1t=s(SG);Iyo=r(p1t,"XLMRobertaForMaskedLM"),p1t.forEach(t),Nyo=r(tke," (XLM-RoBERTa model)"),tke.forEach(t),qyo=i(O),R1=n(O,"LI",{});var ake=s(R1);Vme=n(ake,"STRONG",{});var _1t=s(Vme);jyo=r(_1t,"xlm-roberta-xl"),_1t.forEach(t),Dyo=r(ake," \u2014 "),RG=n(ake,"A",{href:!0});var u1t=s(RG);Gyo=r(u1t,"XLMRobertaXLForMaskedLM"),u1t.forEach(t),Oyo=r(ake," (XLM-RoBERTa-XL model)"),ake.forEach(t),Vyo=i(O),P1=n(O,"LI",{});var nke=s(P1);Xme=n(nke,"STRONG",{});var b1t=s(Xme);Xyo=r(b1t,"xlnet"),b1t.forEach(t),zyo=r(nke," \u2014 "),PG=n(nke,"A",{href:!0});var v1t=s(PG);Qyo=r(v1t,"XLNetLMHeadModel"),v1t.forEach(t),Wyo=r(nke," (XLNet model)"),nke.forEach(t),O.forEach(t),Hyo=i(sa),B1=n(sa,"P",{});var ske=s(B1);Uyo=r(ske,"The model is set in evaluation mode by default using "),zme=n(ske,"CODE",{});var F1t=s(zme);Jyo=r(F1t,"model.eval()"),F1t.forEach(t),Yyo=r(ske,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qme=n(ske,"CODE",{});var T1t=s(Qme);Kyo=r(T1t,"model.train()"),T1t.forEach(t),ske.forEach(t),Zyo=i(sa),T(I1.$$.fragment,sa),sa.forEach(t),ol.forEach(t),kVe=i(f),zi=n(f,"H2",{class:!0});var Nze=s(zi);N1=n(Nze,"A",{id:!0,class:!0,href:!0});var M1t=s(N1);Wme=n(M1t,"SPAN",{});var E1t=s(Wme);T(kL.$$.fragment,E1t),E1t.forEach(t),M1t.forEach(t),e8o=i(Nze),Hme=n(Nze,"SPAN",{});var C1t=s(Hme);o8o=r(C1t,"AutoModelForCausalLM"),C1t.forEach(t),Nze.forEach(t),SVe=i(f),ko=n(f,"DIV",{class:!0});var rl=s(ko);T(SL.$$.fragment,rl),r8o=i(rl),Qi=n(rl,"P",{});var pre=s(Qi);t8o=r(pre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),BG=n(pre,"A",{href:!0});var w1t=s(BG);a8o=r(w1t,"from_pretrained()"),w1t.forEach(t),n8o=r(pre," class method or the "),IG=n(pre,"A",{href:!0});var A1t=s(IG);s8o=r(A1t,"from_config()"),A1t.forEach(t),l8o=r(pre,` class
method.`),pre.forEach(t),i8o=i(rl),RL=n(rl,"P",{});var qze=s(RL);d8o=r(qze,"This class cannot be instantiated directly using "),Ume=n(qze,"CODE",{});var L1t=s(Ume);c8o=r(L1t,"__init__()"),L1t.forEach(t),f8o=r(qze," (throws an error)."),qze.forEach(t),m8o=i(rl),it=n(rl,"DIV",{class:!0});var rA=s(it);T(PL.$$.fragment,rA),g8o=i(rA),Jme=n(rA,"P",{});var y1t=s(Jme);h8o=r(y1t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),y1t.forEach(t),p8o=i(rA),Wi=n(rA,"P",{});var _re=s(Wi);_8o=r(_re,`Note:
Loading a model from its configuration file does `),Yme=n(_re,"STRONG",{});var x1t=s(Yme);u8o=r(x1t,"not"),x1t.forEach(t),b8o=r(_re,` load the model weights. It only affects the
model\u2019s configuration. Use `),NG=n(_re,"A",{href:!0});var $1t=s(NG);v8o=r($1t,"from_pretrained()"),$1t.forEach(t),F8o=r(_re," to load the model weights."),_re.forEach(t),T8o=i(rA),T(q1.$$.fragment,rA),rA.forEach(t),M8o=i(rl),Ke=n(rl,"DIV",{class:!0});var la=s(Ke);T(BL.$$.fragment,la),E8o=i(la),Kme=n(la,"P",{});var k1t=s(Kme);C8o=r(k1t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),k1t.forEach(t),w8o=i(la),Ia=n(la,"P",{});var tA=s(Ia);A8o=r(tA,"The model class to instantiate is selected based on the "),Zme=n(tA,"CODE",{});var S1t=s(Zme);L8o=r(S1t,"model_type"),S1t.forEach(t),y8o=r(tA,` property of the config object (either
passed as an argument or loaded from `),ege=n(tA,"CODE",{});var R1t=s(ege);x8o=r(R1t,"pretrained_model_name_or_path"),R1t.forEach(t),$8o=r(tA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oge=n(tA,"CODE",{});var P1t=s(oge);k8o=r(P1t,"pretrained_model_name_or_path"),P1t.forEach(t),S8o=r(tA,":"),tA.forEach(t),R8o=i(la),z=n(la,"UL",{});var Q=s(z);j1=n(Q,"LI",{});var lke=s(j1);rge=n(lke,"STRONG",{});var B1t=s(rge);P8o=r(B1t,"bart"),B1t.forEach(t),B8o=r(lke," \u2014 "),qG=n(lke,"A",{href:!0});var I1t=s(qG);I8o=r(I1t,"BartForCausalLM"),I1t.forEach(t),N8o=r(lke," (BART model)"),lke.forEach(t),q8o=i(Q),D1=n(Q,"LI",{});var ike=s(D1);tge=n(ike,"STRONG",{});var N1t=s(tge);j8o=r(N1t,"bert"),N1t.forEach(t),D8o=r(ike," \u2014 "),jG=n(ike,"A",{href:!0});var q1t=s(jG);G8o=r(q1t,"BertLMHeadModel"),q1t.forEach(t),O8o=r(ike," (BERT model)"),ike.forEach(t),V8o=i(Q),G1=n(Q,"LI",{});var dke=s(G1);age=n(dke,"STRONG",{});var j1t=s(age);X8o=r(j1t,"bert-generation"),j1t.forEach(t),z8o=r(dke," \u2014 "),DG=n(dke,"A",{href:!0});var D1t=s(DG);Q8o=r(D1t,"BertGenerationDecoder"),D1t.forEach(t),W8o=r(dke," (Bert Generation model)"),dke.forEach(t),H8o=i(Q),O1=n(Q,"LI",{});var cke=s(O1);nge=n(cke,"STRONG",{});var G1t=s(nge);U8o=r(G1t,"big_bird"),G1t.forEach(t),J8o=r(cke," \u2014 "),GG=n(cke,"A",{href:!0});var O1t=s(GG);Y8o=r(O1t,"BigBirdForCausalLM"),O1t.forEach(t),K8o=r(cke," (BigBird model)"),cke.forEach(t),Z8o=i(Q),V1=n(Q,"LI",{});var fke=s(V1);sge=n(fke,"STRONG",{});var V1t=s(sge);exo=r(V1t,"bigbird_pegasus"),V1t.forEach(t),oxo=r(fke," \u2014 "),OG=n(fke,"A",{href:!0});var X1t=s(OG);rxo=r(X1t,"BigBirdPegasusForCausalLM"),X1t.forEach(t),txo=r(fke," (BigBird-Pegasus model)"),fke.forEach(t),axo=i(Q),X1=n(Q,"LI",{});var mke=s(X1);lge=n(mke,"STRONG",{});var z1t=s(lge);nxo=r(z1t,"blenderbot"),z1t.forEach(t),sxo=r(mke," \u2014 "),VG=n(mke,"A",{href:!0});var Q1t=s(VG);lxo=r(Q1t,"BlenderbotForCausalLM"),Q1t.forEach(t),ixo=r(mke," (Blenderbot model)"),mke.forEach(t),dxo=i(Q),z1=n(Q,"LI",{});var gke=s(z1);ige=n(gke,"STRONG",{});var W1t=s(ige);cxo=r(W1t,"blenderbot-small"),W1t.forEach(t),fxo=r(gke," \u2014 "),XG=n(gke,"A",{href:!0});var H1t=s(XG);mxo=r(H1t,"BlenderbotSmallForCausalLM"),H1t.forEach(t),gxo=r(gke," (BlenderbotSmall model)"),gke.forEach(t),hxo=i(Q),Q1=n(Q,"LI",{});var hke=s(Q1);dge=n(hke,"STRONG",{});var U1t=s(dge);pxo=r(U1t,"bloom"),U1t.forEach(t),_xo=r(hke," \u2014 "),zG=n(hke,"A",{href:!0});var J1t=s(zG);uxo=r(J1t,"BloomForCausalLM"),J1t.forEach(t),bxo=r(hke," (BLOOM model)"),hke.forEach(t),vxo=i(Q),W1=n(Q,"LI",{});var pke=s(W1);cge=n(pke,"STRONG",{});var Y1t=s(cge);Fxo=r(Y1t,"camembert"),Y1t.forEach(t),Txo=r(pke," \u2014 "),QG=n(pke,"A",{href:!0});var K1t=s(QG);Mxo=r(K1t,"CamembertForCausalLM"),K1t.forEach(t),Exo=r(pke," (CamemBERT model)"),pke.forEach(t),Cxo=i(Q),H1=n(Q,"LI",{});var _ke=s(H1);fge=n(_ke,"STRONG",{});var Z1t=s(fge);wxo=r(Z1t,"codegen"),Z1t.forEach(t),Axo=r(_ke," \u2014 "),WG=n(_ke,"A",{href:!0});var e2t=s(WG);Lxo=r(e2t,"CodeGenForCausalLM"),e2t.forEach(t),yxo=r(_ke," (CodeGen model)"),_ke.forEach(t),xxo=i(Q),U1=n(Q,"LI",{});var uke=s(U1);mge=n(uke,"STRONG",{});var o2t=s(mge);$xo=r(o2t,"ctrl"),o2t.forEach(t),kxo=r(uke," \u2014 "),HG=n(uke,"A",{href:!0});var r2t=s(HG);Sxo=r(r2t,"CTRLLMHeadModel"),r2t.forEach(t),Rxo=r(uke," (CTRL model)"),uke.forEach(t),Pxo=i(Q),J1=n(Q,"LI",{});var bke=s(J1);gge=n(bke,"STRONG",{});var t2t=s(gge);Bxo=r(t2t,"data2vec-text"),t2t.forEach(t),Ixo=r(bke," \u2014 "),UG=n(bke,"A",{href:!0});var a2t=s(UG);Nxo=r(a2t,"Data2VecTextForCausalLM"),a2t.forEach(t),qxo=r(bke," (Data2VecText model)"),bke.forEach(t),jxo=i(Q),Y1=n(Q,"LI",{});var vke=s(Y1);hge=n(vke,"STRONG",{});var n2t=s(hge);Dxo=r(n2t,"electra"),n2t.forEach(t),Gxo=r(vke," \u2014 "),JG=n(vke,"A",{href:!0});var s2t=s(JG);Oxo=r(s2t,"ElectraForCausalLM"),s2t.forEach(t),Vxo=r(vke," (ELECTRA model)"),vke.forEach(t),Xxo=i(Q),K1=n(Q,"LI",{});var Fke=s(K1);pge=n(Fke,"STRONG",{});var l2t=s(pge);zxo=r(l2t,"gpt2"),l2t.forEach(t),Qxo=r(Fke," \u2014 "),YG=n(Fke,"A",{href:!0});var i2t=s(YG);Wxo=r(i2t,"GPT2LMHeadModel"),i2t.forEach(t),Hxo=r(Fke," (OpenAI GPT-2 model)"),Fke.forEach(t),Uxo=i(Q),Z1=n(Q,"LI",{});var Tke=s(Z1);_ge=n(Tke,"STRONG",{});var d2t=s(_ge);Jxo=r(d2t,"gpt_neo"),d2t.forEach(t),Yxo=r(Tke," \u2014 "),KG=n(Tke,"A",{href:!0});var c2t=s(KG);Kxo=r(c2t,"GPTNeoForCausalLM"),c2t.forEach(t),Zxo=r(Tke," (GPT Neo model)"),Tke.forEach(t),e$o=i(Q),e2=n(Q,"LI",{});var Mke=s(e2);uge=n(Mke,"STRONG",{});var f2t=s(uge);o$o=r(f2t,"gpt_neox"),f2t.forEach(t),r$o=r(Mke," \u2014 "),ZG=n(Mke,"A",{href:!0});var m2t=s(ZG);t$o=r(m2t,"GPTNeoXForCausalLM"),m2t.forEach(t),a$o=r(Mke," (GPT NeoX model)"),Mke.forEach(t),n$o=i(Q),o2=n(Q,"LI",{});var Eke=s(o2);bge=n(Eke,"STRONG",{});var g2t=s(bge);s$o=r(g2t,"gptj"),g2t.forEach(t),l$o=r(Eke," \u2014 "),eO=n(Eke,"A",{href:!0});var h2t=s(eO);i$o=r(h2t,"GPTJForCausalLM"),h2t.forEach(t),d$o=r(Eke," (GPT-J model)"),Eke.forEach(t),c$o=i(Q),r2=n(Q,"LI",{});var Cke=s(r2);vge=n(Cke,"STRONG",{});var p2t=s(vge);f$o=r(p2t,"marian"),p2t.forEach(t),m$o=r(Cke," \u2014 "),oO=n(Cke,"A",{href:!0});var _2t=s(oO);g$o=r(_2t,"MarianForCausalLM"),_2t.forEach(t),h$o=r(Cke," (Marian model)"),Cke.forEach(t),p$o=i(Q),t2=n(Q,"LI",{});var wke=s(t2);Fge=n(wke,"STRONG",{});var u2t=s(Fge);_$o=r(u2t,"mbart"),u2t.forEach(t),u$o=r(wke," \u2014 "),rO=n(wke,"A",{href:!0});var b2t=s(rO);b$o=r(b2t,"MBartForCausalLM"),b2t.forEach(t),v$o=r(wke," (mBART model)"),wke.forEach(t),F$o=i(Q),a2=n(Q,"LI",{});var Ake=s(a2);Tge=n(Ake,"STRONG",{});var v2t=s(Tge);T$o=r(v2t,"megatron-bert"),v2t.forEach(t),M$o=r(Ake," \u2014 "),tO=n(Ake,"A",{href:!0});var F2t=s(tO);E$o=r(F2t,"MegatronBertForCausalLM"),F2t.forEach(t),C$o=r(Ake," (Megatron-BERT model)"),Ake.forEach(t),w$o=i(Q),n2=n(Q,"LI",{});var Lke=s(n2);Mge=n(Lke,"STRONG",{});var T2t=s(Mge);A$o=r(T2t,"mvp"),T2t.forEach(t),L$o=r(Lke," \u2014 "),aO=n(Lke,"A",{href:!0});var M2t=s(aO);y$o=r(M2t,"MvpForCausalLM"),M2t.forEach(t),x$o=r(Lke," (MVP model)"),Lke.forEach(t),$$o=i(Q),s2=n(Q,"LI",{});var yke=s(s2);Ege=n(yke,"STRONG",{});var E2t=s(Ege);k$o=r(E2t,"openai-gpt"),E2t.forEach(t),S$o=r(yke," \u2014 "),nO=n(yke,"A",{href:!0});var C2t=s(nO);R$o=r(C2t,"OpenAIGPTLMHeadModel"),C2t.forEach(t),P$o=r(yke," (OpenAI GPT model)"),yke.forEach(t),B$o=i(Q),l2=n(Q,"LI",{});var xke=s(l2);Cge=n(xke,"STRONG",{});var w2t=s(Cge);I$o=r(w2t,"opt"),w2t.forEach(t),N$o=r(xke," \u2014 "),sO=n(xke,"A",{href:!0});var A2t=s(sO);q$o=r(A2t,"OPTForCausalLM"),A2t.forEach(t),j$o=r(xke," (OPT model)"),xke.forEach(t),D$o=i(Q),i2=n(Q,"LI",{});var $ke=s(i2);wge=n($ke,"STRONG",{});var L2t=s(wge);G$o=r(L2t,"pegasus"),L2t.forEach(t),O$o=r($ke," \u2014 "),lO=n($ke,"A",{href:!0});var y2t=s(lO);V$o=r(y2t,"PegasusForCausalLM"),y2t.forEach(t),X$o=r($ke," (Pegasus model)"),$ke.forEach(t),z$o=i(Q),d2=n(Q,"LI",{});var kke=s(d2);Age=n(kke,"STRONG",{});var x2t=s(Age);Q$o=r(x2t,"plbart"),x2t.forEach(t),W$o=r(kke," \u2014 "),iO=n(kke,"A",{href:!0});var $2t=s(iO);H$o=r($2t,"PLBartForCausalLM"),$2t.forEach(t),U$o=r(kke," (PLBart model)"),kke.forEach(t),J$o=i(Q),c2=n(Q,"LI",{});var Ske=s(c2);Lge=n(Ske,"STRONG",{});var k2t=s(Lge);Y$o=r(k2t,"prophetnet"),k2t.forEach(t),K$o=r(Ske," \u2014 "),dO=n(Ske,"A",{href:!0});var S2t=s(dO);Z$o=r(S2t,"ProphetNetForCausalLM"),S2t.forEach(t),eko=r(Ske," (ProphetNet model)"),Ske.forEach(t),oko=i(Q),f2=n(Q,"LI",{});var Rke=s(f2);yge=n(Rke,"STRONG",{});var R2t=s(yge);rko=r(R2t,"qdqbert"),R2t.forEach(t),tko=r(Rke," \u2014 "),cO=n(Rke,"A",{href:!0});var P2t=s(cO);ako=r(P2t,"QDQBertLMHeadModel"),P2t.forEach(t),nko=r(Rke," (QDQBert model)"),Rke.forEach(t),sko=i(Q),m2=n(Q,"LI",{});var Pke=s(m2);xge=n(Pke,"STRONG",{});var B2t=s(xge);lko=r(B2t,"reformer"),B2t.forEach(t),iko=r(Pke," \u2014 "),fO=n(Pke,"A",{href:!0});var I2t=s(fO);dko=r(I2t,"ReformerModelWithLMHead"),I2t.forEach(t),cko=r(Pke," (Reformer model)"),Pke.forEach(t),fko=i(Q),g2=n(Q,"LI",{});var Bke=s(g2);$ge=n(Bke,"STRONG",{});var N2t=s($ge);mko=r(N2t,"rembert"),N2t.forEach(t),gko=r(Bke," \u2014 "),mO=n(Bke,"A",{href:!0});var q2t=s(mO);hko=r(q2t,"RemBertForCausalLM"),q2t.forEach(t),pko=r(Bke," (RemBERT model)"),Bke.forEach(t),_ko=i(Q),h2=n(Q,"LI",{});var Ike=s(h2);kge=n(Ike,"STRONG",{});var j2t=s(kge);uko=r(j2t,"roberta"),j2t.forEach(t),bko=r(Ike," \u2014 "),gO=n(Ike,"A",{href:!0});var D2t=s(gO);vko=r(D2t,"RobertaForCausalLM"),D2t.forEach(t),Fko=r(Ike," (RoBERTa model)"),Ike.forEach(t),Tko=i(Q),p2=n(Q,"LI",{});var Nke=s(p2);Sge=n(Nke,"STRONG",{});var G2t=s(Sge);Mko=r(G2t,"roformer"),G2t.forEach(t),Eko=r(Nke," \u2014 "),hO=n(Nke,"A",{href:!0});var O2t=s(hO);Cko=r(O2t,"RoFormerForCausalLM"),O2t.forEach(t),wko=r(Nke," (RoFormer model)"),Nke.forEach(t),Ako=i(Q),_2=n(Q,"LI",{});var qke=s(_2);Rge=n(qke,"STRONG",{});var V2t=s(Rge);Lko=r(V2t,"speech_to_text_2"),V2t.forEach(t),yko=r(qke," \u2014 "),pO=n(qke,"A",{href:!0});var X2t=s(pO);xko=r(X2t,"Speech2Text2ForCausalLM"),X2t.forEach(t),$ko=r(qke," (Speech2Text2 model)"),qke.forEach(t),kko=i(Q),u2=n(Q,"LI",{});var jke=s(u2);Pge=n(jke,"STRONG",{});var z2t=s(Pge);Sko=r(z2t,"transfo-xl"),z2t.forEach(t),Rko=r(jke," \u2014 "),_O=n(jke,"A",{href:!0});var Q2t=s(_O);Pko=r(Q2t,"TransfoXLLMHeadModel"),Q2t.forEach(t),Bko=r(jke," (Transformer-XL model)"),jke.forEach(t),Iko=i(Q),b2=n(Q,"LI",{});var Dke=s(b2);Bge=n(Dke,"STRONG",{});var W2t=s(Bge);Nko=r(W2t,"trocr"),W2t.forEach(t),qko=r(Dke," \u2014 "),uO=n(Dke,"A",{href:!0});var H2t=s(uO);jko=r(H2t,"TrOCRForCausalLM"),H2t.forEach(t),Dko=r(Dke," (TrOCR model)"),Dke.forEach(t),Gko=i(Q),v2=n(Q,"LI",{});var Gke=s(v2);Ige=n(Gke,"STRONG",{});var U2t=s(Ige);Oko=r(U2t,"xglm"),U2t.forEach(t),Vko=r(Gke," \u2014 "),bO=n(Gke,"A",{href:!0});var J2t=s(bO);Xko=r(J2t,"XGLMForCausalLM"),J2t.forEach(t),zko=r(Gke," (XGLM model)"),Gke.forEach(t),Qko=i(Q),F2=n(Q,"LI",{});var Oke=s(F2);Nge=n(Oke,"STRONG",{});var Y2t=s(Nge);Wko=r(Y2t,"xlm"),Y2t.forEach(t),Hko=r(Oke," \u2014 "),vO=n(Oke,"A",{href:!0});var K2t=s(vO);Uko=r(K2t,"XLMWithLMHeadModel"),K2t.forEach(t),Jko=r(Oke," (XLM model)"),Oke.forEach(t),Yko=i(Q),T2=n(Q,"LI",{});var Vke=s(T2);qge=n(Vke,"STRONG",{});var Z2t=s(qge);Kko=r(Z2t,"xlm-prophetnet"),Z2t.forEach(t),Zko=r(Vke," \u2014 "),FO=n(Vke,"A",{href:!0});var ebt=s(FO);eSo=r(ebt,"XLMProphetNetForCausalLM"),ebt.forEach(t),oSo=r(Vke," (XLM-ProphetNet model)"),Vke.forEach(t),rSo=i(Q),M2=n(Q,"LI",{});var Xke=s(M2);jge=n(Xke,"STRONG",{});var obt=s(jge);tSo=r(obt,"xlm-roberta"),obt.forEach(t),aSo=r(Xke," \u2014 "),TO=n(Xke,"A",{href:!0});var rbt=s(TO);nSo=r(rbt,"XLMRobertaForCausalLM"),rbt.forEach(t),sSo=r(Xke," (XLM-RoBERTa model)"),Xke.forEach(t),lSo=i(Q),E2=n(Q,"LI",{});var zke=s(E2);Dge=n(zke,"STRONG",{});var tbt=s(Dge);iSo=r(tbt,"xlm-roberta-xl"),tbt.forEach(t),dSo=r(zke," \u2014 "),MO=n(zke,"A",{href:!0});var abt=s(MO);cSo=r(abt,"XLMRobertaXLForCausalLM"),abt.forEach(t),fSo=r(zke," (XLM-RoBERTa-XL model)"),zke.forEach(t),mSo=i(Q),C2=n(Q,"LI",{});var Qke=s(C2);Gge=n(Qke,"STRONG",{});var nbt=s(Gge);gSo=r(nbt,"xlnet"),nbt.forEach(t),hSo=r(Qke," \u2014 "),EO=n(Qke,"A",{href:!0});var sbt=s(EO);pSo=r(sbt,"XLNetLMHeadModel"),sbt.forEach(t),_So=r(Qke," (XLNet model)"),Qke.forEach(t),Q.forEach(t),uSo=i(la),w2=n(la,"P",{});var Wke=s(w2);bSo=r(Wke,"The model is set in evaluation mode by default using "),Oge=n(Wke,"CODE",{});var lbt=s(Oge);vSo=r(lbt,"model.eval()"),lbt.forEach(t),FSo=r(Wke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vge=n(Wke,"CODE",{});var ibt=s(Vge);TSo=r(ibt,"model.train()"),ibt.forEach(t),Wke.forEach(t),MSo=i(la),T(A2.$$.fragment,la),la.forEach(t),rl.forEach(t),RVe=i(f),Hi=n(f,"H2",{class:!0});var jze=s(Hi);L2=n(jze,"A",{id:!0,class:!0,href:!0});var dbt=s(L2);Xge=n(dbt,"SPAN",{});var cbt=s(Xge);T(IL.$$.fragment,cbt),cbt.forEach(t),dbt.forEach(t),ESo=i(jze),zge=n(jze,"SPAN",{});var fbt=s(zge);CSo=r(fbt,"AutoModelForMaskedLM"),fbt.forEach(t),jze.forEach(t),PVe=i(f),So=n(f,"DIV",{class:!0});var tl=s(So);T(NL.$$.fragment,tl),wSo=i(tl),Ui=n(tl,"P",{});var ure=s(Ui);ASo=r(ure,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),CO=n(ure,"A",{href:!0});var mbt=s(CO);LSo=r(mbt,"from_pretrained()"),mbt.forEach(t),ySo=r(ure," class method or the "),wO=n(ure,"A",{href:!0});var gbt=s(wO);xSo=r(gbt,"from_config()"),gbt.forEach(t),$So=r(ure,` class
method.`),ure.forEach(t),kSo=i(tl),qL=n(tl,"P",{});var Dze=s(qL);SSo=r(Dze,"This class cannot be instantiated directly using "),Qge=n(Dze,"CODE",{});var hbt=s(Qge);RSo=r(hbt,"__init__()"),hbt.forEach(t),PSo=r(Dze," (throws an error)."),Dze.forEach(t),BSo=i(tl),dt=n(tl,"DIV",{class:!0});var aA=s(dt);T(jL.$$.fragment,aA),ISo=i(aA),Wge=n(aA,"P",{});var pbt=s(Wge);NSo=r(pbt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),pbt.forEach(t),qSo=i(aA),Ji=n(aA,"P",{});var bre=s(Ji);jSo=r(bre,`Note:
Loading a model from its configuration file does `),Hge=n(bre,"STRONG",{});var _bt=s(Hge);DSo=r(_bt,"not"),_bt.forEach(t),GSo=r(bre,` load the model weights. It only affects the
model\u2019s configuration. Use `),AO=n(bre,"A",{href:!0});var ubt=s(AO);OSo=r(ubt,"from_pretrained()"),ubt.forEach(t),VSo=r(bre," to load the model weights."),bre.forEach(t),XSo=i(aA),T(y2.$$.fragment,aA),aA.forEach(t),zSo=i(tl),Ze=n(tl,"DIV",{class:!0});var ia=s(Ze);T(DL.$$.fragment,ia),QSo=i(ia),Uge=n(ia,"P",{});var bbt=s(Uge);WSo=r(bbt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),bbt.forEach(t),HSo=i(ia),Na=n(ia,"P",{});var nA=s(Na);USo=r(nA,"The model class to instantiate is selected based on the "),Jge=n(nA,"CODE",{});var vbt=s(Jge);JSo=r(vbt,"model_type"),vbt.forEach(t),YSo=r(nA,` property of the config object (either
passed as an argument or loaded from `),Yge=n(nA,"CODE",{});var Fbt=s(Yge);KSo=r(Fbt,"pretrained_model_name_or_path"),Fbt.forEach(t),ZSo=r(nA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kge=n(nA,"CODE",{});var Tbt=s(Kge);eRo=r(Tbt,"pretrained_model_name_or_path"),Tbt.forEach(t),oRo=r(nA,":"),nA.forEach(t),rRo=i(ia),W=n(ia,"UL",{});var H=s(W);x2=n(H,"LI",{});var Hke=s(x2);Zge=n(Hke,"STRONG",{});var Mbt=s(Zge);tRo=r(Mbt,"albert"),Mbt.forEach(t),aRo=r(Hke," \u2014 "),LO=n(Hke,"A",{href:!0});var Ebt=s(LO);nRo=r(Ebt,"AlbertForMaskedLM"),Ebt.forEach(t),sRo=r(Hke," (ALBERT model)"),Hke.forEach(t),lRo=i(H),$2=n(H,"LI",{});var Uke=s($2);ehe=n(Uke,"STRONG",{});var Cbt=s(ehe);iRo=r(Cbt,"bart"),Cbt.forEach(t),dRo=r(Uke," \u2014 "),yO=n(Uke,"A",{href:!0});var wbt=s(yO);cRo=r(wbt,"BartForConditionalGeneration"),wbt.forEach(t),fRo=r(Uke," (BART model)"),Uke.forEach(t),mRo=i(H),k2=n(H,"LI",{});var Jke=s(k2);ohe=n(Jke,"STRONG",{});var Abt=s(ohe);gRo=r(Abt,"bert"),Abt.forEach(t),hRo=r(Jke," \u2014 "),xO=n(Jke,"A",{href:!0});var Lbt=s(xO);pRo=r(Lbt,"BertForMaskedLM"),Lbt.forEach(t),_Ro=r(Jke," (BERT model)"),Jke.forEach(t),uRo=i(H),S2=n(H,"LI",{});var Yke=s(S2);rhe=n(Yke,"STRONG",{});var ybt=s(rhe);bRo=r(ybt,"big_bird"),ybt.forEach(t),vRo=r(Yke," \u2014 "),$O=n(Yke,"A",{href:!0});var xbt=s($O);FRo=r(xbt,"BigBirdForMaskedLM"),xbt.forEach(t),TRo=r(Yke," (BigBird model)"),Yke.forEach(t),MRo=i(H),R2=n(H,"LI",{});var Kke=s(R2);the=n(Kke,"STRONG",{});var $bt=s(the);ERo=r($bt,"camembert"),$bt.forEach(t),CRo=r(Kke," \u2014 "),kO=n(Kke,"A",{href:!0});var kbt=s(kO);wRo=r(kbt,"CamembertForMaskedLM"),kbt.forEach(t),ARo=r(Kke," (CamemBERT model)"),Kke.forEach(t),LRo=i(H),P2=n(H,"LI",{});var Zke=s(P2);ahe=n(Zke,"STRONG",{});var Sbt=s(ahe);yRo=r(Sbt,"convbert"),Sbt.forEach(t),xRo=r(Zke," \u2014 "),SO=n(Zke,"A",{href:!0});var Rbt=s(SO);$Ro=r(Rbt,"ConvBertForMaskedLM"),Rbt.forEach(t),kRo=r(Zke," (ConvBERT model)"),Zke.forEach(t),SRo=i(H),B2=n(H,"LI",{});var eSe=s(B2);nhe=n(eSe,"STRONG",{});var Pbt=s(nhe);RRo=r(Pbt,"data2vec-text"),Pbt.forEach(t),PRo=r(eSe," \u2014 "),RO=n(eSe,"A",{href:!0});var Bbt=s(RO);BRo=r(Bbt,"Data2VecTextForMaskedLM"),Bbt.forEach(t),IRo=r(eSe," (Data2VecText model)"),eSe.forEach(t),NRo=i(H),I2=n(H,"LI",{});var oSe=s(I2);she=n(oSe,"STRONG",{});var Ibt=s(she);qRo=r(Ibt,"deberta"),Ibt.forEach(t),jRo=r(oSe," \u2014 "),PO=n(oSe,"A",{href:!0});var Nbt=s(PO);DRo=r(Nbt,"DebertaForMaskedLM"),Nbt.forEach(t),GRo=r(oSe," (DeBERTa model)"),oSe.forEach(t),ORo=i(H),N2=n(H,"LI",{});var rSe=s(N2);lhe=n(rSe,"STRONG",{});var qbt=s(lhe);VRo=r(qbt,"deberta-v2"),qbt.forEach(t),XRo=r(rSe," \u2014 "),BO=n(rSe,"A",{href:!0});var jbt=s(BO);zRo=r(jbt,"DebertaV2ForMaskedLM"),jbt.forEach(t),QRo=r(rSe," (DeBERTa-v2 model)"),rSe.forEach(t),WRo=i(H),q2=n(H,"LI",{});var tSe=s(q2);ihe=n(tSe,"STRONG",{});var Dbt=s(ihe);HRo=r(Dbt,"distilbert"),Dbt.forEach(t),URo=r(tSe," \u2014 "),IO=n(tSe,"A",{href:!0});var Gbt=s(IO);JRo=r(Gbt,"DistilBertForMaskedLM"),Gbt.forEach(t),YRo=r(tSe," (DistilBERT model)"),tSe.forEach(t),KRo=i(H),j2=n(H,"LI",{});var aSe=s(j2);dhe=n(aSe,"STRONG",{});var Obt=s(dhe);ZRo=r(Obt,"electra"),Obt.forEach(t),ePo=r(aSe," \u2014 "),NO=n(aSe,"A",{href:!0});var Vbt=s(NO);oPo=r(Vbt,"ElectraForMaskedLM"),Vbt.forEach(t),rPo=r(aSe," (ELECTRA model)"),aSe.forEach(t),tPo=i(H),D2=n(H,"LI",{});var nSe=s(D2);che=n(nSe,"STRONG",{});var Xbt=s(che);aPo=r(Xbt,"flaubert"),Xbt.forEach(t),nPo=r(nSe," \u2014 "),qO=n(nSe,"A",{href:!0});var zbt=s(qO);sPo=r(zbt,"FlaubertWithLMHeadModel"),zbt.forEach(t),lPo=r(nSe," (FlauBERT model)"),nSe.forEach(t),iPo=i(H),G2=n(H,"LI",{});var sSe=s(G2);fhe=n(sSe,"STRONG",{});var Qbt=s(fhe);dPo=r(Qbt,"fnet"),Qbt.forEach(t),cPo=r(sSe," \u2014 "),jO=n(sSe,"A",{href:!0});var Wbt=s(jO);fPo=r(Wbt,"FNetForMaskedLM"),Wbt.forEach(t),mPo=r(sSe," (FNet model)"),sSe.forEach(t),gPo=i(H),O2=n(H,"LI",{});var lSe=s(O2);mhe=n(lSe,"STRONG",{});var Hbt=s(mhe);hPo=r(Hbt,"funnel"),Hbt.forEach(t),pPo=r(lSe," \u2014 "),DO=n(lSe,"A",{href:!0});var Ubt=s(DO);_Po=r(Ubt,"FunnelForMaskedLM"),Ubt.forEach(t),uPo=r(lSe," (Funnel Transformer model)"),lSe.forEach(t),bPo=i(H),V2=n(H,"LI",{});var iSe=s(V2);ghe=n(iSe,"STRONG",{});var Jbt=s(ghe);vPo=r(Jbt,"ibert"),Jbt.forEach(t),FPo=r(iSe," \u2014 "),GO=n(iSe,"A",{href:!0});var Ybt=s(GO);TPo=r(Ybt,"IBertForMaskedLM"),Ybt.forEach(t),MPo=r(iSe," (I-BERT model)"),iSe.forEach(t),EPo=i(H),X2=n(H,"LI",{});var dSe=s(X2);hhe=n(dSe,"STRONG",{});var Kbt=s(hhe);CPo=r(Kbt,"layoutlm"),Kbt.forEach(t),wPo=r(dSe," \u2014 "),OO=n(dSe,"A",{href:!0});var Zbt=s(OO);APo=r(Zbt,"LayoutLMForMaskedLM"),Zbt.forEach(t),LPo=r(dSe," (LayoutLM model)"),dSe.forEach(t),yPo=i(H),z2=n(H,"LI",{});var cSe=s(z2);phe=n(cSe,"STRONG",{});var evt=s(phe);xPo=r(evt,"longformer"),evt.forEach(t),$Po=r(cSe," \u2014 "),VO=n(cSe,"A",{href:!0});var ovt=s(VO);kPo=r(ovt,"LongformerForMaskedLM"),ovt.forEach(t),SPo=r(cSe," (Longformer model)"),cSe.forEach(t),RPo=i(H),Q2=n(H,"LI",{});var fSe=s(Q2);_he=n(fSe,"STRONG",{});var rvt=s(_he);PPo=r(rvt,"luke"),rvt.forEach(t),BPo=r(fSe," \u2014 "),XO=n(fSe,"A",{href:!0});var tvt=s(XO);IPo=r(tvt,"LukeForMaskedLM"),tvt.forEach(t),NPo=r(fSe," (LUKE model)"),fSe.forEach(t),qPo=i(H),W2=n(H,"LI",{});var mSe=s(W2);uhe=n(mSe,"STRONG",{});var avt=s(uhe);jPo=r(avt,"mbart"),avt.forEach(t),DPo=r(mSe," \u2014 "),zO=n(mSe,"A",{href:!0});var nvt=s(zO);GPo=r(nvt,"MBartForConditionalGeneration"),nvt.forEach(t),OPo=r(mSe," (mBART model)"),mSe.forEach(t),VPo=i(H),H2=n(H,"LI",{});var gSe=s(H2);bhe=n(gSe,"STRONG",{});var svt=s(bhe);XPo=r(svt,"megatron-bert"),svt.forEach(t),zPo=r(gSe," \u2014 "),QO=n(gSe,"A",{href:!0});var lvt=s(QO);QPo=r(lvt,"MegatronBertForMaskedLM"),lvt.forEach(t),WPo=r(gSe," (Megatron-BERT model)"),gSe.forEach(t),HPo=i(H),U2=n(H,"LI",{});var hSe=s(U2);vhe=n(hSe,"STRONG",{});var ivt=s(vhe);UPo=r(ivt,"mobilebert"),ivt.forEach(t),JPo=r(hSe," \u2014 "),WO=n(hSe,"A",{href:!0});var dvt=s(WO);YPo=r(dvt,"MobileBertForMaskedLM"),dvt.forEach(t),KPo=r(hSe," (MobileBERT model)"),hSe.forEach(t),ZPo=i(H),J2=n(H,"LI",{});var pSe=s(J2);Fhe=n(pSe,"STRONG",{});var cvt=s(Fhe);eBo=r(cvt,"mpnet"),cvt.forEach(t),oBo=r(pSe," \u2014 "),HO=n(pSe,"A",{href:!0});var fvt=s(HO);rBo=r(fvt,"MPNetForMaskedLM"),fvt.forEach(t),tBo=r(pSe," (MPNet model)"),pSe.forEach(t),aBo=i(H),Y2=n(H,"LI",{});var _Se=s(Y2);The=n(_Se,"STRONG",{});var mvt=s(The);nBo=r(mvt,"mvp"),mvt.forEach(t),sBo=r(_Se," \u2014 "),UO=n(_Se,"A",{href:!0});var gvt=s(UO);lBo=r(gvt,"MvpForConditionalGeneration"),gvt.forEach(t),iBo=r(_Se," (MVP model)"),_Se.forEach(t),dBo=i(H),K2=n(H,"LI",{});var uSe=s(K2);Mhe=n(uSe,"STRONG",{});var hvt=s(Mhe);cBo=r(hvt,"nezha"),hvt.forEach(t),fBo=r(uSe," \u2014 "),JO=n(uSe,"A",{href:!0});var pvt=s(JO);mBo=r(pvt,"NezhaForMaskedLM"),pvt.forEach(t),gBo=r(uSe," (Nezha model)"),uSe.forEach(t),hBo=i(H),Z2=n(H,"LI",{});var bSe=s(Z2);Ehe=n(bSe,"STRONG",{});var _vt=s(Ehe);pBo=r(_vt,"nystromformer"),_vt.forEach(t),_Bo=r(bSe," \u2014 "),YO=n(bSe,"A",{href:!0});var uvt=s(YO);uBo=r(uvt,"NystromformerForMaskedLM"),uvt.forEach(t),bBo=r(bSe," (Nystr\xF6mformer model)"),bSe.forEach(t),vBo=i(H),eb=n(H,"LI",{});var vSe=s(eb);Che=n(vSe,"STRONG",{});var bvt=s(Che);FBo=r(bvt,"perceiver"),bvt.forEach(t),TBo=r(vSe," \u2014 "),KO=n(vSe,"A",{href:!0});var vvt=s(KO);MBo=r(vvt,"PerceiverForMaskedLM"),vvt.forEach(t),EBo=r(vSe," (Perceiver model)"),vSe.forEach(t),CBo=i(H),ob=n(H,"LI",{});var FSe=s(ob);whe=n(FSe,"STRONG",{});var Fvt=s(whe);wBo=r(Fvt,"qdqbert"),Fvt.forEach(t),ABo=r(FSe," \u2014 "),ZO=n(FSe,"A",{href:!0});var Tvt=s(ZO);LBo=r(Tvt,"QDQBertForMaskedLM"),Tvt.forEach(t),yBo=r(FSe," (QDQBert model)"),FSe.forEach(t),xBo=i(H),rb=n(H,"LI",{});var TSe=s(rb);Ahe=n(TSe,"STRONG",{});var Mvt=s(Ahe);$Bo=r(Mvt,"reformer"),Mvt.forEach(t),kBo=r(TSe," \u2014 "),eV=n(TSe,"A",{href:!0});var Evt=s(eV);SBo=r(Evt,"ReformerForMaskedLM"),Evt.forEach(t),RBo=r(TSe," (Reformer model)"),TSe.forEach(t),PBo=i(H),tb=n(H,"LI",{});var MSe=s(tb);Lhe=n(MSe,"STRONG",{});var Cvt=s(Lhe);BBo=r(Cvt,"rembert"),Cvt.forEach(t),IBo=r(MSe," \u2014 "),oV=n(MSe,"A",{href:!0});var wvt=s(oV);NBo=r(wvt,"RemBertForMaskedLM"),wvt.forEach(t),qBo=r(MSe," (RemBERT model)"),MSe.forEach(t),jBo=i(H),ab=n(H,"LI",{});var ESe=s(ab);yhe=n(ESe,"STRONG",{});var Avt=s(yhe);DBo=r(Avt,"roberta"),Avt.forEach(t),GBo=r(ESe," \u2014 "),rV=n(ESe,"A",{href:!0});var Lvt=s(rV);OBo=r(Lvt,"RobertaForMaskedLM"),Lvt.forEach(t),VBo=r(ESe," (RoBERTa model)"),ESe.forEach(t),XBo=i(H),nb=n(H,"LI",{});var CSe=s(nb);xhe=n(CSe,"STRONG",{});var yvt=s(xhe);zBo=r(yvt,"roformer"),yvt.forEach(t),QBo=r(CSe," \u2014 "),tV=n(CSe,"A",{href:!0});var xvt=s(tV);WBo=r(xvt,"RoFormerForMaskedLM"),xvt.forEach(t),HBo=r(CSe," (RoFormer model)"),CSe.forEach(t),UBo=i(H),sb=n(H,"LI",{});var wSe=s(sb);$he=n(wSe,"STRONG",{});var $vt=s($he);JBo=r($vt,"squeezebert"),$vt.forEach(t),YBo=r(wSe," \u2014 "),aV=n(wSe,"A",{href:!0});var kvt=s(aV);KBo=r(kvt,"SqueezeBertForMaskedLM"),kvt.forEach(t),ZBo=r(wSe," (SqueezeBERT model)"),wSe.forEach(t),eIo=i(H),lb=n(H,"LI",{});var ASe=s(lb);khe=n(ASe,"STRONG",{});var Svt=s(khe);oIo=r(Svt,"tapas"),Svt.forEach(t),rIo=r(ASe," \u2014 "),nV=n(ASe,"A",{href:!0});var Rvt=s(nV);tIo=r(Rvt,"TapasForMaskedLM"),Rvt.forEach(t),aIo=r(ASe," (TAPAS model)"),ASe.forEach(t),nIo=i(H),ib=n(H,"LI",{});var LSe=s(ib);She=n(LSe,"STRONG",{});var Pvt=s(She);sIo=r(Pvt,"wav2vec2"),Pvt.forEach(t),lIo=r(LSe," \u2014 "),Rhe=n(LSe,"CODE",{});var Bvt=s(Rhe);iIo=r(Bvt,"Wav2Vec2ForMaskedLM"),Bvt.forEach(t),dIo=r(LSe," (Wav2Vec2 model)"),LSe.forEach(t),cIo=i(H),db=n(H,"LI",{});var ySe=s(db);Phe=n(ySe,"STRONG",{});var Ivt=s(Phe);fIo=r(Ivt,"xlm"),Ivt.forEach(t),mIo=r(ySe," \u2014 "),sV=n(ySe,"A",{href:!0});var Nvt=s(sV);gIo=r(Nvt,"XLMWithLMHeadModel"),Nvt.forEach(t),hIo=r(ySe," (XLM model)"),ySe.forEach(t),pIo=i(H),cb=n(H,"LI",{});var xSe=s(cb);Bhe=n(xSe,"STRONG",{});var qvt=s(Bhe);_Io=r(qvt,"xlm-roberta"),qvt.forEach(t),uIo=r(xSe," \u2014 "),lV=n(xSe,"A",{href:!0});var jvt=s(lV);bIo=r(jvt,"XLMRobertaForMaskedLM"),jvt.forEach(t),vIo=r(xSe," (XLM-RoBERTa model)"),xSe.forEach(t),FIo=i(H),fb=n(H,"LI",{});var $Se=s(fb);Ihe=n($Se,"STRONG",{});var Dvt=s(Ihe);TIo=r(Dvt,"xlm-roberta-xl"),Dvt.forEach(t),MIo=r($Se," \u2014 "),iV=n($Se,"A",{href:!0});var Gvt=s(iV);EIo=r(Gvt,"XLMRobertaXLForMaskedLM"),Gvt.forEach(t),CIo=r($Se," (XLM-RoBERTa-XL model)"),$Se.forEach(t),wIo=i(H),mb=n(H,"LI",{});var kSe=s(mb);Nhe=n(kSe,"STRONG",{});var Ovt=s(Nhe);AIo=r(Ovt,"yoso"),Ovt.forEach(t),LIo=r(kSe," \u2014 "),dV=n(kSe,"A",{href:!0});var Vvt=s(dV);yIo=r(Vvt,"YosoForMaskedLM"),Vvt.forEach(t),xIo=r(kSe," (YOSO model)"),kSe.forEach(t),H.forEach(t),$Io=i(ia),gb=n(ia,"P",{});var SSe=s(gb);kIo=r(SSe,"The model is set in evaluation mode by default using "),qhe=n(SSe,"CODE",{});var Xvt=s(qhe);SIo=r(Xvt,"model.eval()"),Xvt.forEach(t),RIo=r(SSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jhe=n(SSe,"CODE",{});var zvt=s(jhe);PIo=r(zvt,"model.train()"),zvt.forEach(t),SSe.forEach(t),BIo=i(ia),T(hb.$$.fragment,ia),ia.forEach(t),tl.forEach(t),BVe=i(f),Yi=n(f,"H2",{class:!0});var Gze=s(Yi);pb=n(Gze,"A",{id:!0,class:!0,href:!0});var Qvt=s(pb);Dhe=n(Qvt,"SPAN",{});var Wvt=s(Dhe);T(GL.$$.fragment,Wvt),Wvt.forEach(t),Qvt.forEach(t),IIo=i(Gze),Ghe=n(Gze,"SPAN",{});var Hvt=s(Ghe);NIo=r(Hvt,"AutoModelForSeq2SeqLM"),Hvt.forEach(t),Gze.forEach(t),IVe=i(f),Ro=n(f,"DIV",{class:!0});var al=s(Ro);T(OL.$$.fragment,al),qIo=i(al),Ki=n(al,"P",{});var vre=s(Ki);jIo=r(vre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),cV=n(vre,"A",{href:!0});var Uvt=s(cV);DIo=r(Uvt,"from_pretrained()"),Uvt.forEach(t),GIo=r(vre," class method or the "),fV=n(vre,"A",{href:!0});var Jvt=s(fV);OIo=r(Jvt,"from_config()"),Jvt.forEach(t),VIo=r(vre,` class
method.`),vre.forEach(t),XIo=i(al),VL=n(al,"P",{});var Oze=s(VL);zIo=r(Oze,"This class cannot be instantiated directly using "),Ohe=n(Oze,"CODE",{});var Yvt=s(Ohe);QIo=r(Yvt,"__init__()"),Yvt.forEach(t),WIo=r(Oze," (throws an error)."),Oze.forEach(t),HIo=i(al),ct=n(al,"DIV",{class:!0});var sA=s(ct);T(XL.$$.fragment,sA),UIo=i(sA),Vhe=n(sA,"P",{});var Kvt=s(Vhe);JIo=r(Kvt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Kvt.forEach(t),YIo=i(sA),Zi=n(sA,"P",{});var Fre=s(Zi);KIo=r(Fre,`Note:
Loading a model from its configuration file does `),Xhe=n(Fre,"STRONG",{});var Zvt=s(Xhe);ZIo=r(Zvt,"not"),Zvt.forEach(t),eNo=r(Fre,` load the model weights. It only affects the
model\u2019s configuration. Use `),mV=n(Fre,"A",{href:!0});var e3t=s(mV);oNo=r(e3t,"from_pretrained()"),e3t.forEach(t),rNo=r(Fre," to load the model weights."),Fre.forEach(t),tNo=i(sA),T(_b.$$.fragment,sA),sA.forEach(t),aNo=i(al),eo=n(al,"DIV",{class:!0});var da=s(eo);T(zL.$$.fragment,da),nNo=i(da),zhe=n(da,"P",{});var o3t=s(zhe);sNo=r(o3t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),o3t.forEach(t),lNo=i(da),qa=n(da,"P",{});var lA=s(qa);iNo=r(lA,"The model class to instantiate is selected based on the "),Qhe=n(lA,"CODE",{});var r3t=s(Qhe);dNo=r(r3t,"model_type"),r3t.forEach(t),cNo=r(lA,` property of the config object (either
passed as an argument or loaded from `),Whe=n(lA,"CODE",{});var t3t=s(Whe);fNo=r(t3t,"pretrained_model_name_or_path"),t3t.forEach(t),mNo=r(lA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hhe=n(lA,"CODE",{});var a3t=s(Hhe);gNo=r(a3t,"pretrained_model_name_or_path"),a3t.forEach(t),hNo=r(lA,":"),lA.forEach(t),pNo=i(da),pe=n(da,"UL",{});var be=s(pe);ub=n(be,"LI",{});var RSe=s(ub);Uhe=n(RSe,"STRONG",{});var n3t=s(Uhe);_No=r(n3t,"bart"),n3t.forEach(t),uNo=r(RSe," \u2014 "),gV=n(RSe,"A",{href:!0});var s3t=s(gV);bNo=r(s3t,"BartForConditionalGeneration"),s3t.forEach(t),vNo=r(RSe," (BART model)"),RSe.forEach(t),FNo=i(be),bb=n(be,"LI",{});var PSe=s(bb);Jhe=n(PSe,"STRONG",{});var l3t=s(Jhe);TNo=r(l3t,"bigbird_pegasus"),l3t.forEach(t),MNo=r(PSe," \u2014 "),hV=n(PSe,"A",{href:!0});var i3t=s(hV);ENo=r(i3t,"BigBirdPegasusForConditionalGeneration"),i3t.forEach(t),CNo=r(PSe," (BigBird-Pegasus model)"),PSe.forEach(t),wNo=i(be),vb=n(be,"LI",{});var BSe=s(vb);Yhe=n(BSe,"STRONG",{});var d3t=s(Yhe);ANo=r(d3t,"blenderbot"),d3t.forEach(t),LNo=r(BSe," \u2014 "),pV=n(BSe,"A",{href:!0});var c3t=s(pV);yNo=r(c3t,"BlenderbotForConditionalGeneration"),c3t.forEach(t),xNo=r(BSe," (Blenderbot model)"),BSe.forEach(t),$No=i(be),Fb=n(be,"LI",{});var ISe=s(Fb);Khe=n(ISe,"STRONG",{});var f3t=s(Khe);kNo=r(f3t,"blenderbot-small"),f3t.forEach(t),SNo=r(ISe," \u2014 "),_V=n(ISe,"A",{href:!0});var m3t=s(_V);RNo=r(m3t,"BlenderbotSmallForConditionalGeneration"),m3t.forEach(t),PNo=r(ISe," (BlenderbotSmall model)"),ISe.forEach(t),BNo=i(be),Tb=n(be,"LI",{});var NSe=s(Tb);Zhe=n(NSe,"STRONG",{});var g3t=s(Zhe);INo=r(g3t,"encoder-decoder"),g3t.forEach(t),NNo=r(NSe," \u2014 "),uV=n(NSe,"A",{href:!0});var h3t=s(uV);qNo=r(h3t,"EncoderDecoderModel"),h3t.forEach(t),jNo=r(NSe," (Encoder decoder model)"),NSe.forEach(t),DNo=i(be),Mb=n(be,"LI",{});var qSe=s(Mb);epe=n(qSe,"STRONG",{});var p3t=s(epe);GNo=r(p3t,"fsmt"),p3t.forEach(t),ONo=r(qSe," \u2014 "),bV=n(qSe,"A",{href:!0});var _3t=s(bV);VNo=r(_3t,"FSMTForConditionalGeneration"),_3t.forEach(t),XNo=r(qSe," (FairSeq Machine-Translation model)"),qSe.forEach(t),zNo=i(be),Eb=n(be,"LI",{});var jSe=s(Eb);ope=n(jSe,"STRONG",{});var u3t=s(ope);QNo=r(u3t,"led"),u3t.forEach(t),WNo=r(jSe," \u2014 "),vV=n(jSe,"A",{href:!0});var b3t=s(vV);HNo=r(b3t,"LEDForConditionalGeneration"),b3t.forEach(t),UNo=r(jSe," (LED model)"),jSe.forEach(t),JNo=i(be),Cb=n(be,"LI",{});var DSe=s(Cb);rpe=n(DSe,"STRONG",{});var v3t=s(rpe);YNo=r(v3t,"longt5"),v3t.forEach(t),KNo=r(DSe," \u2014 "),FV=n(DSe,"A",{href:!0});var F3t=s(FV);ZNo=r(F3t,"LongT5ForConditionalGeneration"),F3t.forEach(t),eqo=r(DSe," (LongT5 model)"),DSe.forEach(t),oqo=i(be),wb=n(be,"LI",{});var GSe=s(wb);tpe=n(GSe,"STRONG",{});var T3t=s(tpe);rqo=r(T3t,"m2m_100"),T3t.forEach(t),tqo=r(GSe," \u2014 "),TV=n(GSe,"A",{href:!0});var M3t=s(TV);aqo=r(M3t,"M2M100ForConditionalGeneration"),M3t.forEach(t),nqo=r(GSe," (M2M100 model)"),GSe.forEach(t),sqo=i(be),Ab=n(be,"LI",{});var OSe=s(Ab);ape=n(OSe,"STRONG",{});var E3t=s(ape);lqo=r(E3t,"marian"),E3t.forEach(t),iqo=r(OSe," \u2014 "),MV=n(OSe,"A",{href:!0});var C3t=s(MV);dqo=r(C3t,"MarianMTModel"),C3t.forEach(t),cqo=r(OSe," (Marian model)"),OSe.forEach(t),fqo=i(be),Lb=n(be,"LI",{});var VSe=s(Lb);npe=n(VSe,"STRONG",{});var w3t=s(npe);mqo=r(w3t,"mbart"),w3t.forEach(t),gqo=r(VSe," \u2014 "),EV=n(VSe,"A",{href:!0});var A3t=s(EV);hqo=r(A3t,"MBartForConditionalGeneration"),A3t.forEach(t),pqo=r(VSe," (mBART model)"),VSe.forEach(t),_qo=i(be),yb=n(be,"LI",{});var XSe=s(yb);spe=n(XSe,"STRONG",{});var L3t=s(spe);uqo=r(L3t,"mt5"),L3t.forEach(t),bqo=r(XSe," \u2014 "),CV=n(XSe,"A",{href:!0});var y3t=s(CV);vqo=r(y3t,"MT5ForConditionalGeneration"),y3t.forEach(t),Fqo=r(XSe," (MT5 model)"),XSe.forEach(t),Tqo=i(be),xb=n(be,"LI",{});var zSe=s(xb);lpe=n(zSe,"STRONG",{});var x3t=s(lpe);Mqo=r(x3t,"mvp"),x3t.forEach(t),Eqo=r(zSe," \u2014 "),wV=n(zSe,"A",{href:!0});var $3t=s(wV);Cqo=r($3t,"MvpForConditionalGeneration"),$3t.forEach(t),wqo=r(zSe," (MVP model)"),zSe.forEach(t),Aqo=i(be),$b=n(be,"LI",{});var QSe=s($b);ipe=n(QSe,"STRONG",{});var k3t=s(ipe);Lqo=r(k3t,"pegasus"),k3t.forEach(t),yqo=r(QSe," \u2014 "),AV=n(QSe,"A",{href:!0});var S3t=s(AV);xqo=r(S3t,"PegasusForConditionalGeneration"),S3t.forEach(t),$qo=r(QSe," (Pegasus model)"),QSe.forEach(t),kqo=i(be),kb=n(be,"LI",{});var WSe=s(kb);dpe=n(WSe,"STRONG",{});var R3t=s(dpe);Sqo=r(R3t,"plbart"),R3t.forEach(t),Rqo=r(WSe," \u2014 "),LV=n(WSe,"A",{href:!0});var P3t=s(LV);Pqo=r(P3t,"PLBartForConditionalGeneration"),P3t.forEach(t),Bqo=r(WSe," (PLBart model)"),WSe.forEach(t),Iqo=i(be),Sb=n(be,"LI",{});var HSe=s(Sb);cpe=n(HSe,"STRONG",{});var B3t=s(cpe);Nqo=r(B3t,"prophetnet"),B3t.forEach(t),qqo=r(HSe," \u2014 "),yV=n(HSe,"A",{href:!0});var I3t=s(yV);jqo=r(I3t,"ProphetNetForConditionalGeneration"),I3t.forEach(t),Dqo=r(HSe," (ProphetNet model)"),HSe.forEach(t),Gqo=i(be),Rb=n(be,"LI",{});var USe=s(Rb);fpe=n(USe,"STRONG",{});var N3t=s(fpe);Oqo=r(N3t,"t5"),N3t.forEach(t),Vqo=r(USe," \u2014 "),xV=n(USe,"A",{href:!0});var q3t=s(xV);Xqo=r(q3t,"T5ForConditionalGeneration"),q3t.forEach(t),zqo=r(USe," (T5 model)"),USe.forEach(t),Qqo=i(be),Pb=n(be,"LI",{});var JSe=s(Pb);mpe=n(JSe,"STRONG",{});var j3t=s(mpe);Wqo=r(j3t,"xlm-prophetnet"),j3t.forEach(t),Hqo=r(JSe," \u2014 "),$V=n(JSe,"A",{href:!0});var D3t=s($V);Uqo=r(D3t,"XLMProphetNetForConditionalGeneration"),D3t.forEach(t),Jqo=r(JSe," (XLM-ProphetNet model)"),JSe.forEach(t),be.forEach(t),Yqo=i(da),Bb=n(da,"P",{});var YSe=s(Bb);Kqo=r(YSe,"The model is set in evaluation mode by default using "),gpe=n(YSe,"CODE",{});var G3t=s(gpe);Zqo=r(G3t,"model.eval()"),G3t.forEach(t),ejo=r(YSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hpe=n(YSe,"CODE",{});var O3t=s(hpe);ojo=r(O3t,"model.train()"),O3t.forEach(t),YSe.forEach(t),rjo=i(da),T(Ib.$$.fragment,da),da.forEach(t),al.forEach(t),NVe=i(f),ed=n(f,"H2",{class:!0});var Vze=s(ed);Nb=n(Vze,"A",{id:!0,class:!0,href:!0});var V3t=s(Nb);ppe=n(V3t,"SPAN",{});var X3t=s(ppe);T(QL.$$.fragment,X3t),X3t.forEach(t),V3t.forEach(t),tjo=i(Vze),_pe=n(Vze,"SPAN",{});var z3t=s(_pe);ajo=r(z3t,"AutoModelForSequenceClassification"),z3t.forEach(t),Vze.forEach(t),qVe=i(f),Po=n(f,"DIV",{class:!0});var nl=s(Po);T(WL.$$.fragment,nl),njo=i(nl),od=n(nl,"P",{});var Tre=s(od);sjo=r(Tre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),kV=n(Tre,"A",{href:!0});var Q3t=s(kV);ljo=r(Q3t,"from_pretrained()"),Q3t.forEach(t),ijo=r(Tre," class method or the "),SV=n(Tre,"A",{href:!0});var W3t=s(SV);djo=r(W3t,"from_config()"),W3t.forEach(t),cjo=r(Tre,` class
method.`),Tre.forEach(t),fjo=i(nl),HL=n(nl,"P",{});var Xze=s(HL);mjo=r(Xze,"This class cannot be instantiated directly using "),upe=n(Xze,"CODE",{});var H3t=s(upe);gjo=r(H3t,"__init__()"),H3t.forEach(t),hjo=r(Xze," (throws an error)."),Xze.forEach(t),pjo=i(nl),ft=n(nl,"DIV",{class:!0});var iA=s(ft);T(UL.$$.fragment,iA),_jo=i(iA),bpe=n(iA,"P",{});var U3t=s(bpe);ujo=r(U3t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),U3t.forEach(t),bjo=i(iA),rd=n(iA,"P",{});var Mre=s(rd);vjo=r(Mre,`Note:
Loading a model from its configuration file does `),vpe=n(Mre,"STRONG",{});var J3t=s(vpe);Fjo=r(J3t,"not"),J3t.forEach(t),Tjo=r(Mre,` load the model weights. It only affects the
model\u2019s configuration. Use `),RV=n(Mre,"A",{href:!0});var Y3t=s(RV);Mjo=r(Y3t,"from_pretrained()"),Y3t.forEach(t),Ejo=r(Mre," to load the model weights."),Mre.forEach(t),Cjo=i(iA),T(qb.$$.fragment,iA),iA.forEach(t),wjo=i(nl),oo=n(nl,"DIV",{class:!0});var ca=s(oo);T(JL.$$.fragment,ca),Ajo=i(ca),Fpe=n(ca,"P",{});var K3t=s(Fpe);Ljo=r(K3t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),K3t.forEach(t),yjo=i(ca),ja=n(ca,"P",{});var dA=s(ja);xjo=r(dA,"The model class to instantiate is selected based on the "),Tpe=n(dA,"CODE",{});var Z3t=s(Tpe);$jo=r(Z3t,"model_type"),Z3t.forEach(t),kjo=r(dA,` property of the config object (either
passed as an argument or loaded from `),Mpe=n(dA,"CODE",{});var e5t=s(Mpe);Sjo=r(e5t,"pretrained_model_name_or_path"),e5t.forEach(t),Rjo=r(dA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Epe=n(dA,"CODE",{});var o5t=s(Epe);Pjo=r(o5t,"pretrained_model_name_or_path"),o5t.forEach(t),Bjo=r(dA,":"),dA.forEach(t),Ijo=i(ca),N=n(ca,"UL",{});var q=s(N);jb=n(q,"LI",{});var KSe=s(jb);Cpe=n(KSe,"STRONG",{});var r5t=s(Cpe);Njo=r(r5t,"albert"),r5t.forEach(t),qjo=r(KSe," \u2014 "),PV=n(KSe,"A",{href:!0});var t5t=s(PV);jjo=r(t5t,"AlbertForSequenceClassification"),t5t.forEach(t),Djo=r(KSe," (ALBERT model)"),KSe.forEach(t),Gjo=i(q),Db=n(q,"LI",{});var ZSe=s(Db);wpe=n(ZSe,"STRONG",{});var a5t=s(wpe);Ojo=r(a5t,"bart"),a5t.forEach(t),Vjo=r(ZSe," \u2014 "),BV=n(ZSe,"A",{href:!0});var n5t=s(BV);Xjo=r(n5t,"BartForSequenceClassification"),n5t.forEach(t),zjo=r(ZSe," (BART model)"),ZSe.forEach(t),Qjo=i(q),Gb=n(q,"LI",{});var eRe=s(Gb);Ape=n(eRe,"STRONG",{});var s5t=s(Ape);Wjo=r(s5t,"bert"),s5t.forEach(t),Hjo=r(eRe," \u2014 "),IV=n(eRe,"A",{href:!0});var l5t=s(IV);Ujo=r(l5t,"BertForSequenceClassification"),l5t.forEach(t),Jjo=r(eRe," (BERT model)"),eRe.forEach(t),Yjo=i(q),Ob=n(q,"LI",{});var oRe=s(Ob);Lpe=n(oRe,"STRONG",{});var i5t=s(Lpe);Kjo=r(i5t,"big_bird"),i5t.forEach(t),Zjo=r(oRe," \u2014 "),NV=n(oRe,"A",{href:!0});var d5t=s(NV);eDo=r(d5t,"BigBirdForSequenceClassification"),d5t.forEach(t),oDo=r(oRe," (BigBird model)"),oRe.forEach(t),rDo=i(q),Vb=n(q,"LI",{});var rRe=s(Vb);ype=n(rRe,"STRONG",{});var c5t=s(ype);tDo=r(c5t,"bigbird_pegasus"),c5t.forEach(t),aDo=r(rRe," \u2014 "),qV=n(rRe,"A",{href:!0});var f5t=s(qV);nDo=r(f5t,"BigBirdPegasusForSequenceClassification"),f5t.forEach(t),sDo=r(rRe," (BigBird-Pegasus model)"),rRe.forEach(t),lDo=i(q),Xb=n(q,"LI",{});var tRe=s(Xb);xpe=n(tRe,"STRONG",{});var m5t=s(xpe);iDo=r(m5t,"bloom"),m5t.forEach(t),dDo=r(tRe," \u2014 "),jV=n(tRe,"A",{href:!0});var g5t=s(jV);cDo=r(g5t,"BloomForSequenceClassification"),g5t.forEach(t),fDo=r(tRe," (BLOOM model)"),tRe.forEach(t),mDo=i(q),zb=n(q,"LI",{});var aRe=s(zb);$pe=n(aRe,"STRONG",{});var h5t=s($pe);gDo=r(h5t,"camembert"),h5t.forEach(t),hDo=r(aRe," \u2014 "),DV=n(aRe,"A",{href:!0});var p5t=s(DV);pDo=r(p5t,"CamembertForSequenceClassification"),p5t.forEach(t),_Do=r(aRe," (CamemBERT model)"),aRe.forEach(t),uDo=i(q),Qb=n(q,"LI",{});var nRe=s(Qb);kpe=n(nRe,"STRONG",{});var _5t=s(kpe);bDo=r(_5t,"canine"),_5t.forEach(t),vDo=r(nRe," \u2014 "),GV=n(nRe,"A",{href:!0});var u5t=s(GV);FDo=r(u5t,"CanineForSequenceClassification"),u5t.forEach(t),TDo=r(nRe," (CANINE model)"),nRe.forEach(t),MDo=i(q),Wb=n(q,"LI",{});var sRe=s(Wb);Spe=n(sRe,"STRONG",{});var b5t=s(Spe);EDo=r(b5t,"convbert"),b5t.forEach(t),CDo=r(sRe," \u2014 "),OV=n(sRe,"A",{href:!0});var v5t=s(OV);wDo=r(v5t,"ConvBertForSequenceClassification"),v5t.forEach(t),ADo=r(sRe," (ConvBERT model)"),sRe.forEach(t),LDo=i(q),Hb=n(q,"LI",{});var lRe=s(Hb);Rpe=n(lRe,"STRONG",{});var F5t=s(Rpe);yDo=r(F5t,"ctrl"),F5t.forEach(t),xDo=r(lRe," \u2014 "),VV=n(lRe,"A",{href:!0});var T5t=s(VV);$Do=r(T5t,"CTRLForSequenceClassification"),T5t.forEach(t),kDo=r(lRe," (CTRL model)"),lRe.forEach(t),SDo=i(q),Ub=n(q,"LI",{});var iRe=s(Ub);Ppe=n(iRe,"STRONG",{});var M5t=s(Ppe);RDo=r(M5t,"data2vec-text"),M5t.forEach(t),PDo=r(iRe," \u2014 "),XV=n(iRe,"A",{href:!0});var E5t=s(XV);BDo=r(E5t,"Data2VecTextForSequenceClassification"),E5t.forEach(t),IDo=r(iRe," (Data2VecText model)"),iRe.forEach(t),NDo=i(q),Jb=n(q,"LI",{});var dRe=s(Jb);Bpe=n(dRe,"STRONG",{});var C5t=s(Bpe);qDo=r(C5t,"deberta"),C5t.forEach(t),jDo=r(dRe," \u2014 "),zV=n(dRe,"A",{href:!0});var w5t=s(zV);DDo=r(w5t,"DebertaForSequenceClassification"),w5t.forEach(t),GDo=r(dRe," (DeBERTa model)"),dRe.forEach(t),ODo=i(q),Yb=n(q,"LI",{});var cRe=s(Yb);Ipe=n(cRe,"STRONG",{});var A5t=s(Ipe);VDo=r(A5t,"deberta-v2"),A5t.forEach(t),XDo=r(cRe," \u2014 "),QV=n(cRe,"A",{href:!0});var L5t=s(QV);zDo=r(L5t,"DebertaV2ForSequenceClassification"),L5t.forEach(t),QDo=r(cRe," (DeBERTa-v2 model)"),cRe.forEach(t),WDo=i(q),Kb=n(q,"LI",{});var fRe=s(Kb);Npe=n(fRe,"STRONG",{});var y5t=s(Npe);HDo=r(y5t,"distilbert"),y5t.forEach(t),UDo=r(fRe," \u2014 "),WV=n(fRe,"A",{href:!0});var x5t=s(WV);JDo=r(x5t,"DistilBertForSequenceClassification"),x5t.forEach(t),YDo=r(fRe," (DistilBERT model)"),fRe.forEach(t),KDo=i(q),Zb=n(q,"LI",{});var mRe=s(Zb);qpe=n(mRe,"STRONG",{});var $5t=s(qpe);ZDo=r($5t,"electra"),$5t.forEach(t),eGo=r(mRe," \u2014 "),HV=n(mRe,"A",{href:!0});var k5t=s(HV);oGo=r(k5t,"ElectraForSequenceClassification"),k5t.forEach(t),rGo=r(mRe," (ELECTRA model)"),mRe.forEach(t),tGo=i(q),ev=n(q,"LI",{});var gRe=s(ev);jpe=n(gRe,"STRONG",{});var S5t=s(jpe);aGo=r(S5t,"flaubert"),S5t.forEach(t),nGo=r(gRe," \u2014 "),UV=n(gRe,"A",{href:!0});var R5t=s(UV);sGo=r(R5t,"FlaubertForSequenceClassification"),R5t.forEach(t),lGo=r(gRe," (FlauBERT model)"),gRe.forEach(t),iGo=i(q),ov=n(q,"LI",{});var hRe=s(ov);Dpe=n(hRe,"STRONG",{});var P5t=s(Dpe);dGo=r(P5t,"fnet"),P5t.forEach(t),cGo=r(hRe," \u2014 "),JV=n(hRe,"A",{href:!0});var B5t=s(JV);fGo=r(B5t,"FNetForSequenceClassification"),B5t.forEach(t),mGo=r(hRe," (FNet model)"),hRe.forEach(t),gGo=i(q),rv=n(q,"LI",{});var pRe=s(rv);Gpe=n(pRe,"STRONG",{});var I5t=s(Gpe);hGo=r(I5t,"funnel"),I5t.forEach(t),pGo=r(pRe," \u2014 "),YV=n(pRe,"A",{href:!0});var N5t=s(YV);_Go=r(N5t,"FunnelForSequenceClassification"),N5t.forEach(t),uGo=r(pRe," (Funnel Transformer model)"),pRe.forEach(t),bGo=i(q),tv=n(q,"LI",{});var _Re=s(tv);Ope=n(_Re,"STRONG",{});var q5t=s(Ope);vGo=r(q5t,"gpt2"),q5t.forEach(t),FGo=r(_Re," \u2014 "),KV=n(_Re,"A",{href:!0});var j5t=s(KV);TGo=r(j5t,"GPT2ForSequenceClassification"),j5t.forEach(t),MGo=r(_Re," (OpenAI GPT-2 model)"),_Re.forEach(t),EGo=i(q),av=n(q,"LI",{});var uRe=s(av);Vpe=n(uRe,"STRONG",{});var D5t=s(Vpe);CGo=r(D5t,"gpt_neo"),D5t.forEach(t),wGo=r(uRe," \u2014 "),ZV=n(uRe,"A",{href:!0});var G5t=s(ZV);AGo=r(G5t,"GPTNeoForSequenceClassification"),G5t.forEach(t),LGo=r(uRe," (GPT Neo model)"),uRe.forEach(t),yGo=i(q),nv=n(q,"LI",{});var bRe=s(nv);Xpe=n(bRe,"STRONG",{});var O5t=s(Xpe);xGo=r(O5t,"gptj"),O5t.forEach(t),$Go=r(bRe," \u2014 "),eX=n(bRe,"A",{href:!0});var V5t=s(eX);kGo=r(V5t,"GPTJForSequenceClassification"),V5t.forEach(t),SGo=r(bRe," (GPT-J model)"),bRe.forEach(t),RGo=i(q),sv=n(q,"LI",{});var vRe=s(sv);zpe=n(vRe,"STRONG",{});var X5t=s(zpe);PGo=r(X5t,"ibert"),X5t.forEach(t),BGo=r(vRe," \u2014 "),oX=n(vRe,"A",{href:!0});var z5t=s(oX);IGo=r(z5t,"IBertForSequenceClassification"),z5t.forEach(t),NGo=r(vRe," (I-BERT model)"),vRe.forEach(t),qGo=i(q),lv=n(q,"LI",{});var FRe=s(lv);Qpe=n(FRe,"STRONG",{});var Q5t=s(Qpe);jGo=r(Q5t,"layoutlm"),Q5t.forEach(t),DGo=r(FRe," \u2014 "),rX=n(FRe,"A",{href:!0});var W5t=s(rX);GGo=r(W5t,"LayoutLMForSequenceClassification"),W5t.forEach(t),OGo=r(FRe," (LayoutLM model)"),FRe.forEach(t),VGo=i(q),iv=n(q,"LI",{});var TRe=s(iv);Wpe=n(TRe,"STRONG",{});var H5t=s(Wpe);XGo=r(H5t,"layoutlmv2"),H5t.forEach(t),zGo=r(TRe," \u2014 "),tX=n(TRe,"A",{href:!0});var U5t=s(tX);QGo=r(U5t,"LayoutLMv2ForSequenceClassification"),U5t.forEach(t),WGo=r(TRe," (LayoutLMv2 model)"),TRe.forEach(t),HGo=i(q),dv=n(q,"LI",{});var MRe=s(dv);Hpe=n(MRe,"STRONG",{});var J5t=s(Hpe);UGo=r(J5t,"layoutlmv3"),J5t.forEach(t),JGo=r(MRe," \u2014 "),aX=n(MRe,"A",{href:!0});var Y5t=s(aX);YGo=r(Y5t,"LayoutLMv3ForSequenceClassification"),Y5t.forEach(t),KGo=r(MRe," (LayoutLMv3 model)"),MRe.forEach(t),ZGo=i(q),cv=n(q,"LI",{});var ERe=s(cv);Upe=n(ERe,"STRONG",{});var K5t=s(Upe);eOo=r(K5t,"led"),K5t.forEach(t),oOo=r(ERe," \u2014 "),nX=n(ERe,"A",{href:!0});var Z5t=s(nX);rOo=r(Z5t,"LEDForSequenceClassification"),Z5t.forEach(t),tOo=r(ERe," (LED model)"),ERe.forEach(t),aOo=i(q),fv=n(q,"LI",{});var CRe=s(fv);Jpe=n(CRe,"STRONG",{});var eFt=s(Jpe);nOo=r(eFt,"longformer"),eFt.forEach(t),sOo=r(CRe," \u2014 "),sX=n(CRe,"A",{href:!0});var oFt=s(sX);lOo=r(oFt,"LongformerForSequenceClassification"),oFt.forEach(t),iOo=r(CRe," (Longformer model)"),CRe.forEach(t),dOo=i(q),mv=n(q,"LI",{});var wRe=s(mv);Ype=n(wRe,"STRONG",{});var rFt=s(Ype);cOo=r(rFt,"mbart"),rFt.forEach(t),fOo=r(wRe," \u2014 "),lX=n(wRe,"A",{href:!0});var tFt=s(lX);mOo=r(tFt,"MBartForSequenceClassification"),tFt.forEach(t),gOo=r(wRe," (mBART model)"),wRe.forEach(t),hOo=i(q),gv=n(q,"LI",{});var ARe=s(gv);Kpe=n(ARe,"STRONG",{});var aFt=s(Kpe);pOo=r(aFt,"megatron-bert"),aFt.forEach(t),_Oo=r(ARe," \u2014 "),iX=n(ARe,"A",{href:!0});var nFt=s(iX);uOo=r(nFt,"MegatronBertForSequenceClassification"),nFt.forEach(t),bOo=r(ARe," (Megatron-BERT model)"),ARe.forEach(t),vOo=i(q),hv=n(q,"LI",{});var LRe=s(hv);Zpe=n(LRe,"STRONG",{});var sFt=s(Zpe);FOo=r(sFt,"mobilebert"),sFt.forEach(t),TOo=r(LRe," \u2014 "),dX=n(LRe,"A",{href:!0});var lFt=s(dX);MOo=r(lFt,"MobileBertForSequenceClassification"),lFt.forEach(t),EOo=r(LRe," (MobileBERT model)"),LRe.forEach(t),COo=i(q),pv=n(q,"LI",{});var yRe=s(pv);e_e=n(yRe,"STRONG",{});var iFt=s(e_e);wOo=r(iFt,"mpnet"),iFt.forEach(t),AOo=r(yRe," \u2014 "),cX=n(yRe,"A",{href:!0});var dFt=s(cX);LOo=r(dFt,"MPNetForSequenceClassification"),dFt.forEach(t),yOo=r(yRe," (MPNet model)"),yRe.forEach(t),xOo=i(q),_v=n(q,"LI",{});var xRe=s(_v);o_e=n(xRe,"STRONG",{});var cFt=s(o_e);$Oo=r(cFt,"mvp"),cFt.forEach(t),kOo=r(xRe," \u2014 "),fX=n(xRe,"A",{href:!0});var fFt=s(fX);SOo=r(fFt,"MvpForSequenceClassification"),fFt.forEach(t),ROo=r(xRe," (MVP model)"),xRe.forEach(t),POo=i(q),uv=n(q,"LI",{});var $Re=s(uv);r_e=n($Re,"STRONG",{});var mFt=s(r_e);BOo=r(mFt,"nezha"),mFt.forEach(t),IOo=r($Re," \u2014 "),mX=n($Re,"A",{href:!0});var gFt=s(mX);NOo=r(gFt,"NezhaForSequenceClassification"),gFt.forEach(t),qOo=r($Re," (Nezha model)"),$Re.forEach(t),jOo=i(q),bv=n(q,"LI",{});var kRe=s(bv);t_e=n(kRe,"STRONG",{});var hFt=s(t_e);DOo=r(hFt,"nystromformer"),hFt.forEach(t),GOo=r(kRe," \u2014 "),gX=n(kRe,"A",{href:!0});var pFt=s(gX);OOo=r(pFt,"NystromformerForSequenceClassification"),pFt.forEach(t),VOo=r(kRe," (Nystr\xF6mformer model)"),kRe.forEach(t),XOo=i(q),vv=n(q,"LI",{});var SRe=s(vv);a_e=n(SRe,"STRONG",{});var _Ft=s(a_e);zOo=r(_Ft,"openai-gpt"),_Ft.forEach(t),QOo=r(SRe," \u2014 "),hX=n(SRe,"A",{href:!0});var uFt=s(hX);WOo=r(uFt,"OpenAIGPTForSequenceClassification"),uFt.forEach(t),HOo=r(SRe," (OpenAI GPT model)"),SRe.forEach(t),UOo=i(q),Fv=n(q,"LI",{});var RRe=s(Fv);n_e=n(RRe,"STRONG",{});var bFt=s(n_e);JOo=r(bFt,"perceiver"),bFt.forEach(t),YOo=r(RRe," \u2014 "),pX=n(RRe,"A",{href:!0});var vFt=s(pX);KOo=r(vFt,"PerceiverForSequenceClassification"),vFt.forEach(t),ZOo=r(RRe," (Perceiver model)"),RRe.forEach(t),eVo=i(q),Tv=n(q,"LI",{});var PRe=s(Tv);s_e=n(PRe,"STRONG",{});var FFt=s(s_e);oVo=r(FFt,"plbart"),FFt.forEach(t),rVo=r(PRe," \u2014 "),_X=n(PRe,"A",{href:!0});var TFt=s(_X);tVo=r(TFt,"PLBartForSequenceClassification"),TFt.forEach(t),aVo=r(PRe," (PLBart model)"),PRe.forEach(t),nVo=i(q),Mv=n(q,"LI",{});var BRe=s(Mv);l_e=n(BRe,"STRONG",{});var MFt=s(l_e);sVo=r(MFt,"qdqbert"),MFt.forEach(t),lVo=r(BRe," \u2014 "),uX=n(BRe,"A",{href:!0});var EFt=s(uX);iVo=r(EFt,"QDQBertForSequenceClassification"),EFt.forEach(t),dVo=r(BRe," (QDQBert model)"),BRe.forEach(t),cVo=i(q),Ev=n(q,"LI",{});var IRe=s(Ev);i_e=n(IRe,"STRONG",{});var CFt=s(i_e);fVo=r(CFt,"reformer"),CFt.forEach(t),mVo=r(IRe," \u2014 "),bX=n(IRe,"A",{href:!0});var wFt=s(bX);gVo=r(wFt,"ReformerForSequenceClassification"),wFt.forEach(t),hVo=r(IRe," (Reformer model)"),IRe.forEach(t),pVo=i(q),Cv=n(q,"LI",{});var NRe=s(Cv);d_e=n(NRe,"STRONG",{});var AFt=s(d_e);_Vo=r(AFt,"rembert"),AFt.forEach(t),uVo=r(NRe," \u2014 "),vX=n(NRe,"A",{href:!0});var LFt=s(vX);bVo=r(LFt,"RemBertForSequenceClassification"),LFt.forEach(t),vVo=r(NRe," (RemBERT model)"),NRe.forEach(t),FVo=i(q),wv=n(q,"LI",{});var qRe=s(wv);c_e=n(qRe,"STRONG",{});var yFt=s(c_e);TVo=r(yFt,"roberta"),yFt.forEach(t),MVo=r(qRe," \u2014 "),FX=n(qRe,"A",{href:!0});var xFt=s(FX);EVo=r(xFt,"RobertaForSequenceClassification"),xFt.forEach(t),CVo=r(qRe," (RoBERTa model)"),qRe.forEach(t),wVo=i(q),Av=n(q,"LI",{});var jRe=s(Av);f_e=n(jRe,"STRONG",{});var $Ft=s(f_e);AVo=r($Ft,"roformer"),$Ft.forEach(t),LVo=r(jRe," \u2014 "),TX=n(jRe,"A",{href:!0});var kFt=s(TX);yVo=r(kFt,"RoFormerForSequenceClassification"),kFt.forEach(t),xVo=r(jRe," (RoFormer model)"),jRe.forEach(t),$Vo=i(q),Lv=n(q,"LI",{});var DRe=s(Lv);m_e=n(DRe,"STRONG",{});var SFt=s(m_e);kVo=r(SFt,"squeezebert"),SFt.forEach(t),SVo=r(DRe," \u2014 "),MX=n(DRe,"A",{href:!0});var RFt=s(MX);RVo=r(RFt,"SqueezeBertForSequenceClassification"),RFt.forEach(t),PVo=r(DRe," (SqueezeBERT model)"),DRe.forEach(t),BVo=i(q),yv=n(q,"LI",{});var GRe=s(yv);g_e=n(GRe,"STRONG",{});var PFt=s(g_e);IVo=r(PFt,"tapas"),PFt.forEach(t),NVo=r(GRe," \u2014 "),EX=n(GRe,"A",{href:!0});var BFt=s(EX);qVo=r(BFt,"TapasForSequenceClassification"),BFt.forEach(t),jVo=r(GRe," (TAPAS model)"),GRe.forEach(t),DVo=i(q),xv=n(q,"LI",{});var ORe=s(xv);h_e=n(ORe,"STRONG",{});var IFt=s(h_e);GVo=r(IFt,"transfo-xl"),IFt.forEach(t),OVo=r(ORe," \u2014 "),CX=n(ORe,"A",{href:!0});var NFt=s(CX);VVo=r(NFt,"TransfoXLForSequenceClassification"),NFt.forEach(t),XVo=r(ORe," (Transformer-XL model)"),ORe.forEach(t),zVo=i(q),$v=n(q,"LI",{});var VRe=s($v);p_e=n(VRe,"STRONG",{});var qFt=s(p_e);QVo=r(qFt,"xlm"),qFt.forEach(t),WVo=r(VRe," \u2014 "),wX=n(VRe,"A",{href:!0});var jFt=s(wX);HVo=r(jFt,"XLMForSequenceClassification"),jFt.forEach(t),UVo=r(VRe," (XLM model)"),VRe.forEach(t),JVo=i(q),kv=n(q,"LI",{});var XRe=s(kv);__e=n(XRe,"STRONG",{});var DFt=s(__e);YVo=r(DFt,"xlm-roberta"),DFt.forEach(t),KVo=r(XRe," \u2014 "),AX=n(XRe,"A",{href:!0});var GFt=s(AX);ZVo=r(GFt,"XLMRobertaForSequenceClassification"),GFt.forEach(t),eXo=r(XRe," (XLM-RoBERTa model)"),XRe.forEach(t),oXo=i(q),Sv=n(q,"LI",{});var zRe=s(Sv);u_e=n(zRe,"STRONG",{});var OFt=s(u_e);rXo=r(OFt,"xlm-roberta-xl"),OFt.forEach(t),tXo=r(zRe," \u2014 "),LX=n(zRe,"A",{href:!0});var VFt=s(LX);aXo=r(VFt,"XLMRobertaXLForSequenceClassification"),VFt.forEach(t),nXo=r(zRe," (XLM-RoBERTa-XL model)"),zRe.forEach(t),sXo=i(q),Rv=n(q,"LI",{});var QRe=s(Rv);b_e=n(QRe,"STRONG",{});var XFt=s(b_e);lXo=r(XFt,"xlnet"),XFt.forEach(t),iXo=r(QRe," \u2014 "),yX=n(QRe,"A",{href:!0});var zFt=s(yX);dXo=r(zFt,"XLNetForSequenceClassification"),zFt.forEach(t),cXo=r(QRe," (XLNet model)"),QRe.forEach(t),fXo=i(q),Pv=n(q,"LI",{});var WRe=s(Pv);v_e=n(WRe,"STRONG",{});var QFt=s(v_e);mXo=r(QFt,"yoso"),QFt.forEach(t),gXo=r(WRe," \u2014 "),xX=n(WRe,"A",{href:!0});var WFt=s(xX);hXo=r(WFt,"YosoForSequenceClassification"),WFt.forEach(t),pXo=r(WRe," (YOSO model)"),WRe.forEach(t),q.forEach(t),_Xo=i(ca),Bv=n(ca,"P",{});var HRe=s(Bv);uXo=r(HRe,"The model is set in evaluation mode by default using "),F_e=n(HRe,"CODE",{});var HFt=s(F_e);bXo=r(HFt,"model.eval()"),HFt.forEach(t),vXo=r(HRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),T_e=n(HRe,"CODE",{});var UFt=s(T_e);FXo=r(UFt,"model.train()"),UFt.forEach(t),HRe.forEach(t),TXo=i(ca),T(Iv.$$.fragment,ca),ca.forEach(t),nl.forEach(t),jVe=i(f),td=n(f,"H2",{class:!0});var zze=s(td);Nv=n(zze,"A",{id:!0,class:!0,href:!0});var JFt=s(Nv);M_e=n(JFt,"SPAN",{});var YFt=s(M_e);T(YL.$$.fragment,YFt),YFt.forEach(t),JFt.forEach(t),MXo=i(zze),E_e=n(zze,"SPAN",{});var KFt=s(E_e);EXo=r(KFt,"AutoModelForMultipleChoice"),KFt.forEach(t),zze.forEach(t),DVe=i(f),Bo=n(f,"DIV",{class:!0});var sl=s(Bo);T(KL.$$.fragment,sl),CXo=i(sl),ad=n(sl,"P",{});var Ere=s(ad);wXo=r(Ere,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),$X=n(Ere,"A",{href:!0});var ZFt=s($X);AXo=r(ZFt,"from_pretrained()"),ZFt.forEach(t),LXo=r(Ere," class method or the "),kX=n(Ere,"A",{href:!0});var eTt=s(kX);yXo=r(eTt,"from_config()"),eTt.forEach(t),xXo=r(Ere,` class
method.`),Ere.forEach(t),$Xo=i(sl),ZL=n(sl,"P",{});var Qze=s(ZL);kXo=r(Qze,"This class cannot be instantiated directly using "),C_e=n(Qze,"CODE",{});var oTt=s(C_e);SXo=r(oTt,"__init__()"),oTt.forEach(t),RXo=r(Qze," (throws an error)."),Qze.forEach(t),PXo=i(sl),mt=n(sl,"DIV",{class:!0});var cA=s(mt);T(ey.$$.fragment,cA),BXo=i(cA),w_e=n(cA,"P",{});var rTt=s(w_e);IXo=r(rTt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),rTt.forEach(t),NXo=i(cA),nd=n(cA,"P",{});var Cre=s(nd);qXo=r(Cre,`Note:
Loading a model from its configuration file does `),A_e=n(Cre,"STRONG",{});var tTt=s(A_e);jXo=r(tTt,"not"),tTt.forEach(t),DXo=r(Cre,` load the model weights. It only affects the
model\u2019s configuration. Use `),SX=n(Cre,"A",{href:!0});var aTt=s(SX);GXo=r(aTt,"from_pretrained()"),aTt.forEach(t),OXo=r(Cre," to load the model weights."),Cre.forEach(t),VXo=i(cA),T(qv.$$.fragment,cA),cA.forEach(t),XXo=i(sl),ro=n(sl,"DIV",{class:!0});var fa=s(ro);T(oy.$$.fragment,fa),zXo=i(fa),L_e=n(fa,"P",{});var nTt=s(L_e);QXo=r(nTt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),nTt.forEach(t),WXo=i(fa),Da=n(fa,"P",{});var fA=s(Da);HXo=r(fA,"The model class to instantiate is selected based on the "),y_e=n(fA,"CODE",{});var sTt=s(y_e);UXo=r(sTt,"model_type"),sTt.forEach(t),JXo=r(fA,` property of the config object (either
passed as an argument or loaded from `),x_e=n(fA,"CODE",{});var lTt=s(x_e);YXo=r(lTt,"pretrained_model_name_or_path"),lTt.forEach(t),KXo=r(fA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$_e=n(fA,"CODE",{});var iTt=s($_e);ZXo=r(iTt,"pretrained_model_name_or_path"),iTt.forEach(t),ezo=r(fA,":"),fA.forEach(t),ozo=i(fa),Z=n(fa,"UL",{});var ee=s(Z);jv=n(ee,"LI",{});var URe=s(jv);k_e=n(URe,"STRONG",{});var dTt=s(k_e);rzo=r(dTt,"albert"),dTt.forEach(t),tzo=r(URe," \u2014 "),RX=n(URe,"A",{href:!0});var cTt=s(RX);azo=r(cTt,"AlbertForMultipleChoice"),cTt.forEach(t),nzo=r(URe," (ALBERT model)"),URe.forEach(t),szo=i(ee),Dv=n(ee,"LI",{});var JRe=s(Dv);S_e=n(JRe,"STRONG",{});var fTt=s(S_e);lzo=r(fTt,"bert"),fTt.forEach(t),izo=r(JRe," \u2014 "),PX=n(JRe,"A",{href:!0});var mTt=s(PX);dzo=r(mTt,"BertForMultipleChoice"),mTt.forEach(t),czo=r(JRe," (BERT model)"),JRe.forEach(t),fzo=i(ee),Gv=n(ee,"LI",{});var YRe=s(Gv);R_e=n(YRe,"STRONG",{});var gTt=s(R_e);mzo=r(gTt,"big_bird"),gTt.forEach(t),gzo=r(YRe," \u2014 "),BX=n(YRe,"A",{href:!0});var hTt=s(BX);hzo=r(hTt,"BigBirdForMultipleChoice"),hTt.forEach(t),pzo=r(YRe," (BigBird model)"),YRe.forEach(t),_zo=i(ee),Ov=n(ee,"LI",{});var KRe=s(Ov);P_e=n(KRe,"STRONG",{});var pTt=s(P_e);uzo=r(pTt,"camembert"),pTt.forEach(t),bzo=r(KRe," \u2014 "),IX=n(KRe,"A",{href:!0});var _Tt=s(IX);vzo=r(_Tt,"CamembertForMultipleChoice"),_Tt.forEach(t),Fzo=r(KRe," (CamemBERT model)"),KRe.forEach(t),Tzo=i(ee),Vv=n(ee,"LI",{});var ZRe=s(Vv);B_e=n(ZRe,"STRONG",{});var uTt=s(B_e);Mzo=r(uTt,"canine"),uTt.forEach(t),Ezo=r(ZRe," \u2014 "),NX=n(ZRe,"A",{href:!0});var bTt=s(NX);Czo=r(bTt,"CanineForMultipleChoice"),bTt.forEach(t),wzo=r(ZRe," (CANINE model)"),ZRe.forEach(t),Azo=i(ee),Xv=n(ee,"LI",{});var ePe=s(Xv);I_e=n(ePe,"STRONG",{});var vTt=s(I_e);Lzo=r(vTt,"convbert"),vTt.forEach(t),yzo=r(ePe," \u2014 "),qX=n(ePe,"A",{href:!0});var FTt=s(qX);xzo=r(FTt,"ConvBertForMultipleChoice"),FTt.forEach(t),$zo=r(ePe," (ConvBERT model)"),ePe.forEach(t),kzo=i(ee),zv=n(ee,"LI",{});var oPe=s(zv);N_e=n(oPe,"STRONG",{});var TTt=s(N_e);Szo=r(TTt,"data2vec-text"),TTt.forEach(t),Rzo=r(oPe," \u2014 "),jX=n(oPe,"A",{href:!0});var MTt=s(jX);Pzo=r(MTt,"Data2VecTextForMultipleChoice"),MTt.forEach(t),Bzo=r(oPe," (Data2VecText model)"),oPe.forEach(t),Izo=i(ee),Qv=n(ee,"LI",{});var rPe=s(Qv);q_e=n(rPe,"STRONG",{});var ETt=s(q_e);Nzo=r(ETt,"deberta-v2"),ETt.forEach(t),qzo=r(rPe," \u2014 "),DX=n(rPe,"A",{href:!0});var CTt=s(DX);jzo=r(CTt,"DebertaV2ForMultipleChoice"),CTt.forEach(t),Dzo=r(rPe," (DeBERTa-v2 model)"),rPe.forEach(t),Gzo=i(ee),Wv=n(ee,"LI",{});var tPe=s(Wv);j_e=n(tPe,"STRONG",{});var wTt=s(j_e);Ozo=r(wTt,"distilbert"),wTt.forEach(t),Vzo=r(tPe," \u2014 "),GX=n(tPe,"A",{href:!0});var ATt=s(GX);Xzo=r(ATt,"DistilBertForMultipleChoice"),ATt.forEach(t),zzo=r(tPe," (DistilBERT model)"),tPe.forEach(t),Qzo=i(ee),Hv=n(ee,"LI",{});var aPe=s(Hv);D_e=n(aPe,"STRONG",{});var LTt=s(D_e);Wzo=r(LTt,"electra"),LTt.forEach(t),Hzo=r(aPe," \u2014 "),OX=n(aPe,"A",{href:!0});var yTt=s(OX);Uzo=r(yTt,"ElectraForMultipleChoice"),yTt.forEach(t),Jzo=r(aPe," (ELECTRA model)"),aPe.forEach(t),Yzo=i(ee),Uv=n(ee,"LI",{});var nPe=s(Uv);G_e=n(nPe,"STRONG",{});var xTt=s(G_e);Kzo=r(xTt,"flaubert"),xTt.forEach(t),Zzo=r(nPe," \u2014 "),VX=n(nPe,"A",{href:!0});var $Tt=s(VX);eQo=r($Tt,"FlaubertForMultipleChoice"),$Tt.forEach(t),oQo=r(nPe," (FlauBERT model)"),nPe.forEach(t),rQo=i(ee),Jv=n(ee,"LI",{});var sPe=s(Jv);O_e=n(sPe,"STRONG",{});var kTt=s(O_e);tQo=r(kTt,"fnet"),kTt.forEach(t),aQo=r(sPe," \u2014 "),XX=n(sPe,"A",{href:!0});var STt=s(XX);nQo=r(STt,"FNetForMultipleChoice"),STt.forEach(t),sQo=r(sPe," (FNet model)"),sPe.forEach(t),lQo=i(ee),Yv=n(ee,"LI",{});var lPe=s(Yv);V_e=n(lPe,"STRONG",{});var RTt=s(V_e);iQo=r(RTt,"funnel"),RTt.forEach(t),dQo=r(lPe," \u2014 "),zX=n(lPe,"A",{href:!0});var PTt=s(zX);cQo=r(PTt,"FunnelForMultipleChoice"),PTt.forEach(t),fQo=r(lPe," (Funnel Transformer model)"),lPe.forEach(t),mQo=i(ee),Kv=n(ee,"LI",{});var iPe=s(Kv);X_e=n(iPe,"STRONG",{});var BTt=s(X_e);gQo=r(BTt,"ibert"),BTt.forEach(t),hQo=r(iPe," \u2014 "),QX=n(iPe,"A",{href:!0});var ITt=s(QX);pQo=r(ITt,"IBertForMultipleChoice"),ITt.forEach(t),_Qo=r(iPe," (I-BERT model)"),iPe.forEach(t),uQo=i(ee),Zv=n(ee,"LI",{});var dPe=s(Zv);z_e=n(dPe,"STRONG",{});var NTt=s(z_e);bQo=r(NTt,"longformer"),NTt.forEach(t),vQo=r(dPe," \u2014 "),WX=n(dPe,"A",{href:!0});var qTt=s(WX);FQo=r(qTt,"LongformerForMultipleChoice"),qTt.forEach(t),TQo=r(dPe," (Longformer model)"),dPe.forEach(t),MQo=i(ee),e3=n(ee,"LI",{});var cPe=s(e3);Q_e=n(cPe,"STRONG",{});var jTt=s(Q_e);EQo=r(jTt,"megatron-bert"),jTt.forEach(t),CQo=r(cPe," \u2014 "),HX=n(cPe,"A",{href:!0});var DTt=s(HX);wQo=r(DTt,"MegatronBertForMultipleChoice"),DTt.forEach(t),AQo=r(cPe," (Megatron-BERT model)"),cPe.forEach(t),LQo=i(ee),o3=n(ee,"LI",{});var fPe=s(o3);W_e=n(fPe,"STRONG",{});var GTt=s(W_e);yQo=r(GTt,"mobilebert"),GTt.forEach(t),xQo=r(fPe," \u2014 "),UX=n(fPe,"A",{href:!0});var OTt=s(UX);$Qo=r(OTt,"MobileBertForMultipleChoice"),OTt.forEach(t),kQo=r(fPe," (MobileBERT model)"),fPe.forEach(t),SQo=i(ee),r3=n(ee,"LI",{});var mPe=s(r3);H_e=n(mPe,"STRONG",{});var VTt=s(H_e);RQo=r(VTt,"mpnet"),VTt.forEach(t),PQo=r(mPe," \u2014 "),JX=n(mPe,"A",{href:!0});var XTt=s(JX);BQo=r(XTt,"MPNetForMultipleChoice"),XTt.forEach(t),IQo=r(mPe," (MPNet model)"),mPe.forEach(t),NQo=i(ee),t3=n(ee,"LI",{});var gPe=s(t3);U_e=n(gPe,"STRONG",{});var zTt=s(U_e);qQo=r(zTt,"nezha"),zTt.forEach(t),jQo=r(gPe," \u2014 "),YX=n(gPe,"A",{href:!0});var QTt=s(YX);DQo=r(QTt,"NezhaForMultipleChoice"),QTt.forEach(t),GQo=r(gPe," (Nezha model)"),gPe.forEach(t),OQo=i(ee),a3=n(ee,"LI",{});var hPe=s(a3);J_e=n(hPe,"STRONG",{});var WTt=s(J_e);VQo=r(WTt,"nystromformer"),WTt.forEach(t),XQo=r(hPe," \u2014 "),KX=n(hPe,"A",{href:!0});var HTt=s(KX);zQo=r(HTt,"NystromformerForMultipleChoice"),HTt.forEach(t),QQo=r(hPe," (Nystr\xF6mformer model)"),hPe.forEach(t),WQo=i(ee),n3=n(ee,"LI",{});var pPe=s(n3);Y_e=n(pPe,"STRONG",{});var UTt=s(Y_e);HQo=r(UTt,"qdqbert"),UTt.forEach(t),UQo=r(pPe," \u2014 "),ZX=n(pPe,"A",{href:!0});var JTt=s(ZX);JQo=r(JTt,"QDQBertForMultipleChoice"),JTt.forEach(t),YQo=r(pPe," (QDQBert model)"),pPe.forEach(t),KQo=i(ee),s3=n(ee,"LI",{});var _Pe=s(s3);K_e=n(_Pe,"STRONG",{});var YTt=s(K_e);ZQo=r(YTt,"rembert"),YTt.forEach(t),eWo=r(_Pe," \u2014 "),ez=n(_Pe,"A",{href:!0});var KTt=s(ez);oWo=r(KTt,"RemBertForMultipleChoice"),KTt.forEach(t),rWo=r(_Pe," (RemBERT model)"),_Pe.forEach(t),tWo=i(ee),l3=n(ee,"LI",{});var uPe=s(l3);Z_e=n(uPe,"STRONG",{});var ZTt=s(Z_e);aWo=r(ZTt,"roberta"),ZTt.forEach(t),nWo=r(uPe," \u2014 "),oz=n(uPe,"A",{href:!0});var e7t=s(oz);sWo=r(e7t,"RobertaForMultipleChoice"),e7t.forEach(t),lWo=r(uPe," (RoBERTa model)"),uPe.forEach(t),iWo=i(ee),i3=n(ee,"LI",{});var bPe=s(i3);eue=n(bPe,"STRONG",{});var o7t=s(eue);dWo=r(o7t,"roformer"),o7t.forEach(t),cWo=r(bPe," \u2014 "),rz=n(bPe,"A",{href:!0});var r7t=s(rz);fWo=r(r7t,"RoFormerForMultipleChoice"),r7t.forEach(t),mWo=r(bPe," (RoFormer model)"),bPe.forEach(t),gWo=i(ee),d3=n(ee,"LI",{});var vPe=s(d3);oue=n(vPe,"STRONG",{});var t7t=s(oue);hWo=r(t7t,"squeezebert"),t7t.forEach(t),pWo=r(vPe," \u2014 "),tz=n(vPe,"A",{href:!0});var a7t=s(tz);_Wo=r(a7t,"SqueezeBertForMultipleChoice"),a7t.forEach(t),uWo=r(vPe," (SqueezeBERT model)"),vPe.forEach(t),bWo=i(ee),c3=n(ee,"LI",{});var FPe=s(c3);rue=n(FPe,"STRONG",{});var n7t=s(rue);vWo=r(n7t,"xlm"),n7t.forEach(t),FWo=r(FPe," \u2014 "),az=n(FPe,"A",{href:!0});var s7t=s(az);TWo=r(s7t,"XLMForMultipleChoice"),s7t.forEach(t),MWo=r(FPe," (XLM model)"),FPe.forEach(t),EWo=i(ee),f3=n(ee,"LI",{});var TPe=s(f3);tue=n(TPe,"STRONG",{});var l7t=s(tue);CWo=r(l7t,"xlm-roberta"),l7t.forEach(t),wWo=r(TPe," \u2014 "),nz=n(TPe,"A",{href:!0});var i7t=s(nz);AWo=r(i7t,"XLMRobertaForMultipleChoice"),i7t.forEach(t),LWo=r(TPe," (XLM-RoBERTa model)"),TPe.forEach(t),yWo=i(ee),m3=n(ee,"LI",{});var MPe=s(m3);aue=n(MPe,"STRONG",{});var d7t=s(aue);xWo=r(d7t,"xlm-roberta-xl"),d7t.forEach(t),$Wo=r(MPe," \u2014 "),sz=n(MPe,"A",{href:!0});var c7t=s(sz);kWo=r(c7t,"XLMRobertaXLForMultipleChoice"),c7t.forEach(t),SWo=r(MPe," (XLM-RoBERTa-XL model)"),MPe.forEach(t),RWo=i(ee),g3=n(ee,"LI",{});var EPe=s(g3);nue=n(EPe,"STRONG",{});var f7t=s(nue);PWo=r(f7t,"xlnet"),f7t.forEach(t),BWo=r(EPe," \u2014 "),lz=n(EPe,"A",{href:!0});var m7t=s(lz);IWo=r(m7t,"XLNetForMultipleChoice"),m7t.forEach(t),NWo=r(EPe," (XLNet model)"),EPe.forEach(t),qWo=i(ee),h3=n(ee,"LI",{});var CPe=s(h3);sue=n(CPe,"STRONG",{});var g7t=s(sue);jWo=r(g7t,"yoso"),g7t.forEach(t),DWo=r(CPe," \u2014 "),iz=n(CPe,"A",{href:!0});var h7t=s(iz);GWo=r(h7t,"YosoForMultipleChoice"),h7t.forEach(t),OWo=r(CPe," (YOSO model)"),CPe.forEach(t),ee.forEach(t),VWo=i(fa),p3=n(fa,"P",{});var wPe=s(p3);XWo=r(wPe,"The model is set in evaluation mode by default using "),lue=n(wPe,"CODE",{});var p7t=s(lue);zWo=r(p7t,"model.eval()"),p7t.forEach(t),QWo=r(wPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),iue=n(wPe,"CODE",{});var _7t=s(iue);WWo=r(_7t,"model.train()"),_7t.forEach(t),wPe.forEach(t),HWo=i(fa),T(_3.$$.fragment,fa),fa.forEach(t),sl.forEach(t),GVe=i(f),sd=n(f,"H2",{class:!0});var Wze=s(sd);u3=n(Wze,"A",{id:!0,class:!0,href:!0});var u7t=s(u3);due=n(u7t,"SPAN",{});var b7t=s(due);T(ry.$$.fragment,b7t),b7t.forEach(t),u7t.forEach(t),UWo=i(Wze),cue=n(Wze,"SPAN",{});var v7t=s(cue);JWo=r(v7t,"AutoModelForNextSentencePrediction"),v7t.forEach(t),Wze.forEach(t),OVe=i(f),Io=n(f,"DIV",{class:!0});var ll=s(Io);T(ty.$$.fragment,ll),YWo=i(ll),ld=n(ll,"P",{});var wre=s(ld);KWo=r(wre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),dz=n(wre,"A",{href:!0});var F7t=s(dz);ZWo=r(F7t,"from_pretrained()"),F7t.forEach(t),eHo=r(wre," class method or the "),cz=n(wre,"A",{href:!0});var T7t=s(cz);oHo=r(T7t,"from_config()"),T7t.forEach(t),rHo=r(wre,` class
method.`),wre.forEach(t),tHo=i(ll),ay=n(ll,"P",{});var Hze=s(ay);aHo=r(Hze,"This class cannot be instantiated directly using "),fue=n(Hze,"CODE",{});var M7t=s(fue);nHo=r(M7t,"__init__()"),M7t.forEach(t),sHo=r(Hze," (throws an error)."),Hze.forEach(t),lHo=i(ll),gt=n(ll,"DIV",{class:!0});var mA=s(gt);T(ny.$$.fragment,mA),iHo=i(mA),mue=n(mA,"P",{});var E7t=s(mue);dHo=r(E7t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),E7t.forEach(t),cHo=i(mA),id=n(mA,"P",{});var Are=s(id);fHo=r(Are,`Note:
Loading a model from its configuration file does `),gue=n(Are,"STRONG",{});var C7t=s(gue);mHo=r(C7t,"not"),C7t.forEach(t),gHo=r(Are,` load the model weights. It only affects the
model\u2019s configuration. Use `),fz=n(Are,"A",{href:!0});var w7t=s(fz);hHo=r(w7t,"from_pretrained()"),w7t.forEach(t),pHo=r(Are," to load the model weights."),Are.forEach(t),_Ho=i(mA),T(b3.$$.fragment,mA),mA.forEach(t),uHo=i(ll),to=n(ll,"DIV",{class:!0});var ma=s(to);T(sy.$$.fragment,ma),bHo=i(ma),hue=n(ma,"P",{});var A7t=s(hue);vHo=r(A7t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),A7t.forEach(t),FHo=i(ma),Ga=n(ma,"P",{});var gA=s(Ga);THo=r(gA,"The model class to instantiate is selected based on the "),pue=n(gA,"CODE",{});var L7t=s(pue);MHo=r(L7t,"model_type"),L7t.forEach(t),EHo=r(gA,` property of the config object (either
passed as an argument or loaded from `),_ue=n(gA,"CODE",{});var y7t=s(_ue);CHo=r(y7t,"pretrained_model_name_or_path"),y7t.forEach(t),wHo=r(gA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uue=n(gA,"CODE",{});var x7t=s(uue);AHo=r(x7t,"pretrained_model_name_or_path"),x7t.forEach(t),LHo=r(gA,":"),gA.forEach(t),yHo=i(ma),No=n(ma,"UL",{});var ga=s(No);v3=n(ga,"LI",{});var APe=s(v3);bue=n(APe,"STRONG",{});var $7t=s(bue);xHo=r($7t,"bert"),$7t.forEach(t),$Ho=r(APe," \u2014 "),mz=n(APe,"A",{href:!0});var k7t=s(mz);kHo=r(k7t,"BertForNextSentencePrediction"),k7t.forEach(t),SHo=r(APe," (BERT model)"),APe.forEach(t),RHo=i(ga),F3=n(ga,"LI",{});var LPe=s(F3);vue=n(LPe,"STRONG",{});var S7t=s(vue);PHo=r(S7t,"fnet"),S7t.forEach(t),BHo=r(LPe," \u2014 "),gz=n(LPe,"A",{href:!0});var R7t=s(gz);IHo=r(R7t,"FNetForNextSentencePrediction"),R7t.forEach(t),NHo=r(LPe," (FNet model)"),LPe.forEach(t),qHo=i(ga),T3=n(ga,"LI",{});var yPe=s(T3);Fue=n(yPe,"STRONG",{});var P7t=s(Fue);jHo=r(P7t,"megatron-bert"),P7t.forEach(t),DHo=r(yPe," \u2014 "),hz=n(yPe,"A",{href:!0});var B7t=s(hz);GHo=r(B7t,"MegatronBertForNextSentencePrediction"),B7t.forEach(t),OHo=r(yPe," (Megatron-BERT model)"),yPe.forEach(t),VHo=i(ga),M3=n(ga,"LI",{});var xPe=s(M3);Tue=n(xPe,"STRONG",{});var I7t=s(Tue);XHo=r(I7t,"mobilebert"),I7t.forEach(t),zHo=r(xPe," \u2014 "),pz=n(xPe,"A",{href:!0});var N7t=s(pz);QHo=r(N7t,"MobileBertForNextSentencePrediction"),N7t.forEach(t),WHo=r(xPe," (MobileBERT model)"),xPe.forEach(t),HHo=i(ga),E3=n(ga,"LI",{});var $Pe=s(E3);Mue=n($Pe,"STRONG",{});var q7t=s(Mue);UHo=r(q7t,"nezha"),q7t.forEach(t),JHo=r($Pe," \u2014 "),_z=n($Pe,"A",{href:!0});var j7t=s(_z);YHo=r(j7t,"NezhaForNextSentencePrediction"),j7t.forEach(t),KHo=r($Pe," (Nezha model)"),$Pe.forEach(t),ZHo=i(ga),C3=n(ga,"LI",{});var kPe=s(C3);Eue=n(kPe,"STRONG",{});var D7t=s(Eue);eUo=r(D7t,"qdqbert"),D7t.forEach(t),oUo=r(kPe," \u2014 "),uz=n(kPe,"A",{href:!0});var G7t=s(uz);rUo=r(G7t,"QDQBertForNextSentencePrediction"),G7t.forEach(t),tUo=r(kPe," (QDQBert model)"),kPe.forEach(t),ga.forEach(t),aUo=i(ma),w3=n(ma,"P",{});var SPe=s(w3);nUo=r(SPe,"The model is set in evaluation mode by default using "),Cue=n(SPe,"CODE",{});var O7t=s(Cue);sUo=r(O7t,"model.eval()"),O7t.forEach(t),lUo=r(SPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wue=n(SPe,"CODE",{});var V7t=s(wue);iUo=r(V7t,"model.train()"),V7t.forEach(t),SPe.forEach(t),dUo=i(ma),T(A3.$$.fragment,ma),ma.forEach(t),ll.forEach(t),VVe=i(f),dd=n(f,"H2",{class:!0});var Uze=s(dd);L3=n(Uze,"A",{id:!0,class:!0,href:!0});var X7t=s(L3);Aue=n(X7t,"SPAN",{});var z7t=s(Aue);T(ly.$$.fragment,z7t),z7t.forEach(t),X7t.forEach(t),cUo=i(Uze),Lue=n(Uze,"SPAN",{});var Q7t=s(Lue);fUo=r(Q7t,"AutoModelForTokenClassification"),Q7t.forEach(t),Uze.forEach(t),XVe=i(f),qo=n(f,"DIV",{class:!0});var il=s(qo);T(iy.$$.fragment,il),mUo=i(il),cd=n(il,"P",{});var Lre=s(cd);gUo=r(Lre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),bz=n(Lre,"A",{href:!0});var W7t=s(bz);hUo=r(W7t,"from_pretrained()"),W7t.forEach(t),pUo=r(Lre," class method or the "),vz=n(Lre,"A",{href:!0});var H7t=s(vz);_Uo=r(H7t,"from_config()"),H7t.forEach(t),uUo=r(Lre,` class
method.`),Lre.forEach(t),bUo=i(il),dy=n(il,"P",{});var Jze=s(dy);vUo=r(Jze,"This class cannot be instantiated directly using "),yue=n(Jze,"CODE",{});var U7t=s(yue);FUo=r(U7t,"__init__()"),U7t.forEach(t),TUo=r(Jze," (throws an error)."),Jze.forEach(t),MUo=i(il),ht=n(il,"DIV",{class:!0});var hA=s(ht);T(cy.$$.fragment,hA),EUo=i(hA),xue=n(hA,"P",{});var J7t=s(xue);CUo=r(J7t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),J7t.forEach(t),wUo=i(hA),fd=n(hA,"P",{});var yre=s(fd);AUo=r(yre,`Note:
Loading a model from its configuration file does `),$ue=n(yre,"STRONG",{});var Y7t=s($ue);LUo=r(Y7t,"not"),Y7t.forEach(t),yUo=r(yre,` load the model weights. It only affects the
model\u2019s configuration. Use `),Fz=n(yre,"A",{href:!0});var K7t=s(Fz);xUo=r(K7t,"from_pretrained()"),K7t.forEach(t),$Uo=r(yre," to load the model weights."),yre.forEach(t),kUo=i(hA),T(y3.$$.fragment,hA),hA.forEach(t),SUo=i(il),ao=n(il,"DIV",{class:!0});var ha=s(ao);T(fy.$$.fragment,ha),RUo=i(ha),kue=n(ha,"P",{});var Z7t=s(kue);PUo=r(Z7t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Z7t.forEach(t),BUo=i(ha),Oa=n(ha,"P",{});var pA=s(Oa);IUo=r(pA,"The model class to instantiate is selected based on the "),Sue=n(pA,"CODE",{});var e9t=s(Sue);NUo=r(e9t,"model_type"),e9t.forEach(t),qUo=r(pA,` property of the config object (either
passed as an argument or loaded from `),Rue=n(pA,"CODE",{});var o9t=s(Rue);jUo=r(o9t,"pretrained_model_name_or_path"),o9t.forEach(t),DUo=r(pA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pue=n(pA,"CODE",{});var r9t=s(Pue);GUo=r(r9t,"pretrained_model_name_or_path"),r9t.forEach(t),OUo=r(pA,":"),pA.forEach(t),VUo=i(ha),U=n(ha,"UL",{});var J=s(U);x3=n(J,"LI",{});var RPe=s(x3);Bue=n(RPe,"STRONG",{});var t9t=s(Bue);XUo=r(t9t,"albert"),t9t.forEach(t),zUo=r(RPe," \u2014 "),Tz=n(RPe,"A",{href:!0});var a9t=s(Tz);QUo=r(a9t,"AlbertForTokenClassification"),a9t.forEach(t),WUo=r(RPe," (ALBERT model)"),RPe.forEach(t),HUo=i(J),$3=n(J,"LI",{});var PPe=s($3);Iue=n(PPe,"STRONG",{});var n9t=s(Iue);UUo=r(n9t,"bert"),n9t.forEach(t),JUo=r(PPe," \u2014 "),Mz=n(PPe,"A",{href:!0});var s9t=s(Mz);YUo=r(s9t,"BertForTokenClassification"),s9t.forEach(t),KUo=r(PPe," (BERT model)"),PPe.forEach(t),ZUo=i(J),k3=n(J,"LI",{});var BPe=s(k3);Nue=n(BPe,"STRONG",{});var l9t=s(Nue);eJo=r(l9t,"big_bird"),l9t.forEach(t),oJo=r(BPe," \u2014 "),Ez=n(BPe,"A",{href:!0});var i9t=s(Ez);rJo=r(i9t,"BigBirdForTokenClassification"),i9t.forEach(t),tJo=r(BPe," (BigBird model)"),BPe.forEach(t),aJo=i(J),S3=n(J,"LI",{});var IPe=s(S3);que=n(IPe,"STRONG",{});var d9t=s(que);nJo=r(d9t,"bloom"),d9t.forEach(t),sJo=r(IPe," \u2014 "),Cz=n(IPe,"A",{href:!0});var c9t=s(Cz);lJo=r(c9t,"BloomForTokenClassification"),c9t.forEach(t),iJo=r(IPe," (BLOOM model)"),IPe.forEach(t),dJo=i(J),R3=n(J,"LI",{});var NPe=s(R3);jue=n(NPe,"STRONG",{});var f9t=s(jue);cJo=r(f9t,"camembert"),f9t.forEach(t),fJo=r(NPe," \u2014 "),wz=n(NPe,"A",{href:!0});var m9t=s(wz);mJo=r(m9t,"CamembertForTokenClassification"),m9t.forEach(t),gJo=r(NPe," (CamemBERT model)"),NPe.forEach(t),hJo=i(J),P3=n(J,"LI",{});var qPe=s(P3);Due=n(qPe,"STRONG",{});var g9t=s(Due);pJo=r(g9t,"canine"),g9t.forEach(t),_Jo=r(qPe," \u2014 "),Az=n(qPe,"A",{href:!0});var h9t=s(Az);uJo=r(h9t,"CanineForTokenClassification"),h9t.forEach(t),bJo=r(qPe," (CANINE model)"),qPe.forEach(t),vJo=i(J),B3=n(J,"LI",{});var jPe=s(B3);Gue=n(jPe,"STRONG",{});var p9t=s(Gue);FJo=r(p9t,"convbert"),p9t.forEach(t),TJo=r(jPe," \u2014 "),Lz=n(jPe,"A",{href:!0});var _9t=s(Lz);MJo=r(_9t,"ConvBertForTokenClassification"),_9t.forEach(t),EJo=r(jPe," (ConvBERT model)"),jPe.forEach(t),CJo=i(J),I3=n(J,"LI",{});var DPe=s(I3);Oue=n(DPe,"STRONG",{});var u9t=s(Oue);wJo=r(u9t,"data2vec-text"),u9t.forEach(t),AJo=r(DPe," \u2014 "),yz=n(DPe,"A",{href:!0});var b9t=s(yz);LJo=r(b9t,"Data2VecTextForTokenClassification"),b9t.forEach(t),yJo=r(DPe," (Data2VecText model)"),DPe.forEach(t),xJo=i(J),N3=n(J,"LI",{});var GPe=s(N3);Vue=n(GPe,"STRONG",{});var v9t=s(Vue);$Jo=r(v9t,"deberta"),v9t.forEach(t),kJo=r(GPe," \u2014 "),xz=n(GPe,"A",{href:!0});var F9t=s(xz);SJo=r(F9t,"DebertaForTokenClassification"),F9t.forEach(t),RJo=r(GPe," (DeBERTa model)"),GPe.forEach(t),PJo=i(J),q3=n(J,"LI",{});var OPe=s(q3);Xue=n(OPe,"STRONG",{});var T9t=s(Xue);BJo=r(T9t,"deberta-v2"),T9t.forEach(t),IJo=r(OPe," \u2014 "),$z=n(OPe,"A",{href:!0});var M9t=s($z);NJo=r(M9t,"DebertaV2ForTokenClassification"),M9t.forEach(t),qJo=r(OPe," (DeBERTa-v2 model)"),OPe.forEach(t),jJo=i(J),j3=n(J,"LI",{});var VPe=s(j3);zue=n(VPe,"STRONG",{});var E9t=s(zue);DJo=r(E9t,"distilbert"),E9t.forEach(t),GJo=r(VPe," \u2014 "),kz=n(VPe,"A",{href:!0});var C9t=s(kz);OJo=r(C9t,"DistilBertForTokenClassification"),C9t.forEach(t),VJo=r(VPe," (DistilBERT model)"),VPe.forEach(t),XJo=i(J),D3=n(J,"LI",{});var XPe=s(D3);Que=n(XPe,"STRONG",{});var w9t=s(Que);zJo=r(w9t,"electra"),w9t.forEach(t),QJo=r(XPe," \u2014 "),Sz=n(XPe,"A",{href:!0});var A9t=s(Sz);WJo=r(A9t,"ElectraForTokenClassification"),A9t.forEach(t),HJo=r(XPe," (ELECTRA model)"),XPe.forEach(t),UJo=i(J),G3=n(J,"LI",{});var zPe=s(G3);Wue=n(zPe,"STRONG",{});var L9t=s(Wue);JJo=r(L9t,"flaubert"),L9t.forEach(t),YJo=r(zPe," \u2014 "),Rz=n(zPe,"A",{href:!0});var y9t=s(Rz);KJo=r(y9t,"FlaubertForTokenClassification"),y9t.forEach(t),ZJo=r(zPe," (FlauBERT model)"),zPe.forEach(t),eYo=i(J),O3=n(J,"LI",{});var QPe=s(O3);Hue=n(QPe,"STRONG",{});var x9t=s(Hue);oYo=r(x9t,"fnet"),x9t.forEach(t),rYo=r(QPe," \u2014 "),Pz=n(QPe,"A",{href:!0});var $9t=s(Pz);tYo=r($9t,"FNetForTokenClassification"),$9t.forEach(t),aYo=r(QPe," (FNet model)"),QPe.forEach(t),nYo=i(J),V3=n(J,"LI",{});var WPe=s(V3);Uue=n(WPe,"STRONG",{});var k9t=s(Uue);sYo=r(k9t,"funnel"),k9t.forEach(t),lYo=r(WPe," \u2014 "),Bz=n(WPe,"A",{href:!0});var S9t=s(Bz);iYo=r(S9t,"FunnelForTokenClassification"),S9t.forEach(t),dYo=r(WPe," (Funnel Transformer model)"),WPe.forEach(t),cYo=i(J),X3=n(J,"LI",{});var HPe=s(X3);Jue=n(HPe,"STRONG",{});var R9t=s(Jue);fYo=r(R9t,"gpt2"),R9t.forEach(t),mYo=r(HPe," \u2014 "),Iz=n(HPe,"A",{href:!0});var P9t=s(Iz);gYo=r(P9t,"GPT2ForTokenClassification"),P9t.forEach(t),hYo=r(HPe," (OpenAI GPT-2 model)"),HPe.forEach(t),pYo=i(J),z3=n(J,"LI",{});var UPe=s(z3);Yue=n(UPe,"STRONG",{});var B9t=s(Yue);_Yo=r(B9t,"ibert"),B9t.forEach(t),uYo=r(UPe," \u2014 "),Nz=n(UPe,"A",{href:!0});var I9t=s(Nz);bYo=r(I9t,"IBertForTokenClassification"),I9t.forEach(t),vYo=r(UPe," (I-BERT model)"),UPe.forEach(t),FYo=i(J),Q3=n(J,"LI",{});var JPe=s(Q3);Kue=n(JPe,"STRONG",{});var N9t=s(Kue);TYo=r(N9t,"layoutlm"),N9t.forEach(t),MYo=r(JPe," \u2014 "),qz=n(JPe,"A",{href:!0});var q9t=s(qz);EYo=r(q9t,"LayoutLMForTokenClassification"),q9t.forEach(t),CYo=r(JPe," (LayoutLM model)"),JPe.forEach(t),wYo=i(J),W3=n(J,"LI",{});var YPe=s(W3);Zue=n(YPe,"STRONG",{});var j9t=s(Zue);AYo=r(j9t,"layoutlmv2"),j9t.forEach(t),LYo=r(YPe," \u2014 "),jz=n(YPe,"A",{href:!0});var D9t=s(jz);yYo=r(D9t,"LayoutLMv2ForTokenClassification"),D9t.forEach(t),xYo=r(YPe," (LayoutLMv2 model)"),YPe.forEach(t),$Yo=i(J),H3=n(J,"LI",{});var KPe=s(H3);e1e=n(KPe,"STRONG",{});var G9t=s(e1e);kYo=r(G9t,"layoutlmv3"),G9t.forEach(t),SYo=r(KPe," \u2014 "),Dz=n(KPe,"A",{href:!0});var O9t=s(Dz);RYo=r(O9t,"LayoutLMv3ForTokenClassification"),O9t.forEach(t),PYo=r(KPe," (LayoutLMv3 model)"),KPe.forEach(t),BYo=i(J),U3=n(J,"LI",{});var ZPe=s(U3);o1e=n(ZPe,"STRONG",{});var V9t=s(o1e);IYo=r(V9t,"longformer"),V9t.forEach(t),NYo=r(ZPe," \u2014 "),Gz=n(ZPe,"A",{href:!0});var X9t=s(Gz);qYo=r(X9t,"LongformerForTokenClassification"),X9t.forEach(t),jYo=r(ZPe," (Longformer model)"),ZPe.forEach(t),DYo=i(J),J3=n(J,"LI",{});var eBe=s(J3);r1e=n(eBe,"STRONG",{});var z9t=s(r1e);GYo=r(z9t,"megatron-bert"),z9t.forEach(t),OYo=r(eBe," \u2014 "),Oz=n(eBe,"A",{href:!0});var Q9t=s(Oz);VYo=r(Q9t,"MegatronBertForTokenClassification"),Q9t.forEach(t),XYo=r(eBe," (Megatron-BERT model)"),eBe.forEach(t),zYo=i(J),Y3=n(J,"LI",{});var oBe=s(Y3);t1e=n(oBe,"STRONG",{});var W9t=s(t1e);QYo=r(W9t,"mobilebert"),W9t.forEach(t),WYo=r(oBe," \u2014 "),Vz=n(oBe,"A",{href:!0});var H9t=s(Vz);HYo=r(H9t,"MobileBertForTokenClassification"),H9t.forEach(t),UYo=r(oBe," (MobileBERT model)"),oBe.forEach(t),JYo=i(J),K3=n(J,"LI",{});var rBe=s(K3);a1e=n(rBe,"STRONG",{});var U9t=s(a1e);YYo=r(U9t,"mpnet"),U9t.forEach(t),KYo=r(rBe," \u2014 "),Xz=n(rBe,"A",{href:!0});var J9t=s(Xz);ZYo=r(J9t,"MPNetForTokenClassification"),J9t.forEach(t),eKo=r(rBe," (MPNet model)"),rBe.forEach(t),oKo=i(J),Z3=n(J,"LI",{});var tBe=s(Z3);n1e=n(tBe,"STRONG",{});var Y9t=s(n1e);rKo=r(Y9t,"nezha"),Y9t.forEach(t),tKo=r(tBe," \u2014 "),zz=n(tBe,"A",{href:!0});var K9t=s(zz);aKo=r(K9t,"NezhaForTokenClassification"),K9t.forEach(t),nKo=r(tBe," (Nezha model)"),tBe.forEach(t),sKo=i(J),e5=n(J,"LI",{});var aBe=s(e5);s1e=n(aBe,"STRONG",{});var Z9t=s(s1e);lKo=r(Z9t,"nystromformer"),Z9t.forEach(t),iKo=r(aBe," \u2014 "),Qz=n(aBe,"A",{href:!0});var eMt=s(Qz);dKo=r(eMt,"NystromformerForTokenClassification"),eMt.forEach(t),cKo=r(aBe," (Nystr\xF6mformer model)"),aBe.forEach(t),fKo=i(J),o5=n(J,"LI",{});var nBe=s(o5);l1e=n(nBe,"STRONG",{});var oMt=s(l1e);mKo=r(oMt,"qdqbert"),oMt.forEach(t),gKo=r(nBe," \u2014 "),Wz=n(nBe,"A",{href:!0});var rMt=s(Wz);hKo=r(rMt,"QDQBertForTokenClassification"),rMt.forEach(t),pKo=r(nBe," (QDQBert model)"),nBe.forEach(t),_Ko=i(J),r5=n(J,"LI",{});var sBe=s(r5);i1e=n(sBe,"STRONG",{});var tMt=s(i1e);uKo=r(tMt,"rembert"),tMt.forEach(t),bKo=r(sBe," \u2014 "),Hz=n(sBe,"A",{href:!0});var aMt=s(Hz);vKo=r(aMt,"RemBertForTokenClassification"),aMt.forEach(t),FKo=r(sBe," (RemBERT model)"),sBe.forEach(t),TKo=i(J),t5=n(J,"LI",{});var lBe=s(t5);d1e=n(lBe,"STRONG",{});var nMt=s(d1e);MKo=r(nMt,"roberta"),nMt.forEach(t),EKo=r(lBe," \u2014 "),Uz=n(lBe,"A",{href:!0});var sMt=s(Uz);CKo=r(sMt,"RobertaForTokenClassification"),sMt.forEach(t),wKo=r(lBe," (RoBERTa model)"),lBe.forEach(t),AKo=i(J),a5=n(J,"LI",{});var iBe=s(a5);c1e=n(iBe,"STRONG",{});var lMt=s(c1e);LKo=r(lMt,"roformer"),lMt.forEach(t),yKo=r(iBe," \u2014 "),Jz=n(iBe,"A",{href:!0});var iMt=s(Jz);xKo=r(iMt,"RoFormerForTokenClassification"),iMt.forEach(t),$Ko=r(iBe," (RoFormer model)"),iBe.forEach(t),kKo=i(J),n5=n(J,"LI",{});var dBe=s(n5);f1e=n(dBe,"STRONG",{});var dMt=s(f1e);SKo=r(dMt,"squeezebert"),dMt.forEach(t),RKo=r(dBe," \u2014 "),Yz=n(dBe,"A",{href:!0});var cMt=s(Yz);PKo=r(cMt,"SqueezeBertForTokenClassification"),cMt.forEach(t),BKo=r(dBe," (SqueezeBERT model)"),dBe.forEach(t),IKo=i(J),s5=n(J,"LI",{});var cBe=s(s5);m1e=n(cBe,"STRONG",{});var fMt=s(m1e);NKo=r(fMt,"xlm"),fMt.forEach(t),qKo=r(cBe," \u2014 "),Kz=n(cBe,"A",{href:!0});var mMt=s(Kz);jKo=r(mMt,"XLMForTokenClassification"),mMt.forEach(t),DKo=r(cBe," (XLM model)"),cBe.forEach(t),GKo=i(J),l5=n(J,"LI",{});var fBe=s(l5);g1e=n(fBe,"STRONG",{});var gMt=s(g1e);OKo=r(gMt,"xlm-roberta"),gMt.forEach(t),VKo=r(fBe," \u2014 "),Zz=n(fBe,"A",{href:!0});var hMt=s(Zz);XKo=r(hMt,"XLMRobertaForTokenClassification"),hMt.forEach(t),zKo=r(fBe," (XLM-RoBERTa model)"),fBe.forEach(t),QKo=i(J),i5=n(J,"LI",{});var mBe=s(i5);h1e=n(mBe,"STRONG",{});var pMt=s(h1e);WKo=r(pMt,"xlm-roberta-xl"),pMt.forEach(t),HKo=r(mBe," \u2014 "),eQ=n(mBe,"A",{href:!0});var _Mt=s(eQ);UKo=r(_Mt,"XLMRobertaXLForTokenClassification"),_Mt.forEach(t),JKo=r(mBe," (XLM-RoBERTa-XL model)"),mBe.forEach(t),YKo=i(J),d5=n(J,"LI",{});var gBe=s(d5);p1e=n(gBe,"STRONG",{});var uMt=s(p1e);KKo=r(uMt,"xlnet"),uMt.forEach(t),ZKo=r(gBe," \u2014 "),oQ=n(gBe,"A",{href:!0});var bMt=s(oQ);eZo=r(bMt,"XLNetForTokenClassification"),bMt.forEach(t),oZo=r(gBe," (XLNet model)"),gBe.forEach(t),rZo=i(J),c5=n(J,"LI",{});var hBe=s(c5);_1e=n(hBe,"STRONG",{});var vMt=s(_1e);tZo=r(vMt,"yoso"),vMt.forEach(t),aZo=r(hBe," \u2014 "),rQ=n(hBe,"A",{href:!0});var FMt=s(rQ);nZo=r(FMt,"YosoForTokenClassification"),FMt.forEach(t),sZo=r(hBe," (YOSO model)"),hBe.forEach(t),J.forEach(t),lZo=i(ha),f5=n(ha,"P",{});var pBe=s(f5);iZo=r(pBe,"The model is set in evaluation mode by default using "),u1e=n(pBe,"CODE",{});var TMt=s(u1e);dZo=r(TMt,"model.eval()"),TMt.forEach(t),cZo=r(pBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),b1e=n(pBe,"CODE",{});var MMt=s(b1e);fZo=r(MMt,"model.train()"),MMt.forEach(t),pBe.forEach(t),mZo=i(ha),T(m5.$$.fragment,ha),ha.forEach(t),il.forEach(t),zVe=i(f),md=n(f,"H2",{class:!0});var Yze=s(md);g5=n(Yze,"A",{id:!0,class:!0,href:!0});var EMt=s(g5);v1e=n(EMt,"SPAN",{});var CMt=s(v1e);T(my.$$.fragment,CMt),CMt.forEach(t),EMt.forEach(t),gZo=i(Yze),F1e=n(Yze,"SPAN",{});var wMt=s(F1e);hZo=r(wMt,"AutoModelForQuestionAnswering"),wMt.forEach(t),Yze.forEach(t),QVe=i(f),jo=n(f,"DIV",{class:!0});var dl=s(jo);T(gy.$$.fragment,dl),pZo=i(dl),gd=n(dl,"P",{});var xre=s(gd);_Zo=r(xre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),tQ=n(xre,"A",{href:!0});var AMt=s(tQ);uZo=r(AMt,"from_pretrained()"),AMt.forEach(t),bZo=r(xre," class method or the "),aQ=n(xre,"A",{href:!0});var LMt=s(aQ);vZo=r(LMt,"from_config()"),LMt.forEach(t),FZo=r(xre,` class
method.`),xre.forEach(t),TZo=i(dl),hy=n(dl,"P",{});var Kze=s(hy);MZo=r(Kze,"This class cannot be instantiated directly using "),T1e=n(Kze,"CODE",{});var yMt=s(T1e);EZo=r(yMt,"__init__()"),yMt.forEach(t),CZo=r(Kze," (throws an error)."),Kze.forEach(t),wZo=i(dl),pt=n(dl,"DIV",{class:!0});var _A=s(pt);T(py.$$.fragment,_A),AZo=i(_A),M1e=n(_A,"P",{});var xMt=s(M1e);LZo=r(xMt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),xMt.forEach(t),yZo=i(_A),hd=n(_A,"P",{});var $re=s(hd);xZo=r($re,`Note:
Loading a model from its configuration file does `),E1e=n($re,"STRONG",{});var $Mt=s(E1e);$Zo=r($Mt,"not"),$Mt.forEach(t),kZo=r($re,` load the model weights. It only affects the
model\u2019s configuration. Use `),nQ=n($re,"A",{href:!0});var kMt=s(nQ);SZo=r(kMt,"from_pretrained()"),kMt.forEach(t),RZo=r($re," to load the model weights."),$re.forEach(t),PZo=i(_A),T(h5.$$.fragment,_A),_A.forEach(t),BZo=i(dl),no=n(dl,"DIV",{class:!0});var pa=s(no);T(_y.$$.fragment,pa),IZo=i(pa),C1e=n(pa,"P",{});var SMt=s(C1e);NZo=r(SMt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),SMt.forEach(t),qZo=i(pa),Va=n(pa,"P",{});var uA=s(Va);jZo=r(uA,"The model class to instantiate is selected based on the "),w1e=n(uA,"CODE",{});var RMt=s(w1e);DZo=r(RMt,"model_type"),RMt.forEach(t),GZo=r(uA,` property of the config object (either
passed as an argument or loaded from `),A1e=n(uA,"CODE",{});var PMt=s(A1e);OZo=r(PMt,"pretrained_model_name_or_path"),PMt.forEach(t),VZo=r(uA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L1e=n(uA,"CODE",{});var BMt=s(L1e);XZo=r(BMt,"pretrained_model_name_or_path"),BMt.forEach(t),zZo=r(uA,":"),uA.forEach(t),QZo=i(pa),V=n(pa,"UL",{});var X=s(V);p5=n(X,"LI",{});var _Be=s(p5);y1e=n(_Be,"STRONG",{});var IMt=s(y1e);WZo=r(IMt,"albert"),IMt.forEach(t),HZo=r(_Be," \u2014 "),sQ=n(_Be,"A",{href:!0});var NMt=s(sQ);UZo=r(NMt,"AlbertForQuestionAnswering"),NMt.forEach(t),JZo=r(_Be," (ALBERT model)"),_Be.forEach(t),YZo=i(X),_5=n(X,"LI",{});var uBe=s(_5);x1e=n(uBe,"STRONG",{});var qMt=s(x1e);KZo=r(qMt,"bart"),qMt.forEach(t),ZZo=r(uBe," \u2014 "),lQ=n(uBe,"A",{href:!0});var jMt=s(lQ);eer=r(jMt,"BartForQuestionAnswering"),jMt.forEach(t),oer=r(uBe," (BART model)"),uBe.forEach(t),rer=i(X),u5=n(X,"LI",{});var bBe=s(u5);$1e=n(bBe,"STRONG",{});var DMt=s($1e);ter=r(DMt,"bert"),DMt.forEach(t),aer=r(bBe," \u2014 "),iQ=n(bBe,"A",{href:!0});var GMt=s(iQ);ner=r(GMt,"BertForQuestionAnswering"),GMt.forEach(t),ser=r(bBe," (BERT model)"),bBe.forEach(t),ler=i(X),b5=n(X,"LI",{});var vBe=s(b5);k1e=n(vBe,"STRONG",{});var OMt=s(k1e);ier=r(OMt,"big_bird"),OMt.forEach(t),der=r(vBe," \u2014 "),dQ=n(vBe,"A",{href:!0});var VMt=s(dQ);cer=r(VMt,"BigBirdForQuestionAnswering"),VMt.forEach(t),fer=r(vBe," (BigBird model)"),vBe.forEach(t),mer=i(X),v5=n(X,"LI",{});var FBe=s(v5);S1e=n(FBe,"STRONG",{});var XMt=s(S1e);ger=r(XMt,"bigbird_pegasus"),XMt.forEach(t),her=r(FBe," \u2014 "),cQ=n(FBe,"A",{href:!0});var zMt=s(cQ);per=r(zMt,"BigBirdPegasusForQuestionAnswering"),zMt.forEach(t),_er=r(FBe," (BigBird-Pegasus model)"),FBe.forEach(t),uer=i(X),F5=n(X,"LI",{});var TBe=s(F5);R1e=n(TBe,"STRONG",{});var QMt=s(R1e);ber=r(QMt,"camembert"),QMt.forEach(t),ver=r(TBe," \u2014 "),fQ=n(TBe,"A",{href:!0});var WMt=s(fQ);Fer=r(WMt,"CamembertForQuestionAnswering"),WMt.forEach(t),Ter=r(TBe," (CamemBERT model)"),TBe.forEach(t),Mer=i(X),T5=n(X,"LI",{});var MBe=s(T5);P1e=n(MBe,"STRONG",{});var HMt=s(P1e);Eer=r(HMt,"canine"),HMt.forEach(t),Cer=r(MBe," \u2014 "),mQ=n(MBe,"A",{href:!0});var UMt=s(mQ);wer=r(UMt,"CanineForQuestionAnswering"),UMt.forEach(t),Aer=r(MBe," (CANINE model)"),MBe.forEach(t),Ler=i(X),M5=n(X,"LI",{});var EBe=s(M5);B1e=n(EBe,"STRONG",{});var JMt=s(B1e);yer=r(JMt,"convbert"),JMt.forEach(t),xer=r(EBe," \u2014 "),gQ=n(EBe,"A",{href:!0});var YMt=s(gQ);$er=r(YMt,"ConvBertForQuestionAnswering"),YMt.forEach(t),ker=r(EBe," (ConvBERT model)"),EBe.forEach(t),Ser=i(X),E5=n(X,"LI",{});var CBe=s(E5);I1e=n(CBe,"STRONG",{});var KMt=s(I1e);Rer=r(KMt,"data2vec-text"),KMt.forEach(t),Per=r(CBe," \u2014 "),hQ=n(CBe,"A",{href:!0});var ZMt=s(hQ);Ber=r(ZMt,"Data2VecTextForQuestionAnswering"),ZMt.forEach(t),Ier=r(CBe," (Data2VecText model)"),CBe.forEach(t),Ner=i(X),C5=n(X,"LI",{});var wBe=s(C5);N1e=n(wBe,"STRONG",{});var e4t=s(N1e);qer=r(e4t,"deberta"),e4t.forEach(t),jer=r(wBe," \u2014 "),pQ=n(wBe,"A",{href:!0});var o4t=s(pQ);Der=r(o4t,"DebertaForQuestionAnswering"),o4t.forEach(t),Ger=r(wBe," (DeBERTa model)"),wBe.forEach(t),Oer=i(X),w5=n(X,"LI",{});var ABe=s(w5);q1e=n(ABe,"STRONG",{});var r4t=s(q1e);Ver=r(r4t,"deberta-v2"),r4t.forEach(t),Xer=r(ABe," \u2014 "),_Q=n(ABe,"A",{href:!0});var t4t=s(_Q);zer=r(t4t,"DebertaV2ForQuestionAnswering"),t4t.forEach(t),Qer=r(ABe," (DeBERTa-v2 model)"),ABe.forEach(t),Wer=i(X),A5=n(X,"LI",{});var LBe=s(A5);j1e=n(LBe,"STRONG",{});var a4t=s(j1e);Her=r(a4t,"distilbert"),a4t.forEach(t),Uer=r(LBe," \u2014 "),uQ=n(LBe,"A",{href:!0});var n4t=s(uQ);Jer=r(n4t,"DistilBertForQuestionAnswering"),n4t.forEach(t),Yer=r(LBe," (DistilBERT model)"),LBe.forEach(t),Ker=i(X),L5=n(X,"LI",{});var yBe=s(L5);D1e=n(yBe,"STRONG",{});var s4t=s(D1e);Zer=r(s4t,"electra"),s4t.forEach(t),eor=r(yBe," \u2014 "),bQ=n(yBe,"A",{href:!0});var l4t=s(bQ);oor=r(l4t,"ElectraForQuestionAnswering"),l4t.forEach(t),ror=r(yBe," (ELECTRA model)"),yBe.forEach(t),tor=i(X),y5=n(X,"LI",{});var xBe=s(y5);G1e=n(xBe,"STRONG",{});var i4t=s(G1e);aor=r(i4t,"flaubert"),i4t.forEach(t),nor=r(xBe," \u2014 "),vQ=n(xBe,"A",{href:!0});var d4t=s(vQ);sor=r(d4t,"FlaubertForQuestionAnsweringSimple"),d4t.forEach(t),lor=r(xBe," (FlauBERT model)"),xBe.forEach(t),ior=i(X),x5=n(X,"LI",{});var $Be=s(x5);O1e=n($Be,"STRONG",{});var c4t=s(O1e);dor=r(c4t,"fnet"),c4t.forEach(t),cor=r($Be," \u2014 "),FQ=n($Be,"A",{href:!0});var f4t=s(FQ);mor=r(f4t,"FNetForQuestionAnswering"),f4t.forEach(t),gor=r($Be," (FNet model)"),$Be.forEach(t),hor=i(X),$5=n(X,"LI",{});var kBe=s($5);V1e=n(kBe,"STRONG",{});var m4t=s(V1e);por=r(m4t,"funnel"),m4t.forEach(t),_or=r(kBe," \u2014 "),TQ=n(kBe,"A",{href:!0});var g4t=s(TQ);uor=r(g4t,"FunnelForQuestionAnswering"),g4t.forEach(t),bor=r(kBe," (Funnel Transformer model)"),kBe.forEach(t),vor=i(X),k5=n(X,"LI",{});var SBe=s(k5);X1e=n(SBe,"STRONG",{});var h4t=s(X1e);For=r(h4t,"gptj"),h4t.forEach(t),Tor=r(SBe," \u2014 "),MQ=n(SBe,"A",{href:!0});var p4t=s(MQ);Mor=r(p4t,"GPTJForQuestionAnswering"),p4t.forEach(t),Eor=r(SBe," (GPT-J model)"),SBe.forEach(t),Cor=i(X),S5=n(X,"LI",{});var RBe=s(S5);z1e=n(RBe,"STRONG",{});var _4t=s(z1e);wor=r(_4t,"ibert"),_4t.forEach(t),Aor=r(RBe," \u2014 "),EQ=n(RBe,"A",{href:!0});var u4t=s(EQ);Lor=r(u4t,"IBertForQuestionAnswering"),u4t.forEach(t),yor=r(RBe," (I-BERT model)"),RBe.forEach(t),xor=i(X),R5=n(X,"LI",{});var PBe=s(R5);Q1e=n(PBe,"STRONG",{});var b4t=s(Q1e);$or=r(b4t,"layoutlmv2"),b4t.forEach(t),kor=r(PBe," \u2014 "),CQ=n(PBe,"A",{href:!0});var v4t=s(CQ);Sor=r(v4t,"LayoutLMv2ForQuestionAnswering"),v4t.forEach(t),Ror=r(PBe," (LayoutLMv2 model)"),PBe.forEach(t),Por=i(X),P5=n(X,"LI",{});var BBe=s(P5);W1e=n(BBe,"STRONG",{});var F4t=s(W1e);Bor=r(F4t,"layoutlmv3"),F4t.forEach(t),Ior=r(BBe," \u2014 "),wQ=n(BBe,"A",{href:!0});var T4t=s(wQ);Nor=r(T4t,"LayoutLMv3ForQuestionAnswering"),T4t.forEach(t),qor=r(BBe," (LayoutLMv3 model)"),BBe.forEach(t),jor=i(X),B5=n(X,"LI",{});var IBe=s(B5);H1e=n(IBe,"STRONG",{});var M4t=s(H1e);Dor=r(M4t,"led"),M4t.forEach(t),Gor=r(IBe," \u2014 "),AQ=n(IBe,"A",{href:!0});var E4t=s(AQ);Oor=r(E4t,"LEDForQuestionAnswering"),E4t.forEach(t),Vor=r(IBe," (LED model)"),IBe.forEach(t),Xor=i(X),I5=n(X,"LI",{});var NBe=s(I5);U1e=n(NBe,"STRONG",{});var C4t=s(U1e);zor=r(C4t,"longformer"),C4t.forEach(t),Qor=r(NBe," \u2014 "),LQ=n(NBe,"A",{href:!0});var w4t=s(LQ);Wor=r(w4t,"LongformerForQuestionAnswering"),w4t.forEach(t),Hor=r(NBe," (Longformer model)"),NBe.forEach(t),Uor=i(X),N5=n(X,"LI",{});var qBe=s(N5);J1e=n(qBe,"STRONG",{});var A4t=s(J1e);Jor=r(A4t,"lxmert"),A4t.forEach(t),Yor=r(qBe," \u2014 "),yQ=n(qBe,"A",{href:!0});var L4t=s(yQ);Kor=r(L4t,"LxmertForQuestionAnswering"),L4t.forEach(t),Zor=r(qBe," (LXMERT model)"),qBe.forEach(t),err=i(X),q5=n(X,"LI",{});var jBe=s(q5);Y1e=n(jBe,"STRONG",{});var y4t=s(Y1e);orr=r(y4t,"mbart"),y4t.forEach(t),rrr=r(jBe," \u2014 "),xQ=n(jBe,"A",{href:!0});var x4t=s(xQ);trr=r(x4t,"MBartForQuestionAnswering"),x4t.forEach(t),arr=r(jBe," (mBART model)"),jBe.forEach(t),nrr=i(X),j5=n(X,"LI",{});var DBe=s(j5);K1e=n(DBe,"STRONG",{});var $4t=s(K1e);srr=r($4t,"megatron-bert"),$4t.forEach(t),lrr=r(DBe," \u2014 "),$Q=n(DBe,"A",{href:!0});var k4t=s($Q);irr=r(k4t,"MegatronBertForQuestionAnswering"),k4t.forEach(t),drr=r(DBe," (Megatron-BERT model)"),DBe.forEach(t),crr=i(X),D5=n(X,"LI",{});var GBe=s(D5);Z1e=n(GBe,"STRONG",{});var S4t=s(Z1e);frr=r(S4t,"mobilebert"),S4t.forEach(t),mrr=r(GBe," \u2014 "),kQ=n(GBe,"A",{href:!0});var R4t=s(kQ);grr=r(R4t,"MobileBertForQuestionAnswering"),R4t.forEach(t),hrr=r(GBe," (MobileBERT model)"),GBe.forEach(t),prr=i(X),G5=n(X,"LI",{});var OBe=s(G5);e2e=n(OBe,"STRONG",{});var P4t=s(e2e);_rr=r(P4t,"mpnet"),P4t.forEach(t),urr=r(OBe," \u2014 "),SQ=n(OBe,"A",{href:!0});var B4t=s(SQ);brr=r(B4t,"MPNetForQuestionAnswering"),B4t.forEach(t),vrr=r(OBe," (MPNet model)"),OBe.forEach(t),Frr=i(X),O5=n(X,"LI",{});var VBe=s(O5);o2e=n(VBe,"STRONG",{});var I4t=s(o2e);Trr=r(I4t,"mvp"),I4t.forEach(t),Mrr=r(VBe," \u2014 "),RQ=n(VBe,"A",{href:!0});var N4t=s(RQ);Err=r(N4t,"MvpForQuestionAnswering"),N4t.forEach(t),Crr=r(VBe," (MVP model)"),VBe.forEach(t),wrr=i(X),V5=n(X,"LI",{});var XBe=s(V5);r2e=n(XBe,"STRONG",{});var q4t=s(r2e);Arr=r(q4t,"nezha"),q4t.forEach(t),Lrr=r(XBe," \u2014 "),PQ=n(XBe,"A",{href:!0});var j4t=s(PQ);yrr=r(j4t,"NezhaForQuestionAnswering"),j4t.forEach(t),xrr=r(XBe," (Nezha model)"),XBe.forEach(t),$rr=i(X),X5=n(X,"LI",{});var zBe=s(X5);t2e=n(zBe,"STRONG",{});var D4t=s(t2e);krr=r(D4t,"nystromformer"),D4t.forEach(t),Srr=r(zBe," \u2014 "),BQ=n(zBe,"A",{href:!0});var G4t=s(BQ);Rrr=r(G4t,"NystromformerForQuestionAnswering"),G4t.forEach(t),Prr=r(zBe," (Nystr\xF6mformer model)"),zBe.forEach(t),Brr=i(X),z5=n(X,"LI",{});var QBe=s(z5);a2e=n(QBe,"STRONG",{});var O4t=s(a2e);Irr=r(O4t,"qdqbert"),O4t.forEach(t),Nrr=r(QBe," \u2014 "),IQ=n(QBe,"A",{href:!0});var V4t=s(IQ);qrr=r(V4t,"QDQBertForQuestionAnswering"),V4t.forEach(t),jrr=r(QBe," (QDQBert model)"),QBe.forEach(t),Drr=i(X),Q5=n(X,"LI",{});var WBe=s(Q5);n2e=n(WBe,"STRONG",{});var X4t=s(n2e);Grr=r(X4t,"reformer"),X4t.forEach(t),Orr=r(WBe," \u2014 "),NQ=n(WBe,"A",{href:!0});var z4t=s(NQ);Vrr=r(z4t,"ReformerForQuestionAnswering"),z4t.forEach(t),Xrr=r(WBe," (Reformer model)"),WBe.forEach(t),zrr=i(X),W5=n(X,"LI",{});var HBe=s(W5);s2e=n(HBe,"STRONG",{});var Q4t=s(s2e);Qrr=r(Q4t,"rembert"),Q4t.forEach(t),Wrr=r(HBe," \u2014 "),qQ=n(HBe,"A",{href:!0});var W4t=s(qQ);Hrr=r(W4t,"RemBertForQuestionAnswering"),W4t.forEach(t),Urr=r(HBe," (RemBERT model)"),HBe.forEach(t),Jrr=i(X),H5=n(X,"LI",{});var UBe=s(H5);l2e=n(UBe,"STRONG",{});var H4t=s(l2e);Yrr=r(H4t,"roberta"),H4t.forEach(t),Krr=r(UBe," \u2014 "),jQ=n(UBe,"A",{href:!0});var U4t=s(jQ);Zrr=r(U4t,"RobertaForQuestionAnswering"),U4t.forEach(t),etr=r(UBe," (RoBERTa model)"),UBe.forEach(t),otr=i(X),U5=n(X,"LI",{});var JBe=s(U5);i2e=n(JBe,"STRONG",{});var J4t=s(i2e);rtr=r(J4t,"roformer"),J4t.forEach(t),ttr=r(JBe," \u2014 "),DQ=n(JBe,"A",{href:!0});var Y4t=s(DQ);atr=r(Y4t,"RoFormerForQuestionAnswering"),Y4t.forEach(t),ntr=r(JBe," (RoFormer model)"),JBe.forEach(t),str=i(X),J5=n(X,"LI",{});var YBe=s(J5);d2e=n(YBe,"STRONG",{});var K4t=s(d2e);ltr=r(K4t,"splinter"),K4t.forEach(t),itr=r(YBe," \u2014 "),GQ=n(YBe,"A",{href:!0});var Z4t=s(GQ);dtr=r(Z4t,"SplinterForQuestionAnswering"),Z4t.forEach(t),ctr=r(YBe," (Splinter model)"),YBe.forEach(t),ftr=i(X),Y5=n(X,"LI",{});var KBe=s(Y5);c2e=n(KBe,"STRONG",{});var eEt=s(c2e);mtr=r(eEt,"squeezebert"),eEt.forEach(t),gtr=r(KBe," \u2014 "),OQ=n(KBe,"A",{href:!0});var oEt=s(OQ);htr=r(oEt,"SqueezeBertForQuestionAnswering"),oEt.forEach(t),ptr=r(KBe," (SqueezeBERT model)"),KBe.forEach(t),_tr=i(X),K5=n(X,"LI",{});var ZBe=s(K5);f2e=n(ZBe,"STRONG",{});var rEt=s(f2e);utr=r(rEt,"xlm"),rEt.forEach(t),btr=r(ZBe," \u2014 "),VQ=n(ZBe,"A",{href:!0});var tEt=s(VQ);vtr=r(tEt,"XLMForQuestionAnsweringSimple"),tEt.forEach(t),Ftr=r(ZBe," (XLM model)"),ZBe.forEach(t),Ttr=i(X),Z5=n(X,"LI",{});var eIe=s(Z5);m2e=n(eIe,"STRONG",{});var aEt=s(m2e);Mtr=r(aEt,"xlm-roberta"),aEt.forEach(t),Etr=r(eIe," \u2014 "),XQ=n(eIe,"A",{href:!0});var nEt=s(XQ);Ctr=r(nEt,"XLMRobertaForQuestionAnswering"),nEt.forEach(t),wtr=r(eIe," (XLM-RoBERTa model)"),eIe.forEach(t),Atr=i(X),eF=n(X,"LI",{});var oIe=s(eF);g2e=n(oIe,"STRONG",{});var sEt=s(g2e);Ltr=r(sEt,"xlm-roberta-xl"),sEt.forEach(t),ytr=r(oIe," \u2014 "),zQ=n(oIe,"A",{href:!0});var lEt=s(zQ);xtr=r(lEt,"XLMRobertaXLForQuestionAnswering"),lEt.forEach(t),$tr=r(oIe," (XLM-RoBERTa-XL model)"),oIe.forEach(t),ktr=i(X),oF=n(X,"LI",{});var rIe=s(oF);h2e=n(rIe,"STRONG",{});var iEt=s(h2e);Str=r(iEt,"xlnet"),iEt.forEach(t),Rtr=r(rIe," \u2014 "),QQ=n(rIe,"A",{href:!0});var dEt=s(QQ);Ptr=r(dEt,"XLNetForQuestionAnsweringSimple"),dEt.forEach(t),Btr=r(rIe," (XLNet model)"),rIe.forEach(t),Itr=i(X),rF=n(X,"LI",{});var tIe=s(rF);p2e=n(tIe,"STRONG",{});var cEt=s(p2e);Ntr=r(cEt,"yoso"),cEt.forEach(t),qtr=r(tIe," \u2014 "),WQ=n(tIe,"A",{href:!0});var fEt=s(WQ);jtr=r(fEt,"YosoForQuestionAnswering"),fEt.forEach(t),Dtr=r(tIe," (YOSO model)"),tIe.forEach(t),X.forEach(t),Gtr=i(pa),tF=n(pa,"P",{});var aIe=s(tF);Otr=r(aIe,"The model is set in evaluation mode by default using "),_2e=n(aIe,"CODE",{});var mEt=s(_2e);Vtr=r(mEt,"model.eval()"),mEt.forEach(t),Xtr=r(aIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),u2e=n(aIe,"CODE",{});var gEt=s(u2e);ztr=r(gEt,"model.train()"),gEt.forEach(t),aIe.forEach(t),Qtr=i(pa),T(aF.$$.fragment,pa),pa.forEach(t),dl.forEach(t),WVe=i(f),pd=n(f,"H2",{class:!0});var Zze=s(pd);nF=n(Zze,"A",{id:!0,class:!0,href:!0});var hEt=s(nF);b2e=n(hEt,"SPAN",{});var pEt=s(b2e);T(uy.$$.fragment,pEt),pEt.forEach(t),hEt.forEach(t),Wtr=i(Zze),v2e=n(Zze,"SPAN",{});var _Et=s(v2e);Htr=r(_Et,"AutoModelForTableQuestionAnswering"),_Et.forEach(t),Zze.forEach(t),HVe=i(f),Do=n(f,"DIV",{class:!0});var cl=s(Do);T(by.$$.fragment,cl),Utr=i(cl),_d=n(cl,"P",{});var kre=s(_d);Jtr=r(kre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),HQ=n(kre,"A",{href:!0});var uEt=s(HQ);Ytr=r(uEt,"from_pretrained()"),uEt.forEach(t),Ktr=r(kre," class method or the "),UQ=n(kre,"A",{href:!0});var bEt=s(UQ);Ztr=r(bEt,"from_config()"),bEt.forEach(t),ear=r(kre,` class
method.`),kre.forEach(t),oar=i(cl),vy=n(cl,"P",{});var eQe=s(vy);rar=r(eQe,"This class cannot be instantiated directly using "),F2e=n(eQe,"CODE",{});var vEt=s(F2e);tar=r(vEt,"__init__()"),vEt.forEach(t),aar=r(eQe," (throws an error)."),eQe.forEach(t),nar=i(cl),_t=n(cl,"DIV",{class:!0});var bA=s(_t);T(Fy.$$.fragment,bA),sar=i(bA),T2e=n(bA,"P",{});var FEt=s(T2e);lar=r(FEt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),FEt.forEach(t),iar=i(bA),ud=n(bA,"P",{});var Sre=s(ud);dar=r(Sre,`Note:
Loading a model from its configuration file does `),M2e=n(Sre,"STRONG",{});var TEt=s(M2e);car=r(TEt,"not"),TEt.forEach(t),far=r(Sre,` load the model weights. It only affects the
model\u2019s configuration. Use `),JQ=n(Sre,"A",{href:!0});var MEt=s(JQ);mar=r(MEt,"from_pretrained()"),MEt.forEach(t),gar=r(Sre," to load the model weights."),Sre.forEach(t),har=i(bA),T(sF.$$.fragment,bA),bA.forEach(t),par=i(cl),so=n(cl,"DIV",{class:!0});var _a=s(so);T(Ty.$$.fragment,_a),_ar=i(_a),E2e=n(_a,"P",{});var EEt=s(E2e);uar=r(EEt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),EEt.forEach(t),bar=i(_a),Xa=n(_a,"P",{});var vA=s(Xa);Far=r(vA,"The model class to instantiate is selected based on the "),C2e=n(vA,"CODE",{});var CEt=s(C2e);Tar=r(CEt,"model_type"),CEt.forEach(t),Mar=r(vA,` property of the config object (either
passed as an argument or loaded from `),w2e=n(vA,"CODE",{});var wEt=s(w2e);Ear=r(wEt,"pretrained_model_name_or_path"),wEt.forEach(t),Car=r(vA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A2e=n(vA,"CODE",{});var AEt=s(A2e);war=r(AEt,"pretrained_model_name_or_path"),AEt.forEach(t),Aar=r(vA,":"),vA.forEach(t),Lar=i(_a),L2e=n(_a,"UL",{});var LEt=s(L2e);lF=n(LEt,"LI",{});var nIe=s(lF);y2e=n(nIe,"STRONG",{});var yEt=s(y2e);yar=r(yEt,"tapas"),yEt.forEach(t),xar=r(nIe," \u2014 "),YQ=n(nIe,"A",{href:!0});var xEt=s(YQ);$ar=r(xEt,"TapasForQuestionAnswering"),xEt.forEach(t),kar=r(nIe," (TAPAS model)"),nIe.forEach(t),LEt.forEach(t),Sar=i(_a),iF=n(_a,"P",{});var sIe=s(iF);Rar=r(sIe,"The model is set in evaluation mode by default using "),x2e=n(sIe,"CODE",{});var $Et=s(x2e);Par=r($Et,"model.eval()"),$Et.forEach(t),Bar=r(sIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$2e=n(sIe,"CODE",{});var kEt=s($2e);Iar=r(kEt,"model.train()"),kEt.forEach(t),sIe.forEach(t),Nar=i(_a),T(dF.$$.fragment,_a),_a.forEach(t),cl.forEach(t),UVe=i(f),bd=n(f,"H2",{class:!0});var oQe=s(bd);cF=n(oQe,"A",{id:!0,class:!0,href:!0});var SEt=s(cF);k2e=n(SEt,"SPAN",{});var REt=s(k2e);T(My.$$.fragment,REt),REt.forEach(t),SEt.forEach(t),qar=i(oQe),S2e=n(oQe,"SPAN",{});var PEt=s(S2e);jar=r(PEt,"AutoModelForImageClassification"),PEt.forEach(t),oQe.forEach(t),JVe=i(f),Go=n(f,"DIV",{class:!0});var fl=s(Go);T(Ey.$$.fragment,fl),Dar=i(fl),vd=n(fl,"P",{});var Rre=s(vd);Gar=r(Rre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),KQ=n(Rre,"A",{href:!0});var BEt=s(KQ);Oar=r(BEt,"from_pretrained()"),BEt.forEach(t),Var=r(Rre," class method or the "),ZQ=n(Rre,"A",{href:!0});var IEt=s(ZQ);Xar=r(IEt,"from_config()"),IEt.forEach(t),zar=r(Rre,` class
method.`),Rre.forEach(t),Qar=i(fl),Cy=n(fl,"P",{});var rQe=s(Cy);War=r(rQe,"This class cannot be instantiated directly using "),R2e=n(rQe,"CODE",{});var NEt=s(R2e);Har=r(NEt,"__init__()"),NEt.forEach(t),Uar=r(rQe," (throws an error)."),rQe.forEach(t),Jar=i(fl),ut=n(fl,"DIV",{class:!0});var FA=s(ut);T(wy.$$.fragment,FA),Yar=i(FA),P2e=n(FA,"P",{});var qEt=s(P2e);Kar=r(qEt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),qEt.forEach(t),Zar=i(FA),Fd=n(FA,"P",{});var Pre=s(Fd);enr=r(Pre,`Note:
Loading a model from its configuration file does `),B2e=n(Pre,"STRONG",{});var jEt=s(B2e);onr=r(jEt,"not"),jEt.forEach(t),rnr=r(Pre,` load the model weights. It only affects the
model\u2019s configuration. Use `),eW=n(Pre,"A",{href:!0});var DEt=s(eW);tnr=r(DEt,"from_pretrained()"),DEt.forEach(t),anr=r(Pre," to load the model weights."),Pre.forEach(t),nnr=i(FA),T(fF.$$.fragment,FA),FA.forEach(t),snr=i(fl),lo=n(fl,"DIV",{class:!0});var ua=s(lo);T(Ay.$$.fragment,ua),lnr=i(ua),I2e=n(ua,"P",{});var GEt=s(I2e);inr=r(GEt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),GEt.forEach(t),dnr=i(ua),za=n(ua,"P",{});var TA=s(za);cnr=r(TA,"The model class to instantiate is selected based on the "),N2e=n(TA,"CODE",{});var OEt=s(N2e);fnr=r(OEt,"model_type"),OEt.forEach(t),mnr=r(TA,` property of the config object (either
passed as an argument or loaded from `),q2e=n(TA,"CODE",{});var VEt=s(q2e);gnr=r(VEt,"pretrained_model_name_or_path"),VEt.forEach(t),hnr=r(TA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j2e=n(TA,"CODE",{});var XEt=s(j2e);pnr=r(XEt,"pretrained_model_name_or_path"),XEt.forEach(t),_nr=r(TA,":"),TA.forEach(t),unr=i(ua),Fe=n(ua,"UL",{});var Te=s(Fe);mF=n(Te,"LI",{});var lIe=s(mF);D2e=n(lIe,"STRONG",{});var zEt=s(D2e);bnr=r(zEt,"beit"),zEt.forEach(t),vnr=r(lIe," \u2014 "),oW=n(lIe,"A",{href:!0});var QEt=s(oW);Fnr=r(QEt,"BeitForImageClassification"),QEt.forEach(t),Tnr=r(lIe," (BEiT model)"),lIe.forEach(t),Mnr=i(Te),gF=n(Te,"LI",{});var iIe=s(gF);G2e=n(iIe,"STRONG",{});var WEt=s(G2e);Enr=r(WEt,"convnext"),WEt.forEach(t),Cnr=r(iIe," \u2014 "),rW=n(iIe,"A",{href:!0});var HEt=s(rW);wnr=r(HEt,"ConvNextForImageClassification"),HEt.forEach(t),Anr=r(iIe," (ConvNeXT model)"),iIe.forEach(t),Lnr=i(Te),hF=n(Te,"LI",{});var dIe=s(hF);O2e=n(dIe,"STRONG",{});var UEt=s(O2e);ynr=r(UEt,"cvt"),UEt.forEach(t),xnr=r(dIe," \u2014 "),tW=n(dIe,"A",{href:!0});var JEt=s(tW);$nr=r(JEt,"CvtForImageClassification"),JEt.forEach(t),knr=r(dIe," (CvT model)"),dIe.forEach(t),Snr=i(Te),pF=n(Te,"LI",{});var cIe=s(pF);V2e=n(cIe,"STRONG",{});var YEt=s(V2e);Rnr=r(YEt,"data2vec-vision"),YEt.forEach(t),Pnr=r(cIe," \u2014 "),aW=n(cIe,"A",{href:!0});var KEt=s(aW);Bnr=r(KEt,"Data2VecVisionForImageClassification"),KEt.forEach(t),Inr=r(cIe," (Data2VecVision model)"),cIe.forEach(t),Nnr=i(Te),Ws=n(Te,"LI",{});var MS=s(Ws);X2e=n(MS,"STRONG",{});var ZEt=s(X2e);qnr=r(ZEt,"deit"),ZEt.forEach(t),jnr=r(MS," \u2014 "),nW=n(MS,"A",{href:!0});var eCt=s(nW);Dnr=r(eCt,"DeiTForImageClassification"),eCt.forEach(t),Gnr=r(MS," or "),sW=n(MS,"A",{href:!0});var oCt=s(sW);Onr=r(oCt,"DeiTForImageClassificationWithTeacher"),oCt.forEach(t),Vnr=r(MS," (DeiT model)"),MS.forEach(t),Xnr=i(Te),_F=n(Te,"LI",{});var fIe=s(_F);z2e=n(fIe,"STRONG",{});var rCt=s(z2e);znr=r(rCt,"imagegpt"),rCt.forEach(t),Qnr=r(fIe," \u2014 "),lW=n(fIe,"A",{href:!0});var tCt=s(lW);Wnr=r(tCt,"ImageGPTForImageClassification"),tCt.forEach(t),Hnr=r(fIe," (ImageGPT model)"),fIe.forEach(t),Unr=i(Te),Hs=n(Te,"LI",{});var ES=s(Hs);Q2e=n(ES,"STRONG",{});var aCt=s(Q2e);Jnr=r(aCt,"levit"),aCt.forEach(t),Ynr=r(ES," \u2014 "),iW=n(ES,"A",{href:!0});var nCt=s(iW);Knr=r(nCt,"LevitForImageClassification"),nCt.forEach(t),Znr=r(ES," or "),dW=n(ES,"A",{href:!0});var sCt=s(dW);esr=r(sCt,"LevitForImageClassificationWithTeacher"),sCt.forEach(t),osr=r(ES," (LeViT model)"),ES.forEach(t),rsr=i(Te),bt=n(Te,"LI",{});var kf=s(bt);W2e=n(kf,"STRONG",{});var lCt=s(W2e);tsr=r(lCt,"perceiver"),lCt.forEach(t),asr=r(kf," \u2014 "),cW=n(kf,"A",{href:!0});var iCt=s(cW);nsr=r(iCt,"PerceiverForImageClassificationLearned"),iCt.forEach(t),ssr=r(kf," or "),fW=n(kf,"A",{href:!0});var dCt=s(fW);lsr=r(dCt,"PerceiverForImageClassificationFourier"),dCt.forEach(t),isr=r(kf," or "),mW=n(kf,"A",{href:!0});var cCt=s(mW);dsr=r(cCt,"PerceiverForImageClassificationConvProcessing"),cCt.forEach(t),csr=r(kf," (Perceiver model)"),kf.forEach(t),fsr=i(Te),uF=n(Te,"LI",{});var mIe=s(uF);H2e=n(mIe,"STRONG",{});var fCt=s(H2e);msr=r(fCt,"poolformer"),fCt.forEach(t),gsr=r(mIe," \u2014 "),gW=n(mIe,"A",{href:!0});var mCt=s(gW);hsr=r(mCt,"PoolFormerForImageClassification"),mCt.forEach(t),psr=r(mIe," (PoolFormer model)"),mIe.forEach(t),_sr=i(Te),bF=n(Te,"LI",{});var gIe=s(bF);U2e=n(gIe,"STRONG",{});var gCt=s(U2e);usr=r(gCt,"regnet"),gCt.forEach(t),bsr=r(gIe," \u2014 "),hW=n(gIe,"A",{href:!0});var hCt=s(hW);vsr=r(hCt,"RegNetForImageClassification"),hCt.forEach(t),Fsr=r(gIe," (RegNet model)"),gIe.forEach(t),Tsr=i(Te),vF=n(Te,"LI",{});var hIe=s(vF);J2e=n(hIe,"STRONG",{});var pCt=s(J2e);Msr=r(pCt,"resnet"),pCt.forEach(t),Esr=r(hIe," \u2014 "),pW=n(hIe,"A",{href:!0});var _Ct=s(pW);Csr=r(_Ct,"ResNetForImageClassification"),_Ct.forEach(t),wsr=r(hIe," (ResNet model)"),hIe.forEach(t),Asr=i(Te),FF=n(Te,"LI",{});var pIe=s(FF);Y2e=n(pIe,"STRONG",{});var uCt=s(Y2e);Lsr=r(uCt,"segformer"),uCt.forEach(t),ysr=r(pIe," \u2014 "),_W=n(pIe,"A",{href:!0});var bCt=s(_W);xsr=r(bCt,"SegformerForImageClassification"),bCt.forEach(t),$sr=r(pIe," (SegFormer model)"),pIe.forEach(t),ksr=i(Te),TF=n(Te,"LI",{});var _Ie=s(TF);K2e=n(_Ie,"STRONG",{});var vCt=s(K2e);Ssr=r(vCt,"swin"),vCt.forEach(t),Rsr=r(_Ie," \u2014 "),uW=n(_Ie,"A",{href:!0});var FCt=s(uW);Psr=r(FCt,"SwinForImageClassification"),FCt.forEach(t),Bsr=r(_Ie," (Swin Transformer model)"),_Ie.forEach(t),Isr=i(Te),MF=n(Te,"LI",{});var uIe=s(MF);Z2e=n(uIe,"STRONG",{});var TCt=s(Z2e);Nsr=r(TCt,"van"),TCt.forEach(t),qsr=r(uIe," \u2014 "),bW=n(uIe,"A",{href:!0});var MCt=s(bW);jsr=r(MCt,"VanForImageClassification"),MCt.forEach(t),Dsr=r(uIe," (VAN model)"),uIe.forEach(t),Gsr=i(Te),EF=n(Te,"LI",{});var bIe=s(EF);ebe=n(bIe,"STRONG",{});var ECt=s(ebe);Osr=r(ECt,"vit"),ECt.forEach(t),Vsr=r(bIe," \u2014 "),vW=n(bIe,"A",{href:!0});var CCt=s(vW);Xsr=r(CCt,"ViTForImageClassification"),CCt.forEach(t),zsr=r(bIe," (ViT model)"),bIe.forEach(t),Te.forEach(t),Qsr=i(ua),CF=n(ua,"P",{});var vIe=s(CF);Wsr=r(vIe,"The model is set in evaluation mode by default using "),obe=n(vIe,"CODE",{});var wCt=s(obe);Hsr=r(wCt,"model.eval()"),wCt.forEach(t),Usr=r(vIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rbe=n(vIe,"CODE",{});var ACt=s(rbe);Jsr=r(ACt,"model.train()"),ACt.forEach(t),vIe.forEach(t),Ysr=i(ua),T(wF.$$.fragment,ua),ua.forEach(t),fl.forEach(t),YVe=i(f),Td=n(f,"H2",{class:!0});var tQe=s(Td);AF=n(tQe,"A",{id:!0,class:!0,href:!0});var LCt=s(AF);tbe=n(LCt,"SPAN",{});var yCt=s(tbe);T(Ly.$$.fragment,yCt),yCt.forEach(t),LCt.forEach(t),Ksr=i(tQe),abe=n(tQe,"SPAN",{});var xCt=s(abe);Zsr=r(xCt,"AutoModelForVision2Seq"),xCt.forEach(t),tQe.forEach(t),KVe=i(f),Oo=n(f,"DIV",{class:!0});var ml=s(Oo);T(yy.$$.fragment,ml),elr=i(ml),Md=n(ml,"P",{});var Bre=s(Md);olr=r(Bre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),FW=n(Bre,"A",{href:!0});var $Ct=s(FW);rlr=r($Ct,"from_pretrained()"),$Ct.forEach(t),tlr=r(Bre," class method or the "),TW=n(Bre,"A",{href:!0});var kCt=s(TW);alr=r(kCt,"from_config()"),kCt.forEach(t),nlr=r(Bre,` class
method.`),Bre.forEach(t),slr=i(ml),xy=n(ml,"P",{});var aQe=s(xy);llr=r(aQe,"This class cannot be instantiated directly using "),nbe=n(aQe,"CODE",{});var SCt=s(nbe);ilr=r(SCt,"__init__()"),SCt.forEach(t),dlr=r(aQe," (throws an error)."),aQe.forEach(t),clr=i(ml),vt=n(ml,"DIV",{class:!0});var MA=s(vt);T($y.$$.fragment,MA),flr=i(MA),sbe=n(MA,"P",{});var RCt=s(sbe);mlr=r(RCt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),RCt.forEach(t),glr=i(MA),Ed=n(MA,"P",{});var Ire=s(Ed);hlr=r(Ire,`Note:
Loading a model from its configuration file does `),lbe=n(Ire,"STRONG",{});var PCt=s(lbe);plr=r(PCt,"not"),PCt.forEach(t),_lr=r(Ire,` load the model weights. It only affects the
model\u2019s configuration. Use `),MW=n(Ire,"A",{href:!0});var BCt=s(MW);ulr=r(BCt,"from_pretrained()"),BCt.forEach(t),blr=r(Ire," to load the model weights."),Ire.forEach(t),vlr=i(MA),T(LF.$$.fragment,MA),MA.forEach(t),Flr=i(ml),io=n(ml,"DIV",{class:!0});var ba=s(io);T(ky.$$.fragment,ba),Tlr=i(ba),ibe=n(ba,"P",{});var ICt=s(ibe);Mlr=r(ICt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),ICt.forEach(t),Elr=i(ba),Qa=n(ba,"P",{});var EA=s(Qa);Clr=r(EA,"The model class to instantiate is selected based on the "),dbe=n(EA,"CODE",{});var NCt=s(dbe);wlr=r(NCt,"model_type"),NCt.forEach(t),Alr=r(EA,` property of the config object (either
passed as an argument or loaded from `),cbe=n(EA,"CODE",{});var qCt=s(cbe);Llr=r(qCt,"pretrained_model_name_or_path"),qCt.forEach(t),ylr=r(EA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fbe=n(EA,"CODE",{});var jCt=s(fbe);xlr=r(jCt,"pretrained_model_name_or_path"),jCt.forEach(t),$lr=r(EA,":"),EA.forEach(t),klr=i(ba),mbe=n(ba,"UL",{});var DCt=s(mbe);yF=n(DCt,"LI",{});var FIe=s(yF);gbe=n(FIe,"STRONG",{});var GCt=s(gbe);Slr=r(GCt,"vision-encoder-decoder"),GCt.forEach(t),Rlr=r(FIe," \u2014 "),EW=n(FIe,"A",{href:!0});var OCt=s(EW);Plr=r(OCt,"VisionEncoderDecoderModel"),OCt.forEach(t),Blr=r(FIe," (Vision Encoder decoder model)"),FIe.forEach(t),DCt.forEach(t),Ilr=i(ba),xF=n(ba,"P",{});var TIe=s(xF);Nlr=r(TIe,"The model is set in evaluation mode by default using "),hbe=n(TIe,"CODE",{});var VCt=s(hbe);qlr=r(VCt,"model.eval()"),VCt.forEach(t),jlr=r(TIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pbe=n(TIe,"CODE",{});var XCt=s(pbe);Dlr=r(XCt,"model.train()"),XCt.forEach(t),TIe.forEach(t),Glr=i(ba),T($F.$$.fragment,ba),ba.forEach(t),ml.forEach(t),ZVe=i(f),Cd=n(f,"H2",{class:!0});var nQe=s(Cd);kF=n(nQe,"A",{id:!0,class:!0,href:!0});var zCt=s(kF);_be=n(zCt,"SPAN",{});var QCt=s(_be);T(Sy.$$.fragment,QCt),QCt.forEach(t),zCt.forEach(t),Olr=i(nQe),ube=n(nQe,"SPAN",{});var WCt=s(ube);Vlr=r(WCt,"AutoModelForVisualQuestionAnswering"),WCt.forEach(t),nQe.forEach(t),eXe=i(f),Vo=n(f,"DIV",{class:!0});var gl=s(Vo);T(Ry.$$.fragment,gl),Xlr=i(gl),wd=n(gl,"P",{});var Nre=s(wd);zlr=r(Nre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),CW=n(Nre,"A",{href:!0});var HCt=s(CW);Qlr=r(HCt,"from_pretrained()"),HCt.forEach(t),Wlr=r(Nre," class method or the "),wW=n(Nre,"A",{href:!0});var UCt=s(wW);Hlr=r(UCt,"from_config()"),UCt.forEach(t),Ulr=r(Nre,` class
method.`),Nre.forEach(t),Jlr=i(gl),Py=n(gl,"P",{});var sQe=s(Py);Ylr=r(sQe,"This class cannot be instantiated directly using "),bbe=n(sQe,"CODE",{});var JCt=s(bbe);Klr=r(JCt,"__init__()"),JCt.forEach(t),Zlr=r(sQe," (throws an error)."),sQe.forEach(t),eir=i(gl),Ft=n(gl,"DIV",{class:!0});var CA=s(Ft);T(By.$$.fragment,CA),oir=i(CA),vbe=n(CA,"P",{});var YCt=s(vbe);rir=r(YCt,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),YCt.forEach(t),tir=i(CA),Ad=n(CA,"P",{});var qre=s(Ad);air=r(qre,`Note:
Loading a model from its configuration file does `),Fbe=n(qre,"STRONG",{});var KCt=s(Fbe);nir=r(KCt,"not"),KCt.forEach(t),sir=r(qre,` load the model weights. It only affects the
model\u2019s configuration. Use `),AW=n(qre,"A",{href:!0});var ZCt=s(AW);lir=r(ZCt,"from_pretrained()"),ZCt.forEach(t),iir=r(qre," to load the model weights."),qre.forEach(t),dir=i(CA),T(SF.$$.fragment,CA),CA.forEach(t),cir=i(gl),co=n(gl,"DIV",{class:!0});var va=s(co);T(Iy.$$.fragment,va),fir=i(va),Tbe=n(va,"P",{});var e0t=s(Tbe);mir=r(e0t,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),e0t.forEach(t),gir=i(va),Wa=n(va,"P",{});var wA=s(Wa);hir=r(wA,"The model class to instantiate is selected based on the "),Mbe=n(wA,"CODE",{});var o0t=s(Mbe);pir=r(o0t,"model_type"),o0t.forEach(t),_ir=r(wA,` property of the config object (either
passed as an argument or loaded from `),Ebe=n(wA,"CODE",{});var r0t=s(Ebe);uir=r(r0t,"pretrained_model_name_or_path"),r0t.forEach(t),bir=r(wA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cbe=n(wA,"CODE",{});var t0t=s(Cbe);vir=r(t0t,"pretrained_model_name_or_path"),t0t.forEach(t),Fir=r(wA,":"),wA.forEach(t),Tir=i(va),wbe=n(va,"UL",{});var a0t=s(wbe);RF=n(a0t,"LI",{});var MIe=s(RF);Abe=n(MIe,"STRONG",{});var n0t=s(Abe);Mir=r(n0t,"vilt"),n0t.forEach(t),Eir=r(MIe," \u2014 "),LW=n(MIe,"A",{href:!0});var s0t=s(LW);Cir=r(s0t,"ViltForQuestionAnswering"),s0t.forEach(t),wir=r(MIe," (ViLT model)"),MIe.forEach(t),a0t.forEach(t),Air=i(va),PF=n(va,"P",{});var EIe=s(PF);Lir=r(EIe,"The model is set in evaluation mode by default using "),Lbe=n(EIe,"CODE",{});var l0t=s(Lbe);yir=r(l0t,"model.eval()"),l0t.forEach(t),xir=r(EIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ybe=n(EIe,"CODE",{});var i0t=s(ybe);$ir=r(i0t,"model.train()"),i0t.forEach(t),EIe.forEach(t),kir=i(va),T(BF.$$.fragment,va),va.forEach(t),gl.forEach(t),oXe=i(f),Ld=n(f,"H2",{class:!0});var lQe=s(Ld);IF=n(lQe,"A",{id:!0,class:!0,href:!0});var d0t=s(IF);xbe=n(d0t,"SPAN",{});var c0t=s(xbe);T(Ny.$$.fragment,c0t),c0t.forEach(t),d0t.forEach(t),Sir=i(lQe),$be=n(lQe,"SPAN",{});var f0t=s($be);Rir=r(f0t,"AutoModelForAudioClassification"),f0t.forEach(t),lQe.forEach(t),rXe=i(f),Xo=n(f,"DIV",{class:!0});var hl=s(Xo);T(qy.$$.fragment,hl),Pir=i(hl),yd=n(hl,"P",{});var jre=s(yd);Bir=r(jre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),yW=n(jre,"A",{href:!0});var m0t=s(yW);Iir=r(m0t,"from_pretrained()"),m0t.forEach(t),Nir=r(jre," class method or the "),xW=n(jre,"A",{href:!0});var g0t=s(xW);qir=r(g0t,"from_config()"),g0t.forEach(t),jir=r(jre,` class
method.`),jre.forEach(t),Dir=i(hl),jy=n(hl,"P",{});var iQe=s(jy);Gir=r(iQe,"This class cannot be instantiated directly using "),kbe=n(iQe,"CODE",{});var h0t=s(kbe);Oir=r(h0t,"__init__()"),h0t.forEach(t),Vir=r(iQe," (throws an error)."),iQe.forEach(t),Xir=i(hl),Tt=n(hl,"DIV",{class:!0});var AA=s(Tt);T(Dy.$$.fragment,AA),zir=i(AA),Sbe=n(AA,"P",{});var p0t=s(Sbe);Qir=r(p0t,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),p0t.forEach(t),Wir=i(AA),xd=n(AA,"P",{});var Dre=s(xd);Hir=r(Dre,`Note:
Loading a model from its configuration file does `),Rbe=n(Dre,"STRONG",{});var _0t=s(Rbe);Uir=r(_0t,"not"),_0t.forEach(t),Jir=r(Dre,` load the model weights. It only affects the
model\u2019s configuration. Use `),$W=n(Dre,"A",{href:!0});var u0t=s($W);Yir=r(u0t,"from_pretrained()"),u0t.forEach(t),Kir=r(Dre," to load the model weights."),Dre.forEach(t),Zir=i(AA),T(NF.$$.fragment,AA),AA.forEach(t),edr=i(hl),fo=n(hl,"DIV",{class:!0});var Fa=s(fo);T(Gy.$$.fragment,Fa),odr=i(Fa),Pbe=n(Fa,"P",{});var b0t=s(Pbe);rdr=r(b0t,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),b0t.forEach(t),tdr=i(Fa),Ha=n(Fa,"P",{});var LA=s(Ha);adr=r(LA,"The model class to instantiate is selected based on the "),Bbe=n(LA,"CODE",{});var v0t=s(Bbe);ndr=r(v0t,"model_type"),v0t.forEach(t),sdr=r(LA,` property of the config object (either
passed as an argument or loaded from `),Ibe=n(LA,"CODE",{});var F0t=s(Ibe);ldr=r(F0t,"pretrained_model_name_or_path"),F0t.forEach(t),idr=r(LA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nbe=n(LA,"CODE",{});var T0t=s(Nbe);ddr=r(T0t,"pretrained_model_name_or_path"),T0t.forEach(t),cdr=r(LA,":"),LA.forEach(t),fdr=i(Fa),Pe=n(Fa,"UL",{});var ze=s(Pe);qF=n(ze,"LI",{});var CIe=s(qF);qbe=n(CIe,"STRONG",{});var M0t=s(qbe);mdr=r(M0t,"data2vec-audio"),M0t.forEach(t),gdr=r(CIe," \u2014 "),kW=n(CIe,"A",{href:!0});var E0t=s(kW);hdr=r(E0t,"Data2VecAudioForSequenceClassification"),E0t.forEach(t),pdr=r(CIe," (Data2VecAudio model)"),CIe.forEach(t),_dr=i(ze),jF=n(ze,"LI",{});var wIe=s(jF);jbe=n(wIe,"STRONG",{});var C0t=s(jbe);udr=r(C0t,"hubert"),C0t.forEach(t),bdr=r(wIe," \u2014 "),SW=n(wIe,"A",{href:!0});var w0t=s(SW);vdr=r(w0t,"HubertForSequenceClassification"),w0t.forEach(t),Fdr=r(wIe," (Hubert model)"),wIe.forEach(t),Tdr=i(ze),DF=n(ze,"LI",{});var AIe=s(DF);Dbe=n(AIe,"STRONG",{});var A0t=s(Dbe);Mdr=r(A0t,"sew"),A0t.forEach(t),Edr=r(AIe," \u2014 "),RW=n(AIe,"A",{href:!0});var L0t=s(RW);Cdr=r(L0t,"SEWForSequenceClassification"),L0t.forEach(t),wdr=r(AIe," (SEW model)"),AIe.forEach(t),Adr=i(ze),GF=n(ze,"LI",{});var LIe=s(GF);Gbe=n(LIe,"STRONG",{});var y0t=s(Gbe);Ldr=r(y0t,"sew-d"),y0t.forEach(t),ydr=r(LIe," \u2014 "),PW=n(LIe,"A",{href:!0});var x0t=s(PW);xdr=r(x0t,"SEWDForSequenceClassification"),x0t.forEach(t),$dr=r(LIe," (SEW-D model)"),LIe.forEach(t),kdr=i(ze),OF=n(ze,"LI",{});var yIe=s(OF);Obe=n(yIe,"STRONG",{});var $0t=s(Obe);Sdr=r($0t,"unispeech"),$0t.forEach(t),Rdr=r(yIe," \u2014 "),BW=n(yIe,"A",{href:!0});var k0t=s(BW);Pdr=r(k0t,"UniSpeechForSequenceClassification"),k0t.forEach(t),Bdr=r(yIe," (UniSpeech model)"),yIe.forEach(t),Idr=i(ze),VF=n(ze,"LI",{});var xIe=s(VF);Vbe=n(xIe,"STRONG",{});var S0t=s(Vbe);Ndr=r(S0t,"unispeech-sat"),S0t.forEach(t),qdr=r(xIe," \u2014 "),IW=n(xIe,"A",{href:!0});var R0t=s(IW);jdr=r(R0t,"UniSpeechSatForSequenceClassification"),R0t.forEach(t),Ddr=r(xIe," (UniSpeechSat model)"),xIe.forEach(t),Gdr=i(ze),XF=n(ze,"LI",{});var $Ie=s(XF);Xbe=n($Ie,"STRONG",{});var P0t=s(Xbe);Odr=r(P0t,"wav2vec2"),P0t.forEach(t),Vdr=r($Ie," \u2014 "),NW=n($Ie,"A",{href:!0});var B0t=s(NW);Xdr=r(B0t,"Wav2Vec2ForSequenceClassification"),B0t.forEach(t),zdr=r($Ie," (Wav2Vec2 model)"),$Ie.forEach(t),Qdr=i(ze),zF=n(ze,"LI",{});var kIe=s(zF);zbe=n(kIe,"STRONG",{});var I0t=s(zbe);Wdr=r(I0t,"wav2vec2-conformer"),I0t.forEach(t),Hdr=r(kIe," \u2014 "),qW=n(kIe,"A",{href:!0});var N0t=s(qW);Udr=r(N0t,"Wav2Vec2ConformerForSequenceClassification"),N0t.forEach(t),Jdr=r(kIe," (Wav2Vec2-Conformer model)"),kIe.forEach(t),Ydr=i(ze),QF=n(ze,"LI",{});var SIe=s(QF);Qbe=n(SIe,"STRONG",{});var q0t=s(Qbe);Kdr=r(q0t,"wavlm"),q0t.forEach(t),Zdr=r(SIe," \u2014 "),jW=n(SIe,"A",{href:!0});var j0t=s(jW);ecr=r(j0t,"WavLMForSequenceClassification"),j0t.forEach(t),ocr=r(SIe," (WavLM model)"),SIe.forEach(t),ze.forEach(t),rcr=i(Fa),WF=n(Fa,"P",{});var RIe=s(WF);tcr=r(RIe,"The model is set in evaluation mode by default using "),Wbe=n(RIe,"CODE",{});var D0t=s(Wbe);acr=r(D0t,"model.eval()"),D0t.forEach(t),ncr=r(RIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hbe=n(RIe,"CODE",{});var G0t=s(Hbe);scr=r(G0t,"model.train()"),G0t.forEach(t),RIe.forEach(t),lcr=i(Fa),T(HF.$$.fragment,Fa),Fa.forEach(t),hl.forEach(t),tXe=i(f),$d=n(f,"H2",{class:!0});var dQe=s($d);UF=n(dQe,"A",{id:!0,class:!0,href:!0});var O0t=s(UF);Ube=n(O0t,"SPAN",{});var V0t=s(Ube);T(Oy.$$.fragment,V0t),V0t.forEach(t),O0t.forEach(t),icr=i(dQe),Jbe=n(dQe,"SPAN",{});var X0t=s(Jbe);dcr=r(X0t,"AutoModelForAudioFrameClassification"),X0t.forEach(t),dQe.forEach(t),aXe=i(f),zo=n(f,"DIV",{class:!0});var pl=s(zo);T(Vy.$$.fragment,pl),ccr=i(pl),kd=n(pl,"P",{});var Gre=s(kd);fcr=r(Gre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),DW=n(Gre,"A",{href:!0});var z0t=s(DW);mcr=r(z0t,"from_pretrained()"),z0t.forEach(t),gcr=r(Gre," class method or the "),GW=n(Gre,"A",{href:!0});var Q0t=s(GW);hcr=r(Q0t,"from_config()"),Q0t.forEach(t),pcr=r(Gre,` class
method.`),Gre.forEach(t),_cr=i(pl),Xy=n(pl,"P",{});var cQe=s(Xy);ucr=r(cQe,"This class cannot be instantiated directly using "),Ybe=n(cQe,"CODE",{});var W0t=s(Ybe);bcr=r(W0t,"__init__()"),W0t.forEach(t),vcr=r(cQe," (throws an error)."),cQe.forEach(t),Fcr=i(pl),Mt=n(pl,"DIV",{class:!0});var yA=s(Mt);T(zy.$$.fragment,yA),Tcr=i(yA),Kbe=n(yA,"P",{});var H0t=s(Kbe);Mcr=r(H0t,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),H0t.forEach(t),Ecr=i(yA),Sd=n(yA,"P",{});var Ore=s(Sd);Ccr=r(Ore,`Note:
Loading a model from its configuration file does `),Zbe=n(Ore,"STRONG",{});var U0t=s(Zbe);wcr=r(U0t,"not"),U0t.forEach(t),Acr=r(Ore,` load the model weights. It only affects the
model\u2019s configuration. Use `),OW=n(Ore,"A",{href:!0});var J0t=s(OW);Lcr=r(J0t,"from_pretrained()"),J0t.forEach(t),ycr=r(Ore," to load the model weights."),Ore.forEach(t),xcr=i(yA),T(JF.$$.fragment,yA),yA.forEach(t),$cr=i(pl),mo=n(pl,"DIV",{class:!0});var Ta=s(mo);T(Qy.$$.fragment,Ta),kcr=i(Ta),eve=n(Ta,"P",{});var Y0t=s(eve);Scr=r(Y0t,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Y0t.forEach(t),Rcr=i(Ta),Ua=n(Ta,"P",{});var xA=s(Ua);Pcr=r(xA,"The model class to instantiate is selected based on the "),ove=n(xA,"CODE",{});var K0t=s(ove);Bcr=r(K0t,"model_type"),K0t.forEach(t),Icr=r(xA,` property of the config object (either
passed as an argument or loaded from `),rve=n(xA,"CODE",{});var Z0t=s(rve);Ncr=r(Z0t,"pretrained_model_name_or_path"),Z0t.forEach(t),qcr=r(xA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tve=n(xA,"CODE",{});var ewt=s(tve);jcr=r(ewt,"pretrained_model_name_or_path"),ewt.forEach(t),Dcr=r(xA,":"),xA.forEach(t),Gcr=i(Ta),et=n(Ta,"UL",{});var _l=s(et);YF=n(_l,"LI",{});var PIe=s(YF);ave=n(PIe,"STRONG",{});var owt=s(ave);Ocr=r(owt,"data2vec-audio"),owt.forEach(t),Vcr=r(PIe," \u2014 "),VW=n(PIe,"A",{href:!0});var rwt=s(VW);Xcr=r(rwt,"Data2VecAudioForAudioFrameClassification"),rwt.forEach(t),zcr=r(PIe," (Data2VecAudio model)"),PIe.forEach(t),Qcr=i(_l),KF=n(_l,"LI",{});var BIe=s(KF);nve=n(BIe,"STRONG",{});var twt=s(nve);Wcr=r(twt,"unispeech-sat"),twt.forEach(t),Hcr=r(BIe," \u2014 "),XW=n(BIe,"A",{href:!0});var awt=s(XW);Ucr=r(awt,"UniSpeechSatForAudioFrameClassification"),awt.forEach(t),Jcr=r(BIe," (UniSpeechSat model)"),BIe.forEach(t),Ycr=i(_l),ZF=n(_l,"LI",{});var IIe=s(ZF);sve=n(IIe,"STRONG",{});var nwt=s(sve);Kcr=r(nwt,"wav2vec2"),nwt.forEach(t),Zcr=r(IIe," \u2014 "),zW=n(IIe,"A",{href:!0});var swt=s(zW);efr=r(swt,"Wav2Vec2ForAudioFrameClassification"),swt.forEach(t),ofr=r(IIe," (Wav2Vec2 model)"),IIe.forEach(t),rfr=i(_l),eT=n(_l,"LI",{});var NIe=s(eT);lve=n(NIe,"STRONG",{});var lwt=s(lve);tfr=r(lwt,"wav2vec2-conformer"),lwt.forEach(t),afr=r(NIe," \u2014 "),QW=n(NIe,"A",{href:!0});var iwt=s(QW);nfr=r(iwt,"Wav2Vec2ConformerForAudioFrameClassification"),iwt.forEach(t),sfr=r(NIe," (Wav2Vec2-Conformer model)"),NIe.forEach(t),lfr=i(_l),oT=n(_l,"LI",{});var qIe=s(oT);ive=n(qIe,"STRONG",{});var dwt=s(ive);ifr=r(dwt,"wavlm"),dwt.forEach(t),dfr=r(qIe," \u2014 "),WW=n(qIe,"A",{href:!0});var cwt=s(WW);cfr=r(cwt,"WavLMForAudioFrameClassification"),cwt.forEach(t),ffr=r(qIe," (WavLM model)"),qIe.forEach(t),_l.forEach(t),mfr=i(Ta),rT=n(Ta,"P",{});var jIe=s(rT);gfr=r(jIe,"The model is set in evaluation mode by default using "),dve=n(jIe,"CODE",{});var fwt=s(dve);hfr=r(fwt,"model.eval()"),fwt.forEach(t),pfr=r(jIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cve=n(jIe,"CODE",{});var mwt=s(cve);_fr=r(mwt,"model.train()"),mwt.forEach(t),jIe.forEach(t),ufr=i(Ta),T(tT.$$.fragment,Ta),Ta.forEach(t),pl.forEach(t),nXe=i(f),Rd=n(f,"H2",{class:!0});var fQe=s(Rd);aT=n(fQe,"A",{id:!0,class:!0,href:!0});var gwt=s(aT);fve=n(gwt,"SPAN",{});var hwt=s(fve);T(Wy.$$.fragment,hwt),hwt.forEach(t),gwt.forEach(t),bfr=i(fQe),mve=n(fQe,"SPAN",{});var pwt=s(mve);vfr=r(pwt,"AutoModelForCTC"),pwt.forEach(t),fQe.forEach(t),sXe=i(f),Qo=n(f,"DIV",{class:!0});var ul=s(Qo);T(Hy.$$.fragment,ul),Ffr=i(ul),Pd=n(ul,"P",{});var Vre=s(Pd);Tfr=r(Vre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),HW=n(Vre,"A",{href:!0});var _wt=s(HW);Mfr=r(_wt,"from_pretrained()"),_wt.forEach(t),Efr=r(Vre," class method or the "),UW=n(Vre,"A",{href:!0});var uwt=s(UW);Cfr=r(uwt,"from_config()"),uwt.forEach(t),wfr=r(Vre,` class
method.`),Vre.forEach(t),Afr=i(ul),Uy=n(ul,"P",{});var mQe=s(Uy);Lfr=r(mQe,"This class cannot be instantiated directly using "),gve=n(mQe,"CODE",{});var bwt=s(gve);yfr=r(bwt,"__init__()"),bwt.forEach(t),xfr=r(mQe," (throws an error)."),mQe.forEach(t),$fr=i(ul),Et=n(ul,"DIV",{class:!0});var $A=s(Et);T(Jy.$$.fragment,$A),kfr=i($A),hve=n($A,"P",{});var vwt=s(hve);Sfr=r(vwt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),vwt.forEach(t),Rfr=i($A),Bd=n($A,"P",{});var Xre=s(Bd);Pfr=r(Xre,`Note:
Loading a model from its configuration file does `),pve=n(Xre,"STRONG",{});var Fwt=s(pve);Bfr=r(Fwt,"not"),Fwt.forEach(t),Ifr=r(Xre,` load the model weights. It only affects the
model\u2019s configuration. Use `),JW=n(Xre,"A",{href:!0});var Twt=s(JW);Nfr=r(Twt,"from_pretrained()"),Twt.forEach(t),qfr=r(Xre," to load the model weights."),Xre.forEach(t),jfr=i($A),T(nT.$$.fragment,$A),$A.forEach(t),Dfr=i(ul),go=n(ul,"DIV",{class:!0});var Ma=s(go);T(Yy.$$.fragment,Ma),Gfr=i(Ma),_ve=n(Ma,"P",{});var Mwt=s(_ve);Ofr=r(Mwt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Mwt.forEach(t),Vfr=i(Ma),Ja=n(Ma,"P",{});var kA=s(Ja);Xfr=r(kA,"The model class to instantiate is selected based on the "),uve=n(kA,"CODE",{});var Ewt=s(uve);zfr=r(Ewt,"model_type"),Ewt.forEach(t),Qfr=r(kA,` property of the config object (either
passed as an argument or loaded from `),bve=n(kA,"CODE",{});var Cwt=s(bve);Wfr=r(Cwt,"pretrained_model_name_or_path"),Cwt.forEach(t),Hfr=r(kA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vve=n(kA,"CODE",{});var wwt=s(vve);Ufr=r(wwt,"pretrained_model_name_or_path"),wwt.forEach(t),Jfr=r(kA,":"),kA.forEach(t),Yfr=i(Ma),Le=n(Ma,"UL",{});var Be=s(Le);sT=n(Be,"LI",{});var DIe=s(sT);Fve=n(DIe,"STRONG",{});var Awt=s(Fve);Kfr=r(Awt,"data2vec-audio"),Awt.forEach(t),Zfr=r(DIe," \u2014 "),YW=n(DIe,"A",{href:!0});var Lwt=s(YW);emr=r(Lwt,"Data2VecAudioForCTC"),Lwt.forEach(t),omr=r(DIe," (Data2VecAudio model)"),DIe.forEach(t),rmr=i(Be),lT=n(Be,"LI",{});var GIe=s(lT);Tve=n(GIe,"STRONG",{});var ywt=s(Tve);tmr=r(ywt,"hubert"),ywt.forEach(t),amr=r(GIe," \u2014 "),KW=n(GIe,"A",{href:!0});var xwt=s(KW);nmr=r(xwt,"HubertForCTC"),xwt.forEach(t),smr=r(GIe," (Hubert model)"),GIe.forEach(t),lmr=i(Be),iT=n(Be,"LI",{});var OIe=s(iT);Mve=n(OIe,"STRONG",{});var $wt=s(Mve);imr=r($wt,"mctct"),$wt.forEach(t),dmr=r(OIe," \u2014 "),ZW=n(OIe,"A",{href:!0});var kwt=s(ZW);cmr=r(kwt,"MCTCTForCTC"),kwt.forEach(t),fmr=r(OIe," (M-CTC-T model)"),OIe.forEach(t),mmr=i(Be),dT=n(Be,"LI",{});var VIe=s(dT);Eve=n(VIe,"STRONG",{});var Swt=s(Eve);gmr=r(Swt,"sew"),Swt.forEach(t),hmr=r(VIe," \u2014 "),eH=n(VIe,"A",{href:!0});var Rwt=s(eH);pmr=r(Rwt,"SEWForCTC"),Rwt.forEach(t),_mr=r(VIe," (SEW model)"),VIe.forEach(t),umr=i(Be),cT=n(Be,"LI",{});var XIe=s(cT);Cve=n(XIe,"STRONG",{});var Pwt=s(Cve);bmr=r(Pwt,"sew-d"),Pwt.forEach(t),vmr=r(XIe," \u2014 "),oH=n(XIe,"A",{href:!0});var Bwt=s(oH);Fmr=r(Bwt,"SEWDForCTC"),Bwt.forEach(t),Tmr=r(XIe," (SEW-D model)"),XIe.forEach(t),Mmr=i(Be),fT=n(Be,"LI",{});var zIe=s(fT);wve=n(zIe,"STRONG",{});var Iwt=s(wve);Emr=r(Iwt,"unispeech"),Iwt.forEach(t),Cmr=r(zIe," \u2014 "),rH=n(zIe,"A",{href:!0});var Nwt=s(rH);wmr=r(Nwt,"UniSpeechForCTC"),Nwt.forEach(t),Amr=r(zIe," (UniSpeech model)"),zIe.forEach(t),Lmr=i(Be),mT=n(Be,"LI",{});var QIe=s(mT);Ave=n(QIe,"STRONG",{});var qwt=s(Ave);ymr=r(qwt,"unispeech-sat"),qwt.forEach(t),xmr=r(QIe," \u2014 "),tH=n(QIe,"A",{href:!0});var jwt=s(tH);$mr=r(jwt,"UniSpeechSatForCTC"),jwt.forEach(t),kmr=r(QIe," (UniSpeechSat model)"),QIe.forEach(t),Smr=i(Be),gT=n(Be,"LI",{});var WIe=s(gT);Lve=n(WIe,"STRONG",{});var Dwt=s(Lve);Rmr=r(Dwt,"wav2vec2"),Dwt.forEach(t),Pmr=r(WIe," \u2014 "),aH=n(WIe,"A",{href:!0});var Gwt=s(aH);Bmr=r(Gwt,"Wav2Vec2ForCTC"),Gwt.forEach(t),Imr=r(WIe," (Wav2Vec2 model)"),WIe.forEach(t),Nmr=i(Be),hT=n(Be,"LI",{});var HIe=s(hT);yve=n(HIe,"STRONG",{});var Owt=s(yve);qmr=r(Owt,"wav2vec2-conformer"),Owt.forEach(t),jmr=r(HIe," \u2014 "),nH=n(HIe,"A",{href:!0});var Vwt=s(nH);Dmr=r(Vwt,"Wav2Vec2ConformerForCTC"),Vwt.forEach(t),Gmr=r(HIe," (Wav2Vec2-Conformer model)"),HIe.forEach(t),Omr=i(Be),pT=n(Be,"LI",{});var UIe=s(pT);xve=n(UIe,"STRONG",{});var Xwt=s(xve);Vmr=r(Xwt,"wavlm"),Xwt.forEach(t),Xmr=r(UIe," \u2014 "),sH=n(UIe,"A",{href:!0});var zwt=s(sH);zmr=r(zwt,"WavLMForCTC"),zwt.forEach(t),Qmr=r(UIe," (WavLM model)"),UIe.forEach(t),Be.forEach(t),Wmr=i(Ma),_T=n(Ma,"P",{});var JIe=s(_T);Hmr=r(JIe,"The model is set in evaluation mode by default using "),$ve=n(JIe,"CODE",{});var Qwt=s($ve);Umr=r(Qwt,"model.eval()"),Qwt.forEach(t),Jmr=r(JIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kve=n(JIe,"CODE",{});var Wwt=s(kve);Ymr=r(Wwt,"model.train()"),Wwt.forEach(t),JIe.forEach(t),Kmr=i(Ma),T(uT.$$.fragment,Ma),Ma.forEach(t),ul.forEach(t),lXe=i(f),Id=n(f,"H2",{class:!0});var gQe=s(Id);bT=n(gQe,"A",{id:!0,class:!0,href:!0});var Hwt=s(bT);Sve=n(Hwt,"SPAN",{});var Uwt=s(Sve);T(Ky.$$.fragment,Uwt),Uwt.forEach(t),Hwt.forEach(t),Zmr=i(gQe),Rve=n(gQe,"SPAN",{});var Jwt=s(Rve);egr=r(Jwt,"AutoModelForSpeechSeq2Seq"),Jwt.forEach(t),gQe.forEach(t),iXe=i(f),Wo=n(f,"DIV",{class:!0});var bl=s(Wo);T(Zy.$$.fragment,bl),ogr=i(bl),Nd=n(bl,"P",{});var zre=s(Nd);rgr=r(zre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),lH=n(zre,"A",{href:!0});var Ywt=s(lH);tgr=r(Ywt,"from_pretrained()"),Ywt.forEach(t),agr=r(zre," class method or the "),iH=n(zre,"A",{href:!0});var Kwt=s(iH);ngr=r(Kwt,"from_config()"),Kwt.forEach(t),sgr=r(zre,` class
method.`),zre.forEach(t),lgr=i(bl),e8=n(bl,"P",{});var hQe=s(e8);igr=r(hQe,"This class cannot be instantiated directly using "),Pve=n(hQe,"CODE",{});var Zwt=s(Pve);dgr=r(Zwt,"__init__()"),Zwt.forEach(t),cgr=r(hQe," (throws an error)."),hQe.forEach(t),fgr=i(bl),Ct=n(bl,"DIV",{class:!0});var SA=s(Ct);T(o8.$$.fragment,SA),mgr=i(SA),Bve=n(SA,"P",{});var eAt=s(Bve);ggr=r(eAt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),eAt.forEach(t),hgr=i(SA),qd=n(SA,"P",{});var Qre=s(qd);pgr=r(Qre,`Note:
Loading a model from its configuration file does `),Ive=n(Qre,"STRONG",{});var oAt=s(Ive);_gr=r(oAt,"not"),oAt.forEach(t),ugr=r(Qre,` load the model weights. It only affects the
model\u2019s configuration. Use `),dH=n(Qre,"A",{href:!0});var rAt=s(dH);bgr=r(rAt,"from_pretrained()"),rAt.forEach(t),vgr=r(Qre," to load the model weights."),Qre.forEach(t),Fgr=i(SA),T(vT.$$.fragment,SA),SA.forEach(t),Tgr=i(bl),ho=n(bl,"DIV",{class:!0});var Ea=s(ho);T(r8.$$.fragment,Ea),Mgr=i(Ea),Nve=n(Ea,"P",{});var tAt=s(Nve);Egr=r(tAt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),tAt.forEach(t),Cgr=i(Ea),Ya=n(Ea,"P",{});var RA=s(Ya);wgr=r(RA,"The model class to instantiate is selected based on the "),qve=n(RA,"CODE",{});var aAt=s(qve);Agr=r(aAt,"model_type"),aAt.forEach(t),Lgr=r(RA,` property of the config object (either
passed as an argument or loaded from `),jve=n(RA,"CODE",{});var nAt=s(jve);ygr=r(nAt,"pretrained_model_name_or_path"),nAt.forEach(t),xgr=r(RA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dve=n(RA,"CODE",{});var sAt=s(Dve);$gr=r(sAt,"pretrained_model_name_or_path"),sAt.forEach(t),kgr=r(RA,":"),RA.forEach(t),Sgr=i(Ea),t8=n(Ea,"UL",{});var pQe=s(t8);FT=n(pQe,"LI",{});var YIe=s(FT);Gve=n(YIe,"STRONG",{});var lAt=s(Gve);Rgr=r(lAt,"speech-encoder-decoder"),lAt.forEach(t),Pgr=r(YIe," \u2014 "),cH=n(YIe,"A",{href:!0});var iAt=s(cH);Bgr=r(iAt,"SpeechEncoderDecoderModel"),iAt.forEach(t),Igr=r(YIe," (Speech Encoder decoder model)"),YIe.forEach(t),Ngr=i(pQe),TT=n(pQe,"LI",{});var KIe=s(TT);Ove=n(KIe,"STRONG",{});var dAt=s(Ove);qgr=r(dAt,"speech_to_text"),dAt.forEach(t),jgr=r(KIe," \u2014 "),fH=n(KIe,"A",{href:!0});var cAt=s(fH);Dgr=r(cAt,"Speech2TextForConditionalGeneration"),cAt.forEach(t),Ggr=r(KIe," (Speech2Text model)"),KIe.forEach(t),pQe.forEach(t),Ogr=i(Ea),MT=n(Ea,"P",{});var ZIe=s(MT);Vgr=r(ZIe,"The model is set in evaluation mode by default using "),Vve=n(ZIe,"CODE",{});var fAt=s(Vve);Xgr=r(fAt,"model.eval()"),fAt.forEach(t),zgr=r(ZIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xve=n(ZIe,"CODE",{});var mAt=s(Xve);Qgr=r(mAt,"model.train()"),mAt.forEach(t),ZIe.forEach(t),Wgr=i(Ea),T(ET.$$.fragment,Ea),Ea.forEach(t),bl.forEach(t),dXe=i(f),jd=n(f,"H2",{class:!0});var _Qe=s(jd);CT=n(_Qe,"A",{id:!0,class:!0,href:!0});var gAt=s(CT);zve=n(gAt,"SPAN",{});var hAt=s(zve);T(a8.$$.fragment,hAt),hAt.forEach(t),gAt.forEach(t),Hgr=i(_Qe),Qve=n(_Qe,"SPAN",{});var pAt=s(Qve);Ugr=r(pAt,"AutoModelForAudioXVector"),pAt.forEach(t),_Qe.forEach(t),cXe=i(f),Ho=n(f,"DIV",{class:!0});var vl=s(Ho);T(n8.$$.fragment,vl),Jgr=i(vl),Dd=n(vl,"P",{});var Wre=s(Dd);Ygr=r(Wre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),mH=n(Wre,"A",{href:!0});var _At=s(mH);Kgr=r(_At,"from_pretrained()"),_At.forEach(t),Zgr=r(Wre," class method or the "),gH=n(Wre,"A",{href:!0});var uAt=s(gH);ehr=r(uAt,"from_config()"),uAt.forEach(t),ohr=r(Wre,` class
method.`),Wre.forEach(t),rhr=i(vl),s8=n(vl,"P",{});var uQe=s(s8);thr=r(uQe,"This class cannot be instantiated directly using "),Wve=n(uQe,"CODE",{});var bAt=s(Wve);ahr=r(bAt,"__init__()"),bAt.forEach(t),nhr=r(uQe," (throws an error)."),uQe.forEach(t),shr=i(vl),wt=n(vl,"DIV",{class:!0});var PA=s(wt);T(l8.$$.fragment,PA),lhr=i(PA),Hve=n(PA,"P",{});var vAt=s(Hve);ihr=r(vAt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),vAt.forEach(t),dhr=i(PA),Gd=n(PA,"P",{});var Hre=s(Gd);chr=r(Hre,`Note:
Loading a model from its configuration file does `),Uve=n(Hre,"STRONG",{});var FAt=s(Uve);fhr=r(FAt,"not"),FAt.forEach(t),mhr=r(Hre,` load the model weights. It only affects the
model\u2019s configuration. Use `),hH=n(Hre,"A",{href:!0});var TAt=s(hH);ghr=r(TAt,"from_pretrained()"),TAt.forEach(t),hhr=r(Hre," to load the model weights."),Hre.forEach(t),phr=i(PA),T(wT.$$.fragment,PA),PA.forEach(t),_hr=i(vl),po=n(vl,"DIV",{class:!0});var Ca=s(po);T(i8.$$.fragment,Ca),uhr=i(Ca),Jve=n(Ca,"P",{});var MAt=s(Jve);bhr=r(MAt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),MAt.forEach(t),vhr=i(Ca),Ka=n(Ca,"P",{});var BA=s(Ka);Fhr=r(BA,"The model class to instantiate is selected based on the "),Yve=n(BA,"CODE",{});var EAt=s(Yve);Thr=r(EAt,"model_type"),EAt.forEach(t),Mhr=r(BA,` property of the config object (either
passed as an argument or loaded from `),Kve=n(BA,"CODE",{});var CAt=s(Kve);Ehr=r(CAt,"pretrained_model_name_or_path"),CAt.forEach(t),Chr=r(BA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zve=n(BA,"CODE",{});var wAt=s(Zve);whr=r(wAt,"pretrained_model_name_or_path"),wAt.forEach(t),Ahr=r(BA,":"),BA.forEach(t),Lhr=i(Ca),ot=n(Ca,"UL",{});var Fl=s(ot);AT=n(Fl,"LI",{});var eNe=s(AT);e3e=n(eNe,"STRONG",{});var AAt=s(e3e);yhr=r(AAt,"data2vec-audio"),AAt.forEach(t),xhr=r(eNe," \u2014 "),pH=n(eNe,"A",{href:!0});var LAt=s(pH);$hr=r(LAt,"Data2VecAudioForXVector"),LAt.forEach(t),khr=r(eNe," (Data2VecAudio model)"),eNe.forEach(t),Shr=i(Fl),LT=n(Fl,"LI",{});var oNe=s(LT);o3e=n(oNe,"STRONG",{});var yAt=s(o3e);Rhr=r(yAt,"unispeech-sat"),yAt.forEach(t),Phr=r(oNe," \u2014 "),_H=n(oNe,"A",{href:!0});var xAt=s(_H);Bhr=r(xAt,"UniSpeechSatForXVector"),xAt.forEach(t),Ihr=r(oNe," (UniSpeechSat model)"),oNe.forEach(t),Nhr=i(Fl),yT=n(Fl,"LI",{});var rNe=s(yT);r3e=n(rNe,"STRONG",{});var $At=s(r3e);qhr=r($At,"wav2vec2"),$At.forEach(t),jhr=r(rNe," \u2014 "),uH=n(rNe,"A",{href:!0});var kAt=s(uH);Dhr=r(kAt,"Wav2Vec2ForXVector"),kAt.forEach(t),Ghr=r(rNe," (Wav2Vec2 model)"),rNe.forEach(t),Ohr=i(Fl),xT=n(Fl,"LI",{});var tNe=s(xT);t3e=n(tNe,"STRONG",{});var SAt=s(t3e);Vhr=r(SAt,"wav2vec2-conformer"),SAt.forEach(t),Xhr=r(tNe," \u2014 "),bH=n(tNe,"A",{href:!0});var RAt=s(bH);zhr=r(RAt,"Wav2Vec2ConformerForXVector"),RAt.forEach(t),Qhr=r(tNe," (Wav2Vec2-Conformer model)"),tNe.forEach(t),Whr=i(Fl),$T=n(Fl,"LI",{});var aNe=s($T);a3e=n(aNe,"STRONG",{});var PAt=s(a3e);Hhr=r(PAt,"wavlm"),PAt.forEach(t),Uhr=r(aNe," \u2014 "),vH=n(aNe,"A",{href:!0});var BAt=s(vH);Jhr=r(BAt,"WavLMForXVector"),BAt.forEach(t),Yhr=r(aNe," (WavLM model)"),aNe.forEach(t),Fl.forEach(t),Khr=i(Ca),kT=n(Ca,"P",{});var nNe=s(kT);Zhr=r(nNe,"The model is set in evaluation mode by default using "),n3e=n(nNe,"CODE",{});var IAt=s(n3e);epr=r(IAt,"model.eval()"),IAt.forEach(t),opr=r(nNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),s3e=n(nNe,"CODE",{});var NAt=s(s3e);rpr=r(NAt,"model.train()"),NAt.forEach(t),nNe.forEach(t),tpr=i(Ca),T(ST.$$.fragment,Ca),Ca.forEach(t),vl.forEach(t),fXe=i(f),Od=n(f,"H2",{class:!0});var bQe=s(Od);RT=n(bQe,"A",{id:!0,class:!0,href:!0});var qAt=s(RT);l3e=n(qAt,"SPAN",{});var jAt=s(l3e);T(d8.$$.fragment,jAt),jAt.forEach(t),qAt.forEach(t),apr=i(bQe),i3e=n(bQe,"SPAN",{});var DAt=s(i3e);npr=r(DAt,"AutoModelForMaskedImageModeling"),DAt.forEach(t),bQe.forEach(t),mXe=i(f),Uo=n(f,"DIV",{class:!0});var Tl=s(Uo);T(c8.$$.fragment,Tl),spr=i(Tl),Vd=n(Tl,"P",{});var Ure=s(Vd);lpr=r(Ure,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),FH=n(Ure,"A",{href:!0});var GAt=s(FH);ipr=r(GAt,"from_pretrained()"),GAt.forEach(t),dpr=r(Ure," class method or the "),TH=n(Ure,"A",{href:!0});var OAt=s(TH);cpr=r(OAt,"from_config()"),OAt.forEach(t),fpr=r(Ure,` class
method.`),Ure.forEach(t),mpr=i(Tl),f8=n(Tl,"P",{});var vQe=s(f8);gpr=r(vQe,"This class cannot be instantiated directly using "),d3e=n(vQe,"CODE",{});var VAt=s(d3e);hpr=r(VAt,"__init__()"),VAt.forEach(t),ppr=r(vQe," (throws an error)."),vQe.forEach(t),_pr=i(Tl),At=n(Tl,"DIV",{class:!0});var IA=s(At);T(m8.$$.fragment,IA),upr=i(IA),c3e=n(IA,"P",{});var XAt=s(c3e);bpr=r(XAt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),XAt.forEach(t),vpr=i(IA),Xd=n(IA,"P",{});var Jre=s(Xd);Fpr=r(Jre,`Note:
Loading a model from its configuration file does `),f3e=n(Jre,"STRONG",{});var zAt=s(f3e);Tpr=r(zAt,"not"),zAt.forEach(t),Mpr=r(Jre,` load the model weights. It only affects the
model\u2019s configuration. Use `),MH=n(Jre,"A",{href:!0});var QAt=s(MH);Epr=r(QAt,"from_pretrained()"),QAt.forEach(t),Cpr=r(Jre," to load the model weights."),Jre.forEach(t),wpr=i(IA),T(PT.$$.fragment,IA),IA.forEach(t),Apr=i(Tl),_o=n(Tl,"DIV",{class:!0});var wa=s(_o);T(g8.$$.fragment,wa),Lpr=i(wa),m3e=n(wa,"P",{});var WAt=s(m3e);ypr=r(WAt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),WAt.forEach(t),xpr=i(wa),Za=n(wa,"P",{});var NA=s(Za);$pr=r(NA,"The model class to instantiate is selected based on the "),g3e=n(NA,"CODE",{});var HAt=s(g3e);kpr=r(HAt,"model_type"),HAt.forEach(t),Spr=r(NA,` property of the config object (either
passed as an argument or loaded from `),h3e=n(NA,"CODE",{});var UAt=s(h3e);Rpr=r(UAt,"pretrained_model_name_or_path"),UAt.forEach(t),Ppr=r(NA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p3e=n(NA,"CODE",{});var JAt=s(p3e);Bpr=r(JAt,"pretrained_model_name_or_path"),JAt.forEach(t),Ipr=r(NA,":"),NA.forEach(t),Npr=i(wa),zd=n(wa,"UL",{});var Yre=s(zd);BT=n(Yre,"LI",{});var sNe=s(BT);_3e=n(sNe,"STRONG",{});var YAt=s(_3e);qpr=r(YAt,"deit"),YAt.forEach(t),jpr=r(sNe," \u2014 "),EH=n(sNe,"A",{href:!0});var KAt=s(EH);Dpr=r(KAt,"DeiTForMaskedImageModeling"),KAt.forEach(t),Gpr=r(sNe," (DeiT model)"),sNe.forEach(t),Opr=i(Yre),IT=n(Yre,"LI",{});var lNe=s(IT);u3e=n(lNe,"STRONG",{});var ZAt=s(u3e);Vpr=r(ZAt,"swin"),ZAt.forEach(t),Xpr=r(lNe," \u2014 "),CH=n(lNe,"A",{href:!0});var e6t=s(CH);zpr=r(e6t,"SwinForMaskedImageModeling"),e6t.forEach(t),Qpr=r(lNe," (Swin Transformer model)"),lNe.forEach(t),Wpr=i(Yre),NT=n(Yre,"LI",{});var iNe=s(NT);b3e=n(iNe,"STRONG",{});var o6t=s(b3e);Hpr=r(o6t,"vit"),o6t.forEach(t),Upr=r(iNe," \u2014 "),wH=n(iNe,"A",{href:!0});var r6t=s(wH);Jpr=r(r6t,"ViTForMaskedImageModeling"),r6t.forEach(t),Ypr=r(iNe," (ViT model)"),iNe.forEach(t),Yre.forEach(t),Kpr=i(wa),qT=n(wa,"P",{});var dNe=s(qT);Zpr=r(dNe,"The model is set in evaluation mode by default using "),v3e=n(dNe,"CODE",{});var t6t=s(v3e);e_r=r(t6t,"model.eval()"),t6t.forEach(t),o_r=r(dNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),F3e=n(dNe,"CODE",{});var a6t=s(F3e);r_r=r(a6t,"model.train()"),a6t.forEach(t),dNe.forEach(t),t_r=i(wa),T(jT.$$.fragment,wa),wa.forEach(t),Tl.forEach(t),gXe=i(f),Qd=n(f,"H2",{class:!0});var FQe=s(Qd);DT=n(FQe,"A",{id:!0,class:!0,href:!0});var n6t=s(DT);T3e=n(n6t,"SPAN",{});var s6t=s(T3e);T(h8.$$.fragment,s6t),s6t.forEach(t),n6t.forEach(t),a_r=i(FQe),M3e=n(FQe,"SPAN",{});var l6t=s(M3e);n_r=r(l6t,"AutoModelForObjectDetection"),l6t.forEach(t),FQe.forEach(t),hXe=i(f),Jo=n(f,"DIV",{class:!0});var Ml=s(Jo);T(p8.$$.fragment,Ml),s_r=i(Ml),Wd=n(Ml,"P",{});var Kre=s(Wd);l_r=r(Kre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),AH=n(Kre,"A",{href:!0});var i6t=s(AH);i_r=r(i6t,"from_pretrained()"),i6t.forEach(t),d_r=r(Kre," class method or the "),LH=n(Kre,"A",{href:!0});var d6t=s(LH);c_r=r(d6t,"from_config()"),d6t.forEach(t),f_r=r(Kre,` class
method.`),Kre.forEach(t),m_r=i(Ml),_8=n(Ml,"P",{});var TQe=s(_8);g_r=r(TQe,"This class cannot be instantiated directly using "),E3e=n(TQe,"CODE",{});var c6t=s(E3e);h_r=r(c6t,"__init__()"),c6t.forEach(t),p_r=r(TQe," (throws an error)."),TQe.forEach(t),__r=i(Ml),Lt=n(Ml,"DIV",{class:!0});var qA=s(Lt);T(u8.$$.fragment,qA),u_r=i(qA),C3e=n(qA,"P",{});var f6t=s(C3e);b_r=r(f6t,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),f6t.forEach(t),v_r=i(qA),Hd=n(qA,"P",{});var Zre=s(Hd);F_r=r(Zre,`Note:
Loading a model from its configuration file does `),w3e=n(Zre,"STRONG",{});var m6t=s(w3e);T_r=r(m6t,"not"),m6t.forEach(t),M_r=r(Zre,` load the model weights. It only affects the
model\u2019s configuration. Use `),yH=n(Zre,"A",{href:!0});var g6t=s(yH);E_r=r(g6t,"from_pretrained()"),g6t.forEach(t),C_r=r(Zre," to load the model weights."),Zre.forEach(t),w_r=i(qA),T(GT.$$.fragment,qA),qA.forEach(t),A_r=i(Ml),uo=n(Ml,"DIV",{class:!0});var Aa=s(uo);T(b8.$$.fragment,Aa),L_r=i(Aa),A3e=n(Aa,"P",{});var h6t=s(A3e);y_r=r(h6t,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),h6t.forEach(t),x_r=i(Aa),en=n(Aa,"P",{});var jA=s(en);$_r=r(jA,"The model class to instantiate is selected based on the "),L3e=n(jA,"CODE",{});var p6t=s(L3e);k_r=r(p6t,"model_type"),p6t.forEach(t),S_r=r(jA,` property of the config object (either
passed as an argument or loaded from `),y3e=n(jA,"CODE",{});var _6t=s(y3e);R_r=r(_6t,"pretrained_model_name_or_path"),_6t.forEach(t),P_r=r(jA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x3e=n(jA,"CODE",{});var u6t=s(x3e);B_r=r(u6t,"pretrained_model_name_or_path"),u6t.forEach(t),I_r=r(jA,":"),jA.forEach(t),N_r=i(Aa),v8=n(Aa,"UL",{});var MQe=s(v8);OT=n(MQe,"LI",{});var cNe=s(OT);$3e=n(cNe,"STRONG",{});var b6t=s($3e);q_r=r(b6t,"detr"),b6t.forEach(t),j_r=r(cNe," \u2014 "),xH=n(cNe,"A",{href:!0});var v6t=s(xH);D_r=r(v6t,"DetrForObjectDetection"),v6t.forEach(t),G_r=r(cNe," (DETR model)"),cNe.forEach(t),O_r=i(MQe),VT=n(MQe,"LI",{});var fNe=s(VT);k3e=n(fNe,"STRONG",{});var F6t=s(k3e);V_r=r(F6t,"yolos"),F6t.forEach(t),X_r=r(fNe," \u2014 "),$H=n(fNe,"A",{href:!0});var T6t=s($H);z_r=r(T6t,"YolosForObjectDetection"),T6t.forEach(t),Q_r=r(fNe," (YOLOS model)"),fNe.forEach(t),MQe.forEach(t),W_r=i(Aa),XT=n(Aa,"P",{});var mNe=s(XT);H_r=r(mNe,"The model is set in evaluation mode by default using "),S3e=n(mNe,"CODE",{});var M6t=s(S3e);U_r=r(M6t,"model.eval()"),M6t.forEach(t),J_r=r(mNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),R3e=n(mNe,"CODE",{});var E6t=s(R3e);Y_r=r(E6t,"model.train()"),E6t.forEach(t),mNe.forEach(t),K_r=i(Aa),T(zT.$$.fragment,Aa),Aa.forEach(t),Ml.forEach(t),pXe=i(f),Ud=n(f,"H2",{class:!0});var EQe=s(Ud);QT=n(EQe,"A",{id:!0,class:!0,href:!0});var C6t=s(QT);P3e=n(C6t,"SPAN",{});var w6t=s(P3e);T(F8.$$.fragment,w6t),w6t.forEach(t),C6t.forEach(t),Z_r=i(EQe),B3e=n(EQe,"SPAN",{});var A6t=s(B3e);eur=r(A6t,"AutoModelForImageSegmentation"),A6t.forEach(t),EQe.forEach(t),_Xe=i(f),Yo=n(f,"DIV",{class:!0});var El=s(Yo);T(T8.$$.fragment,El),our=i(El),Jd=n(El,"P",{});var ete=s(Jd);rur=r(ete,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),kH=n(ete,"A",{href:!0});var L6t=s(kH);tur=r(L6t,"from_pretrained()"),L6t.forEach(t),aur=r(ete," class method or the "),SH=n(ete,"A",{href:!0});var y6t=s(SH);nur=r(y6t,"from_config()"),y6t.forEach(t),sur=r(ete,` class
method.`),ete.forEach(t),lur=i(El),M8=n(El,"P",{});var CQe=s(M8);iur=r(CQe,"This class cannot be instantiated directly using "),I3e=n(CQe,"CODE",{});var x6t=s(I3e);dur=r(x6t,"__init__()"),x6t.forEach(t),cur=r(CQe," (throws an error)."),CQe.forEach(t),fur=i(El),yt=n(El,"DIV",{class:!0});var DA=s(yt);T(E8.$$.fragment,DA),mur=i(DA),N3e=n(DA,"P",{});var $6t=s(N3e);gur=r($6t,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),$6t.forEach(t),hur=i(DA),Yd=n(DA,"P",{});var ote=s(Yd);pur=r(ote,`Note:
Loading a model from its configuration file does `),q3e=n(ote,"STRONG",{});var k6t=s(q3e);_ur=r(k6t,"not"),k6t.forEach(t),uur=r(ote,` load the model weights. It only affects the
model\u2019s configuration. Use `),RH=n(ote,"A",{href:!0});var S6t=s(RH);bur=r(S6t,"from_pretrained()"),S6t.forEach(t),vur=r(ote," to load the model weights."),ote.forEach(t),Fur=i(DA),T(WT.$$.fragment,DA),DA.forEach(t),Tur=i(El),bo=n(El,"DIV",{class:!0});var La=s(bo);T(C8.$$.fragment,La),Mur=i(La),j3e=n(La,"P",{});var R6t=s(j3e);Eur=r(R6t,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),R6t.forEach(t),Cur=i(La),on=n(La,"P",{});var GA=s(on);wur=r(GA,"The model class to instantiate is selected based on the "),D3e=n(GA,"CODE",{});var P6t=s(D3e);Aur=r(P6t,"model_type"),P6t.forEach(t),Lur=r(GA,` property of the config object (either
passed as an argument or loaded from `),G3e=n(GA,"CODE",{});var B6t=s(G3e);yur=r(B6t,"pretrained_model_name_or_path"),B6t.forEach(t),xur=r(GA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O3e=n(GA,"CODE",{});var I6t=s(O3e);$ur=r(I6t,"pretrained_model_name_or_path"),I6t.forEach(t),kur=r(GA,":"),GA.forEach(t),Sur=i(La),V3e=n(La,"UL",{});var N6t=s(V3e);HT=n(N6t,"LI",{});var gNe=s(HT);X3e=n(gNe,"STRONG",{});var q6t=s(X3e);Rur=r(q6t,"detr"),q6t.forEach(t),Pur=r(gNe," \u2014 "),PH=n(gNe,"A",{href:!0});var j6t=s(PH);Bur=r(j6t,"DetrForSegmentation"),j6t.forEach(t),Iur=r(gNe," (DETR model)"),gNe.forEach(t),N6t.forEach(t),Nur=i(La),UT=n(La,"P",{});var hNe=s(UT);qur=r(hNe,"The model is set in evaluation mode by default using "),z3e=n(hNe,"CODE",{});var D6t=s(z3e);jur=r(D6t,"model.eval()"),D6t.forEach(t),Dur=r(hNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Q3e=n(hNe,"CODE",{});var G6t=s(Q3e);Gur=r(G6t,"model.train()"),G6t.forEach(t),hNe.forEach(t),Our=i(La),T(JT.$$.fragment,La),La.forEach(t),El.forEach(t),uXe=i(f),Kd=n(f,"H2",{class:!0});var wQe=s(Kd);YT=n(wQe,"A",{id:!0,class:!0,href:!0});var O6t=s(YT);W3e=n(O6t,"SPAN",{});var V6t=s(W3e);T(w8.$$.fragment,V6t),V6t.forEach(t),O6t.forEach(t),Vur=i(wQe),H3e=n(wQe,"SPAN",{});var X6t=s(H3e);Xur=r(X6t,"AutoModelForSemanticSegmentation"),X6t.forEach(t),wQe.forEach(t),bXe=i(f),Ko=n(f,"DIV",{class:!0});var Cl=s(Ko);T(A8.$$.fragment,Cl),zur=i(Cl),Zd=n(Cl,"P",{});var rte=s(Zd);Qur=r(rte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),BH=n(rte,"A",{href:!0});var z6t=s(BH);Wur=r(z6t,"from_pretrained()"),z6t.forEach(t),Hur=r(rte," class method or the "),IH=n(rte,"A",{href:!0});var Q6t=s(IH);Uur=r(Q6t,"from_config()"),Q6t.forEach(t),Jur=r(rte,` class
method.`),rte.forEach(t),Yur=i(Cl),L8=n(Cl,"P",{});var AQe=s(L8);Kur=r(AQe,"This class cannot be instantiated directly using "),U3e=n(AQe,"CODE",{});var W6t=s(U3e);Zur=r(W6t,"__init__()"),W6t.forEach(t),e1r=r(AQe," (throws an error)."),AQe.forEach(t),o1r=i(Cl),xt=n(Cl,"DIV",{class:!0});var OA=s(xt);T(y8.$$.fragment,OA),r1r=i(OA),J3e=n(OA,"P",{});var H6t=s(J3e);t1r=r(H6t,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),H6t.forEach(t),a1r=i(OA),ec=n(OA,"P",{});var tte=s(ec);n1r=r(tte,`Note:
Loading a model from its configuration file does `),Y3e=n(tte,"STRONG",{});var U6t=s(Y3e);s1r=r(U6t,"not"),U6t.forEach(t),l1r=r(tte,` load the model weights. It only affects the
model\u2019s configuration. Use `),NH=n(tte,"A",{href:!0});var J6t=s(NH);i1r=r(J6t,"from_pretrained()"),J6t.forEach(t),d1r=r(tte," to load the model weights."),tte.forEach(t),c1r=i(OA),T(KT.$$.fragment,OA),OA.forEach(t),f1r=i(Cl),vo=n(Cl,"DIV",{class:!0});var ya=s(vo);T(x8.$$.fragment,ya),m1r=i(ya),K3e=n(ya,"P",{});var Y6t=s(K3e);g1r=r(Y6t,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Y6t.forEach(t),h1r=i(ya),rn=n(ya,"P",{});var VA=s(rn);p1r=r(VA,"The model class to instantiate is selected based on the "),Z3e=n(VA,"CODE",{});var K6t=s(Z3e);_1r=r(K6t,"model_type"),K6t.forEach(t),u1r=r(VA,` property of the config object (either
passed as an argument or loaded from `),e5e=n(VA,"CODE",{});var Z6t=s(e5e);b1r=r(Z6t,"pretrained_model_name_or_path"),Z6t.forEach(t),v1r=r(VA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o5e=n(VA,"CODE",{});var eLt=s(o5e);F1r=r(eLt,"pretrained_model_name_or_path"),eLt.forEach(t),T1r=r(VA,":"),VA.forEach(t),M1r=i(ya),tn=n(ya,"UL",{});var XA=s(tn);ZT=n(XA,"LI",{});var pNe=s(ZT);r5e=n(pNe,"STRONG",{});var oLt=s(r5e);E1r=r(oLt,"beit"),oLt.forEach(t),C1r=r(pNe," \u2014 "),qH=n(pNe,"A",{href:!0});var rLt=s(qH);w1r=r(rLt,"BeitForSemanticSegmentation"),rLt.forEach(t),A1r=r(pNe," (BEiT model)"),pNe.forEach(t),L1r=i(XA),e7=n(XA,"LI",{});var _Ne=s(e7);t5e=n(_Ne,"STRONG",{});var tLt=s(t5e);y1r=r(tLt,"data2vec-vision"),tLt.forEach(t),x1r=r(_Ne," \u2014 "),jH=n(_Ne,"A",{href:!0});var aLt=s(jH);$1r=r(aLt,"Data2VecVisionForSemanticSegmentation"),aLt.forEach(t),k1r=r(_Ne," (Data2VecVision model)"),_Ne.forEach(t),S1r=i(XA),o7=n(XA,"LI",{});var uNe=s(o7);a5e=n(uNe,"STRONG",{});var nLt=s(a5e);R1r=r(nLt,"dpt"),nLt.forEach(t),P1r=r(uNe," \u2014 "),DH=n(uNe,"A",{href:!0});var sLt=s(DH);B1r=r(sLt,"DPTForSemanticSegmentation"),sLt.forEach(t),I1r=r(uNe," (DPT model)"),uNe.forEach(t),N1r=i(XA),r7=n(XA,"LI",{});var bNe=s(r7);n5e=n(bNe,"STRONG",{});var lLt=s(n5e);q1r=r(lLt,"segformer"),lLt.forEach(t),j1r=r(bNe," \u2014 "),GH=n(bNe,"A",{href:!0});var iLt=s(GH);D1r=r(iLt,"SegformerForSemanticSegmentation"),iLt.forEach(t),G1r=r(bNe," (SegFormer model)"),bNe.forEach(t),XA.forEach(t),O1r=i(ya),t7=n(ya,"P",{});var vNe=s(t7);V1r=r(vNe,"The model is set in evaluation mode by default using "),s5e=n(vNe,"CODE",{});var dLt=s(s5e);X1r=r(dLt,"model.eval()"),dLt.forEach(t),z1r=r(vNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),l5e=n(vNe,"CODE",{});var cLt=s(l5e);Q1r=r(cLt,"model.train()"),cLt.forEach(t),vNe.forEach(t),W1r=i(ya),T(a7.$$.fragment,ya),ya.forEach(t),Cl.forEach(t),vXe=i(f),oc=n(f,"H2",{class:!0});var LQe=s(oc);n7=n(LQe,"A",{id:!0,class:!0,href:!0});var fLt=s(n7);i5e=n(fLt,"SPAN",{});var mLt=s(i5e);T($8.$$.fragment,mLt),mLt.forEach(t),fLt.forEach(t),H1r=i(LQe),d5e=n(LQe,"SPAN",{});var gLt=s(d5e);U1r=r(gLt,"AutoModelForInstanceSegmentation"),gLt.forEach(t),LQe.forEach(t),FXe=i(f),Zo=n(f,"DIV",{class:!0});var wl=s(Zo);T(k8.$$.fragment,wl),J1r=i(wl),rc=n(wl,"P",{});var ate=s(rc);Y1r=r(ate,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),OH=n(ate,"A",{href:!0});var hLt=s(OH);K1r=r(hLt,"from_pretrained()"),hLt.forEach(t),Z1r=r(ate," class method or the "),VH=n(ate,"A",{href:!0});var pLt=s(VH);e2r=r(pLt,"from_config()"),pLt.forEach(t),o2r=r(ate,` class
method.`),ate.forEach(t),r2r=i(wl),S8=n(wl,"P",{});var yQe=s(S8);t2r=r(yQe,"This class cannot be instantiated directly using "),c5e=n(yQe,"CODE",{});var _Lt=s(c5e);a2r=r(_Lt,"__init__()"),_Lt.forEach(t),n2r=r(yQe," (throws an error)."),yQe.forEach(t),s2r=i(wl),$t=n(wl,"DIV",{class:!0});var zA=s($t);T(R8.$$.fragment,zA),l2r=i(zA),f5e=n(zA,"P",{});var uLt=s(f5e);i2r=r(uLt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),uLt.forEach(t),d2r=i(zA),tc=n(zA,"P",{});var nte=s(tc);c2r=r(nte,`Note:
Loading a model from its configuration file does `),m5e=n(nte,"STRONG",{});var bLt=s(m5e);f2r=r(bLt,"not"),bLt.forEach(t),m2r=r(nte,` load the model weights. It only affects the
model\u2019s configuration. Use `),XH=n(nte,"A",{href:!0});var vLt=s(XH);g2r=r(vLt,"from_pretrained()"),vLt.forEach(t),h2r=r(nte," to load the model weights."),nte.forEach(t),p2r=i(zA),T(s7.$$.fragment,zA),zA.forEach(t),_2r=i(wl),Fo=n(wl,"DIV",{class:!0});var xa=s(Fo);T(P8.$$.fragment,xa),u2r=i(xa),g5e=n(xa,"P",{});var FLt=s(g5e);b2r=r(FLt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),FLt.forEach(t),v2r=i(xa),an=n(xa,"P",{});var QA=s(an);F2r=r(QA,"The model class to instantiate is selected based on the "),h5e=n(QA,"CODE",{});var TLt=s(h5e);T2r=r(TLt,"model_type"),TLt.forEach(t),M2r=r(QA,` property of the config object (either
passed as an argument or loaded from `),p5e=n(QA,"CODE",{});var MLt=s(p5e);E2r=r(MLt,"pretrained_model_name_or_path"),MLt.forEach(t),C2r=r(QA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_5e=n(QA,"CODE",{});var ELt=s(_5e);w2r=r(ELt,"pretrained_model_name_or_path"),ELt.forEach(t),A2r=r(QA,":"),QA.forEach(t),L2r=i(xa),u5e=n(xa,"UL",{});var CLt=s(u5e);l7=n(CLt,"LI",{});var FNe=s(l7);b5e=n(FNe,"STRONG",{});var wLt=s(b5e);y2r=r(wLt,"maskformer"),wLt.forEach(t),x2r=r(FNe," \u2014 "),zH=n(FNe,"A",{href:!0});var ALt=s(zH);$2r=r(ALt,"MaskFormerForInstanceSegmentation"),ALt.forEach(t),k2r=r(FNe," (MaskFormer model)"),FNe.forEach(t),CLt.forEach(t),S2r=i(xa),i7=n(xa,"P",{});var TNe=s(i7);R2r=r(TNe,"The model is set in evaluation mode by default using "),v5e=n(TNe,"CODE",{});var LLt=s(v5e);P2r=r(LLt,"model.eval()"),LLt.forEach(t),B2r=r(TNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),F5e=n(TNe,"CODE",{});var yLt=s(F5e);I2r=r(yLt,"model.train()"),yLt.forEach(t),TNe.forEach(t),N2r=i(xa),T(d7.$$.fragment,xa),xa.forEach(t),wl.forEach(t),TXe=i(f),ac=n(f,"H2",{class:!0});var xQe=s(ac);c7=n(xQe,"A",{id:!0,class:!0,href:!0});var xLt=s(c7);T5e=n(xLt,"SPAN",{});var $Lt=s(T5e);T(B8.$$.fragment,$Lt),$Lt.forEach(t),xLt.forEach(t),q2r=i(xQe),M5e=n(xQe,"SPAN",{});var kLt=s(M5e);j2r=r(kLt,"TFAutoModel"),kLt.forEach(t),xQe.forEach(t),MXe=i(f),er=n(f,"DIV",{class:!0});var Al=s(er);T(I8.$$.fragment,Al),D2r=i(Al),nc=n(Al,"P",{});var ste=s(nc);G2r=r(ste,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),QH=n(ste,"A",{href:!0});var SLt=s(QH);O2r=r(SLt,"from_pretrained()"),SLt.forEach(t),V2r=r(ste," class method or the "),WH=n(ste,"A",{href:!0});var RLt=s(WH);X2r=r(RLt,"from_config()"),RLt.forEach(t),z2r=r(ste,` class
method.`),ste.forEach(t),Q2r=i(Al),N8=n(Al,"P",{});var $Qe=s(N8);W2r=r($Qe,"This class cannot be instantiated directly using "),E5e=n($Qe,"CODE",{});var PLt=s(E5e);H2r=r(PLt,"__init__()"),PLt.forEach(t),U2r=r($Qe," (throws an error)."),$Qe.forEach(t),J2r=i(Al),kt=n(Al,"DIV",{class:!0});var WA=s(kt);T(q8.$$.fragment,WA),Y2r=i(WA),C5e=n(WA,"P",{});var BLt=s(C5e);K2r=r(BLt,"Instantiates one of the base model classes of the library from a configuration."),BLt.forEach(t),Z2r=i(WA),sc=n(WA,"P",{});var lte=s(sc);ebr=r(lte,`Note:
Loading a model from its configuration file does `),w5e=n(lte,"STRONG",{});var ILt=s(w5e);obr=r(ILt,"not"),ILt.forEach(t),rbr=r(lte,` load the model weights. It only affects the
model\u2019s configuration. Use `),HH=n(lte,"A",{href:!0});var NLt=s(HH);tbr=r(NLt,"from_pretrained()"),NLt.forEach(t),abr=r(lte," to load the model weights."),lte.forEach(t),nbr=i(WA),T(f7.$$.fragment,WA),WA.forEach(t),sbr=i(Al),yr=n(Al,"DIV",{class:!0});var Ll=s(yr);T(j8.$$.fragment,Ll),lbr=i(Ll),A5e=n(Ll,"P",{});var qLt=s(A5e);ibr=r(qLt,"Instantiate one of the base model classes of the library from a pretrained model."),qLt.forEach(t),dbr=i(Ll),nn=n(Ll,"P",{});var HA=s(nn);cbr=r(HA,"The model class to instantiate is selected based on the "),L5e=n(HA,"CODE",{});var jLt=s(L5e);fbr=r(jLt,"model_type"),jLt.forEach(t),mbr=r(HA,` property of the config object (either
passed as an argument or loaded from `),y5e=n(HA,"CODE",{});var DLt=s(y5e);gbr=r(DLt,"pretrained_model_name_or_path"),DLt.forEach(t),hbr=r(HA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x5e=n(HA,"CODE",{});var GLt=s(x5e);pbr=r(GLt,"pretrained_model_name_or_path"),GLt.forEach(t),_br=r(HA,":"),HA.forEach(t),ubr=i(Ll),j=n(Ll,"UL",{});var D=s(j);m7=n(D,"LI",{});var MNe=s(m7);$5e=n(MNe,"STRONG",{});var OLt=s($5e);bbr=r(OLt,"albert"),OLt.forEach(t),vbr=r(MNe," \u2014 "),UH=n(MNe,"A",{href:!0});var VLt=s(UH);Fbr=r(VLt,"TFAlbertModel"),VLt.forEach(t),Tbr=r(MNe," (ALBERT model)"),MNe.forEach(t),Mbr=i(D),g7=n(D,"LI",{});var ENe=s(g7);k5e=n(ENe,"STRONG",{});var XLt=s(k5e);Ebr=r(XLt,"bart"),XLt.forEach(t),Cbr=r(ENe," \u2014 "),JH=n(ENe,"A",{href:!0});var zLt=s(JH);wbr=r(zLt,"TFBartModel"),zLt.forEach(t),Abr=r(ENe," (BART model)"),ENe.forEach(t),Lbr=i(D),h7=n(D,"LI",{});var CNe=s(h7);S5e=n(CNe,"STRONG",{});var QLt=s(S5e);ybr=r(QLt,"bert"),QLt.forEach(t),xbr=r(CNe," \u2014 "),YH=n(CNe,"A",{href:!0});var WLt=s(YH);$br=r(WLt,"TFBertModel"),WLt.forEach(t),kbr=r(CNe," (BERT model)"),CNe.forEach(t),Sbr=i(D),p7=n(D,"LI",{});var wNe=s(p7);R5e=n(wNe,"STRONG",{});var HLt=s(R5e);Rbr=r(HLt,"blenderbot"),HLt.forEach(t),Pbr=r(wNe," \u2014 "),KH=n(wNe,"A",{href:!0});var ULt=s(KH);Bbr=r(ULt,"TFBlenderbotModel"),ULt.forEach(t),Ibr=r(wNe," (Blenderbot model)"),wNe.forEach(t),Nbr=i(D),_7=n(D,"LI",{});var ANe=s(_7);P5e=n(ANe,"STRONG",{});var JLt=s(P5e);qbr=r(JLt,"blenderbot-small"),JLt.forEach(t),jbr=r(ANe," \u2014 "),ZH=n(ANe,"A",{href:!0});var YLt=s(ZH);Dbr=r(YLt,"TFBlenderbotSmallModel"),YLt.forEach(t),Gbr=r(ANe," (BlenderbotSmall model)"),ANe.forEach(t),Obr=i(D),u7=n(D,"LI",{});var LNe=s(u7);B5e=n(LNe,"STRONG",{});var KLt=s(B5e);Vbr=r(KLt,"camembert"),KLt.forEach(t),Xbr=r(LNe," \u2014 "),eU=n(LNe,"A",{href:!0});var ZLt=s(eU);zbr=r(ZLt,"TFCamembertModel"),ZLt.forEach(t),Qbr=r(LNe," (CamemBERT model)"),LNe.forEach(t),Wbr=i(D),b7=n(D,"LI",{});var yNe=s(b7);I5e=n(yNe,"STRONG",{});var eyt=s(I5e);Hbr=r(eyt,"clip"),eyt.forEach(t),Ubr=r(yNe," \u2014 "),oU=n(yNe,"A",{href:!0});var oyt=s(oU);Jbr=r(oyt,"TFCLIPModel"),oyt.forEach(t),Ybr=r(yNe," (CLIP model)"),yNe.forEach(t),Kbr=i(D),v7=n(D,"LI",{});var xNe=s(v7);N5e=n(xNe,"STRONG",{});var ryt=s(N5e);Zbr=r(ryt,"convbert"),ryt.forEach(t),evr=r(xNe," \u2014 "),rU=n(xNe,"A",{href:!0});var tyt=s(rU);ovr=r(tyt,"TFConvBertModel"),tyt.forEach(t),rvr=r(xNe," (ConvBERT model)"),xNe.forEach(t),tvr=i(D),F7=n(D,"LI",{});var $Ne=s(F7);q5e=n($Ne,"STRONG",{});var ayt=s(q5e);avr=r(ayt,"convnext"),ayt.forEach(t),nvr=r($Ne," \u2014 "),tU=n($Ne,"A",{href:!0});var nyt=s(tU);svr=r(nyt,"TFConvNextModel"),nyt.forEach(t),lvr=r($Ne," (ConvNeXT model)"),$Ne.forEach(t),ivr=i(D),T7=n(D,"LI",{});var kNe=s(T7);j5e=n(kNe,"STRONG",{});var syt=s(j5e);dvr=r(syt,"ctrl"),syt.forEach(t),cvr=r(kNe," \u2014 "),aU=n(kNe,"A",{href:!0});var lyt=s(aU);fvr=r(lyt,"TFCTRLModel"),lyt.forEach(t),mvr=r(kNe," (CTRL model)"),kNe.forEach(t),gvr=i(D),M7=n(D,"LI",{});var SNe=s(M7);D5e=n(SNe,"STRONG",{});var iyt=s(D5e);hvr=r(iyt,"data2vec-vision"),iyt.forEach(t),pvr=r(SNe," \u2014 "),nU=n(SNe,"A",{href:!0});var dyt=s(nU);_vr=r(dyt,"TFData2VecVisionModel"),dyt.forEach(t),uvr=r(SNe," (Data2VecVision model)"),SNe.forEach(t),bvr=i(D),E7=n(D,"LI",{});var RNe=s(E7);G5e=n(RNe,"STRONG",{});var cyt=s(G5e);vvr=r(cyt,"deberta"),cyt.forEach(t),Fvr=r(RNe," \u2014 "),sU=n(RNe,"A",{href:!0});var fyt=s(sU);Tvr=r(fyt,"TFDebertaModel"),fyt.forEach(t),Mvr=r(RNe," (DeBERTa model)"),RNe.forEach(t),Evr=i(D),C7=n(D,"LI",{});var PNe=s(C7);O5e=n(PNe,"STRONG",{});var myt=s(O5e);Cvr=r(myt,"deberta-v2"),myt.forEach(t),wvr=r(PNe," \u2014 "),lU=n(PNe,"A",{href:!0});var gyt=s(lU);Avr=r(gyt,"TFDebertaV2Model"),gyt.forEach(t),Lvr=r(PNe," (DeBERTa-v2 model)"),PNe.forEach(t),yvr=i(D),w7=n(D,"LI",{});var BNe=s(w7);V5e=n(BNe,"STRONG",{});var hyt=s(V5e);xvr=r(hyt,"distilbert"),hyt.forEach(t),$vr=r(BNe," \u2014 "),iU=n(BNe,"A",{href:!0});var pyt=s(iU);kvr=r(pyt,"TFDistilBertModel"),pyt.forEach(t),Svr=r(BNe," (DistilBERT model)"),BNe.forEach(t),Rvr=i(D),A7=n(D,"LI",{});var INe=s(A7);X5e=n(INe,"STRONG",{});var _yt=s(X5e);Pvr=r(_yt,"dpr"),_yt.forEach(t),Bvr=r(INe," \u2014 "),dU=n(INe,"A",{href:!0});var uyt=s(dU);Ivr=r(uyt,"TFDPRQuestionEncoder"),uyt.forEach(t),Nvr=r(INe," (DPR model)"),INe.forEach(t),qvr=i(D),L7=n(D,"LI",{});var NNe=s(L7);z5e=n(NNe,"STRONG",{});var byt=s(z5e);jvr=r(byt,"electra"),byt.forEach(t),Dvr=r(NNe," \u2014 "),cU=n(NNe,"A",{href:!0});var vyt=s(cU);Gvr=r(vyt,"TFElectraModel"),vyt.forEach(t),Ovr=r(NNe," (ELECTRA model)"),NNe.forEach(t),Vvr=i(D),y7=n(D,"LI",{});var qNe=s(y7);Q5e=n(qNe,"STRONG",{});var Fyt=s(Q5e);Xvr=r(Fyt,"flaubert"),Fyt.forEach(t),zvr=r(qNe," \u2014 "),fU=n(qNe,"A",{href:!0});var Tyt=s(fU);Qvr=r(Tyt,"TFFlaubertModel"),Tyt.forEach(t),Wvr=r(qNe," (FlauBERT model)"),qNe.forEach(t),Hvr=i(D),Us=n(D,"LI",{});var CS=s(Us);W5e=n(CS,"STRONG",{});var Myt=s(W5e);Uvr=r(Myt,"funnel"),Myt.forEach(t),Jvr=r(CS," \u2014 "),mU=n(CS,"A",{href:!0});var Eyt=s(mU);Yvr=r(Eyt,"TFFunnelModel"),Eyt.forEach(t),Kvr=r(CS," or "),gU=n(CS,"A",{href:!0});var Cyt=s(gU);Zvr=r(Cyt,"TFFunnelBaseModel"),Cyt.forEach(t),e3r=r(CS," (Funnel Transformer model)"),CS.forEach(t),o3r=i(D),x7=n(D,"LI",{});var jNe=s(x7);H5e=n(jNe,"STRONG",{});var wyt=s(H5e);r3r=r(wyt,"gpt2"),wyt.forEach(t),t3r=r(jNe," \u2014 "),hU=n(jNe,"A",{href:!0});var Ayt=s(hU);a3r=r(Ayt,"TFGPT2Model"),Ayt.forEach(t),n3r=r(jNe," (OpenAI GPT-2 model)"),jNe.forEach(t),s3r=i(D),$7=n(D,"LI",{});var DNe=s($7);U5e=n(DNe,"STRONG",{});var Lyt=s(U5e);l3r=r(Lyt,"gptj"),Lyt.forEach(t),i3r=r(DNe," \u2014 "),pU=n(DNe,"A",{href:!0});var yyt=s(pU);d3r=r(yyt,"TFGPTJModel"),yyt.forEach(t),c3r=r(DNe," (GPT-J model)"),DNe.forEach(t),f3r=i(D),k7=n(D,"LI",{});var GNe=s(k7);J5e=n(GNe,"STRONG",{});var xyt=s(J5e);m3r=r(xyt,"hubert"),xyt.forEach(t),g3r=r(GNe," \u2014 "),_U=n(GNe,"A",{href:!0});var $yt=s(_U);h3r=r($yt,"TFHubertModel"),$yt.forEach(t),p3r=r(GNe," (Hubert model)"),GNe.forEach(t),_3r=i(D),S7=n(D,"LI",{});var ONe=s(S7);Y5e=n(ONe,"STRONG",{});var kyt=s(Y5e);u3r=r(kyt,"layoutlm"),kyt.forEach(t),b3r=r(ONe," \u2014 "),uU=n(ONe,"A",{href:!0});var Syt=s(uU);v3r=r(Syt,"TFLayoutLMModel"),Syt.forEach(t),F3r=r(ONe," (LayoutLM model)"),ONe.forEach(t),T3r=i(D),R7=n(D,"LI",{});var VNe=s(R7);K5e=n(VNe,"STRONG",{});var Ryt=s(K5e);M3r=r(Ryt,"led"),Ryt.forEach(t),E3r=r(VNe," \u2014 "),bU=n(VNe,"A",{href:!0});var Pyt=s(bU);C3r=r(Pyt,"TFLEDModel"),Pyt.forEach(t),w3r=r(VNe," (LED model)"),VNe.forEach(t),A3r=i(D),P7=n(D,"LI",{});var XNe=s(P7);Z5e=n(XNe,"STRONG",{});var Byt=s(Z5e);L3r=r(Byt,"longformer"),Byt.forEach(t),y3r=r(XNe," \u2014 "),vU=n(XNe,"A",{href:!0});var Iyt=s(vU);x3r=r(Iyt,"TFLongformerModel"),Iyt.forEach(t),$3r=r(XNe," (Longformer model)"),XNe.forEach(t),k3r=i(D),B7=n(D,"LI",{});var zNe=s(B7);eFe=n(zNe,"STRONG",{});var Nyt=s(eFe);S3r=r(Nyt,"lxmert"),Nyt.forEach(t),R3r=r(zNe," \u2014 "),FU=n(zNe,"A",{href:!0});var qyt=s(FU);P3r=r(qyt,"TFLxmertModel"),qyt.forEach(t),B3r=r(zNe," (LXMERT model)"),zNe.forEach(t),I3r=i(D),I7=n(D,"LI",{});var QNe=s(I7);oFe=n(QNe,"STRONG",{});var jyt=s(oFe);N3r=r(jyt,"marian"),jyt.forEach(t),q3r=r(QNe," \u2014 "),TU=n(QNe,"A",{href:!0});var Dyt=s(TU);j3r=r(Dyt,"TFMarianModel"),Dyt.forEach(t),D3r=r(QNe," (Marian model)"),QNe.forEach(t),G3r=i(D),N7=n(D,"LI",{});var WNe=s(N7);rFe=n(WNe,"STRONG",{});var Gyt=s(rFe);O3r=r(Gyt,"mbart"),Gyt.forEach(t),V3r=r(WNe," \u2014 "),MU=n(WNe,"A",{href:!0});var Oyt=s(MU);X3r=r(Oyt,"TFMBartModel"),Oyt.forEach(t),z3r=r(WNe," (mBART model)"),WNe.forEach(t),Q3r=i(D),q7=n(D,"LI",{});var HNe=s(q7);tFe=n(HNe,"STRONG",{});var Vyt=s(tFe);W3r=r(Vyt,"mobilebert"),Vyt.forEach(t),H3r=r(HNe," \u2014 "),EU=n(HNe,"A",{href:!0});var Xyt=s(EU);U3r=r(Xyt,"TFMobileBertModel"),Xyt.forEach(t),J3r=r(HNe," (MobileBERT model)"),HNe.forEach(t),Y3r=i(D),j7=n(D,"LI",{});var UNe=s(j7);aFe=n(UNe,"STRONG",{});var zyt=s(aFe);K3r=r(zyt,"mpnet"),zyt.forEach(t),Z3r=r(UNe," \u2014 "),CU=n(UNe,"A",{href:!0});var Qyt=s(CU);e5r=r(Qyt,"TFMPNetModel"),Qyt.forEach(t),o5r=r(UNe," (MPNet model)"),UNe.forEach(t),r5r=i(D),D7=n(D,"LI",{});var JNe=s(D7);nFe=n(JNe,"STRONG",{});var Wyt=s(nFe);t5r=r(Wyt,"mt5"),Wyt.forEach(t),a5r=r(JNe," \u2014 "),wU=n(JNe,"A",{href:!0});var Hyt=s(wU);n5r=r(Hyt,"TFMT5Model"),Hyt.forEach(t),s5r=r(JNe," (MT5 model)"),JNe.forEach(t),l5r=i(D),G7=n(D,"LI",{});var YNe=s(G7);sFe=n(YNe,"STRONG",{});var Uyt=s(sFe);i5r=r(Uyt,"openai-gpt"),Uyt.forEach(t),d5r=r(YNe," \u2014 "),AU=n(YNe,"A",{href:!0});var Jyt=s(AU);c5r=r(Jyt,"TFOpenAIGPTModel"),Jyt.forEach(t),f5r=r(YNe," (OpenAI GPT model)"),YNe.forEach(t),m5r=i(D),O7=n(D,"LI",{});var KNe=s(O7);lFe=n(KNe,"STRONG",{});var Yyt=s(lFe);g5r=r(Yyt,"opt"),Yyt.forEach(t),h5r=r(KNe," \u2014 "),LU=n(KNe,"A",{href:!0});var Kyt=s(LU);p5r=r(Kyt,"TFOPTModel"),Kyt.forEach(t),_5r=r(KNe," (OPT model)"),KNe.forEach(t),u5r=i(D),V7=n(D,"LI",{});var ZNe=s(V7);iFe=n(ZNe,"STRONG",{});var Zyt=s(iFe);b5r=r(Zyt,"pegasus"),Zyt.forEach(t),v5r=r(ZNe," \u2014 "),yU=n(ZNe,"A",{href:!0});var e8t=s(yU);F5r=r(e8t,"TFPegasusModel"),e8t.forEach(t),T5r=r(ZNe," (Pegasus model)"),ZNe.forEach(t),M5r=i(D),X7=n(D,"LI",{});var eqe=s(X7);dFe=n(eqe,"STRONG",{});var o8t=s(dFe);E5r=r(o8t,"regnet"),o8t.forEach(t),C5r=r(eqe," \u2014 "),xU=n(eqe,"A",{href:!0});var r8t=s(xU);w5r=r(r8t,"TFRegNetModel"),r8t.forEach(t),A5r=r(eqe," (RegNet model)"),eqe.forEach(t),L5r=i(D),z7=n(D,"LI",{});var oqe=s(z7);cFe=n(oqe,"STRONG",{});var t8t=s(cFe);y5r=r(t8t,"rembert"),t8t.forEach(t),x5r=r(oqe," \u2014 "),$U=n(oqe,"A",{href:!0});var a8t=s($U);$5r=r(a8t,"TFRemBertModel"),a8t.forEach(t),k5r=r(oqe," (RemBERT model)"),oqe.forEach(t),S5r=i(D),Q7=n(D,"LI",{});var rqe=s(Q7);fFe=n(rqe,"STRONG",{});var n8t=s(fFe);R5r=r(n8t,"roberta"),n8t.forEach(t),P5r=r(rqe," \u2014 "),kU=n(rqe,"A",{href:!0});var s8t=s(kU);B5r=r(s8t,"TFRobertaModel"),s8t.forEach(t),I5r=r(rqe," (RoBERTa model)"),rqe.forEach(t),N5r=i(D),W7=n(D,"LI",{});var tqe=s(W7);mFe=n(tqe,"STRONG",{});var l8t=s(mFe);q5r=r(l8t,"roformer"),l8t.forEach(t),j5r=r(tqe," \u2014 "),SU=n(tqe,"A",{href:!0});var i8t=s(SU);D5r=r(i8t,"TFRoFormerModel"),i8t.forEach(t),G5r=r(tqe," (RoFormer model)"),tqe.forEach(t),O5r=i(D),H7=n(D,"LI",{});var aqe=s(H7);gFe=n(aqe,"STRONG",{});var d8t=s(gFe);V5r=r(d8t,"speech_to_text"),d8t.forEach(t),X5r=r(aqe," \u2014 "),RU=n(aqe,"A",{href:!0});var c8t=s(RU);z5r=r(c8t,"TFSpeech2TextModel"),c8t.forEach(t),Q5r=r(aqe," (Speech2Text model)"),aqe.forEach(t),W5r=i(D),U7=n(D,"LI",{});var nqe=s(U7);hFe=n(nqe,"STRONG",{});var f8t=s(hFe);H5r=r(f8t,"swin"),f8t.forEach(t),U5r=r(nqe," \u2014 "),PU=n(nqe,"A",{href:!0});var m8t=s(PU);J5r=r(m8t,"TFSwinModel"),m8t.forEach(t),Y5r=r(nqe," (Swin Transformer model)"),nqe.forEach(t),K5r=i(D),J7=n(D,"LI",{});var sqe=s(J7);pFe=n(sqe,"STRONG",{});var g8t=s(pFe);Z5r=r(g8t,"t5"),g8t.forEach(t),eFr=r(sqe," \u2014 "),BU=n(sqe,"A",{href:!0});var h8t=s(BU);oFr=r(h8t,"TFT5Model"),h8t.forEach(t),rFr=r(sqe," (T5 model)"),sqe.forEach(t),tFr=i(D),Y7=n(D,"LI",{});var lqe=s(Y7);_Fe=n(lqe,"STRONG",{});var p8t=s(_Fe);aFr=r(p8t,"tapas"),p8t.forEach(t),nFr=r(lqe," \u2014 "),IU=n(lqe,"A",{href:!0});var _8t=s(IU);sFr=r(_8t,"TFTapasModel"),_8t.forEach(t),lFr=r(lqe," (TAPAS model)"),lqe.forEach(t),iFr=i(D),K7=n(D,"LI",{});var iqe=s(K7);uFe=n(iqe,"STRONG",{});var u8t=s(uFe);dFr=r(u8t,"transfo-xl"),u8t.forEach(t),cFr=r(iqe," \u2014 "),NU=n(iqe,"A",{href:!0});var b8t=s(NU);fFr=r(b8t,"TFTransfoXLModel"),b8t.forEach(t),mFr=r(iqe," (Transformer-XL model)"),iqe.forEach(t),gFr=i(D),Z7=n(D,"LI",{});var dqe=s(Z7);bFe=n(dqe,"STRONG",{});var v8t=s(bFe);hFr=r(v8t,"vit"),v8t.forEach(t),pFr=r(dqe," \u2014 "),qU=n(dqe,"A",{href:!0});var F8t=s(qU);_Fr=r(F8t,"TFViTModel"),F8t.forEach(t),uFr=r(dqe," (ViT model)"),dqe.forEach(t),bFr=i(D),e9=n(D,"LI",{});var cqe=s(e9);vFe=n(cqe,"STRONG",{});var T8t=s(vFe);vFr=r(T8t,"vit_mae"),T8t.forEach(t),FFr=r(cqe," \u2014 "),jU=n(cqe,"A",{href:!0});var M8t=s(jU);TFr=r(M8t,"TFViTMAEModel"),M8t.forEach(t),MFr=r(cqe," (ViTMAE model)"),cqe.forEach(t),EFr=i(D),o9=n(D,"LI",{});var fqe=s(o9);FFe=n(fqe,"STRONG",{});var E8t=s(FFe);CFr=r(E8t,"wav2vec2"),E8t.forEach(t),wFr=r(fqe," \u2014 "),DU=n(fqe,"A",{href:!0});var C8t=s(DU);AFr=r(C8t,"TFWav2Vec2Model"),C8t.forEach(t),LFr=r(fqe," (Wav2Vec2 model)"),fqe.forEach(t),yFr=i(D),r9=n(D,"LI",{});var mqe=s(r9);TFe=n(mqe,"STRONG",{});var w8t=s(TFe);xFr=r(w8t,"xlm"),w8t.forEach(t),$Fr=r(mqe," \u2014 "),GU=n(mqe,"A",{href:!0});var A8t=s(GU);kFr=r(A8t,"TFXLMModel"),A8t.forEach(t),SFr=r(mqe," (XLM model)"),mqe.forEach(t),RFr=i(D),t9=n(D,"LI",{});var gqe=s(t9);MFe=n(gqe,"STRONG",{});var L8t=s(MFe);PFr=r(L8t,"xlm-roberta"),L8t.forEach(t),BFr=r(gqe," \u2014 "),OU=n(gqe,"A",{href:!0});var y8t=s(OU);IFr=r(y8t,"TFXLMRobertaModel"),y8t.forEach(t),NFr=r(gqe," (XLM-RoBERTa model)"),gqe.forEach(t),qFr=i(D),a9=n(D,"LI",{});var hqe=s(a9);EFe=n(hqe,"STRONG",{});var x8t=s(EFe);jFr=r(x8t,"xlnet"),x8t.forEach(t),DFr=r(hqe," \u2014 "),VU=n(hqe,"A",{href:!0});var $8t=s(VU);GFr=r($8t,"TFXLNetModel"),$8t.forEach(t),OFr=r(hqe," (XLNet model)"),hqe.forEach(t),D.forEach(t),VFr=i(Ll),T(n9.$$.fragment,Ll),Ll.forEach(t),Al.forEach(t),EXe=i(f),lc=n(f,"H2",{class:!0});var kQe=s(lc);s9=n(kQe,"A",{id:!0,class:!0,href:!0});var k8t=s(s9);CFe=n(k8t,"SPAN",{});var S8t=s(CFe);T(D8.$$.fragment,S8t),S8t.forEach(t),k8t.forEach(t),XFr=i(kQe),wFe=n(kQe,"SPAN",{});var R8t=s(wFe);zFr=r(R8t,"TFAutoModelForPreTraining"),R8t.forEach(t),kQe.forEach(t),CXe=i(f),or=n(f,"DIV",{class:!0});var yl=s(or);T(G8.$$.fragment,yl),QFr=i(yl),ic=n(yl,"P",{});var ite=s(ic);WFr=r(ite,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),XU=n(ite,"A",{href:!0});var P8t=s(XU);HFr=r(P8t,"from_pretrained()"),P8t.forEach(t),UFr=r(ite," class method or the "),zU=n(ite,"A",{href:!0});var B8t=s(zU);JFr=r(B8t,"from_config()"),B8t.forEach(t),YFr=r(ite,` class
method.`),ite.forEach(t),KFr=i(yl),O8=n(yl,"P",{});var SQe=s(O8);ZFr=r(SQe,"This class cannot be instantiated directly using "),AFe=n(SQe,"CODE",{});var I8t=s(AFe);eTr=r(I8t,"__init__()"),I8t.forEach(t),oTr=r(SQe," (throws an error)."),SQe.forEach(t),rTr=i(yl),St=n(yl,"DIV",{class:!0});var UA=s(St);T(V8.$$.fragment,UA),tTr=i(UA),LFe=n(UA,"P",{});var N8t=s(LFe);aTr=r(N8t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),N8t.forEach(t),nTr=i(UA),dc=n(UA,"P",{});var dte=s(dc);sTr=r(dte,`Note:
Loading a model from its configuration file does `),yFe=n(dte,"STRONG",{});var q8t=s(yFe);lTr=r(q8t,"not"),q8t.forEach(t),iTr=r(dte,` load the model weights. It only affects the
model\u2019s configuration. Use `),QU=n(dte,"A",{href:!0});var j8t=s(QU);dTr=r(j8t,"from_pretrained()"),j8t.forEach(t),cTr=r(dte," to load the model weights."),dte.forEach(t),fTr=i(UA),T(l9.$$.fragment,UA),UA.forEach(t),mTr=i(yl),xr=n(yl,"DIV",{class:!0});var xl=s(xr);T(X8.$$.fragment,xl),gTr=i(xl),xFe=n(xl,"P",{});var D8t=s(xFe);hTr=r(D8t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),D8t.forEach(t),pTr=i(xl),sn=n(xl,"P",{});var JA=s(sn);_Tr=r(JA,"The model class to instantiate is selected based on the "),$Fe=n(JA,"CODE",{});var G8t=s($Fe);uTr=r(G8t,"model_type"),G8t.forEach(t),bTr=r(JA,` property of the config object (either
passed as an argument or loaded from `),kFe=n(JA,"CODE",{});var O8t=s(kFe);vTr=r(O8t,"pretrained_model_name_or_path"),O8t.forEach(t),FTr=r(JA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),SFe=n(JA,"CODE",{});var V8t=s(SFe);TTr=r(V8t,"pretrained_model_name_or_path"),V8t.forEach(t),MTr=r(JA,":"),JA.forEach(t),ETr=i(xl),se=n(xl,"UL",{});var le=s(se);i9=n(le,"LI",{});var pqe=s(i9);RFe=n(pqe,"STRONG",{});var X8t=s(RFe);CTr=r(X8t,"albert"),X8t.forEach(t),wTr=r(pqe," \u2014 "),WU=n(pqe,"A",{href:!0});var z8t=s(WU);ATr=r(z8t,"TFAlbertForPreTraining"),z8t.forEach(t),LTr=r(pqe," (ALBERT model)"),pqe.forEach(t),yTr=i(le),d9=n(le,"LI",{});var _qe=s(d9);PFe=n(_qe,"STRONG",{});var Q8t=s(PFe);xTr=r(Q8t,"bart"),Q8t.forEach(t),$Tr=r(_qe," \u2014 "),HU=n(_qe,"A",{href:!0});var W8t=s(HU);kTr=r(W8t,"TFBartForConditionalGeneration"),W8t.forEach(t),STr=r(_qe," (BART model)"),_qe.forEach(t),RTr=i(le),c9=n(le,"LI",{});var uqe=s(c9);BFe=n(uqe,"STRONG",{});var H8t=s(BFe);PTr=r(H8t,"bert"),H8t.forEach(t),BTr=r(uqe," \u2014 "),UU=n(uqe,"A",{href:!0});var U8t=s(UU);ITr=r(U8t,"TFBertForPreTraining"),U8t.forEach(t),NTr=r(uqe," (BERT model)"),uqe.forEach(t),qTr=i(le),f9=n(le,"LI",{});var bqe=s(f9);IFe=n(bqe,"STRONG",{});var J8t=s(IFe);jTr=r(J8t,"camembert"),J8t.forEach(t),DTr=r(bqe," \u2014 "),JU=n(bqe,"A",{href:!0});var Y8t=s(JU);GTr=r(Y8t,"TFCamembertForMaskedLM"),Y8t.forEach(t),OTr=r(bqe," (CamemBERT model)"),bqe.forEach(t),VTr=i(le),m9=n(le,"LI",{});var vqe=s(m9);NFe=n(vqe,"STRONG",{});var K8t=s(NFe);XTr=r(K8t,"ctrl"),K8t.forEach(t),zTr=r(vqe," \u2014 "),YU=n(vqe,"A",{href:!0});var Z8t=s(YU);QTr=r(Z8t,"TFCTRLLMHeadModel"),Z8t.forEach(t),WTr=r(vqe," (CTRL model)"),vqe.forEach(t),HTr=i(le),g9=n(le,"LI",{});var Fqe=s(g9);qFe=n(Fqe,"STRONG",{});var ext=s(qFe);UTr=r(ext,"distilbert"),ext.forEach(t),JTr=r(Fqe," \u2014 "),KU=n(Fqe,"A",{href:!0});var oxt=s(KU);YTr=r(oxt,"TFDistilBertForMaskedLM"),oxt.forEach(t),KTr=r(Fqe," (DistilBERT model)"),Fqe.forEach(t),ZTr=i(le),h9=n(le,"LI",{});var Tqe=s(h9);jFe=n(Tqe,"STRONG",{});var rxt=s(jFe);e7r=r(rxt,"electra"),rxt.forEach(t),o7r=r(Tqe," \u2014 "),ZU=n(Tqe,"A",{href:!0});var txt=s(ZU);r7r=r(txt,"TFElectraForPreTraining"),txt.forEach(t),t7r=r(Tqe," (ELECTRA model)"),Tqe.forEach(t),a7r=i(le),p9=n(le,"LI",{});var Mqe=s(p9);DFe=n(Mqe,"STRONG",{});var axt=s(DFe);n7r=r(axt,"flaubert"),axt.forEach(t),s7r=r(Mqe," \u2014 "),eJ=n(Mqe,"A",{href:!0});var nxt=s(eJ);l7r=r(nxt,"TFFlaubertWithLMHeadModel"),nxt.forEach(t),i7r=r(Mqe," (FlauBERT model)"),Mqe.forEach(t),d7r=i(le),_9=n(le,"LI",{});var Eqe=s(_9);GFe=n(Eqe,"STRONG",{});var sxt=s(GFe);c7r=r(sxt,"funnel"),sxt.forEach(t),f7r=r(Eqe," \u2014 "),oJ=n(Eqe,"A",{href:!0});var lxt=s(oJ);m7r=r(lxt,"TFFunnelForPreTraining"),lxt.forEach(t),g7r=r(Eqe," (Funnel Transformer model)"),Eqe.forEach(t),h7r=i(le),u9=n(le,"LI",{});var Cqe=s(u9);OFe=n(Cqe,"STRONG",{});var ixt=s(OFe);p7r=r(ixt,"gpt2"),ixt.forEach(t),_7r=r(Cqe," \u2014 "),rJ=n(Cqe,"A",{href:!0});var dxt=s(rJ);u7r=r(dxt,"TFGPT2LMHeadModel"),dxt.forEach(t),b7r=r(Cqe," (OpenAI GPT-2 model)"),Cqe.forEach(t),v7r=i(le),b9=n(le,"LI",{});var wqe=s(b9);VFe=n(wqe,"STRONG",{});var cxt=s(VFe);F7r=r(cxt,"layoutlm"),cxt.forEach(t),T7r=r(wqe," \u2014 "),tJ=n(wqe,"A",{href:!0});var fxt=s(tJ);M7r=r(fxt,"TFLayoutLMForMaskedLM"),fxt.forEach(t),E7r=r(wqe," (LayoutLM model)"),wqe.forEach(t),C7r=i(le),v9=n(le,"LI",{});var Aqe=s(v9);XFe=n(Aqe,"STRONG",{});var mxt=s(XFe);w7r=r(mxt,"lxmert"),mxt.forEach(t),A7r=r(Aqe," \u2014 "),aJ=n(Aqe,"A",{href:!0});var gxt=s(aJ);L7r=r(gxt,"TFLxmertForPreTraining"),gxt.forEach(t),y7r=r(Aqe," (LXMERT model)"),Aqe.forEach(t),x7r=i(le),F9=n(le,"LI",{});var Lqe=s(F9);zFe=n(Lqe,"STRONG",{});var hxt=s(zFe);$7r=r(hxt,"mobilebert"),hxt.forEach(t),k7r=r(Lqe," \u2014 "),nJ=n(Lqe,"A",{href:!0});var pxt=s(nJ);S7r=r(pxt,"TFMobileBertForPreTraining"),pxt.forEach(t),R7r=r(Lqe," (MobileBERT model)"),Lqe.forEach(t),P7r=i(le),T9=n(le,"LI",{});var yqe=s(T9);QFe=n(yqe,"STRONG",{});var _xt=s(QFe);B7r=r(_xt,"mpnet"),_xt.forEach(t),I7r=r(yqe," \u2014 "),sJ=n(yqe,"A",{href:!0});var uxt=s(sJ);N7r=r(uxt,"TFMPNetForMaskedLM"),uxt.forEach(t),q7r=r(yqe," (MPNet model)"),yqe.forEach(t),j7r=i(le),M9=n(le,"LI",{});var xqe=s(M9);WFe=n(xqe,"STRONG",{});var bxt=s(WFe);D7r=r(bxt,"openai-gpt"),bxt.forEach(t),G7r=r(xqe," \u2014 "),lJ=n(xqe,"A",{href:!0});var vxt=s(lJ);O7r=r(vxt,"TFOpenAIGPTLMHeadModel"),vxt.forEach(t),V7r=r(xqe," (OpenAI GPT model)"),xqe.forEach(t),X7r=i(le),E9=n(le,"LI",{});var $qe=s(E9);HFe=n($qe,"STRONG",{});var Fxt=s(HFe);z7r=r(Fxt,"roberta"),Fxt.forEach(t),Q7r=r($qe," \u2014 "),iJ=n($qe,"A",{href:!0});var Txt=s(iJ);W7r=r(Txt,"TFRobertaForMaskedLM"),Txt.forEach(t),H7r=r($qe," (RoBERTa model)"),$qe.forEach(t),U7r=i(le),C9=n(le,"LI",{});var kqe=s(C9);UFe=n(kqe,"STRONG",{});var Mxt=s(UFe);J7r=r(Mxt,"t5"),Mxt.forEach(t),Y7r=r(kqe," \u2014 "),dJ=n(kqe,"A",{href:!0});var Ext=s(dJ);K7r=r(Ext,"TFT5ForConditionalGeneration"),Ext.forEach(t),Z7r=r(kqe," (T5 model)"),kqe.forEach(t),e9r=i(le),w9=n(le,"LI",{});var Sqe=s(w9);JFe=n(Sqe,"STRONG",{});var Cxt=s(JFe);o9r=r(Cxt,"tapas"),Cxt.forEach(t),r9r=r(Sqe," \u2014 "),cJ=n(Sqe,"A",{href:!0});var wxt=s(cJ);t9r=r(wxt,"TFTapasForMaskedLM"),wxt.forEach(t),a9r=r(Sqe," (TAPAS model)"),Sqe.forEach(t),n9r=i(le),A9=n(le,"LI",{});var Rqe=s(A9);YFe=n(Rqe,"STRONG",{});var Axt=s(YFe);s9r=r(Axt,"transfo-xl"),Axt.forEach(t),l9r=r(Rqe," \u2014 "),fJ=n(Rqe,"A",{href:!0});var Lxt=s(fJ);i9r=r(Lxt,"TFTransfoXLLMHeadModel"),Lxt.forEach(t),d9r=r(Rqe," (Transformer-XL model)"),Rqe.forEach(t),c9r=i(le),L9=n(le,"LI",{});var Pqe=s(L9);KFe=n(Pqe,"STRONG",{});var yxt=s(KFe);f9r=r(yxt,"vit_mae"),yxt.forEach(t),m9r=r(Pqe," \u2014 "),mJ=n(Pqe,"A",{href:!0});var xxt=s(mJ);g9r=r(xxt,"TFViTMAEForPreTraining"),xxt.forEach(t),h9r=r(Pqe," (ViTMAE model)"),Pqe.forEach(t),p9r=i(le),y9=n(le,"LI",{});var Bqe=s(y9);ZFe=n(Bqe,"STRONG",{});var $xt=s(ZFe);_9r=r($xt,"xlm"),$xt.forEach(t),u9r=r(Bqe," \u2014 "),gJ=n(Bqe,"A",{href:!0});var kxt=s(gJ);b9r=r(kxt,"TFXLMWithLMHeadModel"),kxt.forEach(t),v9r=r(Bqe," (XLM model)"),Bqe.forEach(t),F9r=i(le),x9=n(le,"LI",{});var Iqe=s(x9);eTe=n(Iqe,"STRONG",{});var Sxt=s(eTe);T9r=r(Sxt,"xlm-roberta"),Sxt.forEach(t),M9r=r(Iqe," \u2014 "),hJ=n(Iqe,"A",{href:!0});var Rxt=s(hJ);E9r=r(Rxt,"TFXLMRobertaForMaskedLM"),Rxt.forEach(t),C9r=r(Iqe," (XLM-RoBERTa model)"),Iqe.forEach(t),w9r=i(le),$9=n(le,"LI",{});var Nqe=s($9);oTe=n(Nqe,"STRONG",{});var Pxt=s(oTe);A9r=r(Pxt,"xlnet"),Pxt.forEach(t),L9r=r(Nqe," \u2014 "),pJ=n(Nqe,"A",{href:!0});var Bxt=s(pJ);y9r=r(Bxt,"TFXLNetLMHeadModel"),Bxt.forEach(t),x9r=r(Nqe," (XLNet model)"),Nqe.forEach(t),le.forEach(t),$9r=i(xl),T(k9.$$.fragment,xl),xl.forEach(t),yl.forEach(t),wXe=i(f),cc=n(f,"H2",{class:!0});var RQe=s(cc);S9=n(RQe,"A",{id:!0,class:!0,href:!0});var Ixt=s(S9);rTe=n(Ixt,"SPAN",{});var Nxt=s(rTe);T(z8.$$.fragment,Nxt),Nxt.forEach(t),Ixt.forEach(t),k9r=i(RQe),tTe=n(RQe,"SPAN",{});var qxt=s(tTe);S9r=r(qxt,"TFAutoModelForCausalLM"),qxt.forEach(t),RQe.forEach(t),AXe=i(f),rr=n(f,"DIV",{class:!0});var $l=s(rr);T(Q8.$$.fragment,$l),R9r=i($l),fc=n($l,"P",{});var cte=s(fc);P9r=r(cte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),_J=n(cte,"A",{href:!0});var jxt=s(_J);B9r=r(jxt,"from_pretrained()"),jxt.forEach(t),I9r=r(cte," class method or the "),uJ=n(cte,"A",{href:!0});var Dxt=s(uJ);N9r=r(Dxt,"from_config()"),Dxt.forEach(t),q9r=r(cte,` class
method.`),cte.forEach(t),j9r=i($l),W8=n($l,"P",{});var PQe=s(W8);D9r=r(PQe,"This class cannot be instantiated directly using "),aTe=n(PQe,"CODE",{});var Gxt=s(aTe);G9r=r(Gxt,"__init__()"),Gxt.forEach(t),O9r=r(PQe," (throws an error)."),PQe.forEach(t),V9r=i($l),Rt=n($l,"DIV",{class:!0});var YA=s(Rt);T(H8.$$.fragment,YA),X9r=i(YA),nTe=n(YA,"P",{});var Oxt=s(nTe);z9r=r(Oxt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Oxt.forEach(t),Q9r=i(YA),mc=n(YA,"P",{});var fte=s(mc);W9r=r(fte,`Note:
Loading a model from its configuration file does `),sTe=n(fte,"STRONG",{});var Vxt=s(sTe);H9r=r(Vxt,"not"),Vxt.forEach(t),U9r=r(fte,` load the model weights. It only affects the
model\u2019s configuration. Use `),bJ=n(fte,"A",{href:!0});var Xxt=s(bJ);J9r=r(Xxt,"from_pretrained()"),Xxt.forEach(t),Y9r=r(fte," to load the model weights."),fte.forEach(t),K9r=i(YA),T(R9.$$.fragment,YA),YA.forEach(t),Z9r=i($l),$r=n($l,"DIV",{class:!0});var kl=s($r);T(U8.$$.fragment,kl),eMr=i(kl),lTe=n(kl,"P",{});var zxt=s(lTe);oMr=r(zxt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),zxt.forEach(t),rMr=i(kl),ln=n(kl,"P",{});var KA=s(ln);tMr=r(KA,"The model class to instantiate is selected based on the "),iTe=n(KA,"CODE",{});var Qxt=s(iTe);aMr=r(Qxt,"model_type"),Qxt.forEach(t),nMr=r(KA,` property of the config object (either
passed as an argument or loaded from `),dTe=n(KA,"CODE",{});var Wxt=s(dTe);sMr=r(Wxt,"pretrained_model_name_or_path"),Wxt.forEach(t),lMr=r(KA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cTe=n(KA,"CODE",{});var Hxt=s(cTe);iMr=r(Hxt,"pretrained_model_name_or_path"),Hxt.forEach(t),dMr=r(KA,":"),KA.forEach(t),cMr=i(kl),Me=n(kl,"UL",{});var Ce=s(Me);P9=n(Ce,"LI",{});var qqe=s(P9);fTe=n(qqe,"STRONG",{});var Uxt=s(fTe);fMr=r(Uxt,"bert"),Uxt.forEach(t),mMr=r(qqe," \u2014 "),vJ=n(qqe,"A",{href:!0});var Jxt=s(vJ);gMr=r(Jxt,"TFBertLMHeadModel"),Jxt.forEach(t),hMr=r(qqe," (BERT model)"),qqe.forEach(t),pMr=i(Ce),B9=n(Ce,"LI",{});var jqe=s(B9);mTe=n(jqe,"STRONG",{});var Yxt=s(mTe);_Mr=r(Yxt,"camembert"),Yxt.forEach(t),uMr=r(jqe," \u2014 "),FJ=n(jqe,"A",{href:!0});var Kxt=s(FJ);bMr=r(Kxt,"TFCamembertForCausalLM"),Kxt.forEach(t),vMr=r(jqe," (CamemBERT model)"),jqe.forEach(t),FMr=i(Ce),I9=n(Ce,"LI",{});var Dqe=s(I9);gTe=n(Dqe,"STRONG",{});var Zxt=s(gTe);TMr=r(Zxt,"ctrl"),Zxt.forEach(t),MMr=r(Dqe," \u2014 "),TJ=n(Dqe,"A",{href:!0});var e$t=s(TJ);EMr=r(e$t,"TFCTRLLMHeadModel"),e$t.forEach(t),CMr=r(Dqe," (CTRL model)"),Dqe.forEach(t),wMr=i(Ce),N9=n(Ce,"LI",{});var Gqe=s(N9);hTe=n(Gqe,"STRONG",{});var o$t=s(hTe);AMr=r(o$t,"gpt2"),o$t.forEach(t),LMr=r(Gqe," \u2014 "),MJ=n(Gqe,"A",{href:!0});var r$t=s(MJ);yMr=r(r$t,"TFGPT2LMHeadModel"),r$t.forEach(t),xMr=r(Gqe," (OpenAI GPT-2 model)"),Gqe.forEach(t),$Mr=i(Ce),q9=n(Ce,"LI",{});var Oqe=s(q9);pTe=n(Oqe,"STRONG",{});var t$t=s(pTe);kMr=r(t$t,"gptj"),t$t.forEach(t),SMr=r(Oqe," \u2014 "),EJ=n(Oqe,"A",{href:!0});var a$t=s(EJ);RMr=r(a$t,"TFGPTJForCausalLM"),a$t.forEach(t),PMr=r(Oqe," (GPT-J model)"),Oqe.forEach(t),BMr=i(Ce),j9=n(Ce,"LI",{});var Vqe=s(j9);_Te=n(Vqe,"STRONG",{});var n$t=s(_Te);IMr=r(n$t,"openai-gpt"),n$t.forEach(t),NMr=r(Vqe," \u2014 "),CJ=n(Vqe,"A",{href:!0});var s$t=s(CJ);qMr=r(s$t,"TFOpenAIGPTLMHeadModel"),s$t.forEach(t),jMr=r(Vqe," (OpenAI GPT model)"),Vqe.forEach(t),DMr=i(Ce),D9=n(Ce,"LI",{});var Xqe=s(D9);uTe=n(Xqe,"STRONG",{});var l$t=s(uTe);GMr=r(l$t,"opt"),l$t.forEach(t),OMr=r(Xqe," \u2014 "),wJ=n(Xqe,"A",{href:!0});var i$t=s(wJ);VMr=r(i$t,"TFOPTForCausalLM"),i$t.forEach(t),XMr=r(Xqe," (OPT model)"),Xqe.forEach(t),zMr=i(Ce),G9=n(Ce,"LI",{});var zqe=s(G9);bTe=n(zqe,"STRONG",{});var d$t=s(bTe);QMr=r(d$t,"rembert"),d$t.forEach(t),WMr=r(zqe," \u2014 "),AJ=n(zqe,"A",{href:!0});var c$t=s(AJ);HMr=r(c$t,"TFRemBertForCausalLM"),c$t.forEach(t),UMr=r(zqe," (RemBERT model)"),zqe.forEach(t),JMr=i(Ce),O9=n(Ce,"LI",{});var Qqe=s(O9);vTe=n(Qqe,"STRONG",{});var f$t=s(vTe);YMr=r(f$t,"roberta"),f$t.forEach(t),KMr=r(Qqe," \u2014 "),LJ=n(Qqe,"A",{href:!0});var m$t=s(LJ);ZMr=r(m$t,"TFRobertaForCausalLM"),m$t.forEach(t),e4r=r(Qqe," (RoBERTa model)"),Qqe.forEach(t),o4r=i(Ce),V9=n(Ce,"LI",{});var Wqe=s(V9);FTe=n(Wqe,"STRONG",{});var g$t=s(FTe);r4r=r(g$t,"roformer"),g$t.forEach(t),t4r=r(Wqe," \u2014 "),yJ=n(Wqe,"A",{href:!0});var h$t=s(yJ);a4r=r(h$t,"TFRoFormerForCausalLM"),h$t.forEach(t),n4r=r(Wqe," (RoFormer model)"),Wqe.forEach(t),s4r=i(Ce),X9=n(Ce,"LI",{});var Hqe=s(X9);TTe=n(Hqe,"STRONG",{});var p$t=s(TTe);l4r=r(p$t,"transfo-xl"),p$t.forEach(t),i4r=r(Hqe," \u2014 "),xJ=n(Hqe,"A",{href:!0});var _$t=s(xJ);d4r=r(_$t,"TFTransfoXLLMHeadModel"),_$t.forEach(t),c4r=r(Hqe," (Transformer-XL model)"),Hqe.forEach(t),f4r=i(Ce),z9=n(Ce,"LI",{});var Uqe=s(z9);MTe=n(Uqe,"STRONG",{});var u$t=s(MTe);m4r=r(u$t,"xlm"),u$t.forEach(t),g4r=r(Uqe," \u2014 "),$J=n(Uqe,"A",{href:!0});var b$t=s($J);h4r=r(b$t,"TFXLMWithLMHeadModel"),b$t.forEach(t),p4r=r(Uqe," (XLM model)"),Uqe.forEach(t),_4r=i(Ce),Q9=n(Ce,"LI",{});var Jqe=s(Q9);ETe=n(Jqe,"STRONG",{});var v$t=s(ETe);u4r=r(v$t,"xlnet"),v$t.forEach(t),b4r=r(Jqe," \u2014 "),kJ=n(Jqe,"A",{href:!0});var F$t=s(kJ);v4r=r(F$t,"TFXLNetLMHeadModel"),F$t.forEach(t),F4r=r(Jqe," (XLNet model)"),Jqe.forEach(t),Ce.forEach(t),T4r=i(kl),T(W9.$$.fragment,kl),kl.forEach(t),$l.forEach(t),LXe=i(f),gc=n(f,"H2",{class:!0});var BQe=s(gc);H9=n(BQe,"A",{id:!0,class:!0,href:!0});var T$t=s(H9);CTe=n(T$t,"SPAN",{});var M$t=s(CTe);T(J8.$$.fragment,M$t),M$t.forEach(t),T$t.forEach(t),M4r=i(BQe),wTe=n(BQe,"SPAN",{});var E$t=s(wTe);E4r=r(E$t,"TFAutoModelForImageClassification"),E$t.forEach(t),BQe.forEach(t),yXe=i(f),tr=n(f,"DIV",{class:!0});var Sl=s(tr);T(Y8.$$.fragment,Sl),C4r=i(Sl),hc=n(Sl,"P",{});var mte=s(hc);w4r=r(mte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),SJ=n(mte,"A",{href:!0});var C$t=s(SJ);A4r=r(C$t,"from_pretrained()"),C$t.forEach(t),L4r=r(mte," class method or the "),RJ=n(mte,"A",{href:!0});var w$t=s(RJ);y4r=r(w$t,"from_config()"),w$t.forEach(t),x4r=r(mte,` class
method.`),mte.forEach(t),$4r=i(Sl),K8=n(Sl,"P",{});var IQe=s(K8);k4r=r(IQe,"This class cannot be instantiated directly using "),ATe=n(IQe,"CODE",{});var A$t=s(ATe);S4r=r(A$t,"__init__()"),A$t.forEach(t),R4r=r(IQe," (throws an error)."),IQe.forEach(t),P4r=i(Sl),Pt=n(Sl,"DIV",{class:!0});var ZA=s(Pt);T(Z8.$$.fragment,ZA),B4r=i(ZA),LTe=n(ZA,"P",{});var L$t=s(LTe);I4r=r(L$t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),L$t.forEach(t),N4r=i(ZA),pc=n(ZA,"P",{});var gte=s(pc);q4r=r(gte,`Note:
Loading a model from its configuration file does `),yTe=n(gte,"STRONG",{});var y$t=s(yTe);j4r=r(y$t,"not"),y$t.forEach(t),D4r=r(gte,` load the model weights. It only affects the
model\u2019s configuration. Use `),PJ=n(gte,"A",{href:!0});var x$t=s(PJ);G4r=r(x$t,"from_pretrained()"),x$t.forEach(t),O4r=r(gte," to load the model weights."),gte.forEach(t),V4r=i(ZA),T(U9.$$.fragment,ZA),ZA.forEach(t),X4r=i(Sl),kr=n(Sl,"DIV",{class:!0});var Rl=s(kr);T(ex.$$.fragment,Rl),z4r=i(Rl),xTe=n(Rl,"P",{});var $$t=s(xTe);Q4r=r($$t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),$$t.forEach(t),W4r=i(Rl),dn=n(Rl,"P",{});var e6=s(dn);H4r=r(e6,"The model class to instantiate is selected based on the "),$Te=n(e6,"CODE",{});var k$t=s($Te);U4r=r(k$t,"model_type"),k$t.forEach(t),J4r=r(e6,` property of the config object (either
passed as an argument or loaded from `),kTe=n(e6,"CODE",{});var S$t=s(kTe);Y4r=r(S$t,"pretrained_model_name_or_path"),S$t.forEach(t),K4r=r(e6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),STe=n(e6,"CODE",{});var R$t=s(STe);Z4r=r(R$t,"pretrained_model_name_or_path"),R$t.forEach(t),eEr=r(e6,":"),e6.forEach(t),oEr=i(Rl),rt=n(Rl,"UL",{});var Pl=s(rt);J9=n(Pl,"LI",{});var Yqe=s(J9);RTe=n(Yqe,"STRONG",{});var P$t=s(RTe);rEr=r(P$t,"convnext"),P$t.forEach(t),tEr=r(Yqe," \u2014 "),BJ=n(Yqe,"A",{href:!0});var B$t=s(BJ);aEr=r(B$t,"TFConvNextForImageClassification"),B$t.forEach(t),nEr=r(Yqe," (ConvNeXT model)"),Yqe.forEach(t),sEr=i(Pl),Y9=n(Pl,"LI",{});var Kqe=s(Y9);PTe=n(Kqe,"STRONG",{});var I$t=s(PTe);lEr=r(I$t,"data2vec-vision"),I$t.forEach(t),iEr=r(Kqe," \u2014 "),IJ=n(Kqe,"A",{href:!0});var N$t=s(IJ);dEr=r(N$t,"TFData2VecVisionForImageClassification"),N$t.forEach(t),cEr=r(Kqe," (Data2VecVision model)"),Kqe.forEach(t),fEr=i(Pl),K9=n(Pl,"LI",{});var Zqe=s(K9);BTe=n(Zqe,"STRONG",{});var q$t=s(BTe);mEr=r(q$t,"regnet"),q$t.forEach(t),gEr=r(Zqe," \u2014 "),NJ=n(Zqe,"A",{href:!0});var j$t=s(NJ);hEr=r(j$t,"TFRegNetForImageClassification"),j$t.forEach(t),pEr=r(Zqe," (RegNet model)"),Zqe.forEach(t),_Er=i(Pl),Z9=n(Pl,"LI",{});var eje=s(Z9);ITe=n(eje,"STRONG",{});var D$t=s(ITe);uEr=r(D$t,"swin"),D$t.forEach(t),bEr=r(eje," \u2014 "),qJ=n(eje,"A",{href:!0});var G$t=s(qJ);vEr=r(G$t,"TFSwinForImageClassification"),G$t.forEach(t),FEr=r(eje," (Swin Transformer model)"),eje.forEach(t),TEr=i(Pl),eM=n(Pl,"LI",{});var oje=s(eM);NTe=n(oje,"STRONG",{});var O$t=s(NTe);MEr=r(O$t,"vit"),O$t.forEach(t),EEr=r(oje," \u2014 "),jJ=n(oje,"A",{href:!0});var V$t=s(jJ);CEr=r(V$t,"TFViTForImageClassification"),V$t.forEach(t),wEr=r(oje," (ViT model)"),oje.forEach(t),Pl.forEach(t),AEr=i(Rl),T(oM.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),xXe=i(f),_c=n(f,"H2",{class:!0});var NQe=s(_c);rM=n(NQe,"A",{id:!0,class:!0,href:!0});var X$t=s(rM);qTe=n(X$t,"SPAN",{});var z$t=s(qTe);T(ox.$$.fragment,z$t),z$t.forEach(t),X$t.forEach(t),LEr=i(NQe),jTe=n(NQe,"SPAN",{});var Q$t=s(jTe);yEr=r(Q$t,"TFAutoModelForMaskedLM"),Q$t.forEach(t),NQe.forEach(t),$Xe=i(f),ar=n(f,"DIV",{class:!0});var Bl=s(ar);T(rx.$$.fragment,Bl),xEr=i(Bl),uc=n(Bl,"P",{});var hte=s(uc);$Er=r(hte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),DJ=n(hte,"A",{href:!0});var W$t=s(DJ);kEr=r(W$t,"from_pretrained()"),W$t.forEach(t),SEr=r(hte," class method or the "),GJ=n(hte,"A",{href:!0});var H$t=s(GJ);REr=r(H$t,"from_config()"),H$t.forEach(t),PEr=r(hte,` class
method.`),hte.forEach(t),BEr=i(Bl),tx=n(Bl,"P",{});var qQe=s(tx);IEr=r(qQe,"This class cannot be instantiated directly using "),DTe=n(qQe,"CODE",{});var U$t=s(DTe);NEr=r(U$t,"__init__()"),U$t.forEach(t),qEr=r(qQe," (throws an error)."),qQe.forEach(t),jEr=i(Bl),Bt=n(Bl,"DIV",{class:!0});var o6=s(Bt);T(ax.$$.fragment,o6),DEr=i(o6),GTe=n(o6,"P",{});var J$t=s(GTe);GEr=r(J$t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),J$t.forEach(t),OEr=i(o6),bc=n(o6,"P",{});var pte=s(bc);VEr=r(pte,`Note:
Loading a model from its configuration file does `),OTe=n(pte,"STRONG",{});var Y$t=s(OTe);XEr=r(Y$t,"not"),Y$t.forEach(t),zEr=r(pte,` load the model weights. It only affects the
model\u2019s configuration. Use `),OJ=n(pte,"A",{href:!0});var K$t=s(OJ);QEr=r(K$t,"from_pretrained()"),K$t.forEach(t),WEr=r(pte," to load the model weights."),pte.forEach(t),HEr=i(o6),T(tM.$$.fragment,o6),o6.forEach(t),UEr=i(Bl),Sr=n(Bl,"DIV",{class:!0});var Il=s(Sr);T(nx.$$.fragment,Il),JEr=i(Il),VTe=n(Il,"P",{});var Z$t=s(VTe);YEr=r(Z$t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Z$t.forEach(t),KEr=i(Il),cn=n(Il,"P",{});var r6=s(cn);ZEr=r(r6,"The model class to instantiate is selected based on the "),XTe=n(r6,"CODE",{});var ekt=s(XTe);eCr=r(ekt,"model_type"),ekt.forEach(t),oCr=r(r6,` property of the config object (either
passed as an argument or loaded from `),zTe=n(r6,"CODE",{});var okt=s(zTe);rCr=r(okt,"pretrained_model_name_or_path"),okt.forEach(t),tCr=r(r6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QTe=n(r6,"CODE",{});var rkt=s(QTe);aCr=r(rkt,"pretrained_model_name_or_path"),rkt.forEach(t),nCr=r(r6,":"),r6.forEach(t),sCr=i(Il),ie=n(Il,"UL",{});var fe=s(ie);aM=n(fe,"LI",{});var rje=s(aM);WTe=n(rje,"STRONG",{});var tkt=s(WTe);lCr=r(tkt,"albert"),tkt.forEach(t),iCr=r(rje," \u2014 "),VJ=n(rje,"A",{href:!0});var akt=s(VJ);dCr=r(akt,"TFAlbertForMaskedLM"),akt.forEach(t),cCr=r(rje," (ALBERT model)"),rje.forEach(t),fCr=i(fe),nM=n(fe,"LI",{});var tje=s(nM);HTe=n(tje,"STRONG",{});var nkt=s(HTe);mCr=r(nkt,"bert"),nkt.forEach(t),gCr=r(tje," \u2014 "),XJ=n(tje,"A",{href:!0});var skt=s(XJ);hCr=r(skt,"TFBertForMaskedLM"),skt.forEach(t),pCr=r(tje," (BERT model)"),tje.forEach(t),_Cr=i(fe),sM=n(fe,"LI",{});var aje=s(sM);UTe=n(aje,"STRONG",{});var lkt=s(UTe);uCr=r(lkt,"camembert"),lkt.forEach(t),bCr=r(aje," \u2014 "),zJ=n(aje,"A",{href:!0});var ikt=s(zJ);vCr=r(ikt,"TFCamembertForMaskedLM"),ikt.forEach(t),FCr=r(aje," (CamemBERT model)"),aje.forEach(t),TCr=i(fe),lM=n(fe,"LI",{});var nje=s(lM);JTe=n(nje,"STRONG",{});var dkt=s(JTe);MCr=r(dkt,"convbert"),dkt.forEach(t),ECr=r(nje," \u2014 "),QJ=n(nje,"A",{href:!0});var ckt=s(QJ);CCr=r(ckt,"TFConvBertForMaskedLM"),ckt.forEach(t),wCr=r(nje," (ConvBERT model)"),nje.forEach(t),ACr=i(fe),iM=n(fe,"LI",{});var sje=s(iM);YTe=n(sje,"STRONG",{});var fkt=s(YTe);LCr=r(fkt,"deberta"),fkt.forEach(t),yCr=r(sje," \u2014 "),WJ=n(sje,"A",{href:!0});var mkt=s(WJ);xCr=r(mkt,"TFDebertaForMaskedLM"),mkt.forEach(t),$Cr=r(sje," (DeBERTa model)"),sje.forEach(t),kCr=i(fe),dM=n(fe,"LI",{});var lje=s(dM);KTe=n(lje,"STRONG",{});var gkt=s(KTe);SCr=r(gkt,"deberta-v2"),gkt.forEach(t),RCr=r(lje," \u2014 "),HJ=n(lje,"A",{href:!0});var hkt=s(HJ);PCr=r(hkt,"TFDebertaV2ForMaskedLM"),hkt.forEach(t),BCr=r(lje," (DeBERTa-v2 model)"),lje.forEach(t),ICr=i(fe),cM=n(fe,"LI",{});var ije=s(cM);ZTe=n(ije,"STRONG",{});var pkt=s(ZTe);NCr=r(pkt,"distilbert"),pkt.forEach(t),qCr=r(ije," \u2014 "),UJ=n(ije,"A",{href:!0});var _kt=s(UJ);jCr=r(_kt,"TFDistilBertForMaskedLM"),_kt.forEach(t),DCr=r(ije," (DistilBERT model)"),ije.forEach(t),GCr=i(fe),fM=n(fe,"LI",{});var dje=s(fM);e7e=n(dje,"STRONG",{});var ukt=s(e7e);OCr=r(ukt,"electra"),ukt.forEach(t),VCr=r(dje," \u2014 "),JJ=n(dje,"A",{href:!0});var bkt=s(JJ);XCr=r(bkt,"TFElectraForMaskedLM"),bkt.forEach(t),zCr=r(dje," (ELECTRA model)"),dje.forEach(t),QCr=i(fe),mM=n(fe,"LI",{});var cje=s(mM);o7e=n(cje,"STRONG",{});var vkt=s(o7e);WCr=r(vkt,"flaubert"),vkt.forEach(t),HCr=r(cje," \u2014 "),YJ=n(cje,"A",{href:!0});var Fkt=s(YJ);UCr=r(Fkt,"TFFlaubertWithLMHeadModel"),Fkt.forEach(t),JCr=r(cje," (FlauBERT model)"),cje.forEach(t),YCr=i(fe),gM=n(fe,"LI",{});var fje=s(gM);r7e=n(fje,"STRONG",{});var Tkt=s(r7e);KCr=r(Tkt,"funnel"),Tkt.forEach(t),ZCr=r(fje," \u2014 "),KJ=n(fje,"A",{href:!0});var Mkt=s(KJ);e0r=r(Mkt,"TFFunnelForMaskedLM"),Mkt.forEach(t),o0r=r(fje," (Funnel Transformer model)"),fje.forEach(t),r0r=i(fe),hM=n(fe,"LI",{});var mje=s(hM);t7e=n(mje,"STRONG",{});var Ekt=s(t7e);t0r=r(Ekt,"layoutlm"),Ekt.forEach(t),a0r=r(mje," \u2014 "),ZJ=n(mje,"A",{href:!0});var Ckt=s(ZJ);n0r=r(Ckt,"TFLayoutLMForMaskedLM"),Ckt.forEach(t),s0r=r(mje," (LayoutLM model)"),mje.forEach(t),l0r=i(fe),pM=n(fe,"LI",{});var gje=s(pM);a7e=n(gje,"STRONG",{});var wkt=s(a7e);i0r=r(wkt,"longformer"),wkt.forEach(t),d0r=r(gje," \u2014 "),eY=n(gje,"A",{href:!0});var Akt=s(eY);c0r=r(Akt,"TFLongformerForMaskedLM"),Akt.forEach(t),f0r=r(gje," (Longformer model)"),gje.forEach(t),m0r=i(fe),_M=n(fe,"LI",{});var hje=s(_M);n7e=n(hje,"STRONG",{});var Lkt=s(n7e);g0r=r(Lkt,"mobilebert"),Lkt.forEach(t),h0r=r(hje," \u2014 "),oY=n(hje,"A",{href:!0});var ykt=s(oY);p0r=r(ykt,"TFMobileBertForMaskedLM"),ykt.forEach(t),_0r=r(hje," (MobileBERT model)"),hje.forEach(t),u0r=i(fe),uM=n(fe,"LI",{});var pje=s(uM);s7e=n(pje,"STRONG",{});var xkt=s(s7e);b0r=r(xkt,"mpnet"),xkt.forEach(t),v0r=r(pje," \u2014 "),rY=n(pje,"A",{href:!0});var $kt=s(rY);F0r=r($kt,"TFMPNetForMaskedLM"),$kt.forEach(t),T0r=r(pje," (MPNet model)"),pje.forEach(t),M0r=i(fe),bM=n(fe,"LI",{});var _je=s(bM);l7e=n(_je,"STRONG",{});var kkt=s(l7e);E0r=r(kkt,"rembert"),kkt.forEach(t),C0r=r(_je," \u2014 "),tY=n(_je,"A",{href:!0});var Skt=s(tY);w0r=r(Skt,"TFRemBertForMaskedLM"),Skt.forEach(t),A0r=r(_je," (RemBERT model)"),_je.forEach(t),L0r=i(fe),vM=n(fe,"LI",{});var uje=s(vM);i7e=n(uje,"STRONG",{});var Rkt=s(i7e);y0r=r(Rkt,"roberta"),Rkt.forEach(t),x0r=r(uje," \u2014 "),aY=n(uje,"A",{href:!0});var Pkt=s(aY);$0r=r(Pkt,"TFRobertaForMaskedLM"),Pkt.forEach(t),k0r=r(uje," (RoBERTa model)"),uje.forEach(t),S0r=i(fe),FM=n(fe,"LI",{});var bje=s(FM);d7e=n(bje,"STRONG",{});var Bkt=s(d7e);R0r=r(Bkt,"roformer"),Bkt.forEach(t),P0r=r(bje," \u2014 "),nY=n(bje,"A",{href:!0});var Ikt=s(nY);B0r=r(Ikt,"TFRoFormerForMaskedLM"),Ikt.forEach(t),I0r=r(bje," (RoFormer model)"),bje.forEach(t),N0r=i(fe),TM=n(fe,"LI",{});var vje=s(TM);c7e=n(vje,"STRONG",{});var Nkt=s(c7e);q0r=r(Nkt,"tapas"),Nkt.forEach(t),j0r=r(vje," \u2014 "),sY=n(vje,"A",{href:!0});var qkt=s(sY);D0r=r(qkt,"TFTapasForMaskedLM"),qkt.forEach(t),G0r=r(vje," (TAPAS model)"),vje.forEach(t),O0r=i(fe),MM=n(fe,"LI",{});var Fje=s(MM);f7e=n(Fje,"STRONG",{});var jkt=s(f7e);V0r=r(jkt,"xlm"),jkt.forEach(t),X0r=r(Fje," \u2014 "),lY=n(Fje,"A",{href:!0});var Dkt=s(lY);z0r=r(Dkt,"TFXLMWithLMHeadModel"),Dkt.forEach(t),Q0r=r(Fje," (XLM model)"),Fje.forEach(t),W0r=i(fe),EM=n(fe,"LI",{});var Tje=s(EM);m7e=n(Tje,"STRONG",{});var Gkt=s(m7e);H0r=r(Gkt,"xlm-roberta"),Gkt.forEach(t),U0r=r(Tje," \u2014 "),iY=n(Tje,"A",{href:!0});var Okt=s(iY);J0r=r(Okt,"TFXLMRobertaForMaskedLM"),Okt.forEach(t),Y0r=r(Tje," (XLM-RoBERTa model)"),Tje.forEach(t),fe.forEach(t),K0r=i(Il),T(CM.$$.fragment,Il),Il.forEach(t),Bl.forEach(t),kXe=i(f),vc=n(f,"H2",{class:!0});var jQe=s(vc);wM=n(jQe,"A",{id:!0,class:!0,href:!0});var Vkt=s(wM);g7e=n(Vkt,"SPAN",{});var Xkt=s(g7e);T(sx.$$.fragment,Xkt),Xkt.forEach(t),Vkt.forEach(t),Z0r=i(jQe),h7e=n(jQe,"SPAN",{});var zkt=s(h7e);ewr=r(zkt,"TFAutoModelForSeq2SeqLM"),zkt.forEach(t),jQe.forEach(t),SXe=i(f),nr=n(f,"DIV",{class:!0});var Nl=s(nr);T(lx.$$.fragment,Nl),owr=i(Nl),Fc=n(Nl,"P",{});var _te=s(Fc);rwr=r(_te,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),dY=n(_te,"A",{href:!0});var Qkt=s(dY);twr=r(Qkt,"from_pretrained()"),Qkt.forEach(t),awr=r(_te," class method or the "),cY=n(_te,"A",{href:!0});var Wkt=s(cY);nwr=r(Wkt,"from_config()"),Wkt.forEach(t),swr=r(_te,` class
method.`),_te.forEach(t),lwr=i(Nl),ix=n(Nl,"P",{});var DQe=s(ix);iwr=r(DQe,"This class cannot be instantiated directly using "),p7e=n(DQe,"CODE",{});var Hkt=s(p7e);dwr=r(Hkt,"__init__()"),Hkt.forEach(t),cwr=r(DQe," (throws an error)."),DQe.forEach(t),fwr=i(Nl),It=n(Nl,"DIV",{class:!0});var t6=s(It);T(dx.$$.fragment,t6),mwr=i(t6),_7e=n(t6,"P",{});var Ukt=s(_7e);gwr=r(Ukt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Ukt.forEach(t),hwr=i(t6),Tc=n(t6,"P",{});var ute=s(Tc);pwr=r(ute,`Note:
Loading a model from its configuration file does `),u7e=n(ute,"STRONG",{});var Jkt=s(u7e);_wr=r(Jkt,"not"),Jkt.forEach(t),uwr=r(ute,` load the model weights. It only affects the
model\u2019s configuration. Use `),fY=n(ute,"A",{href:!0});var Ykt=s(fY);bwr=r(Ykt,"from_pretrained()"),Ykt.forEach(t),vwr=r(ute," to load the model weights."),ute.forEach(t),Fwr=i(t6),T(AM.$$.fragment,t6),t6.forEach(t),Twr=i(Nl),Rr=n(Nl,"DIV",{class:!0});var ql=s(Rr);T(cx.$$.fragment,ql),Mwr=i(ql),b7e=n(ql,"P",{});var Kkt=s(b7e);Ewr=r(Kkt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Kkt.forEach(t),Cwr=i(ql),fn=n(ql,"P",{});var a6=s(fn);wwr=r(a6,"The model class to instantiate is selected based on the "),v7e=n(a6,"CODE",{});var Zkt=s(v7e);Awr=r(Zkt,"model_type"),Zkt.forEach(t),Lwr=r(a6,` property of the config object (either
passed as an argument or loaded from `),F7e=n(a6,"CODE",{});var eSt=s(F7e);ywr=r(eSt,"pretrained_model_name_or_path"),eSt.forEach(t),xwr=r(a6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T7e=n(a6,"CODE",{});var oSt=s(T7e);$wr=r(oSt,"pretrained_model_name_or_path"),oSt.forEach(t),kwr=r(a6,":"),a6.forEach(t),Swr=i(ql),ye=n(ql,"UL",{});var Ie=s(ye);LM=n(Ie,"LI",{});var Mje=s(LM);M7e=n(Mje,"STRONG",{});var rSt=s(M7e);Rwr=r(rSt,"bart"),rSt.forEach(t),Pwr=r(Mje," \u2014 "),mY=n(Mje,"A",{href:!0});var tSt=s(mY);Bwr=r(tSt,"TFBartForConditionalGeneration"),tSt.forEach(t),Iwr=r(Mje," (BART model)"),Mje.forEach(t),Nwr=i(Ie),yM=n(Ie,"LI",{});var Eje=s(yM);E7e=n(Eje,"STRONG",{});var aSt=s(E7e);qwr=r(aSt,"blenderbot"),aSt.forEach(t),jwr=r(Eje," \u2014 "),gY=n(Eje,"A",{href:!0});var nSt=s(gY);Dwr=r(nSt,"TFBlenderbotForConditionalGeneration"),nSt.forEach(t),Gwr=r(Eje," (Blenderbot model)"),Eje.forEach(t),Owr=i(Ie),xM=n(Ie,"LI",{});var Cje=s(xM);C7e=n(Cje,"STRONG",{});var sSt=s(C7e);Vwr=r(sSt,"blenderbot-small"),sSt.forEach(t),Xwr=r(Cje," \u2014 "),hY=n(Cje,"A",{href:!0});var lSt=s(hY);zwr=r(lSt,"TFBlenderbotSmallForConditionalGeneration"),lSt.forEach(t),Qwr=r(Cje," (BlenderbotSmall model)"),Cje.forEach(t),Wwr=i(Ie),$M=n(Ie,"LI",{});var wje=s($M);w7e=n(wje,"STRONG",{});var iSt=s(w7e);Hwr=r(iSt,"encoder-decoder"),iSt.forEach(t),Uwr=r(wje," \u2014 "),pY=n(wje,"A",{href:!0});var dSt=s(pY);Jwr=r(dSt,"TFEncoderDecoderModel"),dSt.forEach(t),Ywr=r(wje," (Encoder decoder model)"),wje.forEach(t),Kwr=i(Ie),kM=n(Ie,"LI",{});var Aje=s(kM);A7e=n(Aje,"STRONG",{});var cSt=s(A7e);Zwr=r(cSt,"led"),cSt.forEach(t),eAr=r(Aje," \u2014 "),_Y=n(Aje,"A",{href:!0});var fSt=s(_Y);oAr=r(fSt,"TFLEDForConditionalGeneration"),fSt.forEach(t),rAr=r(Aje," (LED model)"),Aje.forEach(t),tAr=i(Ie),SM=n(Ie,"LI",{});var Lje=s(SM);L7e=n(Lje,"STRONG",{});var mSt=s(L7e);aAr=r(mSt,"marian"),mSt.forEach(t),nAr=r(Lje," \u2014 "),uY=n(Lje,"A",{href:!0});var gSt=s(uY);sAr=r(gSt,"TFMarianMTModel"),gSt.forEach(t),lAr=r(Lje," (Marian model)"),Lje.forEach(t),iAr=i(Ie),RM=n(Ie,"LI",{});var yje=s(RM);y7e=n(yje,"STRONG",{});var hSt=s(y7e);dAr=r(hSt,"mbart"),hSt.forEach(t),cAr=r(yje," \u2014 "),bY=n(yje,"A",{href:!0});var pSt=s(bY);fAr=r(pSt,"TFMBartForConditionalGeneration"),pSt.forEach(t),mAr=r(yje," (mBART model)"),yje.forEach(t),gAr=i(Ie),PM=n(Ie,"LI",{});var xje=s(PM);x7e=n(xje,"STRONG",{});var _St=s(x7e);hAr=r(_St,"mt5"),_St.forEach(t),pAr=r(xje," \u2014 "),vY=n(xje,"A",{href:!0});var uSt=s(vY);_Ar=r(uSt,"TFMT5ForConditionalGeneration"),uSt.forEach(t),uAr=r(xje," (MT5 model)"),xje.forEach(t),bAr=i(Ie),BM=n(Ie,"LI",{});var $je=s(BM);$7e=n($je,"STRONG",{});var bSt=s($7e);vAr=r(bSt,"pegasus"),bSt.forEach(t),FAr=r($je," \u2014 "),FY=n($je,"A",{href:!0});var vSt=s(FY);TAr=r(vSt,"TFPegasusForConditionalGeneration"),vSt.forEach(t),MAr=r($je," (Pegasus model)"),$je.forEach(t),EAr=i(Ie),IM=n(Ie,"LI",{});var kje=s(IM);k7e=n(kje,"STRONG",{});var FSt=s(k7e);CAr=r(FSt,"t5"),FSt.forEach(t),wAr=r(kje," \u2014 "),TY=n(kje,"A",{href:!0});var TSt=s(TY);AAr=r(TSt,"TFT5ForConditionalGeneration"),TSt.forEach(t),LAr=r(kje," (T5 model)"),kje.forEach(t),Ie.forEach(t),yAr=i(ql),T(NM.$$.fragment,ql),ql.forEach(t),Nl.forEach(t),RXe=i(f),Mc=n(f,"H2",{class:!0});var GQe=s(Mc);qM=n(GQe,"A",{id:!0,class:!0,href:!0});var MSt=s(qM);S7e=n(MSt,"SPAN",{});var ESt=s(S7e);T(fx.$$.fragment,ESt),ESt.forEach(t),MSt.forEach(t),xAr=i(GQe),R7e=n(GQe,"SPAN",{});var CSt=s(R7e);$Ar=r(CSt,"TFAutoModelForSequenceClassification"),CSt.forEach(t),GQe.forEach(t),PXe=i(f),sr=n(f,"DIV",{class:!0});var jl=s(sr);T(mx.$$.fragment,jl),kAr=i(jl),Ec=n(jl,"P",{});var bte=s(Ec);SAr=r(bte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),MY=n(bte,"A",{href:!0});var wSt=s(MY);RAr=r(wSt,"from_pretrained()"),wSt.forEach(t),PAr=r(bte," class method or the "),EY=n(bte,"A",{href:!0});var ASt=s(EY);BAr=r(ASt,"from_config()"),ASt.forEach(t),IAr=r(bte,` class
method.`),bte.forEach(t),NAr=i(jl),gx=n(jl,"P",{});var OQe=s(gx);qAr=r(OQe,"This class cannot be instantiated directly using "),P7e=n(OQe,"CODE",{});var LSt=s(P7e);jAr=r(LSt,"__init__()"),LSt.forEach(t),DAr=r(OQe," (throws an error)."),OQe.forEach(t),GAr=i(jl),Nt=n(jl,"DIV",{class:!0});var n6=s(Nt);T(hx.$$.fragment,n6),OAr=i(n6),B7e=n(n6,"P",{});var ySt=s(B7e);VAr=r(ySt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),ySt.forEach(t),XAr=i(n6),Cc=n(n6,"P",{});var vte=s(Cc);zAr=r(vte,`Note:
Loading a model from its configuration file does `),I7e=n(vte,"STRONG",{});var xSt=s(I7e);QAr=r(xSt,"not"),xSt.forEach(t),WAr=r(vte,` load the model weights. It only affects the
model\u2019s configuration. Use `),CY=n(vte,"A",{href:!0});var $St=s(CY);HAr=r($St,"from_pretrained()"),$St.forEach(t),UAr=r(vte," to load the model weights."),vte.forEach(t),JAr=i(n6),T(jM.$$.fragment,n6),n6.forEach(t),YAr=i(jl),Pr=n(jl,"DIV",{class:!0});var Dl=s(Pr);T(px.$$.fragment,Dl),KAr=i(Dl),N7e=n(Dl,"P",{});var kSt=s(N7e);ZAr=r(kSt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),kSt.forEach(t),e6r=i(Dl),mn=n(Dl,"P",{});var s6=s(mn);o6r=r(s6,"The model class to instantiate is selected based on the "),q7e=n(s6,"CODE",{});var SSt=s(q7e);r6r=r(SSt,"model_type"),SSt.forEach(t),t6r=r(s6,` property of the config object (either
passed as an argument or loaded from `),j7e=n(s6,"CODE",{});var RSt=s(j7e);a6r=r(RSt,"pretrained_model_name_or_path"),RSt.forEach(t),n6r=r(s6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D7e=n(s6,"CODE",{});var PSt=s(D7e);s6r=r(PSt,"pretrained_model_name_or_path"),PSt.forEach(t),l6r=r(s6,":"),s6.forEach(t),i6r=i(Dl),te=n(Dl,"UL",{});var ne=s(te);DM=n(ne,"LI",{});var Sje=s(DM);G7e=n(Sje,"STRONG",{});var BSt=s(G7e);d6r=r(BSt,"albert"),BSt.forEach(t),c6r=r(Sje," \u2014 "),wY=n(Sje,"A",{href:!0});var ISt=s(wY);f6r=r(ISt,"TFAlbertForSequenceClassification"),ISt.forEach(t),m6r=r(Sje," (ALBERT model)"),Sje.forEach(t),g6r=i(ne),GM=n(ne,"LI",{});var Rje=s(GM);O7e=n(Rje,"STRONG",{});var NSt=s(O7e);h6r=r(NSt,"bert"),NSt.forEach(t),p6r=r(Rje," \u2014 "),AY=n(Rje,"A",{href:!0});var qSt=s(AY);_6r=r(qSt,"TFBertForSequenceClassification"),qSt.forEach(t),u6r=r(Rje," (BERT model)"),Rje.forEach(t),b6r=i(ne),OM=n(ne,"LI",{});var Pje=s(OM);V7e=n(Pje,"STRONG",{});var jSt=s(V7e);v6r=r(jSt,"camembert"),jSt.forEach(t),F6r=r(Pje," \u2014 "),LY=n(Pje,"A",{href:!0});var DSt=s(LY);T6r=r(DSt,"TFCamembertForSequenceClassification"),DSt.forEach(t),M6r=r(Pje," (CamemBERT model)"),Pje.forEach(t),E6r=i(ne),VM=n(ne,"LI",{});var Bje=s(VM);X7e=n(Bje,"STRONG",{});var GSt=s(X7e);C6r=r(GSt,"convbert"),GSt.forEach(t),w6r=r(Bje," \u2014 "),yY=n(Bje,"A",{href:!0});var OSt=s(yY);A6r=r(OSt,"TFConvBertForSequenceClassification"),OSt.forEach(t),L6r=r(Bje," (ConvBERT model)"),Bje.forEach(t),y6r=i(ne),XM=n(ne,"LI",{});var Ije=s(XM);z7e=n(Ije,"STRONG",{});var VSt=s(z7e);x6r=r(VSt,"ctrl"),VSt.forEach(t),$6r=r(Ije," \u2014 "),xY=n(Ije,"A",{href:!0});var XSt=s(xY);k6r=r(XSt,"TFCTRLForSequenceClassification"),XSt.forEach(t),S6r=r(Ije," (CTRL model)"),Ije.forEach(t),R6r=i(ne),zM=n(ne,"LI",{});var Nje=s(zM);Q7e=n(Nje,"STRONG",{});var zSt=s(Q7e);P6r=r(zSt,"deberta"),zSt.forEach(t),B6r=r(Nje," \u2014 "),$Y=n(Nje,"A",{href:!0});var QSt=s($Y);I6r=r(QSt,"TFDebertaForSequenceClassification"),QSt.forEach(t),N6r=r(Nje," (DeBERTa model)"),Nje.forEach(t),q6r=i(ne),QM=n(ne,"LI",{});var qje=s(QM);W7e=n(qje,"STRONG",{});var WSt=s(W7e);j6r=r(WSt,"deberta-v2"),WSt.forEach(t),D6r=r(qje," \u2014 "),kY=n(qje,"A",{href:!0});var HSt=s(kY);G6r=r(HSt,"TFDebertaV2ForSequenceClassification"),HSt.forEach(t),O6r=r(qje," (DeBERTa-v2 model)"),qje.forEach(t),V6r=i(ne),WM=n(ne,"LI",{});var jje=s(WM);H7e=n(jje,"STRONG",{});var USt=s(H7e);X6r=r(USt,"distilbert"),USt.forEach(t),z6r=r(jje," \u2014 "),SY=n(jje,"A",{href:!0});var JSt=s(SY);Q6r=r(JSt,"TFDistilBertForSequenceClassification"),JSt.forEach(t),W6r=r(jje," (DistilBERT model)"),jje.forEach(t),H6r=i(ne),HM=n(ne,"LI",{});var Dje=s(HM);U7e=n(Dje,"STRONG",{});var YSt=s(U7e);U6r=r(YSt,"electra"),YSt.forEach(t),J6r=r(Dje," \u2014 "),RY=n(Dje,"A",{href:!0});var KSt=s(RY);Y6r=r(KSt,"TFElectraForSequenceClassification"),KSt.forEach(t),K6r=r(Dje," (ELECTRA model)"),Dje.forEach(t),Z6r=i(ne),UM=n(ne,"LI",{});var Gje=s(UM);J7e=n(Gje,"STRONG",{});var ZSt=s(J7e);eLr=r(ZSt,"flaubert"),ZSt.forEach(t),oLr=r(Gje," \u2014 "),PY=n(Gje,"A",{href:!0});var eRt=s(PY);rLr=r(eRt,"TFFlaubertForSequenceClassification"),eRt.forEach(t),tLr=r(Gje," (FlauBERT model)"),Gje.forEach(t),aLr=i(ne),JM=n(ne,"LI",{});var Oje=s(JM);Y7e=n(Oje,"STRONG",{});var oRt=s(Y7e);nLr=r(oRt,"funnel"),oRt.forEach(t),sLr=r(Oje," \u2014 "),BY=n(Oje,"A",{href:!0});var rRt=s(BY);lLr=r(rRt,"TFFunnelForSequenceClassification"),rRt.forEach(t),iLr=r(Oje," (Funnel Transformer model)"),Oje.forEach(t),dLr=i(ne),YM=n(ne,"LI",{});var Vje=s(YM);K7e=n(Vje,"STRONG",{});var tRt=s(K7e);cLr=r(tRt,"gpt2"),tRt.forEach(t),fLr=r(Vje," \u2014 "),IY=n(Vje,"A",{href:!0});var aRt=s(IY);mLr=r(aRt,"TFGPT2ForSequenceClassification"),aRt.forEach(t),gLr=r(Vje," (OpenAI GPT-2 model)"),Vje.forEach(t),hLr=i(ne),KM=n(ne,"LI",{});var Xje=s(KM);Z7e=n(Xje,"STRONG",{});var nRt=s(Z7e);pLr=r(nRt,"gptj"),nRt.forEach(t),_Lr=r(Xje," \u2014 "),NY=n(Xje,"A",{href:!0});var sRt=s(NY);uLr=r(sRt,"TFGPTJForSequenceClassification"),sRt.forEach(t),bLr=r(Xje," (GPT-J model)"),Xje.forEach(t),vLr=i(ne),ZM=n(ne,"LI",{});var zje=s(ZM);e9e=n(zje,"STRONG",{});var lRt=s(e9e);FLr=r(lRt,"layoutlm"),lRt.forEach(t),TLr=r(zje," \u2014 "),qY=n(zje,"A",{href:!0});var iRt=s(qY);MLr=r(iRt,"TFLayoutLMForSequenceClassification"),iRt.forEach(t),ELr=r(zje," (LayoutLM model)"),zje.forEach(t),CLr=i(ne),e4=n(ne,"LI",{});var Qje=s(e4);o9e=n(Qje,"STRONG",{});var dRt=s(o9e);wLr=r(dRt,"longformer"),dRt.forEach(t),ALr=r(Qje," \u2014 "),jY=n(Qje,"A",{href:!0});var cRt=s(jY);LLr=r(cRt,"TFLongformerForSequenceClassification"),cRt.forEach(t),yLr=r(Qje," (Longformer model)"),Qje.forEach(t),xLr=i(ne),o4=n(ne,"LI",{});var Wje=s(o4);r9e=n(Wje,"STRONG",{});var fRt=s(r9e);$Lr=r(fRt,"mobilebert"),fRt.forEach(t),kLr=r(Wje," \u2014 "),DY=n(Wje,"A",{href:!0});var mRt=s(DY);SLr=r(mRt,"TFMobileBertForSequenceClassification"),mRt.forEach(t),RLr=r(Wje," (MobileBERT model)"),Wje.forEach(t),PLr=i(ne),r4=n(ne,"LI",{});var Hje=s(r4);t9e=n(Hje,"STRONG",{});var gRt=s(t9e);BLr=r(gRt,"mpnet"),gRt.forEach(t),ILr=r(Hje," \u2014 "),GY=n(Hje,"A",{href:!0});var hRt=s(GY);NLr=r(hRt,"TFMPNetForSequenceClassification"),hRt.forEach(t),qLr=r(Hje," (MPNet model)"),Hje.forEach(t),jLr=i(ne),t4=n(ne,"LI",{});var Uje=s(t4);a9e=n(Uje,"STRONG",{});var pRt=s(a9e);DLr=r(pRt,"openai-gpt"),pRt.forEach(t),GLr=r(Uje," \u2014 "),OY=n(Uje,"A",{href:!0});var _Rt=s(OY);OLr=r(_Rt,"TFOpenAIGPTForSequenceClassification"),_Rt.forEach(t),VLr=r(Uje," (OpenAI GPT model)"),Uje.forEach(t),XLr=i(ne),a4=n(ne,"LI",{});var Jje=s(a4);n9e=n(Jje,"STRONG",{});var uRt=s(n9e);zLr=r(uRt,"rembert"),uRt.forEach(t),QLr=r(Jje," \u2014 "),VY=n(Jje,"A",{href:!0});var bRt=s(VY);WLr=r(bRt,"TFRemBertForSequenceClassification"),bRt.forEach(t),HLr=r(Jje," (RemBERT model)"),Jje.forEach(t),ULr=i(ne),n4=n(ne,"LI",{});var Yje=s(n4);s9e=n(Yje,"STRONG",{});var vRt=s(s9e);JLr=r(vRt,"roberta"),vRt.forEach(t),YLr=r(Yje," \u2014 "),XY=n(Yje,"A",{href:!0});var FRt=s(XY);KLr=r(FRt,"TFRobertaForSequenceClassification"),FRt.forEach(t),ZLr=r(Yje," (RoBERTa model)"),Yje.forEach(t),eyr=i(ne),s4=n(ne,"LI",{});var Kje=s(s4);l9e=n(Kje,"STRONG",{});var TRt=s(l9e);oyr=r(TRt,"roformer"),TRt.forEach(t),ryr=r(Kje," \u2014 "),zY=n(Kje,"A",{href:!0});var MRt=s(zY);tyr=r(MRt,"TFRoFormerForSequenceClassification"),MRt.forEach(t),ayr=r(Kje," (RoFormer model)"),Kje.forEach(t),nyr=i(ne),l4=n(ne,"LI",{});var Zje=s(l4);i9e=n(Zje,"STRONG",{});var ERt=s(i9e);syr=r(ERt,"tapas"),ERt.forEach(t),lyr=r(Zje," \u2014 "),QY=n(Zje,"A",{href:!0});var CRt=s(QY);iyr=r(CRt,"TFTapasForSequenceClassification"),CRt.forEach(t),dyr=r(Zje," (TAPAS model)"),Zje.forEach(t),cyr=i(ne),i4=n(ne,"LI",{});var eDe=s(i4);d9e=n(eDe,"STRONG",{});var wRt=s(d9e);fyr=r(wRt,"transfo-xl"),wRt.forEach(t),myr=r(eDe," \u2014 "),WY=n(eDe,"A",{href:!0});var ARt=s(WY);gyr=r(ARt,"TFTransfoXLForSequenceClassification"),ARt.forEach(t),hyr=r(eDe," (Transformer-XL model)"),eDe.forEach(t),pyr=i(ne),d4=n(ne,"LI",{});var oDe=s(d4);c9e=n(oDe,"STRONG",{});var LRt=s(c9e);_yr=r(LRt,"xlm"),LRt.forEach(t),uyr=r(oDe," \u2014 "),HY=n(oDe,"A",{href:!0});var yRt=s(HY);byr=r(yRt,"TFXLMForSequenceClassification"),yRt.forEach(t),vyr=r(oDe," (XLM model)"),oDe.forEach(t),Fyr=i(ne),c4=n(ne,"LI",{});var rDe=s(c4);f9e=n(rDe,"STRONG",{});var xRt=s(f9e);Tyr=r(xRt,"xlm-roberta"),xRt.forEach(t),Myr=r(rDe," \u2014 "),UY=n(rDe,"A",{href:!0});var $Rt=s(UY);Eyr=r($Rt,"TFXLMRobertaForSequenceClassification"),$Rt.forEach(t),Cyr=r(rDe," (XLM-RoBERTa model)"),rDe.forEach(t),wyr=i(ne),f4=n(ne,"LI",{});var tDe=s(f4);m9e=n(tDe,"STRONG",{});var kRt=s(m9e);Ayr=r(kRt,"xlnet"),kRt.forEach(t),Lyr=r(tDe," \u2014 "),JY=n(tDe,"A",{href:!0});var SRt=s(JY);yyr=r(SRt,"TFXLNetForSequenceClassification"),SRt.forEach(t),xyr=r(tDe," (XLNet model)"),tDe.forEach(t),ne.forEach(t),$yr=i(Dl),T(m4.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),BXe=i(f),wc=n(f,"H2",{class:!0});var VQe=s(wc);g4=n(VQe,"A",{id:!0,class:!0,href:!0});var RRt=s(g4);g9e=n(RRt,"SPAN",{});var PRt=s(g9e);T(_x.$$.fragment,PRt),PRt.forEach(t),RRt.forEach(t),kyr=i(VQe),h9e=n(VQe,"SPAN",{});var BRt=s(h9e);Syr=r(BRt,"TFAutoModelForMultipleChoice"),BRt.forEach(t),VQe.forEach(t),IXe=i(f),lr=n(f,"DIV",{class:!0});var Gl=s(lr);T(ux.$$.fragment,Gl),Ryr=i(Gl),Ac=n(Gl,"P",{});var Fte=s(Ac);Pyr=r(Fte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),YY=n(Fte,"A",{href:!0});var IRt=s(YY);Byr=r(IRt,"from_pretrained()"),IRt.forEach(t),Iyr=r(Fte," class method or the "),KY=n(Fte,"A",{href:!0});var NRt=s(KY);Nyr=r(NRt,"from_config()"),NRt.forEach(t),qyr=r(Fte,` class
method.`),Fte.forEach(t),jyr=i(Gl),bx=n(Gl,"P",{});var XQe=s(bx);Dyr=r(XQe,"This class cannot be instantiated directly using "),p9e=n(XQe,"CODE",{});var qRt=s(p9e);Gyr=r(qRt,"__init__()"),qRt.forEach(t),Oyr=r(XQe," (throws an error)."),XQe.forEach(t),Vyr=i(Gl),qt=n(Gl,"DIV",{class:!0});var l6=s(qt);T(vx.$$.fragment,l6),Xyr=i(l6),_9e=n(l6,"P",{});var jRt=s(_9e);zyr=r(jRt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),jRt.forEach(t),Qyr=i(l6),Lc=n(l6,"P",{});var Tte=s(Lc);Wyr=r(Tte,`Note:
Loading a model from its configuration file does `),u9e=n(Tte,"STRONG",{});var DRt=s(u9e);Hyr=r(DRt,"not"),DRt.forEach(t),Uyr=r(Tte,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZY=n(Tte,"A",{href:!0});var GRt=s(ZY);Jyr=r(GRt,"from_pretrained()"),GRt.forEach(t),Yyr=r(Tte," to load the model weights."),Tte.forEach(t),Kyr=i(l6),T(h4.$$.fragment,l6),l6.forEach(t),Zyr=i(Gl),Br=n(Gl,"DIV",{class:!0});var Ol=s(Br);T(Fx.$$.fragment,Ol),e8r=i(Ol),b9e=n(Ol,"P",{});var ORt=s(b9e);o8r=r(ORt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),ORt.forEach(t),r8r=i(Ol),gn=n(Ol,"P",{});var i6=s(gn);t8r=r(i6,"The model class to instantiate is selected based on the "),v9e=n(i6,"CODE",{});var VRt=s(v9e);a8r=r(VRt,"model_type"),VRt.forEach(t),n8r=r(i6,` property of the config object (either
passed as an argument or loaded from `),F9e=n(i6,"CODE",{});var XRt=s(F9e);s8r=r(XRt,"pretrained_model_name_or_path"),XRt.forEach(t),l8r=r(i6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T9e=n(i6,"CODE",{});var zRt=s(T9e);i8r=r(zRt,"pretrained_model_name_or_path"),zRt.forEach(t),d8r=r(i6,":"),i6.forEach(t),c8r=i(Ol),_e=n(Ol,"UL",{});var ve=s(_e);p4=n(ve,"LI",{});var aDe=s(p4);M9e=n(aDe,"STRONG",{});var QRt=s(M9e);f8r=r(QRt,"albert"),QRt.forEach(t),m8r=r(aDe," \u2014 "),eK=n(aDe,"A",{href:!0});var WRt=s(eK);g8r=r(WRt,"TFAlbertForMultipleChoice"),WRt.forEach(t),h8r=r(aDe," (ALBERT model)"),aDe.forEach(t),p8r=i(ve),_4=n(ve,"LI",{});var nDe=s(_4);E9e=n(nDe,"STRONG",{});var HRt=s(E9e);_8r=r(HRt,"bert"),HRt.forEach(t),u8r=r(nDe," \u2014 "),oK=n(nDe,"A",{href:!0});var URt=s(oK);b8r=r(URt,"TFBertForMultipleChoice"),URt.forEach(t),v8r=r(nDe," (BERT model)"),nDe.forEach(t),F8r=i(ve),u4=n(ve,"LI",{});var sDe=s(u4);C9e=n(sDe,"STRONG",{});var JRt=s(C9e);T8r=r(JRt,"camembert"),JRt.forEach(t),M8r=r(sDe," \u2014 "),rK=n(sDe,"A",{href:!0});var YRt=s(rK);E8r=r(YRt,"TFCamembertForMultipleChoice"),YRt.forEach(t),C8r=r(sDe," (CamemBERT model)"),sDe.forEach(t),w8r=i(ve),b4=n(ve,"LI",{});var lDe=s(b4);w9e=n(lDe,"STRONG",{});var KRt=s(w9e);A8r=r(KRt,"convbert"),KRt.forEach(t),L8r=r(lDe," \u2014 "),tK=n(lDe,"A",{href:!0});var ZRt=s(tK);y8r=r(ZRt,"TFConvBertForMultipleChoice"),ZRt.forEach(t),x8r=r(lDe," (ConvBERT model)"),lDe.forEach(t),$8r=i(ve),v4=n(ve,"LI",{});var iDe=s(v4);A9e=n(iDe,"STRONG",{});var ePt=s(A9e);k8r=r(ePt,"distilbert"),ePt.forEach(t),S8r=r(iDe," \u2014 "),aK=n(iDe,"A",{href:!0});var oPt=s(aK);R8r=r(oPt,"TFDistilBertForMultipleChoice"),oPt.forEach(t),P8r=r(iDe," (DistilBERT model)"),iDe.forEach(t),B8r=i(ve),F4=n(ve,"LI",{});var dDe=s(F4);L9e=n(dDe,"STRONG",{});var rPt=s(L9e);I8r=r(rPt,"electra"),rPt.forEach(t),N8r=r(dDe," \u2014 "),nK=n(dDe,"A",{href:!0});var tPt=s(nK);q8r=r(tPt,"TFElectraForMultipleChoice"),tPt.forEach(t),j8r=r(dDe," (ELECTRA model)"),dDe.forEach(t),D8r=i(ve),T4=n(ve,"LI",{});var cDe=s(T4);y9e=n(cDe,"STRONG",{});var aPt=s(y9e);G8r=r(aPt,"flaubert"),aPt.forEach(t),O8r=r(cDe," \u2014 "),sK=n(cDe,"A",{href:!0});var nPt=s(sK);V8r=r(nPt,"TFFlaubertForMultipleChoice"),nPt.forEach(t),X8r=r(cDe," (FlauBERT model)"),cDe.forEach(t),z8r=i(ve),M4=n(ve,"LI",{});var fDe=s(M4);x9e=n(fDe,"STRONG",{});var sPt=s(x9e);Q8r=r(sPt,"funnel"),sPt.forEach(t),W8r=r(fDe," \u2014 "),lK=n(fDe,"A",{href:!0});var lPt=s(lK);H8r=r(lPt,"TFFunnelForMultipleChoice"),lPt.forEach(t),U8r=r(fDe," (Funnel Transformer model)"),fDe.forEach(t),J8r=i(ve),E4=n(ve,"LI",{});var mDe=s(E4);$9e=n(mDe,"STRONG",{});var iPt=s($9e);Y8r=r(iPt,"longformer"),iPt.forEach(t),K8r=r(mDe," \u2014 "),iK=n(mDe,"A",{href:!0});var dPt=s(iK);Z8r=r(dPt,"TFLongformerForMultipleChoice"),dPt.forEach(t),exr=r(mDe," (Longformer model)"),mDe.forEach(t),oxr=i(ve),C4=n(ve,"LI",{});var gDe=s(C4);k9e=n(gDe,"STRONG",{});var cPt=s(k9e);rxr=r(cPt,"mobilebert"),cPt.forEach(t),txr=r(gDe," \u2014 "),dK=n(gDe,"A",{href:!0});var fPt=s(dK);axr=r(fPt,"TFMobileBertForMultipleChoice"),fPt.forEach(t),nxr=r(gDe," (MobileBERT model)"),gDe.forEach(t),sxr=i(ve),w4=n(ve,"LI",{});var hDe=s(w4);S9e=n(hDe,"STRONG",{});var mPt=s(S9e);lxr=r(mPt,"mpnet"),mPt.forEach(t),ixr=r(hDe," \u2014 "),cK=n(hDe,"A",{href:!0});var gPt=s(cK);dxr=r(gPt,"TFMPNetForMultipleChoice"),gPt.forEach(t),cxr=r(hDe," (MPNet model)"),hDe.forEach(t),fxr=i(ve),A4=n(ve,"LI",{});var pDe=s(A4);R9e=n(pDe,"STRONG",{});var hPt=s(R9e);mxr=r(hPt,"rembert"),hPt.forEach(t),gxr=r(pDe," \u2014 "),fK=n(pDe,"A",{href:!0});var pPt=s(fK);hxr=r(pPt,"TFRemBertForMultipleChoice"),pPt.forEach(t),pxr=r(pDe," (RemBERT model)"),pDe.forEach(t),_xr=i(ve),L4=n(ve,"LI",{});var _De=s(L4);P9e=n(_De,"STRONG",{});var _Pt=s(P9e);uxr=r(_Pt,"roberta"),_Pt.forEach(t),bxr=r(_De," \u2014 "),mK=n(_De,"A",{href:!0});var uPt=s(mK);vxr=r(uPt,"TFRobertaForMultipleChoice"),uPt.forEach(t),Fxr=r(_De," (RoBERTa model)"),_De.forEach(t),Txr=i(ve),y4=n(ve,"LI",{});var uDe=s(y4);B9e=n(uDe,"STRONG",{});var bPt=s(B9e);Mxr=r(bPt,"roformer"),bPt.forEach(t),Exr=r(uDe," \u2014 "),gK=n(uDe,"A",{href:!0});var vPt=s(gK);Cxr=r(vPt,"TFRoFormerForMultipleChoice"),vPt.forEach(t),wxr=r(uDe," (RoFormer model)"),uDe.forEach(t),Axr=i(ve),x4=n(ve,"LI",{});var bDe=s(x4);I9e=n(bDe,"STRONG",{});var FPt=s(I9e);Lxr=r(FPt,"xlm"),FPt.forEach(t),yxr=r(bDe," \u2014 "),hK=n(bDe,"A",{href:!0});var TPt=s(hK);xxr=r(TPt,"TFXLMForMultipleChoice"),TPt.forEach(t),$xr=r(bDe," (XLM model)"),bDe.forEach(t),kxr=i(ve),$4=n(ve,"LI",{});var vDe=s($4);N9e=n(vDe,"STRONG",{});var MPt=s(N9e);Sxr=r(MPt,"xlm-roberta"),MPt.forEach(t),Rxr=r(vDe," \u2014 "),pK=n(vDe,"A",{href:!0});var EPt=s(pK);Pxr=r(EPt,"TFXLMRobertaForMultipleChoice"),EPt.forEach(t),Bxr=r(vDe," (XLM-RoBERTa model)"),vDe.forEach(t),Ixr=i(ve),k4=n(ve,"LI",{});var FDe=s(k4);q9e=n(FDe,"STRONG",{});var CPt=s(q9e);Nxr=r(CPt,"xlnet"),CPt.forEach(t),qxr=r(FDe," \u2014 "),_K=n(FDe,"A",{href:!0});var wPt=s(_K);jxr=r(wPt,"TFXLNetForMultipleChoice"),wPt.forEach(t),Dxr=r(FDe," (XLNet model)"),FDe.forEach(t),ve.forEach(t),Gxr=i(Ol),T(S4.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),NXe=i(f),yc=n(f,"H2",{class:!0});var zQe=s(yc);R4=n(zQe,"A",{id:!0,class:!0,href:!0});var APt=s(R4);j9e=n(APt,"SPAN",{});var LPt=s(j9e);T(Tx.$$.fragment,LPt),LPt.forEach(t),APt.forEach(t),Oxr=i(zQe),D9e=n(zQe,"SPAN",{});var yPt=s(D9e);Vxr=r(yPt,"TFAutoModelForNextSentencePrediction"),yPt.forEach(t),zQe.forEach(t),qXe=i(f),ir=n(f,"DIV",{class:!0});var Vl=s(ir);T(Mx.$$.fragment,Vl),Xxr=i(Vl),xc=n(Vl,"P",{});var Mte=s(xc);zxr=r(Mte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),uK=n(Mte,"A",{href:!0});var xPt=s(uK);Qxr=r(xPt,"from_pretrained()"),xPt.forEach(t),Wxr=r(Mte," class method or the "),bK=n(Mte,"A",{href:!0});var $Pt=s(bK);Hxr=r($Pt,"from_config()"),$Pt.forEach(t),Uxr=r(Mte,` class
method.`),Mte.forEach(t),Jxr=i(Vl),Ex=n(Vl,"P",{});var QQe=s(Ex);Yxr=r(QQe,"This class cannot be instantiated directly using "),G9e=n(QQe,"CODE",{});var kPt=s(G9e);Kxr=r(kPt,"__init__()"),kPt.forEach(t),Zxr=r(QQe," (throws an error)."),QQe.forEach(t),e$r=i(Vl),jt=n(Vl,"DIV",{class:!0});var d6=s(jt);T(Cx.$$.fragment,d6),o$r=i(d6),O9e=n(d6,"P",{});var SPt=s(O9e);r$r=r(SPt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),SPt.forEach(t),t$r=i(d6),$c=n(d6,"P",{});var Ete=s($c);a$r=r(Ete,`Note:
Loading a model from its configuration file does `),V9e=n(Ete,"STRONG",{});var RPt=s(V9e);n$r=r(RPt,"not"),RPt.forEach(t),s$r=r(Ete,` load the model weights. It only affects the
model\u2019s configuration. Use `),vK=n(Ete,"A",{href:!0});var PPt=s(vK);l$r=r(PPt,"from_pretrained()"),PPt.forEach(t),i$r=r(Ete," to load the model weights."),Ete.forEach(t),d$r=i(d6),T(P4.$$.fragment,d6),d6.forEach(t),c$r=i(Vl),Ir=n(Vl,"DIV",{class:!0});var Xl=s(Ir);T(wx.$$.fragment,Xl),f$r=i(Xl),X9e=n(Xl,"P",{});var BPt=s(X9e);m$r=r(BPt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),BPt.forEach(t),g$r=i(Xl),hn=n(Xl,"P",{});var c6=s(hn);h$r=r(c6,"The model class to instantiate is selected based on the "),z9e=n(c6,"CODE",{});var IPt=s(z9e);p$r=r(IPt,"model_type"),IPt.forEach(t),_$r=r(c6,` property of the config object (either
passed as an argument or loaded from `),Q9e=n(c6,"CODE",{});var NPt=s(Q9e);u$r=r(NPt,"pretrained_model_name_or_path"),NPt.forEach(t),b$r=r(c6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W9e=n(c6,"CODE",{});var qPt=s(W9e);v$r=r(qPt,"pretrained_model_name_or_path"),qPt.forEach(t),F$r=r(c6,":"),c6.forEach(t),T$r=i(Xl),Ax=n(Xl,"UL",{});var WQe=s(Ax);B4=n(WQe,"LI",{});var TDe=s(B4);H9e=n(TDe,"STRONG",{});var jPt=s(H9e);M$r=r(jPt,"bert"),jPt.forEach(t),E$r=r(TDe," \u2014 "),FK=n(TDe,"A",{href:!0});var DPt=s(FK);C$r=r(DPt,"TFBertForNextSentencePrediction"),DPt.forEach(t),w$r=r(TDe," (BERT model)"),TDe.forEach(t),A$r=i(WQe),I4=n(WQe,"LI",{});var MDe=s(I4);U9e=n(MDe,"STRONG",{});var GPt=s(U9e);L$r=r(GPt,"mobilebert"),GPt.forEach(t),y$r=r(MDe," \u2014 "),TK=n(MDe,"A",{href:!0});var OPt=s(TK);x$r=r(OPt,"TFMobileBertForNextSentencePrediction"),OPt.forEach(t),$$r=r(MDe," (MobileBERT model)"),MDe.forEach(t),WQe.forEach(t),k$r=i(Xl),T(N4.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),jXe=i(f),kc=n(f,"H2",{class:!0});var HQe=s(kc);q4=n(HQe,"A",{id:!0,class:!0,href:!0});var VPt=s(q4);J9e=n(VPt,"SPAN",{});var XPt=s(J9e);T(Lx.$$.fragment,XPt),XPt.forEach(t),VPt.forEach(t),S$r=i(HQe),Y9e=n(HQe,"SPAN",{});var zPt=s(Y9e);R$r=r(zPt,"TFAutoModelForTableQuestionAnswering"),zPt.forEach(t),HQe.forEach(t),DXe=i(f),dr=n(f,"DIV",{class:!0});var zl=s(dr);T(yx.$$.fragment,zl),P$r=i(zl),Sc=n(zl,"P",{});var Cte=s(Sc);B$r=r(Cte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),MK=n(Cte,"A",{href:!0});var QPt=s(MK);I$r=r(QPt,"from_pretrained()"),QPt.forEach(t),N$r=r(Cte," class method or the "),EK=n(Cte,"A",{href:!0});var WPt=s(EK);q$r=r(WPt,"from_config()"),WPt.forEach(t),j$r=r(Cte,` class
method.`),Cte.forEach(t),D$r=i(zl),xx=n(zl,"P",{});var UQe=s(xx);G$r=r(UQe,"This class cannot be instantiated directly using "),K9e=n(UQe,"CODE",{});var HPt=s(K9e);O$r=r(HPt,"__init__()"),HPt.forEach(t),V$r=r(UQe," (throws an error)."),UQe.forEach(t),X$r=i(zl),Dt=n(zl,"DIV",{class:!0});var f6=s(Dt);T($x.$$.fragment,f6),z$r=i(f6),Z9e=n(f6,"P",{});var UPt=s(Z9e);Q$r=r(UPt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),UPt.forEach(t),W$r=i(f6),Rc=n(f6,"P",{});var wte=s(Rc);H$r=r(wte,`Note:
Loading a model from its configuration file does `),eMe=n(wte,"STRONG",{});var JPt=s(eMe);U$r=r(JPt,"not"),JPt.forEach(t),J$r=r(wte,` load the model weights. It only affects the
model\u2019s configuration. Use `),CK=n(wte,"A",{href:!0});var YPt=s(CK);Y$r=r(YPt,"from_pretrained()"),YPt.forEach(t),K$r=r(wte," to load the model weights."),wte.forEach(t),Z$r=i(f6),T(j4.$$.fragment,f6),f6.forEach(t),ekr=i(zl),Nr=n(zl,"DIV",{class:!0});var Ql=s(Nr);T(kx.$$.fragment,Ql),okr=i(Ql),oMe=n(Ql,"P",{});var KPt=s(oMe);rkr=r(KPt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),KPt.forEach(t),tkr=i(Ql),pn=n(Ql,"P",{});var m6=s(pn);akr=r(m6,"The model class to instantiate is selected based on the "),rMe=n(m6,"CODE",{});var ZPt=s(rMe);nkr=r(ZPt,"model_type"),ZPt.forEach(t),skr=r(m6,` property of the config object (either
passed as an argument or loaded from `),tMe=n(m6,"CODE",{});var eBt=s(tMe);lkr=r(eBt,"pretrained_model_name_or_path"),eBt.forEach(t),ikr=r(m6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aMe=n(m6,"CODE",{});var oBt=s(aMe);dkr=r(oBt,"pretrained_model_name_or_path"),oBt.forEach(t),ckr=r(m6,":"),m6.forEach(t),fkr=i(Ql),nMe=n(Ql,"UL",{});var rBt=s(nMe);D4=n(rBt,"LI",{});var EDe=s(D4);sMe=n(EDe,"STRONG",{});var tBt=s(sMe);mkr=r(tBt,"tapas"),tBt.forEach(t),gkr=r(EDe," \u2014 "),wK=n(EDe,"A",{href:!0});var aBt=s(wK);hkr=r(aBt,"TFTapasForQuestionAnswering"),aBt.forEach(t),pkr=r(EDe," (TAPAS model)"),EDe.forEach(t),rBt.forEach(t),_kr=i(Ql),T(G4.$$.fragment,Ql),Ql.forEach(t),zl.forEach(t),GXe=i(f),Pc=n(f,"H2",{class:!0});var JQe=s(Pc);O4=n(JQe,"A",{id:!0,class:!0,href:!0});var nBt=s(O4);lMe=n(nBt,"SPAN",{});var sBt=s(lMe);T(Sx.$$.fragment,sBt),sBt.forEach(t),nBt.forEach(t),ukr=i(JQe),iMe=n(JQe,"SPAN",{});var lBt=s(iMe);bkr=r(lBt,"TFAutoModelForTokenClassification"),lBt.forEach(t),JQe.forEach(t),OXe=i(f),cr=n(f,"DIV",{class:!0});var Wl=s(cr);T(Rx.$$.fragment,Wl),vkr=i(Wl),Bc=n(Wl,"P",{});var Ate=s(Bc);Fkr=r(Ate,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),AK=n(Ate,"A",{href:!0});var iBt=s(AK);Tkr=r(iBt,"from_pretrained()"),iBt.forEach(t),Mkr=r(Ate," class method or the "),LK=n(Ate,"A",{href:!0});var dBt=s(LK);Ekr=r(dBt,"from_config()"),dBt.forEach(t),Ckr=r(Ate,` class
method.`),Ate.forEach(t),wkr=i(Wl),Px=n(Wl,"P",{});var YQe=s(Px);Akr=r(YQe,"This class cannot be instantiated directly using "),dMe=n(YQe,"CODE",{});var cBt=s(dMe);Lkr=r(cBt,"__init__()"),cBt.forEach(t),ykr=r(YQe," (throws an error)."),YQe.forEach(t),xkr=i(Wl),Gt=n(Wl,"DIV",{class:!0});var g6=s(Gt);T(Bx.$$.fragment,g6),$kr=i(g6),cMe=n(g6,"P",{});var fBt=s(cMe);kkr=r(fBt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),fBt.forEach(t),Skr=i(g6),Ic=n(g6,"P",{});var Lte=s(Ic);Rkr=r(Lte,`Note:
Loading a model from its configuration file does `),fMe=n(Lte,"STRONG",{});var mBt=s(fMe);Pkr=r(mBt,"not"),mBt.forEach(t),Bkr=r(Lte,` load the model weights. It only affects the
model\u2019s configuration. Use `),yK=n(Lte,"A",{href:!0});var gBt=s(yK);Ikr=r(gBt,"from_pretrained()"),gBt.forEach(t),Nkr=r(Lte," to load the model weights."),Lte.forEach(t),qkr=i(g6),T(V4.$$.fragment,g6),g6.forEach(t),jkr=i(Wl),qr=n(Wl,"DIV",{class:!0});var Hl=s(qr);T(Ix.$$.fragment,Hl),Dkr=i(Hl),mMe=n(Hl,"P",{});var hBt=s(mMe);Gkr=r(hBt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),hBt.forEach(t),Okr=i(Hl),_n=n(Hl,"P",{});var h6=s(_n);Vkr=r(h6,"The model class to instantiate is selected based on the "),gMe=n(h6,"CODE",{});var pBt=s(gMe);Xkr=r(pBt,"model_type"),pBt.forEach(t),zkr=r(h6,` property of the config object (either
passed as an argument or loaded from `),hMe=n(h6,"CODE",{});var _Bt=s(hMe);Qkr=r(_Bt,"pretrained_model_name_or_path"),_Bt.forEach(t),Wkr=r(h6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pMe=n(h6,"CODE",{});var uBt=s(pMe);Hkr=r(uBt,"pretrained_model_name_or_path"),uBt.forEach(t),Ukr=r(h6,":"),h6.forEach(t),Jkr=i(Hl),de=n(Hl,"UL",{});var me=s(de);X4=n(me,"LI",{});var CDe=s(X4);_Me=n(CDe,"STRONG",{});var bBt=s(_Me);Ykr=r(bBt,"albert"),bBt.forEach(t),Kkr=r(CDe," \u2014 "),xK=n(CDe,"A",{href:!0});var vBt=s(xK);Zkr=r(vBt,"TFAlbertForTokenClassification"),vBt.forEach(t),eSr=r(CDe," (ALBERT model)"),CDe.forEach(t),oSr=i(me),z4=n(me,"LI",{});var wDe=s(z4);uMe=n(wDe,"STRONG",{});var FBt=s(uMe);rSr=r(FBt,"bert"),FBt.forEach(t),tSr=r(wDe," \u2014 "),$K=n(wDe,"A",{href:!0});var TBt=s($K);aSr=r(TBt,"TFBertForTokenClassification"),TBt.forEach(t),nSr=r(wDe," (BERT model)"),wDe.forEach(t),sSr=i(me),Q4=n(me,"LI",{});var ADe=s(Q4);bMe=n(ADe,"STRONG",{});var MBt=s(bMe);lSr=r(MBt,"camembert"),MBt.forEach(t),iSr=r(ADe," \u2014 "),kK=n(ADe,"A",{href:!0});var EBt=s(kK);dSr=r(EBt,"TFCamembertForTokenClassification"),EBt.forEach(t),cSr=r(ADe," (CamemBERT model)"),ADe.forEach(t),fSr=i(me),W4=n(me,"LI",{});var LDe=s(W4);vMe=n(LDe,"STRONG",{});var CBt=s(vMe);mSr=r(CBt,"convbert"),CBt.forEach(t),gSr=r(LDe," \u2014 "),SK=n(LDe,"A",{href:!0});var wBt=s(SK);hSr=r(wBt,"TFConvBertForTokenClassification"),wBt.forEach(t),pSr=r(LDe," (ConvBERT model)"),LDe.forEach(t),_Sr=i(me),H4=n(me,"LI",{});var yDe=s(H4);FMe=n(yDe,"STRONG",{});var ABt=s(FMe);uSr=r(ABt,"deberta"),ABt.forEach(t),bSr=r(yDe," \u2014 "),RK=n(yDe,"A",{href:!0});var LBt=s(RK);vSr=r(LBt,"TFDebertaForTokenClassification"),LBt.forEach(t),FSr=r(yDe," (DeBERTa model)"),yDe.forEach(t),TSr=i(me),U4=n(me,"LI",{});var xDe=s(U4);TMe=n(xDe,"STRONG",{});var yBt=s(TMe);MSr=r(yBt,"deberta-v2"),yBt.forEach(t),ESr=r(xDe," \u2014 "),PK=n(xDe,"A",{href:!0});var xBt=s(PK);CSr=r(xBt,"TFDebertaV2ForTokenClassification"),xBt.forEach(t),wSr=r(xDe," (DeBERTa-v2 model)"),xDe.forEach(t),ASr=i(me),J4=n(me,"LI",{});var $De=s(J4);MMe=n($De,"STRONG",{});var $Bt=s(MMe);LSr=r($Bt,"distilbert"),$Bt.forEach(t),ySr=r($De," \u2014 "),BK=n($De,"A",{href:!0});var kBt=s(BK);xSr=r(kBt,"TFDistilBertForTokenClassification"),kBt.forEach(t),$Sr=r($De," (DistilBERT model)"),$De.forEach(t),kSr=i(me),Y4=n(me,"LI",{});var kDe=s(Y4);EMe=n(kDe,"STRONG",{});var SBt=s(EMe);SSr=r(SBt,"electra"),SBt.forEach(t),RSr=r(kDe," \u2014 "),IK=n(kDe,"A",{href:!0});var RBt=s(IK);PSr=r(RBt,"TFElectraForTokenClassification"),RBt.forEach(t),BSr=r(kDe," (ELECTRA model)"),kDe.forEach(t),ISr=i(me),K4=n(me,"LI",{});var SDe=s(K4);CMe=n(SDe,"STRONG",{});var PBt=s(CMe);NSr=r(PBt,"flaubert"),PBt.forEach(t),qSr=r(SDe," \u2014 "),NK=n(SDe,"A",{href:!0});var BBt=s(NK);jSr=r(BBt,"TFFlaubertForTokenClassification"),BBt.forEach(t),DSr=r(SDe," (FlauBERT model)"),SDe.forEach(t),GSr=i(me),Z4=n(me,"LI",{});var RDe=s(Z4);wMe=n(RDe,"STRONG",{});var IBt=s(wMe);OSr=r(IBt,"funnel"),IBt.forEach(t),VSr=r(RDe," \u2014 "),qK=n(RDe,"A",{href:!0});var NBt=s(qK);XSr=r(NBt,"TFFunnelForTokenClassification"),NBt.forEach(t),zSr=r(RDe," (Funnel Transformer model)"),RDe.forEach(t),QSr=i(me),eE=n(me,"LI",{});var PDe=s(eE);AMe=n(PDe,"STRONG",{});var qBt=s(AMe);WSr=r(qBt,"layoutlm"),qBt.forEach(t),HSr=r(PDe," \u2014 "),jK=n(PDe,"A",{href:!0});var jBt=s(jK);USr=r(jBt,"TFLayoutLMForTokenClassification"),jBt.forEach(t),JSr=r(PDe," (LayoutLM model)"),PDe.forEach(t),YSr=i(me),oE=n(me,"LI",{});var BDe=s(oE);LMe=n(BDe,"STRONG",{});var DBt=s(LMe);KSr=r(DBt,"longformer"),DBt.forEach(t),ZSr=r(BDe," \u2014 "),DK=n(BDe,"A",{href:!0});var GBt=s(DK);eRr=r(GBt,"TFLongformerForTokenClassification"),GBt.forEach(t),oRr=r(BDe," (Longformer model)"),BDe.forEach(t),rRr=i(me),rE=n(me,"LI",{});var IDe=s(rE);yMe=n(IDe,"STRONG",{});var OBt=s(yMe);tRr=r(OBt,"mobilebert"),OBt.forEach(t),aRr=r(IDe," \u2014 "),GK=n(IDe,"A",{href:!0});var VBt=s(GK);nRr=r(VBt,"TFMobileBertForTokenClassification"),VBt.forEach(t),sRr=r(IDe," (MobileBERT model)"),IDe.forEach(t),lRr=i(me),tE=n(me,"LI",{});var NDe=s(tE);xMe=n(NDe,"STRONG",{});var XBt=s(xMe);iRr=r(XBt,"mpnet"),XBt.forEach(t),dRr=r(NDe," \u2014 "),OK=n(NDe,"A",{href:!0});var zBt=s(OK);cRr=r(zBt,"TFMPNetForTokenClassification"),zBt.forEach(t),fRr=r(NDe," (MPNet model)"),NDe.forEach(t),mRr=i(me),aE=n(me,"LI",{});var qDe=s(aE);$Me=n(qDe,"STRONG",{});var QBt=s($Me);gRr=r(QBt,"rembert"),QBt.forEach(t),hRr=r(qDe," \u2014 "),VK=n(qDe,"A",{href:!0});var WBt=s(VK);pRr=r(WBt,"TFRemBertForTokenClassification"),WBt.forEach(t),_Rr=r(qDe," (RemBERT model)"),qDe.forEach(t),uRr=i(me),nE=n(me,"LI",{});var jDe=s(nE);kMe=n(jDe,"STRONG",{});var HBt=s(kMe);bRr=r(HBt,"roberta"),HBt.forEach(t),vRr=r(jDe," \u2014 "),XK=n(jDe,"A",{href:!0});var UBt=s(XK);FRr=r(UBt,"TFRobertaForTokenClassification"),UBt.forEach(t),TRr=r(jDe," (RoBERTa model)"),jDe.forEach(t),MRr=i(me),sE=n(me,"LI",{});var DDe=s(sE);SMe=n(DDe,"STRONG",{});var JBt=s(SMe);ERr=r(JBt,"roformer"),JBt.forEach(t),CRr=r(DDe," \u2014 "),zK=n(DDe,"A",{href:!0});var YBt=s(zK);wRr=r(YBt,"TFRoFormerForTokenClassification"),YBt.forEach(t),ARr=r(DDe," (RoFormer model)"),DDe.forEach(t),LRr=i(me),lE=n(me,"LI",{});var GDe=s(lE);RMe=n(GDe,"STRONG",{});var KBt=s(RMe);yRr=r(KBt,"xlm"),KBt.forEach(t),xRr=r(GDe," \u2014 "),QK=n(GDe,"A",{href:!0});var ZBt=s(QK);$Rr=r(ZBt,"TFXLMForTokenClassification"),ZBt.forEach(t),kRr=r(GDe," (XLM model)"),GDe.forEach(t),SRr=i(me),iE=n(me,"LI",{});var ODe=s(iE);PMe=n(ODe,"STRONG",{});var eIt=s(PMe);RRr=r(eIt,"xlm-roberta"),eIt.forEach(t),PRr=r(ODe," \u2014 "),WK=n(ODe,"A",{href:!0});var oIt=s(WK);BRr=r(oIt,"TFXLMRobertaForTokenClassification"),oIt.forEach(t),IRr=r(ODe," (XLM-RoBERTa model)"),ODe.forEach(t),NRr=i(me),dE=n(me,"LI",{});var VDe=s(dE);BMe=n(VDe,"STRONG",{});var rIt=s(BMe);qRr=r(rIt,"xlnet"),rIt.forEach(t),jRr=r(VDe," \u2014 "),HK=n(VDe,"A",{href:!0});var tIt=s(HK);DRr=r(tIt,"TFXLNetForTokenClassification"),tIt.forEach(t),GRr=r(VDe," (XLNet model)"),VDe.forEach(t),me.forEach(t),ORr=i(Hl),T(cE.$$.fragment,Hl),Hl.forEach(t),Wl.forEach(t),VXe=i(f),Nc=n(f,"H2",{class:!0});var KQe=s(Nc);fE=n(KQe,"A",{id:!0,class:!0,href:!0});var aIt=s(fE);IMe=n(aIt,"SPAN",{});var nIt=s(IMe);T(Nx.$$.fragment,nIt),nIt.forEach(t),aIt.forEach(t),VRr=i(KQe),NMe=n(KQe,"SPAN",{});var sIt=s(NMe);XRr=r(sIt,"TFAutoModelForQuestionAnswering"),sIt.forEach(t),KQe.forEach(t),XXe=i(f),fr=n(f,"DIV",{class:!0});var Ul=s(fr);T(qx.$$.fragment,Ul),zRr=i(Ul),qc=n(Ul,"P",{});var yte=s(qc);QRr=r(yte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),UK=n(yte,"A",{href:!0});var lIt=s(UK);WRr=r(lIt,"from_pretrained()"),lIt.forEach(t),HRr=r(yte," class method or the "),JK=n(yte,"A",{href:!0});var iIt=s(JK);URr=r(iIt,"from_config()"),iIt.forEach(t),JRr=r(yte,` class
method.`),yte.forEach(t),YRr=i(Ul),jx=n(Ul,"P",{});var ZQe=s(jx);KRr=r(ZQe,"This class cannot be instantiated directly using "),qMe=n(ZQe,"CODE",{});var dIt=s(qMe);ZRr=r(dIt,"__init__()"),dIt.forEach(t),ePr=r(ZQe," (throws an error)."),ZQe.forEach(t),oPr=i(Ul),Ot=n(Ul,"DIV",{class:!0});var p6=s(Ot);T(Dx.$$.fragment,p6),rPr=i(p6),jMe=n(p6,"P",{});var cIt=s(jMe);tPr=r(cIt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),cIt.forEach(t),aPr=i(p6),jc=n(p6,"P",{});var xte=s(jc);nPr=r(xte,`Note:
Loading a model from its configuration file does `),DMe=n(xte,"STRONG",{});var fIt=s(DMe);sPr=r(fIt,"not"),fIt.forEach(t),lPr=r(xte,` load the model weights. It only affects the
model\u2019s configuration. Use `),YK=n(xte,"A",{href:!0});var mIt=s(YK);iPr=r(mIt,"from_pretrained()"),mIt.forEach(t),dPr=r(xte," to load the model weights."),xte.forEach(t),cPr=i(p6),T(mE.$$.fragment,p6),p6.forEach(t),fPr=i(Ul),jr=n(Ul,"DIV",{class:!0});var Jl=s(jr);T(Gx.$$.fragment,Jl),mPr=i(Jl),GMe=n(Jl,"P",{});var gIt=s(GMe);gPr=r(gIt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),gIt.forEach(t),hPr=i(Jl),un=n(Jl,"P",{});var _6=s(un);pPr=r(_6,"The model class to instantiate is selected based on the "),OMe=n(_6,"CODE",{});var hIt=s(OMe);_Pr=r(hIt,"model_type"),hIt.forEach(t),uPr=r(_6,` property of the config object (either
passed as an argument or loaded from `),VMe=n(_6,"CODE",{});var pIt=s(VMe);bPr=r(pIt,"pretrained_model_name_or_path"),pIt.forEach(t),vPr=r(_6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XMe=n(_6,"CODE",{});var _It=s(XMe);FPr=r(_It,"pretrained_model_name_or_path"),_It.forEach(t),TPr=r(_6,":"),_6.forEach(t),MPr=i(Jl),ce=n(Jl,"UL",{});var ge=s(ce);gE=n(ge,"LI",{});var XDe=s(gE);zMe=n(XDe,"STRONG",{});var uIt=s(zMe);EPr=r(uIt,"albert"),uIt.forEach(t),CPr=r(XDe," \u2014 "),KK=n(XDe,"A",{href:!0});var bIt=s(KK);wPr=r(bIt,"TFAlbertForQuestionAnswering"),bIt.forEach(t),APr=r(XDe," (ALBERT model)"),XDe.forEach(t),LPr=i(ge),hE=n(ge,"LI",{});var zDe=s(hE);QMe=n(zDe,"STRONG",{});var vIt=s(QMe);yPr=r(vIt,"bert"),vIt.forEach(t),xPr=r(zDe," \u2014 "),ZK=n(zDe,"A",{href:!0});var FIt=s(ZK);$Pr=r(FIt,"TFBertForQuestionAnswering"),FIt.forEach(t),kPr=r(zDe," (BERT model)"),zDe.forEach(t),SPr=i(ge),pE=n(ge,"LI",{});var QDe=s(pE);WMe=n(QDe,"STRONG",{});var TIt=s(WMe);RPr=r(TIt,"camembert"),TIt.forEach(t),PPr=r(QDe," \u2014 "),eZ=n(QDe,"A",{href:!0});var MIt=s(eZ);BPr=r(MIt,"TFCamembertForQuestionAnswering"),MIt.forEach(t),IPr=r(QDe," (CamemBERT model)"),QDe.forEach(t),NPr=i(ge),_E=n(ge,"LI",{});var WDe=s(_E);HMe=n(WDe,"STRONG",{});var EIt=s(HMe);qPr=r(EIt,"convbert"),EIt.forEach(t),jPr=r(WDe," \u2014 "),oZ=n(WDe,"A",{href:!0});var CIt=s(oZ);DPr=r(CIt,"TFConvBertForQuestionAnswering"),CIt.forEach(t),GPr=r(WDe," (ConvBERT model)"),WDe.forEach(t),OPr=i(ge),uE=n(ge,"LI",{});var HDe=s(uE);UMe=n(HDe,"STRONG",{});var wIt=s(UMe);VPr=r(wIt,"deberta"),wIt.forEach(t),XPr=r(HDe," \u2014 "),rZ=n(HDe,"A",{href:!0});var AIt=s(rZ);zPr=r(AIt,"TFDebertaForQuestionAnswering"),AIt.forEach(t),QPr=r(HDe," (DeBERTa model)"),HDe.forEach(t),WPr=i(ge),bE=n(ge,"LI",{});var UDe=s(bE);JMe=n(UDe,"STRONG",{});var LIt=s(JMe);HPr=r(LIt,"deberta-v2"),LIt.forEach(t),UPr=r(UDe," \u2014 "),tZ=n(UDe,"A",{href:!0});var yIt=s(tZ);JPr=r(yIt,"TFDebertaV2ForQuestionAnswering"),yIt.forEach(t),YPr=r(UDe," (DeBERTa-v2 model)"),UDe.forEach(t),KPr=i(ge),vE=n(ge,"LI",{});var JDe=s(vE);YMe=n(JDe,"STRONG",{});var xIt=s(YMe);ZPr=r(xIt,"distilbert"),xIt.forEach(t),eBr=r(JDe," \u2014 "),aZ=n(JDe,"A",{href:!0});var $It=s(aZ);oBr=r($It,"TFDistilBertForQuestionAnswering"),$It.forEach(t),rBr=r(JDe," (DistilBERT model)"),JDe.forEach(t),tBr=i(ge),FE=n(ge,"LI",{});var YDe=s(FE);KMe=n(YDe,"STRONG",{});var kIt=s(KMe);aBr=r(kIt,"electra"),kIt.forEach(t),nBr=r(YDe," \u2014 "),nZ=n(YDe,"A",{href:!0});var SIt=s(nZ);sBr=r(SIt,"TFElectraForQuestionAnswering"),SIt.forEach(t),lBr=r(YDe," (ELECTRA model)"),YDe.forEach(t),iBr=i(ge),TE=n(ge,"LI",{});var KDe=s(TE);ZMe=n(KDe,"STRONG",{});var RIt=s(ZMe);dBr=r(RIt,"flaubert"),RIt.forEach(t),cBr=r(KDe," \u2014 "),sZ=n(KDe,"A",{href:!0});var PIt=s(sZ);fBr=r(PIt,"TFFlaubertForQuestionAnsweringSimple"),PIt.forEach(t),mBr=r(KDe," (FlauBERT model)"),KDe.forEach(t),gBr=i(ge),ME=n(ge,"LI",{});var ZDe=s(ME);e4e=n(ZDe,"STRONG",{});var BIt=s(e4e);hBr=r(BIt,"funnel"),BIt.forEach(t),pBr=r(ZDe," \u2014 "),lZ=n(ZDe,"A",{href:!0});var IIt=s(lZ);_Br=r(IIt,"TFFunnelForQuestionAnswering"),IIt.forEach(t),uBr=r(ZDe," (Funnel Transformer model)"),ZDe.forEach(t),bBr=i(ge),EE=n(ge,"LI",{});var eGe=s(EE);o4e=n(eGe,"STRONG",{});var NIt=s(o4e);vBr=r(NIt,"gptj"),NIt.forEach(t),FBr=r(eGe," \u2014 "),iZ=n(eGe,"A",{href:!0});var qIt=s(iZ);TBr=r(qIt,"TFGPTJForQuestionAnswering"),qIt.forEach(t),MBr=r(eGe," (GPT-J model)"),eGe.forEach(t),EBr=i(ge),CE=n(ge,"LI",{});var oGe=s(CE);r4e=n(oGe,"STRONG",{});var jIt=s(r4e);CBr=r(jIt,"longformer"),jIt.forEach(t),wBr=r(oGe," \u2014 "),dZ=n(oGe,"A",{href:!0});var DIt=s(dZ);ABr=r(DIt,"TFLongformerForQuestionAnswering"),DIt.forEach(t),LBr=r(oGe," (Longformer model)"),oGe.forEach(t),yBr=i(ge),wE=n(ge,"LI",{});var rGe=s(wE);t4e=n(rGe,"STRONG",{});var GIt=s(t4e);xBr=r(GIt,"mobilebert"),GIt.forEach(t),$Br=r(rGe," \u2014 "),cZ=n(rGe,"A",{href:!0});var OIt=s(cZ);kBr=r(OIt,"TFMobileBertForQuestionAnswering"),OIt.forEach(t),SBr=r(rGe," (MobileBERT model)"),rGe.forEach(t),RBr=i(ge),AE=n(ge,"LI",{});var tGe=s(AE);a4e=n(tGe,"STRONG",{});var VIt=s(a4e);PBr=r(VIt,"mpnet"),VIt.forEach(t),BBr=r(tGe," \u2014 "),fZ=n(tGe,"A",{href:!0});var XIt=s(fZ);IBr=r(XIt,"TFMPNetForQuestionAnswering"),XIt.forEach(t),NBr=r(tGe," (MPNet model)"),tGe.forEach(t),qBr=i(ge),LE=n(ge,"LI",{});var aGe=s(LE);n4e=n(aGe,"STRONG",{});var zIt=s(n4e);jBr=r(zIt,"rembert"),zIt.forEach(t),DBr=r(aGe," \u2014 "),mZ=n(aGe,"A",{href:!0});var QIt=s(mZ);GBr=r(QIt,"TFRemBertForQuestionAnswering"),QIt.forEach(t),OBr=r(aGe," (RemBERT model)"),aGe.forEach(t),VBr=i(ge),yE=n(ge,"LI",{});var nGe=s(yE);s4e=n(nGe,"STRONG",{});var WIt=s(s4e);XBr=r(WIt,"roberta"),WIt.forEach(t),zBr=r(nGe," \u2014 "),gZ=n(nGe,"A",{href:!0});var HIt=s(gZ);QBr=r(HIt,"TFRobertaForQuestionAnswering"),HIt.forEach(t),WBr=r(nGe," (RoBERTa model)"),nGe.forEach(t),HBr=i(ge),xE=n(ge,"LI",{});var sGe=s(xE);l4e=n(sGe,"STRONG",{});var UIt=s(l4e);UBr=r(UIt,"roformer"),UIt.forEach(t),JBr=r(sGe," \u2014 "),hZ=n(sGe,"A",{href:!0});var JIt=s(hZ);YBr=r(JIt,"TFRoFormerForQuestionAnswering"),JIt.forEach(t),KBr=r(sGe," (RoFormer model)"),sGe.forEach(t),ZBr=i(ge),$E=n(ge,"LI",{});var lGe=s($E);i4e=n(lGe,"STRONG",{});var YIt=s(i4e);eIr=r(YIt,"xlm"),YIt.forEach(t),oIr=r(lGe," \u2014 "),pZ=n(lGe,"A",{href:!0});var KIt=s(pZ);rIr=r(KIt,"TFXLMForQuestionAnsweringSimple"),KIt.forEach(t),tIr=r(lGe," (XLM model)"),lGe.forEach(t),aIr=i(ge),kE=n(ge,"LI",{});var iGe=s(kE);d4e=n(iGe,"STRONG",{});var ZIt=s(d4e);nIr=r(ZIt,"xlm-roberta"),ZIt.forEach(t),sIr=r(iGe," \u2014 "),_Z=n(iGe,"A",{href:!0});var eNt=s(_Z);lIr=r(eNt,"TFXLMRobertaForQuestionAnswering"),eNt.forEach(t),iIr=r(iGe," (XLM-RoBERTa model)"),iGe.forEach(t),dIr=i(ge),SE=n(ge,"LI",{});var dGe=s(SE);c4e=n(dGe,"STRONG",{});var oNt=s(c4e);cIr=r(oNt,"xlnet"),oNt.forEach(t),fIr=r(dGe," \u2014 "),uZ=n(dGe,"A",{href:!0});var rNt=s(uZ);mIr=r(rNt,"TFXLNetForQuestionAnsweringSimple"),rNt.forEach(t),gIr=r(dGe," (XLNet model)"),dGe.forEach(t),ge.forEach(t),hIr=i(Jl),T(RE.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),zXe=i(f),Dc=n(f,"H2",{class:!0});var eWe=s(Dc);PE=n(eWe,"A",{id:!0,class:!0,href:!0});var tNt=s(PE);f4e=n(tNt,"SPAN",{});var aNt=s(f4e);T(Ox.$$.fragment,aNt),aNt.forEach(t),tNt.forEach(t),pIr=i(eWe),m4e=n(eWe,"SPAN",{});var nNt=s(m4e);_Ir=r(nNt,"TFAutoModelForVision2Seq"),nNt.forEach(t),eWe.forEach(t),QXe=i(f),mr=n(f,"DIV",{class:!0});var Yl=s(mr);T(Vx.$$.fragment,Yl),uIr=i(Yl),Gc=n(Yl,"P",{});var $te=s(Gc);bIr=r($te,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),bZ=n($te,"A",{href:!0});var sNt=s(bZ);vIr=r(sNt,"from_pretrained()"),sNt.forEach(t),FIr=r($te," class method or the "),vZ=n($te,"A",{href:!0});var lNt=s(vZ);TIr=r(lNt,"from_config()"),lNt.forEach(t),MIr=r($te,` class
method.`),$te.forEach(t),EIr=i(Yl),Xx=n(Yl,"P",{});var oWe=s(Xx);CIr=r(oWe,"This class cannot be instantiated directly using "),g4e=n(oWe,"CODE",{});var iNt=s(g4e);wIr=r(iNt,"__init__()"),iNt.forEach(t),AIr=r(oWe," (throws an error)."),oWe.forEach(t),LIr=i(Yl),Vt=n(Yl,"DIV",{class:!0});var u6=s(Vt);T(zx.$$.fragment,u6),yIr=i(u6),h4e=n(u6,"P",{});var dNt=s(h4e);xIr=r(dNt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),dNt.forEach(t),$Ir=i(u6),Oc=n(u6,"P",{});var kte=s(Oc);kIr=r(kte,`Note:
Loading a model from its configuration file does `),p4e=n(kte,"STRONG",{});var cNt=s(p4e);SIr=r(cNt,"not"),cNt.forEach(t),RIr=r(kte,` load the model weights. It only affects the
model\u2019s configuration. Use `),FZ=n(kte,"A",{href:!0});var fNt=s(FZ);PIr=r(fNt,"from_pretrained()"),fNt.forEach(t),BIr=r(kte," to load the model weights."),kte.forEach(t),IIr=i(u6),T(BE.$$.fragment,u6),u6.forEach(t),NIr=i(Yl),Dr=n(Yl,"DIV",{class:!0});var Kl=s(Dr);T(Qx.$$.fragment,Kl),qIr=i(Kl),_4e=n(Kl,"P",{});var mNt=s(_4e);jIr=r(mNt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),mNt.forEach(t),DIr=i(Kl),bn=n(Kl,"P",{});var b6=s(bn);GIr=r(b6,"The model class to instantiate is selected based on the "),u4e=n(b6,"CODE",{});var gNt=s(u4e);OIr=r(gNt,"model_type"),gNt.forEach(t),VIr=r(b6,` property of the config object (either
passed as an argument or loaded from `),b4e=n(b6,"CODE",{});var hNt=s(b4e);XIr=r(hNt,"pretrained_model_name_or_path"),hNt.forEach(t),zIr=r(b6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v4e=n(b6,"CODE",{});var pNt=s(v4e);QIr=r(pNt,"pretrained_model_name_or_path"),pNt.forEach(t),WIr=r(b6,":"),b6.forEach(t),HIr=i(Kl),F4e=n(Kl,"UL",{});var _Nt=s(F4e);IE=n(_Nt,"LI",{});var cGe=s(IE);T4e=n(cGe,"STRONG",{});var uNt=s(T4e);UIr=r(uNt,"vision-encoder-decoder"),uNt.forEach(t),JIr=r(cGe," \u2014 "),TZ=n(cGe,"A",{href:!0});var bNt=s(TZ);YIr=r(bNt,"TFVisionEncoderDecoderModel"),bNt.forEach(t),KIr=r(cGe," (Vision Encoder decoder model)"),cGe.forEach(t),_Nt.forEach(t),ZIr=i(Kl),T(NE.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),WXe=i(f),Vc=n(f,"H2",{class:!0});var rWe=s(Vc);qE=n(rWe,"A",{id:!0,class:!0,href:!0});var vNt=s(qE);M4e=n(vNt,"SPAN",{});var FNt=s(M4e);T(Wx.$$.fragment,FNt),FNt.forEach(t),vNt.forEach(t),eNr=i(rWe),E4e=n(rWe,"SPAN",{});var TNt=s(E4e);oNr=r(TNt,"TFAutoModelForSpeechSeq2Seq"),TNt.forEach(t),rWe.forEach(t),HXe=i(f),gr=n(f,"DIV",{class:!0});var Zl=s(gr);T(Hx.$$.fragment,Zl),rNr=i(Zl),Xc=n(Zl,"P",{});var Ste=s(Xc);tNr=r(Ste,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),MZ=n(Ste,"A",{href:!0});var MNt=s(MZ);aNr=r(MNt,"from_pretrained()"),MNt.forEach(t),nNr=r(Ste," class method or the "),EZ=n(Ste,"A",{href:!0});var ENt=s(EZ);sNr=r(ENt,"from_config()"),ENt.forEach(t),lNr=r(Ste,` class
method.`),Ste.forEach(t),iNr=i(Zl),Ux=n(Zl,"P",{});var tWe=s(Ux);dNr=r(tWe,"This class cannot be instantiated directly using "),C4e=n(tWe,"CODE",{});var CNt=s(C4e);cNr=r(CNt,"__init__()"),CNt.forEach(t),fNr=r(tWe," (throws an error)."),tWe.forEach(t),mNr=i(Zl),Xt=n(Zl,"DIV",{class:!0});var v6=s(Xt);T(Jx.$$.fragment,v6),gNr=i(v6),w4e=n(v6,"P",{});var wNt=s(w4e);hNr=r(wNt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),wNt.forEach(t),pNr=i(v6),zc=n(v6,"P",{});var Rte=s(zc);_Nr=r(Rte,`Note:
Loading a model from its configuration file does `),A4e=n(Rte,"STRONG",{});var ANt=s(A4e);uNr=r(ANt,"not"),ANt.forEach(t),bNr=r(Rte,` load the model weights. It only affects the
model\u2019s configuration. Use `),CZ=n(Rte,"A",{href:!0});var LNt=s(CZ);vNr=r(LNt,"from_pretrained()"),LNt.forEach(t),FNr=r(Rte," to load the model weights."),Rte.forEach(t),TNr=i(v6),T(jE.$$.fragment,v6),v6.forEach(t),MNr=i(Zl),Gr=n(Zl,"DIV",{class:!0});var ei=s(Gr);T(Yx.$$.fragment,ei),ENr=i(ei),L4e=n(ei,"P",{});var yNt=s(L4e);CNr=r(yNt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),yNt.forEach(t),wNr=i(ei),vn=n(ei,"P",{});var F6=s(vn);ANr=r(F6,"The model class to instantiate is selected based on the "),y4e=n(F6,"CODE",{});var xNt=s(y4e);LNr=r(xNt,"model_type"),xNt.forEach(t),yNr=r(F6,` property of the config object (either
passed as an argument or loaded from `),x4e=n(F6,"CODE",{});var $Nt=s(x4e);xNr=r($Nt,"pretrained_model_name_or_path"),$Nt.forEach(t),$Nr=r(F6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$4e=n(F6,"CODE",{});var kNt=s($4e);kNr=r(kNt,"pretrained_model_name_or_path"),kNt.forEach(t),SNr=r(F6,":"),F6.forEach(t),RNr=i(ei),k4e=n(ei,"UL",{});var SNt=s(k4e);DE=n(SNt,"LI",{});var fGe=s(DE);S4e=n(fGe,"STRONG",{});var RNt=s(S4e);PNr=r(RNt,"speech_to_text"),RNt.forEach(t),BNr=r(fGe," \u2014 "),wZ=n(fGe,"A",{href:!0});var PNt=s(wZ);INr=r(PNt,"TFSpeech2TextForConditionalGeneration"),PNt.forEach(t),NNr=r(fGe," (Speech2Text model)"),fGe.forEach(t),SNt.forEach(t),qNr=i(ei),T(GE.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),UXe=i(f),Qc=n(f,"H2",{class:!0});var aWe=s(Qc);OE=n(aWe,"A",{id:!0,class:!0,href:!0});var BNt=s(OE);R4e=n(BNt,"SPAN",{});var INt=s(R4e);T(Kx.$$.fragment,INt),INt.forEach(t),BNt.forEach(t),jNr=i(aWe),P4e=n(aWe,"SPAN",{});var NNt=s(P4e);DNr=r(NNt,"FlaxAutoModel"),NNt.forEach(t),aWe.forEach(t),JXe=i(f),hr=n(f,"DIV",{class:!0});var oi=s(hr);T(Zx.$$.fragment,oi),GNr=i(oi),Wc=n(oi,"P",{});var Pte=s(Wc);ONr=r(Pte,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),AZ=n(Pte,"A",{href:!0});var qNt=s(AZ);VNr=r(qNt,"from_pretrained()"),qNt.forEach(t),XNr=r(Pte," class method or the "),LZ=n(Pte,"A",{href:!0});var jNt=s(LZ);zNr=r(jNt,"from_config()"),jNt.forEach(t),QNr=r(Pte,` class
method.`),Pte.forEach(t),WNr=i(oi),e$=n(oi,"P",{});var nWe=s(e$);HNr=r(nWe,"This class cannot be instantiated directly using "),B4e=n(nWe,"CODE",{});var DNt=s(B4e);UNr=r(DNt,"__init__()"),DNt.forEach(t),JNr=r(nWe," (throws an error)."),nWe.forEach(t),YNr=i(oi),zt=n(oi,"DIV",{class:!0});var T6=s(zt);T(o$.$$.fragment,T6),KNr=i(T6),I4e=n(T6,"P",{});var GNt=s(I4e);ZNr=r(GNt,"Instantiates one of the base model classes of the library from a configuration."),GNt.forEach(t),eqr=i(T6),Hc=n(T6,"P",{});var Bte=s(Hc);oqr=r(Bte,`Note:
Loading a model from its configuration file does `),N4e=n(Bte,"STRONG",{});var ONt=s(N4e);rqr=r(ONt,"not"),ONt.forEach(t),tqr=r(Bte,` load the model weights. It only affects the
model\u2019s configuration. Use `),yZ=n(Bte,"A",{href:!0});var VNt=s(yZ);aqr=r(VNt,"from_pretrained()"),VNt.forEach(t),nqr=r(Bte," to load the model weights."),Bte.forEach(t),sqr=i(T6),T(VE.$$.fragment,T6),T6.forEach(t),lqr=i(oi),Or=n(oi,"DIV",{class:!0});var ri=s(Or);T(r$.$$.fragment,ri),iqr=i(ri),q4e=n(ri,"P",{});var XNt=s(q4e);dqr=r(XNt,"Instantiate one of the base model classes of the library from a pretrained model."),XNt.forEach(t),cqr=i(ri),Fn=n(ri,"P",{});var M6=s(Fn);fqr=r(M6,"The model class to instantiate is selected based on the "),j4e=n(M6,"CODE",{});var zNt=s(j4e);mqr=r(zNt,"model_type"),zNt.forEach(t),gqr=r(M6,` property of the config object (either
passed as an argument or loaded from `),D4e=n(M6,"CODE",{});var QNt=s(D4e);hqr=r(QNt,"pretrained_model_name_or_path"),QNt.forEach(t),pqr=r(M6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G4e=n(M6,"CODE",{});var WNt=s(G4e);_qr=r(WNt,"pretrained_model_name_or_path"),WNt.forEach(t),uqr=r(M6,":"),M6.forEach(t),bqr=i(ri),oe=n(ri,"UL",{});var ae=s(oe);XE=n(ae,"LI",{});var mGe=s(XE);O4e=n(mGe,"STRONG",{});var HNt=s(O4e);vqr=r(HNt,"albert"),HNt.forEach(t),Fqr=r(mGe," \u2014 "),xZ=n(mGe,"A",{href:!0});var UNt=s(xZ);Tqr=r(UNt,"FlaxAlbertModel"),UNt.forEach(t),Mqr=r(mGe," (ALBERT model)"),mGe.forEach(t),Eqr=i(ae),zE=n(ae,"LI",{});var gGe=s(zE);V4e=n(gGe,"STRONG",{});var JNt=s(V4e);Cqr=r(JNt,"bart"),JNt.forEach(t),wqr=r(gGe," \u2014 "),$Z=n(gGe,"A",{href:!0});var YNt=s($Z);Aqr=r(YNt,"FlaxBartModel"),YNt.forEach(t),Lqr=r(gGe," (BART model)"),gGe.forEach(t),yqr=i(ae),QE=n(ae,"LI",{});var hGe=s(QE);X4e=n(hGe,"STRONG",{});var KNt=s(X4e);xqr=r(KNt,"beit"),KNt.forEach(t),$qr=r(hGe," \u2014 "),kZ=n(hGe,"A",{href:!0});var ZNt=s(kZ);kqr=r(ZNt,"FlaxBeitModel"),ZNt.forEach(t),Sqr=r(hGe," (BEiT model)"),hGe.forEach(t),Rqr=i(ae),WE=n(ae,"LI",{});var pGe=s(WE);z4e=n(pGe,"STRONG",{});var eqt=s(z4e);Pqr=r(eqt,"bert"),eqt.forEach(t),Bqr=r(pGe," \u2014 "),SZ=n(pGe,"A",{href:!0});var oqt=s(SZ);Iqr=r(oqt,"FlaxBertModel"),oqt.forEach(t),Nqr=r(pGe," (BERT model)"),pGe.forEach(t),qqr=i(ae),HE=n(ae,"LI",{});var _Ge=s(HE);Q4e=n(_Ge,"STRONG",{});var rqt=s(Q4e);jqr=r(rqt,"big_bird"),rqt.forEach(t),Dqr=r(_Ge," \u2014 "),RZ=n(_Ge,"A",{href:!0});var tqt=s(RZ);Gqr=r(tqt,"FlaxBigBirdModel"),tqt.forEach(t),Oqr=r(_Ge," (BigBird model)"),_Ge.forEach(t),Vqr=i(ae),UE=n(ae,"LI",{});var uGe=s(UE);W4e=n(uGe,"STRONG",{});var aqt=s(W4e);Xqr=r(aqt,"blenderbot"),aqt.forEach(t),zqr=r(uGe," \u2014 "),PZ=n(uGe,"A",{href:!0});var nqt=s(PZ);Qqr=r(nqt,"FlaxBlenderbotModel"),nqt.forEach(t),Wqr=r(uGe," (Blenderbot model)"),uGe.forEach(t),Hqr=i(ae),JE=n(ae,"LI",{});var bGe=s(JE);H4e=n(bGe,"STRONG",{});var sqt=s(H4e);Uqr=r(sqt,"blenderbot-small"),sqt.forEach(t),Jqr=r(bGe," \u2014 "),BZ=n(bGe,"A",{href:!0});var lqt=s(BZ);Yqr=r(lqt,"FlaxBlenderbotSmallModel"),lqt.forEach(t),Kqr=r(bGe," (BlenderbotSmall model)"),bGe.forEach(t),Zqr=i(ae),YE=n(ae,"LI",{});var vGe=s(YE);U4e=n(vGe,"STRONG",{});var iqt=s(U4e);ejr=r(iqt,"clip"),iqt.forEach(t),ojr=r(vGe," \u2014 "),IZ=n(vGe,"A",{href:!0});var dqt=s(IZ);rjr=r(dqt,"FlaxCLIPModel"),dqt.forEach(t),tjr=r(vGe," (CLIP model)"),vGe.forEach(t),ajr=i(ae),KE=n(ae,"LI",{});var FGe=s(KE);J4e=n(FGe,"STRONG",{});var cqt=s(J4e);njr=r(cqt,"distilbert"),cqt.forEach(t),sjr=r(FGe," \u2014 "),NZ=n(FGe,"A",{href:!0});var fqt=s(NZ);ljr=r(fqt,"FlaxDistilBertModel"),fqt.forEach(t),ijr=r(FGe," (DistilBERT model)"),FGe.forEach(t),djr=i(ae),ZE=n(ae,"LI",{});var TGe=s(ZE);Y4e=n(TGe,"STRONG",{});var mqt=s(Y4e);cjr=r(mqt,"electra"),mqt.forEach(t),fjr=r(TGe," \u2014 "),qZ=n(TGe,"A",{href:!0});var gqt=s(qZ);mjr=r(gqt,"FlaxElectraModel"),gqt.forEach(t),gjr=r(TGe," (ELECTRA model)"),TGe.forEach(t),hjr=i(ae),eC=n(ae,"LI",{});var MGe=s(eC);K4e=n(MGe,"STRONG",{});var hqt=s(K4e);pjr=r(hqt,"gpt2"),hqt.forEach(t),_jr=r(MGe," \u2014 "),jZ=n(MGe,"A",{href:!0});var pqt=s(jZ);ujr=r(pqt,"FlaxGPT2Model"),pqt.forEach(t),bjr=r(MGe," (OpenAI GPT-2 model)"),MGe.forEach(t),vjr=i(ae),oC=n(ae,"LI",{});var EGe=s(oC);Z4e=n(EGe,"STRONG",{});var _qt=s(Z4e);Fjr=r(_qt,"gpt_neo"),_qt.forEach(t),Tjr=r(EGe," \u2014 "),DZ=n(EGe,"A",{href:!0});var uqt=s(DZ);Mjr=r(uqt,"FlaxGPTNeoModel"),uqt.forEach(t),Ejr=r(EGe," (GPT Neo model)"),EGe.forEach(t),Cjr=i(ae),rC=n(ae,"LI",{});var CGe=s(rC);eEe=n(CGe,"STRONG",{});var bqt=s(eEe);wjr=r(bqt,"gptj"),bqt.forEach(t),Ajr=r(CGe," \u2014 "),GZ=n(CGe,"A",{href:!0});var vqt=s(GZ);Ljr=r(vqt,"FlaxGPTJModel"),vqt.forEach(t),yjr=r(CGe," (GPT-J model)"),CGe.forEach(t),xjr=i(ae),tC=n(ae,"LI",{});var wGe=s(tC);oEe=n(wGe,"STRONG",{});var Fqt=s(oEe);$jr=r(Fqt,"longt5"),Fqt.forEach(t),kjr=r(wGe," \u2014 "),OZ=n(wGe,"A",{href:!0});var Tqt=s(OZ);Sjr=r(Tqt,"FlaxLongT5Model"),Tqt.forEach(t),Rjr=r(wGe," (LongT5 model)"),wGe.forEach(t),Pjr=i(ae),aC=n(ae,"LI",{});var AGe=s(aC);rEe=n(AGe,"STRONG",{});var Mqt=s(rEe);Bjr=r(Mqt,"marian"),Mqt.forEach(t),Ijr=r(AGe," \u2014 "),VZ=n(AGe,"A",{href:!0});var Eqt=s(VZ);Njr=r(Eqt,"FlaxMarianModel"),Eqt.forEach(t),qjr=r(AGe," (Marian model)"),AGe.forEach(t),jjr=i(ae),nC=n(ae,"LI",{});var LGe=s(nC);tEe=n(LGe,"STRONG",{});var Cqt=s(tEe);Djr=r(Cqt,"mbart"),Cqt.forEach(t),Gjr=r(LGe," \u2014 "),XZ=n(LGe,"A",{href:!0});var wqt=s(XZ);Ojr=r(wqt,"FlaxMBartModel"),wqt.forEach(t),Vjr=r(LGe," (mBART model)"),LGe.forEach(t),Xjr=i(ae),sC=n(ae,"LI",{});var yGe=s(sC);aEe=n(yGe,"STRONG",{});var Aqt=s(aEe);zjr=r(Aqt,"mt5"),Aqt.forEach(t),Qjr=r(yGe," \u2014 "),zZ=n(yGe,"A",{href:!0});var Lqt=s(zZ);Wjr=r(Lqt,"FlaxMT5Model"),Lqt.forEach(t),Hjr=r(yGe," (MT5 model)"),yGe.forEach(t),Ujr=i(ae),lC=n(ae,"LI",{});var xGe=s(lC);nEe=n(xGe,"STRONG",{});var yqt=s(nEe);Jjr=r(yqt,"opt"),yqt.forEach(t),Yjr=r(xGe," \u2014 "),QZ=n(xGe,"A",{href:!0});var xqt=s(QZ);Kjr=r(xqt,"FlaxOPTModel"),xqt.forEach(t),Zjr=r(xGe," (OPT model)"),xGe.forEach(t),eDr=i(ae),iC=n(ae,"LI",{});var $Ge=s(iC);sEe=n($Ge,"STRONG",{});var $qt=s(sEe);oDr=r($qt,"pegasus"),$qt.forEach(t),rDr=r($Ge," \u2014 "),WZ=n($Ge,"A",{href:!0});var kqt=s(WZ);tDr=r(kqt,"FlaxPegasusModel"),kqt.forEach(t),aDr=r($Ge," (Pegasus model)"),$Ge.forEach(t),nDr=i(ae),dC=n(ae,"LI",{});var kGe=s(dC);lEe=n(kGe,"STRONG",{});var Sqt=s(lEe);sDr=r(Sqt,"roberta"),Sqt.forEach(t),lDr=r(kGe," \u2014 "),HZ=n(kGe,"A",{href:!0});var Rqt=s(HZ);iDr=r(Rqt,"FlaxRobertaModel"),Rqt.forEach(t),dDr=r(kGe," (RoBERTa model)"),kGe.forEach(t),cDr=i(ae),cC=n(ae,"LI",{});var SGe=s(cC);iEe=n(SGe,"STRONG",{});var Pqt=s(iEe);fDr=r(Pqt,"roformer"),Pqt.forEach(t),mDr=r(SGe," \u2014 "),UZ=n(SGe,"A",{href:!0});var Bqt=s(UZ);gDr=r(Bqt,"FlaxRoFormerModel"),Bqt.forEach(t),hDr=r(SGe," (RoFormer model)"),SGe.forEach(t),pDr=i(ae),fC=n(ae,"LI",{});var RGe=s(fC);dEe=n(RGe,"STRONG",{});var Iqt=s(dEe);_Dr=r(Iqt,"t5"),Iqt.forEach(t),uDr=r(RGe," \u2014 "),JZ=n(RGe,"A",{href:!0});var Nqt=s(JZ);bDr=r(Nqt,"FlaxT5Model"),Nqt.forEach(t),vDr=r(RGe," (T5 model)"),RGe.forEach(t),FDr=i(ae),mC=n(ae,"LI",{});var PGe=s(mC);cEe=n(PGe,"STRONG",{});var qqt=s(cEe);TDr=r(qqt,"vision-text-dual-encoder"),qqt.forEach(t),MDr=r(PGe," \u2014 "),YZ=n(PGe,"A",{href:!0});var jqt=s(YZ);EDr=r(jqt,"FlaxVisionTextDualEncoderModel"),jqt.forEach(t),CDr=r(PGe," (VisionTextDualEncoder model)"),PGe.forEach(t),wDr=i(ae),gC=n(ae,"LI",{});var BGe=s(gC);fEe=n(BGe,"STRONG",{});var Dqt=s(fEe);ADr=r(Dqt,"vit"),Dqt.forEach(t),LDr=r(BGe," \u2014 "),KZ=n(BGe,"A",{href:!0});var Gqt=s(KZ);yDr=r(Gqt,"FlaxViTModel"),Gqt.forEach(t),xDr=r(BGe," (ViT model)"),BGe.forEach(t),$Dr=i(ae),hC=n(ae,"LI",{});var IGe=s(hC);mEe=n(IGe,"STRONG",{});var Oqt=s(mEe);kDr=r(Oqt,"wav2vec2"),Oqt.forEach(t),SDr=r(IGe," \u2014 "),ZZ=n(IGe,"A",{href:!0});var Vqt=s(ZZ);RDr=r(Vqt,"FlaxWav2Vec2Model"),Vqt.forEach(t),PDr=r(IGe," (Wav2Vec2 model)"),IGe.forEach(t),BDr=i(ae),pC=n(ae,"LI",{});var NGe=s(pC);gEe=n(NGe,"STRONG",{});var Xqt=s(gEe);IDr=r(Xqt,"xglm"),Xqt.forEach(t),NDr=r(NGe," \u2014 "),eee=n(NGe,"A",{href:!0});var zqt=s(eee);qDr=r(zqt,"FlaxXGLMModel"),zqt.forEach(t),jDr=r(NGe," (XGLM model)"),NGe.forEach(t),DDr=i(ae),_C=n(ae,"LI",{});var qGe=s(_C);hEe=n(qGe,"STRONG",{});var Qqt=s(hEe);GDr=r(Qqt,"xlm-roberta"),Qqt.forEach(t),ODr=r(qGe," \u2014 "),oee=n(qGe,"A",{href:!0});var Wqt=s(oee);VDr=r(Wqt,"FlaxXLMRobertaModel"),Wqt.forEach(t),XDr=r(qGe," (XLM-RoBERTa model)"),qGe.forEach(t),ae.forEach(t),zDr=i(ri),T(uC.$$.fragment,ri),ri.forEach(t),oi.forEach(t),YXe=i(f),Uc=n(f,"H2",{class:!0});var sWe=s(Uc);bC=n(sWe,"A",{id:!0,class:!0,href:!0});var Hqt=s(bC);pEe=n(Hqt,"SPAN",{});var Uqt=s(pEe);T(t$.$$.fragment,Uqt),Uqt.forEach(t),Hqt.forEach(t),QDr=i(sWe),_Ee=n(sWe,"SPAN",{});var Jqt=s(_Ee);WDr=r(Jqt,"FlaxAutoModelForCausalLM"),Jqt.forEach(t),sWe.forEach(t),KXe=i(f),pr=n(f,"DIV",{class:!0});var ti=s(pr);T(a$.$$.fragment,ti),HDr=i(ti),Jc=n(ti,"P",{});var Ite=s(Jc);UDr=r(Ite,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),ree=n(Ite,"A",{href:!0});var Yqt=s(ree);JDr=r(Yqt,"from_pretrained()"),Yqt.forEach(t),YDr=r(Ite," class method or the "),tee=n(Ite,"A",{href:!0});var Kqt=s(tee);KDr=r(Kqt,"from_config()"),Kqt.forEach(t),ZDr=r(Ite,` class
method.`),Ite.forEach(t),eGr=i(ti),n$=n(ti,"P",{});var lWe=s(n$);oGr=r(lWe,"This class cannot be instantiated directly using "),uEe=n(lWe,"CODE",{});var Zqt=s(uEe);rGr=r(Zqt,"__init__()"),Zqt.forEach(t),tGr=r(lWe," (throws an error)."),lWe.forEach(t),aGr=i(ti),Qt=n(ti,"DIV",{class:!0});var E6=s(Qt);T(s$.$$.fragment,E6),nGr=i(E6),bEe=n(E6,"P",{});var ejt=s(bEe);sGr=r(ejt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),ejt.forEach(t),lGr=i(E6),Yc=n(E6,"P",{});var Nte=s(Yc);iGr=r(Nte,`Note:
Loading a model from its configuration file does `),vEe=n(Nte,"STRONG",{});var ojt=s(vEe);dGr=r(ojt,"not"),ojt.forEach(t),cGr=r(Nte,` load the model weights. It only affects the
model\u2019s configuration. Use `),aee=n(Nte,"A",{href:!0});var rjt=s(aee);fGr=r(rjt,"from_pretrained()"),rjt.forEach(t),mGr=r(Nte," to load the model weights."),Nte.forEach(t),gGr=i(E6),T(vC.$$.fragment,E6),E6.forEach(t),hGr=i(ti),Vr=n(ti,"DIV",{class:!0});var ai=s(Vr);T(l$.$$.fragment,ai),pGr=i(ai),FEe=n(ai,"P",{});var tjt=s(FEe);_Gr=r(tjt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),tjt.forEach(t),uGr=i(ai),Tn=n(ai,"P",{});var C6=s(Tn);bGr=r(C6,"The model class to instantiate is selected based on the "),TEe=n(C6,"CODE",{});var ajt=s(TEe);vGr=r(ajt,"model_type"),ajt.forEach(t),FGr=r(C6,` property of the config object (either
passed as an argument or loaded from `),MEe=n(C6,"CODE",{});var njt=s(MEe);TGr=r(njt,"pretrained_model_name_or_path"),njt.forEach(t),MGr=r(C6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),EEe=n(C6,"CODE",{});var sjt=s(EEe);EGr=r(sjt,"pretrained_model_name_or_path"),sjt.forEach(t),CGr=r(C6,":"),C6.forEach(t),wGr=i(ai),xe=n(ai,"UL",{});var Ne=s(xe);FC=n(Ne,"LI",{});var jGe=s(FC);CEe=n(jGe,"STRONG",{});var ljt=s(CEe);AGr=r(ljt,"bart"),ljt.forEach(t),LGr=r(jGe," \u2014 "),nee=n(jGe,"A",{href:!0});var ijt=s(nee);yGr=r(ijt,"FlaxBartForCausalLM"),ijt.forEach(t),xGr=r(jGe," (BART model)"),jGe.forEach(t),$Gr=i(Ne),TC=n(Ne,"LI",{});var DGe=s(TC);wEe=n(DGe,"STRONG",{});var djt=s(wEe);kGr=r(djt,"bert"),djt.forEach(t),SGr=r(DGe," \u2014 "),see=n(DGe,"A",{href:!0});var cjt=s(see);RGr=r(cjt,"FlaxBertForCausalLM"),cjt.forEach(t),PGr=r(DGe," (BERT model)"),DGe.forEach(t),BGr=i(Ne),MC=n(Ne,"LI",{});var GGe=s(MC);AEe=n(GGe,"STRONG",{});var fjt=s(AEe);IGr=r(fjt,"big_bird"),fjt.forEach(t),NGr=r(GGe," \u2014 "),lee=n(GGe,"A",{href:!0});var mjt=s(lee);qGr=r(mjt,"FlaxBigBirdForCausalLM"),mjt.forEach(t),jGr=r(GGe," (BigBird model)"),GGe.forEach(t),DGr=i(Ne),EC=n(Ne,"LI",{});var OGe=s(EC);LEe=n(OGe,"STRONG",{});var gjt=s(LEe);GGr=r(gjt,"electra"),gjt.forEach(t),OGr=r(OGe," \u2014 "),iee=n(OGe,"A",{href:!0});var hjt=s(iee);VGr=r(hjt,"FlaxElectraForCausalLM"),hjt.forEach(t),XGr=r(OGe," (ELECTRA model)"),OGe.forEach(t),zGr=i(Ne),CC=n(Ne,"LI",{});var VGe=s(CC);yEe=n(VGe,"STRONG",{});var pjt=s(yEe);QGr=r(pjt,"gpt2"),pjt.forEach(t),WGr=r(VGe," \u2014 "),dee=n(VGe,"A",{href:!0});var _jt=s(dee);HGr=r(_jt,"FlaxGPT2LMHeadModel"),_jt.forEach(t),UGr=r(VGe," (OpenAI GPT-2 model)"),VGe.forEach(t),JGr=i(Ne),wC=n(Ne,"LI",{});var XGe=s(wC);xEe=n(XGe,"STRONG",{});var ujt=s(xEe);YGr=r(ujt,"gpt_neo"),ujt.forEach(t),KGr=r(XGe," \u2014 "),cee=n(XGe,"A",{href:!0});var bjt=s(cee);ZGr=r(bjt,"FlaxGPTNeoForCausalLM"),bjt.forEach(t),eOr=r(XGe," (GPT Neo model)"),XGe.forEach(t),oOr=i(Ne),AC=n(Ne,"LI",{});var zGe=s(AC);$Ee=n(zGe,"STRONG",{});var vjt=s($Ee);rOr=r(vjt,"gptj"),vjt.forEach(t),tOr=r(zGe," \u2014 "),fee=n(zGe,"A",{href:!0});var Fjt=s(fee);aOr=r(Fjt,"FlaxGPTJForCausalLM"),Fjt.forEach(t),nOr=r(zGe," (GPT-J model)"),zGe.forEach(t),sOr=i(Ne),LC=n(Ne,"LI",{});var QGe=s(LC);kEe=n(QGe,"STRONG",{});var Tjt=s(kEe);lOr=r(Tjt,"opt"),Tjt.forEach(t),iOr=r(QGe," \u2014 "),mee=n(QGe,"A",{href:!0});var Mjt=s(mee);dOr=r(Mjt,"FlaxOPTForCausalLM"),Mjt.forEach(t),cOr=r(QGe," (OPT model)"),QGe.forEach(t),fOr=i(Ne),yC=n(Ne,"LI",{});var WGe=s(yC);SEe=n(WGe,"STRONG",{});var Ejt=s(SEe);mOr=r(Ejt,"roberta"),Ejt.forEach(t),gOr=r(WGe," \u2014 "),gee=n(WGe,"A",{href:!0});var Cjt=s(gee);hOr=r(Cjt,"FlaxRobertaForCausalLM"),Cjt.forEach(t),pOr=r(WGe," (RoBERTa model)"),WGe.forEach(t),_Or=i(Ne),xC=n(Ne,"LI",{});var HGe=s(xC);REe=n(HGe,"STRONG",{});var wjt=s(REe);uOr=r(wjt,"xglm"),wjt.forEach(t),bOr=r(HGe," \u2014 "),hee=n(HGe,"A",{href:!0});var Ajt=s(hee);vOr=r(Ajt,"FlaxXGLMForCausalLM"),Ajt.forEach(t),FOr=r(HGe," (XGLM model)"),HGe.forEach(t),Ne.forEach(t),TOr=i(ai),T($C.$$.fragment,ai),ai.forEach(t),ti.forEach(t),ZXe=i(f),Kc=n(f,"H2",{class:!0});var iWe=s(Kc);kC=n(iWe,"A",{id:!0,class:!0,href:!0});var Ljt=s(kC);PEe=n(Ljt,"SPAN",{});var yjt=s(PEe);T(i$.$$.fragment,yjt),yjt.forEach(t),Ljt.forEach(t),MOr=i(iWe),BEe=n(iWe,"SPAN",{});var xjt=s(BEe);EOr=r(xjt,"FlaxAutoModelForPreTraining"),xjt.forEach(t),iWe.forEach(t),eze=i(f),_r=n(f,"DIV",{class:!0});var ni=s(_r);T(d$.$$.fragment,ni),COr=i(ni),Zc=n(ni,"P",{});var qte=s(Zc);wOr=r(qte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),pee=n(qte,"A",{href:!0});var $jt=s(pee);AOr=r($jt,"from_pretrained()"),$jt.forEach(t),LOr=r(qte," class method or the "),_ee=n(qte,"A",{href:!0});var kjt=s(_ee);yOr=r(kjt,"from_config()"),kjt.forEach(t),xOr=r(qte,` class
method.`),qte.forEach(t),$Or=i(ni),c$=n(ni,"P",{});var dWe=s(c$);kOr=r(dWe,"This class cannot be instantiated directly using "),IEe=n(dWe,"CODE",{});var Sjt=s(IEe);SOr=r(Sjt,"__init__()"),Sjt.forEach(t),ROr=r(dWe," (throws an error)."),dWe.forEach(t),POr=i(ni),Wt=n(ni,"DIV",{class:!0});var w6=s(Wt);T(f$.$$.fragment,w6),BOr=i(w6),NEe=n(w6,"P",{});var Rjt=s(NEe);IOr=r(Rjt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Rjt.forEach(t),NOr=i(w6),ef=n(w6,"P",{});var jte=s(ef);qOr=r(jte,`Note:
Loading a model from its configuration file does `),qEe=n(jte,"STRONG",{});var Pjt=s(qEe);jOr=r(Pjt,"not"),Pjt.forEach(t),DOr=r(jte,` load the model weights. It only affects the
model\u2019s configuration. Use `),uee=n(jte,"A",{href:!0});var Bjt=s(uee);GOr=r(Bjt,"from_pretrained()"),Bjt.forEach(t),OOr=r(jte," to load the model weights."),jte.forEach(t),VOr=i(w6),T(SC.$$.fragment,w6),w6.forEach(t),XOr=i(ni),Xr=n(ni,"DIV",{class:!0});var si=s(Xr);T(m$.$$.fragment,si),zOr=i(si),jEe=n(si,"P",{});var Ijt=s(jEe);QOr=r(Ijt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Ijt.forEach(t),WOr=i(si),Mn=n(si,"P",{});var A6=s(Mn);HOr=r(A6,"The model class to instantiate is selected based on the "),DEe=n(A6,"CODE",{});var Njt=s(DEe);UOr=r(Njt,"model_type"),Njt.forEach(t),JOr=r(A6,` property of the config object (either
passed as an argument or loaded from `),GEe=n(A6,"CODE",{});var qjt=s(GEe);YOr=r(qjt,"pretrained_model_name_or_path"),qjt.forEach(t),KOr=r(A6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OEe=n(A6,"CODE",{});var jjt=s(OEe);ZOr=r(jjt,"pretrained_model_name_or_path"),jjt.forEach(t),eVr=r(A6,":"),A6.forEach(t),oVr=i(si),Ee=n(si,"UL",{});var we=s(Ee);RC=n(we,"LI",{});var UGe=s(RC);VEe=n(UGe,"STRONG",{});var Djt=s(VEe);rVr=r(Djt,"albert"),Djt.forEach(t),tVr=r(UGe," \u2014 "),bee=n(UGe,"A",{href:!0});var Gjt=s(bee);aVr=r(Gjt,"FlaxAlbertForPreTraining"),Gjt.forEach(t),nVr=r(UGe," (ALBERT model)"),UGe.forEach(t),sVr=i(we),PC=n(we,"LI",{});var JGe=s(PC);XEe=n(JGe,"STRONG",{});var Ojt=s(XEe);lVr=r(Ojt,"bart"),Ojt.forEach(t),iVr=r(JGe," \u2014 "),vee=n(JGe,"A",{href:!0});var Vjt=s(vee);dVr=r(Vjt,"FlaxBartForConditionalGeneration"),Vjt.forEach(t),cVr=r(JGe," (BART model)"),JGe.forEach(t),fVr=i(we),BC=n(we,"LI",{});var YGe=s(BC);zEe=n(YGe,"STRONG",{});var Xjt=s(zEe);mVr=r(Xjt,"bert"),Xjt.forEach(t),gVr=r(YGe," \u2014 "),Fee=n(YGe,"A",{href:!0});var zjt=s(Fee);hVr=r(zjt,"FlaxBertForPreTraining"),zjt.forEach(t),pVr=r(YGe," (BERT model)"),YGe.forEach(t),_Vr=i(we),IC=n(we,"LI",{});var KGe=s(IC);QEe=n(KGe,"STRONG",{});var Qjt=s(QEe);uVr=r(Qjt,"big_bird"),Qjt.forEach(t),bVr=r(KGe," \u2014 "),Tee=n(KGe,"A",{href:!0});var Wjt=s(Tee);vVr=r(Wjt,"FlaxBigBirdForPreTraining"),Wjt.forEach(t),FVr=r(KGe," (BigBird model)"),KGe.forEach(t),TVr=i(we),NC=n(we,"LI",{});var ZGe=s(NC);WEe=n(ZGe,"STRONG",{});var Hjt=s(WEe);MVr=r(Hjt,"electra"),Hjt.forEach(t),EVr=r(ZGe," \u2014 "),Mee=n(ZGe,"A",{href:!0});var Ujt=s(Mee);CVr=r(Ujt,"FlaxElectraForPreTraining"),Ujt.forEach(t),wVr=r(ZGe," (ELECTRA model)"),ZGe.forEach(t),AVr=i(we),qC=n(we,"LI",{});var eOe=s(qC);HEe=n(eOe,"STRONG",{});var Jjt=s(HEe);LVr=r(Jjt,"longt5"),Jjt.forEach(t),yVr=r(eOe," \u2014 "),Eee=n(eOe,"A",{href:!0});var Yjt=s(Eee);xVr=r(Yjt,"FlaxLongT5ForConditionalGeneration"),Yjt.forEach(t),$Vr=r(eOe," (LongT5 model)"),eOe.forEach(t),kVr=i(we),jC=n(we,"LI",{});var oOe=s(jC);UEe=n(oOe,"STRONG",{});var Kjt=s(UEe);SVr=r(Kjt,"mbart"),Kjt.forEach(t),RVr=r(oOe," \u2014 "),Cee=n(oOe,"A",{href:!0});var Zjt=s(Cee);PVr=r(Zjt,"FlaxMBartForConditionalGeneration"),Zjt.forEach(t),BVr=r(oOe," (mBART model)"),oOe.forEach(t),IVr=i(we),DC=n(we,"LI",{});var rOe=s(DC);JEe=n(rOe,"STRONG",{});var eDt=s(JEe);NVr=r(eDt,"mt5"),eDt.forEach(t),qVr=r(rOe," \u2014 "),wee=n(rOe,"A",{href:!0});var oDt=s(wee);jVr=r(oDt,"FlaxMT5ForConditionalGeneration"),oDt.forEach(t),DVr=r(rOe," (MT5 model)"),rOe.forEach(t),GVr=i(we),GC=n(we,"LI",{});var tOe=s(GC);YEe=n(tOe,"STRONG",{});var rDt=s(YEe);OVr=r(rDt,"roberta"),rDt.forEach(t),VVr=r(tOe," \u2014 "),Aee=n(tOe,"A",{href:!0});var tDt=s(Aee);XVr=r(tDt,"FlaxRobertaForMaskedLM"),tDt.forEach(t),zVr=r(tOe," (RoBERTa model)"),tOe.forEach(t),QVr=i(we),OC=n(we,"LI",{});var aOe=s(OC);KEe=n(aOe,"STRONG",{});var aDt=s(KEe);WVr=r(aDt,"roformer"),aDt.forEach(t),HVr=r(aOe," \u2014 "),Lee=n(aOe,"A",{href:!0});var nDt=s(Lee);UVr=r(nDt,"FlaxRoFormerForMaskedLM"),nDt.forEach(t),JVr=r(aOe," (RoFormer model)"),aOe.forEach(t),YVr=i(we),VC=n(we,"LI",{});var nOe=s(VC);ZEe=n(nOe,"STRONG",{});var sDt=s(ZEe);KVr=r(sDt,"t5"),sDt.forEach(t),ZVr=r(nOe," \u2014 "),yee=n(nOe,"A",{href:!0});var lDt=s(yee);eXr=r(lDt,"FlaxT5ForConditionalGeneration"),lDt.forEach(t),oXr=r(nOe," (T5 model)"),nOe.forEach(t),rXr=i(we),XC=n(we,"LI",{});var sOe=s(XC);eCe=n(sOe,"STRONG",{});var iDt=s(eCe);tXr=r(iDt,"wav2vec2"),iDt.forEach(t),aXr=r(sOe," \u2014 "),xee=n(sOe,"A",{href:!0});var dDt=s(xee);nXr=r(dDt,"FlaxWav2Vec2ForPreTraining"),dDt.forEach(t),sXr=r(sOe," (Wav2Vec2 model)"),sOe.forEach(t),lXr=i(we),zC=n(we,"LI",{});var lOe=s(zC);oCe=n(lOe,"STRONG",{});var cDt=s(oCe);iXr=r(cDt,"xlm-roberta"),cDt.forEach(t),dXr=r(lOe," \u2014 "),$ee=n(lOe,"A",{href:!0});var fDt=s($ee);cXr=r(fDt,"FlaxXLMRobertaForMaskedLM"),fDt.forEach(t),fXr=r(lOe," (XLM-RoBERTa model)"),lOe.forEach(t),we.forEach(t),mXr=i(si),T(QC.$$.fragment,si),si.forEach(t),ni.forEach(t),oze=i(f),of=n(f,"H2",{class:!0});var cWe=s(of);WC=n(cWe,"A",{id:!0,class:!0,href:!0});var mDt=s(WC);rCe=n(mDt,"SPAN",{});var gDt=s(rCe);T(g$.$$.fragment,gDt),gDt.forEach(t),mDt.forEach(t),gXr=i(cWe),tCe=n(cWe,"SPAN",{});var hDt=s(tCe);hXr=r(hDt,"FlaxAutoModelForMaskedLM"),hDt.forEach(t),cWe.forEach(t),rze=i(f),ur=n(f,"DIV",{class:!0});var li=s(ur);T(h$.$$.fragment,li),pXr=i(li),rf=n(li,"P",{});var Dte=s(rf);_Xr=r(Dte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),kee=n(Dte,"A",{href:!0});var pDt=s(kee);uXr=r(pDt,"from_pretrained()"),pDt.forEach(t),bXr=r(Dte," class method or the "),See=n(Dte,"A",{href:!0});var _Dt=s(See);vXr=r(_Dt,"from_config()"),_Dt.forEach(t),FXr=r(Dte,` class
method.`),Dte.forEach(t),TXr=i(li),p$=n(li,"P",{});var fWe=s(p$);MXr=r(fWe,"This class cannot be instantiated directly using "),aCe=n(fWe,"CODE",{});var uDt=s(aCe);EXr=r(uDt,"__init__()"),uDt.forEach(t),CXr=r(fWe," (throws an error)."),fWe.forEach(t),wXr=i(li),Ht=n(li,"DIV",{class:!0});var L6=s(Ht);T(_$.$$.fragment,L6),AXr=i(L6),nCe=n(L6,"P",{});var bDt=s(nCe);LXr=r(bDt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),bDt.forEach(t),yXr=i(L6),tf=n(L6,"P",{});var Gte=s(tf);xXr=r(Gte,`Note:
Loading a model from its configuration file does `),sCe=n(Gte,"STRONG",{});var vDt=s(sCe);$Xr=r(vDt,"not"),vDt.forEach(t),kXr=r(Gte,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ree=n(Gte,"A",{href:!0});var FDt=s(Ree);SXr=r(FDt,"from_pretrained()"),FDt.forEach(t),RXr=r(Gte," to load the model weights."),Gte.forEach(t),PXr=i(L6),T(HC.$$.fragment,L6),L6.forEach(t),BXr=i(li),zr=n(li,"DIV",{class:!0});var ii=s(zr);T(u$.$$.fragment,ii),IXr=i(ii),lCe=n(ii,"P",{});var TDt=s(lCe);NXr=r(TDt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),TDt.forEach(t),qXr=i(ii),En=n(ii,"P",{});var y6=s(En);jXr=r(y6,"The model class to instantiate is selected based on the "),iCe=n(y6,"CODE",{});var MDt=s(iCe);DXr=r(MDt,"model_type"),MDt.forEach(t),GXr=r(y6,` property of the config object (either
passed as an argument or loaded from `),dCe=n(y6,"CODE",{});var EDt=s(dCe);OXr=r(EDt,"pretrained_model_name_or_path"),EDt.forEach(t),VXr=r(y6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cCe=n(y6,"CODE",{});var CDt=s(cCe);XXr=r(CDt,"pretrained_model_name_or_path"),CDt.forEach(t),zXr=r(y6,":"),y6.forEach(t),QXr=i(ii),$e=n(ii,"UL",{});var qe=s($e);UC=n(qe,"LI",{});var iOe=s(UC);fCe=n(iOe,"STRONG",{});var wDt=s(fCe);WXr=r(wDt,"albert"),wDt.forEach(t),HXr=r(iOe," \u2014 "),Pee=n(iOe,"A",{href:!0});var ADt=s(Pee);UXr=r(ADt,"FlaxAlbertForMaskedLM"),ADt.forEach(t),JXr=r(iOe," (ALBERT model)"),iOe.forEach(t),YXr=i(qe),JC=n(qe,"LI",{});var dOe=s(JC);mCe=n(dOe,"STRONG",{});var LDt=s(mCe);KXr=r(LDt,"bart"),LDt.forEach(t),ZXr=r(dOe," \u2014 "),Bee=n(dOe,"A",{href:!0});var yDt=s(Bee);ezr=r(yDt,"FlaxBartForConditionalGeneration"),yDt.forEach(t),ozr=r(dOe," (BART model)"),dOe.forEach(t),rzr=i(qe),YC=n(qe,"LI",{});var cOe=s(YC);gCe=n(cOe,"STRONG",{});var xDt=s(gCe);tzr=r(xDt,"bert"),xDt.forEach(t),azr=r(cOe," \u2014 "),Iee=n(cOe,"A",{href:!0});var $Dt=s(Iee);nzr=r($Dt,"FlaxBertForMaskedLM"),$Dt.forEach(t),szr=r(cOe," (BERT model)"),cOe.forEach(t),lzr=i(qe),KC=n(qe,"LI",{});var fOe=s(KC);hCe=n(fOe,"STRONG",{});var kDt=s(hCe);izr=r(kDt,"big_bird"),kDt.forEach(t),dzr=r(fOe," \u2014 "),Nee=n(fOe,"A",{href:!0});var SDt=s(Nee);czr=r(SDt,"FlaxBigBirdForMaskedLM"),SDt.forEach(t),fzr=r(fOe," (BigBird model)"),fOe.forEach(t),mzr=i(qe),ZC=n(qe,"LI",{});var mOe=s(ZC);pCe=n(mOe,"STRONG",{});var RDt=s(pCe);gzr=r(RDt,"distilbert"),RDt.forEach(t),hzr=r(mOe," \u2014 "),qee=n(mOe,"A",{href:!0});var PDt=s(qee);pzr=r(PDt,"FlaxDistilBertForMaskedLM"),PDt.forEach(t),_zr=r(mOe," (DistilBERT model)"),mOe.forEach(t),uzr=i(qe),e0=n(qe,"LI",{});var gOe=s(e0);_Ce=n(gOe,"STRONG",{});var BDt=s(_Ce);bzr=r(BDt,"electra"),BDt.forEach(t),vzr=r(gOe," \u2014 "),jee=n(gOe,"A",{href:!0});var IDt=s(jee);Fzr=r(IDt,"FlaxElectraForMaskedLM"),IDt.forEach(t),Tzr=r(gOe," (ELECTRA model)"),gOe.forEach(t),Mzr=i(qe),o0=n(qe,"LI",{});var hOe=s(o0);uCe=n(hOe,"STRONG",{});var NDt=s(uCe);Ezr=r(NDt,"mbart"),NDt.forEach(t),Czr=r(hOe," \u2014 "),Dee=n(hOe,"A",{href:!0});var qDt=s(Dee);wzr=r(qDt,"FlaxMBartForConditionalGeneration"),qDt.forEach(t),Azr=r(hOe," (mBART model)"),hOe.forEach(t),Lzr=i(qe),r0=n(qe,"LI",{});var pOe=s(r0);bCe=n(pOe,"STRONG",{});var jDt=s(bCe);yzr=r(jDt,"roberta"),jDt.forEach(t),xzr=r(pOe," \u2014 "),Gee=n(pOe,"A",{href:!0});var DDt=s(Gee);$zr=r(DDt,"FlaxRobertaForMaskedLM"),DDt.forEach(t),kzr=r(pOe," (RoBERTa model)"),pOe.forEach(t),Szr=i(qe),t0=n(qe,"LI",{});var _Oe=s(t0);vCe=n(_Oe,"STRONG",{});var GDt=s(vCe);Rzr=r(GDt,"roformer"),GDt.forEach(t),Pzr=r(_Oe," \u2014 "),Oee=n(_Oe,"A",{href:!0});var ODt=s(Oee);Bzr=r(ODt,"FlaxRoFormerForMaskedLM"),ODt.forEach(t),Izr=r(_Oe," (RoFormer model)"),_Oe.forEach(t),Nzr=i(qe),a0=n(qe,"LI",{});var uOe=s(a0);FCe=n(uOe,"STRONG",{});var VDt=s(FCe);qzr=r(VDt,"xlm-roberta"),VDt.forEach(t),jzr=r(uOe," \u2014 "),Vee=n(uOe,"A",{href:!0});var XDt=s(Vee);Dzr=r(XDt,"FlaxXLMRobertaForMaskedLM"),XDt.forEach(t),Gzr=r(uOe," (XLM-RoBERTa model)"),uOe.forEach(t),qe.forEach(t),Ozr=i(ii),T(n0.$$.fragment,ii),ii.forEach(t),li.forEach(t),tze=i(f),af=n(f,"H2",{class:!0});var mWe=s(af);s0=n(mWe,"A",{id:!0,class:!0,href:!0});var zDt=s(s0);TCe=n(zDt,"SPAN",{});var QDt=s(TCe);T(b$.$$.fragment,QDt),QDt.forEach(t),zDt.forEach(t),Vzr=i(mWe),MCe=n(mWe,"SPAN",{});var WDt=s(MCe);Xzr=r(WDt,"FlaxAutoModelForSeq2SeqLM"),WDt.forEach(t),mWe.forEach(t),aze=i(f),br=n(f,"DIV",{class:!0});var di=s(br);T(v$.$$.fragment,di),zzr=i(di),nf=n(di,"P",{});var Ote=s(nf);Qzr=r(Ote,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Xee=n(Ote,"A",{href:!0});var HDt=s(Xee);Wzr=r(HDt,"from_pretrained()"),HDt.forEach(t),Hzr=r(Ote," class method or the "),zee=n(Ote,"A",{href:!0});var UDt=s(zee);Uzr=r(UDt,"from_config()"),UDt.forEach(t),Jzr=r(Ote,` class
method.`),Ote.forEach(t),Yzr=i(di),F$=n(di,"P",{});var gWe=s(F$);Kzr=r(gWe,"This class cannot be instantiated directly using "),ECe=n(gWe,"CODE",{});var JDt=s(ECe);Zzr=r(JDt,"__init__()"),JDt.forEach(t),eQr=r(gWe," (throws an error)."),gWe.forEach(t),oQr=i(di),Ut=n(di,"DIV",{class:!0});var x6=s(Ut);T(T$.$$.fragment,x6),rQr=i(x6),CCe=n(x6,"P",{});var YDt=s(CCe);tQr=r(YDt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),YDt.forEach(t),aQr=i(x6),sf=n(x6,"P",{});var Vte=s(sf);nQr=r(Vte,`Note:
Loading a model from its configuration file does `),wCe=n(Vte,"STRONG",{});var KDt=s(wCe);sQr=r(KDt,"not"),KDt.forEach(t),lQr=r(Vte,` load the model weights. It only affects the
model\u2019s configuration. Use `),Qee=n(Vte,"A",{href:!0});var ZDt=s(Qee);iQr=r(ZDt,"from_pretrained()"),ZDt.forEach(t),dQr=r(Vte," to load the model weights."),Vte.forEach(t),cQr=i(x6),T(l0.$$.fragment,x6),x6.forEach(t),fQr=i(di),Qr=n(di,"DIV",{class:!0});var ci=s(Qr);T(M$.$$.fragment,ci),mQr=i(ci),ACe=n(ci,"P",{});var eGt=s(ACe);gQr=r(eGt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),eGt.forEach(t),hQr=i(ci),Cn=n(ci,"P",{});var $6=s(Cn);pQr=r($6,"The model class to instantiate is selected based on the "),LCe=n($6,"CODE",{});var oGt=s(LCe);_Qr=r(oGt,"model_type"),oGt.forEach(t),uQr=r($6,` property of the config object (either
passed as an argument or loaded from `),yCe=n($6,"CODE",{});var rGt=s(yCe);bQr=r(rGt,"pretrained_model_name_or_path"),rGt.forEach(t),vQr=r($6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xCe=n($6,"CODE",{});var tGt=s(xCe);FQr=r(tGt,"pretrained_model_name_or_path"),tGt.forEach(t),TQr=r($6,":"),$6.forEach(t),MQr=i(ci),ke=n(ci,"UL",{});var je=s(ke);i0=n(je,"LI",{});var bOe=s(i0);$Ce=n(bOe,"STRONG",{});var aGt=s($Ce);EQr=r(aGt,"bart"),aGt.forEach(t),CQr=r(bOe," \u2014 "),Wee=n(bOe,"A",{href:!0});var nGt=s(Wee);wQr=r(nGt,"FlaxBartForConditionalGeneration"),nGt.forEach(t),AQr=r(bOe," (BART model)"),bOe.forEach(t),LQr=i(je),d0=n(je,"LI",{});var vOe=s(d0);kCe=n(vOe,"STRONG",{});var sGt=s(kCe);yQr=r(sGt,"blenderbot"),sGt.forEach(t),xQr=r(vOe," \u2014 "),Hee=n(vOe,"A",{href:!0});var lGt=s(Hee);$Qr=r(lGt,"FlaxBlenderbotForConditionalGeneration"),lGt.forEach(t),kQr=r(vOe," (Blenderbot model)"),vOe.forEach(t),SQr=i(je),c0=n(je,"LI",{});var FOe=s(c0);SCe=n(FOe,"STRONG",{});var iGt=s(SCe);RQr=r(iGt,"blenderbot-small"),iGt.forEach(t),PQr=r(FOe," \u2014 "),Uee=n(FOe,"A",{href:!0});var dGt=s(Uee);BQr=r(dGt,"FlaxBlenderbotSmallForConditionalGeneration"),dGt.forEach(t),IQr=r(FOe," (BlenderbotSmall model)"),FOe.forEach(t),NQr=i(je),f0=n(je,"LI",{});var TOe=s(f0);RCe=n(TOe,"STRONG",{});var cGt=s(RCe);qQr=r(cGt,"encoder-decoder"),cGt.forEach(t),jQr=r(TOe," \u2014 "),Jee=n(TOe,"A",{href:!0});var fGt=s(Jee);DQr=r(fGt,"FlaxEncoderDecoderModel"),fGt.forEach(t),GQr=r(TOe," (Encoder decoder model)"),TOe.forEach(t),OQr=i(je),m0=n(je,"LI",{});var MOe=s(m0);PCe=n(MOe,"STRONG",{});var mGt=s(PCe);VQr=r(mGt,"longt5"),mGt.forEach(t),XQr=r(MOe," \u2014 "),Yee=n(MOe,"A",{href:!0});var gGt=s(Yee);zQr=r(gGt,"FlaxLongT5ForConditionalGeneration"),gGt.forEach(t),QQr=r(MOe," (LongT5 model)"),MOe.forEach(t),WQr=i(je),g0=n(je,"LI",{});var EOe=s(g0);BCe=n(EOe,"STRONG",{});var hGt=s(BCe);HQr=r(hGt,"marian"),hGt.forEach(t),UQr=r(EOe," \u2014 "),Kee=n(EOe,"A",{href:!0});var pGt=s(Kee);JQr=r(pGt,"FlaxMarianMTModel"),pGt.forEach(t),YQr=r(EOe," (Marian model)"),EOe.forEach(t),KQr=i(je),h0=n(je,"LI",{});var COe=s(h0);ICe=n(COe,"STRONG",{});var _Gt=s(ICe);ZQr=r(_Gt,"mbart"),_Gt.forEach(t),eWr=r(COe," \u2014 "),Zee=n(COe,"A",{href:!0});var uGt=s(Zee);oWr=r(uGt,"FlaxMBartForConditionalGeneration"),uGt.forEach(t),rWr=r(COe," (mBART model)"),COe.forEach(t),tWr=i(je),p0=n(je,"LI",{});var wOe=s(p0);NCe=n(wOe,"STRONG",{});var bGt=s(NCe);aWr=r(bGt,"mt5"),bGt.forEach(t),nWr=r(wOe," \u2014 "),eoe=n(wOe,"A",{href:!0});var vGt=s(eoe);sWr=r(vGt,"FlaxMT5ForConditionalGeneration"),vGt.forEach(t),lWr=r(wOe," (MT5 model)"),wOe.forEach(t),iWr=i(je),_0=n(je,"LI",{});var AOe=s(_0);qCe=n(AOe,"STRONG",{});var FGt=s(qCe);dWr=r(FGt,"pegasus"),FGt.forEach(t),cWr=r(AOe," \u2014 "),ooe=n(AOe,"A",{href:!0});var TGt=s(ooe);fWr=r(TGt,"FlaxPegasusForConditionalGeneration"),TGt.forEach(t),mWr=r(AOe," (Pegasus model)"),AOe.forEach(t),gWr=i(je),u0=n(je,"LI",{});var LOe=s(u0);jCe=n(LOe,"STRONG",{});var MGt=s(jCe);hWr=r(MGt,"t5"),MGt.forEach(t),pWr=r(LOe," \u2014 "),roe=n(LOe,"A",{href:!0});var EGt=s(roe);_Wr=r(EGt,"FlaxT5ForConditionalGeneration"),EGt.forEach(t),uWr=r(LOe," (T5 model)"),LOe.forEach(t),je.forEach(t),bWr=i(ci),T(b0.$$.fragment,ci),ci.forEach(t),di.forEach(t),nze=i(f),lf=n(f,"H2",{class:!0});var hWe=s(lf);v0=n(hWe,"A",{id:!0,class:!0,href:!0});var CGt=s(v0);DCe=n(CGt,"SPAN",{});var wGt=s(DCe);T(E$.$$.fragment,wGt),wGt.forEach(t),CGt.forEach(t),vWr=i(hWe),GCe=n(hWe,"SPAN",{});var AGt=s(GCe);FWr=r(AGt,"FlaxAutoModelForSequenceClassification"),AGt.forEach(t),hWe.forEach(t),sze=i(f),vr=n(f,"DIV",{class:!0});var fi=s(vr);T(C$.$$.fragment,fi),TWr=i(fi),df=n(fi,"P",{});var Xte=s(df);MWr=r(Xte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),toe=n(Xte,"A",{href:!0});var LGt=s(toe);EWr=r(LGt,"from_pretrained()"),LGt.forEach(t),CWr=r(Xte," class method or the "),aoe=n(Xte,"A",{href:!0});var yGt=s(aoe);wWr=r(yGt,"from_config()"),yGt.forEach(t),AWr=r(Xte,` class
method.`),Xte.forEach(t),LWr=i(fi),w$=n(fi,"P",{});var pWe=s(w$);yWr=r(pWe,"This class cannot be instantiated directly using "),OCe=n(pWe,"CODE",{});var xGt=s(OCe);xWr=r(xGt,"__init__()"),xGt.forEach(t),$Wr=r(pWe," (throws an error)."),pWe.forEach(t),kWr=i(fi),Jt=n(fi,"DIV",{class:!0});var k6=s(Jt);T(A$.$$.fragment,k6),SWr=i(k6),VCe=n(k6,"P",{});var $Gt=s(VCe);RWr=r($Gt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),$Gt.forEach(t),PWr=i(k6),cf=n(k6,"P",{});var zte=s(cf);BWr=r(zte,`Note:
Loading a model from its configuration file does `),XCe=n(zte,"STRONG",{});var kGt=s(XCe);IWr=r(kGt,"not"),kGt.forEach(t),NWr=r(zte,` load the model weights. It only affects the
model\u2019s configuration. Use `),noe=n(zte,"A",{href:!0});var SGt=s(noe);qWr=r(SGt,"from_pretrained()"),SGt.forEach(t),jWr=r(zte," to load the model weights."),zte.forEach(t),DWr=i(k6),T(F0.$$.fragment,k6),k6.forEach(t),GWr=i(fi),Wr=n(fi,"DIV",{class:!0});var mi=s(Wr);T(L$.$$.fragment,mi),OWr=i(mi),zCe=n(mi,"P",{});var RGt=s(zCe);VWr=r(RGt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),RGt.forEach(t),XWr=i(mi),wn=n(mi,"P",{});var S6=s(wn);zWr=r(S6,"The model class to instantiate is selected based on the "),QCe=n(S6,"CODE",{});var PGt=s(QCe);QWr=r(PGt,"model_type"),PGt.forEach(t),WWr=r(S6,` property of the config object (either
passed as an argument or loaded from `),WCe=n(S6,"CODE",{});var BGt=s(WCe);HWr=r(BGt,"pretrained_model_name_or_path"),BGt.forEach(t),UWr=r(S6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HCe=n(S6,"CODE",{});var IGt=s(HCe);JWr=r(IGt,"pretrained_model_name_or_path"),IGt.forEach(t),YWr=r(S6,":"),S6.forEach(t),KWr=i(mi),Se=n(mi,"UL",{});var De=s(Se);T0=n(De,"LI",{});var yOe=s(T0);UCe=n(yOe,"STRONG",{});var NGt=s(UCe);ZWr=r(NGt,"albert"),NGt.forEach(t),eHr=r(yOe," \u2014 "),soe=n(yOe,"A",{href:!0});var qGt=s(soe);oHr=r(qGt,"FlaxAlbertForSequenceClassification"),qGt.forEach(t),rHr=r(yOe," (ALBERT model)"),yOe.forEach(t),tHr=i(De),M0=n(De,"LI",{});var xOe=s(M0);JCe=n(xOe,"STRONG",{});var jGt=s(JCe);aHr=r(jGt,"bart"),jGt.forEach(t),nHr=r(xOe," \u2014 "),loe=n(xOe,"A",{href:!0});var DGt=s(loe);sHr=r(DGt,"FlaxBartForSequenceClassification"),DGt.forEach(t),lHr=r(xOe," (BART model)"),xOe.forEach(t),iHr=i(De),E0=n(De,"LI",{});var $Oe=s(E0);YCe=n($Oe,"STRONG",{});var GGt=s(YCe);dHr=r(GGt,"bert"),GGt.forEach(t),cHr=r($Oe," \u2014 "),ioe=n($Oe,"A",{href:!0});var OGt=s(ioe);fHr=r(OGt,"FlaxBertForSequenceClassification"),OGt.forEach(t),mHr=r($Oe," (BERT model)"),$Oe.forEach(t),gHr=i(De),C0=n(De,"LI",{});var kOe=s(C0);KCe=n(kOe,"STRONG",{});var VGt=s(KCe);hHr=r(VGt,"big_bird"),VGt.forEach(t),pHr=r(kOe," \u2014 "),doe=n(kOe,"A",{href:!0});var XGt=s(doe);_Hr=r(XGt,"FlaxBigBirdForSequenceClassification"),XGt.forEach(t),uHr=r(kOe," (BigBird model)"),kOe.forEach(t),bHr=i(De),w0=n(De,"LI",{});var SOe=s(w0);ZCe=n(SOe,"STRONG",{});var zGt=s(ZCe);vHr=r(zGt,"distilbert"),zGt.forEach(t),FHr=r(SOe," \u2014 "),coe=n(SOe,"A",{href:!0});var QGt=s(coe);THr=r(QGt,"FlaxDistilBertForSequenceClassification"),QGt.forEach(t),MHr=r(SOe," (DistilBERT model)"),SOe.forEach(t),EHr=i(De),A0=n(De,"LI",{});var ROe=s(A0);e0e=n(ROe,"STRONG",{});var WGt=s(e0e);CHr=r(WGt,"electra"),WGt.forEach(t),wHr=r(ROe," \u2014 "),foe=n(ROe,"A",{href:!0});var HGt=s(foe);AHr=r(HGt,"FlaxElectraForSequenceClassification"),HGt.forEach(t),LHr=r(ROe," (ELECTRA model)"),ROe.forEach(t),yHr=i(De),L0=n(De,"LI",{});var POe=s(L0);o0e=n(POe,"STRONG",{});var UGt=s(o0e);xHr=r(UGt,"mbart"),UGt.forEach(t),$Hr=r(POe," \u2014 "),moe=n(POe,"A",{href:!0});var JGt=s(moe);kHr=r(JGt,"FlaxMBartForSequenceClassification"),JGt.forEach(t),SHr=r(POe," (mBART model)"),POe.forEach(t),RHr=i(De),y0=n(De,"LI",{});var BOe=s(y0);r0e=n(BOe,"STRONG",{});var YGt=s(r0e);PHr=r(YGt,"roberta"),YGt.forEach(t),BHr=r(BOe," \u2014 "),goe=n(BOe,"A",{href:!0});var KGt=s(goe);IHr=r(KGt,"FlaxRobertaForSequenceClassification"),KGt.forEach(t),NHr=r(BOe," (RoBERTa model)"),BOe.forEach(t),qHr=i(De),x0=n(De,"LI",{});var IOe=s(x0);t0e=n(IOe,"STRONG",{});var ZGt=s(t0e);jHr=r(ZGt,"roformer"),ZGt.forEach(t),DHr=r(IOe," \u2014 "),hoe=n(IOe,"A",{href:!0});var eOt=s(hoe);GHr=r(eOt,"FlaxRoFormerForSequenceClassification"),eOt.forEach(t),OHr=r(IOe," (RoFormer model)"),IOe.forEach(t),VHr=i(De),$0=n(De,"LI",{});var NOe=s($0);a0e=n(NOe,"STRONG",{});var oOt=s(a0e);XHr=r(oOt,"xlm-roberta"),oOt.forEach(t),zHr=r(NOe," \u2014 "),poe=n(NOe,"A",{href:!0});var rOt=s(poe);QHr=r(rOt,"FlaxXLMRobertaForSequenceClassification"),rOt.forEach(t),WHr=r(NOe," (XLM-RoBERTa model)"),NOe.forEach(t),De.forEach(t),HHr=i(mi),T(k0.$$.fragment,mi),mi.forEach(t),fi.forEach(t),lze=i(f),ff=n(f,"H2",{class:!0});var _We=s(ff);S0=n(_We,"A",{id:!0,class:!0,href:!0});var tOt=s(S0);n0e=n(tOt,"SPAN",{});var aOt=s(n0e);T(y$.$$.fragment,aOt),aOt.forEach(t),tOt.forEach(t),UHr=i(_We),s0e=n(_We,"SPAN",{});var nOt=s(s0e);JHr=r(nOt,"FlaxAutoModelForQuestionAnswering"),nOt.forEach(t),_We.forEach(t),ize=i(f),Fr=n(f,"DIV",{class:!0});var gi=s(Fr);T(x$.$$.fragment,gi),YHr=i(gi),mf=n(gi,"P",{});var Qte=s(mf);KHr=r(Qte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),_oe=n(Qte,"A",{href:!0});var sOt=s(_oe);ZHr=r(sOt,"from_pretrained()"),sOt.forEach(t),eUr=r(Qte," class method or the "),uoe=n(Qte,"A",{href:!0});var lOt=s(uoe);oUr=r(lOt,"from_config()"),lOt.forEach(t),rUr=r(Qte,` class
method.`),Qte.forEach(t),tUr=i(gi),$$=n(gi,"P",{});var uWe=s($$);aUr=r(uWe,"This class cannot be instantiated directly using "),l0e=n(uWe,"CODE",{});var iOt=s(l0e);nUr=r(iOt,"__init__()"),iOt.forEach(t),sUr=r(uWe," (throws an error)."),uWe.forEach(t),lUr=i(gi),Yt=n(gi,"DIV",{class:!0});var R6=s(Yt);T(k$.$$.fragment,R6),iUr=i(R6),i0e=n(R6,"P",{});var dOt=s(i0e);dUr=r(dOt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),dOt.forEach(t),cUr=i(R6),gf=n(R6,"P",{});var Wte=s(gf);fUr=r(Wte,`Note:
Loading a model from its configuration file does `),d0e=n(Wte,"STRONG",{});var cOt=s(d0e);mUr=r(cOt,"not"),cOt.forEach(t),gUr=r(Wte,` load the model weights. It only affects the
model\u2019s configuration. Use `),boe=n(Wte,"A",{href:!0});var fOt=s(boe);hUr=r(fOt,"from_pretrained()"),fOt.forEach(t),pUr=r(Wte," to load the model weights."),Wte.forEach(t),_Ur=i(R6),T(R0.$$.fragment,R6),R6.forEach(t),uUr=i(gi),Hr=n(gi,"DIV",{class:!0});var hi=s(Hr);T(S$.$$.fragment,hi),bUr=i(hi),c0e=n(hi,"P",{});var mOt=s(c0e);vUr=r(mOt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),mOt.forEach(t),FUr=i(hi),An=n(hi,"P",{});var P6=s(An);TUr=r(P6,"The model class to instantiate is selected based on the "),f0e=n(P6,"CODE",{});var gOt=s(f0e);MUr=r(gOt,"model_type"),gOt.forEach(t),EUr=r(P6,` property of the config object (either
passed as an argument or loaded from `),m0e=n(P6,"CODE",{});var hOt=s(m0e);CUr=r(hOt,"pretrained_model_name_or_path"),hOt.forEach(t),wUr=r(P6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g0e=n(P6,"CODE",{});var pOt=s(g0e);AUr=r(pOt,"pretrained_model_name_or_path"),pOt.forEach(t),LUr=r(P6,":"),P6.forEach(t),yUr=i(hi),Re=n(hi,"UL",{});var Ge=s(Re);P0=n(Ge,"LI",{});var qOe=s(P0);h0e=n(qOe,"STRONG",{});var _Ot=s(h0e);xUr=r(_Ot,"albert"),_Ot.forEach(t),$Ur=r(qOe," \u2014 "),voe=n(qOe,"A",{href:!0});var uOt=s(voe);kUr=r(uOt,"FlaxAlbertForQuestionAnswering"),uOt.forEach(t),SUr=r(qOe," (ALBERT model)"),qOe.forEach(t),RUr=i(Ge),B0=n(Ge,"LI",{});var jOe=s(B0);p0e=n(jOe,"STRONG",{});var bOt=s(p0e);PUr=r(bOt,"bart"),bOt.forEach(t),BUr=r(jOe," \u2014 "),Foe=n(jOe,"A",{href:!0});var vOt=s(Foe);IUr=r(vOt,"FlaxBartForQuestionAnswering"),vOt.forEach(t),NUr=r(jOe," (BART model)"),jOe.forEach(t),qUr=i(Ge),I0=n(Ge,"LI",{});var DOe=s(I0);_0e=n(DOe,"STRONG",{});var FOt=s(_0e);jUr=r(FOt,"bert"),FOt.forEach(t),DUr=r(DOe," \u2014 "),Toe=n(DOe,"A",{href:!0});var TOt=s(Toe);GUr=r(TOt,"FlaxBertForQuestionAnswering"),TOt.forEach(t),OUr=r(DOe," (BERT model)"),DOe.forEach(t),VUr=i(Ge),N0=n(Ge,"LI",{});var GOe=s(N0);u0e=n(GOe,"STRONG",{});var MOt=s(u0e);XUr=r(MOt,"big_bird"),MOt.forEach(t),zUr=r(GOe," \u2014 "),Moe=n(GOe,"A",{href:!0});var EOt=s(Moe);QUr=r(EOt,"FlaxBigBirdForQuestionAnswering"),EOt.forEach(t),WUr=r(GOe," (BigBird model)"),GOe.forEach(t),HUr=i(Ge),q0=n(Ge,"LI",{});var OOe=s(q0);b0e=n(OOe,"STRONG",{});var COt=s(b0e);UUr=r(COt,"distilbert"),COt.forEach(t),JUr=r(OOe," \u2014 "),Eoe=n(OOe,"A",{href:!0});var wOt=s(Eoe);YUr=r(wOt,"FlaxDistilBertForQuestionAnswering"),wOt.forEach(t),KUr=r(OOe," (DistilBERT model)"),OOe.forEach(t),ZUr=i(Ge),j0=n(Ge,"LI",{});var VOe=s(j0);v0e=n(VOe,"STRONG",{});var AOt=s(v0e);eJr=r(AOt,"electra"),AOt.forEach(t),oJr=r(VOe," \u2014 "),Coe=n(VOe,"A",{href:!0});var LOt=s(Coe);rJr=r(LOt,"FlaxElectraForQuestionAnswering"),LOt.forEach(t),tJr=r(VOe," (ELECTRA model)"),VOe.forEach(t),aJr=i(Ge),D0=n(Ge,"LI",{});var XOe=s(D0);F0e=n(XOe,"STRONG",{});var yOt=s(F0e);nJr=r(yOt,"mbart"),yOt.forEach(t),sJr=r(XOe," \u2014 "),woe=n(XOe,"A",{href:!0});var xOt=s(woe);lJr=r(xOt,"FlaxMBartForQuestionAnswering"),xOt.forEach(t),iJr=r(XOe," (mBART model)"),XOe.forEach(t),dJr=i(Ge),G0=n(Ge,"LI",{});var zOe=s(G0);T0e=n(zOe,"STRONG",{});var $Ot=s(T0e);cJr=r($Ot,"roberta"),$Ot.forEach(t),fJr=r(zOe," \u2014 "),Aoe=n(zOe,"A",{href:!0});var kOt=s(Aoe);mJr=r(kOt,"FlaxRobertaForQuestionAnswering"),kOt.forEach(t),gJr=r(zOe," (RoBERTa model)"),zOe.forEach(t),hJr=i(Ge),O0=n(Ge,"LI",{});var QOe=s(O0);M0e=n(QOe,"STRONG",{});var SOt=s(M0e);pJr=r(SOt,"roformer"),SOt.forEach(t),_Jr=r(QOe," \u2014 "),Loe=n(QOe,"A",{href:!0});var ROt=s(Loe);uJr=r(ROt,"FlaxRoFormerForQuestionAnswering"),ROt.forEach(t),bJr=r(QOe," (RoFormer model)"),QOe.forEach(t),vJr=i(Ge),V0=n(Ge,"LI",{});var WOe=s(V0);E0e=n(WOe,"STRONG",{});var POt=s(E0e);FJr=r(POt,"xlm-roberta"),POt.forEach(t),TJr=r(WOe," \u2014 "),yoe=n(WOe,"A",{href:!0});var BOt=s(yoe);MJr=r(BOt,"FlaxXLMRobertaForQuestionAnswering"),BOt.forEach(t),EJr=r(WOe," (XLM-RoBERTa model)"),WOe.forEach(t),Ge.forEach(t),CJr=i(hi),T(X0.$$.fragment,hi),hi.forEach(t),gi.forEach(t),dze=i(f),hf=n(f,"H2",{class:!0});var bWe=s(hf);z0=n(bWe,"A",{id:!0,class:!0,href:!0});var IOt=s(z0);C0e=n(IOt,"SPAN",{});var NOt=s(C0e);T(R$.$$.fragment,NOt),NOt.forEach(t),IOt.forEach(t),wJr=i(bWe),w0e=n(bWe,"SPAN",{});var qOt=s(w0e);AJr=r(qOt,"FlaxAutoModelForTokenClassification"),qOt.forEach(t),bWe.forEach(t),cze=i(f),Tr=n(f,"DIV",{class:!0});var pi=s(Tr);T(P$.$$.fragment,pi),LJr=i(pi),pf=n(pi,"P",{});var Hte=s(pf);yJr=r(Hte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),xoe=n(Hte,"A",{href:!0});var jOt=s(xoe);xJr=r(jOt,"from_pretrained()"),jOt.forEach(t),$Jr=r(Hte," class method or the "),$oe=n(Hte,"A",{href:!0});var DOt=s($oe);kJr=r(DOt,"from_config()"),DOt.forEach(t),SJr=r(Hte,` class
method.`),Hte.forEach(t),RJr=i(pi),B$=n(pi,"P",{});var vWe=s(B$);PJr=r(vWe,"This class cannot be instantiated directly using "),A0e=n(vWe,"CODE",{});var GOt=s(A0e);BJr=r(GOt,"__init__()"),GOt.forEach(t),IJr=r(vWe," (throws an error)."),vWe.forEach(t),NJr=i(pi),Kt=n(pi,"DIV",{class:!0});var B6=s(Kt);T(I$.$$.fragment,B6),qJr=i(B6),L0e=n(B6,"P",{});var OOt=s(L0e);jJr=r(OOt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),OOt.forEach(t),DJr=i(B6),_f=n(B6,"P",{});var Ute=s(_f);GJr=r(Ute,`Note:
Loading a model from its configuration file does `),y0e=n(Ute,"STRONG",{});var VOt=s(y0e);OJr=r(VOt,"not"),VOt.forEach(t),VJr=r(Ute,` load the model weights. It only affects the
model\u2019s configuration. Use `),koe=n(Ute,"A",{href:!0});var XOt=s(koe);XJr=r(XOt,"from_pretrained()"),XOt.forEach(t),zJr=r(Ute," to load the model weights."),Ute.forEach(t),QJr=i(B6),T(Q0.$$.fragment,B6),B6.forEach(t),WJr=i(pi),Ur=n(pi,"DIV",{class:!0});var _i=s(Ur);T(N$.$$.fragment,_i),HJr=i(_i),x0e=n(_i,"P",{});var zOt=s(x0e);UJr=r(zOt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),zOt.forEach(t),JJr=i(_i),Ln=n(_i,"P",{});var I6=s(Ln);YJr=r(I6,"The model class to instantiate is selected based on the "),$0e=n(I6,"CODE",{});var QOt=s($0e);KJr=r(QOt,"model_type"),QOt.forEach(t),ZJr=r(I6,` property of the config object (either
passed as an argument or loaded from `),k0e=n(I6,"CODE",{});var WOt=s(k0e);eYr=r(WOt,"pretrained_model_name_or_path"),WOt.forEach(t),oYr=r(I6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S0e=n(I6,"CODE",{});var HOt=s(S0e);rYr=r(HOt,"pretrained_model_name_or_path"),HOt.forEach(t),tYr=r(I6,":"),I6.forEach(t),aYr=i(_i),Ve=n(_i,"UL",{});var To=s(Ve);W0=n(To,"LI",{});var HOe=s(W0);R0e=n(HOe,"STRONG",{});var UOt=s(R0e);nYr=r(UOt,"albert"),UOt.forEach(t),sYr=r(HOe," \u2014 "),Soe=n(HOe,"A",{href:!0});var JOt=s(Soe);lYr=r(JOt,"FlaxAlbertForTokenClassification"),JOt.forEach(t),iYr=r(HOe," (ALBERT model)"),HOe.forEach(t),dYr=i(To),H0=n(To,"LI",{});var UOe=s(H0);P0e=n(UOe,"STRONG",{});var YOt=s(P0e);cYr=r(YOt,"bert"),YOt.forEach(t),fYr=r(UOe," \u2014 "),Roe=n(UOe,"A",{href:!0});var KOt=s(Roe);mYr=r(KOt,"FlaxBertForTokenClassification"),KOt.forEach(t),gYr=r(UOe," (BERT model)"),UOe.forEach(t),hYr=i(To),U0=n(To,"LI",{});var JOe=s(U0);B0e=n(JOe,"STRONG",{});var ZOt=s(B0e);pYr=r(ZOt,"big_bird"),ZOt.forEach(t),_Yr=r(JOe," \u2014 "),Poe=n(JOe,"A",{href:!0});var eVt=s(Poe);uYr=r(eVt,"FlaxBigBirdForTokenClassification"),eVt.forEach(t),bYr=r(JOe," (BigBird model)"),JOe.forEach(t),vYr=i(To),J0=n(To,"LI",{});var YOe=s(J0);I0e=n(YOe,"STRONG",{});var oVt=s(I0e);FYr=r(oVt,"distilbert"),oVt.forEach(t),TYr=r(YOe," \u2014 "),Boe=n(YOe,"A",{href:!0});var rVt=s(Boe);MYr=r(rVt,"FlaxDistilBertForTokenClassification"),rVt.forEach(t),EYr=r(YOe," (DistilBERT model)"),YOe.forEach(t),CYr=i(To),Y0=n(To,"LI",{});var KOe=s(Y0);N0e=n(KOe,"STRONG",{});var tVt=s(N0e);wYr=r(tVt,"electra"),tVt.forEach(t),AYr=r(KOe," \u2014 "),Ioe=n(KOe,"A",{href:!0});var aVt=s(Ioe);LYr=r(aVt,"FlaxElectraForTokenClassification"),aVt.forEach(t),yYr=r(KOe," (ELECTRA model)"),KOe.forEach(t),xYr=i(To),K0=n(To,"LI",{});var ZOe=s(K0);q0e=n(ZOe,"STRONG",{});var nVt=s(q0e);$Yr=r(nVt,"roberta"),nVt.forEach(t),kYr=r(ZOe," \u2014 "),Noe=n(ZOe,"A",{href:!0});var sVt=s(Noe);SYr=r(sVt,"FlaxRobertaForTokenClassification"),sVt.forEach(t),RYr=r(ZOe," (RoBERTa model)"),ZOe.forEach(t),PYr=i(To),Z0=n(To,"LI",{});var eVe=s(Z0);j0e=n(eVe,"STRONG",{});var lVt=s(j0e);BYr=r(lVt,"roformer"),lVt.forEach(t),IYr=r(eVe," \u2014 "),qoe=n(eVe,"A",{href:!0});var iVt=s(qoe);NYr=r(iVt,"FlaxRoFormerForTokenClassification"),iVt.forEach(t),qYr=r(eVe," (RoFormer model)"),eVe.forEach(t),jYr=i(To),ew=n(To,"LI",{});var oVe=s(ew);D0e=n(oVe,"STRONG",{});var dVt=s(D0e);DYr=r(dVt,"xlm-roberta"),dVt.forEach(t),GYr=r(oVe," \u2014 "),joe=n(oVe,"A",{href:!0});var cVt=s(joe);OYr=r(cVt,"FlaxXLMRobertaForTokenClassification"),cVt.forEach(t),VYr=r(oVe," (XLM-RoBERTa model)"),oVe.forEach(t),To.forEach(t),XYr=i(_i),T(ow.$$.fragment,_i),_i.forEach(t),pi.forEach(t),fze=i(f),uf=n(f,"H2",{class:!0});var FWe=s(uf);rw=n(FWe,"A",{id:!0,class:!0,href:!0});var fVt=s(rw);G0e=n(fVt,"SPAN",{});var mVt=s(G0e);T(q$.$$.fragment,mVt),mVt.forEach(t),fVt.forEach(t),zYr=i(FWe),O0e=n(FWe,"SPAN",{});var gVt=s(O0e);QYr=r(gVt,"FlaxAutoModelForMultipleChoice"),gVt.forEach(t),FWe.forEach(t),mze=i(f),Mr=n(f,"DIV",{class:!0});var ui=s(Mr);T(j$.$$.fragment,ui),WYr=i(ui),bf=n(ui,"P",{});var Jte=s(bf);HYr=r(Jte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Doe=n(Jte,"A",{href:!0});var hVt=s(Doe);UYr=r(hVt,"from_pretrained()"),hVt.forEach(t),JYr=r(Jte," class method or the "),Goe=n(Jte,"A",{href:!0});var pVt=s(Goe);YYr=r(pVt,"from_config()"),pVt.forEach(t),KYr=r(Jte,` class
method.`),Jte.forEach(t),ZYr=i(ui),D$=n(ui,"P",{});var TWe=s(D$);eKr=r(TWe,"This class cannot be instantiated directly using "),V0e=n(TWe,"CODE",{});var _Vt=s(V0e);oKr=r(_Vt,"__init__()"),_Vt.forEach(t),rKr=r(TWe," (throws an error)."),TWe.forEach(t),tKr=i(ui),Zt=n(ui,"DIV",{class:!0});var N6=s(Zt);T(G$.$$.fragment,N6),aKr=i(N6),X0e=n(N6,"P",{});var uVt=s(X0e);nKr=r(uVt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),uVt.forEach(t),sKr=i(N6),vf=n(N6,"P",{});var Yte=s(vf);lKr=r(Yte,`Note:
Loading a model from its configuration file does `),z0e=n(Yte,"STRONG",{});var bVt=s(z0e);iKr=r(bVt,"not"),bVt.forEach(t),dKr=r(Yte,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ooe=n(Yte,"A",{href:!0});var vVt=s(Ooe);cKr=r(vVt,"from_pretrained()"),vVt.forEach(t),fKr=r(Yte," to load the model weights."),Yte.forEach(t),mKr=i(N6),T(tw.$$.fragment,N6),N6.forEach(t),gKr=i(ui),Jr=n(ui,"DIV",{class:!0});var bi=s(Jr);T(O$.$$.fragment,bi),hKr=i(bi),Q0e=n(bi,"P",{});var FVt=s(Q0e);pKr=r(FVt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),FVt.forEach(t),_Kr=i(bi),yn=n(bi,"P",{});var q6=s(yn);uKr=r(q6,"The model class to instantiate is selected based on the "),W0e=n(q6,"CODE",{});var TVt=s(W0e);bKr=r(TVt,"model_type"),TVt.forEach(t),vKr=r(q6,` property of the config object (either
passed as an argument or loaded from `),H0e=n(q6,"CODE",{});var MVt=s(H0e);FKr=r(MVt,"pretrained_model_name_or_path"),MVt.forEach(t),TKr=r(q6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U0e=n(q6,"CODE",{});var EVt=s(U0e);MKr=r(EVt,"pretrained_model_name_or_path"),EVt.forEach(t),EKr=r(q6,":"),q6.forEach(t),CKr=i(bi),Xe=n(bi,"UL",{});var Mo=s(Xe);aw=n(Mo,"LI",{});var rVe=s(aw);J0e=n(rVe,"STRONG",{});var CVt=s(J0e);wKr=r(CVt,"albert"),CVt.forEach(t),AKr=r(rVe," \u2014 "),Voe=n(rVe,"A",{href:!0});var wVt=s(Voe);LKr=r(wVt,"FlaxAlbertForMultipleChoice"),wVt.forEach(t),yKr=r(rVe," (ALBERT model)"),rVe.forEach(t),xKr=i(Mo),nw=n(Mo,"LI",{});var tVe=s(nw);Y0e=n(tVe,"STRONG",{});var AVt=s(Y0e);$Kr=r(AVt,"bert"),AVt.forEach(t),kKr=r(tVe," \u2014 "),Xoe=n(tVe,"A",{href:!0});var LVt=s(Xoe);SKr=r(LVt,"FlaxBertForMultipleChoice"),LVt.forEach(t),RKr=r(tVe," (BERT model)"),tVe.forEach(t),PKr=i(Mo),sw=n(Mo,"LI",{});var aVe=s(sw);K0e=n(aVe,"STRONG",{});var yVt=s(K0e);BKr=r(yVt,"big_bird"),yVt.forEach(t),IKr=r(aVe," \u2014 "),zoe=n(aVe,"A",{href:!0});var xVt=s(zoe);NKr=r(xVt,"FlaxBigBirdForMultipleChoice"),xVt.forEach(t),qKr=r(aVe," (BigBird model)"),aVe.forEach(t),jKr=i(Mo),lw=n(Mo,"LI",{});var nVe=s(lw);Z0e=n(nVe,"STRONG",{});var $Vt=s(Z0e);DKr=r($Vt,"distilbert"),$Vt.forEach(t),GKr=r(nVe," \u2014 "),Qoe=n(nVe,"A",{href:!0});var kVt=s(Qoe);OKr=r(kVt,"FlaxDistilBertForMultipleChoice"),kVt.forEach(t),VKr=r(nVe," (DistilBERT model)"),nVe.forEach(t),XKr=i(Mo),iw=n(Mo,"LI",{});var sVe=s(iw);ewe=n(sVe,"STRONG",{});var SVt=s(ewe);zKr=r(SVt,"electra"),SVt.forEach(t),QKr=r(sVe," \u2014 "),Woe=n(sVe,"A",{href:!0});var RVt=s(Woe);WKr=r(RVt,"FlaxElectraForMultipleChoice"),RVt.forEach(t),HKr=r(sVe," (ELECTRA model)"),sVe.forEach(t),UKr=i(Mo),dw=n(Mo,"LI",{});var lVe=s(dw);owe=n(lVe,"STRONG",{});var PVt=s(owe);JKr=r(PVt,"roberta"),PVt.forEach(t),YKr=r(lVe," \u2014 "),Hoe=n(lVe,"A",{href:!0});var BVt=s(Hoe);KKr=r(BVt,"FlaxRobertaForMultipleChoice"),BVt.forEach(t),ZKr=r(lVe," (RoBERTa model)"),lVe.forEach(t),eZr=i(Mo),cw=n(Mo,"LI",{});var iVe=s(cw);rwe=n(iVe,"STRONG",{});var IVt=s(rwe);oZr=r(IVt,"roformer"),IVt.forEach(t),rZr=r(iVe," \u2014 "),Uoe=n(iVe,"A",{href:!0});var NVt=s(Uoe);tZr=r(NVt,"FlaxRoFormerForMultipleChoice"),NVt.forEach(t),aZr=r(iVe," (RoFormer model)"),iVe.forEach(t),nZr=i(Mo),fw=n(Mo,"LI",{});var dVe=s(fw);twe=n(dVe,"STRONG",{});var qVt=s(twe);sZr=r(qVt,"xlm-roberta"),qVt.forEach(t),lZr=r(dVe," \u2014 "),Joe=n(dVe,"A",{href:!0});var jVt=s(Joe);iZr=r(jVt,"FlaxXLMRobertaForMultipleChoice"),jVt.forEach(t),dZr=r(dVe," (XLM-RoBERTa model)"),dVe.forEach(t),Mo.forEach(t),cZr=i(bi),T(mw.$$.fragment,bi),bi.forEach(t),ui.forEach(t),gze=i(f),Ff=n(f,"H2",{class:!0});var MWe=s(Ff);gw=n(MWe,"A",{id:!0,class:!0,href:!0});var DVt=s(gw);awe=n(DVt,"SPAN",{});var GVt=s(awe);T(V$.$$.fragment,GVt),GVt.forEach(t),DVt.forEach(t),fZr=i(MWe),nwe=n(MWe,"SPAN",{});var OVt=s(nwe);mZr=r(OVt,"FlaxAutoModelForNextSentencePrediction"),OVt.forEach(t),MWe.forEach(t),hze=i(f),Er=n(f,"DIV",{class:!0});var vi=s(Er);T(X$.$$.fragment,vi),gZr=i(vi),Tf=n(vi,"P",{});var Kte=s(Tf);hZr=r(Kte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Yoe=n(Kte,"A",{href:!0});var VVt=s(Yoe);pZr=r(VVt,"from_pretrained()"),VVt.forEach(t),_Zr=r(Kte," class method or the "),Koe=n(Kte,"A",{href:!0});var XVt=s(Koe);uZr=r(XVt,"from_config()"),XVt.forEach(t),bZr=r(Kte,` class
method.`),Kte.forEach(t),vZr=i(vi),z$=n(vi,"P",{});var EWe=s(z$);FZr=r(EWe,"This class cannot be instantiated directly using "),swe=n(EWe,"CODE",{});var zVt=s(swe);TZr=r(zVt,"__init__()"),zVt.forEach(t),MZr=r(EWe," (throws an error)."),EWe.forEach(t),EZr=i(vi),ea=n(vi,"DIV",{class:!0});var j6=s(ea);T(Q$.$$.fragment,j6),CZr=i(j6),lwe=n(j6,"P",{});var QVt=s(lwe);wZr=r(QVt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),QVt.forEach(t),AZr=i(j6),Mf=n(j6,"P",{});var Zte=s(Mf);LZr=r(Zte,`Note:
Loading a model from its configuration file does `),iwe=n(Zte,"STRONG",{});var WVt=s(iwe);yZr=r(WVt,"not"),WVt.forEach(t),xZr=r(Zte,` load the model weights. It only affects the
model\u2019s configuration. Use `),Zoe=n(Zte,"A",{href:!0});var HVt=s(Zoe);$Zr=r(HVt,"from_pretrained()"),HVt.forEach(t),kZr=r(Zte," to load the model weights."),Zte.forEach(t),SZr=i(j6),T(hw.$$.fragment,j6),j6.forEach(t),RZr=i(vi),Yr=n(vi,"DIV",{class:!0});var Fi=s(Yr);T(W$.$$.fragment,Fi),PZr=i(Fi),dwe=n(Fi,"P",{});var UVt=s(dwe);BZr=r(UVt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),UVt.forEach(t),IZr=i(Fi),xn=n(Fi,"P",{});var D6=s(xn);NZr=r(D6,"The model class to instantiate is selected based on the "),cwe=n(D6,"CODE",{});var JVt=s(cwe);qZr=r(JVt,"model_type"),JVt.forEach(t),jZr=r(D6,` property of the config object (either
passed as an argument or loaded from `),fwe=n(D6,"CODE",{});var YVt=s(fwe);DZr=r(YVt,"pretrained_model_name_or_path"),YVt.forEach(t),GZr=r(D6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mwe=n(D6,"CODE",{});var KVt=s(mwe);OZr=r(KVt,"pretrained_model_name_or_path"),KVt.forEach(t),VZr=r(D6,":"),D6.forEach(t),XZr=i(Fi),gwe=n(Fi,"UL",{});var ZVt=s(gwe);pw=n(ZVt,"LI",{});var cVe=s(pw);hwe=n(cVe,"STRONG",{});var eXt=s(hwe);zZr=r(eXt,"bert"),eXt.forEach(t),QZr=r(cVe," \u2014 "),ere=n(cVe,"A",{href:!0});var oXt=s(ere);WZr=r(oXt,"FlaxBertForNextSentencePrediction"),oXt.forEach(t),HZr=r(cVe," (BERT model)"),cVe.forEach(t),ZVt.forEach(t),UZr=i(Fi),T(_w.$$.fragment,Fi),Fi.forEach(t),vi.forEach(t),pze=i(f),Ef=n(f,"H2",{class:!0});var CWe=s(Ef);uw=n(CWe,"A",{id:!0,class:!0,href:!0});var rXt=s(uw);pwe=n(rXt,"SPAN",{});var tXt=s(pwe);T(H$.$$.fragment,tXt),tXt.forEach(t),rXt.forEach(t),JZr=i(CWe),_we=n(CWe,"SPAN",{});var aXt=s(_we);YZr=r(aXt,"FlaxAutoModelForImageClassification"),aXt.forEach(t),CWe.forEach(t),_ze=i(f),Cr=n(f,"DIV",{class:!0});var Ti=s(Cr);T(U$.$$.fragment,Ti),KZr=i(Ti),Cf=n(Ti,"P",{});var eae=s(Cf);ZZr=r(eae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),ore=n(eae,"A",{href:!0});var nXt=s(ore);eet=r(nXt,"from_pretrained()"),nXt.forEach(t),oet=r(eae," class method or the "),rre=n(eae,"A",{href:!0});var sXt=s(rre);ret=r(sXt,"from_config()"),sXt.forEach(t),tet=r(eae,` class
method.`),eae.forEach(t),aet=i(Ti),J$=n(Ti,"P",{});var wWe=s(J$);net=r(wWe,"This class cannot be instantiated directly using "),uwe=n(wWe,"CODE",{});var lXt=s(uwe);set=r(lXt,"__init__()"),lXt.forEach(t),iet=r(wWe," (throws an error)."),wWe.forEach(t),det=i(Ti),oa=n(Ti,"DIV",{class:!0});var G6=s(oa);T(Y$.$$.fragment,G6),cet=i(G6),bwe=n(G6,"P",{});var iXt=s(bwe);fet=r(iXt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),iXt.forEach(t),met=i(G6),wf=n(G6,"P",{});var oae=s(wf);get=r(oae,`Note:
Loading a model from its configuration file does `),vwe=n(oae,"STRONG",{});var dXt=s(vwe);het=r(dXt,"not"),dXt.forEach(t),pet=r(oae,` load the model weights. It only affects the
model\u2019s configuration. Use `),tre=n(oae,"A",{href:!0});var cXt=s(tre);_et=r(cXt,"from_pretrained()"),cXt.forEach(t),uet=r(oae," to load the model weights."),oae.forEach(t),bet=i(G6),T(bw.$$.fragment,G6),G6.forEach(t),vet=i(Ti),Kr=n(Ti,"DIV",{class:!0});var Mi=s(Kr);T(K$.$$.fragment,Mi),Fet=i(Mi),Fwe=n(Mi,"P",{});var fXt=s(Fwe);Tet=r(fXt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),fXt.forEach(t),Met=i(Mi),$n=n(Mi,"P",{});var O6=s($n);Eet=r(O6,"The model class to instantiate is selected based on the "),Twe=n(O6,"CODE",{});var mXt=s(Twe);Cet=r(mXt,"model_type"),mXt.forEach(t),wet=r(O6,` property of the config object (either
passed as an argument or loaded from `),Mwe=n(O6,"CODE",{});var gXt=s(Mwe);Aet=r(gXt,"pretrained_model_name_or_path"),gXt.forEach(t),Let=r(O6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ewe=n(O6,"CODE",{});var hXt=s(Ewe);yet=r(hXt,"pretrained_model_name_or_path"),hXt.forEach(t),xet=r(O6,":"),O6.forEach(t),$et=i(Mi),Z$=n(Mi,"UL",{});var AWe=s(Z$);vw=n(AWe,"LI",{});var fVe=s(vw);Cwe=n(fVe,"STRONG",{});var pXt=s(Cwe);ket=r(pXt,"beit"),pXt.forEach(t),Set=r(fVe," \u2014 "),are=n(fVe,"A",{href:!0});var _Xt=s(are);Ret=r(_Xt,"FlaxBeitForImageClassification"),_Xt.forEach(t),Pet=r(fVe," (BEiT model)"),fVe.forEach(t),Bet=i(AWe),Fw=n(AWe,"LI",{});var mVe=s(Fw);wwe=n(mVe,"STRONG",{});var uXt=s(wwe);Iet=r(uXt,"vit"),uXt.forEach(t),Net=r(mVe," \u2014 "),nre=n(mVe,"A",{href:!0});var bXt=s(nre);qet=r(bXt,"FlaxViTForImageClassification"),bXt.forEach(t),jet=r(mVe," (ViT model)"),mVe.forEach(t),AWe.forEach(t),Det=i(Mi),T(Tw.$$.fragment,Mi),Mi.forEach(t),Ti.forEach(t),uze=i(f),Af=n(f,"H2",{class:!0});var LWe=s(Af);Mw=n(LWe,"A",{id:!0,class:!0,href:!0});var vXt=s(Mw);Awe=n(vXt,"SPAN",{});var FXt=s(Awe);T(ek.$$.fragment,FXt),FXt.forEach(t),vXt.forEach(t),Get=i(LWe),Lwe=n(LWe,"SPAN",{});var TXt=s(Lwe);Oet=r(TXt,"FlaxAutoModelForVision2Seq"),TXt.forEach(t),LWe.forEach(t),bze=i(f),wr=n(f,"DIV",{class:!0});var Ei=s(wr);T(ok.$$.fragment,Ei),Vet=i(Ei),Lf=n(Ei,"P",{});var rae=s(Lf);Xet=r(rae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),sre=n(rae,"A",{href:!0});var MXt=s(sre);zet=r(MXt,"from_pretrained()"),MXt.forEach(t),Qet=r(rae," class method or the "),lre=n(rae,"A",{href:!0});var EXt=s(lre);Wet=r(EXt,"from_config()"),EXt.forEach(t),Het=r(rae,` class
method.`),rae.forEach(t),Uet=i(Ei),rk=n(Ei,"P",{});var yWe=s(rk);Jet=r(yWe,"This class cannot be instantiated directly using "),ywe=n(yWe,"CODE",{});var CXt=s(ywe);Yet=r(CXt,"__init__()"),CXt.forEach(t),Ket=r(yWe," (throws an error)."),yWe.forEach(t),Zet=i(Ei),ra=n(Ei,"DIV",{class:!0});var V6=s(ra);T(tk.$$.fragment,V6),eot=i(V6),xwe=n(V6,"P",{});var wXt=s(xwe);oot=r(wXt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),wXt.forEach(t),rot=i(V6),yf=n(V6,"P",{});var tae=s(yf);tot=r(tae,`Note:
Loading a model from its configuration file does `),$we=n(tae,"STRONG",{});var AXt=s($we);aot=r(AXt,"not"),AXt.forEach(t),not=r(tae,` load the model weights. It only affects the
model\u2019s configuration. Use `),ire=n(tae,"A",{href:!0});var LXt=s(ire);sot=r(LXt,"from_pretrained()"),LXt.forEach(t),lot=r(tae," to load the model weights."),tae.forEach(t),iot=i(V6),T(Ew.$$.fragment,V6),V6.forEach(t),dot=i(Ei),Zr=n(Ei,"DIV",{class:!0});var Ci=s(Zr);T(ak.$$.fragment,Ci),cot=i(Ci),kwe=n(Ci,"P",{});var yXt=s(kwe);fot=r(yXt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),yXt.forEach(t),mot=i(Ci),kn=n(Ci,"P",{});var X6=s(kn);got=r(X6,"The model class to instantiate is selected based on the "),Swe=n(X6,"CODE",{});var xXt=s(Swe);hot=r(xXt,"model_type"),xXt.forEach(t),pot=r(X6,` property of the config object (either
passed as an argument or loaded from `),Rwe=n(X6,"CODE",{});var $Xt=s(Rwe);_ot=r($Xt,"pretrained_model_name_or_path"),$Xt.forEach(t),uot=r(X6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pwe=n(X6,"CODE",{});var kXt=s(Pwe);bot=r(kXt,"pretrained_model_name_or_path"),kXt.forEach(t),vot=r(X6,":"),X6.forEach(t),Fot=i(Ci),Bwe=n(Ci,"UL",{});var SXt=s(Bwe);Cw=n(SXt,"LI",{});var gVe=s(Cw);Iwe=n(gVe,"STRONG",{});var RXt=s(Iwe);Tot=r(RXt,"vision-encoder-decoder"),RXt.forEach(t),Mot=r(gVe," \u2014 "),dre=n(gVe,"A",{href:!0});var PXt=s(dre);Eot=r(PXt,"FlaxVisionEncoderDecoderModel"),PXt.forEach(t),Cot=r(gVe," (Vision Encoder decoder model)"),gVe.forEach(t),SXt.forEach(t),wot=i(Ci),T(ww.$$.fragment,Ci),Ci.forEach(t),Ei.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(DQt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(Rn,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.AutoConfig"),c(Bn,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.AutoModel"),c(In,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.AutoTokenizer"),c(ki,"href","/docs/transformers/pr_17953/en/model_doc/bert#transformers.BertModel"),c(If,"id","extending-the-auto-classes"),c(If,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(If,"href","#extending-the-auto-classes"),c(Si,"class","relative group"),c(qf,"id","transformers.AutoConfig"),c(qf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qf,"href","#transformers.AutoConfig"),c(Ri,"class","relative group"),c(kS,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(SS,"href","/docs/transformers/pr_17953/en/model_doc/albert#transformers.AlbertConfig"),c(RS,"href","/docs/transformers/pr_17953/en/model_doc/bart#transformers.BartConfig"),c(PS,"href","/docs/transformers/pr_17953/en/model_doc/beit#transformers.BeitConfig"),c(BS,"href","/docs/transformers/pr_17953/en/model_doc/bert#transformers.BertConfig"),c(IS,"href","/docs/transformers/pr_17953/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(NS,"href","/docs/transformers/pr_17953/en/model_doc/big_bird#transformers.BigBirdConfig"),c(qS,"href","/docs/transformers/pr_17953/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(jS,"href","/docs/transformers/pr_17953/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(DS,"href","/docs/transformers/pr_17953/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(GS,"href","/docs/transformers/pr_17953/en/model_doc/bloom#transformers.BloomConfig"),c(OS,"href","/docs/transformers/pr_17953/en/model_doc/camembert#transformers.CamembertConfig"),c(VS,"href","/docs/transformers/pr_17953/en/model_doc/canine#transformers.CanineConfig"),c(XS,"href","/docs/transformers/pr_17953/en/model_doc/clip#transformers.CLIPConfig"),c(zS,"href","/docs/transformers/pr_17953/en/model_doc/codegen#transformers.CodeGenConfig"),c(QS,"href","/docs/transformers/pr_17953/en/model_doc/convbert#transformers.ConvBertConfig"),c(WS,"href","/docs/transformers/pr_17953/en/model_doc/convnext#transformers.ConvNextConfig"),c(HS,"href","/docs/transformers/pr_17953/en/model_doc/ctrl#transformers.CTRLConfig"),c(US,"href","/docs/transformers/pr_17953/en/model_doc/cvt#transformers.CvtConfig"),c(JS,"href","/docs/transformers/pr_17953/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(YS,"href","/docs/transformers/pr_17953/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(KS,"href","/docs/transformers/pr_17953/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(ZS,"href","/docs/transformers/pr_17953/en/model_doc/deberta#transformers.DebertaConfig"),c(eR,"href","/docs/transformers/pr_17953/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(oR,"href","/docs/transformers/pr_17953/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(rR,"href","/docs/transformers/pr_17953/en/model_doc/deit#transformers.DeiTConfig"),c(tR,"href","/docs/transformers/pr_17953/en/model_doc/detr#transformers.DetrConfig"),c(aR,"href","/docs/transformers/pr_17953/en/model_doc/distilbert#transformers.DistilBertConfig"),c(nR,"href","/docs/transformers/pr_17953/en/model_doc/dpr#transformers.DPRConfig"),c(sR,"href","/docs/transformers/pr_17953/en/model_doc/dpt#transformers.DPTConfig"),c(lR,"href","/docs/transformers/pr_17953/en/model_doc/electra#transformers.ElectraConfig"),c(iR,"href","/docs/transformers/pr_17953/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(dR,"href","/docs/transformers/pr_17953/en/model_doc/flaubert#transformers.FlaubertConfig"),c(cR,"href","/docs/transformers/pr_17953/en/model_doc/flava#transformers.FlavaConfig"),c(fR,"href","/docs/transformers/pr_17953/en/model_doc/fnet#transformers.FNetConfig"),c(mR,"href","/docs/transformers/pr_17953/en/model_doc/fsmt#transformers.FSMTConfig"),c(gR,"href","/docs/transformers/pr_17953/en/model_doc/funnel#transformers.FunnelConfig"),c(hR,"href","/docs/transformers/pr_17953/en/model_doc/glpn#transformers.GLPNConfig"),c(pR,"href","/docs/transformers/pr_17953/en/model_doc/gpt2#transformers.GPT2Config"),c(_R,"href","/docs/transformers/pr_17953/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(uR,"href","/docs/transformers/pr_17953/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(bR,"href","/docs/transformers/pr_17953/en/model_doc/gptj#transformers.GPTJConfig"),c(vR,"href","/docs/transformers/pr_17953/en/model_doc/groupvit#transformers.GroupViTConfig"),c(FR,"href","/docs/transformers/pr_17953/en/model_doc/hubert#transformers.HubertConfig"),c(TR,"href","/docs/transformers/pr_17953/en/model_doc/ibert#transformers.IBertConfig"),c(MR,"href","/docs/transformers/pr_17953/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(ER,"href","/docs/transformers/pr_17953/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(CR,"href","/docs/transformers/pr_17953/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(wR,"href","/docs/transformers/pr_17953/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(AR,"href","/docs/transformers/pr_17953/en/model_doc/led#transformers.LEDConfig"),c(LR,"href","/docs/transformers/pr_17953/en/model_doc/levit#transformers.LevitConfig"),c(yR,"href","/docs/transformers/pr_17953/en/model_doc/longformer#transformers.LongformerConfig"),c(xR,"href","/docs/transformers/pr_17953/en/model_doc/longt5#transformers.LongT5Config"),c($R,"href","/docs/transformers/pr_17953/en/model_doc/luke#transformers.LukeConfig"),c(kR,"href","/docs/transformers/pr_17953/en/model_doc/lxmert#transformers.LxmertConfig"),c(SR,"href","/docs/transformers/pr_17953/en/model_doc/m2m_100#transformers.M2M100Config"),c(RR,"href","/docs/transformers/pr_17953/en/model_doc/marian#transformers.MarianConfig"),c(PR,"href","/docs/transformers/pr_17953/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(BR,"href","/docs/transformers/pr_17953/en/model_doc/mbart#transformers.MBartConfig"),c(IR,"href","/docs/transformers/pr_17953/en/model_doc/mctct#transformers.MCTCTConfig"),c(NR,"href","/docs/transformers/pr_17953/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(qR,"href","/docs/transformers/pr_17953/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(jR,"href","/docs/transformers/pr_17953/en/model_doc/mpnet#transformers.MPNetConfig"),c(DR,"href","/docs/transformers/pr_17953/en/model_doc/mt5#transformers.MT5Config"),c(GR,"href","/docs/transformers/pr_17953/en/model_doc/mvp#transformers.MvpConfig"),c(OR,"href","/docs/transformers/pr_17953/en/model_doc/nezha#transformers.NezhaConfig"),c(VR,"href","/docs/transformers/pr_17953/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(XR,"href","/docs/transformers/pr_17953/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(zR,"href","/docs/transformers/pr_17953/en/model_doc/opt#transformers.OPTConfig"),c(QR,"href","/docs/transformers/pr_17953/en/model_doc/pegasus#transformers.PegasusConfig"),c(WR,"href","/docs/transformers/pr_17953/en/model_doc/perceiver#transformers.PerceiverConfig"),c(HR,"href","/docs/transformers/pr_17953/en/model_doc/plbart#transformers.PLBartConfig"),c(UR,"href","/docs/transformers/pr_17953/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(JR,"href","/docs/transformers/pr_17953/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(YR,"href","/docs/transformers/pr_17953/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(KR,"href","/docs/transformers/pr_17953/en/model_doc/rag#transformers.RagConfig"),c(ZR,"href","/docs/transformers/pr_17953/en/model_doc/realm#transformers.RealmConfig"),c(eP,"href","/docs/transformers/pr_17953/en/model_doc/reformer#transformers.ReformerConfig"),c(oP,"href","/docs/transformers/pr_17953/en/model_doc/regnet#transformers.RegNetConfig"),c(rP,"href","/docs/transformers/pr_17953/en/model_doc/rembert#transformers.RemBertConfig"),c(tP,"href","/docs/transformers/pr_17953/en/model_doc/resnet#transformers.ResNetConfig"),c(aP,"href","/docs/transformers/pr_17953/en/model_doc/retribert#transformers.RetriBertConfig"),c(nP,"href","/docs/transformers/pr_17953/en/model_doc/roberta#transformers.RobertaConfig"),c(sP,"href","/docs/transformers/pr_17953/en/model_doc/roformer#transformers.RoFormerConfig"),c(lP,"href","/docs/transformers/pr_17953/en/model_doc/segformer#transformers.SegformerConfig"),c(iP,"href","/docs/transformers/pr_17953/en/model_doc/sew#transformers.SEWConfig"),c(dP,"href","/docs/transformers/pr_17953/en/model_doc/sew-d#transformers.SEWDConfig"),c(cP,"href","/docs/transformers/pr_17953/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(fP,"href","/docs/transformers/pr_17953/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(mP,"href","/docs/transformers/pr_17953/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(gP,"href","/docs/transformers/pr_17953/en/model_doc/splinter#transformers.SplinterConfig"),c(hP,"href","/docs/transformers/pr_17953/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(pP,"href","/docs/transformers/pr_17953/en/model_doc/swin#transformers.SwinConfig"),c(_P,"href","/docs/transformers/pr_17953/en/model_doc/t5#transformers.T5Config"),c(uP,"href","/docs/transformers/pr_17953/en/model_doc/tapas#transformers.TapasConfig"),c(bP,"href","/docs/transformers/pr_17953/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(vP,"href","/docs/transformers/pr_17953/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(FP,"href","/docs/transformers/pr_17953/en/model_doc/trocr#transformers.TrOCRConfig"),c(TP,"href","/docs/transformers/pr_17953/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(MP,"href","/docs/transformers/pr_17953/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(EP,"href","/docs/transformers/pr_17953/en/model_doc/van#transformers.VanConfig"),c(CP,"href","/docs/transformers/pr_17953/en/model_doc/vilt#transformers.ViltConfig"),c(wP,"href","/docs/transformers/pr_17953/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(AP,"href","/docs/transformers/pr_17953/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(LP,"href","/docs/transformers/pr_17953/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(yP,"href","/docs/transformers/pr_17953/en/model_doc/vit#transformers.ViTConfig"),c(xP,"href","/docs/transformers/pr_17953/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c($P,"href","/docs/transformers/pr_17953/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(kP,"href","/docs/transformers/pr_17953/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(SP,"href","/docs/transformers/pr_17953/en/model_doc/wavlm#transformers.WavLMConfig"),c(RP,"href","/docs/transformers/pr_17953/en/model_doc/xglm#transformers.XGLMConfig"),c(PP,"href","/docs/transformers/pr_17953/en/model_doc/xlm#transformers.XLMConfig"),c(BP,"href","/docs/transformers/pr_17953/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(IP,"href","/docs/transformers/pr_17953/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(NP,"href","/docs/transformers/pr_17953/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(qP,"href","/docs/transformers/pr_17953/en/model_doc/xlnet#transformers.XLNetConfig"),c(jP,"href","/docs/transformers/pr_17953/en/model_doc/yolos#transformers.YolosConfig"),c(DP,"href","/docs/transformers/pr_17953/en/model_doc/yoso#transformers.YosoConfig"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ug,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jg,"id","transformers.AutoTokenizer"),c(Jg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Jg,"href","#transformers.AutoTokenizer"),c(Bi,"class","relative group"),c(GP,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(OP,"href","/docs/transformers/pr_17953/en/model_doc/albert#transformers.AlbertTokenizer"),c(VP,"href","/docs/transformers/pr_17953/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(XP,"href","/docs/transformers/pr_17953/en/model_doc/bart#transformers.BartTokenizer"),c(zP,"href","/docs/transformers/pr_17953/en/model_doc/bart#transformers.BartTokenizerFast"),c(QP,"href","/docs/transformers/pr_17953/en/model_doc/barthez#transformers.BarthezTokenizer"),c(WP,"href","/docs/transformers/pr_17953/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(HP,"href","/docs/transformers/pr_17953/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(UP,"href","/docs/transformers/pr_17953/en/model_doc/bert#transformers.BertTokenizer"),c(JP,"href","/docs/transformers/pr_17953/en/model_doc/bert#transformers.BertTokenizerFast"),c(YP,"href","/docs/transformers/pr_17953/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(KP,"href","/docs/transformers/pr_17953/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(ZP,"href","/docs/transformers/pr_17953/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(eB,"href","/docs/transformers/pr_17953/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(oB,"href","/docs/transformers/pr_17953/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(rB,"href","/docs/transformers/pr_17953/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(tB,"href","/docs/transformers/pr_17953/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(aB,"href","/docs/transformers/pr_17953/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(nB,"href","/docs/transformers/pr_17953/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(sB,"href","/docs/transformers/pr_17953/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(lB,"href","/docs/transformers/pr_17953/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(iB,"href","/docs/transformers/pr_17953/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(dB,"href","/docs/transformers/pr_17953/en/model_doc/camembert#transformers.CamembertTokenizer"),c(cB,"href","/docs/transformers/pr_17953/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(fB,"href","/docs/transformers/pr_17953/en/model_doc/canine#transformers.CanineTokenizer"),c(mB,"href","/docs/transformers/pr_17953/en/model_doc/clip#transformers.CLIPTokenizer"),c(gB,"href","/docs/transformers/pr_17953/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(hB,"href","/docs/transformers/pr_17953/en/model_doc/codegen#transformers.CodeGenTokenizer"),c(pB,"href","/docs/transformers/pr_17953/en/model_doc/codegen#transformers.CodeGenTokenizerFast"),c(_B,"href","/docs/transformers/pr_17953/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(uB,"href","/docs/transformers/pr_17953/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(bB,"href","/docs/transformers/pr_17953/en/model_doc/cpm#transformers.CpmTokenizer"),c(vB,"href","/docs/transformers/pr_17953/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(FB,"href","/docs/transformers/pr_17953/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(TB,"href","/docs/transformers/pr_17953/en/model_doc/roberta#transformers.RobertaTokenizer"),c(MB,"href","/docs/transformers/pr_17953/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(EB,"href","/docs/transformers/pr_17953/en/model_doc/deberta#transformers.DebertaTokenizer"),c(CB,"href","/docs/transformers/pr_17953/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(wB,"href","/docs/transformers/pr_17953/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(AB,"href","/docs/transformers/pr_17953/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(LB,"href","/docs/transformers/pr_17953/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(yB,"href","/docs/transformers/pr_17953/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(xB,"href","/docs/transformers/pr_17953/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c($B,"href","/docs/transformers/pr_17953/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(kB,"href","/docs/transformers/pr_17953/en/model_doc/electra#transformers.ElectraTokenizer"),c(SB,"href","/docs/transformers/pr_17953/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(RB,"href","/docs/transformers/pr_17953/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(PB,"href","/docs/transformers/pr_17953/en/model_doc/fnet#transformers.FNetTokenizer"),c(BB,"href","/docs/transformers/pr_17953/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(IB,"href","/docs/transformers/pr_17953/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(NB,"href","/docs/transformers/pr_17953/en/model_doc/funnel#transformers.FunnelTokenizer"),c(qB,"href","/docs/transformers/pr_17953/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(jB,"href","/docs/transformers/pr_17953/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(DB,"href","/docs/transformers/pr_17953/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(GB,"href","/docs/transformers/pr_17953/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(OB,"href","/docs/transformers/pr_17953/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(VB,"href","/docs/transformers/pr_17953/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(XB,"href","/docs/transformers/pr_17953/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(zB,"href","/docs/transformers/pr_17953/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(QB,"href","/docs/transformers/pr_17953/en/model_doc/clip#transformers.CLIPTokenizer"),c(WB,"href","/docs/transformers/pr_17953/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(HB,"href","/docs/transformers/pr_17953/en/model_doc/herbert#transformers.HerbertTokenizer"),c(UB,"href","/docs/transformers/pr_17953/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(JB,"href","/docs/transformers/pr_17953/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(YB,"href","/docs/transformers/pr_17953/en/model_doc/roberta#transformers.RobertaTokenizer"),c(KB,"href","/docs/transformers/pr_17953/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(ZB,"href","/docs/transformers/pr_17953/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(eI,"href","/docs/transformers/pr_17953/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(oI,"href","/docs/transformers/pr_17953/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(rI,"href","/docs/transformers/pr_17953/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(tI,"href","/docs/transformers/pr_17953/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(aI,"href","/docs/transformers/pr_17953/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(nI,"href","/docs/transformers/pr_17953/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(sI,"href","/docs/transformers/pr_17953/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(lI,"href","/docs/transformers/pr_17953/en/model_doc/led#transformers.LEDTokenizer"),c(iI,"href","/docs/transformers/pr_17953/en/model_doc/led#transformers.LEDTokenizerFast"),c(dI,"href","/docs/transformers/pr_17953/en/model_doc/longformer#transformers.LongformerTokenizer"),c(cI,"href","/docs/transformers/pr_17953/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(fI,"href","/docs/transformers/pr_17953/en/model_doc/t5#transformers.T5Tokenizer"),c(mI,"href","/docs/transformers/pr_17953/en/model_doc/t5#transformers.T5TokenizerFast"),c(gI,"href","/docs/transformers/pr_17953/en/model_doc/luke#transformers.LukeTokenizer"),c(hI,"href","/docs/transformers/pr_17953/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(pI,"href","/docs/transformers/pr_17953/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(_I,"href","/docs/transformers/pr_17953/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(uI,"href","/docs/transformers/pr_17953/en/model_doc/marian#transformers.MarianTokenizer"),c(bI,"href","/docs/transformers/pr_17953/en/model_doc/mbart#transformers.MBartTokenizer"),c(vI,"href","/docs/transformers/pr_17953/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(FI,"href","/docs/transformers/pr_17953/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(TI,"href","/docs/transformers/pr_17953/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(MI,"href","/docs/transformers/pr_17953/en/model_doc/bert#transformers.BertTokenizer"),c(EI,"href","/docs/transformers/pr_17953/en/model_doc/bert#transformers.BertTokenizerFast"),c(CI,"href","/docs/transformers/pr_17953/en/model_doc/mluke#transformers.MLukeTokenizer"),c(wI,"href","/docs/transformers/pr_17953/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(AI,"href","/docs/transformers/pr_17953/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(LI,"href","/docs/transformers/pr_17953/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(yI,"href","/docs/transformers/pr_17953/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(xI,"href","/docs/transformers/pr_17953/en/model_doc/t5#transformers.T5Tokenizer"),c($I,"href","/docs/transformers/pr_17953/en/model_doc/t5#transformers.T5TokenizerFast"),c(kI,"href","/docs/transformers/pr_17953/en/model_doc/mvp#transformers.MvpTokenizer"),c(SI,"href","/docs/transformers/pr_17953/en/model_doc/mvp#transformers.MvpTokenizerFast"),c(RI,"href","/docs/transformers/pr_17953/en/model_doc/bert#transformers.BertTokenizer"),c(PI,"href","/docs/transformers/pr_17953/en/model_doc/bert#transformers.BertTokenizerFast"),c(BI,"href","/docs/transformers/pr_17953/en/model_doc/albert#transformers.AlbertTokenizer"),c(II,"href","/docs/transformers/pr_17953/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(NI,"href","/docs/transformers/pr_17953/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(qI,"href","/docs/transformers/pr_17953/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(jI,"href","/docs/transformers/pr_17953/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(DI,"href","/docs/transformers/pr_17953/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(GI,"href","/docs/transformers/pr_17953/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(OI,"href","/docs/transformers/pr_17953/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(VI,"href","/docs/transformers/pr_17953/en/model_doc/phobert#transformers.PhobertTokenizer"),c(XI,"href","/docs/transformers/pr_17953/en/model_doc/plbart#transformers.PLBartTokenizer"),c(zI,"href","/docs/transformers/pr_17953/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(QI,"href","/docs/transformers/pr_17953/en/model_doc/bert#transformers.BertTokenizer"),c(WI,"href","/docs/transformers/pr_17953/en/model_doc/bert#transformers.BertTokenizerFast"),c(HI,"href","/docs/transformers/pr_17953/en/model_doc/rag#transformers.RagTokenizer"),c(UI,"href","/docs/transformers/pr_17953/en/model_doc/realm#transformers.RealmTokenizer"),c(JI,"href","/docs/transformers/pr_17953/en/model_doc/realm#transformers.RealmTokenizerFast"),c(YI,"href","/docs/transformers/pr_17953/en/model_doc/reformer#transformers.ReformerTokenizer"),c(KI,"href","/docs/transformers/pr_17953/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(ZI,"href","/docs/transformers/pr_17953/en/model_doc/rembert#transformers.RemBertTokenizer"),c(eN,"href","/docs/transformers/pr_17953/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(oN,"href","/docs/transformers/pr_17953/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(rN,"href","/docs/transformers/pr_17953/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(tN,"href","/docs/transformers/pr_17953/en/model_doc/roberta#transformers.RobertaTokenizer"),c(aN,"href","/docs/transformers/pr_17953/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(nN,"href","/docs/transformers/pr_17953/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(sN,"href","/docs/transformers/pr_17953/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(lN,"href","/docs/transformers/pr_17953/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(iN,"href","/docs/transformers/pr_17953/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(dN,"href","/docs/transformers/pr_17953/en/model_doc/splinter#transformers.SplinterTokenizer"),c(cN,"href","/docs/transformers/pr_17953/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(fN,"href","/docs/transformers/pr_17953/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(mN,"href","/docs/transformers/pr_17953/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(gN,"href","/docs/transformers/pr_17953/en/model_doc/t5#transformers.T5Tokenizer"),c(hN,"href","/docs/transformers/pr_17953/en/model_doc/t5#transformers.T5TokenizerFast"),c(pN,"href","/docs/transformers/pr_17953/en/model_doc/tapas#transformers.TapasTokenizer"),c(_N,"href","/docs/transformers/pr_17953/en/model_doc/tapex#transformers.TapexTokenizer"),c(uN,"href","/docs/transformers/pr_17953/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(bN,"href","/docs/transformers/pr_17953/en/model_doc/bert#transformers.BertTokenizer"),c(vN,"href","/docs/transformers/pr_17953/en/model_doc/bert#transformers.BertTokenizerFast"),c(FN,"href","/docs/transformers/pr_17953/en/model_doc/bert#transformers.BertTokenizer"),c(TN,"href","/docs/transformers/pr_17953/en/model_doc/bert#transformers.BertTokenizerFast"),c(MN,"href","/docs/transformers/pr_17953/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(EN,"href","/docs/transformers/pr_17953/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(CN,"href","/docs/transformers/pr_17953/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(wN,"href","/docs/transformers/pr_17953/en/model_doc/xglm#transformers.XGLMTokenizer"),c(AN,"href","/docs/transformers/pr_17953/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(LN,"href","/docs/transformers/pr_17953/en/model_doc/xlm#transformers.XLMTokenizer"),c(yN,"href","/docs/transformers/pr_17953/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(xN,"href","/docs/transformers/pr_17953/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c($N,"href","/docs/transformers/pr_17953/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(kN,"href","/docs/transformers/pr_17953/en/model_doc/roberta#transformers.RobertaTokenizer"),c(SN,"href","/docs/transformers/pr_17953/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(RN,"href","/docs/transformers/pr_17953/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(PN,"href","/docs/transformers/pr_17953/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(BN,"href","/docs/transformers/pr_17953/en/model_doc/albert#transformers.AlbertTokenizer"),c(IN,"href","/docs/transformers/pr_17953/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Sh,"id","transformers.AutoFeatureExtractor"),c(Sh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Sh,"href","#transformers.AutoFeatureExtractor"),c(Ii,"class","relative group"),c(NN,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(qN,"href","/docs/transformers/pr_17953/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(jN,"href","/docs/transformers/pr_17953/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(DN,"href","/docs/transformers/pr_17953/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(GN,"href","/docs/transformers/pr_17953/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(ON,"href","/docs/transformers/pr_17953/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(VN,"href","/docs/transformers/pr_17953/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(XN,"href","/docs/transformers/pr_17953/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(zN,"href","/docs/transformers/pr_17953/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(QN,"href","/docs/transformers/pr_17953/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(WN,"href","/docs/transformers/pr_17953/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(HN,"href","/docs/transformers/pr_17953/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(UN,"href","/docs/transformers/pr_17953/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(JN,"href","/docs/transformers/pr_17953/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(YN,"href","/docs/transformers/pr_17953/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(KN,"href","/docs/transformers/pr_17953/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(ZN,"href","/docs/transformers/pr_17953/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(eq,"href","/docs/transformers/pr_17953/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(oq,"href","/docs/transformers/pr_17953/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(rq,"href","/docs/transformers/pr_17953/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(tq,"href","/docs/transformers/pr_17953/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(aq,"href","/docs/transformers/pr_17953/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(nq,"href","/docs/transformers/pr_17953/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(sq,"href","/docs/transformers/pr_17953/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(lq,"href","/docs/transformers/pr_17953/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(iq,"href","/docs/transformers/pr_17953/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(dq,"href","/docs/transformers/pr_17953/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(cq,"href","/docs/transformers/pr_17953/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(fq,"href","/docs/transformers/pr_17953/en/model_doc/vilt#transformers.ViltFeatureExtractor"),c(mq,"href","/docs/transformers/pr_17953/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(gq,"href","/docs/transformers/pr_17953/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(hq,"href","/docs/transformers/pr_17953/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(pq,"href","/docs/transformers/pr_17953/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(_q,"href","/docs/transformers/pr_17953/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pp,"id","transformers.AutoProcessor"),c(pp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pp,"href","#transformers.AutoProcessor"),c(Ni,"class","relative group"),c(uq,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(bq,"href","/docs/transformers/pr_17953/en/model_doc/clip#transformers.CLIPProcessor"),c(vq,"href","/docs/transformers/pr_17953/en/model_doc/clip#transformers.CLIPProcessor"),c(Fq,"href","/docs/transformers/pr_17953/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(Tq,"href","/docs/transformers/pr_17953/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(Mq,"href","/docs/transformers/pr_17953/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(Eq,"href","/docs/transformers/pr_17953/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Cq,"href","/docs/transformers/pr_17953/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(wq,"href","/docs/transformers/pr_17953/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(Aq,"href","/docs/transformers/pr_17953/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(Lq,"href","/docs/transformers/pr_17953/en/model_doc/trocr#transformers.TrOCRProcessor"),c(yq,"href","/docs/transformers/pr_17953/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(xq,"href","/docs/transformers/pr_17953/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c($q,"href","/docs/transformers/pr_17953/en/model_doc/vilt#transformers.ViltProcessor"),c(kq,"href","/docs/transformers/pr_17953/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(Sq,"href","/docs/transformers/pr_17953/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Rq,"href","/docs/transformers/pr_17953/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Pq,"href","/docs/transformers/pr_17953/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ip,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Np,"id","transformers.AutoModel"),c(Np,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Np,"href","#transformers.AutoModel"),c(ji,"class","relative group"),c(Bq,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Iq,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Nq,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qq,"href","/docs/transformers/pr_17953/en/model_doc/albert#transformers.AlbertModel"),c(jq,"href","/docs/transformers/pr_17953/en/model_doc/bart#transformers.BartModel"),c(Dq,"href","/docs/transformers/pr_17953/en/model_doc/beit#transformers.BeitModel"),c(Gq,"href","/docs/transformers/pr_17953/en/model_doc/bert#transformers.BertModel"),c(Oq,"href","/docs/transformers/pr_17953/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(Vq,"href","/docs/transformers/pr_17953/en/model_doc/big_bird#transformers.BigBirdModel"),c(Xq,"href","/docs/transformers/pr_17953/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(zq,"href","/docs/transformers/pr_17953/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(Qq,"href","/docs/transformers/pr_17953/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(Wq,"href","/docs/transformers/pr_17953/en/model_doc/bloom#transformers.BloomModel"),c(Hq,"href","/docs/transformers/pr_17953/en/model_doc/camembert#transformers.CamembertModel"),c(Uq,"href","/docs/transformers/pr_17953/en/model_doc/canine#transformers.CanineModel"),c(Jq,"href","/docs/transformers/pr_17953/en/model_doc/clip#transformers.CLIPModel"),c(Yq,"href","/docs/transformers/pr_17953/en/model_doc/codegen#transformers.CodeGenModel"),c(Kq,"href","/docs/transformers/pr_17953/en/model_doc/convbert#transformers.ConvBertModel"),c(Zq,"href","/docs/transformers/pr_17953/en/model_doc/convnext#transformers.ConvNextModel"),c(ej,"href","/docs/transformers/pr_17953/en/model_doc/ctrl#transformers.CTRLModel"),c(oj,"href","/docs/transformers/pr_17953/en/model_doc/cvt#transformers.CvtModel"),c(rj,"href","/docs/transformers/pr_17953/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(tj,"href","/docs/transformers/pr_17953/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(aj,"href","/docs/transformers/pr_17953/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(nj,"href","/docs/transformers/pr_17953/en/model_doc/deberta#transformers.DebertaModel"),c(sj,"href","/docs/transformers/pr_17953/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(lj,"href","/docs/transformers/pr_17953/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(ij,"href","/docs/transformers/pr_17953/en/model_doc/deit#transformers.DeiTModel"),c(dj,"href","/docs/transformers/pr_17953/en/model_doc/detr#transformers.DetrModel"),c(cj,"href","/docs/transformers/pr_17953/en/model_doc/distilbert#transformers.DistilBertModel"),c(fj,"href","/docs/transformers/pr_17953/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(mj,"href","/docs/transformers/pr_17953/en/model_doc/dpt#transformers.DPTModel"),c(gj,"href","/docs/transformers/pr_17953/en/model_doc/electra#transformers.ElectraModel"),c(hj,"href","/docs/transformers/pr_17953/en/model_doc/flaubert#transformers.FlaubertModel"),c(pj,"href","/docs/transformers/pr_17953/en/model_doc/flava#transformers.FlavaModel"),c(_j,"href","/docs/transformers/pr_17953/en/model_doc/fnet#transformers.FNetModel"),c(uj,"href","/docs/transformers/pr_17953/en/model_doc/fsmt#transformers.FSMTModel"),c(bj,"href","/docs/transformers/pr_17953/en/model_doc/funnel#transformers.FunnelModel"),c(vj,"href","/docs/transformers/pr_17953/en/model_doc/funnel#transformers.FunnelBaseModel"),c(Fj,"href","/docs/transformers/pr_17953/en/model_doc/glpn#transformers.GLPNModel"),c(Tj,"href","/docs/transformers/pr_17953/en/model_doc/gpt2#transformers.GPT2Model"),c(Mj,"href","/docs/transformers/pr_17953/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(Ej,"href","/docs/transformers/pr_17953/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(Cj,"href","/docs/transformers/pr_17953/en/model_doc/gptj#transformers.GPTJModel"),c(wj,"href","/docs/transformers/pr_17953/en/model_doc/groupvit#transformers.GroupViTModel"),c(Aj,"href","/docs/transformers/pr_17953/en/model_doc/hubert#transformers.HubertModel"),c(Lj,"href","/docs/transformers/pr_17953/en/model_doc/ibert#transformers.IBertModel"),c(yj,"href","/docs/transformers/pr_17953/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(xj,"href","/docs/transformers/pr_17953/en/model_doc/layoutlm#transformers.LayoutLMModel"),c($j,"href","/docs/transformers/pr_17953/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(kj,"href","/docs/transformers/pr_17953/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(Sj,"href","/docs/transformers/pr_17953/en/model_doc/led#transformers.LEDModel"),c(Rj,"href","/docs/transformers/pr_17953/en/model_doc/levit#transformers.LevitModel"),c(Pj,"href","/docs/transformers/pr_17953/en/model_doc/longformer#transformers.LongformerModel"),c(Bj,"href","/docs/transformers/pr_17953/en/model_doc/longt5#transformers.LongT5Model"),c(Ij,"href","/docs/transformers/pr_17953/en/model_doc/luke#transformers.LukeModel"),c(Nj,"href","/docs/transformers/pr_17953/en/model_doc/lxmert#transformers.LxmertModel"),c(qj,"href","/docs/transformers/pr_17953/en/model_doc/m2m_100#transformers.M2M100Model"),c(jj,"href","/docs/transformers/pr_17953/en/model_doc/marian#transformers.MarianModel"),c(Dj,"href","/docs/transformers/pr_17953/en/model_doc/maskformer#transformers.MaskFormerModel"),c(Gj,"href","/docs/transformers/pr_17953/en/model_doc/mbart#transformers.MBartModel"),c(Oj,"href","/docs/transformers/pr_17953/en/model_doc/mctct#transformers.MCTCTModel"),c(Vj,"href","/docs/transformers/pr_17953/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(Xj,"href","/docs/transformers/pr_17953/en/model_doc/mobilebert#transformers.MobileBertModel"),c(zj,"href","/docs/transformers/pr_17953/en/model_doc/mpnet#transformers.MPNetModel"),c(Qj,"href","/docs/transformers/pr_17953/en/model_doc/mt5#transformers.MT5Model"),c(Wj,"href","/docs/transformers/pr_17953/en/model_doc/mvp#transformers.MvpModel"),c(Hj,"href","/docs/transformers/pr_17953/en/model_doc/nezha#transformers.NezhaModel"),c(Uj,"href","/docs/transformers/pr_17953/en/model_doc/nystromformer#transformers.NystromformerModel"),c(Jj,"href","/docs/transformers/pr_17953/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(Yj,"href","/docs/transformers/pr_17953/en/model_doc/opt#transformers.OPTModel"),c(Kj,"href","/docs/transformers/pr_17953/en/model_doc/pegasus#transformers.PegasusModel"),c(Zj,"href","/docs/transformers/pr_17953/en/model_doc/perceiver#transformers.PerceiverModel"),c(eD,"href","/docs/transformers/pr_17953/en/model_doc/plbart#transformers.PLBartModel"),c(oD,"href","/docs/transformers/pr_17953/en/model_doc/poolformer#transformers.PoolFormerModel"),c(rD,"href","/docs/transformers/pr_17953/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(tD,"href","/docs/transformers/pr_17953/en/model_doc/qdqbert#transformers.QDQBertModel"),c(aD,"href","/docs/transformers/pr_17953/en/model_doc/reformer#transformers.ReformerModel"),c(nD,"href","/docs/transformers/pr_17953/en/model_doc/regnet#transformers.RegNetModel"),c(sD,"href","/docs/transformers/pr_17953/en/model_doc/rembert#transformers.RemBertModel"),c(lD,"href","/docs/transformers/pr_17953/en/model_doc/resnet#transformers.ResNetModel"),c(iD,"href","/docs/transformers/pr_17953/en/model_doc/retribert#transformers.RetriBertModel"),c(dD,"href","/docs/transformers/pr_17953/en/model_doc/roberta#transformers.RobertaModel"),c(cD,"href","/docs/transformers/pr_17953/en/model_doc/roformer#transformers.RoFormerModel"),c(fD,"href","/docs/transformers/pr_17953/en/model_doc/segformer#transformers.SegformerModel"),c(mD,"href","/docs/transformers/pr_17953/en/model_doc/sew#transformers.SEWModel"),c(gD,"href","/docs/transformers/pr_17953/en/model_doc/sew-d#transformers.SEWDModel"),c(hD,"href","/docs/transformers/pr_17953/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(pD,"href","/docs/transformers/pr_17953/en/model_doc/splinter#transformers.SplinterModel"),c(_D,"href","/docs/transformers/pr_17953/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(uD,"href","/docs/transformers/pr_17953/en/model_doc/swin#transformers.SwinModel"),c(bD,"href","/docs/transformers/pr_17953/en/model_doc/t5#transformers.T5Model"),c(vD,"href","/docs/transformers/pr_17953/en/model_doc/tapas#transformers.TapasModel"),c(FD,"href","/docs/transformers/pr_17953/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(TD,"href","/docs/transformers/pr_17953/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(MD,"href","/docs/transformers/pr_17953/en/model_doc/unispeech#transformers.UniSpeechModel"),c(ED,"href","/docs/transformers/pr_17953/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(CD,"href","/docs/transformers/pr_17953/en/model_doc/van#transformers.VanModel"),c(wD,"href","/docs/transformers/pr_17953/en/model_doc/vilt#transformers.ViltModel"),c(AD,"href","/docs/transformers/pr_17953/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(LD,"href","/docs/transformers/pr_17953/en/model_doc/visual_bert#transformers.VisualBertModel"),c(yD,"href","/docs/transformers/pr_17953/en/model_doc/vit#transformers.ViTModel"),c(xD,"href","/docs/transformers/pr_17953/en/model_doc/vit_mae#transformers.ViTMAEModel"),c($D,"href","/docs/transformers/pr_17953/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(kD,"href","/docs/transformers/pr_17953/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(SD,"href","/docs/transformers/pr_17953/en/model_doc/wavlm#transformers.WavLMModel"),c(RD,"href","/docs/transformers/pr_17953/en/model_doc/xglm#transformers.XGLMModel"),c(PD,"href","/docs/transformers/pr_17953/en/model_doc/xlm#transformers.XLMModel"),c(BD,"href","/docs/transformers/pr_17953/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(ID,"href","/docs/transformers/pr_17953/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(ND,"href","/docs/transformers/pr_17953/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(qD,"href","/docs/transformers/pr_17953/en/model_doc/xlnet#transformers.XLNetModel"),c(jD,"href","/docs/transformers/pr_17953/en/model_doc/yolos#transformers.YolosModel"),c(DD,"href","/docs/transformers/pr_17953/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ou,"id","transformers.AutoModelForPreTraining"),c(Ou,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ou,"href","#transformers.AutoModelForPreTraining"),c(Oi,"class","relative group"),c(GD,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OD,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VD,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XD,"href","/docs/transformers/pr_17953/en/model_doc/albert#transformers.AlbertForPreTraining"),c(zD,"href","/docs/transformers/pr_17953/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(QD,"href","/docs/transformers/pr_17953/en/model_doc/bert#transformers.BertForPreTraining"),c(WD,"href","/docs/transformers/pr_17953/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(HD,"href","/docs/transformers/pr_17953/en/model_doc/bloom#transformers.BloomForCausalLM"),c(UD,"href","/docs/transformers/pr_17953/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(JD,"href","/docs/transformers/pr_17953/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(YD,"href","/docs/transformers/pr_17953/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(KD,"href","/docs/transformers/pr_17953/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(ZD,"href","/docs/transformers/pr_17953/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(eG,"href","/docs/transformers/pr_17953/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(oG,"href","/docs/transformers/pr_17953/en/model_doc/electra#transformers.ElectraForPreTraining"),c(rG,"href","/docs/transformers/pr_17953/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(tG,"href","/docs/transformers/pr_17953/en/model_doc/flava#transformers.FlavaForPreTraining"),c(aG,"href","/docs/transformers/pr_17953/en/model_doc/fnet#transformers.FNetForPreTraining"),c(nG,"href","/docs/transformers/pr_17953/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(sG,"href","/docs/transformers/pr_17953/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(lG,"href","/docs/transformers/pr_17953/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(iG,"href","/docs/transformers/pr_17953/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(dG,"href","/docs/transformers/pr_17953/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(cG,"href","/docs/transformers/pr_17953/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(fG,"href","/docs/transformers/pr_17953/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(mG,"href","/docs/transformers/pr_17953/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(gG,"href","/docs/transformers/pr_17953/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(hG,"href","/docs/transformers/pr_17953/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(pG,"href","/docs/transformers/pr_17953/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(_G,"href","/docs/transformers/pr_17953/en/model_doc/nezha#transformers.NezhaForPreTraining"),c(uG,"href","/docs/transformers/pr_17953/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(bG,"href","/docs/transformers/pr_17953/en/model_doc/retribert#transformers.RetriBertModel"),c(vG,"href","/docs/transformers/pr_17953/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(FG,"href","/docs/transformers/pr_17953/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(TG,"href","/docs/transformers/pr_17953/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(MG,"href","/docs/transformers/pr_17953/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(EG,"href","/docs/transformers/pr_17953/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(CG,"href","/docs/transformers/pr_17953/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(wG,"href","/docs/transformers/pr_17953/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(AG,"href","/docs/transformers/pr_17953/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(LG,"href","/docs/transformers/pr_17953/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(yG,"href","/docs/transformers/pr_17953/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(xG,"href","/docs/transformers/pr_17953/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c($G,"href","/docs/transformers/pr_17953/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(kG,"href","/docs/transformers/pr_17953/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(SG,"href","/docs/transformers/pr_17953/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(RG,"href","/docs/transformers/pr_17953/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(PG,"href","/docs/transformers/pr_17953/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(N1,"id","transformers.AutoModelForCausalLM"),c(N1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(N1,"href","#transformers.AutoModelForCausalLM"),c(zi,"class","relative group"),c(BG,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IG,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NG,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qG,"href","/docs/transformers/pr_17953/en/model_doc/bart#transformers.BartForCausalLM"),c(jG,"href","/docs/transformers/pr_17953/en/model_doc/bert#transformers.BertLMHeadModel"),c(DG,"href","/docs/transformers/pr_17953/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(GG,"href","/docs/transformers/pr_17953/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(OG,"href","/docs/transformers/pr_17953/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(VG,"href","/docs/transformers/pr_17953/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(XG,"href","/docs/transformers/pr_17953/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(zG,"href","/docs/transformers/pr_17953/en/model_doc/bloom#transformers.BloomForCausalLM"),c(QG,"href","/docs/transformers/pr_17953/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(WG,"href","/docs/transformers/pr_17953/en/model_doc/codegen#transformers.CodeGenForCausalLM"),c(HG,"href","/docs/transformers/pr_17953/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(UG,"href","/docs/transformers/pr_17953/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(JG,"href","/docs/transformers/pr_17953/en/model_doc/electra#transformers.ElectraForCausalLM"),c(YG,"href","/docs/transformers/pr_17953/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(KG,"href","/docs/transformers/pr_17953/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(ZG,"href","/docs/transformers/pr_17953/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(eO,"href","/docs/transformers/pr_17953/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(oO,"href","/docs/transformers/pr_17953/en/model_doc/marian#transformers.MarianForCausalLM"),c(rO,"href","/docs/transformers/pr_17953/en/model_doc/mbart#transformers.MBartForCausalLM"),c(tO,"href","/docs/transformers/pr_17953/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(aO,"href","/docs/transformers/pr_17953/en/model_doc/mvp#transformers.MvpForCausalLM"),c(nO,"href","/docs/transformers/pr_17953/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(sO,"href","/docs/transformers/pr_17953/en/model_doc/opt#transformers.OPTForCausalLM"),c(lO,"href","/docs/transformers/pr_17953/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(iO,"href","/docs/transformers/pr_17953/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(dO,"href","/docs/transformers/pr_17953/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(cO,"href","/docs/transformers/pr_17953/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(fO,"href","/docs/transformers/pr_17953/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(mO,"href","/docs/transformers/pr_17953/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(gO,"href","/docs/transformers/pr_17953/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(hO,"href","/docs/transformers/pr_17953/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(pO,"href","/docs/transformers/pr_17953/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(_O,"href","/docs/transformers/pr_17953/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(uO,"href","/docs/transformers/pr_17953/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(bO,"href","/docs/transformers/pr_17953/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(vO,"href","/docs/transformers/pr_17953/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(FO,"href","/docs/transformers/pr_17953/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(TO,"href","/docs/transformers/pr_17953/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(MO,"href","/docs/transformers/pr_17953/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(EO,"href","/docs/transformers/pr_17953/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(L2,"id","transformers.AutoModelForMaskedLM"),c(L2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(L2,"href","#transformers.AutoModelForMaskedLM"),c(Hi,"class","relative group"),c(CO,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wO,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AO,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LO,"href","/docs/transformers/pr_17953/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(yO,"href","/docs/transformers/pr_17953/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(xO,"href","/docs/transformers/pr_17953/en/model_doc/bert#transformers.BertForMaskedLM"),c($O,"href","/docs/transformers/pr_17953/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(kO,"href","/docs/transformers/pr_17953/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(SO,"href","/docs/transformers/pr_17953/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(RO,"href","/docs/transformers/pr_17953/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(PO,"href","/docs/transformers/pr_17953/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(BO,"href","/docs/transformers/pr_17953/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(IO,"href","/docs/transformers/pr_17953/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(NO,"href","/docs/transformers/pr_17953/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(qO,"href","/docs/transformers/pr_17953/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(jO,"href","/docs/transformers/pr_17953/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(DO,"href","/docs/transformers/pr_17953/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(GO,"href","/docs/transformers/pr_17953/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(OO,"href","/docs/transformers/pr_17953/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(VO,"href","/docs/transformers/pr_17953/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(XO,"href","/docs/transformers/pr_17953/en/model_doc/luke#transformers.LukeForMaskedLM"),c(zO,"href","/docs/transformers/pr_17953/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(QO,"href","/docs/transformers/pr_17953/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(WO,"href","/docs/transformers/pr_17953/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(HO,"href","/docs/transformers/pr_17953/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(UO,"href","/docs/transformers/pr_17953/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(JO,"href","/docs/transformers/pr_17953/en/model_doc/nezha#transformers.NezhaForMaskedLM"),c(YO,"href","/docs/transformers/pr_17953/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(KO,"href","/docs/transformers/pr_17953/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(ZO,"href","/docs/transformers/pr_17953/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(eV,"href","/docs/transformers/pr_17953/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(oV,"href","/docs/transformers/pr_17953/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(rV,"href","/docs/transformers/pr_17953/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(tV,"href","/docs/transformers/pr_17953/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(aV,"href","/docs/transformers/pr_17953/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(nV,"href","/docs/transformers/pr_17953/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(sV,"href","/docs/transformers/pr_17953/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(lV,"href","/docs/transformers/pr_17953/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(iV,"href","/docs/transformers/pr_17953/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(dV,"href","/docs/transformers/pr_17953/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pb,"id","transformers.AutoModelForSeq2SeqLM"),c(pb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pb,"href","#transformers.AutoModelForSeq2SeqLM"),c(Yi,"class","relative group"),c(cV,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fV,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mV,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gV,"href","/docs/transformers/pr_17953/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(hV,"href","/docs/transformers/pr_17953/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(pV,"href","/docs/transformers/pr_17953/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(_V,"href","/docs/transformers/pr_17953/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(uV,"href","/docs/transformers/pr_17953/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(bV,"href","/docs/transformers/pr_17953/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(vV,"href","/docs/transformers/pr_17953/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(FV,"href","/docs/transformers/pr_17953/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c(TV,"href","/docs/transformers/pr_17953/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(MV,"href","/docs/transformers/pr_17953/en/model_doc/marian#transformers.MarianMTModel"),c(EV,"href","/docs/transformers/pr_17953/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(CV,"href","/docs/transformers/pr_17953/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(wV,"href","/docs/transformers/pr_17953/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(AV,"href","/docs/transformers/pr_17953/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(LV,"href","/docs/transformers/pr_17953/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(yV,"href","/docs/transformers/pr_17953/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(xV,"href","/docs/transformers/pr_17953/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c($V,"href","/docs/transformers/pr_17953/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Nb,"id","transformers.AutoModelForSequenceClassification"),c(Nb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Nb,"href","#transformers.AutoModelForSequenceClassification"),c(ed,"class","relative group"),c(kV,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SV,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RV,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PV,"href","/docs/transformers/pr_17953/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(BV,"href","/docs/transformers/pr_17953/en/model_doc/bart#transformers.BartForSequenceClassification"),c(IV,"href","/docs/transformers/pr_17953/en/model_doc/bert#transformers.BertForSequenceClassification"),c(NV,"href","/docs/transformers/pr_17953/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(qV,"href","/docs/transformers/pr_17953/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(jV,"href","/docs/transformers/pr_17953/en/model_doc/bloom#transformers.BloomForSequenceClassification"),c(DV,"href","/docs/transformers/pr_17953/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(GV,"href","/docs/transformers/pr_17953/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(OV,"href","/docs/transformers/pr_17953/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(VV,"href","/docs/transformers/pr_17953/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(XV,"href","/docs/transformers/pr_17953/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(zV,"href","/docs/transformers/pr_17953/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(QV,"href","/docs/transformers/pr_17953/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(WV,"href","/docs/transformers/pr_17953/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(HV,"href","/docs/transformers/pr_17953/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(UV,"href","/docs/transformers/pr_17953/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(JV,"href","/docs/transformers/pr_17953/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(YV,"href","/docs/transformers/pr_17953/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(KV,"href","/docs/transformers/pr_17953/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(ZV,"href","/docs/transformers/pr_17953/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(eX,"href","/docs/transformers/pr_17953/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(oX,"href","/docs/transformers/pr_17953/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(rX,"href","/docs/transformers/pr_17953/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(tX,"href","/docs/transformers/pr_17953/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(aX,"href","/docs/transformers/pr_17953/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(nX,"href","/docs/transformers/pr_17953/en/model_doc/led#transformers.LEDForSequenceClassification"),c(sX,"href","/docs/transformers/pr_17953/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(lX,"href","/docs/transformers/pr_17953/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(iX,"href","/docs/transformers/pr_17953/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(dX,"href","/docs/transformers/pr_17953/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(cX,"href","/docs/transformers/pr_17953/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(fX,"href","/docs/transformers/pr_17953/en/model_doc/mvp#transformers.MvpForSequenceClassification"),c(mX,"href","/docs/transformers/pr_17953/en/model_doc/nezha#transformers.NezhaForSequenceClassification"),c(gX,"href","/docs/transformers/pr_17953/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(hX,"href","/docs/transformers/pr_17953/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(pX,"href","/docs/transformers/pr_17953/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(_X,"href","/docs/transformers/pr_17953/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(uX,"href","/docs/transformers/pr_17953/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(bX,"href","/docs/transformers/pr_17953/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(vX,"href","/docs/transformers/pr_17953/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(FX,"href","/docs/transformers/pr_17953/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(TX,"href","/docs/transformers/pr_17953/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(MX,"href","/docs/transformers/pr_17953/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(EX,"href","/docs/transformers/pr_17953/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(CX,"href","/docs/transformers/pr_17953/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(wX,"href","/docs/transformers/pr_17953/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(AX,"href","/docs/transformers/pr_17953/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(LX,"href","/docs/transformers/pr_17953/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(yX,"href","/docs/transformers/pr_17953/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(xX,"href","/docs/transformers/pr_17953/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Nv,"id","transformers.AutoModelForMultipleChoice"),c(Nv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Nv,"href","#transformers.AutoModelForMultipleChoice"),c(td,"class","relative group"),c($X,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kX,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SX,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RX,"href","/docs/transformers/pr_17953/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(PX,"href","/docs/transformers/pr_17953/en/model_doc/bert#transformers.BertForMultipleChoice"),c(BX,"href","/docs/transformers/pr_17953/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(IX,"href","/docs/transformers/pr_17953/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(NX,"href","/docs/transformers/pr_17953/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(qX,"href","/docs/transformers/pr_17953/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(jX,"href","/docs/transformers/pr_17953/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(DX,"href","/docs/transformers/pr_17953/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(GX,"href","/docs/transformers/pr_17953/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(OX,"href","/docs/transformers/pr_17953/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(VX,"href","/docs/transformers/pr_17953/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(XX,"href","/docs/transformers/pr_17953/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(zX,"href","/docs/transformers/pr_17953/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(QX,"href","/docs/transformers/pr_17953/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(WX,"href","/docs/transformers/pr_17953/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(HX,"href","/docs/transformers/pr_17953/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(UX,"href","/docs/transformers/pr_17953/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(JX,"href","/docs/transformers/pr_17953/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(YX,"href","/docs/transformers/pr_17953/en/model_doc/nezha#transformers.NezhaForMultipleChoice"),c(KX,"href","/docs/transformers/pr_17953/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(ZX,"href","/docs/transformers/pr_17953/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(ez,"href","/docs/transformers/pr_17953/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(oz,"href","/docs/transformers/pr_17953/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(rz,"href","/docs/transformers/pr_17953/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(tz,"href","/docs/transformers/pr_17953/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(az,"href","/docs/transformers/pr_17953/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(nz,"href","/docs/transformers/pr_17953/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(sz,"href","/docs/transformers/pr_17953/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(lz,"href","/docs/transformers/pr_17953/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(iz,"href","/docs/transformers/pr_17953/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(u3,"id","transformers.AutoModelForNextSentencePrediction"),c(u3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u3,"href","#transformers.AutoModelForNextSentencePrediction"),c(sd,"class","relative group"),c(dz,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cz,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fz,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mz,"href","/docs/transformers/pr_17953/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(gz,"href","/docs/transformers/pr_17953/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(hz,"href","/docs/transformers/pr_17953/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(pz,"href","/docs/transformers/pr_17953/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(_z,"href","/docs/transformers/pr_17953/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction"),c(uz,"href","/docs/transformers/pr_17953/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(L3,"id","transformers.AutoModelForTokenClassification"),c(L3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(L3,"href","#transformers.AutoModelForTokenClassification"),c(dd,"class","relative group"),c(bz,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vz,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Fz,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tz,"href","/docs/transformers/pr_17953/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(Mz,"href","/docs/transformers/pr_17953/en/model_doc/bert#transformers.BertForTokenClassification"),c(Ez,"href","/docs/transformers/pr_17953/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(Cz,"href","/docs/transformers/pr_17953/en/model_doc/bloom#transformers.BloomForTokenClassification"),c(wz,"href","/docs/transformers/pr_17953/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(Az,"href","/docs/transformers/pr_17953/en/model_doc/canine#transformers.CanineForTokenClassification"),c(Lz,"href","/docs/transformers/pr_17953/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(yz,"href","/docs/transformers/pr_17953/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(xz,"href","/docs/transformers/pr_17953/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c($z,"href","/docs/transformers/pr_17953/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(kz,"href","/docs/transformers/pr_17953/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(Sz,"href","/docs/transformers/pr_17953/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(Rz,"href","/docs/transformers/pr_17953/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(Pz,"href","/docs/transformers/pr_17953/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(Bz,"href","/docs/transformers/pr_17953/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(Iz,"href","/docs/transformers/pr_17953/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(Nz,"href","/docs/transformers/pr_17953/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(qz,"href","/docs/transformers/pr_17953/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(jz,"href","/docs/transformers/pr_17953/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(Dz,"href","/docs/transformers/pr_17953/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(Gz,"href","/docs/transformers/pr_17953/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(Oz,"href","/docs/transformers/pr_17953/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(Vz,"href","/docs/transformers/pr_17953/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(Xz,"href","/docs/transformers/pr_17953/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(zz,"href","/docs/transformers/pr_17953/en/model_doc/nezha#transformers.NezhaForTokenClassification"),c(Qz,"href","/docs/transformers/pr_17953/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(Wz,"href","/docs/transformers/pr_17953/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(Hz,"href","/docs/transformers/pr_17953/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(Uz,"href","/docs/transformers/pr_17953/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(Jz,"href","/docs/transformers/pr_17953/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(Yz,"href","/docs/transformers/pr_17953/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(Kz,"href","/docs/transformers/pr_17953/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(Zz,"href","/docs/transformers/pr_17953/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(eQ,"href","/docs/transformers/pr_17953/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(oQ,"href","/docs/transformers/pr_17953/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(rQ,"href","/docs/transformers/pr_17953/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(g5,"id","transformers.AutoModelForQuestionAnswering"),c(g5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(g5,"href","#transformers.AutoModelForQuestionAnswering"),c(md,"class","relative group"),c(tQ,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aQ,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nQ,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sQ,"href","/docs/transformers/pr_17953/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(lQ,"href","/docs/transformers/pr_17953/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(iQ,"href","/docs/transformers/pr_17953/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(dQ,"href","/docs/transformers/pr_17953/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(cQ,"href","/docs/transformers/pr_17953/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(fQ,"href","/docs/transformers/pr_17953/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(mQ,"href","/docs/transformers/pr_17953/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(gQ,"href","/docs/transformers/pr_17953/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(hQ,"href","/docs/transformers/pr_17953/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(pQ,"href","/docs/transformers/pr_17953/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(_Q,"href","/docs/transformers/pr_17953/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(uQ,"href","/docs/transformers/pr_17953/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(bQ,"href","/docs/transformers/pr_17953/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(vQ,"href","/docs/transformers/pr_17953/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(FQ,"href","/docs/transformers/pr_17953/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(TQ,"href","/docs/transformers/pr_17953/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(MQ,"href","/docs/transformers/pr_17953/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(EQ,"href","/docs/transformers/pr_17953/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(CQ,"href","/docs/transformers/pr_17953/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(wQ,"href","/docs/transformers/pr_17953/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(AQ,"href","/docs/transformers/pr_17953/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(LQ,"href","/docs/transformers/pr_17953/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(yQ,"href","/docs/transformers/pr_17953/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(xQ,"href","/docs/transformers/pr_17953/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c($Q,"href","/docs/transformers/pr_17953/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(kQ,"href","/docs/transformers/pr_17953/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(SQ,"href","/docs/transformers/pr_17953/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(RQ,"href","/docs/transformers/pr_17953/en/model_doc/mvp#transformers.MvpForQuestionAnswering"),c(PQ,"href","/docs/transformers/pr_17953/en/model_doc/nezha#transformers.NezhaForQuestionAnswering"),c(BQ,"href","/docs/transformers/pr_17953/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(IQ,"href","/docs/transformers/pr_17953/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(NQ,"href","/docs/transformers/pr_17953/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(qQ,"href","/docs/transformers/pr_17953/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(jQ,"href","/docs/transformers/pr_17953/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(DQ,"href","/docs/transformers/pr_17953/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(GQ,"href","/docs/transformers/pr_17953/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(OQ,"href","/docs/transformers/pr_17953/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(VQ,"href","/docs/transformers/pr_17953/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(XQ,"href","/docs/transformers/pr_17953/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(zQ,"href","/docs/transformers/pr_17953/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(QQ,"href","/docs/transformers/pr_17953/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(WQ,"href","/docs/transformers/pr_17953/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nF,"id","transformers.AutoModelForTableQuestionAnswering"),c(nF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nF,"href","#transformers.AutoModelForTableQuestionAnswering"),c(pd,"class","relative group"),c(HQ,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UQ,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JQ,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YQ,"href","/docs/transformers/pr_17953/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cF,"id","transformers.AutoModelForImageClassification"),c(cF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cF,"href","#transformers.AutoModelForImageClassification"),c(bd,"class","relative group"),c(KQ,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZQ,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eW,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oW,"href","/docs/transformers/pr_17953/en/model_doc/beit#transformers.BeitForImageClassification"),c(rW,"href","/docs/transformers/pr_17953/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(tW,"href","/docs/transformers/pr_17953/en/model_doc/cvt#transformers.CvtForImageClassification"),c(aW,"href","/docs/transformers/pr_17953/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(nW,"href","/docs/transformers/pr_17953/en/model_doc/deit#transformers.DeiTForImageClassification"),c(sW,"href","/docs/transformers/pr_17953/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(lW,"href","/docs/transformers/pr_17953/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(iW,"href","/docs/transformers/pr_17953/en/model_doc/levit#transformers.LevitForImageClassification"),c(dW,"href","/docs/transformers/pr_17953/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(cW,"href","/docs/transformers/pr_17953/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(fW,"href","/docs/transformers/pr_17953/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(mW,"href","/docs/transformers/pr_17953/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(gW,"href","/docs/transformers/pr_17953/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(hW,"href","/docs/transformers/pr_17953/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(pW,"href","/docs/transformers/pr_17953/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(_W,"href","/docs/transformers/pr_17953/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(uW,"href","/docs/transformers/pr_17953/en/model_doc/swin#transformers.SwinForImageClassification"),c(bW,"href","/docs/transformers/pr_17953/en/model_doc/van#transformers.VanForImageClassification"),c(vW,"href","/docs/transformers/pr_17953/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AF,"id","transformers.AutoModelForVision2Seq"),c(AF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(AF,"href","#transformers.AutoModelForVision2Seq"),c(Td,"class","relative group"),c(FW,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TW,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MW,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EW,"href","/docs/transformers/pr_17953/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kF,"id","transformers.AutoModelForVisualQuestionAnswering"),c(kF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kF,"href","#transformers.AutoModelForVisualQuestionAnswering"),c(Cd,"class","relative group"),c(CW,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wW,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AW,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LW,"href","/docs/transformers/pr_17953/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IF,"id","transformers.AutoModelForAudioClassification"),c(IF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(IF,"href","#transformers.AutoModelForAudioClassification"),c(Ld,"class","relative group"),c(yW,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xW,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($W,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kW,"href","/docs/transformers/pr_17953/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(SW,"href","/docs/transformers/pr_17953/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(RW,"href","/docs/transformers/pr_17953/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(PW,"href","/docs/transformers/pr_17953/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(BW,"href","/docs/transformers/pr_17953/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(IW,"href","/docs/transformers/pr_17953/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(NW,"href","/docs/transformers/pr_17953/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(qW,"href","/docs/transformers/pr_17953/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(jW,"href","/docs/transformers/pr_17953/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UF,"id","transformers.AutoModelForAudioFrameClassification"),c(UF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UF,"href","#transformers.AutoModelForAudioFrameClassification"),c($d,"class","relative group"),c(DW,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GW,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OW,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VW,"href","/docs/transformers/pr_17953/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(XW,"href","/docs/transformers/pr_17953/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(zW,"href","/docs/transformers/pr_17953/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(QW,"href","/docs/transformers/pr_17953/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(WW,"href","/docs/transformers/pr_17953/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aT,"id","transformers.AutoModelForCTC"),c(aT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aT,"href","#transformers.AutoModelForCTC"),c(Rd,"class","relative group"),c(HW,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UW,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JW,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YW,"href","/docs/transformers/pr_17953/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(KW,"href","/docs/transformers/pr_17953/en/model_doc/hubert#transformers.HubertForCTC"),c(ZW,"href","/docs/transformers/pr_17953/en/model_doc/mctct#transformers.MCTCTForCTC"),c(eH,"href","/docs/transformers/pr_17953/en/model_doc/sew#transformers.SEWForCTC"),c(oH,"href","/docs/transformers/pr_17953/en/model_doc/sew-d#transformers.SEWDForCTC"),c(rH,"href","/docs/transformers/pr_17953/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(tH,"href","/docs/transformers/pr_17953/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(aH,"href","/docs/transformers/pr_17953/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(nH,"href","/docs/transformers/pr_17953/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(sH,"href","/docs/transformers/pr_17953/en/model_doc/wavlm#transformers.WavLMForCTC"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bT,"id","transformers.AutoModelForSpeechSeq2Seq"),c(bT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bT,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(Id,"class","relative group"),c(lH,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iH,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dH,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cH,"href","/docs/transformers/pr_17953/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(fH,"href","/docs/transformers/pr_17953/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CT,"id","transformers.AutoModelForAudioXVector"),c(CT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(CT,"href","#transformers.AutoModelForAudioXVector"),c(jd,"class","relative group"),c(mH,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gH,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hH,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pH,"href","/docs/transformers/pr_17953/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(_H,"href","/docs/transformers/pr_17953/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(uH,"href","/docs/transformers/pr_17953/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(bH,"href","/docs/transformers/pr_17953/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(vH,"href","/docs/transformers/pr_17953/en/model_doc/wavlm#transformers.WavLMForXVector"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RT,"id","transformers.AutoModelForMaskedImageModeling"),c(RT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(RT,"href","#transformers.AutoModelForMaskedImageModeling"),c(Od,"class","relative group"),c(FH,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TH,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MH,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EH,"href","/docs/transformers/pr_17953/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(CH,"href","/docs/transformers/pr_17953/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(wH,"href","/docs/transformers/pr_17953/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DT,"id","transformers.AutoModelForObjectDetection"),c(DT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(DT,"href","#transformers.AutoModelForObjectDetection"),c(Qd,"class","relative group"),c(AH,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LH,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yH,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xH,"href","/docs/transformers/pr_17953/en/model_doc/detr#transformers.DetrForObjectDetection"),c($H,"href","/docs/transformers/pr_17953/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QT,"id","transformers.AutoModelForImageSegmentation"),c(QT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(QT,"href","#transformers.AutoModelForImageSegmentation"),c(Ud,"class","relative group"),c(kH,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SH,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RH,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PH,"href","/docs/transformers/pr_17953/en/model_doc/detr#transformers.DetrForSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YT,"id","transformers.AutoModelForSemanticSegmentation"),c(YT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(YT,"href","#transformers.AutoModelForSemanticSegmentation"),c(Kd,"class","relative group"),c(BH,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IH,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NH,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qH,"href","/docs/transformers/pr_17953/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(jH,"href","/docs/transformers/pr_17953/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(DH,"href","/docs/transformers/pr_17953/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(GH,"href","/docs/transformers/pr_17953/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(n7,"id","transformers.AutoModelForInstanceSegmentation"),c(n7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(n7,"href","#transformers.AutoModelForInstanceSegmentation"),c(oc,"class","relative group"),c(OH,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VH,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XH,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zH,"href","/docs/transformers/pr_17953/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(c7,"id","transformers.TFAutoModel"),c(c7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(c7,"href","#transformers.TFAutoModel"),c(ac,"class","relative group"),c(QH,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WH,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HH,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UH,"href","/docs/transformers/pr_17953/en/model_doc/albert#transformers.TFAlbertModel"),c(JH,"href","/docs/transformers/pr_17953/en/model_doc/bart#transformers.TFBartModel"),c(YH,"href","/docs/transformers/pr_17953/en/model_doc/bert#transformers.TFBertModel"),c(KH,"href","/docs/transformers/pr_17953/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(ZH,"href","/docs/transformers/pr_17953/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(eU,"href","/docs/transformers/pr_17953/en/model_doc/camembert#transformers.TFCamembertModel"),c(oU,"href","/docs/transformers/pr_17953/en/model_doc/clip#transformers.TFCLIPModel"),c(rU,"href","/docs/transformers/pr_17953/en/model_doc/convbert#transformers.TFConvBertModel"),c(tU,"href","/docs/transformers/pr_17953/en/model_doc/convnext#transformers.TFConvNextModel"),c(aU,"href","/docs/transformers/pr_17953/en/model_doc/ctrl#transformers.TFCTRLModel"),c(nU,"href","/docs/transformers/pr_17953/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(sU,"href","/docs/transformers/pr_17953/en/model_doc/deberta#transformers.TFDebertaModel"),c(lU,"href","/docs/transformers/pr_17953/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(iU,"href","/docs/transformers/pr_17953/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(dU,"href","/docs/transformers/pr_17953/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(cU,"href","/docs/transformers/pr_17953/en/model_doc/electra#transformers.TFElectraModel"),c(fU,"href","/docs/transformers/pr_17953/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(mU,"href","/docs/transformers/pr_17953/en/model_doc/funnel#transformers.TFFunnelModel"),c(gU,"href","/docs/transformers/pr_17953/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(hU,"href","/docs/transformers/pr_17953/en/model_doc/gpt2#transformers.TFGPT2Model"),c(pU,"href","/docs/transformers/pr_17953/en/model_doc/gptj#transformers.TFGPTJModel"),c(_U,"href","/docs/transformers/pr_17953/en/model_doc/hubert#transformers.TFHubertModel"),c(uU,"href","/docs/transformers/pr_17953/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(bU,"href","/docs/transformers/pr_17953/en/model_doc/led#transformers.TFLEDModel"),c(vU,"href","/docs/transformers/pr_17953/en/model_doc/longformer#transformers.TFLongformerModel"),c(FU,"href","/docs/transformers/pr_17953/en/model_doc/lxmert#transformers.TFLxmertModel"),c(TU,"href","/docs/transformers/pr_17953/en/model_doc/marian#transformers.TFMarianModel"),c(MU,"href","/docs/transformers/pr_17953/en/model_doc/mbart#transformers.TFMBartModel"),c(EU,"href","/docs/transformers/pr_17953/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(CU,"href","/docs/transformers/pr_17953/en/model_doc/mpnet#transformers.TFMPNetModel"),c(wU,"href","/docs/transformers/pr_17953/en/model_doc/mt5#transformers.TFMT5Model"),c(AU,"href","/docs/transformers/pr_17953/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(LU,"href","/docs/transformers/pr_17953/en/model_doc/opt#transformers.TFOPTModel"),c(yU,"href","/docs/transformers/pr_17953/en/model_doc/pegasus#transformers.TFPegasusModel"),c(xU,"href","/docs/transformers/pr_17953/en/model_doc/regnet#transformers.TFRegNetModel"),c($U,"href","/docs/transformers/pr_17953/en/model_doc/rembert#transformers.TFRemBertModel"),c(kU,"href","/docs/transformers/pr_17953/en/model_doc/roberta#transformers.TFRobertaModel"),c(SU,"href","/docs/transformers/pr_17953/en/model_doc/roformer#transformers.TFRoFormerModel"),c(RU,"href","/docs/transformers/pr_17953/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(PU,"href","/docs/transformers/pr_17953/en/model_doc/swin#transformers.TFSwinModel"),c(BU,"href","/docs/transformers/pr_17953/en/model_doc/t5#transformers.TFT5Model"),c(IU,"href","/docs/transformers/pr_17953/en/model_doc/tapas#transformers.TFTapasModel"),c(NU,"href","/docs/transformers/pr_17953/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(qU,"href","/docs/transformers/pr_17953/en/model_doc/vit#transformers.TFViTModel"),c(jU,"href","/docs/transformers/pr_17953/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(DU,"href","/docs/transformers/pr_17953/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(GU,"href","/docs/transformers/pr_17953/en/model_doc/xlm#transformers.TFXLMModel"),c(OU,"href","/docs/transformers/pr_17953/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(VU,"href","/docs/transformers/pr_17953/en/model_doc/xlnet#transformers.TFXLNetModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(s9,"id","transformers.TFAutoModelForPreTraining"),c(s9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(s9,"href","#transformers.TFAutoModelForPreTraining"),c(lc,"class","relative group"),c(XU,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zU,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QU,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WU,"href","/docs/transformers/pr_17953/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(HU,"href","/docs/transformers/pr_17953/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(UU,"href","/docs/transformers/pr_17953/en/model_doc/bert#transformers.TFBertForPreTraining"),c(JU,"href","/docs/transformers/pr_17953/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(YU,"href","/docs/transformers/pr_17953/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(KU,"href","/docs/transformers/pr_17953/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(ZU,"href","/docs/transformers/pr_17953/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(eJ,"href","/docs/transformers/pr_17953/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(oJ,"href","/docs/transformers/pr_17953/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(rJ,"href","/docs/transformers/pr_17953/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(tJ,"href","/docs/transformers/pr_17953/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(aJ,"href","/docs/transformers/pr_17953/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(nJ,"href","/docs/transformers/pr_17953/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(sJ,"href","/docs/transformers/pr_17953/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(lJ,"href","/docs/transformers/pr_17953/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(iJ,"href","/docs/transformers/pr_17953/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(dJ,"href","/docs/transformers/pr_17953/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(cJ,"href","/docs/transformers/pr_17953/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(fJ,"href","/docs/transformers/pr_17953/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(mJ,"href","/docs/transformers/pr_17953/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(gJ,"href","/docs/transformers/pr_17953/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(hJ,"href","/docs/transformers/pr_17953/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(pJ,"href","/docs/transformers/pr_17953/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(S9,"id","transformers.TFAutoModelForCausalLM"),c(S9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S9,"href","#transformers.TFAutoModelForCausalLM"),c(cc,"class","relative group"),c(_J,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uJ,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bJ,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vJ,"href","/docs/transformers/pr_17953/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(FJ,"href","/docs/transformers/pr_17953/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(TJ,"href","/docs/transformers/pr_17953/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(MJ,"href","/docs/transformers/pr_17953/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(EJ,"href","/docs/transformers/pr_17953/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(CJ,"href","/docs/transformers/pr_17953/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(wJ,"href","/docs/transformers/pr_17953/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(AJ,"href","/docs/transformers/pr_17953/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(LJ,"href","/docs/transformers/pr_17953/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(yJ,"href","/docs/transformers/pr_17953/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(xJ,"href","/docs/transformers/pr_17953/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c($J,"href","/docs/transformers/pr_17953/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(kJ,"href","/docs/transformers/pr_17953/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(H9,"id","transformers.TFAutoModelForImageClassification"),c(H9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H9,"href","#transformers.TFAutoModelForImageClassification"),c(gc,"class","relative group"),c(SJ,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RJ,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PJ,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BJ,"href","/docs/transformers/pr_17953/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(IJ,"href","/docs/transformers/pr_17953/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(NJ,"href","/docs/transformers/pr_17953/en/model_doc/regnet#transformers.TFRegNetForImageClassification"),c(qJ,"href","/docs/transformers/pr_17953/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(jJ,"href","/docs/transformers/pr_17953/en/model_doc/vit#transformers.TFViTForImageClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rM,"id","transformers.TFAutoModelForMaskedLM"),c(rM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rM,"href","#transformers.TFAutoModelForMaskedLM"),c(_c,"class","relative group"),c(DJ,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GJ,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OJ,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VJ,"href","/docs/transformers/pr_17953/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(XJ,"href","/docs/transformers/pr_17953/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(zJ,"href","/docs/transformers/pr_17953/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(QJ,"href","/docs/transformers/pr_17953/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(WJ,"href","/docs/transformers/pr_17953/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(HJ,"href","/docs/transformers/pr_17953/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(UJ,"href","/docs/transformers/pr_17953/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(JJ,"href","/docs/transformers/pr_17953/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(YJ,"href","/docs/transformers/pr_17953/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(KJ,"href","/docs/transformers/pr_17953/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(ZJ,"href","/docs/transformers/pr_17953/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(eY,"href","/docs/transformers/pr_17953/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(oY,"href","/docs/transformers/pr_17953/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(rY,"href","/docs/transformers/pr_17953/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(tY,"href","/docs/transformers/pr_17953/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(aY,"href","/docs/transformers/pr_17953/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(nY,"href","/docs/transformers/pr_17953/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(sY,"href","/docs/transformers/pr_17953/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(lY,"href","/docs/transformers/pr_17953/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(iY,"href","/docs/transformers/pr_17953/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wM,"id","transformers.TFAutoModelForSeq2SeqLM"),c(wM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wM,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(vc,"class","relative group"),c(dY,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cY,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fY,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mY,"href","/docs/transformers/pr_17953/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(gY,"href","/docs/transformers/pr_17953/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(hY,"href","/docs/transformers/pr_17953/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(pY,"href","/docs/transformers/pr_17953/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(_Y,"href","/docs/transformers/pr_17953/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(uY,"href","/docs/transformers/pr_17953/en/model_doc/marian#transformers.TFMarianMTModel"),c(bY,"href","/docs/transformers/pr_17953/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(vY,"href","/docs/transformers/pr_17953/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(FY,"href","/docs/transformers/pr_17953/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(TY,"href","/docs/transformers/pr_17953/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qM,"id","transformers.TFAutoModelForSequenceClassification"),c(qM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qM,"href","#transformers.TFAutoModelForSequenceClassification"),c(Mc,"class","relative group"),c(MY,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EY,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CY,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wY,"href","/docs/transformers/pr_17953/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(AY,"href","/docs/transformers/pr_17953/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(LY,"href","/docs/transformers/pr_17953/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(yY,"href","/docs/transformers/pr_17953/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(xY,"href","/docs/transformers/pr_17953/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c($Y,"href","/docs/transformers/pr_17953/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(kY,"href","/docs/transformers/pr_17953/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(SY,"href","/docs/transformers/pr_17953/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(RY,"href","/docs/transformers/pr_17953/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(PY,"href","/docs/transformers/pr_17953/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(BY,"href","/docs/transformers/pr_17953/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(IY,"href","/docs/transformers/pr_17953/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(NY,"href","/docs/transformers/pr_17953/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(qY,"href","/docs/transformers/pr_17953/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(jY,"href","/docs/transformers/pr_17953/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(DY,"href","/docs/transformers/pr_17953/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(GY,"href","/docs/transformers/pr_17953/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(OY,"href","/docs/transformers/pr_17953/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(VY,"href","/docs/transformers/pr_17953/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(XY,"href","/docs/transformers/pr_17953/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(zY,"href","/docs/transformers/pr_17953/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(QY,"href","/docs/transformers/pr_17953/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(WY,"href","/docs/transformers/pr_17953/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(HY,"href","/docs/transformers/pr_17953/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(UY,"href","/docs/transformers/pr_17953/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(JY,"href","/docs/transformers/pr_17953/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(g4,"id","transformers.TFAutoModelForMultipleChoice"),c(g4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(g4,"href","#transformers.TFAutoModelForMultipleChoice"),c(wc,"class","relative group"),c(YY,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KY,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZY,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eK,"href","/docs/transformers/pr_17953/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(oK,"href","/docs/transformers/pr_17953/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(rK,"href","/docs/transformers/pr_17953/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(tK,"href","/docs/transformers/pr_17953/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(aK,"href","/docs/transformers/pr_17953/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(nK,"href","/docs/transformers/pr_17953/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(sK,"href","/docs/transformers/pr_17953/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(lK,"href","/docs/transformers/pr_17953/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(iK,"href","/docs/transformers/pr_17953/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(dK,"href","/docs/transformers/pr_17953/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(cK,"href","/docs/transformers/pr_17953/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(fK,"href","/docs/transformers/pr_17953/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(mK,"href","/docs/transformers/pr_17953/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(gK,"href","/docs/transformers/pr_17953/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(hK,"href","/docs/transformers/pr_17953/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(pK,"href","/docs/transformers/pr_17953/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(_K,"href","/docs/transformers/pr_17953/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(R4,"id","transformers.TFAutoModelForNextSentencePrediction"),c(R4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(R4,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(yc,"class","relative group"),c(uK,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bK,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vK,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FK,"href","/docs/transformers/pr_17953/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(TK,"href","/docs/transformers/pr_17953/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(q4,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(q4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(q4,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(kc,"class","relative group"),c(MK,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EK,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CK,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wK,"href","/docs/transformers/pr_17953/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(O4,"id","transformers.TFAutoModelForTokenClassification"),c(O4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O4,"href","#transformers.TFAutoModelForTokenClassification"),c(Pc,"class","relative group"),c(AK,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LK,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yK,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xK,"href","/docs/transformers/pr_17953/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c($K,"href","/docs/transformers/pr_17953/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(kK,"href","/docs/transformers/pr_17953/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(SK,"href","/docs/transformers/pr_17953/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(RK,"href","/docs/transformers/pr_17953/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(PK,"href","/docs/transformers/pr_17953/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(BK,"href","/docs/transformers/pr_17953/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(IK,"href","/docs/transformers/pr_17953/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(NK,"href","/docs/transformers/pr_17953/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(qK,"href","/docs/transformers/pr_17953/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(jK,"href","/docs/transformers/pr_17953/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(DK,"href","/docs/transformers/pr_17953/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(GK,"href","/docs/transformers/pr_17953/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(OK,"href","/docs/transformers/pr_17953/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(VK,"href","/docs/transformers/pr_17953/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(XK,"href","/docs/transformers/pr_17953/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(zK,"href","/docs/transformers/pr_17953/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(QK,"href","/docs/transformers/pr_17953/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(WK,"href","/docs/transformers/pr_17953/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(HK,"href","/docs/transformers/pr_17953/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fE,"id","transformers.TFAutoModelForQuestionAnswering"),c(fE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fE,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Nc,"class","relative group"),c(UK,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JK,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YK,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KK,"href","/docs/transformers/pr_17953/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(ZK,"href","/docs/transformers/pr_17953/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(eZ,"href","/docs/transformers/pr_17953/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(oZ,"href","/docs/transformers/pr_17953/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(rZ,"href","/docs/transformers/pr_17953/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(tZ,"href","/docs/transformers/pr_17953/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(aZ,"href","/docs/transformers/pr_17953/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(nZ,"href","/docs/transformers/pr_17953/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(sZ,"href","/docs/transformers/pr_17953/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(lZ,"href","/docs/transformers/pr_17953/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(iZ,"href","/docs/transformers/pr_17953/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(dZ,"href","/docs/transformers/pr_17953/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(cZ,"href","/docs/transformers/pr_17953/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(fZ,"href","/docs/transformers/pr_17953/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(mZ,"href","/docs/transformers/pr_17953/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(gZ,"href","/docs/transformers/pr_17953/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(hZ,"href","/docs/transformers/pr_17953/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(pZ,"href","/docs/transformers/pr_17953/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(_Z,"href","/docs/transformers/pr_17953/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(uZ,"href","/docs/transformers/pr_17953/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PE,"id","transformers.TFAutoModelForVision2Seq"),c(PE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PE,"href","#transformers.TFAutoModelForVision2Seq"),c(Dc,"class","relative group"),c(bZ,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vZ,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FZ,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TZ,"href","/docs/transformers/pr_17953/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qE,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(qE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qE,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Vc,"class","relative group"),c(MZ,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EZ,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CZ,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wZ,"href","/docs/transformers/pr_17953/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OE,"id","transformers.FlaxAutoModel"),c(OE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(OE,"href","#transformers.FlaxAutoModel"),c(Qc,"class","relative group"),c(AZ,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LZ,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yZ,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xZ,"href","/docs/transformers/pr_17953/en/model_doc/albert#transformers.FlaxAlbertModel"),c($Z,"href","/docs/transformers/pr_17953/en/model_doc/bart#transformers.FlaxBartModel"),c(kZ,"href","/docs/transformers/pr_17953/en/model_doc/beit#transformers.FlaxBeitModel"),c(SZ,"href","/docs/transformers/pr_17953/en/model_doc/bert#transformers.FlaxBertModel"),c(RZ,"href","/docs/transformers/pr_17953/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(PZ,"href","/docs/transformers/pr_17953/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(BZ,"href","/docs/transformers/pr_17953/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(IZ,"href","/docs/transformers/pr_17953/en/model_doc/clip#transformers.FlaxCLIPModel"),c(NZ,"href","/docs/transformers/pr_17953/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(qZ,"href","/docs/transformers/pr_17953/en/model_doc/electra#transformers.FlaxElectraModel"),c(jZ,"href","/docs/transformers/pr_17953/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(DZ,"href","/docs/transformers/pr_17953/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(GZ,"href","/docs/transformers/pr_17953/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(OZ,"href","/docs/transformers/pr_17953/en/model_doc/longt5#transformers.FlaxLongT5Model"),c(VZ,"href","/docs/transformers/pr_17953/en/model_doc/marian#transformers.FlaxMarianModel"),c(XZ,"href","/docs/transformers/pr_17953/en/model_doc/mbart#transformers.FlaxMBartModel"),c(zZ,"href","/docs/transformers/pr_17953/en/model_doc/mt5#transformers.FlaxMT5Model"),c(QZ,"href","/docs/transformers/pr_17953/en/model_doc/opt#transformers.FlaxOPTModel"),c(WZ,"href","/docs/transformers/pr_17953/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(HZ,"href","/docs/transformers/pr_17953/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(UZ,"href","/docs/transformers/pr_17953/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(JZ,"href","/docs/transformers/pr_17953/en/model_doc/t5#transformers.FlaxT5Model"),c(YZ,"href","/docs/transformers/pr_17953/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(KZ,"href","/docs/transformers/pr_17953/en/model_doc/vit#transformers.FlaxViTModel"),c(ZZ,"href","/docs/transformers/pr_17953/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(eee,"href","/docs/transformers/pr_17953/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(oee,"href","/docs/transformers/pr_17953/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bC,"id","transformers.FlaxAutoModelForCausalLM"),c(bC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bC,"href","#transformers.FlaxAutoModelForCausalLM"),c(Uc,"class","relative group"),c(ree,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tee,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aee,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nee,"href","/docs/transformers/pr_17953/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(see,"href","/docs/transformers/pr_17953/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(lee,"href","/docs/transformers/pr_17953/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(iee,"href","/docs/transformers/pr_17953/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(dee,"href","/docs/transformers/pr_17953/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(cee,"href","/docs/transformers/pr_17953/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(fee,"href","/docs/transformers/pr_17953/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(mee,"href","/docs/transformers/pr_17953/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(gee,"href","/docs/transformers/pr_17953/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(hee,"href","/docs/transformers/pr_17953/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kC,"id","transformers.FlaxAutoModelForPreTraining"),c(kC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kC,"href","#transformers.FlaxAutoModelForPreTraining"),c(Kc,"class","relative group"),c(pee,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_ee,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uee,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bee,"href","/docs/transformers/pr_17953/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(vee,"href","/docs/transformers/pr_17953/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(Fee,"href","/docs/transformers/pr_17953/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(Tee,"href","/docs/transformers/pr_17953/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(Mee,"href","/docs/transformers/pr_17953/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(Eee,"href","/docs/transformers/pr_17953/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(Cee,"href","/docs/transformers/pr_17953/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(wee,"href","/docs/transformers/pr_17953/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(Aee,"href","/docs/transformers/pr_17953/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(Lee,"href","/docs/transformers/pr_17953/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(yee,"href","/docs/transformers/pr_17953/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(xee,"href","/docs/transformers/pr_17953/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c($ee,"href","/docs/transformers/pr_17953/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WC,"id","transformers.FlaxAutoModelForMaskedLM"),c(WC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(WC,"href","#transformers.FlaxAutoModelForMaskedLM"),c(of,"class","relative group"),c(kee,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(See,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Ree,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pee,"href","/docs/transformers/pr_17953/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(Bee,"href","/docs/transformers/pr_17953/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(Iee,"href","/docs/transformers/pr_17953/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(Nee,"href","/docs/transformers/pr_17953/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(qee,"href","/docs/transformers/pr_17953/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(jee,"href","/docs/transformers/pr_17953/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(Dee,"href","/docs/transformers/pr_17953/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(Gee,"href","/docs/transformers/pr_17953/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(Oee,"href","/docs/transformers/pr_17953/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(Vee,"href","/docs/transformers/pr_17953/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(s0,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(s0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(s0,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(af,"class","relative group"),c(Xee,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zee,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Qee,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wee,"href","/docs/transformers/pr_17953/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(Hee,"href","/docs/transformers/pr_17953/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(Uee,"href","/docs/transformers/pr_17953/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(Jee,"href","/docs/transformers/pr_17953/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(Yee,"href","/docs/transformers/pr_17953/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(Kee,"href","/docs/transformers/pr_17953/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(Zee,"href","/docs/transformers/pr_17953/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(eoe,"href","/docs/transformers/pr_17953/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(ooe,"href","/docs/transformers/pr_17953/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(roe,"href","/docs/transformers/pr_17953/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v0,"id","transformers.FlaxAutoModelForSequenceClassification"),c(v0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v0,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(lf,"class","relative group"),c(toe,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aoe,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(noe,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(soe,"href","/docs/transformers/pr_17953/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(loe,"href","/docs/transformers/pr_17953/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(ioe,"href","/docs/transformers/pr_17953/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(doe,"href","/docs/transformers/pr_17953/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(coe,"href","/docs/transformers/pr_17953/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(foe,"href","/docs/transformers/pr_17953/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(moe,"href","/docs/transformers/pr_17953/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(goe,"href","/docs/transformers/pr_17953/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(hoe,"href","/docs/transformers/pr_17953/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(poe,"href","/docs/transformers/pr_17953/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(S0,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(S0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S0,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(ff,"class","relative group"),c(_oe,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uoe,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(boe,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(voe,"href","/docs/transformers/pr_17953/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(Foe,"href","/docs/transformers/pr_17953/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(Toe,"href","/docs/transformers/pr_17953/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(Moe,"href","/docs/transformers/pr_17953/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(Eoe,"href","/docs/transformers/pr_17953/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(Coe,"href","/docs/transformers/pr_17953/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(woe,"href","/docs/transformers/pr_17953/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(Aoe,"href","/docs/transformers/pr_17953/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(Loe,"href","/docs/transformers/pr_17953/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(yoe,"href","/docs/transformers/pr_17953/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z0,"id","transformers.FlaxAutoModelForTokenClassification"),c(z0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z0,"href","#transformers.FlaxAutoModelForTokenClassification"),c(hf,"class","relative group"),c(xoe,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($oe,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(koe,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Soe,"href","/docs/transformers/pr_17953/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(Roe,"href","/docs/transformers/pr_17953/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(Poe,"href","/docs/transformers/pr_17953/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(Boe,"href","/docs/transformers/pr_17953/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(Ioe,"href","/docs/transformers/pr_17953/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(Noe,"href","/docs/transformers/pr_17953/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(qoe,"href","/docs/transformers/pr_17953/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(joe,"href","/docs/transformers/pr_17953/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rw,"id","transformers.FlaxAutoModelForMultipleChoice"),c(rw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rw,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(uf,"class","relative group"),c(Doe,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Goe,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Ooe,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Voe,"href","/docs/transformers/pr_17953/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(Xoe,"href","/docs/transformers/pr_17953/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(zoe,"href","/docs/transformers/pr_17953/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(Qoe,"href","/docs/transformers/pr_17953/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(Woe,"href","/docs/transformers/pr_17953/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(Hoe,"href","/docs/transformers/pr_17953/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(Uoe,"href","/docs/transformers/pr_17953/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(Joe,"href","/docs/transformers/pr_17953/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gw,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(gw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gw,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(Ff,"class","relative group"),c(Yoe,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Koe,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Zoe,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ere,"href","/docs/transformers/pr_17953/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uw,"id","transformers.FlaxAutoModelForImageClassification"),c(uw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uw,"href","#transformers.FlaxAutoModelForImageClassification"),c(Ef,"class","relative group"),c(ore,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rre,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tre,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(are,"href","/docs/transformers/pr_17953/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(nre,"href","/docs/transformers/pr_17953/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mw,"id","transformers.FlaxAutoModelForVision2Seq"),c(Mw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Mw,"href","#transformers.FlaxAutoModelForVision2Seq"),c(Af,"class","relative group"),c(sre,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lre,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ire,"href","/docs/transformers/pr_17953/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ra,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dre,"href","/docs/transformers/pr_17953/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(d,_,null),e(p,h),e(p,Eo),e(Eo,wi),b(f,Sf,u),b(f,nt,u),e(nt,Ai),e(nt,Li),e(Li,z6),e(nt,Rf),b(f,Oe,u),b(f,Qe,u),e(Qe,yi),e(Qe,Rn),e(Rn,Q6),e(Qe,Pn),e(Qe,Bn),e(Bn,W6),e(Qe,xi),e(Qe,In),e(In,H6),e(Qe,$i),b(f,Pf,u),M($a,f,u),b(f,We,u),b(f,Ae,u),e(Ae,wS),e(Ae,ki),e(ki,AS),e(Ae,LS),b(f,Co,u),b(f,ka,u),e(ka,yS),e(ka,Bf),e(Bf,xS),e(ka,xWe),b(f,hVe,u),b(f,Si,u),e(Si,If),e(If,aae),M(U6,aae,null),e(Si,$We),e(Si,nae),e(nae,kWe),b(f,pVe,u),b(f,Nn,u),e(Nn,SWe),e(Nn,sae),e(sae,RWe),e(Nn,PWe),e(Nn,lae),e(lae,BWe),e(Nn,IWe),b(f,_Ve,u),M(J6,f,u),b(f,uVe,u),b(f,$S,u),e($S,NWe),b(f,bVe,u),M(Nf,f,u),b(f,vVe,u),b(f,Ri,u),e(Ri,qf),e(qf,iae),M(Y6,iae,null),e(Ri,qWe),e(Ri,dae),e(dae,jWe),b(f,FVe,u),b(f,wo,u),M(K6,wo,null),e(wo,DWe),e(wo,Z6),e(Z6,GWe),e(Z6,kS),e(kS,OWe),e(Z6,VWe),e(wo,XWe),e(wo,eL),e(eL,zWe),e(eL,cae),e(cae,QWe),e(eL,WWe),e(wo,HWe),e(wo,Ar),M(oL,Ar,null),e(Ar,UWe),e(Ar,fae),e(fae,JWe),e(Ar,YWe),e(Ar,Pi),e(Pi,KWe),e(Pi,mae),e(mae,ZWe),e(Pi,eHe),e(Pi,gae),e(gae,oHe),e(Pi,rHe),e(Ar,tHe),e(Ar,A),e(A,jf),e(jf,hae),e(hae,aHe),e(jf,nHe),e(jf,SS),e(SS,sHe),e(jf,lHe),e(A,iHe),e(A,Df),e(Df,pae),e(pae,dHe),e(Df,cHe),e(Df,RS),e(RS,fHe),e(Df,mHe),e(A,gHe),e(A,Gf),e(Gf,_ae),e(_ae,hHe),e(Gf,pHe),e(Gf,PS),e(PS,_He),e(Gf,uHe),e(A,bHe),e(A,Of),e(Of,uae),e(uae,vHe),e(Of,FHe),e(Of,BS),e(BS,THe),e(Of,MHe),e(A,EHe),e(A,Vf),e(Vf,bae),e(bae,CHe),e(Vf,wHe),e(Vf,IS),e(IS,AHe),e(Vf,LHe),e(A,yHe),e(A,Xf),e(Xf,vae),e(vae,xHe),e(Xf,$He),e(Xf,NS),e(NS,kHe),e(Xf,SHe),e(A,RHe),e(A,zf),e(zf,Fae),e(Fae,PHe),e(zf,BHe),e(zf,qS),e(qS,IHe),e(zf,NHe),e(A,qHe),e(A,Qf),e(Qf,Tae),e(Tae,jHe),e(Qf,DHe),e(Qf,jS),e(jS,GHe),e(Qf,OHe),e(A,VHe),e(A,Wf),e(Wf,Mae),e(Mae,XHe),e(Wf,zHe),e(Wf,DS),e(DS,QHe),e(Wf,WHe),e(A,HHe),e(A,Hf),e(Hf,Eae),e(Eae,UHe),e(Hf,JHe),e(Hf,GS),e(GS,YHe),e(Hf,KHe),e(A,ZHe),e(A,Uf),e(Uf,Cae),e(Cae,eUe),e(Uf,oUe),e(Uf,OS),e(OS,rUe),e(Uf,tUe),e(A,aUe),e(A,Jf),e(Jf,wae),e(wae,nUe),e(Jf,sUe),e(Jf,VS),e(VS,lUe),e(Jf,iUe),e(A,dUe),e(A,Yf),e(Yf,Aae),e(Aae,cUe),e(Yf,fUe),e(Yf,XS),e(XS,mUe),e(Yf,gUe),e(A,hUe),e(A,Kf),e(Kf,Lae),e(Lae,pUe),e(Kf,_Ue),e(Kf,zS),e(zS,uUe),e(Kf,bUe),e(A,vUe),e(A,Zf),e(Zf,yae),e(yae,FUe),e(Zf,TUe),e(Zf,QS),e(QS,MUe),e(Zf,EUe),e(A,CUe),e(A,em),e(em,xae),e(xae,wUe),e(em,AUe),e(em,WS),e(WS,LUe),e(em,yUe),e(A,xUe),e(A,om),e(om,$ae),e($ae,$Ue),e(om,kUe),e(om,HS),e(HS,SUe),e(om,RUe),e(A,PUe),e(A,rm),e(rm,kae),e(kae,BUe),e(rm,IUe),e(rm,US),e(US,NUe),e(rm,qUe),e(A,jUe),e(A,tm),e(tm,Sae),e(Sae,DUe),e(tm,GUe),e(tm,JS),e(JS,OUe),e(tm,VUe),e(A,XUe),e(A,am),e(am,Rae),e(Rae,zUe),e(am,QUe),e(am,YS),e(YS,WUe),e(am,HUe),e(A,UUe),e(A,nm),e(nm,Pae),e(Pae,JUe),e(nm,YUe),e(nm,KS),e(KS,KUe),e(nm,ZUe),e(A,eJe),e(A,sm),e(sm,Bae),e(Bae,oJe),e(sm,rJe),e(sm,ZS),e(ZS,tJe),e(sm,aJe),e(A,nJe),e(A,lm),e(lm,Iae),e(Iae,sJe),e(lm,lJe),e(lm,eR),e(eR,iJe),e(lm,dJe),e(A,cJe),e(A,im),e(im,Nae),e(Nae,fJe),e(im,mJe),e(im,oR),e(oR,gJe),e(im,hJe),e(A,pJe),e(A,dm),e(dm,qae),e(qae,_Je),e(dm,uJe),e(dm,rR),e(rR,bJe),e(dm,vJe),e(A,FJe),e(A,cm),e(cm,jae),e(jae,TJe),e(cm,MJe),e(cm,tR),e(tR,EJe),e(cm,CJe),e(A,wJe),e(A,fm),e(fm,Dae),e(Dae,AJe),e(fm,LJe),e(fm,aR),e(aR,yJe),e(fm,xJe),e(A,$Je),e(A,mm),e(mm,Gae),e(Gae,kJe),e(mm,SJe),e(mm,nR),e(nR,RJe),e(mm,PJe),e(A,BJe),e(A,gm),e(gm,Oae),e(Oae,IJe),e(gm,NJe),e(gm,sR),e(sR,qJe),e(gm,jJe),e(A,DJe),e(A,hm),e(hm,Vae),e(Vae,GJe),e(hm,OJe),e(hm,lR),e(lR,VJe),e(hm,XJe),e(A,zJe),e(A,pm),e(pm,Xae),e(Xae,QJe),e(pm,WJe),e(pm,iR),e(iR,HJe),e(pm,UJe),e(A,JJe),e(A,_m),e(_m,zae),e(zae,YJe),e(_m,KJe),e(_m,dR),e(dR,ZJe),e(_m,eYe),e(A,oYe),e(A,um),e(um,Qae),e(Qae,rYe),e(um,tYe),e(um,cR),e(cR,aYe),e(um,nYe),e(A,sYe),e(A,bm),e(bm,Wae),e(Wae,lYe),e(bm,iYe),e(bm,fR),e(fR,dYe),e(bm,cYe),e(A,fYe),e(A,vm),e(vm,Hae),e(Hae,mYe),e(vm,gYe),e(vm,mR),e(mR,hYe),e(vm,pYe),e(A,_Ye),e(A,Fm),e(Fm,Uae),e(Uae,uYe),e(Fm,bYe),e(Fm,gR),e(gR,vYe),e(Fm,FYe),e(A,TYe),e(A,Tm),e(Tm,Jae),e(Jae,MYe),e(Tm,EYe),e(Tm,hR),e(hR,CYe),e(Tm,wYe),e(A,AYe),e(A,Mm),e(Mm,Yae),e(Yae,LYe),e(Mm,yYe),e(Mm,pR),e(pR,xYe),e(Mm,$Ye),e(A,kYe),e(A,Em),e(Em,Kae),e(Kae,SYe),e(Em,RYe),e(Em,_R),e(_R,PYe),e(Em,BYe),e(A,IYe),e(A,Cm),e(Cm,Zae),e(Zae,NYe),e(Cm,qYe),e(Cm,uR),e(uR,jYe),e(Cm,DYe),e(A,GYe),e(A,wm),e(wm,ene),e(ene,OYe),e(wm,VYe),e(wm,bR),e(bR,XYe),e(wm,zYe),e(A,QYe),e(A,Am),e(Am,one),e(one,WYe),e(Am,HYe),e(Am,vR),e(vR,UYe),e(Am,JYe),e(A,YYe),e(A,Lm),e(Lm,rne),e(rne,KYe),e(Lm,ZYe),e(Lm,FR),e(FR,eKe),e(Lm,oKe),e(A,rKe),e(A,ym),e(ym,tne),e(tne,tKe),e(ym,aKe),e(ym,TR),e(TR,nKe),e(ym,sKe),e(A,lKe),e(A,xm),e(xm,ane),e(ane,iKe),e(xm,dKe),e(xm,MR),e(MR,cKe),e(xm,fKe),e(A,mKe),e(A,$m),e($m,nne),e(nne,gKe),e($m,hKe),e($m,ER),e(ER,pKe),e($m,_Ke),e(A,uKe),e(A,km),e(km,sne),e(sne,bKe),e(km,vKe),e(km,CR),e(CR,FKe),e(km,TKe),e(A,MKe),e(A,Sm),e(Sm,lne),e(lne,EKe),e(Sm,CKe),e(Sm,wR),e(wR,wKe),e(Sm,AKe),e(A,LKe),e(A,Rm),e(Rm,ine),e(ine,yKe),e(Rm,xKe),e(Rm,AR),e(AR,$Ke),e(Rm,kKe),e(A,SKe),e(A,Pm),e(Pm,dne),e(dne,RKe),e(Pm,PKe),e(Pm,LR),e(LR,BKe),e(Pm,IKe),e(A,NKe),e(A,Bm),e(Bm,cne),e(cne,qKe),e(Bm,jKe),e(Bm,yR),e(yR,DKe),e(Bm,GKe),e(A,OKe),e(A,Im),e(Im,fne),e(fne,VKe),e(Im,XKe),e(Im,xR),e(xR,zKe),e(Im,QKe),e(A,WKe),e(A,Nm),e(Nm,mne),e(mne,HKe),e(Nm,UKe),e(Nm,$R),e($R,JKe),e(Nm,YKe),e(A,KKe),e(A,qm),e(qm,gne),e(gne,ZKe),e(qm,eZe),e(qm,kR),e(kR,oZe),e(qm,rZe),e(A,tZe),e(A,jm),e(jm,hne),e(hne,aZe),e(jm,nZe),e(jm,SR),e(SR,sZe),e(jm,lZe),e(A,iZe),e(A,Dm),e(Dm,pne),e(pne,dZe),e(Dm,cZe),e(Dm,RR),e(RR,fZe),e(Dm,mZe),e(A,gZe),e(A,Gm),e(Gm,_ne),e(_ne,hZe),e(Gm,pZe),e(Gm,PR),e(PR,_Ze),e(Gm,uZe),e(A,bZe),e(A,Om),e(Om,une),e(une,vZe),e(Om,FZe),e(Om,BR),e(BR,TZe),e(Om,MZe),e(A,EZe),e(A,Vm),e(Vm,bne),e(bne,CZe),e(Vm,wZe),e(Vm,IR),e(IR,AZe),e(Vm,LZe),e(A,yZe),e(A,Xm),e(Xm,vne),e(vne,xZe),e(Xm,$Ze),e(Xm,NR),e(NR,kZe),e(Xm,SZe),e(A,RZe),e(A,zm),e(zm,Fne),e(Fne,PZe),e(zm,BZe),e(zm,qR),e(qR,IZe),e(zm,NZe),e(A,qZe),e(A,Qm),e(Qm,Tne),e(Tne,jZe),e(Qm,DZe),e(Qm,jR),e(jR,GZe),e(Qm,OZe),e(A,VZe),e(A,Wm),e(Wm,Mne),e(Mne,XZe),e(Wm,zZe),e(Wm,DR),e(DR,QZe),e(Wm,WZe),e(A,HZe),e(A,Hm),e(Hm,Ene),e(Ene,UZe),e(Hm,JZe),e(Hm,GR),e(GR,YZe),e(Hm,KZe),e(A,ZZe),e(A,Um),e(Um,Cne),e(Cne,eeo),e(Um,oeo),e(Um,OR),e(OR,reo),e(Um,teo),e(A,aeo),e(A,Jm),e(Jm,wne),e(wne,neo),e(Jm,seo),e(Jm,VR),e(VR,leo),e(Jm,ieo),e(A,deo),e(A,Ym),e(Ym,Ane),e(Ane,ceo),e(Ym,feo),e(Ym,XR),e(XR,meo),e(Ym,geo),e(A,heo),e(A,Km),e(Km,Lne),e(Lne,peo),e(Km,_eo),e(Km,zR),e(zR,ueo),e(Km,beo),e(A,veo),e(A,Zm),e(Zm,yne),e(yne,Feo),e(Zm,Teo),e(Zm,QR),e(QR,Meo),e(Zm,Eeo),e(A,Ceo),e(A,eg),e(eg,xne),e(xne,weo),e(eg,Aeo),e(eg,WR),e(WR,Leo),e(eg,yeo),e(A,xeo),e(A,og),e(og,$ne),e($ne,$eo),e(og,keo),e(og,HR),e(HR,Seo),e(og,Reo),e(A,Peo),e(A,rg),e(rg,kne),e(kne,Beo),e(rg,Ieo),e(rg,UR),e(UR,Neo),e(rg,qeo),e(A,jeo),e(A,tg),e(tg,Sne),e(Sne,Deo),e(tg,Geo),e(tg,JR),e(JR,Oeo),e(tg,Veo),e(A,Xeo),e(A,ag),e(ag,Rne),e(Rne,zeo),e(ag,Qeo),e(ag,YR),e(YR,Weo),e(ag,Heo),e(A,Ueo),e(A,ng),e(ng,Pne),e(Pne,Jeo),e(ng,Yeo),e(ng,KR),e(KR,Keo),e(ng,Zeo),e(A,eoo),e(A,sg),e(sg,Bne),e(Bne,ooo),e(sg,roo),e(sg,ZR),e(ZR,too),e(sg,aoo),e(A,noo),e(A,lg),e(lg,Ine),e(Ine,soo),e(lg,loo),e(lg,eP),e(eP,ioo),e(lg,doo),e(A,coo),e(A,ig),e(ig,Nne),e(Nne,foo),e(ig,moo),e(ig,oP),e(oP,goo),e(ig,hoo),e(A,poo),e(A,dg),e(dg,qne),e(qne,_oo),e(dg,uoo),e(dg,rP),e(rP,boo),e(dg,voo),e(A,Foo),e(A,cg),e(cg,jne),e(jne,Too),e(cg,Moo),e(cg,tP),e(tP,Eoo),e(cg,Coo),e(A,woo),e(A,fg),e(fg,Dne),e(Dne,Aoo),e(fg,Loo),e(fg,aP),e(aP,yoo),e(fg,xoo),e(A,$oo),e(A,mg),e(mg,Gne),e(Gne,koo),e(mg,Soo),e(mg,nP),e(nP,Roo),e(mg,Poo),e(A,Boo),e(A,gg),e(gg,One),e(One,Ioo),e(gg,Noo),e(gg,sP),e(sP,qoo),e(gg,joo),e(A,Doo),e(A,hg),e(hg,Vne),e(Vne,Goo),e(hg,Ooo),e(hg,lP),e(lP,Voo),e(hg,Xoo),e(A,zoo),e(A,pg),e(pg,Xne),e(Xne,Qoo),e(pg,Woo),e(pg,iP),e(iP,Hoo),e(pg,Uoo),e(A,Joo),e(A,_g),e(_g,zne),e(zne,Yoo),e(_g,Koo),e(_g,dP),e(dP,Zoo),e(_g,ero),e(A,oro),e(A,ug),e(ug,Qne),e(Qne,rro),e(ug,tro),e(ug,cP),e(cP,aro),e(ug,nro),e(A,sro),e(A,bg),e(bg,Wne),e(Wne,lro),e(bg,iro),e(bg,fP),e(fP,dro),e(bg,cro),e(A,fro),e(A,vg),e(vg,Hne),e(Hne,mro),e(vg,gro),e(vg,mP),e(mP,hro),e(vg,pro),e(A,_ro),e(A,Fg),e(Fg,Une),e(Une,uro),e(Fg,bro),e(Fg,gP),e(gP,vro),e(Fg,Fro),e(A,Tro),e(A,Tg),e(Tg,Jne),e(Jne,Mro),e(Tg,Ero),e(Tg,hP),e(hP,Cro),e(Tg,wro),e(A,Aro),e(A,Mg),e(Mg,Yne),e(Yne,Lro),e(Mg,yro),e(Mg,pP),e(pP,xro),e(Mg,$ro),e(A,kro),e(A,Eg),e(Eg,Kne),e(Kne,Sro),e(Eg,Rro),e(Eg,_P),e(_P,Pro),e(Eg,Bro),e(A,Iro),e(A,Cg),e(Cg,Zne),e(Zne,Nro),e(Cg,qro),e(Cg,uP),e(uP,jro),e(Cg,Dro),e(A,Gro),e(A,wg),e(wg,ese),e(ese,Oro),e(wg,Vro),e(wg,bP),e(bP,Xro),e(wg,zro),e(A,Qro),e(A,Ag),e(Ag,ose),e(ose,Wro),e(Ag,Hro),e(Ag,vP),e(vP,Uro),e(Ag,Jro),e(A,Yro),e(A,Lg),e(Lg,rse),e(rse,Kro),e(Lg,Zro),e(Lg,FP),e(FP,eto),e(Lg,oto),e(A,rto),e(A,yg),e(yg,tse),e(tse,tto),e(yg,ato),e(yg,TP),e(TP,nto),e(yg,sto),e(A,lto),e(A,xg),e(xg,ase),e(ase,ito),e(xg,dto),e(xg,MP),e(MP,cto),e(xg,fto),e(A,mto),e(A,$g),e($g,nse),e(nse,gto),e($g,hto),e($g,EP),e(EP,pto),e($g,_to),e(A,uto),e(A,kg),e(kg,sse),e(sse,bto),e(kg,vto),e(kg,CP),e(CP,Fto),e(kg,Tto),e(A,Mto),e(A,Sg),e(Sg,lse),e(lse,Eto),e(Sg,Cto),e(Sg,wP),e(wP,wto),e(Sg,Ato),e(A,Lto),e(A,Rg),e(Rg,ise),e(ise,yto),e(Rg,xto),e(Rg,AP),e(AP,$to),e(Rg,kto),e(A,Sto),e(A,Pg),e(Pg,dse),e(dse,Rto),e(Pg,Pto),e(Pg,LP),e(LP,Bto),e(Pg,Ito),e(A,Nto),e(A,Bg),e(Bg,cse),e(cse,qto),e(Bg,jto),e(Bg,yP),e(yP,Dto),e(Bg,Gto),e(A,Oto),e(A,Ig),e(Ig,fse),e(fse,Vto),e(Ig,Xto),e(Ig,xP),e(xP,zto),e(Ig,Qto),e(A,Wto),e(A,Ng),e(Ng,mse),e(mse,Hto),e(Ng,Uto),e(Ng,$P),e($P,Jto),e(Ng,Yto),e(A,Kto),e(A,qg),e(qg,gse),e(gse,Zto),e(qg,eao),e(qg,kP),e(kP,oao),e(qg,rao),e(A,tao),e(A,jg),e(jg,hse),e(hse,aao),e(jg,nao),e(jg,SP),e(SP,sao),e(jg,lao),e(A,iao),e(A,Dg),e(Dg,pse),e(pse,dao),e(Dg,cao),e(Dg,RP),e(RP,fao),e(Dg,mao),e(A,gao),e(A,Gg),e(Gg,_se),e(_se,hao),e(Gg,pao),e(Gg,PP),e(PP,_ao),e(Gg,uao),e(A,bao),e(A,Og),e(Og,use),e(use,vao),e(Og,Fao),e(Og,BP),e(BP,Tao),e(Og,Mao),e(A,Eao),e(A,Vg),e(Vg,bse),e(bse,Cao),e(Vg,wao),e(Vg,IP),e(IP,Aao),e(Vg,Lao),e(A,yao),e(A,Xg),e(Xg,vse),e(vse,xao),e(Xg,$ao),e(Xg,NP),e(NP,kao),e(Xg,Sao),e(A,Rao),e(A,zg),e(zg,Fse),e(Fse,Pao),e(zg,Bao),e(zg,qP),e(qP,Iao),e(zg,Nao),e(A,qao),e(A,Qg),e(Qg,Tse),e(Tse,jao),e(Qg,Dao),e(Qg,jP),e(jP,Gao),e(Qg,Oao),e(A,Vao),e(A,Wg),e(Wg,Mse),e(Mse,Xao),e(Wg,zao),e(Wg,DP),e(DP,Qao),e(Wg,Wao),e(Ar,Hao),M(Hg,Ar,null),e(wo,Uao),e(wo,Ug),M(rL,Ug,null),e(Ug,Jao),e(Ug,Ese),e(Ese,Yao),b(f,TVe,u),b(f,Bi,u),e(Bi,Jg),e(Jg,Cse),M(tL,Cse,null),e(Bi,Kao),e(Bi,wse),e(wse,Zao),b(f,MVe,u),b(f,Ao,u),M(aL,Ao,null),e(Ao,eno),e(Ao,nL),e(nL,ono),e(nL,GP),e(GP,rno),e(nL,tno),e(Ao,ano),e(Ao,sL),e(sL,nno),e(sL,Ase),e(Ase,sno),e(sL,lno),e(Ao,ino),e(Ao,Lr),M(lL,Lr,null),e(Lr,dno),e(Lr,Lse),e(Lse,cno),e(Lr,fno),e(Lr,Sa),e(Sa,mno),e(Sa,yse),e(yse,gno),e(Sa,hno),e(Sa,xse),e(xse,pno),e(Sa,_no),e(Sa,$se),e($se,uno),e(Sa,bno),e(Lr,vno),e(Lr,k),e(k,qn),e(qn,kse),e(kse,Fno),e(qn,Tno),e(qn,OP),e(OP,Mno),e(qn,Eno),e(qn,VP),e(VP,Cno),e(qn,wno),e(k,Ano),e(k,jn),e(jn,Sse),e(Sse,Lno),e(jn,yno),e(jn,XP),e(XP,xno),e(jn,$no),e(jn,zP),e(zP,kno),e(jn,Sno),e(k,Rno),e(k,Dn),e(Dn,Rse),e(Rse,Pno),e(Dn,Bno),e(Dn,QP),e(QP,Ino),e(Dn,Nno),e(Dn,WP),e(WP,qno),e(Dn,jno),e(k,Dno),e(k,Yg),e(Yg,Pse),e(Pse,Gno),e(Yg,Ono),e(Yg,HP),e(HP,Vno),e(Yg,Xno),e(k,zno),e(k,Gn),e(Gn,Bse),e(Bse,Qno),e(Gn,Wno),e(Gn,UP),e(UP,Hno),e(Gn,Uno),e(Gn,JP),e(JP,Jno),e(Gn,Yno),e(k,Kno),e(k,Kg),e(Kg,Ise),e(Ise,Zno),e(Kg,eso),e(Kg,YP),e(YP,oso),e(Kg,rso),e(k,tso),e(k,Zg),e(Zg,Nse),e(Nse,aso),e(Zg,nso),e(Zg,KP),e(KP,sso),e(Zg,lso),e(k,iso),e(k,eh),e(eh,qse),e(qse,dso),e(eh,cso),e(eh,ZP),e(ZP,fso),e(eh,mso),e(k,gso),e(k,On),e(On,jse),e(jse,hso),e(On,pso),e(On,eB),e(eB,_so),e(On,uso),e(On,oB),e(oB,bso),e(On,vso),e(k,Fso),e(k,Vn),e(Vn,Dse),e(Dse,Tso),e(Vn,Mso),e(Vn,rB),e(rB,Eso),e(Vn,Cso),e(Vn,tB),e(tB,wso),e(Vn,Aso),e(k,Lso),e(k,Xn),e(Xn,Gse),e(Gse,yso),e(Xn,xso),e(Xn,aB),e(aB,$so),e(Xn,kso),e(Xn,nB),e(nB,Sso),e(Xn,Rso),e(k,Pso),e(k,oh),e(oh,Ose),e(Ose,Bso),e(oh,Iso),e(oh,sB),e(sB,Nso),e(oh,qso),e(k,jso),e(k,rh),e(rh,Vse),e(Vse,Dso),e(rh,Gso),e(rh,lB),e(lB,Oso),e(rh,Vso),e(k,Xso),e(k,th),e(th,Xse),e(Xse,zso),e(th,Qso),e(th,iB),e(iB,Wso),e(th,Hso),e(k,Uso),e(k,zn),e(zn,zse),e(zse,Jso),e(zn,Yso),e(zn,dB),e(dB,Kso),e(zn,Zso),e(zn,cB),e(cB,elo),e(zn,olo),e(k,rlo),e(k,ah),e(ah,Qse),e(Qse,tlo),e(ah,alo),e(ah,fB),e(fB,nlo),e(ah,slo),e(k,llo),e(k,Qn),e(Qn,Wse),e(Wse,ilo),e(Qn,dlo),e(Qn,mB),e(mB,clo),e(Qn,flo),e(Qn,gB),e(gB,mlo),e(Qn,glo),e(k,hlo),e(k,Wn),e(Wn,Hse),e(Hse,plo),e(Wn,_lo),e(Wn,hB),e(hB,ulo),e(Wn,blo),e(Wn,pB),e(pB,vlo),e(Wn,Flo),e(k,Tlo),e(k,Hn),e(Hn,Use),e(Use,Mlo),e(Hn,Elo),e(Hn,_B),e(_B,Clo),e(Hn,wlo),e(Hn,uB),e(uB,Alo),e(Hn,Llo),e(k,ylo),e(k,Un),e(Un,Jse),e(Jse,xlo),e(Un,$lo),e(Un,bB),e(bB,klo),e(Un,Slo),e(Un,vB),e(vB,Rlo),e(Un,Plo),e(k,Blo),e(k,nh),e(nh,Yse),e(Yse,Ilo),e(nh,Nlo),e(nh,FB),e(FB,qlo),e(nh,jlo),e(k,Dlo),e(k,Jn),e(Jn,Kse),e(Kse,Glo),e(Jn,Olo),e(Jn,TB),e(TB,Vlo),e(Jn,Xlo),e(Jn,MB),e(MB,zlo),e(Jn,Qlo),e(k,Wlo),e(k,Yn),e(Yn,Zse),e(Zse,Hlo),e(Yn,Ulo),e(Yn,EB),e(EB,Jlo),e(Yn,Ylo),e(Yn,CB),e(CB,Klo),e(Yn,Zlo),e(k,eio),e(k,Kn),e(Kn,ele),e(ele,oio),e(Kn,rio),e(Kn,wB),e(wB,tio),e(Kn,aio),e(Kn,AB),e(AB,nio),e(Kn,sio),e(k,lio),e(k,Zn),e(Zn,ole),e(ole,iio),e(Zn,dio),e(Zn,LB),e(LB,cio),e(Zn,fio),e(Zn,yB),e(yB,mio),e(Zn,gio),e(k,hio),e(k,es),e(es,rle),e(rle,pio),e(es,_io),e(es,xB),e(xB,uio),e(es,bio),e(es,$B),e($B,vio),e(es,Fio),e(k,Tio),e(k,os),e(os,tle),e(tle,Mio),e(os,Eio),e(os,kB),e(kB,Cio),e(os,wio),e(os,SB),e(SB,Aio),e(os,Lio),e(k,yio),e(k,sh),e(sh,ale),e(ale,xio),e(sh,$io),e(sh,RB),e(RB,kio),e(sh,Sio),e(k,Rio),e(k,rs),e(rs,nle),e(nle,Pio),e(rs,Bio),e(rs,PB),e(PB,Iio),e(rs,Nio),e(rs,BB),e(BB,qio),e(rs,jio),e(k,Dio),e(k,lh),e(lh,sle),e(sle,Gio),e(lh,Oio),e(lh,IB),e(IB,Vio),e(lh,Xio),e(k,zio),e(k,ts),e(ts,lle),e(lle,Qio),e(ts,Wio),e(ts,NB),e(NB,Hio),e(ts,Uio),e(ts,qB),e(qB,Jio),e(ts,Yio),e(k,Kio),e(k,as),e(as,ile),e(ile,Zio),e(as,edo),e(as,jB),e(jB,odo),e(as,rdo),e(as,DB),e(DB,tdo),e(as,ado),e(k,ndo),e(k,ns),e(ns,dle),e(dle,sdo),e(ns,ldo),e(ns,GB),e(GB,ido),e(ns,ddo),e(ns,OB),e(OB,cdo),e(ns,fdo),e(k,mdo),e(k,ih),e(ih,cle),e(cle,gdo),e(ih,hdo),e(ih,VB),e(VB,pdo),e(ih,_do),e(k,udo),e(k,ss),e(ss,fle),e(fle,bdo),e(ss,vdo),e(ss,XB),e(XB,Fdo),e(ss,Tdo),e(ss,zB),e(zB,Mdo),e(ss,Edo),e(k,Cdo),e(k,ls),e(ls,mle),e(mle,wdo),e(ls,Ado),e(ls,QB),e(QB,Ldo),e(ls,ydo),e(ls,WB),e(WB,xdo),e(ls,$do),e(k,kdo),e(k,is),e(is,gle),e(gle,Sdo),e(is,Rdo),e(is,HB),e(HB,Pdo),e(is,Bdo),e(is,UB),e(UB,Ido),e(is,Ndo),e(k,qdo),e(k,dh),e(dh,hle),e(hle,jdo),e(dh,Ddo),e(dh,JB),e(JB,Gdo),e(dh,Odo),e(k,Vdo),e(k,ds),e(ds,ple),e(ple,Xdo),e(ds,zdo),e(ds,YB),e(YB,Qdo),e(ds,Wdo),e(ds,KB),e(KB,Hdo),e(ds,Udo),e(k,Jdo),e(k,cs),e(cs,_le),e(_le,Ydo),e(cs,Kdo),e(cs,ZB),e(ZB,Zdo),e(cs,eco),e(cs,eI),e(eI,oco),e(cs,rco),e(k,tco),e(k,fs),e(fs,ule),e(ule,aco),e(fs,nco),e(fs,oI),e(oI,sco),e(fs,lco),e(fs,rI),e(rI,ico),e(fs,dco),e(k,cco),e(k,ms),e(ms,ble),e(ble,fco),e(ms,mco),e(ms,tI),e(tI,gco),e(ms,hco),e(ms,aI),e(aI,pco),e(ms,_co),e(k,uco),e(k,gs),e(gs,vle),e(vle,bco),e(gs,vco),e(gs,nI),e(nI,Fco),e(gs,Tco),e(gs,sI),e(sI,Mco),e(gs,Eco),e(k,Cco),e(k,hs),e(hs,Fle),e(Fle,wco),e(hs,Aco),e(hs,lI),e(lI,Lco),e(hs,yco),e(hs,iI),e(iI,xco),e(hs,$co),e(k,kco),e(k,ps),e(ps,Tle),e(Tle,Sco),e(ps,Rco),e(ps,dI),e(dI,Pco),e(ps,Bco),e(ps,cI),e(cI,Ico),e(ps,Nco),e(k,qco),e(k,_s),e(_s,Mle),e(Mle,jco),e(_s,Dco),e(_s,fI),e(fI,Gco),e(_s,Oco),e(_s,mI),e(mI,Vco),e(_s,Xco),e(k,zco),e(k,ch),e(ch,Ele),e(Ele,Qco),e(ch,Wco),e(ch,gI),e(gI,Hco),e(ch,Uco),e(k,Jco),e(k,us),e(us,Cle),e(Cle,Yco),e(us,Kco),e(us,hI),e(hI,Zco),e(us,efo),e(us,pI),e(pI,ofo),e(us,rfo),e(k,tfo),e(k,fh),e(fh,wle),e(wle,afo),e(fh,nfo),e(fh,_I),e(_I,sfo),e(fh,lfo),e(k,ifo),e(k,mh),e(mh,Ale),e(Ale,dfo),e(mh,cfo),e(mh,uI),e(uI,ffo),e(mh,mfo),e(k,gfo),e(k,bs),e(bs,Lle),e(Lle,hfo),e(bs,pfo),e(bs,bI),e(bI,_fo),e(bs,ufo),e(bs,vI),e(vI,bfo),e(bs,vfo),e(k,Ffo),e(k,vs),e(vs,yle),e(yle,Tfo),e(vs,Mfo),e(vs,FI),e(FI,Efo),e(vs,Cfo),e(vs,TI),e(TI,wfo),e(vs,Afo),e(k,Lfo),e(k,Fs),e(Fs,xle),e(xle,yfo),e(Fs,xfo),e(Fs,MI),e(MI,$fo),e(Fs,kfo),e(Fs,EI),e(EI,Sfo),e(Fs,Rfo),e(k,Pfo),e(k,gh),e(gh,$le),e($le,Bfo),e(gh,Ifo),e(gh,CI),e(CI,Nfo),e(gh,qfo),e(k,jfo),e(k,Ts),e(Ts,kle),e(kle,Dfo),e(Ts,Gfo),e(Ts,wI),e(wI,Ofo),e(Ts,Vfo),e(Ts,AI),e(AI,Xfo),e(Ts,zfo),e(k,Qfo),e(k,Ms),e(Ms,Sle),e(Sle,Wfo),e(Ms,Hfo),e(Ms,LI),e(LI,Ufo),e(Ms,Jfo),e(Ms,yI),e(yI,Yfo),e(Ms,Kfo),e(k,Zfo),e(k,Es),e(Es,Rle),e(Rle,emo),e(Es,omo),e(Es,xI),e(xI,rmo),e(Es,tmo),e(Es,$I),e($I,amo),e(Es,nmo),e(k,smo),e(k,Cs),e(Cs,Ple),e(Ple,lmo),e(Cs,imo),e(Cs,kI),e(kI,dmo),e(Cs,cmo),e(Cs,SI),e(SI,fmo),e(Cs,mmo),e(k,gmo),e(k,ws),e(ws,Ble),e(Ble,hmo),e(ws,pmo),e(ws,RI),e(RI,_mo),e(ws,umo),e(ws,PI),e(PI,bmo),e(ws,vmo),e(k,Fmo),e(k,As),e(As,Ile),e(Ile,Tmo),e(As,Mmo),e(As,BI),e(BI,Emo),e(As,Cmo),e(As,II),e(II,wmo),e(As,Amo),e(k,Lmo),e(k,Ls),e(Ls,Nle),e(Nle,ymo),e(Ls,xmo),e(Ls,NI),e(NI,$mo),e(Ls,kmo),e(Ls,qI),e(qI,Smo),e(Ls,Rmo),e(k,Pmo),e(k,hh),e(hh,qle),e(qle,Bmo),e(hh,Imo),e(hh,jI),e(jI,Nmo),e(hh,qmo),e(k,jmo),e(k,ys),e(ys,jle),e(jle,Dmo),e(ys,Gmo),e(ys,DI),e(DI,Omo),e(ys,Vmo),e(ys,GI),e(GI,Xmo),e(ys,zmo),e(k,Qmo),e(k,ph),e(ph,Dle),e(Dle,Wmo),e(ph,Hmo),e(ph,OI),e(OI,Umo),e(ph,Jmo),e(k,Ymo),e(k,_h),e(_h,Gle),e(Gle,Kmo),e(_h,Zmo),e(_h,VI),e(VI,ego),e(_h,ogo),e(k,rgo),e(k,uh),e(uh,Ole),e(Ole,tgo),e(uh,ago),e(uh,XI),e(XI,ngo),e(uh,sgo),e(k,lgo),e(k,bh),e(bh,Vle),e(Vle,igo),e(bh,dgo),e(bh,zI),e(zI,cgo),e(bh,fgo),e(k,mgo),e(k,xs),e(xs,Xle),e(Xle,ggo),e(xs,hgo),e(xs,QI),e(QI,pgo),e(xs,_go),e(xs,WI),e(WI,ugo),e(xs,bgo),e(k,vgo),e(k,vh),e(vh,zle),e(zle,Fgo),e(vh,Tgo),e(vh,HI),e(HI,Mgo),e(vh,Ego),e(k,Cgo),e(k,$s),e($s,Qle),e(Qle,wgo),e($s,Ago),e($s,UI),e(UI,Lgo),e($s,ygo),e($s,JI),e(JI,xgo),e($s,$go),e(k,kgo),e(k,ks),e(ks,Wle),e(Wle,Sgo),e(ks,Rgo),e(ks,YI),e(YI,Pgo),e(ks,Bgo),e(ks,KI),e(KI,Igo),e(ks,Ngo),e(k,qgo),e(k,Ss),e(Ss,Hle),e(Hle,jgo),e(Ss,Dgo),e(Ss,ZI),e(ZI,Ggo),e(Ss,Ogo),e(Ss,eN),e(eN,Vgo),e(Ss,Xgo),e(k,zgo),e(k,Rs),e(Rs,Ule),e(Ule,Qgo),e(Rs,Wgo),e(Rs,oN),e(oN,Hgo),e(Rs,Ugo),e(Rs,rN),e(rN,Jgo),e(Rs,Ygo),e(k,Kgo),e(k,Ps),e(Ps,Jle),e(Jle,Zgo),e(Ps,eho),e(Ps,tN),e(tN,oho),e(Ps,rho),e(Ps,aN),e(aN,tho),e(Ps,aho),e(k,nho),e(k,Bs),e(Bs,Yle),e(Yle,sho),e(Bs,lho),e(Bs,nN),e(nN,iho),e(Bs,dho),e(Bs,sN),e(sN,cho),e(Bs,fho),e(k,mho),e(k,Fh),e(Fh,Kle),e(Kle,gho),e(Fh,hho),e(Fh,lN),e(lN,pho),e(Fh,_ho),e(k,uho),e(k,Th),e(Th,Zle),e(Zle,bho),e(Th,vho),e(Th,iN),e(iN,Fho),e(Th,Tho),e(k,Mho),e(k,Is),e(Is,eie),e(eie,Eho),e(Is,Cho),e(Is,dN),e(dN,who),e(Is,Aho),e(Is,cN),e(cN,Lho),e(Is,yho),e(k,xho),e(k,Ns),e(Ns,oie),e(oie,$ho),e(Ns,kho),e(Ns,fN),e(fN,Sho),e(Ns,Rho),e(Ns,mN),e(mN,Pho),e(Ns,Bho),e(k,Iho),e(k,qs),e(qs,rie),e(rie,Nho),e(qs,qho),e(qs,gN),e(gN,jho),e(qs,Dho),e(qs,hN),e(hN,Gho),e(qs,Oho),e(k,Vho),e(k,Mh),e(Mh,tie),e(tie,Xho),e(Mh,zho),e(Mh,pN),e(pN,Qho),e(Mh,Who),e(k,Hho),e(k,Eh),e(Eh,aie),e(aie,Uho),e(Eh,Jho),e(Eh,_N),e(_N,Yho),e(Eh,Kho),e(k,Zho),e(k,Ch),e(Ch,nie),e(nie,epo),e(Ch,opo),e(Ch,uN),e(uN,rpo),e(Ch,tpo),e(k,apo),e(k,js),e(js,sie),e(sie,npo),e(js,spo),e(js,bN),e(bN,lpo),e(js,ipo),e(js,vN),e(vN,dpo),e(js,cpo),e(k,fpo),e(k,Ds),e(Ds,lie),e(lie,mpo),e(Ds,gpo),e(Ds,FN),e(FN,hpo),e(Ds,ppo),e(Ds,TN),e(TN,_po),e(Ds,upo),e(k,bpo),e(k,wh),e(wh,iie),e(iie,vpo),e(wh,Fpo),e(wh,MN),e(MN,Tpo),e(wh,Mpo),e(k,Epo),e(k,Ah),e(Ah,die),e(die,Cpo),e(Ah,wpo),e(Ah,EN),e(EN,Apo),e(Ah,Lpo),e(k,ypo),e(k,Lh),e(Lh,cie),e(cie,xpo),e(Lh,$po),e(Lh,CN),e(CN,kpo),e(Lh,Spo),e(k,Rpo),e(k,Gs),e(Gs,fie),e(fie,Ppo),e(Gs,Bpo),e(Gs,wN),e(wN,Ipo),e(Gs,Npo),e(Gs,AN),e(AN,qpo),e(Gs,jpo),e(k,Dpo),e(k,yh),e(yh,mie),e(mie,Gpo),e(yh,Opo),e(yh,LN),e(LN,Vpo),e(yh,Xpo),e(k,zpo),e(k,xh),e(xh,gie),e(gie,Qpo),e(xh,Wpo),e(xh,yN),e(yN,Hpo),e(xh,Upo),e(k,Jpo),e(k,Os),e(Os,hie),e(hie,Ypo),e(Os,Kpo),e(Os,xN),e(xN,Zpo),e(Os,e_o),e(Os,$N),e($N,o_o),e(Os,r_o),e(k,t_o),e(k,Vs),e(Vs,pie),e(pie,a_o),e(Vs,n_o),e(Vs,kN),e(kN,s_o),e(Vs,l_o),e(Vs,SN),e(SN,i_o),e(Vs,d_o),e(k,c_o),e(k,Xs),e(Xs,_ie),e(_ie,f_o),e(Xs,m_o),e(Xs,RN),e(RN,g_o),e(Xs,h_o),e(Xs,PN),e(PN,p_o),e(Xs,__o),e(k,u_o),e(k,zs),e(zs,uie),e(uie,b_o),e(zs,v_o),e(zs,BN),e(BN,F_o),e(zs,T_o),e(zs,IN),e(IN,M_o),e(zs,E_o),e(Lr,C_o),M($h,Lr,null),e(Ao,w_o),e(Ao,kh),M(iL,kh,null),e(kh,A_o),e(kh,bie),e(bie,L_o),b(f,EVe,u),b(f,Ii,u),e(Ii,Sh),e(Sh,vie),M(dL,vie,null),e(Ii,y_o),e(Ii,Fie),e(Fie,x_o),b(f,CVe,u),b(f,Lo,u),M(cL,Lo,null),e(Lo,$_o),e(Lo,fL),e(fL,k_o),e(fL,NN),e(NN,S_o),e(fL,R_o),e(Lo,P_o),e(Lo,mL),e(mL,B_o),e(mL,Tie),e(Tie,I_o),e(mL,N_o),e(Lo,q_o),e(Lo,He),M(gL,He,null),e(He,j_o),e(He,Mie),e(Mie,D_o),e(He,G_o),e(He,Ra),e(Ra,O_o),e(Ra,Eie),e(Eie,V_o),e(Ra,X_o),e(Ra,Cie),e(Cie,z_o),e(Ra,Q_o),e(Ra,wie),e(wie,W_o),e(Ra,H_o),e(He,U_o),e(He,Y),e(Y,Rh),e(Rh,Aie),e(Aie,J_o),e(Rh,Y_o),e(Rh,qN),e(qN,K_o),e(Rh,Z_o),e(Y,euo),e(Y,Ph),e(Ph,Lie),e(Lie,ouo),e(Ph,ruo),e(Ph,jN),e(jN,tuo),e(Ph,auo),e(Y,nuo),e(Y,Bh),e(Bh,yie),e(yie,suo),e(Bh,luo),e(Bh,DN),e(DN,iuo),e(Bh,duo),e(Y,cuo),e(Y,Ih),e(Ih,xie),e(xie,fuo),e(Ih,muo),e(Ih,GN),e(GN,guo),e(Ih,huo),e(Y,puo),e(Y,Nh),e(Nh,$ie),e($ie,_uo),e(Nh,uuo),e(Nh,ON),e(ON,buo),e(Nh,vuo),e(Y,Fuo),e(Y,qh),e(qh,kie),e(kie,Tuo),e(qh,Muo),e(qh,VN),e(VN,Euo),e(qh,Cuo),e(Y,wuo),e(Y,jh),e(jh,Sie),e(Sie,Auo),e(jh,Luo),e(jh,XN),e(XN,yuo),e(jh,xuo),e(Y,$uo),e(Y,Dh),e(Dh,Rie),e(Rie,kuo),e(Dh,Suo),e(Dh,zN),e(zN,Ruo),e(Dh,Puo),e(Y,Buo),e(Y,Gh),e(Gh,Pie),e(Pie,Iuo),e(Gh,Nuo),e(Gh,QN),e(QN,quo),e(Gh,juo),e(Y,Duo),e(Y,Oh),e(Oh,Bie),e(Bie,Guo),e(Oh,Ouo),e(Oh,WN),e(WN,Vuo),e(Oh,Xuo),e(Y,zuo),e(Y,Vh),e(Vh,Iie),e(Iie,Quo),e(Vh,Wuo),e(Vh,HN),e(HN,Huo),e(Vh,Uuo),e(Y,Juo),e(Y,Xh),e(Xh,Nie),e(Nie,Yuo),e(Xh,Kuo),e(Xh,UN),e(UN,Zuo),e(Xh,e1o),e(Y,o1o),e(Y,zh),e(zh,qie),e(qie,r1o),e(zh,t1o),e(zh,JN),e(JN,a1o),e(zh,n1o),e(Y,s1o),e(Y,Qh),e(Qh,jie),e(jie,l1o),e(Qh,i1o),e(Qh,YN),e(YN,d1o),e(Qh,c1o),e(Y,f1o),e(Y,Wh),e(Wh,Die),e(Die,m1o),e(Wh,g1o),e(Wh,KN),e(KN,h1o),e(Wh,p1o),e(Y,_1o),e(Y,Hh),e(Hh,Gie),e(Gie,u1o),e(Hh,b1o),e(Hh,ZN),e(ZN,v1o),e(Hh,F1o),e(Y,T1o),e(Y,Uh),e(Uh,Oie),e(Oie,M1o),e(Uh,E1o),e(Uh,eq),e(eq,C1o),e(Uh,w1o),e(Y,A1o),e(Y,Jh),e(Jh,Vie),e(Vie,L1o),e(Jh,y1o),e(Jh,oq),e(oq,x1o),e(Jh,$1o),e(Y,k1o),e(Y,Yh),e(Yh,Xie),e(Xie,S1o),e(Yh,R1o),e(Yh,rq),e(rq,P1o),e(Yh,B1o),e(Y,I1o),e(Y,Kh),e(Kh,zie),e(zie,N1o),e(Kh,q1o),e(Kh,tq),e(tq,j1o),e(Kh,D1o),e(Y,G1o),e(Y,Zh),e(Zh,Qie),e(Qie,O1o),e(Zh,V1o),e(Zh,aq),e(aq,X1o),e(Zh,z1o),e(Y,Q1o),e(Y,ep),e(ep,Wie),e(Wie,W1o),e(ep,H1o),e(ep,nq),e(nq,U1o),e(ep,J1o),e(Y,Y1o),e(Y,op),e(op,Hie),e(Hie,K1o),e(op,Z1o),e(op,sq),e(sq,e2o),e(op,o2o),e(Y,r2o),e(Y,rp),e(rp,Uie),e(Uie,t2o),e(rp,a2o),e(rp,lq),e(lq,n2o),e(rp,s2o),e(Y,l2o),e(Y,tp),e(tp,Jie),e(Jie,i2o),e(tp,d2o),e(tp,iq),e(iq,c2o),e(tp,f2o),e(Y,m2o),e(Y,ap),e(ap,Yie),e(Yie,g2o),e(ap,h2o),e(ap,dq),e(dq,p2o),e(ap,_2o),e(Y,u2o),e(Y,np),e(np,Kie),e(Kie,b2o),e(np,v2o),e(np,cq),e(cq,F2o),e(np,T2o),e(Y,M2o),e(Y,sp),e(sp,Zie),e(Zie,E2o),e(sp,C2o),e(sp,fq),e(fq,w2o),e(sp,A2o),e(Y,L2o),e(Y,lp),e(lp,ede),e(ede,y2o),e(lp,x2o),e(lp,mq),e(mq,$2o),e(lp,k2o),e(Y,S2o),e(Y,ip),e(ip,ode),e(ode,R2o),e(ip,P2o),e(ip,gq),e(gq,B2o),e(ip,I2o),e(Y,N2o),e(Y,dp),e(dp,rde),e(rde,q2o),e(dp,j2o),e(dp,hq),e(hq,D2o),e(dp,G2o),e(Y,O2o),e(Y,cp),e(cp,tde),e(tde,V2o),e(cp,X2o),e(cp,pq),e(pq,z2o),e(cp,Q2o),e(Y,W2o),e(Y,fp),e(fp,ade),e(ade,H2o),e(fp,U2o),e(fp,_q),e(_q,J2o),e(fp,Y2o),e(He,K2o),M(mp,He,null),e(He,Z2o),M(gp,He,null),e(Lo,ebo),e(Lo,hp),M(hL,hp,null),e(hp,obo),e(hp,nde),e(nde,rbo),b(f,wVe,u),b(f,Ni,u),e(Ni,pp),e(pp,sde),M(pL,sde,null),e(Ni,tbo),e(Ni,lde),e(lde,abo),b(f,AVe,u),b(f,yo,u),M(_L,yo,null),e(yo,nbo),e(yo,uL),e(uL,sbo),e(uL,uq),e(uq,lbo),e(uL,ibo),e(yo,dbo),e(yo,bL),e(bL,cbo),e(bL,ide),e(ide,fbo),e(bL,mbo),e(yo,gbo),e(yo,Ue),M(vL,Ue,null),e(Ue,hbo),e(Ue,dde),e(dde,pbo),e(Ue,_bo),e(Ue,qi),e(qi,ubo),e(qi,cde),e(cde,bbo),e(qi,vbo),e(qi,fde),e(fde,Fbo),e(qi,Tbo),e(Ue,Mbo),e(Ue,he),e(he,_p),e(_p,mde),e(mde,Ebo),e(_p,Cbo),e(_p,bq),e(bq,wbo),e(_p,Abo),e(he,Lbo),e(he,up),e(up,gde),e(gde,ybo),e(up,xbo),e(up,hde),e(hde,$bo),e(up,kbo),e(he,Sbo),e(he,bp),e(bp,pde),e(pde,Rbo),e(bp,Pbo),e(bp,vq),e(vq,Bbo),e(bp,Ibo),e(he,Nbo),e(he,vp),e(vp,_de),e(_de,qbo),e(vp,jbo),e(vp,Fq),e(Fq,Dbo),e(vp,Gbo),e(he,Obo),e(he,Fp),e(Fp,ude),e(ude,Vbo),e(Fp,Xbo),e(Fp,Tq),e(Tq,zbo),e(Fp,Qbo),e(he,Wbo),e(he,Tp),e(Tp,bde),e(bde,Hbo),e(Tp,Ubo),e(Tp,Mq),e(Mq,Jbo),e(Tp,Ybo),e(he,Kbo),e(he,Mp),e(Mp,vde),e(vde,Zbo),e(Mp,evo),e(Mp,Eq),e(Eq,ovo),e(Mp,rvo),e(he,tvo),e(he,Ep),e(Ep,Fde),e(Fde,avo),e(Ep,nvo),e(Ep,Cq),e(Cq,svo),e(Ep,lvo),e(he,ivo),e(he,Cp),e(Cp,Tde),e(Tde,dvo),e(Cp,cvo),e(Cp,wq),e(wq,fvo),e(Cp,mvo),e(he,gvo),e(he,wp),e(wp,Mde),e(Mde,hvo),e(wp,pvo),e(wp,Aq),e(Aq,_vo),e(wp,uvo),e(he,bvo),e(he,Ap),e(Ap,Ede),e(Ede,vvo),e(Ap,Fvo),e(Ap,Lq),e(Lq,Tvo),e(Ap,Mvo),e(he,Evo),e(he,Lp),e(Lp,Cde),e(Cde,Cvo),e(Lp,wvo),e(Lp,yq),e(yq,Avo),e(Lp,Lvo),e(he,yvo),e(he,yp),e(yp,wde),e(wde,xvo),e(yp,$vo),e(yp,xq),e(xq,kvo),e(yp,Svo),e(he,Rvo),e(he,xp),e(xp,Ade),e(Ade,Pvo),e(xp,Bvo),e(xp,$q),e($q,Ivo),e(xp,Nvo),e(he,qvo),e(he,$p),e($p,Lde),e(Lde,jvo),e($p,Dvo),e($p,kq),e(kq,Gvo),e($p,Ovo),e(he,Vvo),e(he,kp),e(kp,yde),e(yde,Xvo),e(kp,zvo),e(kp,Sq),e(Sq,Qvo),e(kp,Wvo),e(he,Hvo),e(he,Sp),e(Sp,xde),e(xde,Uvo),e(Sp,Jvo),e(Sp,Rq),e(Rq,Yvo),e(Sp,Kvo),e(he,Zvo),e(he,Rp),e(Rp,$de),e($de,e3o),e(Rp,o3o),e(Rp,Pq),e(Pq,r3o),e(Rp,t3o),e(Ue,a3o),M(Pp,Ue,null),e(Ue,n3o),M(Bp,Ue,null),e(yo,s3o),e(yo,Ip),M(FL,Ip,null),e(Ip,l3o),e(Ip,kde),e(kde,i3o),b(f,LVe,u),b(f,ji,u),e(ji,Np),e(Np,Sde),M(TL,Sde,null),e(ji,d3o),e(ji,Rde),e(Rde,c3o),b(f,yVe,u),b(f,xo,u),M(ML,xo,null),e(xo,f3o),e(xo,Di),e(Di,m3o),e(Di,Bq),e(Bq,g3o),e(Di,h3o),e(Di,Iq),e(Iq,p3o),e(Di,_3o),e(xo,u3o),e(xo,EL),e(EL,b3o),e(EL,Pde),e(Pde,v3o),e(EL,F3o),e(xo,T3o),e(xo,st),M(CL,st,null),e(st,M3o),e(st,Bde),e(Bde,E3o),e(st,C3o),e(st,Gi),e(Gi,w3o),e(Gi,Ide),e(Ide,A3o),e(Gi,L3o),e(Gi,Nq),e(Nq,y3o),e(Gi,x3o),e(st,$3o),M(qp,st,null),e(xo,k3o),e(xo,Je),M(wL,Je,null),e(Je,S3o),e(Je,Nde),e(Nde,R3o),e(Je,P3o),e(Je,Pa),e(Pa,B3o),e(Pa,qde),e(qde,I3o),e(Pa,N3o),e(Pa,jde),e(jde,q3o),e(Pa,j3o),e(Pa,Dde),e(Dde,D3o),e(Pa,G3o),e(Je,O3o),e(Je,y),e(y,jp),e(jp,Gde),e(Gde,V3o),e(jp,X3o),e(jp,qq),e(qq,z3o),e(jp,Q3o),e(y,W3o),e(y,Dp),e(Dp,Ode),e(Ode,H3o),e(Dp,U3o),e(Dp,jq),e(jq,J3o),e(Dp,Y3o),e(y,K3o),e(y,Gp),e(Gp,Vde),e(Vde,Z3o),e(Gp,e5o),e(Gp,Dq),e(Dq,o5o),e(Gp,r5o),e(y,t5o),e(y,Op),e(Op,Xde),e(Xde,a5o),e(Op,n5o),e(Op,Gq),e(Gq,s5o),e(Op,l5o),e(y,i5o),e(y,Vp),e(Vp,zde),e(zde,d5o),e(Vp,c5o),e(Vp,Oq),e(Oq,f5o),e(Vp,m5o),e(y,g5o),e(y,Xp),e(Xp,Qde),e(Qde,h5o),e(Xp,p5o),e(Xp,Vq),e(Vq,_5o),e(Xp,u5o),e(y,b5o),e(y,zp),e(zp,Wde),e(Wde,v5o),e(zp,F5o),e(zp,Xq),e(Xq,T5o),e(zp,M5o),e(y,E5o),e(y,Qp),e(Qp,Hde),e(Hde,C5o),e(Qp,w5o),e(Qp,zq),e(zq,A5o),e(Qp,L5o),e(y,y5o),e(y,Wp),e(Wp,Ude),e(Ude,x5o),e(Wp,$5o),e(Wp,Qq),e(Qq,k5o),e(Wp,S5o),e(y,R5o),e(y,Hp),e(Hp,Jde),e(Jde,P5o),e(Hp,B5o),e(Hp,Wq),e(Wq,I5o),e(Hp,N5o),e(y,q5o),e(y,Up),e(Up,Yde),e(Yde,j5o),e(Up,D5o),e(Up,Hq),e(Hq,G5o),e(Up,O5o),e(y,V5o),e(y,Jp),e(Jp,Kde),e(Kde,X5o),e(Jp,z5o),e(Jp,Uq),e(Uq,Q5o),e(Jp,W5o),e(y,H5o),e(y,Yp),e(Yp,Zde),e(Zde,U5o),e(Yp,J5o),e(Yp,Jq),e(Jq,Y5o),e(Yp,K5o),e(y,Z5o),e(y,Kp),e(Kp,ece),e(ece,eFo),e(Kp,oFo),e(Kp,Yq),e(Yq,rFo),e(Kp,tFo),e(y,aFo),e(y,Zp),e(Zp,oce),e(oce,nFo),e(Zp,sFo),e(Zp,Kq),e(Kq,lFo),e(Zp,iFo),e(y,dFo),e(y,e_),e(e_,rce),e(rce,cFo),e(e_,fFo),e(e_,Zq),e(Zq,mFo),e(e_,gFo),e(y,hFo),e(y,o_),e(o_,tce),e(tce,pFo),e(o_,_Fo),e(o_,ej),e(ej,uFo),e(o_,bFo),e(y,vFo),e(y,r_),e(r_,ace),e(ace,FFo),e(r_,TFo),e(r_,oj),e(oj,MFo),e(r_,EFo),e(y,CFo),e(y,t_),e(t_,nce),e(nce,wFo),e(t_,AFo),e(t_,rj),e(rj,LFo),e(t_,yFo),e(y,xFo),e(y,a_),e(a_,sce),e(sce,$Fo),e(a_,kFo),e(a_,tj),e(tj,SFo),e(a_,RFo),e(y,PFo),e(y,n_),e(n_,lce),e(lce,BFo),e(n_,IFo),e(n_,aj),e(aj,NFo),e(n_,qFo),e(y,jFo),e(y,s_),e(s_,ice),e(ice,DFo),e(s_,GFo),e(s_,nj),e(nj,OFo),e(s_,VFo),e(y,XFo),e(y,l_),e(l_,dce),e(dce,zFo),e(l_,QFo),e(l_,sj),e(sj,WFo),e(l_,HFo),e(y,UFo),e(y,i_),e(i_,cce),e(cce,JFo),e(i_,YFo),e(i_,lj),e(lj,KFo),e(i_,ZFo),e(y,eTo),e(y,d_),e(d_,fce),e(fce,oTo),e(d_,rTo),e(d_,ij),e(ij,tTo),e(d_,aTo),e(y,nTo),e(y,c_),e(c_,mce),e(mce,sTo),e(c_,lTo),e(c_,dj),e(dj,iTo),e(c_,dTo),e(y,cTo),e(y,f_),e(f_,gce),e(gce,fTo),e(f_,mTo),e(f_,cj),e(cj,gTo),e(f_,hTo),e(y,pTo),e(y,m_),e(m_,hce),e(hce,_To),e(m_,uTo),e(m_,fj),e(fj,bTo),e(m_,vTo),e(y,FTo),e(y,g_),e(g_,pce),e(pce,TTo),e(g_,MTo),e(g_,mj),e(mj,ETo),e(g_,CTo),e(y,wTo),e(y,h_),e(h_,_ce),e(_ce,ATo),e(h_,LTo),e(h_,gj),e(gj,yTo),e(h_,xTo),e(y,$To),e(y,p_),e(p_,uce),e(uce,kTo),e(p_,STo),e(p_,hj),e(hj,RTo),e(p_,PTo),e(y,BTo),e(y,__),e(__,bce),e(bce,ITo),e(__,NTo),e(__,pj),e(pj,qTo),e(__,jTo),e(y,DTo),e(y,u_),e(u_,vce),e(vce,GTo),e(u_,OTo),e(u_,_j),e(_j,VTo),e(u_,XTo),e(y,zTo),e(y,b_),e(b_,Fce),e(Fce,QTo),e(b_,WTo),e(b_,uj),e(uj,HTo),e(b_,UTo),e(y,JTo),e(y,Qs),e(Qs,Tce),e(Tce,YTo),e(Qs,KTo),e(Qs,bj),e(bj,ZTo),e(Qs,e7o),e(Qs,vj),e(vj,o7o),e(Qs,r7o),e(y,t7o),e(y,v_),e(v_,Mce),e(Mce,a7o),e(v_,n7o),e(v_,Fj),e(Fj,s7o),e(v_,l7o),e(y,i7o),e(y,F_),e(F_,Ece),e(Ece,d7o),e(F_,c7o),e(F_,Tj),e(Tj,f7o),e(F_,m7o),e(y,g7o),e(y,T_),e(T_,Cce),e(Cce,h7o),e(T_,p7o),e(T_,Mj),e(Mj,_7o),e(T_,u7o),e(y,b7o),e(y,M_),e(M_,wce),e(wce,v7o),e(M_,F7o),e(M_,Ej),e(Ej,T7o),e(M_,M7o),e(y,E7o),e(y,E_),e(E_,Ace),e(Ace,C7o),e(E_,w7o),e(E_,Cj),e(Cj,A7o),e(E_,L7o),e(y,y7o),e(y,C_),e(C_,Lce),e(Lce,x7o),e(C_,$7o),e(C_,wj),e(wj,k7o),e(C_,S7o),e(y,R7o),e(y,w_),e(w_,yce),e(yce,P7o),e(w_,B7o),e(w_,Aj),e(Aj,I7o),e(w_,N7o),e(y,q7o),e(y,A_),e(A_,xce),e(xce,j7o),e(A_,D7o),e(A_,Lj),e(Lj,G7o),e(A_,O7o),e(y,V7o),e(y,L_),e(L_,$ce),e($ce,X7o),e(L_,z7o),e(L_,yj),e(yj,Q7o),e(L_,W7o),e(y,H7o),e(y,y_),e(y_,kce),e(kce,U7o),e(y_,J7o),e(y_,xj),e(xj,Y7o),e(y_,K7o),e(y,Z7o),e(y,x_),e(x_,Sce),e(Sce,e9o),e(x_,o9o),e(x_,$j),e($j,r9o),e(x_,t9o),e(y,a9o),e(y,$_),e($_,Rce),e(Rce,n9o),e($_,s9o),e($_,kj),e(kj,l9o),e($_,i9o),e(y,d9o),e(y,k_),e(k_,Pce),e(Pce,c9o),e(k_,f9o),e(k_,Sj),e(Sj,m9o),e(k_,g9o),e(y,h9o),e(y,S_),e(S_,Bce),e(Bce,p9o),e(S_,_9o),e(S_,Rj),e(Rj,u9o),e(S_,b9o),e(y,v9o),e(y,R_),e(R_,Ice),e(Ice,F9o),e(R_,T9o),e(R_,Pj),e(Pj,M9o),e(R_,E9o),e(y,C9o),e(y,P_),e(P_,Nce),e(Nce,w9o),e(P_,A9o),e(P_,Bj),e(Bj,L9o),e(P_,y9o),e(y,x9o),e(y,B_),e(B_,qce),e(qce,$9o),e(B_,k9o),e(B_,Ij),e(Ij,S9o),e(B_,R9o),e(y,P9o),e(y,I_),e(I_,jce),e(jce,B9o),e(I_,I9o),e(I_,Nj),e(Nj,N9o),e(I_,q9o),e(y,j9o),e(y,N_),e(N_,Dce),e(Dce,D9o),e(N_,G9o),e(N_,qj),e(qj,O9o),e(N_,V9o),e(y,X9o),e(y,q_),e(q_,Gce),e(Gce,z9o),e(q_,Q9o),e(q_,jj),e(jj,W9o),e(q_,H9o),e(y,U9o),e(y,j_),e(j_,Oce),e(Oce,J9o),e(j_,Y9o),e(j_,Dj),e(Dj,K9o),e(j_,Z9o),e(y,eMo),e(y,D_),e(D_,Vce),e(Vce,oMo),e(D_,rMo),e(D_,Gj),e(Gj,tMo),e(D_,aMo),e(y,nMo),e(y,G_),e(G_,Xce),e(Xce,sMo),e(G_,lMo),e(G_,Oj),e(Oj,iMo),e(G_,dMo),e(y,cMo),e(y,O_),e(O_,zce),e(zce,fMo),e(O_,mMo),e(O_,Vj),e(Vj,gMo),e(O_,hMo),e(y,pMo),e(y,V_),e(V_,Qce),e(Qce,_Mo),e(V_,uMo),e(V_,Xj),e(Xj,bMo),e(V_,vMo),e(y,FMo),e(y,X_),e(X_,Wce),e(Wce,TMo),e(X_,MMo),e(X_,zj),e(zj,EMo),e(X_,CMo),e(y,wMo),e(y,z_),e(z_,Hce),e(Hce,AMo),e(z_,LMo),e(z_,Qj),e(Qj,yMo),e(z_,xMo),e(y,$Mo),e(y,Q_),e(Q_,Uce),e(Uce,kMo),e(Q_,SMo),e(Q_,Wj),e(Wj,RMo),e(Q_,PMo),e(y,BMo),e(y,W_),e(W_,Jce),e(Jce,IMo),e(W_,NMo),e(W_,Hj),e(Hj,qMo),e(W_,jMo),e(y,DMo),e(y,H_),e(H_,Yce),e(Yce,GMo),e(H_,OMo),e(H_,Uj),e(Uj,VMo),e(H_,XMo),e(y,zMo),e(y,U_),e(U_,Kce),e(Kce,QMo),e(U_,WMo),e(U_,Jj),e(Jj,HMo),e(U_,UMo),e(y,JMo),e(y,J_),e(J_,Zce),e(Zce,YMo),e(J_,KMo),e(J_,Yj),e(Yj,ZMo),e(J_,e4o),e(y,o4o),e(y,Y_),e(Y_,efe),e(efe,r4o),e(Y_,t4o),e(Y_,Kj),e(Kj,a4o),e(Y_,n4o),e(y,s4o),e(y,K_),e(K_,ofe),e(ofe,l4o),e(K_,i4o),e(K_,Zj),e(Zj,d4o),e(K_,c4o),e(y,f4o),e(y,Z_),e(Z_,rfe),e(rfe,m4o),e(Z_,g4o),e(Z_,eD),e(eD,h4o),e(Z_,p4o),e(y,_4o),e(y,eu),e(eu,tfe),e(tfe,u4o),e(eu,b4o),e(eu,oD),e(oD,v4o),e(eu,F4o),e(y,T4o),e(y,ou),e(ou,afe),e(afe,M4o),e(ou,E4o),e(ou,rD),e(rD,C4o),e(ou,w4o),e(y,A4o),e(y,ru),e(ru,nfe),e(nfe,L4o),e(ru,y4o),e(ru,tD),e(tD,x4o),e(ru,$4o),e(y,k4o),e(y,tu),e(tu,sfe),e(sfe,S4o),e(tu,R4o),e(tu,aD),e(aD,P4o),e(tu,B4o),e(y,I4o),e(y,au),e(au,lfe),e(lfe,N4o),e(au,q4o),e(au,nD),e(nD,j4o),e(au,D4o),e(y,G4o),e(y,nu),e(nu,ife),e(ife,O4o),e(nu,V4o),e(nu,sD),e(sD,X4o),e(nu,z4o),e(y,Q4o),e(y,su),e(su,dfe),e(dfe,W4o),e(su,H4o),e(su,lD),e(lD,U4o),e(su,J4o),e(y,Y4o),e(y,lu),e(lu,cfe),e(cfe,K4o),e(lu,Z4o),e(lu,iD),e(iD,eEo),e(lu,oEo),e(y,rEo),e(y,iu),e(iu,ffe),e(ffe,tEo),e(iu,aEo),e(iu,dD),e(dD,nEo),e(iu,sEo),e(y,lEo),e(y,du),e(du,mfe),e(mfe,iEo),e(du,dEo),e(du,cD),e(cD,cEo),e(du,fEo),e(y,mEo),e(y,cu),e(cu,gfe),e(gfe,gEo),e(cu,hEo),e(cu,fD),e(fD,pEo),e(cu,_Eo),e(y,uEo),e(y,fu),e(fu,hfe),e(hfe,bEo),e(fu,vEo),e(fu,mD),e(mD,FEo),e(fu,TEo),e(y,MEo),e(y,mu),e(mu,pfe),e(pfe,EEo),e(mu,CEo),e(mu,gD),e(gD,wEo),e(mu,AEo),e(y,LEo),e(y,gu),e(gu,_fe),e(_fe,yEo),e(gu,xEo),e(gu,hD),e(hD,$Eo),e(gu,kEo),e(y,SEo),e(y,hu),e(hu,ufe),e(ufe,REo),e(hu,PEo),e(hu,pD),e(pD,BEo),e(hu,IEo),e(y,NEo),e(y,pu),e(pu,bfe),e(bfe,qEo),e(pu,jEo),e(pu,_D),e(_D,DEo),e(pu,GEo),e(y,OEo),e(y,_u),e(_u,vfe),e(vfe,VEo),e(_u,XEo),e(_u,uD),e(uD,zEo),e(_u,QEo),e(y,WEo),e(y,uu),e(uu,Ffe),e(Ffe,HEo),e(uu,UEo),e(uu,bD),e(bD,JEo),e(uu,YEo),e(y,KEo),e(y,bu),e(bu,Tfe),e(Tfe,ZEo),e(bu,eCo),e(bu,vD),e(vD,oCo),e(bu,rCo),e(y,tCo),e(y,vu),e(vu,Mfe),e(Mfe,aCo),e(vu,nCo),e(vu,FD),e(FD,sCo),e(vu,lCo),e(y,iCo),e(y,Fu),e(Fu,Efe),e(Efe,dCo),e(Fu,cCo),e(Fu,TD),e(TD,fCo),e(Fu,mCo),e(y,gCo),e(y,Tu),e(Tu,Cfe),e(Cfe,hCo),e(Tu,pCo),e(Tu,MD),e(MD,_Co),e(Tu,uCo),e(y,bCo),e(y,Mu),e(Mu,wfe),e(wfe,vCo),e(Mu,FCo),e(Mu,ED),e(ED,TCo),e(Mu,MCo),e(y,ECo),e(y,Eu),e(Eu,Afe),e(Afe,CCo),e(Eu,wCo),e(Eu,CD),e(CD,ACo),e(Eu,LCo),e(y,yCo),e(y,Cu),e(Cu,Lfe),e(Lfe,xCo),e(Cu,$Co),e(Cu,wD),e(wD,kCo),e(Cu,SCo),e(y,RCo),e(y,wu),e(wu,yfe),e(yfe,PCo),e(wu,BCo),e(wu,AD),e(AD,ICo),e(wu,NCo),e(y,qCo),e(y,Au),e(Au,xfe),e(xfe,jCo),e(Au,DCo),e(Au,LD),e(LD,GCo),e(Au,OCo),e(y,VCo),e(y,Lu),e(Lu,$fe),e($fe,XCo),e(Lu,zCo),e(Lu,yD),e(yD,QCo),e(Lu,WCo),e(y,HCo),e(y,yu),e(yu,kfe),e(kfe,UCo),e(yu,JCo),e(yu,xD),e(xD,YCo),e(yu,KCo),e(y,ZCo),e(y,xu),e(xu,Sfe),e(Sfe,e0o),e(xu,o0o),e(xu,$D),e($D,r0o),e(xu,t0o),e(y,a0o),e(y,$u),e($u,Rfe),e(Rfe,n0o),e($u,s0o),e($u,kD),e(kD,l0o),e($u,i0o),e(y,d0o),e(y,ku),e(ku,Pfe),e(Pfe,c0o),e(ku,f0o),e(ku,SD),e(SD,m0o),e(ku,g0o),e(y,h0o),e(y,Su),e(Su,Bfe),e(Bfe,p0o),e(Su,_0o),e(Su,RD),e(RD,u0o),e(Su,b0o),e(y,v0o),e(y,Ru),e(Ru,Ife),e(Ife,F0o),e(Ru,T0o),e(Ru,PD),e(PD,M0o),e(Ru,E0o),e(y,C0o),e(y,Pu),e(Pu,Nfe),e(Nfe,w0o),e(Pu,A0o),e(Pu,BD),e(BD,L0o),e(Pu,y0o),e(y,x0o),e(y,Bu),e(Bu,qfe),e(qfe,$0o),e(Bu,k0o),e(Bu,ID),e(ID,S0o),e(Bu,R0o),e(y,P0o),e(y,Iu),e(Iu,jfe),e(jfe,B0o),e(Iu,I0o),e(Iu,ND),e(ND,N0o),e(Iu,q0o),e(y,j0o),e(y,Nu),e(Nu,Dfe),e(Dfe,D0o),e(Nu,G0o),e(Nu,qD),e(qD,O0o),e(Nu,V0o),e(y,X0o),e(y,qu),e(qu,Gfe),e(Gfe,z0o),e(qu,Q0o),e(qu,jD),e(jD,W0o),e(qu,H0o),e(y,U0o),e(y,ju),e(ju,Ofe),e(Ofe,J0o),e(ju,Y0o),e(ju,DD),e(DD,K0o),e(ju,Z0o),e(Je,ewo),e(Je,Du),e(Du,owo),e(Du,Vfe),e(Vfe,rwo),e(Du,two),e(Du,Xfe),e(Xfe,awo),e(Je,nwo),M(Gu,Je,null),b(f,xVe,u),b(f,Oi,u),e(Oi,Ou),e(Ou,zfe),M(AL,zfe,null),e(Oi,swo),e(Oi,Qfe),e(Qfe,lwo),b(f,$Ve,u),b(f,$o,u),M(LL,$o,null),e($o,iwo),e($o,Vi),e(Vi,dwo),e(Vi,GD),e(GD,cwo),e(Vi,fwo),e(Vi,OD),e(OD,mwo),e(Vi,gwo),e($o,hwo),e($o,yL),e(yL,pwo),e(yL,Wfe),e(Wfe,_wo),e(yL,uwo),e($o,bwo),e($o,lt),M(xL,lt,null),e(lt,vwo),e(lt,Hfe),e(Hfe,Fwo),e(lt,Two),e(lt,Xi),e(Xi,Mwo),e(Xi,Ufe),e(Ufe,Ewo),e(Xi,Cwo),e(Xi,VD),e(VD,wwo),e(Xi,Awo),e(lt,Lwo),M(Vu,lt,null),e($o,ywo),e($o,Ye),M($L,Ye,null),e(Ye,xwo),e(Ye,Jfe),e(Jfe,$wo),e(Ye,kwo),e(Ye,Ba),e(Ba,Swo),e(Ba,Yfe),e(Yfe,Rwo),e(Ba,Pwo),e(Ba,Kfe),e(Kfe,Bwo),e(Ba,Iwo),e(Ba,Zfe),e(Zfe,Nwo),e(Ba,qwo),e(Ye,jwo),e(Ye,G),e(G,Xu),e(Xu,eme),e(eme,Dwo),e(Xu,Gwo),e(Xu,XD),e(XD,Owo),e(Xu,Vwo),e(G,Xwo),e(G,zu),e(zu,ome),e(ome,zwo),e(zu,Qwo),e(zu,zD),e(zD,Wwo),e(zu,Hwo),e(G,Uwo),e(G,Qu),e(Qu,rme),e(rme,Jwo),e(Qu,Ywo),e(Qu,QD),e(QD,Kwo),e(Qu,Zwo),e(G,eAo),e(G,Wu),e(Wu,tme),e(tme,oAo),e(Wu,rAo),e(Wu,WD),e(WD,tAo),e(Wu,aAo),e(G,nAo),e(G,Hu),e(Hu,ame),e(ame,sAo),e(Hu,lAo),e(Hu,HD),e(HD,iAo),e(Hu,dAo),e(G,cAo),e(G,Uu),e(Uu,nme),e(nme,fAo),e(Uu,mAo),e(Uu,UD),e(UD,gAo),e(Uu,hAo),e(G,pAo),e(G,Ju),e(Ju,sme),e(sme,_Ao),e(Ju,uAo),e(Ju,JD),e(JD,bAo),e(Ju,vAo),e(G,FAo),e(G,Yu),e(Yu,lme),e(lme,TAo),e(Yu,MAo),e(Yu,YD),e(YD,EAo),e(Yu,CAo),e(G,wAo),e(G,Ku),e(Ku,ime),e(ime,AAo),e(Ku,LAo),e(Ku,KD),e(KD,yAo),e(Ku,xAo),e(G,$Ao),e(G,Zu),e(Zu,dme),e(dme,kAo),e(Zu,SAo),e(Zu,ZD),e(ZD,RAo),e(Zu,PAo),e(G,BAo),e(G,e1),e(e1,cme),e(cme,IAo),e(e1,NAo),e(e1,eG),e(eG,qAo),e(e1,jAo),e(G,DAo),e(G,o1),e(o1,fme),e(fme,GAo),e(o1,OAo),e(o1,oG),e(oG,VAo),e(o1,XAo),e(G,zAo),e(G,r1),e(r1,mme),e(mme,QAo),e(r1,WAo),e(r1,rG),e(rG,HAo),e(r1,UAo),e(G,JAo),e(G,t1),e(t1,gme),e(gme,YAo),e(t1,KAo),e(t1,tG),e(tG,ZAo),e(t1,e6o),e(G,o6o),e(G,a1),e(a1,hme),e(hme,r6o),e(a1,t6o),e(a1,aG),e(aG,a6o),e(a1,n6o),e(G,s6o),e(G,n1),e(n1,pme),e(pme,l6o),e(n1,i6o),e(n1,nG),e(nG,d6o),e(n1,c6o),e(G,f6o),e(G,s1),e(s1,_me),e(_me,m6o),e(s1,g6o),e(s1,sG),e(sG,h6o),e(s1,p6o),e(G,_6o),e(G,l1),e(l1,ume),e(ume,u6o),e(l1,b6o),e(l1,lG),e(lG,v6o),e(l1,F6o),e(G,T6o),e(G,i1),e(i1,bme),e(bme,M6o),e(i1,E6o),e(i1,iG),e(iG,C6o),e(i1,w6o),e(G,A6o),e(G,d1),e(d1,vme),e(vme,L6o),e(d1,y6o),e(d1,dG),e(dG,x6o),e(d1,$6o),e(G,k6o),e(G,c1),e(c1,Fme),e(Fme,S6o),e(c1,R6o),e(c1,cG),e(cG,P6o),e(c1,B6o),e(G,I6o),e(G,f1),e(f1,Tme),e(Tme,N6o),e(f1,q6o),e(f1,fG),e(fG,j6o),e(f1,D6o),e(G,G6o),e(G,m1),e(m1,Mme),e(Mme,O6o),e(m1,V6o),e(m1,mG),e(mG,X6o),e(m1,z6o),e(G,Q6o),e(G,g1),e(g1,Eme),e(Eme,W6o),e(g1,H6o),e(g1,gG),e(gG,U6o),e(g1,J6o),e(G,Y6o),e(G,h1),e(h1,Cme),e(Cme,K6o),e(h1,Z6o),e(h1,hG),e(hG,eLo),e(h1,oLo),e(G,rLo),e(G,p1),e(p1,wme),e(wme,tLo),e(p1,aLo),e(p1,pG),e(pG,nLo),e(p1,sLo),e(G,lLo),e(G,_1),e(_1,Ame),e(Ame,iLo),e(_1,dLo),e(_1,_G),e(_G,cLo),e(_1,fLo),e(G,mLo),e(G,u1),e(u1,Lme),e(Lme,gLo),e(u1,hLo),e(u1,uG),e(uG,pLo),e(u1,_Lo),e(G,uLo),e(G,b1),e(b1,yme),e(yme,bLo),e(b1,vLo),e(b1,bG),e(bG,FLo),e(b1,TLo),e(G,MLo),e(G,v1),e(v1,xme),e(xme,ELo),e(v1,CLo),e(v1,vG),e(vG,wLo),e(v1,ALo),e(G,LLo),e(G,F1),e(F1,$me),e($me,yLo),e(F1,xLo),e(F1,FG),e(FG,$Lo),e(F1,kLo),e(G,SLo),e(G,T1),e(T1,kme),e(kme,RLo),e(T1,PLo),e(T1,TG),e(TG,BLo),e(T1,ILo),e(G,NLo),e(G,M1),e(M1,Sme),e(Sme,qLo),e(M1,jLo),e(M1,MG),e(MG,DLo),e(M1,GLo),e(G,OLo),e(G,E1),e(E1,Rme),e(Rme,VLo),e(E1,XLo),e(E1,EG),e(EG,zLo),e(E1,QLo),e(G,WLo),e(G,C1),e(C1,Pme),e(Pme,HLo),e(C1,ULo),e(C1,CG),e(CG,JLo),e(C1,YLo),e(G,KLo),e(G,w1),e(w1,Bme),e(Bme,ZLo),e(w1,eyo),e(w1,wG),e(wG,oyo),e(w1,ryo),e(G,tyo),e(G,A1),e(A1,Ime),e(Ime,ayo),e(A1,nyo),e(A1,AG),e(AG,syo),e(A1,lyo),e(G,iyo),e(G,L1),e(L1,Nme),e(Nme,dyo),e(L1,cyo),e(L1,LG),e(LG,fyo),e(L1,myo),e(G,gyo),e(G,y1),e(y1,qme),e(qme,hyo),e(y1,pyo),e(y1,yG),e(yG,_yo),e(y1,uyo),e(G,byo),e(G,x1),e(x1,jme),e(jme,vyo),e(x1,Fyo),e(x1,xG),e(xG,Tyo),e(x1,Myo),e(G,Eyo),e(G,$1),e($1,Dme),e(Dme,Cyo),e($1,wyo),e($1,$G),e($G,Ayo),e($1,Lyo),e(G,yyo),e(G,k1),e(k1,Gme),e(Gme,xyo),e(k1,$yo),e(k1,kG),e(kG,kyo),e(k1,Syo),e(G,Ryo),e(G,S1),e(S1,Ome),e(Ome,Pyo),e(S1,Byo),e(S1,SG),e(SG,Iyo),e(S1,Nyo),e(G,qyo),e(G,R1),e(R1,Vme),e(Vme,jyo),e(R1,Dyo),e(R1,RG),e(RG,Gyo),e(R1,Oyo),e(G,Vyo),e(G,P1),e(P1,Xme),e(Xme,Xyo),e(P1,zyo),e(P1,PG),e(PG,Qyo),e(P1,Wyo),e(Ye,Hyo),e(Ye,B1),e(B1,Uyo),e(B1,zme),e(zme,Jyo),e(B1,Yyo),e(B1,Qme),e(Qme,Kyo),e(Ye,Zyo),M(I1,Ye,null),b(f,kVe,u),b(f,zi,u),e(zi,N1),e(N1,Wme),M(kL,Wme,null),e(zi,e8o),e(zi,Hme),e(Hme,o8o),b(f,SVe,u),b(f,ko,u),M(SL,ko,null),e(ko,r8o),e(ko,Qi),e(Qi,t8o),e(Qi,BG),e(BG,a8o),e(Qi,n8o),e(Qi,IG),e(IG,s8o),e(Qi,l8o),e(ko,i8o),e(ko,RL),e(RL,d8o),e(RL,Ume),e(Ume,c8o),e(RL,f8o),e(ko,m8o),e(ko,it),M(PL,it,null),e(it,g8o),e(it,Jme),e(Jme,h8o),e(it,p8o),e(it,Wi),e(Wi,_8o),e(Wi,Yme),e(Yme,u8o),e(Wi,b8o),e(Wi,NG),e(NG,v8o),e(Wi,F8o),e(it,T8o),M(q1,it,null),e(ko,M8o),e(ko,Ke),M(BL,Ke,null),e(Ke,E8o),e(Ke,Kme),e(Kme,C8o),e(Ke,w8o),e(Ke,Ia),e(Ia,A8o),e(Ia,Zme),e(Zme,L8o),e(Ia,y8o),e(Ia,ege),e(ege,x8o),e(Ia,$8o),e(Ia,oge),e(oge,k8o),e(Ia,S8o),e(Ke,R8o),e(Ke,z),e(z,j1),e(j1,rge),e(rge,P8o),e(j1,B8o),e(j1,qG),e(qG,I8o),e(j1,N8o),e(z,q8o),e(z,D1),e(D1,tge),e(tge,j8o),e(D1,D8o),e(D1,jG),e(jG,G8o),e(D1,O8o),e(z,V8o),e(z,G1),e(G1,age),e(age,X8o),e(G1,z8o),e(G1,DG),e(DG,Q8o),e(G1,W8o),e(z,H8o),e(z,O1),e(O1,nge),e(nge,U8o),e(O1,J8o),e(O1,GG),e(GG,Y8o),e(O1,K8o),e(z,Z8o),e(z,V1),e(V1,sge),e(sge,exo),e(V1,oxo),e(V1,OG),e(OG,rxo),e(V1,txo),e(z,axo),e(z,X1),e(X1,lge),e(lge,nxo),e(X1,sxo),e(X1,VG),e(VG,lxo),e(X1,ixo),e(z,dxo),e(z,z1),e(z1,ige),e(ige,cxo),e(z1,fxo),e(z1,XG),e(XG,mxo),e(z1,gxo),e(z,hxo),e(z,Q1),e(Q1,dge),e(dge,pxo),e(Q1,_xo),e(Q1,zG),e(zG,uxo),e(Q1,bxo),e(z,vxo),e(z,W1),e(W1,cge),e(cge,Fxo),e(W1,Txo),e(W1,QG),e(QG,Mxo),e(W1,Exo),e(z,Cxo),e(z,H1),e(H1,fge),e(fge,wxo),e(H1,Axo),e(H1,WG),e(WG,Lxo),e(H1,yxo),e(z,xxo),e(z,U1),e(U1,mge),e(mge,$xo),e(U1,kxo),e(U1,HG),e(HG,Sxo),e(U1,Rxo),e(z,Pxo),e(z,J1),e(J1,gge),e(gge,Bxo),e(J1,Ixo),e(J1,UG),e(UG,Nxo),e(J1,qxo),e(z,jxo),e(z,Y1),e(Y1,hge),e(hge,Dxo),e(Y1,Gxo),e(Y1,JG),e(JG,Oxo),e(Y1,Vxo),e(z,Xxo),e(z,K1),e(K1,pge),e(pge,zxo),e(K1,Qxo),e(K1,YG),e(YG,Wxo),e(K1,Hxo),e(z,Uxo),e(z,Z1),e(Z1,_ge),e(_ge,Jxo),e(Z1,Yxo),e(Z1,KG),e(KG,Kxo),e(Z1,Zxo),e(z,e$o),e(z,e2),e(e2,uge),e(uge,o$o),e(e2,r$o),e(e2,ZG),e(ZG,t$o),e(e2,a$o),e(z,n$o),e(z,o2),e(o2,bge),e(bge,s$o),e(o2,l$o),e(o2,eO),e(eO,i$o),e(o2,d$o),e(z,c$o),e(z,r2),e(r2,vge),e(vge,f$o),e(r2,m$o),e(r2,oO),e(oO,g$o),e(r2,h$o),e(z,p$o),e(z,t2),e(t2,Fge),e(Fge,_$o),e(t2,u$o),e(t2,rO),e(rO,b$o),e(t2,v$o),e(z,F$o),e(z,a2),e(a2,Tge),e(Tge,T$o),e(a2,M$o),e(a2,tO),e(tO,E$o),e(a2,C$o),e(z,w$o),e(z,n2),e(n2,Mge),e(Mge,A$o),e(n2,L$o),e(n2,aO),e(aO,y$o),e(n2,x$o),e(z,$$o),e(z,s2),e(s2,Ege),e(Ege,k$o),e(s2,S$o),e(s2,nO),e(nO,R$o),e(s2,P$o),e(z,B$o),e(z,l2),e(l2,Cge),e(Cge,I$o),e(l2,N$o),e(l2,sO),e(sO,q$o),e(l2,j$o),e(z,D$o),e(z,i2),e(i2,wge),e(wge,G$o),e(i2,O$o),e(i2,lO),e(lO,V$o),e(i2,X$o),e(z,z$o),e(z,d2),e(d2,Age),e(Age,Q$o),e(d2,W$o),e(d2,iO),e(iO,H$o),e(d2,U$o),e(z,J$o),e(z,c2),e(c2,Lge),e(Lge,Y$o),e(c2,K$o),e(c2,dO),e(dO,Z$o),e(c2,eko),e(z,oko),e(z,f2),e(f2,yge),e(yge,rko),e(f2,tko),e(f2,cO),e(cO,ako),e(f2,nko),e(z,sko),e(z,m2),e(m2,xge),e(xge,lko),e(m2,iko),e(m2,fO),e(fO,dko),e(m2,cko),e(z,fko),e(z,g2),e(g2,$ge),e($ge,mko),e(g2,gko),e(g2,mO),e(mO,hko),e(g2,pko),e(z,_ko),e(z,h2),e(h2,kge),e(kge,uko),e(h2,bko),e(h2,gO),e(gO,vko),e(h2,Fko),e(z,Tko),e(z,p2),e(p2,Sge),e(Sge,Mko),e(p2,Eko),e(p2,hO),e(hO,Cko),e(p2,wko),e(z,Ako),e(z,_2),e(_2,Rge),e(Rge,Lko),e(_2,yko),e(_2,pO),e(pO,xko),e(_2,$ko),e(z,kko),e(z,u2),e(u2,Pge),e(Pge,Sko),e(u2,Rko),e(u2,_O),e(_O,Pko),e(u2,Bko),e(z,Iko),e(z,b2),e(b2,Bge),e(Bge,Nko),e(b2,qko),e(b2,uO),e(uO,jko),e(b2,Dko),e(z,Gko),e(z,v2),e(v2,Ige),e(Ige,Oko),e(v2,Vko),e(v2,bO),e(bO,Xko),e(v2,zko),e(z,Qko),e(z,F2),e(F2,Nge),e(Nge,Wko),e(F2,Hko),e(F2,vO),e(vO,Uko),e(F2,Jko),e(z,Yko),e(z,T2),e(T2,qge),e(qge,Kko),e(T2,Zko),e(T2,FO),e(FO,eSo),e(T2,oSo),e(z,rSo),e(z,M2),e(M2,jge),e(jge,tSo),e(M2,aSo),e(M2,TO),e(TO,nSo),e(M2,sSo),e(z,lSo),e(z,E2),e(E2,Dge),e(Dge,iSo),e(E2,dSo),e(E2,MO),e(MO,cSo),e(E2,fSo),e(z,mSo),e(z,C2),e(C2,Gge),e(Gge,gSo),e(C2,hSo),e(C2,EO),e(EO,pSo),e(C2,_So),e(Ke,uSo),e(Ke,w2),e(w2,bSo),e(w2,Oge),e(Oge,vSo),e(w2,FSo),e(w2,Vge),e(Vge,TSo),e(Ke,MSo),M(A2,Ke,null),b(f,RVe,u),b(f,Hi,u),e(Hi,L2),e(L2,Xge),M(IL,Xge,null),e(Hi,ESo),e(Hi,zge),e(zge,CSo),b(f,PVe,u),b(f,So,u),M(NL,So,null),e(So,wSo),e(So,Ui),e(Ui,ASo),e(Ui,CO),e(CO,LSo),e(Ui,ySo),e(Ui,wO),e(wO,xSo),e(Ui,$So),e(So,kSo),e(So,qL),e(qL,SSo),e(qL,Qge),e(Qge,RSo),e(qL,PSo),e(So,BSo),e(So,dt),M(jL,dt,null),e(dt,ISo),e(dt,Wge),e(Wge,NSo),e(dt,qSo),e(dt,Ji),e(Ji,jSo),e(Ji,Hge),e(Hge,DSo),e(Ji,GSo),e(Ji,AO),e(AO,OSo),e(Ji,VSo),e(dt,XSo),M(y2,dt,null),e(So,zSo),e(So,Ze),M(DL,Ze,null),e(Ze,QSo),e(Ze,Uge),e(Uge,WSo),e(Ze,HSo),e(Ze,Na),e(Na,USo),e(Na,Jge),e(Jge,JSo),e(Na,YSo),e(Na,Yge),e(Yge,KSo),e(Na,ZSo),e(Na,Kge),e(Kge,eRo),e(Na,oRo),e(Ze,rRo),e(Ze,W),e(W,x2),e(x2,Zge),e(Zge,tRo),e(x2,aRo),e(x2,LO),e(LO,nRo),e(x2,sRo),e(W,lRo),e(W,$2),e($2,ehe),e(ehe,iRo),e($2,dRo),e($2,yO),e(yO,cRo),e($2,fRo),e(W,mRo),e(W,k2),e(k2,ohe),e(ohe,gRo),e(k2,hRo),e(k2,xO),e(xO,pRo),e(k2,_Ro),e(W,uRo),e(W,S2),e(S2,rhe),e(rhe,bRo),e(S2,vRo),e(S2,$O),e($O,FRo),e(S2,TRo),e(W,MRo),e(W,R2),e(R2,the),e(the,ERo),e(R2,CRo),e(R2,kO),e(kO,wRo),e(R2,ARo),e(W,LRo),e(W,P2),e(P2,ahe),e(ahe,yRo),e(P2,xRo),e(P2,SO),e(SO,$Ro),e(P2,kRo),e(W,SRo),e(W,B2),e(B2,nhe),e(nhe,RRo),e(B2,PRo),e(B2,RO),e(RO,BRo),e(B2,IRo),e(W,NRo),e(W,I2),e(I2,she),e(she,qRo),e(I2,jRo),e(I2,PO),e(PO,DRo),e(I2,GRo),e(W,ORo),e(W,N2),e(N2,lhe),e(lhe,VRo),e(N2,XRo),e(N2,BO),e(BO,zRo),e(N2,QRo),e(W,WRo),e(W,q2),e(q2,ihe),e(ihe,HRo),e(q2,URo),e(q2,IO),e(IO,JRo),e(q2,YRo),e(W,KRo),e(W,j2),e(j2,dhe),e(dhe,ZRo),e(j2,ePo),e(j2,NO),e(NO,oPo),e(j2,rPo),e(W,tPo),e(W,D2),e(D2,che),e(che,aPo),e(D2,nPo),e(D2,qO),e(qO,sPo),e(D2,lPo),e(W,iPo),e(W,G2),e(G2,fhe),e(fhe,dPo),e(G2,cPo),e(G2,jO),e(jO,fPo),e(G2,mPo),e(W,gPo),e(W,O2),e(O2,mhe),e(mhe,hPo),e(O2,pPo),e(O2,DO),e(DO,_Po),e(O2,uPo),e(W,bPo),e(W,V2),e(V2,ghe),e(ghe,vPo),e(V2,FPo),e(V2,GO),e(GO,TPo),e(V2,MPo),e(W,EPo),e(W,X2),e(X2,hhe),e(hhe,CPo),e(X2,wPo),e(X2,OO),e(OO,APo),e(X2,LPo),e(W,yPo),e(W,z2),e(z2,phe),e(phe,xPo),e(z2,$Po),e(z2,VO),e(VO,kPo),e(z2,SPo),e(W,RPo),e(W,Q2),e(Q2,_he),e(_he,PPo),e(Q2,BPo),e(Q2,XO),e(XO,IPo),e(Q2,NPo),e(W,qPo),e(W,W2),e(W2,uhe),e(uhe,jPo),e(W2,DPo),e(W2,zO),e(zO,GPo),e(W2,OPo),e(W,VPo),e(W,H2),e(H2,bhe),e(bhe,XPo),e(H2,zPo),e(H2,QO),e(QO,QPo),e(H2,WPo),e(W,HPo),e(W,U2),e(U2,vhe),e(vhe,UPo),e(U2,JPo),e(U2,WO),e(WO,YPo),e(U2,KPo),e(W,ZPo),e(W,J2),e(J2,Fhe),e(Fhe,eBo),e(J2,oBo),e(J2,HO),e(HO,rBo),e(J2,tBo),e(W,aBo),e(W,Y2),e(Y2,The),e(The,nBo),e(Y2,sBo),e(Y2,UO),e(UO,lBo),e(Y2,iBo),e(W,dBo),e(W,K2),e(K2,Mhe),e(Mhe,cBo),e(K2,fBo),e(K2,JO),e(JO,mBo),e(K2,gBo),e(W,hBo),e(W,Z2),e(Z2,Ehe),e(Ehe,pBo),e(Z2,_Bo),e(Z2,YO),e(YO,uBo),e(Z2,bBo),e(W,vBo),e(W,eb),e(eb,Che),e(Che,FBo),e(eb,TBo),e(eb,KO),e(KO,MBo),e(eb,EBo),e(W,CBo),e(W,ob),e(ob,whe),e(whe,wBo),e(ob,ABo),e(ob,ZO),e(ZO,LBo),e(ob,yBo),e(W,xBo),e(W,rb),e(rb,Ahe),e(Ahe,$Bo),e(rb,kBo),e(rb,eV),e(eV,SBo),e(rb,RBo),e(W,PBo),e(W,tb),e(tb,Lhe),e(Lhe,BBo),e(tb,IBo),e(tb,oV),e(oV,NBo),e(tb,qBo),e(W,jBo),e(W,ab),e(ab,yhe),e(yhe,DBo),e(ab,GBo),e(ab,rV),e(rV,OBo),e(ab,VBo),e(W,XBo),e(W,nb),e(nb,xhe),e(xhe,zBo),e(nb,QBo),e(nb,tV),e(tV,WBo),e(nb,HBo),e(W,UBo),e(W,sb),e(sb,$he),e($he,JBo),e(sb,YBo),e(sb,aV),e(aV,KBo),e(sb,ZBo),e(W,eIo),e(W,lb),e(lb,khe),e(khe,oIo),e(lb,rIo),e(lb,nV),e(nV,tIo),e(lb,aIo),e(W,nIo),e(W,ib),e(ib,She),e(She,sIo),e(ib,lIo),e(ib,Rhe),e(Rhe,iIo),e(ib,dIo),e(W,cIo),e(W,db),e(db,Phe),e(Phe,fIo),e(db,mIo),e(db,sV),e(sV,gIo),e(db,hIo),e(W,pIo),e(W,cb),e(cb,Bhe),e(Bhe,_Io),e(cb,uIo),e(cb,lV),e(lV,bIo),e(cb,vIo),e(W,FIo),e(W,fb),e(fb,Ihe),e(Ihe,TIo),e(fb,MIo),e(fb,iV),e(iV,EIo),e(fb,CIo),e(W,wIo),e(W,mb),e(mb,Nhe),e(Nhe,AIo),e(mb,LIo),e(mb,dV),e(dV,yIo),e(mb,xIo),e(Ze,$Io),e(Ze,gb),e(gb,kIo),e(gb,qhe),e(qhe,SIo),e(gb,RIo),e(gb,jhe),e(jhe,PIo),e(Ze,BIo),M(hb,Ze,null),b(f,BVe,u),b(f,Yi,u),e(Yi,pb),e(pb,Dhe),M(GL,Dhe,null),e(Yi,IIo),e(Yi,Ghe),e(Ghe,NIo),b(f,IVe,u),b(f,Ro,u),M(OL,Ro,null),e(Ro,qIo),e(Ro,Ki),e(Ki,jIo),e(Ki,cV),e(cV,DIo),e(Ki,GIo),e(Ki,fV),e(fV,OIo),e(Ki,VIo),e(Ro,XIo),e(Ro,VL),e(VL,zIo),e(VL,Ohe),e(Ohe,QIo),e(VL,WIo),e(Ro,HIo),e(Ro,ct),M(XL,ct,null),e(ct,UIo),e(ct,Vhe),e(Vhe,JIo),e(ct,YIo),e(ct,Zi),e(Zi,KIo),e(Zi,Xhe),e(Xhe,ZIo),e(Zi,eNo),e(Zi,mV),e(mV,oNo),e(Zi,rNo),e(ct,tNo),M(_b,ct,null),e(Ro,aNo),e(Ro,eo),M(zL,eo,null),e(eo,nNo),e(eo,zhe),e(zhe,sNo),e(eo,lNo),e(eo,qa),e(qa,iNo),e(qa,Qhe),e(Qhe,dNo),e(qa,cNo),e(qa,Whe),e(Whe,fNo),e(qa,mNo),e(qa,Hhe),e(Hhe,gNo),e(qa,hNo),e(eo,pNo),e(eo,pe),e(pe,ub),e(ub,Uhe),e(Uhe,_No),e(ub,uNo),e(ub,gV),e(gV,bNo),e(ub,vNo),e(pe,FNo),e(pe,bb),e(bb,Jhe),e(Jhe,TNo),e(bb,MNo),e(bb,hV),e(hV,ENo),e(bb,CNo),e(pe,wNo),e(pe,vb),e(vb,Yhe),e(Yhe,ANo),e(vb,LNo),e(vb,pV),e(pV,yNo),e(vb,xNo),e(pe,$No),e(pe,Fb),e(Fb,Khe),e(Khe,kNo),e(Fb,SNo),e(Fb,_V),e(_V,RNo),e(Fb,PNo),e(pe,BNo),e(pe,Tb),e(Tb,Zhe),e(Zhe,INo),e(Tb,NNo),e(Tb,uV),e(uV,qNo),e(Tb,jNo),e(pe,DNo),e(pe,Mb),e(Mb,epe),e(epe,GNo),e(Mb,ONo),e(Mb,bV),e(bV,VNo),e(Mb,XNo),e(pe,zNo),e(pe,Eb),e(Eb,ope),e(ope,QNo),e(Eb,WNo),e(Eb,vV),e(vV,HNo),e(Eb,UNo),e(pe,JNo),e(pe,Cb),e(Cb,rpe),e(rpe,YNo),e(Cb,KNo),e(Cb,FV),e(FV,ZNo),e(Cb,eqo),e(pe,oqo),e(pe,wb),e(wb,tpe),e(tpe,rqo),e(wb,tqo),e(wb,TV),e(TV,aqo),e(wb,nqo),e(pe,sqo),e(pe,Ab),e(Ab,ape),e(ape,lqo),e(Ab,iqo),e(Ab,MV),e(MV,dqo),e(Ab,cqo),e(pe,fqo),e(pe,Lb),e(Lb,npe),e(npe,mqo),e(Lb,gqo),e(Lb,EV),e(EV,hqo),e(Lb,pqo),e(pe,_qo),e(pe,yb),e(yb,spe),e(spe,uqo),e(yb,bqo),e(yb,CV),e(CV,vqo),e(yb,Fqo),e(pe,Tqo),e(pe,xb),e(xb,lpe),e(lpe,Mqo),e(xb,Eqo),e(xb,wV),e(wV,Cqo),e(xb,wqo),e(pe,Aqo),e(pe,$b),e($b,ipe),e(ipe,Lqo),e($b,yqo),e($b,AV),e(AV,xqo),e($b,$qo),e(pe,kqo),e(pe,kb),e(kb,dpe),e(dpe,Sqo),e(kb,Rqo),e(kb,LV),e(LV,Pqo),e(kb,Bqo),e(pe,Iqo),e(pe,Sb),e(Sb,cpe),e(cpe,Nqo),e(Sb,qqo),e(Sb,yV),e(yV,jqo),e(Sb,Dqo),e(pe,Gqo),e(pe,Rb),e(Rb,fpe),e(fpe,Oqo),e(Rb,Vqo),e(Rb,xV),e(xV,Xqo),e(Rb,zqo),e(pe,Qqo),e(pe,Pb),e(Pb,mpe),e(mpe,Wqo),e(Pb,Hqo),e(Pb,$V),e($V,Uqo),e(Pb,Jqo),e(eo,Yqo),e(eo,Bb),e(Bb,Kqo),e(Bb,gpe),e(gpe,Zqo),e(Bb,ejo),e(Bb,hpe),e(hpe,ojo),e(eo,rjo),M(Ib,eo,null),b(f,NVe,u),b(f,ed,u),e(ed,Nb),e(Nb,ppe),M(QL,ppe,null),e(ed,tjo),e(ed,_pe),e(_pe,ajo),b(f,qVe,u),b(f,Po,u),M(WL,Po,null),e(Po,njo),e(Po,od),e(od,sjo),e(od,kV),e(kV,ljo),e(od,ijo),e(od,SV),e(SV,djo),e(od,cjo),e(Po,fjo),e(Po,HL),e(HL,mjo),e(HL,upe),e(upe,gjo),e(HL,hjo),e(Po,pjo),e(Po,ft),M(UL,ft,null),e(ft,_jo),e(ft,bpe),e(bpe,ujo),e(ft,bjo),e(ft,rd),e(rd,vjo),e(rd,vpe),e(vpe,Fjo),e(rd,Tjo),e(rd,RV),e(RV,Mjo),e(rd,Ejo),e(ft,Cjo),M(qb,ft,null),e(Po,wjo),e(Po,oo),M(JL,oo,null),e(oo,Ajo),e(oo,Fpe),e(Fpe,Ljo),e(oo,yjo),e(oo,ja),e(ja,xjo),e(ja,Tpe),e(Tpe,$jo),e(ja,kjo),e(ja,Mpe),e(Mpe,Sjo),e(ja,Rjo),e(ja,Epe),e(Epe,Pjo),e(ja,Bjo),e(oo,Ijo),e(oo,N),e(N,jb),e(jb,Cpe),e(Cpe,Njo),e(jb,qjo),e(jb,PV),e(PV,jjo),e(jb,Djo),e(N,Gjo),e(N,Db),e(Db,wpe),e(wpe,Ojo),e(Db,Vjo),e(Db,BV),e(BV,Xjo),e(Db,zjo),e(N,Qjo),e(N,Gb),e(Gb,Ape),e(Ape,Wjo),e(Gb,Hjo),e(Gb,IV),e(IV,Ujo),e(Gb,Jjo),e(N,Yjo),e(N,Ob),e(Ob,Lpe),e(Lpe,Kjo),e(Ob,Zjo),e(Ob,NV),e(NV,eDo),e(Ob,oDo),e(N,rDo),e(N,Vb),e(Vb,ype),e(ype,tDo),e(Vb,aDo),e(Vb,qV),e(qV,nDo),e(Vb,sDo),e(N,lDo),e(N,Xb),e(Xb,xpe),e(xpe,iDo),e(Xb,dDo),e(Xb,jV),e(jV,cDo),e(Xb,fDo),e(N,mDo),e(N,zb),e(zb,$pe),e($pe,gDo),e(zb,hDo),e(zb,DV),e(DV,pDo),e(zb,_Do),e(N,uDo),e(N,Qb),e(Qb,kpe),e(kpe,bDo),e(Qb,vDo),e(Qb,GV),e(GV,FDo),e(Qb,TDo),e(N,MDo),e(N,Wb),e(Wb,Spe),e(Spe,EDo),e(Wb,CDo),e(Wb,OV),e(OV,wDo),e(Wb,ADo),e(N,LDo),e(N,Hb),e(Hb,Rpe),e(Rpe,yDo),e(Hb,xDo),e(Hb,VV),e(VV,$Do),e(Hb,kDo),e(N,SDo),e(N,Ub),e(Ub,Ppe),e(Ppe,RDo),e(Ub,PDo),e(Ub,XV),e(XV,BDo),e(Ub,IDo),e(N,NDo),e(N,Jb),e(Jb,Bpe),e(Bpe,qDo),e(Jb,jDo),e(Jb,zV),e(zV,DDo),e(Jb,GDo),e(N,ODo),e(N,Yb),e(Yb,Ipe),e(Ipe,VDo),e(Yb,XDo),e(Yb,QV),e(QV,zDo),e(Yb,QDo),e(N,WDo),e(N,Kb),e(Kb,Npe),e(Npe,HDo),e(Kb,UDo),e(Kb,WV),e(WV,JDo),e(Kb,YDo),e(N,KDo),e(N,Zb),e(Zb,qpe),e(qpe,ZDo),e(Zb,eGo),e(Zb,HV),e(HV,oGo),e(Zb,rGo),e(N,tGo),e(N,ev),e(ev,jpe),e(jpe,aGo),e(ev,nGo),e(ev,UV),e(UV,sGo),e(ev,lGo),e(N,iGo),e(N,ov),e(ov,Dpe),e(Dpe,dGo),e(ov,cGo),e(ov,JV),e(JV,fGo),e(ov,mGo),e(N,gGo),e(N,rv),e(rv,Gpe),e(Gpe,hGo),e(rv,pGo),e(rv,YV),e(YV,_Go),e(rv,uGo),e(N,bGo),e(N,tv),e(tv,Ope),e(Ope,vGo),e(tv,FGo),e(tv,KV),e(KV,TGo),e(tv,MGo),e(N,EGo),e(N,av),e(av,Vpe),e(Vpe,CGo),e(av,wGo),e(av,ZV),e(ZV,AGo),e(av,LGo),e(N,yGo),e(N,nv),e(nv,Xpe),e(Xpe,xGo),e(nv,$Go),e(nv,eX),e(eX,kGo),e(nv,SGo),e(N,RGo),e(N,sv),e(sv,zpe),e(zpe,PGo),e(sv,BGo),e(sv,oX),e(oX,IGo),e(sv,NGo),e(N,qGo),e(N,lv),e(lv,Qpe),e(Qpe,jGo),e(lv,DGo),e(lv,rX),e(rX,GGo),e(lv,OGo),e(N,VGo),e(N,iv),e(iv,Wpe),e(Wpe,XGo),e(iv,zGo),e(iv,tX),e(tX,QGo),e(iv,WGo),e(N,HGo),e(N,dv),e(dv,Hpe),e(Hpe,UGo),e(dv,JGo),e(dv,aX),e(aX,YGo),e(dv,KGo),e(N,ZGo),e(N,cv),e(cv,Upe),e(Upe,eOo),e(cv,oOo),e(cv,nX),e(nX,rOo),e(cv,tOo),e(N,aOo),e(N,fv),e(fv,Jpe),e(Jpe,nOo),e(fv,sOo),e(fv,sX),e(sX,lOo),e(fv,iOo),e(N,dOo),e(N,mv),e(mv,Ype),e(Ype,cOo),e(mv,fOo),e(mv,lX),e(lX,mOo),e(mv,gOo),e(N,hOo),e(N,gv),e(gv,Kpe),e(Kpe,pOo),e(gv,_Oo),e(gv,iX),e(iX,uOo),e(gv,bOo),e(N,vOo),e(N,hv),e(hv,Zpe),e(Zpe,FOo),e(hv,TOo),e(hv,dX),e(dX,MOo),e(hv,EOo),e(N,COo),e(N,pv),e(pv,e_e),e(e_e,wOo),e(pv,AOo),e(pv,cX),e(cX,LOo),e(pv,yOo),e(N,xOo),e(N,_v),e(_v,o_e),e(o_e,$Oo),e(_v,kOo),e(_v,fX),e(fX,SOo),e(_v,ROo),e(N,POo),e(N,uv),e(uv,r_e),e(r_e,BOo),e(uv,IOo),e(uv,mX),e(mX,NOo),e(uv,qOo),e(N,jOo),e(N,bv),e(bv,t_e),e(t_e,DOo),e(bv,GOo),e(bv,gX),e(gX,OOo),e(bv,VOo),e(N,XOo),e(N,vv),e(vv,a_e),e(a_e,zOo),e(vv,QOo),e(vv,hX),e(hX,WOo),e(vv,HOo),e(N,UOo),e(N,Fv),e(Fv,n_e),e(n_e,JOo),e(Fv,YOo),e(Fv,pX),e(pX,KOo),e(Fv,ZOo),e(N,eVo),e(N,Tv),e(Tv,s_e),e(s_e,oVo),e(Tv,rVo),e(Tv,_X),e(_X,tVo),e(Tv,aVo),e(N,nVo),e(N,Mv),e(Mv,l_e),e(l_e,sVo),e(Mv,lVo),e(Mv,uX),e(uX,iVo),e(Mv,dVo),e(N,cVo),e(N,Ev),e(Ev,i_e),e(i_e,fVo),e(Ev,mVo),e(Ev,bX),e(bX,gVo),e(Ev,hVo),e(N,pVo),e(N,Cv),e(Cv,d_e),e(d_e,_Vo),e(Cv,uVo),e(Cv,vX),e(vX,bVo),e(Cv,vVo),e(N,FVo),e(N,wv),e(wv,c_e),e(c_e,TVo),e(wv,MVo),e(wv,FX),e(FX,EVo),e(wv,CVo),e(N,wVo),e(N,Av),e(Av,f_e),e(f_e,AVo),e(Av,LVo),e(Av,TX),e(TX,yVo),e(Av,xVo),e(N,$Vo),e(N,Lv),e(Lv,m_e),e(m_e,kVo),e(Lv,SVo),e(Lv,MX),e(MX,RVo),e(Lv,PVo),e(N,BVo),e(N,yv),e(yv,g_e),e(g_e,IVo),e(yv,NVo),e(yv,EX),e(EX,qVo),e(yv,jVo),e(N,DVo),e(N,xv),e(xv,h_e),e(h_e,GVo),e(xv,OVo),e(xv,CX),e(CX,VVo),e(xv,XVo),e(N,zVo),e(N,$v),e($v,p_e),e(p_e,QVo),e($v,WVo),e($v,wX),e(wX,HVo),e($v,UVo),e(N,JVo),e(N,kv),e(kv,__e),e(__e,YVo),e(kv,KVo),e(kv,AX),e(AX,ZVo),e(kv,eXo),e(N,oXo),e(N,Sv),e(Sv,u_e),e(u_e,rXo),e(Sv,tXo),e(Sv,LX),e(LX,aXo),e(Sv,nXo),e(N,sXo),e(N,Rv),e(Rv,b_e),e(b_e,lXo),e(Rv,iXo),e(Rv,yX),e(yX,dXo),e(Rv,cXo),e(N,fXo),e(N,Pv),e(Pv,v_e),e(v_e,mXo),e(Pv,gXo),e(Pv,xX),e(xX,hXo),e(Pv,pXo),e(oo,_Xo),e(oo,Bv),e(Bv,uXo),e(Bv,F_e),e(F_e,bXo),e(Bv,vXo),e(Bv,T_e),e(T_e,FXo),e(oo,TXo),M(Iv,oo,null),b(f,jVe,u),b(f,td,u),e(td,Nv),e(Nv,M_e),M(YL,M_e,null),e(td,MXo),e(td,E_e),e(E_e,EXo),b(f,DVe,u),b(f,Bo,u),M(KL,Bo,null),e(Bo,CXo),e(Bo,ad),e(ad,wXo),e(ad,$X),e($X,AXo),e(ad,LXo),e(ad,kX),e(kX,yXo),e(ad,xXo),e(Bo,$Xo),e(Bo,ZL),e(ZL,kXo),e(ZL,C_e),e(C_e,SXo),e(ZL,RXo),e(Bo,PXo),e(Bo,mt),M(ey,mt,null),e(mt,BXo),e(mt,w_e),e(w_e,IXo),e(mt,NXo),e(mt,nd),e(nd,qXo),e(nd,A_e),e(A_e,jXo),e(nd,DXo),e(nd,SX),e(SX,GXo),e(nd,OXo),e(mt,VXo),M(qv,mt,null),e(Bo,XXo),e(Bo,ro),M(oy,ro,null),e(ro,zXo),e(ro,L_e),e(L_e,QXo),e(ro,WXo),e(ro,Da),e(Da,HXo),e(Da,y_e),e(y_e,UXo),e(Da,JXo),e(Da,x_e),e(x_e,YXo),e(Da,KXo),e(Da,$_e),e($_e,ZXo),e(Da,ezo),e(ro,ozo),e(ro,Z),e(Z,jv),e(jv,k_e),e(k_e,rzo),e(jv,tzo),e(jv,RX),e(RX,azo),e(jv,nzo),e(Z,szo),e(Z,Dv),e(Dv,S_e),e(S_e,lzo),e(Dv,izo),e(Dv,PX),e(PX,dzo),e(Dv,czo),e(Z,fzo),e(Z,Gv),e(Gv,R_e),e(R_e,mzo),e(Gv,gzo),e(Gv,BX),e(BX,hzo),e(Gv,pzo),e(Z,_zo),e(Z,Ov),e(Ov,P_e),e(P_e,uzo),e(Ov,bzo),e(Ov,IX),e(IX,vzo),e(Ov,Fzo),e(Z,Tzo),e(Z,Vv),e(Vv,B_e),e(B_e,Mzo),e(Vv,Ezo),e(Vv,NX),e(NX,Czo),e(Vv,wzo),e(Z,Azo),e(Z,Xv),e(Xv,I_e),e(I_e,Lzo),e(Xv,yzo),e(Xv,qX),e(qX,xzo),e(Xv,$zo),e(Z,kzo),e(Z,zv),e(zv,N_e),e(N_e,Szo),e(zv,Rzo),e(zv,jX),e(jX,Pzo),e(zv,Bzo),e(Z,Izo),e(Z,Qv),e(Qv,q_e),e(q_e,Nzo),e(Qv,qzo),e(Qv,DX),e(DX,jzo),e(Qv,Dzo),e(Z,Gzo),e(Z,Wv),e(Wv,j_e),e(j_e,Ozo),e(Wv,Vzo),e(Wv,GX),e(GX,Xzo),e(Wv,zzo),e(Z,Qzo),e(Z,Hv),e(Hv,D_e),e(D_e,Wzo),e(Hv,Hzo),e(Hv,OX),e(OX,Uzo),e(Hv,Jzo),e(Z,Yzo),e(Z,Uv),e(Uv,G_e),e(G_e,Kzo),e(Uv,Zzo),e(Uv,VX),e(VX,eQo),e(Uv,oQo),e(Z,rQo),e(Z,Jv),e(Jv,O_e),e(O_e,tQo),e(Jv,aQo),e(Jv,XX),e(XX,nQo),e(Jv,sQo),e(Z,lQo),e(Z,Yv),e(Yv,V_e),e(V_e,iQo),e(Yv,dQo),e(Yv,zX),e(zX,cQo),e(Yv,fQo),e(Z,mQo),e(Z,Kv),e(Kv,X_e),e(X_e,gQo),e(Kv,hQo),e(Kv,QX),e(QX,pQo),e(Kv,_Qo),e(Z,uQo),e(Z,Zv),e(Zv,z_e),e(z_e,bQo),e(Zv,vQo),e(Zv,WX),e(WX,FQo),e(Zv,TQo),e(Z,MQo),e(Z,e3),e(e3,Q_e),e(Q_e,EQo),e(e3,CQo),e(e3,HX),e(HX,wQo),e(e3,AQo),e(Z,LQo),e(Z,o3),e(o3,W_e),e(W_e,yQo),e(o3,xQo),e(o3,UX),e(UX,$Qo),e(o3,kQo),e(Z,SQo),e(Z,r3),e(r3,H_e),e(H_e,RQo),e(r3,PQo),e(r3,JX),e(JX,BQo),e(r3,IQo),e(Z,NQo),e(Z,t3),e(t3,U_e),e(U_e,qQo),e(t3,jQo),e(t3,YX),e(YX,DQo),e(t3,GQo),e(Z,OQo),e(Z,a3),e(a3,J_e),e(J_e,VQo),e(a3,XQo),e(a3,KX),e(KX,zQo),e(a3,QQo),e(Z,WQo),e(Z,n3),e(n3,Y_e),e(Y_e,HQo),e(n3,UQo),e(n3,ZX),e(ZX,JQo),e(n3,YQo),e(Z,KQo),e(Z,s3),e(s3,K_e),e(K_e,ZQo),e(s3,eWo),e(s3,ez),e(ez,oWo),e(s3,rWo),e(Z,tWo),e(Z,l3),e(l3,Z_e),e(Z_e,aWo),e(l3,nWo),e(l3,oz),e(oz,sWo),e(l3,lWo),e(Z,iWo),e(Z,i3),e(i3,eue),e(eue,dWo),e(i3,cWo),e(i3,rz),e(rz,fWo),e(i3,mWo),e(Z,gWo),e(Z,d3),e(d3,oue),e(oue,hWo),e(d3,pWo),e(d3,tz),e(tz,_Wo),e(d3,uWo),e(Z,bWo),e(Z,c3),e(c3,rue),e(rue,vWo),e(c3,FWo),e(c3,az),e(az,TWo),e(c3,MWo),e(Z,EWo),e(Z,f3),e(f3,tue),e(tue,CWo),e(f3,wWo),e(f3,nz),e(nz,AWo),e(f3,LWo),e(Z,yWo),e(Z,m3),e(m3,aue),e(aue,xWo),e(m3,$Wo),e(m3,sz),e(sz,kWo),e(m3,SWo),e(Z,RWo),e(Z,g3),e(g3,nue),e(nue,PWo),e(g3,BWo),e(g3,lz),e(lz,IWo),e(g3,NWo),e(Z,qWo),e(Z,h3),e(h3,sue),e(sue,jWo),e(h3,DWo),e(h3,iz),e(iz,GWo),e(h3,OWo),e(ro,VWo),e(ro,p3),e(p3,XWo),e(p3,lue),e(lue,zWo),e(p3,QWo),e(p3,iue),e(iue,WWo),e(ro,HWo),M(_3,ro,null),b(f,GVe,u),b(f,sd,u),e(sd,u3),e(u3,due),M(ry,due,null),e(sd,UWo),e(sd,cue),e(cue,JWo),b(f,OVe,u),b(f,Io,u),M(ty,Io,null),e(Io,YWo),e(Io,ld),e(ld,KWo),e(ld,dz),e(dz,ZWo),e(ld,eHo),e(ld,cz),e(cz,oHo),e(ld,rHo),e(Io,tHo),e(Io,ay),e(ay,aHo),e(ay,fue),e(fue,nHo),e(ay,sHo),e(Io,lHo),e(Io,gt),M(ny,gt,null),e(gt,iHo),e(gt,mue),e(mue,dHo),e(gt,cHo),e(gt,id),e(id,fHo),e(id,gue),e(gue,mHo),e(id,gHo),e(id,fz),e(fz,hHo),e(id,pHo),e(gt,_Ho),M(b3,gt,null),e(Io,uHo),e(Io,to),M(sy,to,null),e(to,bHo),e(to,hue),e(hue,vHo),e(to,FHo),e(to,Ga),e(Ga,THo),e(Ga,pue),e(pue,MHo),e(Ga,EHo),e(Ga,_ue),e(_ue,CHo),e(Ga,wHo),e(Ga,uue),e(uue,AHo),e(Ga,LHo),e(to,yHo),e(to,No),e(No,v3),e(v3,bue),e(bue,xHo),e(v3,$Ho),e(v3,mz),e(mz,kHo),e(v3,SHo),e(No,RHo),e(No,F3),e(F3,vue),e(vue,PHo),e(F3,BHo),e(F3,gz),e(gz,IHo),e(F3,NHo),e(No,qHo),e(No,T3),e(T3,Fue),e(Fue,jHo),e(T3,DHo),e(T3,hz),e(hz,GHo),e(T3,OHo),e(No,VHo),e(No,M3),e(M3,Tue),e(Tue,XHo),e(M3,zHo),e(M3,pz),e(pz,QHo),e(M3,WHo),e(No,HHo),e(No,E3),e(E3,Mue),e(Mue,UHo),e(E3,JHo),e(E3,_z),e(_z,YHo),e(E3,KHo),e(No,ZHo),e(No,C3),e(C3,Eue),e(Eue,eUo),e(C3,oUo),e(C3,uz),e(uz,rUo),e(C3,tUo),e(to,aUo),e(to,w3),e(w3,nUo),e(w3,Cue),e(Cue,sUo),e(w3,lUo),e(w3,wue),e(wue,iUo),e(to,dUo),M(A3,to,null),b(f,VVe,u),b(f,dd,u),e(dd,L3),e(L3,Aue),M(ly,Aue,null),e(dd,cUo),e(dd,Lue),e(Lue,fUo),b(f,XVe,u),b(f,qo,u),M(iy,qo,null),e(qo,mUo),e(qo,cd),e(cd,gUo),e(cd,bz),e(bz,hUo),e(cd,pUo),e(cd,vz),e(vz,_Uo),e(cd,uUo),e(qo,bUo),e(qo,dy),e(dy,vUo),e(dy,yue),e(yue,FUo),e(dy,TUo),e(qo,MUo),e(qo,ht),M(cy,ht,null),e(ht,EUo),e(ht,xue),e(xue,CUo),e(ht,wUo),e(ht,fd),e(fd,AUo),e(fd,$ue),e($ue,LUo),e(fd,yUo),e(fd,Fz),e(Fz,xUo),e(fd,$Uo),e(ht,kUo),M(y3,ht,null),e(qo,SUo),e(qo,ao),M(fy,ao,null),e(ao,RUo),e(ao,kue),e(kue,PUo),e(ao,BUo),e(ao,Oa),e(Oa,IUo),e(Oa,Sue),e(Sue,NUo),e(Oa,qUo),e(Oa,Rue),e(Rue,jUo),e(Oa,DUo),e(Oa,Pue),e(Pue,GUo),e(Oa,OUo),e(ao,VUo),e(ao,U),e(U,x3),e(x3,Bue),e(Bue,XUo),e(x3,zUo),e(x3,Tz),e(Tz,QUo),e(x3,WUo),e(U,HUo),e(U,$3),e($3,Iue),e(Iue,UUo),e($3,JUo),e($3,Mz),e(Mz,YUo),e($3,KUo),e(U,ZUo),e(U,k3),e(k3,Nue),e(Nue,eJo),e(k3,oJo),e(k3,Ez),e(Ez,rJo),e(k3,tJo),e(U,aJo),e(U,S3),e(S3,que),e(que,nJo),e(S3,sJo),e(S3,Cz),e(Cz,lJo),e(S3,iJo),e(U,dJo),e(U,R3),e(R3,jue),e(jue,cJo),e(R3,fJo),e(R3,wz),e(wz,mJo),e(R3,gJo),e(U,hJo),e(U,P3),e(P3,Due),e(Due,pJo),e(P3,_Jo),e(P3,Az),e(Az,uJo),e(P3,bJo),e(U,vJo),e(U,B3),e(B3,Gue),e(Gue,FJo),e(B3,TJo),e(B3,Lz),e(Lz,MJo),e(B3,EJo),e(U,CJo),e(U,I3),e(I3,Oue),e(Oue,wJo),e(I3,AJo),e(I3,yz),e(yz,LJo),e(I3,yJo),e(U,xJo),e(U,N3),e(N3,Vue),e(Vue,$Jo),e(N3,kJo),e(N3,xz),e(xz,SJo),e(N3,RJo),e(U,PJo),e(U,q3),e(q3,Xue),e(Xue,BJo),e(q3,IJo),e(q3,$z),e($z,NJo),e(q3,qJo),e(U,jJo),e(U,j3),e(j3,zue),e(zue,DJo),e(j3,GJo),e(j3,kz),e(kz,OJo),e(j3,VJo),e(U,XJo),e(U,D3),e(D3,Que),e(Que,zJo),e(D3,QJo),e(D3,Sz),e(Sz,WJo),e(D3,HJo),e(U,UJo),e(U,G3),e(G3,Wue),e(Wue,JJo),e(G3,YJo),e(G3,Rz),e(Rz,KJo),e(G3,ZJo),e(U,eYo),e(U,O3),e(O3,Hue),e(Hue,oYo),e(O3,rYo),e(O3,Pz),e(Pz,tYo),e(O3,aYo),e(U,nYo),e(U,V3),e(V3,Uue),e(Uue,sYo),e(V3,lYo),e(V3,Bz),e(Bz,iYo),e(V3,dYo),e(U,cYo),e(U,X3),e(X3,Jue),e(Jue,fYo),e(X3,mYo),e(X3,Iz),e(Iz,gYo),e(X3,hYo),e(U,pYo),e(U,z3),e(z3,Yue),e(Yue,_Yo),e(z3,uYo),e(z3,Nz),e(Nz,bYo),e(z3,vYo),e(U,FYo),e(U,Q3),e(Q3,Kue),e(Kue,TYo),e(Q3,MYo),e(Q3,qz),e(qz,EYo),e(Q3,CYo),e(U,wYo),e(U,W3),e(W3,Zue),e(Zue,AYo),e(W3,LYo),e(W3,jz),e(jz,yYo),e(W3,xYo),e(U,$Yo),e(U,H3),e(H3,e1e),e(e1e,kYo),e(H3,SYo),e(H3,Dz),e(Dz,RYo),e(H3,PYo),e(U,BYo),e(U,U3),e(U3,o1e),e(o1e,IYo),e(U3,NYo),e(U3,Gz),e(Gz,qYo),e(U3,jYo),e(U,DYo),e(U,J3),e(J3,r1e),e(r1e,GYo),e(J3,OYo),e(J3,Oz),e(Oz,VYo),e(J3,XYo),e(U,zYo),e(U,Y3),e(Y3,t1e),e(t1e,QYo),e(Y3,WYo),e(Y3,Vz),e(Vz,HYo),e(Y3,UYo),e(U,JYo),e(U,K3),e(K3,a1e),e(a1e,YYo),e(K3,KYo),e(K3,Xz),e(Xz,ZYo),e(K3,eKo),e(U,oKo),e(U,Z3),e(Z3,n1e),e(n1e,rKo),e(Z3,tKo),e(Z3,zz),e(zz,aKo),e(Z3,nKo),e(U,sKo),e(U,e5),e(e5,s1e),e(s1e,lKo),e(e5,iKo),e(e5,Qz),e(Qz,dKo),e(e5,cKo),e(U,fKo),e(U,o5),e(o5,l1e),e(l1e,mKo),e(o5,gKo),e(o5,Wz),e(Wz,hKo),e(o5,pKo),e(U,_Ko),e(U,r5),e(r5,i1e),e(i1e,uKo),e(r5,bKo),e(r5,Hz),e(Hz,vKo),e(r5,FKo),e(U,TKo),e(U,t5),e(t5,d1e),e(d1e,MKo),e(t5,EKo),e(t5,Uz),e(Uz,CKo),e(t5,wKo),e(U,AKo),e(U,a5),e(a5,c1e),e(c1e,LKo),e(a5,yKo),e(a5,Jz),e(Jz,xKo),e(a5,$Ko),e(U,kKo),e(U,n5),e(n5,f1e),e(f1e,SKo),e(n5,RKo),e(n5,Yz),e(Yz,PKo),e(n5,BKo),e(U,IKo),e(U,s5),e(s5,m1e),e(m1e,NKo),e(s5,qKo),e(s5,Kz),e(Kz,jKo),e(s5,DKo),e(U,GKo),e(U,l5),e(l5,g1e),e(g1e,OKo),e(l5,VKo),e(l5,Zz),e(Zz,XKo),e(l5,zKo),e(U,QKo),e(U,i5),e(i5,h1e),e(h1e,WKo),e(i5,HKo),e(i5,eQ),e(eQ,UKo),e(i5,JKo),e(U,YKo),e(U,d5),e(d5,p1e),e(p1e,KKo),e(d5,ZKo),e(d5,oQ),e(oQ,eZo),e(d5,oZo),e(U,rZo),e(U,c5),e(c5,_1e),e(_1e,tZo),e(c5,aZo),e(c5,rQ),e(rQ,nZo),e(c5,sZo),e(ao,lZo),e(ao,f5),e(f5,iZo),e(f5,u1e),e(u1e,dZo),e(f5,cZo),e(f5,b1e),e(b1e,fZo),e(ao,mZo),M(m5,ao,null),b(f,zVe,u),b(f,md,u),e(md,g5),e(g5,v1e),M(my,v1e,null),e(md,gZo),e(md,F1e),e(F1e,hZo),b(f,QVe,u),b(f,jo,u),M(gy,jo,null),e(jo,pZo),e(jo,gd),e(gd,_Zo),e(gd,tQ),e(tQ,uZo),e(gd,bZo),e(gd,aQ),e(aQ,vZo),e(gd,FZo),e(jo,TZo),e(jo,hy),e(hy,MZo),e(hy,T1e),e(T1e,EZo),e(hy,CZo),e(jo,wZo),e(jo,pt),M(py,pt,null),e(pt,AZo),e(pt,M1e),e(M1e,LZo),e(pt,yZo),e(pt,hd),e(hd,xZo),e(hd,E1e),e(E1e,$Zo),e(hd,kZo),e(hd,nQ),e(nQ,SZo),e(hd,RZo),e(pt,PZo),M(h5,pt,null),e(jo,BZo),e(jo,no),M(_y,no,null),e(no,IZo),e(no,C1e),e(C1e,NZo),e(no,qZo),e(no,Va),e(Va,jZo),e(Va,w1e),e(w1e,DZo),e(Va,GZo),e(Va,A1e),e(A1e,OZo),e(Va,VZo),e(Va,L1e),e(L1e,XZo),e(Va,zZo),e(no,QZo),e(no,V),e(V,p5),e(p5,y1e),e(y1e,WZo),e(p5,HZo),e(p5,sQ),e(sQ,UZo),e(p5,JZo),e(V,YZo),e(V,_5),e(_5,x1e),e(x1e,KZo),e(_5,ZZo),e(_5,lQ),e(lQ,eer),e(_5,oer),e(V,rer),e(V,u5),e(u5,$1e),e($1e,ter),e(u5,aer),e(u5,iQ),e(iQ,ner),e(u5,ser),e(V,ler),e(V,b5),e(b5,k1e),e(k1e,ier),e(b5,der),e(b5,dQ),e(dQ,cer),e(b5,fer),e(V,mer),e(V,v5),e(v5,S1e),e(S1e,ger),e(v5,her),e(v5,cQ),e(cQ,per),e(v5,_er),e(V,uer),e(V,F5),e(F5,R1e),e(R1e,ber),e(F5,ver),e(F5,fQ),e(fQ,Fer),e(F5,Ter),e(V,Mer),e(V,T5),e(T5,P1e),e(P1e,Eer),e(T5,Cer),e(T5,mQ),e(mQ,wer),e(T5,Aer),e(V,Ler),e(V,M5),e(M5,B1e),e(B1e,yer),e(M5,xer),e(M5,gQ),e(gQ,$er),e(M5,ker),e(V,Ser),e(V,E5),e(E5,I1e),e(I1e,Rer),e(E5,Per),e(E5,hQ),e(hQ,Ber),e(E5,Ier),e(V,Ner),e(V,C5),e(C5,N1e),e(N1e,qer),e(C5,jer),e(C5,pQ),e(pQ,Der),e(C5,Ger),e(V,Oer),e(V,w5),e(w5,q1e),e(q1e,Ver),e(w5,Xer),e(w5,_Q),e(_Q,zer),e(w5,Qer),e(V,Wer),e(V,A5),e(A5,j1e),e(j1e,Her),e(A5,Uer),e(A5,uQ),e(uQ,Jer),e(A5,Yer),e(V,Ker),e(V,L5),e(L5,D1e),e(D1e,Zer),e(L5,eor),e(L5,bQ),e(bQ,oor),e(L5,ror),e(V,tor),e(V,y5),e(y5,G1e),e(G1e,aor),e(y5,nor),e(y5,vQ),e(vQ,sor),e(y5,lor),e(V,ior),e(V,x5),e(x5,O1e),e(O1e,dor),e(x5,cor),e(x5,FQ),e(FQ,mor),e(x5,gor),e(V,hor),e(V,$5),e($5,V1e),e(V1e,por),e($5,_or),e($5,TQ),e(TQ,uor),e($5,bor),e(V,vor),e(V,k5),e(k5,X1e),e(X1e,For),e(k5,Tor),e(k5,MQ),e(MQ,Mor),e(k5,Eor),e(V,Cor),e(V,S5),e(S5,z1e),e(z1e,wor),e(S5,Aor),e(S5,EQ),e(EQ,Lor),e(S5,yor),e(V,xor),e(V,R5),e(R5,Q1e),e(Q1e,$or),e(R5,kor),e(R5,CQ),e(CQ,Sor),e(R5,Ror),e(V,Por),e(V,P5),e(P5,W1e),e(W1e,Bor),e(P5,Ior),e(P5,wQ),e(wQ,Nor),e(P5,qor),e(V,jor),e(V,B5),e(B5,H1e),e(H1e,Dor),e(B5,Gor),e(B5,AQ),e(AQ,Oor),e(B5,Vor),e(V,Xor),e(V,I5),e(I5,U1e),e(U1e,zor),e(I5,Qor),e(I5,LQ),e(LQ,Wor),e(I5,Hor),e(V,Uor),e(V,N5),e(N5,J1e),e(J1e,Jor),e(N5,Yor),e(N5,yQ),e(yQ,Kor),e(N5,Zor),e(V,err),e(V,q5),e(q5,Y1e),e(Y1e,orr),e(q5,rrr),e(q5,xQ),e(xQ,trr),e(q5,arr),e(V,nrr),e(V,j5),e(j5,K1e),e(K1e,srr),e(j5,lrr),e(j5,$Q),e($Q,irr),e(j5,drr),e(V,crr),e(V,D5),e(D5,Z1e),e(Z1e,frr),e(D5,mrr),e(D5,kQ),e(kQ,grr),e(D5,hrr),e(V,prr),e(V,G5),e(G5,e2e),e(e2e,_rr),e(G5,urr),e(G5,SQ),e(SQ,brr),e(G5,vrr),e(V,Frr),e(V,O5),e(O5,o2e),e(o2e,Trr),e(O5,Mrr),e(O5,RQ),e(RQ,Err),e(O5,Crr),e(V,wrr),e(V,V5),e(V5,r2e),e(r2e,Arr),e(V5,Lrr),e(V5,PQ),e(PQ,yrr),e(V5,xrr),e(V,$rr),e(V,X5),e(X5,t2e),e(t2e,krr),e(X5,Srr),e(X5,BQ),e(BQ,Rrr),e(X5,Prr),e(V,Brr),e(V,z5),e(z5,a2e),e(a2e,Irr),e(z5,Nrr),e(z5,IQ),e(IQ,qrr),e(z5,jrr),e(V,Drr),e(V,Q5),e(Q5,n2e),e(n2e,Grr),e(Q5,Orr),e(Q5,NQ),e(NQ,Vrr),e(Q5,Xrr),e(V,zrr),e(V,W5),e(W5,s2e),e(s2e,Qrr),e(W5,Wrr),e(W5,qQ),e(qQ,Hrr),e(W5,Urr),e(V,Jrr),e(V,H5),e(H5,l2e),e(l2e,Yrr),e(H5,Krr),e(H5,jQ),e(jQ,Zrr),e(H5,etr),e(V,otr),e(V,U5),e(U5,i2e),e(i2e,rtr),e(U5,ttr),e(U5,DQ),e(DQ,atr),e(U5,ntr),e(V,str),e(V,J5),e(J5,d2e),e(d2e,ltr),e(J5,itr),e(J5,GQ),e(GQ,dtr),e(J5,ctr),e(V,ftr),e(V,Y5),e(Y5,c2e),e(c2e,mtr),e(Y5,gtr),e(Y5,OQ),e(OQ,htr),e(Y5,ptr),e(V,_tr),e(V,K5),e(K5,f2e),e(f2e,utr),e(K5,btr),e(K5,VQ),e(VQ,vtr),e(K5,Ftr),e(V,Ttr),e(V,Z5),e(Z5,m2e),e(m2e,Mtr),e(Z5,Etr),e(Z5,XQ),e(XQ,Ctr),e(Z5,wtr),e(V,Atr),e(V,eF),e(eF,g2e),e(g2e,Ltr),e(eF,ytr),e(eF,zQ),e(zQ,xtr),e(eF,$tr),e(V,ktr),e(V,oF),e(oF,h2e),e(h2e,Str),e(oF,Rtr),e(oF,QQ),e(QQ,Ptr),e(oF,Btr),e(V,Itr),e(V,rF),e(rF,p2e),e(p2e,Ntr),e(rF,qtr),e(rF,WQ),e(WQ,jtr),e(rF,Dtr),e(no,Gtr),e(no,tF),e(tF,Otr),e(tF,_2e),e(_2e,Vtr),e(tF,Xtr),e(tF,u2e),e(u2e,ztr),e(no,Qtr),M(aF,no,null),b(f,WVe,u),b(f,pd,u),e(pd,nF),e(nF,b2e),M(uy,b2e,null),e(pd,Wtr),e(pd,v2e),e(v2e,Htr),b(f,HVe,u),b(f,Do,u),M(by,Do,null),e(Do,Utr),e(Do,_d),e(_d,Jtr),e(_d,HQ),e(HQ,Ytr),e(_d,Ktr),e(_d,UQ),e(UQ,Ztr),e(_d,ear),e(Do,oar),e(Do,vy),e(vy,rar),e(vy,F2e),e(F2e,tar),e(vy,aar),e(Do,nar),e(Do,_t),M(Fy,_t,null),e(_t,sar),e(_t,T2e),e(T2e,lar),e(_t,iar),e(_t,ud),e(ud,dar),e(ud,M2e),e(M2e,car),e(ud,far),e(ud,JQ),e(JQ,mar),e(ud,gar),e(_t,har),M(sF,_t,null),e(Do,par),e(Do,so),M(Ty,so,null),e(so,_ar),e(so,E2e),e(E2e,uar),e(so,bar),e(so,Xa),e(Xa,Far),e(Xa,C2e),e(C2e,Tar),e(Xa,Mar),e(Xa,w2e),e(w2e,Ear),e(Xa,Car),e(Xa,A2e),e(A2e,war),e(Xa,Aar),e(so,Lar),e(so,L2e),e(L2e,lF),e(lF,y2e),e(y2e,yar),e(lF,xar),e(lF,YQ),e(YQ,$ar),e(lF,kar),e(so,Sar),e(so,iF),e(iF,Rar),e(iF,x2e),e(x2e,Par),e(iF,Bar),e(iF,$2e),e($2e,Iar),e(so,Nar),M(dF,so,null),b(f,UVe,u),b(f,bd,u),e(bd,cF),e(cF,k2e),M(My,k2e,null),e(bd,qar),e(bd,S2e),e(S2e,jar),b(f,JVe,u),b(f,Go,u),M(Ey,Go,null),e(Go,Dar),e(Go,vd),e(vd,Gar),e(vd,KQ),e(KQ,Oar),e(vd,Var),e(vd,ZQ),e(ZQ,Xar),e(vd,zar),e(Go,Qar),e(Go,Cy),e(Cy,War),e(Cy,R2e),e(R2e,Har),e(Cy,Uar),e(Go,Jar),e(Go,ut),M(wy,ut,null),e(ut,Yar),e(ut,P2e),e(P2e,Kar),e(ut,Zar),e(ut,Fd),e(Fd,enr),e(Fd,B2e),e(B2e,onr),e(Fd,rnr),e(Fd,eW),e(eW,tnr),e(Fd,anr),e(ut,nnr),M(fF,ut,null),e(Go,snr),e(Go,lo),M(Ay,lo,null),e(lo,lnr),e(lo,I2e),e(I2e,inr),e(lo,dnr),e(lo,za),e(za,cnr),e(za,N2e),e(N2e,fnr),e(za,mnr),e(za,q2e),e(q2e,gnr),e(za,hnr),e(za,j2e),e(j2e,pnr),e(za,_nr),e(lo,unr),e(lo,Fe),e(Fe,mF),e(mF,D2e),e(D2e,bnr),e(mF,vnr),e(mF,oW),e(oW,Fnr),e(mF,Tnr),e(Fe,Mnr),e(Fe,gF),e(gF,G2e),e(G2e,Enr),e(gF,Cnr),e(gF,rW),e(rW,wnr),e(gF,Anr),e(Fe,Lnr),e(Fe,hF),e(hF,O2e),e(O2e,ynr),e(hF,xnr),e(hF,tW),e(tW,$nr),e(hF,knr),e(Fe,Snr),e(Fe,pF),e(pF,V2e),e(V2e,Rnr),e(pF,Pnr),e(pF,aW),e(aW,Bnr),e(pF,Inr),e(Fe,Nnr),e(Fe,Ws),e(Ws,X2e),e(X2e,qnr),e(Ws,jnr),e(Ws,nW),e(nW,Dnr),e(Ws,Gnr),e(Ws,sW),e(sW,Onr),e(Ws,Vnr),e(Fe,Xnr),e(Fe,_F),e(_F,z2e),e(z2e,znr),e(_F,Qnr),e(_F,lW),e(lW,Wnr),e(_F,Hnr),e(Fe,Unr),e(Fe,Hs),e(Hs,Q2e),e(Q2e,Jnr),e(Hs,Ynr),e(Hs,iW),e(iW,Knr),e(Hs,Znr),e(Hs,dW),e(dW,esr),e(Hs,osr),e(Fe,rsr),e(Fe,bt),e(bt,W2e),e(W2e,tsr),e(bt,asr),e(bt,cW),e(cW,nsr),e(bt,ssr),e(bt,fW),e(fW,lsr),e(bt,isr),e(bt,mW),e(mW,dsr),e(bt,csr),e(Fe,fsr),e(Fe,uF),e(uF,H2e),e(H2e,msr),e(uF,gsr),e(uF,gW),e(gW,hsr),e(uF,psr),e(Fe,_sr),e(Fe,bF),e(bF,U2e),e(U2e,usr),e(bF,bsr),e(bF,hW),e(hW,vsr),e(bF,Fsr),e(Fe,Tsr),e(Fe,vF),e(vF,J2e),e(J2e,Msr),e(vF,Esr),e(vF,pW),e(pW,Csr),e(vF,wsr),e(Fe,Asr),e(Fe,FF),e(FF,Y2e),e(Y2e,Lsr),e(FF,ysr),e(FF,_W),e(_W,xsr),e(FF,$sr),e(Fe,ksr),e(Fe,TF),e(TF,K2e),e(K2e,Ssr),e(TF,Rsr),e(TF,uW),e(uW,Psr),e(TF,Bsr),e(Fe,Isr),e(Fe,MF),e(MF,Z2e),e(Z2e,Nsr),e(MF,qsr),e(MF,bW),e(bW,jsr),e(MF,Dsr),e(Fe,Gsr),e(Fe,EF),e(EF,ebe),e(ebe,Osr),e(EF,Vsr),e(EF,vW),e(vW,Xsr),e(EF,zsr),e(lo,Qsr),e(lo,CF),e(CF,Wsr),e(CF,obe),e(obe,Hsr),e(CF,Usr),e(CF,rbe),e(rbe,Jsr),e(lo,Ysr),M(wF,lo,null),b(f,YVe,u),b(f,Td,u),e(Td,AF),e(AF,tbe),M(Ly,tbe,null),e(Td,Ksr),e(Td,abe),e(abe,Zsr),b(f,KVe,u),b(f,Oo,u),M(yy,Oo,null),e(Oo,elr),e(Oo,Md),e(Md,olr),e(Md,FW),e(FW,rlr),e(Md,tlr),e(Md,TW),e(TW,alr),e(Md,nlr),e(Oo,slr),e(Oo,xy),e(xy,llr),e(xy,nbe),e(nbe,ilr),e(xy,dlr),e(Oo,clr),e(Oo,vt),M($y,vt,null),e(vt,flr),e(vt,sbe),e(sbe,mlr),e(vt,glr),e(vt,Ed),e(Ed,hlr),e(Ed,lbe),e(lbe,plr),e(Ed,_lr),e(Ed,MW),e(MW,ulr),e(Ed,blr),e(vt,vlr),M(LF,vt,null),e(Oo,Flr),e(Oo,io),M(ky,io,null),e(io,Tlr),e(io,ibe),e(ibe,Mlr),e(io,Elr),e(io,Qa),e(Qa,Clr),e(Qa,dbe),e(dbe,wlr),e(Qa,Alr),e(Qa,cbe),e(cbe,Llr),e(Qa,ylr),e(Qa,fbe),e(fbe,xlr),e(Qa,$lr),e(io,klr),e(io,mbe),e(mbe,yF),e(yF,gbe),e(gbe,Slr),e(yF,Rlr),e(yF,EW),e(EW,Plr),e(yF,Blr),e(io,Ilr),e(io,xF),e(xF,Nlr),e(xF,hbe),e(hbe,qlr),e(xF,jlr),e(xF,pbe),e(pbe,Dlr),e(io,Glr),M($F,io,null),b(f,ZVe,u),b(f,Cd,u),e(Cd,kF),e(kF,_be),M(Sy,_be,null),e(Cd,Olr),e(Cd,ube),e(ube,Vlr),b(f,eXe,u),b(f,Vo,u),M(Ry,Vo,null),e(Vo,Xlr),e(Vo,wd),e(wd,zlr),e(wd,CW),e(CW,Qlr),e(wd,Wlr),e(wd,wW),e(wW,Hlr),e(wd,Ulr),e(Vo,Jlr),e(Vo,Py),e(Py,Ylr),e(Py,bbe),e(bbe,Klr),e(Py,Zlr),e(Vo,eir),e(Vo,Ft),M(By,Ft,null),e(Ft,oir),e(Ft,vbe),e(vbe,rir),e(Ft,tir),e(Ft,Ad),e(Ad,air),e(Ad,Fbe),e(Fbe,nir),e(Ad,sir),e(Ad,AW),e(AW,lir),e(Ad,iir),e(Ft,dir),M(SF,Ft,null),e(Vo,cir),e(Vo,co),M(Iy,co,null),e(co,fir),e(co,Tbe),e(Tbe,mir),e(co,gir),e(co,Wa),e(Wa,hir),e(Wa,Mbe),e(Mbe,pir),e(Wa,_ir),e(Wa,Ebe),e(Ebe,uir),e(Wa,bir),e(Wa,Cbe),e(Cbe,vir),e(Wa,Fir),e(co,Tir),e(co,wbe),e(wbe,RF),e(RF,Abe),e(Abe,Mir),e(RF,Eir),e(RF,LW),e(LW,Cir),e(RF,wir),e(co,Air),e(co,PF),e(PF,Lir),e(PF,Lbe),e(Lbe,yir),e(PF,xir),e(PF,ybe),e(ybe,$ir),e(co,kir),M(BF,co,null),b(f,oXe,u),b(f,Ld,u),e(Ld,IF),e(IF,xbe),M(Ny,xbe,null),e(Ld,Sir),e(Ld,$be),e($be,Rir),b(f,rXe,u),b(f,Xo,u),M(qy,Xo,null),e(Xo,Pir),e(Xo,yd),e(yd,Bir),e(yd,yW),e(yW,Iir),e(yd,Nir),e(yd,xW),e(xW,qir),e(yd,jir),e(Xo,Dir),e(Xo,jy),e(jy,Gir),e(jy,kbe),e(kbe,Oir),e(jy,Vir),e(Xo,Xir),e(Xo,Tt),M(Dy,Tt,null),e(Tt,zir),e(Tt,Sbe),e(Sbe,Qir),e(Tt,Wir),e(Tt,xd),e(xd,Hir),e(xd,Rbe),e(Rbe,Uir),e(xd,Jir),e(xd,$W),e($W,Yir),e(xd,Kir),e(Tt,Zir),M(NF,Tt,null),e(Xo,edr),e(Xo,fo),M(Gy,fo,null),e(fo,odr),e(fo,Pbe),e(Pbe,rdr),e(fo,tdr),e(fo,Ha),e(Ha,adr),e(Ha,Bbe),e(Bbe,ndr),e(Ha,sdr),e(Ha,Ibe),e(Ibe,ldr),e(Ha,idr),e(Ha,Nbe),e(Nbe,ddr),e(Ha,cdr),e(fo,fdr),e(fo,Pe),e(Pe,qF),e(qF,qbe),e(qbe,mdr),e(qF,gdr),e(qF,kW),e(kW,hdr),e(qF,pdr),e(Pe,_dr),e(Pe,jF),e(jF,jbe),e(jbe,udr),e(jF,bdr),e(jF,SW),e(SW,vdr),e(jF,Fdr),e(Pe,Tdr),e(Pe,DF),e(DF,Dbe),e(Dbe,Mdr),e(DF,Edr),e(DF,RW),e(RW,Cdr),e(DF,wdr),e(Pe,Adr),e(Pe,GF),e(GF,Gbe),e(Gbe,Ldr),e(GF,ydr),e(GF,PW),e(PW,xdr),e(GF,$dr),e(Pe,kdr),e(Pe,OF),e(OF,Obe),e(Obe,Sdr),e(OF,Rdr),e(OF,BW),e(BW,Pdr),e(OF,Bdr),e(Pe,Idr),e(Pe,VF),e(VF,Vbe),e(Vbe,Ndr),e(VF,qdr),e(VF,IW),e(IW,jdr),e(VF,Ddr),e(Pe,Gdr),e(Pe,XF),e(XF,Xbe),e(Xbe,Odr),e(XF,Vdr),e(XF,NW),e(NW,Xdr),e(XF,zdr),e(Pe,Qdr),e(Pe,zF),e(zF,zbe),e(zbe,Wdr),e(zF,Hdr),e(zF,qW),e(qW,Udr),e(zF,Jdr),e(Pe,Ydr),e(Pe,QF),e(QF,Qbe),e(Qbe,Kdr),e(QF,Zdr),e(QF,jW),e(jW,ecr),e(QF,ocr),e(fo,rcr),e(fo,WF),e(WF,tcr),e(WF,Wbe),e(Wbe,acr),e(WF,ncr),e(WF,Hbe),e(Hbe,scr),e(fo,lcr),M(HF,fo,null),b(f,tXe,u),b(f,$d,u),e($d,UF),e(UF,Ube),M(Oy,Ube,null),e($d,icr),e($d,Jbe),e(Jbe,dcr),b(f,aXe,u),b(f,zo,u),M(Vy,zo,null),e(zo,ccr),e(zo,kd),e(kd,fcr),e(kd,DW),e(DW,mcr),e(kd,gcr),e(kd,GW),e(GW,hcr),e(kd,pcr),e(zo,_cr),e(zo,Xy),e(Xy,ucr),e(Xy,Ybe),e(Ybe,bcr),e(Xy,vcr),e(zo,Fcr),e(zo,Mt),M(zy,Mt,null),e(Mt,Tcr),e(Mt,Kbe),e(Kbe,Mcr),e(Mt,Ecr),e(Mt,Sd),e(Sd,Ccr),e(Sd,Zbe),e(Zbe,wcr),e(Sd,Acr),e(Sd,OW),e(OW,Lcr),e(Sd,ycr),e(Mt,xcr),M(JF,Mt,null),e(zo,$cr),e(zo,mo),M(Qy,mo,null),e(mo,kcr),e(mo,eve),e(eve,Scr),e(mo,Rcr),e(mo,Ua),e(Ua,Pcr),e(Ua,ove),e(ove,Bcr),e(Ua,Icr),e(Ua,rve),e(rve,Ncr),e(Ua,qcr),e(Ua,tve),e(tve,jcr),e(Ua,Dcr),e(mo,Gcr),e(mo,et),e(et,YF),e(YF,ave),e(ave,Ocr),e(YF,Vcr),e(YF,VW),e(VW,Xcr),e(YF,zcr),e(et,Qcr),e(et,KF),e(KF,nve),e(nve,Wcr),e(KF,Hcr),e(KF,XW),e(XW,Ucr),e(KF,Jcr),e(et,Ycr),e(et,ZF),e(ZF,sve),e(sve,Kcr),e(ZF,Zcr),e(ZF,zW),e(zW,efr),e(ZF,ofr),e(et,rfr),e(et,eT),e(eT,lve),e(lve,tfr),e(eT,afr),e(eT,QW),e(QW,nfr),e(eT,sfr),e(et,lfr),e(et,oT),e(oT,ive),e(ive,ifr),e(oT,dfr),e(oT,WW),e(WW,cfr),e(oT,ffr),e(mo,mfr),e(mo,rT),e(rT,gfr),e(rT,dve),e(dve,hfr),e(rT,pfr),e(rT,cve),e(cve,_fr),e(mo,ufr),M(tT,mo,null),b(f,nXe,u),b(f,Rd,u),e(Rd,aT),e(aT,fve),M(Wy,fve,null),e(Rd,bfr),e(Rd,mve),e(mve,vfr),b(f,sXe,u),b(f,Qo,u),M(Hy,Qo,null),e(Qo,Ffr),e(Qo,Pd),e(Pd,Tfr),e(Pd,HW),e(HW,Mfr),e(Pd,Efr),e(Pd,UW),e(UW,Cfr),e(Pd,wfr),e(Qo,Afr),e(Qo,Uy),e(Uy,Lfr),e(Uy,gve),e(gve,yfr),e(Uy,xfr),e(Qo,$fr),e(Qo,Et),M(Jy,Et,null),e(Et,kfr),e(Et,hve),e(hve,Sfr),e(Et,Rfr),e(Et,Bd),e(Bd,Pfr),e(Bd,pve),e(pve,Bfr),e(Bd,Ifr),e(Bd,JW),e(JW,Nfr),e(Bd,qfr),e(Et,jfr),M(nT,Et,null),e(Qo,Dfr),e(Qo,go),M(Yy,go,null),e(go,Gfr),e(go,_ve),e(_ve,Ofr),e(go,Vfr),e(go,Ja),e(Ja,Xfr),e(Ja,uve),e(uve,zfr),e(Ja,Qfr),e(Ja,bve),e(bve,Wfr),e(Ja,Hfr),e(Ja,vve),e(vve,Ufr),e(Ja,Jfr),e(go,Yfr),e(go,Le),e(Le,sT),e(sT,Fve),e(Fve,Kfr),e(sT,Zfr),e(sT,YW),e(YW,emr),e(sT,omr),e(Le,rmr),e(Le,lT),e(lT,Tve),e(Tve,tmr),e(lT,amr),e(lT,KW),e(KW,nmr),e(lT,smr),e(Le,lmr),e(Le,iT),e(iT,Mve),e(Mve,imr),e(iT,dmr),e(iT,ZW),e(ZW,cmr),e(iT,fmr),e(Le,mmr),e(Le,dT),e(dT,Eve),e(Eve,gmr),e(dT,hmr),e(dT,eH),e(eH,pmr),e(dT,_mr),e(Le,umr),e(Le,cT),e(cT,Cve),e(Cve,bmr),e(cT,vmr),e(cT,oH),e(oH,Fmr),e(cT,Tmr),e(Le,Mmr),e(Le,fT),e(fT,wve),e(wve,Emr),e(fT,Cmr),e(fT,rH),e(rH,wmr),e(fT,Amr),e(Le,Lmr),e(Le,mT),e(mT,Ave),e(Ave,ymr),e(mT,xmr),e(mT,tH),e(tH,$mr),e(mT,kmr),e(Le,Smr),e(Le,gT),e(gT,Lve),e(Lve,Rmr),e(gT,Pmr),e(gT,aH),e(aH,Bmr),e(gT,Imr),e(Le,Nmr),e(Le,hT),e(hT,yve),e(yve,qmr),e(hT,jmr),e(hT,nH),e(nH,Dmr),e(hT,Gmr),e(Le,Omr),e(Le,pT),e(pT,xve),e(xve,Vmr),e(pT,Xmr),e(pT,sH),e(sH,zmr),e(pT,Qmr),e(go,Wmr),e(go,_T),e(_T,Hmr),e(_T,$ve),e($ve,Umr),e(_T,Jmr),e(_T,kve),e(kve,Ymr),e(go,Kmr),M(uT,go,null),b(f,lXe,u),b(f,Id,u),e(Id,bT),e(bT,Sve),M(Ky,Sve,null),e(Id,Zmr),e(Id,Rve),e(Rve,egr),b(f,iXe,u),b(f,Wo,u),M(Zy,Wo,null),e(Wo,ogr),e(Wo,Nd),e(Nd,rgr),e(Nd,lH),e(lH,tgr),e(Nd,agr),e(Nd,iH),e(iH,ngr),e(Nd,sgr),e(Wo,lgr),e(Wo,e8),e(e8,igr),e(e8,Pve),e(Pve,dgr),e(e8,cgr),e(Wo,fgr),e(Wo,Ct),M(o8,Ct,null),e(Ct,mgr),e(Ct,Bve),e(Bve,ggr),e(Ct,hgr),e(Ct,qd),e(qd,pgr),e(qd,Ive),e(Ive,_gr),e(qd,ugr),e(qd,dH),e(dH,bgr),e(qd,vgr),e(Ct,Fgr),M(vT,Ct,null),e(Wo,Tgr),e(Wo,ho),M(r8,ho,null),e(ho,Mgr),e(ho,Nve),e(Nve,Egr),e(ho,Cgr),e(ho,Ya),e(Ya,wgr),e(Ya,qve),e(qve,Agr),e(Ya,Lgr),e(Ya,jve),e(jve,ygr),e(Ya,xgr),e(Ya,Dve),e(Dve,$gr),e(Ya,kgr),e(ho,Sgr),e(ho,t8),e(t8,FT),e(FT,Gve),e(Gve,Rgr),e(FT,Pgr),e(FT,cH),e(cH,Bgr),e(FT,Igr),e(t8,Ngr),e(t8,TT),e(TT,Ove),e(Ove,qgr),e(TT,jgr),e(TT,fH),e(fH,Dgr),e(TT,Ggr),e(ho,Ogr),e(ho,MT),e(MT,Vgr),e(MT,Vve),e(Vve,Xgr),e(MT,zgr),e(MT,Xve),e(Xve,Qgr),e(ho,Wgr),M(ET,ho,null),b(f,dXe,u),b(f,jd,u),e(jd,CT),e(CT,zve),M(a8,zve,null),e(jd,Hgr),e(jd,Qve),e(Qve,Ugr),b(f,cXe,u),b(f,Ho,u),M(n8,Ho,null),e(Ho,Jgr),e(Ho,Dd),e(Dd,Ygr),e(Dd,mH),e(mH,Kgr),e(Dd,Zgr),e(Dd,gH),e(gH,ehr),e(Dd,ohr),e(Ho,rhr),e(Ho,s8),e(s8,thr),e(s8,Wve),e(Wve,ahr),e(s8,nhr),e(Ho,shr),e(Ho,wt),M(l8,wt,null),e(wt,lhr),e(wt,Hve),e(Hve,ihr),e(wt,dhr),e(wt,Gd),e(Gd,chr),e(Gd,Uve),e(Uve,fhr),e(Gd,mhr),e(Gd,hH),e(hH,ghr),e(Gd,hhr),e(wt,phr),M(wT,wt,null),e(Ho,_hr),e(Ho,po),M(i8,po,null),e(po,uhr),e(po,Jve),e(Jve,bhr),e(po,vhr),e(po,Ka),e(Ka,Fhr),e(Ka,Yve),e(Yve,Thr),e(Ka,Mhr),e(Ka,Kve),e(Kve,Ehr),e(Ka,Chr),e(Ka,Zve),e(Zve,whr),e(Ka,Ahr),e(po,Lhr),e(po,ot),e(ot,AT),e(AT,e3e),e(e3e,yhr),e(AT,xhr),e(AT,pH),e(pH,$hr),e(AT,khr),e(ot,Shr),e(ot,LT),e(LT,o3e),e(o3e,Rhr),e(LT,Phr),e(LT,_H),e(_H,Bhr),e(LT,Ihr),e(ot,Nhr),e(ot,yT),e(yT,r3e),e(r3e,qhr),e(yT,jhr),e(yT,uH),e(uH,Dhr),e(yT,Ghr),e(ot,Ohr),e(ot,xT),e(xT,t3e),e(t3e,Vhr),e(xT,Xhr),e(xT,bH),e(bH,zhr),e(xT,Qhr),e(ot,Whr),e(ot,$T),e($T,a3e),e(a3e,Hhr),e($T,Uhr),e($T,vH),e(vH,Jhr),e($T,Yhr),e(po,Khr),e(po,kT),e(kT,Zhr),e(kT,n3e),e(n3e,epr),e(kT,opr),e(kT,s3e),e(s3e,rpr),e(po,tpr),M(ST,po,null),b(f,fXe,u),b(f,Od,u),e(Od,RT),e(RT,l3e),M(d8,l3e,null),e(Od,apr),e(Od,i3e),e(i3e,npr),b(f,mXe,u),b(f,Uo,u),M(c8,Uo,null),e(Uo,spr),e(Uo,Vd),e(Vd,lpr),e(Vd,FH),e(FH,ipr),e(Vd,dpr),e(Vd,TH),e(TH,cpr),e(Vd,fpr),e(Uo,mpr),e(Uo,f8),e(f8,gpr),e(f8,d3e),e(d3e,hpr),e(f8,ppr),e(Uo,_pr),e(Uo,At),M(m8,At,null),e(At,upr),e(At,c3e),e(c3e,bpr),e(At,vpr),e(At,Xd),e(Xd,Fpr),e(Xd,f3e),e(f3e,Tpr),e(Xd,Mpr),e(Xd,MH),e(MH,Epr),e(Xd,Cpr),e(At,wpr),M(PT,At,null),e(Uo,Apr),e(Uo,_o),M(g8,_o,null),e(_o,Lpr),e(_o,m3e),e(m3e,ypr),e(_o,xpr),e(_o,Za),e(Za,$pr),e(Za,g3e),e(g3e,kpr),e(Za,Spr),e(Za,h3e),e(h3e,Rpr),e(Za,Ppr),e(Za,p3e),e(p3e,Bpr),e(Za,Ipr),e(_o,Npr),e(_o,zd),e(zd,BT),e(BT,_3e),e(_3e,qpr),e(BT,jpr),e(BT,EH),e(EH,Dpr),e(BT,Gpr),e(zd,Opr),e(zd,IT),e(IT,u3e),e(u3e,Vpr),e(IT,Xpr),e(IT,CH),e(CH,zpr),e(IT,Qpr),e(zd,Wpr),e(zd,NT),e(NT,b3e),e(b3e,Hpr),e(NT,Upr),e(NT,wH),e(wH,Jpr),e(NT,Ypr),e(_o,Kpr),e(_o,qT),e(qT,Zpr),e(qT,v3e),e(v3e,e_r),e(qT,o_r),e(qT,F3e),e(F3e,r_r),e(_o,t_r),M(jT,_o,null),b(f,gXe,u),b(f,Qd,u),e(Qd,DT),e(DT,T3e),M(h8,T3e,null),e(Qd,a_r),e(Qd,M3e),e(M3e,n_r),b(f,hXe,u),b(f,Jo,u),M(p8,Jo,null),e(Jo,s_r),e(Jo,Wd),e(Wd,l_r),e(Wd,AH),e(AH,i_r),e(Wd,d_r),e(Wd,LH),e(LH,c_r),e(Wd,f_r),e(Jo,m_r),e(Jo,_8),e(_8,g_r),e(_8,E3e),e(E3e,h_r),e(_8,p_r),e(Jo,__r),e(Jo,Lt),M(u8,Lt,null),e(Lt,u_r),e(Lt,C3e),e(C3e,b_r),e(Lt,v_r),e(Lt,Hd),e(Hd,F_r),e(Hd,w3e),e(w3e,T_r),e(Hd,M_r),e(Hd,yH),e(yH,E_r),e(Hd,C_r),e(Lt,w_r),M(GT,Lt,null),e(Jo,A_r),e(Jo,uo),M(b8,uo,null),e(uo,L_r),e(uo,A3e),e(A3e,y_r),e(uo,x_r),e(uo,en),e(en,$_r),e(en,L3e),e(L3e,k_r),e(en,S_r),e(en,y3e),e(y3e,R_r),e(en,P_r),e(en,x3e),e(x3e,B_r),e(en,I_r),e(uo,N_r),e(uo,v8),e(v8,OT),e(OT,$3e),e($3e,q_r),e(OT,j_r),e(OT,xH),e(xH,D_r),e(OT,G_r),e(v8,O_r),e(v8,VT),e(VT,k3e),e(k3e,V_r),e(VT,X_r),e(VT,$H),e($H,z_r),e(VT,Q_r),e(uo,W_r),e(uo,XT),e(XT,H_r),e(XT,S3e),e(S3e,U_r),e(XT,J_r),e(XT,R3e),e(R3e,Y_r),e(uo,K_r),M(zT,uo,null),b(f,pXe,u),b(f,Ud,u),e(Ud,QT),e(QT,P3e),M(F8,P3e,null),e(Ud,Z_r),e(Ud,B3e),e(B3e,eur),b(f,_Xe,u),b(f,Yo,u),M(T8,Yo,null),e(Yo,our),e(Yo,Jd),e(Jd,rur),e(Jd,kH),e(kH,tur),e(Jd,aur),e(Jd,SH),e(SH,nur),e(Jd,sur),e(Yo,lur),e(Yo,M8),e(M8,iur),e(M8,I3e),e(I3e,dur),e(M8,cur),e(Yo,fur),e(Yo,yt),M(E8,yt,null),e(yt,mur),e(yt,N3e),e(N3e,gur),e(yt,hur),e(yt,Yd),e(Yd,pur),e(Yd,q3e),e(q3e,_ur),e(Yd,uur),e(Yd,RH),e(RH,bur),e(Yd,vur),e(yt,Fur),M(WT,yt,null),e(Yo,Tur),e(Yo,bo),M(C8,bo,null),e(bo,Mur),e(bo,j3e),e(j3e,Eur),e(bo,Cur),e(bo,on),e(on,wur),e(on,D3e),e(D3e,Aur),e(on,Lur),e(on,G3e),e(G3e,yur),e(on,xur),e(on,O3e),e(O3e,$ur),e(on,kur),e(bo,Sur),e(bo,V3e),e(V3e,HT),e(HT,X3e),e(X3e,Rur),e(HT,Pur),e(HT,PH),e(PH,Bur),e(HT,Iur),e(bo,Nur),e(bo,UT),e(UT,qur),e(UT,z3e),e(z3e,jur),e(UT,Dur),e(UT,Q3e),e(Q3e,Gur),e(bo,Our),M(JT,bo,null),b(f,uXe,u),b(f,Kd,u),e(Kd,YT),e(YT,W3e),M(w8,W3e,null),e(Kd,Vur),e(Kd,H3e),e(H3e,Xur),b(f,bXe,u),b(f,Ko,u),M(A8,Ko,null),e(Ko,zur),e(Ko,Zd),e(Zd,Qur),e(Zd,BH),e(BH,Wur),e(Zd,Hur),e(Zd,IH),e(IH,Uur),e(Zd,Jur),e(Ko,Yur),e(Ko,L8),e(L8,Kur),e(L8,U3e),e(U3e,Zur),e(L8,e1r),e(Ko,o1r),e(Ko,xt),M(y8,xt,null),e(xt,r1r),e(xt,J3e),e(J3e,t1r),e(xt,a1r),e(xt,ec),e(ec,n1r),e(ec,Y3e),e(Y3e,s1r),e(ec,l1r),e(ec,NH),e(NH,i1r),e(ec,d1r),e(xt,c1r),M(KT,xt,null),e(Ko,f1r),e(Ko,vo),M(x8,vo,null),e(vo,m1r),e(vo,K3e),e(K3e,g1r),e(vo,h1r),e(vo,rn),e(rn,p1r),e(rn,Z3e),e(Z3e,_1r),e(rn,u1r),e(rn,e5e),e(e5e,b1r),e(rn,v1r),e(rn,o5e),e(o5e,F1r),e(rn,T1r),e(vo,M1r),e(vo,tn),e(tn,ZT),e(ZT,r5e),e(r5e,E1r),e(ZT,C1r),e(ZT,qH),e(qH,w1r),e(ZT,A1r),e(tn,L1r),e(tn,e7),e(e7,t5e),e(t5e,y1r),e(e7,x1r),e(e7,jH),e(jH,$1r),e(e7,k1r),e(tn,S1r),e(tn,o7),e(o7,a5e),e(a5e,R1r),e(o7,P1r),e(o7,DH),e(DH,B1r),e(o7,I1r),e(tn,N1r),e(tn,r7),e(r7,n5e),e(n5e,q1r),e(r7,j1r),e(r7,GH),e(GH,D1r),e(r7,G1r),e(vo,O1r),e(vo,t7),e(t7,V1r),e(t7,s5e),e(s5e,X1r),e(t7,z1r),e(t7,l5e),e(l5e,Q1r),e(vo,W1r),M(a7,vo,null),b(f,vXe,u),b(f,oc,u),e(oc,n7),e(n7,i5e),M($8,i5e,null),e(oc,H1r),e(oc,d5e),e(d5e,U1r),b(f,FXe,u),b(f,Zo,u),M(k8,Zo,null),e(Zo,J1r),e(Zo,rc),e(rc,Y1r),e(rc,OH),e(OH,K1r),e(rc,Z1r),e(rc,VH),e(VH,e2r),e(rc,o2r),e(Zo,r2r),e(Zo,S8),e(S8,t2r),e(S8,c5e),e(c5e,a2r),e(S8,n2r),e(Zo,s2r),e(Zo,$t),M(R8,$t,null),e($t,l2r),e($t,f5e),e(f5e,i2r),e($t,d2r),e($t,tc),e(tc,c2r),e(tc,m5e),e(m5e,f2r),e(tc,m2r),e(tc,XH),e(XH,g2r),e(tc,h2r),e($t,p2r),M(s7,$t,null),e(Zo,_2r),e(Zo,Fo),M(P8,Fo,null),e(Fo,u2r),e(Fo,g5e),e(g5e,b2r),e(Fo,v2r),e(Fo,an),e(an,F2r),e(an,h5e),e(h5e,T2r),e(an,M2r),e(an,p5e),e(p5e,E2r),e(an,C2r),e(an,_5e),e(_5e,w2r),e(an,A2r),e(Fo,L2r),e(Fo,u5e),e(u5e,l7),e(l7,b5e),e(b5e,y2r),e(l7,x2r),e(l7,zH),e(zH,$2r),e(l7,k2r),e(Fo,S2r),e(Fo,i7),e(i7,R2r),e(i7,v5e),e(v5e,P2r),e(i7,B2r),e(i7,F5e),e(F5e,I2r),e(Fo,N2r),M(d7,Fo,null),b(f,TXe,u),b(f,ac,u),e(ac,c7),e(c7,T5e),M(B8,T5e,null),e(ac,q2r),e(ac,M5e),e(M5e,j2r),b(f,MXe,u),b(f,er,u),M(I8,er,null),e(er,D2r),e(er,nc),e(nc,G2r),e(nc,QH),e(QH,O2r),e(nc,V2r),e(nc,WH),e(WH,X2r),e(nc,z2r),e(er,Q2r),e(er,N8),e(N8,W2r),e(N8,E5e),e(E5e,H2r),e(N8,U2r),e(er,J2r),e(er,kt),M(q8,kt,null),e(kt,Y2r),e(kt,C5e),e(C5e,K2r),e(kt,Z2r),e(kt,sc),e(sc,ebr),e(sc,w5e),e(w5e,obr),e(sc,rbr),e(sc,HH),e(HH,tbr),e(sc,abr),e(kt,nbr),M(f7,kt,null),e(er,sbr),e(er,yr),M(j8,yr,null),e(yr,lbr),e(yr,A5e),e(A5e,ibr),e(yr,dbr),e(yr,nn),e(nn,cbr),e(nn,L5e),e(L5e,fbr),e(nn,mbr),e(nn,y5e),e(y5e,gbr),e(nn,hbr),e(nn,x5e),e(x5e,pbr),e(nn,_br),e(yr,ubr),e(yr,j),e(j,m7),e(m7,$5e),e($5e,bbr),e(m7,vbr),e(m7,UH),e(UH,Fbr),e(m7,Tbr),e(j,Mbr),e(j,g7),e(g7,k5e),e(k5e,Ebr),e(g7,Cbr),e(g7,JH),e(JH,wbr),e(g7,Abr),e(j,Lbr),e(j,h7),e(h7,S5e),e(S5e,ybr),e(h7,xbr),e(h7,YH),e(YH,$br),e(h7,kbr),e(j,Sbr),e(j,p7),e(p7,R5e),e(R5e,Rbr),e(p7,Pbr),e(p7,KH),e(KH,Bbr),e(p7,Ibr),e(j,Nbr),e(j,_7),e(_7,P5e),e(P5e,qbr),e(_7,jbr),e(_7,ZH),e(ZH,Dbr),e(_7,Gbr),e(j,Obr),e(j,u7),e(u7,B5e),e(B5e,Vbr),e(u7,Xbr),e(u7,eU),e(eU,zbr),e(u7,Qbr),e(j,Wbr),e(j,b7),e(b7,I5e),e(I5e,Hbr),e(b7,Ubr),e(b7,oU),e(oU,Jbr),e(b7,Ybr),e(j,Kbr),e(j,v7),e(v7,N5e),e(N5e,Zbr),e(v7,evr),e(v7,rU),e(rU,ovr),e(v7,rvr),e(j,tvr),e(j,F7),e(F7,q5e),e(q5e,avr),e(F7,nvr),e(F7,tU),e(tU,svr),e(F7,lvr),e(j,ivr),e(j,T7),e(T7,j5e),e(j5e,dvr),e(T7,cvr),e(T7,aU),e(aU,fvr),e(T7,mvr),e(j,gvr),e(j,M7),e(M7,D5e),e(D5e,hvr),e(M7,pvr),e(M7,nU),e(nU,_vr),e(M7,uvr),e(j,bvr),e(j,E7),e(E7,G5e),e(G5e,vvr),e(E7,Fvr),e(E7,sU),e(sU,Tvr),e(E7,Mvr),e(j,Evr),e(j,C7),e(C7,O5e),e(O5e,Cvr),e(C7,wvr),e(C7,lU),e(lU,Avr),e(C7,Lvr),e(j,yvr),e(j,w7),e(w7,V5e),e(V5e,xvr),e(w7,$vr),e(w7,iU),e(iU,kvr),e(w7,Svr),e(j,Rvr),e(j,A7),e(A7,X5e),e(X5e,Pvr),e(A7,Bvr),e(A7,dU),e(dU,Ivr),e(A7,Nvr),e(j,qvr),e(j,L7),e(L7,z5e),e(z5e,jvr),e(L7,Dvr),e(L7,cU),e(cU,Gvr),e(L7,Ovr),e(j,Vvr),e(j,y7),e(y7,Q5e),e(Q5e,Xvr),e(y7,zvr),e(y7,fU),e(fU,Qvr),e(y7,Wvr),e(j,Hvr),e(j,Us),e(Us,W5e),e(W5e,Uvr),e(Us,Jvr),e(Us,mU),e(mU,Yvr),e(Us,Kvr),e(Us,gU),e(gU,Zvr),e(Us,e3r),e(j,o3r),e(j,x7),e(x7,H5e),e(H5e,r3r),e(x7,t3r),e(x7,hU),e(hU,a3r),e(x7,n3r),e(j,s3r),e(j,$7),e($7,U5e),e(U5e,l3r),e($7,i3r),e($7,pU),e(pU,d3r),e($7,c3r),e(j,f3r),e(j,k7),e(k7,J5e),e(J5e,m3r),e(k7,g3r),e(k7,_U),e(_U,h3r),e(k7,p3r),e(j,_3r),e(j,S7),e(S7,Y5e),e(Y5e,u3r),e(S7,b3r),e(S7,uU),e(uU,v3r),e(S7,F3r),e(j,T3r),e(j,R7),e(R7,K5e),e(K5e,M3r),e(R7,E3r),e(R7,bU),e(bU,C3r),e(R7,w3r),e(j,A3r),e(j,P7),e(P7,Z5e),e(Z5e,L3r),e(P7,y3r),e(P7,vU),e(vU,x3r),e(P7,$3r),e(j,k3r),e(j,B7),e(B7,eFe),e(eFe,S3r),e(B7,R3r),e(B7,FU),e(FU,P3r),e(B7,B3r),e(j,I3r),e(j,I7),e(I7,oFe),e(oFe,N3r),e(I7,q3r),e(I7,TU),e(TU,j3r),e(I7,D3r),e(j,G3r),e(j,N7),e(N7,rFe),e(rFe,O3r),e(N7,V3r),e(N7,MU),e(MU,X3r),e(N7,z3r),e(j,Q3r),e(j,q7),e(q7,tFe),e(tFe,W3r),e(q7,H3r),e(q7,EU),e(EU,U3r),e(q7,J3r),e(j,Y3r),e(j,j7),e(j7,aFe),e(aFe,K3r),e(j7,Z3r),e(j7,CU),e(CU,e5r),e(j7,o5r),e(j,r5r),e(j,D7),e(D7,nFe),e(nFe,t5r),e(D7,a5r),e(D7,wU),e(wU,n5r),e(D7,s5r),e(j,l5r),e(j,G7),e(G7,sFe),e(sFe,i5r),e(G7,d5r),e(G7,AU),e(AU,c5r),e(G7,f5r),e(j,m5r),e(j,O7),e(O7,lFe),e(lFe,g5r),e(O7,h5r),e(O7,LU),e(LU,p5r),e(O7,_5r),e(j,u5r),e(j,V7),e(V7,iFe),e(iFe,b5r),e(V7,v5r),e(V7,yU),e(yU,F5r),e(V7,T5r),e(j,M5r),e(j,X7),e(X7,dFe),e(dFe,E5r),e(X7,C5r),e(X7,xU),e(xU,w5r),e(X7,A5r),e(j,L5r),e(j,z7),e(z7,cFe),e(cFe,y5r),e(z7,x5r),e(z7,$U),e($U,$5r),e(z7,k5r),e(j,S5r),e(j,Q7),e(Q7,fFe),e(fFe,R5r),e(Q7,P5r),e(Q7,kU),e(kU,B5r),e(Q7,I5r),e(j,N5r),e(j,W7),e(W7,mFe),e(mFe,q5r),e(W7,j5r),e(W7,SU),e(SU,D5r),e(W7,G5r),e(j,O5r),e(j,H7),e(H7,gFe),e(gFe,V5r),e(H7,X5r),e(H7,RU),e(RU,z5r),e(H7,Q5r),e(j,W5r),e(j,U7),e(U7,hFe),e(hFe,H5r),e(U7,U5r),e(U7,PU),e(PU,J5r),e(U7,Y5r),e(j,K5r),e(j,J7),e(J7,pFe),e(pFe,Z5r),e(J7,eFr),e(J7,BU),e(BU,oFr),e(J7,rFr),e(j,tFr),e(j,Y7),e(Y7,_Fe),e(_Fe,aFr),e(Y7,nFr),e(Y7,IU),e(IU,sFr),e(Y7,lFr),e(j,iFr),e(j,K7),e(K7,uFe),e(uFe,dFr),e(K7,cFr),e(K7,NU),e(NU,fFr),e(K7,mFr),e(j,gFr),e(j,Z7),e(Z7,bFe),e(bFe,hFr),e(Z7,pFr),e(Z7,qU),e(qU,_Fr),e(Z7,uFr),e(j,bFr),e(j,e9),e(e9,vFe),e(vFe,vFr),e(e9,FFr),e(e9,jU),e(jU,TFr),e(e9,MFr),e(j,EFr),e(j,o9),e(o9,FFe),e(FFe,CFr),e(o9,wFr),e(o9,DU),e(DU,AFr),e(o9,LFr),e(j,yFr),e(j,r9),e(r9,TFe),e(TFe,xFr),e(r9,$Fr),e(r9,GU),e(GU,kFr),e(r9,SFr),e(j,RFr),e(j,t9),e(t9,MFe),e(MFe,PFr),e(t9,BFr),e(t9,OU),e(OU,IFr),e(t9,NFr),e(j,qFr),e(j,a9),e(a9,EFe),e(EFe,jFr),e(a9,DFr),e(a9,VU),e(VU,GFr),e(a9,OFr),e(yr,VFr),M(n9,yr,null),b(f,EXe,u),b(f,lc,u),e(lc,s9),e(s9,CFe),M(D8,CFe,null),e(lc,XFr),e(lc,wFe),e(wFe,zFr),b(f,CXe,u),b(f,or,u),M(G8,or,null),e(or,QFr),e(or,ic),e(ic,WFr),e(ic,XU),e(XU,HFr),e(ic,UFr),e(ic,zU),e(zU,JFr),e(ic,YFr),e(or,KFr),e(or,O8),e(O8,ZFr),e(O8,AFe),e(AFe,eTr),e(O8,oTr),e(or,rTr),e(or,St),M(V8,St,null),e(St,tTr),e(St,LFe),e(LFe,aTr),e(St,nTr),e(St,dc),e(dc,sTr),e(dc,yFe),e(yFe,lTr),e(dc,iTr),e(dc,QU),e(QU,dTr),e(dc,cTr),e(St,fTr),M(l9,St,null),e(or,mTr),e(or,xr),M(X8,xr,null),e(xr,gTr),e(xr,xFe),e(xFe,hTr),e(xr,pTr),e(xr,sn),e(sn,_Tr),e(sn,$Fe),e($Fe,uTr),e(sn,bTr),e(sn,kFe),e(kFe,vTr),e(sn,FTr),e(sn,SFe),e(SFe,TTr),e(sn,MTr),e(xr,ETr),e(xr,se),e(se,i9),e(i9,RFe),e(RFe,CTr),e(i9,wTr),e(i9,WU),e(WU,ATr),e(i9,LTr),e(se,yTr),e(se,d9),e(d9,PFe),e(PFe,xTr),e(d9,$Tr),e(d9,HU),e(HU,kTr),e(d9,STr),e(se,RTr),e(se,c9),e(c9,BFe),e(BFe,PTr),e(c9,BTr),e(c9,UU),e(UU,ITr),e(c9,NTr),e(se,qTr),e(se,f9),e(f9,IFe),e(IFe,jTr),e(f9,DTr),e(f9,JU),e(JU,GTr),e(f9,OTr),e(se,VTr),e(se,m9),e(m9,NFe),e(NFe,XTr),e(m9,zTr),e(m9,YU),e(YU,QTr),e(m9,WTr),e(se,HTr),e(se,g9),e(g9,qFe),e(qFe,UTr),e(g9,JTr),e(g9,KU),e(KU,YTr),e(g9,KTr),e(se,ZTr),e(se,h9),e(h9,jFe),e(jFe,e7r),e(h9,o7r),e(h9,ZU),e(ZU,r7r),e(h9,t7r),e(se,a7r),e(se,p9),e(p9,DFe),e(DFe,n7r),e(p9,s7r),e(p9,eJ),e(eJ,l7r),e(p9,i7r),e(se,d7r),e(se,_9),e(_9,GFe),e(GFe,c7r),e(_9,f7r),e(_9,oJ),e(oJ,m7r),e(_9,g7r),e(se,h7r),e(se,u9),e(u9,OFe),e(OFe,p7r),e(u9,_7r),e(u9,rJ),e(rJ,u7r),e(u9,b7r),e(se,v7r),e(se,b9),e(b9,VFe),e(VFe,F7r),e(b9,T7r),e(b9,tJ),e(tJ,M7r),e(b9,E7r),e(se,C7r),e(se,v9),e(v9,XFe),e(XFe,w7r),e(v9,A7r),e(v9,aJ),e(aJ,L7r),e(v9,y7r),e(se,x7r),e(se,F9),e(F9,zFe),e(zFe,$7r),e(F9,k7r),e(F9,nJ),e(nJ,S7r),e(F9,R7r),e(se,P7r),e(se,T9),e(T9,QFe),e(QFe,B7r),e(T9,I7r),e(T9,sJ),e(sJ,N7r),e(T9,q7r),e(se,j7r),e(se,M9),e(M9,WFe),e(WFe,D7r),e(M9,G7r),e(M9,lJ),e(lJ,O7r),e(M9,V7r),e(se,X7r),e(se,E9),e(E9,HFe),e(HFe,z7r),e(E9,Q7r),e(E9,iJ),e(iJ,W7r),e(E9,H7r),e(se,U7r),e(se,C9),e(C9,UFe),e(UFe,J7r),e(C9,Y7r),e(C9,dJ),e(dJ,K7r),e(C9,Z7r),e(se,e9r),e(se,w9),e(w9,JFe),e(JFe,o9r),e(w9,r9r),e(w9,cJ),e(cJ,t9r),e(w9,a9r),e(se,n9r),e(se,A9),e(A9,YFe),e(YFe,s9r),e(A9,l9r),e(A9,fJ),e(fJ,i9r),e(A9,d9r),e(se,c9r),e(se,L9),e(L9,KFe),e(KFe,f9r),e(L9,m9r),e(L9,mJ),e(mJ,g9r),e(L9,h9r),e(se,p9r),e(se,y9),e(y9,ZFe),e(ZFe,_9r),e(y9,u9r),e(y9,gJ),e(gJ,b9r),e(y9,v9r),e(se,F9r),e(se,x9),e(x9,eTe),e(eTe,T9r),e(x9,M9r),e(x9,hJ),e(hJ,E9r),e(x9,C9r),e(se,w9r),e(se,$9),e($9,oTe),e(oTe,A9r),e($9,L9r),e($9,pJ),e(pJ,y9r),e($9,x9r),e(xr,$9r),M(k9,xr,null),b(f,wXe,u),b(f,cc,u),e(cc,S9),e(S9,rTe),M(z8,rTe,null),e(cc,k9r),e(cc,tTe),e(tTe,S9r),b(f,AXe,u),b(f,rr,u),M(Q8,rr,null),e(rr,R9r),e(rr,fc),e(fc,P9r),e(fc,_J),e(_J,B9r),e(fc,I9r),e(fc,uJ),e(uJ,N9r),e(fc,q9r),e(rr,j9r),e(rr,W8),e(W8,D9r),e(W8,aTe),e(aTe,G9r),e(W8,O9r),e(rr,V9r),e(rr,Rt),M(H8,Rt,null),e(Rt,X9r),e(Rt,nTe),e(nTe,z9r),e(Rt,Q9r),e(Rt,mc),e(mc,W9r),e(mc,sTe),e(sTe,H9r),e(mc,U9r),e(mc,bJ),e(bJ,J9r),e(mc,Y9r),e(Rt,K9r),M(R9,Rt,null),e(rr,Z9r),e(rr,$r),M(U8,$r,null),e($r,eMr),e($r,lTe),e(lTe,oMr),e($r,rMr),e($r,ln),e(ln,tMr),e(ln,iTe),e(iTe,aMr),e(ln,nMr),e(ln,dTe),e(dTe,sMr),e(ln,lMr),e(ln,cTe),e(cTe,iMr),e(ln,dMr),e($r,cMr),e($r,Me),e(Me,P9),e(P9,fTe),e(fTe,fMr),e(P9,mMr),e(P9,vJ),e(vJ,gMr),e(P9,hMr),e(Me,pMr),e(Me,B9),e(B9,mTe),e(mTe,_Mr),e(B9,uMr),e(B9,FJ),e(FJ,bMr),e(B9,vMr),e(Me,FMr),e(Me,I9),e(I9,gTe),e(gTe,TMr),e(I9,MMr),e(I9,TJ),e(TJ,EMr),e(I9,CMr),e(Me,wMr),e(Me,N9),e(N9,hTe),e(hTe,AMr),e(N9,LMr),e(N9,MJ),e(MJ,yMr),e(N9,xMr),e(Me,$Mr),e(Me,q9),e(q9,pTe),e(pTe,kMr),e(q9,SMr),e(q9,EJ),e(EJ,RMr),e(q9,PMr),e(Me,BMr),e(Me,j9),e(j9,_Te),e(_Te,IMr),e(j9,NMr),e(j9,CJ),e(CJ,qMr),e(j9,jMr),e(Me,DMr),e(Me,D9),e(D9,uTe),e(uTe,GMr),e(D9,OMr),e(D9,wJ),e(wJ,VMr),e(D9,XMr),e(Me,zMr),e(Me,G9),e(G9,bTe),e(bTe,QMr),e(G9,WMr),e(G9,AJ),e(AJ,HMr),e(G9,UMr),e(Me,JMr),e(Me,O9),e(O9,vTe),e(vTe,YMr),e(O9,KMr),e(O9,LJ),e(LJ,ZMr),e(O9,e4r),e(Me,o4r),e(Me,V9),e(V9,FTe),e(FTe,r4r),e(V9,t4r),e(V9,yJ),e(yJ,a4r),e(V9,n4r),e(Me,s4r),e(Me,X9),e(X9,TTe),e(TTe,l4r),e(X9,i4r),e(X9,xJ),e(xJ,d4r),e(X9,c4r),e(Me,f4r),e(Me,z9),e(z9,MTe),e(MTe,m4r),e(z9,g4r),e(z9,$J),e($J,h4r),e(z9,p4r),e(Me,_4r),e(Me,Q9),e(Q9,ETe),e(ETe,u4r),e(Q9,b4r),e(Q9,kJ),e(kJ,v4r),e(Q9,F4r),e($r,T4r),M(W9,$r,null),b(f,LXe,u),b(f,gc,u),e(gc,H9),e(H9,CTe),M(J8,CTe,null),e(gc,M4r),e(gc,wTe),e(wTe,E4r),b(f,yXe,u),b(f,tr,u),M(Y8,tr,null),e(tr,C4r),e(tr,hc),e(hc,w4r),e(hc,SJ),e(SJ,A4r),e(hc,L4r),e(hc,RJ),e(RJ,y4r),e(hc,x4r),e(tr,$4r),e(tr,K8),e(K8,k4r),e(K8,ATe),e(ATe,S4r),e(K8,R4r),e(tr,P4r),e(tr,Pt),M(Z8,Pt,null),e(Pt,B4r),e(Pt,LTe),e(LTe,I4r),e(Pt,N4r),e(Pt,pc),e(pc,q4r),e(pc,yTe),e(yTe,j4r),e(pc,D4r),e(pc,PJ),e(PJ,G4r),e(pc,O4r),e(Pt,V4r),M(U9,Pt,null),e(tr,X4r),e(tr,kr),M(ex,kr,null),e(kr,z4r),e(kr,xTe),e(xTe,Q4r),e(kr,W4r),e(kr,dn),e(dn,H4r),e(dn,$Te),e($Te,U4r),e(dn,J4r),e(dn,kTe),e(kTe,Y4r),e(dn,K4r),e(dn,STe),e(STe,Z4r),e(dn,eEr),e(kr,oEr),e(kr,rt),e(rt,J9),e(J9,RTe),e(RTe,rEr),e(J9,tEr),e(J9,BJ),e(BJ,aEr),e(J9,nEr),e(rt,sEr),e(rt,Y9),e(Y9,PTe),e(PTe,lEr),e(Y9,iEr),e(Y9,IJ),e(IJ,dEr),e(Y9,cEr),e(rt,fEr),e(rt,K9),e(K9,BTe),e(BTe,mEr),e(K9,gEr),e(K9,NJ),e(NJ,hEr),e(K9,pEr),e(rt,_Er),e(rt,Z9),e(Z9,ITe),e(ITe,uEr),e(Z9,bEr),e(Z9,qJ),e(qJ,vEr),e(Z9,FEr),e(rt,TEr),e(rt,eM),e(eM,NTe),e(NTe,MEr),e(eM,EEr),e(eM,jJ),e(jJ,CEr),e(eM,wEr),e(kr,AEr),M(oM,kr,null),b(f,xXe,u),b(f,_c,u),e(_c,rM),e(rM,qTe),M(ox,qTe,null),e(_c,LEr),e(_c,jTe),e(jTe,yEr),b(f,$Xe,u),b(f,ar,u),M(rx,ar,null),e(ar,xEr),e(ar,uc),e(uc,$Er),e(uc,DJ),e(DJ,kEr),e(uc,SEr),e(uc,GJ),e(GJ,REr),e(uc,PEr),e(ar,BEr),e(ar,tx),e(tx,IEr),e(tx,DTe),e(DTe,NEr),e(tx,qEr),e(ar,jEr),e(ar,Bt),M(ax,Bt,null),e(Bt,DEr),e(Bt,GTe),e(GTe,GEr),e(Bt,OEr),e(Bt,bc),e(bc,VEr),e(bc,OTe),e(OTe,XEr),e(bc,zEr),e(bc,OJ),e(OJ,QEr),e(bc,WEr),e(Bt,HEr),M(tM,Bt,null),e(ar,UEr),e(ar,Sr),M(nx,Sr,null),e(Sr,JEr),e(Sr,VTe),e(VTe,YEr),e(Sr,KEr),e(Sr,cn),e(cn,ZEr),e(cn,XTe),e(XTe,eCr),e(cn,oCr),e(cn,zTe),e(zTe,rCr),e(cn,tCr),e(cn,QTe),e(QTe,aCr),e(cn,nCr),e(Sr,sCr),e(Sr,ie),e(ie,aM),e(aM,WTe),e(WTe,lCr),e(aM,iCr),e(aM,VJ),e(VJ,dCr),e(aM,cCr),e(ie,fCr),e(ie,nM),e(nM,HTe),e(HTe,mCr),e(nM,gCr),e(nM,XJ),e(XJ,hCr),e(nM,pCr),e(ie,_Cr),e(ie,sM),e(sM,UTe),e(UTe,uCr),e(sM,bCr),e(sM,zJ),e(zJ,vCr),e(sM,FCr),e(ie,TCr),e(ie,lM),e(lM,JTe),e(JTe,MCr),e(lM,ECr),e(lM,QJ),e(QJ,CCr),e(lM,wCr),e(ie,ACr),e(ie,iM),e(iM,YTe),e(YTe,LCr),e(iM,yCr),e(iM,WJ),e(WJ,xCr),e(iM,$Cr),e(ie,kCr),e(ie,dM),e(dM,KTe),e(KTe,SCr),e(dM,RCr),e(dM,HJ),e(HJ,PCr),e(dM,BCr),e(ie,ICr),e(ie,cM),e(cM,ZTe),e(ZTe,NCr),e(cM,qCr),e(cM,UJ),e(UJ,jCr),e(cM,DCr),e(ie,GCr),e(ie,fM),e(fM,e7e),e(e7e,OCr),e(fM,VCr),e(fM,JJ),e(JJ,XCr),e(fM,zCr),e(ie,QCr),e(ie,mM),e(mM,o7e),e(o7e,WCr),e(mM,HCr),e(mM,YJ),e(YJ,UCr),e(mM,JCr),e(ie,YCr),e(ie,gM),e(gM,r7e),e(r7e,KCr),e(gM,ZCr),e(gM,KJ),e(KJ,e0r),e(gM,o0r),e(ie,r0r),e(ie,hM),e(hM,t7e),e(t7e,t0r),e(hM,a0r),e(hM,ZJ),e(ZJ,n0r),e(hM,s0r),e(ie,l0r),e(ie,pM),e(pM,a7e),e(a7e,i0r),e(pM,d0r),e(pM,eY),e(eY,c0r),e(pM,f0r),e(ie,m0r),e(ie,_M),e(_M,n7e),e(n7e,g0r),e(_M,h0r),e(_M,oY),e(oY,p0r),e(_M,_0r),e(ie,u0r),e(ie,uM),e(uM,s7e),e(s7e,b0r),e(uM,v0r),e(uM,rY),e(rY,F0r),e(uM,T0r),e(ie,M0r),e(ie,bM),e(bM,l7e),e(l7e,E0r),e(bM,C0r),e(bM,tY),e(tY,w0r),e(bM,A0r),e(ie,L0r),e(ie,vM),e(vM,i7e),e(i7e,y0r),e(vM,x0r),e(vM,aY),e(aY,$0r),e(vM,k0r),e(ie,S0r),e(ie,FM),e(FM,d7e),e(d7e,R0r),e(FM,P0r),e(FM,nY),e(nY,B0r),e(FM,I0r),e(ie,N0r),e(ie,TM),e(TM,c7e),e(c7e,q0r),e(TM,j0r),e(TM,sY),e(sY,D0r),e(TM,G0r),e(ie,O0r),e(ie,MM),e(MM,f7e),e(f7e,V0r),e(MM,X0r),e(MM,lY),e(lY,z0r),e(MM,Q0r),e(ie,W0r),e(ie,EM),e(EM,m7e),e(m7e,H0r),e(EM,U0r),e(EM,iY),e(iY,J0r),e(EM,Y0r),e(Sr,K0r),M(CM,Sr,null),b(f,kXe,u),b(f,vc,u),e(vc,wM),e(wM,g7e),M(sx,g7e,null),e(vc,Z0r),e(vc,h7e),e(h7e,ewr),b(f,SXe,u),b(f,nr,u),M(lx,nr,null),e(nr,owr),e(nr,Fc),e(Fc,rwr),e(Fc,dY),e(dY,twr),e(Fc,awr),e(Fc,cY),e(cY,nwr),e(Fc,swr),e(nr,lwr),e(nr,ix),e(ix,iwr),e(ix,p7e),e(p7e,dwr),e(ix,cwr),e(nr,fwr),e(nr,It),M(dx,It,null),e(It,mwr),e(It,_7e),e(_7e,gwr),e(It,hwr),e(It,Tc),e(Tc,pwr),e(Tc,u7e),e(u7e,_wr),e(Tc,uwr),e(Tc,fY),e(fY,bwr),e(Tc,vwr),e(It,Fwr),M(AM,It,null),e(nr,Twr),e(nr,Rr),M(cx,Rr,null),e(Rr,Mwr),e(Rr,b7e),e(b7e,Ewr),e(Rr,Cwr),e(Rr,fn),e(fn,wwr),e(fn,v7e),e(v7e,Awr),e(fn,Lwr),e(fn,F7e),e(F7e,ywr),e(fn,xwr),e(fn,T7e),e(T7e,$wr),e(fn,kwr),e(Rr,Swr),e(Rr,ye),e(ye,LM),e(LM,M7e),e(M7e,Rwr),e(LM,Pwr),e(LM,mY),e(mY,Bwr),e(LM,Iwr),e(ye,Nwr),e(ye,yM),e(yM,E7e),e(E7e,qwr),e(yM,jwr),e(yM,gY),e(gY,Dwr),e(yM,Gwr),e(ye,Owr),e(ye,xM),e(xM,C7e),e(C7e,Vwr),e(xM,Xwr),e(xM,hY),e(hY,zwr),e(xM,Qwr),e(ye,Wwr),e(ye,$M),e($M,w7e),e(w7e,Hwr),e($M,Uwr),e($M,pY),e(pY,Jwr),e($M,Ywr),e(ye,Kwr),e(ye,kM),e(kM,A7e),e(A7e,Zwr),e(kM,eAr),e(kM,_Y),e(_Y,oAr),e(kM,rAr),e(ye,tAr),e(ye,SM),e(SM,L7e),e(L7e,aAr),e(SM,nAr),e(SM,uY),e(uY,sAr),e(SM,lAr),e(ye,iAr),e(ye,RM),e(RM,y7e),e(y7e,dAr),e(RM,cAr),e(RM,bY),e(bY,fAr),e(RM,mAr),e(ye,gAr),e(ye,PM),e(PM,x7e),e(x7e,hAr),e(PM,pAr),e(PM,vY),e(vY,_Ar),e(PM,uAr),e(ye,bAr),e(ye,BM),e(BM,$7e),e($7e,vAr),e(BM,FAr),e(BM,FY),e(FY,TAr),e(BM,MAr),e(ye,EAr),e(ye,IM),e(IM,k7e),e(k7e,CAr),e(IM,wAr),e(IM,TY),e(TY,AAr),e(IM,LAr),e(Rr,yAr),M(NM,Rr,null),b(f,RXe,u),b(f,Mc,u),e(Mc,qM),e(qM,S7e),M(fx,S7e,null),e(Mc,xAr),e(Mc,R7e),e(R7e,$Ar),b(f,PXe,u),b(f,sr,u),M(mx,sr,null),e(sr,kAr),e(sr,Ec),e(Ec,SAr),e(Ec,MY),e(MY,RAr),e(Ec,PAr),e(Ec,EY),e(EY,BAr),e(Ec,IAr),e(sr,NAr),e(sr,gx),e(gx,qAr),e(gx,P7e),e(P7e,jAr),e(gx,DAr),e(sr,GAr),e(sr,Nt),M(hx,Nt,null),e(Nt,OAr),e(Nt,B7e),e(B7e,VAr),e(Nt,XAr),e(Nt,Cc),e(Cc,zAr),e(Cc,I7e),e(I7e,QAr),e(Cc,WAr),e(Cc,CY),e(CY,HAr),e(Cc,UAr),e(Nt,JAr),M(jM,Nt,null),e(sr,YAr),e(sr,Pr),M(px,Pr,null),e(Pr,KAr),e(Pr,N7e),e(N7e,ZAr),e(Pr,e6r),e(Pr,mn),e(mn,o6r),e(mn,q7e),e(q7e,r6r),e(mn,t6r),e(mn,j7e),e(j7e,a6r),e(mn,n6r),e(mn,D7e),e(D7e,s6r),e(mn,l6r),e(Pr,i6r),e(Pr,te),e(te,DM),e(DM,G7e),e(G7e,d6r),e(DM,c6r),e(DM,wY),e(wY,f6r),e(DM,m6r),e(te,g6r),e(te,GM),e(GM,O7e),e(O7e,h6r),e(GM,p6r),e(GM,AY),e(AY,_6r),e(GM,u6r),e(te,b6r),e(te,OM),e(OM,V7e),e(V7e,v6r),e(OM,F6r),e(OM,LY),e(LY,T6r),e(OM,M6r),e(te,E6r),e(te,VM),e(VM,X7e),e(X7e,C6r),e(VM,w6r),e(VM,yY),e(yY,A6r),e(VM,L6r),e(te,y6r),e(te,XM),e(XM,z7e),e(z7e,x6r),e(XM,$6r),e(XM,xY),e(xY,k6r),e(XM,S6r),e(te,R6r),e(te,zM),e(zM,Q7e),e(Q7e,P6r),e(zM,B6r),e(zM,$Y),e($Y,I6r),e(zM,N6r),e(te,q6r),e(te,QM),e(QM,W7e),e(W7e,j6r),e(QM,D6r),e(QM,kY),e(kY,G6r),e(QM,O6r),e(te,V6r),e(te,WM),e(WM,H7e),e(H7e,X6r),e(WM,z6r),e(WM,SY),e(SY,Q6r),e(WM,W6r),e(te,H6r),e(te,HM),e(HM,U7e),e(U7e,U6r),e(HM,J6r),e(HM,RY),e(RY,Y6r),e(HM,K6r),e(te,Z6r),e(te,UM),e(UM,J7e),e(J7e,eLr),e(UM,oLr),e(UM,PY),e(PY,rLr),e(UM,tLr),e(te,aLr),e(te,JM),e(JM,Y7e),e(Y7e,nLr),e(JM,sLr),e(JM,BY),e(BY,lLr),e(JM,iLr),e(te,dLr),e(te,YM),e(YM,K7e),e(K7e,cLr),e(YM,fLr),e(YM,IY),e(IY,mLr),e(YM,gLr),e(te,hLr),e(te,KM),e(KM,Z7e),e(Z7e,pLr),e(KM,_Lr),e(KM,NY),e(NY,uLr),e(KM,bLr),e(te,vLr),e(te,ZM),e(ZM,e9e),e(e9e,FLr),e(ZM,TLr),e(ZM,qY),e(qY,MLr),e(ZM,ELr),e(te,CLr),e(te,e4),e(e4,o9e),e(o9e,wLr),e(e4,ALr),e(e4,jY),e(jY,LLr),e(e4,yLr),e(te,xLr),e(te,o4),e(o4,r9e),e(r9e,$Lr),e(o4,kLr),e(o4,DY),e(DY,SLr),e(o4,RLr),e(te,PLr),e(te,r4),e(r4,t9e),e(t9e,BLr),e(r4,ILr),e(r4,GY),e(GY,NLr),e(r4,qLr),e(te,jLr),e(te,t4),e(t4,a9e),e(a9e,DLr),e(t4,GLr),e(t4,OY),e(OY,OLr),e(t4,VLr),e(te,XLr),e(te,a4),e(a4,n9e),e(n9e,zLr),e(a4,QLr),e(a4,VY),e(VY,WLr),e(a4,HLr),e(te,ULr),e(te,n4),e(n4,s9e),e(s9e,JLr),e(n4,YLr),e(n4,XY),e(XY,KLr),e(n4,ZLr),e(te,eyr),e(te,s4),e(s4,l9e),e(l9e,oyr),e(s4,ryr),e(s4,zY),e(zY,tyr),e(s4,ayr),e(te,nyr),e(te,l4),e(l4,i9e),e(i9e,syr),e(l4,lyr),e(l4,QY),e(QY,iyr),e(l4,dyr),e(te,cyr),e(te,i4),e(i4,d9e),e(d9e,fyr),e(i4,myr),e(i4,WY),e(WY,gyr),e(i4,hyr),e(te,pyr),e(te,d4),e(d4,c9e),e(c9e,_yr),e(d4,uyr),e(d4,HY),e(HY,byr),e(d4,vyr),e(te,Fyr),e(te,c4),e(c4,f9e),e(f9e,Tyr),e(c4,Myr),e(c4,UY),e(UY,Eyr),e(c4,Cyr),e(te,wyr),e(te,f4),e(f4,m9e),e(m9e,Ayr),e(f4,Lyr),e(f4,JY),e(JY,yyr),e(f4,xyr),e(Pr,$yr),M(m4,Pr,null),b(f,BXe,u),b(f,wc,u),e(wc,g4),e(g4,g9e),M(_x,g9e,null),e(wc,kyr),e(wc,h9e),e(h9e,Syr),b(f,IXe,u),b(f,lr,u),M(ux,lr,null),e(lr,Ryr),e(lr,Ac),e(Ac,Pyr),e(Ac,YY),e(YY,Byr),e(Ac,Iyr),e(Ac,KY),e(KY,Nyr),e(Ac,qyr),e(lr,jyr),e(lr,bx),e(bx,Dyr),e(bx,p9e),e(p9e,Gyr),e(bx,Oyr),e(lr,Vyr),e(lr,qt),M(vx,qt,null),e(qt,Xyr),e(qt,_9e),e(_9e,zyr),e(qt,Qyr),e(qt,Lc),e(Lc,Wyr),e(Lc,u9e),e(u9e,Hyr),e(Lc,Uyr),e(Lc,ZY),e(ZY,Jyr),e(Lc,Yyr),e(qt,Kyr),M(h4,qt,null),e(lr,Zyr),e(lr,Br),M(Fx,Br,null),e(Br,e8r),e(Br,b9e),e(b9e,o8r),e(Br,r8r),e(Br,gn),e(gn,t8r),e(gn,v9e),e(v9e,a8r),e(gn,n8r),e(gn,F9e),e(F9e,s8r),e(gn,l8r),e(gn,T9e),e(T9e,i8r),e(gn,d8r),e(Br,c8r),e(Br,_e),e(_e,p4),e(p4,M9e),e(M9e,f8r),e(p4,m8r),e(p4,eK),e(eK,g8r),e(p4,h8r),e(_e,p8r),e(_e,_4),e(_4,E9e),e(E9e,_8r),e(_4,u8r),e(_4,oK),e(oK,b8r),e(_4,v8r),e(_e,F8r),e(_e,u4),e(u4,C9e),e(C9e,T8r),e(u4,M8r),e(u4,rK),e(rK,E8r),e(u4,C8r),e(_e,w8r),e(_e,b4),e(b4,w9e),e(w9e,A8r),e(b4,L8r),e(b4,tK),e(tK,y8r),e(b4,x8r),e(_e,$8r),e(_e,v4),e(v4,A9e),e(A9e,k8r),e(v4,S8r),e(v4,aK),e(aK,R8r),e(v4,P8r),e(_e,B8r),e(_e,F4),e(F4,L9e),e(L9e,I8r),e(F4,N8r),e(F4,nK),e(nK,q8r),e(F4,j8r),e(_e,D8r),e(_e,T4),e(T4,y9e),e(y9e,G8r),e(T4,O8r),e(T4,sK),e(sK,V8r),e(T4,X8r),e(_e,z8r),e(_e,M4),e(M4,x9e),e(x9e,Q8r),e(M4,W8r),e(M4,lK),e(lK,H8r),e(M4,U8r),e(_e,J8r),e(_e,E4),e(E4,$9e),e($9e,Y8r),e(E4,K8r),e(E4,iK),e(iK,Z8r),e(E4,exr),e(_e,oxr),e(_e,C4),e(C4,k9e),e(k9e,rxr),e(C4,txr),e(C4,dK),e(dK,axr),e(C4,nxr),e(_e,sxr),e(_e,w4),e(w4,S9e),e(S9e,lxr),e(w4,ixr),e(w4,cK),e(cK,dxr),e(w4,cxr),e(_e,fxr),e(_e,A4),e(A4,R9e),e(R9e,mxr),e(A4,gxr),e(A4,fK),e(fK,hxr),e(A4,pxr),e(_e,_xr),e(_e,L4),e(L4,P9e),e(P9e,uxr),e(L4,bxr),e(L4,mK),e(mK,vxr),e(L4,Fxr),e(_e,Txr),e(_e,y4),e(y4,B9e),e(B9e,Mxr),e(y4,Exr),e(y4,gK),e(gK,Cxr),e(y4,wxr),e(_e,Axr),e(_e,x4),e(x4,I9e),e(I9e,Lxr),e(x4,yxr),e(x4,hK),e(hK,xxr),e(x4,$xr),e(_e,kxr),e(_e,$4),e($4,N9e),e(N9e,Sxr),e($4,Rxr),e($4,pK),e(pK,Pxr),e($4,Bxr),e(_e,Ixr),e(_e,k4),e(k4,q9e),e(q9e,Nxr),e(k4,qxr),e(k4,_K),e(_K,jxr),e(k4,Dxr),e(Br,Gxr),M(S4,Br,null),b(f,NXe,u),b(f,yc,u),e(yc,R4),e(R4,j9e),M(Tx,j9e,null),e(yc,Oxr),e(yc,D9e),e(D9e,Vxr),b(f,qXe,u),b(f,ir,u),M(Mx,ir,null),e(ir,Xxr),e(ir,xc),e(xc,zxr),e(xc,uK),e(uK,Qxr),e(xc,Wxr),e(xc,bK),e(bK,Hxr),e(xc,Uxr),e(ir,Jxr),e(ir,Ex),e(Ex,Yxr),e(Ex,G9e),e(G9e,Kxr),e(Ex,Zxr),e(ir,e$r),e(ir,jt),M(Cx,jt,null),e(jt,o$r),e(jt,O9e),e(O9e,r$r),e(jt,t$r),e(jt,$c),e($c,a$r),e($c,V9e),e(V9e,n$r),e($c,s$r),e($c,vK),e(vK,l$r),e($c,i$r),e(jt,d$r),M(P4,jt,null),e(ir,c$r),e(ir,Ir),M(wx,Ir,null),e(Ir,f$r),e(Ir,X9e),e(X9e,m$r),e(Ir,g$r),e(Ir,hn),e(hn,h$r),e(hn,z9e),e(z9e,p$r),e(hn,_$r),e(hn,Q9e),e(Q9e,u$r),e(hn,b$r),e(hn,W9e),e(W9e,v$r),e(hn,F$r),e(Ir,T$r),e(Ir,Ax),e(Ax,B4),e(B4,H9e),e(H9e,M$r),e(B4,E$r),e(B4,FK),e(FK,C$r),e(B4,w$r),e(Ax,A$r),e(Ax,I4),e(I4,U9e),e(U9e,L$r),e(I4,y$r),e(I4,TK),e(TK,x$r),e(I4,$$r),e(Ir,k$r),M(N4,Ir,null),b(f,jXe,u),b(f,kc,u),e(kc,q4),e(q4,J9e),M(Lx,J9e,null),e(kc,S$r),e(kc,Y9e),e(Y9e,R$r),b(f,DXe,u),b(f,dr,u),M(yx,dr,null),e(dr,P$r),e(dr,Sc),e(Sc,B$r),e(Sc,MK),e(MK,I$r),e(Sc,N$r),e(Sc,EK),e(EK,q$r),e(Sc,j$r),e(dr,D$r),e(dr,xx),e(xx,G$r),e(xx,K9e),e(K9e,O$r),e(xx,V$r),e(dr,X$r),e(dr,Dt),M($x,Dt,null),e(Dt,z$r),e(Dt,Z9e),e(Z9e,Q$r),e(Dt,W$r),e(Dt,Rc),e(Rc,H$r),e(Rc,eMe),e(eMe,U$r),e(Rc,J$r),e(Rc,CK),e(CK,Y$r),e(Rc,K$r),e(Dt,Z$r),M(j4,Dt,null),e(dr,ekr),e(dr,Nr),M(kx,Nr,null),e(Nr,okr),e(Nr,oMe),e(oMe,rkr),e(Nr,tkr),e(Nr,pn),e(pn,akr),e(pn,rMe),e(rMe,nkr),e(pn,skr),e(pn,tMe),e(tMe,lkr),e(pn,ikr),e(pn,aMe),e(aMe,dkr),e(pn,ckr),e(Nr,fkr),e(Nr,nMe),e(nMe,D4),e(D4,sMe),e(sMe,mkr),e(D4,gkr),e(D4,wK),e(wK,hkr),e(D4,pkr),e(Nr,_kr),M(G4,Nr,null),b(f,GXe,u),b(f,Pc,u),e(Pc,O4),e(O4,lMe),M(Sx,lMe,null),e(Pc,ukr),e(Pc,iMe),e(iMe,bkr),b(f,OXe,u),b(f,cr,u),M(Rx,cr,null),e(cr,vkr),e(cr,Bc),e(Bc,Fkr),e(Bc,AK),e(AK,Tkr),e(Bc,Mkr),e(Bc,LK),e(LK,Ekr),e(Bc,Ckr),e(cr,wkr),e(cr,Px),e(Px,Akr),e(Px,dMe),e(dMe,Lkr),e(Px,ykr),e(cr,xkr),e(cr,Gt),M(Bx,Gt,null),e(Gt,$kr),e(Gt,cMe),e(cMe,kkr),e(Gt,Skr),e(Gt,Ic),e(Ic,Rkr),e(Ic,fMe),e(fMe,Pkr),e(Ic,Bkr),e(Ic,yK),e(yK,Ikr),e(Ic,Nkr),e(Gt,qkr),M(V4,Gt,null),e(cr,jkr),e(cr,qr),M(Ix,qr,null),e(qr,Dkr),e(qr,mMe),e(mMe,Gkr),e(qr,Okr),e(qr,_n),e(_n,Vkr),e(_n,gMe),e(gMe,Xkr),e(_n,zkr),e(_n,hMe),e(hMe,Qkr),e(_n,Wkr),e(_n,pMe),e(pMe,Hkr),e(_n,Ukr),e(qr,Jkr),e(qr,de),e(de,X4),e(X4,_Me),e(_Me,Ykr),e(X4,Kkr),e(X4,xK),e(xK,Zkr),e(X4,eSr),e(de,oSr),e(de,z4),e(z4,uMe),e(uMe,rSr),e(z4,tSr),e(z4,$K),e($K,aSr),e(z4,nSr),e(de,sSr),e(de,Q4),e(Q4,bMe),e(bMe,lSr),e(Q4,iSr),e(Q4,kK),e(kK,dSr),e(Q4,cSr),e(de,fSr),e(de,W4),e(W4,vMe),e(vMe,mSr),e(W4,gSr),e(W4,SK),e(SK,hSr),e(W4,pSr),e(de,_Sr),e(de,H4),e(H4,FMe),e(FMe,uSr),e(H4,bSr),e(H4,RK),e(RK,vSr),e(H4,FSr),e(de,TSr),e(de,U4),e(U4,TMe),e(TMe,MSr),e(U4,ESr),e(U4,PK),e(PK,CSr),e(U4,wSr),e(de,ASr),e(de,J4),e(J4,MMe),e(MMe,LSr),e(J4,ySr),e(J4,BK),e(BK,xSr),e(J4,$Sr),e(de,kSr),e(de,Y4),e(Y4,EMe),e(EMe,SSr),e(Y4,RSr),e(Y4,IK),e(IK,PSr),e(Y4,BSr),e(de,ISr),e(de,K4),e(K4,CMe),e(CMe,NSr),e(K4,qSr),e(K4,NK),e(NK,jSr),e(K4,DSr),e(de,GSr),e(de,Z4),e(Z4,wMe),e(wMe,OSr),e(Z4,VSr),e(Z4,qK),e(qK,XSr),e(Z4,zSr),e(de,QSr),e(de,eE),e(eE,AMe),e(AMe,WSr),e(eE,HSr),e(eE,jK),e(jK,USr),e(eE,JSr),e(de,YSr),e(de,oE),e(oE,LMe),e(LMe,KSr),e(oE,ZSr),e(oE,DK),e(DK,eRr),e(oE,oRr),e(de,rRr),e(de,rE),e(rE,yMe),e(yMe,tRr),e(rE,aRr),e(rE,GK),e(GK,nRr),e(rE,sRr),e(de,lRr),e(de,tE),e(tE,xMe),e(xMe,iRr),e(tE,dRr),e(tE,OK),e(OK,cRr),e(tE,fRr),e(de,mRr),e(de,aE),e(aE,$Me),e($Me,gRr),e(aE,hRr),e(aE,VK),e(VK,pRr),e(aE,_Rr),e(de,uRr),e(de,nE),e(nE,kMe),e(kMe,bRr),e(nE,vRr),e(nE,XK),e(XK,FRr),e(nE,TRr),e(de,MRr),e(de,sE),e(sE,SMe),e(SMe,ERr),e(sE,CRr),e(sE,zK),e(zK,wRr),e(sE,ARr),e(de,LRr),e(de,lE),e(lE,RMe),e(RMe,yRr),e(lE,xRr),e(lE,QK),e(QK,$Rr),e(lE,kRr),e(de,SRr),e(de,iE),e(iE,PMe),e(PMe,RRr),e(iE,PRr),e(iE,WK),e(WK,BRr),e(iE,IRr),e(de,NRr),e(de,dE),e(dE,BMe),e(BMe,qRr),e(dE,jRr),e(dE,HK),e(HK,DRr),e(dE,GRr),e(qr,ORr),M(cE,qr,null),b(f,VXe,u),b(f,Nc,u),e(Nc,fE),e(fE,IMe),M(Nx,IMe,null),e(Nc,VRr),e(Nc,NMe),e(NMe,XRr),b(f,XXe,u),b(f,fr,u),M(qx,fr,null),e(fr,zRr),e(fr,qc),e(qc,QRr),e(qc,UK),e(UK,WRr),e(qc,HRr),e(qc,JK),e(JK,URr),e(qc,JRr),e(fr,YRr),e(fr,jx),e(jx,KRr),e(jx,qMe),e(qMe,ZRr),e(jx,ePr),e(fr,oPr),e(fr,Ot),M(Dx,Ot,null),e(Ot,rPr),e(Ot,jMe),e(jMe,tPr),e(Ot,aPr),e(Ot,jc),e(jc,nPr),e(jc,DMe),e(DMe,sPr),e(jc,lPr),e(jc,YK),e(YK,iPr),e(jc,dPr),e(Ot,cPr),M(mE,Ot,null),e(fr,fPr),e(fr,jr),M(Gx,jr,null),e(jr,mPr),e(jr,GMe),e(GMe,gPr),e(jr,hPr),e(jr,un),e(un,pPr),e(un,OMe),e(OMe,_Pr),e(un,uPr),e(un,VMe),e(VMe,bPr),e(un,vPr),e(un,XMe),e(XMe,FPr),e(un,TPr),e(jr,MPr),e(jr,ce),e(ce,gE),e(gE,zMe),e(zMe,EPr),e(gE,CPr),e(gE,KK),e(KK,wPr),e(gE,APr),e(ce,LPr),e(ce,hE),e(hE,QMe),e(QMe,yPr),e(hE,xPr),e(hE,ZK),e(ZK,$Pr),e(hE,kPr),e(ce,SPr),e(ce,pE),e(pE,WMe),e(WMe,RPr),e(pE,PPr),e(pE,eZ),e(eZ,BPr),e(pE,IPr),e(ce,NPr),e(ce,_E),e(_E,HMe),e(HMe,qPr),e(_E,jPr),e(_E,oZ),e(oZ,DPr),e(_E,GPr),e(ce,OPr),e(ce,uE),e(uE,UMe),e(UMe,VPr),e(uE,XPr),e(uE,rZ),e(rZ,zPr),e(uE,QPr),e(ce,WPr),e(ce,bE),e(bE,JMe),e(JMe,HPr),e(bE,UPr),e(bE,tZ),e(tZ,JPr),e(bE,YPr),e(ce,KPr),e(ce,vE),e(vE,YMe),e(YMe,ZPr),e(vE,eBr),e(vE,aZ),e(aZ,oBr),e(vE,rBr),e(ce,tBr),e(ce,FE),e(FE,KMe),e(KMe,aBr),e(FE,nBr),e(FE,nZ),e(nZ,sBr),e(FE,lBr),e(ce,iBr),e(ce,TE),e(TE,ZMe),e(ZMe,dBr),e(TE,cBr),e(TE,sZ),e(sZ,fBr),e(TE,mBr),e(ce,gBr),e(ce,ME),e(ME,e4e),e(e4e,hBr),e(ME,pBr),e(ME,lZ),e(lZ,_Br),e(ME,uBr),e(ce,bBr),e(ce,EE),e(EE,o4e),e(o4e,vBr),e(EE,FBr),e(EE,iZ),e(iZ,TBr),e(EE,MBr),e(ce,EBr),e(ce,CE),e(CE,r4e),e(r4e,CBr),e(CE,wBr),e(CE,dZ),e(dZ,ABr),e(CE,LBr),e(ce,yBr),e(ce,wE),e(wE,t4e),e(t4e,xBr),e(wE,$Br),e(wE,cZ),e(cZ,kBr),e(wE,SBr),e(ce,RBr),e(ce,AE),e(AE,a4e),e(a4e,PBr),e(AE,BBr),e(AE,fZ),e(fZ,IBr),e(AE,NBr),e(ce,qBr),e(ce,LE),e(LE,n4e),e(n4e,jBr),e(LE,DBr),e(LE,mZ),e(mZ,GBr),e(LE,OBr),e(ce,VBr),e(ce,yE),e(yE,s4e),e(s4e,XBr),e(yE,zBr),e(yE,gZ),e(gZ,QBr),e(yE,WBr),e(ce,HBr),e(ce,xE),e(xE,l4e),e(l4e,UBr),e(xE,JBr),e(xE,hZ),e(hZ,YBr),e(xE,KBr),e(ce,ZBr),e(ce,$E),e($E,i4e),e(i4e,eIr),e($E,oIr),e($E,pZ),e(pZ,rIr),e($E,tIr),e(ce,aIr),e(ce,kE),e(kE,d4e),e(d4e,nIr),e(kE,sIr),e(kE,_Z),e(_Z,lIr),e(kE,iIr),e(ce,dIr),e(ce,SE),e(SE,c4e),e(c4e,cIr),e(SE,fIr),e(SE,uZ),e(uZ,mIr),e(SE,gIr),e(jr,hIr),M(RE,jr,null),b(f,zXe,u),b(f,Dc,u),e(Dc,PE),e(PE,f4e),M(Ox,f4e,null),e(Dc,pIr),e(Dc,m4e),e(m4e,_Ir),b(f,QXe,u),b(f,mr,u),M(Vx,mr,null),e(mr,uIr),e(mr,Gc),e(Gc,bIr),e(Gc,bZ),e(bZ,vIr),e(Gc,FIr),e(Gc,vZ),e(vZ,TIr),e(Gc,MIr),e(mr,EIr),e(mr,Xx),e(Xx,CIr),e(Xx,g4e),e(g4e,wIr),e(Xx,AIr),e(mr,LIr),e(mr,Vt),M(zx,Vt,null),e(Vt,yIr),e(Vt,h4e),e(h4e,xIr),e(Vt,$Ir),e(Vt,Oc),e(Oc,kIr),e(Oc,p4e),e(p4e,SIr),e(Oc,RIr),e(Oc,FZ),e(FZ,PIr),e(Oc,BIr),e(Vt,IIr),M(BE,Vt,null),e(mr,NIr),e(mr,Dr),M(Qx,Dr,null),e(Dr,qIr),e(Dr,_4e),e(_4e,jIr),e(Dr,DIr),e(Dr,bn),e(bn,GIr),e(bn,u4e),e(u4e,OIr),e(bn,VIr),e(bn,b4e),e(b4e,XIr),e(bn,zIr),e(bn,v4e),e(v4e,QIr),e(bn,WIr),e(Dr,HIr),e(Dr,F4e),e(F4e,IE),e(IE,T4e),e(T4e,UIr),e(IE,JIr),e(IE,TZ),e(TZ,YIr),e(IE,KIr),e(Dr,ZIr),M(NE,Dr,null),b(f,WXe,u),b(f,Vc,u),e(Vc,qE),e(qE,M4e),M(Wx,M4e,null),e(Vc,eNr),e(Vc,E4e),e(E4e,oNr),b(f,HXe,u),b(f,gr,u),M(Hx,gr,null),e(gr,rNr),e(gr,Xc),e(Xc,tNr),e(Xc,MZ),e(MZ,aNr),e(Xc,nNr),e(Xc,EZ),e(EZ,sNr),e(Xc,lNr),e(gr,iNr),e(gr,Ux),e(Ux,dNr),e(Ux,C4e),e(C4e,cNr),e(Ux,fNr),e(gr,mNr),e(gr,Xt),M(Jx,Xt,null),e(Xt,gNr),e(Xt,w4e),e(w4e,hNr),e(Xt,pNr),e(Xt,zc),e(zc,_Nr),e(zc,A4e),e(A4e,uNr),e(zc,bNr),e(zc,CZ),e(CZ,vNr),e(zc,FNr),e(Xt,TNr),M(jE,Xt,null),e(gr,MNr),e(gr,Gr),M(Yx,Gr,null),e(Gr,ENr),e(Gr,L4e),e(L4e,CNr),e(Gr,wNr),e(Gr,vn),e(vn,ANr),e(vn,y4e),e(y4e,LNr),e(vn,yNr),e(vn,x4e),e(x4e,xNr),e(vn,$Nr),e(vn,$4e),e($4e,kNr),e(vn,SNr),e(Gr,RNr),e(Gr,k4e),e(k4e,DE),e(DE,S4e),e(S4e,PNr),e(DE,BNr),e(DE,wZ),e(wZ,INr),e(DE,NNr),e(Gr,qNr),M(GE,Gr,null),b(f,UXe,u),b(f,Qc,u),e(Qc,OE),e(OE,R4e),M(Kx,R4e,null),e(Qc,jNr),e(Qc,P4e),e(P4e,DNr),b(f,JXe,u),b(f,hr,u),M(Zx,hr,null),e(hr,GNr),e(hr,Wc),e(Wc,ONr),e(Wc,AZ),e(AZ,VNr),e(Wc,XNr),e(Wc,LZ),e(LZ,zNr),e(Wc,QNr),e(hr,WNr),e(hr,e$),e(e$,HNr),e(e$,B4e),e(B4e,UNr),e(e$,JNr),e(hr,YNr),e(hr,zt),M(o$,zt,null),e(zt,KNr),e(zt,I4e),e(I4e,ZNr),e(zt,eqr),e(zt,Hc),e(Hc,oqr),e(Hc,N4e),e(N4e,rqr),e(Hc,tqr),e(Hc,yZ),e(yZ,aqr),e(Hc,nqr),e(zt,sqr),M(VE,zt,null),e(hr,lqr),e(hr,Or),M(r$,Or,null),e(Or,iqr),e(Or,q4e),e(q4e,dqr),e(Or,cqr),e(Or,Fn),e(Fn,fqr),e(Fn,j4e),e(j4e,mqr),e(Fn,gqr),e(Fn,D4e),e(D4e,hqr),e(Fn,pqr),e(Fn,G4e),e(G4e,_qr),e(Fn,uqr),e(Or,bqr),e(Or,oe),e(oe,XE),e(XE,O4e),e(O4e,vqr),e(XE,Fqr),e(XE,xZ),e(xZ,Tqr),e(XE,Mqr),e(oe,Eqr),e(oe,zE),e(zE,V4e),e(V4e,Cqr),e(zE,wqr),e(zE,$Z),e($Z,Aqr),e(zE,Lqr),e(oe,yqr),e(oe,QE),e(QE,X4e),e(X4e,xqr),e(QE,$qr),e(QE,kZ),e(kZ,kqr),e(QE,Sqr),e(oe,Rqr),e(oe,WE),e(WE,z4e),e(z4e,Pqr),e(WE,Bqr),e(WE,SZ),e(SZ,Iqr),e(WE,Nqr),e(oe,qqr),e(oe,HE),e(HE,Q4e),e(Q4e,jqr),e(HE,Dqr),e(HE,RZ),e(RZ,Gqr),e(HE,Oqr),e(oe,Vqr),e(oe,UE),e(UE,W4e),e(W4e,Xqr),e(UE,zqr),e(UE,PZ),e(PZ,Qqr),e(UE,Wqr),e(oe,Hqr),e(oe,JE),e(JE,H4e),e(H4e,Uqr),e(JE,Jqr),e(JE,BZ),e(BZ,Yqr),e(JE,Kqr),e(oe,Zqr),e(oe,YE),e(YE,U4e),e(U4e,ejr),e(YE,ojr),e(YE,IZ),e(IZ,rjr),e(YE,tjr),e(oe,ajr),e(oe,KE),e(KE,J4e),e(J4e,njr),e(KE,sjr),e(KE,NZ),e(NZ,ljr),e(KE,ijr),e(oe,djr),e(oe,ZE),e(ZE,Y4e),e(Y4e,cjr),e(ZE,fjr),e(ZE,qZ),e(qZ,mjr),e(ZE,gjr),e(oe,hjr),e(oe,eC),e(eC,K4e),e(K4e,pjr),e(eC,_jr),e(eC,jZ),e(jZ,ujr),e(eC,bjr),e(oe,vjr),e(oe,oC),e(oC,Z4e),e(Z4e,Fjr),e(oC,Tjr),e(oC,DZ),e(DZ,Mjr),e(oC,Ejr),e(oe,Cjr),e(oe,rC),e(rC,eEe),e(eEe,wjr),e(rC,Ajr),e(rC,GZ),e(GZ,Ljr),e(rC,yjr),e(oe,xjr),e(oe,tC),e(tC,oEe),e(oEe,$jr),e(tC,kjr),e(tC,OZ),e(OZ,Sjr),e(tC,Rjr),e(oe,Pjr),e(oe,aC),e(aC,rEe),e(rEe,Bjr),e(aC,Ijr),e(aC,VZ),e(VZ,Njr),e(aC,qjr),e(oe,jjr),e(oe,nC),e(nC,tEe),e(tEe,Djr),e(nC,Gjr),e(nC,XZ),e(XZ,Ojr),e(nC,Vjr),e(oe,Xjr),e(oe,sC),e(sC,aEe),e(aEe,zjr),e(sC,Qjr),e(sC,zZ),e(zZ,Wjr),e(sC,Hjr),e(oe,Ujr),e(oe,lC),e(lC,nEe),e(nEe,Jjr),e(lC,Yjr),e(lC,QZ),e(QZ,Kjr),e(lC,Zjr),e(oe,eDr),e(oe,iC),e(iC,sEe),e(sEe,oDr),e(iC,rDr),e(iC,WZ),e(WZ,tDr),e(iC,aDr),e(oe,nDr),e(oe,dC),e(dC,lEe),e(lEe,sDr),e(dC,lDr),e(dC,HZ),e(HZ,iDr),e(dC,dDr),e(oe,cDr),e(oe,cC),e(cC,iEe),e(iEe,fDr),e(cC,mDr),e(cC,UZ),e(UZ,gDr),e(cC,hDr),e(oe,pDr),e(oe,fC),e(fC,dEe),e(dEe,_Dr),e(fC,uDr),e(fC,JZ),e(JZ,bDr),e(fC,vDr),e(oe,FDr),e(oe,mC),e(mC,cEe),e(cEe,TDr),e(mC,MDr),e(mC,YZ),e(YZ,EDr),e(mC,CDr),e(oe,wDr),e(oe,gC),e(gC,fEe),e(fEe,ADr),e(gC,LDr),e(gC,KZ),e(KZ,yDr),e(gC,xDr),e(oe,$Dr),e(oe,hC),e(hC,mEe),e(mEe,kDr),e(hC,SDr),e(hC,ZZ),e(ZZ,RDr),e(hC,PDr),e(oe,BDr),e(oe,pC),e(pC,gEe),e(gEe,IDr),e(pC,NDr),e(pC,eee),e(eee,qDr),e(pC,jDr),e(oe,DDr),e(oe,_C),e(_C,hEe),e(hEe,GDr),e(_C,ODr),e(_C,oee),e(oee,VDr),e(_C,XDr),e(Or,zDr),M(uC,Or,null),b(f,YXe,u),b(f,Uc,u),e(Uc,bC),e(bC,pEe),M(t$,pEe,null),e(Uc,QDr),e(Uc,_Ee),e(_Ee,WDr),b(f,KXe,u),b(f,pr,u),M(a$,pr,null),e(pr,HDr),e(pr,Jc),e(Jc,UDr),e(Jc,ree),e(ree,JDr),e(Jc,YDr),e(Jc,tee),e(tee,KDr),e(Jc,ZDr),e(pr,eGr),e(pr,n$),e(n$,oGr),e(n$,uEe),e(uEe,rGr),e(n$,tGr),e(pr,aGr),e(pr,Qt),M(s$,Qt,null),e(Qt,nGr),e(Qt,bEe),e(bEe,sGr),e(Qt,lGr),e(Qt,Yc),e(Yc,iGr),e(Yc,vEe),e(vEe,dGr),e(Yc,cGr),e(Yc,aee),e(aee,fGr),e(Yc,mGr),e(Qt,gGr),M(vC,Qt,null),e(pr,hGr),e(pr,Vr),M(l$,Vr,null),e(Vr,pGr),e(Vr,FEe),e(FEe,_Gr),e(Vr,uGr),e(Vr,Tn),e(Tn,bGr),e(Tn,TEe),e(TEe,vGr),e(Tn,FGr),e(Tn,MEe),e(MEe,TGr),e(Tn,MGr),e(Tn,EEe),e(EEe,EGr),e(Tn,CGr),e(Vr,wGr),e(Vr,xe),e(xe,FC),e(FC,CEe),e(CEe,AGr),e(FC,LGr),e(FC,nee),e(nee,yGr),e(FC,xGr),e(xe,$Gr),e(xe,TC),e(TC,wEe),e(wEe,kGr),e(TC,SGr),e(TC,see),e(see,RGr),e(TC,PGr),e(xe,BGr),e(xe,MC),e(MC,AEe),e(AEe,IGr),e(MC,NGr),e(MC,lee),e(lee,qGr),e(MC,jGr),e(xe,DGr),e(xe,EC),e(EC,LEe),e(LEe,GGr),e(EC,OGr),e(EC,iee),e(iee,VGr),e(EC,XGr),e(xe,zGr),e(xe,CC),e(CC,yEe),e(yEe,QGr),e(CC,WGr),e(CC,dee),e(dee,HGr),e(CC,UGr),e(xe,JGr),e(xe,wC),e(wC,xEe),e(xEe,YGr),e(wC,KGr),e(wC,cee),e(cee,ZGr),e(wC,eOr),e(xe,oOr),e(xe,AC),e(AC,$Ee),e($Ee,rOr),e(AC,tOr),e(AC,fee),e(fee,aOr),e(AC,nOr),e(xe,sOr),e(xe,LC),e(LC,kEe),e(kEe,lOr),e(LC,iOr),e(LC,mee),e(mee,dOr),e(LC,cOr),e(xe,fOr),e(xe,yC),e(yC,SEe),e(SEe,mOr),e(yC,gOr),e(yC,gee),e(gee,hOr),e(yC,pOr),e(xe,_Or),e(xe,xC),e(xC,REe),e(REe,uOr),e(xC,bOr),e(xC,hee),e(hee,vOr),e(xC,FOr),e(Vr,TOr),M($C,Vr,null),b(f,ZXe,u),b(f,Kc,u),e(Kc,kC),e(kC,PEe),M(i$,PEe,null),e(Kc,MOr),e(Kc,BEe),e(BEe,EOr),b(f,eze,u),b(f,_r,u),M(d$,_r,null),e(_r,COr),e(_r,Zc),e(Zc,wOr),e(Zc,pee),e(pee,AOr),e(Zc,LOr),e(Zc,_ee),e(_ee,yOr),e(Zc,xOr),e(_r,$Or),e(_r,c$),e(c$,kOr),e(c$,IEe),e(IEe,SOr),e(c$,ROr),e(_r,POr),e(_r,Wt),M(f$,Wt,null),e(Wt,BOr),e(Wt,NEe),e(NEe,IOr),e(Wt,NOr),e(Wt,ef),e(ef,qOr),e(ef,qEe),e(qEe,jOr),e(ef,DOr),e(ef,uee),e(uee,GOr),e(ef,OOr),e(Wt,VOr),M(SC,Wt,null),e(_r,XOr),e(_r,Xr),M(m$,Xr,null),e(Xr,zOr),e(Xr,jEe),e(jEe,QOr),e(Xr,WOr),e(Xr,Mn),e(Mn,HOr),e(Mn,DEe),e(DEe,UOr),e(Mn,JOr),e(Mn,GEe),e(GEe,YOr),e(Mn,KOr),e(Mn,OEe),e(OEe,ZOr),e(Mn,eVr),e(Xr,oVr),e(Xr,Ee),e(Ee,RC),e(RC,VEe),e(VEe,rVr),e(RC,tVr),e(RC,bee),e(bee,aVr),e(RC,nVr),e(Ee,sVr),e(Ee,PC),e(PC,XEe),e(XEe,lVr),e(PC,iVr),e(PC,vee),e(vee,dVr),e(PC,cVr),e(Ee,fVr),e(Ee,BC),e(BC,zEe),e(zEe,mVr),e(BC,gVr),e(BC,Fee),e(Fee,hVr),e(BC,pVr),e(Ee,_Vr),e(Ee,IC),e(IC,QEe),e(QEe,uVr),e(IC,bVr),e(IC,Tee),e(Tee,vVr),e(IC,FVr),e(Ee,TVr),e(Ee,NC),e(NC,WEe),e(WEe,MVr),e(NC,EVr),e(NC,Mee),e(Mee,CVr),e(NC,wVr),e(Ee,AVr),e(Ee,qC),e(qC,HEe),e(HEe,LVr),e(qC,yVr),e(qC,Eee),e(Eee,xVr),e(qC,$Vr),e(Ee,kVr),e(Ee,jC),e(jC,UEe),e(UEe,SVr),e(jC,RVr),e(jC,Cee),e(Cee,PVr),e(jC,BVr),e(Ee,IVr),e(Ee,DC),e(DC,JEe),e(JEe,NVr),e(DC,qVr),e(DC,wee),e(wee,jVr),e(DC,DVr),e(Ee,GVr),e(Ee,GC),e(GC,YEe),e(YEe,OVr),e(GC,VVr),e(GC,Aee),e(Aee,XVr),e(GC,zVr),e(Ee,QVr),e(Ee,OC),e(OC,KEe),e(KEe,WVr),e(OC,HVr),e(OC,Lee),e(Lee,UVr),e(OC,JVr),e(Ee,YVr),e(Ee,VC),e(VC,ZEe),e(ZEe,KVr),e(VC,ZVr),e(VC,yee),e(yee,eXr),e(VC,oXr),e(Ee,rXr),e(Ee,XC),e(XC,eCe),e(eCe,tXr),e(XC,aXr),e(XC,xee),e(xee,nXr),e(XC,sXr),e(Ee,lXr),e(Ee,zC),e(zC,oCe),e(oCe,iXr),e(zC,dXr),e(zC,$ee),e($ee,cXr),e(zC,fXr),e(Xr,mXr),M(QC,Xr,null),b(f,oze,u),b(f,of,u),e(of,WC),e(WC,rCe),M(g$,rCe,null),e(of,gXr),e(of,tCe),e(tCe,hXr),b(f,rze,u),b(f,ur,u),M(h$,ur,null),e(ur,pXr),e(ur,rf),e(rf,_Xr),e(rf,kee),e(kee,uXr),e(rf,bXr),e(rf,See),e(See,vXr),e(rf,FXr),e(ur,TXr),e(ur,p$),e(p$,MXr),e(p$,aCe),e(aCe,EXr),e(p$,CXr),e(ur,wXr),e(ur,Ht),M(_$,Ht,null),e(Ht,AXr),e(Ht,nCe),e(nCe,LXr),e(Ht,yXr),e(Ht,tf),e(tf,xXr),e(tf,sCe),e(sCe,$Xr),e(tf,kXr),e(tf,Ree),e(Ree,SXr),e(tf,RXr),e(Ht,PXr),M(HC,Ht,null),e(ur,BXr),e(ur,zr),M(u$,zr,null),e(zr,IXr),e(zr,lCe),e(lCe,NXr),e(zr,qXr),e(zr,En),e(En,jXr),e(En,iCe),e(iCe,DXr),e(En,GXr),e(En,dCe),e(dCe,OXr),e(En,VXr),e(En,cCe),e(cCe,XXr),e(En,zXr),e(zr,QXr),e(zr,$e),e($e,UC),e(UC,fCe),e(fCe,WXr),e(UC,HXr),e(UC,Pee),e(Pee,UXr),e(UC,JXr),e($e,YXr),e($e,JC),e(JC,mCe),e(mCe,KXr),e(JC,ZXr),e(JC,Bee),e(Bee,ezr),e(JC,ozr),e($e,rzr),e($e,YC),e(YC,gCe),e(gCe,tzr),e(YC,azr),e(YC,Iee),e(Iee,nzr),e(YC,szr),e($e,lzr),e($e,KC),e(KC,hCe),e(hCe,izr),e(KC,dzr),e(KC,Nee),e(Nee,czr),e(KC,fzr),e($e,mzr),e($e,ZC),e(ZC,pCe),e(pCe,gzr),e(ZC,hzr),e(ZC,qee),e(qee,pzr),e(ZC,_zr),e($e,uzr),e($e,e0),e(e0,_Ce),e(_Ce,bzr),e(e0,vzr),e(e0,jee),e(jee,Fzr),e(e0,Tzr),e($e,Mzr),e($e,o0),e(o0,uCe),e(uCe,Ezr),e(o0,Czr),e(o0,Dee),e(Dee,wzr),e(o0,Azr),e($e,Lzr),e($e,r0),e(r0,bCe),e(bCe,yzr),e(r0,xzr),e(r0,Gee),e(Gee,$zr),e(r0,kzr),e($e,Szr),e($e,t0),e(t0,vCe),e(vCe,Rzr),e(t0,Pzr),e(t0,Oee),e(Oee,Bzr),e(t0,Izr),e($e,Nzr),e($e,a0),e(a0,FCe),e(FCe,qzr),e(a0,jzr),e(a0,Vee),e(Vee,Dzr),e(a0,Gzr),e(zr,Ozr),M(n0,zr,null),b(f,tze,u),b(f,af,u),e(af,s0),e(s0,TCe),M(b$,TCe,null),e(af,Vzr),e(af,MCe),e(MCe,Xzr),b(f,aze,u),b(f,br,u),M(v$,br,null),e(br,zzr),e(br,nf),e(nf,Qzr),e(nf,Xee),e(Xee,Wzr),e(nf,Hzr),e(nf,zee),e(zee,Uzr),e(nf,Jzr),e(br,Yzr),e(br,F$),e(F$,Kzr),e(F$,ECe),e(ECe,Zzr),e(F$,eQr),e(br,oQr),e(br,Ut),M(T$,Ut,null),e(Ut,rQr),e(Ut,CCe),e(CCe,tQr),e(Ut,aQr),e(Ut,sf),e(sf,nQr),e(sf,wCe),e(wCe,sQr),e(sf,lQr),e(sf,Qee),e(Qee,iQr),e(sf,dQr),e(Ut,cQr),M(l0,Ut,null),e(br,fQr),e(br,Qr),M(M$,Qr,null),e(Qr,mQr),e(Qr,ACe),e(ACe,gQr),e(Qr,hQr),e(Qr,Cn),e(Cn,pQr),e(Cn,LCe),e(LCe,_Qr),e(Cn,uQr),e(Cn,yCe),e(yCe,bQr),e(Cn,vQr),e(Cn,xCe),e(xCe,FQr),e(Cn,TQr),e(Qr,MQr),e(Qr,ke),e(ke,i0),e(i0,$Ce),e($Ce,EQr),e(i0,CQr),e(i0,Wee),e(Wee,wQr),e(i0,AQr),e(ke,LQr),e(ke,d0),e(d0,kCe),e(kCe,yQr),e(d0,xQr),e(d0,Hee),e(Hee,$Qr),e(d0,kQr),e(ke,SQr),e(ke,c0),e(c0,SCe),e(SCe,RQr),e(c0,PQr),e(c0,Uee),e(Uee,BQr),e(c0,IQr),e(ke,NQr),e(ke,f0),e(f0,RCe),e(RCe,qQr),e(f0,jQr),e(f0,Jee),e(Jee,DQr),e(f0,GQr),e(ke,OQr),e(ke,m0),e(m0,PCe),e(PCe,VQr),e(m0,XQr),e(m0,Yee),e(Yee,zQr),e(m0,QQr),e(ke,WQr),e(ke,g0),e(g0,BCe),e(BCe,HQr),e(g0,UQr),e(g0,Kee),e(Kee,JQr),e(g0,YQr),e(ke,KQr),e(ke,h0),e(h0,ICe),e(ICe,ZQr),e(h0,eWr),e(h0,Zee),e(Zee,oWr),e(h0,rWr),e(ke,tWr),e(ke,p0),e(p0,NCe),e(NCe,aWr),e(p0,nWr),e(p0,eoe),e(eoe,sWr),e(p0,lWr),e(ke,iWr),e(ke,_0),e(_0,qCe),e(qCe,dWr),e(_0,cWr),e(_0,ooe),e(ooe,fWr),e(_0,mWr),e(ke,gWr),e(ke,u0),e(u0,jCe),e(jCe,hWr),e(u0,pWr),e(u0,roe),e(roe,_Wr),e(u0,uWr),e(Qr,bWr),M(b0,Qr,null),b(f,nze,u),b(f,lf,u),e(lf,v0),e(v0,DCe),M(E$,DCe,null),e(lf,vWr),e(lf,GCe),e(GCe,FWr),b(f,sze,u),b(f,vr,u),M(C$,vr,null),e(vr,TWr),e(vr,df),e(df,MWr),e(df,toe),e(toe,EWr),e(df,CWr),e(df,aoe),e(aoe,wWr),e(df,AWr),e(vr,LWr),e(vr,w$),e(w$,yWr),e(w$,OCe),e(OCe,xWr),e(w$,$Wr),e(vr,kWr),e(vr,Jt),M(A$,Jt,null),e(Jt,SWr),e(Jt,VCe),e(VCe,RWr),e(Jt,PWr),e(Jt,cf),e(cf,BWr),e(cf,XCe),e(XCe,IWr),e(cf,NWr),e(cf,noe),e(noe,qWr),e(cf,jWr),e(Jt,DWr),M(F0,Jt,null),e(vr,GWr),e(vr,Wr),M(L$,Wr,null),e(Wr,OWr),e(Wr,zCe),e(zCe,VWr),e(Wr,XWr),e(Wr,wn),e(wn,zWr),e(wn,QCe),e(QCe,QWr),e(wn,WWr),e(wn,WCe),e(WCe,HWr),e(wn,UWr),e(wn,HCe),e(HCe,JWr),e(wn,YWr),e(Wr,KWr),e(Wr,Se),e(Se,T0),e(T0,UCe),e(UCe,ZWr),e(T0,eHr),e(T0,soe),e(soe,oHr),e(T0,rHr),e(Se,tHr),e(Se,M0),e(M0,JCe),e(JCe,aHr),e(M0,nHr),e(M0,loe),e(loe,sHr),e(M0,lHr),e(Se,iHr),e(Se,E0),e(E0,YCe),e(YCe,dHr),e(E0,cHr),e(E0,ioe),e(ioe,fHr),e(E0,mHr),e(Se,gHr),e(Se,C0),e(C0,KCe),e(KCe,hHr),e(C0,pHr),e(C0,doe),e(doe,_Hr),e(C0,uHr),e(Se,bHr),e(Se,w0),e(w0,ZCe),e(ZCe,vHr),e(w0,FHr),e(w0,coe),e(coe,THr),e(w0,MHr),e(Se,EHr),e(Se,A0),e(A0,e0e),e(e0e,CHr),e(A0,wHr),e(A0,foe),e(foe,AHr),e(A0,LHr),e(Se,yHr),e(Se,L0),e(L0,o0e),e(o0e,xHr),e(L0,$Hr),e(L0,moe),e(moe,kHr),e(L0,SHr),e(Se,RHr),e(Se,y0),e(y0,r0e),e(r0e,PHr),e(y0,BHr),e(y0,goe),e(goe,IHr),e(y0,NHr),e(Se,qHr),e(Se,x0),e(x0,t0e),e(t0e,jHr),e(x0,DHr),e(x0,hoe),e(hoe,GHr),e(x0,OHr),e(Se,VHr),e(Se,$0),e($0,a0e),e(a0e,XHr),e($0,zHr),e($0,poe),e(poe,QHr),e($0,WHr),e(Wr,HHr),M(k0,Wr,null),b(f,lze,u),b(f,ff,u),e(ff,S0),e(S0,n0e),M(y$,n0e,null),e(ff,UHr),e(ff,s0e),e(s0e,JHr),b(f,ize,u),b(f,Fr,u),M(x$,Fr,null),e(Fr,YHr),e(Fr,mf),e(mf,KHr),e(mf,_oe),e(_oe,ZHr),e(mf,eUr),e(mf,uoe),e(uoe,oUr),e(mf,rUr),e(Fr,tUr),e(Fr,$$),e($$,aUr),e($$,l0e),e(l0e,nUr),e($$,sUr),e(Fr,lUr),e(Fr,Yt),M(k$,Yt,null),e(Yt,iUr),e(Yt,i0e),e(i0e,dUr),e(Yt,cUr),e(Yt,gf),e(gf,fUr),e(gf,d0e),e(d0e,mUr),e(gf,gUr),e(gf,boe),e(boe,hUr),e(gf,pUr),e(Yt,_Ur),M(R0,Yt,null),e(Fr,uUr),e(Fr,Hr),M(S$,Hr,null),e(Hr,bUr),e(Hr,c0e),e(c0e,vUr),e(Hr,FUr),e(Hr,An),e(An,TUr),e(An,f0e),e(f0e,MUr),e(An,EUr),e(An,m0e),e(m0e,CUr),e(An,wUr),e(An,g0e),e(g0e,AUr),e(An,LUr),e(Hr,yUr),e(Hr,Re),e(Re,P0),e(P0,h0e),e(h0e,xUr),e(P0,$Ur),e(P0,voe),e(voe,kUr),e(P0,SUr),e(Re,RUr),e(Re,B0),e(B0,p0e),e(p0e,PUr),e(B0,BUr),e(B0,Foe),e(Foe,IUr),e(B0,NUr),e(Re,qUr),e(Re,I0),e(I0,_0e),e(_0e,jUr),e(I0,DUr),e(I0,Toe),e(Toe,GUr),e(I0,OUr),e(Re,VUr),e(Re,N0),e(N0,u0e),e(u0e,XUr),e(N0,zUr),e(N0,Moe),e(Moe,QUr),e(N0,WUr),e(Re,HUr),e(Re,q0),e(q0,b0e),e(b0e,UUr),e(q0,JUr),e(q0,Eoe),e(Eoe,YUr),e(q0,KUr),e(Re,ZUr),e(Re,j0),e(j0,v0e),e(v0e,eJr),e(j0,oJr),e(j0,Coe),e(Coe,rJr),e(j0,tJr),e(Re,aJr),e(Re,D0),e(D0,F0e),e(F0e,nJr),e(D0,sJr),e(D0,woe),e(woe,lJr),e(D0,iJr),e(Re,dJr),e(Re,G0),e(G0,T0e),e(T0e,cJr),e(G0,fJr),e(G0,Aoe),e(Aoe,mJr),e(G0,gJr),e(Re,hJr),e(Re,O0),e(O0,M0e),e(M0e,pJr),e(O0,_Jr),e(O0,Loe),e(Loe,uJr),e(O0,bJr),e(Re,vJr),e(Re,V0),e(V0,E0e),e(E0e,FJr),e(V0,TJr),e(V0,yoe),e(yoe,MJr),e(V0,EJr),e(Hr,CJr),M(X0,Hr,null),b(f,dze,u),b(f,hf,u),e(hf,z0),e(z0,C0e),M(R$,C0e,null),e(hf,wJr),e(hf,w0e),e(w0e,AJr),b(f,cze,u),b(f,Tr,u),M(P$,Tr,null),e(Tr,LJr),e(Tr,pf),e(pf,yJr),e(pf,xoe),e(xoe,xJr),e(pf,$Jr),e(pf,$oe),e($oe,kJr),e(pf,SJr),e(Tr,RJr),e(Tr,B$),e(B$,PJr),e(B$,A0e),e(A0e,BJr),e(B$,IJr),e(Tr,NJr),e(Tr,Kt),M(I$,Kt,null),e(Kt,qJr),e(Kt,L0e),e(L0e,jJr),e(Kt,DJr),e(Kt,_f),e(_f,GJr),e(_f,y0e),e(y0e,OJr),e(_f,VJr),e(_f,koe),e(koe,XJr),e(_f,zJr),e(Kt,QJr),M(Q0,Kt,null),e(Tr,WJr),e(Tr,Ur),M(N$,Ur,null),e(Ur,HJr),e(Ur,x0e),e(x0e,UJr),e(Ur,JJr),e(Ur,Ln),e(Ln,YJr),e(Ln,$0e),e($0e,KJr),e(Ln,ZJr),e(Ln,k0e),e(k0e,eYr),e(Ln,oYr),e(Ln,S0e),e(S0e,rYr),e(Ln,tYr),e(Ur,aYr),e(Ur,Ve),e(Ve,W0),e(W0,R0e),e(R0e,nYr),e(W0,sYr),e(W0,Soe),e(Soe,lYr),e(W0,iYr),e(Ve,dYr),e(Ve,H0),e(H0,P0e),e(P0e,cYr),e(H0,fYr),e(H0,Roe),e(Roe,mYr),e(H0,gYr),e(Ve,hYr),e(Ve,U0),e(U0,B0e),e(B0e,pYr),e(U0,_Yr),e(U0,Poe),e(Poe,uYr),e(U0,bYr),e(Ve,vYr),e(Ve,J0),e(J0,I0e),e(I0e,FYr),e(J0,TYr),e(J0,Boe),e(Boe,MYr),e(J0,EYr),e(Ve,CYr),e(Ve,Y0),e(Y0,N0e),e(N0e,wYr),e(Y0,AYr),e(Y0,Ioe),e(Ioe,LYr),e(Y0,yYr),e(Ve,xYr),e(Ve,K0),e(K0,q0e),e(q0e,$Yr),e(K0,kYr),e(K0,Noe),e(Noe,SYr),e(K0,RYr),e(Ve,PYr),e(Ve,Z0),e(Z0,j0e),e(j0e,BYr),e(Z0,IYr),e(Z0,qoe),e(qoe,NYr),e(Z0,qYr),e(Ve,jYr),e(Ve,ew),e(ew,D0e),e(D0e,DYr),e(ew,GYr),e(ew,joe),e(joe,OYr),e(ew,VYr),e(Ur,XYr),M(ow,Ur,null),b(f,fze,u),b(f,uf,u),e(uf,rw),e(rw,G0e),M(q$,G0e,null),e(uf,zYr),e(uf,O0e),e(O0e,QYr),b(f,mze,u),b(f,Mr,u),M(j$,Mr,null),e(Mr,WYr),e(Mr,bf),e(bf,HYr),e(bf,Doe),e(Doe,UYr),e(bf,JYr),e(bf,Goe),e(Goe,YYr),e(bf,KYr),e(Mr,ZYr),e(Mr,D$),e(D$,eKr),e(D$,V0e),e(V0e,oKr),e(D$,rKr),e(Mr,tKr),e(Mr,Zt),M(G$,Zt,null),e(Zt,aKr),e(Zt,X0e),e(X0e,nKr),e(Zt,sKr),e(Zt,vf),e(vf,lKr),e(vf,z0e),e(z0e,iKr),e(vf,dKr),e(vf,Ooe),e(Ooe,cKr),e(vf,fKr),e(Zt,mKr),M(tw,Zt,null),e(Mr,gKr),e(Mr,Jr),M(O$,Jr,null),e(Jr,hKr),e(Jr,Q0e),e(Q0e,pKr),e(Jr,_Kr),e(Jr,yn),e(yn,uKr),e(yn,W0e),e(W0e,bKr),e(yn,vKr),e(yn,H0e),e(H0e,FKr),e(yn,TKr),e(yn,U0e),e(U0e,MKr),e(yn,EKr),e(Jr,CKr),e(Jr,Xe),e(Xe,aw),e(aw,J0e),e(J0e,wKr),e(aw,AKr),e(aw,Voe),e(Voe,LKr),e(aw,yKr),e(Xe,xKr),e(Xe,nw),e(nw,Y0e),e(Y0e,$Kr),e(nw,kKr),e(nw,Xoe),e(Xoe,SKr),e(nw,RKr),e(Xe,PKr),e(Xe,sw),e(sw,K0e),e(K0e,BKr),e(sw,IKr),e(sw,zoe),e(zoe,NKr),e(sw,qKr),e(Xe,jKr),e(Xe,lw),e(lw,Z0e),e(Z0e,DKr),e(lw,GKr),e(lw,Qoe),e(Qoe,OKr),e(lw,VKr),e(Xe,XKr),e(Xe,iw),e(iw,ewe),e(ewe,zKr),e(iw,QKr),e(iw,Woe),e(Woe,WKr),e(iw,HKr),e(Xe,UKr),e(Xe,dw),e(dw,owe),e(owe,JKr),e(dw,YKr),e(dw,Hoe),e(Hoe,KKr),e(dw,ZKr),e(Xe,eZr),e(Xe,cw),e(cw,rwe),e(rwe,oZr),e(cw,rZr),e(cw,Uoe),e(Uoe,tZr),e(cw,aZr),e(Xe,nZr),e(Xe,fw),e(fw,twe),e(twe,sZr),e(fw,lZr),e(fw,Joe),e(Joe,iZr),e(fw,dZr),e(Jr,cZr),M(mw,Jr,null),b(f,gze,u),b(f,Ff,u),e(Ff,gw),e(gw,awe),M(V$,awe,null),e(Ff,fZr),e(Ff,nwe),e(nwe,mZr),b(f,hze,u),b(f,Er,u),M(X$,Er,null),e(Er,gZr),e(Er,Tf),e(Tf,hZr),e(Tf,Yoe),e(Yoe,pZr),e(Tf,_Zr),e(Tf,Koe),e(Koe,uZr),e(Tf,bZr),e(Er,vZr),e(Er,z$),e(z$,FZr),e(z$,swe),e(swe,TZr),e(z$,MZr),e(Er,EZr),e(Er,ea),M(Q$,ea,null),e(ea,CZr),e(ea,lwe),e(lwe,wZr),e(ea,AZr),e(ea,Mf),e(Mf,LZr),e(Mf,iwe),e(iwe,yZr),e(Mf,xZr),e(Mf,Zoe),e(Zoe,$Zr),e(Mf,kZr),e(ea,SZr),M(hw,ea,null),e(Er,RZr),e(Er,Yr),M(W$,Yr,null),e(Yr,PZr),e(Yr,dwe),e(dwe,BZr),e(Yr,IZr),e(Yr,xn),e(xn,NZr),e(xn,cwe),e(cwe,qZr),e(xn,jZr),e(xn,fwe),e(fwe,DZr),e(xn,GZr),e(xn,mwe),e(mwe,OZr),e(xn,VZr),e(Yr,XZr),e(Yr,gwe),e(gwe,pw),e(pw,hwe),e(hwe,zZr),e(pw,QZr),e(pw,ere),e(ere,WZr),e(pw,HZr),e(Yr,UZr),M(_w,Yr,null),b(f,pze,u),b(f,Ef,u),e(Ef,uw),e(uw,pwe),M(H$,pwe,null),e(Ef,JZr),e(Ef,_we),e(_we,YZr),b(f,_ze,u),b(f,Cr,u),M(U$,Cr,null),e(Cr,KZr),e(Cr,Cf),e(Cf,ZZr),e(Cf,ore),e(ore,eet),e(Cf,oet),e(Cf,rre),e(rre,ret),e(Cf,tet),e(Cr,aet),e(Cr,J$),e(J$,net),e(J$,uwe),e(uwe,set),e(J$,iet),e(Cr,det),e(Cr,oa),M(Y$,oa,null),e(oa,cet),e(oa,bwe),e(bwe,fet),e(oa,met),e(oa,wf),e(wf,get),e(wf,vwe),e(vwe,het),e(wf,pet),e(wf,tre),e(tre,_et),e(wf,uet),e(oa,bet),M(bw,oa,null),e(Cr,vet),e(Cr,Kr),M(K$,Kr,null),e(Kr,Fet),e(Kr,Fwe),e(Fwe,Tet),e(Kr,Met),e(Kr,$n),e($n,Eet),e($n,Twe),e(Twe,Cet),e($n,wet),e($n,Mwe),e(Mwe,Aet),e($n,Let),e($n,Ewe),e(Ewe,yet),e($n,xet),e(Kr,$et),e(Kr,Z$),e(Z$,vw),e(vw,Cwe),e(Cwe,ket),e(vw,Set),e(vw,are),e(are,Ret),e(vw,Pet),e(Z$,Bet),e(Z$,Fw),e(Fw,wwe),e(wwe,Iet),e(Fw,Net),e(Fw,nre),e(nre,qet),e(Fw,jet),e(Kr,Det),M(Tw,Kr,null),b(f,uze,u),b(f,Af,u),e(Af,Mw),e(Mw,Awe),M(ek,Awe,null),e(Af,Get),e(Af,Lwe),e(Lwe,Oet),b(f,bze,u),b(f,wr,u),M(ok,wr,null),e(wr,Vet),e(wr,Lf),e(Lf,Xet),e(Lf,sre),e(sre,zet),e(Lf,Qet),e(Lf,lre),e(lre,Wet),e(Lf,Het),e(wr,Uet),e(wr,rk),e(rk,Jet),e(rk,ywe),e(ywe,Yet),e(rk,Ket),e(wr,Zet),e(wr,ra),M(tk,ra,null),e(ra,eot),e(ra,xwe),e(xwe,oot),e(ra,rot),e(ra,yf),e(yf,tot),e(yf,$we),e($we,aot),e(yf,not),e(yf,ire),e(ire,sot),e(yf,lot),e(ra,iot),M(Ew,ra,null),e(wr,dot),e(wr,Zr),M(ak,Zr,null),e(Zr,cot),e(Zr,kwe),e(kwe,fot),e(Zr,mot),e(Zr,kn),e(kn,got),e(kn,Swe),e(Swe,hot),e(kn,pot),e(kn,Rwe),e(Rwe,_ot),e(kn,uot),e(kn,Pwe),e(Pwe,bot),e(kn,vot),e(Zr,Fot),e(Zr,Bwe),e(Bwe,Cw),e(Cw,Iwe),e(Iwe,Tot),e(Cw,Mot),e(Cw,dre),e(dre,Eot),e(Cw,Cot),e(Zr,wot),M(ww,Zr,null),vze=!0},p(f,[u]){const nk={};u&2&&(nk.$$scope={dirty:u,ctx:f}),Nf.$set(nk);const Nwe={};u&2&&(Nwe.$$scope={dirty:u,ctx:f}),Hg.$set(Nwe);const qwe={};u&2&&(qwe.$$scope={dirty:u,ctx:f}),$h.$set(qwe);const jwe={};u&2&&(jwe.$$scope={dirty:u,ctx:f}),mp.$set(jwe);const sk={};u&2&&(sk.$$scope={dirty:u,ctx:f}),gp.$set(sk);const Dwe={};u&2&&(Dwe.$$scope={dirty:u,ctx:f}),Pp.$set(Dwe);const Sn={};u&2&&(Sn.$$scope={dirty:u,ctx:f}),Bp.$set(Sn);const Gwe={};u&2&&(Gwe.$$scope={dirty:u,ctx:f}),qp.$set(Gwe);const Owe={};u&2&&(Owe.$$scope={dirty:u,ctx:f}),Gu.$set(Owe);const Vwe={};u&2&&(Vwe.$$scope={dirty:u,ctx:f}),Vu.$set(Vwe);const lk={};u&2&&(lk.$$scope={dirty:u,ctx:f}),I1.$set(lk);const Xwe={};u&2&&(Xwe.$$scope={dirty:u,ctx:f}),q1.$set(Xwe);const ik={};u&2&&(ik.$$scope={dirty:u,ctx:f}),A2.$set(ik);const zwe={};u&2&&(zwe.$$scope={dirty:u,ctx:f}),y2.$set(zwe);const dk={};u&2&&(dk.$$scope={dirty:u,ctx:f}),hb.$set(dk);const Qwe={};u&2&&(Qwe.$$scope={dirty:u,ctx:f}),_b.$set(Qwe);const Wwe={};u&2&&(Wwe.$$scope={dirty:u,ctx:f}),Ib.$set(Wwe);const Hwe={};u&2&&(Hwe.$$scope={dirty:u,ctx:f}),qb.$set(Hwe);const xf={};u&2&&(xf.$$scope={dirty:u,ctx:f}),Iv.$set(xf);const Uwe={};u&2&&(Uwe.$$scope={dirty:u,ctx:f}),qv.$set(Uwe);const Jwe={};u&2&&(Jwe.$$scope={dirty:u,ctx:f}),_3.$set(Jwe);const Ywe={};u&2&&(Ywe.$$scope={dirty:u,ctx:f}),b3.$set(Ywe);const ck={};u&2&&(ck.$$scope={dirty:u,ctx:f}),A3.$set(ck);const Kwe={};u&2&&(Kwe.$$scope={dirty:u,ctx:f}),y3.$set(Kwe);const Zwe={};u&2&&(Zwe.$$scope={dirty:u,ctx:f}),m5.$set(Zwe);const eAe={};u&2&&(eAe.$$scope={dirty:u,ctx:f}),h5.$set(eAe);const tt={};u&2&&(tt.$$scope={dirty:u,ctx:f}),aF.$set(tt);const fk={};u&2&&(fk.$$scope={dirty:u,ctx:f}),sF.$set(fk);const oAe={};u&2&&(oAe.$$scope={dirty:u,ctx:f}),dF.$set(oAe);const mk={};u&2&&(mk.$$scope={dirty:u,ctx:f}),fF.$set(mk);const rAe={};u&2&&(rAe.$$scope={dirty:u,ctx:f}),wF.$set(rAe);const at={};u&2&&(at.$$scope={dirty:u,ctx:f}),LF.$set(at);const tAe={};u&2&&(tAe.$$scope={dirty:u,ctx:f}),$F.$set(tAe);const $f={};u&2&&($f.$$scope={dirty:u,ctx:f}),SF.$set($f);const aAe={};u&2&&(aAe.$$scope={dirty:u,ctx:f}),BF.$set(aAe);const nAe={};u&2&&(nAe.$$scope={dirty:u,ctx:f}),NF.$set(nAe);const L={};u&2&&(L.$$scope={dirty:u,ctx:f}),HF.$set(L);const Aw={};u&2&&(Aw.$$scope={dirty:u,ctx:f}),JF.$set(Aw);const sAe={};u&2&&(sAe.$$scope={dirty:u,ctx:f}),tT.$set(sAe);const lAe={};u&2&&(lAe.$$scope={dirty:u,ctx:f}),nT.$set(lAe);const Lw={};u&2&&(Lw.$$scope={dirty:u,ctx:f}),uT.$set(Lw);const iAe={};u&2&&(iAe.$$scope={dirty:u,ctx:f}),vT.$set(iAe);const dAe={};u&2&&(dAe.$$scope={dirty:u,ctx:f}),ET.$set(dAe);const yw={};u&2&&(yw.$$scope={dirty:u,ctx:f}),wT.$set(yw);const cAe={};u&2&&(cAe.$$scope={dirty:u,ctx:f}),ST.$set(cAe);const fAe={};u&2&&(fAe.$$scope={dirty:u,ctx:f}),PT.$set(fAe);const xw={};u&2&&(xw.$$scope={dirty:u,ctx:f}),jT.$set(xw);const mAe={};u&2&&(mAe.$$scope={dirty:u,ctx:f}),GT.$set(mAe);const gAe={};u&2&&(gAe.$$scope={dirty:u,ctx:f}),zT.$set(gAe);const $w={};u&2&&($w.$$scope={dirty:u,ctx:f}),WT.$set($w);const hAe={};u&2&&(hAe.$$scope={dirty:u,ctx:f}),JT.$set(hAe);const pAe={};u&2&&(pAe.$$scope={dirty:u,ctx:f}),KT.$set(pAe);const kw={};u&2&&(kw.$$scope={dirty:u,ctx:f}),a7.$set(kw);const _Ae={};u&2&&(_Ae.$$scope={dirty:u,ctx:f}),s7.$set(_Ae);const uAe={};u&2&&(uAe.$$scope={dirty:u,ctx:f}),d7.$set(uAe);const Sw={};u&2&&(Sw.$$scope={dirty:u,ctx:f}),f7.$set(Sw);const bAe={};u&2&&(bAe.$$scope={dirty:u,ctx:f}),n9.$set(bAe);const vAe={};u&2&&(vAe.$$scope={dirty:u,ctx:f}),l9.$set(vAe);const Rw={};u&2&&(Rw.$$scope={dirty:u,ctx:f}),k9.$set(Rw);const FAe={};u&2&&(FAe.$$scope={dirty:u,ctx:f}),R9.$set(FAe);const TAe={};u&2&&(TAe.$$scope={dirty:u,ctx:f}),W9.$set(TAe);const Pw={};u&2&&(Pw.$$scope={dirty:u,ctx:f}),U9.$set(Pw);const MAe={};u&2&&(MAe.$$scope={dirty:u,ctx:f}),oM.$set(MAe);const EAe={};u&2&&(EAe.$$scope={dirty:u,ctx:f}),tM.$set(EAe);const Bw={};u&2&&(Bw.$$scope={dirty:u,ctx:f}),CM.$set(Bw);const CAe={};u&2&&(CAe.$$scope={dirty:u,ctx:f}),AM.$set(CAe);const wAe={};u&2&&(wAe.$$scope={dirty:u,ctx:f}),NM.$set(wAe);const Iw={};u&2&&(Iw.$$scope={dirty:u,ctx:f}),jM.$set(Iw);const AAe={};u&2&&(AAe.$$scope={dirty:u,ctx:f}),m4.$set(AAe);const LAe={};u&2&&(LAe.$$scope={dirty:u,ctx:f}),h4.$set(LAe);const Nw={};u&2&&(Nw.$$scope={dirty:u,ctx:f}),S4.$set(Nw);const yAe={};u&2&&(yAe.$$scope={dirty:u,ctx:f}),P4.$set(yAe);const xAe={};u&2&&(xAe.$$scope={dirty:u,ctx:f}),N4.$set(xAe);const qw={};u&2&&(qw.$$scope={dirty:u,ctx:f}),j4.$set(qw);const $Ae={};u&2&&($Ae.$$scope={dirty:u,ctx:f}),G4.$set($Ae);const kAe={};u&2&&(kAe.$$scope={dirty:u,ctx:f}),V4.$set(kAe);const jw={};u&2&&(jw.$$scope={dirty:u,ctx:f}),cE.$set(jw);const SAe={};u&2&&(SAe.$$scope={dirty:u,ctx:f}),mE.$set(SAe);const RAe={};u&2&&(RAe.$$scope={dirty:u,ctx:f}),RE.$set(RAe);const Dw={};u&2&&(Dw.$$scope={dirty:u,ctx:f}),BE.$set(Dw);const PAe={};u&2&&(PAe.$$scope={dirty:u,ctx:f}),NE.$set(PAe);const BAe={};u&2&&(BAe.$$scope={dirty:u,ctx:f}),jE.$set(BAe);const Gw={};u&2&&(Gw.$$scope={dirty:u,ctx:f}),GE.$set(Gw);const IAe={};u&2&&(IAe.$$scope={dirty:u,ctx:f}),VE.$set(IAe);const NAe={};u&2&&(NAe.$$scope={dirty:u,ctx:f}),uC.$set(NAe);const Ow={};u&2&&(Ow.$$scope={dirty:u,ctx:f}),vC.$set(Ow);const qAe={};u&2&&(qAe.$$scope={dirty:u,ctx:f}),$C.$set(qAe);const jAe={};u&2&&(jAe.$$scope={dirty:u,ctx:f}),SC.$set(jAe);const Vw={};u&2&&(Vw.$$scope={dirty:u,ctx:f}),QC.$set(Vw);const DAe={};u&2&&(DAe.$$scope={dirty:u,ctx:f}),HC.$set(DAe);const GAe={};u&2&&(GAe.$$scope={dirty:u,ctx:f}),n0.$set(GAe);const Xw={};u&2&&(Xw.$$scope={dirty:u,ctx:f}),l0.$set(Xw);const OAe={};u&2&&(OAe.$$scope={dirty:u,ctx:f}),b0.$set(OAe);const VAe={};u&2&&(VAe.$$scope={dirty:u,ctx:f}),F0.$set(VAe);const zw={};u&2&&(zw.$$scope={dirty:u,ctx:f}),k0.$set(zw);const XAe={};u&2&&(XAe.$$scope={dirty:u,ctx:f}),R0.$set(XAe);const zAe={};u&2&&(zAe.$$scope={dirty:u,ctx:f}),X0.$set(zAe);const Qw={};u&2&&(Qw.$$scope={dirty:u,ctx:f}),Q0.$set(Qw);const QAe={};u&2&&(QAe.$$scope={dirty:u,ctx:f}),ow.$set(QAe);const WAe={};u&2&&(WAe.$$scope={dirty:u,ctx:f}),tw.$set(WAe);const Ww={};u&2&&(Ww.$$scope={dirty:u,ctx:f}),mw.$set(Ww);const HAe={};u&2&&(HAe.$$scope={dirty:u,ctx:f}),hw.$set(HAe);const UAe={};u&2&&(UAe.$$scope={dirty:u,ctx:f}),_w.$set(UAe);const Hw={};u&2&&(Hw.$$scope={dirty:u,ctx:f}),bw.$set(Hw);const JAe={};u&2&&(JAe.$$scope={dirty:u,ctx:f}),Tw.$set(JAe);const YAe={};u&2&&(YAe.$$scope={dirty:u,ctx:f}),Ew.$set(YAe);const Uw={};u&2&&(Uw.$$scope={dirty:u,ctx:f}),ww.$set(Uw)},i(f){vze||(E(d.$$.fragment,f),E($a.$$.fragment,f),E(U6.$$.fragment,f),E(J6.$$.fragment,f),E(Nf.$$.fragment,f),E(Y6.$$.fragment,f),E(K6.$$.fragment,f),E(oL.$$.fragment,f),E(Hg.$$.fragment,f),E(rL.$$.fragment,f),E(tL.$$.fragment,f),E(aL.$$.fragment,f),E(lL.$$.fragment,f),E($h.$$.fragment,f),E(iL.$$.fragment,f),E(dL.$$.fragment,f),E(cL.$$.fragment,f),E(gL.$$.fragment,f),E(mp.$$.fragment,f),E(gp.$$.fragment,f),E(hL.$$.fragment,f),E(pL.$$.fragment,f),E(_L.$$.fragment,f),E(vL.$$.fragment,f),E(Pp.$$.fragment,f),E(Bp.$$.fragment,f),E(FL.$$.fragment,f),E(TL.$$.fragment,f),E(ML.$$.fragment,f),E(CL.$$.fragment,f),E(qp.$$.fragment,f),E(wL.$$.fragment,f),E(Gu.$$.fragment,f),E(AL.$$.fragment,f),E(LL.$$.fragment,f),E(xL.$$.fragment,f),E(Vu.$$.fragment,f),E($L.$$.fragment,f),E(I1.$$.fragment,f),E(kL.$$.fragment,f),E(SL.$$.fragment,f),E(PL.$$.fragment,f),E(q1.$$.fragment,f),E(BL.$$.fragment,f),E(A2.$$.fragment,f),E(IL.$$.fragment,f),E(NL.$$.fragment,f),E(jL.$$.fragment,f),E(y2.$$.fragment,f),E(DL.$$.fragment,f),E(hb.$$.fragment,f),E(GL.$$.fragment,f),E(OL.$$.fragment,f),E(XL.$$.fragment,f),E(_b.$$.fragment,f),E(zL.$$.fragment,f),E(Ib.$$.fragment,f),E(QL.$$.fragment,f),E(WL.$$.fragment,f),E(UL.$$.fragment,f),E(qb.$$.fragment,f),E(JL.$$.fragment,f),E(Iv.$$.fragment,f),E(YL.$$.fragment,f),E(KL.$$.fragment,f),E(ey.$$.fragment,f),E(qv.$$.fragment,f),E(oy.$$.fragment,f),E(_3.$$.fragment,f),E(ry.$$.fragment,f),E(ty.$$.fragment,f),E(ny.$$.fragment,f),E(b3.$$.fragment,f),E(sy.$$.fragment,f),E(A3.$$.fragment,f),E(ly.$$.fragment,f),E(iy.$$.fragment,f),E(cy.$$.fragment,f),E(y3.$$.fragment,f),E(fy.$$.fragment,f),E(m5.$$.fragment,f),E(my.$$.fragment,f),E(gy.$$.fragment,f),E(py.$$.fragment,f),E(h5.$$.fragment,f),E(_y.$$.fragment,f),E(aF.$$.fragment,f),E(uy.$$.fragment,f),E(by.$$.fragment,f),E(Fy.$$.fragment,f),E(sF.$$.fragment,f),E(Ty.$$.fragment,f),E(dF.$$.fragment,f),E(My.$$.fragment,f),E(Ey.$$.fragment,f),E(wy.$$.fragment,f),E(fF.$$.fragment,f),E(Ay.$$.fragment,f),E(wF.$$.fragment,f),E(Ly.$$.fragment,f),E(yy.$$.fragment,f),E($y.$$.fragment,f),E(LF.$$.fragment,f),E(ky.$$.fragment,f),E($F.$$.fragment,f),E(Sy.$$.fragment,f),E(Ry.$$.fragment,f),E(By.$$.fragment,f),E(SF.$$.fragment,f),E(Iy.$$.fragment,f),E(BF.$$.fragment,f),E(Ny.$$.fragment,f),E(qy.$$.fragment,f),E(Dy.$$.fragment,f),E(NF.$$.fragment,f),E(Gy.$$.fragment,f),E(HF.$$.fragment,f),E(Oy.$$.fragment,f),E(Vy.$$.fragment,f),E(zy.$$.fragment,f),E(JF.$$.fragment,f),E(Qy.$$.fragment,f),E(tT.$$.fragment,f),E(Wy.$$.fragment,f),E(Hy.$$.fragment,f),E(Jy.$$.fragment,f),E(nT.$$.fragment,f),E(Yy.$$.fragment,f),E(uT.$$.fragment,f),E(Ky.$$.fragment,f),E(Zy.$$.fragment,f),E(o8.$$.fragment,f),E(vT.$$.fragment,f),E(r8.$$.fragment,f),E(ET.$$.fragment,f),E(a8.$$.fragment,f),E(n8.$$.fragment,f),E(l8.$$.fragment,f),E(wT.$$.fragment,f),E(i8.$$.fragment,f),E(ST.$$.fragment,f),E(d8.$$.fragment,f),E(c8.$$.fragment,f),E(m8.$$.fragment,f),E(PT.$$.fragment,f),E(g8.$$.fragment,f),E(jT.$$.fragment,f),E(h8.$$.fragment,f),E(p8.$$.fragment,f),E(u8.$$.fragment,f),E(GT.$$.fragment,f),E(b8.$$.fragment,f),E(zT.$$.fragment,f),E(F8.$$.fragment,f),E(T8.$$.fragment,f),E(E8.$$.fragment,f),E(WT.$$.fragment,f),E(C8.$$.fragment,f),E(JT.$$.fragment,f),E(w8.$$.fragment,f),E(A8.$$.fragment,f),E(y8.$$.fragment,f),E(KT.$$.fragment,f),E(x8.$$.fragment,f),E(a7.$$.fragment,f),E($8.$$.fragment,f),E(k8.$$.fragment,f),E(R8.$$.fragment,f),E(s7.$$.fragment,f),E(P8.$$.fragment,f),E(d7.$$.fragment,f),E(B8.$$.fragment,f),E(I8.$$.fragment,f),E(q8.$$.fragment,f),E(f7.$$.fragment,f),E(j8.$$.fragment,f),E(n9.$$.fragment,f),E(D8.$$.fragment,f),E(G8.$$.fragment,f),E(V8.$$.fragment,f),E(l9.$$.fragment,f),E(X8.$$.fragment,f),E(k9.$$.fragment,f),E(z8.$$.fragment,f),E(Q8.$$.fragment,f),E(H8.$$.fragment,f),E(R9.$$.fragment,f),E(U8.$$.fragment,f),E(W9.$$.fragment,f),E(J8.$$.fragment,f),E(Y8.$$.fragment,f),E(Z8.$$.fragment,f),E(U9.$$.fragment,f),E(ex.$$.fragment,f),E(oM.$$.fragment,f),E(ox.$$.fragment,f),E(rx.$$.fragment,f),E(ax.$$.fragment,f),E(tM.$$.fragment,f),E(nx.$$.fragment,f),E(CM.$$.fragment,f),E(sx.$$.fragment,f),E(lx.$$.fragment,f),E(dx.$$.fragment,f),E(AM.$$.fragment,f),E(cx.$$.fragment,f),E(NM.$$.fragment,f),E(fx.$$.fragment,f),E(mx.$$.fragment,f),E(hx.$$.fragment,f),E(jM.$$.fragment,f),E(px.$$.fragment,f),E(m4.$$.fragment,f),E(_x.$$.fragment,f),E(ux.$$.fragment,f),E(vx.$$.fragment,f),E(h4.$$.fragment,f),E(Fx.$$.fragment,f),E(S4.$$.fragment,f),E(Tx.$$.fragment,f),E(Mx.$$.fragment,f),E(Cx.$$.fragment,f),E(P4.$$.fragment,f),E(wx.$$.fragment,f),E(N4.$$.fragment,f),E(Lx.$$.fragment,f),E(yx.$$.fragment,f),E($x.$$.fragment,f),E(j4.$$.fragment,f),E(kx.$$.fragment,f),E(G4.$$.fragment,f),E(Sx.$$.fragment,f),E(Rx.$$.fragment,f),E(Bx.$$.fragment,f),E(V4.$$.fragment,f),E(Ix.$$.fragment,f),E(cE.$$.fragment,f),E(Nx.$$.fragment,f),E(qx.$$.fragment,f),E(Dx.$$.fragment,f),E(mE.$$.fragment,f),E(Gx.$$.fragment,f),E(RE.$$.fragment,f),E(Ox.$$.fragment,f),E(Vx.$$.fragment,f),E(zx.$$.fragment,f),E(BE.$$.fragment,f),E(Qx.$$.fragment,f),E(NE.$$.fragment,f),E(Wx.$$.fragment,f),E(Hx.$$.fragment,f),E(Jx.$$.fragment,f),E(jE.$$.fragment,f),E(Yx.$$.fragment,f),E(GE.$$.fragment,f),E(Kx.$$.fragment,f),E(Zx.$$.fragment,f),E(o$.$$.fragment,f),E(VE.$$.fragment,f),E(r$.$$.fragment,f),E(uC.$$.fragment,f),E(t$.$$.fragment,f),E(a$.$$.fragment,f),E(s$.$$.fragment,f),E(vC.$$.fragment,f),E(l$.$$.fragment,f),E($C.$$.fragment,f),E(i$.$$.fragment,f),E(d$.$$.fragment,f),E(f$.$$.fragment,f),E(SC.$$.fragment,f),E(m$.$$.fragment,f),E(QC.$$.fragment,f),E(g$.$$.fragment,f),E(h$.$$.fragment,f),E(_$.$$.fragment,f),E(HC.$$.fragment,f),E(u$.$$.fragment,f),E(n0.$$.fragment,f),E(b$.$$.fragment,f),E(v$.$$.fragment,f),E(T$.$$.fragment,f),E(l0.$$.fragment,f),E(M$.$$.fragment,f),E(b0.$$.fragment,f),E(E$.$$.fragment,f),E(C$.$$.fragment,f),E(A$.$$.fragment,f),E(F0.$$.fragment,f),E(L$.$$.fragment,f),E(k0.$$.fragment,f),E(y$.$$.fragment,f),E(x$.$$.fragment,f),E(k$.$$.fragment,f),E(R0.$$.fragment,f),E(S$.$$.fragment,f),E(X0.$$.fragment,f),E(R$.$$.fragment,f),E(P$.$$.fragment,f),E(I$.$$.fragment,f),E(Q0.$$.fragment,f),E(N$.$$.fragment,f),E(ow.$$.fragment,f),E(q$.$$.fragment,f),E(j$.$$.fragment,f),E(G$.$$.fragment,f),E(tw.$$.fragment,f),E(O$.$$.fragment,f),E(mw.$$.fragment,f),E(V$.$$.fragment,f),E(X$.$$.fragment,f),E(Q$.$$.fragment,f),E(hw.$$.fragment,f),E(W$.$$.fragment,f),E(_w.$$.fragment,f),E(H$.$$.fragment,f),E(U$.$$.fragment,f),E(Y$.$$.fragment,f),E(bw.$$.fragment,f),E(K$.$$.fragment,f),E(Tw.$$.fragment,f),E(ek.$$.fragment,f),E(ok.$$.fragment,f),E(tk.$$.fragment,f),E(Ew.$$.fragment,f),E(ak.$$.fragment,f),E(ww.$$.fragment,f),vze=!0)},o(f){C(d.$$.fragment,f),C($a.$$.fragment,f),C(U6.$$.fragment,f),C(J6.$$.fragment,f),C(Nf.$$.fragment,f),C(Y6.$$.fragment,f),C(K6.$$.fragment,f),C(oL.$$.fragment,f),C(Hg.$$.fragment,f),C(rL.$$.fragment,f),C(tL.$$.fragment,f),C(aL.$$.fragment,f),C(lL.$$.fragment,f),C($h.$$.fragment,f),C(iL.$$.fragment,f),C(dL.$$.fragment,f),C(cL.$$.fragment,f),C(gL.$$.fragment,f),C(mp.$$.fragment,f),C(gp.$$.fragment,f),C(hL.$$.fragment,f),C(pL.$$.fragment,f),C(_L.$$.fragment,f),C(vL.$$.fragment,f),C(Pp.$$.fragment,f),C(Bp.$$.fragment,f),C(FL.$$.fragment,f),C(TL.$$.fragment,f),C(ML.$$.fragment,f),C(CL.$$.fragment,f),C(qp.$$.fragment,f),C(wL.$$.fragment,f),C(Gu.$$.fragment,f),C(AL.$$.fragment,f),C(LL.$$.fragment,f),C(xL.$$.fragment,f),C(Vu.$$.fragment,f),C($L.$$.fragment,f),C(I1.$$.fragment,f),C(kL.$$.fragment,f),C(SL.$$.fragment,f),C(PL.$$.fragment,f),C(q1.$$.fragment,f),C(BL.$$.fragment,f),C(A2.$$.fragment,f),C(IL.$$.fragment,f),C(NL.$$.fragment,f),C(jL.$$.fragment,f),C(y2.$$.fragment,f),C(DL.$$.fragment,f),C(hb.$$.fragment,f),C(GL.$$.fragment,f),C(OL.$$.fragment,f),C(XL.$$.fragment,f),C(_b.$$.fragment,f),C(zL.$$.fragment,f),C(Ib.$$.fragment,f),C(QL.$$.fragment,f),C(WL.$$.fragment,f),C(UL.$$.fragment,f),C(qb.$$.fragment,f),C(JL.$$.fragment,f),C(Iv.$$.fragment,f),C(YL.$$.fragment,f),C(KL.$$.fragment,f),C(ey.$$.fragment,f),C(qv.$$.fragment,f),C(oy.$$.fragment,f),C(_3.$$.fragment,f),C(ry.$$.fragment,f),C(ty.$$.fragment,f),C(ny.$$.fragment,f),C(b3.$$.fragment,f),C(sy.$$.fragment,f),C(A3.$$.fragment,f),C(ly.$$.fragment,f),C(iy.$$.fragment,f),C(cy.$$.fragment,f),C(y3.$$.fragment,f),C(fy.$$.fragment,f),C(m5.$$.fragment,f),C(my.$$.fragment,f),C(gy.$$.fragment,f),C(py.$$.fragment,f),C(h5.$$.fragment,f),C(_y.$$.fragment,f),C(aF.$$.fragment,f),C(uy.$$.fragment,f),C(by.$$.fragment,f),C(Fy.$$.fragment,f),C(sF.$$.fragment,f),C(Ty.$$.fragment,f),C(dF.$$.fragment,f),C(My.$$.fragment,f),C(Ey.$$.fragment,f),C(wy.$$.fragment,f),C(fF.$$.fragment,f),C(Ay.$$.fragment,f),C(wF.$$.fragment,f),C(Ly.$$.fragment,f),C(yy.$$.fragment,f),C($y.$$.fragment,f),C(LF.$$.fragment,f),C(ky.$$.fragment,f),C($F.$$.fragment,f),C(Sy.$$.fragment,f),C(Ry.$$.fragment,f),C(By.$$.fragment,f),C(SF.$$.fragment,f),C(Iy.$$.fragment,f),C(BF.$$.fragment,f),C(Ny.$$.fragment,f),C(qy.$$.fragment,f),C(Dy.$$.fragment,f),C(NF.$$.fragment,f),C(Gy.$$.fragment,f),C(HF.$$.fragment,f),C(Oy.$$.fragment,f),C(Vy.$$.fragment,f),C(zy.$$.fragment,f),C(JF.$$.fragment,f),C(Qy.$$.fragment,f),C(tT.$$.fragment,f),C(Wy.$$.fragment,f),C(Hy.$$.fragment,f),C(Jy.$$.fragment,f),C(nT.$$.fragment,f),C(Yy.$$.fragment,f),C(uT.$$.fragment,f),C(Ky.$$.fragment,f),C(Zy.$$.fragment,f),C(o8.$$.fragment,f),C(vT.$$.fragment,f),C(r8.$$.fragment,f),C(ET.$$.fragment,f),C(a8.$$.fragment,f),C(n8.$$.fragment,f),C(l8.$$.fragment,f),C(wT.$$.fragment,f),C(i8.$$.fragment,f),C(ST.$$.fragment,f),C(d8.$$.fragment,f),C(c8.$$.fragment,f),C(m8.$$.fragment,f),C(PT.$$.fragment,f),C(g8.$$.fragment,f),C(jT.$$.fragment,f),C(h8.$$.fragment,f),C(p8.$$.fragment,f),C(u8.$$.fragment,f),C(GT.$$.fragment,f),C(b8.$$.fragment,f),C(zT.$$.fragment,f),C(F8.$$.fragment,f),C(T8.$$.fragment,f),C(E8.$$.fragment,f),C(WT.$$.fragment,f),C(C8.$$.fragment,f),C(JT.$$.fragment,f),C(w8.$$.fragment,f),C(A8.$$.fragment,f),C(y8.$$.fragment,f),C(KT.$$.fragment,f),C(x8.$$.fragment,f),C(a7.$$.fragment,f),C($8.$$.fragment,f),C(k8.$$.fragment,f),C(R8.$$.fragment,f),C(s7.$$.fragment,f),C(P8.$$.fragment,f),C(d7.$$.fragment,f),C(B8.$$.fragment,f),C(I8.$$.fragment,f),C(q8.$$.fragment,f),C(f7.$$.fragment,f),C(j8.$$.fragment,f),C(n9.$$.fragment,f),C(D8.$$.fragment,f),C(G8.$$.fragment,f),C(V8.$$.fragment,f),C(l9.$$.fragment,f),C(X8.$$.fragment,f),C(k9.$$.fragment,f),C(z8.$$.fragment,f),C(Q8.$$.fragment,f),C(H8.$$.fragment,f),C(R9.$$.fragment,f),C(U8.$$.fragment,f),C(W9.$$.fragment,f),C(J8.$$.fragment,f),C(Y8.$$.fragment,f),C(Z8.$$.fragment,f),C(U9.$$.fragment,f),C(ex.$$.fragment,f),C(oM.$$.fragment,f),C(ox.$$.fragment,f),C(rx.$$.fragment,f),C(ax.$$.fragment,f),C(tM.$$.fragment,f),C(nx.$$.fragment,f),C(CM.$$.fragment,f),C(sx.$$.fragment,f),C(lx.$$.fragment,f),C(dx.$$.fragment,f),C(AM.$$.fragment,f),C(cx.$$.fragment,f),C(NM.$$.fragment,f),C(fx.$$.fragment,f),C(mx.$$.fragment,f),C(hx.$$.fragment,f),C(jM.$$.fragment,f),C(px.$$.fragment,f),C(m4.$$.fragment,f),C(_x.$$.fragment,f),C(ux.$$.fragment,f),C(vx.$$.fragment,f),C(h4.$$.fragment,f),C(Fx.$$.fragment,f),C(S4.$$.fragment,f),C(Tx.$$.fragment,f),C(Mx.$$.fragment,f),C(Cx.$$.fragment,f),C(P4.$$.fragment,f),C(wx.$$.fragment,f),C(N4.$$.fragment,f),C(Lx.$$.fragment,f),C(yx.$$.fragment,f),C($x.$$.fragment,f),C(j4.$$.fragment,f),C(kx.$$.fragment,f),C(G4.$$.fragment,f),C(Sx.$$.fragment,f),C(Rx.$$.fragment,f),C(Bx.$$.fragment,f),C(V4.$$.fragment,f),C(Ix.$$.fragment,f),C(cE.$$.fragment,f),C(Nx.$$.fragment,f),C(qx.$$.fragment,f),C(Dx.$$.fragment,f),C(mE.$$.fragment,f),C(Gx.$$.fragment,f),C(RE.$$.fragment,f),C(Ox.$$.fragment,f),C(Vx.$$.fragment,f),C(zx.$$.fragment,f),C(BE.$$.fragment,f),C(Qx.$$.fragment,f),C(NE.$$.fragment,f),C(Wx.$$.fragment,f),C(Hx.$$.fragment,f),C(Jx.$$.fragment,f),C(jE.$$.fragment,f),C(Yx.$$.fragment,f),C(GE.$$.fragment,f),C(Kx.$$.fragment,f),C(Zx.$$.fragment,f),C(o$.$$.fragment,f),C(VE.$$.fragment,f),C(r$.$$.fragment,f),C(uC.$$.fragment,f),C(t$.$$.fragment,f),C(a$.$$.fragment,f),C(s$.$$.fragment,f),C(vC.$$.fragment,f),C(l$.$$.fragment,f),C($C.$$.fragment,f),C(i$.$$.fragment,f),C(d$.$$.fragment,f),C(f$.$$.fragment,f),C(SC.$$.fragment,f),C(m$.$$.fragment,f),C(QC.$$.fragment,f),C(g$.$$.fragment,f),C(h$.$$.fragment,f),C(_$.$$.fragment,f),C(HC.$$.fragment,f),C(u$.$$.fragment,f),C(n0.$$.fragment,f),C(b$.$$.fragment,f),C(v$.$$.fragment,f),C(T$.$$.fragment,f),C(l0.$$.fragment,f),C(M$.$$.fragment,f),C(b0.$$.fragment,f),C(E$.$$.fragment,f),C(C$.$$.fragment,f),C(A$.$$.fragment,f),C(F0.$$.fragment,f),C(L$.$$.fragment,f),C(k0.$$.fragment,f),C(y$.$$.fragment,f),C(x$.$$.fragment,f),C(k$.$$.fragment,f),C(R0.$$.fragment,f),C(S$.$$.fragment,f),C(X0.$$.fragment,f),C(R$.$$.fragment,f),C(P$.$$.fragment,f),C(I$.$$.fragment,f),C(Q0.$$.fragment,f),C(N$.$$.fragment,f),C(ow.$$.fragment,f),C(q$.$$.fragment,f),C(j$.$$.fragment,f),C(G$.$$.fragment,f),C(tw.$$.fragment,f),C(O$.$$.fragment,f),C(mw.$$.fragment,f),C(V$.$$.fragment,f),C(X$.$$.fragment,f),C(Q$.$$.fragment,f),C(hw.$$.fragment,f),C(W$.$$.fragment,f),C(_w.$$.fragment,f),C(H$.$$.fragment,f),C(U$.$$.fragment,f),C(Y$.$$.fragment,f),C(bw.$$.fragment,f),C(K$.$$.fragment,f),C(Tw.$$.fragment,f),C(ek.$$.fragment,f),C(ok.$$.fragment,f),C(tk.$$.fragment,f),C(Ew.$$.fragment,f),C(ak.$$.fragment,f),C(ww.$$.fragment,f),vze=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(Sf),f&&t(nt),f&&t(Oe),f&&t(Qe),f&&t(Pf),w($a,f),f&&t(We),f&&t(Ae),f&&t(Co),f&&t(ka),f&&t(hVe),f&&t(Si),w(U6),f&&t(pVe),f&&t(Nn),f&&t(_Ve),w(J6,f),f&&t(uVe),f&&t($S),f&&t(bVe),w(Nf,f),f&&t(vVe),f&&t(Ri),w(Y6),f&&t(FVe),f&&t(wo),w(K6),w(oL),w(Hg),w(rL),f&&t(TVe),f&&t(Bi),w(tL),f&&t(MVe),f&&t(Ao),w(aL),w(lL),w($h),w(iL),f&&t(EVe),f&&t(Ii),w(dL),f&&t(CVe),f&&t(Lo),w(cL),w(gL),w(mp),w(gp),w(hL),f&&t(wVe),f&&t(Ni),w(pL),f&&t(AVe),f&&t(yo),w(_L),w(vL),w(Pp),w(Bp),w(FL),f&&t(LVe),f&&t(ji),w(TL),f&&t(yVe),f&&t(xo),w(ML),w(CL),w(qp),w(wL),w(Gu),f&&t(xVe),f&&t(Oi),w(AL),f&&t($Ve),f&&t($o),w(LL),w(xL),w(Vu),w($L),w(I1),f&&t(kVe),f&&t(zi),w(kL),f&&t(SVe),f&&t(ko),w(SL),w(PL),w(q1),w(BL),w(A2),f&&t(RVe),f&&t(Hi),w(IL),f&&t(PVe),f&&t(So),w(NL),w(jL),w(y2),w(DL),w(hb),f&&t(BVe),f&&t(Yi),w(GL),f&&t(IVe),f&&t(Ro),w(OL),w(XL),w(_b),w(zL),w(Ib),f&&t(NVe),f&&t(ed),w(QL),f&&t(qVe),f&&t(Po),w(WL),w(UL),w(qb),w(JL),w(Iv),f&&t(jVe),f&&t(td),w(YL),f&&t(DVe),f&&t(Bo),w(KL),w(ey),w(qv),w(oy),w(_3),f&&t(GVe),f&&t(sd),w(ry),f&&t(OVe),f&&t(Io),w(ty),w(ny),w(b3),w(sy),w(A3),f&&t(VVe),f&&t(dd),w(ly),f&&t(XVe),f&&t(qo),w(iy),w(cy),w(y3),w(fy),w(m5),f&&t(zVe),f&&t(md),w(my),f&&t(QVe),f&&t(jo),w(gy),w(py),w(h5),w(_y),w(aF),f&&t(WVe),f&&t(pd),w(uy),f&&t(HVe),f&&t(Do),w(by),w(Fy),w(sF),w(Ty),w(dF),f&&t(UVe),f&&t(bd),w(My),f&&t(JVe),f&&t(Go),w(Ey),w(wy),w(fF),w(Ay),w(wF),f&&t(YVe),f&&t(Td),w(Ly),f&&t(KVe),f&&t(Oo),w(yy),w($y),w(LF),w(ky),w($F),f&&t(ZVe),f&&t(Cd),w(Sy),f&&t(eXe),f&&t(Vo),w(Ry),w(By),w(SF),w(Iy),w(BF),f&&t(oXe),f&&t(Ld),w(Ny),f&&t(rXe),f&&t(Xo),w(qy),w(Dy),w(NF),w(Gy),w(HF),f&&t(tXe),f&&t($d),w(Oy),f&&t(aXe),f&&t(zo),w(Vy),w(zy),w(JF),w(Qy),w(tT),f&&t(nXe),f&&t(Rd),w(Wy),f&&t(sXe),f&&t(Qo),w(Hy),w(Jy),w(nT),w(Yy),w(uT),f&&t(lXe),f&&t(Id),w(Ky),f&&t(iXe),f&&t(Wo),w(Zy),w(o8),w(vT),w(r8),w(ET),f&&t(dXe),f&&t(jd),w(a8),f&&t(cXe),f&&t(Ho),w(n8),w(l8),w(wT),w(i8),w(ST),f&&t(fXe),f&&t(Od),w(d8),f&&t(mXe),f&&t(Uo),w(c8),w(m8),w(PT),w(g8),w(jT),f&&t(gXe),f&&t(Qd),w(h8),f&&t(hXe),f&&t(Jo),w(p8),w(u8),w(GT),w(b8),w(zT),f&&t(pXe),f&&t(Ud),w(F8),f&&t(_Xe),f&&t(Yo),w(T8),w(E8),w(WT),w(C8),w(JT),f&&t(uXe),f&&t(Kd),w(w8),f&&t(bXe),f&&t(Ko),w(A8),w(y8),w(KT),w(x8),w(a7),f&&t(vXe),f&&t(oc),w($8),f&&t(FXe),f&&t(Zo),w(k8),w(R8),w(s7),w(P8),w(d7),f&&t(TXe),f&&t(ac),w(B8),f&&t(MXe),f&&t(er),w(I8),w(q8),w(f7),w(j8),w(n9),f&&t(EXe),f&&t(lc),w(D8),f&&t(CXe),f&&t(or),w(G8),w(V8),w(l9),w(X8),w(k9),f&&t(wXe),f&&t(cc),w(z8),f&&t(AXe),f&&t(rr),w(Q8),w(H8),w(R9),w(U8),w(W9),f&&t(LXe),f&&t(gc),w(J8),f&&t(yXe),f&&t(tr),w(Y8),w(Z8),w(U9),w(ex),w(oM),f&&t(xXe),f&&t(_c),w(ox),f&&t($Xe),f&&t(ar),w(rx),w(ax),w(tM),w(nx),w(CM),f&&t(kXe),f&&t(vc),w(sx),f&&t(SXe),f&&t(nr),w(lx),w(dx),w(AM),w(cx),w(NM),f&&t(RXe),f&&t(Mc),w(fx),f&&t(PXe),f&&t(sr),w(mx),w(hx),w(jM),w(px),w(m4),f&&t(BXe),f&&t(wc),w(_x),f&&t(IXe),f&&t(lr),w(ux),w(vx),w(h4),w(Fx),w(S4),f&&t(NXe),f&&t(yc),w(Tx),f&&t(qXe),f&&t(ir),w(Mx),w(Cx),w(P4),w(wx),w(N4),f&&t(jXe),f&&t(kc),w(Lx),f&&t(DXe),f&&t(dr),w(yx),w($x),w(j4),w(kx),w(G4),f&&t(GXe),f&&t(Pc),w(Sx),f&&t(OXe),f&&t(cr),w(Rx),w(Bx),w(V4),w(Ix),w(cE),f&&t(VXe),f&&t(Nc),w(Nx),f&&t(XXe),f&&t(fr),w(qx),w(Dx),w(mE),w(Gx),w(RE),f&&t(zXe),f&&t(Dc),w(Ox),f&&t(QXe),f&&t(mr),w(Vx),w(zx),w(BE),w(Qx),w(NE),f&&t(WXe),f&&t(Vc),w(Wx),f&&t(HXe),f&&t(gr),w(Hx),w(Jx),w(jE),w(Yx),w(GE),f&&t(UXe),f&&t(Qc),w(Kx),f&&t(JXe),f&&t(hr),w(Zx),w(o$),w(VE),w(r$),w(uC),f&&t(YXe),f&&t(Uc),w(t$),f&&t(KXe),f&&t(pr),w(a$),w(s$),w(vC),w(l$),w($C),f&&t(ZXe),f&&t(Kc),w(i$),f&&t(eze),f&&t(_r),w(d$),w(f$),w(SC),w(m$),w(QC),f&&t(oze),f&&t(of),w(g$),f&&t(rze),f&&t(ur),w(h$),w(_$),w(HC),w(u$),w(n0),f&&t(tze),f&&t(af),w(b$),f&&t(aze),f&&t(br),w(v$),w(T$),w(l0),w(M$),w(b0),f&&t(nze),f&&t(lf),w(E$),f&&t(sze),f&&t(vr),w(C$),w(A$),w(F0),w(L$),w(k0),f&&t(lze),f&&t(ff),w(y$),f&&t(ize),f&&t(Fr),w(x$),w(k$),w(R0),w(S$),w(X0),f&&t(dze),f&&t(hf),w(R$),f&&t(cze),f&&t(Tr),w(P$),w(I$),w(Q0),w(N$),w(ow),f&&t(fze),f&&t(uf),w(q$),f&&t(mze),f&&t(Mr),w(j$),w(G$),w(tw),w(O$),w(mw),f&&t(gze),f&&t(Ff),w(V$),f&&t(hze),f&&t(Er),w(X$),w(Q$),w(hw),w(W$),w(_w),f&&t(pze),f&&t(Ef),w(H$),f&&t(_ze),f&&t(Cr),w(U$),w(Y$),w(bw),w(K$),w(Tw),f&&t(uze),f&&t(Af),w(ek),f&&t(bze),f&&t(wr),w(ok),w(tk),w(Ew),w(ak),w(ww)}}}const DQt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function GQt($){return jXt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class HQt extends BXt{constructor(g){super();IXt(this,g,GQt,jQt,NXt,{})}}export{HQt as default,DQt as metadata};
