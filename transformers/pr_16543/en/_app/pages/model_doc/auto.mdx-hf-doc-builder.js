import{S as BGt,i as IGt,s as NGt,e as a,k as l,w as F,t as o,M as qGt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as jGt,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as oZr}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as re}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function DGt(x){let g,v,p,m,_,d,h,Eo,Mi,xf,at,Ei,Ci,k7,$f,Oe,Qe,wi,Rn,S7,Pn,Bn,R7,Ai,In,P7,Li,kf,xa;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Eo=o(`, make sure its
`),Mi=a("code"),xf=o("model_type"),at=o(" attribute is set to the same key you use when registering the config (here "),Ei=a("code"),Ci=o('"new-model"'),k7=o(")."),$f=l(),Oe=a("p"),Qe=o("Likewise, if your "),wi=a("code"),Rn=o("NewModel"),S7=o(" is a subclass of "),Pn=a("a"),Bn=o("PreTrainedModel"),R7=o(`, make sure its
`),Ai=a("code"),In=o("config_class"),P7=o(` attribute is set to the same class you use when registering the model (here
`),Li=a("code"),kf=o("NewModelConfig"),xa=o(")."),this.h()},l(We){g=n(We,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var dS=s(p);m=r(dS,"NewModelConfig"),dS.forEach(t),_=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var yi=s(d);h=r(yi,"PretrainedConfig"),yi.forEach(t),Eo=r(Ae,`, make sure its
`),Mi=n(Ae,"CODE",{});var cS=s(Mi);xf=r(cS,"model_type"),cS.forEach(t),at=r(Ae," attribute is set to the same key you use when registering the config (here "),Ei=n(Ae,"CODE",{});var fS=s(Ei);Ci=r(fS,'"new-model"'),fS.forEach(t),k7=r(Ae,")."),Ae.forEach(t),$f=i(We),Oe=n(We,"P",{});var Co=s(Oe);Qe=r(Co,"Likewise, if your "),wi=n(Co,"CODE",{});var $a=s(wi);Rn=r($a,"NewModel"),$a.forEach(t),S7=r(Co," is a subclass of "),Pn=n(Co,"A",{href:!0});var mS=s(Pn);Bn=r(mS,"PreTrainedModel"),mS.forEach(t),R7=r(Co,`, make sure its
`),Ai=n(Co,"CODE",{});var Sf=s(Ai);In=r(Sf,"config_class"),Sf.forEach(t),P7=r(Co,` attribute is set to the same class you use when registering the model (here
`),Li=n(Co,"CODE",{});var gS=s(Li);kf=r(gS,"NewModelConfig"),gS.forEach(t),xa=r(Co,")."),Co.forEach(t),this.h()},h(){c(Pn,"href","/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel")},m(We,Ae){b(We,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,d),e(d,h),e(g,Eo),e(g,Mi),e(Mi,xf),e(g,at),e(g,Ei),e(Ei,Ci),e(g,k7),b(We,$f,Ae),b(We,Oe,Ae),e(Oe,Qe),e(Oe,wi),e(wi,Rn),e(Oe,S7),e(Oe,Pn),e(Pn,Bn),e(Oe,R7),e(Oe,Ai),e(Ai,In),e(Oe,P7),e(Oe,Li),e(Li,kf),e(Oe,xa)},d(We){We&&t(g),We&&t($f),We&&t(Oe)}}}function GGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VGt(x){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Eo=s(p);m=r(Eo,"use_auth_token=True"),Eo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function XGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zGt(x){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Eo=s(p);m=r(Eo,"use_auth_token=True"),Eo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function QGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Ot(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function COt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function AOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Ot(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ROt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function POt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Vt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function AVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Vt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jVt(x){let g,v,p,m,_,d,h,Eo,Mi,xf,at,Ei,Ci,k7,$f,Oe,Qe,wi,Rn,S7,Pn,Bn,R7,Ai,In,P7,Li,kf,xa,We,Ae,dS,yi,cS,fS,Co,$a,mS,Sf,gS,wQe,cOe,xi,Rf,Ate,B7,AQe,Lte,LQe,fOe,Nn,yQe,yte,xQe,$Qe,xte,kQe,SQe,mOe,I7,gOe,hS,RQe,hOe,Pf,pOe,$i,Bf,$te,N7,PQe,kte,BQe,_Oe,wo,q7,IQe,j7,NQe,pS,qQe,jQe,DQe,D7,GQe,Ste,OQe,VQe,XQe,Ar,G7,zQe,Rte,QQe,WQe,ki,HQe,Pte,UQe,JQe,Bte,YQe,KQe,ZQe,A,If,Ite,eWe,oWe,_S,rWe,tWe,aWe,Nf,Nte,nWe,sWe,uS,lWe,iWe,dWe,qf,qte,cWe,fWe,bS,mWe,gWe,hWe,jf,jte,pWe,_We,vS,uWe,bWe,vWe,Df,Dte,FWe,TWe,FS,MWe,EWe,CWe,Gf,Gte,wWe,AWe,TS,LWe,yWe,xWe,Of,Ote,$We,kWe,MS,SWe,RWe,PWe,Vf,Vte,BWe,IWe,ES,NWe,qWe,jWe,Xf,Xte,DWe,GWe,CS,OWe,VWe,XWe,zf,zte,zWe,QWe,wS,WWe,HWe,UWe,Qf,Qte,JWe,YWe,AS,KWe,ZWe,eHe,Wf,Wte,oHe,rHe,LS,tHe,aHe,nHe,Hf,Hte,sHe,lHe,yS,iHe,dHe,cHe,Uf,Ute,fHe,mHe,xS,gHe,hHe,pHe,Jf,Jte,_He,uHe,$S,bHe,vHe,FHe,Yf,Yte,THe,MHe,kS,EHe,CHe,wHe,Kf,Kte,AHe,LHe,SS,yHe,xHe,$He,Zf,Zte,kHe,SHe,RS,RHe,PHe,BHe,em,eae,IHe,NHe,PS,qHe,jHe,DHe,om,oae,GHe,OHe,BS,VHe,XHe,zHe,rm,rae,QHe,WHe,IS,HHe,UHe,JHe,tm,tae,YHe,KHe,NS,ZHe,eUe,oUe,am,aae,rUe,tUe,qS,aUe,nUe,sUe,nm,nae,lUe,iUe,jS,dUe,cUe,fUe,sm,sae,mUe,gUe,DS,hUe,pUe,_Ue,lm,lae,uUe,bUe,GS,vUe,FUe,TUe,im,iae,MUe,EUe,OS,CUe,wUe,AUe,dm,dae,LUe,yUe,VS,xUe,$Ue,kUe,cm,cae,SUe,RUe,XS,PUe,BUe,IUe,fm,fae,NUe,qUe,zS,jUe,DUe,GUe,mm,mae,OUe,VUe,QS,XUe,zUe,QUe,gm,gae,WUe,HUe,WS,UUe,JUe,YUe,hm,hae,KUe,ZUe,HS,eJe,oJe,rJe,pm,pae,tJe,aJe,US,nJe,sJe,lJe,_m,_ae,iJe,dJe,JS,cJe,fJe,mJe,um,uae,gJe,hJe,YS,pJe,_Je,uJe,bm,bae,bJe,vJe,KS,FJe,TJe,MJe,vm,vae,EJe,CJe,ZS,wJe,AJe,LJe,Fm,Fae,yJe,xJe,eR,$Je,kJe,SJe,Tm,Tae,RJe,PJe,oR,BJe,IJe,NJe,Mm,Mae,qJe,jJe,rR,DJe,GJe,OJe,Em,Eae,VJe,XJe,tR,zJe,QJe,WJe,Cm,Cae,HJe,UJe,aR,JJe,YJe,KJe,wm,wae,ZJe,eYe,nR,oYe,rYe,tYe,Am,Aae,aYe,nYe,sR,sYe,lYe,iYe,Lm,Lae,dYe,cYe,lR,fYe,mYe,gYe,ym,yae,hYe,pYe,iR,_Ye,uYe,bYe,xm,xae,vYe,FYe,dR,TYe,MYe,EYe,$m,$ae,CYe,wYe,cR,AYe,LYe,yYe,km,kae,xYe,$Ye,fR,kYe,SYe,RYe,Sm,Sae,PYe,BYe,mR,IYe,NYe,qYe,Rm,Rae,jYe,DYe,gR,GYe,OYe,VYe,Pm,Pae,XYe,zYe,hR,QYe,WYe,HYe,Bm,Bae,UYe,JYe,pR,YYe,KYe,ZYe,Im,Iae,eKe,oKe,_R,rKe,tKe,aKe,Nm,Nae,nKe,sKe,uR,lKe,iKe,dKe,qm,qae,cKe,fKe,bR,mKe,gKe,hKe,jm,jae,pKe,_Ke,vR,uKe,bKe,vKe,Dm,Dae,FKe,TKe,FR,MKe,EKe,CKe,Gm,Gae,wKe,AKe,TR,LKe,yKe,xKe,Om,Oae,$Ke,kKe,MR,SKe,RKe,PKe,Vm,Vae,BKe,IKe,ER,NKe,qKe,jKe,Xm,Xae,DKe,GKe,CR,OKe,VKe,XKe,zm,zae,zKe,QKe,wR,WKe,HKe,UKe,Qm,Qae,JKe,YKe,AR,KKe,ZKe,eZe,Wm,Wae,oZe,rZe,LR,tZe,aZe,nZe,Hm,Hae,sZe,lZe,yR,iZe,dZe,cZe,Um,Uae,fZe,mZe,xR,gZe,hZe,pZe,Jm,Jae,_Ze,uZe,$R,bZe,vZe,FZe,Ym,Yae,TZe,MZe,kR,EZe,CZe,wZe,Km,Kae,AZe,LZe,SR,yZe,xZe,$Ze,Zm,Zae,kZe,SZe,RR,RZe,PZe,BZe,eg,ene,IZe,NZe,PR,qZe,jZe,DZe,og,one,GZe,OZe,BR,VZe,XZe,zZe,rg,rne,QZe,WZe,IR,HZe,UZe,JZe,tg,tne,YZe,KZe,NR,ZZe,eeo,oeo,ag,ane,reo,teo,qR,aeo,neo,seo,ng,nne,leo,ieo,jR,deo,ceo,feo,sg,sne,meo,geo,DR,heo,peo,_eo,lg,lne,ueo,beo,GR,veo,Feo,Teo,ig,ine,Meo,Eeo,OR,Ceo,weo,Aeo,dg,dne,Leo,yeo,VR,xeo,$eo,keo,cg,cne,Seo,Reo,XR,Peo,Beo,Ieo,fg,fne,Neo,qeo,zR,jeo,Deo,Geo,mg,mne,Oeo,Veo,QR,Xeo,zeo,Qeo,gg,gne,Weo,Heo,WR,Ueo,Jeo,Yeo,hg,hne,Keo,Zeo,HR,eoo,ooo,roo,pg,pne,too,aoo,UR,noo,soo,loo,_g,_ne,ioo,doo,JR,coo,foo,moo,ug,une,goo,hoo,YR,poo,_oo,uoo,bg,bne,boo,voo,KR,Foo,Too,Moo,vg,vne,Eoo,Coo,ZR,woo,Aoo,Loo,Fg,Fne,yoo,xoo,eP,$oo,koo,Soo,Tg,Tne,Roo,Poo,oP,Boo,Ioo,Noo,Mg,Mne,qoo,joo,rP,Doo,Goo,Ooo,Eg,Ene,Voo,Xoo,tP,zoo,Qoo,Woo,Cg,Cne,Hoo,Uoo,aP,Joo,Yoo,Koo,wg,wne,Zoo,ero,nP,oro,rro,tro,Ag,Ane,aro,nro,sP,sro,lro,iro,Lg,Lne,dro,cro,lP,fro,mro,gro,yg,yne,hro,pro,iP,_ro,uro,bro,xg,xne,vro,Fro,dP,Tro,Mro,Ero,$g,$ne,Cro,wro,cP,Aro,Lro,yro,kg,kne,xro,$ro,fP,kro,Sro,Rro,Sg,Sne,Pro,Bro,mP,Iro,Nro,qro,Rg,Rne,jro,Dro,gP,Gro,Oro,Vro,Pg,Pne,Xro,zro,hP,Qro,Wro,Hro,Bg,Bne,Uro,Jro,pP,Yro,Kro,Zro,Ig,Ine,eto,oto,_P,rto,tto,ato,Ng,Nne,nto,sto,uP,lto,ito,dto,qg,qne,cto,fto,bP,mto,gto,hto,jg,jne,pto,_to,vP,uto,bto,vto,Dg,Dne,Fto,Tto,FP,Mto,Eto,Cto,Gg,Gne,wto,Ato,TP,Lto,yto,xto,Og,One,$to,kto,MP,Sto,Rto,Pto,Vg,Bto,Xg,O7,Ito,Vne,Nto,uOe,Si,zg,Xne,V7,qto,zne,jto,bOe,Ao,X7,Dto,z7,Gto,EP,Oto,Vto,Xto,Q7,zto,Qne,Qto,Wto,Hto,Lr,W7,Uto,Wne,Jto,Yto,ka,Kto,Hne,Zto,eao,Une,oao,rao,Jne,tao,aao,nao,k,qn,Yne,sao,lao,CP,iao,dao,wP,cao,fao,mao,jn,Kne,gao,hao,AP,pao,_ao,LP,uao,bao,vao,Dn,Zne,Fao,Tao,yP,Mao,Eao,xP,Cao,wao,Aao,Qg,ese,Lao,yao,$P,xao,$ao,kao,Gn,ose,Sao,Rao,kP,Pao,Bao,SP,Iao,Nao,qao,Wg,rse,jao,Dao,RP,Gao,Oao,Vao,Hg,tse,Xao,zao,PP,Qao,Wao,Hao,Ug,ase,Uao,Jao,BP,Yao,Kao,Zao,On,nse,eno,ono,IP,rno,tno,NP,ano,nno,sno,Vn,sse,lno,ino,qP,dno,cno,jP,fno,mno,gno,Xn,lse,hno,pno,DP,_no,uno,GP,bno,vno,Fno,Jg,ise,Tno,Mno,OP,Eno,Cno,wno,Yg,dse,Ano,Lno,VP,yno,xno,$no,Kg,cse,kno,Sno,XP,Rno,Pno,Bno,zn,fse,Ino,Nno,zP,qno,jno,QP,Dno,Gno,Ono,Zg,mse,Vno,Xno,WP,zno,Qno,Wno,Qn,gse,Hno,Uno,HP,Jno,Yno,UP,Kno,Zno,eso,Wn,hse,oso,rso,JP,tso,aso,YP,nso,sso,lso,Hn,pse,iso,dso,KP,cso,fso,ZP,mso,gso,hso,Un,_se,pso,_so,eB,uso,bso,oB,vso,Fso,Tso,eh,use,Mso,Eso,rB,Cso,wso,Aso,Jn,bse,Lso,yso,tB,xso,$so,aB,kso,Sso,Rso,Yn,vse,Pso,Bso,nB,Iso,Nso,sB,qso,jso,Dso,Kn,Fse,Gso,Oso,lB,Vso,Xso,iB,zso,Qso,Wso,Zn,Tse,Hso,Uso,dB,Jso,Yso,cB,Kso,Zso,elo,es,Mse,olo,rlo,fB,tlo,alo,mB,nlo,slo,llo,os,Ese,ilo,dlo,gB,clo,flo,hB,mlo,glo,hlo,oh,Cse,plo,_lo,pB,ulo,blo,vlo,rs,wse,Flo,Tlo,_B,Mlo,Elo,uB,Clo,wlo,Alo,rh,Ase,Llo,ylo,bB,xlo,$lo,klo,ts,Lse,Slo,Rlo,vB,Plo,Blo,FB,Ilo,Nlo,qlo,as,yse,jlo,Dlo,TB,Glo,Olo,MB,Vlo,Xlo,zlo,ns,xse,Qlo,Wlo,EB,Hlo,Ulo,CB,Jlo,Ylo,Klo,th,$se,Zlo,eio,wB,oio,rio,tio,ss,kse,aio,nio,AB,sio,lio,LB,iio,dio,cio,ls,Sse,fio,mio,yB,gio,hio,xB,pio,_io,uio,ah,Rse,bio,vio,$B,Fio,Tio,Mio,is,Pse,Eio,Cio,kB,wio,Aio,SB,Lio,yio,xio,ds,Bse,$io,kio,RB,Sio,Rio,PB,Pio,Bio,Iio,cs,Ise,Nio,qio,BB,jio,Dio,IB,Gio,Oio,Vio,fs,Nse,Xio,zio,NB,Qio,Wio,qB,Hio,Uio,Jio,ms,qse,Yio,Kio,jB,Zio,edo,DB,odo,rdo,tdo,gs,jse,ado,ndo,GB,sdo,ldo,OB,ido,ddo,cdo,hs,Dse,fdo,mdo,VB,gdo,hdo,XB,pdo,_do,udo,ps,Gse,bdo,vdo,zB,Fdo,Tdo,QB,Mdo,Edo,Cdo,nh,Ose,wdo,Ado,WB,Ldo,ydo,xdo,_s,Vse,$do,kdo,HB,Sdo,Rdo,UB,Pdo,Bdo,Ido,sh,Xse,Ndo,qdo,JB,jdo,Ddo,Gdo,lh,zse,Odo,Vdo,YB,Xdo,zdo,Qdo,us,Qse,Wdo,Hdo,KB,Udo,Jdo,ZB,Ydo,Kdo,Zdo,bs,Wse,eco,oco,eI,rco,tco,oI,aco,nco,sco,vs,Hse,lco,ico,rI,dco,cco,tI,fco,mco,gco,ih,Use,hco,pco,aI,_co,uco,bco,Fs,Jse,vco,Fco,nI,Tco,Mco,sI,Eco,Cco,wco,Ts,Yse,Aco,Lco,lI,yco,xco,iI,$co,kco,Sco,Ms,Kse,Rco,Pco,dI,Bco,Ico,cI,Nco,qco,jco,Es,Zse,Dco,Gco,fI,Oco,Vco,mI,Xco,zco,Qco,Cs,ele,Wco,Hco,gI,Uco,Jco,hI,Yco,Kco,Zco,ws,ole,efo,ofo,pI,rfo,tfo,_I,afo,nfo,sfo,dh,rle,lfo,ifo,uI,dfo,cfo,ffo,As,tle,mfo,gfo,bI,hfo,pfo,vI,_fo,ufo,bfo,ch,ale,vfo,Ffo,FI,Tfo,Mfo,Efo,fh,nle,Cfo,wfo,TI,Afo,Lfo,yfo,mh,sle,xfo,$fo,MI,kfo,Sfo,Rfo,gh,lle,Pfo,Bfo,EI,Ifo,Nfo,qfo,Ls,ile,jfo,Dfo,CI,Gfo,Ofo,wI,Vfo,Xfo,zfo,hh,dle,Qfo,Wfo,AI,Hfo,Ufo,Jfo,ys,cle,Yfo,Kfo,LI,Zfo,emo,yI,omo,rmo,tmo,xs,fle,amo,nmo,xI,smo,lmo,$I,imo,dmo,cmo,$s,mle,fmo,mmo,kI,gmo,hmo,SI,pmo,_mo,umo,ks,gle,bmo,vmo,RI,Fmo,Tmo,PI,Mmo,Emo,Cmo,Ss,hle,wmo,Amo,BI,Lmo,ymo,II,xmo,$mo,kmo,Rs,ple,Smo,Rmo,NI,Pmo,Bmo,qI,Imo,Nmo,qmo,ph,_le,jmo,Dmo,jI,Gmo,Omo,Vmo,_h,ule,Xmo,zmo,DI,Qmo,Wmo,Hmo,Ps,ble,Umo,Jmo,GI,Ymo,Kmo,OI,Zmo,ego,ogo,Bs,vle,rgo,tgo,VI,ago,ngo,XI,sgo,lgo,igo,Is,Fle,dgo,cgo,zI,fgo,mgo,QI,ggo,hgo,pgo,uh,Tle,_go,ugo,WI,bgo,vgo,Fgo,bh,Mle,Tgo,Mgo,HI,Ego,Cgo,wgo,vh,Ele,Ago,Lgo,UI,ygo,xgo,$go,Ns,Cle,kgo,Sgo,JI,Rgo,Pgo,YI,Bgo,Igo,Ngo,qs,wle,qgo,jgo,KI,Dgo,Ggo,ZI,Ogo,Vgo,Xgo,Fh,Ale,zgo,Qgo,eN,Wgo,Hgo,Ugo,Th,Lle,Jgo,Ygo,oN,Kgo,Zgo,eho,Mh,yle,oho,rho,rN,tho,aho,nho,js,xle,sho,lho,tN,iho,dho,aN,cho,fho,mho,Eh,$le,gho,hho,nN,pho,_ho,uho,Ch,kle,bho,vho,sN,Fho,Tho,Mho,Ds,Sle,Eho,Cho,lN,who,Aho,iN,Lho,yho,xho,Gs,Rle,$ho,kho,dN,Sho,Rho,cN,Pho,Bho,Iho,Os,Ple,Nho,qho,fN,jho,Dho,mN,Gho,Oho,Vho,Vs,Ble,Xho,zho,gN,Qho,Who,hN,Hho,Uho,Jho,wh,Yho,Ah,H7,Kho,Ile,Zho,vOe,Ri,Lh,Nle,U7,epo,qle,opo,FOe,Lo,J7,rpo,Y7,tpo,pN,apo,npo,spo,K7,lpo,jle,ipo,dpo,cpo,He,Z7,fpo,Dle,mpo,gpo,Sa,hpo,Gle,ppo,_po,Ole,upo,bpo,Vle,vpo,Fpo,Tpo,Y,yh,Xle,Mpo,Epo,_N,Cpo,wpo,Apo,xh,zle,Lpo,ypo,uN,xpo,$po,kpo,$h,Qle,Spo,Rpo,bN,Ppo,Bpo,Ipo,kh,Wle,Npo,qpo,vN,jpo,Dpo,Gpo,Sh,Hle,Opo,Vpo,FN,Xpo,zpo,Qpo,Rh,Ule,Wpo,Hpo,TN,Upo,Jpo,Ypo,Ph,Jle,Kpo,Zpo,MN,e_o,o_o,r_o,Bh,Yle,t_o,a_o,EN,n_o,s_o,l_o,Ih,Kle,i_o,d_o,CN,c_o,f_o,m_o,Nh,Zle,g_o,h_o,wN,p_o,__o,u_o,qh,eie,b_o,v_o,AN,F_o,T_o,M_o,jh,oie,E_o,C_o,LN,w_o,A_o,L_o,Dh,rie,y_o,x_o,yN,$_o,k_o,S_o,Gh,tie,R_o,P_o,xN,B_o,I_o,N_o,Oh,aie,q_o,j_o,$N,D_o,G_o,O_o,Vh,nie,V_o,X_o,kN,z_o,Q_o,W_o,Xh,sie,H_o,U_o,SN,J_o,Y_o,K_o,zh,lie,Z_o,euo,RN,ouo,ruo,tuo,Qh,iie,auo,nuo,PN,suo,luo,iuo,Wh,die,duo,cuo,BN,fuo,muo,guo,Hh,cie,huo,puo,IN,_uo,uuo,buo,Uh,fie,vuo,Fuo,NN,Tuo,Muo,Euo,Jh,mie,Cuo,wuo,qN,Auo,Luo,yuo,Yh,gie,xuo,$uo,jN,kuo,Suo,Ruo,Kh,hie,Puo,Buo,DN,Iuo,Nuo,quo,Zh,pie,juo,Duo,GN,Guo,Ouo,Vuo,ep,_ie,Xuo,zuo,ON,Quo,Wuo,Huo,op,uie,Uuo,Juo,VN,Yuo,Kuo,Zuo,rp,bie,e1o,o1o,XN,r1o,t1o,a1o,tp,vie,n1o,s1o,zN,l1o,i1o,d1o,ap,Fie,c1o,f1o,QN,m1o,g1o,h1o,np,Tie,p1o,_1o,WN,u1o,b1o,v1o,sp,F1o,lp,T1o,ip,ey,M1o,Mie,E1o,TOe,Pi,dp,Eie,oy,C1o,Cie,w1o,MOe,yo,ry,A1o,ty,L1o,HN,y1o,x1o,$1o,ay,k1o,wie,S1o,R1o,P1o,Ue,ny,B1o,Aie,I1o,N1o,Bi,q1o,Lie,j1o,D1o,yie,G1o,O1o,V1o,he,cp,xie,X1o,z1o,UN,Q1o,W1o,H1o,fp,$ie,U1o,J1o,kie,Y1o,K1o,Z1o,mp,Sie,e2o,o2o,JN,r2o,t2o,a2o,gp,Rie,n2o,s2o,YN,l2o,i2o,d2o,hp,Pie,c2o,f2o,KN,m2o,g2o,h2o,pp,Bie,p2o,_2o,ZN,u2o,b2o,v2o,_p,Iie,F2o,T2o,eq,M2o,E2o,C2o,up,Nie,w2o,A2o,oq,L2o,y2o,x2o,bp,qie,$2o,k2o,rq,S2o,R2o,P2o,vp,jie,B2o,I2o,tq,N2o,q2o,j2o,Fp,Die,D2o,G2o,aq,O2o,V2o,X2o,Tp,Gie,z2o,Q2o,nq,W2o,H2o,U2o,Mp,Oie,J2o,Y2o,sq,K2o,Z2o,ebo,Ep,Vie,obo,rbo,lq,tbo,abo,nbo,Cp,Xie,sbo,lbo,iq,ibo,dbo,cbo,wp,zie,fbo,mbo,dq,gbo,hbo,pbo,Ap,Qie,_bo,ubo,cq,bbo,vbo,Fbo,Lp,Tbo,yp,Mbo,xp,sy,Ebo,Wie,Cbo,EOe,Ii,$p,Hie,ly,wbo,Uie,Abo,COe,xo,iy,Lbo,Ni,ybo,fq,xbo,$bo,mq,kbo,Sbo,Rbo,dy,Pbo,Jie,Bbo,Ibo,Nbo,nt,cy,qbo,Yie,jbo,Dbo,qi,Gbo,Kie,Obo,Vbo,gq,Xbo,zbo,Qbo,kp,Wbo,Je,fy,Hbo,Zie,Ubo,Jbo,Ra,Ybo,ede,Kbo,Zbo,ode,e4o,o4o,rde,r4o,t4o,a4o,y,Sp,tde,n4o,s4o,hq,l4o,i4o,d4o,Rp,ade,c4o,f4o,pq,m4o,g4o,h4o,Pp,nde,p4o,_4o,_q,u4o,b4o,v4o,Bp,sde,F4o,T4o,uq,M4o,E4o,C4o,Ip,lde,w4o,A4o,bq,L4o,y4o,x4o,Np,ide,$4o,k4o,vq,S4o,R4o,P4o,qp,dde,B4o,I4o,Fq,N4o,q4o,j4o,jp,cde,D4o,G4o,Tq,O4o,V4o,X4o,Dp,fde,z4o,Q4o,Mq,W4o,H4o,U4o,Gp,mde,J4o,Y4o,Eq,K4o,Z4o,e5o,Op,gde,o5o,r5o,Cq,t5o,a5o,n5o,Vp,hde,s5o,l5o,wq,i5o,d5o,c5o,Xp,pde,f5o,m5o,Aq,g5o,h5o,p5o,zp,_de,_5o,u5o,Lq,b5o,v5o,F5o,Qp,ude,T5o,M5o,yq,E5o,C5o,w5o,Wp,bde,A5o,L5o,xq,y5o,x5o,$5o,Hp,vde,k5o,S5o,$q,R5o,P5o,B5o,Up,Fde,I5o,N5o,kq,q5o,j5o,D5o,Jp,Tde,G5o,O5o,Sq,V5o,X5o,z5o,Yp,Mde,Q5o,W5o,Rq,H5o,U5o,J5o,Kp,Ede,Y5o,K5o,Pq,Z5o,e3o,o3o,Zp,Cde,r3o,t3o,Bq,a3o,n3o,s3o,e_,wde,l3o,i3o,Iq,d3o,c3o,f3o,o_,Ade,m3o,g3o,Nq,h3o,p3o,_3o,r_,Lde,u3o,b3o,qq,v3o,F3o,T3o,t_,yde,M3o,E3o,jq,C3o,w3o,A3o,a_,xde,L3o,y3o,Dq,x3o,$3o,k3o,n_,$de,S3o,R3o,Gq,P3o,B3o,I3o,s_,kde,N3o,q3o,Oq,j3o,D3o,G3o,l_,Sde,O3o,V3o,Vq,X3o,z3o,Q3o,i_,Rde,W3o,H3o,Xq,U3o,J3o,Y3o,d_,Pde,K3o,Z3o,zq,evo,ovo,rvo,c_,Bde,tvo,avo,Qq,nvo,svo,lvo,f_,Ide,ivo,dvo,Wq,cvo,fvo,mvo,Xs,Nde,gvo,hvo,Hq,pvo,_vo,Uq,uvo,bvo,vvo,m_,qde,Fvo,Tvo,Jq,Mvo,Evo,Cvo,g_,jde,wvo,Avo,Yq,Lvo,yvo,xvo,h_,Dde,$vo,kvo,Kq,Svo,Rvo,Pvo,p_,Gde,Bvo,Ivo,Zq,Nvo,qvo,jvo,__,Ode,Dvo,Gvo,ej,Ovo,Vvo,Xvo,u_,Vde,zvo,Qvo,oj,Wvo,Hvo,Uvo,b_,Xde,Jvo,Yvo,rj,Kvo,Zvo,eFo,v_,zde,oFo,rFo,tj,tFo,aFo,nFo,F_,Qde,sFo,lFo,aj,iFo,dFo,cFo,T_,Wde,fFo,mFo,nj,gFo,hFo,pFo,M_,Hde,_Fo,uFo,sj,bFo,vFo,FFo,E_,Ude,TFo,MFo,lj,EFo,CFo,wFo,C_,Jde,AFo,LFo,ij,yFo,xFo,$Fo,w_,Yde,kFo,SFo,dj,RFo,PFo,BFo,A_,Kde,IFo,NFo,cj,qFo,jFo,DFo,L_,Zde,GFo,OFo,fj,VFo,XFo,zFo,y_,ece,QFo,WFo,mj,HFo,UFo,JFo,x_,oce,YFo,KFo,gj,ZFo,e6o,o6o,$_,rce,r6o,t6o,hj,a6o,n6o,s6o,k_,tce,l6o,i6o,pj,d6o,c6o,f6o,S_,ace,m6o,g6o,_j,h6o,p6o,_6o,R_,nce,u6o,b6o,uj,v6o,F6o,T6o,P_,sce,M6o,E6o,bj,C6o,w6o,A6o,B_,lce,L6o,y6o,vj,x6o,$6o,k6o,I_,ice,S6o,R6o,Fj,P6o,B6o,I6o,N_,dce,N6o,q6o,Tj,j6o,D6o,G6o,q_,cce,O6o,V6o,Mj,X6o,z6o,Q6o,j_,fce,W6o,H6o,Ej,U6o,J6o,Y6o,D_,mce,K6o,Z6o,Cj,eTo,oTo,rTo,G_,gce,tTo,aTo,wj,nTo,sTo,lTo,O_,hce,iTo,dTo,Aj,cTo,fTo,mTo,V_,pce,gTo,hTo,Lj,pTo,_To,uTo,X_,_ce,bTo,vTo,yj,FTo,TTo,MTo,z_,uce,ETo,CTo,xj,wTo,ATo,LTo,Q_,bce,yTo,xTo,$j,$To,kTo,STo,W_,vce,RTo,PTo,kj,BTo,ITo,NTo,H_,Fce,qTo,jTo,Sj,DTo,GTo,OTo,U_,Tce,VTo,XTo,Rj,zTo,QTo,WTo,J_,Mce,HTo,UTo,Pj,JTo,YTo,KTo,Y_,Ece,ZTo,eMo,Bj,oMo,rMo,tMo,K_,Cce,aMo,nMo,Ij,sMo,lMo,iMo,Z_,wce,dMo,cMo,Nj,fMo,mMo,gMo,eu,Ace,hMo,pMo,qj,_Mo,uMo,bMo,ou,Lce,vMo,FMo,jj,TMo,MMo,EMo,ru,yce,CMo,wMo,Dj,AMo,LMo,yMo,tu,xce,xMo,$Mo,Gj,kMo,SMo,RMo,au,$ce,PMo,BMo,Oj,IMo,NMo,qMo,nu,kce,jMo,DMo,Vj,GMo,OMo,VMo,su,Sce,XMo,zMo,Xj,QMo,WMo,HMo,lu,Rce,UMo,JMo,zj,YMo,KMo,ZMo,iu,Pce,eEo,oEo,Qj,rEo,tEo,aEo,du,Bce,nEo,sEo,Wj,lEo,iEo,dEo,cu,Ice,cEo,fEo,Hj,mEo,gEo,hEo,fu,Nce,pEo,_Eo,Uj,uEo,bEo,vEo,mu,qce,FEo,TEo,Jj,MEo,EEo,CEo,gu,jce,wEo,AEo,Yj,LEo,yEo,xEo,hu,Dce,$Eo,kEo,Kj,SEo,REo,PEo,pu,Gce,BEo,IEo,Zj,NEo,qEo,jEo,_u,Oce,DEo,GEo,eD,OEo,VEo,XEo,uu,Vce,zEo,QEo,oD,WEo,HEo,UEo,bu,Xce,JEo,YEo,rD,KEo,ZEo,eCo,vu,zce,oCo,rCo,tD,tCo,aCo,nCo,Fu,Qce,sCo,lCo,aD,iCo,dCo,cCo,Tu,Wce,fCo,mCo,nD,gCo,hCo,pCo,Mu,Hce,_Co,uCo,sD,bCo,vCo,FCo,Eu,Uce,TCo,MCo,lD,ECo,CCo,wCo,Cu,Jce,ACo,LCo,iD,yCo,xCo,$Co,wu,Yce,kCo,SCo,dD,RCo,PCo,BCo,Au,Kce,ICo,NCo,cD,qCo,jCo,DCo,Lu,Zce,GCo,OCo,fD,VCo,XCo,zCo,yu,efe,QCo,WCo,mD,HCo,UCo,JCo,xu,ofe,YCo,KCo,gD,ZCo,e0o,o0o,$u,rfe,r0o,t0o,hD,a0o,n0o,s0o,ku,l0o,tfe,i0o,d0o,afe,c0o,f0o,Su,wOe,ji,Ru,nfe,my,m0o,sfe,g0o,AOe,$o,gy,h0o,Di,p0o,pD,_0o,u0o,_D,b0o,v0o,F0o,hy,T0o,lfe,M0o,E0o,C0o,st,py,w0o,ife,A0o,L0o,Gi,y0o,dfe,x0o,$0o,uD,k0o,S0o,R0o,Pu,P0o,Ye,_y,B0o,cfe,I0o,N0o,Pa,q0o,ffe,j0o,D0o,mfe,G0o,O0o,gfe,V0o,X0o,z0o,G,Bu,hfe,Q0o,W0o,bD,H0o,U0o,J0o,Iu,pfe,Y0o,K0o,vD,Z0o,ewo,owo,Nu,_fe,rwo,two,FD,awo,nwo,swo,qu,ufe,lwo,iwo,TD,dwo,cwo,fwo,ju,bfe,mwo,gwo,MD,hwo,pwo,_wo,Du,vfe,uwo,bwo,ED,vwo,Fwo,Two,Gu,Ffe,Mwo,Ewo,CD,Cwo,wwo,Awo,Ou,Tfe,Lwo,ywo,wD,xwo,$wo,kwo,Vu,Mfe,Swo,Rwo,AD,Pwo,Bwo,Iwo,Xu,Efe,Nwo,qwo,LD,jwo,Dwo,Gwo,zu,Cfe,Owo,Vwo,yD,Xwo,zwo,Qwo,Qu,wfe,Wwo,Hwo,xD,Uwo,Jwo,Ywo,Wu,Afe,Kwo,Zwo,$D,eAo,oAo,rAo,Hu,Lfe,tAo,aAo,kD,nAo,sAo,lAo,Uu,yfe,iAo,dAo,SD,cAo,fAo,mAo,Ju,xfe,gAo,hAo,RD,pAo,_Ao,uAo,Yu,$fe,bAo,vAo,PD,FAo,TAo,MAo,Ku,kfe,EAo,CAo,BD,wAo,AAo,LAo,Zu,Sfe,yAo,xAo,ID,$Ao,kAo,SAo,e1,Rfe,RAo,PAo,ND,BAo,IAo,NAo,o1,Pfe,qAo,jAo,qD,DAo,GAo,OAo,r1,Bfe,VAo,XAo,jD,zAo,QAo,WAo,t1,Ife,HAo,UAo,DD,JAo,YAo,KAo,a1,Nfe,ZAo,eLo,GD,oLo,rLo,tLo,n1,qfe,aLo,nLo,OD,sLo,lLo,iLo,s1,jfe,dLo,cLo,VD,fLo,mLo,gLo,l1,Dfe,hLo,pLo,XD,_Lo,uLo,bLo,i1,Gfe,vLo,FLo,zD,TLo,MLo,ELo,d1,Ofe,CLo,wLo,QD,ALo,LLo,yLo,c1,Vfe,xLo,$Lo,WD,kLo,SLo,RLo,f1,Xfe,PLo,BLo,HD,ILo,NLo,qLo,m1,zfe,jLo,DLo,UD,GLo,OLo,VLo,g1,Qfe,XLo,zLo,JD,QLo,WLo,HLo,h1,Wfe,ULo,JLo,YD,YLo,KLo,ZLo,p1,Hfe,e7o,o7o,KD,r7o,t7o,a7o,_1,Ufe,n7o,s7o,ZD,l7o,i7o,d7o,u1,Jfe,c7o,f7o,eG,m7o,g7o,h7o,b1,Yfe,p7o,_7o,oG,u7o,b7o,v7o,v1,Kfe,F7o,T7o,rG,M7o,E7o,C7o,F1,Zfe,w7o,A7o,tG,L7o,y7o,x7o,T1,eme,$7o,k7o,aG,S7o,R7o,P7o,M1,ome,B7o,I7o,nG,N7o,q7o,j7o,E1,rme,D7o,G7o,sG,O7o,V7o,X7o,C1,tme,z7o,Q7o,lG,W7o,H7o,U7o,w1,J7o,ame,Y7o,K7o,nme,Z7o,eyo,A1,LOe,Oi,L1,sme,uy,oyo,lme,ryo,yOe,ko,by,tyo,Vi,ayo,iG,nyo,syo,dG,lyo,iyo,dyo,vy,cyo,ime,fyo,myo,gyo,lt,Fy,hyo,dme,pyo,_yo,Xi,uyo,cme,byo,vyo,cG,Fyo,Tyo,Myo,y1,Eyo,Ke,Ty,Cyo,fme,wyo,Ayo,Ba,Lyo,mme,yyo,xyo,gme,$yo,kyo,hme,Syo,Ryo,Pyo,z,x1,pme,Byo,Iyo,fG,Nyo,qyo,jyo,$1,_me,Dyo,Gyo,mG,Oyo,Vyo,Xyo,k1,ume,zyo,Qyo,gG,Wyo,Hyo,Uyo,S1,bme,Jyo,Yyo,hG,Kyo,Zyo,e8o,R1,vme,o8o,r8o,pG,t8o,a8o,n8o,P1,Fme,s8o,l8o,_G,i8o,d8o,c8o,B1,Tme,f8o,m8o,uG,g8o,h8o,p8o,I1,Mme,_8o,u8o,bG,b8o,v8o,F8o,N1,Eme,T8o,M8o,vG,E8o,C8o,w8o,q1,Cme,A8o,L8o,FG,y8o,x8o,$8o,j1,wme,k8o,S8o,TG,R8o,P8o,B8o,D1,Ame,I8o,N8o,MG,q8o,j8o,D8o,G1,Lme,G8o,O8o,EG,V8o,X8o,z8o,O1,yme,Q8o,W8o,CG,H8o,U8o,J8o,V1,xme,Y8o,K8o,wG,Z8o,e9o,o9o,X1,$me,r9o,t9o,AG,a9o,n9o,s9o,z1,kme,l9o,i9o,LG,d9o,c9o,f9o,Q1,Sme,m9o,g9o,yG,h9o,p9o,_9o,W1,Rme,u9o,b9o,xG,v9o,F9o,T9o,H1,Pme,M9o,E9o,$G,C9o,w9o,A9o,U1,Bme,L9o,y9o,kG,x9o,$9o,k9o,J1,Ime,S9o,R9o,SG,P9o,B9o,I9o,Y1,Nme,N9o,q9o,RG,j9o,D9o,G9o,K1,qme,O9o,V9o,PG,X9o,z9o,Q9o,Z1,jme,W9o,H9o,BG,U9o,J9o,Y9o,e2,Dme,K9o,Z9o,IG,exo,oxo,rxo,o2,Gme,txo,axo,NG,nxo,sxo,lxo,r2,Ome,ixo,dxo,qG,cxo,fxo,mxo,t2,Vme,gxo,hxo,jG,pxo,_xo,uxo,a2,Xme,bxo,vxo,DG,Fxo,Txo,Mxo,n2,zme,Exo,Cxo,GG,wxo,Axo,Lxo,s2,Qme,yxo,xxo,OG,$xo,kxo,Sxo,l2,Wme,Rxo,Pxo,VG,Bxo,Ixo,Nxo,i2,Hme,qxo,jxo,XG,Dxo,Gxo,Oxo,d2,Ume,Vxo,Xxo,zG,zxo,Qxo,Wxo,c2,Jme,Hxo,Uxo,QG,Jxo,Yxo,Kxo,f2,Yme,Zxo,e$o,WG,o$o,r$o,t$o,m2,Kme,a$o,n$o,HG,s$o,l$o,i$o,g2,Zme,d$o,c$o,UG,f$o,m$o,g$o,h2,h$o,ege,p$o,_$o,oge,u$o,b$o,p2,xOe,zi,_2,rge,My,v$o,tge,F$o,$Oe,So,Ey,T$o,Qi,M$o,JG,E$o,C$o,YG,w$o,A$o,L$o,Cy,y$o,age,x$o,$$o,k$o,it,wy,S$o,nge,R$o,P$o,Wi,B$o,sge,I$o,N$o,KG,q$o,j$o,D$o,u2,G$o,Ze,Ay,O$o,lge,V$o,X$o,Ia,z$o,ige,Q$o,W$o,dge,H$o,U$o,cge,J$o,Y$o,K$o,W,b2,fge,Z$o,eko,ZG,oko,rko,tko,v2,mge,ako,nko,eO,sko,lko,iko,F2,gge,dko,cko,oO,fko,mko,gko,T2,hge,hko,pko,rO,_ko,uko,bko,M2,pge,vko,Fko,tO,Tko,Mko,Eko,E2,_ge,Cko,wko,aO,Ako,Lko,yko,C2,uge,xko,$ko,nO,kko,Sko,Rko,w2,bge,Pko,Bko,sO,Iko,Nko,qko,A2,vge,jko,Dko,lO,Gko,Oko,Vko,L2,Fge,Xko,zko,iO,Qko,Wko,Hko,y2,Tge,Uko,Jko,dO,Yko,Kko,Zko,x2,Mge,eSo,oSo,cO,rSo,tSo,aSo,$2,Ege,nSo,sSo,fO,lSo,iSo,dSo,k2,Cge,cSo,fSo,mO,mSo,gSo,hSo,S2,wge,pSo,_So,gO,uSo,bSo,vSo,R2,Age,FSo,TSo,hO,MSo,ESo,CSo,P2,Lge,wSo,ASo,pO,LSo,ySo,xSo,B2,yge,$So,kSo,_O,SSo,RSo,PSo,I2,xge,BSo,ISo,uO,NSo,qSo,jSo,N2,$ge,DSo,GSo,bO,OSo,VSo,XSo,q2,kge,zSo,QSo,vO,WSo,HSo,USo,j2,Sge,JSo,YSo,FO,KSo,ZSo,eRo,D2,Rge,oRo,rRo,TO,tRo,aRo,nRo,G2,Pge,sRo,lRo,MO,iRo,dRo,cRo,O2,Bge,fRo,mRo,EO,gRo,hRo,pRo,V2,Ige,_Ro,uRo,CO,bRo,vRo,FRo,X2,Nge,TRo,MRo,wO,ERo,CRo,wRo,z2,qge,ARo,LRo,AO,yRo,xRo,$Ro,Q2,jge,kRo,SRo,LO,RRo,PRo,BRo,W2,Dge,IRo,NRo,yO,qRo,jRo,DRo,H2,Gge,GRo,ORo,xO,VRo,XRo,zRo,U2,Oge,QRo,WRo,$O,HRo,URo,JRo,J2,Vge,YRo,KRo,Xge,ZRo,ePo,oPo,Y2,zge,rPo,tPo,kO,aPo,nPo,sPo,K2,Qge,lPo,iPo,SO,dPo,cPo,fPo,Z2,Wge,mPo,gPo,RO,hPo,pPo,_Po,eb,Hge,uPo,bPo,PO,vPo,FPo,TPo,ob,MPo,Uge,EPo,CPo,Jge,wPo,APo,rb,kOe,Hi,tb,Yge,Ly,LPo,Kge,yPo,SOe,Ro,yy,xPo,Ui,$Po,BO,kPo,SPo,IO,RPo,PPo,BPo,xy,IPo,Zge,NPo,qPo,jPo,dt,$y,DPo,ehe,GPo,OPo,Ji,VPo,ohe,XPo,zPo,NO,QPo,WPo,HPo,ab,UPo,eo,ky,JPo,rhe,YPo,KPo,Na,ZPo,the,eBo,oBo,ahe,rBo,tBo,nhe,aBo,nBo,sBo,pe,nb,she,lBo,iBo,qO,dBo,cBo,fBo,sb,lhe,mBo,gBo,jO,hBo,pBo,_Bo,lb,ihe,uBo,bBo,DO,vBo,FBo,TBo,ib,dhe,MBo,EBo,GO,CBo,wBo,ABo,db,che,LBo,yBo,OO,xBo,$Bo,kBo,cb,fhe,SBo,RBo,VO,PBo,BBo,IBo,fb,mhe,NBo,qBo,XO,jBo,DBo,GBo,mb,ghe,OBo,VBo,zO,XBo,zBo,QBo,gb,hhe,WBo,HBo,QO,UBo,JBo,YBo,hb,phe,KBo,ZBo,WO,eIo,oIo,rIo,pb,_he,tIo,aIo,HO,nIo,sIo,lIo,_b,uhe,iIo,dIo,UO,cIo,fIo,mIo,ub,bhe,gIo,hIo,JO,pIo,_Io,uIo,bb,vhe,bIo,vIo,YO,FIo,TIo,MIo,vb,Fhe,EIo,CIo,KO,wIo,AIo,LIo,Fb,The,yIo,xIo,ZO,$Io,kIo,SIo,Tb,Mhe,RIo,PIo,eV,BIo,IIo,NIo,Mb,qIo,Ehe,jIo,DIo,Che,GIo,OIo,Eb,ROe,Yi,Cb,whe,Sy,VIo,Ahe,XIo,POe,Po,Ry,zIo,Ki,QIo,oV,WIo,HIo,rV,UIo,JIo,YIo,Py,KIo,Lhe,ZIo,eNo,oNo,ct,By,rNo,yhe,tNo,aNo,Zi,nNo,xhe,sNo,lNo,tV,iNo,dNo,cNo,wb,fNo,oo,Iy,mNo,$he,gNo,hNo,qa,pNo,khe,_No,uNo,She,bNo,vNo,Rhe,FNo,TNo,MNo,N,Ab,Phe,ENo,CNo,aV,wNo,ANo,LNo,Lb,Bhe,yNo,xNo,nV,$No,kNo,SNo,yb,Ihe,RNo,PNo,sV,BNo,INo,NNo,xb,Nhe,qNo,jNo,lV,DNo,GNo,ONo,$b,qhe,VNo,XNo,iV,zNo,QNo,WNo,kb,jhe,HNo,UNo,dV,JNo,YNo,KNo,Sb,Dhe,ZNo,eqo,cV,oqo,rqo,tqo,Rb,Ghe,aqo,nqo,fV,sqo,lqo,iqo,Pb,Ohe,dqo,cqo,mV,fqo,mqo,gqo,Bb,Vhe,hqo,pqo,gV,_qo,uqo,bqo,Ib,Xhe,vqo,Fqo,hV,Tqo,Mqo,Eqo,Nb,zhe,Cqo,wqo,pV,Aqo,Lqo,yqo,qb,Qhe,xqo,$qo,_V,kqo,Sqo,Rqo,jb,Whe,Pqo,Bqo,uV,Iqo,Nqo,qqo,Db,Hhe,jqo,Dqo,bV,Gqo,Oqo,Vqo,Gb,Uhe,Xqo,zqo,vV,Qqo,Wqo,Hqo,Ob,Jhe,Uqo,Jqo,FV,Yqo,Kqo,Zqo,Vb,Yhe,ejo,ojo,TV,rjo,tjo,ajo,Xb,Khe,njo,sjo,MV,ljo,ijo,djo,zb,Zhe,cjo,fjo,EV,mjo,gjo,hjo,Qb,epe,pjo,_jo,CV,ujo,bjo,vjo,Wb,ope,Fjo,Tjo,wV,Mjo,Ejo,Cjo,Hb,rpe,wjo,Ajo,AV,Ljo,yjo,xjo,Ub,tpe,$jo,kjo,LV,Sjo,Rjo,Pjo,Jb,ape,Bjo,Ijo,yV,Njo,qjo,jjo,Yb,npe,Djo,Gjo,xV,Ojo,Vjo,Xjo,Kb,spe,zjo,Qjo,$V,Wjo,Hjo,Ujo,Zb,lpe,Jjo,Yjo,kV,Kjo,Zjo,eDo,e4,ipe,oDo,rDo,SV,tDo,aDo,nDo,o4,dpe,sDo,lDo,RV,iDo,dDo,cDo,r4,cpe,fDo,mDo,PV,gDo,hDo,pDo,t4,fpe,_Do,uDo,BV,bDo,vDo,FDo,a4,mpe,TDo,MDo,IV,EDo,CDo,wDo,n4,gpe,ADo,LDo,NV,yDo,xDo,$Do,s4,hpe,kDo,SDo,qV,RDo,PDo,BDo,l4,ppe,IDo,NDo,jV,qDo,jDo,DDo,i4,_pe,GDo,ODo,DV,VDo,XDo,zDo,d4,upe,QDo,WDo,GV,HDo,UDo,JDo,c4,bpe,YDo,KDo,OV,ZDo,eGo,oGo,f4,vpe,rGo,tGo,VV,aGo,nGo,sGo,m4,Fpe,lGo,iGo,XV,dGo,cGo,fGo,g4,Tpe,mGo,gGo,zV,hGo,pGo,_Go,h4,Mpe,uGo,bGo,QV,vGo,FGo,TGo,p4,Epe,MGo,EGo,WV,CGo,wGo,AGo,_4,Cpe,LGo,yGo,HV,xGo,$Go,kGo,u4,wpe,SGo,RGo,UV,PGo,BGo,IGo,b4,Ape,NGo,qGo,JV,jGo,DGo,GGo,v4,Lpe,OGo,VGo,YV,XGo,zGo,QGo,F4,ype,WGo,HGo,KV,UGo,JGo,YGo,T4,KGo,xpe,ZGo,eOo,$pe,oOo,rOo,M4,BOe,ed,E4,kpe,Ny,tOo,Spe,aOo,IOe,Bo,qy,nOo,od,sOo,ZV,lOo,iOo,eX,dOo,cOo,fOo,jy,mOo,Rpe,gOo,hOo,pOo,ft,Dy,_Oo,Ppe,uOo,bOo,rd,vOo,Bpe,FOo,TOo,oX,MOo,EOo,COo,C4,wOo,ro,Gy,AOo,Ipe,LOo,yOo,ja,xOo,Npe,$Oo,kOo,qpe,SOo,ROo,jpe,POo,BOo,IOo,Z,w4,Dpe,NOo,qOo,rX,jOo,DOo,GOo,A4,Gpe,OOo,VOo,tX,XOo,zOo,QOo,L4,Ope,WOo,HOo,aX,UOo,JOo,YOo,y4,Vpe,KOo,ZOo,nX,eVo,oVo,rVo,x4,Xpe,tVo,aVo,sX,nVo,sVo,lVo,$4,zpe,iVo,dVo,lX,cVo,fVo,mVo,k4,Qpe,gVo,hVo,iX,pVo,_Vo,uVo,S4,Wpe,bVo,vVo,dX,FVo,TVo,MVo,R4,Hpe,EVo,CVo,cX,wVo,AVo,LVo,P4,Upe,yVo,xVo,fX,$Vo,kVo,SVo,B4,Jpe,RVo,PVo,mX,BVo,IVo,NVo,I4,Ype,qVo,jVo,gX,DVo,GVo,OVo,N4,Kpe,VVo,XVo,hX,zVo,QVo,WVo,q4,Zpe,HVo,UVo,pX,JVo,YVo,KVo,j4,e_e,ZVo,eXo,_X,oXo,rXo,tXo,D4,o_e,aXo,nXo,uX,sXo,lXo,iXo,G4,r_e,dXo,cXo,bX,fXo,mXo,gXo,O4,t_e,hXo,pXo,vX,_Xo,uXo,bXo,V4,a_e,vXo,FXo,FX,TXo,MXo,EXo,X4,n_e,CXo,wXo,TX,AXo,LXo,yXo,z4,s_e,xXo,$Xo,MX,kXo,SXo,RXo,Q4,l_e,PXo,BXo,EX,IXo,NXo,qXo,W4,i_e,jXo,DXo,CX,GXo,OXo,VXo,H4,d_e,XXo,zXo,wX,QXo,WXo,HXo,U4,c_e,UXo,JXo,AX,YXo,KXo,ZXo,J4,f_e,ezo,ozo,LX,rzo,tzo,azo,Y4,m_e,nzo,szo,yX,lzo,izo,dzo,K4,g_e,czo,fzo,xX,mzo,gzo,hzo,Z4,h_e,pzo,_zo,$X,uzo,bzo,vzo,e5,p_e,Fzo,Tzo,kX,Mzo,Ezo,Czo,o5,wzo,__e,Azo,Lzo,u_e,yzo,xzo,r5,NOe,td,t5,b_e,Oy,$zo,v_e,kzo,qOe,Io,Vy,Szo,ad,Rzo,SX,Pzo,Bzo,RX,Izo,Nzo,qzo,Xy,jzo,F_e,Dzo,Gzo,Ozo,mt,zy,Vzo,T_e,Xzo,zzo,nd,Qzo,M_e,Wzo,Hzo,PX,Uzo,Jzo,Yzo,a5,Kzo,to,Qy,Zzo,E_e,eQo,oQo,Da,rQo,C_e,tQo,aQo,w_e,nQo,sQo,A_e,lQo,iQo,dQo,No,n5,L_e,cQo,fQo,BX,mQo,gQo,hQo,s5,y_e,pQo,_Qo,IX,uQo,bQo,vQo,l5,x_e,FQo,TQo,NX,MQo,EQo,CQo,i5,$_e,wQo,AQo,qX,LQo,yQo,xQo,d5,k_e,$Qo,kQo,jX,SQo,RQo,PQo,c5,S_e,BQo,IQo,DX,NQo,qQo,jQo,f5,DQo,R_e,GQo,OQo,P_e,VQo,XQo,m5,jOe,sd,g5,B_e,Wy,zQo,I_e,QQo,DOe,qo,Hy,WQo,ld,HQo,GX,UQo,JQo,OX,YQo,KQo,ZQo,Uy,eWo,N_e,oWo,rWo,tWo,gt,Jy,aWo,q_e,nWo,sWo,id,lWo,j_e,iWo,dWo,VX,cWo,fWo,mWo,h5,gWo,ao,Yy,hWo,D_e,pWo,_Wo,Ga,uWo,G_e,bWo,vWo,O_e,FWo,TWo,V_e,MWo,EWo,CWo,H,p5,X_e,wWo,AWo,XX,LWo,yWo,xWo,_5,z_e,$Wo,kWo,zX,SWo,RWo,PWo,u5,Q_e,BWo,IWo,QX,NWo,qWo,jWo,b5,W_e,DWo,GWo,WX,OWo,VWo,XWo,v5,H_e,zWo,QWo,HX,WWo,HWo,UWo,F5,U_e,JWo,YWo,UX,KWo,ZWo,eHo,T5,J_e,oHo,rHo,JX,tHo,aHo,nHo,M5,Y_e,sHo,lHo,YX,iHo,dHo,cHo,E5,K_e,fHo,mHo,KX,gHo,hHo,pHo,C5,Z_e,_Ho,uHo,ZX,bHo,vHo,FHo,w5,eue,THo,MHo,ez,EHo,CHo,wHo,A5,oue,AHo,LHo,oz,yHo,xHo,$Ho,L5,rue,kHo,SHo,rz,RHo,PHo,BHo,y5,tue,IHo,NHo,tz,qHo,jHo,DHo,x5,aue,GHo,OHo,az,VHo,XHo,zHo,$5,nue,QHo,WHo,nz,HHo,UHo,JHo,k5,sue,YHo,KHo,sz,ZHo,eUo,oUo,S5,lue,rUo,tUo,lz,aUo,nUo,sUo,R5,iue,lUo,iUo,iz,dUo,cUo,fUo,P5,due,mUo,gUo,dz,hUo,pUo,_Uo,B5,cue,uUo,bUo,cz,vUo,FUo,TUo,I5,fue,MUo,EUo,fz,CUo,wUo,AUo,N5,mue,LUo,yUo,mz,xUo,$Uo,kUo,q5,gue,SUo,RUo,gz,PUo,BUo,IUo,j5,hue,NUo,qUo,hz,jUo,DUo,GUo,D5,pue,OUo,VUo,pz,XUo,zUo,QUo,G5,_ue,WUo,HUo,_z,UUo,JUo,YUo,O5,uue,KUo,ZUo,uz,eJo,oJo,rJo,V5,bue,tJo,aJo,bz,nJo,sJo,lJo,X5,vue,iJo,dJo,vz,cJo,fJo,mJo,z5,Fue,gJo,hJo,Fz,pJo,_Jo,uJo,Q5,Tue,bJo,vJo,Tz,FJo,TJo,MJo,W5,Mue,EJo,CJo,Mz,wJo,AJo,LJo,H5,Eue,yJo,xJo,Ez,$Jo,kJo,SJo,U5,Cue,RJo,PJo,Cz,BJo,IJo,NJo,J5,wue,qJo,jJo,wz,DJo,GJo,OJo,Y5,VJo,Aue,XJo,zJo,Lue,QJo,WJo,K5,GOe,dd,Z5,yue,Ky,HJo,xue,UJo,OOe,jo,Zy,JJo,cd,YJo,Az,KJo,ZJo,Lz,eYo,oYo,rYo,e8,tYo,$ue,aYo,nYo,sYo,ht,o8,lYo,kue,iYo,dYo,fd,cYo,Sue,fYo,mYo,yz,gYo,hYo,pYo,e3,_Yo,no,r8,uYo,Rue,bYo,vYo,Oa,FYo,Pue,TYo,MYo,Bue,EYo,CYo,Iue,wYo,AYo,LYo,V,o3,Nue,yYo,xYo,xz,$Yo,kYo,SYo,r3,que,RYo,PYo,$z,BYo,IYo,NYo,t3,jue,qYo,jYo,kz,DYo,GYo,OYo,a3,Due,VYo,XYo,Sz,zYo,QYo,WYo,n3,Gue,HYo,UYo,Rz,JYo,YYo,KYo,s3,Oue,ZYo,eKo,Pz,oKo,rKo,tKo,l3,Vue,aKo,nKo,Bz,sKo,lKo,iKo,i3,Xue,dKo,cKo,Iz,fKo,mKo,gKo,d3,zue,hKo,pKo,Nz,_Ko,uKo,bKo,c3,Que,vKo,FKo,qz,TKo,MKo,EKo,f3,Wue,CKo,wKo,jz,AKo,LKo,yKo,m3,Hue,xKo,$Ko,Dz,kKo,SKo,RKo,g3,Uue,PKo,BKo,Gz,IKo,NKo,qKo,h3,Jue,jKo,DKo,Oz,GKo,OKo,VKo,p3,Yue,XKo,zKo,Vz,QKo,WKo,HKo,_3,Kue,UKo,JKo,Xz,YKo,KKo,ZKo,u3,Zue,eZo,oZo,zz,rZo,tZo,aZo,b3,e1e,nZo,sZo,Qz,lZo,iZo,dZo,v3,o1e,cZo,fZo,Wz,mZo,gZo,hZo,F3,r1e,pZo,_Zo,Hz,uZo,bZo,vZo,T3,t1e,FZo,TZo,Uz,MZo,EZo,CZo,M3,a1e,wZo,AZo,Jz,LZo,yZo,xZo,E3,n1e,$Zo,kZo,Yz,SZo,RZo,PZo,C3,s1e,BZo,IZo,Kz,NZo,qZo,jZo,w3,l1e,DZo,GZo,Zz,OZo,VZo,XZo,A3,i1e,zZo,QZo,eQ,WZo,HZo,UZo,L3,d1e,JZo,YZo,oQ,KZo,ZZo,eer,y3,c1e,oer,rer,rQ,ter,aer,ner,x3,f1e,ser,ler,tQ,ier,der,cer,$3,m1e,fer,mer,aQ,ger,her,per,k3,g1e,_er,uer,nQ,ber,ver,Fer,S3,h1e,Ter,Mer,sQ,Eer,Cer,wer,R3,p1e,Aer,Ler,lQ,yer,xer,$er,P3,_1e,ker,Ser,iQ,Rer,Per,Ber,B3,u1e,Ier,Ner,dQ,qer,jer,Der,I3,b1e,Ger,Oer,cQ,Ver,Xer,zer,N3,v1e,Qer,Wer,fQ,Her,Uer,Jer,q3,F1e,Yer,Ker,mQ,Zer,eor,oor,j3,T1e,ror,tor,gQ,aor,nor,sor,D3,M1e,lor,ior,hQ,dor,cor,mor,G3,E1e,gor,hor,pQ,por,_or,uor,O3,bor,C1e,vor,For,w1e,Tor,Mor,V3,VOe,md,X3,A1e,t8,Eor,L1e,Cor,XOe,Do,a8,wor,gd,Aor,_Q,Lor,yor,uQ,xor,$or,kor,n8,Sor,y1e,Ror,Por,Bor,pt,s8,Ior,x1e,Nor,qor,hd,jor,$1e,Dor,Gor,bQ,Oor,Vor,Xor,z3,zor,so,l8,Qor,k1e,Wor,Hor,Va,Uor,S1e,Jor,Yor,R1e,Kor,Zor,P1e,err,orr,rrr,B1e,Q3,I1e,trr,arr,vQ,nrr,srr,lrr,W3,irr,N1e,drr,crr,q1e,frr,mrr,H3,zOe,pd,U3,j1e,i8,grr,D1e,hrr,QOe,Go,d8,prr,_d,_rr,FQ,urr,brr,TQ,vrr,Frr,Trr,c8,Mrr,G1e,Err,Crr,wrr,_t,f8,Arr,O1e,Lrr,yrr,ud,xrr,V1e,$rr,krr,MQ,Srr,Rrr,Prr,J3,Brr,lo,m8,Irr,X1e,Nrr,qrr,Xa,jrr,z1e,Drr,Grr,Q1e,Orr,Vrr,W1e,Xrr,zrr,Qrr,Fe,Y3,H1e,Wrr,Hrr,EQ,Urr,Jrr,Yrr,K3,U1e,Krr,Zrr,CQ,etr,otr,rtr,Z3,J1e,ttr,atr,wQ,ntr,str,ltr,ev,Y1e,itr,dtr,AQ,ctr,ftr,mtr,zs,K1e,gtr,htr,LQ,ptr,_tr,yQ,utr,btr,vtr,ov,Z1e,Ftr,Ttr,xQ,Mtr,Etr,Ctr,Qs,e2e,wtr,Atr,$Q,Ltr,ytr,kQ,xtr,$tr,ktr,ut,o2e,Str,Rtr,SQ,Ptr,Btr,RQ,Itr,Ntr,PQ,qtr,jtr,Dtr,rv,r2e,Gtr,Otr,BQ,Vtr,Xtr,ztr,tv,t2e,Qtr,Wtr,IQ,Htr,Utr,Jtr,av,a2e,Ytr,Ktr,NQ,Ztr,ear,oar,nv,n2e,rar,tar,qQ,aar,nar,sar,sv,s2e,lar,iar,jQ,dar,car,far,lv,l2e,mar,gar,DQ,har,par,_ar,iv,i2e,uar,bar,GQ,Far,Tar,Mar,dv,Ear,d2e,Car,war,c2e,Aar,Lar,cv,WOe,bd,fv,f2e,g8,yar,m2e,xar,HOe,Oo,h8,$ar,vd,kar,OQ,Sar,Rar,VQ,Par,Bar,Iar,p8,Nar,g2e,qar,jar,Dar,bt,_8,Gar,h2e,Oar,Var,Fd,Xar,p2e,zar,Qar,XQ,War,Har,Uar,mv,Jar,io,u8,Yar,_2e,Kar,Zar,za,enr,u2e,onr,rnr,b2e,tnr,anr,v2e,nnr,snr,lnr,F2e,gv,T2e,inr,dnr,zQ,cnr,fnr,mnr,hv,gnr,M2e,hnr,pnr,E2e,_nr,unr,pv,UOe,Td,_v,C2e,b8,bnr,w2e,vnr,JOe,Vo,v8,Fnr,Md,Tnr,QQ,Mnr,Enr,WQ,Cnr,wnr,Anr,F8,Lnr,A2e,ynr,xnr,$nr,vt,T8,knr,L2e,Snr,Rnr,Ed,Pnr,y2e,Bnr,Inr,HQ,Nnr,qnr,jnr,uv,Dnr,co,M8,Gnr,x2e,Onr,Vnr,Qa,Xnr,$2e,znr,Qnr,k2e,Wnr,Hnr,S2e,Unr,Jnr,Ynr,R2e,bv,P2e,Knr,Znr,UQ,esr,osr,rsr,vv,tsr,B2e,asr,nsr,I2e,ssr,lsr,Fv,YOe,Cd,Tv,N2e,E8,isr,q2e,dsr,KOe,Xo,C8,csr,wd,fsr,JQ,msr,gsr,YQ,hsr,psr,_sr,w8,usr,j2e,bsr,vsr,Fsr,Ft,A8,Tsr,D2e,Msr,Esr,Ad,Csr,G2e,wsr,Asr,KQ,Lsr,ysr,xsr,Mv,$sr,fo,L8,ksr,O2e,Ssr,Rsr,Wa,Psr,V2e,Bsr,Isr,X2e,Nsr,qsr,z2e,jsr,Dsr,Gsr,Pe,Ev,Q2e,Osr,Vsr,ZQ,Xsr,zsr,Qsr,Cv,W2e,Wsr,Hsr,eW,Usr,Jsr,Ysr,wv,H2e,Ksr,Zsr,oW,elr,olr,rlr,Av,U2e,tlr,alr,rW,nlr,slr,llr,Lv,J2e,ilr,dlr,tW,clr,flr,mlr,yv,Y2e,glr,hlr,aW,plr,_lr,ulr,xv,K2e,blr,vlr,nW,Flr,Tlr,Mlr,$v,Z2e,Elr,Clr,sW,wlr,Alr,Llr,kv,ebe,ylr,xlr,lW,$lr,klr,Slr,Sv,Rlr,obe,Plr,Blr,rbe,Ilr,Nlr,Rv,ZOe,Ld,Pv,tbe,y8,qlr,abe,jlr,eVe,zo,x8,Dlr,yd,Glr,iW,Olr,Vlr,dW,Xlr,zlr,Qlr,$8,Wlr,nbe,Hlr,Ulr,Jlr,Tt,k8,Ylr,sbe,Klr,Zlr,xd,eir,lbe,oir,rir,cW,tir,air,nir,Bv,sir,mo,S8,lir,ibe,iir,dir,Ha,cir,dbe,fir,mir,cbe,gir,hir,fbe,pir,_ir,uir,et,Iv,mbe,bir,vir,fW,Fir,Tir,Mir,Nv,gbe,Eir,Cir,mW,wir,Air,Lir,qv,hbe,yir,xir,gW,$ir,kir,Sir,jv,pbe,Rir,Pir,hW,Bir,Iir,Nir,Dv,_be,qir,jir,pW,Dir,Gir,Oir,Gv,Vir,ube,Xir,zir,bbe,Qir,Wir,Ov,oVe,$d,Vv,vbe,R8,Hir,Fbe,Uir,rVe,Qo,P8,Jir,kd,Yir,_W,Kir,Zir,uW,edr,odr,rdr,B8,tdr,Tbe,adr,ndr,sdr,Mt,I8,ldr,Mbe,idr,ddr,Sd,cdr,Ebe,fdr,mdr,bW,gdr,hdr,pdr,Xv,_dr,go,N8,udr,Cbe,bdr,vdr,Ua,Fdr,wbe,Tdr,Mdr,Abe,Edr,Cdr,Lbe,wdr,Adr,Ldr,Le,zv,ybe,ydr,xdr,vW,$dr,kdr,Sdr,Qv,xbe,Rdr,Pdr,FW,Bdr,Idr,Ndr,Wv,$be,qdr,jdr,TW,Ddr,Gdr,Odr,Hv,kbe,Vdr,Xdr,MW,zdr,Qdr,Wdr,Uv,Sbe,Hdr,Udr,EW,Jdr,Ydr,Kdr,Jv,Rbe,Zdr,ecr,CW,ocr,rcr,tcr,Yv,Pbe,acr,ncr,wW,scr,lcr,icr,Kv,Bbe,dcr,ccr,AW,fcr,mcr,gcr,Zv,Ibe,hcr,pcr,LW,_cr,ucr,bcr,eF,Nbe,vcr,Fcr,yW,Tcr,Mcr,Ecr,oF,Ccr,qbe,wcr,Acr,jbe,Lcr,ycr,rF,tVe,Rd,tF,Dbe,q8,xcr,Gbe,$cr,aVe,Wo,j8,kcr,Pd,Scr,xW,Rcr,Pcr,$W,Bcr,Icr,Ncr,D8,qcr,Obe,jcr,Dcr,Gcr,Et,G8,Ocr,Vbe,Vcr,Xcr,Bd,zcr,Xbe,Qcr,Wcr,kW,Hcr,Ucr,Jcr,aF,Ycr,ho,O8,Kcr,zbe,Zcr,efr,Ja,ofr,Qbe,rfr,tfr,Wbe,afr,nfr,Hbe,sfr,lfr,ifr,V8,nF,Ube,dfr,cfr,SW,ffr,mfr,gfr,sF,Jbe,hfr,pfr,RW,_fr,ufr,bfr,lF,vfr,Ybe,Ffr,Tfr,Kbe,Mfr,Efr,iF,nVe,Id,dF,Zbe,X8,Cfr,e4e,wfr,sVe,Ho,z8,Afr,Nd,Lfr,PW,yfr,xfr,BW,$fr,kfr,Sfr,Q8,Rfr,o4e,Pfr,Bfr,Ifr,Ct,W8,Nfr,r4e,qfr,jfr,qd,Dfr,t4e,Gfr,Ofr,IW,Vfr,Xfr,zfr,cF,Qfr,po,H8,Wfr,a4e,Hfr,Ufr,Ya,Jfr,n4e,Yfr,Kfr,s4e,Zfr,emr,l4e,omr,rmr,tmr,ot,fF,i4e,amr,nmr,NW,smr,lmr,imr,mF,d4e,dmr,cmr,qW,fmr,mmr,gmr,gF,c4e,hmr,pmr,jW,_mr,umr,bmr,hF,f4e,vmr,Fmr,DW,Tmr,Mmr,Emr,pF,m4e,Cmr,wmr,GW,Amr,Lmr,ymr,_F,xmr,g4e,$mr,kmr,h4e,Smr,Rmr,uF,lVe,jd,bF,p4e,U8,Pmr,_4e,Bmr,iVe,Uo,J8,Imr,Dd,Nmr,OW,qmr,jmr,VW,Dmr,Gmr,Omr,Y8,Vmr,u4e,Xmr,zmr,Qmr,wt,K8,Wmr,b4e,Hmr,Umr,Gd,Jmr,v4e,Ymr,Kmr,XW,Zmr,egr,ogr,vF,rgr,_o,Z8,tgr,F4e,agr,ngr,Ka,sgr,T4e,lgr,igr,M4e,dgr,cgr,E4e,fgr,mgr,ggr,Od,FF,C4e,hgr,pgr,zW,_gr,ugr,bgr,TF,w4e,vgr,Fgr,QW,Tgr,Mgr,Egr,MF,A4e,Cgr,wgr,WW,Agr,Lgr,ygr,EF,xgr,L4e,$gr,kgr,y4e,Sgr,Rgr,CF,dVe,Vd,wF,x4e,e9,Pgr,$4e,Bgr,cVe,Jo,o9,Igr,Xd,Ngr,HW,qgr,jgr,UW,Dgr,Ggr,Ogr,r9,Vgr,k4e,Xgr,zgr,Qgr,At,t9,Wgr,S4e,Hgr,Ugr,zd,Jgr,R4e,Ygr,Kgr,JW,Zgr,ehr,ohr,AF,rhr,uo,a9,thr,P4e,ahr,nhr,Za,shr,B4e,lhr,ihr,I4e,dhr,chr,N4e,fhr,mhr,ghr,n9,LF,q4e,hhr,phr,YW,_hr,uhr,bhr,yF,j4e,vhr,Fhr,KW,Thr,Mhr,Ehr,xF,Chr,D4e,whr,Ahr,G4e,Lhr,yhr,$F,fVe,Qd,kF,O4e,s9,xhr,V4e,$hr,mVe,Yo,l9,khr,Wd,Shr,ZW,Rhr,Phr,eH,Bhr,Ihr,Nhr,i9,qhr,X4e,jhr,Dhr,Ghr,Lt,d9,Ohr,z4e,Vhr,Xhr,Hd,zhr,Q4e,Qhr,Whr,oH,Hhr,Uhr,Jhr,SF,Yhr,bo,c9,Khr,W4e,Zhr,epr,en,opr,H4e,rpr,tpr,U4e,apr,npr,J4e,spr,lpr,ipr,Y4e,RF,K4e,dpr,cpr,rH,fpr,mpr,gpr,PF,hpr,Z4e,ppr,_pr,e5e,upr,bpr,BF,gVe,Ud,IF,o5e,f9,vpr,r5e,Fpr,hVe,Ko,m9,Tpr,Jd,Mpr,tH,Epr,Cpr,aH,wpr,Apr,Lpr,g9,ypr,t5e,xpr,$pr,kpr,yt,h9,Spr,a5e,Rpr,Ppr,Yd,Bpr,n5e,Ipr,Npr,nH,qpr,jpr,Dpr,NF,Gpr,vo,p9,Opr,s5e,Vpr,Xpr,on,zpr,l5e,Qpr,Wpr,i5e,Hpr,Upr,d5e,Jpr,Ypr,Kpr,rn,qF,c5e,Zpr,e_r,sH,o_r,r_r,t_r,jF,f5e,a_r,n_r,lH,s_r,l_r,i_r,DF,m5e,d_r,c_r,iH,f_r,m_r,g_r,GF,g5e,h_r,p_r,dH,__r,u_r,b_r,OF,v_r,h5e,F_r,T_r,p5e,M_r,E_r,VF,pVe,Kd,XF,_5e,_9,C_r,u5e,w_r,_Ve,Zo,u9,A_r,Zd,L_r,cH,y_r,x_r,fH,$_r,k_r,S_r,b9,R_r,b5e,P_r,B_r,I_r,xt,v9,N_r,v5e,q_r,j_r,ec,D_r,F5e,G_r,O_r,mH,V_r,X_r,z_r,zF,Q_r,Fo,F9,W_r,T5e,H_r,U_r,tn,J_r,M5e,Y_r,K_r,E5e,Z_r,eur,C5e,our,rur,tur,w5e,QF,A5e,aur,nur,gH,sur,lur,iur,WF,dur,L5e,cur,fur,y5e,mur,gur,HF,uVe,oc,UF,x5e,T9,hur,$5e,pur,bVe,er,M9,_ur,rc,uur,hH,bur,vur,pH,Fur,Tur,Mur,E9,Eur,k5e,Cur,wur,Aur,$t,C9,Lur,S5e,yur,xur,tc,$ur,R5e,kur,Sur,_H,Rur,Pur,Bur,JF,Iur,yr,w9,Nur,P5e,qur,jur,an,Dur,B5e,Gur,Our,I5e,Vur,Xur,N5e,zur,Qur,Wur,q,YF,q5e,Hur,Uur,uH,Jur,Yur,Kur,KF,j5e,Zur,e1r,bH,o1r,r1r,t1r,ZF,D5e,a1r,n1r,vH,s1r,l1r,i1r,e6,G5e,d1r,c1r,FH,f1r,m1r,g1r,o6,O5e,h1r,p1r,TH,_1r,u1r,b1r,r6,V5e,v1r,F1r,MH,T1r,M1r,E1r,t6,X5e,C1r,w1r,EH,A1r,L1r,y1r,a6,z5e,x1r,$1r,CH,k1r,S1r,R1r,n6,Q5e,P1r,B1r,wH,I1r,N1r,q1r,s6,W5e,j1r,D1r,AH,G1r,O1r,V1r,l6,H5e,X1r,z1r,LH,Q1r,W1r,H1r,i6,U5e,U1r,J1r,yH,Y1r,K1r,Z1r,d6,J5e,e2r,o2r,xH,r2r,t2r,a2r,c6,Y5e,n2r,s2r,$H,l2r,i2r,d2r,f6,K5e,c2r,f2r,kH,m2r,g2r,h2r,m6,Z5e,p2r,_2r,SH,u2r,b2r,v2r,g6,e3e,F2r,T2r,RH,M2r,E2r,C2r,Ws,o3e,w2r,A2r,PH,L2r,y2r,BH,x2r,$2r,k2r,h6,r3e,S2r,R2r,IH,P2r,B2r,I2r,p6,t3e,N2r,q2r,NH,j2r,D2r,G2r,_6,a3e,O2r,V2r,qH,X2r,z2r,Q2r,u6,n3e,W2r,H2r,jH,U2r,J2r,Y2r,b6,s3e,K2r,Z2r,DH,ebr,obr,rbr,v6,l3e,tbr,abr,GH,nbr,sbr,lbr,F6,i3e,ibr,dbr,OH,cbr,fbr,mbr,T6,d3e,gbr,hbr,VH,pbr,_br,ubr,M6,c3e,bbr,vbr,XH,Fbr,Tbr,Mbr,E6,f3e,Ebr,Cbr,zH,wbr,Abr,Lbr,C6,m3e,ybr,xbr,QH,$br,kbr,Sbr,w6,g3e,Rbr,Pbr,WH,Bbr,Ibr,Nbr,A6,h3e,qbr,jbr,HH,Dbr,Gbr,Obr,L6,p3e,Vbr,Xbr,UH,zbr,Qbr,Wbr,y6,_3e,Hbr,Ubr,JH,Jbr,Ybr,Kbr,x6,u3e,Zbr,e4r,YH,o4r,r4r,t4r,$6,b3e,a4r,n4r,KH,s4r,l4r,i4r,k6,v3e,d4r,c4r,ZH,f4r,m4r,g4r,S6,F3e,h4r,p4r,eU,_4r,u4r,b4r,R6,T3e,v4r,F4r,oU,T4r,M4r,E4r,P6,M3e,C4r,w4r,rU,A4r,L4r,y4r,B6,E3e,x4r,$4r,tU,k4r,S4r,R4r,I6,C3e,P4r,B4r,aU,I4r,N4r,q4r,N6,w3e,j4r,D4r,nU,G4r,O4r,V4r,q6,A3e,X4r,z4r,sU,Q4r,W4r,H4r,j6,L3e,U4r,J4r,lU,Y4r,K4r,Z4r,D6,y3e,e5r,o5r,iU,r5r,t5r,a5r,G6,x3e,n5r,s5r,dU,l5r,i5r,d5r,O6,$3e,c5r,f5r,cU,m5r,g5r,h5r,V6,k3e,p5r,_5r,fU,u5r,b5r,v5r,X6,vVe,ac,z6,S3e,A9,F5r,R3e,T5r,FVe,or,L9,M5r,nc,E5r,mU,C5r,w5r,gU,A5r,L5r,y5r,y9,x5r,P3e,$5r,k5r,S5r,kt,x9,R5r,B3e,P5r,B5r,sc,I5r,I3e,N5r,q5r,hU,j5r,D5r,G5r,Q6,O5r,xr,$9,V5r,N3e,X5r,z5r,nn,Q5r,q3e,W5r,H5r,j3e,U5r,J5r,D3e,Y5r,K5r,Z5r,se,W6,G3e,e3r,o3r,pU,r3r,t3r,a3r,H6,O3e,n3r,s3r,_U,l3r,i3r,d3r,U6,V3e,c3r,f3r,uU,m3r,g3r,h3r,J6,X3e,p3r,_3r,bU,u3r,b3r,v3r,Y6,z3e,F3r,T3r,vU,M3r,E3r,C3r,K6,Q3e,w3r,A3r,FU,L3r,y3r,x3r,Z6,W3e,$3r,k3r,TU,S3r,R3r,P3r,eT,H3e,B3r,I3r,MU,N3r,q3r,j3r,oT,U3e,D3r,G3r,EU,O3r,V3r,X3r,rT,J3e,z3r,Q3r,CU,W3r,H3r,U3r,tT,Y3e,J3r,Y3r,wU,K3r,Z3r,evr,aT,K3e,ovr,rvr,AU,tvr,avr,nvr,nT,Z3e,svr,lvr,LU,ivr,dvr,cvr,sT,eve,fvr,mvr,yU,gvr,hvr,pvr,lT,ove,_vr,uvr,xU,bvr,vvr,Fvr,iT,rve,Tvr,Mvr,$U,Evr,Cvr,wvr,dT,tve,Avr,Lvr,kU,yvr,xvr,$vr,cT,ave,kvr,Svr,SU,Rvr,Pvr,Bvr,fT,nve,Ivr,Nvr,RU,qvr,jvr,Dvr,mT,sve,Gvr,Ovr,PU,Vvr,Xvr,zvr,gT,lve,Qvr,Wvr,BU,Hvr,Uvr,Jvr,hT,ive,Yvr,Kvr,IU,Zvr,eFr,oFr,pT,dve,rFr,tFr,NU,aFr,nFr,sFr,_T,TVe,lc,uT,cve,k9,lFr,fve,iFr,MVe,rr,S9,dFr,ic,cFr,qU,fFr,mFr,jU,gFr,hFr,pFr,R9,_Fr,mve,uFr,bFr,vFr,St,P9,FFr,gve,TFr,MFr,dc,EFr,hve,CFr,wFr,DU,AFr,LFr,yFr,bT,xFr,$r,B9,$Fr,pve,kFr,SFr,sn,RFr,_ve,PFr,BFr,uve,IFr,NFr,bve,qFr,jFr,DFr,Te,vT,vve,GFr,OFr,GU,VFr,XFr,zFr,FT,Fve,QFr,WFr,OU,HFr,UFr,JFr,TT,Tve,YFr,KFr,VU,ZFr,e6r,o6r,MT,Mve,r6r,t6r,XU,a6r,n6r,s6r,ET,Eve,l6r,i6r,zU,d6r,c6r,f6r,CT,Cve,m6r,g6r,QU,h6r,p6r,_6r,wT,wve,u6r,b6r,WU,v6r,F6r,T6r,AT,Ave,M6r,E6r,HU,C6r,w6r,A6r,LT,Lve,L6r,y6r,UU,x6r,$6r,k6r,yT,yve,S6r,R6r,JU,P6r,B6r,I6r,xT,xve,N6r,q6r,YU,j6r,D6r,G6r,$T,$ve,O6r,V6r,KU,X6r,z6r,Q6r,kT,kve,W6r,H6r,ZU,U6r,J6r,Y6r,ST,Sve,K6r,Z6r,eJ,eTr,oTr,rTr,RT,EVe,cc,PT,Rve,I9,tTr,Pve,aTr,CVe,tr,N9,nTr,fc,sTr,oJ,lTr,iTr,rJ,dTr,cTr,fTr,q9,mTr,Bve,gTr,hTr,pTr,Rt,j9,_Tr,Ive,uTr,bTr,mc,vTr,Nve,FTr,TTr,tJ,MTr,ETr,CTr,BT,wTr,kr,D9,ATr,qve,LTr,yTr,ln,xTr,jve,$Tr,kTr,Dve,STr,RTr,Gve,PTr,BTr,ITr,dn,IT,Ove,NTr,qTr,aJ,jTr,DTr,GTr,NT,Vve,OTr,VTr,nJ,XTr,zTr,QTr,qT,Xve,WTr,HTr,sJ,UTr,JTr,YTr,jT,zve,KTr,ZTr,lJ,eMr,oMr,rMr,DT,wVe,gc,GT,Qve,G9,tMr,Wve,aMr,AVe,ar,O9,nMr,hc,sMr,iJ,lMr,iMr,dJ,dMr,cMr,fMr,V9,mMr,Hve,gMr,hMr,pMr,Pt,X9,_Mr,Uve,uMr,bMr,pc,vMr,Jve,FMr,TMr,cJ,MMr,EMr,CMr,OT,wMr,Sr,z9,AMr,Yve,LMr,yMr,cn,xMr,Kve,$Mr,kMr,Zve,SMr,RMr,eFe,PMr,BMr,IMr,ie,VT,oFe,NMr,qMr,fJ,jMr,DMr,GMr,XT,rFe,OMr,VMr,mJ,XMr,zMr,QMr,zT,tFe,WMr,HMr,gJ,UMr,JMr,YMr,QT,aFe,KMr,ZMr,hJ,eEr,oEr,rEr,WT,nFe,tEr,aEr,pJ,nEr,sEr,lEr,HT,sFe,iEr,dEr,_J,cEr,fEr,mEr,UT,lFe,gEr,hEr,uJ,pEr,_Er,uEr,JT,iFe,bEr,vEr,bJ,FEr,TEr,MEr,YT,dFe,EEr,CEr,vJ,wEr,AEr,LEr,KT,cFe,yEr,xEr,FJ,$Er,kEr,SEr,ZT,fFe,REr,PEr,TJ,BEr,IEr,NEr,eM,mFe,qEr,jEr,MJ,DEr,GEr,OEr,oM,gFe,VEr,XEr,EJ,zEr,QEr,WEr,rM,hFe,HEr,UEr,CJ,JEr,YEr,KEr,tM,pFe,ZEr,eCr,wJ,oCr,rCr,tCr,aM,_Fe,aCr,nCr,AJ,sCr,lCr,iCr,nM,uFe,dCr,cCr,LJ,fCr,mCr,gCr,sM,bFe,hCr,pCr,yJ,_Cr,uCr,bCr,lM,vFe,vCr,FCr,xJ,TCr,MCr,ECr,iM,FFe,CCr,wCr,$J,ACr,LCr,yCr,dM,LVe,_c,cM,TFe,Q9,xCr,MFe,$Cr,yVe,nr,W9,kCr,uc,SCr,kJ,RCr,PCr,SJ,BCr,ICr,NCr,H9,qCr,EFe,jCr,DCr,GCr,Bt,U9,OCr,CFe,VCr,XCr,bc,zCr,wFe,QCr,WCr,RJ,HCr,UCr,JCr,fM,YCr,Rr,J9,KCr,AFe,ZCr,e0r,fn,o0r,LFe,r0r,t0r,yFe,a0r,n0r,xFe,s0r,l0r,i0r,ye,mM,$Fe,d0r,c0r,PJ,f0r,m0r,g0r,gM,kFe,h0r,p0r,BJ,_0r,u0r,b0r,hM,SFe,v0r,F0r,IJ,T0r,M0r,E0r,pM,RFe,C0r,w0r,NJ,A0r,L0r,y0r,_M,PFe,x0r,$0r,qJ,k0r,S0r,R0r,uM,BFe,P0r,B0r,jJ,I0r,N0r,q0r,bM,IFe,j0r,D0r,DJ,G0r,O0r,V0r,vM,NFe,X0r,z0r,GJ,Q0r,W0r,H0r,FM,qFe,U0r,J0r,OJ,Y0r,K0r,Z0r,TM,jFe,ewr,owr,VJ,rwr,twr,awr,MM,xVe,vc,EM,DFe,Y9,nwr,GFe,swr,$Ve,sr,K9,lwr,Fc,iwr,XJ,dwr,cwr,zJ,fwr,mwr,gwr,Z9,hwr,OFe,pwr,_wr,uwr,It,ex,bwr,VFe,vwr,Fwr,Tc,Twr,XFe,Mwr,Ewr,QJ,Cwr,wwr,Awr,CM,Lwr,Pr,ox,ywr,zFe,xwr,$wr,mn,kwr,QFe,Swr,Rwr,WFe,Pwr,Bwr,HFe,Iwr,Nwr,qwr,te,wM,UFe,jwr,Dwr,WJ,Gwr,Owr,Vwr,AM,JFe,Xwr,zwr,HJ,Qwr,Wwr,Hwr,LM,YFe,Uwr,Jwr,UJ,Ywr,Kwr,Zwr,yM,KFe,eAr,oAr,JJ,rAr,tAr,aAr,xM,ZFe,nAr,sAr,YJ,lAr,iAr,dAr,$M,e6e,cAr,fAr,KJ,mAr,gAr,hAr,kM,o6e,pAr,_Ar,ZJ,uAr,bAr,vAr,SM,r6e,FAr,TAr,eY,MAr,EAr,CAr,RM,t6e,wAr,AAr,oY,LAr,yAr,xAr,PM,a6e,$Ar,kAr,rY,SAr,RAr,PAr,BM,n6e,BAr,IAr,tY,NAr,qAr,jAr,IM,s6e,DAr,GAr,aY,OAr,VAr,XAr,NM,l6e,zAr,QAr,nY,WAr,HAr,UAr,qM,i6e,JAr,YAr,sY,KAr,ZAr,eLr,jM,d6e,oLr,rLr,lY,tLr,aLr,nLr,DM,c6e,sLr,lLr,iY,iLr,dLr,cLr,GM,f6e,fLr,mLr,dY,gLr,hLr,pLr,OM,m6e,_Lr,uLr,cY,bLr,vLr,FLr,VM,g6e,TLr,MLr,fY,ELr,CLr,wLr,XM,h6e,ALr,LLr,mY,yLr,xLr,$Lr,zM,p6e,kLr,SLr,gY,RLr,PLr,BLr,QM,_6e,ILr,NLr,hY,qLr,jLr,DLr,WM,u6e,GLr,OLr,pY,VLr,XLr,zLr,HM,b6e,QLr,WLr,_Y,HLr,ULr,JLr,UM,v6e,YLr,KLr,uY,ZLr,e7r,o7r,JM,F6e,r7r,t7r,bY,a7r,n7r,s7r,YM,kVe,Mc,KM,T6e,rx,l7r,M6e,i7r,SVe,lr,tx,d7r,Ec,c7r,vY,f7r,m7r,FY,g7r,h7r,p7r,ax,_7r,E6e,u7r,b7r,v7r,Nt,nx,F7r,C6e,T7r,M7r,Cc,E7r,w6e,C7r,w7r,TY,A7r,L7r,y7r,ZM,x7r,Br,sx,$7r,A6e,k7r,S7r,gn,R7r,L6e,P7r,B7r,y6e,I7r,N7r,x6e,q7r,j7r,D7r,_e,eE,$6e,G7r,O7r,MY,V7r,X7r,z7r,oE,k6e,Q7r,W7r,EY,H7r,U7r,J7r,rE,S6e,Y7r,K7r,CY,Z7r,eyr,oyr,tE,R6e,ryr,tyr,wY,ayr,nyr,syr,aE,P6e,lyr,iyr,AY,dyr,cyr,fyr,nE,B6e,myr,gyr,LY,hyr,pyr,_yr,sE,I6e,uyr,byr,yY,vyr,Fyr,Tyr,lE,N6e,Myr,Eyr,xY,Cyr,wyr,Ayr,iE,q6e,Lyr,yyr,$Y,xyr,$yr,kyr,dE,j6e,Syr,Ryr,kY,Pyr,Byr,Iyr,cE,D6e,Nyr,qyr,SY,jyr,Dyr,Gyr,fE,G6e,Oyr,Vyr,RY,Xyr,zyr,Qyr,mE,O6e,Wyr,Hyr,PY,Uyr,Jyr,Yyr,gE,V6e,Kyr,Zyr,BY,e8r,o8r,r8r,hE,X6e,t8r,a8r,IY,n8r,s8r,l8r,pE,z6e,i8r,d8r,NY,c8r,f8r,m8r,_E,Q6e,g8r,h8r,qY,p8r,_8r,u8r,uE,RVe,wc,bE,W6e,lx,b8r,H6e,v8r,PVe,ir,ix,F8r,Ac,T8r,jY,M8r,E8r,DY,C8r,w8r,A8r,dx,L8r,U6e,y8r,x8r,$8r,qt,cx,k8r,J6e,S8r,R8r,Lc,P8r,Y6e,B8r,I8r,GY,N8r,q8r,j8r,vE,D8r,Ir,fx,G8r,K6e,O8r,V8r,hn,X8r,Z6e,z8r,Q8r,eTe,W8r,H8r,oTe,U8r,J8r,Y8r,mx,FE,rTe,K8r,Z8r,OY,e9r,o9r,r9r,TE,tTe,t9r,a9r,VY,n9r,s9r,l9r,ME,BVe,yc,EE,aTe,gx,i9r,nTe,d9r,IVe,dr,hx,c9r,xc,f9r,XY,m9r,g9r,zY,h9r,p9r,_9r,px,u9r,sTe,b9r,v9r,F9r,jt,_x,T9r,lTe,M9r,E9r,$c,C9r,iTe,w9r,A9r,QY,L9r,y9r,x9r,CE,$9r,Nr,ux,k9r,dTe,S9r,R9r,pn,P9r,cTe,B9r,I9r,fTe,N9r,q9r,mTe,j9r,D9r,G9r,gTe,wE,hTe,O9r,V9r,WY,X9r,z9r,Q9r,AE,NVe,kc,LE,pTe,bx,W9r,_Te,H9r,qVe,cr,vx,U9r,Sc,J9r,HY,Y9r,K9r,UY,Z9r,exr,oxr,Fx,rxr,uTe,txr,axr,nxr,Dt,Tx,sxr,bTe,lxr,ixr,Rc,dxr,vTe,cxr,fxr,JY,mxr,gxr,hxr,yE,pxr,qr,Mx,_xr,FTe,uxr,bxr,_n,vxr,TTe,Fxr,Txr,MTe,Mxr,Exr,ETe,Cxr,wxr,Axr,de,xE,CTe,Lxr,yxr,YY,xxr,$xr,kxr,$E,wTe,Sxr,Rxr,KY,Pxr,Bxr,Ixr,kE,ATe,Nxr,qxr,ZY,jxr,Dxr,Gxr,SE,LTe,Oxr,Vxr,eK,Xxr,zxr,Qxr,RE,yTe,Wxr,Hxr,oK,Uxr,Jxr,Yxr,PE,xTe,Kxr,Zxr,rK,e$r,o$r,r$r,BE,$Te,t$r,a$r,tK,n$r,s$r,l$r,IE,kTe,i$r,d$r,aK,c$r,f$r,m$r,NE,STe,g$r,h$r,nK,p$r,_$r,u$r,qE,RTe,b$r,v$r,sK,F$r,T$r,M$r,jE,PTe,E$r,C$r,lK,w$r,A$r,L$r,DE,BTe,y$r,x$r,iK,$$r,k$r,S$r,GE,ITe,R$r,P$r,dK,B$r,I$r,N$r,OE,NTe,q$r,j$r,cK,D$r,G$r,O$r,VE,qTe,V$r,X$r,fK,z$r,Q$r,W$r,XE,jTe,H$r,U$r,mK,J$r,Y$r,K$r,zE,DTe,Z$r,ekr,gK,okr,rkr,tkr,QE,GTe,akr,nkr,hK,skr,lkr,ikr,WE,OTe,dkr,ckr,pK,fkr,mkr,gkr,HE,VTe,hkr,pkr,_K,_kr,ukr,bkr,UE,jVe,Pc,JE,XTe,Ex,vkr,zTe,Fkr,DVe,fr,Cx,Tkr,Bc,Mkr,uK,Ekr,Ckr,bK,wkr,Akr,Lkr,wx,ykr,QTe,xkr,$kr,kkr,Gt,Ax,Skr,WTe,Rkr,Pkr,Ic,Bkr,HTe,Ikr,Nkr,vK,qkr,jkr,Dkr,YE,Gkr,jr,Lx,Okr,UTe,Vkr,Xkr,un,zkr,JTe,Qkr,Wkr,YTe,Hkr,Ukr,KTe,Jkr,Ykr,Kkr,ce,KE,ZTe,Zkr,eSr,FK,oSr,rSr,tSr,ZE,eMe,aSr,nSr,TK,sSr,lSr,iSr,eC,oMe,dSr,cSr,MK,fSr,mSr,gSr,oC,rMe,hSr,pSr,EK,_Sr,uSr,bSr,rC,tMe,vSr,FSr,CK,TSr,MSr,ESr,tC,aMe,CSr,wSr,wK,ASr,LSr,ySr,aC,nMe,xSr,$Sr,AK,kSr,SSr,RSr,nC,sMe,PSr,BSr,LK,ISr,NSr,qSr,sC,lMe,jSr,DSr,yK,GSr,OSr,VSr,lC,iMe,XSr,zSr,xK,QSr,WSr,HSr,iC,dMe,USr,JSr,$K,YSr,KSr,ZSr,dC,cMe,eRr,oRr,kK,rRr,tRr,aRr,cC,fMe,nRr,sRr,SK,lRr,iRr,dRr,fC,mMe,cRr,fRr,RK,mRr,gRr,hRr,mC,gMe,pRr,_Rr,PK,uRr,bRr,vRr,gC,hMe,FRr,TRr,BK,MRr,ERr,CRr,hC,pMe,wRr,ARr,IK,LRr,yRr,xRr,pC,_Me,$Rr,kRr,NK,SRr,RRr,PRr,_C,uMe,BRr,IRr,qK,NRr,qRr,jRr,uC,bMe,DRr,GRr,jK,ORr,VRr,XRr,bC,GVe,Nc,vC,vMe,yx,zRr,FMe,QRr,OVe,mr,xx,WRr,qc,HRr,DK,URr,JRr,GK,YRr,KRr,ZRr,$x,ePr,TMe,oPr,rPr,tPr,Ot,kx,aPr,MMe,nPr,sPr,jc,lPr,EMe,iPr,dPr,OK,cPr,fPr,mPr,FC,gPr,Dr,Sx,hPr,CMe,pPr,_Pr,bn,uPr,wMe,bPr,vPr,AMe,FPr,TPr,LMe,MPr,EPr,CPr,yMe,TC,xMe,wPr,APr,VK,LPr,yPr,xPr,MC,VVe,Dc,EC,$Me,Rx,$Pr,kMe,kPr,XVe,gr,Px,SPr,Gc,RPr,XK,PPr,BPr,zK,IPr,NPr,qPr,Bx,jPr,SMe,DPr,GPr,OPr,Vt,Ix,VPr,RMe,XPr,zPr,Oc,QPr,PMe,WPr,HPr,QK,UPr,JPr,YPr,CC,KPr,Gr,Nx,ZPr,BMe,eBr,oBr,vn,rBr,IMe,tBr,aBr,NMe,nBr,sBr,qMe,lBr,iBr,dBr,jMe,wC,DMe,cBr,fBr,WK,mBr,gBr,hBr,AC,zVe,Vc,LC,GMe,qx,pBr,OMe,_Br,QVe,hr,jx,uBr,Xc,bBr,HK,vBr,FBr,UK,TBr,MBr,EBr,Dx,CBr,VMe,wBr,ABr,LBr,Xt,Gx,yBr,XMe,xBr,$Br,zc,kBr,zMe,SBr,RBr,JK,PBr,BBr,IBr,yC,NBr,Or,Ox,qBr,QMe,jBr,DBr,Fn,GBr,WMe,OBr,VBr,HMe,XBr,zBr,UMe,QBr,WBr,HBr,oe,xC,JMe,UBr,JBr,YK,YBr,KBr,ZBr,$C,YMe,eIr,oIr,KK,rIr,tIr,aIr,kC,KMe,nIr,sIr,ZK,lIr,iIr,dIr,SC,ZMe,cIr,fIr,eZ,mIr,gIr,hIr,RC,eEe,pIr,_Ir,oZ,uIr,bIr,vIr,PC,oEe,FIr,TIr,rZ,MIr,EIr,CIr,BC,rEe,wIr,AIr,tZ,LIr,yIr,xIr,IC,tEe,$Ir,kIr,aZ,SIr,RIr,PIr,NC,aEe,BIr,IIr,nZ,NIr,qIr,jIr,qC,nEe,DIr,GIr,sZ,OIr,VIr,XIr,jC,sEe,zIr,QIr,lZ,WIr,HIr,UIr,DC,lEe,JIr,YIr,iZ,KIr,ZIr,eNr,GC,iEe,oNr,rNr,dZ,tNr,aNr,nNr,OC,dEe,sNr,lNr,cZ,iNr,dNr,cNr,VC,cEe,fNr,mNr,fZ,gNr,hNr,pNr,XC,fEe,_Nr,uNr,mZ,bNr,vNr,FNr,zC,mEe,TNr,MNr,gZ,ENr,CNr,wNr,QC,gEe,ANr,LNr,hZ,yNr,xNr,$Nr,WC,hEe,kNr,SNr,pZ,RNr,PNr,BNr,HC,pEe,INr,NNr,_Z,qNr,jNr,DNr,UC,_Ee,GNr,ONr,uZ,VNr,XNr,zNr,JC,uEe,QNr,WNr,bZ,HNr,UNr,JNr,YC,bEe,YNr,KNr,vZ,ZNr,eqr,oqr,KC,vEe,rqr,tqr,FZ,aqr,nqr,sqr,ZC,FEe,lqr,iqr,TZ,dqr,cqr,fqr,e0,TEe,mqr,gqr,MZ,hqr,pqr,_qr,o0,MEe,uqr,bqr,EZ,vqr,Fqr,Tqr,r0,WVe,Qc,t0,EEe,Vx,Mqr,CEe,Eqr,HVe,pr,Xx,Cqr,Wc,wqr,CZ,Aqr,Lqr,wZ,yqr,xqr,$qr,zx,kqr,wEe,Sqr,Rqr,Pqr,zt,Qx,Bqr,AEe,Iqr,Nqr,Hc,qqr,LEe,jqr,Dqr,AZ,Gqr,Oqr,Vqr,a0,Xqr,Vr,Wx,zqr,yEe,Qqr,Wqr,Tn,Hqr,xEe,Uqr,Jqr,$Ee,Yqr,Kqr,kEe,Zqr,ejr,ojr,xe,n0,SEe,rjr,tjr,LZ,ajr,njr,sjr,s0,REe,ljr,ijr,yZ,djr,cjr,fjr,l0,PEe,mjr,gjr,xZ,hjr,pjr,_jr,i0,BEe,ujr,bjr,$Z,vjr,Fjr,Tjr,d0,IEe,Mjr,Ejr,kZ,Cjr,wjr,Ajr,c0,NEe,Ljr,yjr,SZ,xjr,$jr,kjr,f0,qEe,Sjr,Rjr,RZ,Pjr,Bjr,Ijr,m0,jEe,Njr,qjr,PZ,jjr,Djr,Gjr,g0,DEe,Ojr,Vjr,BZ,Xjr,zjr,Qjr,h0,GEe,Wjr,Hjr,IZ,Ujr,Jjr,Yjr,p0,UVe,Uc,_0,OEe,Hx,Kjr,VEe,Zjr,JVe,_r,Ux,eDr,Jc,oDr,NZ,rDr,tDr,qZ,aDr,nDr,sDr,Jx,lDr,XEe,iDr,dDr,cDr,Qt,Yx,fDr,zEe,mDr,gDr,Yc,hDr,QEe,pDr,_Dr,jZ,uDr,bDr,vDr,u0,FDr,Xr,Kx,TDr,WEe,MDr,EDr,Mn,CDr,HEe,wDr,ADr,UEe,LDr,yDr,JEe,xDr,$Dr,kDr,Ee,b0,YEe,SDr,RDr,DZ,PDr,BDr,IDr,v0,KEe,NDr,qDr,GZ,jDr,DDr,GDr,F0,ZEe,ODr,VDr,OZ,XDr,zDr,QDr,T0,eCe,WDr,HDr,VZ,UDr,JDr,YDr,M0,oCe,KDr,ZDr,XZ,eGr,oGr,rGr,E0,rCe,tGr,aGr,zZ,nGr,sGr,lGr,C0,tCe,iGr,dGr,QZ,cGr,fGr,mGr,w0,aCe,gGr,hGr,WZ,pGr,_Gr,uGr,A0,nCe,bGr,vGr,HZ,FGr,TGr,MGr,L0,sCe,EGr,CGr,UZ,wGr,AGr,LGr,y0,lCe,yGr,xGr,JZ,$Gr,kGr,SGr,x0,iCe,RGr,PGr,YZ,BGr,IGr,NGr,$0,dCe,qGr,jGr,KZ,DGr,GGr,OGr,k0,YVe,Kc,S0,cCe,Zx,VGr,fCe,XGr,KVe,ur,e$,zGr,Zc,QGr,ZZ,WGr,HGr,eee,UGr,JGr,YGr,o$,KGr,mCe,ZGr,eOr,oOr,Wt,r$,rOr,gCe,tOr,aOr,ef,nOr,hCe,sOr,lOr,oee,iOr,dOr,cOr,R0,fOr,zr,t$,mOr,pCe,gOr,hOr,En,pOr,_Ce,_Or,uOr,uCe,bOr,vOr,bCe,FOr,TOr,MOr,$e,P0,vCe,EOr,COr,ree,wOr,AOr,LOr,B0,FCe,yOr,xOr,tee,$Or,kOr,SOr,I0,TCe,ROr,POr,aee,BOr,IOr,NOr,N0,MCe,qOr,jOr,nee,DOr,GOr,OOr,q0,ECe,VOr,XOr,see,zOr,QOr,WOr,j0,CCe,HOr,UOr,lee,JOr,YOr,KOr,D0,wCe,ZOr,eVr,iee,oVr,rVr,tVr,G0,ACe,aVr,nVr,dee,sVr,lVr,iVr,O0,LCe,dVr,cVr,cee,fVr,mVr,gVr,V0,yCe,hVr,pVr,fee,_Vr,uVr,bVr,X0,ZVe,of,z0,xCe,a$,vVr,$Ce,FVr,eXe,br,n$,TVr,rf,MVr,mee,EVr,CVr,gee,wVr,AVr,LVr,s$,yVr,kCe,xVr,$Vr,kVr,Ht,l$,SVr,SCe,RVr,PVr,tf,BVr,RCe,IVr,NVr,hee,qVr,jVr,DVr,Q0,GVr,Qr,i$,OVr,PCe,VVr,XVr,Cn,zVr,BCe,QVr,WVr,ICe,HVr,UVr,NCe,JVr,YVr,KVr,ke,W0,qCe,ZVr,eXr,pee,oXr,rXr,tXr,H0,jCe,aXr,nXr,_ee,sXr,lXr,iXr,U0,DCe,dXr,cXr,uee,fXr,mXr,gXr,J0,GCe,hXr,pXr,bee,_Xr,uXr,bXr,Y0,OCe,vXr,FXr,vee,TXr,MXr,EXr,K0,VCe,CXr,wXr,Fee,AXr,LXr,yXr,Z0,XCe,xXr,$Xr,Tee,kXr,SXr,RXr,ew,zCe,PXr,BXr,Mee,IXr,NXr,qXr,ow,QCe,jXr,DXr,Eee,GXr,OXr,VXr,rw,WCe,XXr,zXr,Cee,QXr,WXr,HXr,tw,oXe,af,aw,HCe,d$,UXr,UCe,JXr,rXe,vr,c$,YXr,nf,KXr,wee,ZXr,ezr,Aee,ozr,rzr,tzr,f$,azr,JCe,nzr,szr,lzr,Ut,m$,izr,YCe,dzr,czr,sf,fzr,KCe,mzr,gzr,Lee,hzr,pzr,_zr,nw,uzr,Wr,g$,bzr,ZCe,vzr,Fzr,wn,Tzr,e0e,Mzr,Ezr,o0e,Czr,wzr,r0e,Azr,Lzr,yzr,Se,sw,t0e,xzr,$zr,yee,kzr,Szr,Rzr,lw,a0e,Pzr,Bzr,xee,Izr,Nzr,qzr,iw,n0e,jzr,Dzr,$ee,Gzr,Ozr,Vzr,dw,s0e,Xzr,zzr,kee,Qzr,Wzr,Hzr,cw,l0e,Uzr,Jzr,See,Yzr,Kzr,Zzr,fw,i0e,eQr,oQr,Ree,rQr,tQr,aQr,mw,d0e,nQr,sQr,Pee,lQr,iQr,dQr,gw,c0e,cQr,fQr,Bee,mQr,gQr,hQr,hw,f0e,pQr,_Qr,Iee,uQr,bQr,vQr,pw,m0e,FQr,TQr,Nee,MQr,EQr,CQr,_w,tXe,lf,uw,g0e,h$,wQr,h0e,AQr,aXe,Fr,p$,LQr,df,yQr,qee,xQr,$Qr,jee,kQr,SQr,RQr,_$,PQr,p0e,BQr,IQr,NQr,Jt,u$,qQr,_0e,jQr,DQr,cf,GQr,u0e,OQr,VQr,Dee,XQr,zQr,QQr,bw,WQr,Hr,b$,HQr,b0e,UQr,JQr,An,YQr,v0e,KQr,ZQr,F0e,eWr,oWr,T0e,rWr,tWr,aWr,Re,vw,M0e,nWr,sWr,Gee,lWr,iWr,dWr,Fw,E0e,cWr,fWr,Oee,mWr,gWr,hWr,Tw,C0e,pWr,_Wr,Vee,uWr,bWr,vWr,Mw,w0e,FWr,TWr,Xee,MWr,EWr,CWr,Ew,A0e,wWr,AWr,zee,LWr,yWr,xWr,Cw,L0e,$Wr,kWr,Qee,SWr,RWr,PWr,ww,y0e,BWr,IWr,Wee,NWr,qWr,jWr,Aw,x0e,DWr,GWr,Hee,OWr,VWr,XWr,Lw,$0e,zWr,QWr,Uee,WWr,HWr,UWr,yw,k0e,JWr,YWr,Jee,KWr,ZWr,eHr,xw,nXe,ff,$w,S0e,v$,oHr,R0e,rHr,sXe,Tr,F$,tHr,mf,aHr,Yee,nHr,sHr,Kee,lHr,iHr,dHr,T$,cHr,P0e,fHr,mHr,gHr,Yt,M$,hHr,B0e,pHr,_Hr,gf,uHr,I0e,bHr,vHr,Zee,FHr,THr,MHr,kw,EHr,Ur,E$,CHr,N0e,wHr,AHr,Ln,LHr,q0e,yHr,xHr,j0e,$Hr,kHr,D0e,SHr,RHr,PHr,Ve,Sw,G0e,BHr,IHr,eoe,NHr,qHr,jHr,Rw,O0e,DHr,GHr,ooe,OHr,VHr,XHr,Pw,V0e,zHr,QHr,roe,WHr,HHr,UHr,Bw,X0e,JHr,YHr,toe,KHr,ZHr,eUr,Iw,z0e,oUr,rUr,aoe,tUr,aUr,nUr,Nw,Q0e,sUr,lUr,noe,iUr,dUr,cUr,qw,W0e,fUr,mUr,soe,gUr,hUr,pUr,jw,H0e,_Ur,uUr,loe,bUr,vUr,FUr,Dw,lXe,hf,Gw,U0e,C$,TUr,J0e,MUr,iXe,Mr,w$,EUr,pf,CUr,ioe,wUr,AUr,doe,LUr,yUr,xUr,A$,$Ur,Y0e,kUr,SUr,RUr,Kt,L$,PUr,K0e,BUr,IUr,_f,NUr,Z0e,qUr,jUr,coe,DUr,GUr,OUr,Ow,VUr,Jr,y$,XUr,ewe,zUr,QUr,yn,WUr,owe,HUr,UUr,rwe,JUr,YUr,twe,KUr,ZUr,eJr,Xe,Vw,awe,oJr,rJr,foe,tJr,aJr,nJr,Xw,nwe,sJr,lJr,moe,iJr,dJr,cJr,zw,swe,fJr,mJr,goe,gJr,hJr,pJr,Qw,lwe,_Jr,uJr,hoe,bJr,vJr,FJr,Ww,iwe,TJr,MJr,poe,EJr,CJr,wJr,Hw,dwe,AJr,LJr,_oe,yJr,xJr,$Jr,Uw,cwe,kJr,SJr,uoe,RJr,PJr,BJr,Jw,fwe,IJr,NJr,boe,qJr,jJr,DJr,Yw,dXe,uf,Kw,mwe,x$,GJr,gwe,OJr,cXe,Er,$$,VJr,bf,XJr,voe,zJr,QJr,Foe,WJr,HJr,UJr,k$,JJr,hwe,YJr,KJr,ZJr,Zt,S$,eYr,pwe,oYr,rYr,vf,tYr,_we,aYr,nYr,Toe,sYr,lYr,iYr,Zw,dYr,Yr,R$,cYr,uwe,fYr,mYr,xn,gYr,bwe,hYr,pYr,vwe,_Yr,uYr,Fwe,bYr,vYr,FYr,Twe,eA,Mwe,TYr,MYr,Moe,EYr,CYr,wYr,oA,fXe,Ff,rA,Ewe,P$,AYr,Cwe,LYr,mXe,Cr,B$,yYr,Tf,xYr,Eoe,$Yr,kYr,Coe,SYr,RYr,PYr,I$,BYr,wwe,IYr,NYr,qYr,ea,N$,jYr,Awe,DYr,GYr,Mf,OYr,Lwe,VYr,XYr,woe,zYr,QYr,WYr,tA,HYr,Kr,q$,UYr,ywe,JYr,YYr,$n,KYr,xwe,ZYr,eKr,$we,oKr,rKr,kwe,tKr,aKr,nKr,j$,aA,Swe,sKr,lKr,Aoe,iKr,dKr,cKr,nA,Rwe,fKr,mKr,Loe,gKr,hKr,pKr,sA,gXe,Ef,lA,Pwe,D$,_Kr,Bwe,uKr,hXe,wr,G$,bKr,Cf,vKr,yoe,FKr,TKr,xoe,MKr,EKr,CKr,O$,wKr,Iwe,AKr,LKr,yKr,oa,V$,xKr,Nwe,$Kr,kKr,wf,SKr,qwe,RKr,PKr,$oe,BKr,IKr,NKr,iA,qKr,Zr,X$,jKr,jwe,DKr,GKr,kn,OKr,Dwe,VKr,XKr,Gwe,zKr,QKr,Owe,WKr,HKr,UKr,Vwe,dA,Xwe,JKr,YKr,koe,KKr,ZKr,eZr,cA,pXe;return d=new re({}),xa=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),B7=new re({}),I7=new P({props:{code:"",highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Pf=new oZr({props:{warning:!0,$$slots:{default:[DGt]},$$scope:{ctx:x}}}),N7=new re({}),q7=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/configuration_auto.py#L601"}}),G7=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/configuration_auto.py#L624"}}),Vg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[GGt]},$$scope:{ctx:x}}}),O7=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/configuration_auto.py#L747"}}),V7=new re({}),X7=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/tokenization_auto.py#L401"}}),W7=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_16543/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/tokenization_auto.py#L415"}}),wh=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[OGt]},$$scope:{ctx:x}}}),H7=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/tokenization_auto.py#L614"}}),U7=new re({}),J7=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/feature_extraction_auto.py#L193"}}),Z7=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_16543/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/feature_extraction_auto.py#L207"}}),sp=new oZr({props:{$$slots:{default:[VGt]},$$scope:{ctx:x}}}),lp=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[XGt]},$$scope:{ctx:x}}}),ey=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/feature_extraction_auto.py#L334"}}),oy=new re({}),ry=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/processing_auto.py#L88"}}),ny=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/processing_auto.py#L102"}}),Lp=new oZr({props:{$$slots:{default:[zGt]},$$scope:{ctx:x}}}),yp=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[QGt]},$$scope:{ctx:x}}}),sy=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/processing_auto.py#L255"}}),ly=new re({}),iy=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L770"}}),cy=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/codegen#transformers.CodeGenModel">CodeGenModel</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/nezha#transformers.NezhaModel">NezhaModel</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),kp=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[WGt]},$$scope:{ctx:x}}}),fy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),Su=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[HGt]},$$scope:{ctx:x}}}),my=new re({}),gy=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L777"}}),py=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/nezha#transformers.NezhaForPreTraining">NezhaForPreTraining</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),Pu=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[UGt]},$$scope:{ctx:x}}}),_y=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),A1=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[JGt]},$$scope:{ctx:x}}}),uy=new re({}),by=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L792"}}),Fy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/codegen#transformers.CodeGenForCausalLM">CodeGenForCausalLM</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),y1=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[YGt]},$$scope:{ctx:x}}}),Ty=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),p2=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[KGt]},$$scope:{ctx:x}}}),My=new re({}),Ey=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L799"}}),wy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/nezha#transformers.NezhaForMaskedLM">NezhaForMaskedLM</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),u2=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[ZGt]},$$scope:{ctx:x}}}),Ay=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),rb=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[eOt]},$$scope:{ctx:x}}}),Ly=new re({}),yy=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L806"}}),$y=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),ab=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[oOt]},$$scope:{ctx:x}}}),ky=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),Eb=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[rOt]},$$scope:{ctx:x}}}),Sy=new re({}),Ry=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L815"}}),By=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bloom#transformers.BloomForSequenceClassification">BloomForSequenceClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/nezha#transformers.NezhaForSequenceClassification">NezhaForSequenceClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),wb=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[tOt]},$$scope:{ctx:x}}}),Iy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),M4=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[aOt]},$$scope:{ctx:x}}}),Ny=new re({}),qy=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L860"}}),Dy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/nezha#transformers.NezhaForMultipleChoice">NezhaForMultipleChoice</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),C4=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[nOt]},$$scope:{ctx:x}}}),Gy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),r5=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[sOt]},$$scope:{ctx:x}}}),Oy=new re({}),Vy=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L867"}}),zy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction">NezhaForNextSentencePrediction</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),a5=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[lOt]},$$scope:{ctx:x}}}),Qy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),m5=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[iOt]},$$scope:{ctx:x}}}),Wy=new re({}),Hy=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L853"}}),Jy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bloom#transformers.BloomForTokenClassification">BloomForTokenClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/nezha#transformers.NezhaForTokenClassification">NezhaForTokenClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),h5=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[dOt]},$$scope:{ctx:x}}}),Yy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),K5=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[cOt]},$$scope:{ctx:x}}}),Ky=new re({}),Zy=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L824"}}),o8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/nezha#transformers.NezhaForQuestionAnswering">NezhaForQuestionAnswering</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),e3=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[fOt]},$$scope:{ctx:x}}}),r8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),V3=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[mOt]},$$scope:{ctx:x}}}),t8=new re({}),a8=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L831"}}),s8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),z3=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[gOt]},$$scope:{ctx:x}}}),l8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),H3=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[hOt]},$$scope:{ctx:x}}}),i8=new re({}),d8=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L876"}}),f8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/pr_16543/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),J3=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[pOt]},$$scope:{ctx:x}}}),m8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),cv=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[_Ot]},$$scope:{ctx:x}}}),g8=new re({}),h8=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L915"}}),_8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),mv=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[uOt]},$$scope:{ctx:x}}}),u8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),pv=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[bOt]},$$scope:{ctx:x}}}),b8=new re({}),v8=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L842"}}),T8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),uv=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[vOt]},$$scope:{ctx:x}}}),M8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),Fv=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[FOt]},$$scope:{ctx:x}}}),E8=new re({}),C8=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L922"}}),A8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),Mv=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[TOt]},$$scope:{ctx:x}}}),L8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),Rv=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[MOt]},$$scope:{ctx:x}}}),y8=new re({}),x8=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L945"}}),k8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),Bv=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[EOt]},$$scope:{ctx:x}}}),S8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),Ov=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[COt]},$$scope:{ctx:x}}}),R8=new re({}),P8=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L929"}}),I8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),Xv=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[wOt]},$$scope:{ctx:x}}}),N8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),rF=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[AOt]},$$scope:{ctx:x}}}),q8=new re({}),j8=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L936"}}),G8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),aF=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[LOt]},$$scope:{ctx:x}}}),O8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),iF=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[yOt]},$$scope:{ctx:x}}}),X8=new re({}),z8=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L954"}}),W8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),cF=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[xOt]},$$scope:{ctx:x}}}),H8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),uF=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[$Ot]},$$scope:{ctx:x}}}),U8=new re({}),J8=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L961"}}),K8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),vF=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[kOt]},$$scope:{ctx:x}}}),Z8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),CF=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[SOt]},$$scope:{ctx:x}}}),e9=new re({}),o9=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L908"}}),t9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),AF=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[ROt]},$$scope:{ctx:x}}}),a9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),$F=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[POt]},$$scope:{ctx:x}}}),s9=new re({}),l9=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L883"}}),d9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),SF=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[BOt]},$$scope:{ctx:x}}}),c9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),BF=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[IOt]},$$scope:{ctx:x}}}),f9=new re({}),m9=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L890"}}),h9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),NF=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[NOt]},$$scope:{ctx:x}}}),p9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),VF=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[qOt]},$$scope:{ctx:x}}}),_9=new re({}),u9=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L899"}}),v9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),zF=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[jOt]},$$scope:{ctx:x}}}),F9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),HF=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[DOt]},$$scope:{ctx:x}}}),T9=new re({}),M9=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L408"}}),C9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.TFXGLMModel">TFXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),JF=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[GOt]},$$scope:{ctx:x}}}),w9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),X6=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[OOt]},$$scope:{ctx:x}}}),A9=new re({}),L9=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L415"}}),x9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),Q6=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[VOt]},$$scope:{ctx:x}}}),$9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),_T=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[XOt]},$$scope:{ctx:x}}}),k9=new re({}),S9=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L430"}}),P9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.TFXGLMForCausalLM">TFXGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),bT=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[zOt]},$$scope:{ctx:x}}}),B9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),RT=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[QOt]},$$scope:{ctx:x}}}),I9=new re({}),N9=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L446"}}),j9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),BT=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[WOt]},$$scope:{ctx:x}}}),D9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),DT=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[HOt]},$$scope:{ctx:x}}}),G9=new re({}),O9=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L471"}}),X9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),OT=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[UOt]},$$scope:{ctx:x}}}),z9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),dM=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[JOt]},$$scope:{ctx:x}}}),Q9=new re({}),W9=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L478"}}),U9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),fM=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[YOt]},$$scope:{ctx:x}}}),J9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),MM=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[KOt]},$$scope:{ctx:x}}}),Y9=new re({}),K9=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L487"}}),ex=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),CM=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[ZOt]},$$scope:{ctx:x}}}),ox=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),YM=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[eVt]},$$scope:{ctx:x}}}),rx=new re({}),tx=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L523"}}),nx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),ZM=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[oVt]},$$scope:{ctx:x}}}),sx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),uE=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[rVt]},$$scope:{ctx:x}}}),lx=new re({}),ix=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L530"}}),cx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),vE=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[tVt]},$$scope:{ctx:x}}}),fx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),ME=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[aVt]},$$scope:{ctx:x}}}),gx=new re({}),hx=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L503"}}),_x=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),CE=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[nVt]},$$scope:{ctx:x}}}),ux=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),AE=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[sVt]},$$scope:{ctx:x}}}),bx=new re({}),vx=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L514"}}),Tx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),yE=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[lVt]},$$scope:{ctx:x}}}),Mx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),UE=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[iVt]},$$scope:{ctx:x}}}),Ex=new re({}),Cx=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L496"}}),Ax=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),YE=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[dVt]},$$scope:{ctx:x}}}),Lx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),bC=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[cVt]},$$scope:{ctx:x}}}),yx=new re({}),xx=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L464"}}),kx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),FC=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[fVt]},$$scope:{ctx:x}}}),Sx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),MC=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[mVt]},$$scope:{ctx:x}}}),Rx=new re({}),Px=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L539"}}),Ix=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),CC=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[gVt]},$$scope:{ctx:x}}}),Nx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),AC=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[hVt]},$$scope:{ctx:x}}}),qx=new re({}),jx=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_flax_auto.py#L246"}}),Gx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),yC=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[pVt]},$$scope:{ctx:x}}}),Ox=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),r0=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[_Vt]},$$scope:{ctx:x}}}),Vx=new re({}),Xx=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_flax_auto.py#L260"}}),Qx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),a0=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[uVt]},$$scope:{ctx:x}}}),Wx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),p0=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[bVt]},$$scope:{ctx:x}}}),Hx=new re({}),Ux=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_flax_auto.py#L253"}}),Yx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),u0=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[vVt]},$$scope:{ctx:x}}}),Kx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),k0=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[FVt]},$$scope:{ctx:x}}}),Zx=new re({}),e$=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_flax_auto.py#L267"}}),r$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),R0=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[TVt]},$$scope:{ctx:x}}}),t$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),X0=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[MVt]},$$scope:{ctx:x}}}),a$=new re({}),n$=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),l$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),Q0=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[EVt]},$$scope:{ctx:x}}}),i$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),tw=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[CVt]},$$scope:{ctx:x}}}),d$=new re({}),c$=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),m$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),nw=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[wVt]},$$scope:{ctx:x}}}),g$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),_w=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[AVt]},$$scope:{ctx:x}}}),h$=new re({}),p$=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),u$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),bw=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[LVt]},$$scope:{ctx:x}}}),b$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),xw=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[yVt]},$$scope:{ctx:x}}}),v$=new re({}),F$=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),M$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),kw=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[xVt]},$$scope:{ctx:x}}}),E$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),Dw=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[$Vt]},$$scope:{ctx:x}}}),C$=new re({}),w$=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_flax_auto.py#L308"}}),L$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),Ow=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[kVt]},$$scope:{ctx:x}}}),y$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),Yw=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[SVt]},$$scope:{ctx:x}}}),x$=new re({}),$$=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),S$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),Zw=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[RVt]},$$scope:{ctx:x}}}),R$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),oA=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[PVt]},$$scope:{ctx:x}}}),P$=new re({}),B$=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),N$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),tA=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[BVt]},$$scope:{ctx:x}}}),q$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),sA=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[IVt]},$$scope:{ctx:x}}}),D$=new re({}),G$=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),V$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),iA=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[NVt]},$$scope:{ctx:x}}}),X$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),cA=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[qVt]},$$scope:{ctx:x}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(d.$$.fragment),h=l(),Eo=a("span"),Mi=o("Auto Classes"),xf=l(),at=a("p"),Ei=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ci=a("code"),k7=o("from_pretrained()"),$f=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Oe=l(),Qe=a("p"),wi=o("Instantiating one of "),Rn=a("a"),S7=o("AutoConfig"),Pn=o(", "),Bn=a("a"),R7=o("AutoModel"),Ai=o(`, and
`),In=a("a"),P7=o("AutoTokenizer"),Li=o(" will directly create a class of the relevant architecture. For instance"),kf=l(),F(xa.$$.fragment),We=l(),Ae=a("p"),dS=o("will create a model that is an instance of "),yi=a("a"),cS=o("BertModel"),fS=o("."),Co=l(),$a=a("p"),mS=o("There is one class of "),Sf=a("code"),gS=o("AutoModel"),wQe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),cOe=l(),xi=a("h2"),Rf=a("a"),Ate=a("span"),F(B7.$$.fragment),AQe=l(),Lte=a("span"),LQe=o("Extending the Auto Classes"),fOe=l(),Nn=a("p"),yQe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),yte=a("code"),xQe=o("NewModel"),$Qe=o(", make sure you have a "),xte=a("code"),kQe=o("NewModelConfig"),SQe=o(` then you can add those to the auto
classes like this:`),mOe=l(),F(I7.$$.fragment),gOe=l(),hS=a("p"),RQe=o("You will then be able to use the auto classes like you would usually do!"),hOe=l(),F(Pf.$$.fragment),pOe=l(),$i=a("h2"),Bf=a("a"),$te=a("span"),F(N7.$$.fragment),PQe=l(),kte=a("span"),BQe=o("AutoConfig"),_Oe=l(),wo=a("div"),F(q7.$$.fragment),IQe=l(),j7=a("p"),NQe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),pS=a("a"),qQe=o("from_pretrained()"),jQe=o(" class method."),DQe=l(),D7=a("p"),GQe=o("This class cannot be instantiated directly using "),Ste=a("code"),OQe=o("__init__()"),VQe=o(" (throws an error)."),XQe=l(),Ar=a("div"),F(G7.$$.fragment),zQe=l(),Rte=a("p"),QQe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),WQe=l(),ki=a("p"),HQe=o("The configuration class to instantiate is selected based on the "),Pte=a("code"),UQe=o("model_type"),JQe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Bte=a("code"),YQe=o("pretrained_model_name_or_path"),KQe=o(":"),ZQe=l(),A=a("ul"),If=a("li"),Ite=a("strong"),eWe=o("albert"),oWe=o(" \u2014 "),_S=a("a"),rWe=o("AlbertConfig"),tWe=o(" (ALBERT model)"),aWe=l(),Nf=a("li"),Nte=a("strong"),nWe=o("bart"),sWe=o(" \u2014 "),uS=a("a"),lWe=o("BartConfig"),iWe=o(" (BART model)"),dWe=l(),qf=a("li"),qte=a("strong"),cWe=o("beit"),fWe=o(" \u2014 "),bS=a("a"),mWe=o("BeitConfig"),gWe=o(" (BEiT model)"),hWe=l(),jf=a("li"),jte=a("strong"),pWe=o("bert"),_We=o(" \u2014 "),vS=a("a"),uWe=o("BertConfig"),bWe=o(" (BERT model)"),vWe=l(),Df=a("li"),Dte=a("strong"),FWe=o("bert-generation"),TWe=o(" \u2014 "),FS=a("a"),MWe=o("BertGenerationConfig"),EWe=o(" (Bert Generation model)"),CWe=l(),Gf=a("li"),Gte=a("strong"),wWe=o("big_bird"),AWe=o(" \u2014 "),TS=a("a"),LWe=o("BigBirdConfig"),yWe=o(" (BigBird model)"),xWe=l(),Of=a("li"),Ote=a("strong"),$We=o("bigbird_pegasus"),kWe=o(" \u2014 "),MS=a("a"),SWe=o("BigBirdPegasusConfig"),RWe=o(" (BigBird-Pegasus model)"),PWe=l(),Vf=a("li"),Vte=a("strong"),BWe=o("blenderbot"),IWe=o(" \u2014 "),ES=a("a"),NWe=o("BlenderbotConfig"),qWe=o(" (Blenderbot model)"),jWe=l(),Xf=a("li"),Xte=a("strong"),DWe=o("blenderbot-small"),GWe=o(" \u2014 "),CS=a("a"),OWe=o("BlenderbotSmallConfig"),VWe=o(" (BlenderbotSmall model)"),XWe=l(),zf=a("li"),zte=a("strong"),zWe=o("bloom"),QWe=o(" \u2014 "),wS=a("a"),WWe=o("BloomConfig"),HWe=o(" (BLOOM model)"),UWe=l(),Qf=a("li"),Qte=a("strong"),JWe=o("camembert"),YWe=o(" \u2014 "),AS=a("a"),KWe=o("CamembertConfig"),ZWe=o(" (CamemBERT model)"),eHe=l(),Wf=a("li"),Wte=a("strong"),oHe=o("canine"),rHe=o(" \u2014 "),LS=a("a"),tHe=o("CanineConfig"),aHe=o(" (CANINE model)"),nHe=l(),Hf=a("li"),Hte=a("strong"),sHe=o("clip"),lHe=o(" \u2014 "),yS=a("a"),iHe=o("CLIPConfig"),dHe=o(" (CLIP model)"),cHe=l(),Uf=a("li"),Ute=a("strong"),fHe=o("codegen"),mHe=o(" \u2014 "),xS=a("a"),gHe=o("CodeGenConfig"),hHe=o(" (CodeGen model)"),pHe=l(),Jf=a("li"),Jte=a("strong"),_He=o("convbert"),uHe=o(" \u2014 "),$S=a("a"),bHe=o("ConvBertConfig"),vHe=o(" (ConvBERT model)"),FHe=l(),Yf=a("li"),Yte=a("strong"),THe=o("convnext"),MHe=o(" \u2014 "),kS=a("a"),EHe=o("ConvNextConfig"),CHe=o(" (ConvNeXT model)"),wHe=l(),Kf=a("li"),Kte=a("strong"),AHe=o("ctrl"),LHe=o(" \u2014 "),SS=a("a"),yHe=o("CTRLConfig"),xHe=o(" (CTRL model)"),$He=l(),Zf=a("li"),Zte=a("strong"),kHe=o("cvt"),SHe=o(" \u2014 "),RS=a("a"),RHe=o("CvtConfig"),PHe=o(" (CvT model)"),BHe=l(),em=a("li"),eae=a("strong"),IHe=o("data2vec-audio"),NHe=o(" \u2014 "),PS=a("a"),qHe=o("Data2VecAudioConfig"),jHe=o(" (Data2VecAudio model)"),DHe=l(),om=a("li"),oae=a("strong"),GHe=o("data2vec-text"),OHe=o(" \u2014 "),BS=a("a"),VHe=o("Data2VecTextConfig"),XHe=o(" (Data2VecText model)"),zHe=l(),rm=a("li"),rae=a("strong"),QHe=o("data2vec-vision"),WHe=o(" \u2014 "),IS=a("a"),HHe=o("Data2VecVisionConfig"),UHe=o(" (Data2VecVision model)"),JHe=l(),tm=a("li"),tae=a("strong"),YHe=o("deberta"),KHe=o(" \u2014 "),NS=a("a"),ZHe=o("DebertaConfig"),eUe=o(" (DeBERTa model)"),oUe=l(),am=a("li"),aae=a("strong"),rUe=o("deberta-v2"),tUe=o(" \u2014 "),qS=a("a"),aUe=o("DebertaV2Config"),nUe=o(" (DeBERTa-v2 model)"),sUe=l(),nm=a("li"),nae=a("strong"),lUe=o("decision_transformer"),iUe=o(" \u2014 "),jS=a("a"),dUe=o("DecisionTransformerConfig"),cUe=o(" (Decision Transformer model)"),fUe=l(),sm=a("li"),sae=a("strong"),mUe=o("deit"),gUe=o(" \u2014 "),DS=a("a"),hUe=o("DeiTConfig"),pUe=o(" (DeiT model)"),_Ue=l(),lm=a("li"),lae=a("strong"),uUe=o("detr"),bUe=o(" \u2014 "),GS=a("a"),vUe=o("DetrConfig"),FUe=o(" (DETR model)"),TUe=l(),im=a("li"),iae=a("strong"),MUe=o("distilbert"),EUe=o(" \u2014 "),OS=a("a"),CUe=o("DistilBertConfig"),wUe=o(" (DistilBERT model)"),AUe=l(),dm=a("li"),dae=a("strong"),LUe=o("dpr"),yUe=o(" \u2014 "),VS=a("a"),xUe=o("DPRConfig"),$Ue=o(" (DPR model)"),kUe=l(),cm=a("li"),cae=a("strong"),SUe=o("dpt"),RUe=o(" \u2014 "),XS=a("a"),PUe=o("DPTConfig"),BUe=o(" (DPT model)"),IUe=l(),fm=a("li"),fae=a("strong"),NUe=o("electra"),qUe=o(" \u2014 "),zS=a("a"),jUe=o("ElectraConfig"),DUe=o(" (ELECTRA model)"),GUe=l(),mm=a("li"),mae=a("strong"),OUe=o("encoder-decoder"),VUe=o(" \u2014 "),QS=a("a"),XUe=o("EncoderDecoderConfig"),zUe=o(" (Encoder decoder model)"),QUe=l(),gm=a("li"),gae=a("strong"),WUe=o("flaubert"),HUe=o(" \u2014 "),WS=a("a"),UUe=o("FlaubertConfig"),JUe=o(" (FlauBERT model)"),YUe=l(),hm=a("li"),hae=a("strong"),KUe=o("flava"),ZUe=o(" \u2014 "),HS=a("a"),eJe=o("FlavaConfig"),oJe=o(" (FLAVA model)"),rJe=l(),pm=a("li"),pae=a("strong"),tJe=o("fnet"),aJe=o(" \u2014 "),US=a("a"),nJe=o("FNetConfig"),sJe=o(" (FNet model)"),lJe=l(),_m=a("li"),_ae=a("strong"),iJe=o("fsmt"),dJe=o(" \u2014 "),JS=a("a"),cJe=o("FSMTConfig"),fJe=o(" (FairSeq Machine-Translation model)"),mJe=l(),um=a("li"),uae=a("strong"),gJe=o("funnel"),hJe=o(" \u2014 "),YS=a("a"),pJe=o("FunnelConfig"),_Je=o(" (Funnel Transformer model)"),uJe=l(),bm=a("li"),bae=a("strong"),bJe=o("glpn"),vJe=o(" \u2014 "),KS=a("a"),FJe=o("GLPNConfig"),TJe=o(" (GLPN model)"),MJe=l(),vm=a("li"),vae=a("strong"),EJe=o("gpt2"),CJe=o(" \u2014 "),ZS=a("a"),wJe=o("GPT2Config"),AJe=o(" (OpenAI GPT-2 model)"),LJe=l(),Fm=a("li"),Fae=a("strong"),yJe=o("gpt_neo"),xJe=o(" \u2014 "),eR=a("a"),$Je=o("GPTNeoConfig"),kJe=o(" (GPT Neo model)"),SJe=l(),Tm=a("li"),Tae=a("strong"),RJe=o("gpt_neox"),PJe=o(" \u2014 "),oR=a("a"),BJe=o("GPTNeoXConfig"),IJe=o(" (GPT NeoX model)"),NJe=l(),Mm=a("li"),Mae=a("strong"),qJe=o("gptj"),jJe=o(" \u2014 "),rR=a("a"),DJe=o("GPTJConfig"),GJe=o(" (GPT-J model)"),OJe=l(),Em=a("li"),Eae=a("strong"),VJe=o("hubert"),XJe=o(" \u2014 "),tR=a("a"),zJe=o("HubertConfig"),QJe=o(" (Hubert model)"),WJe=l(),Cm=a("li"),Cae=a("strong"),HJe=o("ibert"),UJe=o(" \u2014 "),aR=a("a"),JJe=o("IBertConfig"),YJe=o(" (I-BERT model)"),KJe=l(),wm=a("li"),wae=a("strong"),ZJe=o("imagegpt"),eYe=o(" \u2014 "),nR=a("a"),oYe=o("ImageGPTConfig"),rYe=o(" (ImageGPT model)"),tYe=l(),Am=a("li"),Aae=a("strong"),aYe=o("layoutlm"),nYe=o(" \u2014 "),sR=a("a"),sYe=o("LayoutLMConfig"),lYe=o(" (LayoutLM model)"),iYe=l(),Lm=a("li"),Lae=a("strong"),dYe=o("layoutlmv2"),cYe=o(" \u2014 "),lR=a("a"),fYe=o("LayoutLMv2Config"),mYe=o(" (LayoutLMv2 model)"),gYe=l(),ym=a("li"),yae=a("strong"),hYe=o("layoutlmv3"),pYe=o(" \u2014 "),iR=a("a"),_Ye=o("LayoutLMv3Config"),uYe=o(" (LayoutLMv3 model)"),bYe=l(),xm=a("li"),xae=a("strong"),vYe=o("led"),FYe=o(" \u2014 "),dR=a("a"),TYe=o("LEDConfig"),MYe=o(" (LED model)"),EYe=l(),$m=a("li"),$ae=a("strong"),CYe=o("levit"),wYe=o(" \u2014 "),cR=a("a"),AYe=o("LevitConfig"),LYe=o(" (LeViT model)"),yYe=l(),km=a("li"),kae=a("strong"),xYe=o("longformer"),$Ye=o(" \u2014 "),fR=a("a"),kYe=o("LongformerConfig"),SYe=o(" (Longformer model)"),RYe=l(),Sm=a("li"),Sae=a("strong"),PYe=o("longt5"),BYe=o(" \u2014 "),mR=a("a"),IYe=o("LongT5Config"),NYe=o(" (LongT5 model)"),qYe=l(),Rm=a("li"),Rae=a("strong"),jYe=o("luke"),DYe=o(" \u2014 "),gR=a("a"),GYe=o("LukeConfig"),OYe=o(" (LUKE model)"),VYe=l(),Pm=a("li"),Pae=a("strong"),XYe=o("lxmert"),zYe=o(" \u2014 "),hR=a("a"),QYe=o("LxmertConfig"),WYe=o(" (LXMERT model)"),HYe=l(),Bm=a("li"),Bae=a("strong"),UYe=o("m2m_100"),JYe=o(" \u2014 "),pR=a("a"),YYe=o("M2M100Config"),KYe=o(" (M2M100 model)"),ZYe=l(),Im=a("li"),Iae=a("strong"),eKe=o("marian"),oKe=o(" \u2014 "),_R=a("a"),rKe=o("MarianConfig"),tKe=o(" (Marian model)"),aKe=l(),Nm=a("li"),Nae=a("strong"),nKe=o("maskformer"),sKe=o(" \u2014 "),uR=a("a"),lKe=o("MaskFormerConfig"),iKe=o(" (MaskFormer model)"),dKe=l(),qm=a("li"),qae=a("strong"),cKe=o("mbart"),fKe=o(" \u2014 "),bR=a("a"),mKe=o("MBartConfig"),gKe=o(" (mBART model)"),hKe=l(),jm=a("li"),jae=a("strong"),pKe=o("mctct"),_Ke=o(" \u2014 "),vR=a("a"),uKe=o("MCTCTConfig"),bKe=o(" (M-CTC-T model)"),vKe=l(),Dm=a("li"),Dae=a("strong"),FKe=o("megatron-bert"),TKe=o(" \u2014 "),FR=a("a"),MKe=o("MegatronBertConfig"),EKe=o(" (Megatron-BERT model)"),CKe=l(),Gm=a("li"),Gae=a("strong"),wKe=o("mobilebert"),AKe=o(" \u2014 "),TR=a("a"),LKe=o("MobileBertConfig"),yKe=o(" (MobileBERT model)"),xKe=l(),Om=a("li"),Oae=a("strong"),$Ke=o("mpnet"),kKe=o(" \u2014 "),MR=a("a"),SKe=o("MPNetConfig"),RKe=o(" (MPNet model)"),PKe=l(),Vm=a("li"),Vae=a("strong"),BKe=o("mt5"),IKe=o(" \u2014 "),ER=a("a"),NKe=o("MT5Config"),qKe=o(" (MT5 model)"),jKe=l(),Xm=a("li"),Xae=a("strong"),DKe=o("nezha"),GKe=o(" \u2014 "),CR=a("a"),OKe=o("NezhaConfig"),VKe=o(" (Nezha model)"),XKe=l(),zm=a("li"),zae=a("strong"),zKe=o("nystromformer"),QKe=o(" \u2014 "),wR=a("a"),WKe=o("NystromformerConfig"),HKe=o(" (Nystr\xF6mformer model)"),UKe=l(),Qm=a("li"),Qae=a("strong"),JKe=o("openai-gpt"),YKe=o(" \u2014 "),AR=a("a"),KKe=o("OpenAIGPTConfig"),ZKe=o(" (OpenAI GPT model)"),eZe=l(),Wm=a("li"),Wae=a("strong"),oZe=o("opt"),rZe=o(" \u2014 "),LR=a("a"),tZe=o("OPTConfig"),aZe=o(" (OPT model)"),nZe=l(),Hm=a("li"),Hae=a("strong"),sZe=o("pegasus"),lZe=o(" \u2014 "),yR=a("a"),iZe=o("PegasusConfig"),dZe=o(" (Pegasus model)"),cZe=l(),Um=a("li"),Uae=a("strong"),fZe=o("perceiver"),mZe=o(" \u2014 "),xR=a("a"),gZe=o("PerceiverConfig"),hZe=o(" (Perceiver model)"),pZe=l(),Jm=a("li"),Jae=a("strong"),_Ze=o("plbart"),uZe=o(" \u2014 "),$R=a("a"),bZe=o("PLBartConfig"),vZe=o(" (PLBart model)"),FZe=l(),Ym=a("li"),Yae=a("strong"),TZe=o("poolformer"),MZe=o(" \u2014 "),kR=a("a"),EZe=o("PoolFormerConfig"),CZe=o(" (PoolFormer model)"),wZe=l(),Km=a("li"),Kae=a("strong"),AZe=o("prophetnet"),LZe=o(" \u2014 "),SR=a("a"),yZe=o("ProphetNetConfig"),xZe=o(" (ProphetNet model)"),$Ze=l(),Zm=a("li"),Zae=a("strong"),kZe=o("qdqbert"),SZe=o(" \u2014 "),RR=a("a"),RZe=o("QDQBertConfig"),PZe=o(" (QDQBert model)"),BZe=l(),eg=a("li"),ene=a("strong"),IZe=o("rag"),NZe=o(" \u2014 "),PR=a("a"),qZe=o("RagConfig"),jZe=o(" (RAG model)"),DZe=l(),og=a("li"),one=a("strong"),GZe=o("realm"),OZe=o(" \u2014 "),BR=a("a"),VZe=o("RealmConfig"),XZe=o(" (REALM model)"),zZe=l(),rg=a("li"),rne=a("strong"),QZe=o("reformer"),WZe=o(" \u2014 "),IR=a("a"),HZe=o("ReformerConfig"),UZe=o(" (Reformer model)"),JZe=l(),tg=a("li"),tne=a("strong"),YZe=o("regnet"),KZe=o(" \u2014 "),NR=a("a"),ZZe=o("RegNetConfig"),eeo=o(" (RegNet model)"),oeo=l(),ag=a("li"),ane=a("strong"),reo=o("rembert"),teo=o(" \u2014 "),qR=a("a"),aeo=o("RemBertConfig"),neo=o(" (RemBERT model)"),seo=l(),ng=a("li"),nne=a("strong"),leo=o("resnet"),ieo=o(" \u2014 "),jR=a("a"),deo=o("ResNetConfig"),ceo=o(" (ResNet model)"),feo=l(),sg=a("li"),sne=a("strong"),meo=o("retribert"),geo=o(" \u2014 "),DR=a("a"),heo=o("RetriBertConfig"),peo=o(" (RetriBERT model)"),_eo=l(),lg=a("li"),lne=a("strong"),ueo=o("roberta"),beo=o(" \u2014 "),GR=a("a"),veo=o("RobertaConfig"),Feo=o(" (RoBERTa model)"),Teo=l(),ig=a("li"),ine=a("strong"),Meo=o("roformer"),Eeo=o(" \u2014 "),OR=a("a"),Ceo=o("RoFormerConfig"),weo=o(" (RoFormer model)"),Aeo=l(),dg=a("li"),dne=a("strong"),Leo=o("segformer"),yeo=o(" \u2014 "),VR=a("a"),xeo=o("SegformerConfig"),$eo=o(" (SegFormer model)"),keo=l(),cg=a("li"),cne=a("strong"),Seo=o("sew"),Reo=o(" \u2014 "),XR=a("a"),Peo=o("SEWConfig"),Beo=o(" (SEW model)"),Ieo=l(),fg=a("li"),fne=a("strong"),Neo=o("sew-d"),qeo=o(" \u2014 "),zR=a("a"),jeo=o("SEWDConfig"),Deo=o(" (SEW-D model)"),Geo=l(),mg=a("li"),mne=a("strong"),Oeo=o("speech-encoder-decoder"),Veo=o(" \u2014 "),QR=a("a"),Xeo=o("SpeechEncoderDecoderConfig"),zeo=o(" (Speech Encoder decoder model)"),Qeo=l(),gg=a("li"),gne=a("strong"),Weo=o("speech_to_text"),Heo=o(" \u2014 "),WR=a("a"),Ueo=o("Speech2TextConfig"),Jeo=o(" (Speech2Text model)"),Yeo=l(),hg=a("li"),hne=a("strong"),Keo=o("speech_to_text_2"),Zeo=o(" \u2014 "),HR=a("a"),eoo=o("Speech2Text2Config"),ooo=o(" (Speech2Text2 model)"),roo=l(),pg=a("li"),pne=a("strong"),too=o("splinter"),aoo=o(" \u2014 "),UR=a("a"),noo=o("SplinterConfig"),soo=o(" (Splinter model)"),loo=l(),_g=a("li"),_ne=a("strong"),ioo=o("squeezebert"),doo=o(" \u2014 "),JR=a("a"),coo=o("SqueezeBertConfig"),foo=o(" (SqueezeBERT model)"),moo=l(),ug=a("li"),une=a("strong"),goo=o("swin"),hoo=o(" \u2014 "),YR=a("a"),poo=o("SwinConfig"),_oo=o(" (Swin Transformer model)"),uoo=l(),bg=a("li"),bne=a("strong"),boo=o("t5"),voo=o(" \u2014 "),KR=a("a"),Foo=o("T5Config"),Too=o(" (T5 model)"),Moo=l(),vg=a("li"),vne=a("strong"),Eoo=o("tapas"),Coo=o(" \u2014 "),ZR=a("a"),woo=o("TapasConfig"),Aoo=o(" (TAPAS model)"),Loo=l(),Fg=a("li"),Fne=a("strong"),yoo=o("trajectory_transformer"),xoo=o(" \u2014 "),eP=a("a"),$oo=o("TrajectoryTransformerConfig"),koo=o(" (Trajectory Transformer model)"),Soo=l(),Tg=a("li"),Tne=a("strong"),Roo=o("transfo-xl"),Poo=o(" \u2014 "),oP=a("a"),Boo=o("TransfoXLConfig"),Ioo=o(" (Transformer-XL model)"),Noo=l(),Mg=a("li"),Mne=a("strong"),qoo=o("trocr"),joo=o(" \u2014 "),rP=a("a"),Doo=o("TrOCRConfig"),Goo=o(" (TrOCR model)"),Ooo=l(),Eg=a("li"),Ene=a("strong"),Voo=o("unispeech"),Xoo=o(" \u2014 "),tP=a("a"),zoo=o("UniSpeechConfig"),Qoo=o(" (UniSpeech model)"),Woo=l(),Cg=a("li"),Cne=a("strong"),Hoo=o("unispeech-sat"),Uoo=o(" \u2014 "),aP=a("a"),Joo=o("UniSpeechSatConfig"),Yoo=o(" (UniSpeechSat model)"),Koo=l(),wg=a("li"),wne=a("strong"),Zoo=o("van"),ero=o(" \u2014 "),nP=a("a"),oro=o("VanConfig"),rro=o(" (VAN model)"),tro=l(),Ag=a("li"),Ane=a("strong"),aro=o("vilt"),nro=o(" \u2014 "),sP=a("a"),sro=o("ViltConfig"),lro=o(" (ViLT model)"),iro=l(),Lg=a("li"),Lne=a("strong"),dro=o("vision-encoder-decoder"),cro=o(" \u2014 "),lP=a("a"),fro=o("VisionEncoderDecoderConfig"),mro=o(" (Vision Encoder decoder model)"),gro=l(),yg=a("li"),yne=a("strong"),hro=o("vision-text-dual-encoder"),pro=o(" \u2014 "),iP=a("a"),_ro=o("VisionTextDualEncoderConfig"),uro=o(" (VisionTextDualEncoder model)"),bro=l(),xg=a("li"),xne=a("strong"),vro=o("visual_bert"),Fro=o(" \u2014 "),dP=a("a"),Tro=o("VisualBertConfig"),Mro=o(" (VisualBERT model)"),Ero=l(),$g=a("li"),$ne=a("strong"),Cro=o("vit"),wro=o(" \u2014 "),cP=a("a"),Aro=o("ViTConfig"),Lro=o(" (ViT model)"),yro=l(),kg=a("li"),kne=a("strong"),xro=o("vit_mae"),$ro=o(" \u2014 "),fP=a("a"),kro=o("ViTMAEConfig"),Sro=o(" (ViTMAE model)"),Rro=l(),Sg=a("li"),Sne=a("strong"),Pro=o("wav2vec2"),Bro=o(" \u2014 "),mP=a("a"),Iro=o("Wav2Vec2Config"),Nro=o(" (Wav2Vec2 model)"),qro=l(),Rg=a("li"),Rne=a("strong"),jro=o("wav2vec2-conformer"),Dro=o(" \u2014 "),gP=a("a"),Gro=o("Wav2Vec2ConformerConfig"),Oro=o(" (Wav2Vec2-Conformer model)"),Vro=l(),Pg=a("li"),Pne=a("strong"),Xro=o("wavlm"),zro=o(" \u2014 "),hP=a("a"),Qro=o("WavLMConfig"),Wro=o(" (WavLM model)"),Hro=l(),Bg=a("li"),Bne=a("strong"),Uro=o("xglm"),Jro=o(" \u2014 "),pP=a("a"),Yro=o("XGLMConfig"),Kro=o(" (XGLM model)"),Zro=l(),Ig=a("li"),Ine=a("strong"),eto=o("xlm"),oto=o(" \u2014 "),_P=a("a"),rto=o("XLMConfig"),tto=o(" (XLM model)"),ato=l(),Ng=a("li"),Nne=a("strong"),nto=o("xlm-prophetnet"),sto=o(" \u2014 "),uP=a("a"),lto=o("XLMProphetNetConfig"),ito=o(" (XLM-ProphetNet model)"),dto=l(),qg=a("li"),qne=a("strong"),cto=o("xlm-roberta"),fto=o(" \u2014 "),bP=a("a"),mto=o("XLMRobertaConfig"),gto=o(" (XLM-RoBERTa model)"),hto=l(),jg=a("li"),jne=a("strong"),pto=o("xlm-roberta-xl"),_to=o(" \u2014 "),vP=a("a"),uto=o("XLMRobertaXLConfig"),bto=o(" (XLM-RoBERTa-XL model)"),vto=l(),Dg=a("li"),Dne=a("strong"),Fto=o("xlnet"),Tto=o(" \u2014 "),FP=a("a"),Mto=o("XLNetConfig"),Eto=o(" (XLNet model)"),Cto=l(),Gg=a("li"),Gne=a("strong"),wto=o("yolos"),Ato=o(" \u2014 "),TP=a("a"),Lto=o("YolosConfig"),yto=o(" (YOLOS model)"),xto=l(),Og=a("li"),One=a("strong"),$to=o("yoso"),kto=o(" \u2014 "),MP=a("a"),Sto=o("YosoConfig"),Rto=o(" (YOSO model)"),Pto=l(),F(Vg.$$.fragment),Bto=l(),Xg=a("div"),F(O7.$$.fragment),Ito=l(),Vne=a("p"),Nto=o("Register a new configuration for this class."),uOe=l(),Si=a("h2"),zg=a("a"),Xne=a("span"),F(V7.$$.fragment),qto=l(),zne=a("span"),jto=o("AutoTokenizer"),bOe=l(),Ao=a("div"),F(X7.$$.fragment),Dto=l(),z7=a("p"),Gto=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),EP=a("a"),Oto=o("AutoTokenizer.from_pretrained()"),Vto=o(" class method."),Xto=l(),Q7=a("p"),zto=o("This class cannot be instantiated directly using "),Qne=a("code"),Qto=o("__init__()"),Wto=o(" (throws an error)."),Hto=l(),Lr=a("div"),F(W7.$$.fragment),Uto=l(),Wne=a("p"),Jto=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Yto=l(),ka=a("p"),Kto=o("The tokenizer class to instantiate is selected based on the "),Hne=a("code"),Zto=o("model_type"),eao=o(` property of the config object (either
passed as an argument or loaded from `),Une=a("code"),oao=o("pretrained_model_name_or_path"),rao=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jne=a("code"),tao=o("pretrained_model_name_or_path"),aao=o(":"),nao=l(),k=a("ul"),qn=a("li"),Yne=a("strong"),sao=o("albert"),lao=o(" \u2014 "),CP=a("a"),iao=o("AlbertTokenizer"),dao=o(" or "),wP=a("a"),cao=o("AlbertTokenizerFast"),fao=o(" (ALBERT model)"),mao=l(),jn=a("li"),Kne=a("strong"),gao=o("bart"),hao=o(" \u2014 "),AP=a("a"),pao=o("BartTokenizer"),_ao=o(" or "),LP=a("a"),uao=o("BartTokenizerFast"),bao=o(" (BART model)"),vao=l(),Dn=a("li"),Zne=a("strong"),Fao=o("barthez"),Tao=o(" \u2014 "),yP=a("a"),Mao=o("BarthezTokenizer"),Eao=o(" or "),xP=a("a"),Cao=o("BarthezTokenizerFast"),wao=o(" (BARThez model)"),Aao=l(),Qg=a("li"),ese=a("strong"),Lao=o("bartpho"),yao=o(" \u2014 "),$P=a("a"),xao=o("BartphoTokenizer"),$ao=o(" (BARTpho model)"),kao=l(),Gn=a("li"),ose=a("strong"),Sao=o("bert"),Rao=o(" \u2014 "),kP=a("a"),Pao=o("BertTokenizer"),Bao=o(" or "),SP=a("a"),Iao=o("BertTokenizerFast"),Nao=o(" (BERT model)"),qao=l(),Wg=a("li"),rse=a("strong"),jao=o("bert-generation"),Dao=o(" \u2014 "),RP=a("a"),Gao=o("BertGenerationTokenizer"),Oao=o(" (Bert Generation model)"),Vao=l(),Hg=a("li"),tse=a("strong"),Xao=o("bert-japanese"),zao=o(" \u2014 "),PP=a("a"),Qao=o("BertJapaneseTokenizer"),Wao=o(" (BertJapanese model)"),Hao=l(),Ug=a("li"),ase=a("strong"),Uao=o("bertweet"),Jao=o(" \u2014 "),BP=a("a"),Yao=o("BertweetTokenizer"),Kao=o(" (BERTweet model)"),Zao=l(),On=a("li"),nse=a("strong"),eno=o("big_bird"),ono=o(" \u2014 "),IP=a("a"),rno=o("BigBirdTokenizer"),tno=o(" or "),NP=a("a"),ano=o("BigBirdTokenizerFast"),nno=o(" (BigBird model)"),sno=l(),Vn=a("li"),sse=a("strong"),lno=o("bigbird_pegasus"),ino=o(" \u2014 "),qP=a("a"),dno=o("PegasusTokenizer"),cno=o(" or "),jP=a("a"),fno=o("PegasusTokenizerFast"),mno=o(" (BigBird-Pegasus model)"),gno=l(),Xn=a("li"),lse=a("strong"),hno=o("blenderbot"),pno=o(" \u2014 "),DP=a("a"),_no=o("BlenderbotTokenizer"),uno=o(" or "),GP=a("a"),bno=o("BlenderbotTokenizerFast"),vno=o(" (Blenderbot model)"),Fno=l(),Jg=a("li"),ise=a("strong"),Tno=o("blenderbot-small"),Mno=o(" \u2014 "),OP=a("a"),Eno=o("BlenderbotSmallTokenizer"),Cno=o(" (BlenderbotSmall model)"),wno=l(),Yg=a("li"),dse=a("strong"),Ano=o("bloom"),Lno=o(" \u2014 "),VP=a("a"),yno=o("BloomTokenizerFast"),xno=o(" (BLOOM model)"),$no=l(),Kg=a("li"),cse=a("strong"),kno=o("byt5"),Sno=o(" \u2014 "),XP=a("a"),Rno=o("ByT5Tokenizer"),Pno=o(" (ByT5 model)"),Bno=l(),zn=a("li"),fse=a("strong"),Ino=o("camembert"),Nno=o(" \u2014 "),zP=a("a"),qno=o("CamembertTokenizer"),jno=o(" or "),QP=a("a"),Dno=o("CamembertTokenizerFast"),Gno=o(" (CamemBERT model)"),Ono=l(),Zg=a("li"),mse=a("strong"),Vno=o("canine"),Xno=o(" \u2014 "),WP=a("a"),zno=o("CanineTokenizer"),Qno=o(" (CANINE model)"),Wno=l(),Qn=a("li"),gse=a("strong"),Hno=o("clip"),Uno=o(" \u2014 "),HP=a("a"),Jno=o("CLIPTokenizer"),Yno=o(" or "),UP=a("a"),Kno=o("CLIPTokenizerFast"),Zno=o(" (CLIP model)"),eso=l(),Wn=a("li"),hse=a("strong"),oso=o("codegen"),rso=o(" \u2014 "),JP=a("a"),tso=o("CodeGenTokenizer"),aso=o(" or "),YP=a("a"),nso=o("CodeGenTokenizerFast"),sso=o(" (CodeGen model)"),lso=l(),Hn=a("li"),pse=a("strong"),iso=o("convbert"),dso=o(" \u2014 "),KP=a("a"),cso=o("ConvBertTokenizer"),fso=o(" or "),ZP=a("a"),mso=o("ConvBertTokenizerFast"),gso=o(" (ConvBERT model)"),hso=l(),Un=a("li"),_se=a("strong"),pso=o("cpm"),_so=o(" \u2014 "),eB=a("a"),uso=o("CpmTokenizer"),bso=o(" or "),oB=a("a"),vso=o("CpmTokenizerFast"),Fso=o(" (CPM model)"),Tso=l(),eh=a("li"),use=a("strong"),Mso=o("ctrl"),Eso=o(" \u2014 "),rB=a("a"),Cso=o("CTRLTokenizer"),wso=o(" (CTRL model)"),Aso=l(),Jn=a("li"),bse=a("strong"),Lso=o("data2vec-text"),yso=o(" \u2014 "),tB=a("a"),xso=o("RobertaTokenizer"),$so=o(" or "),aB=a("a"),kso=o("RobertaTokenizerFast"),Sso=o(" (Data2VecText model)"),Rso=l(),Yn=a("li"),vse=a("strong"),Pso=o("deberta"),Bso=o(" \u2014 "),nB=a("a"),Iso=o("DebertaTokenizer"),Nso=o(" or "),sB=a("a"),qso=o("DebertaTokenizerFast"),jso=o(" (DeBERTa model)"),Dso=l(),Kn=a("li"),Fse=a("strong"),Gso=o("deberta-v2"),Oso=o(" \u2014 "),lB=a("a"),Vso=o("DebertaV2Tokenizer"),Xso=o(" or "),iB=a("a"),zso=o("DebertaV2TokenizerFast"),Qso=o(" (DeBERTa-v2 model)"),Wso=l(),Zn=a("li"),Tse=a("strong"),Hso=o("distilbert"),Uso=o(" \u2014 "),dB=a("a"),Jso=o("DistilBertTokenizer"),Yso=o(" or "),cB=a("a"),Kso=o("DistilBertTokenizerFast"),Zso=o(" (DistilBERT model)"),elo=l(),es=a("li"),Mse=a("strong"),olo=o("dpr"),rlo=o(" \u2014 "),fB=a("a"),tlo=o("DPRQuestionEncoderTokenizer"),alo=o(" or "),mB=a("a"),nlo=o("DPRQuestionEncoderTokenizerFast"),slo=o(" (DPR model)"),llo=l(),os=a("li"),Ese=a("strong"),ilo=o("electra"),dlo=o(" \u2014 "),gB=a("a"),clo=o("ElectraTokenizer"),flo=o(" or "),hB=a("a"),mlo=o("ElectraTokenizerFast"),glo=o(" (ELECTRA model)"),hlo=l(),oh=a("li"),Cse=a("strong"),plo=o("flaubert"),_lo=o(" \u2014 "),pB=a("a"),ulo=o("FlaubertTokenizer"),blo=o(" (FlauBERT model)"),vlo=l(),rs=a("li"),wse=a("strong"),Flo=o("fnet"),Tlo=o(" \u2014 "),_B=a("a"),Mlo=o("FNetTokenizer"),Elo=o(" or "),uB=a("a"),Clo=o("FNetTokenizerFast"),wlo=o(" (FNet model)"),Alo=l(),rh=a("li"),Ase=a("strong"),Llo=o("fsmt"),ylo=o(" \u2014 "),bB=a("a"),xlo=o("FSMTTokenizer"),$lo=o(" (FairSeq Machine-Translation model)"),klo=l(),ts=a("li"),Lse=a("strong"),Slo=o("funnel"),Rlo=o(" \u2014 "),vB=a("a"),Plo=o("FunnelTokenizer"),Blo=o(" or "),FB=a("a"),Ilo=o("FunnelTokenizerFast"),Nlo=o(" (Funnel Transformer model)"),qlo=l(),as=a("li"),yse=a("strong"),jlo=o("gpt2"),Dlo=o(" \u2014 "),TB=a("a"),Glo=o("GPT2Tokenizer"),Olo=o(" or "),MB=a("a"),Vlo=o("GPT2TokenizerFast"),Xlo=o(" (OpenAI GPT-2 model)"),zlo=l(),ns=a("li"),xse=a("strong"),Qlo=o("gpt_neo"),Wlo=o(" \u2014 "),EB=a("a"),Hlo=o("GPT2Tokenizer"),Ulo=o(" or "),CB=a("a"),Jlo=o("GPT2TokenizerFast"),Ylo=o(" (GPT Neo model)"),Klo=l(),th=a("li"),$se=a("strong"),Zlo=o("gpt_neox"),eio=o(" \u2014 "),wB=a("a"),oio=o("GPTNeoXTokenizerFast"),rio=o(" (GPT NeoX model)"),tio=l(),ss=a("li"),kse=a("strong"),aio=o("gptj"),nio=o(" \u2014 "),AB=a("a"),sio=o("GPT2Tokenizer"),lio=o(" or "),LB=a("a"),iio=o("GPT2TokenizerFast"),dio=o(" (GPT-J model)"),cio=l(),ls=a("li"),Sse=a("strong"),fio=o("herbert"),mio=o(" \u2014 "),yB=a("a"),gio=o("HerbertTokenizer"),hio=o(" or "),xB=a("a"),pio=o("HerbertTokenizerFast"),_io=o(" (HerBERT model)"),uio=l(),ah=a("li"),Rse=a("strong"),bio=o("hubert"),vio=o(" \u2014 "),$B=a("a"),Fio=o("Wav2Vec2CTCTokenizer"),Tio=o(" (Hubert model)"),Mio=l(),is=a("li"),Pse=a("strong"),Eio=o("ibert"),Cio=o(" \u2014 "),kB=a("a"),wio=o("RobertaTokenizer"),Aio=o(" or "),SB=a("a"),Lio=o("RobertaTokenizerFast"),yio=o(" (I-BERT model)"),xio=l(),ds=a("li"),Bse=a("strong"),$io=o("layoutlm"),kio=o(" \u2014 "),RB=a("a"),Sio=o("LayoutLMTokenizer"),Rio=o(" or "),PB=a("a"),Pio=o("LayoutLMTokenizerFast"),Bio=o(" (LayoutLM model)"),Iio=l(),cs=a("li"),Ise=a("strong"),Nio=o("layoutlmv2"),qio=o(" \u2014 "),BB=a("a"),jio=o("LayoutLMv2Tokenizer"),Dio=o(" or "),IB=a("a"),Gio=o("LayoutLMv2TokenizerFast"),Oio=o(" (LayoutLMv2 model)"),Vio=l(),fs=a("li"),Nse=a("strong"),Xio=o("layoutlmv3"),zio=o(" \u2014 "),NB=a("a"),Qio=o("LayoutLMv3Tokenizer"),Wio=o(" or "),qB=a("a"),Hio=o("LayoutLMv3TokenizerFast"),Uio=o(" (LayoutLMv3 model)"),Jio=l(),ms=a("li"),qse=a("strong"),Yio=o("layoutxlm"),Kio=o(" \u2014 "),jB=a("a"),Zio=o("LayoutXLMTokenizer"),edo=o(" or "),DB=a("a"),odo=o("LayoutXLMTokenizerFast"),rdo=o(" (LayoutXLM model)"),tdo=l(),gs=a("li"),jse=a("strong"),ado=o("led"),ndo=o(" \u2014 "),GB=a("a"),sdo=o("LEDTokenizer"),ldo=o(" or "),OB=a("a"),ido=o("LEDTokenizerFast"),ddo=o(" (LED model)"),cdo=l(),hs=a("li"),Dse=a("strong"),fdo=o("longformer"),mdo=o(" \u2014 "),VB=a("a"),gdo=o("LongformerTokenizer"),hdo=o(" or "),XB=a("a"),pdo=o("LongformerTokenizerFast"),_do=o(" (Longformer model)"),udo=l(),ps=a("li"),Gse=a("strong"),bdo=o("longt5"),vdo=o(" \u2014 "),zB=a("a"),Fdo=o("T5Tokenizer"),Tdo=o(" or "),QB=a("a"),Mdo=o("T5TokenizerFast"),Edo=o(" (LongT5 model)"),Cdo=l(),nh=a("li"),Ose=a("strong"),wdo=o("luke"),Ado=o(" \u2014 "),WB=a("a"),Ldo=o("LukeTokenizer"),ydo=o(" (LUKE model)"),xdo=l(),_s=a("li"),Vse=a("strong"),$do=o("lxmert"),kdo=o(" \u2014 "),HB=a("a"),Sdo=o("LxmertTokenizer"),Rdo=o(" or "),UB=a("a"),Pdo=o("LxmertTokenizerFast"),Bdo=o(" (LXMERT model)"),Ido=l(),sh=a("li"),Xse=a("strong"),Ndo=o("m2m_100"),qdo=o(" \u2014 "),JB=a("a"),jdo=o("M2M100Tokenizer"),Ddo=o(" (M2M100 model)"),Gdo=l(),lh=a("li"),zse=a("strong"),Odo=o("marian"),Vdo=o(" \u2014 "),YB=a("a"),Xdo=o("MarianTokenizer"),zdo=o(" (Marian model)"),Qdo=l(),us=a("li"),Qse=a("strong"),Wdo=o("mbart"),Hdo=o(" \u2014 "),KB=a("a"),Udo=o("MBartTokenizer"),Jdo=o(" or "),ZB=a("a"),Ydo=o("MBartTokenizerFast"),Kdo=o(" (mBART model)"),Zdo=l(),bs=a("li"),Wse=a("strong"),eco=o("mbart50"),oco=o(" \u2014 "),eI=a("a"),rco=o("MBart50Tokenizer"),tco=o(" or "),oI=a("a"),aco=o("MBart50TokenizerFast"),nco=o(" (mBART-50 model)"),sco=l(),vs=a("li"),Hse=a("strong"),lco=o("megatron-bert"),ico=o(" \u2014 "),rI=a("a"),dco=o("BertTokenizer"),cco=o(" or "),tI=a("a"),fco=o("BertTokenizerFast"),mco=o(" (Megatron-BERT model)"),gco=l(),ih=a("li"),Use=a("strong"),hco=o("mluke"),pco=o(" \u2014 "),aI=a("a"),_co=o("MLukeTokenizer"),uco=o(" (mLUKE model)"),bco=l(),Fs=a("li"),Jse=a("strong"),vco=o("mobilebert"),Fco=o(" \u2014 "),nI=a("a"),Tco=o("MobileBertTokenizer"),Mco=o(" or "),sI=a("a"),Eco=o("MobileBertTokenizerFast"),Cco=o(" (MobileBERT model)"),wco=l(),Ts=a("li"),Yse=a("strong"),Aco=o("mpnet"),Lco=o(" \u2014 "),lI=a("a"),yco=o("MPNetTokenizer"),xco=o(" or "),iI=a("a"),$co=o("MPNetTokenizerFast"),kco=o(" (MPNet model)"),Sco=l(),Ms=a("li"),Kse=a("strong"),Rco=o("mt5"),Pco=o(" \u2014 "),dI=a("a"),Bco=o("MT5Tokenizer"),Ico=o(" or "),cI=a("a"),Nco=o("MT5TokenizerFast"),qco=o(" (MT5 model)"),jco=l(),Es=a("li"),Zse=a("strong"),Dco=o("nezha"),Gco=o(" \u2014 "),fI=a("a"),Oco=o("BertTokenizer"),Vco=o(" or "),mI=a("a"),Xco=o("BertTokenizerFast"),zco=o(" (Nezha model)"),Qco=l(),Cs=a("li"),ele=a("strong"),Wco=o("nystromformer"),Hco=o(" \u2014 "),gI=a("a"),Uco=o("AlbertTokenizer"),Jco=o(" or "),hI=a("a"),Yco=o("AlbertTokenizerFast"),Kco=o(" (Nystr\xF6mformer model)"),Zco=l(),ws=a("li"),ole=a("strong"),efo=o("openai-gpt"),ofo=o(" \u2014 "),pI=a("a"),rfo=o("OpenAIGPTTokenizer"),tfo=o(" or "),_I=a("a"),afo=o("OpenAIGPTTokenizerFast"),nfo=o(" (OpenAI GPT model)"),sfo=l(),dh=a("li"),rle=a("strong"),lfo=o("opt"),ifo=o(" \u2014 "),uI=a("a"),dfo=o("GPT2Tokenizer"),cfo=o(" (OPT model)"),ffo=l(),As=a("li"),tle=a("strong"),mfo=o("pegasus"),gfo=o(" \u2014 "),bI=a("a"),hfo=o("PegasusTokenizer"),pfo=o(" or "),vI=a("a"),_fo=o("PegasusTokenizerFast"),ufo=o(" (Pegasus model)"),bfo=l(),ch=a("li"),ale=a("strong"),vfo=o("perceiver"),Ffo=o(" \u2014 "),FI=a("a"),Tfo=o("PerceiverTokenizer"),Mfo=o(" (Perceiver model)"),Efo=l(),fh=a("li"),nle=a("strong"),Cfo=o("phobert"),wfo=o(" \u2014 "),TI=a("a"),Afo=o("PhobertTokenizer"),Lfo=o(" (PhoBERT model)"),yfo=l(),mh=a("li"),sle=a("strong"),xfo=o("plbart"),$fo=o(" \u2014 "),MI=a("a"),kfo=o("PLBartTokenizer"),Sfo=o(" (PLBart model)"),Rfo=l(),gh=a("li"),lle=a("strong"),Pfo=o("prophetnet"),Bfo=o(" \u2014 "),EI=a("a"),Ifo=o("ProphetNetTokenizer"),Nfo=o(" (ProphetNet model)"),qfo=l(),Ls=a("li"),ile=a("strong"),jfo=o("qdqbert"),Dfo=o(" \u2014 "),CI=a("a"),Gfo=o("BertTokenizer"),Ofo=o(" or "),wI=a("a"),Vfo=o("BertTokenizerFast"),Xfo=o(" (QDQBert model)"),zfo=l(),hh=a("li"),dle=a("strong"),Qfo=o("rag"),Wfo=o(" \u2014 "),AI=a("a"),Hfo=o("RagTokenizer"),Ufo=o(" (RAG model)"),Jfo=l(),ys=a("li"),cle=a("strong"),Yfo=o("realm"),Kfo=o(" \u2014 "),LI=a("a"),Zfo=o("RealmTokenizer"),emo=o(" or "),yI=a("a"),omo=o("RealmTokenizerFast"),rmo=o(" (REALM model)"),tmo=l(),xs=a("li"),fle=a("strong"),amo=o("reformer"),nmo=o(" \u2014 "),xI=a("a"),smo=o("ReformerTokenizer"),lmo=o(" or "),$I=a("a"),imo=o("ReformerTokenizerFast"),dmo=o(" (Reformer model)"),cmo=l(),$s=a("li"),mle=a("strong"),fmo=o("rembert"),mmo=o(" \u2014 "),kI=a("a"),gmo=o("RemBertTokenizer"),hmo=o(" or "),SI=a("a"),pmo=o("RemBertTokenizerFast"),_mo=o(" (RemBERT model)"),umo=l(),ks=a("li"),gle=a("strong"),bmo=o("retribert"),vmo=o(" \u2014 "),RI=a("a"),Fmo=o("RetriBertTokenizer"),Tmo=o(" or "),PI=a("a"),Mmo=o("RetriBertTokenizerFast"),Emo=o(" (RetriBERT model)"),Cmo=l(),Ss=a("li"),hle=a("strong"),wmo=o("roberta"),Amo=o(" \u2014 "),BI=a("a"),Lmo=o("RobertaTokenizer"),ymo=o(" or "),II=a("a"),xmo=o("RobertaTokenizerFast"),$mo=o(" (RoBERTa model)"),kmo=l(),Rs=a("li"),ple=a("strong"),Smo=o("roformer"),Rmo=o(" \u2014 "),NI=a("a"),Pmo=o("RoFormerTokenizer"),Bmo=o(" or "),qI=a("a"),Imo=o("RoFormerTokenizerFast"),Nmo=o(" (RoFormer model)"),qmo=l(),ph=a("li"),_le=a("strong"),jmo=o("speech_to_text"),Dmo=o(" \u2014 "),jI=a("a"),Gmo=o("Speech2TextTokenizer"),Omo=o(" (Speech2Text model)"),Vmo=l(),_h=a("li"),ule=a("strong"),Xmo=o("speech_to_text_2"),zmo=o(" \u2014 "),DI=a("a"),Qmo=o("Speech2Text2Tokenizer"),Wmo=o(" (Speech2Text2 model)"),Hmo=l(),Ps=a("li"),ble=a("strong"),Umo=o("splinter"),Jmo=o(" \u2014 "),GI=a("a"),Ymo=o("SplinterTokenizer"),Kmo=o(" or "),OI=a("a"),Zmo=o("SplinterTokenizerFast"),ego=o(" (Splinter model)"),ogo=l(),Bs=a("li"),vle=a("strong"),rgo=o("squeezebert"),tgo=o(" \u2014 "),VI=a("a"),ago=o("SqueezeBertTokenizer"),ngo=o(" or "),XI=a("a"),sgo=o("SqueezeBertTokenizerFast"),lgo=o(" (SqueezeBERT model)"),igo=l(),Is=a("li"),Fle=a("strong"),dgo=o("t5"),cgo=o(" \u2014 "),zI=a("a"),fgo=o("T5Tokenizer"),mgo=o(" or "),QI=a("a"),ggo=o("T5TokenizerFast"),hgo=o(" (T5 model)"),pgo=l(),uh=a("li"),Tle=a("strong"),_go=o("tapas"),ugo=o(" \u2014 "),WI=a("a"),bgo=o("TapasTokenizer"),vgo=o(" (TAPAS model)"),Fgo=l(),bh=a("li"),Mle=a("strong"),Tgo=o("tapex"),Mgo=o(" \u2014 "),HI=a("a"),Ego=o("TapexTokenizer"),Cgo=o(" (TAPEX model)"),wgo=l(),vh=a("li"),Ele=a("strong"),Ago=o("transfo-xl"),Lgo=o(" \u2014 "),UI=a("a"),ygo=o("TransfoXLTokenizer"),xgo=o(" (Transformer-XL model)"),$go=l(),Ns=a("li"),Cle=a("strong"),kgo=o("vilt"),Sgo=o(" \u2014 "),JI=a("a"),Rgo=o("BertTokenizer"),Pgo=o(" or "),YI=a("a"),Bgo=o("BertTokenizerFast"),Igo=o(" (ViLT model)"),Ngo=l(),qs=a("li"),wle=a("strong"),qgo=o("visual_bert"),jgo=o(" \u2014 "),KI=a("a"),Dgo=o("BertTokenizer"),Ggo=o(" or "),ZI=a("a"),Ogo=o("BertTokenizerFast"),Vgo=o(" (VisualBERT model)"),Xgo=l(),Fh=a("li"),Ale=a("strong"),zgo=o("wav2vec2"),Qgo=o(" \u2014 "),eN=a("a"),Wgo=o("Wav2Vec2CTCTokenizer"),Hgo=o(" (Wav2Vec2 model)"),Ugo=l(),Th=a("li"),Lle=a("strong"),Jgo=o("wav2vec2-conformer"),Ygo=o(" \u2014 "),oN=a("a"),Kgo=o("Wav2Vec2CTCTokenizer"),Zgo=o(" (Wav2Vec2-Conformer model)"),eho=l(),Mh=a("li"),yle=a("strong"),oho=o("wav2vec2_phoneme"),rho=o(" \u2014 "),rN=a("a"),tho=o("Wav2Vec2PhonemeCTCTokenizer"),aho=o(" (Wav2Vec2Phoneme model)"),nho=l(),js=a("li"),xle=a("strong"),sho=o("xglm"),lho=o(" \u2014 "),tN=a("a"),iho=o("XGLMTokenizer"),dho=o(" or "),aN=a("a"),cho=o("XGLMTokenizerFast"),fho=o(" (XGLM model)"),mho=l(),Eh=a("li"),$le=a("strong"),gho=o("xlm"),hho=o(" \u2014 "),nN=a("a"),pho=o("XLMTokenizer"),_ho=o(" (XLM model)"),uho=l(),Ch=a("li"),kle=a("strong"),bho=o("xlm-prophetnet"),vho=o(" \u2014 "),sN=a("a"),Fho=o("XLMProphetNetTokenizer"),Tho=o(" (XLM-ProphetNet model)"),Mho=l(),Ds=a("li"),Sle=a("strong"),Eho=o("xlm-roberta"),Cho=o(" \u2014 "),lN=a("a"),who=o("XLMRobertaTokenizer"),Aho=o(" or "),iN=a("a"),Lho=o("XLMRobertaTokenizerFast"),yho=o(" (XLM-RoBERTa model)"),xho=l(),Gs=a("li"),Rle=a("strong"),$ho=o("xlm-roberta-xl"),kho=o(" \u2014 "),dN=a("a"),Sho=o("RobertaTokenizer"),Rho=o(" or "),cN=a("a"),Pho=o("RobertaTokenizerFast"),Bho=o(" (XLM-RoBERTa-XL model)"),Iho=l(),Os=a("li"),Ple=a("strong"),Nho=o("xlnet"),qho=o(" \u2014 "),fN=a("a"),jho=o("XLNetTokenizer"),Dho=o(" or "),mN=a("a"),Gho=o("XLNetTokenizerFast"),Oho=o(" (XLNet model)"),Vho=l(),Vs=a("li"),Ble=a("strong"),Xho=o("yoso"),zho=o(" \u2014 "),gN=a("a"),Qho=o("AlbertTokenizer"),Who=o(" or "),hN=a("a"),Hho=o("AlbertTokenizerFast"),Uho=o(" (YOSO model)"),Jho=l(),F(wh.$$.fragment),Yho=l(),Ah=a("div"),F(H7.$$.fragment),Kho=l(),Ile=a("p"),Zho=o("Register a new tokenizer in this mapping."),vOe=l(),Ri=a("h2"),Lh=a("a"),Nle=a("span"),F(U7.$$.fragment),epo=l(),qle=a("span"),opo=o("AutoFeatureExtractor"),FOe=l(),Lo=a("div"),F(J7.$$.fragment),rpo=l(),Y7=a("p"),tpo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),pN=a("a"),apo=o("AutoFeatureExtractor.from_pretrained()"),npo=o(" class method."),spo=l(),K7=a("p"),lpo=o("This class cannot be instantiated directly using "),jle=a("code"),ipo=o("__init__()"),dpo=o(" (throws an error)."),cpo=l(),He=a("div"),F(Z7.$$.fragment),fpo=l(),Dle=a("p"),mpo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),gpo=l(),Sa=a("p"),hpo=o("The feature extractor class to instantiate is selected based on the "),Gle=a("code"),ppo=o("model_type"),_po=o(` property of the config object
(either passed as an argument or loaded from `),Ole=a("code"),upo=o("pretrained_model_name_or_path"),bpo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Vle=a("code"),vpo=o("pretrained_model_name_or_path"),Fpo=o(":"),Tpo=l(),Y=a("ul"),yh=a("li"),Xle=a("strong"),Mpo=o("beit"),Epo=o(" \u2014 "),_N=a("a"),Cpo=o("BeitFeatureExtractor"),wpo=o(" (BEiT model)"),Apo=l(),xh=a("li"),zle=a("strong"),Lpo=o("clip"),ypo=o(" \u2014 "),uN=a("a"),xpo=o("CLIPFeatureExtractor"),$po=o(" (CLIP model)"),kpo=l(),$h=a("li"),Qle=a("strong"),Spo=o("convnext"),Rpo=o(" \u2014 "),bN=a("a"),Ppo=o("ConvNextFeatureExtractor"),Bpo=o(" (ConvNeXT model)"),Ipo=l(),kh=a("li"),Wle=a("strong"),Npo=o("cvt"),qpo=o(" \u2014 "),vN=a("a"),jpo=o("ConvNextFeatureExtractor"),Dpo=o(" (CvT model)"),Gpo=l(),Sh=a("li"),Hle=a("strong"),Opo=o("data2vec-audio"),Vpo=o(" \u2014 "),FN=a("a"),Xpo=o("Wav2Vec2FeatureExtractor"),zpo=o(" (Data2VecAudio model)"),Qpo=l(),Rh=a("li"),Ule=a("strong"),Wpo=o("data2vec-vision"),Hpo=o(" \u2014 "),TN=a("a"),Upo=o("BeitFeatureExtractor"),Jpo=o(" (Data2VecVision model)"),Ypo=l(),Ph=a("li"),Jle=a("strong"),Kpo=o("deit"),Zpo=o(" \u2014 "),MN=a("a"),e_o=o("DeiTFeatureExtractor"),o_o=o(" (DeiT model)"),r_o=l(),Bh=a("li"),Yle=a("strong"),t_o=o("detr"),a_o=o(" \u2014 "),EN=a("a"),n_o=o("DetrFeatureExtractor"),s_o=o(" (DETR model)"),l_o=l(),Ih=a("li"),Kle=a("strong"),i_o=o("dpt"),d_o=o(" \u2014 "),CN=a("a"),c_o=o("DPTFeatureExtractor"),f_o=o(" (DPT model)"),m_o=l(),Nh=a("li"),Zle=a("strong"),g_o=o("flava"),h_o=o(" \u2014 "),wN=a("a"),p_o=o("FlavaFeatureExtractor"),__o=o(" (FLAVA model)"),u_o=l(),qh=a("li"),eie=a("strong"),b_o=o("glpn"),v_o=o(" \u2014 "),AN=a("a"),F_o=o("GLPNFeatureExtractor"),T_o=o(" (GLPN model)"),M_o=l(),jh=a("li"),oie=a("strong"),E_o=o("hubert"),C_o=o(" \u2014 "),LN=a("a"),w_o=o("Wav2Vec2FeatureExtractor"),A_o=o(" (Hubert model)"),L_o=l(),Dh=a("li"),rie=a("strong"),y_o=o("imagegpt"),x_o=o(" \u2014 "),yN=a("a"),$_o=o("ImageGPTFeatureExtractor"),k_o=o(" (ImageGPT model)"),S_o=l(),Gh=a("li"),tie=a("strong"),R_o=o("layoutlmv2"),P_o=o(" \u2014 "),xN=a("a"),B_o=o("LayoutLMv2FeatureExtractor"),I_o=o(" (LayoutLMv2 model)"),N_o=l(),Oh=a("li"),aie=a("strong"),q_o=o("layoutlmv3"),j_o=o(" \u2014 "),$N=a("a"),D_o=o("LayoutLMv3FeatureExtractor"),G_o=o(" (LayoutLMv3 model)"),O_o=l(),Vh=a("li"),nie=a("strong"),V_o=o("levit"),X_o=o(" \u2014 "),kN=a("a"),z_o=o("LevitFeatureExtractor"),Q_o=o(" (LeViT model)"),W_o=l(),Xh=a("li"),sie=a("strong"),H_o=o("maskformer"),U_o=o(" \u2014 "),SN=a("a"),J_o=o("MaskFormerFeatureExtractor"),Y_o=o(" (MaskFormer model)"),K_o=l(),zh=a("li"),lie=a("strong"),Z_o=o("mctct"),euo=o(" \u2014 "),RN=a("a"),ouo=o("MCTCTFeatureExtractor"),ruo=o(" (M-CTC-T model)"),tuo=l(),Qh=a("li"),iie=a("strong"),auo=o("perceiver"),nuo=o(" \u2014 "),PN=a("a"),suo=o("PerceiverFeatureExtractor"),luo=o(" (Perceiver model)"),iuo=l(),Wh=a("li"),die=a("strong"),duo=o("poolformer"),cuo=o(" \u2014 "),BN=a("a"),fuo=o("PoolFormerFeatureExtractor"),muo=o(" (PoolFormer model)"),guo=l(),Hh=a("li"),cie=a("strong"),huo=o("regnet"),puo=o(" \u2014 "),IN=a("a"),_uo=o("ConvNextFeatureExtractor"),uuo=o(" (RegNet model)"),buo=l(),Uh=a("li"),fie=a("strong"),vuo=o("resnet"),Fuo=o(" \u2014 "),NN=a("a"),Tuo=o("ConvNextFeatureExtractor"),Muo=o(" (ResNet model)"),Euo=l(),Jh=a("li"),mie=a("strong"),Cuo=o("segformer"),wuo=o(" \u2014 "),qN=a("a"),Auo=o("SegformerFeatureExtractor"),Luo=o(" (SegFormer model)"),yuo=l(),Yh=a("li"),gie=a("strong"),xuo=o("speech_to_text"),$uo=o(" \u2014 "),jN=a("a"),kuo=o("Speech2TextFeatureExtractor"),Suo=o(" (Speech2Text model)"),Ruo=l(),Kh=a("li"),hie=a("strong"),Puo=o("swin"),Buo=o(" \u2014 "),DN=a("a"),Iuo=o("ViTFeatureExtractor"),Nuo=o(" (Swin Transformer model)"),quo=l(),Zh=a("li"),pie=a("strong"),juo=o("van"),Duo=o(" \u2014 "),GN=a("a"),Guo=o("ConvNextFeatureExtractor"),Ouo=o(" (VAN model)"),Vuo=l(),ep=a("li"),_ie=a("strong"),Xuo=o("vilt"),zuo=o(" \u2014 "),ON=a("a"),Quo=o("ViltFeatureExtractor"),Wuo=o(" (ViLT model)"),Huo=l(),op=a("li"),uie=a("strong"),Uuo=o("vit"),Juo=o(" \u2014 "),VN=a("a"),Yuo=o("ViTFeatureExtractor"),Kuo=o(" (ViT model)"),Zuo=l(),rp=a("li"),bie=a("strong"),e1o=o("vit_mae"),o1o=o(" \u2014 "),XN=a("a"),r1o=o("ViTFeatureExtractor"),t1o=o(" (ViTMAE model)"),a1o=l(),tp=a("li"),vie=a("strong"),n1o=o("wav2vec2"),s1o=o(" \u2014 "),zN=a("a"),l1o=o("Wav2Vec2FeatureExtractor"),i1o=o(" (Wav2Vec2 model)"),d1o=l(),ap=a("li"),Fie=a("strong"),c1o=o("wav2vec2-conformer"),f1o=o(" \u2014 "),QN=a("a"),m1o=o("Wav2Vec2FeatureExtractor"),g1o=o(" (Wav2Vec2-Conformer model)"),h1o=l(),np=a("li"),Tie=a("strong"),p1o=o("yolos"),_1o=o(" \u2014 "),WN=a("a"),u1o=o("YolosFeatureExtractor"),b1o=o(" (YOLOS model)"),v1o=l(),F(sp.$$.fragment),F1o=l(),F(lp.$$.fragment),T1o=l(),ip=a("div"),F(ey.$$.fragment),M1o=l(),Mie=a("p"),E1o=o("Register a new feature extractor for this class."),TOe=l(),Pi=a("h2"),dp=a("a"),Eie=a("span"),F(oy.$$.fragment),C1o=l(),Cie=a("span"),w1o=o("AutoProcessor"),MOe=l(),yo=a("div"),F(ry.$$.fragment),A1o=l(),ty=a("p"),L1o=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),HN=a("a"),y1o=o("AutoProcessor.from_pretrained()"),x1o=o(" class method."),$1o=l(),ay=a("p"),k1o=o("This class cannot be instantiated directly using "),wie=a("code"),S1o=o("__init__()"),R1o=o(" (throws an error)."),P1o=l(),Ue=a("div"),F(ny.$$.fragment),B1o=l(),Aie=a("p"),I1o=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),N1o=l(),Bi=a("p"),q1o=o("The processor class to instantiate is selected based on the "),Lie=a("code"),j1o=o("model_type"),D1o=o(` property of the config object (either
passed as an argument or loaded from `),yie=a("code"),G1o=o("pretrained_model_name_or_path"),O1o=o(" if possible):"),V1o=l(),he=a("ul"),cp=a("li"),xie=a("strong"),X1o=o("clip"),z1o=o(" \u2014 "),UN=a("a"),Q1o=o("CLIPProcessor"),W1o=o(" (CLIP model)"),H1o=l(),fp=a("li"),$ie=a("strong"),U1o=o("flava"),J1o=o(" \u2014 "),kie=a("code"),Y1o=o("FLAVAProcessor"),K1o=o(" (FLAVA model)"),Z1o=l(),mp=a("li"),Sie=a("strong"),e2o=o("layoutlmv2"),o2o=o(" \u2014 "),JN=a("a"),r2o=o("LayoutLMv2Processor"),t2o=o(" (LayoutLMv2 model)"),a2o=l(),gp=a("li"),Rie=a("strong"),n2o=o("layoutlmv3"),s2o=o(" \u2014 "),YN=a("a"),l2o=o("LayoutLMv3Processor"),i2o=o(" (LayoutLMv3 model)"),d2o=l(),hp=a("li"),Pie=a("strong"),c2o=o("layoutxlm"),f2o=o(" \u2014 "),KN=a("a"),m2o=o("LayoutXLMProcessor"),g2o=o(" (LayoutXLM model)"),h2o=l(),pp=a("li"),Bie=a("strong"),p2o=o("sew"),_2o=o(" \u2014 "),ZN=a("a"),u2o=o("Wav2Vec2Processor"),b2o=o(" (SEW model)"),v2o=l(),_p=a("li"),Iie=a("strong"),F2o=o("sew-d"),T2o=o(" \u2014 "),eq=a("a"),M2o=o("Wav2Vec2Processor"),E2o=o(" (SEW-D model)"),C2o=l(),up=a("li"),Nie=a("strong"),w2o=o("speech_to_text"),A2o=o(" \u2014 "),oq=a("a"),L2o=o("Speech2TextProcessor"),y2o=o(" (Speech2Text model)"),x2o=l(),bp=a("li"),qie=a("strong"),$2o=o("speech_to_text_2"),k2o=o(" \u2014 "),rq=a("a"),S2o=o("Speech2Text2Processor"),R2o=o(" (Speech2Text2 model)"),P2o=l(),vp=a("li"),jie=a("strong"),B2o=o("trocr"),I2o=o(" \u2014 "),tq=a("a"),N2o=o("TrOCRProcessor"),q2o=o(" (TrOCR model)"),j2o=l(),Fp=a("li"),Die=a("strong"),D2o=o("unispeech"),G2o=o(" \u2014 "),aq=a("a"),O2o=o("Wav2Vec2Processor"),V2o=o(" (UniSpeech model)"),X2o=l(),Tp=a("li"),Gie=a("strong"),z2o=o("unispeech-sat"),Q2o=o(" \u2014 "),nq=a("a"),W2o=o("Wav2Vec2Processor"),H2o=o(" (UniSpeechSat model)"),U2o=l(),Mp=a("li"),Oie=a("strong"),J2o=o("vilt"),Y2o=o(" \u2014 "),sq=a("a"),K2o=o("ViltProcessor"),Z2o=o(" (ViLT model)"),ebo=l(),Ep=a("li"),Vie=a("strong"),obo=o("vision-text-dual-encoder"),rbo=o(" \u2014 "),lq=a("a"),tbo=o("VisionTextDualEncoderProcessor"),abo=o(" (VisionTextDualEncoder model)"),nbo=l(),Cp=a("li"),Xie=a("strong"),sbo=o("wav2vec2"),lbo=o(" \u2014 "),iq=a("a"),ibo=o("Wav2Vec2Processor"),dbo=o(" (Wav2Vec2 model)"),cbo=l(),wp=a("li"),zie=a("strong"),fbo=o("wav2vec2-conformer"),mbo=o(" \u2014 "),dq=a("a"),gbo=o("Wav2Vec2Processor"),hbo=o(" (Wav2Vec2-Conformer model)"),pbo=l(),Ap=a("li"),Qie=a("strong"),_bo=o("wavlm"),ubo=o(" \u2014 "),cq=a("a"),bbo=o("Wav2Vec2Processor"),vbo=o(" (WavLM model)"),Fbo=l(),F(Lp.$$.fragment),Tbo=l(),F(yp.$$.fragment),Mbo=l(),xp=a("div"),F(sy.$$.fragment),Ebo=l(),Wie=a("p"),Cbo=o("Register a new processor for this class."),EOe=l(),Ii=a("h2"),$p=a("a"),Hie=a("span"),F(ly.$$.fragment),wbo=l(),Uie=a("span"),Abo=o("AutoModel"),COe=l(),xo=a("div"),F(iy.$$.fragment),Lbo=l(),Ni=a("p"),ybo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),fq=a("a"),xbo=o("from_pretrained()"),$bo=o(" class method or the "),mq=a("a"),kbo=o("from_config()"),Sbo=o(` class
method.`),Rbo=l(),dy=a("p"),Pbo=o("This class cannot be instantiated directly using "),Jie=a("code"),Bbo=o("__init__()"),Ibo=o(" (throws an error)."),Nbo=l(),nt=a("div"),F(cy.$$.fragment),qbo=l(),Yie=a("p"),jbo=o("Instantiates one of the base model classes of the library from a configuration."),Dbo=l(),qi=a("p"),Gbo=o(`Note:
Loading a model from its configuration file does `),Kie=a("strong"),Obo=o("not"),Vbo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gq=a("a"),Xbo=o("from_pretrained()"),zbo=o(" to load the model weights."),Qbo=l(),F(kp.$$.fragment),Wbo=l(),Je=a("div"),F(fy.$$.fragment),Hbo=l(),Zie=a("p"),Ubo=o("Instantiate one of the base model classes of the library from a pretrained model."),Jbo=l(),Ra=a("p"),Ybo=o("The model class to instantiate is selected based on the "),ede=a("code"),Kbo=o("model_type"),Zbo=o(` property of the config object (either
passed as an argument or loaded from `),ode=a("code"),e4o=o("pretrained_model_name_or_path"),o4o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rde=a("code"),r4o=o("pretrained_model_name_or_path"),t4o=o(":"),a4o=l(),y=a("ul"),Sp=a("li"),tde=a("strong"),n4o=o("albert"),s4o=o(" \u2014 "),hq=a("a"),l4o=o("AlbertModel"),i4o=o(" (ALBERT model)"),d4o=l(),Rp=a("li"),ade=a("strong"),c4o=o("bart"),f4o=o(" \u2014 "),pq=a("a"),m4o=o("BartModel"),g4o=o(" (BART model)"),h4o=l(),Pp=a("li"),nde=a("strong"),p4o=o("beit"),_4o=o(" \u2014 "),_q=a("a"),u4o=o("BeitModel"),b4o=o(" (BEiT model)"),v4o=l(),Bp=a("li"),sde=a("strong"),F4o=o("bert"),T4o=o(" \u2014 "),uq=a("a"),M4o=o("BertModel"),E4o=o(" (BERT model)"),C4o=l(),Ip=a("li"),lde=a("strong"),w4o=o("bert-generation"),A4o=o(" \u2014 "),bq=a("a"),L4o=o("BertGenerationEncoder"),y4o=o(" (Bert Generation model)"),x4o=l(),Np=a("li"),ide=a("strong"),$4o=o("big_bird"),k4o=o(" \u2014 "),vq=a("a"),S4o=o("BigBirdModel"),R4o=o(" (BigBird model)"),P4o=l(),qp=a("li"),dde=a("strong"),B4o=o("bigbird_pegasus"),I4o=o(" \u2014 "),Fq=a("a"),N4o=o("BigBirdPegasusModel"),q4o=o(" (BigBird-Pegasus model)"),j4o=l(),jp=a("li"),cde=a("strong"),D4o=o("blenderbot"),G4o=o(" \u2014 "),Tq=a("a"),O4o=o("BlenderbotModel"),V4o=o(" (Blenderbot model)"),X4o=l(),Dp=a("li"),fde=a("strong"),z4o=o("blenderbot-small"),Q4o=o(" \u2014 "),Mq=a("a"),W4o=o("BlenderbotSmallModel"),H4o=o(" (BlenderbotSmall model)"),U4o=l(),Gp=a("li"),mde=a("strong"),J4o=o("bloom"),Y4o=o(" \u2014 "),Eq=a("a"),K4o=o("BloomModel"),Z4o=o(" (BLOOM model)"),e5o=l(),Op=a("li"),gde=a("strong"),o5o=o("camembert"),r5o=o(" \u2014 "),Cq=a("a"),t5o=o("CamembertModel"),a5o=o(" (CamemBERT model)"),n5o=l(),Vp=a("li"),hde=a("strong"),s5o=o("canine"),l5o=o(" \u2014 "),wq=a("a"),i5o=o("CanineModel"),d5o=o(" (CANINE model)"),c5o=l(),Xp=a("li"),pde=a("strong"),f5o=o("clip"),m5o=o(" \u2014 "),Aq=a("a"),g5o=o("CLIPModel"),h5o=o(" (CLIP model)"),p5o=l(),zp=a("li"),_de=a("strong"),_5o=o("codegen"),u5o=o(" \u2014 "),Lq=a("a"),b5o=o("CodeGenModel"),v5o=o(" (CodeGen model)"),F5o=l(),Qp=a("li"),ude=a("strong"),T5o=o("convbert"),M5o=o(" \u2014 "),yq=a("a"),E5o=o("ConvBertModel"),C5o=o(" (ConvBERT model)"),w5o=l(),Wp=a("li"),bde=a("strong"),A5o=o("convnext"),L5o=o(" \u2014 "),xq=a("a"),y5o=o("ConvNextModel"),x5o=o(" (ConvNeXT model)"),$5o=l(),Hp=a("li"),vde=a("strong"),k5o=o("ctrl"),S5o=o(" \u2014 "),$q=a("a"),R5o=o("CTRLModel"),P5o=o(" (CTRL model)"),B5o=l(),Up=a("li"),Fde=a("strong"),I5o=o("cvt"),N5o=o(" \u2014 "),kq=a("a"),q5o=o("CvtModel"),j5o=o(" (CvT model)"),D5o=l(),Jp=a("li"),Tde=a("strong"),G5o=o("data2vec-audio"),O5o=o(" \u2014 "),Sq=a("a"),V5o=o("Data2VecAudioModel"),X5o=o(" (Data2VecAudio model)"),z5o=l(),Yp=a("li"),Mde=a("strong"),Q5o=o("data2vec-text"),W5o=o(" \u2014 "),Rq=a("a"),H5o=o("Data2VecTextModel"),U5o=o(" (Data2VecText model)"),J5o=l(),Kp=a("li"),Ede=a("strong"),Y5o=o("data2vec-vision"),K5o=o(" \u2014 "),Pq=a("a"),Z5o=o("Data2VecVisionModel"),e3o=o(" (Data2VecVision model)"),o3o=l(),Zp=a("li"),Cde=a("strong"),r3o=o("deberta"),t3o=o(" \u2014 "),Bq=a("a"),a3o=o("DebertaModel"),n3o=o(" (DeBERTa model)"),s3o=l(),e_=a("li"),wde=a("strong"),l3o=o("deberta-v2"),i3o=o(" \u2014 "),Iq=a("a"),d3o=o("DebertaV2Model"),c3o=o(" (DeBERTa-v2 model)"),f3o=l(),o_=a("li"),Ade=a("strong"),m3o=o("decision_transformer"),g3o=o(" \u2014 "),Nq=a("a"),h3o=o("DecisionTransformerModel"),p3o=o(" (Decision Transformer model)"),_3o=l(),r_=a("li"),Lde=a("strong"),u3o=o("deit"),b3o=o(" \u2014 "),qq=a("a"),v3o=o("DeiTModel"),F3o=o(" (DeiT model)"),T3o=l(),t_=a("li"),yde=a("strong"),M3o=o("detr"),E3o=o(" \u2014 "),jq=a("a"),C3o=o("DetrModel"),w3o=o(" (DETR model)"),A3o=l(),a_=a("li"),xde=a("strong"),L3o=o("distilbert"),y3o=o(" \u2014 "),Dq=a("a"),x3o=o("DistilBertModel"),$3o=o(" (DistilBERT model)"),k3o=l(),n_=a("li"),$de=a("strong"),S3o=o("dpr"),R3o=o(" \u2014 "),Gq=a("a"),P3o=o("DPRQuestionEncoder"),B3o=o(" (DPR model)"),I3o=l(),s_=a("li"),kde=a("strong"),N3o=o("dpt"),q3o=o(" \u2014 "),Oq=a("a"),j3o=o("DPTModel"),D3o=o(" (DPT model)"),G3o=l(),l_=a("li"),Sde=a("strong"),O3o=o("electra"),V3o=o(" \u2014 "),Vq=a("a"),X3o=o("ElectraModel"),z3o=o(" (ELECTRA model)"),Q3o=l(),i_=a("li"),Rde=a("strong"),W3o=o("flaubert"),H3o=o(" \u2014 "),Xq=a("a"),U3o=o("FlaubertModel"),J3o=o(" (FlauBERT model)"),Y3o=l(),d_=a("li"),Pde=a("strong"),K3o=o("flava"),Z3o=o(" \u2014 "),zq=a("a"),evo=o("FlavaModel"),ovo=o(" (FLAVA model)"),rvo=l(),c_=a("li"),Bde=a("strong"),tvo=o("fnet"),avo=o(" \u2014 "),Qq=a("a"),nvo=o("FNetModel"),svo=o(" (FNet model)"),lvo=l(),f_=a("li"),Ide=a("strong"),ivo=o("fsmt"),dvo=o(" \u2014 "),Wq=a("a"),cvo=o("FSMTModel"),fvo=o(" (FairSeq Machine-Translation model)"),mvo=l(),Xs=a("li"),Nde=a("strong"),gvo=o("funnel"),hvo=o(" \u2014 "),Hq=a("a"),pvo=o("FunnelModel"),_vo=o(" or "),Uq=a("a"),uvo=o("FunnelBaseModel"),bvo=o(" (Funnel Transformer model)"),vvo=l(),m_=a("li"),qde=a("strong"),Fvo=o("glpn"),Tvo=o(" \u2014 "),Jq=a("a"),Mvo=o("GLPNModel"),Evo=o(" (GLPN model)"),Cvo=l(),g_=a("li"),jde=a("strong"),wvo=o("gpt2"),Avo=o(" \u2014 "),Yq=a("a"),Lvo=o("GPT2Model"),yvo=o(" (OpenAI GPT-2 model)"),xvo=l(),h_=a("li"),Dde=a("strong"),$vo=o("gpt_neo"),kvo=o(" \u2014 "),Kq=a("a"),Svo=o("GPTNeoModel"),Rvo=o(" (GPT Neo model)"),Pvo=l(),p_=a("li"),Gde=a("strong"),Bvo=o("gpt_neox"),Ivo=o(" \u2014 "),Zq=a("a"),Nvo=o("GPTNeoXModel"),qvo=o(" (GPT NeoX model)"),jvo=l(),__=a("li"),Ode=a("strong"),Dvo=o("gptj"),Gvo=o(" \u2014 "),ej=a("a"),Ovo=o("GPTJModel"),Vvo=o(" (GPT-J model)"),Xvo=l(),u_=a("li"),Vde=a("strong"),zvo=o("hubert"),Qvo=o(" \u2014 "),oj=a("a"),Wvo=o("HubertModel"),Hvo=o(" (Hubert model)"),Uvo=l(),b_=a("li"),Xde=a("strong"),Jvo=o("ibert"),Yvo=o(" \u2014 "),rj=a("a"),Kvo=o("IBertModel"),Zvo=o(" (I-BERT model)"),eFo=l(),v_=a("li"),zde=a("strong"),oFo=o("imagegpt"),rFo=o(" \u2014 "),tj=a("a"),tFo=o("ImageGPTModel"),aFo=o(" (ImageGPT model)"),nFo=l(),F_=a("li"),Qde=a("strong"),sFo=o("layoutlm"),lFo=o(" \u2014 "),aj=a("a"),iFo=o("LayoutLMModel"),dFo=o(" (LayoutLM model)"),cFo=l(),T_=a("li"),Wde=a("strong"),fFo=o("layoutlmv2"),mFo=o(" \u2014 "),nj=a("a"),gFo=o("LayoutLMv2Model"),hFo=o(" (LayoutLMv2 model)"),pFo=l(),M_=a("li"),Hde=a("strong"),_Fo=o("layoutlmv3"),uFo=o(" \u2014 "),sj=a("a"),bFo=o("LayoutLMv3Model"),vFo=o(" (LayoutLMv3 model)"),FFo=l(),E_=a("li"),Ude=a("strong"),TFo=o("led"),MFo=o(" \u2014 "),lj=a("a"),EFo=o("LEDModel"),CFo=o(" (LED model)"),wFo=l(),C_=a("li"),Jde=a("strong"),AFo=o("levit"),LFo=o(" \u2014 "),ij=a("a"),yFo=o("LevitModel"),xFo=o(" (LeViT model)"),$Fo=l(),w_=a("li"),Yde=a("strong"),kFo=o("longformer"),SFo=o(" \u2014 "),dj=a("a"),RFo=o("LongformerModel"),PFo=o(" (Longformer model)"),BFo=l(),A_=a("li"),Kde=a("strong"),IFo=o("longt5"),NFo=o(" \u2014 "),cj=a("a"),qFo=o("LongT5Model"),jFo=o(" (LongT5 model)"),DFo=l(),L_=a("li"),Zde=a("strong"),GFo=o("luke"),OFo=o(" \u2014 "),fj=a("a"),VFo=o("LukeModel"),XFo=o(" (LUKE model)"),zFo=l(),y_=a("li"),ece=a("strong"),QFo=o("lxmert"),WFo=o(" \u2014 "),mj=a("a"),HFo=o("LxmertModel"),UFo=o(" (LXMERT model)"),JFo=l(),x_=a("li"),oce=a("strong"),YFo=o("m2m_100"),KFo=o(" \u2014 "),gj=a("a"),ZFo=o("M2M100Model"),e6o=o(" (M2M100 model)"),o6o=l(),$_=a("li"),rce=a("strong"),r6o=o("marian"),t6o=o(" \u2014 "),hj=a("a"),a6o=o("MarianModel"),n6o=o(" (Marian model)"),s6o=l(),k_=a("li"),tce=a("strong"),l6o=o("maskformer"),i6o=o(" \u2014 "),pj=a("a"),d6o=o("MaskFormerModel"),c6o=o(" (MaskFormer model)"),f6o=l(),S_=a("li"),ace=a("strong"),m6o=o("mbart"),g6o=o(" \u2014 "),_j=a("a"),h6o=o("MBartModel"),p6o=o(" (mBART model)"),_6o=l(),R_=a("li"),nce=a("strong"),u6o=o("mctct"),b6o=o(" \u2014 "),uj=a("a"),v6o=o("MCTCTModel"),F6o=o(" (M-CTC-T model)"),T6o=l(),P_=a("li"),sce=a("strong"),M6o=o("megatron-bert"),E6o=o(" \u2014 "),bj=a("a"),C6o=o("MegatronBertModel"),w6o=o(" (Megatron-BERT model)"),A6o=l(),B_=a("li"),lce=a("strong"),L6o=o("mobilebert"),y6o=o(" \u2014 "),vj=a("a"),x6o=o("MobileBertModel"),$6o=o(" (MobileBERT model)"),k6o=l(),I_=a("li"),ice=a("strong"),S6o=o("mpnet"),R6o=o(" \u2014 "),Fj=a("a"),P6o=o("MPNetModel"),B6o=o(" (MPNet model)"),I6o=l(),N_=a("li"),dce=a("strong"),N6o=o("mt5"),q6o=o(" \u2014 "),Tj=a("a"),j6o=o("MT5Model"),D6o=o(" (MT5 model)"),G6o=l(),q_=a("li"),cce=a("strong"),O6o=o("nezha"),V6o=o(" \u2014 "),Mj=a("a"),X6o=o("NezhaModel"),z6o=o(" (Nezha model)"),Q6o=l(),j_=a("li"),fce=a("strong"),W6o=o("nystromformer"),H6o=o(" \u2014 "),Ej=a("a"),U6o=o("NystromformerModel"),J6o=o(" (Nystr\xF6mformer model)"),Y6o=l(),D_=a("li"),mce=a("strong"),K6o=o("openai-gpt"),Z6o=o(" \u2014 "),Cj=a("a"),eTo=o("OpenAIGPTModel"),oTo=o(" (OpenAI GPT model)"),rTo=l(),G_=a("li"),gce=a("strong"),tTo=o("opt"),aTo=o(" \u2014 "),wj=a("a"),nTo=o("OPTModel"),sTo=o(" (OPT model)"),lTo=l(),O_=a("li"),hce=a("strong"),iTo=o("pegasus"),dTo=o(" \u2014 "),Aj=a("a"),cTo=o("PegasusModel"),fTo=o(" (Pegasus model)"),mTo=l(),V_=a("li"),pce=a("strong"),gTo=o("perceiver"),hTo=o(" \u2014 "),Lj=a("a"),pTo=o("PerceiverModel"),_To=o(" (Perceiver model)"),uTo=l(),X_=a("li"),_ce=a("strong"),bTo=o("plbart"),vTo=o(" \u2014 "),yj=a("a"),FTo=o("PLBartModel"),TTo=o(" (PLBart model)"),MTo=l(),z_=a("li"),uce=a("strong"),ETo=o("poolformer"),CTo=o(" \u2014 "),xj=a("a"),wTo=o("PoolFormerModel"),ATo=o(" (PoolFormer model)"),LTo=l(),Q_=a("li"),bce=a("strong"),yTo=o("prophetnet"),xTo=o(" \u2014 "),$j=a("a"),$To=o("ProphetNetModel"),kTo=o(" (ProphetNet model)"),STo=l(),W_=a("li"),vce=a("strong"),RTo=o("qdqbert"),PTo=o(" \u2014 "),kj=a("a"),BTo=o("QDQBertModel"),ITo=o(" (QDQBert model)"),NTo=l(),H_=a("li"),Fce=a("strong"),qTo=o("reformer"),jTo=o(" \u2014 "),Sj=a("a"),DTo=o("ReformerModel"),GTo=o(" (Reformer model)"),OTo=l(),U_=a("li"),Tce=a("strong"),VTo=o("regnet"),XTo=o(" \u2014 "),Rj=a("a"),zTo=o("RegNetModel"),QTo=o(" (RegNet model)"),WTo=l(),J_=a("li"),Mce=a("strong"),HTo=o("rembert"),UTo=o(" \u2014 "),Pj=a("a"),JTo=o("RemBertModel"),YTo=o(" (RemBERT model)"),KTo=l(),Y_=a("li"),Ece=a("strong"),ZTo=o("resnet"),eMo=o(" \u2014 "),Bj=a("a"),oMo=o("ResNetModel"),rMo=o(" (ResNet model)"),tMo=l(),K_=a("li"),Cce=a("strong"),aMo=o("retribert"),nMo=o(" \u2014 "),Ij=a("a"),sMo=o("RetriBertModel"),lMo=o(" (RetriBERT model)"),iMo=l(),Z_=a("li"),wce=a("strong"),dMo=o("roberta"),cMo=o(" \u2014 "),Nj=a("a"),fMo=o("RobertaModel"),mMo=o(" (RoBERTa model)"),gMo=l(),eu=a("li"),Ace=a("strong"),hMo=o("roformer"),pMo=o(" \u2014 "),qj=a("a"),_Mo=o("RoFormerModel"),uMo=o(" (RoFormer model)"),bMo=l(),ou=a("li"),Lce=a("strong"),vMo=o("segformer"),FMo=o(" \u2014 "),jj=a("a"),TMo=o("SegformerModel"),MMo=o(" (SegFormer model)"),EMo=l(),ru=a("li"),yce=a("strong"),CMo=o("sew"),wMo=o(" \u2014 "),Dj=a("a"),AMo=o("SEWModel"),LMo=o(" (SEW model)"),yMo=l(),tu=a("li"),xce=a("strong"),xMo=o("sew-d"),$Mo=o(" \u2014 "),Gj=a("a"),kMo=o("SEWDModel"),SMo=o(" (SEW-D model)"),RMo=l(),au=a("li"),$ce=a("strong"),PMo=o("speech_to_text"),BMo=o(" \u2014 "),Oj=a("a"),IMo=o("Speech2TextModel"),NMo=o(" (Speech2Text model)"),qMo=l(),nu=a("li"),kce=a("strong"),jMo=o("splinter"),DMo=o(" \u2014 "),Vj=a("a"),GMo=o("SplinterModel"),OMo=o(" (Splinter model)"),VMo=l(),su=a("li"),Sce=a("strong"),XMo=o("squeezebert"),zMo=o(" \u2014 "),Xj=a("a"),QMo=o("SqueezeBertModel"),WMo=o(" (SqueezeBERT model)"),HMo=l(),lu=a("li"),Rce=a("strong"),UMo=o("swin"),JMo=o(" \u2014 "),zj=a("a"),YMo=o("SwinModel"),KMo=o(" (Swin Transformer model)"),ZMo=l(),iu=a("li"),Pce=a("strong"),eEo=o("t5"),oEo=o(" \u2014 "),Qj=a("a"),rEo=o("T5Model"),tEo=o(" (T5 model)"),aEo=l(),du=a("li"),Bce=a("strong"),nEo=o("tapas"),sEo=o(" \u2014 "),Wj=a("a"),lEo=o("TapasModel"),iEo=o(" (TAPAS model)"),dEo=l(),cu=a("li"),Ice=a("strong"),cEo=o("trajectory_transformer"),fEo=o(" \u2014 "),Hj=a("a"),mEo=o("TrajectoryTransformerModel"),gEo=o(" (Trajectory Transformer model)"),hEo=l(),fu=a("li"),Nce=a("strong"),pEo=o("transfo-xl"),_Eo=o(" \u2014 "),Uj=a("a"),uEo=o("TransfoXLModel"),bEo=o(" (Transformer-XL model)"),vEo=l(),mu=a("li"),qce=a("strong"),FEo=o("unispeech"),TEo=o(" \u2014 "),Jj=a("a"),MEo=o("UniSpeechModel"),EEo=o(" (UniSpeech model)"),CEo=l(),gu=a("li"),jce=a("strong"),wEo=o("unispeech-sat"),AEo=o(" \u2014 "),Yj=a("a"),LEo=o("UniSpeechSatModel"),yEo=o(" (UniSpeechSat model)"),xEo=l(),hu=a("li"),Dce=a("strong"),$Eo=o("van"),kEo=o(" \u2014 "),Kj=a("a"),SEo=o("VanModel"),REo=o(" (VAN model)"),PEo=l(),pu=a("li"),Gce=a("strong"),BEo=o("vilt"),IEo=o(" \u2014 "),Zj=a("a"),NEo=o("ViltModel"),qEo=o(" (ViLT model)"),jEo=l(),_u=a("li"),Oce=a("strong"),DEo=o("vision-text-dual-encoder"),GEo=o(" \u2014 "),eD=a("a"),OEo=o("VisionTextDualEncoderModel"),VEo=o(" (VisionTextDualEncoder model)"),XEo=l(),uu=a("li"),Vce=a("strong"),zEo=o("visual_bert"),QEo=o(" \u2014 "),oD=a("a"),WEo=o("VisualBertModel"),HEo=o(" (VisualBERT model)"),UEo=l(),bu=a("li"),Xce=a("strong"),JEo=o("vit"),YEo=o(" \u2014 "),rD=a("a"),KEo=o("ViTModel"),ZEo=o(" (ViT model)"),eCo=l(),vu=a("li"),zce=a("strong"),oCo=o("vit_mae"),rCo=o(" \u2014 "),tD=a("a"),tCo=o("ViTMAEModel"),aCo=o(" (ViTMAE model)"),nCo=l(),Fu=a("li"),Qce=a("strong"),sCo=o("wav2vec2"),lCo=o(" \u2014 "),aD=a("a"),iCo=o("Wav2Vec2Model"),dCo=o(" (Wav2Vec2 model)"),cCo=l(),Tu=a("li"),Wce=a("strong"),fCo=o("wav2vec2-conformer"),mCo=o(" \u2014 "),nD=a("a"),gCo=o("Wav2Vec2ConformerModel"),hCo=o(" (Wav2Vec2-Conformer model)"),pCo=l(),Mu=a("li"),Hce=a("strong"),_Co=o("wavlm"),uCo=o(" \u2014 "),sD=a("a"),bCo=o("WavLMModel"),vCo=o(" (WavLM model)"),FCo=l(),Eu=a("li"),Uce=a("strong"),TCo=o("xglm"),MCo=o(" \u2014 "),lD=a("a"),ECo=o("XGLMModel"),CCo=o(" (XGLM model)"),wCo=l(),Cu=a("li"),Jce=a("strong"),ACo=o("xlm"),LCo=o(" \u2014 "),iD=a("a"),yCo=o("XLMModel"),xCo=o(" (XLM model)"),$Co=l(),wu=a("li"),Yce=a("strong"),kCo=o("xlm-prophetnet"),SCo=o(" \u2014 "),dD=a("a"),RCo=o("XLMProphetNetModel"),PCo=o(" (XLM-ProphetNet model)"),BCo=l(),Au=a("li"),Kce=a("strong"),ICo=o("xlm-roberta"),NCo=o(" \u2014 "),cD=a("a"),qCo=o("XLMRobertaModel"),jCo=o(" (XLM-RoBERTa model)"),DCo=l(),Lu=a("li"),Zce=a("strong"),GCo=o("xlm-roberta-xl"),OCo=o(" \u2014 "),fD=a("a"),VCo=o("XLMRobertaXLModel"),XCo=o(" (XLM-RoBERTa-XL model)"),zCo=l(),yu=a("li"),efe=a("strong"),QCo=o("xlnet"),WCo=o(" \u2014 "),mD=a("a"),HCo=o("XLNetModel"),UCo=o(" (XLNet model)"),JCo=l(),xu=a("li"),ofe=a("strong"),YCo=o("yolos"),KCo=o(" \u2014 "),gD=a("a"),ZCo=o("YolosModel"),e0o=o(" (YOLOS model)"),o0o=l(),$u=a("li"),rfe=a("strong"),r0o=o("yoso"),t0o=o(" \u2014 "),hD=a("a"),a0o=o("YosoModel"),n0o=o(" (YOSO model)"),s0o=l(),ku=a("p"),l0o=o("The model is set in evaluation mode by default using "),tfe=a("code"),i0o=o("model.eval()"),d0o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),afe=a("code"),c0o=o("model.train()"),f0o=l(),F(Su.$$.fragment),wOe=l(),ji=a("h2"),Ru=a("a"),nfe=a("span"),F(my.$$.fragment),m0o=l(),sfe=a("span"),g0o=o("AutoModelForPreTraining"),AOe=l(),$o=a("div"),F(gy.$$.fragment),h0o=l(),Di=a("p"),p0o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),pD=a("a"),_0o=o("from_pretrained()"),u0o=o(" class method or the "),_D=a("a"),b0o=o("from_config()"),v0o=o(` class
method.`),F0o=l(),hy=a("p"),T0o=o("This class cannot be instantiated directly using "),lfe=a("code"),M0o=o("__init__()"),E0o=o(" (throws an error)."),C0o=l(),st=a("div"),F(py.$$.fragment),w0o=l(),ife=a("p"),A0o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),L0o=l(),Gi=a("p"),y0o=o(`Note:
Loading a model from its configuration file does `),dfe=a("strong"),x0o=o("not"),$0o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uD=a("a"),k0o=o("from_pretrained()"),S0o=o(" to load the model weights."),R0o=l(),F(Pu.$$.fragment),P0o=l(),Ye=a("div"),F(_y.$$.fragment),B0o=l(),cfe=a("p"),I0o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),N0o=l(),Pa=a("p"),q0o=o("The model class to instantiate is selected based on the "),ffe=a("code"),j0o=o("model_type"),D0o=o(` property of the config object (either
passed as an argument or loaded from `),mfe=a("code"),G0o=o("pretrained_model_name_or_path"),O0o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gfe=a("code"),V0o=o("pretrained_model_name_or_path"),X0o=o(":"),z0o=l(),G=a("ul"),Bu=a("li"),hfe=a("strong"),Q0o=o("albert"),W0o=o(" \u2014 "),bD=a("a"),H0o=o("AlbertForPreTraining"),U0o=o(" (ALBERT model)"),J0o=l(),Iu=a("li"),pfe=a("strong"),Y0o=o("bart"),K0o=o(" \u2014 "),vD=a("a"),Z0o=o("BartForConditionalGeneration"),ewo=o(" (BART model)"),owo=l(),Nu=a("li"),_fe=a("strong"),rwo=o("bert"),two=o(" \u2014 "),FD=a("a"),awo=o("BertForPreTraining"),nwo=o(" (BERT model)"),swo=l(),qu=a("li"),ufe=a("strong"),lwo=o("big_bird"),iwo=o(" \u2014 "),TD=a("a"),dwo=o("BigBirdForPreTraining"),cwo=o(" (BigBird model)"),fwo=l(),ju=a("li"),bfe=a("strong"),mwo=o("bloom"),gwo=o(" \u2014 "),MD=a("a"),hwo=o("BloomForCausalLM"),pwo=o(" (BLOOM model)"),_wo=l(),Du=a("li"),vfe=a("strong"),uwo=o("camembert"),bwo=o(" \u2014 "),ED=a("a"),vwo=o("CamembertForMaskedLM"),Fwo=o(" (CamemBERT model)"),Two=l(),Gu=a("li"),Ffe=a("strong"),Mwo=o("ctrl"),Ewo=o(" \u2014 "),CD=a("a"),Cwo=o("CTRLLMHeadModel"),wwo=o(" (CTRL model)"),Awo=l(),Ou=a("li"),Tfe=a("strong"),Lwo=o("data2vec-text"),ywo=o(" \u2014 "),wD=a("a"),xwo=o("Data2VecTextForMaskedLM"),$wo=o(" (Data2VecText model)"),kwo=l(),Vu=a("li"),Mfe=a("strong"),Swo=o("deberta"),Rwo=o(" \u2014 "),AD=a("a"),Pwo=o("DebertaForMaskedLM"),Bwo=o(" (DeBERTa model)"),Iwo=l(),Xu=a("li"),Efe=a("strong"),Nwo=o("deberta-v2"),qwo=o(" \u2014 "),LD=a("a"),jwo=o("DebertaV2ForMaskedLM"),Dwo=o(" (DeBERTa-v2 model)"),Gwo=l(),zu=a("li"),Cfe=a("strong"),Owo=o("distilbert"),Vwo=o(" \u2014 "),yD=a("a"),Xwo=o("DistilBertForMaskedLM"),zwo=o(" (DistilBERT model)"),Qwo=l(),Qu=a("li"),wfe=a("strong"),Wwo=o("electra"),Hwo=o(" \u2014 "),xD=a("a"),Uwo=o("ElectraForPreTraining"),Jwo=o(" (ELECTRA model)"),Ywo=l(),Wu=a("li"),Afe=a("strong"),Kwo=o("flaubert"),Zwo=o(" \u2014 "),$D=a("a"),eAo=o("FlaubertWithLMHeadModel"),oAo=o(" (FlauBERT model)"),rAo=l(),Hu=a("li"),Lfe=a("strong"),tAo=o("flava"),aAo=o(" \u2014 "),kD=a("a"),nAo=o("FlavaForPreTraining"),sAo=o(" (FLAVA model)"),lAo=l(),Uu=a("li"),yfe=a("strong"),iAo=o("fnet"),dAo=o(" \u2014 "),SD=a("a"),cAo=o("FNetForPreTraining"),fAo=o(" (FNet model)"),mAo=l(),Ju=a("li"),xfe=a("strong"),gAo=o("fsmt"),hAo=o(" \u2014 "),RD=a("a"),pAo=o("FSMTForConditionalGeneration"),_Ao=o(" (FairSeq Machine-Translation model)"),uAo=l(),Yu=a("li"),$fe=a("strong"),bAo=o("funnel"),vAo=o(" \u2014 "),PD=a("a"),FAo=o("FunnelForPreTraining"),TAo=o(" (Funnel Transformer model)"),MAo=l(),Ku=a("li"),kfe=a("strong"),EAo=o("gpt2"),CAo=o(" \u2014 "),BD=a("a"),wAo=o("GPT2LMHeadModel"),AAo=o(" (OpenAI GPT-2 model)"),LAo=l(),Zu=a("li"),Sfe=a("strong"),yAo=o("ibert"),xAo=o(" \u2014 "),ID=a("a"),$Ao=o("IBertForMaskedLM"),kAo=o(" (I-BERT model)"),SAo=l(),e1=a("li"),Rfe=a("strong"),RAo=o("layoutlm"),PAo=o(" \u2014 "),ND=a("a"),BAo=o("LayoutLMForMaskedLM"),IAo=o(" (LayoutLM model)"),NAo=l(),o1=a("li"),Pfe=a("strong"),qAo=o("longformer"),jAo=o(" \u2014 "),qD=a("a"),DAo=o("LongformerForMaskedLM"),GAo=o(" (Longformer model)"),OAo=l(),r1=a("li"),Bfe=a("strong"),VAo=o("lxmert"),XAo=o(" \u2014 "),jD=a("a"),zAo=o("LxmertForPreTraining"),QAo=o(" (LXMERT model)"),WAo=l(),t1=a("li"),Ife=a("strong"),HAo=o("megatron-bert"),UAo=o(" \u2014 "),DD=a("a"),JAo=o("MegatronBertForPreTraining"),YAo=o(" (Megatron-BERT model)"),KAo=l(),a1=a("li"),Nfe=a("strong"),ZAo=o("mobilebert"),eLo=o(" \u2014 "),GD=a("a"),oLo=o("MobileBertForPreTraining"),rLo=o(" (MobileBERT model)"),tLo=l(),n1=a("li"),qfe=a("strong"),aLo=o("mpnet"),nLo=o(" \u2014 "),OD=a("a"),sLo=o("MPNetForMaskedLM"),lLo=o(" (MPNet model)"),iLo=l(),s1=a("li"),jfe=a("strong"),dLo=o("nezha"),cLo=o(" \u2014 "),VD=a("a"),fLo=o("NezhaForPreTraining"),mLo=o(" (Nezha model)"),gLo=l(),l1=a("li"),Dfe=a("strong"),hLo=o("openai-gpt"),pLo=o(" \u2014 "),XD=a("a"),_Lo=o("OpenAIGPTLMHeadModel"),uLo=o(" (OpenAI GPT model)"),bLo=l(),i1=a("li"),Gfe=a("strong"),vLo=o("retribert"),FLo=o(" \u2014 "),zD=a("a"),TLo=o("RetriBertModel"),MLo=o(" (RetriBERT model)"),ELo=l(),d1=a("li"),Ofe=a("strong"),CLo=o("roberta"),wLo=o(" \u2014 "),QD=a("a"),ALo=o("RobertaForMaskedLM"),LLo=o(" (RoBERTa model)"),yLo=l(),c1=a("li"),Vfe=a("strong"),xLo=o("splinter"),$Lo=o(" \u2014 "),WD=a("a"),kLo=o("SplinterForPreTraining"),SLo=o(" (Splinter model)"),RLo=l(),f1=a("li"),Xfe=a("strong"),PLo=o("squeezebert"),BLo=o(" \u2014 "),HD=a("a"),ILo=o("SqueezeBertForMaskedLM"),NLo=o(" (SqueezeBERT model)"),qLo=l(),m1=a("li"),zfe=a("strong"),jLo=o("t5"),DLo=o(" \u2014 "),UD=a("a"),GLo=o("T5ForConditionalGeneration"),OLo=o(" (T5 model)"),VLo=l(),g1=a("li"),Qfe=a("strong"),XLo=o("tapas"),zLo=o(" \u2014 "),JD=a("a"),QLo=o("TapasForMaskedLM"),WLo=o(" (TAPAS model)"),HLo=l(),h1=a("li"),Wfe=a("strong"),ULo=o("transfo-xl"),JLo=o(" \u2014 "),YD=a("a"),YLo=o("TransfoXLLMHeadModel"),KLo=o(" (Transformer-XL model)"),ZLo=l(),p1=a("li"),Hfe=a("strong"),e7o=o("unispeech"),o7o=o(" \u2014 "),KD=a("a"),r7o=o("UniSpeechForPreTraining"),t7o=o(" (UniSpeech model)"),a7o=l(),_1=a("li"),Ufe=a("strong"),n7o=o("unispeech-sat"),s7o=o(" \u2014 "),ZD=a("a"),l7o=o("UniSpeechSatForPreTraining"),i7o=o(" (UniSpeechSat model)"),d7o=l(),u1=a("li"),Jfe=a("strong"),c7o=o("visual_bert"),f7o=o(" \u2014 "),eG=a("a"),m7o=o("VisualBertForPreTraining"),g7o=o(" (VisualBERT model)"),h7o=l(),b1=a("li"),Yfe=a("strong"),p7o=o("vit_mae"),_7o=o(" \u2014 "),oG=a("a"),u7o=o("ViTMAEForPreTraining"),b7o=o(" (ViTMAE model)"),v7o=l(),v1=a("li"),Kfe=a("strong"),F7o=o("wav2vec2"),T7o=o(" \u2014 "),rG=a("a"),M7o=o("Wav2Vec2ForPreTraining"),E7o=o(" (Wav2Vec2 model)"),C7o=l(),F1=a("li"),Zfe=a("strong"),w7o=o("wav2vec2-conformer"),A7o=o(" \u2014 "),tG=a("a"),L7o=o("Wav2Vec2ConformerForPreTraining"),y7o=o(" (Wav2Vec2-Conformer model)"),x7o=l(),T1=a("li"),eme=a("strong"),$7o=o("xlm"),k7o=o(" \u2014 "),aG=a("a"),S7o=o("XLMWithLMHeadModel"),R7o=o(" (XLM model)"),P7o=l(),M1=a("li"),ome=a("strong"),B7o=o("xlm-roberta"),I7o=o(" \u2014 "),nG=a("a"),N7o=o("XLMRobertaForMaskedLM"),q7o=o(" (XLM-RoBERTa model)"),j7o=l(),E1=a("li"),rme=a("strong"),D7o=o("xlm-roberta-xl"),G7o=o(" \u2014 "),sG=a("a"),O7o=o("XLMRobertaXLForMaskedLM"),V7o=o(" (XLM-RoBERTa-XL model)"),X7o=l(),C1=a("li"),tme=a("strong"),z7o=o("xlnet"),Q7o=o(" \u2014 "),lG=a("a"),W7o=o("XLNetLMHeadModel"),H7o=o(" (XLNet model)"),U7o=l(),w1=a("p"),J7o=o("The model is set in evaluation mode by default using "),ame=a("code"),Y7o=o("model.eval()"),K7o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nme=a("code"),Z7o=o("model.train()"),eyo=l(),F(A1.$$.fragment),LOe=l(),Oi=a("h2"),L1=a("a"),sme=a("span"),F(uy.$$.fragment),oyo=l(),lme=a("span"),ryo=o("AutoModelForCausalLM"),yOe=l(),ko=a("div"),F(by.$$.fragment),tyo=l(),Vi=a("p"),ayo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),iG=a("a"),nyo=o("from_pretrained()"),syo=o(" class method or the "),dG=a("a"),lyo=o("from_config()"),iyo=o(` class
method.`),dyo=l(),vy=a("p"),cyo=o("This class cannot be instantiated directly using "),ime=a("code"),fyo=o("__init__()"),myo=o(" (throws an error)."),gyo=l(),lt=a("div"),F(Fy.$$.fragment),hyo=l(),dme=a("p"),pyo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),_yo=l(),Xi=a("p"),uyo=o(`Note:
Loading a model from its configuration file does `),cme=a("strong"),byo=o("not"),vyo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cG=a("a"),Fyo=o("from_pretrained()"),Tyo=o(" to load the model weights."),Myo=l(),F(y1.$$.fragment),Eyo=l(),Ke=a("div"),F(Ty.$$.fragment),Cyo=l(),fme=a("p"),wyo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Ayo=l(),Ba=a("p"),Lyo=o("The model class to instantiate is selected based on the "),mme=a("code"),yyo=o("model_type"),xyo=o(` property of the config object (either
passed as an argument or loaded from `),gme=a("code"),$yo=o("pretrained_model_name_or_path"),kyo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hme=a("code"),Syo=o("pretrained_model_name_or_path"),Ryo=o(":"),Pyo=l(),z=a("ul"),x1=a("li"),pme=a("strong"),Byo=o("bart"),Iyo=o(" \u2014 "),fG=a("a"),Nyo=o("BartForCausalLM"),qyo=o(" (BART model)"),jyo=l(),$1=a("li"),_me=a("strong"),Dyo=o("bert"),Gyo=o(" \u2014 "),mG=a("a"),Oyo=o("BertLMHeadModel"),Vyo=o(" (BERT model)"),Xyo=l(),k1=a("li"),ume=a("strong"),zyo=o("bert-generation"),Qyo=o(" \u2014 "),gG=a("a"),Wyo=o("BertGenerationDecoder"),Hyo=o(" (Bert Generation model)"),Uyo=l(),S1=a("li"),bme=a("strong"),Jyo=o("big_bird"),Yyo=o(" \u2014 "),hG=a("a"),Kyo=o("BigBirdForCausalLM"),Zyo=o(" (BigBird model)"),e8o=l(),R1=a("li"),vme=a("strong"),o8o=o("bigbird_pegasus"),r8o=o(" \u2014 "),pG=a("a"),t8o=o("BigBirdPegasusForCausalLM"),a8o=o(" (BigBird-Pegasus model)"),n8o=l(),P1=a("li"),Fme=a("strong"),s8o=o("blenderbot"),l8o=o(" \u2014 "),_G=a("a"),i8o=o("BlenderbotForCausalLM"),d8o=o(" (Blenderbot model)"),c8o=l(),B1=a("li"),Tme=a("strong"),f8o=o("blenderbot-small"),m8o=o(" \u2014 "),uG=a("a"),g8o=o("BlenderbotSmallForCausalLM"),h8o=o(" (BlenderbotSmall model)"),p8o=l(),I1=a("li"),Mme=a("strong"),_8o=o("bloom"),u8o=o(" \u2014 "),bG=a("a"),b8o=o("BloomForCausalLM"),v8o=o(" (BLOOM model)"),F8o=l(),N1=a("li"),Eme=a("strong"),T8o=o("camembert"),M8o=o(" \u2014 "),vG=a("a"),E8o=o("CamembertForCausalLM"),C8o=o(" (CamemBERT model)"),w8o=l(),q1=a("li"),Cme=a("strong"),A8o=o("codegen"),L8o=o(" \u2014 "),FG=a("a"),y8o=o("CodeGenForCausalLM"),x8o=o(" (CodeGen model)"),$8o=l(),j1=a("li"),wme=a("strong"),k8o=o("ctrl"),S8o=o(" \u2014 "),TG=a("a"),R8o=o("CTRLLMHeadModel"),P8o=o(" (CTRL model)"),B8o=l(),D1=a("li"),Ame=a("strong"),I8o=o("data2vec-text"),N8o=o(" \u2014 "),MG=a("a"),q8o=o("Data2VecTextForCausalLM"),j8o=o(" (Data2VecText model)"),D8o=l(),G1=a("li"),Lme=a("strong"),G8o=o("electra"),O8o=o(" \u2014 "),EG=a("a"),V8o=o("ElectraForCausalLM"),X8o=o(" (ELECTRA model)"),z8o=l(),O1=a("li"),yme=a("strong"),Q8o=o("gpt2"),W8o=o(" \u2014 "),CG=a("a"),H8o=o("GPT2LMHeadModel"),U8o=o(" (OpenAI GPT-2 model)"),J8o=l(),V1=a("li"),xme=a("strong"),Y8o=o("gpt_neo"),K8o=o(" \u2014 "),wG=a("a"),Z8o=o("GPTNeoForCausalLM"),e9o=o(" (GPT Neo model)"),o9o=l(),X1=a("li"),$me=a("strong"),r9o=o("gpt_neox"),t9o=o(" \u2014 "),AG=a("a"),a9o=o("GPTNeoXForCausalLM"),n9o=o(" (GPT NeoX model)"),s9o=l(),z1=a("li"),kme=a("strong"),l9o=o("gptj"),i9o=o(" \u2014 "),LG=a("a"),d9o=o("GPTJForCausalLM"),c9o=o(" (GPT-J model)"),f9o=l(),Q1=a("li"),Sme=a("strong"),m9o=o("marian"),g9o=o(" \u2014 "),yG=a("a"),h9o=o("MarianForCausalLM"),p9o=o(" (Marian model)"),_9o=l(),W1=a("li"),Rme=a("strong"),u9o=o("mbart"),b9o=o(" \u2014 "),xG=a("a"),v9o=o("MBartForCausalLM"),F9o=o(" (mBART model)"),T9o=l(),H1=a("li"),Pme=a("strong"),M9o=o("megatron-bert"),E9o=o(" \u2014 "),$G=a("a"),C9o=o("MegatronBertForCausalLM"),w9o=o(" (Megatron-BERT model)"),A9o=l(),U1=a("li"),Bme=a("strong"),L9o=o("openai-gpt"),y9o=o(" \u2014 "),kG=a("a"),x9o=o("OpenAIGPTLMHeadModel"),$9o=o(" (OpenAI GPT model)"),k9o=l(),J1=a("li"),Ime=a("strong"),S9o=o("opt"),R9o=o(" \u2014 "),SG=a("a"),P9o=o("OPTForCausalLM"),B9o=o(" (OPT model)"),I9o=l(),Y1=a("li"),Nme=a("strong"),N9o=o("pegasus"),q9o=o(" \u2014 "),RG=a("a"),j9o=o("PegasusForCausalLM"),D9o=o(" (Pegasus model)"),G9o=l(),K1=a("li"),qme=a("strong"),O9o=o("plbart"),V9o=o(" \u2014 "),PG=a("a"),X9o=o("PLBartForCausalLM"),z9o=o(" (PLBart model)"),Q9o=l(),Z1=a("li"),jme=a("strong"),W9o=o("prophetnet"),H9o=o(" \u2014 "),BG=a("a"),U9o=o("ProphetNetForCausalLM"),J9o=o(" (ProphetNet model)"),Y9o=l(),e2=a("li"),Dme=a("strong"),K9o=o("qdqbert"),Z9o=o(" \u2014 "),IG=a("a"),exo=o("QDQBertLMHeadModel"),oxo=o(" (QDQBert model)"),rxo=l(),o2=a("li"),Gme=a("strong"),txo=o("reformer"),axo=o(" \u2014 "),NG=a("a"),nxo=o("ReformerModelWithLMHead"),sxo=o(" (Reformer model)"),lxo=l(),r2=a("li"),Ome=a("strong"),ixo=o("rembert"),dxo=o(" \u2014 "),qG=a("a"),cxo=o("RemBertForCausalLM"),fxo=o(" (RemBERT model)"),mxo=l(),t2=a("li"),Vme=a("strong"),gxo=o("roberta"),hxo=o(" \u2014 "),jG=a("a"),pxo=o("RobertaForCausalLM"),_xo=o(" (RoBERTa model)"),uxo=l(),a2=a("li"),Xme=a("strong"),bxo=o("roformer"),vxo=o(" \u2014 "),DG=a("a"),Fxo=o("RoFormerForCausalLM"),Txo=o(" (RoFormer model)"),Mxo=l(),n2=a("li"),zme=a("strong"),Exo=o("speech_to_text_2"),Cxo=o(" \u2014 "),GG=a("a"),wxo=o("Speech2Text2ForCausalLM"),Axo=o(" (Speech2Text2 model)"),Lxo=l(),s2=a("li"),Qme=a("strong"),yxo=o("transfo-xl"),xxo=o(" \u2014 "),OG=a("a"),$xo=o("TransfoXLLMHeadModel"),kxo=o(" (Transformer-XL model)"),Sxo=l(),l2=a("li"),Wme=a("strong"),Rxo=o("trocr"),Pxo=o(" \u2014 "),VG=a("a"),Bxo=o("TrOCRForCausalLM"),Ixo=o(" (TrOCR model)"),Nxo=l(),i2=a("li"),Hme=a("strong"),qxo=o("xglm"),jxo=o(" \u2014 "),XG=a("a"),Dxo=o("XGLMForCausalLM"),Gxo=o(" (XGLM model)"),Oxo=l(),d2=a("li"),Ume=a("strong"),Vxo=o("xlm"),Xxo=o(" \u2014 "),zG=a("a"),zxo=o("XLMWithLMHeadModel"),Qxo=o(" (XLM model)"),Wxo=l(),c2=a("li"),Jme=a("strong"),Hxo=o("xlm-prophetnet"),Uxo=o(" \u2014 "),QG=a("a"),Jxo=o("XLMProphetNetForCausalLM"),Yxo=o(" (XLM-ProphetNet model)"),Kxo=l(),f2=a("li"),Yme=a("strong"),Zxo=o("xlm-roberta"),e$o=o(" \u2014 "),WG=a("a"),o$o=o("XLMRobertaForCausalLM"),r$o=o(" (XLM-RoBERTa model)"),t$o=l(),m2=a("li"),Kme=a("strong"),a$o=o("xlm-roberta-xl"),n$o=o(" \u2014 "),HG=a("a"),s$o=o("XLMRobertaXLForCausalLM"),l$o=o(" (XLM-RoBERTa-XL model)"),i$o=l(),g2=a("li"),Zme=a("strong"),d$o=o("xlnet"),c$o=o(" \u2014 "),UG=a("a"),f$o=o("XLNetLMHeadModel"),m$o=o(" (XLNet model)"),g$o=l(),h2=a("p"),h$o=o("The model is set in evaluation mode by default using "),ege=a("code"),p$o=o("model.eval()"),_$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),oge=a("code"),u$o=o("model.train()"),b$o=l(),F(p2.$$.fragment),xOe=l(),zi=a("h2"),_2=a("a"),rge=a("span"),F(My.$$.fragment),v$o=l(),tge=a("span"),F$o=o("AutoModelForMaskedLM"),$Oe=l(),So=a("div"),F(Ey.$$.fragment),T$o=l(),Qi=a("p"),M$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),JG=a("a"),E$o=o("from_pretrained()"),C$o=o(" class method or the "),YG=a("a"),w$o=o("from_config()"),A$o=o(` class
method.`),L$o=l(),Cy=a("p"),y$o=o("This class cannot be instantiated directly using "),age=a("code"),x$o=o("__init__()"),$$o=o(" (throws an error)."),k$o=l(),it=a("div"),F(wy.$$.fragment),S$o=l(),nge=a("p"),R$o=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),P$o=l(),Wi=a("p"),B$o=o(`Note:
Loading a model from its configuration file does `),sge=a("strong"),I$o=o("not"),N$o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KG=a("a"),q$o=o("from_pretrained()"),j$o=o(" to load the model weights."),D$o=l(),F(u2.$$.fragment),G$o=l(),Ze=a("div"),F(Ay.$$.fragment),O$o=l(),lge=a("p"),V$o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),X$o=l(),Ia=a("p"),z$o=o("The model class to instantiate is selected based on the "),ige=a("code"),Q$o=o("model_type"),W$o=o(` property of the config object (either
passed as an argument or loaded from `),dge=a("code"),H$o=o("pretrained_model_name_or_path"),U$o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cge=a("code"),J$o=o("pretrained_model_name_or_path"),Y$o=o(":"),K$o=l(),W=a("ul"),b2=a("li"),fge=a("strong"),Z$o=o("albert"),eko=o(" \u2014 "),ZG=a("a"),oko=o("AlbertForMaskedLM"),rko=o(" (ALBERT model)"),tko=l(),v2=a("li"),mge=a("strong"),ako=o("bart"),nko=o(" \u2014 "),eO=a("a"),sko=o("BartForConditionalGeneration"),lko=o(" (BART model)"),iko=l(),F2=a("li"),gge=a("strong"),dko=o("bert"),cko=o(" \u2014 "),oO=a("a"),fko=o("BertForMaskedLM"),mko=o(" (BERT model)"),gko=l(),T2=a("li"),hge=a("strong"),hko=o("big_bird"),pko=o(" \u2014 "),rO=a("a"),_ko=o("BigBirdForMaskedLM"),uko=o(" (BigBird model)"),bko=l(),M2=a("li"),pge=a("strong"),vko=o("camembert"),Fko=o(" \u2014 "),tO=a("a"),Tko=o("CamembertForMaskedLM"),Mko=o(" (CamemBERT model)"),Eko=l(),E2=a("li"),_ge=a("strong"),Cko=o("convbert"),wko=o(" \u2014 "),aO=a("a"),Ako=o("ConvBertForMaskedLM"),Lko=o(" (ConvBERT model)"),yko=l(),C2=a("li"),uge=a("strong"),xko=o("data2vec-text"),$ko=o(" \u2014 "),nO=a("a"),kko=o("Data2VecTextForMaskedLM"),Sko=o(" (Data2VecText model)"),Rko=l(),w2=a("li"),bge=a("strong"),Pko=o("deberta"),Bko=o(" \u2014 "),sO=a("a"),Iko=o("DebertaForMaskedLM"),Nko=o(" (DeBERTa model)"),qko=l(),A2=a("li"),vge=a("strong"),jko=o("deberta-v2"),Dko=o(" \u2014 "),lO=a("a"),Gko=o("DebertaV2ForMaskedLM"),Oko=o(" (DeBERTa-v2 model)"),Vko=l(),L2=a("li"),Fge=a("strong"),Xko=o("distilbert"),zko=o(" \u2014 "),iO=a("a"),Qko=o("DistilBertForMaskedLM"),Wko=o(" (DistilBERT model)"),Hko=l(),y2=a("li"),Tge=a("strong"),Uko=o("electra"),Jko=o(" \u2014 "),dO=a("a"),Yko=o("ElectraForMaskedLM"),Kko=o(" (ELECTRA model)"),Zko=l(),x2=a("li"),Mge=a("strong"),eSo=o("flaubert"),oSo=o(" \u2014 "),cO=a("a"),rSo=o("FlaubertWithLMHeadModel"),tSo=o(" (FlauBERT model)"),aSo=l(),$2=a("li"),Ege=a("strong"),nSo=o("fnet"),sSo=o(" \u2014 "),fO=a("a"),lSo=o("FNetForMaskedLM"),iSo=o(" (FNet model)"),dSo=l(),k2=a("li"),Cge=a("strong"),cSo=o("funnel"),fSo=o(" \u2014 "),mO=a("a"),mSo=o("FunnelForMaskedLM"),gSo=o(" (Funnel Transformer model)"),hSo=l(),S2=a("li"),wge=a("strong"),pSo=o("ibert"),_So=o(" \u2014 "),gO=a("a"),uSo=o("IBertForMaskedLM"),bSo=o(" (I-BERT model)"),vSo=l(),R2=a("li"),Age=a("strong"),FSo=o("layoutlm"),TSo=o(" \u2014 "),hO=a("a"),MSo=o("LayoutLMForMaskedLM"),ESo=o(" (LayoutLM model)"),CSo=l(),P2=a("li"),Lge=a("strong"),wSo=o("longformer"),ASo=o(" \u2014 "),pO=a("a"),LSo=o("LongformerForMaskedLM"),ySo=o(" (Longformer model)"),xSo=l(),B2=a("li"),yge=a("strong"),$So=o("luke"),kSo=o(" \u2014 "),_O=a("a"),SSo=o("LukeForMaskedLM"),RSo=o(" (LUKE model)"),PSo=l(),I2=a("li"),xge=a("strong"),BSo=o("mbart"),ISo=o(" \u2014 "),uO=a("a"),NSo=o("MBartForConditionalGeneration"),qSo=o(" (mBART model)"),jSo=l(),N2=a("li"),$ge=a("strong"),DSo=o("megatron-bert"),GSo=o(" \u2014 "),bO=a("a"),OSo=o("MegatronBertForMaskedLM"),VSo=o(" (Megatron-BERT model)"),XSo=l(),q2=a("li"),kge=a("strong"),zSo=o("mobilebert"),QSo=o(" \u2014 "),vO=a("a"),WSo=o("MobileBertForMaskedLM"),HSo=o(" (MobileBERT model)"),USo=l(),j2=a("li"),Sge=a("strong"),JSo=o("mpnet"),YSo=o(" \u2014 "),FO=a("a"),KSo=o("MPNetForMaskedLM"),ZSo=o(" (MPNet model)"),eRo=l(),D2=a("li"),Rge=a("strong"),oRo=o("nezha"),rRo=o(" \u2014 "),TO=a("a"),tRo=o("NezhaForMaskedLM"),aRo=o(" (Nezha model)"),nRo=l(),G2=a("li"),Pge=a("strong"),sRo=o("nystromformer"),lRo=o(" \u2014 "),MO=a("a"),iRo=o("NystromformerForMaskedLM"),dRo=o(" (Nystr\xF6mformer model)"),cRo=l(),O2=a("li"),Bge=a("strong"),fRo=o("perceiver"),mRo=o(" \u2014 "),EO=a("a"),gRo=o("PerceiverForMaskedLM"),hRo=o(" (Perceiver model)"),pRo=l(),V2=a("li"),Ige=a("strong"),_Ro=o("qdqbert"),uRo=o(" \u2014 "),CO=a("a"),bRo=o("QDQBertForMaskedLM"),vRo=o(" (QDQBert model)"),FRo=l(),X2=a("li"),Nge=a("strong"),TRo=o("reformer"),MRo=o(" \u2014 "),wO=a("a"),ERo=o("ReformerForMaskedLM"),CRo=o(" (Reformer model)"),wRo=l(),z2=a("li"),qge=a("strong"),ARo=o("rembert"),LRo=o(" \u2014 "),AO=a("a"),yRo=o("RemBertForMaskedLM"),xRo=o(" (RemBERT model)"),$Ro=l(),Q2=a("li"),jge=a("strong"),kRo=o("roberta"),SRo=o(" \u2014 "),LO=a("a"),RRo=o("RobertaForMaskedLM"),PRo=o(" (RoBERTa model)"),BRo=l(),W2=a("li"),Dge=a("strong"),IRo=o("roformer"),NRo=o(" \u2014 "),yO=a("a"),qRo=o("RoFormerForMaskedLM"),jRo=o(" (RoFormer model)"),DRo=l(),H2=a("li"),Gge=a("strong"),GRo=o("squeezebert"),ORo=o(" \u2014 "),xO=a("a"),VRo=o("SqueezeBertForMaskedLM"),XRo=o(" (SqueezeBERT model)"),zRo=l(),U2=a("li"),Oge=a("strong"),QRo=o("tapas"),WRo=o(" \u2014 "),$O=a("a"),HRo=o("TapasForMaskedLM"),URo=o(" (TAPAS model)"),JRo=l(),J2=a("li"),Vge=a("strong"),YRo=o("wav2vec2"),KRo=o(" \u2014 "),Xge=a("code"),ZRo=o("Wav2Vec2ForMaskedLM"),ePo=o(" (Wav2Vec2 model)"),oPo=l(),Y2=a("li"),zge=a("strong"),rPo=o("xlm"),tPo=o(" \u2014 "),kO=a("a"),aPo=o("XLMWithLMHeadModel"),nPo=o(" (XLM model)"),sPo=l(),K2=a("li"),Qge=a("strong"),lPo=o("xlm-roberta"),iPo=o(" \u2014 "),SO=a("a"),dPo=o("XLMRobertaForMaskedLM"),cPo=o(" (XLM-RoBERTa model)"),fPo=l(),Z2=a("li"),Wge=a("strong"),mPo=o("xlm-roberta-xl"),gPo=o(" \u2014 "),RO=a("a"),hPo=o("XLMRobertaXLForMaskedLM"),pPo=o(" (XLM-RoBERTa-XL model)"),_Po=l(),eb=a("li"),Hge=a("strong"),uPo=o("yoso"),bPo=o(" \u2014 "),PO=a("a"),vPo=o("YosoForMaskedLM"),FPo=o(" (YOSO model)"),TPo=l(),ob=a("p"),MPo=o("The model is set in evaluation mode by default using "),Uge=a("code"),EPo=o("model.eval()"),CPo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jge=a("code"),wPo=o("model.train()"),APo=l(),F(rb.$$.fragment),kOe=l(),Hi=a("h2"),tb=a("a"),Yge=a("span"),F(Ly.$$.fragment),LPo=l(),Kge=a("span"),yPo=o("AutoModelForSeq2SeqLM"),SOe=l(),Ro=a("div"),F(yy.$$.fragment),xPo=l(),Ui=a("p"),$Po=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),BO=a("a"),kPo=o("from_pretrained()"),SPo=o(" class method or the "),IO=a("a"),RPo=o("from_config()"),PPo=o(` class
method.`),BPo=l(),xy=a("p"),IPo=o("This class cannot be instantiated directly using "),Zge=a("code"),NPo=o("__init__()"),qPo=o(" (throws an error)."),jPo=l(),dt=a("div"),F($y.$$.fragment),DPo=l(),ehe=a("p"),GPo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),OPo=l(),Ji=a("p"),VPo=o(`Note:
Loading a model from its configuration file does `),ohe=a("strong"),XPo=o("not"),zPo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NO=a("a"),QPo=o("from_pretrained()"),WPo=o(" to load the model weights."),HPo=l(),F(ab.$$.fragment),UPo=l(),eo=a("div"),F(ky.$$.fragment),JPo=l(),rhe=a("p"),YPo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),KPo=l(),Na=a("p"),ZPo=o("The model class to instantiate is selected based on the "),the=a("code"),eBo=o("model_type"),oBo=o(` property of the config object (either
passed as an argument or loaded from `),ahe=a("code"),rBo=o("pretrained_model_name_or_path"),tBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nhe=a("code"),aBo=o("pretrained_model_name_or_path"),nBo=o(":"),sBo=l(),pe=a("ul"),nb=a("li"),she=a("strong"),lBo=o("bart"),iBo=o(" \u2014 "),qO=a("a"),dBo=o("BartForConditionalGeneration"),cBo=o(" (BART model)"),fBo=l(),sb=a("li"),lhe=a("strong"),mBo=o("bigbird_pegasus"),gBo=o(" \u2014 "),jO=a("a"),hBo=o("BigBirdPegasusForConditionalGeneration"),pBo=o(" (BigBird-Pegasus model)"),_Bo=l(),lb=a("li"),ihe=a("strong"),uBo=o("blenderbot"),bBo=o(" \u2014 "),DO=a("a"),vBo=o("BlenderbotForConditionalGeneration"),FBo=o(" (Blenderbot model)"),TBo=l(),ib=a("li"),dhe=a("strong"),MBo=o("blenderbot-small"),EBo=o(" \u2014 "),GO=a("a"),CBo=o("BlenderbotSmallForConditionalGeneration"),wBo=o(" (BlenderbotSmall model)"),ABo=l(),db=a("li"),che=a("strong"),LBo=o("encoder-decoder"),yBo=o(" \u2014 "),OO=a("a"),xBo=o("EncoderDecoderModel"),$Bo=o(" (Encoder decoder model)"),kBo=l(),cb=a("li"),fhe=a("strong"),SBo=o("fsmt"),RBo=o(" \u2014 "),VO=a("a"),PBo=o("FSMTForConditionalGeneration"),BBo=o(" (FairSeq Machine-Translation model)"),IBo=l(),fb=a("li"),mhe=a("strong"),NBo=o("led"),qBo=o(" \u2014 "),XO=a("a"),jBo=o("LEDForConditionalGeneration"),DBo=o(" (LED model)"),GBo=l(),mb=a("li"),ghe=a("strong"),OBo=o("longt5"),VBo=o(" \u2014 "),zO=a("a"),XBo=o("LongT5ForConditionalGeneration"),zBo=o(" (LongT5 model)"),QBo=l(),gb=a("li"),hhe=a("strong"),WBo=o("m2m_100"),HBo=o(" \u2014 "),QO=a("a"),UBo=o("M2M100ForConditionalGeneration"),JBo=o(" (M2M100 model)"),YBo=l(),hb=a("li"),phe=a("strong"),KBo=o("marian"),ZBo=o(" \u2014 "),WO=a("a"),eIo=o("MarianMTModel"),oIo=o(" (Marian model)"),rIo=l(),pb=a("li"),_he=a("strong"),tIo=o("mbart"),aIo=o(" \u2014 "),HO=a("a"),nIo=o("MBartForConditionalGeneration"),sIo=o(" (mBART model)"),lIo=l(),_b=a("li"),uhe=a("strong"),iIo=o("mt5"),dIo=o(" \u2014 "),UO=a("a"),cIo=o("MT5ForConditionalGeneration"),fIo=o(" (MT5 model)"),mIo=l(),ub=a("li"),bhe=a("strong"),gIo=o("pegasus"),hIo=o(" \u2014 "),JO=a("a"),pIo=o("PegasusForConditionalGeneration"),_Io=o(" (Pegasus model)"),uIo=l(),bb=a("li"),vhe=a("strong"),bIo=o("plbart"),vIo=o(" \u2014 "),YO=a("a"),FIo=o("PLBartForConditionalGeneration"),TIo=o(" (PLBart model)"),MIo=l(),vb=a("li"),Fhe=a("strong"),EIo=o("prophetnet"),CIo=o(" \u2014 "),KO=a("a"),wIo=o("ProphetNetForConditionalGeneration"),AIo=o(" (ProphetNet model)"),LIo=l(),Fb=a("li"),The=a("strong"),yIo=o("t5"),xIo=o(" \u2014 "),ZO=a("a"),$Io=o("T5ForConditionalGeneration"),kIo=o(" (T5 model)"),SIo=l(),Tb=a("li"),Mhe=a("strong"),RIo=o("xlm-prophetnet"),PIo=o(" \u2014 "),eV=a("a"),BIo=o("XLMProphetNetForConditionalGeneration"),IIo=o(" (XLM-ProphetNet model)"),NIo=l(),Mb=a("p"),qIo=o("The model is set in evaluation mode by default using "),Ehe=a("code"),jIo=o("model.eval()"),DIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Che=a("code"),GIo=o("model.train()"),OIo=l(),F(Eb.$$.fragment),ROe=l(),Yi=a("h2"),Cb=a("a"),whe=a("span"),F(Sy.$$.fragment),VIo=l(),Ahe=a("span"),XIo=o("AutoModelForSequenceClassification"),POe=l(),Po=a("div"),F(Ry.$$.fragment),zIo=l(),Ki=a("p"),QIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),oV=a("a"),WIo=o("from_pretrained()"),HIo=o(" class method or the "),rV=a("a"),UIo=o("from_config()"),JIo=o(` class
method.`),YIo=l(),Py=a("p"),KIo=o("This class cannot be instantiated directly using "),Lhe=a("code"),ZIo=o("__init__()"),eNo=o(" (throws an error)."),oNo=l(),ct=a("div"),F(By.$$.fragment),rNo=l(),yhe=a("p"),tNo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),aNo=l(),Zi=a("p"),nNo=o(`Note:
Loading a model from its configuration file does `),xhe=a("strong"),sNo=o("not"),lNo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tV=a("a"),iNo=o("from_pretrained()"),dNo=o(" to load the model weights."),cNo=l(),F(wb.$$.fragment),fNo=l(),oo=a("div"),F(Iy.$$.fragment),mNo=l(),$he=a("p"),gNo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),hNo=l(),qa=a("p"),pNo=o("The model class to instantiate is selected based on the "),khe=a("code"),_No=o("model_type"),uNo=o(` property of the config object (either
passed as an argument or loaded from `),She=a("code"),bNo=o("pretrained_model_name_or_path"),vNo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rhe=a("code"),FNo=o("pretrained_model_name_or_path"),TNo=o(":"),MNo=l(),N=a("ul"),Ab=a("li"),Phe=a("strong"),ENo=o("albert"),CNo=o(" \u2014 "),aV=a("a"),wNo=o("AlbertForSequenceClassification"),ANo=o(" (ALBERT model)"),LNo=l(),Lb=a("li"),Bhe=a("strong"),yNo=o("bart"),xNo=o(" \u2014 "),nV=a("a"),$No=o("BartForSequenceClassification"),kNo=o(" (BART model)"),SNo=l(),yb=a("li"),Ihe=a("strong"),RNo=o("bert"),PNo=o(" \u2014 "),sV=a("a"),BNo=o("BertForSequenceClassification"),INo=o(" (BERT model)"),NNo=l(),xb=a("li"),Nhe=a("strong"),qNo=o("big_bird"),jNo=o(" \u2014 "),lV=a("a"),DNo=o("BigBirdForSequenceClassification"),GNo=o(" (BigBird model)"),ONo=l(),$b=a("li"),qhe=a("strong"),VNo=o("bigbird_pegasus"),XNo=o(" \u2014 "),iV=a("a"),zNo=o("BigBirdPegasusForSequenceClassification"),QNo=o(" (BigBird-Pegasus model)"),WNo=l(),kb=a("li"),jhe=a("strong"),HNo=o("bloom"),UNo=o(" \u2014 "),dV=a("a"),JNo=o("BloomForSequenceClassification"),YNo=o(" (BLOOM model)"),KNo=l(),Sb=a("li"),Dhe=a("strong"),ZNo=o("camembert"),eqo=o(" \u2014 "),cV=a("a"),oqo=o("CamembertForSequenceClassification"),rqo=o(" (CamemBERT model)"),tqo=l(),Rb=a("li"),Ghe=a("strong"),aqo=o("canine"),nqo=o(" \u2014 "),fV=a("a"),sqo=o("CanineForSequenceClassification"),lqo=o(" (CANINE model)"),iqo=l(),Pb=a("li"),Ohe=a("strong"),dqo=o("convbert"),cqo=o(" \u2014 "),mV=a("a"),fqo=o("ConvBertForSequenceClassification"),mqo=o(" (ConvBERT model)"),gqo=l(),Bb=a("li"),Vhe=a("strong"),hqo=o("ctrl"),pqo=o(" \u2014 "),gV=a("a"),_qo=o("CTRLForSequenceClassification"),uqo=o(" (CTRL model)"),bqo=l(),Ib=a("li"),Xhe=a("strong"),vqo=o("data2vec-text"),Fqo=o(" \u2014 "),hV=a("a"),Tqo=o("Data2VecTextForSequenceClassification"),Mqo=o(" (Data2VecText model)"),Eqo=l(),Nb=a("li"),zhe=a("strong"),Cqo=o("deberta"),wqo=o(" \u2014 "),pV=a("a"),Aqo=o("DebertaForSequenceClassification"),Lqo=o(" (DeBERTa model)"),yqo=l(),qb=a("li"),Qhe=a("strong"),xqo=o("deberta-v2"),$qo=o(" \u2014 "),_V=a("a"),kqo=o("DebertaV2ForSequenceClassification"),Sqo=o(" (DeBERTa-v2 model)"),Rqo=l(),jb=a("li"),Whe=a("strong"),Pqo=o("distilbert"),Bqo=o(" \u2014 "),uV=a("a"),Iqo=o("DistilBertForSequenceClassification"),Nqo=o(" (DistilBERT model)"),qqo=l(),Db=a("li"),Hhe=a("strong"),jqo=o("electra"),Dqo=o(" \u2014 "),bV=a("a"),Gqo=o("ElectraForSequenceClassification"),Oqo=o(" (ELECTRA model)"),Vqo=l(),Gb=a("li"),Uhe=a("strong"),Xqo=o("flaubert"),zqo=o(" \u2014 "),vV=a("a"),Qqo=o("FlaubertForSequenceClassification"),Wqo=o(" (FlauBERT model)"),Hqo=l(),Ob=a("li"),Jhe=a("strong"),Uqo=o("fnet"),Jqo=o(" \u2014 "),FV=a("a"),Yqo=o("FNetForSequenceClassification"),Kqo=o(" (FNet model)"),Zqo=l(),Vb=a("li"),Yhe=a("strong"),ejo=o("funnel"),ojo=o(" \u2014 "),TV=a("a"),rjo=o("FunnelForSequenceClassification"),tjo=o(" (Funnel Transformer model)"),ajo=l(),Xb=a("li"),Khe=a("strong"),njo=o("gpt2"),sjo=o(" \u2014 "),MV=a("a"),ljo=o("GPT2ForSequenceClassification"),ijo=o(" (OpenAI GPT-2 model)"),djo=l(),zb=a("li"),Zhe=a("strong"),cjo=o("gpt_neo"),fjo=o(" \u2014 "),EV=a("a"),mjo=o("GPTNeoForSequenceClassification"),gjo=o(" (GPT Neo model)"),hjo=l(),Qb=a("li"),epe=a("strong"),pjo=o("gptj"),_jo=o(" \u2014 "),CV=a("a"),ujo=o("GPTJForSequenceClassification"),bjo=o(" (GPT-J model)"),vjo=l(),Wb=a("li"),ope=a("strong"),Fjo=o("ibert"),Tjo=o(" \u2014 "),wV=a("a"),Mjo=o("IBertForSequenceClassification"),Ejo=o(" (I-BERT model)"),Cjo=l(),Hb=a("li"),rpe=a("strong"),wjo=o("layoutlm"),Ajo=o(" \u2014 "),AV=a("a"),Ljo=o("LayoutLMForSequenceClassification"),yjo=o(" (LayoutLM model)"),xjo=l(),Ub=a("li"),tpe=a("strong"),$jo=o("layoutlmv2"),kjo=o(" \u2014 "),LV=a("a"),Sjo=o("LayoutLMv2ForSequenceClassification"),Rjo=o(" (LayoutLMv2 model)"),Pjo=l(),Jb=a("li"),ape=a("strong"),Bjo=o("layoutlmv3"),Ijo=o(" \u2014 "),yV=a("a"),Njo=o("LayoutLMv3ForSequenceClassification"),qjo=o(" (LayoutLMv3 model)"),jjo=l(),Yb=a("li"),npe=a("strong"),Djo=o("led"),Gjo=o(" \u2014 "),xV=a("a"),Ojo=o("LEDForSequenceClassification"),Vjo=o(" (LED model)"),Xjo=l(),Kb=a("li"),spe=a("strong"),zjo=o("longformer"),Qjo=o(" \u2014 "),$V=a("a"),Wjo=o("LongformerForSequenceClassification"),Hjo=o(" (Longformer model)"),Ujo=l(),Zb=a("li"),lpe=a("strong"),Jjo=o("mbart"),Yjo=o(" \u2014 "),kV=a("a"),Kjo=o("MBartForSequenceClassification"),Zjo=o(" (mBART model)"),eDo=l(),e4=a("li"),ipe=a("strong"),oDo=o("megatron-bert"),rDo=o(" \u2014 "),SV=a("a"),tDo=o("MegatronBertForSequenceClassification"),aDo=o(" (Megatron-BERT model)"),nDo=l(),o4=a("li"),dpe=a("strong"),sDo=o("mobilebert"),lDo=o(" \u2014 "),RV=a("a"),iDo=o("MobileBertForSequenceClassification"),dDo=o(" (MobileBERT model)"),cDo=l(),r4=a("li"),cpe=a("strong"),fDo=o("mpnet"),mDo=o(" \u2014 "),PV=a("a"),gDo=o("MPNetForSequenceClassification"),hDo=o(" (MPNet model)"),pDo=l(),t4=a("li"),fpe=a("strong"),_Do=o("nezha"),uDo=o(" \u2014 "),BV=a("a"),bDo=o("NezhaForSequenceClassification"),vDo=o(" (Nezha model)"),FDo=l(),a4=a("li"),mpe=a("strong"),TDo=o("nystromformer"),MDo=o(" \u2014 "),IV=a("a"),EDo=o("NystromformerForSequenceClassification"),CDo=o(" (Nystr\xF6mformer model)"),wDo=l(),n4=a("li"),gpe=a("strong"),ADo=o("openai-gpt"),LDo=o(" \u2014 "),NV=a("a"),yDo=o("OpenAIGPTForSequenceClassification"),xDo=o(" (OpenAI GPT model)"),$Do=l(),s4=a("li"),hpe=a("strong"),kDo=o("perceiver"),SDo=o(" \u2014 "),qV=a("a"),RDo=o("PerceiverForSequenceClassification"),PDo=o(" (Perceiver model)"),BDo=l(),l4=a("li"),ppe=a("strong"),IDo=o("plbart"),NDo=o(" \u2014 "),jV=a("a"),qDo=o("PLBartForSequenceClassification"),jDo=o(" (PLBart model)"),DDo=l(),i4=a("li"),_pe=a("strong"),GDo=o("qdqbert"),ODo=o(" \u2014 "),DV=a("a"),VDo=o("QDQBertForSequenceClassification"),XDo=o(" (QDQBert model)"),zDo=l(),d4=a("li"),upe=a("strong"),QDo=o("reformer"),WDo=o(" \u2014 "),GV=a("a"),HDo=o("ReformerForSequenceClassification"),UDo=o(" (Reformer model)"),JDo=l(),c4=a("li"),bpe=a("strong"),YDo=o("rembert"),KDo=o(" \u2014 "),OV=a("a"),ZDo=o("RemBertForSequenceClassification"),eGo=o(" (RemBERT model)"),oGo=l(),f4=a("li"),vpe=a("strong"),rGo=o("roberta"),tGo=o(" \u2014 "),VV=a("a"),aGo=o("RobertaForSequenceClassification"),nGo=o(" (RoBERTa model)"),sGo=l(),m4=a("li"),Fpe=a("strong"),lGo=o("roformer"),iGo=o(" \u2014 "),XV=a("a"),dGo=o("RoFormerForSequenceClassification"),cGo=o(" (RoFormer model)"),fGo=l(),g4=a("li"),Tpe=a("strong"),mGo=o("squeezebert"),gGo=o(" \u2014 "),zV=a("a"),hGo=o("SqueezeBertForSequenceClassification"),pGo=o(" (SqueezeBERT model)"),_Go=l(),h4=a("li"),Mpe=a("strong"),uGo=o("tapas"),bGo=o(" \u2014 "),QV=a("a"),vGo=o("TapasForSequenceClassification"),FGo=o(" (TAPAS model)"),TGo=l(),p4=a("li"),Epe=a("strong"),MGo=o("transfo-xl"),EGo=o(" \u2014 "),WV=a("a"),CGo=o("TransfoXLForSequenceClassification"),wGo=o(" (Transformer-XL model)"),AGo=l(),_4=a("li"),Cpe=a("strong"),LGo=o("xlm"),yGo=o(" \u2014 "),HV=a("a"),xGo=o("XLMForSequenceClassification"),$Go=o(" (XLM model)"),kGo=l(),u4=a("li"),wpe=a("strong"),SGo=o("xlm-roberta"),RGo=o(" \u2014 "),UV=a("a"),PGo=o("XLMRobertaForSequenceClassification"),BGo=o(" (XLM-RoBERTa model)"),IGo=l(),b4=a("li"),Ape=a("strong"),NGo=o("xlm-roberta-xl"),qGo=o(" \u2014 "),JV=a("a"),jGo=o("XLMRobertaXLForSequenceClassification"),DGo=o(" (XLM-RoBERTa-XL model)"),GGo=l(),v4=a("li"),Lpe=a("strong"),OGo=o("xlnet"),VGo=o(" \u2014 "),YV=a("a"),XGo=o("XLNetForSequenceClassification"),zGo=o(" (XLNet model)"),QGo=l(),F4=a("li"),ype=a("strong"),WGo=o("yoso"),HGo=o(" \u2014 "),KV=a("a"),UGo=o("YosoForSequenceClassification"),JGo=o(" (YOSO model)"),YGo=l(),T4=a("p"),KGo=o("The model is set in evaluation mode by default using "),xpe=a("code"),ZGo=o("model.eval()"),eOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$pe=a("code"),oOo=o("model.train()"),rOo=l(),F(M4.$$.fragment),BOe=l(),ed=a("h2"),E4=a("a"),kpe=a("span"),F(Ny.$$.fragment),tOo=l(),Spe=a("span"),aOo=o("AutoModelForMultipleChoice"),IOe=l(),Bo=a("div"),F(qy.$$.fragment),nOo=l(),od=a("p"),sOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),ZV=a("a"),lOo=o("from_pretrained()"),iOo=o(" class method or the "),eX=a("a"),dOo=o("from_config()"),cOo=o(` class
method.`),fOo=l(),jy=a("p"),mOo=o("This class cannot be instantiated directly using "),Rpe=a("code"),gOo=o("__init__()"),hOo=o(" (throws an error)."),pOo=l(),ft=a("div"),F(Dy.$$.fragment),_Oo=l(),Ppe=a("p"),uOo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),bOo=l(),rd=a("p"),vOo=o(`Note:
Loading a model from its configuration file does `),Bpe=a("strong"),FOo=o("not"),TOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oX=a("a"),MOo=o("from_pretrained()"),EOo=o(" to load the model weights."),COo=l(),F(C4.$$.fragment),wOo=l(),ro=a("div"),F(Gy.$$.fragment),AOo=l(),Ipe=a("p"),LOo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),yOo=l(),ja=a("p"),xOo=o("The model class to instantiate is selected based on the "),Npe=a("code"),$Oo=o("model_type"),kOo=o(` property of the config object (either
passed as an argument or loaded from `),qpe=a("code"),SOo=o("pretrained_model_name_or_path"),ROo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jpe=a("code"),POo=o("pretrained_model_name_or_path"),BOo=o(":"),IOo=l(),Z=a("ul"),w4=a("li"),Dpe=a("strong"),NOo=o("albert"),qOo=o(" \u2014 "),rX=a("a"),jOo=o("AlbertForMultipleChoice"),DOo=o(" (ALBERT model)"),GOo=l(),A4=a("li"),Gpe=a("strong"),OOo=o("bert"),VOo=o(" \u2014 "),tX=a("a"),XOo=o("BertForMultipleChoice"),zOo=o(" (BERT model)"),QOo=l(),L4=a("li"),Ope=a("strong"),WOo=o("big_bird"),HOo=o(" \u2014 "),aX=a("a"),UOo=o("BigBirdForMultipleChoice"),JOo=o(" (BigBird model)"),YOo=l(),y4=a("li"),Vpe=a("strong"),KOo=o("camembert"),ZOo=o(" \u2014 "),nX=a("a"),eVo=o("CamembertForMultipleChoice"),oVo=o(" (CamemBERT model)"),rVo=l(),x4=a("li"),Xpe=a("strong"),tVo=o("canine"),aVo=o(" \u2014 "),sX=a("a"),nVo=o("CanineForMultipleChoice"),sVo=o(" (CANINE model)"),lVo=l(),$4=a("li"),zpe=a("strong"),iVo=o("convbert"),dVo=o(" \u2014 "),lX=a("a"),cVo=o("ConvBertForMultipleChoice"),fVo=o(" (ConvBERT model)"),mVo=l(),k4=a("li"),Qpe=a("strong"),gVo=o("data2vec-text"),hVo=o(" \u2014 "),iX=a("a"),pVo=o("Data2VecTextForMultipleChoice"),_Vo=o(" (Data2VecText model)"),uVo=l(),S4=a("li"),Wpe=a("strong"),bVo=o("deberta-v2"),vVo=o(" \u2014 "),dX=a("a"),FVo=o("DebertaV2ForMultipleChoice"),TVo=o(" (DeBERTa-v2 model)"),MVo=l(),R4=a("li"),Hpe=a("strong"),EVo=o("distilbert"),CVo=o(" \u2014 "),cX=a("a"),wVo=o("DistilBertForMultipleChoice"),AVo=o(" (DistilBERT model)"),LVo=l(),P4=a("li"),Upe=a("strong"),yVo=o("electra"),xVo=o(" \u2014 "),fX=a("a"),$Vo=o("ElectraForMultipleChoice"),kVo=o(" (ELECTRA model)"),SVo=l(),B4=a("li"),Jpe=a("strong"),RVo=o("flaubert"),PVo=o(" \u2014 "),mX=a("a"),BVo=o("FlaubertForMultipleChoice"),IVo=o(" (FlauBERT model)"),NVo=l(),I4=a("li"),Ype=a("strong"),qVo=o("fnet"),jVo=o(" \u2014 "),gX=a("a"),DVo=o("FNetForMultipleChoice"),GVo=o(" (FNet model)"),OVo=l(),N4=a("li"),Kpe=a("strong"),VVo=o("funnel"),XVo=o(" \u2014 "),hX=a("a"),zVo=o("FunnelForMultipleChoice"),QVo=o(" (Funnel Transformer model)"),WVo=l(),q4=a("li"),Zpe=a("strong"),HVo=o("ibert"),UVo=o(" \u2014 "),pX=a("a"),JVo=o("IBertForMultipleChoice"),YVo=o(" (I-BERT model)"),KVo=l(),j4=a("li"),e_e=a("strong"),ZVo=o("longformer"),eXo=o(" \u2014 "),_X=a("a"),oXo=o("LongformerForMultipleChoice"),rXo=o(" (Longformer model)"),tXo=l(),D4=a("li"),o_e=a("strong"),aXo=o("megatron-bert"),nXo=o(" \u2014 "),uX=a("a"),sXo=o("MegatronBertForMultipleChoice"),lXo=o(" (Megatron-BERT model)"),iXo=l(),G4=a("li"),r_e=a("strong"),dXo=o("mobilebert"),cXo=o(" \u2014 "),bX=a("a"),fXo=o("MobileBertForMultipleChoice"),mXo=o(" (MobileBERT model)"),gXo=l(),O4=a("li"),t_e=a("strong"),hXo=o("mpnet"),pXo=o(" \u2014 "),vX=a("a"),_Xo=o("MPNetForMultipleChoice"),uXo=o(" (MPNet model)"),bXo=l(),V4=a("li"),a_e=a("strong"),vXo=o("nezha"),FXo=o(" \u2014 "),FX=a("a"),TXo=o("NezhaForMultipleChoice"),MXo=o(" (Nezha model)"),EXo=l(),X4=a("li"),n_e=a("strong"),CXo=o("nystromformer"),wXo=o(" \u2014 "),TX=a("a"),AXo=o("NystromformerForMultipleChoice"),LXo=o(" (Nystr\xF6mformer model)"),yXo=l(),z4=a("li"),s_e=a("strong"),xXo=o("qdqbert"),$Xo=o(" \u2014 "),MX=a("a"),kXo=o("QDQBertForMultipleChoice"),SXo=o(" (QDQBert model)"),RXo=l(),Q4=a("li"),l_e=a("strong"),PXo=o("rembert"),BXo=o(" \u2014 "),EX=a("a"),IXo=o("RemBertForMultipleChoice"),NXo=o(" (RemBERT model)"),qXo=l(),W4=a("li"),i_e=a("strong"),jXo=o("roberta"),DXo=o(" \u2014 "),CX=a("a"),GXo=o("RobertaForMultipleChoice"),OXo=o(" (RoBERTa model)"),VXo=l(),H4=a("li"),d_e=a("strong"),XXo=o("roformer"),zXo=o(" \u2014 "),wX=a("a"),QXo=o("RoFormerForMultipleChoice"),WXo=o(" (RoFormer model)"),HXo=l(),U4=a("li"),c_e=a("strong"),UXo=o("squeezebert"),JXo=o(" \u2014 "),AX=a("a"),YXo=o("SqueezeBertForMultipleChoice"),KXo=o(" (SqueezeBERT model)"),ZXo=l(),J4=a("li"),f_e=a("strong"),ezo=o("xlm"),ozo=o(" \u2014 "),LX=a("a"),rzo=o("XLMForMultipleChoice"),tzo=o(" (XLM model)"),azo=l(),Y4=a("li"),m_e=a("strong"),nzo=o("xlm-roberta"),szo=o(" \u2014 "),yX=a("a"),lzo=o("XLMRobertaForMultipleChoice"),izo=o(" (XLM-RoBERTa model)"),dzo=l(),K4=a("li"),g_e=a("strong"),czo=o("xlm-roberta-xl"),fzo=o(" \u2014 "),xX=a("a"),mzo=o("XLMRobertaXLForMultipleChoice"),gzo=o(" (XLM-RoBERTa-XL model)"),hzo=l(),Z4=a("li"),h_e=a("strong"),pzo=o("xlnet"),_zo=o(" \u2014 "),$X=a("a"),uzo=o("XLNetForMultipleChoice"),bzo=o(" (XLNet model)"),vzo=l(),e5=a("li"),p_e=a("strong"),Fzo=o("yoso"),Tzo=o(" \u2014 "),kX=a("a"),Mzo=o("YosoForMultipleChoice"),Ezo=o(" (YOSO model)"),Czo=l(),o5=a("p"),wzo=o("The model is set in evaluation mode by default using "),__e=a("code"),Azo=o("model.eval()"),Lzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),u_e=a("code"),yzo=o("model.train()"),xzo=l(),F(r5.$$.fragment),NOe=l(),td=a("h2"),t5=a("a"),b_e=a("span"),F(Oy.$$.fragment),$zo=l(),v_e=a("span"),kzo=o("AutoModelForNextSentencePrediction"),qOe=l(),Io=a("div"),F(Vy.$$.fragment),Szo=l(),ad=a("p"),Rzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),SX=a("a"),Pzo=o("from_pretrained()"),Bzo=o(" class method or the "),RX=a("a"),Izo=o("from_config()"),Nzo=o(` class
method.`),qzo=l(),Xy=a("p"),jzo=o("This class cannot be instantiated directly using "),F_e=a("code"),Dzo=o("__init__()"),Gzo=o(" (throws an error)."),Ozo=l(),mt=a("div"),F(zy.$$.fragment),Vzo=l(),T_e=a("p"),Xzo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),zzo=l(),nd=a("p"),Qzo=o(`Note:
Loading a model from its configuration file does `),M_e=a("strong"),Wzo=o("not"),Hzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PX=a("a"),Uzo=o("from_pretrained()"),Jzo=o(" to load the model weights."),Yzo=l(),F(a5.$$.fragment),Kzo=l(),to=a("div"),F(Qy.$$.fragment),Zzo=l(),E_e=a("p"),eQo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),oQo=l(),Da=a("p"),rQo=o("The model class to instantiate is selected based on the "),C_e=a("code"),tQo=o("model_type"),aQo=o(` property of the config object (either
passed as an argument or loaded from `),w_e=a("code"),nQo=o("pretrained_model_name_or_path"),sQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A_e=a("code"),lQo=o("pretrained_model_name_or_path"),iQo=o(":"),dQo=l(),No=a("ul"),n5=a("li"),L_e=a("strong"),cQo=o("bert"),fQo=o(" \u2014 "),BX=a("a"),mQo=o("BertForNextSentencePrediction"),gQo=o(" (BERT model)"),hQo=l(),s5=a("li"),y_e=a("strong"),pQo=o("fnet"),_Qo=o(" \u2014 "),IX=a("a"),uQo=o("FNetForNextSentencePrediction"),bQo=o(" (FNet model)"),vQo=l(),l5=a("li"),x_e=a("strong"),FQo=o("megatron-bert"),TQo=o(" \u2014 "),NX=a("a"),MQo=o("MegatronBertForNextSentencePrediction"),EQo=o(" (Megatron-BERT model)"),CQo=l(),i5=a("li"),$_e=a("strong"),wQo=o("mobilebert"),AQo=o(" \u2014 "),qX=a("a"),LQo=o("MobileBertForNextSentencePrediction"),yQo=o(" (MobileBERT model)"),xQo=l(),d5=a("li"),k_e=a("strong"),$Qo=o("nezha"),kQo=o(" \u2014 "),jX=a("a"),SQo=o("NezhaForNextSentencePrediction"),RQo=o(" (Nezha model)"),PQo=l(),c5=a("li"),S_e=a("strong"),BQo=o("qdqbert"),IQo=o(" \u2014 "),DX=a("a"),NQo=o("QDQBertForNextSentencePrediction"),qQo=o(" (QDQBert model)"),jQo=l(),f5=a("p"),DQo=o("The model is set in evaluation mode by default using "),R_e=a("code"),GQo=o("model.eval()"),OQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),P_e=a("code"),VQo=o("model.train()"),XQo=l(),F(m5.$$.fragment),jOe=l(),sd=a("h2"),g5=a("a"),B_e=a("span"),F(Wy.$$.fragment),zQo=l(),I_e=a("span"),QQo=o("AutoModelForTokenClassification"),DOe=l(),qo=a("div"),F(Hy.$$.fragment),WQo=l(),ld=a("p"),HQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),GX=a("a"),UQo=o("from_pretrained()"),JQo=o(" class method or the "),OX=a("a"),YQo=o("from_config()"),KQo=o(` class
method.`),ZQo=l(),Uy=a("p"),eWo=o("This class cannot be instantiated directly using "),N_e=a("code"),oWo=o("__init__()"),rWo=o(" (throws an error)."),tWo=l(),gt=a("div"),F(Jy.$$.fragment),aWo=l(),q_e=a("p"),nWo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),sWo=l(),id=a("p"),lWo=o(`Note:
Loading a model from its configuration file does `),j_e=a("strong"),iWo=o("not"),dWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VX=a("a"),cWo=o("from_pretrained()"),fWo=o(" to load the model weights."),mWo=l(),F(h5.$$.fragment),gWo=l(),ao=a("div"),F(Yy.$$.fragment),hWo=l(),D_e=a("p"),pWo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),_Wo=l(),Ga=a("p"),uWo=o("The model class to instantiate is selected based on the "),G_e=a("code"),bWo=o("model_type"),vWo=o(` property of the config object (either
passed as an argument or loaded from `),O_e=a("code"),FWo=o("pretrained_model_name_or_path"),TWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V_e=a("code"),MWo=o("pretrained_model_name_or_path"),EWo=o(":"),CWo=l(),H=a("ul"),p5=a("li"),X_e=a("strong"),wWo=o("albert"),AWo=o(" \u2014 "),XX=a("a"),LWo=o("AlbertForTokenClassification"),yWo=o(" (ALBERT model)"),xWo=l(),_5=a("li"),z_e=a("strong"),$Wo=o("bert"),kWo=o(" \u2014 "),zX=a("a"),SWo=o("BertForTokenClassification"),RWo=o(" (BERT model)"),PWo=l(),u5=a("li"),Q_e=a("strong"),BWo=o("big_bird"),IWo=o(" \u2014 "),QX=a("a"),NWo=o("BigBirdForTokenClassification"),qWo=o(" (BigBird model)"),jWo=l(),b5=a("li"),W_e=a("strong"),DWo=o("bloom"),GWo=o(" \u2014 "),WX=a("a"),OWo=o("BloomForTokenClassification"),VWo=o(" (BLOOM model)"),XWo=l(),v5=a("li"),H_e=a("strong"),zWo=o("camembert"),QWo=o(" \u2014 "),HX=a("a"),WWo=o("CamembertForTokenClassification"),HWo=o(" (CamemBERT model)"),UWo=l(),F5=a("li"),U_e=a("strong"),JWo=o("canine"),YWo=o(" \u2014 "),UX=a("a"),KWo=o("CanineForTokenClassification"),ZWo=o(" (CANINE model)"),eHo=l(),T5=a("li"),J_e=a("strong"),oHo=o("convbert"),rHo=o(" \u2014 "),JX=a("a"),tHo=o("ConvBertForTokenClassification"),aHo=o(" (ConvBERT model)"),nHo=l(),M5=a("li"),Y_e=a("strong"),sHo=o("data2vec-text"),lHo=o(" \u2014 "),YX=a("a"),iHo=o("Data2VecTextForTokenClassification"),dHo=o(" (Data2VecText model)"),cHo=l(),E5=a("li"),K_e=a("strong"),fHo=o("deberta"),mHo=o(" \u2014 "),KX=a("a"),gHo=o("DebertaForTokenClassification"),hHo=o(" (DeBERTa model)"),pHo=l(),C5=a("li"),Z_e=a("strong"),_Ho=o("deberta-v2"),uHo=o(" \u2014 "),ZX=a("a"),bHo=o("DebertaV2ForTokenClassification"),vHo=o(" (DeBERTa-v2 model)"),FHo=l(),w5=a("li"),eue=a("strong"),THo=o("distilbert"),MHo=o(" \u2014 "),ez=a("a"),EHo=o("DistilBertForTokenClassification"),CHo=o(" (DistilBERT model)"),wHo=l(),A5=a("li"),oue=a("strong"),AHo=o("electra"),LHo=o(" \u2014 "),oz=a("a"),yHo=o("ElectraForTokenClassification"),xHo=o(" (ELECTRA model)"),$Ho=l(),L5=a("li"),rue=a("strong"),kHo=o("flaubert"),SHo=o(" \u2014 "),rz=a("a"),RHo=o("FlaubertForTokenClassification"),PHo=o(" (FlauBERT model)"),BHo=l(),y5=a("li"),tue=a("strong"),IHo=o("fnet"),NHo=o(" \u2014 "),tz=a("a"),qHo=o("FNetForTokenClassification"),jHo=o(" (FNet model)"),DHo=l(),x5=a("li"),aue=a("strong"),GHo=o("funnel"),OHo=o(" \u2014 "),az=a("a"),VHo=o("FunnelForTokenClassification"),XHo=o(" (Funnel Transformer model)"),zHo=l(),$5=a("li"),nue=a("strong"),QHo=o("gpt2"),WHo=o(" \u2014 "),nz=a("a"),HHo=o("GPT2ForTokenClassification"),UHo=o(" (OpenAI GPT-2 model)"),JHo=l(),k5=a("li"),sue=a("strong"),YHo=o("ibert"),KHo=o(" \u2014 "),sz=a("a"),ZHo=o("IBertForTokenClassification"),eUo=o(" (I-BERT model)"),oUo=l(),S5=a("li"),lue=a("strong"),rUo=o("layoutlm"),tUo=o(" \u2014 "),lz=a("a"),aUo=o("LayoutLMForTokenClassification"),nUo=o(" (LayoutLM model)"),sUo=l(),R5=a("li"),iue=a("strong"),lUo=o("layoutlmv2"),iUo=o(" \u2014 "),iz=a("a"),dUo=o("LayoutLMv2ForTokenClassification"),cUo=o(" (LayoutLMv2 model)"),fUo=l(),P5=a("li"),due=a("strong"),mUo=o("layoutlmv3"),gUo=o(" \u2014 "),dz=a("a"),hUo=o("LayoutLMv3ForTokenClassification"),pUo=o(" (LayoutLMv3 model)"),_Uo=l(),B5=a("li"),cue=a("strong"),uUo=o("longformer"),bUo=o(" \u2014 "),cz=a("a"),vUo=o("LongformerForTokenClassification"),FUo=o(" (Longformer model)"),TUo=l(),I5=a("li"),fue=a("strong"),MUo=o("megatron-bert"),EUo=o(" \u2014 "),fz=a("a"),CUo=o("MegatronBertForTokenClassification"),wUo=o(" (Megatron-BERT model)"),AUo=l(),N5=a("li"),mue=a("strong"),LUo=o("mobilebert"),yUo=o(" \u2014 "),mz=a("a"),xUo=o("MobileBertForTokenClassification"),$Uo=o(" (MobileBERT model)"),kUo=l(),q5=a("li"),gue=a("strong"),SUo=o("mpnet"),RUo=o(" \u2014 "),gz=a("a"),PUo=o("MPNetForTokenClassification"),BUo=o(" (MPNet model)"),IUo=l(),j5=a("li"),hue=a("strong"),NUo=o("nezha"),qUo=o(" \u2014 "),hz=a("a"),jUo=o("NezhaForTokenClassification"),DUo=o(" (Nezha model)"),GUo=l(),D5=a("li"),pue=a("strong"),OUo=o("nystromformer"),VUo=o(" \u2014 "),pz=a("a"),XUo=o("NystromformerForTokenClassification"),zUo=o(" (Nystr\xF6mformer model)"),QUo=l(),G5=a("li"),_ue=a("strong"),WUo=o("qdqbert"),HUo=o(" \u2014 "),_z=a("a"),UUo=o("QDQBertForTokenClassification"),JUo=o(" (QDQBert model)"),YUo=l(),O5=a("li"),uue=a("strong"),KUo=o("rembert"),ZUo=o(" \u2014 "),uz=a("a"),eJo=o("RemBertForTokenClassification"),oJo=o(" (RemBERT model)"),rJo=l(),V5=a("li"),bue=a("strong"),tJo=o("roberta"),aJo=o(" \u2014 "),bz=a("a"),nJo=o("RobertaForTokenClassification"),sJo=o(" (RoBERTa model)"),lJo=l(),X5=a("li"),vue=a("strong"),iJo=o("roformer"),dJo=o(" \u2014 "),vz=a("a"),cJo=o("RoFormerForTokenClassification"),fJo=o(" (RoFormer model)"),mJo=l(),z5=a("li"),Fue=a("strong"),gJo=o("squeezebert"),hJo=o(" \u2014 "),Fz=a("a"),pJo=o("SqueezeBertForTokenClassification"),_Jo=o(" (SqueezeBERT model)"),uJo=l(),Q5=a("li"),Tue=a("strong"),bJo=o("xlm"),vJo=o(" \u2014 "),Tz=a("a"),FJo=o("XLMForTokenClassification"),TJo=o(" (XLM model)"),MJo=l(),W5=a("li"),Mue=a("strong"),EJo=o("xlm-roberta"),CJo=o(" \u2014 "),Mz=a("a"),wJo=o("XLMRobertaForTokenClassification"),AJo=o(" (XLM-RoBERTa model)"),LJo=l(),H5=a("li"),Eue=a("strong"),yJo=o("xlm-roberta-xl"),xJo=o(" \u2014 "),Ez=a("a"),$Jo=o("XLMRobertaXLForTokenClassification"),kJo=o(" (XLM-RoBERTa-XL model)"),SJo=l(),U5=a("li"),Cue=a("strong"),RJo=o("xlnet"),PJo=o(" \u2014 "),Cz=a("a"),BJo=o("XLNetForTokenClassification"),IJo=o(" (XLNet model)"),NJo=l(),J5=a("li"),wue=a("strong"),qJo=o("yoso"),jJo=o(" \u2014 "),wz=a("a"),DJo=o("YosoForTokenClassification"),GJo=o(" (YOSO model)"),OJo=l(),Y5=a("p"),VJo=o("The model is set in evaluation mode by default using "),Aue=a("code"),XJo=o("model.eval()"),zJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lue=a("code"),QJo=o("model.train()"),WJo=l(),F(K5.$$.fragment),GOe=l(),dd=a("h2"),Z5=a("a"),yue=a("span"),F(Ky.$$.fragment),HJo=l(),xue=a("span"),UJo=o("AutoModelForQuestionAnswering"),OOe=l(),jo=a("div"),F(Zy.$$.fragment),JJo=l(),cd=a("p"),YJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Az=a("a"),KJo=o("from_pretrained()"),ZJo=o(" class method or the "),Lz=a("a"),eYo=o("from_config()"),oYo=o(` class
method.`),rYo=l(),e8=a("p"),tYo=o("This class cannot be instantiated directly using "),$ue=a("code"),aYo=o("__init__()"),nYo=o(" (throws an error)."),sYo=l(),ht=a("div"),F(o8.$$.fragment),lYo=l(),kue=a("p"),iYo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),dYo=l(),fd=a("p"),cYo=o(`Note:
Loading a model from its configuration file does `),Sue=a("strong"),fYo=o("not"),mYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yz=a("a"),gYo=o("from_pretrained()"),hYo=o(" to load the model weights."),pYo=l(),F(e3.$$.fragment),_Yo=l(),no=a("div"),F(r8.$$.fragment),uYo=l(),Rue=a("p"),bYo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),vYo=l(),Oa=a("p"),FYo=o("The model class to instantiate is selected based on the "),Pue=a("code"),TYo=o("model_type"),MYo=o(` property of the config object (either
passed as an argument or loaded from `),Bue=a("code"),EYo=o("pretrained_model_name_or_path"),CYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Iue=a("code"),wYo=o("pretrained_model_name_or_path"),AYo=o(":"),LYo=l(),V=a("ul"),o3=a("li"),Nue=a("strong"),yYo=o("albert"),xYo=o(" \u2014 "),xz=a("a"),$Yo=o("AlbertForQuestionAnswering"),kYo=o(" (ALBERT model)"),SYo=l(),r3=a("li"),que=a("strong"),RYo=o("bart"),PYo=o(" \u2014 "),$z=a("a"),BYo=o("BartForQuestionAnswering"),IYo=o(" (BART model)"),NYo=l(),t3=a("li"),jue=a("strong"),qYo=o("bert"),jYo=o(" \u2014 "),kz=a("a"),DYo=o("BertForQuestionAnswering"),GYo=o(" (BERT model)"),OYo=l(),a3=a("li"),Due=a("strong"),VYo=o("big_bird"),XYo=o(" \u2014 "),Sz=a("a"),zYo=o("BigBirdForQuestionAnswering"),QYo=o(" (BigBird model)"),WYo=l(),n3=a("li"),Gue=a("strong"),HYo=o("bigbird_pegasus"),UYo=o(" \u2014 "),Rz=a("a"),JYo=o("BigBirdPegasusForQuestionAnswering"),YYo=o(" (BigBird-Pegasus model)"),KYo=l(),s3=a("li"),Oue=a("strong"),ZYo=o("camembert"),eKo=o(" \u2014 "),Pz=a("a"),oKo=o("CamembertForQuestionAnswering"),rKo=o(" (CamemBERT model)"),tKo=l(),l3=a("li"),Vue=a("strong"),aKo=o("canine"),nKo=o(" \u2014 "),Bz=a("a"),sKo=o("CanineForQuestionAnswering"),lKo=o(" (CANINE model)"),iKo=l(),i3=a("li"),Xue=a("strong"),dKo=o("convbert"),cKo=o(" \u2014 "),Iz=a("a"),fKo=o("ConvBertForQuestionAnswering"),mKo=o(" (ConvBERT model)"),gKo=l(),d3=a("li"),zue=a("strong"),hKo=o("data2vec-text"),pKo=o(" \u2014 "),Nz=a("a"),_Ko=o("Data2VecTextForQuestionAnswering"),uKo=o(" (Data2VecText model)"),bKo=l(),c3=a("li"),Que=a("strong"),vKo=o("deberta"),FKo=o(" \u2014 "),qz=a("a"),TKo=o("DebertaForQuestionAnswering"),MKo=o(" (DeBERTa model)"),EKo=l(),f3=a("li"),Wue=a("strong"),CKo=o("deberta-v2"),wKo=o(" \u2014 "),jz=a("a"),AKo=o("DebertaV2ForQuestionAnswering"),LKo=o(" (DeBERTa-v2 model)"),yKo=l(),m3=a("li"),Hue=a("strong"),xKo=o("distilbert"),$Ko=o(" \u2014 "),Dz=a("a"),kKo=o("DistilBertForQuestionAnswering"),SKo=o(" (DistilBERT model)"),RKo=l(),g3=a("li"),Uue=a("strong"),PKo=o("electra"),BKo=o(" \u2014 "),Gz=a("a"),IKo=o("ElectraForQuestionAnswering"),NKo=o(" (ELECTRA model)"),qKo=l(),h3=a("li"),Jue=a("strong"),jKo=o("flaubert"),DKo=o(" \u2014 "),Oz=a("a"),GKo=o("FlaubertForQuestionAnsweringSimple"),OKo=o(" (FlauBERT model)"),VKo=l(),p3=a("li"),Yue=a("strong"),XKo=o("fnet"),zKo=o(" \u2014 "),Vz=a("a"),QKo=o("FNetForQuestionAnswering"),WKo=o(" (FNet model)"),HKo=l(),_3=a("li"),Kue=a("strong"),UKo=o("funnel"),JKo=o(" \u2014 "),Xz=a("a"),YKo=o("FunnelForQuestionAnswering"),KKo=o(" (Funnel Transformer model)"),ZKo=l(),u3=a("li"),Zue=a("strong"),eZo=o("gptj"),oZo=o(" \u2014 "),zz=a("a"),rZo=o("GPTJForQuestionAnswering"),tZo=o(" (GPT-J model)"),aZo=l(),b3=a("li"),e1e=a("strong"),nZo=o("ibert"),sZo=o(" \u2014 "),Qz=a("a"),lZo=o("IBertForQuestionAnswering"),iZo=o(" (I-BERT model)"),dZo=l(),v3=a("li"),o1e=a("strong"),cZo=o("layoutlmv2"),fZo=o(" \u2014 "),Wz=a("a"),mZo=o("LayoutLMv2ForQuestionAnswering"),gZo=o(" (LayoutLMv2 model)"),hZo=l(),F3=a("li"),r1e=a("strong"),pZo=o("layoutlmv3"),_Zo=o(" \u2014 "),Hz=a("a"),uZo=o("LayoutLMv3ForQuestionAnswering"),bZo=o(" (LayoutLMv3 model)"),vZo=l(),T3=a("li"),t1e=a("strong"),FZo=o("led"),TZo=o(" \u2014 "),Uz=a("a"),MZo=o("LEDForQuestionAnswering"),EZo=o(" (LED model)"),CZo=l(),M3=a("li"),a1e=a("strong"),wZo=o("longformer"),AZo=o(" \u2014 "),Jz=a("a"),LZo=o("LongformerForQuestionAnswering"),yZo=o(" (Longformer model)"),xZo=l(),E3=a("li"),n1e=a("strong"),$Zo=o("lxmert"),kZo=o(" \u2014 "),Yz=a("a"),SZo=o("LxmertForQuestionAnswering"),RZo=o(" (LXMERT model)"),PZo=l(),C3=a("li"),s1e=a("strong"),BZo=o("mbart"),IZo=o(" \u2014 "),Kz=a("a"),NZo=o("MBartForQuestionAnswering"),qZo=o(" (mBART model)"),jZo=l(),w3=a("li"),l1e=a("strong"),DZo=o("megatron-bert"),GZo=o(" \u2014 "),Zz=a("a"),OZo=o("MegatronBertForQuestionAnswering"),VZo=o(" (Megatron-BERT model)"),XZo=l(),A3=a("li"),i1e=a("strong"),zZo=o("mobilebert"),QZo=o(" \u2014 "),eQ=a("a"),WZo=o("MobileBertForQuestionAnswering"),HZo=o(" (MobileBERT model)"),UZo=l(),L3=a("li"),d1e=a("strong"),JZo=o("mpnet"),YZo=o(" \u2014 "),oQ=a("a"),KZo=o("MPNetForQuestionAnswering"),ZZo=o(" (MPNet model)"),eer=l(),y3=a("li"),c1e=a("strong"),oer=o("nezha"),rer=o(" \u2014 "),rQ=a("a"),ter=o("NezhaForQuestionAnswering"),aer=o(" (Nezha model)"),ner=l(),x3=a("li"),f1e=a("strong"),ser=o("nystromformer"),ler=o(" \u2014 "),tQ=a("a"),ier=o("NystromformerForQuestionAnswering"),der=o(" (Nystr\xF6mformer model)"),cer=l(),$3=a("li"),m1e=a("strong"),fer=o("qdqbert"),mer=o(" \u2014 "),aQ=a("a"),ger=o("QDQBertForQuestionAnswering"),her=o(" (QDQBert model)"),per=l(),k3=a("li"),g1e=a("strong"),_er=o("reformer"),uer=o(" \u2014 "),nQ=a("a"),ber=o("ReformerForQuestionAnswering"),ver=o(" (Reformer model)"),Fer=l(),S3=a("li"),h1e=a("strong"),Ter=o("rembert"),Mer=o(" \u2014 "),sQ=a("a"),Eer=o("RemBertForQuestionAnswering"),Cer=o(" (RemBERT model)"),wer=l(),R3=a("li"),p1e=a("strong"),Aer=o("roberta"),Ler=o(" \u2014 "),lQ=a("a"),yer=o("RobertaForQuestionAnswering"),xer=o(" (RoBERTa model)"),$er=l(),P3=a("li"),_1e=a("strong"),ker=o("roformer"),Ser=o(" \u2014 "),iQ=a("a"),Rer=o("RoFormerForQuestionAnswering"),Per=o(" (RoFormer model)"),Ber=l(),B3=a("li"),u1e=a("strong"),Ier=o("splinter"),Ner=o(" \u2014 "),dQ=a("a"),qer=o("SplinterForQuestionAnswering"),jer=o(" (Splinter model)"),Der=l(),I3=a("li"),b1e=a("strong"),Ger=o("squeezebert"),Oer=o(" \u2014 "),cQ=a("a"),Ver=o("SqueezeBertForQuestionAnswering"),Xer=o(" (SqueezeBERT model)"),zer=l(),N3=a("li"),v1e=a("strong"),Qer=o("xlm"),Wer=o(" \u2014 "),fQ=a("a"),Her=o("XLMForQuestionAnsweringSimple"),Uer=o(" (XLM model)"),Jer=l(),q3=a("li"),F1e=a("strong"),Yer=o("xlm-roberta"),Ker=o(" \u2014 "),mQ=a("a"),Zer=o("XLMRobertaForQuestionAnswering"),eor=o(" (XLM-RoBERTa model)"),oor=l(),j3=a("li"),T1e=a("strong"),ror=o("xlm-roberta-xl"),tor=o(" \u2014 "),gQ=a("a"),aor=o("XLMRobertaXLForQuestionAnswering"),nor=o(" (XLM-RoBERTa-XL model)"),sor=l(),D3=a("li"),M1e=a("strong"),lor=o("xlnet"),ior=o(" \u2014 "),hQ=a("a"),dor=o("XLNetForQuestionAnsweringSimple"),cor=o(" (XLNet model)"),mor=l(),G3=a("li"),E1e=a("strong"),gor=o("yoso"),hor=o(" \u2014 "),pQ=a("a"),por=o("YosoForQuestionAnswering"),_or=o(" (YOSO model)"),uor=l(),O3=a("p"),bor=o("The model is set in evaluation mode by default using "),C1e=a("code"),vor=o("model.eval()"),For=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),w1e=a("code"),Tor=o("model.train()"),Mor=l(),F(V3.$$.fragment),VOe=l(),md=a("h2"),X3=a("a"),A1e=a("span"),F(t8.$$.fragment),Eor=l(),L1e=a("span"),Cor=o("AutoModelForTableQuestionAnswering"),XOe=l(),Do=a("div"),F(a8.$$.fragment),wor=l(),gd=a("p"),Aor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),_Q=a("a"),Lor=o("from_pretrained()"),yor=o(" class method or the "),uQ=a("a"),xor=o("from_config()"),$or=o(` class
method.`),kor=l(),n8=a("p"),Sor=o("This class cannot be instantiated directly using "),y1e=a("code"),Ror=o("__init__()"),Por=o(" (throws an error)."),Bor=l(),pt=a("div"),F(s8.$$.fragment),Ior=l(),x1e=a("p"),Nor=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),qor=l(),hd=a("p"),jor=o(`Note:
Loading a model from its configuration file does `),$1e=a("strong"),Dor=o("not"),Gor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bQ=a("a"),Oor=o("from_pretrained()"),Vor=o(" to load the model weights."),Xor=l(),F(z3.$$.fragment),zor=l(),so=a("div"),F(l8.$$.fragment),Qor=l(),k1e=a("p"),Wor=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Hor=l(),Va=a("p"),Uor=o("The model class to instantiate is selected based on the "),S1e=a("code"),Jor=o("model_type"),Yor=o(` property of the config object (either
passed as an argument or loaded from `),R1e=a("code"),Kor=o("pretrained_model_name_or_path"),Zor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P1e=a("code"),err=o("pretrained_model_name_or_path"),orr=o(":"),rrr=l(),B1e=a("ul"),Q3=a("li"),I1e=a("strong"),trr=o("tapas"),arr=o(" \u2014 "),vQ=a("a"),nrr=o("TapasForQuestionAnswering"),srr=o(" (TAPAS model)"),lrr=l(),W3=a("p"),irr=o("The model is set in evaluation mode by default using "),N1e=a("code"),drr=o("model.eval()"),crr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),q1e=a("code"),frr=o("model.train()"),mrr=l(),F(H3.$$.fragment),zOe=l(),pd=a("h2"),U3=a("a"),j1e=a("span"),F(i8.$$.fragment),grr=l(),D1e=a("span"),hrr=o("AutoModelForImageClassification"),QOe=l(),Go=a("div"),F(d8.$$.fragment),prr=l(),_d=a("p"),_rr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),FQ=a("a"),urr=o("from_pretrained()"),brr=o(" class method or the "),TQ=a("a"),vrr=o("from_config()"),Frr=o(` class
method.`),Trr=l(),c8=a("p"),Mrr=o("This class cannot be instantiated directly using "),G1e=a("code"),Err=o("__init__()"),Crr=o(" (throws an error)."),wrr=l(),_t=a("div"),F(f8.$$.fragment),Arr=l(),O1e=a("p"),Lrr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),yrr=l(),ud=a("p"),xrr=o(`Note:
Loading a model from its configuration file does `),V1e=a("strong"),$rr=o("not"),krr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MQ=a("a"),Srr=o("from_pretrained()"),Rrr=o(" to load the model weights."),Prr=l(),F(J3.$$.fragment),Brr=l(),lo=a("div"),F(m8.$$.fragment),Irr=l(),X1e=a("p"),Nrr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),qrr=l(),Xa=a("p"),jrr=o("The model class to instantiate is selected based on the "),z1e=a("code"),Drr=o("model_type"),Grr=o(` property of the config object (either
passed as an argument or loaded from `),Q1e=a("code"),Orr=o("pretrained_model_name_or_path"),Vrr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W1e=a("code"),Xrr=o("pretrained_model_name_or_path"),zrr=o(":"),Qrr=l(),Fe=a("ul"),Y3=a("li"),H1e=a("strong"),Wrr=o("beit"),Hrr=o(" \u2014 "),EQ=a("a"),Urr=o("BeitForImageClassification"),Jrr=o(" (BEiT model)"),Yrr=l(),K3=a("li"),U1e=a("strong"),Krr=o("convnext"),Zrr=o(" \u2014 "),CQ=a("a"),etr=o("ConvNextForImageClassification"),otr=o(" (ConvNeXT model)"),rtr=l(),Z3=a("li"),J1e=a("strong"),ttr=o("cvt"),atr=o(" \u2014 "),wQ=a("a"),ntr=o("CvtForImageClassification"),str=o(" (CvT model)"),ltr=l(),ev=a("li"),Y1e=a("strong"),itr=o("data2vec-vision"),dtr=o(" \u2014 "),AQ=a("a"),ctr=o("Data2VecVisionForImageClassification"),ftr=o(" (Data2VecVision model)"),mtr=l(),zs=a("li"),K1e=a("strong"),gtr=o("deit"),htr=o(" \u2014 "),LQ=a("a"),ptr=o("DeiTForImageClassification"),_tr=o(" or "),yQ=a("a"),utr=o("DeiTForImageClassificationWithTeacher"),btr=o(" (DeiT model)"),vtr=l(),ov=a("li"),Z1e=a("strong"),Ftr=o("imagegpt"),Ttr=o(" \u2014 "),xQ=a("a"),Mtr=o("ImageGPTForImageClassification"),Etr=o(" (ImageGPT model)"),Ctr=l(),Qs=a("li"),e2e=a("strong"),wtr=o("levit"),Atr=o(" \u2014 "),$Q=a("a"),Ltr=o("LevitForImageClassification"),ytr=o(" or "),kQ=a("a"),xtr=o("LevitForImageClassificationWithTeacher"),$tr=o(" (LeViT model)"),ktr=l(),ut=a("li"),o2e=a("strong"),Str=o("perceiver"),Rtr=o(" \u2014 "),SQ=a("a"),Ptr=o("PerceiverForImageClassificationLearned"),Btr=o(" or "),RQ=a("a"),Itr=o("PerceiverForImageClassificationFourier"),Ntr=o(" or "),PQ=a("a"),qtr=o("PerceiverForImageClassificationConvProcessing"),jtr=o(" (Perceiver model)"),Dtr=l(),rv=a("li"),r2e=a("strong"),Gtr=o("poolformer"),Otr=o(" \u2014 "),BQ=a("a"),Vtr=o("PoolFormerForImageClassification"),Xtr=o(" (PoolFormer model)"),ztr=l(),tv=a("li"),t2e=a("strong"),Qtr=o("regnet"),Wtr=o(" \u2014 "),IQ=a("a"),Htr=o("RegNetForImageClassification"),Utr=o(" (RegNet model)"),Jtr=l(),av=a("li"),a2e=a("strong"),Ytr=o("resnet"),Ktr=o(" \u2014 "),NQ=a("a"),Ztr=o("ResNetForImageClassification"),ear=o(" (ResNet model)"),oar=l(),nv=a("li"),n2e=a("strong"),rar=o("segformer"),tar=o(" \u2014 "),qQ=a("a"),aar=o("SegformerForImageClassification"),nar=o(" (SegFormer model)"),sar=l(),sv=a("li"),s2e=a("strong"),lar=o("swin"),iar=o(" \u2014 "),jQ=a("a"),dar=o("SwinForImageClassification"),car=o(" (Swin Transformer model)"),far=l(),lv=a("li"),l2e=a("strong"),mar=o("van"),gar=o(" \u2014 "),DQ=a("a"),har=o("VanForImageClassification"),par=o(" (VAN model)"),_ar=l(),iv=a("li"),i2e=a("strong"),uar=o("vit"),bar=o(" \u2014 "),GQ=a("a"),Far=o("ViTForImageClassification"),Tar=o(" (ViT model)"),Mar=l(),dv=a("p"),Ear=o("The model is set in evaluation mode by default using "),d2e=a("code"),Car=o("model.eval()"),war=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),c2e=a("code"),Aar=o("model.train()"),Lar=l(),F(cv.$$.fragment),WOe=l(),bd=a("h2"),fv=a("a"),f2e=a("span"),F(g8.$$.fragment),yar=l(),m2e=a("span"),xar=o("AutoModelForVision2Seq"),HOe=l(),Oo=a("div"),F(h8.$$.fragment),$ar=l(),vd=a("p"),kar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),OQ=a("a"),Sar=o("from_pretrained()"),Rar=o(" class method or the "),VQ=a("a"),Par=o("from_config()"),Bar=o(` class
method.`),Iar=l(),p8=a("p"),Nar=o("This class cannot be instantiated directly using "),g2e=a("code"),qar=o("__init__()"),jar=o(" (throws an error)."),Dar=l(),bt=a("div"),F(_8.$$.fragment),Gar=l(),h2e=a("p"),Oar=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Var=l(),Fd=a("p"),Xar=o(`Note:
Loading a model from its configuration file does `),p2e=a("strong"),zar=o("not"),Qar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XQ=a("a"),War=o("from_pretrained()"),Har=o(" to load the model weights."),Uar=l(),F(mv.$$.fragment),Jar=l(),io=a("div"),F(u8.$$.fragment),Yar=l(),_2e=a("p"),Kar=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Zar=l(),za=a("p"),enr=o("The model class to instantiate is selected based on the "),u2e=a("code"),onr=o("model_type"),rnr=o(` property of the config object (either
passed as an argument or loaded from `),b2e=a("code"),tnr=o("pretrained_model_name_or_path"),anr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v2e=a("code"),nnr=o("pretrained_model_name_or_path"),snr=o(":"),lnr=l(),F2e=a("ul"),gv=a("li"),T2e=a("strong"),inr=o("vision-encoder-decoder"),dnr=o(" \u2014 "),zQ=a("a"),cnr=o("VisionEncoderDecoderModel"),fnr=o(" (Vision Encoder decoder model)"),mnr=l(),hv=a("p"),gnr=o("The model is set in evaluation mode by default using "),M2e=a("code"),hnr=o("model.eval()"),pnr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),E2e=a("code"),_nr=o("model.train()"),unr=l(),F(pv.$$.fragment),UOe=l(),Td=a("h2"),_v=a("a"),C2e=a("span"),F(b8.$$.fragment),bnr=l(),w2e=a("span"),vnr=o("AutoModelForVisualQuestionAnswering"),JOe=l(),Vo=a("div"),F(v8.$$.fragment),Fnr=l(),Md=a("p"),Tnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),QQ=a("a"),Mnr=o("from_pretrained()"),Enr=o(" class method or the "),WQ=a("a"),Cnr=o("from_config()"),wnr=o(` class
method.`),Anr=l(),F8=a("p"),Lnr=o("This class cannot be instantiated directly using "),A2e=a("code"),ynr=o("__init__()"),xnr=o(" (throws an error)."),$nr=l(),vt=a("div"),F(T8.$$.fragment),knr=l(),L2e=a("p"),Snr=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),Rnr=l(),Ed=a("p"),Pnr=o(`Note:
Loading a model from its configuration file does `),y2e=a("strong"),Bnr=o("not"),Inr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HQ=a("a"),Nnr=o("from_pretrained()"),qnr=o(" to load the model weights."),jnr=l(),F(uv.$$.fragment),Dnr=l(),co=a("div"),F(M8.$$.fragment),Gnr=l(),x2e=a("p"),Onr=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),Vnr=l(),Qa=a("p"),Xnr=o("The model class to instantiate is selected based on the "),$2e=a("code"),znr=o("model_type"),Qnr=o(` property of the config object (either
passed as an argument or loaded from `),k2e=a("code"),Wnr=o("pretrained_model_name_or_path"),Hnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S2e=a("code"),Unr=o("pretrained_model_name_or_path"),Jnr=o(":"),Ynr=l(),R2e=a("ul"),bv=a("li"),P2e=a("strong"),Knr=o("vilt"),Znr=o(" \u2014 "),UQ=a("a"),esr=o("ViltForQuestionAnswering"),osr=o(" (ViLT model)"),rsr=l(),vv=a("p"),tsr=o("The model is set in evaluation mode by default using "),B2e=a("code"),asr=o("model.eval()"),nsr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),I2e=a("code"),ssr=o("model.train()"),lsr=l(),F(Fv.$$.fragment),YOe=l(),Cd=a("h2"),Tv=a("a"),N2e=a("span"),F(E8.$$.fragment),isr=l(),q2e=a("span"),dsr=o("AutoModelForAudioClassification"),KOe=l(),Xo=a("div"),F(C8.$$.fragment),csr=l(),wd=a("p"),fsr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),JQ=a("a"),msr=o("from_pretrained()"),gsr=o(" class method or the "),YQ=a("a"),hsr=o("from_config()"),psr=o(` class
method.`),_sr=l(),w8=a("p"),usr=o("This class cannot be instantiated directly using "),j2e=a("code"),bsr=o("__init__()"),vsr=o(" (throws an error)."),Fsr=l(),Ft=a("div"),F(A8.$$.fragment),Tsr=l(),D2e=a("p"),Msr=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Esr=l(),Ad=a("p"),Csr=o(`Note:
Loading a model from its configuration file does `),G2e=a("strong"),wsr=o("not"),Asr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KQ=a("a"),Lsr=o("from_pretrained()"),ysr=o(" to load the model weights."),xsr=l(),F(Mv.$$.fragment),$sr=l(),fo=a("div"),F(L8.$$.fragment),ksr=l(),O2e=a("p"),Ssr=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Rsr=l(),Wa=a("p"),Psr=o("The model class to instantiate is selected based on the "),V2e=a("code"),Bsr=o("model_type"),Isr=o(` property of the config object (either
passed as an argument or loaded from `),X2e=a("code"),Nsr=o("pretrained_model_name_or_path"),qsr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z2e=a("code"),jsr=o("pretrained_model_name_or_path"),Dsr=o(":"),Gsr=l(),Pe=a("ul"),Ev=a("li"),Q2e=a("strong"),Osr=o("data2vec-audio"),Vsr=o(" \u2014 "),ZQ=a("a"),Xsr=o("Data2VecAudioForSequenceClassification"),zsr=o(" (Data2VecAudio model)"),Qsr=l(),Cv=a("li"),W2e=a("strong"),Wsr=o("hubert"),Hsr=o(" \u2014 "),eW=a("a"),Usr=o("HubertForSequenceClassification"),Jsr=o(" (Hubert model)"),Ysr=l(),wv=a("li"),H2e=a("strong"),Ksr=o("sew"),Zsr=o(" \u2014 "),oW=a("a"),elr=o("SEWForSequenceClassification"),olr=o(" (SEW model)"),rlr=l(),Av=a("li"),U2e=a("strong"),tlr=o("sew-d"),alr=o(" \u2014 "),rW=a("a"),nlr=o("SEWDForSequenceClassification"),slr=o(" (SEW-D model)"),llr=l(),Lv=a("li"),J2e=a("strong"),ilr=o("unispeech"),dlr=o(" \u2014 "),tW=a("a"),clr=o("UniSpeechForSequenceClassification"),flr=o(" (UniSpeech model)"),mlr=l(),yv=a("li"),Y2e=a("strong"),glr=o("unispeech-sat"),hlr=o(" \u2014 "),aW=a("a"),plr=o("UniSpeechSatForSequenceClassification"),_lr=o(" (UniSpeechSat model)"),ulr=l(),xv=a("li"),K2e=a("strong"),blr=o("wav2vec2"),vlr=o(" \u2014 "),nW=a("a"),Flr=o("Wav2Vec2ForSequenceClassification"),Tlr=o(" (Wav2Vec2 model)"),Mlr=l(),$v=a("li"),Z2e=a("strong"),Elr=o("wav2vec2-conformer"),Clr=o(" \u2014 "),sW=a("a"),wlr=o("Wav2Vec2ConformerForSequenceClassification"),Alr=o(" (Wav2Vec2-Conformer model)"),Llr=l(),kv=a("li"),ebe=a("strong"),ylr=o("wavlm"),xlr=o(" \u2014 "),lW=a("a"),$lr=o("WavLMForSequenceClassification"),klr=o(" (WavLM model)"),Slr=l(),Sv=a("p"),Rlr=o("The model is set in evaluation mode by default using "),obe=a("code"),Plr=o("model.eval()"),Blr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rbe=a("code"),Ilr=o("model.train()"),Nlr=l(),F(Rv.$$.fragment),ZOe=l(),Ld=a("h2"),Pv=a("a"),tbe=a("span"),F(y8.$$.fragment),qlr=l(),abe=a("span"),jlr=o("AutoModelForAudioFrameClassification"),eVe=l(),zo=a("div"),F(x8.$$.fragment),Dlr=l(),yd=a("p"),Glr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),iW=a("a"),Olr=o("from_pretrained()"),Vlr=o(" class method or the "),dW=a("a"),Xlr=o("from_config()"),zlr=o(` class
method.`),Qlr=l(),$8=a("p"),Wlr=o("This class cannot be instantiated directly using "),nbe=a("code"),Hlr=o("__init__()"),Ulr=o(" (throws an error)."),Jlr=l(),Tt=a("div"),F(k8.$$.fragment),Ylr=l(),sbe=a("p"),Klr=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Zlr=l(),xd=a("p"),eir=o(`Note:
Loading a model from its configuration file does `),lbe=a("strong"),oir=o("not"),rir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cW=a("a"),tir=o("from_pretrained()"),air=o(" to load the model weights."),nir=l(),F(Bv.$$.fragment),sir=l(),mo=a("div"),F(S8.$$.fragment),lir=l(),ibe=a("p"),iir=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),dir=l(),Ha=a("p"),cir=o("The model class to instantiate is selected based on the "),dbe=a("code"),fir=o("model_type"),mir=o(` property of the config object (either
passed as an argument or loaded from `),cbe=a("code"),gir=o("pretrained_model_name_or_path"),hir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fbe=a("code"),pir=o("pretrained_model_name_or_path"),_ir=o(":"),uir=l(),et=a("ul"),Iv=a("li"),mbe=a("strong"),bir=o("data2vec-audio"),vir=o(" \u2014 "),fW=a("a"),Fir=o("Data2VecAudioForAudioFrameClassification"),Tir=o(" (Data2VecAudio model)"),Mir=l(),Nv=a("li"),gbe=a("strong"),Eir=o("unispeech-sat"),Cir=o(" \u2014 "),mW=a("a"),wir=o("UniSpeechSatForAudioFrameClassification"),Air=o(" (UniSpeechSat model)"),Lir=l(),qv=a("li"),hbe=a("strong"),yir=o("wav2vec2"),xir=o(" \u2014 "),gW=a("a"),$ir=o("Wav2Vec2ForAudioFrameClassification"),kir=o(" (Wav2Vec2 model)"),Sir=l(),jv=a("li"),pbe=a("strong"),Rir=o("wav2vec2-conformer"),Pir=o(" \u2014 "),hW=a("a"),Bir=o("Wav2Vec2ConformerForAudioFrameClassification"),Iir=o(" (Wav2Vec2-Conformer model)"),Nir=l(),Dv=a("li"),_be=a("strong"),qir=o("wavlm"),jir=o(" \u2014 "),pW=a("a"),Dir=o("WavLMForAudioFrameClassification"),Gir=o(" (WavLM model)"),Oir=l(),Gv=a("p"),Vir=o("The model is set in evaluation mode by default using "),ube=a("code"),Xir=o("model.eval()"),zir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bbe=a("code"),Qir=o("model.train()"),Wir=l(),F(Ov.$$.fragment),oVe=l(),$d=a("h2"),Vv=a("a"),vbe=a("span"),F(R8.$$.fragment),Hir=l(),Fbe=a("span"),Uir=o("AutoModelForCTC"),rVe=l(),Qo=a("div"),F(P8.$$.fragment),Jir=l(),kd=a("p"),Yir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),_W=a("a"),Kir=o("from_pretrained()"),Zir=o(" class method or the "),uW=a("a"),edr=o("from_config()"),odr=o(` class
method.`),rdr=l(),B8=a("p"),tdr=o("This class cannot be instantiated directly using "),Tbe=a("code"),adr=o("__init__()"),ndr=o(" (throws an error)."),sdr=l(),Mt=a("div"),F(I8.$$.fragment),ldr=l(),Mbe=a("p"),idr=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),ddr=l(),Sd=a("p"),cdr=o(`Note:
Loading a model from its configuration file does `),Ebe=a("strong"),fdr=o("not"),mdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bW=a("a"),gdr=o("from_pretrained()"),hdr=o(" to load the model weights."),pdr=l(),F(Xv.$$.fragment),_dr=l(),go=a("div"),F(N8.$$.fragment),udr=l(),Cbe=a("p"),bdr=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),vdr=l(),Ua=a("p"),Fdr=o("The model class to instantiate is selected based on the "),wbe=a("code"),Tdr=o("model_type"),Mdr=o(` property of the config object (either
passed as an argument or loaded from `),Abe=a("code"),Edr=o("pretrained_model_name_or_path"),Cdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lbe=a("code"),wdr=o("pretrained_model_name_or_path"),Adr=o(":"),Ldr=l(),Le=a("ul"),zv=a("li"),ybe=a("strong"),ydr=o("data2vec-audio"),xdr=o(" \u2014 "),vW=a("a"),$dr=o("Data2VecAudioForCTC"),kdr=o(" (Data2VecAudio model)"),Sdr=l(),Qv=a("li"),xbe=a("strong"),Rdr=o("hubert"),Pdr=o(" \u2014 "),FW=a("a"),Bdr=o("HubertForCTC"),Idr=o(" (Hubert model)"),Ndr=l(),Wv=a("li"),$be=a("strong"),qdr=o("mctct"),jdr=o(" \u2014 "),TW=a("a"),Ddr=o("MCTCTForCTC"),Gdr=o(" (M-CTC-T model)"),Odr=l(),Hv=a("li"),kbe=a("strong"),Vdr=o("sew"),Xdr=o(" \u2014 "),MW=a("a"),zdr=o("SEWForCTC"),Qdr=o(" (SEW model)"),Wdr=l(),Uv=a("li"),Sbe=a("strong"),Hdr=o("sew-d"),Udr=o(" \u2014 "),EW=a("a"),Jdr=o("SEWDForCTC"),Ydr=o(" (SEW-D model)"),Kdr=l(),Jv=a("li"),Rbe=a("strong"),Zdr=o("unispeech"),ecr=o(" \u2014 "),CW=a("a"),ocr=o("UniSpeechForCTC"),rcr=o(" (UniSpeech model)"),tcr=l(),Yv=a("li"),Pbe=a("strong"),acr=o("unispeech-sat"),ncr=o(" \u2014 "),wW=a("a"),scr=o("UniSpeechSatForCTC"),lcr=o(" (UniSpeechSat model)"),icr=l(),Kv=a("li"),Bbe=a("strong"),dcr=o("wav2vec2"),ccr=o(" \u2014 "),AW=a("a"),fcr=o("Wav2Vec2ForCTC"),mcr=o(" (Wav2Vec2 model)"),gcr=l(),Zv=a("li"),Ibe=a("strong"),hcr=o("wav2vec2-conformer"),pcr=o(" \u2014 "),LW=a("a"),_cr=o("Wav2Vec2ConformerForCTC"),ucr=o(" (Wav2Vec2-Conformer model)"),bcr=l(),eF=a("li"),Nbe=a("strong"),vcr=o("wavlm"),Fcr=o(" \u2014 "),yW=a("a"),Tcr=o("WavLMForCTC"),Mcr=o(" (WavLM model)"),Ecr=l(),oF=a("p"),Ccr=o("The model is set in evaluation mode by default using "),qbe=a("code"),wcr=o("model.eval()"),Acr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jbe=a("code"),Lcr=o("model.train()"),ycr=l(),F(rF.$$.fragment),tVe=l(),Rd=a("h2"),tF=a("a"),Dbe=a("span"),F(q8.$$.fragment),xcr=l(),Gbe=a("span"),$cr=o("AutoModelForSpeechSeq2Seq"),aVe=l(),Wo=a("div"),F(j8.$$.fragment),kcr=l(),Pd=a("p"),Scr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),xW=a("a"),Rcr=o("from_pretrained()"),Pcr=o(" class method or the "),$W=a("a"),Bcr=o("from_config()"),Icr=o(` class
method.`),Ncr=l(),D8=a("p"),qcr=o("This class cannot be instantiated directly using "),Obe=a("code"),jcr=o("__init__()"),Dcr=o(" (throws an error)."),Gcr=l(),Et=a("div"),F(G8.$$.fragment),Ocr=l(),Vbe=a("p"),Vcr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Xcr=l(),Bd=a("p"),zcr=o(`Note:
Loading a model from its configuration file does `),Xbe=a("strong"),Qcr=o("not"),Wcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kW=a("a"),Hcr=o("from_pretrained()"),Ucr=o(" to load the model weights."),Jcr=l(),F(aF.$$.fragment),Ycr=l(),ho=a("div"),F(O8.$$.fragment),Kcr=l(),zbe=a("p"),Zcr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),efr=l(),Ja=a("p"),ofr=o("The model class to instantiate is selected based on the "),Qbe=a("code"),rfr=o("model_type"),tfr=o(` property of the config object (either
passed as an argument or loaded from `),Wbe=a("code"),afr=o("pretrained_model_name_or_path"),nfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hbe=a("code"),sfr=o("pretrained_model_name_or_path"),lfr=o(":"),ifr=l(),V8=a("ul"),nF=a("li"),Ube=a("strong"),dfr=o("speech-encoder-decoder"),cfr=o(" \u2014 "),SW=a("a"),ffr=o("SpeechEncoderDecoderModel"),mfr=o(" (Speech Encoder decoder model)"),gfr=l(),sF=a("li"),Jbe=a("strong"),hfr=o("speech_to_text"),pfr=o(" \u2014 "),RW=a("a"),_fr=o("Speech2TextForConditionalGeneration"),ufr=o(" (Speech2Text model)"),bfr=l(),lF=a("p"),vfr=o("The model is set in evaluation mode by default using "),Ybe=a("code"),Ffr=o("model.eval()"),Tfr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kbe=a("code"),Mfr=o("model.train()"),Efr=l(),F(iF.$$.fragment),nVe=l(),Id=a("h2"),dF=a("a"),Zbe=a("span"),F(X8.$$.fragment),Cfr=l(),e4e=a("span"),wfr=o("AutoModelForAudioXVector"),sVe=l(),Ho=a("div"),F(z8.$$.fragment),Afr=l(),Nd=a("p"),Lfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),PW=a("a"),yfr=o("from_pretrained()"),xfr=o(" class method or the "),BW=a("a"),$fr=o("from_config()"),kfr=o(` class
method.`),Sfr=l(),Q8=a("p"),Rfr=o("This class cannot be instantiated directly using "),o4e=a("code"),Pfr=o("__init__()"),Bfr=o(" (throws an error)."),Ifr=l(),Ct=a("div"),F(W8.$$.fragment),Nfr=l(),r4e=a("p"),qfr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),jfr=l(),qd=a("p"),Dfr=o(`Note:
Loading a model from its configuration file does `),t4e=a("strong"),Gfr=o("not"),Ofr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IW=a("a"),Vfr=o("from_pretrained()"),Xfr=o(" to load the model weights."),zfr=l(),F(cF.$$.fragment),Qfr=l(),po=a("div"),F(H8.$$.fragment),Wfr=l(),a4e=a("p"),Hfr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Ufr=l(),Ya=a("p"),Jfr=o("The model class to instantiate is selected based on the "),n4e=a("code"),Yfr=o("model_type"),Kfr=o(` property of the config object (either
passed as an argument or loaded from `),s4e=a("code"),Zfr=o("pretrained_model_name_or_path"),emr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l4e=a("code"),omr=o("pretrained_model_name_or_path"),rmr=o(":"),tmr=l(),ot=a("ul"),fF=a("li"),i4e=a("strong"),amr=o("data2vec-audio"),nmr=o(" \u2014 "),NW=a("a"),smr=o("Data2VecAudioForXVector"),lmr=o(" (Data2VecAudio model)"),imr=l(),mF=a("li"),d4e=a("strong"),dmr=o("unispeech-sat"),cmr=o(" \u2014 "),qW=a("a"),fmr=o("UniSpeechSatForXVector"),mmr=o(" (UniSpeechSat model)"),gmr=l(),gF=a("li"),c4e=a("strong"),hmr=o("wav2vec2"),pmr=o(" \u2014 "),jW=a("a"),_mr=o("Wav2Vec2ForXVector"),umr=o(" (Wav2Vec2 model)"),bmr=l(),hF=a("li"),f4e=a("strong"),vmr=o("wav2vec2-conformer"),Fmr=o(" \u2014 "),DW=a("a"),Tmr=o("Wav2Vec2ConformerForXVector"),Mmr=o(" (Wav2Vec2-Conformer model)"),Emr=l(),pF=a("li"),m4e=a("strong"),Cmr=o("wavlm"),wmr=o(" \u2014 "),GW=a("a"),Amr=o("WavLMForXVector"),Lmr=o(" (WavLM model)"),ymr=l(),_F=a("p"),xmr=o("The model is set in evaluation mode by default using "),g4e=a("code"),$mr=o("model.eval()"),kmr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),h4e=a("code"),Smr=o("model.train()"),Rmr=l(),F(uF.$$.fragment),lVe=l(),jd=a("h2"),bF=a("a"),p4e=a("span"),F(U8.$$.fragment),Pmr=l(),_4e=a("span"),Bmr=o("AutoModelForMaskedImageModeling"),iVe=l(),Uo=a("div"),F(J8.$$.fragment),Imr=l(),Dd=a("p"),Nmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),OW=a("a"),qmr=o("from_pretrained()"),jmr=o(" class method or the "),VW=a("a"),Dmr=o("from_config()"),Gmr=o(` class
method.`),Omr=l(),Y8=a("p"),Vmr=o("This class cannot be instantiated directly using "),u4e=a("code"),Xmr=o("__init__()"),zmr=o(" (throws an error)."),Qmr=l(),wt=a("div"),F(K8.$$.fragment),Wmr=l(),b4e=a("p"),Hmr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Umr=l(),Gd=a("p"),Jmr=o(`Note:
Loading a model from its configuration file does `),v4e=a("strong"),Ymr=o("not"),Kmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XW=a("a"),Zmr=o("from_pretrained()"),egr=o(" to load the model weights."),ogr=l(),F(vF.$$.fragment),rgr=l(),_o=a("div"),F(Z8.$$.fragment),tgr=l(),F4e=a("p"),agr=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),ngr=l(),Ka=a("p"),sgr=o("The model class to instantiate is selected based on the "),T4e=a("code"),lgr=o("model_type"),igr=o(` property of the config object (either
passed as an argument or loaded from `),M4e=a("code"),dgr=o("pretrained_model_name_or_path"),cgr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E4e=a("code"),fgr=o("pretrained_model_name_or_path"),mgr=o(":"),ggr=l(),Od=a("ul"),FF=a("li"),C4e=a("strong"),hgr=o("deit"),pgr=o(" \u2014 "),zW=a("a"),_gr=o("DeiTForMaskedImageModeling"),ugr=o(" (DeiT model)"),bgr=l(),TF=a("li"),w4e=a("strong"),vgr=o("swin"),Fgr=o(" \u2014 "),QW=a("a"),Tgr=o("SwinForMaskedImageModeling"),Mgr=o(" (Swin Transformer model)"),Egr=l(),MF=a("li"),A4e=a("strong"),Cgr=o("vit"),wgr=o(" \u2014 "),WW=a("a"),Agr=o("ViTForMaskedImageModeling"),Lgr=o(" (ViT model)"),ygr=l(),EF=a("p"),xgr=o("The model is set in evaluation mode by default using "),L4e=a("code"),$gr=o("model.eval()"),kgr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),y4e=a("code"),Sgr=o("model.train()"),Rgr=l(),F(CF.$$.fragment),dVe=l(),Vd=a("h2"),wF=a("a"),x4e=a("span"),F(e9.$$.fragment),Pgr=l(),$4e=a("span"),Bgr=o("AutoModelForObjectDetection"),cVe=l(),Jo=a("div"),F(o9.$$.fragment),Igr=l(),Xd=a("p"),Ngr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),HW=a("a"),qgr=o("from_pretrained()"),jgr=o(" class method or the "),UW=a("a"),Dgr=o("from_config()"),Ggr=o(` class
method.`),Ogr=l(),r9=a("p"),Vgr=o("This class cannot be instantiated directly using "),k4e=a("code"),Xgr=o("__init__()"),zgr=o(" (throws an error)."),Qgr=l(),At=a("div"),F(t9.$$.fragment),Wgr=l(),S4e=a("p"),Hgr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Ugr=l(),zd=a("p"),Jgr=o(`Note:
Loading a model from its configuration file does `),R4e=a("strong"),Ygr=o("not"),Kgr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JW=a("a"),Zgr=o("from_pretrained()"),ehr=o(" to load the model weights."),ohr=l(),F(AF.$$.fragment),rhr=l(),uo=a("div"),F(a9.$$.fragment),thr=l(),P4e=a("p"),ahr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),nhr=l(),Za=a("p"),shr=o("The model class to instantiate is selected based on the "),B4e=a("code"),lhr=o("model_type"),ihr=o(` property of the config object (either
passed as an argument or loaded from `),I4e=a("code"),dhr=o("pretrained_model_name_or_path"),chr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N4e=a("code"),fhr=o("pretrained_model_name_or_path"),mhr=o(":"),ghr=l(),n9=a("ul"),LF=a("li"),q4e=a("strong"),hhr=o("detr"),phr=o(" \u2014 "),YW=a("a"),_hr=o("DetrForObjectDetection"),uhr=o(" (DETR model)"),bhr=l(),yF=a("li"),j4e=a("strong"),vhr=o("yolos"),Fhr=o(" \u2014 "),KW=a("a"),Thr=o("YolosForObjectDetection"),Mhr=o(" (YOLOS model)"),Ehr=l(),xF=a("p"),Chr=o("The model is set in evaluation mode by default using "),D4e=a("code"),whr=o("model.eval()"),Ahr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),G4e=a("code"),Lhr=o("model.train()"),yhr=l(),F($F.$$.fragment),fVe=l(),Qd=a("h2"),kF=a("a"),O4e=a("span"),F(s9.$$.fragment),xhr=l(),V4e=a("span"),$hr=o("AutoModelForImageSegmentation"),mVe=l(),Yo=a("div"),F(l9.$$.fragment),khr=l(),Wd=a("p"),Shr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),ZW=a("a"),Rhr=o("from_pretrained()"),Phr=o(" class method or the "),eH=a("a"),Bhr=o("from_config()"),Ihr=o(` class
method.`),Nhr=l(),i9=a("p"),qhr=o("This class cannot be instantiated directly using "),X4e=a("code"),jhr=o("__init__()"),Dhr=o(" (throws an error)."),Ghr=l(),Lt=a("div"),F(d9.$$.fragment),Ohr=l(),z4e=a("p"),Vhr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Xhr=l(),Hd=a("p"),zhr=o(`Note:
Loading a model from its configuration file does `),Q4e=a("strong"),Qhr=o("not"),Whr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oH=a("a"),Hhr=o("from_pretrained()"),Uhr=o(" to load the model weights."),Jhr=l(),F(SF.$$.fragment),Yhr=l(),bo=a("div"),F(c9.$$.fragment),Khr=l(),W4e=a("p"),Zhr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),epr=l(),en=a("p"),opr=o("The model class to instantiate is selected based on the "),H4e=a("code"),rpr=o("model_type"),tpr=o(` property of the config object (either
passed as an argument or loaded from `),U4e=a("code"),apr=o("pretrained_model_name_or_path"),npr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J4e=a("code"),spr=o("pretrained_model_name_or_path"),lpr=o(":"),ipr=l(),Y4e=a("ul"),RF=a("li"),K4e=a("strong"),dpr=o("detr"),cpr=o(" \u2014 "),rH=a("a"),fpr=o("DetrForSegmentation"),mpr=o(" (DETR model)"),gpr=l(),PF=a("p"),hpr=o("The model is set in evaluation mode by default using "),Z4e=a("code"),ppr=o("model.eval()"),_pr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),e5e=a("code"),upr=o("model.train()"),bpr=l(),F(BF.$$.fragment),gVe=l(),Ud=a("h2"),IF=a("a"),o5e=a("span"),F(f9.$$.fragment),vpr=l(),r5e=a("span"),Fpr=o("AutoModelForSemanticSegmentation"),hVe=l(),Ko=a("div"),F(m9.$$.fragment),Tpr=l(),Jd=a("p"),Mpr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),tH=a("a"),Epr=o("from_pretrained()"),Cpr=o(" class method or the "),aH=a("a"),wpr=o("from_config()"),Apr=o(` class
method.`),Lpr=l(),g9=a("p"),ypr=o("This class cannot be instantiated directly using "),t5e=a("code"),xpr=o("__init__()"),$pr=o(" (throws an error)."),kpr=l(),yt=a("div"),F(h9.$$.fragment),Spr=l(),a5e=a("p"),Rpr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Ppr=l(),Yd=a("p"),Bpr=o(`Note:
Loading a model from its configuration file does `),n5e=a("strong"),Ipr=o("not"),Npr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nH=a("a"),qpr=o("from_pretrained()"),jpr=o(" to load the model weights."),Dpr=l(),F(NF.$$.fragment),Gpr=l(),vo=a("div"),F(p9.$$.fragment),Opr=l(),s5e=a("p"),Vpr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Xpr=l(),on=a("p"),zpr=o("The model class to instantiate is selected based on the "),l5e=a("code"),Qpr=o("model_type"),Wpr=o(` property of the config object (either
passed as an argument or loaded from `),i5e=a("code"),Hpr=o("pretrained_model_name_or_path"),Upr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d5e=a("code"),Jpr=o("pretrained_model_name_or_path"),Ypr=o(":"),Kpr=l(),rn=a("ul"),qF=a("li"),c5e=a("strong"),Zpr=o("beit"),e_r=o(" \u2014 "),sH=a("a"),o_r=o("BeitForSemanticSegmentation"),r_r=o(" (BEiT model)"),t_r=l(),jF=a("li"),f5e=a("strong"),a_r=o("data2vec-vision"),n_r=o(" \u2014 "),lH=a("a"),s_r=o("Data2VecVisionForSemanticSegmentation"),l_r=o(" (Data2VecVision model)"),i_r=l(),DF=a("li"),m5e=a("strong"),d_r=o("dpt"),c_r=o(" \u2014 "),iH=a("a"),f_r=o("DPTForSemanticSegmentation"),m_r=o(" (DPT model)"),g_r=l(),GF=a("li"),g5e=a("strong"),h_r=o("segformer"),p_r=o(" \u2014 "),dH=a("a"),__r=o("SegformerForSemanticSegmentation"),u_r=o(" (SegFormer model)"),b_r=l(),OF=a("p"),v_r=o("The model is set in evaluation mode by default using "),h5e=a("code"),F_r=o("model.eval()"),T_r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),p5e=a("code"),M_r=o("model.train()"),E_r=l(),F(VF.$$.fragment),pVe=l(),Kd=a("h2"),XF=a("a"),_5e=a("span"),F(_9.$$.fragment),C_r=l(),u5e=a("span"),w_r=o("AutoModelForInstanceSegmentation"),_Ve=l(),Zo=a("div"),F(u9.$$.fragment),A_r=l(),Zd=a("p"),L_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),cH=a("a"),y_r=o("from_pretrained()"),x_r=o(" class method or the "),fH=a("a"),$_r=o("from_config()"),k_r=o(` class
method.`),S_r=l(),b9=a("p"),R_r=o("This class cannot be instantiated directly using "),b5e=a("code"),P_r=o("__init__()"),B_r=o(" (throws an error)."),I_r=l(),xt=a("div"),F(v9.$$.fragment),N_r=l(),v5e=a("p"),q_r=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),j_r=l(),ec=a("p"),D_r=o(`Note:
Loading a model from its configuration file does `),F5e=a("strong"),G_r=o("not"),O_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mH=a("a"),V_r=o("from_pretrained()"),X_r=o(" to load the model weights."),z_r=l(),F(zF.$$.fragment),Q_r=l(),Fo=a("div"),F(F9.$$.fragment),W_r=l(),T5e=a("p"),H_r=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),U_r=l(),tn=a("p"),J_r=o("The model class to instantiate is selected based on the "),M5e=a("code"),Y_r=o("model_type"),K_r=o(` property of the config object (either
passed as an argument or loaded from `),E5e=a("code"),Z_r=o("pretrained_model_name_or_path"),eur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C5e=a("code"),our=o("pretrained_model_name_or_path"),rur=o(":"),tur=l(),w5e=a("ul"),QF=a("li"),A5e=a("strong"),aur=o("maskformer"),nur=o(" \u2014 "),gH=a("a"),sur=o("MaskFormerForInstanceSegmentation"),lur=o(" (MaskFormer model)"),iur=l(),WF=a("p"),dur=o("The model is set in evaluation mode by default using "),L5e=a("code"),cur=o("model.eval()"),fur=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),y5e=a("code"),mur=o("model.train()"),gur=l(),F(HF.$$.fragment),uVe=l(),oc=a("h2"),UF=a("a"),x5e=a("span"),F(T9.$$.fragment),hur=l(),$5e=a("span"),pur=o("TFAutoModel"),bVe=l(),er=a("div"),F(M9.$$.fragment),_ur=l(),rc=a("p"),uur=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),hH=a("a"),bur=o("from_pretrained()"),vur=o(" class method or the "),pH=a("a"),Fur=o("from_config()"),Tur=o(` class
method.`),Mur=l(),E9=a("p"),Eur=o("This class cannot be instantiated directly using "),k5e=a("code"),Cur=o("__init__()"),wur=o(" (throws an error)."),Aur=l(),$t=a("div"),F(C9.$$.fragment),Lur=l(),S5e=a("p"),yur=o("Instantiates one of the base model classes of the library from a configuration."),xur=l(),tc=a("p"),$ur=o(`Note:
Loading a model from its configuration file does `),R5e=a("strong"),kur=o("not"),Sur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_H=a("a"),Rur=o("from_pretrained()"),Pur=o(" to load the model weights."),Bur=l(),F(JF.$$.fragment),Iur=l(),yr=a("div"),F(w9.$$.fragment),Nur=l(),P5e=a("p"),qur=o("Instantiate one of the base model classes of the library from a pretrained model."),jur=l(),an=a("p"),Dur=o("The model class to instantiate is selected based on the "),B5e=a("code"),Gur=o("model_type"),Our=o(` property of the config object (either
passed as an argument or loaded from `),I5e=a("code"),Vur=o("pretrained_model_name_or_path"),Xur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N5e=a("code"),zur=o("pretrained_model_name_or_path"),Qur=o(":"),Wur=l(),q=a("ul"),YF=a("li"),q5e=a("strong"),Hur=o("albert"),Uur=o(" \u2014 "),uH=a("a"),Jur=o("TFAlbertModel"),Yur=o(" (ALBERT model)"),Kur=l(),KF=a("li"),j5e=a("strong"),Zur=o("bart"),e1r=o(" \u2014 "),bH=a("a"),o1r=o("TFBartModel"),r1r=o(" (BART model)"),t1r=l(),ZF=a("li"),D5e=a("strong"),a1r=o("bert"),n1r=o(" \u2014 "),vH=a("a"),s1r=o("TFBertModel"),l1r=o(" (BERT model)"),i1r=l(),e6=a("li"),G5e=a("strong"),d1r=o("blenderbot"),c1r=o(" \u2014 "),FH=a("a"),f1r=o("TFBlenderbotModel"),m1r=o(" (Blenderbot model)"),g1r=l(),o6=a("li"),O5e=a("strong"),h1r=o("blenderbot-small"),p1r=o(" \u2014 "),TH=a("a"),_1r=o("TFBlenderbotSmallModel"),u1r=o(" (BlenderbotSmall model)"),b1r=l(),r6=a("li"),V5e=a("strong"),v1r=o("camembert"),F1r=o(" \u2014 "),MH=a("a"),T1r=o("TFCamembertModel"),M1r=o(" (CamemBERT model)"),E1r=l(),t6=a("li"),X5e=a("strong"),C1r=o("clip"),w1r=o(" \u2014 "),EH=a("a"),A1r=o("TFCLIPModel"),L1r=o(" (CLIP model)"),y1r=l(),a6=a("li"),z5e=a("strong"),x1r=o("convbert"),$1r=o(" \u2014 "),CH=a("a"),k1r=o("TFConvBertModel"),S1r=o(" (ConvBERT model)"),R1r=l(),n6=a("li"),Q5e=a("strong"),P1r=o("convnext"),B1r=o(" \u2014 "),wH=a("a"),I1r=o("TFConvNextModel"),N1r=o(" (ConvNeXT model)"),q1r=l(),s6=a("li"),W5e=a("strong"),j1r=o("ctrl"),D1r=o(" \u2014 "),AH=a("a"),G1r=o("TFCTRLModel"),O1r=o(" (CTRL model)"),V1r=l(),l6=a("li"),H5e=a("strong"),X1r=o("data2vec-vision"),z1r=o(" \u2014 "),LH=a("a"),Q1r=o("TFData2VecVisionModel"),W1r=o(" (Data2VecVision model)"),H1r=l(),i6=a("li"),U5e=a("strong"),U1r=o("deberta"),J1r=o(" \u2014 "),yH=a("a"),Y1r=o("TFDebertaModel"),K1r=o(" (DeBERTa model)"),Z1r=l(),d6=a("li"),J5e=a("strong"),e2r=o("deberta-v2"),o2r=o(" \u2014 "),xH=a("a"),r2r=o("TFDebertaV2Model"),t2r=o(" (DeBERTa-v2 model)"),a2r=l(),c6=a("li"),Y5e=a("strong"),n2r=o("distilbert"),s2r=o(" \u2014 "),$H=a("a"),l2r=o("TFDistilBertModel"),i2r=o(" (DistilBERT model)"),d2r=l(),f6=a("li"),K5e=a("strong"),c2r=o("dpr"),f2r=o(" \u2014 "),kH=a("a"),m2r=o("TFDPRQuestionEncoder"),g2r=o(" (DPR model)"),h2r=l(),m6=a("li"),Z5e=a("strong"),p2r=o("electra"),_2r=o(" \u2014 "),SH=a("a"),u2r=o("TFElectraModel"),b2r=o(" (ELECTRA model)"),v2r=l(),g6=a("li"),e3e=a("strong"),F2r=o("flaubert"),T2r=o(" \u2014 "),RH=a("a"),M2r=o("TFFlaubertModel"),E2r=o(" (FlauBERT model)"),C2r=l(),Ws=a("li"),o3e=a("strong"),w2r=o("funnel"),A2r=o(" \u2014 "),PH=a("a"),L2r=o("TFFunnelModel"),y2r=o(" or "),BH=a("a"),x2r=o("TFFunnelBaseModel"),$2r=o(" (Funnel Transformer model)"),k2r=l(),h6=a("li"),r3e=a("strong"),S2r=o("gpt2"),R2r=o(" \u2014 "),IH=a("a"),P2r=o("TFGPT2Model"),B2r=o(" (OpenAI GPT-2 model)"),I2r=l(),p6=a("li"),t3e=a("strong"),N2r=o("gptj"),q2r=o(" \u2014 "),NH=a("a"),j2r=o("TFGPTJModel"),D2r=o(" (GPT-J model)"),G2r=l(),_6=a("li"),a3e=a("strong"),O2r=o("hubert"),V2r=o(" \u2014 "),qH=a("a"),X2r=o("TFHubertModel"),z2r=o(" (Hubert model)"),Q2r=l(),u6=a("li"),n3e=a("strong"),W2r=o("layoutlm"),H2r=o(" \u2014 "),jH=a("a"),U2r=o("TFLayoutLMModel"),J2r=o(" (LayoutLM model)"),Y2r=l(),b6=a("li"),s3e=a("strong"),K2r=o("led"),Z2r=o(" \u2014 "),DH=a("a"),ebr=o("TFLEDModel"),obr=o(" (LED model)"),rbr=l(),v6=a("li"),l3e=a("strong"),tbr=o("longformer"),abr=o(" \u2014 "),GH=a("a"),nbr=o("TFLongformerModel"),sbr=o(" (Longformer model)"),lbr=l(),F6=a("li"),i3e=a("strong"),ibr=o("lxmert"),dbr=o(" \u2014 "),OH=a("a"),cbr=o("TFLxmertModel"),fbr=o(" (LXMERT model)"),mbr=l(),T6=a("li"),d3e=a("strong"),gbr=o("marian"),hbr=o(" \u2014 "),VH=a("a"),pbr=o("TFMarianModel"),_br=o(" (Marian model)"),ubr=l(),M6=a("li"),c3e=a("strong"),bbr=o("mbart"),vbr=o(" \u2014 "),XH=a("a"),Fbr=o("TFMBartModel"),Tbr=o(" (mBART model)"),Mbr=l(),E6=a("li"),f3e=a("strong"),Ebr=o("mobilebert"),Cbr=o(" \u2014 "),zH=a("a"),wbr=o("TFMobileBertModel"),Abr=o(" (MobileBERT model)"),Lbr=l(),C6=a("li"),m3e=a("strong"),ybr=o("mpnet"),xbr=o(" \u2014 "),QH=a("a"),$br=o("TFMPNetModel"),kbr=o(" (MPNet model)"),Sbr=l(),w6=a("li"),g3e=a("strong"),Rbr=o("mt5"),Pbr=o(" \u2014 "),WH=a("a"),Bbr=o("TFMT5Model"),Ibr=o(" (MT5 model)"),Nbr=l(),A6=a("li"),h3e=a("strong"),qbr=o("openai-gpt"),jbr=o(" \u2014 "),HH=a("a"),Dbr=o("TFOpenAIGPTModel"),Gbr=o(" (OpenAI GPT model)"),Obr=l(),L6=a("li"),p3e=a("strong"),Vbr=o("opt"),Xbr=o(" \u2014 "),UH=a("a"),zbr=o("TFOPTModel"),Qbr=o(" (OPT model)"),Wbr=l(),y6=a("li"),_3e=a("strong"),Hbr=o("pegasus"),Ubr=o(" \u2014 "),JH=a("a"),Jbr=o("TFPegasusModel"),Ybr=o(" (Pegasus model)"),Kbr=l(),x6=a("li"),u3e=a("strong"),Zbr=o("rembert"),e4r=o(" \u2014 "),YH=a("a"),o4r=o("TFRemBertModel"),r4r=o(" (RemBERT model)"),t4r=l(),$6=a("li"),b3e=a("strong"),a4r=o("roberta"),n4r=o(" \u2014 "),KH=a("a"),s4r=o("TFRobertaModel"),l4r=o(" (RoBERTa model)"),i4r=l(),k6=a("li"),v3e=a("strong"),d4r=o("roformer"),c4r=o(" \u2014 "),ZH=a("a"),f4r=o("TFRoFormerModel"),m4r=o(" (RoFormer model)"),g4r=l(),S6=a("li"),F3e=a("strong"),h4r=o("speech_to_text"),p4r=o(" \u2014 "),eU=a("a"),_4r=o("TFSpeech2TextModel"),u4r=o(" (Speech2Text model)"),b4r=l(),R6=a("li"),T3e=a("strong"),v4r=o("swin"),F4r=o(" \u2014 "),oU=a("a"),T4r=o("TFSwinModel"),M4r=o(" (Swin Transformer model)"),E4r=l(),P6=a("li"),M3e=a("strong"),C4r=o("t5"),w4r=o(" \u2014 "),rU=a("a"),A4r=o("TFT5Model"),L4r=o(" (T5 model)"),y4r=l(),B6=a("li"),E3e=a("strong"),x4r=o("tapas"),$4r=o(" \u2014 "),tU=a("a"),k4r=o("TFTapasModel"),S4r=o(" (TAPAS model)"),R4r=l(),I6=a("li"),C3e=a("strong"),P4r=o("transfo-xl"),B4r=o(" \u2014 "),aU=a("a"),I4r=o("TFTransfoXLModel"),N4r=o(" (Transformer-XL model)"),q4r=l(),N6=a("li"),w3e=a("strong"),j4r=o("vit"),D4r=o(" \u2014 "),nU=a("a"),G4r=o("TFViTModel"),O4r=o(" (ViT model)"),V4r=l(),q6=a("li"),A3e=a("strong"),X4r=o("vit_mae"),z4r=o(" \u2014 "),sU=a("a"),Q4r=o("TFViTMAEModel"),W4r=o(" (ViTMAE model)"),H4r=l(),j6=a("li"),L3e=a("strong"),U4r=o("wav2vec2"),J4r=o(" \u2014 "),lU=a("a"),Y4r=o("TFWav2Vec2Model"),K4r=o(" (Wav2Vec2 model)"),Z4r=l(),D6=a("li"),y3e=a("strong"),e5r=o("xglm"),o5r=o(" \u2014 "),iU=a("a"),r5r=o("TFXGLMModel"),t5r=o(" (XGLM model)"),a5r=l(),G6=a("li"),x3e=a("strong"),n5r=o("xlm"),s5r=o(" \u2014 "),dU=a("a"),l5r=o("TFXLMModel"),i5r=o(" (XLM model)"),d5r=l(),O6=a("li"),$3e=a("strong"),c5r=o("xlm-roberta"),f5r=o(" \u2014 "),cU=a("a"),m5r=o("TFXLMRobertaModel"),g5r=o(" (XLM-RoBERTa model)"),h5r=l(),V6=a("li"),k3e=a("strong"),p5r=o("xlnet"),_5r=o(" \u2014 "),fU=a("a"),u5r=o("TFXLNetModel"),b5r=o(" (XLNet model)"),v5r=l(),F(X6.$$.fragment),vVe=l(),ac=a("h2"),z6=a("a"),S3e=a("span"),F(A9.$$.fragment),F5r=l(),R3e=a("span"),T5r=o("TFAutoModelForPreTraining"),FVe=l(),or=a("div"),F(L9.$$.fragment),M5r=l(),nc=a("p"),E5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),mU=a("a"),C5r=o("from_pretrained()"),w5r=o(" class method or the "),gU=a("a"),A5r=o("from_config()"),L5r=o(` class
method.`),y5r=l(),y9=a("p"),x5r=o("This class cannot be instantiated directly using "),P3e=a("code"),$5r=o("__init__()"),k5r=o(" (throws an error)."),S5r=l(),kt=a("div"),F(x9.$$.fragment),R5r=l(),B3e=a("p"),P5r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),B5r=l(),sc=a("p"),I5r=o(`Note:
Loading a model from its configuration file does `),I3e=a("strong"),N5r=o("not"),q5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hU=a("a"),j5r=o("from_pretrained()"),D5r=o(" to load the model weights."),G5r=l(),F(Q6.$$.fragment),O5r=l(),xr=a("div"),F($9.$$.fragment),V5r=l(),N3e=a("p"),X5r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),z5r=l(),nn=a("p"),Q5r=o("The model class to instantiate is selected based on the "),q3e=a("code"),W5r=o("model_type"),H5r=o(` property of the config object (either
passed as an argument or loaded from `),j3e=a("code"),U5r=o("pretrained_model_name_or_path"),J5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D3e=a("code"),Y5r=o("pretrained_model_name_or_path"),K5r=o(":"),Z5r=l(),se=a("ul"),W6=a("li"),G3e=a("strong"),e3r=o("albert"),o3r=o(" \u2014 "),pU=a("a"),r3r=o("TFAlbertForPreTraining"),t3r=o(" (ALBERT model)"),a3r=l(),H6=a("li"),O3e=a("strong"),n3r=o("bart"),s3r=o(" \u2014 "),_U=a("a"),l3r=o("TFBartForConditionalGeneration"),i3r=o(" (BART model)"),d3r=l(),U6=a("li"),V3e=a("strong"),c3r=o("bert"),f3r=o(" \u2014 "),uU=a("a"),m3r=o("TFBertForPreTraining"),g3r=o(" (BERT model)"),h3r=l(),J6=a("li"),X3e=a("strong"),p3r=o("camembert"),_3r=o(" \u2014 "),bU=a("a"),u3r=o("TFCamembertForMaskedLM"),b3r=o(" (CamemBERT model)"),v3r=l(),Y6=a("li"),z3e=a("strong"),F3r=o("ctrl"),T3r=o(" \u2014 "),vU=a("a"),M3r=o("TFCTRLLMHeadModel"),E3r=o(" (CTRL model)"),C3r=l(),K6=a("li"),Q3e=a("strong"),w3r=o("distilbert"),A3r=o(" \u2014 "),FU=a("a"),L3r=o("TFDistilBertForMaskedLM"),y3r=o(" (DistilBERT model)"),x3r=l(),Z6=a("li"),W3e=a("strong"),$3r=o("electra"),k3r=o(" \u2014 "),TU=a("a"),S3r=o("TFElectraForPreTraining"),R3r=o(" (ELECTRA model)"),P3r=l(),eT=a("li"),H3e=a("strong"),B3r=o("flaubert"),I3r=o(" \u2014 "),MU=a("a"),N3r=o("TFFlaubertWithLMHeadModel"),q3r=o(" (FlauBERT model)"),j3r=l(),oT=a("li"),U3e=a("strong"),D3r=o("funnel"),G3r=o(" \u2014 "),EU=a("a"),O3r=o("TFFunnelForPreTraining"),V3r=o(" (Funnel Transformer model)"),X3r=l(),rT=a("li"),J3e=a("strong"),z3r=o("gpt2"),Q3r=o(" \u2014 "),CU=a("a"),W3r=o("TFGPT2LMHeadModel"),H3r=o(" (OpenAI GPT-2 model)"),U3r=l(),tT=a("li"),Y3e=a("strong"),J3r=o("layoutlm"),Y3r=o(" \u2014 "),wU=a("a"),K3r=o("TFLayoutLMForMaskedLM"),Z3r=o(" (LayoutLM model)"),evr=l(),aT=a("li"),K3e=a("strong"),ovr=o("lxmert"),rvr=o(" \u2014 "),AU=a("a"),tvr=o("TFLxmertForPreTraining"),avr=o(" (LXMERT model)"),nvr=l(),nT=a("li"),Z3e=a("strong"),svr=o("mobilebert"),lvr=o(" \u2014 "),LU=a("a"),ivr=o("TFMobileBertForPreTraining"),dvr=o(" (MobileBERT model)"),cvr=l(),sT=a("li"),eve=a("strong"),fvr=o("mpnet"),mvr=o(" \u2014 "),yU=a("a"),gvr=o("TFMPNetForMaskedLM"),hvr=o(" (MPNet model)"),pvr=l(),lT=a("li"),ove=a("strong"),_vr=o("openai-gpt"),uvr=o(" \u2014 "),xU=a("a"),bvr=o("TFOpenAIGPTLMHeadModel"),vvr=o(" (OpenAI GPT model)"),Fvr=l(),iT=a("li"),rve=a("strong"),Tvr=o("roberta"),Mvr=o(" \u2014 "),$U=a("a"),Evr=o("TFRobertaForMaskedLM"),Cvr=o(" (RoBERTa model)"),wvr=l(),dT=a("li"),tve=a("strong"),Avr=o("t5"),Lvr=o(" \u2014 "),kU=a("a"),yvr=o("TFT5ForConditionalGeneration"),xvr=o(" (T5 model)"),$vr=l(),cT=a("li"),ave=a("strong"),kvr=o("tapas"),Svr=o(" \u2014 "),SU=a("a"),Rvr=o("TFTapasForMaskedLM"),Pvr=o(" (TAPAS model)"),Bvr=l(),fT=a("li"),nve=a("strong"),Ivr=o("transfo-xl"),Nvr=o(" \u2014 "),RU=a("a"),qvr=o("TFTransfoXLLMHeadModel"),jvr=o(" (Transformer-XL model)"),Dvr=l(),mT=a("li"),sve=a("strong"),Gvr=o("vit_mae"),Ovr=o(" \u2014 "),PU=a("a"),Vvr=o("TFViTMAEForPreTraining"),Xvr=o(" (ViTMAE model)"),zvr=l(),gT=a("li"),lve=a("strong"),Qvr=o("xlm"),Wvr=o(" \u2014 "),BU=a("a"),Hvr=o("TFXLMWithLMHeadModel"),Uvr=o(" (XLM model)"),Jvr=l(),hT=a("li"),ive=a("strong"),Yvr=o("xlm-roberta"),Kvr=o(" \u2014 "),IU=a("a"),Zvr=o("TFXLMRobertaForMaskedLM"),eFr=o(" (XLM-RoBERTa model)"),oFr=l(),pT=a("li"),dve=a("strong"),rFr=o("xlnet"),tFr=o(" \u2014 "),NU=a("a"),aFr=o("TFXLNetLMHeadModel"),nFr=o(" (XLNet model)"),sFr=l(),F(_T.$$.fragment),TVe=l(),lc=a("h2"),uT=a("a"),cve=a("span"),F(k9.$$.fragment),lFr=l(),fve=a("span"),iFr=o("TFAutoModelForCausalLM"),MVe=l(),rr=a("div"),F(S9.$$.fragment),dFr=l(),ic=a("p"),cFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),qU=a("a"),fFr=o("from_pretrained()"),mFr=o(" class method or the "),jU=a("a"),gFr=o("from_config()"),hFr=o(` class
method.`),pFr=l(),R9=a("p"),_Fr=o("This class cannot be instantiated directly using "),mve=a("code"),uFr=o("__init__()"),bFr=o(" (throws an error)."),vFr=l(),St=a("div"),F(P9.$$.fragment),FFr=l(),gve=a("p"),TFr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),MFr=l(),dc=a("p"),EFr=o(`Note:
Loading a model from its configuration file does `),hve=a("strong"),CFr=o("not"),wFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DU=a("a"),AFr=o("from_pretrained()"),LFr=o(" to load the model weights."),yFr=l(),F(bT.$$.fragment),xFr=l(),$r=a("div"),F(B9.$$.fragment),$Fr=l(),pve=a("p"),kFr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),SFr=l(),sn=a("p"),RFr=o("The model class to instantiate is selected based on the "),_ve=a("code"),PFr=o("model_type"),BFr=o(` property of the config object (either
passed as an argument or loaded from `),uve=a("code"),IFr=o("pretrained_model_name_or_path"),NFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bve=a("code"),qFr=o("pretrained_model_name_or_path"),jFr=o(":"),DFr=l(),Te=a("ul"),vT=a("li"),vve=a("strong"),GFr=o("bert"),OFr=o(" \u2014 "),GU=a("a"),VFr=o("TFBertLMHeadModel"),XFr=o(" (BERT model)"),zFr=l(),FT=a("li"),Fve=a("strong"),QFr=o("camembert"),WFr=o(" \u2014 "),OU=a("a"),HFr=o("TFCamembertForCausalLM"),UFr=o(" (CamemBERT model)"),JFr=l(),TT=a("li"),Tve=a("strong"),YFr=o("ctrl"),KFr=o(" \u2014 "),VU=a("a"),ZFr=o("TFCTRLLMHeadModel"),e6r=o(" (CTRL model)"),o6r=l(),MT=a("li"),Mve=a("strong"),r6r=o("gpt2"),t6r=o(" \u2014 "),XU=a("a"),a6r=o("TFGPT2LMHeadModel"),n6r=o(" (OpenAI GPT-2 model)"),s6r=l(),ET=a("li"),Eve=a("strong"),l6r=o("gptj"),i6r=o(" \u2014 "),zU=a("a"),d6r=o("TFGPTJForCausalLM"),c6r=o(" (GPT-J model)"),f6r=l(),CT=a("li"),Cve=a("strong"),m6r=o("openai-gpt"),g6r=o(" \u2014 "),QU=a("a"),h6r=o("TFOpenAIGPTLMHeadModel"),p6r=o(" (OpenAI GPT model)"),_6r=l(),wT=a("li"),wve=a("strong"),u6r=o("opt"),b6r=o(" \u2014 "),WU=a("a"),v6r=o("TFOPTForCausalLM"),F6r=o(" (OPT model)"),T6r=l(),AT=a("li"),Ave=a("strong"),M6r=o("rembert"),E6r=o(" \u2014 "),HU=a("a"),C6r=o("TFRemBertForCausalLM"),w6r=o(" (RemBERT model)"),A6r=l(),LT=a("li"),Lve=a("strong"),L6r=o("roberta"),y6r=o(" \u2014 "),UU=a("a"),x6r=o("TFRobertaForCausalLM"),$6r=o(" (RoBERTa model)"),k6r=l(),yT=a("li"),yve=a("strong"),S6r=o("roformer"),R6r=o(" \u2014 "),JU=a("a"),P6r=o("TFRoFormerForCausalLM"),B6r=o(" (RoFormer model)"),I6r=l(),xT=a("li"),xve=a("strong"),N6r=o("transfo-xl"),q6r=o(" \u2014 "),YU=a("a"),j6r=o("TFTransfoXLLMHeadModel"),D6r=o(" (Transformer-XL model)"),G6r=l(),$T=a("li"),$ve=a("strong"),O6r=o("xglm"),V6r=o(" \u2014 "),KU=a("a"),X6r=o("TFXGLMForCausalLM"),z6r=o(" (XGLM model)"),Q6r=l(),kT=a("li"),kve=a("strong"),W6r=o("xlm"),H6r=o(" \u2014 "),ZU=a("a"),U6r=o("TFXLMWithLMHeadModel"),J6r=o(" (XLM model)"),Y6r=l(),ST=a("li"),Sve=a("strong"),K6r=o("xlnet"),Z6r=o(" \u2014 "),eJ=a("a"),eTr=o("TFXLNetLMHeadModel"),oTr=o(" (XLNet model)"),rTr=l(),F(RT.$$.fragment),EVe=l(),cc=a("h2"),PT=a("a"),Rve=a("span"),F(I9.$$.fragment),tTr=l(),Pve=a("span"),aTr=o("TFAutoModelForImageClassification"),CVe=l(),tr=a("div"),F(N9.$$.fragment),nTr=l(),fc=a("p"),sTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),oJ=a("a"),lTr=o("from_pretrained()"),iTr=o(" class method or the "),rJ=a("a"),dTr=o("from_config()"),cTr=o(` class
method.`),fTr=l(),q9=a("p"),mTr=o("This class cannot be instantiated directly using "),Bve=a("code"),gTr=o("__init__()"),hTr=o(" (throws an error)."),pTr=l(),Rt=a("div"),F(j9.$$.fragment),_Tr=l(),Ive=a("p"),uTr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),bTr=l(),mc=a("p"),vTr=o(`Note:
Loading a model from its configuration file does `),Nve=a("strong"),FTr=o("not"),TTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tJ=a("a"),MTr=o("from_pretrained()"),ETr=o(" to load the model weights."),CTr=l(),F(BT.$$.fragment),wTr=l(),kr=a("div"),F(D9.$$.fragment),ATr=l(),qve=a("p"),LTr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),yTr=l(),ln=a("p"),xTr=o("The model class to instantiate is selected based on the "),jve=a("code"),$Tr=o("model_type"),kTr=o(` property of the config object (either
passed as an argument or loaded from `),Dve=a("code"),STr=o("pretrained_model_name_or_path"),RTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gve=a("code"),PTr=o("pretrained_model_name_or_path"),BTr=o(":"),ITr=l(),dn=a("ul"),IT=a("li"),Ove=a("strong"),NTr=o("convnext"),qTr=o(" \u2014 "),aJ=a("a"),jTr=o("TFConvNextForImageClassification"),DTr=o(" (ConvNeXT model)"),GTr=l(),NT=a("li"),Vve=a("strong"),OTr=o("data2vec-vision"),VTr=o(" \u2014 "),nJ=a("a"),XTr=o("TFData2VecVisionForImageClassification"),zTr=o(" (Data2VecVision model)"),QTr=l(),qT=a("li"),Xve=a("strong"),WTr=o("swin"),HTr=o(" \u2014 "),sJ=a("a"),UTr=o("TFSwinForImageClassification"),JTr=o(" (Swin Transformer model)"),YTr=l(),jT=a("li"),zve=a("strong"),KTr=o("vit"),ZTr=o(" \u2014 "),lJ=a("a"),eMr=o("TFViTForImageClassification"),oMr=o(" (ViT model)"),rMr=l(),F(DT.$$.fragment),wVe=l(),gc=a("h2"),GT=a("a"),Qve=a("span"),F(G9.$$.fragment),tMr=l(),Wve=a("span"),aMr=o("TFAutoModelForMaskedLM"),AVe=l(),ar=a("div"),F(O9.$$.fragment),nMr=l(),hc=a("p"),sMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),iJ=a("a"),lMr=o("from_pretrained()"),iMr=o(" class method or the "),dJ=a("a"),dMr=o("from_config()"),cMr=o(` class
method.`),fMr=l(),V9=a("p"),mMr=o("This class cannot be instantiated directly using "),Hve=a("code"),gMr=o("__init__()"),hMr=o(" (throws an error)."),pMr=l(),Pt=a("div"),F(X9.$$.fragment),_Mr=l(),Uve=a("p"),uMr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),bMr=l(),pc=a("p"),vMr=o(`Note:
Loading a model from its configuration file does `),Jve=a("strong"),FMr=o("not"),TMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cJ=a("a"),MMr=o("from_pretrained()"),EMr=o(" to load the model weights."),CMr=l(),F(OT.$$.fragment),wMr=l(),Sr=a("div"),F(z9.$$.fragment),AMr=l(),Yve=a("p"),LMr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),yMr=l(),cn=a("p"),xMr=o("The model class to instantiate is selected based on the "),Kve=a("code"),$Mr=o("model_type"),kMr=o(` property of the config object (either
passed as an argument or loaded from `),Zve=a("code"),SMr=o("pretrained_model_name_or_path"),RMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eFe=a("code"),PMr=o("pretrained_model_name_or_path"),BMr=o(":"),IMr=l(),ie=a("ul"),VT=a("li"),oFe=a("strong"),NMr=o("albert"),qMr=o(" \u2014 "),fJ=a("a"),jMr=o("TFAlbertForMaskedLM"),DMr=o(" (ALBERT model)"),GMr=l(),XT=a("li"),rFe=a("strong"),OMr=o("bert"),VMr=o(" \u2014 "),mJ=a("a"),XMr=o("TFBertForMaskedLM"),zMr=o(" (BERT model)"),QMr=l(),zT=a("li"),tFe=a("strong"),WMr=o("camembert"),HMr=o(" \u2014 "),gJ=a("a"),UMr=o("TFCamembertForMaskedLM"),JMr=o(" (CamemBERT model)"),YMr=l(),QT=a("li"),aFe=a("strong"),KMr=o("convbert"),ZMr=o(" \u2014 "),hJ=a("a"),eEr=o("TFConvBertForMaskedLM"),oEr=o(" (ConvBERT model)"),rEr=l(),WT=a("li"),nFe=a("strong"),tEr=o("deberta"),aEr=o(" \u2014 "),pJ=a("a"),nEr=o("TFDebertaForMaskedLM"),sEr=o(" (DeBERTa model)"),lEr=l(),HT=a("li"),sFe=a("strong"),iEr=o("deberta-v2"),dEr=o(" \u2014 "),_J=a("a"),cEr=o("TFDebertaV2ForMaskedLM"),fEr=o(" (DeBERTa-v2 model)"),mEr=l(),UT=a("li"),lFe=a("strong"),gEr=o("distilbert"),hEr=o(" \u2014 "),uJ=a("a"),pEr=o("TFDistilBertForMaskedLM"),_Er=o(" (DistilBERT model)"),uEr=l(),JT=a("li"),iFe=a("strong"),bEr=o("electra"),vEr=o(" \u2014 "),bJ=a("a"),FEr=o("TFElectraForMaskedLM"),TEr=o(" (ELECTRA model)"),MEr=l(),YT=a("li"),dFe=a("strong"),EEr=o("flaubert"),CEr=o(" \u2014 "),vJ=a("a"),wEr=o("TFFlaubertWithLMHeadModel"),AEr=o(" (FlauBERT model)"),LEr=l(),KT=a("li"),cFe=a("strong"),yEr=o("funnel"),xEr=o(" \u2014 "),FJ=a("a"),$Er=o("TFFunnelForMaskedLM"),kEr=o(" (Funnel Transformer model)"),SEr=l(),ZT=a("li"),fFe=a("strong"),REr=o("layoutlm"),PEr=o(" \u2014 "),TJ=a("a"),BEr=o("TFLayoutLMForMaskedLM"),IEr=o(" (LayoutLM model)"),NEr=l(),eM=a("li"),mFe=a("strong"),qEr=o("longformer"),jEr=o(" \u2014 "),MJ=a("a"),DEr=o("TFLongformerForMaskedLM"),GEr=o(" (Longformer model)"),OEr=l(),oM=a("li"),gFe=a("strong"),VEr=o("mobilebert"),XEr=o(" \u2014 "),EJ=a("a"),zEr=o("TFMobileBertForMaskedLM"),QEr=o(" (MobileBERT model)"),WEr=l(),rM=a("li"),hFe=a("strong"),HEr=o("mpnet"),UEr=o(" \u2014 "),CJ=a("a"),JEr=o("TFMPNetForMaskedLM"),YEr=o(" (MPNet model)"),KEr=l(),tM=a("li"),pFe=a("strong"),ZEr=o("rembert"),eCr=o(" \u2014 "),wJ=a("a"),oCr=o("TFRemBertForMaskedLM"),rCr=o(" (RemBERT model)"),tCr=l(),aM=a("li"),_Fe=a("strong"),aCr=o("roberta"),nCr=o(" \u2014 "),AJ=a("a"),sCr=o("TFRobertaForMaskedLM"),lCr=o(" (RoBERTa model)"),iCr=l(),nM=a("li"),uFe=a("strong"),dCr=o("roformer"),cCr=o(" \u2014 "),LJ=a("a"),fCr=o("TFRoFormerForMaskedLM"),mCr=o(" (RoFormer model)"),gCr=l(),sM=a("li"),bFe=a("strong"),hCr=o("tapas"),pCr=o(" \u2014 "),yJ=a("a"),_Cr=o("TFTapasForMaskedLM"),uCr=o(" (TAPAS model)"),bCr=l(),lM=a("li"),vFe=a("strong"),vCr=o("xlm"),FCr=o(" \u2014 "),xJ=a("a"),TCr=o("TFXLMWithLMHeadModel"),MCr=o(" (XLM model)"),ECr=l(),iM=a("li"),FFe=a("strong"),CCr=o("xlm-roberta"),wCr=o(" \u2014 "),$J=a("a"),ACr=o("TFXLMRobertaForMaskedLM"),LCr=o(" (XLM-RoBERTa model)"),yCr=l(),F(dM.$$.fragment),LVe=l(),_c=a("h2"),cM=a("a"),TFe=a("span"),F(Q9.$$.fragment),xCr=l(),MFe=a("span"),$Cr=o("TFAutoModelForSeq2SeqLM"),yVe=l(),nr=a("div"),F(W9.$$.fragment),kCr=l(),uc=a("p"),SCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),kJ=a("a"),RCr=o("from_pretrained()"),PCr=o(" class method or the "),SJ=a("a"),BCr=o("from_config()"),ICr=o(` class
method.`),NCr=l(),H9=a("p"),qCr=o("This class cannot be instantiated directly using "),EFe=a("code"),jCr=o("__init__()"),DCr=o(" (throws an error)."),GCr=l(),Bt=a("div"),F(U9.$$.fragment),OCr=l(),CFe=a("p"),VCr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),XCr=l(),bc=a("p"),zCr=o(`Note:
Loading a model from its configuration file does `),wFe=a("strong"),QCr=o("not"),WCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RJ=a("a"),HCr=o("from_pretrained()"),UCr=o(" to load the model weights."),JCr=l(),F(fM.$$.fragment),YCr=l(),Rr=a("div"),F(J9.$$.fragment),KCr=l(),AFe=a("p"),ZCr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),e0r=l(),fn=a("p"),o0r=o("The model class to instantiate is selected based on the "),LFe=a("code"),r0r=o("model_type"),t0r=o(` property of the config object (either
passed as an argument or loaded from `),yFe=a("code"),a0r=o("pretrained_model_name_or_path"),n0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xFe=a("code"),s0r=o("pretrained_model_name_or_path"),l0r=o(":"),i0r=l(),ye=a("ul"),mM=a("li"),$Fe=a("strong"),d0r=o("bart"),c0r=o(" \u2014 "),PJ=a("a"),f0r=o("TFBartForConditionalGeneration"),m0r=o(" (BART model)"),g0r=l(),gM=a("li"),kFe=a("strong"),h0r=o("blenderbot"),p0r=o(" \u2014 "),BJ=a("a"),_0r=o("TFBlenderbotForConditionalGeneration"),u0r=o(" (Blenderbot model)"),b0r=l(),hM=a("li"),SFe=a("strong"),v0r=o("blenderbot-small"),F0r=o(" \u2014 "),IJ=a("a"),T0r=o("TFBlenderbotSmallForConditionalGeneration"),M0r=o(" (BlenderbotSmall model)"),E0r=l(),pM=a("li"),RFe=a("strong"),C0r=o("encoder-decoder"),w0r=o(" \u2014 "),NJ=a("a"),A0r=o("TFEncoderDecoderModel"),L0r=o(" (Encoder decoder model)"),y0r=l(),_M=a("li"),PFe=a("strong"),x0r=o("led"),$0r=o(" \u2014 "),qJ=a("a"),k0r=o("TFLEDForConditionalGeneration"),S0r=o(" (LED model)"),R0r=l(),uM=a("li"),BFe=a("strong"),P0r=o("marian"),B0r=o(" \u2014 "),jJ=a("a"),I0r=o("TFMarianMTModel"),N0r=o(" (Marian model)"),q0r=l(),bM=a("li"),IFe=a("strong"),j0r=o("mbart"),D0r=o(" \u2014 "),DJ=a("a"),G0r=o("TFMBartForConditionalGeneration"),O0r=o(" (mBART model)"),V0r=l(),vM=a("li"),NFe=a("strong"),X0r=o("mt5"),z0r=o(" \u2014 "),GJ=a("a"),Q0r=o("TFMT5ForConditionalGeneration"),W0r=o(" (MT5 model)"),H0r=l(),FM=a("li"),qFe=a("strong"),U0r=o("pegasus"),J0r=o(" \u2014 "),OJ=a("a"),Y0r=o("TFPegasusForConditionalGeneration"),K0r=o(" (Pegasus model)"),Z0r=l(),TM=a("li"),jFe=a("strong"),ewr=o("t5"),owr=o(" \u2014 "),VJ=a("a"),rwr=o("TFT5ForConditionalGeneration"),twr=o(" (T5 model)"),awr=l(),F(MM.$$.fragment),xVe=l(),vc=a("h2"),EM=a("a"),DFe=a("span"),F(Y9.$$.fragment),nwr=l(),GFe=a("span"),swr=o("TFAutoModelForSequenceClassification"),$Ve=l(),sr=a("div"),F(K9.$$.fragment),lwr=l(),Fc=a("p"),iwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),XJ=a("a"),dwr=o("from_pretrained()"),cwr=o(" class method or the "),zJ=a("a"),fwr=o("from_config()"),mwr=o(` class
method.`),gwr=l(),Z9=a("p"),hwr=o("This class cannot be instantiated directly using "),OFe=a("code"),pwr=o("__init__()"),_wr=o(" (throws an error)."),uwr=l(),It=a("div"),F(ex.$$.fragment),bwr=l(),VFe=a("p"),vwr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Fwr=l(),Tc=a("p"),Twr=o(`Note:
Loading a model from its configuration file does `),XFe=a("strong"),Mwr=o("not"),Ewr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QJ=a("a"),Cwr=o("from_pretrained()"),wwr=o(" to load the model weights."),Awr=l(),F(CM.$$.fragment),Lwr=l(),Pr=a("div"),F(ox.$$.fragment),ywr=l(),zFe=a("p"),xwr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),$wr=l(),mn=a("p"),kwr=o("The model class to instantiate is selected based on the "),QFe=a("code"),Swr=o("model_type"),Rwr=o(` property of the config object (either
passed as an argument or loaded from `),WFe=a("code"),Pwr=o("pretrained_model_name_or_path"),Bwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HFe=a("code"),Iwr=o("pretrained_model_name_or_path"),Nwr=o(":"),qwr=l(),te=a("ul"),wM=a("li"),UFe=a("strong"),jwr=o("albert"),Dwr=o(" \u2014 "),WJ=a("a"),Gwr=o("TFAlbertForSequenceClassification"),Owr=o(" (ALBERT model)"),Vwr=l(),AM=a("li"),JFe=a("strong"),Xwr=o("bert"),zwr=o(" \u2014 "),HJ=a("a"),Qwr=o("TFBertForSequenceClassification"),Wwr=o(" (BERT model)"),Hwr=l(),LM=a("li"),YFe=a("strong"),Uwr=o("camembert"),Jwr=o(" \u2014 "),UJ=a("a"),Ywr=o("TFCamembertForSequenceClassification"),Kwr=o(" (CamemBERT model)"),Zwr=l(),yM=a("li"),KFe=a("strong"),eAr=o("convbert"),oAr=o(" \u2014 "),JJ=a("a"),rAr=o("TFConvBertForSequenceClassification"),tAr=o(" (ConvBERT model)"),aAr=l(),xM=a("li"),ZFe=a("strong"),nAr=o("ctrl"),sAr=o(" \u2014 "),YJ=a("a"),lAr=o("TFCTRLForSequenceClassification"),iAr=o(" (CTRL model)"),dAr=l(),$M=a("li"),e6e=a("strong"),cAr=o("deberta"),fAr=o(" \u2014 "),KJ=a("a"),mAr=o("TFDebertaForSequenceClassification"),gAr=o(" (DeBERTa model)"),hAr=l(),kM=a("li"),o6e=a("strong"),pAr=o("deberta-v2"),_Ar=o(" \u2014 "),ZJ=a("a"),uAr=o("TFDebertaV2ForSequenceClassification"),bAr=o(" (DeBERTa-v2 model)"),vAr=l(),SM=a("li"),r6e=a("strong"),FAr=o("distilbert"),TAr=o(" \u2014 "),eY=a("a"),MAr=o("TFDistilBertForSequenceClassification"),EAr=o(" (DistilBERT model)"),CAr=l(),RM=a("li"),t6e=a("strong"),wAr=o("electra"),AAr=o(" \u2014 "),oY=a("a"),LAr=o("TFElectraForSequenceClassification"),yAr=o(" (ELECTRA model)"),xAr=l(),PM=a("li"),a6e=a("strong"),$Ar=o("flaubert"),kAr=o(" \u2014 "),rY=a("a"),SAr=o("TFFlaubertForSequenceClassification"),RAr=o(" (FlauBERT model)"),PAr=l(),BM=a("li"),n6e=a("strong"),BAr=o("funnel"),IAr=o(" \u2014 "),tY=a("a"),NAr=o("TFFunnelForSequenceClassification"),qAr=o(" (Funnel Transformer model)"),jAr=l(),IM=a("li"),s6e=a("strong"),DAr=o("gpt2"),GAr=o(" \u2014 "),aY=a("a"),OAr=o("TFGPT2ForSequenceClassification"),VAr=o(" (OpenAI GPT-2 model)"),XAr=l(),NM=a("li"),l6e=a("strong"),zAr=o("gptj"),QAr=o(" \u2014 "),nY=a("a"),WAr=o("TFGPTJForSequenceClassification"),HAr=o(" (GPT-J model)"),UAr=l(),qM=a("li"),i6e=a("strong"),JAr=o("layoutlm"),YAr=o(" \u2014 "),sY=a("a"),KAr=o("TFLayoutLMForSequenceClassification"),ZAr=o(" (LayoutLM model)"),eLr=l(),jM=a("li"),d6e=a("strong"),oLr=o("longformer"),rLr=o(" \u2014 "),lY=a("a"),tLr=o("TFLongformerForSequenceClassification"),aLr=o(" (Longformer model)"),nLr=l(),DM=a("li"),c6e=a("strong"),sLr=o("mobilebert"),lLr=o(" \u2014 "),iY=a("a"),iLr=o("TFMobileBertForSequenceClassification"),dLr=o(" (MobileBERT model)"),cLr=l(),GM=a("li"),f6e=a("strong"),fLr=o("mpnet"),mLr=o(" \u2014 "),dY=a("a"),gLr=o("TFMPNetForSequenceClassification"),hLr=o(" (MPNet model)"),pLr=l(),OM=a("li"),m6e=a("strong"),_Lr=o("openai-gpt"),uLr=o(" \u2014 "),cY=a("a"),bLr=o("TFOpenAIGPTForSequenceClassification"),vLr=o(" (OpenAI GPT model)"),FLr=l(),VM=a("li"),g6e=a("strong"),TLr=o("rembert"),MLr=o(" \u2014 "),fY=a("a"),ELr=o("TFRemBertForSequenceClassification"),CLr=o(" (RemBERT model)"),wLr=l(),XM=a("li"),h6e=a("strong"),ALr=o("roberta"),LLr=o(" \u2014 "),mY=a("a"),yLr=o("TFRobertaForSequenceClassification"),xLr=o(" (RoBERTa model)"),$Lr=l(),zM=a("li"),p6e=a("strong"),kLr=o("roformer"),SLr=o(" \u2014 "),gY=a("a"),RLr=o("TFRoFormerForSequenceClassification"),PLr=o(" (RoFormer model)"),BLr=l(),QM=a("li"),_6e=a("strong"),ILr=o("tapas"),NLr=o(" \u2014 "),hY=a("a"),qLr=o("TFTapasForSequenceClassification"),jLr=o(" (TAPAS model)"),DLr=l(),WM=a("li"),u6e=a("strong"),GLr=o("transfo-xl"),OLr=o(" \u2014 "),pY=a("a"),VLr=o("TFTransfoXLForSequenceClassification"),XLr=o(" (Transformer-XL model)"),zLr=l(),HM=a("li"),b6e=a("strong"),QLr=o("xlm"),WLr=o(" \u2014 "),_Y=a("a"),HLr=o("TFXLMForSequenceClassification"),ULr=o(" (XLM model)"),JLr=l(),UM=a("li"),v6e=a("strong"),YLr=o("xlm-roberta"),KLr=o(" \u2014 "),uY=a("a"),ZLr=o("TFXLMRobertaForSequenceClassification"),e7r=o(" (XLM-RoBERTa model)"),o7r=l(),JM=a("li"),F6e=a("strong"),r7r=o("xlnet"),t7r=o(" \u2014 "),bY=a("a"),a7r=o("TFXLNetForSequenceClassification"),n7r=o(" (XLNet model)"),s7r=l(),F(YM.$$.fragment),kVe=l(),Mc=a("h2"),KM=a("a"),T6e=a("span"),F(rx.$$.fragment),l7r=l(),M6e=a("span"),i7r=o("TFAutoModelForMultipleChoice"),SVe=l(),lr=a("div"),F(tx.$$.fragment),d7r=l(),Ec=a("p"),c7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),vY=a("a"),f7r=o("from_pretrained()"),m7r=o(" class method or the "),FY=a("a"),g7r=o("from_config()"),h7r=o(` class
method.`),p7r=l(),ax=a("p"),_7r=o("This class cannot be instantiated directly using "),E6e=a("code"),u7r=o("__init__()"),b7r=o(" (throws an error)."),v7r=l(),Nt=a("div"),F(nx.$$.fragment),F7r=l(),C6e=a("p"),T7r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),M7r=l(),Cc=a("p"),E7r=o(`Note:
Loading a model from its configuration file does `),w6e=a("strong"),C7r=o("not"),w7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TY=a("a"),A7r=o("from_pretrained()"),L7r=o(" to load the model weights."),y7r=l(),F(ZM.$$.fragment),x7r=l(),Br=a("div"),F(sx.$$.fragment),$7r=l(),A6e=a("p"),k7r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),S7r=l(),gn=a("p"),R7r=o("The model class to instantiate is selected based on the "),L6e=a("code"),P7r=o("model_type"),B7r=o(` property of the config object (either
passed as an argument or loaded from `),y6e=a("code"),I7r=o("pretrained_model_name_or_path"),N7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x6e=a("code"),q7r=o("pretrained_model_name_or_path"),j7r=o(":"),D7r=l(),_e=a("ul"),eE=a("li"),$6e=a("strong"),G7r=o("albert"),O7r=o(" \u2014 "),MY=a("a"),V7r=o("TFAlbertForMultipleChoice"),X7r=o(" (ALBERT model)"),z7r=l(),oE=a("li"),k6e=a("strong"),Q7r=o("bert"),W7r=o(" \u2014 "),EY=a("a"),H7r=o("TFBertForMultipleChoice"),U7r=o(" (BERT model)"),J7r=l(),rE=a("li"),S6e=a("strong"),Y7r=o("camembert"),K7r=o(" \u2014 "),CY=a("a"),Z7r=o("TFCamembertForMultipleChoice"),eyr=o(" (CamemBERT model)"),oyr=l(),tE=a("li"),R6e=a("strong"),ryr=o("convbert"),tyr=o(" \u2014 "),wY=a("a"),ayr=o("TFConvBertForMultipleChoice"),nyr=o(" (ConvBERT model)"),syr=l(),aE=a("li"),P6e=a("strong"),lyr=o("distilbert"),iyr=o(" \u2014 "),AY=a("a"),dyr=o("TFDistilBertForMultipleChoice"),cyr=o(" (DistilBERT model)"),fyr=l(),nE=a("li"),B6e=a("strong"),myr=o("electra"),gyr=o(" \u2014 "),LY=a("a"),hyr=o("TFElectraForMultipleChoice"),pyr=o(" (ELECTRA model)"),_yr=l(),sE=a("li"),I6e=a("strong"),uyr=o("flaubert"),byr=o(" \u2014 "),yY=a("a"),vyr=o("TFFlaubertForMultipleChoice"),Fyr=o(" (FlauBERT model)"),Tyr=l(),lE=a("li"),N6e=a("strong"),Myr=o("funnel"),Eyr=o(" \u2014 "),xY=a("a"),Cyr=o("TFFunnelForMultipleChoice"),wyr=o(" (Funnel Transformer model)"),Ayr=l(),iE=a("li"),q6e=a("strong"),Lyr=o("longformer"),yyr=o(" \u2014 "),$Y=a("a"),xyr=o("TFLongformerForMultipleChoice"),$yr=o(" (Longformer model)"),kyr=l(),dE=a("li"),j6e=a("strong"),Syr=o("mobilebert"),Ryr=o(" \u2014 "),kY=a("a"),Pyr=o("TFMobileBertForMultipleChoice"),Byr=o(" (MobileBERT model)"),Iyr=l(),cE=a("li"),D6e=a("strong"),Nyr=o("mpnet"),qyr=o(" \u2014 "),SY=a("a"),jyr=o("TFMPNetForMultipleChoice"),Dyr=o(" (MPNet model)"),Gyr=l(),fE=a("li"),G6e=a("strong"),Oyr=o("rembert"),Vyr=o(" \u2014 "),RY=a("a"),Xyr=o("TFRemBertForMultipleChoice"),zyr=o(" (RemBERT model)"),Qyr=l(),mE=a("li"),O6e=a("strong"),Wyr=o("roberta"),Hyr=o(" \u2014 "),PY=a("a"),Uyr=o("TFRobertaForMultipleChoice"),Jyr=o(" (RoBERTa model)"),Yyr=l(),gE=a("li"),V6e=a("strong"),Kyr=o("roformer"),Zyr=o(" \u2014 "),BY=a("a"),e8r=o("TFRoFormerForMultipleChoice"),o8r=o(" (RoFormer model)"),r8r=l(),hE=a("li"),X6e=a("strong"),t8r=o("xlm"),a8r=o(" \u2014 "),IY=a("a"),n8r=o("TFXLMForMultipleChoice"),s8r=o(" (XLM model)"),l8r=l(),pE=a("li"),z6e=a("strong"),i8r=o("xlm-roberta"),d8r=o(" \u2014 "),NY=a("a"),c8r=o("TFXLMRobertaForMultipleChoice"),f8r=o(" (XLM-RoBERTa model)"),m8r=l(),_E=a("li"),Q6e=a("strong"),g8r=o("xlnet"),h8r=o(" \u2014 "),qY=a("a"),p8r=o("TFXLNetForMultipleChoice"),_8r=o(" (XLNet model)"),u8r=l(),F(uE.$$.fragment),RVe=l(),wc=a("h2"),bE=a("a"),W6e=a("span"),F(lx.$$.fragment),b8r=l(),H6e=a("span"),v8r=o("TFAutoModelForNextSentencePrediction"),PVe=l(),ir=a("div"),F(ix.$$.fragment),F8r=l(),Ac=a("p"),T8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),jY=a("a"),M8r=o("from_pretrained()"),E8r=o(" class method or the "),DY=a("a"),C8r=o("from_config()"),w8r=o(` class
method.`),A8r=l(),dx=a("p"),L8r=o("This class cannot be instantiated directly using "),U6e=a("code"),y8r=o("__init__()"),x8r=o(" (throws an error)."),$8r=l(),qt=a("div"),F(cx.$$.fragment),k8r=l(),J6e=a("p"),S8r=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),R8r=l(),Lc=a("p"),P8r=o(`Note:
Loading a model from its configuration file does `),Y6e=a("strong"),B8r=o("not"),I8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GY=a("a"),N8r=o("from_pretrained()"),q8r=o(" to load the model weights."),j8r=l(),F(vE.$$.fragment),D8r=l(),Ir=a("div"),F(fx.$$.fragment),G8r=l(),K6e=a("p"),O8r=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),V8r=l(),hn=a("p"),X8r=o("The model class to instantiate is selected based on the "),Z6e=a("code"),z8r=o("model_type"),Q8r=o(` property of the config object (either
passed as an argument or loaded from `),eTe=a("code"),W8r=o("pretrained_model_name_or_path"),H8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oTe=a("code"),U8r=o("pretrained_model_name_or_path"),J8r=o(":"),Y8r=l(),mx=a("ul"),FE=a("li"),rTe=a("strong"),K8r=o("bert"),Z8r=o(" \u2014 "),OY=a("a"),e9r=o("TFBertForNextSentencePrediction"),o9r=o(" (BERT model)"),r9r=l(),TE=a("li"),tTe=a("strong"),t9r=o("mobilebert"),a9r=o(" \u2014 "),VY=a("a"),n9r=o("TFMobileBertForNextSentencePrediction"),s9r=o(" (MobileBERT model)"),l9r=l(),F(ME.$$.fragment),BVe=l(),yc=a("h2"),EE=a("a"),aTe=a("span"),F(gx.$$.fragment),i9r=l(),nTe=a("span"),d9r=o("TFAutoModelForTableQuestionAnswering"),IVe=l(),dr=a("div"),F(hx.$$.fragment),c9r=l(),xc=a("p"),f9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),XY=a("a"),m9r=o("from_pretrained()"),g9r=o(" class method or the "),zY=a("a"),h9r=o("from_config()"),p9r=o(` class
method.`),_9r=l(),px=a("p"),u9r=o("This class cannot be instantiated directly using "),sTe=a("code"),b9r=o("__init__()"),v9r=o(" (throws an error)."),F9r=l(),jt=a("div"),F(_x.$$.fragment),T9r=l(),lTe=a("p"),M9r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),E9r=l(),$c=a("p"),C9r=o(`Note:
Loading a model from its configuration file does `),iTe=a("strong"),w9r=o("not"),A9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QY=a("a"),L9r=o("from_pretrained()"),y9r=o(" to load the model weights."),x9r=l(),F(CE.$$.fragment),$9r=l(),Nr=a("div"),F(ux.$$.fragment),k9r=l(),dTe=a("p"),S9r=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),R9r=l(),pn=a("p"),P9r=o("The model class to instantiate is selected based on the "),cTe=a("code"),B9r=o("model_type"),I9r=o(` property of the config object (either
passed as an argument or loaded from `),fTe=a("code"),N9r=o("pretrained_model_name_or_path"),q9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mTe=a("code"),j9r=o("pretrained_model_name_or_path"),D9r=o(":"),G9r=l(),gTe=a("ul"),wE=a("li"),hTe=a("strong"),O9r=o("tapas"),V9r=o(" \u2014 "),WY=a("a"),X9r=o("TFTapasForQuestionAnswering"),z9r=o(" (TAPAS model)"),Q9r=l(),F(AE.$$.fragment),NVe=l(),kc=a("h2"),LE=a("a"),pTe=a("span"),F(bx.$$.fragment),W9r=l(),_Te=a("span"),H9r=o("TFAutoModelForTokenClassification"),qVe=l(),cr=a("div"),F(vx.$$.fragment),U9r=l(),Sc=a("p"),J9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),HY=a("a"),Y9r=o("from_pretrained()"),K9r=o(" class method or the "),UY=a("a"),Z9r=o("from_config()"),exr=o(` class
method.`),oxr=l(),Fx=a("p"),rxr=o("This class cannot be instantiated directly using "),uTe=a("code"),txr=o("__init__()"),axr=o(" (throws an error)."),nxr=l(),Dt=a("div"),F(Tx.$$.fragment),sxr=l(),bTe=a("p"),lxr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),ixr=l(),Rc=a("p"),dxr=o(`Note:
Loading a model from its configuration file does `),vTe=a("strong"),cxr=o("not"),fxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JY=a("a"),mxr=o("from_pretrained()"),gxr=o(" to load the model weights."),hxr=l(),F(yE.$$.fragment),pxr=l(),qr=a("div"),F(Mx.$$.fragment),_xr=l(),FTe=a("p"),uxr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),bxr=l(),_n=a("p"),vxr=o("The model class to instantiate is selected based on the "),TTe=a("code"),Fxr=o("model_type"),Txr=o(` property of the config object (either
passed as an argument or loaded from `),MTe=a("code"),Mxr=o("pretrained_model_name_or_path"),Exr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ETe=a("code"),Cxr=o("pretrained_model_name_or_path"),wxr=o(":"),Axr=l(),de=a("ul"),xE=a("li"),CTe=a("strong"),Lxr=o("albert"),yxr=o(" \u2014 "),YY=a("a"),xxr=o("TFAlbertForTokenClassification"),$xr=o(" (ALBERT model)"),kxr=l(),$E=a("li"),wTe=a("strong"),Sxr=o("bert"),Rxr=o(" \u2014 "),KY=a("a"),Pxr=o("TFBertForTokenClassification"),Bxr=o(" (BERT model)"),Ixr=l(),kE=a("li"),ATe=a("strong"),Nxr=o("camembert"),qxr=o(" \u2014 "),ZY=a("a"),jxr=o("TFCamembertForTokenClassification"),Dxr=o(" (CamemBERT model)"),Gxr=l(),SE=a("li"),LTe=a("strong"),Oxr=o("convbert"),Vxr=o(" \u2014 "),eK=a("a"),Xxr=o("TFConvBertForTokenClassification"),zxr=o(" (ConvBERT model)"),Qxr=l(),RE=a("li"),yTe=a("strong"),Wxr=o("deberta"),Hxr=o(" \u2014 "),oK=a("a"),Uxr=o("TFDebertaForTokenClassification"),Jxr=o(" (DeBERTa model)"),Yxr=l(),PE=a("li"),xTe=a("strong"),Kxr=o("deberta-v2"),Zxr=o(" \u2014 "),rK=a("a"),e$r=o("TFDebertaV2ForTokenClassification"),o$r=o(" (DeBERTa-v2 model)"),r$r=l(),BE=a("li"),$Te=a("strong"),t$r=o("distilbert"),a$r=o(" \u2014 "),tK=a("a"),n$r=o("TFDistilBertForTokenClassification"),s$r=o(" (DistilBERT model)"),l$r=l(),IE=a("li"),kTe=a("strong"),i$r=o("electra"),d$r=o(" \u2014 "),aK=a("a"),c$r=o("TFElectraForTokenClassification"),f$r=o(" (ELECTRA model)"),m$r=l(),NE=a("li"),STe=a("strong"),g$r=o("flaubert"),h$r=o(" \u2014 "),nK=a("a"),p$r=o("TFFlaubertForTokenClassification"),_$r=o(" (FlauBERT model)"),u$r=l(),qE=a("li"),RTe=a("strong"),b$r=o("funnel"),v$r=o(" \u2014 "),sK=a("a"),F$r=o("TFFunnelForTokenClassification"),T$r=o(" (Funnel Transformer model)"),M$r=l(),jE=a("li"),PTe=a("strong"),E$r=o("layoutlm"),C$r=o(" \u2014 "),lK=a("a"),w$r=o("TFLayoutLMForTokenClassification"),A$r=o(" (LayoutLM model)"),L$r=l(),DE=a("li"),BTe=a("strong"),y$r=o("longformer"),x$r=o(" \u2014 "),iK=a("a"),$$r=o("TFLongformerForTokenClassification"),k$r=o(" (Longformer model)"),S$r=l(),GE=a("li"),ITe=a("strong"),R$r=o("mobilebert"),P$r=o(" \u2014 "),dK=a("a"),B$r=o("TFMobileBertForTokenClassification"),I$r=o(" (MobileBERT model)"),N$r=l(),OE=a("li"),NTe=a("strong"),q$r=o("mpnet"),j$r=o(" \u2014 "),cK=a("a"),D$r=o("TFMPNetForTokenClassification"),G$r=o(" (MPNet model)"),O$r=l(),VE=a("li"),qTe=a("strong"),V$r=o("rembert"),X$r=o(" \u2014 "),fK=a("a"),z$r=o("TFRemBertForTokenClassification"),Q$r=o(" (RemBERT model)"),W$r=l(),XE=a("li"),jTe=a("strong"),H$r=o("roberta"),U$r=o(" \u2014 "),mK=a("a"),J$r=o("TFRobertaForTokenClassification"),Y$r=o(" (RoBERTa model)"),K$r=l(),zE=a("li"),DTe=a("strong"),Z$r=o("roformer"),ekr=o(" \u2014 "),gK=a("a"),okr=o("TFRoFormerForTokenClassification"),rkr=o(" (RoFormer model)"),tkr=l(),QE=a("li"),GTe=a("strong"),akr=o("xlm"),nkr=o(" \u2014 "),hK=a("a"),skr=o("TFXLMForTokenClassification"),lkr=o(" (XLM model)"),ikr=l(),WE=a("li"),OTe=a("strong"),dkr=o("xlm-roberta"),ckr=o(" \u2014 "),pK=a("a"),fkr=o("TFXLMRobertaForTokenClassification"),mkr=o(" (XLM-RoBERTa model)"),gkr=l(),HE=a("li"),VTe=a("strong"),hkr=o("xlnet"),pkr=o(" \u2014 "),_K=a("a"),_kr=o("TFXLNetForTokenClassification"),ukr=o(" (XLNet model)"),bkr=l(),F(UE.$$.fragment),jVe=l(),Pc=a("h2"),JE=a("a"),XTe=a("span"),F(Ex.$$.fragment),vkr=l(),zTe=a("span"),Fkr=o("TFAutoModelForQuestionAnswering"),DVe=l(),fr=a("div"),F(Cx.$$.fragment),Tkr=l(),Bc=a("p"),Mkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),uK=a("a"),Ekr=o("from_pretrained()"),Ckr=o(" class method or the "),bK=a("a"),wkr=o("from_config()"),Akr=o(` class
method.`),Lkr=l(),wx=a("p"),ykr=o("This class cannot be instantiated directly using "),QTe=a("code"),xkr=o("__init__()"),$kr=o(" (throws an error)."),kkr=l(),Gt=a("div"),F(Ax.$$.fragment),Skr=l(),WTe=a("p"),Rkr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Pkr=l(),Ic=a("p"),Bkr=o(`Note:
Loading a model from its configuration file does `),HTe=a("strong"),Ikr=o("not"),Nkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vK=a("a"),qkr=o("from_pretrained()"),jkr=o(" to load the model weights."),Dkr=l(),F(YE.$$.fragment),Gkr=l(),jr=a("div"),F(Lx.$$.fragment),Okr=l(),UTe=a("p"),Vkr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Xkr=l(),un=a("p"),zkr=o("The model class to instantiate is selected based on the "),JTe=a("code"),Qkr=o("model_type"),Wkr=o(` property of the config object (either
passed as an argument or loaded from `),YTe=a("code"),Hkr=o("pretrained_model_name_or_path"),Ukr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KTe=a("code"),Jkr=o("pretrained_model_name_or_path"),Ykr=o(":"),Kkr=l(),ce=a("ul"),KE=a("li"),ZTe=a("strong"),Zkr=o("albert"),eSr=o(" \u2014 "),FK=a("a"),oSr=o("TFAlbertForQuestionAnswering"),rSr=o(" (ALBERT model)"),tSr=l(),ZE=a("li"),eMe=a("strong"),aSr=o("bert"),nSr=o(" \u2014 "),TK=a("a"),sSr=o("TFBertForQuestionAnswering"),lSr=o(" (BERT model)"),iSr=l(),eC=a("li"),oMe=a("strong"),dSr=o("camembert"),cSr=o(" \u2014 "),MK=a("a"),fSr=o("TFCamembertForQuestionAnswering"),mSr=o(" (CamemBERT model)"),gSr=l(),oC=a("li"),rMe=a("strong"),hSr=o("convbert"),pSr=o(" \u2014 "),EK=a("a"),_Sr=o("TFConvBertForQuestionAnswering"),uSr=o(" (ConvBERT model)"),bSr=l(),rC=a("li"),tMe=a("strong"),vSr=o("deberta"),FSr=o(" \u2014 "),CK=a("a"),TSr=o("TFDebertaForQuestionAnswering"),MSr=o(" (DeBERTa model)"),ESr=l(),tC=a("li"),aMe=a("strong"),CSr=o("deberta-v2"),wSr=o(" \u2014 "),wK=a("a"),ASr=o("TFDebertaV2ForQuestionAnswering"),LSr=o(" (DeBERTa-v2 model)"),ySr=l(),aC=a("li"),nMe=a("strong"),xSr=o("distilbert"),$Sr=o(" \u2014 "),AK=a("a"),kSr=o("TFDistilBertForQuestionAnswering"),SSr=o(" (DistilBERT model)"),RSr=l(),nC=a("li"),sMe=a("strong"),PSr=o("electra"),BSr=o(" \u2014 "),LK=a("a"),ISr=o("TFElectraForQuestionAnswering"),NSr=o(" (ELECTRA model)"),qSr=l(),sC=a("li"),lMe=a("strong"),jSr=o("flaubert"),DSr=o(" \u2014 "),yK=a("a"),GSr=o("TFFlaubertForQuestionAnsweringSimple"),OSr=o(" (FlauBERT model)"),VSr=l(),lC=a("li"),iMe=a("strong"),XSr=o("funnel"),zSr=o(" \u2014 "),xK=a("a"),QSr=o("TFFunnelForQuestionAnswering"),WSr=o(" (Funnel Transformer model)"),HSr=l(),iC=a("li"),dMe=a("strong"),USr=o("gptj"),JSr=o(" \u2014 "),$K=a("a"),YSr=o("TFGPTJForQuestionAnswering"),KSr=o(" (GPT-J model)"),ZSr=l(),dC=a("li"),cMe=a("strong"),eRr=o("longformer"),oRr=o(" \u2014 "),kK=a("a"),rRr=o("TFLongformerForQuestionAnswering"),tRr=o(" (Longformer model)"),aRr=l(),cC=a("li"),fMe=a("strong"),nRr=o("mobilebert"),sRr=o(" \u2014 "),SK=a("a"),lRr=o("TFMobileBertForQuestionAnswering"),iRr=o(" (MobileBERT model)"),dRr=l(),fC=a("li"),mMe=a("strong"),cRr=o("mpnet"),fRr=o(" \u2014 "),RK=a("a"),mRr=o("TFMPNetForQuestionAnswering"),gRr=o(" (MPNet model)"),hRr=l(),mC=a("li"),gMe=a("strong"),pRr=o("rembert"),_Rr=o(" \u2014 "),PK=a("a"),uRr=o("TFRemBertForQuestionAnswering"),bRr=o(" (RemBERT model)"),vRr=l(),gC=a("li"),hMe=a("strong"),FRr=o("roberta"),TRr=o(" \u2014 "),BK=a("a"),MRr=o("TFRobertaForQuestionAnswering"),ERr=o(" (RoBERTa model)"),CRr=l(),hC=a("li"),pMe=a("strong"),wRr=o("roformer"),ARr=o(" \u2014 "),IK=a("a"),LRr=o("TFRoFormerForQuestionAnswering"),yRr=o(" (RoFormer model)"),xRr=l(),pC=a("li"),_Me=a("strong"),$Rr=o("xlm"),kRr=o(" \u2014 "),NK=a("a"),SRr=o("TFXLMForQuestionAnsweringSimple"),RRr=o(" (XLM model)"),PRr=l(),_C=a("li"),uMe=a("strong"),BRr=o("xlm-roberta"),IRr=o(" \u2014 "),qK=a("a"),NRr=o("TFXLMRobertaForQuestionAnswering"),qRr=o(" (XLM-RoBERTa model)"),jRr=l(),uC=a("li"),bMe=a("strong"),DRr=o("xlnet"),GRr=o(" \u2014 "),jK=a("a"),ORr=o("TFXLNetForQuestionAnsweringSimple"),VRr=o(" (XLNet model)"),XRr=l(),F(bC.$$.fragment),GVe=l(),Nc=a("h2"),vC=a("a"),vMe=a("span"),F(yx.$$.fragment),zRr=l(),FMe=a("span"),QRr=o("TFAutoModelForVision2Seq"),OVe=l(),mr=a("div"),F(xx.$$.fragment),WRr=l(),qc=a("p"),HRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),DK=a("a"),URr=o("from_pretrained()"),JRr=o(" class method or the "),GK=a("a"),YRr=o("from_config()"),KRr=o(` class
method.`),ZRr=l(),$x=a("p"),ePr=o("This class cannot be instantiated directly using "),TMe=a("code"),oPr=o("__init__()"),rPr=o(" (throws an error)."),tPr=l(),Ot=a("div"),F(kx.$$.fragment),aPr=l(),MMe=a("p"),nPr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),sPr=l(),jc=a("p"),lPr=o(`Note:
Loading a model from its configuration file does `),EMe=a("strong"),iPr=o("not"),dPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OK=a("a"),cPr=o("from_pretrained()"),fPr=o(" to load the model weights."),mPr=l(),F(FC.$$.fragment),gPr=l(),Dr=a("div"),F(Sx.$$.fragment),hPr=l(),CMe=a("p"),pPr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),_Pr=l(),bn=a("p"),uPr=o("The model class to instantiate is selected based on the "),wMe=a("code"),bPr=o("model_type"),vPr=o(` property of the config object (either
passed as an argument or loaded from `),AMe=a("code"),FPr=o("pretrained_model_name_or_path"),TPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LMe=a("code"),MPr=o("pretrained_model_name_or_path"),EPr=o(":"),CPr=l(),yMe=a("ul"),TC=a("li"),xMe=a("strong"),wPr=o("vision-encoder-decoder"),APr=o(" \u2014 "),VK=a("a"),LPr=o("TFVisionEncoderDecoderModel"),yPr=o(" (Vision Encoder decoder model)"),xPr=l(),F(MC.$$.fragment),VVe=l(),Dc=a("h2"),EC=a("a"),$Me=a("span"),F(Rx.$$.fragment),$Pr=l(),kMe=a("span"),kPr=o("TFAutoModelForSpeechSeq2Seq"),XVe=l(),gr=a("div"),F(Px.$$.fragment),SPr=l(),Gc=a("p"),RPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),XK=a("a"),PPr=o("from_pretrained()"),BPr=o(" class method or the "),zK=a("a"),IPr=o("from_config()"),NPr=o(` class
method.`),qPr=l(),Bx=a("p"),jPr=o("This class cannot be instantiated directly using "),SMe=a("code"),DPr=o("__init__()"),GPr=o(" (throws an error)."),OPr=l(),Vt=a("div"),F(Ix.$$.fragment),VPr=l(),RMe=a("p"),XPr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),zPr=l(),Oc=a("p"),QPr=o(`Note:
Loading a model from its configuration file does `),PMe=a("strong"),WPr=o("not"),HPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QK=a("a"),UPr=o("from_pretrained()"),JPr=o(" to load the model weights."),YPr=l(),F(CC.$$.fragment),KPr=l(),Gr=a("div"),F(Nx.$$.fragment),ZPr=l(),BMe=a("p"),eBr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),oBr=l(),vn=a("p"),rBr=o("The model class to instantiate is selected based on the "),IMe=a("code"),tBr=o("model_type"),aBr=o(` property of the config object (either
passed as an argument or loaded from `),NMe=a("code"),nBr=o("pretrained_model_name_or_path"),sBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qMe=a("code"),lBr=o("pretrained_model_name_or_path"),iBr=o(":"),dBr=l(),jMe=a("ul"),wC=a("li"),DMe=a("strong"),cBr=o("speech_to_text"),fBr=o(" \u2014 "),WK=a("a"),mBr=o("TFSpeech2TextForConditionalGeneration"),gBr=o(" (Speech2Text model)"),hBr=l(),F(AC.$$.fragment),zVe=l(),Vc=a("h2"),LC=a("a"),GMe=a("span"),F(qx.$$.fragment),pBr=l(),OMe=a("span"),_Br=o("FlaxAutoModel"),QVe=l(),hr=a("div"),F(jx.$$.fragment),uBr=l(),Xc=a("p"),bBr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),HK=a("a"),vBr=o("from_pretrained()"),FBr=o(" class method or the "),UK=a("a"),TBr=o("from_config()"),MBr=o(` class
method.`),EBr=l(),Dx=a("p"),CBr=o("This class cannot be instantiated directly using "),VMe=a("code"),wBr=o("__init__()"),ABr=o(" (throws an error)."),LBr=l(),Xt=a("div"),F(Gx.$$.fragment),yBr=l(),XMe=a("p"),xBr=o("Instantiates one of the base model classes of the library from a configuration."),$Br=l(),zc=a("p"),kBr=o(`Note:
Loading a model from its configuration file does `),zMe=a("strong"),SBr=o("not"),RBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JK=a("a"),PBr=o("from_pretrained()"),BBr=o(" to load the model weights."),IBr=l(),F(yC.$$.fragment),NBr=l(),Or=a("div"),F(Ox.$$.fragment),qBr=l(),QMe=a("p"),jBr=o("Instantiate one of the base model classes of the library from a pretrained model."),DBr=l(),Fn=a("p"),GBr=o("The model class to instantiate is selected based on the "),WMe=a("code"),OBr=o("model_type"),VBr=o(` property of the config object (either
passed as an argument or loaded from `),HMe=a("code"),XBr=o("pretrained_model_name_or_path"),zBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UMe=a("code"),QBr=o("pretrained_model_name_or_path"),WBr=o(":"),HBr=l(),oe=a("ul"),xC=a("li"),JMe=a("strong"),UBr=o("albert"),JBr=o(" \u2014 "),YK=a("a"),YBr=o("FlaxAlbertModel"),KBr=o(" (ALBERT model)"),ZBr=l(),$C=a("li"),YMe=a("strong"),eIr=o("bart"),oIr=o(" \u2014 "),KK=a("a"),rIr=o("FlaxBartModel"),tIr=o(" (BART model)"),aIr=l(),kC=a("li"),KMe=a("strong"),nIr=o("beit"),sIr=o(" \u2014 "),ZK=a("a"),lIr=o("FlaxBeitModel"),iIr=o(" (BEiT model)"),dIr=l(),SC=a("li"),ZMe=a("strong"),cIr=o("bert"),fIr=o(" \u2014 "),eZ=a("a"),mIr=o("FlaxBertModel"),gIr=o(" (BERT model)"),hIr=l(),RC=a("li"),eEe=a("strong"),pIr=o("big_bird"),_Ir=o(" \u2014 "),oZ=a("a"),uIr=o("FlaxBigBirdModel"),bIr=o(" (BigBird model)"),vIr=l(),PC=a("li"),oEe=a("strong"),FIr=o("blenderbot"),TIr=o(" \u2014 "),rZ=a("a"),MIr=o("FlaxBlenderbotModel"),EIr=o(" (Blenderbot model)"),CIr=l(),BC=a("li"),rEe=a("strong"),wIr=o("blenderbot-small"),AIr=o(" \u2014 "),tZ=a("a"),LIr=o("FlaxBlenderbotSmallModel"),yIr=o(" (BlenderbotSmall model)"),xIr=l(),IC=a("li"),tEe=a("strong"),$Ir=o("clip"),kIr=o(" \u2014 "),aZ=a("a"),SIr=o("FlaxCLIPModel"),RIr=o(" (CLIP model)"),PIr=l(),NC=a("li"),aEe=a("strong"),BIr=o("distilbert"),IIr=o(" \u2014 "),nZ=a("a"),NIr=o("FlaxDistilBertModel"),qIr=o(" (DistilBERT model)"),jIr=l(),qC=a("li"),nEe=a("strong"),DIr=o("electra"),GIr=o(" \u2014 "),sZ=a("a"),OIr=o("FlaxElectraModel"),VIr=o(" (ELECTRA model)"),XIr=l(),jC=a("li"),sEe=a("strong"),zIr=o("gpt2"),QIr=o(" \u2014 "),lZ=a("a"),WIr=o("FlaxGPT2Model"),HIr=o(" (OpenAI GPT-2 model)"),UIr=l(),DC=a("li"),lEe=a("strong"),JIr=o("gpt_neo"),YIr=o(" \u2014 "),iZ=a("a"),KIr=o("FlaxGPTNeoModel"),ZIr=o(" (GPT Neo model)"),eNr=l(),GC=a("li"),iEe=a("strong"),oNr=o("gptj"),rNr=o(" \u2014 "),dZ=a("a"),tNr=o("FlaxGPTJModel"),aNr=o(" (GPT-J model)"),nNr=l(),OC=a("li"),dEe=a("strong"),sNr=o("longt5"),lNr=o(" \u2014 "),cZ=a("a"),iNr=o("FlaxLongT5Model"),dNr=o(" (LongT5 model)"),cNr=l(),VC=a("li"),cEe=a("strong"),fNr=o("marian"),mNr=o(" \u2014 "),fZ=a("a"),gNr=o("FlaxMarianModel"),hNr=o(" (Marian model)"),pNr=l(),XC=a("li"),fEe=a("strong"),_Nr=o("mbart"),uNr=o(" \u2014 "),mZ=a("a"),bNr=o("FlaxMBartModel"),vNr=o(" (mBART model)"),FNr=l(),zC=a("li"),mEe=a("strong"),TNr=o("mt5"),MNr=o(" \u2014 "),gZ=a("a"),ENr=o("FlaxMT5Model"),CNr=o(" (MT5 model)"),wNr=l(),QC=a("li"),gEe=a("strong"),ANr=o("opt"),LNr=o(" \u2014 "),hZ=a("a"),yNr=o("FlaxOPTModel"),xNr=o(" (OPT model)"),$Nr=l(),WC=a("li"),hEe=a("strong"),kNr=o("pegasus"),SNr=o(" \u2014 "),pZ=a("a"),RNr=o("FlaxPegasusModel"),PNr=o(" (Pegasus model)"),BNr=l(),HC=a("li"),pEe=a("strong"),INr=o("roberta"),NNr=o(" \u2014 "),_Z=a("a"),qNr=o("FlaxRobertaModel"),jNr=o(" (RoBERTa model)"),DNr=l(),UC=a("li"),_Ee=a("strong"),GNr=o("roformer"),ONr=o(" \u2014 "),uZ=a("a"),VNr=o("FlaxRoFormerModel"),XNr=o(" (RoFormer model)"),zNr=l(),JC=a("li"),uEe=a("strong"),QNr=o("t5"),WNr=o(" \u2014 "),bZ=a("a"),HNr=o("FlaxT5Model"),UNr=o(" (T5 model)"),JNr=l(),YC=a("li"),bEe=a("strong"),YNr=o("vision-text-dual-encoder"),KNr=o(" \u2014 "),vZ=a("a"),ZNr=o("FlaxVisionTextDualEncoderModel"),eqr=o(" (VisionTextDualEncoder model)"),oqr=l(),KC=a("li"),vEe=a("strong"),rqr=o("vit"),tqr=o(" \u2014 "),FZ=a("a"),aqr=o("FlaxViTModel"),nqr=o(" (ViT model)"),sqr=l(),ZC=a("li"),FEe=a("strong"),lqr=o("wav2vec2"),iqr=o(" \u2014 "),TZ=a("a"),dqr=o("FlaxWav2Vec2Model"),cqr=o(" (Wav2Vec2 model)"),fqr=l(),e0=a("li"),TEe=a("strong"),mqr=o("xglm"),gqr=o(" \u2014 "),MZ=a("a"),hqr=o("FlaxXGLMModel"),pqr=o(" (XGLM model)"),_qr=l(),o0=a("li"),MEe=a("strong"),uqr=o("xlm-roberta"),bqr=o(" \u2014 "),EZ=a("a"),vqr=o("FlaxXLMRobertaModel"),Fqr=o(" (XLM-RoBERTa model)"),Tqr=l(),F(r0.$$.fragment),WVe=l(),Qc=a("h2"),t0=a("a"),EEe=a("span"),F(Vx.$$.fragment),Mqr=l(),CEe=a("span"),Eqr=o("FlaxAutoModelForCausalLM"),HVe=l(),pr=a("div"),F(Xx.$$.fragment),Cqr=l(),Wc=a("p"),wqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),CZ=a("a"),Aqr=o("from_pretrained()"),Lqr=o(" class method or the "),wZ=a("a"),yqr=o("from_config()"),xqr=o(` class
method.`),$qr=l(),zx=a("p"),kqr=o("This class cannot be instantiated directly using "),wEe=a("code"),Sqr=o("__init__()"),Rqr=o(" (throws an error)."),Pqr=l(),zt=a("div"),F(Qx.$$.fragment),Bqr=l(),AEe=a("p"),Iqr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Nqr=l(),Hc=a("p"),qqr=o(`Note:
Loading a model from its configuration file does `),LEe=a("strong"),jqr=o("not"),Dqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AZ=a("a"),Gqr=o("from_pretrained()"),Oqr=o(" to load the model weights."),Vqr=l(),F(a0.$$.fragment),Xqr=l(),Vr=a("div"),F(Wx.$$.fragment),zqr=l(),yEe=a("p"),Qqr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Wqr=l(),Tn=a("p"),Hqr=o("The model class to instantiate is selected based on the "),xEe=a("code"),Uqr=o("model_type"),Jqr=o(` property of the config object (either
passed as an argument or loaded from `),$Ee=a("code"),Yqr=o("pretrained_model_name_or_path"),Kqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kEe=a("code"),Zqr=o("pretrained_model_name_or_path"),ejr=o(":"),ojr=l(),xe=a("ul"),n0=a("li"),SEe=a("strong"),rjr=o("bart"),tjr=o(" \u2014 "),LZ=a("a"),ajr=o("FlaxBartForCausalLM"),njr=o(" (BART model)"),sjr=l(),s0=a("li"),REe=a("strong"),ljr=o("bert"),ijr=o(" \u2014 "),yZ=a("a"),djr=o("FlaxBertForCausalLM"),cjr=o(" (BERT model)"),fjr=l(),l0=a("li"),PEe=a("strong"),mjr=o("big_bird"),gjr=o(" \u2014 "),xZ=a("a"),hjr=o("FlaxBigBirdForCausalLM"),pjr=o(" (BigBird model)"),_jr=l(),i0=a("li"),BEe=a("strong"),ujr=o("electra"),bjr=o(" \u2014 "),$Z=a("a"),vjr=o("FlaxElectraForCausalLM"),Fjr=o(" (ELECTRA model)"),Tjr=l(),d0=a("li"),IEe=a("strong"),Mjr=o("gpt2"),Ejr=o(" \u2014 "),kZ=a("a"),Cjr=o("FlaxGPT2LMHeadModel"),wjr=o(" (OpenAI GPT-2 model)"),Ajr=l(),c0=a("li"),NEe=a("strong"),Ljr=o("gpt_neo"),yjr=o(" \u2014 "),SZ=a("a"),xjr=o("FlaxGPTNeoForCausalLM"),$jr=o(" (GPT Neo model)"),kjr=l(),f0=a("li"),qEe=a("strong"),Sjr=o("gptj"),Rjr=o(" \u2014 "),RZ=a("a"),Pjr=o("FlaxGPTJForCausalLM"),Bjr=o(" (GPT-J model)"),Ijr=l(),m0=a("li"),jEe=a("strong"),Njr=o("opt"),qjr=o(" \u2014 "),PZ=a("a"),jjr=o("FlaxOPTForCausalLM"),Djr=o(" (OPT model)"),Gjr=l(),g0=a("li"),DEe=a("strong"),Ojr=o("roberta"),Vjr=o(" \u2014 "),BZ=a("a"),Xjr=o("FlaxRobertaForCausalLM"),zjr=o(" (RoBERTa model)"),Qjr=l(),h0=a("li"),GEe=a("strong"),Wjr=o("xglm"),Hjr=o(" \u2014 "),IZ=a("a"),Ujr=o("FlaxXGLMForCausalLM"),Jjr=o(" (XGLM model)"),Yjr=l(),F(p0.$$.fragment),UVe=l(),Uc=a("h2"),_0=a("a"),OEe=a("span"),F(Hx.$$.fragment),Kjr=l(),VEe=a("span"),Zjr=o("FlaxAutoModelForPreTraining"),JVe=l(),_r=a("div"),F(Ux.$$.fragment),eDr=l(),Jc=a("p"),oDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),NZ=a("a"),rDr=o("from_pretrained()"),tDr=o(" class method or the "),qZ=a("a"),aDr=o("from_config()"),nDr=o(` class
method.`),sDr=l(),Jx=a("p"),lDr=o("This class cannot be instantiated directly using "),XEe=a("code"),iDr=o("__init__()"),dDr=o(" (throws an error)."),cDr=l(),Qt=a("div"),F(Yx.$$.fragment),fDr=l(),zEe=a("p"),mDr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),gDr=l(),Yc=a("p"),hDr=o(`Note:
Loading a model from its configuration file does `),QEe=a("strong"),pDr=o("not"),_Dr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jZ=a("a"),uDr=o("from_pretrained()"),bDr=o(" to load the model weights."),vDr=l(),F(u0.$$.fragment),FDr=l(),Xr=a("div"),F(Kx.$$.fragment),TDr=l(),WEe=a("p"),MDr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),EDr=l(),Mn=a("p"),CDr=o("The model class to instantiate is selected based on the "),HEe=a("code"),wDr=o("model_type"),ADr=o(` property of the config object (either
passed as an argument or loaded from `),UEe=a("code"),LDr=o("pretrained_model_name_or_path"),yDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JEe=a("code"),xDr=o("pretrained_model_name_or_path"),$Dr=o(":"),kDr=l(),Ee=a("ul"),b0=a("li"),YEe=a("strong"),SDr=o("albert"),RDr=o(" \u2014 "),DZ=a("a"),PDr=o("FlaxAlbertForPreTraining"),BDr=o(" (ALBERT model)"),IDr=l(),v0=a("li"),KEe=a("strong"),NDr=o("bart"),qDr=o(" \u2014 "),GZ=a("a"),jDr=o("FlaxBartForConditionalGeneration"),DDr=o(" (BART model)"),GDr=l(),F0=a("li"),ZEe=a("strong"),ODr=o("bert"),VDr=o(" \u2014 "),OZ=a("a"),XDr=o("FlaxBertForPreTraining"),zDr=o(" (BERT model)"),QDr=l(),T0=a("li"),eCe=a("strong"),WDr=o("big_bird"),HDr=o(" \u2014 "),VZ=a("a"),UDr=o("FlaxBigBirdForPreTraining"),JDr=o(" (BigBird model)"),YDr=l(),M0=a("li"),oCe=a("strong"),KDr=o("electra"),ZDr=o(" \u2014 "),XZ=a("a"),eGr=o("FlaxElectraForPreTraining"),oGr=o(" (ELECTRA model)"),rGr=l(),E0=a("li"),rCe=a("strong"),tGr=o("longt5"),aGr=o(" \u2014 "),zZ=a("a"),nGr=o("FlaxLongT5ForConditionalGeneration"),sGr=o(" (LongT5 model)"),lGr=l(),C0=a("li"),tCe=a("strong"),iGr=o("mbart"),dGr=o(" \u2014 "),QZ=a("a"),cGr=o("FlaxMBartForConditionalGeneration"),fGr=o(" (mBART model)"),mGr=l(),w0=a("li"),aCe=a("strong"),gGr=o("mt5"),hGr=o(" \u2014 "),WZ=a("a"),pGr=o("FlaxMT5ForConditionalGeneration"),_Gr=o(" (MT5 model)"),uGr=l(),A0=a("li"),nCe=a("strong"),bGr=o("roberta"),vGr=o(" \u2014 "),HZ=a("a"),FGr=o("FlaxRobertaForMaskedLM"),TGr=o(" (RoBERTa model)"),MGr=l(),L0=a("li"),sCe=a("strong"),EGr=o("roformer"),CGr=o(" \u2014 "),UZ=a("a"),wGr=o("FlaxRoFormerForMaskedLM"),AGr=o(" (RoFormer model)"),LGr=l(),y0=a("li"),lCe=a("strong"),yGr=o("t5"),xGr=o(" \u2014 "),JZ=a("a"),$Gr=o("FlaxT5ForConditionalGeneration"),kGr=o(" (T5 model)"),SGr=l(),x0=a("li"),iCe=a("strong"),RGr=o("wav2vec2"),PGr=o(" \u2014 "),YZ=a("a"),BGr=o("FlaxWav2Vec2ForPreTraining"),IGr=o(" (Wav2Vec2 model)"),NGr=l(),$0=a("li"),dCe=a("strong"),qGr=o("xlm-roberta"),jGr=o(" \u2014 "),KZ=a("a"),DGr=o("FlaxXLMRobertaForMaskedLM"),GGr=o(" (XLM-RoBERTa model)"),OGr=l(),F(k0.$$.fragment),YVe=l(),Kc=a("h2"),S0=a("a"),cCe=a("span"),F(Zx.$$.fragment),VGr=l(),fCe=a("span"),XGr=o("FlaxAutoModelForMaskedLM"),KVe=l(),ur=a("div"),F(e$.$$.fragment),zGr=l(),Zc=a("p"),QGr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),ZZ=a("a"),WGr=o("from_pretrained()"),HGr=o(" class method or the "),eee=a("a"),UGr=o("from_config()"),JGr=o(` class
method.`),YGr=l(),o$=a("p"),KGr=o("This class cannot be instantiated directly using "),mCe=a("code"),ZGr=o("__init__()"),eOr=o(" (throws an error)."),oOr=l(),Wt=a("div"),F(r$.$$.fragment),rOr=l(),gCe=a("p"),tOr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),aOr=l(),ef=a("p"),nOr=o(`Note:
Loading a model from its configuration file does `),hCe=a("strong"),sOr=o("not"),lOr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oee=a("a"),iOr=o("from_pretrained()"),dOr=o(" to load the model weights."),cOr=l(),F(R0.$$.fragment),fOr=l(),zr=a("div"),F(t$.$$.fragment),mOr=l(),pCe=a("p"),gOr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),hOr=l(),En=a("p"),pOr=o("The model class to instantiate is selected based on the "),_Ce=a("code"),_Or=o("model_type"),uOr=o(` property of the config object (either
passed as an argument or loaded from `),uCe=a("code"),bOr=o("pretrained_model_name_or_path"),vOr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bCe=a("code"),FOr=o("pretrained_model_name_or_path"),TOr=o(":"),MOr=l(),$e=a("ul"),P0=a("li"),vCe=a("strong"),EOr=o("albert"),COr=o(" \u2014 "),ree=a("a"),wOr=o("FlaxAlbertForMaskedLM"),AOr=o(" (ALBERT model)"),LOr=l(),B0=a("li"),FCe=a("strong"),yOr=o("bart"),xOr=o(" \u2014 "),tee=a("a"),$Or=o("FlaxBartForConditionalGeneration"),kOr=o(" (BART model)"),SOr=l(),I0=a("li"),TCe=a("strong"),ROr=o("bert"),POr=o(" \u2014 "),aee=a("a"),BOr=o("FlaxBertForMaskedLM"),IOr=o(" (BERT model)"),NOr=l(),N0=a("li"),MCe=a("strong"),qOr=o("big_bird"),jOr=o(" \u2014 "),nee=a("a"),DOr=o("FlaxBigBirdForMaskedLM"),GOr=o(" (BigBird model)"),OOr=l(),q0=a("li"),ECe=a("strong"),VOr=o("distilbert"),XOr=o(" \u2014 "),see=a("a"),zOr=o("FlaxDistilBertForMaskedLM"),QOr=o(" (DistilBERT model)"),WOr=l(),j0=a("li"),CCe=a("strong"),HOr=o("electra"),UOr=o(" \u2014 "),lee=a("a"),JOr=o("FlaxElectraForMaskedLM"),YOr=o(" (ELECTRA model)"),KOr=l(),D0=a("li"),wCe=a("strong"),ZOr=o("mbart"),eVr=o(" \u2014 "),iee=a("a"),oVr=o("FlaxMBartForConditionalGeneration"),rVr=o(" (mBART model)"),tVr=l(),G0=a("li"),ACe=a("strong"),aVr=o("roberta"),nVr=o(" \u2014 "),dee=a("a"),sVr=o("FlaxRobertaForMaskedLM"),lVr=o(" (RoBERTa model)"),iVr=l(),O0=a("li"),LCe=a("strong"),dVr=o("roformer"),cVr=o(" \u2014 "),cee=a("a"),fVr=o("FlaxRoFormerForMaskedLM"),mVr=o(" (RoFormer model)"),gVr=l(),V0=a("li"),yCe=a("strong"),hVr=o("xlm-roberta"),pVr=o(" \u2014 "),fee=a("a"),_Vr=o("FlaxXLMRobertaForMaskedLM"),uVr=o(" (XLM-RoBERTa model)"),bVr=l(),F(X0.$$.fragment),ZVe=l(),of=a("h2"),z0=a("a"),xCe=a("span"),F(a$.$$.fragment),vVr=l(),$Ce=a("span"),FVr=o("FlaxAutoModelForSeq2SeqLM"),eXe=l(),br=a("div"),F(n$.$$.fragment),TVr=l(),rf=a("p"),MVr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),mee=a("a"),EVr=o("from_pretrained()"),CVr=o(" class method or the "),gee=a("a"),wVr=o("from_config()"),AVr=o(` class
method.`),LVr=l(),s$=a("p"),yVr=o("This class cannot be instantiated directly using "),kCe=a("code"),xVr=o("__init__()"),$Vr=o(" (throws an error)."),kVr=l(),Ht=a("div"),F(l$.$$.fragment),SVr=l(),SCe=a("p"),RVr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),PVr=l(),tf=a("p"),BVr=o(`Note:
Loading a model from its configuration file does `),RCe=a("strong"),IVr=o("not"),NVr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hee=a("a"),qVr=o("from_pretrained()"),jVr=o(" to load the model weights."),DVr=l(),F(Q0.$$.fragment),GVr=l(),Qr=a("div"),F(i$.$$.fragment),OVr=l(),PCe=a("p"),VVr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),XVr=l(),Cn=a("p"),zVr=o("The model class to instantiate is selected based on the "),BCe=a("code"),QVr=o("model_type"),WVr=o(` property of the config object (either
passed as an argument or loaded from `),ICe=a("code"),HVr=o("pretrained_model_name_or_path"),UVr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NCe=a("code"),JVr=o("pretrained_model_name_or_path"),YVr=o(":"),KVr=l(),ke=a("ul"),W0=a("li"),qCe=a("strong"),ZVr=o("bart"),eXr=o(" \u2014 "),pee=a("a"),oXr=o("FlaxBartForConditionalGeneration"),rXr=o(" (BART model)"),tXr=l(),H0=a("li"),jCe=a("strong"),aXr=o("blenderbot"),nXr=o(" \u2014 "),_ee=a("a"),sXr=o("FlaxBlenderbotForConditionalGeneration"),lXr=o(" (Blenderbot model)"),iXr=l(),U0=a("li"),DCe=a("strong"),dXr=o("blenderbot-small"),cXr=o(" \u2014 "),uee=a("a"),fXr=o("FlaxBlenderbotSmallForConditionalGeneration"),mXr=o(" (BlenderbotSmall model)"),gXr=l(),J0=a("li"),GCe=a("strong"),hXr=o("encoder-decoder"),pXr=o(" \u2014 "),bee=a("a"),_Xr=o("FlaxEncoderDecoderModel"),uXr=o(" (Encoder decoder model)"),bXr=l(),Y0=a("li"),OCe=a("strong"),vXr=o("longt5"),FXr=o(" \u2014 "),vee=a("a"),TXr=o("FlaxLongT5ForConditionalGeneration"),MXr=o(" (LongT5 model)"),EXr=l(),K0=a("li"),VCe=a("strong"),CXr=o("marian"),wXr=o(" \u2014 "),Fee=a("a"),AXr=o("FlaxMarianMTModel"),LXr=o(" (Marian model)"),yXr=l(),Z0=a("li"),XCe=a("strong"),xXr=o("mbart"),$Xr=o(" \u2014 "),Tee=a("a"),kXr=o("FlaxMBartForConditionalGeneration"),SXr=o(" (mBART model)"),RXr=l(),ew=a("li"),zCe=a("strong"),PXr=o("mt5"),BXr=o(" \u2014 "),Mee=a("a"),IXr=o("FlaxMT5ForConditionalGeneration"),NXr=o(" (MT5 model)"),qXr=l(),ow=a("li"),QCe=a("strong"),jXr=o("pegasus"),DXr=o(" \u2014 "),Eee=a("a"),GXr=o("FlaxPegasusForConditionalGeneration"),OXr=o(" (Pegasus model)"),VXr=l(),rw=a("li"),WCe=a("strong"),XXr=o("t5"),zXr=o(" \u2014 "),Cee=a("a"),QXr=o("FlaxT5ForConditionalGeneration"),WXr=o(" (T5 model)"),HXr=l(),F(tw.$$.fragment),oXe=l(),af=a("h2"),aw=a("a"),HCe=a("span"),F(d$.$$.fragment),UXr=l(),UCe=a("span"),JXr=o("FlaxAutoModelForSequenceClassification"),rXe=l(),vr=a("div"),F(c$.$$.fragment),YXr=l(),nf=a("p"),KXr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),wee=a("a"),ZXr=o("from_pretrained()"),ezr=o(" class method or the "),Aee=a("a"),ozr=o("from_config()"),rzr=o(` class
method.`),tzr=l(),f$=a("p"),azr=o("This class cannot be instantiated directly using "),JCe=a("code"),nzr=o("__init__()"),szr=o(" (throws an error)."),lzr=l(),Ut=a("div"),F(m$.$$.fragment),izr=l(),YCe=a("p"),dzr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),czr=l(),sf=a("p"),fzr=o(`Note:
Loading a model from its configuration file does `),KCe=a("strong"),mzr=o("not"),gzr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Lee=a("a"),hzr=o("from_pretrained()"),pzr=o(" to load the model weights."),_zr=l(),F(nw.$$.fragment),uzr=l(),Wr=a("div"),F(g$.$$.fragment),bzr=l(),ZCe=a("p"),vzr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Fzr=l(),wn=a("p"),Tzr=o("The model class to instantiate is selected based on the "),e0e=a("code"),Mzr=o("model_type"),Ezr=o(` property of the config object (either
passed as an argument or loaded from `),o0e=a("code"),Czr=o("pretrained_model_name_or_path"),wzr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r0e=a("code"),Azr=o("pretrained_model_name_or_path"),Lzr=o(":"),yzr=l(),Se=a("ul"),sw=a("li"),t0e=a("strong"),xzr=o("albert"),$zr=o(" \u2014 "),yee=a("a"),kzr=o("FlaxAlbertForSequenceClassification"),Szr=o(" (ALBERT model)"),Rzr=l(),lw=a("li"),a0e=a("strong"),Pzr=o("bart"),Bzr=o(" \u2014 "),xee=a("a"),Izr=o("FlaxBartForSequenceClassification"),Nzr=o(" (BART model)"),qzr=l(),iw=a("li"),n0e=a("strong"),jzr=o("bert"),Dzr=o(" \u2014 "),$ee=a("a"),Gzr=o("FlaxBertForSequenceClassification"),Ozr=o(" (BERT model)"),Vzr=l(),dw=a("li"),s0e=a("strong"),Xzr=o("big_bird"),zzr=o(" \u2014 "),kee=a("a"),Qzr=o("FlaxBigBirdForSequenceClassification"),Wzr=o(" (BigBird model)"),Hzr=l(),cw=a("li"),l0e=a("strong"),Uzr=o("distilbert"),Jzr=o(" \u2014 "),See=a("a"),Yzr=o("FlaxDistilBertForSequenceClassification"),Kzr=o(" (DistilBERT model)"),Zzr=l(),fw=a("li"),i0e=a("strong"),eQr=o("electra"),oQr=o(" \u2014 "),Ree=a("a"),rQr=o("FlaxElectraForSequenceClassification"),tQr=o(" (ELECTRA model)"),aQr=l(),mw=a("li"),d0e=a("strong"),nQr=o("mbart"),sQr=o(" \u2014 "),Pee=a("a"),lQr=o("FlaxMBartForSequenceClassification"),iQr=o(" (mBART model)"),dQr=l(),gw=a("li"),c0e=a("strong"),cQr=o("roberta"),fQr=o(" \u2014 "),Bee=a("a"),mQr=o("FlaxRobertaForSequenceClassification"),gQr=o(" (RoBERTa model)"),hQr=l(),hw=a("li"),f0e=a("strong"),pQr=o("roformer"),_Qr=o(" \u2014 "),Iee=a("a"),uQr=o("FlaxRoFormerForSequenceClassification"),bQr=o(" (RoFormer model)"),vQr=l(),pw=a("li"),m0e=a("strong"),FQr=o("xlm-roberta"),TQr=o(" \u2014 "),Nee=a("a"),MQr=o("FlaxXLMRobertaForSequenceClassification"),EQr=o(" (XLM-RoBERTa model)"),CQr=l(),F(_w.$$.fragment),tXe=l(),lf=a("h2"),uw=a("a"),g0e=a("span"),F(h$.$$.fragment),wQr=l(),h0e=a("span"),AQr=o("FlaxAutoModelForQuestionAnswering"),aXe=l(),Fr=a("div"),F(p$.$$.fragment),LQr=l(),df=a("p"),yQr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),qee=a("a"),xQr=o("from_pretrained()"),$Qr=o(" class method or the "),jee=a("a"),kQr=o("from_config()"),SQr=o(` class
method.`),RQr=l(),_$=a("p"),PQr=o("This class cannot be instantiated directly using "),p0e=a("code"),BQr=o("__init__()"),IQr=o(" (throws an error)."),NQr=l(),Jt=a("div"),F(u$.$$.fragment),qQr=l(),_0e=a("p"),jQr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),DQr=l(),cf=a("p"),GQr=o(`Note:
Loading a model from its configuration file does `),u0e=a("strong"),OQr=o("not"),VQr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Dee=a("a"),XQr=o("from_pretrained()"),zQr=o(" to load the model weights."),QQr=l(),F(bw.$$.fragment),WQr=l(),Hr=a("div"),F(b$.$$.fragment),HQr=l(),b0e=a("p"),UQr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),JQr=l(),An=a("p"),YQr=o("The model class to instantiate is selected based on the "),v0e=a("code"),KQr=o("model_type"),ZQr=o(` property of the config object (either
passed as an argument or loaded from `),F0e=a("code"),eWr=o("pretrained_model_name_or_path"),oWr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T0e=a("code"),rWr=o("pretrained_model_name_or_path"),tWr=o(":"),aWr=l(),Re=a("ul"),vw=a("li"),M0e=a("strong"),nWr=o("albert"),sWr=o(" \u2014 "),Gee=a("a"),lWr=o("FlaxAlbertForQuestionAnswering"),iWr=o(" (ALBERT model)"),dWr=l(),Fw=a("li"),E0e=a("strong"),cWr=o("bart"),fWr=o(" \u2014 "),Oee=a("a"),mWr=o("FlaxBartForQuestionAnswering"),gWr=o(" (BART model)"),hWr=l(),Tw=a("li"),C0e=a("strong"),pWr=o("bert"),_Wr=o(" \u2014 "),Vee=a("a"),uWr=o("FlaxBertForQuestionAnswering"),bWr=o(" (BERT model)"),vWr=l(),Mw=a("li"),w0e=a("strong"),FWr=o("big_bird"),TWr=o(" \u2014 "),Xee=a("a"),MWr=o("FlaxBigBirdForQuestionAnswering"),EWr=o(" (BigBird model)"),CWr=l(),Ew=a("li"),A0e=a("strong"),wWr=o("distilbert"),AWr=o(" \u2014 "),zee=a("a"),LWr=o("FlaxDistilBertForQuestionAnswering"),yWr=o(" (DistilBERT model)"),xWr=l(),Cw=a("li"),L0e=a("strong"),$Wr=o("electra"),kWr=o(" \u2014 "),Qee=a("a"),SWr=o("FlaxElectraForQuestionAnswering"),RWr=o(" (ELECTRA model)"),PWr=l(),ww=a("li"),y0e=a("strong"),BWr=o("mbart"),IWr=o(" \u2014 "),Wee=a("a"),NWr=o("FlaxMBartForQuestionAnswering"),qWr=o(" (mBART model)"),jWr=l(),Aw=a("li"),x0e=a("strong"),DWr=o("roberta"),GWr=o(" \u2014 "),Hee=a("a"),OWr=o("FlaxRobertaForQuestionAnswering"),VWr=o(" (RoBERTa model)"),XWr=l(),Lw=a("li"),$0e=a("strong"),zWr=o("roformer"),QWr=o(" \u2014 "),Uee=a("a"),WWr=o("FlaxRoFormerForQuestionAnswering"),HWr=o(" (RoFormer model)"),UWr=l(),yw=a("li"),k0e=a("strong"),JWr=o("xlm-roberta"),YWr=o(" \u2014 "),Jee=a("a"),KWr=o("FlaxXLMRobertaForQuestionAnswering"),ZWr=o(" (XLM-RoBERTa model)"),eHr=l(),F(xw.$$.fragment),nXe=l(),ff=a("h2"),$w=a("a"),S0e=a("span"),F(v$.$$.fragment),oHr=l(),R0e=a("span"),rHr=o("FlaxAutoModelForTokenClassification"),sXe=l(),Tr=a("div"),F(F$.$$.fragment),tHr=l(),mf=a("p"),aHr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Yee=a("a"),nHr=o("from_pretrained()"),sHr=o(" class method or the "),Kee=a("a"),lHr=o("from_config()"),iHr=o(` class
method.`),dHr=l(),T$=a("p"),cHr=o("This class cannot be instantiated directly using "),P0e=a("code"),fHr=o("__init__()"),mHr=o(" (throws an error)."),gHr=l(),Yt=a("div"),F(M$.$$.fragment),hHr=l(),B0e=a("p"),pHr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),_Hr=l(),gf=a("p"),uHr=o(`Note:
Loading a model from its configuration file does `),I0e=a("strong"),bHr=o("not"),vHr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Zee=a("a"),FHr=o("from_pretrained()"),THr=o(" to load the model weights."),MHr=l(),F(kw.$$.fragment),EHr=l(),Ur=a("div"),F(E$.$$.fragment),CHr=l(),N0e=a("p"),wHr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),AHr=l(),Ln=a("p"),LHr=o("The model class to instantiate is selected based on the "),q0e=a("code"),yHr=o("model_type"),xHr=o(` property of the config object (either
passed as an argument or loaded from `),j0e=a("code"),$Hr=o("pretrained_model_name_or_path"),kHr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D0e=a("code"),SHr=o("pretrained_model_name_or_path"),RHr=o(":"),PHr=l(),Ve=a("ul"),Sw=a("li"),G0e=a("strong"),BHr=o("albert"),IHr=o(" \u2014 "),eoe=a("a"),NHr=o("FlaxAlbertForTokenClassification"),qHr=o(" (ALBERT model)"),jHr=l(),Rw=a("li"),O0e=a("strong"),DHr=o("bert"),GHr=o(" \u2014 "),ooe=a("a"),OHr=o("FlaxBertForTokenClassification"),VHr=o(" (BERT model)"),XHr=l(),Pw=a("li"),V0e=a("strong"),zHr=o("big_bird"),QHr=o(" \u2014 "),roe=a("a"),WHr=o("FlaxBigBirdForTokenClassification"),HHr=o(" (BigBird model)"),UHr=l(),Bw=a("li"),X0e=a("strong"),JHr=o("distilbert"),YHr=o(" \u2014 "),toe=a("a"),KHr=o("FlaxDistilBertForTokenClassification"),ZHr=o(" (DistilBERT model)"),eUr=l(),Iw=a("li"),z0e=a("strong"),oUr=o("electra"),rUr=o(" \u2014 "),aoe=a("a"),tUr=o("FlaxElectraForTokenClassification"),aUr=o(" (ELECTRA model)"),nUr=l(),Nw=a("li"),Q0e=a("strong"),sUr=o("roberta"),lUr=o(" \u2014 "),noe=a("a"),iUr=o("FlaxRobertaForTokenClassification"),dUr=o(" (RoBERTa model)"),cUr=l(),qw=a("li"),W0e=a("strong"),fUr=o("roformer"),mUr=o(" \u2014 "),soe=a("a"),gUr=o("FlaxRoFormerForTokenClassification"),hUr=o(" (RoFormer model)"),pUr=l(),jw=a("li"),H0e=a("strong"),_Ur=o("xlm-roberta"),uUr=o(" \u2014 "),loe=a("a"),bUr=o("FlaxXLMRobertaForTokenClassification"),vUr=o(" (XLM-RoBERTa model)"),FUr=l(),F(Dw.$$.fragment),lXe=l(),hf=a("h2"),Gw=a("a"),U0e=a("span"),F(C$.$$.fragment),TUr=l(),J0e=a("span"),MUr=o("FlaxAutoModelForMultipleChoice"),iXe=l(),Mr=a("div"),F(w$.$$.fragment),EUr=l(),pf=a("p"),CUr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),ioe=a("a"),wUr=o("from_pretrained()"),AUr=o(" class method or the "),doe=a("a"),LUr=o("from_config()"),yUr=o(` class
method.`),xUr=l(),A$=a("p"),$Ur=o("This class cannot be instantiated directly using "),Y0e=a("code"),kUr=o("__init__()"),SUr=o(" (throws an error)."),RUr=l(),Kt=a("div"),F(L$.$$.fragment),PUr=l(),K0e=a("p"),BUr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),IUr=l(),_f=a("p"),NUr=o(`Note:
Loading a model from its configuration file does `),Z0e=a("strong"),qUr=o("not"),jUr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),coe=a("a"),DUr=o("from_pretrained()"),GUr=o(" to load the model weights."),OUr=l(),F(Ow.$$.fragment),VUr=l(),Jr=a("div"),F(y$.$$.fragment),XUr=l(),ewe=a("p"),zUr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),QUr=l(),yn=a("p"),WUr=o("The model class to instantiate is selected based on the "),owe=a("code"),HUr=o("model_type"),UUr=o(` property of the config object (either
passed as an argument or loaded from `),rwe=a("code"),JUr=o("pretrained_model_name_or_path"),YUr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),twe=a("code"),KUr=o("pretrained_model_name_or_path"),ZUr=o(":"),eJr=l(),Xe=a("ul"),Vw=a("li"),awe=a("strong"),oJr=o("albert"),rJr=o(" \u2014 "),foe=a("a"),tJr=o("FlaxAlbertForMultipleChoice"),aJr=o(" (ALBERT model)"),nJr=l(),Xw=a("li"),nwe=a("strong"),sJr=o("bert"),lJr=o(" \u2014 "),moe=a("a"),iJr=o("FlaxBertForMultipleChoice"),dJr=o(" (BERT model)"),cJr=l(),zw=a("li"),swe=a("strong"),fJr=o("big_bird"),mJr=o(" \u2014 "),goe=a("a"),gJr=o("FlaxBigBirdForMultipleChoice"),hJr=o(" (BigBird model)"),pJr=l(),Qw=a("li"),lwe=a("strong"),_Jr=o("distilbert"),uJr=o(" \u2014 "),hoe=a("a"),bJr=o("FlaxDistilBertForMultipleChoice"),vJr=o(" (DistilBERT model)"),FJr=l(),Ww=a("li"),iwe=a("strong"),TJr=o("electra"),MJr=o(" \u2014 "),poe=a("a"),EJr=o("FlaxElectraForMultipleChoice"),CJr=o(" (ELECTRA model)"),wJr=l(),Hw=a("li"),dwe=a("strong"),AJr=o("roberta"),LJr=o(" \u2014 "),_oe=a("a"),yJr=o("FlaxRobertaForMultipleChoice"),xJr=o(" (RoBERTa model)"),$Jr=l(),Uw=a("li"),cwe=a("strong"),kJr=o("roformer"),SJr=o(" \u2014 "),uoe=a("a"),RJr=o("FlaxRoFormerForMultipleChoice"),PJr=o(" (RoFormer model)"),BJr=l(),Jw=a("li"),fwe=a("strong"),IJr=o("xlm-roberta"),NJr=o(" \u2014 "),boe=a("a"),qJr=o("FlaxXLMRobertaForMultipleChoice"),jJr=o(" (XLM-RoBERTa model)"),DJr=l(),F(Yw.$$.fragment),dXe=l(),uf=a("h2"),Kw=a("a"),mwe=a("span"),F(x$.$$.fragment),GJr=l(),gwe=a("span"),OJr=o("FlaxAutoModelForNextSentencePrediction"),cXe=l(),Er=a("div"),F($$.$$.fragment),VJr=l(),bf=a("p"),XJr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),voe=a("a"),zJr=o("from_pretrained()"),QJr=o(" class method or the "),Foe=a("a"),WJr=o("from_config()"),HJr=o(` class
method.`),UJr=l(),k$=a("p"),JJr=o("This class cannot be instantiated directly using "),hwe=a("code"),YJr=o("__init__()"),KJr=o(" (throws an error)."),ZJr=l(),Zt=a("div"),F(S$.$$.fragment),eYr=l(),pwe=a("p"),oYr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),rYr=l(),vf=a("p"),tYr=o(`Note:
Loading a model from its configuration file does `),_we=a("strong"),aYr=o("not"),nYr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Toe=a("a"),sYr=o("from_pretrained()"),lYr=o(" to load the model weights."),iYr=l(),F(Zw.$$.fragment),dYr=l(),Yr=a("div"),F(R$.$$.fragment),cYr=l(),uwe=a("p"),fYr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),mYr=l(),xn=a("p"),gYr=o("The model class to instantiate is selected based on the "),bwe=a("code"),hYr=o("model_type"),pYr=o(` property of the config object (either
passed as an argument or loaded from `),vwe=a("code"),_Yr=o("pretrained_model_name_or_path"),uYr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fwe=a("code"),bYr=o("pretrained_model_name_or_path"),vYr=o(":"),FYr=l(),Twe=a("ul"),eA=a("li"),Mwe=a("strong"),TYr=o("bert"),MYr=o(" \u2014 "),Moe=a("a"),EYr=o("FlaxBertForNextSentencePrediction"),CYr=o(" (BERT model)"),wYr=l(),F(oA.$$.fragment),fXe=l(),Ff=a("h2"),rA=a("a"),Ewe=a("span"),F(P$.$$.fragment),AYr=l(),Cwe=a("span"),LYr=o("FlaxAutoModelForImageClassification"),mXe=l(),Cr=a("div"),F(B$.$$.fragment),yYr=l(),Tf=a("p"),xYr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Eoe=a("a"),$Yr=o("from_pretrained()"),kYr=o(" class method or the "),Coe=a("a"),SYr=o("from_config()"),RYr=o(` class
method.`),PYr=l(),I$=a("p"),BYr=o("This class cannot be instantiated directly using "),wwe=a("code"),IYr=o("__init__()"),NYr=o(" (throws an error)."),qYr=l(),ea=a("div"),F(N$.$$.fragment),jYr=l(),Awe=a("p"),DYr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),GYr=l(),Mf=a("p"),OYr=o(`Note:
Loading a model from its configuration file does `),Lwe=a("strong"),VYr=o("not"),XYr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),woe=a("a"),zYr=o("from_pretrained()"),QYr=o(" to load the model weights."),WYr=l(),F(tA.$$.fragment),HYr=l(),Kr=a("div"),F(q$.$$.fragment),UYr=l(),ywe=a("p"),JYr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),YYr=l(),$n=a("p"),KYr=o("The model class to instantiate is selected based on the "),xwe=a("code"),ZYr=o("model_type"),eKr=o(` property of the config object (either
passed as an argument or loaded from `),$we=a("code"),oKr=o("pretrained_model_name_or_path"),rKr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kwe=a("code"),tKr=o("pretrained_model_name_or_path"),aKr=o(":"),nKr=l(),j$=a("ul"),aA=a("li"),Swe=a("strong"),sKr=o("beit"),lKr=o(" \u2014 "),Aoe=a("a"),iKr=o("FlaxBeitForImageClassification"),dKr=o(" (BEiT model)"),cKr=l(),nA=a("li"),Rwe=a("strong"),fKr=o("vit"),mKr=o(" \u2014 "),Loe=a("a"),gKr=o("FlaxViTForImageClassification"),hKr=o(" (ViT model)"),pKr=l(),F(sA.$$.fragment),gXe=l(),Ef=a("h2"),lA=a("a"),Pwe=a("span"),F(D$.$$.fragment),_Kr=l(),Bwe=a("span"),uKr=o("FlaxAutoModelForVision2Seq"),hXe=l(),wr=a("div"),F(G$.$$.fragment),bKr=l(),Cf=a("p"),vKr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),yoe=a("a"),FKr=o("from_pretrained()"),TKr=o(" class method or the "),xoe=a("a"),MKr=o("from_config()"),EKr=o(` class
method.`),CKr=l(),O$=a("p"),wKr=o("This class cannot be instantiated directly using "),Iwe=a("code"),AKr=o("__init__()"),LKr=o(" (throws an error)."),yKr=l(),oa=a("div"),F(V$.$$.fragment),xKr=l(),Nwe=a("p"),$Kr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),kKr=l(),wf=a("p"),SKr=o(`Note:
Loading a model from its configuration file does `),qwe=a("strong"),RKr=o("not"),PKr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$oe=a("a"),BKr=o("from_pretrained()"),IKr=o(" to load the model weights."),NKr=l(),F(iA.$$.fragment),qKr=l(),Zr=a("div"),F(X$.$$.fragment),jKr=l(),jwe=a("p"),DKr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),GKr=l(),kn=a("p"),OKr=o("The model class to instantiate is selected based on the "),Dwe=a("code"),VKr=o("model_type"),XKr=o(` property of the config object (either
passed as an argument or loaded from `),Gwe=a("code"),zKr=o("pretrained_model_name_or_path"),QKr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Owe=a("code"),WKr=o("pretrained_model_name_or_path"),HKr=o(":"),UKr=l(),Vwe=a("ul"),dA=a("li"),Xwe=a("strong"),JKr=o("vision-encoder-decoder"),YKr=o(" \u2014 "),koe=a("a"),KKr=o("FlaxVisionEncoderDecoderModel"),ZKr=o(" (Vision Encoder decoder model)"),eZr=l(),F(cA.$$.fragment),this.h()},l(f){const u=qGt('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var z$=s(p);m=n(z$,"A",{id:!0,class:!0,href:!0});var zwe=s(m);_=n(zwe,"SPAN",{});var Qwe=s(_);T(d.$$.fragment,Qwe),Qwe.forEach(t),zwe.forEach(t),h=i(z$),Eo=n(z$,"SPAN",{});var Wwe=s(Eo);Mi=r(Wwe,"Auto Classes"),Wwe.forEach(t),z$.forEach(t),xf=i(f),at=n(f,"P",{});var Q$=s(at);Ei=r(Q$,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ci=n(Q$,"CODE",{});var Hwe=s(Ci);k7=r(Hwe,"from_pretrained()"),Hwe.forEach(t),$f=r(Q$,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Q$.forEach(t),Oe=i(f),Qe=n(f,"P",{});var Sn=s(Qe);wi=r(Sn,"Instantiating one of "),Rn=n(Sn,"A",{href:!0});var Uwe=s(Rn);S7=r(Uwe,"AutoConfig"),Uwe.forEach(t),Pn=r(Sn,", "),Bn=n(Sn,"A",{href:!0});var Jwe=s(Bn);R7=r(Jwe,"AutoModel"),Jwe.forEach(t),Ai=r(Sn,`, and
`),In=n(Sn,"A",{href:!0});var Ywe=s(In);P7=r(Ywe,"AutoTokenizer"),Ywe.forEach(t),Li=r(Sn," will directly create a class of the relevant architecture. For instance"),Sn.forEach(t),kf=i(f),T(xa.$$.fragment,f),We=i(f),Ae=n(f,"P",{});var W$=s(Ae);dS=r(W$,"will create a model that is an instance of "),yi=n(W$,"A",{href:!0});var Kwe=s(yi);cS=r(Kwe,"BertModel"),Kwe.forEach(t),fS=r(W$,"."),W$.forEach(t),Co=i(f),$a=n(f,"P",{});var H$=s($a);mS=r(H$,"There is one class of "),Sf=n(H$,"CODE",{});var Zwe=s(Sf);gS=r(Zwe,"AutoModel"),Zwe.forEach(t),wQe=r(H$," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),H$.forEach(t),cOe=i(f),xi=n(f,"H2",{class:!0});var U$=s(xi);Rf=n(U$,"A",{id:!0,class:!0,href:!0});var eAe=s(Rf);Ate=n(eAe,"SPAN",{});var oAe=s(Ate);T(B7.$$.fragment,oAe),oAe.forEach(t),eAe.forEach(t),AQe=i(U$),Lte=n(U$,"SPAN",{});var rAe=s(Lte);LQe=r(rAe,"Extending the Auto Classes"),rAe.forEach(t),U$.forEach(t),fOe=i(f),Nn=n(f,"P",{});var Af=s(Nn);yQe=r(Af,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),yte=n(Af,"CODE",{});var tAe=s(yte);xQe=r(tAe,"NewModel"),tAe.forEach(t),$Qe=r(Af,", make sure you have a "),xte=n(Af,"CODE",{});var aAe=s(xte);kQe=r(aAe,"NewModelConfig"),aAe.forEach(t),SQe=r(Af,` then you can add those to the auto
classes like this:`),Af.forEach(t),mOe=i(f),T(I7.$$.fragment,f),gOe=i(f),hS=n(f,"P",{});var nAe=s(hS);RQe=r(nAe,"You will then be able to use the auto classes like you would usually do!"),nAe.forEach(t),hOe=i(f),T(Pf.$$.fragment,f),pOe=i(f),$i=n(f,"H2",{class:!0});var J$=s($i);Bf=n(J$,"A",{id:!0,class:!0,href:!0});var sAe=s(Bf);$te=n(sAe,"SPAN",{});var lAe=s($te);T(N7.$$.fragment,lAe),lAe.forEach(t),sAe.forEach(t),PQe=i(J$),kte=n(J$,"SPAN",{});var iAe=s(kte);BQe=r(iAe,"AutoConfig"),iAe.forEach(t),J$.forEach(t),_Oe=i(f),wo=n(f,"DIV",{class:!0});var rt=s(wo);T(q7.$$.fragment,rt),IQe=i(rt),j7=n(rt,"P",{});var Y$=s(j7);NQe=r(Y$,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),pS=n(Y$,"A",{href:!0});var dAe=s(pS);qQe=r(dAe,"from_pretrained()"),dAe.forEach(t),jQe=r(Y$," class method."),Y$.forEach(t),DQe=i(rt),D7=n(rt,"P",{});var K$=s(D7);GQe=r(K$,"This class cannot be instantiated directly using "),Ste=n(K$,"CODE",{});var cAe=s(Ste);OQe=r(cAe,"__init__()"),cAe.forEach(t),VQe=r(K$," (throws an error)."),K$.forEach(t),XQe=i(rt),Ar=n(rt,"DIV",{class:!0});var tt=s(Ar);T(G7.$$.fragment,tt),zQe=i(tt),Rte=n(tt,"P",{});var fAe=s(Rte);QQe=r(fAe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),fAe.forEach(t),WQe=i(tt),ki=n(tt,"P",{});var Lf=s(ki);HQe=r(Lf,"The configuration class to instantiate is selected based on the "),Pte=n(Lf,"CODE",{});var mAe=s(Pte);UQe=r(mAe,"model_type"),mAe.forEach(t),JQe=r(Lf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Bte=n(Lf,"CODE",{});var gAe=s(Bte);YQe=r(gAe,"pretrained_model_name_or_path"),gAe.forEach(t),KQe=r(Lf,":"),Lf.forEach(t),ZQe=i(tt),A=n(tt,"UL",{});var L=s(A);If=n(L,"LI",{});var fA=s(If);Ite=n(fA,"STRONG",{});var hAe=s(Ite);eWe=r(hAe,"albert"),hAe.forEach(t),oWe=r(fA," \u2014 "),_S=n(fA,"A",{href:!0});var pAe=s(_S);rWe=r(pAe,"AlbertConfig"),pAe.forEach(t),tWe=r(fA," (ALBERT model)"),fA.forEach(t),aWe=i(L),Nf=n(L,"LI",{});var mA=s(Nf);Nte=n(mA,"STRONG",{});var _Ae=s(Nte);nWe=r(_Ae,"bart"),_Ae.forEach(t),sWe=r(mA," \u2014 "),uS=n(mA,"A",{href:!0});var uAe=s(uS);lWe=r(uAe,"BartConfig"),uAe.forEach(t),iWe=r(mA," (BART model)"),mA.forEach(t),dWe=i(L),qf=n(L,"LI",{});var gA=s(qf);qte=n(gA,"STRONG",{});var bAe=s(qte);cWe=r(bAe,"beit"),bAe.forEach(t),fWe=r(gA," \u2014 "),bS=n(gA,"A",{href:!0});var vAe=s(bS);mWe=r(vAe,"BeitConfig"),vAe.forEach(t),gWe=r(gA," (BEiT model)"),gA.forEach(t),hWe=i(L),jf=n(L,"LI",{});var hA=s(jf);jte=n(hA,"STRONG",{});var FAe=s(jte);pWe=r(FAe,"bert"),FAe.forEach(t),_We=r(hA," \u2014 "),vS=n(hA,"A",{href:!0});var TAe=s(vS);uWe=r(TAe,"BertConfig"),TAe.forEach(t),bWe=r(hA," (BERT model)"),hA.forEach(t),vWe=i(L),Df=n(L,"LI",{});var pA=s(Df);Dte=n(pA,"STRONG",{});var MAe=s(Dte);FWe=r(MAe,"bert-generation"),MAe.forEach(t),TWe=r(pA," \u2014 "),FS=n(pA,"A",{href:!0});var EAe=s(FS);MWe=r(EAe,"BertGenerationConfig"),EAe.forEach(t),EWe=r(pA," (Bert Generation model)"),pA.forEach(t),CWe=i(L),Gf=n(L,"LI",{});var _A=s(Gf);Gte=n(_A,"STRONG",{});var CAe=s(Gte);wWe=r(CAe,"big_bird"),CAe.forEach(t),AWe=r(_A," \u2014 "),TS=n(_A,"A",{href:!0});var wAe=s(TS);LWe=r(wAe,"BigBirdConfig"),wAe.forEach(t),yWe=r(_A," (BigBird model)"),_A.forEach(t),xWe=i(L),Of=n(L,"LI",{});var uA=s(Of);Ote=n(uA,"STRONG",{});var AAe=s(Ote);$We=r(AAe,"bigbird_pegasus"),AAe.forEach(t),kWe=r(uA," \u2014 "),MS=n(uA,"A",{href:!0});var LAe=s(MS);SWe=r(LAe,"BigBirdPegasusConfig"),LAe.forEach(t),RWe=r(uA," (BigBird-Pegasus model)"),uA.forEach(t),PWe=i(L),Vf=n(L,"LI",{});var bA=s(Vf);Vte=n(bA,"STRONG",{});var yAe=s(Vte);BWe=r(yAe,"blenderbot"),yAe.forEach(t),IWe=r(bA," \u2014 "),ES=n(bA,"A",{href:!0});var xAe=s(ES);NWe=r(xAe,"BlenderbotConfig"),xAe.forEach(t),qWe=r(bA," (Blenderbot model)"),bA.forEach(t),jWe=i(L),Xf=n(L,"LI",{});var vA=s(Xf);Xte=n(vA,"STRONG",{});var $Ae=s(Xte);DWe=r($Ae,"blenderbot-small"),$Ae.forEach(t),GWe=r(vA," \u2014 "),CS=n(vA,"A",{href:!0});var kAe=s(CS);OWe=r(kAe,"BlenderbotSmallConfig"),kAe.forEach(t),VWe=r(vA," (BlenderbotSmall model)"),vA.forEach(t),XWe=i(L),zf=n(L,"LI",{});var FA=s(zf);zte=n(FA,"STRONG",{});var SAe=s(zte);zWe=r(SAe,"bloom"),SAe.forEach(t),QWe=r(FA," \u2014 "),wS=n(FA,"A",{href:!0});var RAe=s(wS);WWe=r(RAe,"BloomConfig"),RAe.forEach(t),HWe=r(FA," (BLOOM model)"),FA.forEach(t),UWe=i(L),Qf=n(L,"LI",{});var TA=s(Qf);Qte=n(TA,"STRONG",{});var PAe=s(Qte);JWe=r(PAe,"camembert"),PAe.forEach(t),YWe=r(TA," \u2014 "),AS=n(TA,"A",{href:!0});var BAe=s(AS);KWe=r(BAe,"CamembertConfig"),BAe.forEach(t),ZWe=r(TA," (CamemBERT model)"),TA.forEach(t),eHe=i(L),Wf=n(L,"LI",{});var MA=s(Wf);Wte=n(MA,"STRONG",{});var IAe=s(Wte);oHe=r(IAe,"canine"),IAe.forEach(t),rHe=r(MA," \u2014 "),LS=n(MA,"A",{href:!0});var NAe=s(LS);tHe=r(NAe,"CanineConfig"),NAe.forEach(t),aHe=r(MA," (CANINE model)"),MA.forEach(t),nHe=i(L),Hf=n(L,"LI",{});var EA=s(Hf);Hte=n(EA,"STRONG",{});var qAe=s(Hte);sHe=r(qAe,"clip"),qAe.forEach(t),lHe=r(EA," \u2014 "),yS=n(EA,"A",{href:!0});var jAe=s(yS);iHe=r(jAe,"CLIPConfig"),jAe.forEach(t),dHe=r(EA," (CLIP model)"),EA.forEach(t),cHe=i(L),Uf=n(L,"LI",{});var CA=s(Uf);Ute=n(CA,"STRONG",{});var DAe=s(Ute);fHe=r(DAe,"codegen"),DAe.forEach(t),mHe=r(CA," \u2014 "),xS=n(CA,"A",{href:!0});var GAe=s(xS);gHe=r(GAe,"CodeGenConfig"),GAe.forEach(t),hHe=r(CA," (CodeGen model)"),CA.forEach(t),pHe=i(L),Jf=n(L,"LI",{});var wA=s(Jf);Jte=n(wA,"STRONG",{});var OAe=s(Jte);_He=r(OAe,"convbert"),OAe.forEach(t),uHe=r(wA," \u2014 "),$S=n(wA,"A",{href:!0});var VAe=s($S);bHe=r(VAe,"ConvBertConfig"),VAe.forEach(t),vHe=r(wA," (ConvBERT model)"),wA.forEach(t),FHe=i(L),Yf=n(L,"LI",{});var AA=s(Yf);Yte=n(AA,"STRONG",{});var XAe=s(Yte);THe=r(XAe,"convnext"),XAe.forEach(t),MHe=r(AA," \u2014 "),kS=n(AA,"A",{href:!0});var zAe=s(kS);EHe=r(zAe,"ConvNextConfig"),zAe.forEach(t),CHe=r(AA," (ConvNeXT model)"),AA.forEach(t),wHe=i(L),Kf=n(L,"LI",{});var LA=s(Kf);Kte=n(LA,"STRONG",{});var QAe=s(Kte);AHe=r(QAe,"ctrl"),QAe.forEach(t),LHe=r(LA," \u2014 "),SS=n(LA,"A",{href:!0});var WAe=s(SS);yHe=r(WAe,"CTRLConfig"),WAe.forEach(t),xHe=r(LA," (CTRL model)"),LA.forEach(t),$He=i(L),Zf=n(L,"LI",{});var yA=s(Zf);Zte=n(yA,"STRONG",{});var HAe=s(Zte);kHe=r(HAe,"cvt"),HAe.forEach(t),SHe=r(yA," \u2014 "),RS=n(yA,"A",{href:!0});var UAe=s(RS);RHe=r(UAe,"CvtConfig"),UAe.forEach(t),PHe=r(yA," (CvT model)"),yA.forEach(t),BHe=i(L),em=n(L,"LI",{});var xA=s(em);eae=n(xA,"STRONG",{});var JAe=s(eae);IHe=r(JAe,"data2vec-audio"),JAe.forEach(t),NHe=r(xA," \u2014 "),PS=n(xA,"A",{href:!0});var YAe=s(PS);qHe=r(YAe,"Data2VecAudioConfig"),YAe.forEach(t),jHe=r(xA," (Data2VecAudio model)"),xA.forEach(t),DHe=i(L),om=n(L,"LI",{});var $A=s(om);oae=n($A,"STRONG",{});var KAe=s(oae);GHe=r(KAe,"data2vec-text"),KAe.forEach(t),OHe=r($A," \u2014 "),BS=n($A,"A",{href:!0});var ZAe=s(BS);VHe=r(ZAe,"Data2VecTextConfig"),ZAe.forEach(t),XHe=r($A," (Data2VecText model)"),$A.forEach(t),zHe=i(L),rm=n(L,"LI",{});var kA=s(rm);rae=n(kA,"STRONG",{});var eLe=s(rae);QHe=r(eLe,"data2vec-vision"),eLe.forEach(t),WHe=r(kA," \u2014 "),IS=n(kA,"A",{href:!0});var oLe=s(IS);HHe=r(oLe,"Data2VecVisionConfig"),oLe.forEach(t),UHe=r(kA," (Data2VecVision model)"),kA.forEach(t),JHe=i(L),tm=n(L,"LI",{});var SA=s(tm);tae=n(SA,"STRONG",{});var rLe=s(tae);YHe=r(rLe,"deberta"),rLe.forEach(t),KHe=r(SA," \u2014 "),NS=n(SA,"A",{href:!0});var tLe=s(NS);ZHe=r(tLe,"DebertaConfig"),tLe.forEach(t),eUe=r(SA," (DeBERTa model)"),SA.forEach(t),oUe=i(L),am=n(L,"LI",{});var RA=s(am);aae=n(RA,"STRONG",{});var aLe=s(aae);rUe=r(aLe,"deberta-v2"),aLe.forEach(t),tUe=r(RA," \u2014 "),qS=n(RA,"A",{href:!0});var nLe=s(qS);aUe=r(nLe,"DebertaV2Config"),nLe.forEach(t),nUe=r(RA," (DeBERTa-v2 model)"),RA.forEach(t),sUe=i(L),nm=n(L,"LI",{});var PA=s(nm);nae=n(PA,"STRONG",{});var rZr=s(nae);lUe=r(rZr,"decision_transformer"),rZr.forEach(t),iUe=r(PA," \u2014 "),jS=n(PA,"A",{href:!0});var tZr=s(jS);dUe=r(tZr,"DecisionTransformerConfig"),tZr.forEach(t),cUe=r(PA," (Decision Transformer model)"),PA.forEach(t),fUe=i(L),sm=n(L,"LI",{});var sLe=s(sm);sae=n(sLe,"STRONG",{});var aZr=s(sae);mUe=r(aZr,"deit"),aZr.forEach(t),gUe=r(sLe," \u2014 "),DS=n(sLe,"A",{href:!0});var nZr=s(DS);hUe=r(nZr,"DeiTConfig"),nZr.forEach(t),pUe=r(sLe," (DeiT model)"),sLe.forEach(t),_Ue=i(L),lm=n(L,"LI",{});var lLe=s(lm);lae=n(lLe,"STRONG",{});var sZr=s(lae);uUe=r(sZr,"detr"),sZr.forEach(t),bUe=r(lLe," \u2014 "),GS=n(lLe,"A",{href:!0});var lZr=s(GS);vUe=r(lZr,"DetrConfig"),lZr.forEach(t),FUe=r(lLe," (DETR model)"),lLe.forEach(t),TUe=i(L),im=n(L,"LI",{});var iLe=s(im);iae=n(iLe,"STRONG",{});var iZr=s(iae);MUe=r(iZr,"distilbert"),iZr.forEach(t),EUe=r(iLe," \u2014 "),OS=n(iLe,"A",{href:!0});var dZr=s(OS);CUe=r(dZr,"DistilBertConfig"),dZr.forEach(t),wUe=r(iLe," (DistilBERT model)"),iLe.forEach(t),AUe=i(L),dm=n(L,"LI",{});var dLe=s(dm);dae=n(dLe,"STRONG",{});var cZr=s(dae);LUe=r(cZr,"dpr"),cZr.forEach(t),yUe=r(dLe," \u2014 "),VS=n(dLe,"A",{href:!0});var fZr=s(VS);xUe=r(fZr,"DPRConfig"),fZr.forEach(t),$Ue=r(dLe," (DPR model)"),dLe.forEach(t),kUe=i(L),cm=n(L,"LI",{});var cLe=s(cm);cae=n(cLe,"STRONG",{});var mZr=s(cae);SUe=r(mZr,"dpt"),mZr.forEach(t),RUe=r(cLe," \u2014 "),XS=n(cLe,"A",{href:!0});var gZr=s(XS);PUe=r(gZr,"DPTConfig"),gZr.forEach(t),BUe=r(cLe," (DPT model)"),cLe.forEach(t),IUe=i(L),fm=n(L,"LI",{});var fLe=s(fm);fae=n(fLe,"STRONG",{});var hZr=s(fae);NUe=r(hZr,"electra"),hZr.forEach(t),qUe=r(fLe," \u2014 "),zS=n(fLe,"A",{href:!0});var pZr=s(zS);jUe=r(pZr,"ElectraConfig"),pZr.forEach(t),DUe=r(fLe," (ELECTRA model)"),fLe.forEach(t),GUe=i(L),mm=n(L,"LI",{});var mLe=s(mm);mae=n(mLe,"STRONG",{});var _Zr=s(mae);OUe=r(_Zr,"encoder-decoder"),_Zr.forEach(t),VUe=r(mLe," \u2014 "),QS=n(mLe,"A",{href:!0});var uZr=s(QS);XUe=r(uZr,"EncoderDecoderConfig"),uZr.forEach(t),zUe=r(mLe," (Encoder decoder model)"),mLe.forEach(t),QUe=i(L),gm=n(L,"LI",{});var gLe=s(gm);gae=n(gLe,"STRONG",{});var bZr=s(gae);WUe=r(bZr,"flaubert"),bZr.forEach(t),HUe=r(gLe," \u2014 "),WS=n(gLe,"A",{href:!0});var vZr=s(WS);UUe=r(vZr,"FlaubertConfig"),vZr.forEach(t),JUe=r(gLe," (FlauBERT model)"),gLe.forEach(t),YUe=i(L),hm=n(L,"LI",{});var hLe=s(hm);hae=n(hLe,"STRONG",{});var FZr=s(hae);KUe=r(FZr,"flava"),FZr.forEach(t),ZUe=r(hLe," \u2014 "),HS=n(hLe,"A",{href:!0});var TZr=s(HS);eJe=r(TZr,"FlavaConfig"),TZr.forEach(t),oJe=r(hLe," (FLAVA model)"),hLe.forEach(t),rJe=i(L),pm=n(L,"LI",{});var pLe=s(pm);pae=n(pLe,"STRONG",{});var MZr=s(pae);tJe=r(MZr,"fnet"),MZr.forEach(t),aJe=r(pLe," \u2014 "),US=n(pLe,"A",{href:!0});var EZr=s(US);nJe=r(EZr,"FNetConfig"),EZr.forEach(t),sJe=r(pLe," (FNet model)"),pLe.forEach(t),lJe=i(L),_m=n(L,"LI",{});var _Le=s(_m);_ae=n(_Le,"STRONG",{});var CZr=s(_ae);iJe=r(CZr,"fsmt"),CZr.forEach(t),dJe=r(_Le," \u2014 "),JS=n(_Le,"A",{href:!0});var wZr=s(JS);cJe=r(wZr,"FSMTConfig"),wZr.forEach(t),fJe=r(_Le," (FairSeq Machine-Translation model)"),_Le.forEach(t),mJe=i(L),um=n(L,"LI",{});var uLe=s(um);uae=n(uLe,"STRONG",{});var AZr=s(uae);gJe=r(AZr,"funnel"),AZr.forEach(t),hJe=r(uLe," \u2014 "),YS=n(uLe,"A",{href:!0});var LZr=s(YS);pJe=r(LZr,"FunnelConfig"),LZr.forEach(t),_Je=r(uLe," (Funnel Transformer model)"),uLe.forEach(t),uJe=i(L),bm=n(L,"LI",{});var bLe=s(bm);bae=n(bLe,"STRONG",{});var yZr=s(bae);bJe=r(yZr,"glpn"),yZr.forEach(t),vJe=r(bLe," \u2014 "),KS=n(bLe,"A",{href:!0});var xZr=s(KS);FJe=r(xZr,"GLPNConfig"),xZr.forEach(t),TJe=r(bLe," (GLPN model)"),bLe.forEach(t),MJe=i(L),vm=n(L,"LI",{});var vLe=s(vm);vae=n(vLe,"STRONG",{});var $Zr=s(vae);EJe=r($Zr,"gpt2"),$Zr.forEach(t),CJe=r(vLe," \u2014 "),ZS=n(vLe,"A",{href:!0});var kZr=s(ZS);wJe=r(kZr,"GPT2Config"),kZr.forEach(t),AJe=r(vLe," (OpenAI GPT-2 model)"),vLe.forEach(t),LJe=i(L),Fm=n(L,"LI",{});var FLe=s(Fm);Fae=n(FLe,"STRONG",{});var SZr=s(Fae);yJe=r(SZr,"gpt_neo"),SZr.forEach(t),xJe=r(FLe," \u2014 "),eR=n(FLe,"A",{href:!0});var RZr=s(eR);$Je=r(RZr,"GPTNeoConfig"),RZr.forEach(t),kJe=r(FLe," (GPT Neo model)"),FLe.forEach(t),SJe=i(L),Tm=n(L,"LI",{});var TLe=s(Tm);Tae=n(TLe,"STRONG",{});var PZr=s(Tae);RJe=r(PZr,"gpt_neox"),PZr.forEach(t),PJe=r(TLe," \u2014 "),oR=n(TLe,"A",{href:!0});var BZr=s(oR);BJe=r(BZr,"GPTNeoXConfig"),BZr.forEach(t),IJe=r(TLe," (GPT NeoX model)"),TLe.forEach(t),NJe=i(L),Mm=n(L,"LI",{});var MLe=s(Mm);Mae=n(MLe,"STRONG",{});var IZr=s(Mae);qJe=r(IZr,"gptj"),IZr.forEach(t),jJe=r(MLe," \u2014 "),rR=n(MLe,"A",{href:!0});var NZr=s(rR);DJe=r(NZr,"GPTJConfig"),NZr.forEach(t),GJe=r(MLe," (GPT-J model)"),MLe.forEach(t),OJe=i(L),Em=n(L,"LI",{});var ELe=s(Em);Eae=n(ELe,"STRONG",{});var qZr=s(Eae);VJe=r(qZr,"hubert"),qZr.forEach(t),XJe=r(ELe," \u2014 "),tR=n(ELe,"A",{href:!0});var jZr=s(tR);zJe=r(jZr,"HubertConfig"),jZr.forEach(t),QJe=r(ELe," (Hubert model)"),ELe.forEach(t),WJe=i(L),Cm=n(L,"LI",{});var CLe=s(Cm);Cae=n(CLe,"STRONG",{});var DZr=s(Cae);HJe=r(DZr,"ibert"),DZr.forEach(t),UJe=r(CLe," \u2014 "),aR=n(CLe,"A",{href:!0});var GZr=s(aR);JJe=r(GZr,"IBertConfig"),GZr.forEach(t),YJe=r(CLe," (I-BERT model)"),CLe.forEach(t),KJe=i(L),wm=n(L,"LI",{});var wLe=s(wm);wae=n(wLe,"STRONG",{});var OZr=s(wae);ZJe=r(OZr,"imagegpt"),OZr.forEach(t),eYe=r(wLe," \u2014 "),nR=n(wLe,"A",{href:!0});var VZr=s(nR);oYe=r(VZr,"ImageGPTConfig"),VZr.forEach(t),rYe=r(wLe," (ImageGPT model)"),wLe.forEach(t),tYe=i(L),Am=n(L,"LI",{});var ALe=s(Am);Aae=n(ALe,"STRONG",{});var XZr=s(Aae);aYe=r(XZr,"layoutlm"),XZr.forEach(t),nYe=r(ALe," \u2014 "),sR=n(ALe,"A",{href:!0});var zZr=s(sR);sYe=r(zZr,"LayoutLMConfig"),zZr.forEach(t),lYe=r(ALe," (LayoutLM model)"),ALe.forEach(t),iYe=i(L),Lm=n(L,"LI",{});var LLe=s(Lm);Lae=n(LLe,"STRONG",{});var QZr=s(Lae);dYe=r(QZr,"layoutlmv2"),QZr.forEach(t),cYe=r(LLe," \u2014 "),lR=n(LLe,"A",{href:!0});var WZr=s(lR);fYe=r(WZr,"LayoutLMv2Config"),WZr.forEach(t),mYe=r(LLe," (LayoutLMv2 model)"),LLe.forEach(t),gYe=i(L),ym=n(L,"LI",{});var yLe=s(ym);yae=n(yLe,"STRONG",{});var HZr=s(yae);hYe=r(HZr,"layoutlmv3"),HZr.forEach(t),pYe=r(yLe," \u2014 "),iR=n(yLe,"A",{href:!0});var UZr=s(iR);_Ye=r(UZr,"LayoutLMv3Config"),UZr.forEach(t),uYe=r(yLe," (LayoutLMv3 model)"),yLe.forEach(t),bYe=i(L),xm=n(L,"LI",{});var xLe=s(xm);xae=n(xLe,"STRONG",{});var JZr=s(xae);vYe=r(JZr,"led"),JZr.forEach(t),FYe=r(xLe," \u2014 "),dR=n(xLe,"A",{href:!0});var YZr=s(dR);TYe=r(YZr,"LEDConfig"),YZr.forEach(t),MYe=r(xLe," (LED model)"),xLe.forEach(t),EYe=i(L),$m=n(L,"LI",{});var $Le=s($m);$ae=n($Le,"STRONG",{});var KZr=s($ae);CYe=r(KZr,"levit"),KZr.forEach(t),wYe=r($Le," \u2014 "),cR=n($Le,"A",{href:!0});var ZZr=s(cR);AYe=r(ZZr,"LevitConfig"),ZZr.forEach(t),LYe=r($Le," (LeViT model)"),$Le.forEach(t),yYe=i(L),km=n(L,"LI",{});var kLe=s(km);kae=n(kLe,"STRONG",{});var eet=s(kae);xYe=r(eet,"longformer"),eet.forEach(t),$Ye=r(kLe," \u2014 "),fR=n(kLe,"A",{href:!0});var oet=s(fR);kYe=r(oet,"LongformerConfig"),oet.forEach(t),SYe=r(kLe," (Longformer model)"),kLe.forEach(t),RYe=i(L),Sm=n(L,"LI",{});var SLe=s(Sm);Sae=n(SLe,"STRONG",{});var ret=s(Sae);PYe=r(ret,"longt5"),ret.forEach(t),BYe=r(SLe," \u2014 "),mR=n(SLe,"A",{href:!0});var tet=s(mR);IYe=r(tet,"LongT5Config"),tet.forEach(t),NYe=r(SLe," (LongT5 model)"),SLe.forEach(t),qYe=i(L),Rm=n(L,"LI",{});var RLe=s(Rm);Rae=n(RLe,"STRONG",{});var aet=s(Rae);jYe=r(aet,"luke"),aet.forEach(t),DYe=r(RLe," \u2014 "),gR=n(RLe,"A",{href:!0});var net=s(gR);GYe=r(net,"LukeConfig"),net.forEach(t),OYe=r(RLe," (LUKE model)"),RLe.forEach(t),VYe=i(L),Pm=n(L,"LI",{});var PLe=s(Pm);Pae=n(PLe,"STRONG",{});var set=s(Pae);XYe=r(set,"lxmert"),set.forEach(t),zYe=r(PLe," \u2014 "),hR=n(PLe,"A",{href:!0});var iet=s(hR);QYe=r(iet,"LxmertConfig"),iet.forEach(t),WYe=r(PLe," (LXMERT model)"),PLe.forEach(t),HYe=i(L),Bm=n(L,"LI",{});var BLe=s(Bm);Bae=n(BLe,"STRONG",{});var det=s(Bae);UYe=r(det,"m2m_100"),det.forEach(t),JYe=r(BLe," \u2014 "),pR=n(BLe,"A",{href:!0});var cet=s(pR);YYe=r(cet,"M2M100Config"),cet.forEach(t),KYe=r(BLe," (M2M100 model)"),BLe.forEach(t),ZYe=i(L),Im=n(L,"LI",{});var ILe=s(Im);Iae=n(ILe,"STRONG",{});var fet=s(Iae);eKe=r(fet,"marian"),fet.forEach(t),oKe=r(ILe," \u2014 "),_R=n(ILe,"A",{href:!0});var met=s(_R);rKe=r(met,"MarianConfig"),met.forEach(t),tKe=r(ILe," (Marian model)"),ILe.forEach(t),aKe=i(L),Nm=n(L,"LI",{});var NLe=s(Nm);Nae=n(NLe,"STRONG",{});var get=s(Nae);nKe=r(get,"maskformer"),get.forEach(t),sKe=r(NLe," \u2014 "),uR=n(NLe,"A",{href:!0});var het=s(uR);lKe=r(het,"MaskFormerConfig"),het.forEach(t),iKe=r(NLe," (MaskFormer model)"),NLe.forEach(t),dKe=i(L),qm=n(L,"LI",{});var qLe=s(qm);qae=n(qLe,"STRONG",{});var pet=s(qae);cKe=r(pet,"mbart"),pet.forEach(t),fKe=r(qLe," \u2014 "),bR=n(qLe,"A",{href:!0});var _et=s(bR);mKe=r(_et,"MBartConfig"),_et.forEach(t),gKe=r(qLe," (mBART model)"),qLe.forEach(t),hKe=i(L),jm=n(L,"LI",{});var jLe=s(jm);jae=n(jLe,"STRONG",{});var uet=s(jae);pKe=r(uet,"mctct"),uet.forEach(t),_Ke=r(jLe," \u2014 "),vR=n(jLe,"A",{href:!0});var bet=s(vR);uKe=r(bet,"MCTCTConfig"),bet.forEach(t),bKe=r(jLe," (M-CTC-T model)"),jLe.forEach(t),vKe=i(L),Dm=n(L,"LI",{});var DLe=s(Dm);Dae=n(DLe,"STRONG",{});var vet=s(Dae);FKe=r(vet,"megatron-bert"),vet.forEach(t),TKe=r(DLe," \u2014 "),FR=n(DLe,"A",{href:!0});var Fet=s(FR);MKe=r(Fet,"MegatronBertConfig"),Fet.forEach(t),EKe=r(DLe," (Megatron-BERT model)"),DLe.forEach(t),CKe=i(L),Gm=n(L,"LI",{});var GLe=s(Gm);Gae=n(GLe,"STRONG",{});var Tet=s(Gae);wKe=r(Tet,"mobilebert"),Tet.forEach(t),AKe=r(GLe," \u2014 "),TR=n(GLe,"A",{href:!0});var Met=s(TR);LKe=r(Met,"MobileBertConfig"),Met.forEach(t),yKe=r(GLe," (MobileBERT model)"),GLe.forEach(t),xKe=i(L),Om=n(L,"LI",{});var OLe=s(Om);Oae=n(OLe,"STRONG",{});var Eet=s(Oae);$Ke=r(Eet,"mpnet"),Eet.forEach(t),kKe=r(OLe," \u2014 "),MR=n(OLe,"A",{href:!0});var Cet=s(MR);SKe=r(Cet,"MPNetConfig"),Cet.forEach(t),RKe=r(OLe," (MPNet model)"),OLe.forEach(t),PKe=i(L),Vm=n(L,"LI",{});var VLe=s(Vm);Vae=n(VLe,"STRONG",{});var wet=s(Vae);BKe=r(wet,"mt5"),wet.forEach(t),IKe=r(VLe," \u2014 "),ER=n(VLe,"A",{href:!0});var Aet=s(ER);NKe=r(Aet,"MT5Config"),Aet.forEach(t),qKe=r(VLe," (MT5 model)"),VLe.forEach(t),jKe=i(L),Xm=n(L,"LI",{});var XLe=s(Xm);Xae=n(XLe,"STRONG",{});var Let=s(Xae);DKe=r(Let,"nezha"),Let.forEach(t),GKe=r(XLe," \u2014 "),CR=n(XLe,"A",{href:!0});var yet=s(CR);OKe=r(yet,"NezhaConfig"),yet.forEach(t),VKe=r(XLe," (Nezha model)"),XLe.forEach(t),XKe=i(L),zm=n(L,"LI",{});var zLe=s(zm);zae=n(zLe,"STRONG",{});var xet=s(zae);zKe=r(xet,"nystromformer"),xet.forEach(t),QKe=r(zLe," \u2014 "),wR=n(zLe,"A",{href:!0});var $et=s(wR);WKe=r($et,"NystromformerConfig"),$et.forEach(t),HKe=r(zLe," (Nystr\xF6mformer model)"),zLe.forEach(t),UKe=i(L),Qm=n(L,"LI",{});var QLe=s(Qm);Qae=n(QLe,"STRONG",{});var ket=s(Qae);JKe=r(ket,"openai-gpt"),ket.forEach(t),YKe=r(QLe," \u2014 "),AR=n(QLe,"A",{href:!0});var Set=s(AR);KKe=r(Set,"OpenAIGPTConfig"),Set.forEach(t),ZKe=r(QLe," (OpenAI GPT model)"),QLe.forEach(t),eZe=i(L),Wm=n(L,"LI",{});var WLe=s(Wm);Wae=n(WLe,"STRONG",{});var Ret=s(Wae);oZe=r(Ret,"opt"),Ret.forEach(t),rZe=r(WLe," \u2014 "),LR=n(WLe,"A",{href:!0});var Pet=s(LR);tZe=r(Pet,"OPTConfig"),Pet.forEach(t),aZe=r(WLe," (OPT model)"),WLe.forEach(t),nZe=i(L),Hm=n(L,"LI",{});var HLe=s(Hm);Hae=n(HLe,"STRONG",{});var Bet=s(Hae);sZe=r(Bet,"pegasus"),Bet.forEach(t),lZe=r(HLe," \u2014 "),yR=n(HLe,"A",{href:!0});var Iet=s(yR);iZe=r(Iet,"PegasusConfig"),Iet.forEach(t),dZe=r(HLe," (Pegasus model)"),HLe.forEach(t),cZe=i(L),Um=n(L,"LI",{});var ULe=s(Um);Uae=n(ULe,"STRONG",{});var Net=s(Uae);fZe=r(Net,"perceiver"),Net.forEach(t),mZe=r(ULe," \u2014 "),xR=n(ULe,"A",{href:!0});var qet=s(xR);gZe=r(qet,"PerceiverConfig"),qet.forEach(t),hZe=r(ULe," (Perceiver model)"),ULe.forEach(t),pZe=i(L),Jm=n(L,"LI",{});var JLe=s(Jm);Jae=n(JLe,"STRONG",{});var jet=s(Jae);_Ze=r(jet,"plbart"),jet.forEach(t),uZe=r(JLe," \u2014 "),$R=n(JLe,"A",{href:!0});var Det=s($R);bZe=r(Det,"PLBartConfig"),Det.forEach(t),vZe=r(JLe," (PLBart model)"),JLe.forEach(t),FZe=i(L),Ym=n(L,"LI",{});var YLe=s(Ym);Yae=n(YLe,"STRONG",{});var Get=s(Yae);TZe=r(Get,"poolformer"),Get.forEach(t),MZe=r(YLe," \u2014 "),kR=n(YLe,"A",{href:!0});var Oet=s(kR);EZe=r(Oet,"PoolFormerConfig"),Oet.forEach(t),CZe=r(YLe," (PoolFormer model)"),YLe.forEach(t),wZe=i(L),Km=n(L,"LI",{});var KLe=s(Km);Kae=n(KLe,"STRONG",{});var Vet=s(Kae);AZe=r(Vet,"prophetnet"),Vet.forEach(t),LZe=r(KLe," \u2014 "),SR=n(KLe,"A",{href:!0});var Xet=s(SR);yZe=r(Xet,"ProphetNetConfig"),Xet.forEach(t),xZe=r(KLe," (ProphetNet model)"),KLe.forEach(t),$Ze=i(L),Zm=n(L,"LI",{});var ZLe=s(Zm);Zae=n(ZLe,"STRONG",{});var zet=s(Zae);kZe=r(zet,"qdqbert"),zet.forEach(t),SZe=r(ZLe," \u2014 "),RR=n(ZLe,"A",{href:!0});var Qet=s(RR);RZe=r(Qet,"QDQBertConfig"),Qet.forEach(t),PZe=r(ZLe," (QDQBert model)"),ZLe.forEach(t),BZe=i(L),eg=n(L,"LI",{});var e7e=s(eg);ene=n(e7e,"STRONG",{});var Wet=s(ene);IZe=r(Wet,"rag"),Wet.forEach(t),NZe=r(e7e," \u2014 "),PR=n(e7e,"A",{href:!0});var Het=s(PR);qZe=r(Het,"RagConfig"),Het.forEach(t),jZe=r(e7e," (RAG model)"),e7e.forEach(t),DZe=i(L),og=n(L,"LI",{});var o7e=s(og);one=n(o7e,"STRONG",{});var Uet=s(one);GZe=r(Uet,"realm"),Uet.forEach(t),OZe=r(o7e," \u2014 "),BR=n(o7e,"A",{href:!0});var Jet=s(BR);VZe=r(Jet,"RealmConfig"),Jet.forEach(t),XZe=r(o7e," (REALM model)"),o7e.forEach(t),zZe=i(L),rg=n(L,"LI",{});var r7e=s(rg);rne=n(r7e,"STRONG",{});var Yet=s(rne);QZe=r(Yet,"reformer"),Yet.forEach(t),WZe=r(r7e," \u2014 "),IR=n(r7e,"A",{href:!0});var Ket=s(IR);HZe=r(Ket,"ReformerConfig"),Ket.forEach(t),UZe=r(r7e," (Reformer model)"),r7e.forEach(t),JZe=i(L),tg=n(L,"LI",{});var t7e=s(tg);tne=n(t7e,"STRONG",{});var Zet=s(tne);YZe=r(Zet,"regnet"),Zet.forEach(t),KZe=r(t7e," \u2014 "),NR=n(t7e,"A",{href:!0});var eot=s(NR);ZZe=r(eot,"RegNetConfig"),eot.forEach(t),eeo=r(t7e," (RegNet model)"),t7e.forEach(t),oeo=i(L),ag=n(L,"LI",{});var a7e=s(ag);ane=n(a7e,"STRONG",{});var oot=s(ane);reo=r(oot,"rembert"),oot.forEach(t),teo=r(a7e," \u2014 "),qR=n(a7e,"A",{href:!0});var rot=s(qR);aeo=r(rot,"RemBertConfig"),rot.forEach(t),neo=r(a7e," (RemBERT model)"),a7e.forEach(t),seo=i(L),ng=n(L,"LI",{});var n7e=s(ng);nne=n(n7e,"STRONG",{});var tot=s(nne);leo=r(tot,"resnet"),tot.forEach(t),ieo=r(n7e," \u2014 "),jR=n(n7e,"A",{href:!0});var aot=s(jR);deo=r(aot,"ResNetConfig"),aot.forEach(t),ceo=r(n7e," (ResNet model)"),n7e.forEach(t),feo=i(L),sg=n(L,"LI",{});var s7e=s(sg);sne=n(s7e,"STRONG",{});var not=s(sne);meo=r(not,"retribert"),not.forEach(t),geo=r(s7e," \u2014 "),DR=n(s7e,"A",{href:!0});var sot=s(DR);heo=r(sot,"RetriBertConfig"),sot.forEach(t),peo=r(s7e," (RetriBERT model)"),s7e.forEach(t),_eo=i(L),lg=n(L,"LI",{});var l7e=s(lg);lne=n(l7e,"STRONG",{});var lot=s(lne);ueo=r(lot,"roberta"),lot.forEach(t),beo=r(l7e," \u2014 "),GR=n(l7e,"A",{href:!0});var iot=s(GR);veo=r(iot,"RobertaConfig"),iot.forEach(t),Feo=r(l7e," (RoBERTa model)"),l7e.forEach(t),Teo=i(L),ig=n(L,"LI",{});var i7e=s(ig);ine=n(i7e,"STRONG",{});var dot=s(ine);Meo=r(dot,"roformer"),dot.forEach(t),Eeo=r(i7e," \u2014 "),OR=n(i7e,"A",{href:!0});var cot=s(OR);Ceo=r(cot,"RoFormerConfig"),cot.forEach(t),weo=r(i7e," (RoFormer model)"),i7e.forEach(t),Aeo=i(L),dg=n(L,"LI",{});var d7e=s(dg);dne=n(d7e,"STRONG",{});var fot=s(dne);Leo=r(fot,"segformer"),fot.forEach(t),yeo=r(d7e," \u2014 "),VR=n(d7e,"A",{href:!0});var mot=s(VR);xeo=r(mot,"SegformerConfig"),mot.forEach(t),$eo=r(d7e," (SegFormer model)"),d7e.forEach(t),keo=i(L),cg=n(L,"LI",{});var c7e=s(cg);cne=n(c7e,"STRONG",{});var got=s(cne);Seo=r(got,"sew"),got.forEach(t),Reo=r(c7e," \u2014 "),XR=n(c7e,"A",{href:!0});var hot=s(XR);Peo=r(hot,"SEWConfig"),hot.forEach(t),Beo=r(c7e," (SEW model)"),c7e.forEach(t),Ieo=i(L),fg=n(L,"LI",{});var f7e=s(fg);fne=n(f7e,"STRONG",{});var pot=s(fne);Neo=r(pot,"sew-d"),pot.forEach(t),qeo=r(f7e," \u2014 "),zR=n(f7e,"A",{href:!0});var _ot=s(zR);jeo=r(_ot,"SEWDConfig"),_ot.forEach(t),Deo=r(f7e," (SEW-D model)"),f7e.forEach(t),Geo=i(L),mg=n(L,"LI",{});var m7e=s(mg);mne=n(m7e,"STRONG",{});var uot=s(mne);Oeo=r(uot,"speech-encoder-decoder"),uot.forEach(t),Veo=r(m7e," \u2014 "),QR=n(m7e,"A",{href:!0});var bot=s(QR);Xeo=r(bot,"SpeechEncoderDecoderConfig"),bot.forEach(t),zeo=r(m7e," (Speech Encoder decoder model)"),m7e.forEach(t),Qeo=i(L),gg=n(L,"LI",{});var g7e=s(gg);gne=n(g7e,"STRONG",{});var vot=s(gne);Weo=r(vot,"speech_to_text"),vot.forEach(t),Heo=r(g7e," \u2014 "),WR=n(g7e,"A",{href:!0});var Fot=s(WR);Ueo=r(Fot,"Speech2TextConfig"),Fot.forEach(t),Jeo=r(g7e," (Speech2Text model)"),g7e.forEach(t),Yeo=i(L),hg=n(L,"LI",{});var h7e=s(hg);hne=n(h7e,"STRONG",{});var Tot=s(hne);Keo=r(Tot,"speech_to_text_2"),Tot.forEach(t),Zeo=r(h7e," \u2014 "),HR=n(h7e,"A",{href:!0});var Mot=s(HR);eoo=r(Mot,"Speech2Text2Config"),Mot.forEach(t),ooo=r(h7e," (Speech2Text2 model)"),h7e.forEach(t),roo=i(L),pg=n(L,"LI",{});var p7e=s(pg);pne=n(p7e,"STRONG",{});var Eot=s(pne);too=r(Eot,"splinter"),Eot.forEach(t),aoo=r(p7e," \u2014 "),UR=n(p7e,"A",{href:!0});var Cot=s(UR);noo=r(Cot,"SplinterConfig"),Cot.forEach(t),soo=r(p7e," (Splinter model)"),p7e.forEach(t),loo=i(L),_g=n(L,"LI",{});var _7e=s(_g);_ne=n(_7e,"STRONG",{});var wot=s(_ne);ioo=r(wot,"squeezebert"),wot.forEach(t),doo=r(_7e," \u2014 "),JR=n(_7e,"A",{href:!0});var Aot=s(JR);coo=r(Aot,"SqueezeBertConfig"),Aot.forEach(t),foo=r(_7e," (SqueezeBERT model)"),_7e.forEach(t),moo=i(L),ug=n(L,"LI",{});var u7e=s(ug);une=n(u7e,"STRONG",{});var Lot=s(une);goo=r(Lot,"swin"),Lot.forEach(t),hoo=r(u7e," \u2014 "),YR=n(u7e,"A",{href:!0});var yot=s(YR);poo=r(yot,"SwinConfig"),yot.forEach(t),_oo=r(u7e," (Swin Transformer model)"),u7e.forEach(t),uoo=i(L),bg=n(L,"LI",{});var b7e=s(bg);bne=n(b7e,"STRONG",{});var xot=s(bne);boo=r(xot,"t5"),xot.forEach(t),voo=r(b7e," \u2014 "),KR=n(b7e,"A",{href:!0});var $ot=s(KR);Foo=r($ot,"T5Config"),$ot.forEach(t),Too=r(b7e," (T5 model)"),b7e.forEach(t),Moo=i(L),vg=n(L,"LI",{});var v7e=s(vg);vne=n(v7e,"STRONG",{});var kot=s(vne);Eoo=r(kot,"tapas"),kot.forEach(t),Coo=r(v7e," \u2014 "),ZR=n(v7e,"A",{href:!0});var Sot=s(ZR);woo=r(Sot,"TapasConfig"),Sot.forEach(t),Aoo=r(v7e," (TAPAS model)"),v7e.forEach(t),Loo=i(L),Fg=n(L,"LI",{});var F7e=s(Fg);Fne=n(F7e,"STRONG",{});var Rot=s(Fne);yoo=r(Rot,"trajectory_transformer"),Rot.forEach(t),xoo=r(F7e," \u2014 "),eP=n(F7e,"A",{href:!0});var Pot=s(eP);$oo=r(Pot,"TrajectoryTransformerConfig"),Pot.forEach(t),koo=r(F7e," (Trajectory Transformer model)"),F7e.forEach(t),Soo=i(L),Tg=n(L,"LI",{});var T7e=s(Tg);Tne=n(T7e,"STRONG",{});var Bot=s(Tne);Roo=r(Bot,"transfo-xl"),Bot.forEach(t),Poo=r(T7e," \u2014 "),oP=n(T7e,"A",{href:!0});var Iot=s(oP);Boo=r(Iot,"TransfoXLConfig"),Iot.forEach(t),Ioo=r(T7e," (Transformer-XL model)"),T7e.forEach(t),Noo=i(L),Mg=n(L,"LI",{});var M7e=s(Mg);Mne=n(M7e,"STRONG",{});var Not=s(Mne);qoo=r(Not,"trocr"),Not.forEach(t),joo=r(M7e," \u2014 "),rP=n(M7e,"A",{href:!0});var qot=s(rP);Doo=r(qot,"TrOCRConfig"),qot.forEach(t),Goo=r(M7e," (TrOCR model)"),M7e.forEach(t),Ooo=i(L),Eg=n(L,"LI",{});var E7e=s(Eg);Ene=n(E7e,"STRONG",{});var jot=s(Ene);Voo=r(jot,"unispeech"),jot.forEach(t),Xoo=r(E7e," \u2014 "),tP=n(E7e,"A",{href:!0});var Dot=s(tP);zoo=r(Dot,"UniSpeechConfig"),Dot.forEach(t),Qoo=r(E7e," (UniSpeech model)"),E7e.forEach(t),Woo=i(L),Cg=n(L,"LI",{});var C7e=s(Cg);Cne=n(C7e,"STRONG",{});var Got=s(Cne);Hoo=r(Got,"unispeech-sat"),Got.forEach(t),Uoo=r(C7e," \u2014 "),aP=n(C7e,"A",{href:!0});var Oot=s(aP);Joo=r(Oot,"UniSpeechSatConfig"),Oot.forEach(t),Yoo=r(C7e," (UniSpeechSat model)"),C7e.forEach(t),Koo=i(L),wg=n(L,"LI",{});var w7e=s(wg);wne=n(w7e,"STRONG",{});var Vot=s(wne);Zoo=r(Vot,"van"),Vot.forEach(t),ero=r(w7e," \u2014 "),nP=n(w7e,"A",{href:!0});var Xot=s(nP);oro=r(Xot,"VanConfig"),Xot.forEach(t),rro=r(w7e," (VAN model)"),w7e.forEach(t),tro=i(L),Ag=n(L,"LI",{});var A7e=s(Ag);Ane=n(A7e,"STRONG",{});var zot=s(Ane);aro=r(zot,"vilt"),zot.forEach(t),nro=r(A7e," \u2014 "),sP=n(A7e,"A",{href:!0});var Qot=s(sP);sro=r(Qot,"ViltConfig"),Qot.forEach(t),lro=r(A7e," (ViLT model)"),A7e.forEach(t),iro=i(L),Lg=n(L,"LI",{});var L7e=s(Lg);Lne=n(L7e,"STRONG",{});var Wot=s(Lne);dro=r(Wot,"vision-encoder-decoder"),Wot.forEach(t),cro=r(L7e," \u2014 "),lP=n(L7e,"A",{href:!0});var Hot=s(lP);fro=r(Hot,"VisionEncoderDecoderConfig"),Hot.forEach(t),mro=r(L7e," (Vision Encoder decoder model)"),L7e.forEach(t),gro=i(L),yg=n(L,"LI",{});var y7e=s(yg);yne=n(y7e,"STRONG",{});var Uot=s(yne);hro=r(Uot,"vision-text-dual-encoder"),Uot.forEach(t),pro=r(y7e," \u2014 "),iP=n(y7e,"A",{href:!0});var Jot=s(iP);_ro=r(Jot,"VisionTextDualEncoderConfig"),Jot.forEach(t),uro=r(y7e," (VisionTextDualEncoder model)"),y7e.forEach(t),bro=i(L),xg=n(L,"LI",{});var x7e=s(xg);xne=n(x7e,"STRONG",{});var Yot=s(xne);vro=r(Yot,"visual_bert"),Yot.forEach(t),Fro=r(x7e," \u2014 "),dP=n(x7e,"A",{href:!0});var Kot=s(dP);Tro=r(Kot,"VisualBertConfig"),Kot.forEach(t),Mro=r(x7e," (VisualBERT model)"),x7e.forEach(t),Ero=i(L),$g=n(L,"LI",{});var $7e=s($g);$ne=n($7e,"STRONG",{});var Zot=s($ne);Cro=r(Zot,"vit"),Zot.forEach(t),wro=r($7e," \u2014 "),cP=n($7e,"A",{href:!0});var ert=s(cP);Aro=r(ert,"ViTConfig"),ert.forEach(t),Lro=r($7e," (ViT model)"),$7e.forEach(t),yro=i(L),kg=n(L,"LI",{});var k7e=s(kg);kne=n(k7e,"STRONG",{});var ort=s(kne);xro=r(ort,"vit_mae"),ort.forEach(t),$ro=r(k7e," \u2014 "),fP=n(k7e,"A",{href:!0});var rrt=s(fP);kro=r(rrt,"ViTMAEConfig"),rrt.forEach(t),Sro=r(k7e," (ViTMAE model)"),k7e.forEach(t),Rro=i(L),Sg=n(L,"LI",{});var S7e=s(Sg);Sne=n(S7e,"STRONG",{});var trt=s(Sne);Pro=r(trt,"wav2vec2"),trt.forEach(t),Bro=r(S7e," \u2014 "),mP=n(S7e,"A",{href:!0});var art=s(mP);Iro=r(art,"Wav2Vec2Config"),art.forEach(t),Nro=r(S7e," (Wav2Vec2 model)"),S7e.forEach(t),qro=i(L),Rg=n(L,"LI",{});var R7e=s(Rg);Rne=n(R7e,"STRONG",{});var nrt=s(Rne);jro=r(nrt,"wav2vec2-conformer"),nrt.forEach(t),Dro=r(R7e," \u2014 "),gP=n(R7e,"A",{href:!0});var srt=s(gP);Gro=r(srt,"Wav2Vec2ConformerConfig"),srt.forEach(t),Oro=r(R7e," (Wav2Vec2-Conformer model)"),R7e.forEach(t),Vro=i(L),Pg=n(L,"LI",{});var P7e=s(Pg);Pne=n(P7e,"STRONG",{});var lrt=s(Pne);Xro=r(lrt,"wavlm"),lrt.forEach(t),zro=r(P7e," \u2014 "),hP=n(P7e,"A",{href:!0});var irt=s(hP);Qro=r(irt,"WavLMConfig"),irt.forEach(t),Wro=r(P7e," (WavLM model)"),P7e.forEach(t),Hro=i(L),Bg=n(L,"LI",{});var B7e=s(Bg);Bne=n(B7e,"STRONG",{});var drt=s(Bne);Uro=r(drt,"xglm"),drt.forEach(t),Jro=r(B7e," \u2014 "),pP=n(B7e,"A",{href:!0});var crt=s(pP);Yro=r(crt,"XGLMConfig"),crt.forEach(t),Kro=r(B7e," (XGLM model)"),B7e.forEach(t),Zro=i(L),Ig=n(L,"LI",{});var I7e=s(Ig);Ine=n(I7e,"STRONG",{});var frt=s(Ine);eto=r(frt,"xlm"),frt.forEach(t),oto=r(I7e," \u2014 "),_P=n(I7e,"A",{href:!0});var mrt=s(_P);rto=r(mrt,"XLMConfig"),mrt.forEach(t),tto=r(I7e," (XLM model)"),I7e.forEach(t),ato=i(L),Ng=n(L,"LI",{});var N7e=s(Ng);Nne=n(N7e,"STRONG",{});var grt=s(Nne);nto=r(grt,"xlm-prophetnet"),grt.forEach(t),sto=r(N7e," \u2014 "),uP=n(N7e,"A",{href:!0});var hrt=s(uP);lto=r(hrt,"XLMProphetNetConfig"),hrt.forEach(t),ito=r(N7e," (XLM-ProphetNet model)"),N7e.forEach(t),dto=i(L),qg=n(L,"LI",{});var q7e=s(qg);qne=n(q7e,"STRONG",{});var prt=s(qne);cto=r(prt,"xlm-roberta"),prt.forEach(t),fto=r(q7e," \u2014 "),bP=n(q7e,"A",{href:!0});var _rt=s(bP);mto=r(_rt,"XLMRobertaConfig"),_rt.forEach(t),gto=r(q7e," (XLM-RoBERTa model)"),q7e.forEach(t),hto=i(L),jg=n(L,"LI",{});var j7e=s(jg);jne=n(j7e,"STRONG",{});var urt=s(jne);pto=r(urt,"xlm-roberta-xl"),urt.forEach(t),_to=r(j7e," \u2014 "),vP=n(j7e,"A",{href:!0});var brt=s(vP);uto=r(brt,"XLMRobertaXLConfig"),brt.forEach(t),bto=r(j7e," (XLM-RoBERTa-XL model)"),j7e.forEach(t),vto=i(L),Dg=n(L,"LI",{});var D7e=s(Dg);Dne=n(D7e,"STRONG",{});var vrt=s(Dne);Fto=r(vrt,"xlnet"),vrt.forEach(t),Tto=r(D7e," \u2014 "),FP=n(D7e,"A",{href:!0});var Frt=s(FP);Mto=r(Frt,"XLNetConfig"),Frt.forEach(t),Eto=r(D7e," (XLNet model)"),D7e.forEach(t),Cto=i(L),Gg=n(L,"LI",{});var G7e=s(Gg);Gne=n(G7e,"STRONG",{});var Trt=s(Gne);wto=r(Trt,"yolos"),Trt.forEach(t),Ato=r(G7e," \u2014 "),TP=n(G7e,"A",{href:!0});var Mrt=s(TP);Lto=r(Mrt,"YolosConfig"),Mrt.forEach(t),yto=r(G7e," (YOLOS model)"),G7e.forEach(t),xto=i(L),Og=n(L,"LI",{});var O7e=s(Og);One=n(O7e,"STRONG",{});var Ert=s(One);$to=r(Ert,"yoso"),Ert.forEach(t),kto=r(O7e," \u2014 "),MP=n(O7e,"A",{href:!0});var Crt=s(MP);Sto=r(Crt,"YosoConfig"),Crt.forEach(t),Rto=r(O7e," (YOSO model)"),O7e.forEach(t),L.forEach(t),Pto=i(tt),T(Vg.$$.fragment,tt),tt.forEach(t),Bto=i(rt),Xg=n(rt,"DIV",{class:!0});var _Xe=s(Xg);T(O7.$$.fragment,_Xe),Ito=i(_Xe),Vne=n(_Xe,"P",{});var wrt=s(Vne);Nto=r(wrt,"Register a new configuration for this class."),wrt.forEach(t),_Xe.forEach(t),rt.forEach(t),uOe=i(f),Si=n(f,"H2",{class:!0});var uXe=s(Si);zg=n(uXe,"A",{id:!0,class:!0,href:!0});var Art=s(zg);Xne=n(Art,"SPAN",{});var Lrt=s(Xne);T(V7.$$.fragment,Lrt),Lrt.forEach(t),Art.forEach(t),qto=i(uXe),zne=n(uXe,"SPAN",{});var yrt=s(zne);jto=r(yrt,"AutoTokenizer"),yrt.forEach(t),uXe.forEach(t),bOe=i(f),Ao=n(f,"DIV",{class:!0});var Hs=s(Ao);T(X7.$$.fragment,Hs),Dto=i(Hs),z7=n(Hs,"P",{});var bXe=s(z7);Gto=r(bXe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),EP=n(bXe,"A",{href:!0});var xrt=s(EP);Oto=r(xrt,"AutoTokenizer.from_pretrained()"),xrt.forEach(t),Vto=r(bXe," class method."),bXe.forEach(t),Xto=i(Hs),Q7=n(Hs,"P",{});var vXe=s(Q7);zto=r(vXe,"This class cannot be instantiated directly using "),Qne=n(vXe,"CODE",{});var $rt=s(Qne);Qto=r($rt,"__init__()"),$rt.forEach(t),Wto=r(vXe," (throws an error)."),vXe.forEach(t),Hto=i(Hs),Lr=n(Hs,"DIV",{class:!0});var Us=s(Lr);T(W7.$$.fragment,Us),Uto=i(Us),Wne=n(Us,"P",{});var krt=s(Wne);Jto=r(krt,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),krt.forEach(t),Yto=i(Us),ka=n(Us,"P",{});var BA=s(ka);Kto=r(BA,"The tokenizer class to instantiate is selected based on the "),Hne=n(BA,"CODE",{});var Srt=s(Hne);Zto=r(Srt,"model_type"),Srt.forEach(t),eao=r(BA,` property of the config object (either
passed as an argument or loaded from `),Une=n(BA,"CODE",{});var Rrt=s(Une);oao=r(Rrt,"pretrained_model_name_or_path"),Rrt.forEach(t),rao=r(BA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jne=n(BA,"CODE",{});var Prt=s(Jne);tao=r(Prt,"pretrained_model_name_or_path"),Prt.forEach(t),aao=r(BA,":"),BA.forEach(t),nao=i(Us),k=n(Us,"UL",{});var S=s(k);qn=n(S,"LI",{});var Z$=s(qn);Yne=n(Z$,"STRONG",{});var Brt=s(Yne);sao=r(Brt,"albert"),Brt.forEach(t),lao=r(Z$," \u2014 "),CP=n(Z$,"A",{href:!0});var Irt=s(CP);iao=r(Irt,"AlbertTokenizer"),Irt.forEach(t),dao=r(Z$," or "),wP=n(Z$,"A",{href:!0});var Nrt=s(wP);cao=r(Nrt,"AlbertTokenizerFast"),Nrt.forEach(t),fao=r(Z$," (ALBERT model)"),Z$.forEach(t),mao=i(S),jn=n(S,"LI",{});var ek=s(jn);Kne=n(ek,"STRONG",{});var qrt=s(Kne);gao=r(qrt,"bart"),qrt.forEach(t),hao=r(ek," \u2014 "),AP=n(ek,"A",{href:!0});var jrt=s(AP);pao=r(jrt,"BartTokenizer"),jrt.forEach(t),_ao=r(ek," or "),LP=n(ek,"A",{href:!0});var Drt=s(LP);uao=r(Drt,"BartTokenizerFast"),Drt.forEach(t),bao=r(ek," (BART model)"),ek.forEach(t),vao=i(S),Dn=n(S,"LI",{});var ok=s(Dn);Zne=n(ok,"STRONG",{});var Grt=s(Zne);Fao=r(Grt,"barthez"),Grt.forEach(t),Tao=r(ok," \u2014 "),yP=n(ok,"A",{href:!0});var Ort=s(yP);Mao=r(Ort,"BarthezTokenizer"),Ort.forEach(t),Eao=r(ok," or "),xP=n(ok,"A",{href:!0});var Vrt=s(xP);Cao=r(Vrt,"BarthezTokenizerFast"),Vrt.forEach(t),wao=r(ok," (BARThez model)"),ok.forEach(t),Aao=i(S),Qg=n(S,"LI",{});var V7e=s(Qg);ese=n(V7e,"STRONG",{});var Xrt=s(ese);Lao=r(Xrt,"bartpho"),Xrt.forEach(t),yao=r(V7e," \u2014 "),$P=n(V7e,"A",{href:!0});var zrt=s($P);xao=r(zrt,"BartphoTokenizer"),zrt.forEach(t),$ao=r(V7e," (BARTpho model)"),V7e.forEach(t),kao=i(S),Gn=n(S,"LI",{});var rk=s(Gn);ose=n(rk,"STRONG",{});var Qrt=s(ose);Sao=r(Qrt,"bert"),Qrt.forEach(t),Rao=r(rk," \u2014 "),kP=n(rk,"A",{href:!0});var Wrt=s(kP);Pao=r(Wrt,"BertTokenizer"),Wrt.forEach(t),Bao=r(rk," or "),SP=n(rk,"A",{href:!0});var Hrt=s(SP);Iao=r(Hrt,"BertTokenizerFast"),Hrt.forEach(t),Nao=r(rk," (BERT model)"),rk.forEach(t),qao=i(S),Wg=n(S,"LI",{});var X7e=s(Wg);rse=n(X7e,"STRONG",{});var Urt=s(rse);jao=r(Urt,"bert-generation"),Urt.forEach(t),Dao=r(X7e," \u2014 "),RP=n(X7e,"A",{href:!0});var Jrt=s(RP);Gao=r(Jrt,"BertGenerationTokenizer"),Jrt.forEach(t),Oao=r(X7e," (Bert Generation model)"),X7e.forEach(t),Vao=i(S),Hg=n(S,"LI",{});var z7e=s(Hg);tse=n(z7e,"STRONG",{});var Yrt=s(tse);Xao=r(Yrt,"bert-japanese"),Yrt.forEach(t),zao=r(z7e," \u2014 "),PP=n(z7e,"A",{href:!0});var Krt=s(PP);Qao=r(Krt,"BertJapaneseTokenizer"),Krt.forEach(t),Wao=r(z7e," (BertJapanese model)"),z7e.forEach(t),Hao=i(S),Ug=n(S,"LI",{});var Q7e=s(Ug);ase=n(Q7e,"STRONG",{});var Zrt=s(ase);Uao=r(Zrt,"bertweet"),Zrt.forEach(t),Jao=r(Q7e," \u2014 "),BP=n(Q7e,"A",{href:!0});var ett=s(BP);Yao=r(ett,"BertweetTokenizer"),ett.forEach(t),Kao=r(Q7e," (BERTweet model)"),Q7e.forEach(t),Zao=i(S),On=n(S,"LI",{});var tk=s(On);nse=n(tk,"STRONG",{});var ott=s(nse);eno=r(ott,"big_bird"),ott.forEach(t),ono=r(tk," \u2014 "),IP=n(tk,"A",{href:!0});var rtt=s(IP);rno=r(rtt,"BigBirdTokenizer"),rtt.forEach(t),tno=r(tk," or "),NP=n(tk,"A",{href:!0});var ttt=s(NP);ano=r(ttt,"BigBirdTokenizerFast"),ttt.forEach(t),nno=r(tk," (BigBird model)"),tk.forEach(t),sno=i(S),Vn=n(S,"LI",{});var ak=s(Vn);sse=n(ak,"STRONG",{});var att=s(sse);lno=r(att,"bigbird_pegasus"),att.forEach(t),ino=r(ak," \u2014 "),qP=n(ak,"A",{href:!0});var ntt=s(qP);dno=r(ntt,"PegasusTokenizer"),ntt.forEach(t),cno=r(ak," or "),jP=n(ak,"A",{href:!0});var stt=s(jP);fno=r(stt,"PegasusTokenizerFast"),stt.forEach(t),mno=r(ak," (BigBird-Pegasus model)"),ak.forEach(t),gno=i(S),Xn=n(S,"LI",{});var nk=s(Xn);lse=n(nk,"STRONG",{});var ltt=s(lse);hno=r(ltt,"blenderbot"),ltt.forEach(t),pno=r(nk," \u2014 "),DP=n(nk,"A",{href:!0});var itt=s(DP);_no=r(itt,"BlenderbotTokenizer"),itt.forEach(t),uno=r(nk," or "),GP=n(nk,"A",{href:!0});var dtt=s(GP);bno=r(dtt,"BlenderbotTokenizerFast"),dtt.forEach(t),vno=r(nk," (Blenderbot model)"),nk.forEach(t),Fno=i(S),Jg=n(S,"LI",{});var W7e=s(Jg);ise=n(W7e,"STRONG",{});var ctt=s(ise);Tno=r(ctt,"blenderbot-small"),ctt.forEach(t),Mno=r(W7e," \u2014 "),OP=n(W7e,"A",{href:!0});var ftt=s(OP);Eno=r(ftt,"BlenderbotSmallTokenizer"),ftt.forEach(t),Cno=r(W7e," (BlenderbotSmall model)"),W7e.forEach(t),wno=i(S),Yg=n(S,"LI",{});var H7e=s(Yg);dse=n(H7e,"STRONG",{});var mtt=s(dse);Ano=r(mtt,"bloom"),mtt.forEach(t),Lno=r(H7e," \u2014 "),VP=n(H7e,"A",{href:!0});var gtt=s(VP);yno=r(gtt,"BloomTokenizerFast"),gtt.forEach(t),xno=r(H7e," (BLOOM model)"),H7e.forEach(t),$no=i(S),Kg=n(S,"LI",{});var U7e=s(Kg);cse=n(U7e,"STRONG",{});var htt=s(cse);kno=r(htt,"byt5"),htt.forEach(t),Sno=r(U7e," \u2014 "),XP=n(U7e,"A",{href:!0});var ptt=s(XP);Rno=r(ptt,"ByT5Tokenizer"),ptt.forEach(t),Pno=r(U7e," (ByT5 model)"),U7e.forEach(t),Bno=i(S),zn=n(S,"LI",{});var sk=s(zn);fse=n(sk,"STRONG",{});var _tt=s(fse);Ino=r(_tt,"camembert"),_tt.forEach(t),Nno=r(sk," \u2014 "),zP=n(sk,"A",{href:!0});var utt=s(zP);qno=r(utt,"CamembertTokenizer"),utt.forEach(t),jno=r(sk," or "),QP=n(sk,"A",{href:!0});var btt=s(QP);Dno=r(btt,"CamembertTokenizerFast"),btt.forEach(t),Gno=r(sk," (CamemBERT model)"),sk.forEach(t),Ono=i(S),Zg=n(S,"LI",{});var J7e=s(Zg);mse=n(J7e,"STRONG",{});var vtt=s(mse);Vno=r(vtt,"canine"),vtt.forEach(t),Xno=r(J7e," \u2014 "),WP=n(J7e,"A",{href:!0});var Ftt=s(WP);zno=r(Ftt,"CanineTokenizer"),Ftt.forEach(t),Qno=r(J7e," (CANINE model)"),J7e.forEach(t),Wno=i(S),Qn=n(S,"LI",{});var lk=s(Qn);gse=n(lk,"STRONG",{});var Ttt=s(gse);Hno=r(Ttt,"clip"),Ttt.forEach(t),Uno=r(lk," \u2014 "),HP=n(lk,"A",{href:!0});var Mtt=s(HP);Jno=r(Mtt,"CLIPTokenizer"),Mtt.forEach(t),Yno=r(lk," or "),UP=n(lk,"A",{href:!0});var Ett=s(UP);Kno=r(Ett,"CLIPTokenizerFast"),Ett.forEach(t),Zno=r(lk," (CLIP model)"),lk.forEach(t),eso=i(S),Wn=n(S,"LI",{});var ik=s(Wn);hse=n(ik,"STRONG",{});var Ctt=s(hse);oso=r(Ctt,"codegen"),Ctt.forEach(t),rso=r(ik," \u2014 "),JP=n(ik,"A",{href:!0});var wtt=s(JP);tso=r(wtt,"CodeGenTokenizer"),wtt.forEach(t),aso=r(ik," or "),YP=n(ik,"A",{href:!0});var Att=s(YP);nso=r(Att,"CodeGenTokenizerFast"),Att.forEach(t),sso=r(ik," (CodeGen model)"),ik.forEach(t),lso=i(S),Hn=n(S,"LI",{});var dk=s(Hn);pse=n(dk,"STRONG",{});var Ltt=s(pse);iso=r(Ltt,"convbert"),Ltt.forEach(t),dso=r(dk," \u2014 "),KP=n(dk,"A",{href:!0});var ytt=s(KP);cso=r(ytt,"ConvBertTokenizer"),ytt.forEach(t),fso=r(dk," or "),ZP=n(dk,"A",{href:!0});var xtt=s(ZP);mso=r(xtt,"ConvBertTokenizerFast"),xtt.forEach(t),gso=r(dk," (ConvBERT model)"),dk.forEach(t),hso=i(S),Un=n(S,"LI",{});var ck=s(Un);_se=n(ck,"STRONG",{});var $tt=s(_se);pso=r($tt,"cpm"),$tt.forEach(t),_so=r(ck," \u2014 "),eB=n(ck,"A",{href:!0});var ktt=s(eB);uso=r(ktt,"CpmTokenizer"),ktt.forEach(t),bso=r(ck," or "),oB=n(ck,"A",{href:!0});var Stt=s(oB);vso=r(Stt,"CpmTokenizerFast"),Stt.forEach(t),Fso=r(ck," (CPM model)"),ck.forEach(t),Tso=i(S),eh=n(S,"LI",{});var Y7e=s(eh);use=n(Y7e,"STRONG",{});var Rtt=s(use);Mso=r(Rtt,"ctrl"),Rtt.forEach(t),Eso=r(Y7e," \u2014 "),rB=n(Y7e,"A",{href:!0});var Ptt=s(rB);Cso=r(Ptt,"CTRLTokenizer"),Ptt.forEach(t),wso=r(Y7e," (CTRL model)"),Y7e.forEach(t),Aso=i(S),Jn=n(S,"LI",{});var fk=s(Jn);bse=n(fk,"STRONG",{});var Btt=s(bse);Lso=r(Btt,"data2vec-text"),Btt.forEach(t),yso=r(fk," \u2014 "),tB=n(fk,"A",{href:!0});var Itt=s(tB);xso=r(Itt,"RobertaTokenizer"),Itt.forEach(t),$so=r(fk," or "),aB=n(fk,"A",{href:!0});var Ntt=s(aB);kso=r(Ntt,"RobertaTokenizerFast"),Ntt.forEach(t),Sso=r(fk," (Data2VecText model)"),fk.forEach(t),Rso=i(S),Yn=n(S,"LI",{});var mk=s(Yn);vse=n(mk,"STRONG",{});var qtt=s(vse);Pso=r(qtt,"deberta"),qtt.forEach(t),Bso=r(mk," \u2014 "),nB=n(mk,"A",{href:!0});var jtt=s(nB);Iso=r(jtt,"DebertaTokenizer"),jtt.forEach(t),Nso=r(mk," or "),sB=n(mk,"A",{href:!0});var Dtt=s(sB);qso=r(Dtt,"DebertaTokenizerFast"),Dtt.forEach(t),jso=r(mk," (DeBERTa model)"),mk.forEach(t),Dso=i(S),Kn=n(S,"LI",{});var gk=s(Kn);Fse=n(gk,"STRONG",{});var Gtt=s(Fse);Gso=r(Gtt,"deberta-v2"),Gtt.forEach(t),Oso=r(gk," \u2014 "),lB=n(gk,"A",{href:!0});var Ott=s(lB);Vso=r(Ott,"DebertaV2Tokenizer"),Ott.forEach(t),Xso=r(gk," or "),iB=n(gk,"A",{href:!0});var Vtt=s(iB);zso=r(Vtt,"DebertaV2TokenizerFast"),Vtt.forEach(t),Qso=r(gk," (DeBERTa-v2 model)"),gk.forEach(t),Wso=i(S),Zn=n(S,"LI",{});var hk=s(Zn);Tse=n(hk,"STRONG",{});var Xtt=s(Tse);Hso=r(Xtt,"distilbert"),Xtt.forEach(t),Uso=r(hk," \u2014 "),dB=n(hk,"A",{href:!0});var ztt=s(dB);Jso=r(ztt,"DistilBertTokenizer"),ztt.forEach(t),Yso=r(hk," or "),cB=n(hk,"A",{href:!0});var Qtt=s(cB);Kso=r(Qtt,"DistilBertTokenizerFast"),Qtt.forEach(t),Zso=r(hk," (DistilBERT model)"),hk.forEach(t),elo=i(S),es=n(S,"LI",{});var pk=s(es);Mse=n(pk,"STRONG",{});var Wtt=s(Mse);olo=r(Wtt,"dpr"),Wtt.forEach(t),rlo=r(pk," \u2014 "),fB=n(pk,"A",{href:!0});var Htt=s(fB);tlo=r(Htt,"DPRQuestionEncoderTokenizer"),Htt.forEach(t),alo=r(pk," or "),mB=n(pk,"A",{href:!0});var Utt=s(mB);nlo=r(Utt,"DPRQuestionEncoderTokenizerFast"),Utt.forEach(t),slo=r(pk," (DPR model)"),pk.forEach(t),llo=i(S),os=n(S,"LI",{});var _k=s(os);Ese=n(_k,"STRONG",{});var Jtt=s(Ese);ilo=r(Jtt,"electra"),Jtt.forEach(t),dlo=r(_k," \u2014 "),gB=n(_k,"A",{href:!0});var Ytt=s(gB);clo=r(Ytt,"ElectraTokenizer"),Ytt.forEach(t),flo=r(_k," or "),hB=n(_k,"A",{href:!0});var Ktt=s(hB);mlo=r(Ktt,"ElectraTokenizerFast"),Ktt.forEach(t),glo=r(_k," (ELECTRA model)"),_k.forEach(t),hlo=i(S),oh=n(S,"LI",{});var K7e=s(oh);Cse=n(K7e,"STRONG",{});var Ztt=s(Cse);plo=r(Ztt,"flaubert"),Ztt.forEach(t),_lo=r(K7e," \u2014 "),pB=n(K7e,"A",{href:!0});var eat=s(pB);ulo=r(eat,"FlaubertTokenizer"),eat.forEach(t),blo=r(K7e," (FlauBERT model)"),K7e.forEach(t),vlo=i(S),rs=n(S,"LI",{});var uk=s(rs);wse=n(uk,"STRONG",{});var oat=s(wse);Flo=r(oat,"fnet"),oat.forEach(t),Tlo=r(uk," \u2014 "),_B=n(uk,"A",{href:!0});var rat=s(_B);Mlo=r(rat,"FNetTokenizer"),rat.forEach(t),Elo=r(uk," or "),uB=n(uk,"A",{href:!0});var tat=s(uB);Clo=r(tat,"FNetTokenizerFast"),tat.forEach(t),wlo=r(uk," (FNet model)"),uk.forEach(t),Alo=i(S),rh=n(S,"LI",{});var Z7e=s(rh);Ase=n(Z7e,"STRONG",{});var aat=s(Ase);Llo=r(aat,"fsmt"),aat.forEach(t),ylo=r(Z7e," \u2014 "),bB=n(Z7e,"A",{href:!0});var nat=s(bB);xlo=r(nat,"FSMTTokenizer"),nat.forEach(t),$lo=r(Z7e," (FairSeq Machine-Translation model)"),Z7e.forEach(t),klo=i(S),ts=n(S,"LI",{});var bk=s(ts);Lse=n(bk,"STRONG",{});var sat=s(Lse);Slo=r(sat,"funnel"),sat.forEach(t),Rlo=r(bk," \u2014 "),vB=n(bk,"A",{href:!0});var lat=s(vB);Plo=r(lat,"FunnelTokenizer"),lat.forEach(t),Blo=r(bk," or "),FB=n(bk,"A",{href:!0});var iat=s(FB);Ilo=r(iat,"FunnelTokenizerFast"),iat.forEach(t),Nlo=r(bk," (Funnel Transformer model)"),bk.forEach(t),qlo=i(S),as=n(S,"LI",{});var vk=s(as);yse=n(vk,"STRONG",{});var dat=s(yse);jlo=r(dat,"gpt2"),dat.forEach(t),Dlo=r(vk," \u2014 "),TB=n(vk,"A",{href:!0});var cat=s(TB);Glo=r(cat,"GPT2Tokenizer"),cat.forEach(t),Olo=r(vk," or "),MB=n(vk,"A",{href:!0});var fat=s(MB);Vlo=r(fat,"GPT2TokenizerFast"),fat.forEach(t),Xlo=r(vk," (OpenAI GPT-2 model)"),vk.forEach(t),zlo=i(S),ns=n(S,"LI",{});var Fk=s(ns);xse=n(Fk,"STRONG",{});var mat=s(xse);Qlo=r(mat,"gpt_neo"),mat.forEach(t),Wlo=r(Fk," \u2014 "),EB=n(Fk,"A",{href:!0});var gat=s(EB);Hlo=r(gat,"GPT2Tokenizer"),gat.forEach(t),Ulo=r(Fk," or "),CB=n(Fk,"A",{href:!0});var hat=s(CB);Jlo=r(hat,"GPT2TokenizerFast"),hat.forEach(t),Ylo=r(Fk," (GPT Neo model)"),Fk.forEach(t),Klo=i(S),th=n(S,"LI",{});var eye=s(th);$se=n(eye,"STRONG",{});var pat=s($se);Zlo=r(pat,"gpt_neox"),pat.forEach(t),eio=r(eye," \u2014 "),wB=n(eye,"A",{href:!0});var _at=s(wB);oio=r(_at,"GPTNeoXTokenizerFast"),_at.forEach(t),rio=r(eye," (GPT NeoX model)"),eye.forEach(t),tio=i(S),ss=n(S,"LI",{});var Tk=s(ss);kse=n(Tk,"STRONG",{});var uat=s(kse);aio=r(uat,"gptj"),uat.forEach(t),nio=r(Tk," \u2014 "),AB=n(Tk,"A",{href:!0});var bat=s(AB);sio=r(bat,"GPT2Tokenizer"),bat.forEach(t),lio=r(Tk," or "),LB=n(Tk,"A",{href:!0});var vat=s(LB);iio=r(vat,"GPT2TokenizerFast"),vat.forEach(t),dio=r(Tk," (GPT-J model)"),Tk.forEach(t),cio=i(S),ls=n(S,"LI",{});var Mk=s(ls);Sse=n(Mk,"STRONG",{});var Fat=s(Sse);fio=r(Fat,"herbert"),Fat.forEach(t),mio=r(Mk," \u2014 "),yB=n(Mk,"A",{href:!0});var Tat=s(yB);gio=r(Tat,"HerbertTokenizer"),Tat.forEach(t),hio=r(Mk," or "),xB=n(Mk,"A",{href:!0});var Mat=s(xB);pio=r(Mat,"HerbertTokenizerFast"),Mat.forEach(t),_io=r(Mk," (HerBERT model)"),Mk.forEach(t),uio=i(S),ah=n(S,"LI",{});var oye=s(ah);Rse=n(oye,"STRONG",{});var Eat=s(Rse);bio=r(Eat,"hubert"),Eat.forEach(t),vio=r(oye," \u2014 "),$B=n(oye,"A",{href:!0});var Cat=s($B);Fio=r(Cat,"Wav2Vec2CTCTokenizer"),Cat.forEach(t),Tio=r(oye," (Hubert model)"),oye.forEach(t),Mio=i(S),is=n(S,"LI",{});var Ek=s(is);Pse=n(Ek,"STRONG",{});var wat=s(Pse);Eio=r(wat,"ibert"),wat.forEach(t),Cio=r(Ek," \u2014 "),kB=n(Ek,"A",{href:!0});var Aat=s(kB);wio=r(Aat,"RobertaTokenizer"),Aat.forEach(t),Aio=r(Ek," or "),SB=n(Ek,"A",{href:!0});var Lat=s(SB);Lio=r(Lat,"RobertaTokenizerFast"),Lat.forEach(t),yio=r(Ek," (I-BERT model)"),Ek.forEach(t),xio=i(S),ds=n(S,"LI",{});var Ck=s(ds);Bse=n(Ck,"STRONG",{});var yat=s(Bse);$io=r(yat,"layoutlm"),yat.forEach(t),kio=r(Ck," \u2014 "),RB=n(Ck,"A",{href:!0});var xat=s(RB);Sio=r(xat,"LayoutLMTokenizer"),xat.forEach(t),Rio=r(Ck," or "),PB=n(Ck,"A",{href:!0});var $at=s(PB);Pio=r($at,"LayoutLMTokenizerFast"),$at.forEach(t),Bio=r(Ck," (LayoutLM model)"),Ck.forEach(t),Iio=i(S),cs=n(S,"LI",{});var wk=s(cs);Ise=n(wk,"STRONG",{});var kat=s(Ise);Nio=r(kat,"layoutlmv2"),kat.forEach(t),qio=r(wk," \u2014 "),BB=n(wk,"A",{href:!0});var Sat=s(BB);jio=r(Sat,"LayoutLMv2Tokenizer"),Sat.forEach(t),Dio=r(wk," or "),IB=n(wk,"A",{href:!0});var Rat=s(IB);Gio=r(Rat,"LayoutLMv2TokenizerFast"),Rat.forEach(t),Oio=r(wk," (LayoutLMv2 model)"),wk.forEach(t),Vio=i(S),fs=n(S,"LI",{});var Ak=s(fs);Nse=n(Ak,"STRONG",{});var Pat=s(Nse);Xio=r(Pat,"layoutlmv3"),Pat.forEach(t),zio=r(Ak," \u2014 "),NB=n(Ak,"A",{href:!0});var Bat=s(NB);Qio=r(Bat,"LayoutLMv3Tokenizer"),Bat.forEach(t),Wio=r(Ak," or "),qB=n(Ak,"A",{href:!0});var Iat=s(qB);Hio=r(Iat,"LayoutLMv3TokenizerFast"),Iat.forEach(t),Uio=r(Ak," (LayoutLMv3 model)"),Ak.forEach(t),Jio=i(S),ms=n(S,"LI",{});var Lk=s(ms);qse=n(Lk,"STRONG",{});var Nat=s(qse);Yio=r(Nat,"layoutxlm"),Nat.forEach(t),Kio=r(Lk," \u2014 "),jB=n(Lk,"A",{href:!0});var qat=s(jB);Zio=r(qat,"LayoutXLMTokenizer"),qat.forEach(t),edo=r(Lk," or "),DB=n(Lk,"A",{href:!0});var jat=s(DB);odo=r(jat,"LayoutXLMTokenizerFast"),jat.forEach(t),rdo=r(Lk," (LayoutXLM model)"),Lk.forEach(t),tdo=i(S),gs=n(S,"LI",{});var yk=s(gs);jse=n(yk,"STRONG",{});var Dat=s(jse);ado=r(Dat,"led"),Dat.forEach(t),ndo=r(yk," \u2014 "),GB=n(yk,"A",{href:!0});var Gat=s(GB);sdo=r(Gat,"LEDTokenizer"),Gat.forEach(t),ldo=r(yk," or "),OB=n(yk,"A",{href:!0});var Oat=s(OB);ido=r(Oat,"LEDTokenizerFast"),Oat.forEach(t),ddo=r(yk," (LED model)"),yk.forEach(t),cdo=i(S),hs=n(S,"LI",{});var xk=s(hs);Dse=n(xk,"STRONG",{});var Vat=s(Dse);fdo=r(Vat,"longformer"),Vat.forEach(t),mdo=r(xk," \u2014 "),VB=n(xk,"A",{href:!0});var Xat=s(VB);gdo=r(Xat,"LongformerTokenizer"),Xat.forEach(t),hdo=r(xk," or "),XB=n(xk,"A",{href:!0});var zat=s(XB);pdo=r(zat,"LongformerTokenizerFast"),zat.forEach(t),_do=r(xk," (Longformer model)"),xk.forEach(t),udo=i(S),ps=n(S,"LI",{});var $k=s(ps);Gse=n($k,"STRONG",{});var Qat=s(Gse);bdo=r(Qat,"longt5"),Qat.forEach(t),vdo=r($k," \u2014 "),zB=n($k,"A",{href:!0});var Wat=s(zB);Fdo=r(Wat,"T5Tokenizer"),Wat.forEach(t),Tdo=r($k," or "),QB=n($k,"A",{href:!0});var Hat=s(QB);Mdo=r(Hat,"T5TokenizerFast"),Hat.forEach(t),Edo=r($k," (LongT5 model)"),$k.forEach(t),Cdo=i(S),nh=n(S,"LI",{});var rye=s(nh);Ose=n(rye,"STRONG",{});var Uat=s(Ose);wdo=r(Uat,"luke"),Uat.forEach(t),Ado=r(rye," \u2014 "),WB=n(rye,"A",{href:!0});var Jat=s(WB);Ldo=r(Jat,"LukeTokenizer"),Jat.forEach(t),ydo=r(rye," (LUKE model)"),rye.forEach(t),xdo=i(S),_s=n(S,"LI",{});var kk=s(_s);Vse=n(kk,"STRONG",{});var Yat=s(Vse);$do=r(Yat,"lxmert"),Yat.forEach(t),kdo=r(kk," \u2014 "),HB=n(kk,"A",{href:!0});var Kat=s(HB);Sdo=r(Kat,"LxmertTokenizer"),Kat.forEach(t),Rdo=r(kk," or "),UB=n(kk,"A",{href:!0});var Zat=s(UB);Pdo=r(Zat,"LxmertTokenizerFast"),Zat.forEach(t),Bdo=r(kk," (LXMERT model)"),kk.forEach(t),Ido=i(S),sh=n(S,"LI",{});var tye=s(sh);Xse=n(tye,"STRONG",{});var ent=s(Xse);Ndo=r(ent,"m2m_100"),ent.forEach(t),qdo=r(tye," \u2014 "),JB=n(tye,"A",{href:!0});var ont=s(JB);jdo=r(ont,"M2M100Tokenizer"),ont.forEach(t),Ddo=r(tye," (M2M100 model)"),tye.forEach(t),Gdo=i(S),lh=n(S,"LI",{});var aye=s(lh);zse=n(aye,"STRONG",{});var rnt=s(zse);Odo=r(rnt,"marian"),rnt.forEach(t),Vdo=r(aye," \u2014 "),YB=n(aye,"A",{href:!0});var tnt=s(YB);Xdo=r(tnt,"MarianTokenizer"),tnt.forEach(t),zdo=r(aye," (Marian model)"),aye.forEach(t),Qdo=i(S),us=n(S,"LI",{});var Sk=s(us);Qse=n(Sk,"STRONG",{});var ant=s(Qse);Wdo=r(ant,"mbart"),ant.forEach(t),Hdo=r(Sk," \u2014 "),KB=n(Sk,"A",{href:!0});var nnt=s(KB);Udo=r(nnt,"MBartTokenizer"),nnt.forEach(t),Jdo=r(Sk," or "),ZB=n(Sk,"A",{href:!0});var snt=s(ZB);Ydo=r(snt,"MBartTokenizerFast"),snt.forEach(t),Kdo=r(Sk," (mBART model)"),Sk.forEach(t),Zdo=i(S),bs=n(S,"LI",{});var Rk=s(bs);Wse=n(Rk,"STRONG",{});var lnt=s(Wse);eco=r(lnt,"mbart50"),lnt.forEach(t),oco=r(Rk," \u2014 "),eI=n(Rk,"A",{href:!0});var int=s(eI);rco=r(int,"MBart50Tokenizer"),int.forEach(t),tco=r(Rk," or "),oI=n(Rk,"A",{href:!0});var dnt=s(oI);aco=r(dnt,"MBart50TokenizerFast"),dnt.forEach(t),nco=r(Rk," (mBART-50 model)"),Rk.forEach(t),sco=i(S),vs=n(S,"LI",{});var Pk=s(vs);Hse=n(Pk,"STRONG",{});var cnt=s(Hse);lco=r(cnt,"megatron-bert"),cnt.forEach(t),ico=r(Pk," \u2014 "),rI=n(Pk,"A",{href:!0});var fnt=s(rI);dco=r(fnt,"BertTokenizer"),fnt.forEach(t),cco=r(Pk," or "),tI=n(Pk,"A",{href:!0});var mnt=s(tI);fco=r(mnt,"BertTokenizerFast"),mnt.forEach(t),mco=r(Pk," (Megatron-BERT model)"),Pk.forEach(t),gco=i(S),ih=n(S,"LI",{});var nye=s(ih);Use=n(nye,"STRONG",{});var gnt=s(Use);hco=r(gnt,"mluke"),gnt.forEach(t),pco=r(nye," \u2014 "),aI=n(nye,"A",{href:!0});var hnt=s(aI);_co=r(hnt,"MLukeTokenizer"),hnt.forEach(t),uco=r(nye," (mLUKE model)"),nye.forEach(t),bco=i(S),Fs=n(S,"LI",{});var Bk=s(Fs);Jse=n(Bk,"STRONG",{});var pnt=s(Jse);vco=r(pnt,"mobilebert"),pnt.forEach(t),Fco=r(Bk," \u2014 "),nI=n(Bk,"A",{href:!0});var _nt=s(nI);Tco=r(_nt,"MobileBertTokenizer"),_nt.forEach(t),Mco=r(Bk," or "),sI=n(Bk,"A",{href:!0});var unt=s(sI);Eco=r(unt,"MobileBertTokenizerFast"),unt.forEach(t),Cco=r(Bk," (MobileBERT model)"),Bk.forEach(t),wco=i(S),Ts=n(S,"LI",{});var Ik=s(Ts);Yse=n(Ik,"STRONG",{});var bnt=s(Yse);Aco=r(bnt,"mpnet"),bnt.forEach(t),Lco=r(Ik," \u2014 "),lI=n(Ik,"A",{href:!0});var vnt=s(lI);yco=r(vnt,"MPNetTokenizer"),vnt.forEach(t),xco=r(Ik," or "),iI=n(Ik,"A",{href:!0});var Fnt=s(iI);$co=r(Fnt,"MPNetTokenizerFast"),Fnt.forEach(t),kco=r(Ik," (MPNet model)"),Ik.forEach(t),Sco=i(S),Ms=n(S,"LI",{});var Nk=s(Ms);Kse=n(Nk,"STRONG",{});var Tnt=s(Kse);Rco=r(Tnt,"mt5"),Tnt.forEach(t),Pco=r(Nk," \u2014 "),dI=n(Nk,"A",{href:!0});var Mnt=s(dI);Bco=r(Mnt,"MT5Tokenizer"),Mnt.forEach(t),Ico=r(Nk," or "),cI=n(Nk,"A",{href:!0});var Ent=s(cI);Nco=r(Ent,"MT5TokenizerFast"),Ent.forEach(t),qco=r(Nk," (MT5 model)"),Nk.forEach(t),jco=i(S),Es=n(S,"LI",{});var qk=s(Es);Zse=n(qk,"STRONG",{});var Cnt=s(Zse);Dco=r(Cnt,"nezha"),Cnt.forEach(t),Gco=r(qk," \u2014 "),fI=n(qk,"A",{href:!0});var wnt=s(fI);Oco=r(wnt,"BertTokenizer"),wnt.forEach(t),Vco=r(qk," or "),mI=n(qk,"A",{href:!0});var Ant=s(mI);Xco=r(Ant,"BertTokenizerFast"),Ant.forEach(t),zco=r(qk," (Nezha model)"),qk.forEach(t),Qco=i(S),Cs=n(S,"LI",{});var jk=s(Cs);ele=n(jk,"STRONG",{});var Lnt=s(ele);Wco=r(Lnt,"nystromformer"),Lnt.forEach(t),Hco=r(jk," \u2014 "),gI=n(jk,"A",{href:!0});var ynt=s(gI);Uco=r(ynt,"AlbertTokenizer"),ynt.forEach(t),Jco=r(jk," or "),hI=n(jk,"A",{href:!0});var xnt=s(hI);Yco=r(xnt,"AlbertTokenizerFast"),xnt.forEach(t),Kco=r(jk," (Nystr\xF6mformer model)"),jk.forEach(t),Zco=i(S),ws=n(S,"LI",{});var Dk=s(ws);ole=n(Dk,"STRONG",{});var $nt=s(ole);efo=r($nt,"openai-gpt"),$nt.forEach(t),ofo=r(Dk," \u2014 "),pI=n(Dk,"A",{href:!0});var knt=s(pI);rfo=r(knt,"OpenAIGPTTokenizer"),knt.forEach(t),tfo=r(Dk," or "),_I=n(Dk,"A",{href:!0});var Snt=s(_I);afo=r(Snt,"OpenAIGPTTokenizerFast"),Snt.forEach(t),nfo=r(Dk," (OpenAI GPT model)"),Dk.forEach(t),sfo=i(S),dh=n(S,"LI",{});var sye=s(dh);rle=n(sye,"STRONG",{});var Rnt=s(rle);lfo=r(Rnt,"opt"),Rnt.forEach(t),ifo=r(sye," \u2014 "),uI=n(sye,"A",{href:!0});var Pnt=s(uI);dfo=r(Pnt,"GPT2Tokenizer"),Pnt.forEach(t),cfo=r(sye," (OPT model)"),sye.forEach(t),ffo=i(S),As=n(S,"LI",{});var Gk=s(As);tle=n(Gk,"STRONG",{});var Bnt=s(tle);mfo=r(Bnt,"pegasus"),Bnt.forEach(t),gfo=r(Gk," \u2014 "),bI=n(Gk,"A",{href:!0});var Int=s(bI);hfo=r(Int,"PegasusTokenizer"),Int.forEach(t),pfo=r(Gk," or "),vI=n(Gk,"A",{href:!0});var Nnt=s(vI);_fo=r(Nnt,"PegasusTokenizerFast"),Nnt.forEach(t),ufo=r(Gk," (Pegasus model)"),Gk.forEach(t),bfo=i(S),ch=n(S,"LI",{});var lye=s(ch);ale=n(lye,"STRONG",{});var qnt=s(ale);vfo=r(qnt,"perceiver"),qnt.forEach(t),Ffo=r(lye," \u2014 "),FI=n(lye,"A",{href:!0});var jnt=s(FI);Tfo=r(jnt,"PerceiverTokenizer"),jnt.forEach(t),Mfo=r(lye," (Perceiver model)"),lye.forEach(t),Efo=i(S),fh=n(S,"LI",{});var iye=s(fh);nle=n(iye,"STRONG",{});var Dnt=s(nle);Cfo=r(Dnt,"phobert"),Dnt.forEach(t),wfo=r(iye," \u2014 "),TI=n(iye,"A",{href:!0});var Gnt=s(TI);Afo=r(Gnt,"PhobertTokenizer"),Gnt.forEach(t),Lfo=r(iye," (PhoBERT model)"),iye.forEach(t),yfo=i(S),mh=n(S,"LI",{});var dye=s(mh);sle=n(dye,"STRONG",{});var Ont=s(sle);xfo=r(Ont,"plbart"),Ont.forEach(t),$fo=r(dye," \u2014 "),MI=n(dye,"A",{href:!0});var Vnt=s(MI);kfo=r(Vnt,"PLBartTokenizer"),Vnt.forEach(t),Sfo=r(dye," (PLBart model)"),dye.forEach(t),Rfo=i(S),gh=n(S,"LI",{});var cye=s(gh);lle=n(cye,"STRONG",{});var Xnt=s(lle);Pfo=r(Xnt,"prophetnet"),Xnt.forEach(t),Bfo=r(cye," \u2014 "),EI=n(cye,"A",{href:!0});var znt=s(EI);Ifo=r(znt,"ProphetNetTokenizer"),znt.forEach(t),Nfo=r(cye," (ProphetNet model)"),cye.forEach(t),qfo=i(S),Ls=n(S,"LI",{});var Ok=s(Ls);ile=n(Ok,"STRONG",{});var Qnt=s(ile);jfo=r(Qnt,"qdqbert"),Qnt.forEach(t),Dfo=r(Ok," \u2014 "),CI=n(Ok,"A",{href:!0});var Wnt=s(CI);Gfo=r(Wnt,"BertTokenizer"),Wnt.forEach(t),Ofo=r(Ok," or "),wI=n(Ok,"A",{href:!0});var Hnt=s(wI);Vfo=r(Hnt,"BertTokenizerFast"),Hnt.forEach(t),Xfo=r(Ok," (QDQBert model)"),Ok.forEach(t),zfo=i(S),hh=n(S,"LI",{});var fye=s(hh);dle=n(fye,"STRONG",{});var Unt=s(dle);Qfo=r(Unt,"rag"),Unt.forEach(t),Wfo=r(fye," \u2014 "),AI=n(fye,"A",{href:!0});var Jnt=s(AI);Hfo=r(Jnt,"RagTokenizer"),Jnt.forEach(t),Ufo=r(fye," (RAG model)"),fye.forEach(t),Jfo=i(S),ys=n(S,"LI",{});var Vk=s(ys);cle=n(Vk,"STRONG",{});var Ynt=s(cle);Yfo=r(Ynt,"realm"),Ynt.forEach(t),Kfo=r(Vk," \u2014 "),LI=n(Vk,"A",{href:!0});var Knt=s(LI);Zfo=r(Knt,"RealmTokenizer"),Knt.forEach(t),emo=r(Vk," or "),yI=n(Vk,"A",{href:!0});var Znt=s(yI);omo=r(Znt,"RealmTokenizerFast"),Znt.forEach(t),rmo=r(Vk," (REALM model)"),Vk.forEach(t),tmo=i(S),xs=n(S,"LI",{});var Xk=s(xs);fle=n(Xk,"STRONG",{});var est=s(fle);amo=r(est,"reformer"),est.forEach(t),nmo=r(Xk," \u2014 "),xI=n(Xk,"A",{href:!0});var ost=s(xI);smo=r(ost,"ReformerTokenizer"),ost.forEach(t),lmo=r(Xk," or "),$I=n(Xk,"A",{href:!0});var rst=s($I);imo=r(rst,"ReformerTokenizerFast"),rst.forEach(t),dmo=r(Xk," (Reformer model)"),Xk.forEach(t),cmo=i(S),$s=n(S,"LI",{});var zk=s($s);mle=n(zk,"STRONG",{});var tst=s(mle);fmo=r(tst,"rembert"),tst.forEach(t),mmo=r(zk," \u2014 "),kI=n(zk,"A",{href:!0});var ast=s(kI);gmo=r(ast,"RemBertTokenizer"),ast.forEach(t),hmo=r(zk," or "),SI=n(zk,"A",{href:!0});var nst=s(SI);pmo=r(nst,"RemBertTokenizerFast"),nst.forEach(t),_mo=r(zk," (RemBERT model)"),zk.forEach(t),umo=i(S),ks=n(S,"LI",{});var Qk=s(ks);gle=n(Qk,"STRONG",{});var sst=s(gle);bmo=r(sst,"retribert"),sst.forEach(t),vmo=r(Qk," \u2014 "),RI=n(Qk,"A",{href:!0});var lst=s(RI);Fmo=r(lst,"RetriBertTokenizer"),lst.forEach(t),Tmo=r(Qk," or "),PI=n(Qk,"A",{href:!0});var ist=s(PI);Mmo=r(ist,"RetriBertTokenizerFast"),ist.forEach(t),Emo=r(Qk," (RetriBERT model)"),Qk.forEach(t),Cmo=i(S),Ss=n(S,"LI",{});var Wk=s(Ss);hle=n(Wk,"STRONG",{});var dst=s(hle);wmo=r(dst,"roberta"),dst.forEach(t),Amo=r(Wk," \u2014 "),BI=n(Wk,"A",{href:!0});var cst=s(BI);Lmo=r(cst,"RobertaTokenizer"),cst.forEach(t),ymo=r(Wk," or "),II=n(Wk,"A",{href:!0});var fst=s(II);xmo=r(fst,"RobertaTokenizerFast"),fst.forEach(t),$mo=r(Wk," (RoBERTa model)"),Wk.forEach(t),kmo=i(S),Rs=n(S,"LI",{});var Hk=s(Rs);ple=n(Hk,"STRONG",{});var mst=s(ple);Smo=r(mst,"roformer"),mst.forEach(t),Rmo=r(Hk," \u2014 "),NI=n(Hk,"A",{href:!0});var gst=s(NI);Pmo=r(gst,"RoFormerTokenizer"),gst.forEach(t),Bmo=r(Hk," or "),qI=n(Hk,"A",{href:!0});var hst=s(qI);Imo=r(hst,"RoFormerTokenizerFast"),hst.forEach(t),Nmo=r(Hk," (RoFormer model)"),Hk.forEach(t),qmo=i(S),ph=n(S,"LI",{});var mye=s(ph);_le=n(mye,"STRONG",{});var pst=s(_le);jmo=r(pst,"speech_to_text"),pst.forEach(t),Dmo=r(mye," \u2014 "),jI=n(mye,"A",{href:!0});var _st=s(jI);Gmo=r(_st,"Speech2TextTokenizer"),_st.forEach(t),Omo=r(mye," (Speech2Text model)"),mye.forEach(t),Vmo=i(S),_h=n(S,"LI",{});var gye=s(_h);ule=n(gye,"STRONG",{});var ust=s(ule);Xmo=r(ust,"speech_to_text_2"),ust.forEach(t),zmo=r(gye," \u2014 "),DI=n(gye,"A",{href:!0});var bst=s(DI);Qmo=r(bst,"Speech2Text2Tokenizer"),bst.forEach(t),Wmo=r(gye," (Speech2Text2 model)"),gye.forEach(t),Hmo=i(S),Ps=n(S,"LI",{});var Uk=s(Ps);ble=n(Uk,"STRONG",{});var vst=s(ble);Umo=r(vst,"splinter"),vst.forEach(t),Jmo=r(Uk," \u2014 "),GI=n(Uk,"A",{href:!0});var Fst=s(GI);Ymo=r(Fst,"SplinterTokenizer"),Fst.forEach(t),Kmo=r(Uk," or "),OI=n(Uk,"A",{href:!0});var Tst=s(OI);Zmo=r(Tst,"SplinterTokenizerFast"),Tst.forEach(t),ego=r(Uk," (Splinter model)"),Uk.forEach(t),ogo=i(S),Bs=n(S,"LI",{});var Jk=s(Bs);vle=n(Jk,"STRONG",{});var Mst=s(vle);rgo=r(Mst,"squeezebert"),Mst.forEach(t),tgo=r(Jk," \u2014 "),VI=n(Jk,"A",{href:!0});var Est=s(VI);ago=r(Est,"SqueezeBertTokenizer"),Est.forEach(t),ngo=r(Jk," or "),XI=n(Jk,"A",{href:!0});var Cst=s(XI);sgo=r(Cst,"SqueezeBertTokenizerFast"),Cst.forEach(t),lgo=r(Jk," (SqueezeBERT model)"),Jk.forEach(t),igo=i(S),Is=n(S,"LI",{});var Yk=s(Is);Fle=n(Yk,"STRONG",{});var wst=s(Fle);dgo=r(wst,"t5"),wst.forEach(t),cgo=r(Yk," \u2014 "),zI=n(Yk,"A",{href:!0});var Ast=s(zI);fgo=r(Ast,"T5Tokenizer"),Ast.forEach(t),mgo=r(Yk," or "),QI=n(Yk,"A",{href:!0});var Lst=s(QI);ggo=r(Lst,"T5TokenizerFast"),Lst.forEach(t),hgo=r(Yk," (T5 model)"),Yk.forEach(t),pgo=i(S),uh=n(S,"LI",{});var hye=s(uh);Tle=n(hye,"STRONG",{});var yst=s(Tle);_go=r(yst,"tapas"),yst.forEach(t),ugo=r(hye," \u2014 "),WI=n(hye,"A",{href:!0});var xst=s(WI);bgo=r(xst,"TapasTokenizer"),xst.forEach(t),vgo=r(hye," (TAPAS model)"),hye.forEach(t),Fgo=i(S),bh=n(S,"LI",{});var pye=s(bh);Mle=n(pye,"STRONG",{});var $st=s(Mle);Tgo=r($st,"tapex"),$st.forEach(t),Mgo=r(pye," \u2014 "),HI=n(pye,"A",{href:!0});var kst=s(HI);Ego=r(kst,"TapexTokenizer"),kst.forEach(t),Cgo=r(pye," (TAPEX model)"),pye.forEach(t),wgo=i(S),vh=n(S,"LI",{});var _ye=s(vh);Ele=n(_ye,"STRONG",{});var Sst=s(Ele);Ago=r(Sst,"transfo-xl"),Sst.forEach(t),Lgo=r(_ye," \u2014 "),UI=n(_ye,"A",{href:!0});var Rst=s(UI);ygo=r(Rst,"TransfoXLTokenizer"),Rst.forEach(t),xgo=r(_ye," (Transformer-XL model)"),_ye.forEach(t),$go=i(S),Ns=n(S,"LI",{});var Kk=s(Ns);Cle=n(Kk,"STRONG",{});var Pst=s(Cle);kgo=r(Pst,"vilt"),Pst.forEach(t),Sgo=r(Kk," \u2014 "),JI=n(Kk,"A",{href:!0});var Bst=s(JI);Rgo=r(Bst,"BertTokenizer"),Bst.forEach(t),Pgo=r(Kk," or "),YI=n(Kk,"A",{href:!0});var Ist=s(YI);Bgo=r(Ist,"BertTokenizerFast"),Ist.forEach(t),Igo=r(Kk," (ViLT model)"),Kk.forEach(t),Ngo=i(S),qs=n(S,"LI",{});var Zk=s(qs);wle=n(Zk,"STRONG",{});var Nst=s(wle);qgo=r(Nst,"visual_bert"),Nst.forEach(t),jgo=r(Zk," \u2014 "),KI=n(Zk,"A",{href:!0});var qst=s(KI);Dgo=r(qst,"BertTokenizer"),qst.forEach(t),Ggo=r(Zk," or "),ZI=n(Zk,"A",{href:!0});var jst=s(ZI);Ogo=r(jst,"BertTokenizerFast"),jst.forEach(t),Vgo=r(Zk," (VisualBERT model)"),Zk.forEach(t),Xgo=i(S),Fh=n(S,"LI",{});var uye=s(Fh);Ale=n(uye,"STRONG",{});var Dst=s(Ale);zgo=r(Dst,"wav2vec2"),Dst.forEach(t),Qgo=r(uye," \u2014 "),eN=n(uye,"A",{href:!0});var Gst=s(eN);Wgo=r(Gst,"Wav2Vec2CTCTokenizer"),Gst.forEach(t),Hgo=r(uye," (Wav2Vec2 model)"),uye.forEach(t),Ugo=i(S),Th=n(S,"LI",{});var bye=s(Th);Lle=n(bye,"STRONG",{});var Ost=s(Lle);Jgo=r(Ost,"wav2vec2-conformer"),Ost.forEach(t),Ygo=r(bye," \u2014 "),oN=n(bye,"A",{href:!0});var Vst=s(oN);Kgo=r(Vst,"Wav2Vec2CTCTokenizer"),Vst.forEach(t),Zgo=r(bye," (Wav2Vec2-Conformer model)"),bye.forEach(t),eho=i(S),Mh=n(S,"LI",{});var vye=s(Mh);yle=n(vye,"STRONG",{});var Xst=s(yle);oho=r(Xst,"wav2vec2_phoneme"),Xst.forEach(t),rho=r(vye," \u2014 "),rN=n(vye,"A",{href:!0});var zst=s(rN);tho=r(zst,"Wav2Vec2PhonemeCTCTokenizer"),zst.forEach(t),aho=r(vye," (Wav2Vec2Phoneme model)"),vye.forEach(t),nho=i(S),js=n(S,"LI",{});var eS=s(js);xle=n(eS,"STRONG",{});var Qst=s(xle);sho=r(Qst,"xglm"),Qst.forEach(t),lho=r(eS," \u2014 "),tN=n(eS,"A",{href:!0});var Wst=s(tN);iho=r(Wst,"XGLMTokenizer"),Wst.forEach(t),dho=r(eS," or "),aN=n(eS,"A",{href:!0});var Hst=s(aN);cho=r(Hst,"XGLMTokenizerFast"),Hst.forEach(t),fho=r(eS," (XGLM model)"),eS.forEach(t),mho=i(S),Eh=n(S,"LI",{});var Fye=s(Eh);$le=n(Fye,"STRONG",{});var Ust=s($le);gho=r(Ust,"xlm"),Ust.forEach(t),hho=r(Fye," \u2014 "),nN=n(Fye,"A",{href:!0});var Jst=s(nN);pho=r(Jst,"XLMTokenizer"),Jst.forEach(t),_ho=r(Fye," (XLM model)"),Fye.forEach(t),uho=i(S),Ch=n(S,"LI",{});var Tye=s(Ch);kle=n(Tye,"STRONG",{});var Yst=s(kle);bho=r(Yst,"xlm-prophetnet"),Yst.forEach(t),vho=r(Tye," \u2014 "),sN=n(Tye,"A",{href:!0});var Kst=s(sN);Fho=r(Kst,"XLMProphetNetTokenizer"),Kst.forEach(t),Tho=r(Tye," (XLM-ProphetNet model)"),Tye.forEach(t),Mho=i(S),Ds=n(S,"LI",{});var oS=s(Ds);Sle=n(oS,"STRONG",{});var Zst=s(Sle);Eho=r(Zst,"xlm-roberta"),Zst.forEach(t),Cho=r(oS," \u2014 "),lN=n(oS,"A",{href:!0});var elt=s(lN);who=r(elt,"XLMRobertaTokenizer"),elt.forEach(t),Aho=r(oS," or "),iN=n(oS,"A",{href:!0});var olt=s(iN);Lho=r(olt,"XLMRobertaTokenizerFast"),olt.forEach(t),yho=r(oS," (XLM-RoBERTa model)"),oS.forEach(t),xho=i(S),Gs=n(S,"LI",{});var rS=s(Gs);Rle=n(rS,"STRONG",{});var rlt=s(Rle);$ho=r(rlt,"xlm-roberta-xl"),rlt.forEach(t),kho=r(rS," \u2014 "),dN=n(rS,"A",{href:!0});var tlt=s(dN);Sho=r(tlt,"RobertaTokenizer"),tlt.forEach(t),Rho=r(rS," or "),cN=n(rS,"A",{href:!0});var alt=s(cN);Pho=r(alt,"RobertaTokenizerFast"),alt.forEach(t),Bho=r(rS," (XLM-RoBERTa-XL model)"),rS.forEach(t),Iho=i(S),Os=n(S,"LI",{});var tS=s(Os);Ple=n(tS,"STRONG",{});var nlt=s(Ple);Nho=r(nlt,"xlnet"),nlt.forEach(t),qho=r(tS," \u2014 "),fN=n(tS,"A",{href:!0});var slt=s(fN);jho=r(slt,"XLNetTokenizer"),slt.forEach(t),Dho=r(tS," or "),mN=n(tS,"A",{href:!0});var llt=s(mN);Gho=r(llt,"XLNetTokenizerFast"),llt.forEach(t),Oho=r(tS," (XLNet model)"),tS.forEach(t),Vho=i(S),Vs=n(S,"LI",{});var aS=s(Vs);Ble=n(aS,"STRONG",{});var ilt=s(Ble);Xho=r(ilt,"yoso"),ilt.forEach(t),zho=r(aS," \u2014 "),gN=n(aS,"A",{href:!0});var dlt=s(gN);Qho=r(dlt,"AlbertTokenizer"),dlt.forEach(t),Who=r(aS," or "),hN=n(aS,"A",{href:!0});var clt=s(hN);Hho=r(clt,"AlbertTokenizerFast"),clt.forEach(t),Uho=r(aS," (YOSO model)"),aS.forEach(t),S.forEach(t),Jho=i(Us),T(wh.$$.fragment,Us),Us.forEach(t),Yho=i(Hs),Ah=n(Hs,"DIV",{class:!0});var FXe=s(Ah);T(H7.$$.fragment,FXe),Kho=i(FXe),Ile=n(FXe,"P",{});var flt=s(Ile);Zho=r(flt,"Register a new tokenizer in this mapping."),flt.forEach(t),FXe.forEach(t),Hs.forEach(t),vOe=i(f),Ri=n(f,"H2",{class:!0});var TXe=s(Ri);Lh=n(TXe,"A",{id:!0,class:!0,href:!0});var mlt=s(Lh);Nle=n(mlt,"SPAN",{});var glt=s(Nle);T(U7.$$.fragment,glt),glt.forEach(t),mlt.forEach(t),epo=i(TXe),qle=n(TXe,"SPAN",{});var hlt=s(qle);opo=r(hlt,"AutoFeatureExtractor"),hlt.forEach(t),TXe.forEach(t),FOe=i(f),Lo=n(f,"DIV",{class:!0});var Js=s(Lo);T(J7.$$.fragment,Js),rpo=i(Js),Y7=n(Js,"P",{});var MXe=s(Y7);tpo=r(MXe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),pN=n(MXe,"A",{href:!0});var plt=s(pN);apo=r(plt,"AutoFeatureExtractor.from_pretrained()"),plt.forEach(t),npo=r(MXe," class method."),MXe.forEach(t),spo=i(Js),K7=n(Js,"P",{});var EXe=s(K7);lpo=r(EXe,"This class cannot be instantiated directly using "),jle=n(EXe,"CODE",{});var _lt=s(jle);ipo=r(_lt,"__init__()"),_lt.forEach(t),dpo=r(EXe," (throws an error)."),EXe.forEach(t),cpo=i(Js),He=n(Js,"DIV",{class:!0});var ra=s(He);T(Z7.$$.fragment,ra),fpo=i(ra),Dle=n(ra,"P",{});var ult=s(Dle);mpo=r(ult,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),ult.forEach(t),gpo=i(ra),Sa=n(ra,"P",{});var IA=s(Sa);hpo=r(IA,"The feature extractor class to instantiate is selected based on the "),Gle=n(IA,"CODE",{});var blt=s(Gle);ppo=r(blt,"model_type"),blt.forEach(t),_po=r(IA,` property of the config object
(either passed as an argument or loaded from `),Ole=n(IA,"CODE",{});var vlt=s(Ole);upo=r(vlt,"pretrained_model_name_or_path"),vlt.forEach(t),bpo=r(IA,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Vle=n(IA,"CODE",{});var Flt=s(Vle);vpo=r(Flt,"pretrained_model_name_or_path"),Flt.forEach(t),Fpo=r(IA,":"),IA.forEach(t),Tpo=i(ra),Y=n(ra,"UL",{});var K=s(Y);yh=n(K,"LI",{});var Mye=s(yh);Xle=n(Mye,"STRONG",{});var Tlt=s(Xle);Mpo=r(Tlt,"beit"),Tlt.forEach(t),Epo=r(Mye," \u2014 "),_N=n(Mye,"A",{href:!0});var Mlt=s(_N);Cpo=r(Mlt,"BeitFeatureExtractor"),Mlt.forEach(t),wpo=r(Mye," (BEiT model)"),Mye.forEach(t),Apo=i(K),xh=n(K,"LI",{});var Eye=s(xh);zle=n(Eye,"STRONG",{});var Elt=s(zle);Lpo=r(Elt,"clip"),Elt.forEach(t),ypo=r(Eye," \u2014 "),uN=n(Eye,"A",{href:!0});var Clt=s(uN);xpo=r(Clt,"CLIPFeatureExtractor"),Clt.forEach(t),$po=r(Eye," (CLIP model)"),Eye.forEach(t),kpo=i(K),$h=n(K,"LI",{});var Cye=s($h);Qle=n(Cye,"STRONG",{});var wlt=s(Qle);Spo=r(wlt,"convnext"),wlt.forEach(t),Rpo=r(Cye," \u2014 "),bN=n(Cye,"A",{href:!0});var Alt=s(bN);Ppo=r(Alt,"ConvNextFeatureExtractor"),Alt.forEach(t),Bpo=r(Cye," (ConvNeXT model)"),Cye.forEach(t),Ipo=i(K),kh=n(K,"LI",{});var wye=s(kh);Wle=n(wye,"STRONG",{});var Llt=s(Wle);Npo=r(Llt,"cvt"),Llt.forEach(t),qpo=r(wye," \u2014 "),vN=n(wye,"A",{href:!0});var ylt=s(vN);jpo=r(ylt,"ConvNextFeatureExtractor"),ylt.forEach(t),Dpo=r(wye," (CvT model)"),wye.forEach(t),Gpo=i(K),Sh=n(K,"LI",{});var Aye=s(Sh);Hle=n(Aye,"STRONG",{});var xlt=s(Hle);Opo=r(xlt,"data2vec-audio"),xlt.forEach(t),Vpo=r(Aye," \u2014 "),FN=n(Aye,"A",{href:!0});var $lt=s(FN);Xpo=r($lt,"Wav2Vec2FeatureExtractor"),$lt.forEach(t),zpo=r(Aye," (Data2VecAudio model)"),Aye.forEach(t),Qpo=i(K),Rh=n(K,"LI",{});var Lye=s(Rh);Ule=n(Lye,"STRONG",{});var klt=s(Ule);Wpo=r(klt,"data2vec-vision"),klt.forEach(t),Hpo=r(Lye," \u2014 "),TN=n(Lye,"A",{href:!0});var Slt=s(TN);Upo=r(Slt,"BeitFeatureExtractor"),Slt.forEach(t),Jpo=r(Lye," (Data2VecVision model)"),Lye.forEach(t),Ypo=i(K),Ph=n(K,"LI",{});var yye=s(Ph);Jle=n(yye,"STRONG",{});var Rlt=s(Jle);Kpo=r(Rlt,"deit"),Rlt.forEach(t),Zpo=r(yye," \u2014 "),MN=n(yye,"A",{href:!0});var Plt=s(MN);e_o=r(Plt,"DeiTFeatureExtractor"),Plt.forEach(t),o_o=r(yye," (DeiT model)"),yye.forEach(t),r_o=i(K),Bh=n(K,"LI",{});var xye=s(Bh);Yle=n(xye,"STRONG",{});var Blt=s(Yle);t_o=r(Blt,"detr"),Blt.forEach(t),a_o=r(xye," \u2014 "),EN=n(xye,"A",{href:!0});var Ilt=s(EN);n_o=r(Ilt,"DetrFeatureExtractor"),Ilt.forEach(t),s_o=r(xye," (DETR model)"),xye.forEach(t),l_o=i(K),Ih=n(K,"LI",{});var $ye=s(Ih);Kle=n($ye,"STRONG",{});var Nlt=s(Kle);i_o=r(Nlt,"dpt"),Nlt.forEach(t),d_o=r($ye," \u2014 "),CN=n($ye,"A",{href:!0});var qlt=s(CN);c_o=r(qlt,"DPTFeatureExtractor"),qlt.forEach(t),f_o=r($ye," (DPT model)"),$ye.forEach(t),m_o=i(K),Nh=n(K,"LI",{});var kye=s(Nh);Zle=n(kye,"STRONG",{});var jlt=s(Zle);g_o=r(jlt,"flava"),jlt.forEach(t),h_o=r(kye," \u2014 "),wN=n(kye,"A",{href:!0});var Dlt=s(wN);p_o=r(Dlt,"FlavaFeatureExtractor"),Dlt.forEach(t),__o=r(kye," (FLAVA model)"),kye.forEach(t),u_o=i(K),qh=n(K,"LI",{});var Sye=s(qh);eie=n(Sye,"STRONG",{});var Glt=s(eie);b_o=r(Glt,"glpn"),Glt.forEach(t),v_o=r(Sye," \u2014 "),AN=n(Sye,"A",{href:!0});var Olt=s(AN);F_o=r(Olt,"GLPNFeatureExtractor"),Olt.forEach(t),T_o=r(Sye," (GLPN model)"),Sye.forEach(t),M_o=i(K),jh=n(K,"LI",{});var Rye=s(jh);oie=n(Rye,"STRONG",{});var Vlt=s(oie);E_o=r(Vlt,"hubert"),Vlt.forEach(t),C_o=r(Rye," \u2014 "),LN=n(Rye,"A",{href:!0});var Xlt=s(LN);w_o=r(Xlt,"Wav2Vec2FeatureExtractor"),Xlt.forEach(t),A_o=r(Rye," (Hubert model)"),Rye.forEach(t),L_o=i(K),Dh=n(K,"LI",{});var Pye=s(Dh);rie=n(Pye,"STRONG",{});var zlt=s(rie);y_o=r(zlt,"imagegpt"),zlt.forEach(t),x_o=r(Pye," \u2014 "),yN=n(Pye,"A",{href:!0});var Qlt=s(yN);$_o=r(Qlt,"ImageGPTFeatureExtractor"),Qlt.forEach(t),k_o=r(Pye," (ImageGPT model)"),Pye.forEach(t),S_o=i(K),Gh=n(K,"LI",{});var Bye=s(Gh);tie=n(Bye,"STRONG",{});var Wlt=s(tie);R_o=r(Wlt,"layoutlmv2"),Wlt.forEach(t),P_o=r(Bye," \u2014 "),xN=n(Bye,"A",{href:!0});var Hlt=s(xN);B_o=r(Hlt,"LayoutLMv2FeatureExtractor"),Hlt.forEach(t),I_o=r(Bye," (LayoutLMv2 model)"),Bye.forEach(t),N_o=i(K),Oh=n(K,"LI",{});var Iye=s(Oh);aie=n(Iye,"STRONG",{});var Ult=s(aie);q_o=r(Ult,"layoutlmv3"),Ult.forEach(t),j_o=r(Iye," \u2014 "),$N=n(Iye,"A",{href:!0});var Jlt=s($N);D_o=r(Jlt,"LayoutLMv3FeatureExtractor"),Jlt.forEach(t),G_o=r(Iye," (LayoutLMv3 model)"),Iye.forEach(t),O_o=i(K),Vh=n(K,"LI",{});var Nye=s(Vh);nie=n(Nye,"STRONG",{});var Ylt=s(nie);V_o=r(Ylt,"levit"),Ylt.forEach(t),X_o=r(Nye," \u2014 "),kN=n(Nye,"A",{href:!0});var Klt=s(kN);z_o=r(Klt,"LevitFeatureExtractor"),Klt.forEach(t),Q_o=r(Nye," (LeViT model)"),Nye.forEach(t),W_o=i(K),Xh=n(K,"LI",{});var qye=s(Xh);sie=n(qye,"STRONG",{});var Zlt=s(sie);H_o=r(Zlt,"maskformer"),Zlt.forEach(t),U_o=r(qye," \u2014 "),SN=n(qye,"A",{href:!0});var eit=s(SN);J_o=r(eit,"MaskFormerFeatureExtractor"),eit.forEach(t),Y_o=r(qye," (MaskFormer model)"),qye.forEach(t),K_o=i(K),zh=n(K,"LI",{});var jye=s(zh);lie=n(jye,"STRONG",{});var oit=s(lie);Z_o=r(oit,"mctct"),oit.forEach(t),euo=r(jye," \u2014 "),RN=n(jye,"A",{href:!0});var rit=s(RN);ouo=r(rit,"MCTCTFeatureExtractor"),rit.forEach(t),ruo=r(jye," (M-CTC-T model)"),jye.forEach(t),tuo=i(K),Qh=n(K,"LI",{});var Dye=s(Qh);iie=n(Dye,"STRONG",{});var tit=s(iie);auo=r(tit,"perceiver"),tit.forEach(t),nuo=r(Dye," \u2014 "),PN=n(Dye,"A",{href:!0});var ait=s(PN);suo=r(ait,"PerceiverFeatureExtractor"),ait.forEach(t),luo=r(Dye," (Perceiver model)"),Dye.forEach(t),iuo=i(K),Wh=n(K,"LI",{});var Gye=s(Wh);die=n(Gye,"STRONG",{});var nit=s(die);duo=r(nit,"poolformer"),nit.forEach(t),cuo=r(Gye," \u2014 "),BN=n(Gye,"A",{href:!0});var sit=s(BN);fuo=r(sit,"PoolFormerFeatureExtractor"),sit.forEach(t),muo=r(Gye," (PoolFormer model)"),Gye.forEach(t),guo=i(K),Hh=n(K,"LI",{});var Oye=s(Hh);cie=n(Oye,"STRONG",{});var lit=s(cie);huo=r(lit,"regnet"),lit.forEach(t),puo=r(Oye," \u2014 "),IN=n(Oye,"A",{href:!0});var iit=s(IN);_uo=r(iit,"ConvNextFeatureExtractor"),iit.forEach(t),uuo=r(Oye," (RegNet model)"),Oye.forEach(t),buo=i(K),Uh=n(K,"LI",{});var Vye=s(Uh);fie=n(Vye,"STRONG",{});var dit=s(fie);vuo=r(dit,"resnet"),dit.forEach(t),Fuo=r(Vye," \u2014 "),NN=n(Vye,"A",{href:!0});var cit=s(NN);Tuo=r(cit,"ConvNextFeatureExtractor"),cit.forEach(t),Muo=r(Vye," (ResNet model)"),Vye.forEach(t),Euo=i(K),Jh=n(K,"LI",{});var Xye=s(Jh);mie=n(Xye,"STRONG",{});var fit=s(mie);Cuo=r(fit,"segformer"),fit.forEach(t),wuo=r(Xye," \u2014 "),qN=n(Xye,"A",{href:!0});var mit=s(qN);Auo=r(mit,"SegformerFeatureExtractor"),mit.forEach(t),Luo=r(Xye," (SegFormer model)"),Xye.forEach(t),yuo=i(K),Yh=n(K,"LI",{});var zye=s(Yh);gie=n(zye,"STRONG",{});var git=s(gie);xuo=r(git,"speech_to_text"),git.forEach(t),$uo=r(zye," \u2014 "),jN=n(zye,"A",{href:!0});var hit=s(jN);kuo=r(hit,"Speech2TextFeatureExtractor"),hit.forEach(t),Suo=r(zye," (Speech2Text model)"),zye.forEach(t),Ruo=i(K),Kh=n(K,"LI",{});var Qye=s(Kh);hie=n(Qye,"STRONG",{});var pit=s(hie);Puo=r(pit,"swin"),pit.forEach(t),Buo=r(Qye," \u2014 "),DN=n(Qye,"A",{href:!0});var _it=s(DN);Iuo=r(_it,"ViTFeatureExtractor"),_it.forEach(t),Nuo=r(Qye," (Swin Transformer model)"),Qye.forEach(t),quo=i(K),Zh=n(K,"LI",{});var Wye=s(Zh);pie=n(Wye,"STRONG",{});var uit=s(pie);juo=r(uit,"van"),uit.forEach(t),Duo=r(Wye," \u2014 "),GN=n(Wye,"A",{href:!0});var bit=s(GN);Guo=r(bit,"ConvNextFeatureExtractor"),bit.forEach(t),Ouo=r(Wye," (VAN model)"),Wye.forEach(t),Vuo=i(K),ep=n(K,"LI",{});var Hye=s(ep);_ie=n(Hye,"STRONG",{});var vit=s(_ie);Xuo=r(vit,"vilt"),vit.forEach(t),zuo=r(Hye," \u2014 "),ON=n(Hye,"A",{href:!0});var Fit=s(ON);Quo=r(Fit,"ViltFeatureExtractor"),Fit.forEach(t),Wuo=r(Hye," (ViLT model)"),Hye.forEach(t),Huo=i(K),op=n(K,"LI",{});var Uye=s(op);uie=n(Uye,"STRONG",{});var Tit=s(uie);Uuo=r(Tit,"vit"),Tit.forEach(t),Juo=r(Uye," \u2014 "),VN=n(Uye,"A",{href:!0});var Mit=s(VN);Yuo=r(Mit,"ViTFeatureExtractor"),Mit.forEach(t),Kuo=r(Uye," (ViT model)"),Uye.forEach(t),Zuo=i(K),rp=n(K,"LI",{});var Jye=s(rp);bie=n(Jye,"STRONG",{});var Eit=s(bie);e1o=r(Eit,"vit_mae"),Eit.forEach(t),o1o=r(Jye," \u2014 "),XN=n(Jye,"A",{href:!0});var Cit=s(XN);r1o=r(Cit,"ViTFeatureExtractor"),Cit.forEach(t),t1o=r(Jye," (ViTMAE model)"),Jye.forEach(t),a1o=i(K),tp=n(K,"LI",{});var Yye=s(tp);vie=n(Yye,"STRONG",{});var wit=s(vie);n1o=r(wit,"wav2vec2"),wit.forEach(t),s1o=r(Yye," \u2014 "),zN=n(Yye,"A",{href:!0});var Ait=s(zN);l1o=r(Ait,"Wav2Vec2FeatureExtractor"),Ait.forEach(t),i1o=r(Yye," (Wav2Vec2 model)"),Yye.forEach(t),d1o=i(K),ap=n(K,"LI",{});var Kye=s(ap);Fie=n(Kye,"STRONG",{});var Lit=s(Fie);c1o=r(Lit,"wav2vec2-conformer"),Lit.forEach(t),f1o=r(Kye," \u2014 "),QN=n(Kye,"A",{href:!0});var yit=s(QN);m1o=r(yit,"Wav2Vec2FeatureExtractor"),yit.forEach(t),g1o=r(Kye," (Wav2Vec2-Conformer model)"),Kye.forEach(t),h1o=i(K),np=n(K,"LI",{});var Zye=s(np);Tie=n(Zye,"STRONG",{});var xit=s(Tie);p1o=r(xit,"yolos"),xit.forEach(t),_1o=r(Zye," \u2014 "),WN=n(Zye,"A",{href:!0});var $it=s(WN);u1o=r($it,"YolosFeatureExtractor"),$it.forEach(t),b1o=r(Zye," (YOLOS model)"),Zye.forEach(t),K.forEach(t),v1o=i(ra),T(sp.$$.fragment,ra),F1o=i(ra),T(lp.$$.fragment,ra),ra.forEach(t),T1o=i(Js),ip=n(Js,"DIV",{class:!0});var CXe=s(ip);T(ey.$$.fragment,CXe),M1o=i(CXe),Mie=n(CXe,"P",{});var kit=s(Mie);E1o=r(kit,"Register a new feature extractor for this class."),kit.forEach(t),CXe.forEach(t),Js.forEach(t),TOe=i(f),Pi=n(f,"H2",{class:!0});var wXe=s(Pi);dp=n(wXe,"A",{id:!0,class:!0,href:!0});var Sit=s(dp);Eie=n(Sit,"SPAN",{});var Rit=s(Eie);T(oy.$$.fragment,Rit),Rit.forEach(t),Sit.forEach(t),C1o=i(wXe),Cie=n(wXe,"SPAN",{});var Pit=s(Cie);w1o=r(Pit,"AutoProcessor"),Pit.forEach(t),wXe.forEach(t),MOe=i(f),yo=n(f,"DIV",{class:!0});var Ys=s(yo);T(ry.$$.fragment,Ys),A1o=i(Ys),ty=n(Ys,"P",{});var AXe=s(ty);L1o=r(AXe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),HN=n(AXe,"A",{href:!0});var Bit=s(HN);y1o=r(Bit,"AutoProcessor.from_pretrained()"),Bit.forEach(t),x1o=r(AXe," class method."),AXe.forEach(t),$1o=i(Ys),ay=n(Ys,"P",{});var LXe=s(ay);k1o=r(LXe,"This class cannot be instantiated directly using "),wie=n(LXe,"CODE",{});var Iit=s(wie);S1o=r(Iit,"__init__()"),Iit.forEach(t),R1o=r(LXe," (throws an error)."),LXe.forEach(t),P1o=i(Ys),Ue=n(Ys,"DIV",{class:!0});var ta=s(Ue);T(ny.$$.fragment,ta),B1o=i(ta),Aie=n(ta,"P",{});var Nit=s(Aie);I1o=r(Nit,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Nit.forEach(t),N1o=i(ta),Bi=n(ta,"P",{});var Soe=s(Bi);q1o=r(Soe,"The processor class to instantiate is selected based on the "),Lie=n(Soe,"CODE",{});var qit=s(Lie);j1o=r(qit,"model_type"),qit.forEach(t),D1o=r(Soe,` property of the config object (either
passed as an argument or loaded from `),yie=n(Soe,"CODE",{});var jit=s(yie);G1o=r(jit,"pretrained_model_name_or_path"),jit.forEach(t),O1o=r(Soe," if possible):"),Soe.forEach(t),V1o=i(ta),he=n(ta,"UL",{});var ue=s(he);cp=n(ue,"LI",{});var e8e=s(cp);xie=n(e8e,"STRONG",{});var Dit=s(xie);X1o=r(Dit,"clip"),Dit.forEach(t),z1o=r(e8e," \u2014 "),UN=n(e8e,"A",{href:!0});var Git=s(UN);Q1o=r(Git,"CLIPProcessor"),Git.forEach(t),W1o=r(e8e," (CLIP model)"),e8e.forEach(t),H1o=i(ue),fp=n(ue,"LI",{});var o8e=s(fp);$ie=n(o8e,"STRONG",{});var Oit=s($ie);U1o=r(Oit,"flava"),Oit.forEach(t),J1o=r(o8e," \u2014 "),kie=n(o8e,"CODE",{});var Vit=s(kie);Y1o=r(Vit,"FLAVAProcessor"),Vit.forEach(t),K1o=r(o8e," (FLAVA model)"),o8e.forEach(t),Z1o=i(ue),mp=n(ue,"LI",{});var r8e=s(mp);Sie=n(r8e,"STRONG",{});var Xit=s(Sie);e2o=r(Xit,"layoutlmv2"),Xit.forEach(t),o2o=r(r8e," \u2014 "),JN=n(r8e,"A",{href:!0});var zit=s(JN);r2o=r(zit,"LayoutLMv2Processor"),zit.forEach(t),t2o=r(r8e," (LayoutLMv2 model)"),r8e.forEach(t),a2o=i(ue),gp=n(ue,"LI",{});var t8e=s(gp);Rie=n(t8e,"STRONG",{});var Qit=s(Rie);n2o=r(Qit,"layoutlmv3"),Qit.forEach(t),s2o=r(t8e," \u2014 "),YN=n(t8e,"A",{href:!0});var Wit=s(YN);l2o=r(Wit,"LayoutLMv3Processor"),Wit.forEach(t),i2o=r(t8e," (LayoutLMv3 model)"),t8e.forEach(t),d2o=i(ue),hp=n(ue,"LI",{});var a8e=s(hp);Pie=n(a8e,"STRONG",{});var Hit=s(Pie);c2o=r(Hit,"layoutxlm"),Hit.forEach(t),f2o=r(a8e," \u2014 "),KN=n(a8e,"A",{href:!0});var Uit=s(KN);m2o=r(Uit,"LayoutXLMProcessor"),Uit.forEach(t),g2o=r(a8e," (LayoutXLM model)"),a8e.forEach(t),h2o=i(ue),pp=n(ue,"LI",{});var n8e=s(pp);Bie=n(n8e,"STRONG",{});var Jit=s(Bie);p2o=r(Jit,"sew"),Jit.forEach(t),_2o=r(n8e," \u2014 "),ZN=n(n8e,"A",{href:!0});var Yit=s(ZN);u2o=r(Yit,"Wav2Vec2Processor"),Yit.forEach(t),b2o=r(n8e," (SEW model)"),n8e.forEach(t),v2o=i(ue),_p=n(ue,"LI",{});var s8e=s(_p);Iie=n(s8e,"STRONG",{});var Kit=s(Iie);F2o=r(Kit,"sew-d"),Kit.forEach(t),T2o=r(s8e," \u2014 "),eq=n(s8e,"A",{href:!0});var Zit=s(eq);M2o=r(Zit,"Wav2Vec2Processor"),Zit.forEach(t),E2o=r(s8e," (SEW-D model)"),s8e.forEach(t),C2o=i(ue),up=n(ue,"LI",{});var l8e=s(up);Nie=n(l8e,"STRONG",{});var edt=s(Nie);w2o=r(edt,"speech_to_text"),edt.forEach(t),A2o=r(l8e," \u2014 "),oq=n(l8e,"A",{href:!0});var odt=s(oq);L2o=r(odt,"Speech2TextProcessor"),odt.forEach(t),y2o=r(l8e," (Speech2Text model)"),l8e.forEach(t),x2o=i(ue),bp=n(ue,"LI",{});var i8e=s(bp);qie=n(i8e,"STRONG",{});var rdt=s(qie);$2o=r(rdt,"speech_to_text_2"),rdt.forEach(t),k2o=r(i8e," \u2014 "),rq=n(i8e,"A",{href:!0});var tdt=s(rq);S2o=r(tdt,"Speech2Text2Processor"),tdt.forEach(t),R2o=r(i8e," (Speech2Text2 model)"),i8e.forEach(t),P2o=i(ue),vp=n(ue,"LI",{});var d8e=s(vp);jie=n(d8e,"STRONG",{});var adt=s(jie);B2o=r(adt,"trocr"),adt.forEach(t),I2o=r(d8e," \u2014 "),tq=n(d8e,"A",{href:!0});var ndt=s(tq);N2o=r(ndt,"TrOCRProcessor"),ndt.forEach(t),q2o=r(d8e," (TrOCR model)"),d8e.forEach(t),j2o=i(ue),Fp=n(ue,"LI",{});var c8e=s(Fp);Die=n(c8e,"STRONG",{});var sdt=s(Die);D2o=r(sdt,"unispeech"),sdt.forEach(t),G2o=r(c8e," \u2014 "),aq=n(c8e,"A",{href:!0});var ldt=s(aq);O2o=r(ldt,"Wav2Vec2Processor"),ldt.forEach(t),V2o=r(c8e," (UniSpeech model)"),c8e.forEach(t),X2o=i(ue),Tp=n(ue,"LI",{});var f8e=s(Tp);Gie=n(f8e,"STRONG",{});var idt=s(Gie);z2o=r(idt,"unispeech-sat"),idt.forEach(t),Q2o=r(f8e," \u2014 "),nq=n(f8e,"A",{href:!0});var ddt=s(nq);W2o=r(ddt,"Wav2Vec2Processor"),ddt.forEach(t),H2o=r(f8e," (UniSpeechSat model)"),f8e.forEach(t),U2o=i(ue),Mp=n(ue,"LI",{});var m8e=s(Mp);Oie=n(m8e,"STRONG",{});var cdt=s(Oie);J2o=r(cdt,"vilt"),cdt.forEach(t),Y2o=r(m8e," \u2014 "),sq=n(m8e,"A",{href:!0});var fdt=s(sq);K2o=r(fdt,"ViltProcessor"),fdt.forEach(t),Z2o=r(m8e," (ViLT model)"),m8e.forEach(t),ebo=i(ue),Ep=n(ue,"LI",{});var g8e=s(Ep);Vie=n(g8e,"STRONG",{});var mdt=s(Vie);obo=r(mdt,"vision-text-dual-encoder"),mdt.forEach(t),rbo=r(g8e," \u2014 "),lq=n(g8e,"A",{href:!0});var gdt=s(lq);tbo=r(gdt,"VisionTextDualEncoderProcessor"),gdt.forEach(t),abo=r(g8e," (VisionTextDualEncoder model)"),g8e.forEach(t),nbo=i(ue),Cp=n(ue,"LI",{});var h8e=s(Cp);Xie=n(h8e,"STRONG",{});var hdt=s(Xie);sbo=r(hdt,"wav2vec2"),hdt.forEach(t),lbo=r(h8e," \u2014 "),iq=n(h8e,"A",{href:!0});var pdt=s(iq);ibo=r(pdt,"Wav2Vec2Processor"),pdt.forEach(t),dbo=r(h8e," (Wav2Vec2 model)"),h8e.forEach(t),cbo=i(ue),wp=n(ue,"LI",{});var p8e=s(wp);zie=n(p8e,"STRONG",{});var _dt=s(zie);fbo=r(_dt,"wav2vec2-conformer"),_dt.forEach(t),mbo=r(p8e," \u2014 "),dq=n(p8e,"A",{href:!0});var udt=s(dq);gbo=r(udt,"Wav2Vec2Processor"),udt.forEach(t),hbo=r(p8e," (Wav2Vec2-Conformer model)"),p8e.forEach(t),pbo=i(ue),Ap=n(ue,"LI",{});var _8e=s(Ap);Qie=n(_8e,"STRONG",{});var bdt=s(Qie);_bo=r(bdt,"wavlm"),bdt.forEach(t),ubo=r(_8e," \u2014 "),cq=n(_8e,"A",{href:!0});var vdt=s(cq);bbo=r(vdt,"Wav2Vec2Processor"),vdt.forEach(t),vbo=r(_8e," (WavLM model)"),_8e.forEach(t),ue.forEach(t),Fbo=i(ta),T(Lp.$$.fragment,ta),Tbo=i(ta),T(yp.$$.fragment,ta),ta.forEach(t),Mbo=i(Ys),xp=n(Ys,"DIV",{class:!0});var yXe=s(xp);T(sy.$$.fragment,yXe),Ebo=i(yXe),Wie=n(yXe,"P",{});var Fdt=s(Wie);Cbo=r(Fdt,"Register a new processor for this class."),Fdt.forEach(t),yXe.forEach(t),Ys.forEach(t),EOe=i(f),Ii=n(f,"H2",{class:!0});var xXe=s(Ii);$p=n(xXe,"A",{id:!0,class:!0,href:!0});var Tdt=s($p);Hie=n(Tdt,"SPAN",{});var Mdt=s(Hie);T(ly.$$.fragment,Mdt),Mdt.forEach(t),Tdt.forEach(t),wbo=i(xXe),Uie=n(xXe,"SPAN",{});var Edt=s(Uie);Abo=r(Edt,"AutoModel"),Edt.forEach(t),xXe.forEach(t),COe=i(f),xo=n(f,"DIV",{class:!0});var Ks=s(xo);T(iy.$$.fragment,Ks),Lbo=i(Ks),Ni=n(Ks,"P",{});var Roe=s(Ni);ybo=r(Roe,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),fq=n(Roe,"A",{href:!0});var Cdt=s(fq);xbo=r(Cdt,"from_pretrained()"),Cdt.forEach(t),$bo=r(Roe," class method or the "),mq=n(Roe,"A",{href:!0});var wdt=s(mq);kbo=r(wdt,"from_config()"),wdt.forEach(t),Sbo=r(Roe,` class
method.`),Roe.forEach(t),Rbo=i(Ks),dy=n(Ks,"P",{});var $Xe=s(dy);Pbo=r($Xe,"This class cannot be instantiated directly using "),Jie=n($Xe,"CODE",{});var Adt=s(Jie);Bbo=r(Adt,"__init__()"),Adt.forEach(t),Ibo=r($Xe," (throws an error)."),$Xe.forEach(t),Nbo=i(Ks),nt=n(Ks,"DIV",{class:!0});var NA=s(nt);T(cy.$$.fragment,NA),qbo=i(NA),Yie=n(NA,"P",{});var Ldt=s(Yie);jbo=r(Ldt,"Instantiates one of the base model classes of the library from a configuration."),Ldt.forEach(t),Dbo=i(NA),qi=n(NA,"P",{});var Poe=s(qi);Gbo=r(Poe,`Note:
Loading a model from its configuration file does `),Kie=n(Poe,"STRONG",{});var ydt=s(Kie);Obo=r(ydt,"not"),ydt.forEach(t),Vbo=r(Poe,` load the model weights. It only affects the
model\u2019s configuration. Use `),gq=n(Poe,"A",{href:!0});var xdt=s(gq);Xbo=r(xdt,"from_pretrained()"),xdt.forEach(t),zbo=r(Poe," to load the model weights."),Poe.forEach(t),Qbo=i(NA),T(kp.$$.fragment,NA),NA.forEach(t),Wbo=i(Ks),Je=n(Ks,"DIV",{class:!0});var aa=s(Je);T(fy.$$.fragment,aa),Hbo=i(aa),Zie=n(aa,"P",{});var $dt=s(Zie);Ubo=r($dt,"Instantiate one of the base model classes of the library from a pretrained model."),$dt.forEach(t),Jbo=i(aa),Ra=n(aa,"P",{});var qA=s(Ra);Ybo=r(qA,"The model class to instantiate is selected based on the "),ede=n(qA,"CODE",{});var kdt=s(ede);Kbo=r(kdt,"model_type"),kdt.forEach(t),Zbo=r(qA,` property of the config object (either
passed as an argument or loaded from `),ode=n(qA,"CODE",{});var Sdt=s(ode);e4o=r(Sdt,"pretrained_model_name_or_path"),Sdt.forEach(t),o4o=r(qA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rde=n(qA,"CODE",{});var Rdt=s(rde);r4o=r(Rdt,"pretrained_model_name_or_path"),Rdt.forEach(t),t4o=r(qA,":"),qA.forEach(t),a4o=i(aa),y=n(aa,"UL",{});var $=s(y);Sp=n($,"LI",{});var u8e=s(Sp);tde=n(u8e,"STRONG",{});var Pdt=s(tde);n4o=r(Pdt,"albert"),Pdt.forEach(t),s4o=r(u8e," \u2014 "),hq=n(u8e,"A",{href:!0});var Bdt=s(hq);l4o=r(Bdt,"AlbertModel"),Bdt.forEach(t),i4o=r(u8e," (ALBERT model)"),u8e.forEach(t),d4o=i($),Rp=n($,"LI",{});var b8e=s(Rp);ade=n(b8e,"STRONG",{});var Idt=s(ade);c4o=r(Idt,"bart"),Idt.forEach(t),f4o=r(b8e," \u2014 "),pq=n(b8e,"A",{href:!0});var Ndt=s(pq);m4o=r(Ndt,"BartModel"),Ndt.forEach(t),g4o=r(b8e," (BART model)"),b8e.forEach(t),h4o=i($),Pp=n($,"LI",{});var v8e=s(Pp);nde=n(v8e,"STRONG",{});var qdt=s(nde);p4o=r(qdt,"beit"),qdt.forEach(t),_4o=r(v8e," \u2014 "),_q=n(v8e,"A",{href:!0});var jdt=s(_q);u4o=r(jdt,"BeitModel"),jdt.forEach(t),b4o=r(v8e," (BEiT model)"),v8e.forEach(t),v4o=i($),Bp=n($,"LI",{});var F8e=s(Bp);sde=n(F8e,"STRONG",{});var Ddt=s(sde);F4o=r(Ddt,"bert"),Ddt.forEach(t),T4o=r(F8e," \u2014 "),uq=n(F8e,"A",{href:!0});var Gdt=s(uq);M4o=r(Gdt,"BertModel"),Gdt.forEach(t),E4o=r(F8e," (BERT model)"),F8e.forEach(t),C4o=i($),Ip=n($,"LI",{});var T8e=s(Ip);lde=n(T8e,"STRONG",{});var Odt=s(lde);w4o=r(Odt,"bert-generation"),Odt.forEach(t),A4o=r(T8e," \u2014 "),bq=n(T8e,"A",{href:!0});var Vdt=s(bq);L4o=r(Vdt,"BertGenerationEncoder"),Vdt.forEach(t),y4o=r(T8e," (Bert Generation model)"),T8e.forEach(t),x4o=i($),Np=n($,"LI",{});var M8e=s(Np);ide=n(M8e,"STRONG",{});var Xdt=s(ide);$4o=r(Xdt,"big_bird"),Xdt.forEach(t),k4o=r(M8e," \u2014 "),vq=n(M8e,"A",{href:!0});var zdt=s(vq);S4o=r(zdt,"BigBirdModel"),zdt.forEach(t),R4o=r(M8e," (BigBird model)"),M8e.forEach(t),P4o=i($),qp=n($,"LI",{});var E8e=s(qp);dde=n(E8e,"STRONG",{});var Qdt=s(dde);B4o=r(Qdt,"bigbird_pegasus"),Qdt.forEach(t),I4o=r(E8e," \u2014 "),Fq=n(E8e,"A",{href:!0});var Wdt=s(Fq);N4o=r(Wdt,"BigBirdPegasusModel"),Wdt.forEach(t),q4o=r(E8e," (BigBird-Pegasus model)"),E8e.forEach(t),j4o=i($),jp=n($,"LI",{});var C8e=s(jp);cde=n(C8e,"STRONG",{});var Hdt=s(cde);D4o=r(Hdt,"blenderbot"),Hdt.forEach(t),G4o=r(C8e," \u2014 "),Tq=n(C8e,"A",{href:!0});var Udt=s(Tq);O4o=r(Udt,"BlenderbotModel"),Udt.forEach(t),V4o=r(C8e," (Blenderbot model)"),C8e.forEach(t),X4o=i($),Dp=n($,"LI",{});var w8e=s(Dp);fde=n(w8e,"STRONG",{});var Jdt=s(fde);z4o=r(Jdt,"blenderbot-small"),Jdt.forEach(t),Q4o=r(w8e," \u2014 "),Mq=n(w8e,"A",{href:!0});var Ydt=s(Mq);W4o=r(Ydt,"BlenderbotSmallModel"),Ydt.forEach(t),H4o=r(w8e," (BlenderbotSmall model)"),w8e.forEach(t),U4o=i($),Gp=n($,"LI",{});var A8e=s(Gp);mde=n(A8e,"STRONG",{});var Kdt=s(mde);J4o=r(Kdt,"bloom"),Kdt.forEach(t),Y4o=r(A8e," \u2014 "),Eq=n(A8e,"A",{href:!0});var Zdt=s(Eq);K4o=r(Zdt,"BloomModel"),Zdt.forEach(t),Z4o=r(A8e," (BLOOM model)"),A8e.forEach(t),e5o=i($),Op=n($,"LI",{});var L8e=s(Op);gde=n(L8e,"STRONG",{});var ect=s(gde);o5o=r(ect,"camembert"),ect.forEach(t),r5o=r(L8e," \u2014 "),Cq=n(L8e,"A",{href:!0});var oct=s(Cq);t5o=r(oct,"CamembertModel"),oct.forEach(t),a5o=r(L8e," (CamemBERT model)"),L8e.forEach(t),n5o=i($),Vp=n($,"LI",{});var y8e=s(Vp);hde=n(y8e,"STRONG",{});var rct=s(hde);s5o=r(rct,"canine"),rct.forEach(t),l5o=r(y8e," \u2014 "),wq=n(y8e,"A",{href:!0});var tct=s(wq);i5o=r(tct,"CanineModel"),tct.forEach(t),d5o=r(y8e," (CANINE model)"),y8e.forEach(t),c5o=i($),Xp=n($,"LI",{});var x8e=s(Xp);pde=n(x8e,"STRONG",{});var act=s(pde);f5o=r(act,"clip"),act.forEach(t),m5o=r(x8e," \u2014 "),Aq=n(x8e,"A",{href:!0});var nct=s(Aq);g5o=r(nct,"CLIPModel"),nct.forEach(t),h5o=r(x8e," (CLIP model)"),x8e.forEach(t),p5o=i($),zp=n($,"LI",{});var $8e=s(zp);_de=n($8e,"STRONG",{});var sct=s(_de);_5o=r(sct,"codegen"),sct.forEach(t),u5o=r($8e," \u2014 "),Lq=n($8e,"A",{href:!0});var lct=s(Lq);b5o=r(lct,"CodeGenModel"),lct.forEach(t),v5o=r($8e," (CodeGen model)"),$8e.forEach(t),F5o=i($),Qp=n($,"LI",{});var k8e=s(Qp);ude=n(k8e,"STRONG",{});var ict=s(ude);T5o=r(ict,"convbert"),ict.forEach(t),M5o=r(k8e," \u2014 "),yq=n(k8e,"A",{href:!0});var dct=s(yq);E5o=r(dct,"ConvBertModel"),dct.forEach(t),C5o=r(k8e," (ConvBERT model)"),k8e.forEach(t),w5o=i($),Wp=n($,"LI",{});var S8e=s(Wp);bde=n(S8e,"STRONG",{});var cct=s(bde);A5o=r(cct,"convnext"),cct.forEach(t),L5o=r(S8e," \u2014 "),xq=n(S8e,"A",{href:!0});var fct=s(xq);y5o=r(fct,"ConvNextModel"),fct.forEach(t),x5o=r(S8e," (ConvNeXT model)"),S8e.forEach(t),$5o=i($),Hp=n($,"LI",{});var R8e=s(Hp);vde=n(R8e,"STRONG",{});var mct=s(vde);k5o=r(mct,"ctrl"),mct.forEach(t),S5o=r(R8e," \u2014 "),$q=n(R8e,"A",{href:!0});var gct=s($q);R5o=r(gct,"CTRLModel"),gct.forEach(t),P5o=r(R8e," (CTRL model)"),R8e.forEach(t),B5o=i($),Up=n($,"LI",{});var P8e=s(Up);Fde=n(P8e,"STRONG",{});var hct=s(Fde);I5o=r(hct,"cvt"),hct.forEach(t),N5o=r(P8e," \u2014 "),kq=n(P8e,"A",{href:!0});var pct=s(kq);q5o=r(pct,"CvtModel"),pct.forEach(t),j5o=r(P8e," (CvT model)"),P8e.forEach(t),D5o=i($),Jp=n($,"LI",{});var B8e=s(Jp);Tde=n(B8e,"STRONG",{});var _ct=s(Tde);G5o=r(_ct,"data2vec-audio"),_ct.forEach(t),O5o=r(B8e," \u2014 "),Sq=n(B8e,"A",{href:!0});var uct=s(Sq);V5o=r(uct,"Data2VecAudioModel"),uct.forEach(t),X5o=r(B8e," (Data2VecAudio model)"),B8e.forEach(t),z5o=i($),Yp=n($,"LI",{});var I8e=s(Yp);Mde=n(I8e,"STRONG",{});var bct=s(Mde);Q5o=r(bct,"data2vec-text"),bct.forEach(t),W5o=r(I8e," \u2014 "),Rq=n(I8e,"A",{href:!0});var vct=s(Rq);H5o=r(vct,"Data2VecTextModel"),vct.forEach(t),U5o=r(I8e," (Data2VecText model)"),I8e.forEach(t),J5o=i($),Kp=n($,"LI",{});var N8e=s(Kp);Ede=n(N8e,"STRONG",{});var Fct=s(Ede);Y5o=r(Fct,"data2vec-vision"),Fct.forEach(t),K5o=r(N8e," \u2014 "),Pq=n(N8e,"A",{href:!0});var Tct=s(Pq);Z5o=r(Tct,"Data2VecVisionModel"),Tct.forEach(t),e3o=r(N8e," (Data2VecVision model)"),N8e.forEach(t),o3o=i($),Zp=n($,"LI",{});var q8e=s(Zp);Cde=n(q8e,"STRONG",{});var Mct=s(Cde);r3o=r(Mct,"deberta"),Mct.forEach(t),t3o=r(q8e," \u2014 "),Bq=n(q8e,"A",{href:!0});var Ect=s(Bq);a3o=r(Ect,"DebertaModel"),Ect.forEach(t),n3o=r(q8e," (DeBERTa model)"),q8e.forEach(t),s3o=i($),e_=n($,"LI",{});var j8e=s(e_);wde=n(j8e,"STRONG",{});var Cct=s(wde);l3o=r(Cct,"deberta-v2"),Cct.forEach(t),i3o=r(j8e," \u2014 "),Iq=n(j8e,"A",{href:!0});var wct=s(Iq);d3o=r(wct,"DebertaV2Model"),wct.forEach(t),c3o=r(j8e," (DeBERTa-v2 model)"),j8e.forEach(t),f3o=i($),o_=n($,"LI",{});var D8e=s(o_);Ade=n(D8e,"STRONG",{});var Act=s(Ade);m3o=r(Act,"decision_transformer"),Act.forEach(t),g3o=r(D8e," \u2014 "),Nq=n(D8e,"A",{href:!0});var Lct=s(Nq);h3o=r(Lct,"DecisionTransformerModel"),Lct.forEach(t),p3o=r(D8e," (Decision Transformer model)"),D8e.forEach(t),_3o=i($),r_=n($,"LI",{});var G8e=s(r_);Lde=n(G8e,"STRONG",{});var yct=s(Lde);u3o=r(yct,"deit"),yct.forEach(t),b3o=r(G8e," \u2014 "),qq=n(G8e,"A",{href:!0});var xct=s(qq);v3o=r(xct,"DeiTModel"),xct.forEach(t),F3o=r(G8e," (DeiT model)"),G8e.forEach(t),T3o=i($),t_=n($,"LI",{});var O8e=s(t_);yde=n(O8e,"STRONG",{});var $ct=s(yde);M3o=r($ct,"detr"),$ct.forEach(t),E3o=r(O8e," \u2014 "),jq=n(O8e,"A",{href:!0});var kct=s(jq);C3o=r(kct,"DetrModel"),kct.forEach(t),w3o=r(O8e," (DETR model)"),O8e.forEach(t),A3o=i($),a_=n($,"LI",{});var V8e=s(a_);xde=n(V8e,"STRONG",{});var Sct=s(xde);L3o=r(Sct,"distilbert"),Sct.forEach(t),y3o=r(V8e," \u2014 "),Dq=n(V8e,"A",{href:!0});var Rct=s(Dq);x3o=r(Rct,"DistilBertModel"),Rct.forEach(t),$3o=r(V8e," (DistilBERT model)"),V8e.forEach(t),k3o=i($),n_=n($,"LI",{});var X8e=s(n_);$de=n(X8e,"STRONG",{});var Pct=s($de);S3o=r(Pct,"dpr"),Pct.forEach(t),R3o=r(X8e," \u2014 "),Gq=n(X8e,"A",{href:!0});var Bct=s(Gq);P3o=r(Bct,"DPRQuestionEncoder"),Bct.forEach(t),B3o=r(X8e," (DPR model)"),X8e.forEach(t),I3o=i($),s_=n($,"LI",{});var z8e=s(s_);kde=n(z8e,"STRONG",{});var Ict=s(kde);N3o=r(Ict,"dpt"),Ict.forEach(t),q3o=r(z8e," \u2014 "),Oq=n(z8e,"A",{href:!0});var Nct=s(Oq);j3o=r(Nct,"DPTModel"),Nct.forEach(t),D3o=r(z8e," (DPT model)"),z8e.forEach(t),G3o=i($),l_=n($,"LI",{});var Q8e=s(l_);Sde=n(Q8e,"STRONG",{});var qct=s(Sde);O3o=r(qct,"electra"),qct.forEach(t),V3o=r(Q8e," \u2014 "),Vq=n(Q8e,"A",{href:!0});var jct=s(Vq);X3o=r(jct,"ElectraModel"),jct.forEach(t),z3o=r(Q8e," (ELECTRA model)"),Q8e.forEach(t),Q3o=i($),i_=n($,"LI",{});var W8e=s(i_);Rde=n(W8e,"STRONG",{});var Dct=s(Rde);W3o=r(Dct,"flaubert"),Dct.forEach(t),H3o=r(W8e," \u2014 "),Xq=n(W8e,"A",{href:!0});var Gct=s(Xq);U3o=r(Gct,"FlaubertModel"),Gct.forEach(t),J3o=r(W8e," (FlauBERT model)"),W8e.forEach(t),Y3o=i($),d_=n($,"LI",{});var H8e=s(d_);Pde=n(H8e,"STRONG",{});var Oct=s(Pde);K3o=r(Oct,"flava"),Oct.forEach(t),Z3o=r(H8e," \u2014 "),zq=n(H8e,"A",{href:!0});var Vct=s(zq);evo=r(Vct,"FlavaModel"),Vct.forEach(t),ovo=r(H8e," (FLAVA model)"),H8e.forEach(t),rvo=i($),c_=n($,"LI",{});var U8e=s(c_);Bde=n(U8e,"STRONG",{});var Xct=s(Bde);tvo=r(Xct,"fnet"),Xct.forEach(t),avo=r(U8e," \u2014 "),Qq=n(U8e,"A",{href:!0});var zct=s(Qq);nvo=r(zct,"FNetModel"),zct.forEach(t),svo=r(U8e," (FNet model)"),U8e.forEach(t),lvo=i($),f_=n($,"LI",{});var J8e=s(f_);Ide=n(J8e,"STRONG",{});var Qct=s(Ide);ivo=r(Qct,"fsmt"),Qct.forEach(t),dvo=r(J8e," \u2014 "),Wq=n(J8e,"A",{href:!0});var Wct=s(Wq);cvo=r(Wct,"FSMTModel"),Wct.forEach(t),fvo=r(J8e," (FairSeq Machine-Translation model)"),J8e.forEach(t),mvo=i($),Xs=n($,"LI",{});var nS=s(Xs);Nde=n(nS,"STRONG",{});var Hct=s(Nde);gvo=r(Hct,"funnel"),Hct.forEach(t),hvo=r(nS," \u2014 "),Hq=n(nS,"A",{href:!0});var Uct=s(Hq);pvo=r(Uct,"FunnelModel"),Uct.forEach(t),_vo=r(nS," or "),Uq=n(nS,"A",{href:!0});var Jct=s(Uq);uvo=r(Jct,"FunnelBaseModel"),Jct.forEach(t),bvo=r(nS," (Funnel Transformer model)"),nS.forEach(t),vvo=i($),m_=n($,"LI",{});var Y8e=s(m_);qde=n(Y8e,"STRONG",{});var Yct=s(qde);Fvo=r(Yct,"glpn"),Yct.forEach(t),Tvo=r(Y8e," \u2014 "),Jq=n(Y8e,"A",{href:!0});var Kct=s(Jq);Mvo=r(Kct,"GLPNModel"),Kct.forEach(t),Evo=r(Y8e," (GLPN model)"),Y8e.forEach(t),Cvo=i($),g_=n($,"LI",{});var K8e=s(g_);jde=n(K8e,"STRONG",{});var Zct=s(jde);wvo=r(Zct,"gpt2"),Zct.forEach(t),Avo=r(K8e," \u2014 "),Yq=n(K8e,"A",{href:!0});var eft=s(Yq);Lvo=r(eft,"GPT2Model"),eft.forEach(t),yvo=r(K8e," (OpenAI GPT-2 model)"),K8e.forEach(t),xvo=i($),h_=n($,"LI",{});var Z8e=s(h_);Dde=n(Z8e,"STRONG",{});var oft=s(Dde);$vo=r(oft,"gpt_neo"),oft.forEach(t),kvo=r(Z8e," \u2014 "),Kq=n(Z8e,"A",{href:!0});var rft=s(Kq);Svo=r(rft,"GPTNeoModel"),rft.forEach(t),Rvo=r(Z8e," (GPT Neo model)"),Z8e.forEach(t),Pvo=i($),p_=n($,"LI",{});var e9e=s(p_);Gde=n(e9e,"STRONG",{});var tft=s(Gde);Bvo=r(tft,"gpt_neox"),tft.forEach(t),Ivo=r(e9e," \u2014 "),Zq=n(e9e,"A",{href:!0});var aft=s(Zq);Nvo=r(aft,"GPTNeoXModel"),aft.forEach(t),qvo=r(e9e," (GPT NeoX model)"),e9e.forEach(t),jvo=i($),__=n($,"LI",{});var o9e=s(__);Ode=n(o9e,"STRONG",{});var nft=s(Ode);Dvo=r(nft,"gptj"),nft.forEach(t),Gvo=r(o9e," \u2014 "),ej=n(o9e,"A",{href:!0});var sft=s(ej);Ovo=r(sft,"GPTJModel"),sft.forEach(t),Vvo=r(o9e," (GPT-J model)"),o9e.forEach(t),Xvo=i($),u_=n($,"LI",{});var r9e=s(u_);Vde=n(r9e,"STRONG",{});var lft=s(Vde);zvo=r(lft,"hubert"),lft.forEach(t),Qvo=r(r9e," \u2014 "),oj=n(r9e,"A",{href:!0});var ift=s(oj);Wvo=r(ift,"HubertModel"),ift.forEach(t),Hvo=r(r9e," (Hubert model)"),r9e.forEach(t),Uvo=i($),b_=n($,"LI",{});var t9e=s(b_);Xde=n(t9e,"STRONG",{});var dft=s(Xde);Jvo=r(dft,"ibert"),dft.forEach(t),Yvo=r(t9e," \u2014 "),rj=n(t9e,"A",{href:!0});var cft=s(rj);Kvo=r(cft,"IBertModel"),cft.forEach(t),Zvo=r(t9e," (I-BERT model)"),t9e.forEach(t),eFo=i($),v_=n($,"LI",{});var a9e=s(v_);zde=n(a9e,"STRONG",{});var fft=s(zde);oFo=r(fft,"imagegpt"),fft.forEach(t),rFo=r(a9e," \u2014 "),tj=n(a9e,"A",{href:!0});var mft=s(tj);tFo=r(mft,"ImageGPTModel"),mft.forEach(t),aFo=r(a9e," (ImageGPT model)"),a9e.forEach(t),nFo=i($),F_=n($,"LI",{});var n9e=s(F_);Qde=n(n9e,"STRONG",{});var gft=s(Qde);sFo=r(gft,"layoutlm"),gft.forEach(t),lFo=r(n9e," \u2014 "),aj=n(n9e,"A",{href:!0});var hft=s(aj);iFo=r(hft,"LayoutLMModel"),hft.forEach(t),dFo=r(n9e," (LayoutLM model)"),n9e.forEach(t),cFo=i($),T_=n($,"LI",{});var s9e=s(T_);Wde=n(s9e,"STRONG",{});var pft=s(Wde);fFo=r(pft,"layoutlmv2"),pft.forEach(t),mFo=r(s9e," \u2014 "),nj=n(s9e,"A",{href:!0});var _ft=s(nj);gFo=r(_ft,"LayoutLMv2Model"),_ft.forEach(t),hFo=r(s9e," (LayoutLMv2 model)"),s9e.forEach(t),pFo=i($),M_=n($,"LI",{});var l9e=s(M_);Hde=n(l9e,"STRONG",{});var uft=s(Hde);_Fo=r(uft,"layoutlmv3"),uft.forEach(t),uFo=r(l9e," \u2014 "),sj=n(l9e,"A",{href:!0});var bft=s(sj);bFo=r(bft,"LayoutLMv3Model"),bft.forEach(t),vFo=r(l9e," (LayoutLMv3 model)"),l9e.forEach(t),FFo=i($),E_=n($,"LI",{});var i9e=s(E_);Ude=n(i9e,"STRONG",{});var vft=s(Ude);TFo=r(vft,"led"),vft.forEach(t),MFo=r(i9e," \u2014 "),lj=n(i9e,"A",{href:!0});var Fft=s(lj);EFo=r(Fft,"LEDModel"),Fft.forEach(t),CFo=r(i9e," (LED model)"),i9e.forEach(t),wFo=i($),C_=n($,"LI",{});var d9e=s(C_);Jde=n(d9e,"STRONG",{});var Tft=s(Jde);AFo=r(Tft,"levit"),Tft.forEach(t),LFo=r(d9e," \u2014 "),ij=n(d9e,"A",{href:!0});var Mft=s(ij);yFo=r(Mft,"LevitModel"),Mft.forEach(t),xFo=r(d9e," (LeViT model)"),d9e.forEach(t),$Fo=i($),w_=n($,"LI",{});var c9e=s(w_);Yde=n(c9e,"STRONG",{});var Eft=s(Yde);kFo=r(Eft,"longformer"),Eft.forEach(t),SFo=r(c9e," \u2014 "),dj=n(c9e,"A",{href:!0});var Cft=s(dj);RFo=r(Cft,"LongformerModel"),Cft.forEach(t),PFo=r(c9e," (Longformer model)"),c9e.forEach(t),BFo=i($),A_=n($,"LI",{});var f9e=s(A_);Kde=n(f9e,"STRONG",{});var wft=s(Kde);IFo=r(wft,"longt5"),wft.forEach(t),NFo=r(f9e," \u2014 "),cj=n(f9e,"A",{href:!0});var Aft=s(cj);qFo=r(Aft,"LongT5Model"),Aft.forEach(t),jFo=r(f9e," (LongT5 model)"),f9e.forEach(t),DFo=i($),L_=n($,"LI",{});var m9e=s(L_);Zde=n(m9e,"STRONG",{});var Lft=s(Zde);GFo=r(Lft,"luke"),Lft.forEach(t),OFo=r(m9e," \u2014 "),fj=n(m9e,"A",{href:!0});var yft=s(fj);VFo=r(yft,"LukeModel"),yft.forEach(t),XFo=r(m9e," (LUKE model)"),m9e.forEach(t),zFo=i($),y_=n($,"LI",{});var g9e=s(y_);ece=n(g9e,"STRONG",{});var xft=s(ece);QFo=r(xft,"lxmert"),xft.forEach(t),WFo=r(g9e," \u2014 "),mj=n(g9e,"A",{href:!0});var $ft=s(mj);HFo=r($ft,"LxmertModel"),$ft.forEach(t),UFo=r(g9e," (LXMERT model)"),g9e.forEach(t),JFo=i($),x_=n($,"LI",{});var h9e=s(x_);oce=n(h9e,"STRONG",{});var kft=s(oce);YFo=r(kft,"m2m_100"),kft.forEach(t),KFo=r(h9e," \u2014 "),gj=n(h9e,"A",{href:!0});var Sft=s(gj);ZFo=r(Sft,"M2M100Model"),Sft.forEach(t),e6o=r(h9e," (M2M100 model)"),h9e.forEach(t),o6o=i($),$_=n($,"LI",{});var p9e=s($_);rce=n(p9e,"STRONG",{});var Rft=s(rce);r6o=r(Rft,"marian"),Rft.forEach(t),t6o=r(p9e," \u2014 "),hj=n(p9e,"A",{href:!0});var Pft=s(hj);a6o=r(Pft,"MarianModel"),Pft.forEach(t),n6o=r(p9e," (Marian model)"),p9e.forEach(t),s6o=i($),k_=n($,"LI",{});var _9e=s(k_);tce=n(_9e,"STRONG",{});var Bft=s(tce);l6o=r(Bft,"maskformer"),Bft.forEach(t),i6o=r(_9e," \u2014 "),pj=n(_9e,"A",{href:!0});var Ift=s(pj);d6o=r(Ift,"MaskFormerModel"),Ift.forEach(t),c6o=r(_9e," (MaskFormer model)"),_9e.forEach(t),f6o=i($),S_=n($,"LI",{});var u9e=s(S_);ace=n(u9e,"STRONG",{});var Nft=s(ace);m6o=r(Nft,"mbart"),Nft.forEach(t),g6o=r(u9e," \u2014 "),_j=n(u9e,"A",{href:!0});var qft=s(_j);h6o=r(qft,"MBartModel"),qft.forEach(t),p6o=r(u9e," (mBART model)"),u9e.forEach(t),_6o=i($),R_=n($,"LI",{});var b9e=s(R_);nce=n(b9e,"STRONG",{});var jft=s(nce);u6o=r(jft,"mctct"),jft.forEach(t),b6o=r(b9e," \u2014 "),uj=n(b9e,"A",{href:!0});var Dft=s(uj);v6o=r(Dft,"MCTCTModel"),Dft.forEach(t),F6o=r(b9e," (M-CTC-T model)"),b9e.forEach(t),T6o=i($),P_=n($,"LI",{});var v9e=s(P_);sce=n(v9e,"STRONG",{});var Gft=s(sce);M6o=r(Gft,"megatron-bert"),Gft.forEach(t),E6o=r(v9e," \u2014 "),bj=n(v9e,"A",{href:!0});var Oft=s(bj);C6o=r(Oft,"MegatronBertModel"),Oft.forEach(t),w6o=r(v9e," (Megatron-BERT model)"),v9e.forEach(t),A6o=i($),B_=n($,"LI",{});var F9e=s(B_);lce=n(F9e,"STRONG",{});var Vft=s(lce);L6o=r(Vft,"mobilebert"),Vft.forEach(t),y6o=r(F9e," \u2014 "),vj=n(F9e,"A",{href:!0});var Xft=s(vj);x6o=r(Xft,"MobileBertModel"),Xft.forEach(t),$6o=r(F9e," (MobileBERT model)"),F9e.forEach(t),k6o=i($),I_=n($,"LI",{});var T9e=s(I_);ice=n(T9e,"STRONG",{});var zft=s(ice);S6o=r(zft,"mpnet"),zft.forEach(t),R6o=r(T9e," \u2014 "),Fj=n(T9e,"A",{href:!0});var Qft=s(Fj);P6o=r(Qft,"MPNetModel"),Qft.forEach(t),B6o=r(T9e," (MPNet model)"),T9e.forEach(t),I6o=i($),N_=n($,"LI",{});var M9e=s(N_);dce=n(M9e,"STRONG",{});var Wft=s(dce);N6o=r(Wft,"mt5"),Wft.forEach(t),q6o=r(M9e," \u2014 "),Tj=n(M9e,"A",{href:!0});var Hft=s(Tj);j6o=r(Hft,"MT5Model"),Hft.forEach(t),D6o=r(M9e," (MT5 model)"),M9e.forEach(t),G6o=i($),q_=n($,"LI",{});var E9e=s(q_);cce=n(E9e,"STRONG",{});var Uft=s(cce);O6o=r(Uft,"nezha"),Uft.forEach(t),V6o=r(E9e," \u2014 "),Mj=n(E9e,"A",{href:!0});var Jft=s(Mj);X6o=r(Jft,"NezhaModel"),Jft.forEach(t),z6o=r(E9e," (Nezha model)"),E9e.forEach(t),Q6o=i($),j_=n($,"LI",{});var C9e=s(j_);fce=n(C9e,"STRONG",{});var Yft=s(fce);W6o=r(Yft,"nystromformer"),Yft.forEach(t),H6o=r(C9e," \u2014 "),Ej=n(C9e,"A",{href:!0});var Kft=s(Ej);U6o=r(Kft,"NystromformerModel"),Kft.forEach(t),J6o=r(C9e," (Nystr\xF6mformer model)"),C9e.forEach(t),Y6o=i($),D_=n($,"LI",{});var w9e=s(D_);mce=n(w9e,"STRONG",{});var Zft=s(mce);K6o=r(Zft,"openai-gpt"),Zft.forEach(t),Z6o=r(w9e," \u2014 "),Cj=n(w9e,"A",{href:!0});var emt=s(Cj);eTo=r(emt,"OpenAIGPTModel"),emt.forEach(t),oTo=r(w9e," (OpenAI GPT model)"),w9e.forEach(t),rTo=i($),G_=n($,"LI",{});var A9e=s(G_);gce=n(A9e,"STRONG",{});var omt=s(gce);tTo=r(omt,"opt"),omt.forEach(t),aTo=r(A9e," \u2014 "),wj=n(A9e,"A",{href:!0});var rmt=s(wj);nTo=r(rmt,"OPTModel"),rmt.forEach(t),sTo=r(A9e," (OPT model)"),A9e.forEach(t),lTo=i($),O_=n($,"LI",{});var L9e=s(O_);hce=n(L9e,"STRONG",{});var tmt=s(hce);iTo=r(tmt,"pegasus"),tmt.forEach(t),dTo=r(L9e," \u2014 "),Aj=n(L9e,"A",{href:!0});var amt=s(Aj);cTo=r(amt,"PegasusModel"),amt.forEach(t),fTo=r(L9e," (Pegasus model)"),L9e.forEach(t),mTo=i($),V_=n($,"LI",{});var y9e=s(V_);pce=n(y9e,"STRONG",{});var nmt=s(pce);gTo=r(nmt,"perceiver"),nmt.forEach(t),hTo=r(y9e," \u2014 "),Lj=n(y9e,"A",{href:!0});var smt=s(Lj);pTo=r(smt,"PerceiverModel"),smt.forEach(t),_To=r(y9e," (Perceiver model)"),y9e.forEach(t),uTo=i($),X_=n($,"LI",{});var x9e=s(X_);_ce=n(x9e,"STRONG",{});var lmt=s(_ce);bTo=r(lmt,"plbart"),lmt.forEach(t),vTo=r(x9e," \u2014 "),yj=n(x9e,"A",{href:!0});var imt=s(yj);FTo=r(imt,"PLBartModel"),imt.forEach(t),TTo=r(x9e," (PLBart model)"),x9e.forEach(t),MTo=i($),z_=n($,"LI",{});var $9e=s(z_);uce=n($9e,"STRONG",{});var dmt=s(uce);ETo=r(dmt,"poolformer"),dmt.forEach(t),CTo=r($9e," \u2014 "),xj=n($9e,"A",{href:!0});var cmt=s(xj);wTo=r(cmt,"PoolFormerModel"),cmt.forEach(t),ATo=r($9e," (PoolFormer model)"),$9e.forEach(t),LTo=i($),Q_=n($,"LI",{});var k9e=s(Q_);bce=n(k9e,"STRONG",{});var fmt=s(bce);yTo=r(fmt,"prophetnet"),fmt.forEach(t),xTo=r(k9e," \u2014 "),$j=n(k9e,"A",{href:!0});var mmt=s($j);$To=r(mmt,"ProphetNetModel"),mmt.forEach(t),kTo=r(k9e," (ProphetNet model)"),k9e.forEach(t),STo=i($),W_=n($,"LI",{});var S9e=s(W_);vce=n(S9e,"STRONG",{});var gmt=s(vce);RTo=r(gmt,"qdqbert"),gmt.forEach(t),PTo=r(S9e," \u2014 "),kj=n(S9e,"A",{href:!0});var hmt=s(kj);BTo=r(hmt,"QDQBertModel"),hmt.forEach(t),ITo=r(S9e," (QDQBert model)"),S9e.forEach(t),NTo=i($),H_=n($,"LI",{});var R9e=s(H_);Fce=n(R9e,"STRONG",{});var pmt=s(Fce);qTo=r(pmt,"reformer"),pmt.forEach(t),jTo=r(R9e," \u2014 "),Sj=n(R9e,"A",{href:!0});var _mt=s(Sj);DTo=r(_mt,"ReformerModel"),_mt.forEach(t),GTo=r(R9e," (Reformer model)"),R9e.forEach(t),OTo=i($),U_=n($,"LI",{});var P9e=s(U_);Tce=n(P9e,"STRONG",{});var umt=s(Tce);VTo=r(umt,"regnet"),umt.forEach(t),XTo=r(P9e," \u2014 "),Rj=n(P9e,"A",{href:!0});var bmt=s(Rj);zTo=r(bmt,"RegNetModel"),bmt.forEach(t),QTo=r(P9e," (RegNet model)"),P9e.forEach(t),WTo=i($),J_=n($,"LI",{});var B9e=s(J_);Mce=n(B9e,"STRONG",{});var vmt=s(Mce);HTo=r(vmt,"rembert"),vmt.forEach(t),UTo=r(B9e," \u2014 "),Pj=n(B9e,"A",{href:!0});var Fmt=s(Pj);JTo=r(Fmt,"RemBertModel"),Fmt.forEach(t),YTo=r(B9e," (RemBERT model)"),B9e.forEach(t),KTo=i($),Y_=n($,"LI",{});var I9e=s(Y_);Ece=n(I9e,"STRONG",{});var Tmt=s(Ece);ZTo=r(Tmt,"resnet"),Tmt.forEach(t),eMo=r(I9e," \u2014 "),Bj=n(I9e,"A",{href:!0});var Mmt=s(Bj);oMo=r(Mmt,"ResNetModel"),Mmt.forEach(t),rMo=r(I9e," (ResNet model)"),I9e.forEach(t),tMo=i($),K_=n($,"LI",{});var N9e=s(K_);Cce=n(N9e,"STRONG",{});var Emt=s(Cce);aMo=r(Emt,"retribert"),Emt.forEach(t),nMo=r(N9e," \u2014 "),Ij=n(N9e,"A",{href:!0});var Cmt=s(Ij);sMo=r(Cmt,"RetriBertModel"),Cmt.forEach(t),lMo=r(N9e," (RetriBERT model)"),N9e.forEach(t),iMo=i($),Z_=n($,"LI",{});var q9e=s(Z_);wce=n(q9e,"STRONG",{});var wmt=s(wce);dMo=r(wmt,"roberta"),wmt.forEach(t),cMo=r(q9e," \u2014 "),Nj=n(q9e,"A",{href:!0});var Amt=s(Nj);fMo=r(Amt,"RobertaModel"),Amt.forEach(t),mMo=r(q9e," (RoBERTa model)"),q9e.forEach(t),gMo=i($),eu=n($,"LI",{});var j9e=s(eu);Ace=n(j9e,"STRONG",{});var Lmt=s(Ace);hMo=r(Lmt,"roformer"),Lmt.forEach(t),pMo=r(j9e," \u2014 "),qj=n(j9e,"A",{href:!0});var ymt=s(qj);_Mo=r(ymt,"RoFormerModel"),ymt.forEach(t),uMo=r(j9e," (RoFormer model)"),j9e.forEach(t),bMo=i($),ou=n($,"LI",{});var D9e=s(ou);Lce=n(D9e,"STRONG",{});var xmt=s(Lce);vMo=r(xmt,"segformer"),xmt.forEach(t),FMo=r(D9e," \u2014 "),jj=n(D9e,"A",{href:!0});var $mt=s(jj);TMo=r($mt,"SegformerModel"),$mt.forEach(t),MMo=r(D9e," (SegFormer model)"),D9e.forEach(t),EMo=i($),ru=n($,"LI",{});var G9e=s(ru);yce=n(G9e,"STRONG",{});var kmt=s(yce);CMo=r(kmt,"sew"),kmt.forEach(t),wMo=r(G9e," \u2014 "),Dj=n(G9e,"A",{href:!0});var Smt=s(Dj);AMo=r(Smt,"SEWModel"),Smt.forEach(t),LMo=r(G9e," (SEW model)"),G9e.forEach(t),yMo=i($),tu=n($,"LI",{});var O9e=s(tu);xce=n(O9e,"STRONG",{});var Rmt=s(xce);xMo=r(Rmt,"sew-d"),Rmt.forEach(t),$Mo=r(O9e," \u2014 "),Gj=n(O9e,"A",{href:!0});var Pmt=s(Gj);kMo=r(Pmt,"SEWDModel"),Pmt.forEach(t),SMo=r(O9e," (SEW-D model)"),O9e.forEach(t),RMo=i($),au=n($,"LI",{});var V9e=s(au);$ce=n(V9e,"STRONG",{});var Bmt=s($ce);PMo=r(Bmt,"speech_to_text"),Bmt.forEach(t),BMo=r(V9e," \u2014 "),Oj=n(V9e,"A",{href:!0});var Imt=s(Oj);IMo=r(Imt,"Speech2TextModel"),Imt.forEach(t),NMo=r(V9e," (Speech2Text model)"),V9e.forEach(t),qMo=i($),nu=n($,"LI",{});var X9e=s(nu);kce=n(X9e,"STRONG",{});var Nmt=s(kce);jMo=r(Nmt,"splinter"),Nmt.forEach(t),DMo=r(X9e," \u2014 "),Vj=n(X9e,"A",{href:!0});var qmt=s(Vj);GMo=r(qmt,"SplinterModel"),qmt.forEach(t),OMo=r(X9e," (Splinter model)"),X9e.forEach(t),VMo=i($),su=n($,"LI",{});var z9e=s(su);Sce=n(z9e,"STRONG",{});var jmt=s(Sce);XMo=r(jmt,"squeezebert"),jmt.forEach(t),zMo=r(z9e," \u2014 "),Xj=n(z9e,"A",{href:!0});var Dmt=s(Xj);QMo=r(Dmt,"SqueezeBertModel"),Dmt.forEach(t),WMo=r(z9e," (SqueezeBERT model)"),z9e.forEach(t),HMo=i($),lu=n($,"LI",{});var Q9e=s(lu);Rce=n(Q9e,"STRONG",{});var Gmt=s(Rce);UMo=r(Gmt,"swin"),Gmt.forEach(t),JMo=r(Q9e," \u2014 "),zj=n(Q9e,"A",{href:!0});var Omt=s(zj);YMo=r(Omt,"SwinModel"),Omt.forEach(t),KMo=r(Q9e," (Swin Transformer model)"),Q9e.forEach(t),ZMo=i($),iu=n($,"LI",{});var W9e=s(iu);Pce=n(W9e,"STRONG",{});var Vmt=s(Pce);eEo=r(Vmt,"t5"),Vmt.forEach(t),oEo=r(W9e," \u2014 "),Qj=n(W9e,"A",{href:!0});var Xmt=s(Qj);rEo=r(Xmt,"T5Model"),Xmt.forEach(t),tEo=r(W9e," (T5 model)"),W9e.forEach(t),aEo=i($),du=n($,"LI",{});var H9e=s(du);Bce=n(H9e,"STRONG",{});var zmt=s(Bce);nEo=r(zmt,"tapas"),zmt.forEach(t),sEo=r(H9e," \u2014 "),Wj=n(H9e,"A",{href:!0});var Qmt=s(Wj);lEo=r(Qmt,"TapasModel"),Qmt.forEach(t),iEo=r(H9e," (TAPAS model)"),H9e.forEach(t),dEo=i($),cu=n($,"LI",{});var U9e=s(cu);Ice=n(U9e,"STRONG",{});var Wmt=s(Ice);cEo=r(Wmt,"trajectory_transformer"),Wmt.forEach(t),fEo=r(U9e," \u2014 "),Hj=n(U9e,"A",{href:!0});var Hmt=s(Hj);mEo=r(Hmt,"TrajectoryTransformerModel"),Hmt.forEach(t),gEo=r(U9e," (Trajectory Transformer model)"),U9e.forEach(t),hEo=i($),fu=n($,"LI",{});var J9e=s(fu);Nce=n(J9e,"STRONG",{});var Umt=s(Nce);pEo=r(Umt,"transfo-xl"),Umt.forEach(t),_Eo=r(J9e," \u2014 "),Uj=n(J9e,"A",{href:!0});var Jmt=s(Uj);uEo=r(Jmt,"TransfoXLModel"),Jmt.forEach(t),bEo=r(J9e," (Transformer-XL model)"),J9e.forEach(t),vEo=i($),mu=n($,"LI",{});var Y9e=s(mu);qce=n(Y9e,"STRONG",{});var Ymt=s(qce);FEo=r(Ymt,"unispeech"),Ymt.forEach(t),TEo=r(Y9e," \u2014 "),Jj=n(Y9e,"A",{href:!0});var Kmt=s(Jj);MEo=r(Kmt,"UniSpeechModel"),Kmt.forEach(t),EEo=r(Y9e," (UniSpeech model)"),Y9e.forEach(t),CEo=i($),gu=n($,"LI",{});var K9e=s(gu);jce=n(K9e,"STRONG",{});var Zmt=s(jce);wEo=r(Zmt,"unispeech-sat"),Zmt.forEach(t),AEo=r(K9e," \u2014 "),Yj=n(K9e,"A",{href:!0});var egt=s(Yj);LEo=r(egt,"UniSpeechSatModel"),egt.forEach(t),yEo=r(K9e," (UniSpeechSat model)"),K9e.forEach(t),xEo=i($),hu=n($,"LI",{});var Z9e=s(hu);Dce=n(Z9e,"STRONG",{});var ogt=s(Dce);$Eo=r(ogt,"van"),ogt.forEach(t),kEo=r(Z9e," \u2014 "),Kj=n(Z9e,"A",{href:!0});var rgt=s(Kj);SEo=r(rgt,"VanModel"),rgt.forEach(t),REo=r(Z9e," (VAN model)"),Z9e.forEach(t),PEo=i($),pu=n($,"LI",{});var exe=s(pu);Gce=n(exe,"STRONG",{});var tgt=s(Gce);BEo=r(tgt,"vilt"),tgt.forEach(t),IEo=r(exe," \u2014 "),Zj=n(exe,"A",{href:!0});var agt=s(Zj);NEo=r(agt,"ViltModel"),agt.forEach(t),qEo=r(exe," (ViLT model)"),exe.forEach(t),jEo=i($),_u=n($,"LI",{});var oxe=s(_u);Oce=n(oxe,"STRONG",{});var ngt=s(Oce);DEo=r(ngt,"vision-text-dual-encoder"),ngt.forEach(t),GEo=r(oxe," \u2014 "),eD=n(oxe,"A",{href:!0});var sgt=s(eD);OEo=r(sgt,"VisionTextDualEncoderModel"),sgt.forEach(t),VEo=r(oxe," (VisionTextDualEncoder model)"),oxe.forEach(t),XEo=i($),uu=n($,"LI",{});var rxe=s(uu);Vce=n(rxe,"STRONG",{});var lgt=s(Vce);zEo=r(lgt,"visual_bert"),lgt.forEach(t),QEo=r(rxe," \u2014 "),oD=n(rxe,"A",{href:!0});var igt=s(oD);WEo=r(igt,"VisualBertModel"),igt.forEach(t),HEo=r(rxe," (VisualBERT model)"),rxe.forEach(t),UEo=i($),bu=n($,"LI",{});var txe=s(bu);Xce=n(txe,"STRONG",{});var dgt=s(Xce);JEo=r(dgt,"vit"),dgt.forEach(t),YEo=r(txe," \u2014 "),rD=n(txe,"A",{href:!0});var cgt=s(rD);KEo=r(cgt,"ViTModel"),cgt.forEach(t),ZEo=r(txe," (ViT model)"),txe.forEach(t),eCo=i($),vu=n($,"LI",{});var axe=s(vu);zce=n(axe,"STRONG",{});var fgt=s(zce);oCo=r(fgt,"vit_mae"),fgt.forEach(t),rCo=r(axe," \u2014 "),tD=n(axe,"A",{href:!0});var mgt=s(tD);tCo=r(mgt,"ViTMAEModel"),mgt.forEach(t),aCo=r(axe," (ViTMAE model)"),axe.forEach(t),nCo=i($),Fu=n($,"LI",{});var nxe=s(Fu);Qce=n(nxe,"STRONG",{});var ggt=s(Qce);sCo=r(ggt,"wav2vec2"),ggt.forEach(t),lCo=r(nxe," \u2014 "),aD=n(nxe,"A",{href:!0});var hgt=s(aD);iCo=r(hgt,"Wav2Vec2Model"),hgt.forEach(t),dCo=r(nxe," (Wav2Vec2 model)"),nxe.forEach(t),cCo=i($),Tu=n($,"LI",{});var sxe=s(Tu);Wce=n(sxe,"STRONG",{});var pgt=s(Wce);fCo=r(pgt,"wav2vec2-conformer"),pgt.forEach(t),mCo=r(sxe," \u2014 "),nD=n(sxe,"A",{href:!0});var _gt=s(nD);gCo=r(_gt,"Wav2Vec2ConformerModel"),_gt.forEach(t),hCo=r(sxe," (Wav2Vec2-Conformer model)"),sxe.forEach(t),pCo=i($),Mu=n($,"LI",{});var lxe=s(Mu);Hce=n(lxe,"STRONG",{});var ugt=s(Hce);_Co=r(ugt,"wavlm"),ugt.forEach(t),uCo=r(lxe," \u2014 "),sD=n(lxe,"A",{href:!0});var bgt=s(sD);bCo=r(bgt,"WavLMModel"),bgt.forEach(t),vCo=r(lxe," (WavLM model)"),lxe.forEach(t),FCo=i($),Eu=n($,"LI",{});var ixe=s(Eu);Uce=n(ixe,"STRONG",{});var vgt=s(Uce);TCo=r(vgt,"xglm"),vgt.forEach(t),MCo=r(ixe," \u2014 "),lD=n(ixe,"A",{href:!0});var Fgt=s(lD);ECo=r(Fgt,"XGLMModel"),Fgt.forEach(t),CCo=r(ixe," (XGLM model)"),ixe.forEach(t),wCo=i($),Cu=n($,"LI",{});var dxe=s(Cu);Jce=n(dxe,"STRONG",{});var Tgt=s(Jce);ACo=r(Tgt,"xlm"),Tgt.forEach(t),LCo=r(dxe," \u2014 "),iD=n(dxe,"A",{href:!0});var Mgt=s(iD);yCo=r(Mgt,"XLMModel"),Mgt.forEach(t),xCo=r(dxe," (XLM model)"),dxe.forEach(t),$Co=i($),wu=n($,"LI",{});var cxe=s(wu);Yce=n(cxe,"STRONG",{});var Egt=s(Yce);kCo=r(Egt,"xlm-prophetnet"),Egt.forEach(t),SCo=r(cxe," \u2014 "),dD=n(cxe,"A",{href:!0});var Cgt=s(dD);RCo=r(Cgt,"XLMProphetNetModel"),Cgt.forEach(t),PCo=r(cxe," (XLM-ProphetNet model)"),cxe.forEach(t),BCo=i($),Au=n($,"LI",{});var fxe=s(Au);Kce=n(fxe,"STRONG",{});var wgt=s(Kce);ICo=r(wgt,"xlm-roberta"),wgt.forEach(t),NCo=r(fxe," \u2014 "),cD=n(fxe,"A",{href:!0});var Agt=s(cD);qCo=r(Agt,"XLMRobertaModel"),Agt.forEach(t),jCo=r(fxe," (XLM-RoBERTa model)"),fxe.forEach(t),DCo=i($),Lu=n($,"LI",{});var mxe=s(Lu);Zce=n(mxe,"STRONG",{});var Lgt=s(Zce);GCo=r(Lgt,"xlm-roberta-xl"),Lgt.forEach(t),OCo=r(mxe," \u2014 "),fD=n(mxe,"A",{href:!0});var ygt=s(fD);VCo=r(ygt,"XLMRobertaXLModel"),ygt.forEach(t),XCo=r(mxe," (XLM-RoBERTa-XL model)"),mxe.forEach(t),zCo=i($),yu=n($,"LI",{});var gxe=s(yu);efe=n(gxe,"STRONG",{});var xgt=s(efe);QCo=r(xgt,"xlnet"),xgt.forEach(t),WCo=r(gxe," \u2014 "),mD=n(gxe,"A",{href:!0});var $gt=s(mD);HCo=r($gt,"XLNetModel"),$gt.forEach(t),UCo=r(gxe," (XLNet model)"),gxe.forEach(t),JCo=i($),xu=n($,"LI",{});var hxe=s(xu);ofe=n(hxe,"STRONG",{});var kgt=s(ofe);YCo=r(kgt,"yolos"),kgt.forEach(t),KCo=r(hxe," \u2014 "),gD=n(hxe,"A",{href:!0});var Sgt=s(gD);ZCo=r(Sgt,"YolosModel"),Sgt.forEach(t),e0o=r(hxe," (YOLOS model)"),hxe.forEach(t),o0o=i($),$u=n($,"LI",{});var pxe=s($u);rfe=n(pxe,"STRONG",{});var Rgt=s(rfe);r0o=r(Rgt,"yoso"),Rgt.forEach(t),t0o=r(pxe," \u2014 "),hD=n(pxe,"A",{href:!0});var Pgt=s(hD);a0o=r(Pgt,"YosoModel"),Pgt.forEach(t),n0o=r(pxe," (YOSO model)"),pxe.forEach(t),$.forEach(t),s0o=i(aa),ku=n(aa,"P",{});var _xe=s(ku);l0o=r(_xe,"The model is set in evaluation mode by default using "),tfe=n(_xe,"CODE",{});var Bgt=s(tfe);i0o=r(Bgt,"model.eval()"),Bgt.forEach(t),d0o=r(_xe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),afe=n(_xe,"CODE",{});var Igt=s(afe);c0o=r(Igt,"model.train()"),Igt.forEach(t),_xe.forEach(t),f0o=i(aa),T(Su.$$.fragment,aa),aa.forEach(t),Ks.forEach(t),wOe=i(f),ji=n(f,"H2",{class:!0});var kXe=s(ji);Ru=n(kXe,"A",{id:!0,class:!0,href:!0});var Ngt=s(Ru);nfe=n(Ngt,"SPAN",{});var qgt=s(nfe);T(my.$$.fragment,qgt),qgt.forEach(t),Ngt.forEach(t),m0o=i(kXe),sfe=n(kXe,"SPAN",{});var jgt=s(sfe);g0o=r(jgt,"AutoModelForPreTraining"),jgt.forEach(t),kXe.forEach(t),AOe=i(f),$o=n(f,"DIV",{class:!0});var Zs=s($o);T(gy.$$.fragment,Zs),h0o=i(Zs),Di=n(Zs,"P",{});var Boe=s(Di);p0o=r(Boe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),pD=n(Boe,"A",{href:!0});var Dgt=s(pD);_0o=r(Dgt,"from_pretrained()"),Dgt.forEach(t),u0o=r(Boe," class method or the "),_D=n(Boe,"A",{href:!0});var Ggt=s(_D);b0o=r(Ggt,"from_config()"),Ggt.forEach(t),v0o=r(Boe,` class
method.`),Boe.forEach(t),F0o=i(Zs),hy=n(Zs,"P",{});var SXe=s(hy);T0o=r(SXe,"This class cannot be instantiated directly using "),lfe=n(SXe,"CODE",{});var Ogt=s(lfe);M0o=r(Ogt,"__init__()"),Ogt.forEach(t),E0o=r(SXe," (throws an error)."),SXe.forEach(t),C0o=i(Zs),st=n(Zs,"DIV",{class:!0});var jA=s(st);T(py.$$.fragment,jA),w0o=i(jA),ife=n(jA,"P",{});var Vgt=s(ife);A0o=r(Vgt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Vgt.forEach(t),L0o=i(jA),Gi=n(jA,"P",{});var Ioe=s(Gi);y0o=r(Ioe,`Note:
Loading a model from its configuration file does `),dfe=n(Ioe,"STRONG",{});var Xgt=s(dfe);x0o=r(Xgt,"not"),Xgt.forEach(t),$0o=r(Ioe,` load the model weights. It only affects the
model\u2019s configuration. Use `),uD=n(Ioe,"A",{href:!0});var zgt=s(uD);k0o=r(zgt,"from_pretrained()"),zgt.forEach(t),S0o=r(Ioe," to load the model weights."),Ioe.forEach(t),R0o=i(jA),T(Pu.$$.fragment,jA),jA.forEach(t),P0o=i(Zs),Ye=n(Zs,"DIV",{class:!0});var na=s(Ye);T(_y.$$.fragment,na),B0o=i(na),cfe=n(na,"P",{});var Qgt=s(cfe);I0o=r(Qgt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Qgt.forEach(t),N0o=i(na),Pa=n(na,"P",{});var DA=s(Pa);q0o=r(DA,"The model class to instantiate is selected based on the "),ffe=n(DA,"CODE",{});var Wgt=s(ffe);j0o=r(Wgt,"model_type"),Wgt.forEach(t),D0o=r(DA,` property of the config object (either
passed as an argument or loaded from `),mfe=n(DA,"CODE",{});var Hgt=s(mfe);G0o=r(Hgt,"pretrained_model_name_or_path"),Hgt.forEach(t),O0o=r(DA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gfe=n(DA,"CODE",{});var Ugt=s(gfe);V0o=r(Ugt,"pretrained_model_name_or_path"),Ugt.forEach(t),X0o=r(DA,":"),DA.forEach(t),z0o=i(na),G=n(na,"UL",{});var O=s(G);Bu=n(O,"LI",{});var uxe=s(Bu);hfe=n(uxe,"STRONG",{});var Jgt=s(hfe);Q0o=r(Jgt,"albert"),Jgt.forEach(t),W0o=r(uxe," \u2014 "),bD=n(uxe,"A",{href:!0});var Ygt=s(bD);H0o=r(Ygt,"AlbertForPreTraining"),Ygt.forEach(t),U0o=r(uxe," (ALBERT model)"),uxe.forEach(t),J0o=i(O),Iu=n(O,"LI",{});var bxe=s(Iu);pfe=n(bxe,"STRONG",{});var Kgt=s(pfe);Y0o=r(Kgt,"bart"),Kgt.forEach(t),K0o=r(bxe," \u2014 "),vD=n(bxe,"A",{href:!0});var Zgt=s(vD);Z0o=r(Zgt,"BartForConditionalGeneration"),Zgt.forEach(t),ewo=r(bxe," (BART model)"),bxe.forEach(t),owo=i(O),Nu=n(O,"LI",{});var vxe=s(Nu);_fe=n(vxe,"STRONG",{});var eht=s(_fe);rwo=r(eht,"bert"),eht.forEach(t),two=r(vxe," \u2014 "),FD=n(vxe,"A",{href:!0});var oht=s(FD);awo=r(oht,"BertForPreTraining"),oht.forEach(t),nwo=r(vxe," (BERT model)"),vxe.forEach(t),swo=i(O),qu=n(O,"LI",{});var Fxe=s(qu);ufe=n(Fxe,"STRONG",{});var rht=s(ufe);lwo=r(rht,"big_bird"),rht.forEach(t),iwo=r(Fxe," \u2014 "),TD=n(Fxe,"A",{href:!0});var tht=s(TD);dwo=r(tht,"BigBirdForPreTraining"),tht.forEach(t),cwo=r(Fxe," (BigBird model)"),Fxe.forEach(t),fwo=i(O),ju=n(O,"LI",{});var Txe=s(ju);bfe=n(Txe,"STRONG",{});var aht=s(bfe);mwo=r(aht,"bloom"),aht.forEach(t),gwo=r(Txe," \u2014 "),MD=n(Txe,"A",{href:!0});var nht=s(MD);hwo=r(nht,"BloomForCausalLM"),nht.forEach(t),pwo=r(Txe," (BLOOM model)"),Txe.forEach(t),_wo=i(O),Du=n(O,"LI",{});var Mxe=s(Du);vfe=n(Mxe,"STRONG",{});var sht=s(vfe);uwo=r(sht,"camembert"),sht.forEach(t),bwo=r(Mxe," \u2014 "),ED=n(Mxe,"A",{href:!0});var lht=s(ED);vwo=r(lht,"CamembertForMaskedLM"),lht.forEach(t),Fwo=r(Mxe," (CamemBERT model)"),Mxe.forEach(t),Two=i(O),Gu=n(O,"LI",{});var Exe=s(Gu);Ffe=n(Exe,"STRONG",{});var iht=s(Ffe);Mwo=r(iht,"ctrl"),iht.forEach(t),Ewo=r(Exe," \u2014 "),CD=n(Exe,"A",{href:!0});var dht=s(CD);Cwo=r(dht,"CTRLLMHeadModel"),dht.forEach(t),wwo=r(Exe," (CTRL model)"),Exe.forEach(t),Awo=i(O),Ou=n(O,"LI",{});var Cxe=s(Ou);Tfe=n(Cxe,"STRONG",{});var cht=s(Tfe);Lwo=r(cht,"data2vec-text"),cht.forEach(t),ywo=r(Cxe," \u2014 "),wD=n(Cxe,"A",{href:!0});var fht=s(wD);xwo=r(fht,"Data2VecTextForMaskedLM"),fht.forEach(t),$wo=r(Cxe," (Data2VecText model)"),Cxe.forEach(t),kwo=i(O),Vu=n(O,"LI",{});var wxe=s(Vu);Mfe=n(wxe,"STRONG",{});var mht=s(Mfe);Swo=r(mht,"deberta"),mht.forEach(t),Rwo=r(wxe," \u2014 "),AD=n(wxe,"A",{href:!0});var ght=s(AD);Pwo=r(ght,"DebertaForMaskedLM"),ght.forEach(t),Bwo=r(wxe," (DeBERTa model)"),wxe.forEach(t),Iwo=i(O),Xu=n(O,"LI",{});var Axe=s(Xu);Efe=n(Axe,"STRONG",{});var hht=s(Efe);Nwo=r(hht,"deberta-v2"),hht.forEach(t),qwo=r(Axe," \u2014 "),LD=n(Axe,"A",{href:!0});var pht=s(LD);jwo=r(pht,"DebertaV2ForMaskedLM"),pht.forEach(t),Dwo=r(Axe," (DeBERTa-v2 model)"),Axe.forEach(t),Gwo=i(O),zu=n(O,"LI",{});var Lxe=s(zu);Cfe=n(Lxe,"STRONG",{});var _ht=s(Cfe);Owo=r(_ht,"distilbert"),_ht.forEach(t),Vwo=r(Lxe," \u2014 "),yD=n(Lxe,"A",{href:!0});var uht=s(yD);Xwo=r(uht,"DistilBertForMaskedLM"),uht.forEach(t),zwo=r(Lxe," (DistilBERT model)"),Lxe.forEach(t),Qwo=i(O),Qu=n(O,"LI",{});var yxe=s(Qu);wfe=n(yxe,"STRONG",{});var bht=s(wfe);Wwo=r(bht,"electra"),bht.forEach(t),Hwo=r(yxe," \u2014 "),xD=n(yxe,"A",{href:!0});var vht=s(xD);Uwo=r(vht,"ElectraForPreTraining"),vht.forEach(t),Jwo=r(yxe," (ELECTRA model)"),yxe.forEach(t),Ywo=i(O),Wu=n(O,"LI",{});var xxe=s(Wu);Afe=n(xxe,"STRONG",{});var Fht=s(Afe);Kwo=r(Fht,"flaubert"),Fht.forEach(t),Zwo=r(xxe," \u2014 "),$D=n(xxe,"A",{href:!0});var Tht=s($D);eAo=r(Tht,"FlaubertWithLMHeadModel"),Tht.forEach(t),oAo=r(xxe," (FlauBERT model)"),xxe.forEach(t),rAo=i(O),Hu=n(O,"LI",{});var $xe=s(Hu);Lfe=n($xe,"STRONG",{});var Mht=s(Lfe);tAo=r(Mht,"flava"),Mht.forEach(t),aAo=r($xe," \u2014 "),kD=n($xe,"A",{href:!0});var Eht=s(kD);nAo=r(Eht,"FlavaForPreTraining"),Eht.forEach(t),sAo=r($xe," (FLAVA model)"),$xe.forEach(t),lAo=i(O),Uu=n(O,"LI",{});var kxe=s(Uu);yfe=n(kxe,"STRONG",{});var Cht=s(yfe);iAo=r(Cht,"fnet"),Cht.forEach(t),dAo=r(kxe," \u2014 "),SD=n(kxe,"A",{href:!0});var wht=s(SD);cAo=r(wht,"FNetForPreTraining"),wht.forEach(t),fAo=r(kxe," (FNet model)"),kxe.forEach(t),mAo=i(O),Ju=n(O,"LI",{});var Sxe=s(Ju);xfe=n(Sxe,"STRONG",{});var Aht=s(xfe);gAo=r(Aht,"fsmt"),Aht.forEach(t),hAo=r(Sxe," \u2014 "),RD=n(Sxe,"A",{href:!0});var Lht=s(RD);pAo=r(Lht,"FSMTForConditionalGeneration"),Lht.forEach(t),_Ao=r(Sxe," (FairSeq Machine-Translation model)"),Sxe.forEach(t),uAo=i(O),Yu=n(O,"LI",{});var Rxe=s(Yu);$fe=n(Rxe,"STRONG",{});var yht=s($fe);bAo=r(yht,"funnel"),yht.forEach(t),vAo=r(Rxe," \u2014 "),PD=n(Rxe,"A",{href:!0});var xht=s(PD);FAo=r(xht,"FunnelForPreTraining"),xht.forEach(t),TAo=r(Rxe," (Funnel Transformer model)"),Rxe.forEach(t),MAo=i(O),Ku=n(O,"LI",{});var Pxe=s(Ku);kfe=n(Pxe,"STRONG",{});var $ht=s(kfe);EAo=r($ht,"gpt2"),$ht.forEach(t),CAo=r(Pxe," \u2014 "),BD=n(Pxe,"A",{href:!0});var kht=s(BD);wAo=r(kht,"GPT2LMHeadModel"),kht.forEach(t),AAo=r(Pxe," (OpenAI GPT-2 model)"),Pxe.forEach(t),LAo=i(O),Zu=n(O,"LI",{});var Bxe=s(Zu);Sfe=n(Bxe,"STRONG",{});var Sht=s(Sfe);yAo=r(Sht,"ibert"),Sht.forEach(t),xAo=r(Bxe," \u2014 "),ID=n(Bxe,"A",{href:!0});var Rht=s(ID);$Ao=r(Rht,"IBertForMaskedLM"),Rht.forEach(t),kAo=r(Bxe," (I-BERT model)"),Bxe.forEach(t),SAo=i(O),e1=n(O,"LI",{});var Ixe=s(e1);Rfe=n(Ixe,"STRONG",{});var Pht=s(Rfe);RAo=r(Pht,"layoutlm"),Pht.forEach(t),PAo=r(Ixe," \u2014 "),ND=n(Ixe,"A",{href:!0});var Bht=s(ND);BAo=r(Bht,"LayoutLMForMaskedLM"),Bht.forEach(t),IAo=r(Ixe," (LayoutLM model)"),Ixe.forEach(t),NAo=i(O),o1=n(O,"LI",{});var Nxe=s(o1);Pfe=n(Nxe,"STRONG",{});var Iht=s(Pfe);qAo=r(Iht,"longformer"),Iht.forEach(t),jAo=r(Nxe," \u2014 "),qD=n(Nxe,"A",{href:!0});var Nht=s(qD);DAo=r(Nht,"LongformerForMaskedLM"),Nht.forEach(t),GAo=r(Nxe," (Longformer model)"),Nxe.forEach(t),OAo=i(O),r1=n(O,"LI",{});var qxe=s(r1);Bfe=n(qxe,"STRONG",{});var qht=s(Bfe);VAo=r(qht,"lxmert"),qht.forEach(t),XAo=r(qxe," \u2014 "),jD=n(qxe,"A",{href:!0});var jht=s(jD);zAo=r(jht,"LxmertForPreTraining"),jht.forEach(t),QAo=r(qxe," (LXMERT model)"),qxe.forEach(t),WAo=i(O),t1=n(O,"LI",{});var jxe=s(t1);Ife=n(jxe,"STRONG",{});var Dht=s(Ife);HAo=r(Dht,"megatron-bert"),Dht.forEach(t),UAo=r(jxe," \u2014 "),DD=n(jxe,"A",{href:!0});var Ght=s(DD);JAo=r(Ght,"MegatronBertForPreTraining"),Ght.forEach(t),YAo=r(jxe," (Megatron-BERT model)"),jxe.forEach(t),KAo=i(O),a1=n(O,"LI",{});var Dxe=s(a1);Nfe=n(Dxe,"STRONG",{});var Oht=s(Nfe);ZAo=r(Oht,"mobilebert"),Oht.forEach(t),eLo=r(Dxe," \u2014 "),GD=n(Dxe,"A",{href:!0});var Vht=s(GD);oLo=r(Vht,"MobileBertForPreTraining"),Vht.forEach(t),rLo=r(Dxe," (MobileBERT model)"),Dxe.forEach(t),tLo=i(O),n1=n(O,"LI",{});var Gxe=s(n1);qfe=n(Gxe,"STRONG",{});var Xht=s(qfe);aLo=r(Xht,"mpnet"),Xht.forEach(t),nLo=r(Gxe," \u2014 "),OD=n(Gxe,"A",{href:!0});var zht=s(OD);sLo=r(zht,"MPNetForMaskedLM"),zht.forEach(t),lLo=r(Gxe," (MPNet model)"),Gxe.forEach(t),iLo=i(O),s1=n(O,"LI",{});var Oxe=s(s1);jfe=n(Oxe,"STRONG",{});var Qht=s(jfe);dLo=r(Qht,"nezha"),Qht.forEach(t),cLo=r(Oxe," \u2014 "),VD=n(Oxe,"A",{href:!0});var Wht=s(VD);fLo=r(Wht,"NezhaForPreTraining"),Wht.forEach(t),mLo=r(Oxe," (Nezha model)"),Oxe.forEach(t),gLo=i(O),l1=n(O,"LI",{});var Vxe=s(l1);Dfe=n(Vxe,"STRONG",{});var Hht=s(Dfe);hLo=r(Hht,"openai-gpt"),Hht.forEach(t),pLo=r(Vxe," \u2014 "),XD=n(Vxe,"A",{href:!0});var Uht=s(XD);_Lo=r(Uht,"OpenAIGPTLMHeadModel"),Uht.forEach(t),uLo=r(Vxe," (OpenAI GPT model)"),Vxe.forEach(t),bLo=i(O),i1=n(O,"LI",{});var Xxe=s(i1);Gfe=n(Xxe,"STRONG",{});var Jht=s(Gfe);vLo=r(Jht,"retribert"),Jht.forEach(t),FLo=r(Xxe," \u2014 "),zD=n(Xxe,"A",{href:!0});var Yht=s(zD);TLo=r(Yht,"RetriBertModel"),Yht.forEach(t),MLo=r(Xxe," (RetriBERT model)"),Xxe.forEach(t),ELo=i(O),d1=n(O,"LI",{});var zxe=s(d1);Ofe=n(zxe,"STRONG",{});var Kht=s(Ofe);CLo=r(Kht,"roberta"),Kht.forEach(t),wLo=r(zxe," \u2014 "),QD=n(zxe,"A",{href:!0});var Zht=s(QD);ALo=r(Zht,"RobertaForMaskedLM"),Zht.forEach(t),LLo=r(zxe," (RoBERTa model)"),zxe.forEach(t),yLo=i(O),c1=n(O,"LI",{});var Qxe=s(c1);Vfe=n(Qxe,"STRONG",{});var ept=s(Vfe);xLo=r(ept,"splinter"),ept.forEach(t),$Lo=r(Qxe," \u2014 "),WD=n(Qxe,"A",{href:!0});var opt=s(WD);kLo=r(opt,"SplinterForPreTraining"),opt.forEach(t),SLo=r(Qxe," (Splinter model)"),Qxe.forEach(t),RLo=i(O),f1=n(O,"LI",{});var Wxe=s(f1);Xfe=n(Wxe,"STRONG",{});var rpt=s(Xfe);PLo=r(rpt,"squeezebert"),rpt.forEach(t),BLo=r(Wxe," \u2014 "),HD=n(Wxe,"A",{href:!0});var tpt=s(HD);ILo=r(tpt,"SqueezeBertForMaskedLM"),tpt.forEach(t),NLo=r(Wxe," (SqueezeBERT model)"),Wxe.forEach(t),qLo=i(O),m1=n(O,"LI",{});var Hxe=s(m1);zfe=n(Hxe,"STRONG",{});var apt=s(zfe);jLo=r(apt,"t5"),apt.forEach(t),DLo=r(Hxe," \u2014 "),UD=n(Hxe,"A",{href:!0});var npt=s(UD);GLo=r(npt,"T5ForConditionalGeneration"),npt.forEach(t),OLo=r(Hxe," (T5 model)"),Hxe.forEach(t),VLo=i(O),g1=n(O,"LI",{});var Uxe=s(g1);Qfe=n(Uxe,"STRONG",{});var spt=s(Qfe);XLo=r(spt,"tapas"),spt.forEach(t),zLo=r(Uxe," \u2014 "),JD=n(Uxe,"A",{href:!0});var lpt=s(JD);QLo=r(lpt,"TapasForMaskedLM"),lpt.forEach(t),WLo=r(Uxe," (TAPAS model)"),Uxe.forEach(t),HLo=i(O),h1=n(O,"LI",{});var Jxe=s(h1);Wfe=n(Jxe,"STRONG",{});var ipt=s(Wfe);ULo=r(ipt,"transfo-xl"),ipt.forEach(t),JLo=r(Jxe," \u2014 "),YD=n(Jxe,"A",{href:!0});var dpt=s(YD);YLo=r(dpt,"TransfoXLLMHeadModel"),dpt.forEach(t),KLo=r(Jxe," (Transformer-XL model)"),Jxe.forEach(t),ZLo=i(O),p1=n(O,"LI",{});var Yxe=s(p1);Hfe=n(Yxe,"STRONG",{});var cpt=s(Hfe);e7o=r(cpt,"unispeech"),cpt.forEach(t),o7o=r(Yxe," \u2014 "),KD=n(Yxe,"A",{href:!0});var fpt=s(KD);r7o=r(fpt,"UniSpeechForPreTraining"),fpt.forEach(t),t7o=r(Yxe," (UniSpeech model)"),Yxe.forEach(t),a7o=i(O),_1=n(O,"LI",{});var Kxe=s(_1);Ufe=n(Kxe,"STRONG",{});var mpt=s(Ufe);n7o=r(mpt,"unispeech-sat"),mpt.forEach(t),s7o=r(Kxe," \u2014 "),ZD=n(Kxe,"A",{href:!0});var gpt=s(ZD);l7o=r(gpt,"UniSpeechSatForPreTraining"),gpt.forEach(t),i7o=r(Kxe," (UniSpeechSat model)"),Kxe.forEach(t),d7o=i(O),u1=n(O,"LI",{});var Zxe=s(u1);Jfe=n(Zxe,"STRONG",{});var hpt=s(Jfe);c7o=r(hpt,"visual_bert"),hpt.forEach(t),f7o=r(Zxe," \u2014 "),eG=n(Zxe,"A",{href:!0});var ppt=s(eG);m7o=r(ppt,"VisualBertForPreTraining"),ppt.forEach(t),g7o=r(Zxe," (VisualBERT model)"),Zxe.forEach(t),h7o=i(O),b1=n(O,"LI",{});var e$e=s(b1);Yfe=n(e$e,"STRONG",{});var _pt=s(Yfe);p7o=r(_pt,"vit_mae"),_pt.forEach(t),_7o=r(e$e," \u2014 "),oG=n(e$e,"A",{href:!0});var upt=s(oG);u7o=r(upt,"ViTMAEForPreTraining"),upt.forEach(t),b7o=r(e$e," (ViTMAE model)"),e$e.forEach(t),v7o=i(O),v1=n(O,"LI",{});var o$e=s(v1);Kfe=n(o$e,"STRONG",{});var bpt=s(Kfe);F7o=r(bpt,"wav2vec2"),bpt.forEach(t),T7o=r(o$e," \u2014 "),rG=n(o$e,"A",{href:!0});var vpt=s(rG);M7o=r(vpt,"Wav2Vec2ForPreTraining"),vpt.forEach(t),E7o=r(o$e," (Wav2Vec2 model)"),o$e.forEach(t),C7o=i(O),F1=n(O,"LI",{});var r$e=s(F1);Zfe=n(r$e,"STRONG",{});var Fpt=s(Zfe);w7o=r(Fpt,"wav2vec2-conformer"),Fpt.forEach(t),A7o=r(r$e," \u2014 "),tG=n(r$e,"A",{href:!0});var Tpt=s(tG);L7o=r(Tpt,"Wav2Vec2ConformerForPreTraining"),Tpt.forEach(t),y7o=r(r$e," (Wav2Vec2-Conformer model)"),r$e.forEach(t),x7o=i(O),T1=n(O,"LI",{});var t$e=s(T1);eme=n(t$e,"STRONG",{});var Mpt=s(eme);$7o=r(Mpt,"xlm"),Mpt.forEach(t),k7o=r(t$e," \u2014 "),aG=n(t$e,"A",{href:!0});var Ept=s(aG);S7o=r(Ept,"XLMWithLMHeadModel"),Ept.forEach(t),R7o=r(t$e," (XLM model)"),t$e.forEach(t),P7o=i(O),M1=n(O,"LI",{});var a$e=s(M1);ome=n(a$e,"STRONG",{});var Cpt=s(ome);B7o=r(Cpt,"xlm-roberta"),Cpt.forEach(t),I7o=r(a$e," \u2014 "),nG=n(a$e,"A",{href:!0});var wpt=s(nG);N7o=r(wpt,"XLMRobertaForMaskedLM"),wpt.forEach(t),q7o=r(a$e," (XLM-RoBERTa model)"),a$e.forEach(t),j7o=i(O),E1=n(O,"LI",{});var n$e=s(E1);rme=n(n$e,"STRONG",{});var Apt=s(rme);D7o=r(Apt,"xlm-roberta-xl"),Apt.forEach(t),G7o=r(n$e," \u2014 "),sG=n(n$e,"A",{href:!0});var Lpt=s(sG);O7o=r(Lpt,"XLMRobertaXLForMaskedLM"),Lpt.forEach(t),V7o=r(n$e," (XLM-RoBERTa-XL model)"),n$e.forEach(t),X7o=i(O),C1=n(O,"LI",{});var s$e=s(C1);tme=n(s$e,"STRONG",{});var ypt=s(tme);z7o=r(ypt,"xlnet"),ypt.forEach(t),Q7o=r(s$e," \u2014 "),lG=n(s$e,"A",{href:!0});var xpt=s(lG);W7o=r(xpt,"XLNetLMHeadModel"),xpt.forEach(t),H7o=r(s$e," (XLNet model)"),s$e.forEach(t),O.forEach(t),U7o=i(na),w1=n(na,"P",{});var l$e=s(w1);J7o=r(l$e,"The model is set in evaluation mode by default using "),ame=n(l$e,"CODE",{});var $pt=s(ame);Y7o=r($pt,"model.eval()"),$pt.forEach(t),K7o=r(l$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nme=n(l$e,"CODE",{});var kpt=s(nme);Z7o=r(kpt,"model.train()"),kpt.forEach(t),l$e.forEach(t),eyo=i(na),T(A1.$$.fragment,na),na.forEach(t),Zs.forEach(t),LOe=i(f),Oi=n(f,"H2",{class:!0});var RXe=s(Oi);L1=n(RXe,"A",{id:!0,class:!0,href:!0});var Spt=s(L1);sme=n(Spt,"SPAN",{});var Rpt=s(sme);T(uy.$$.fragment,Rpt),Rpt.forEach(t),Spt.forEach(t),oyo=i(RXe),lme=n(RXe,"SPAN",{});var Ppt=s(lme);ryo=r(Ppt,"AutoModelForCausalLM"),Ppt.forEach(t),RXe.forEach(t),yOe=i(f),ko=n(f,"DIV",{class:!0});var el=s(ko);T(by.$$.fragment,el),tyo=i(el),Vi=n(el,"P",{});var Noe=s(Vi);ayo=r(Noe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),iG=n(Noe,"A",{href:!0});var Bpt=s(iG);nyo=r(Bpt,"from_pretrained()"),Bpt.forEach(t),syo=r(Noe," class method or the "),dG=n(Noe,"A",{href:!0});var Ipt=s(dG);lyo=r(Ipt,"from_config()"),Ipt.forEach(t),iyo=r(Noe,` class
method.`),Noe.forEach(t),dyo=i(el),vy=n(el,"P",{});var PXe=s(vy);cyo=r(PXe,"This class cannot be instantiated directly using "),ime=n(PXe,"CODE",{});var Npt=s(ime);fyo=r(Npt,"__init__()"),Npt.forEach(t),myo=r(PXe," (throws an error)."),PXe.forEach(t),gyo=i(el),lt=n(el,"DIV",{class:!0});var GA=s(lt);T(Fy.$$.fragment,GA),hyo=i(GA),dme=n(GA,"P",{});var qpt=s(dme);pyo=r(qpt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),qpt.forEach(t),_yo=i(GA),Xi=n(GA,"P",{});var qoe=s(Xi);uyo=r(qoe,`Note:
Loading a model from its configuration file does `),cme=n(qoe,"STRONG",{});var jpt=s(cme);byo=r(jpt,"not"),jpt.forEach(t),vyo=r(qoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),cG=n(qoe,"A",{href:!0});var Dpt=s(cG);Fyo=r(Dpt,"from_pretrained()"),Dpt.forEach(t),Tyo=r(qoe," to load the model weights."),qoe.forEach(t),Myo=i(GA),T(y1.$$.fragment,GA),GA.forEach(t),Eyo=i(el),Ke=n(el,"DIV",{class:!0});var sa=s(Ke);T(Ty.$$.fragment,sa),Cyo=i(sa),fme=n(sa,"P",{});var Gpt=s(fme);wyo=r(Gpt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Gpt.forEach(t),Ayo=i(sa),Ba=n(sa,"P",{});var OA=s(Ba);Lyo=r(OA,"The model class to instantiate is selected based on the "),mme=n(OA,"CODE",{});var Opt=s(mme);yyo=r(Opt,"model_type"),Opt.forEach(t),xyo=r(OA,` property of the config object (either
passed as an argument or loaded from `),gme=n(OA,"CODE",{});var Vpt=s(gme);$yo=r(Vpt,"pretrained_model_name_or_path"),Vpt.forEach(t),kyo=r(OA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hme=n(OA,"CODE",{});var Xpt=s(hme);Syo=r(Xpt,"pretrained_model_name_or_path"),Xpt.forEach(t),Ryo=r(OA,":"),OA.forEach(t),Pyo=i(sa),z=n(sa,"UL",{});var Q=s(z);x1=n(Q,"LI",{});var i$e=s(x1);pme=n(i$e,"STRONG",{});var zpt=s(pme);Byo=r(zpt,"bart"),zpt.forEach(t),Iyo=r(i$e," \u2014 "),fG=n(i$e,"A",{href:!0});var Qpt=s(fG);Nyo=r(Qpt,"BartForCausalLM"),Qpt.forEach(t),qyo=r(i$e," (BART model)"),i$e.forEach(t),jyo=i(Q),$1=n(Q,"LI",{});var d$e=s($1);_me=n(d$e,"STRONG",{});var Wpt=s(_me);Dyo=r(Wpt,"bert"),Wpt.forEach(t),Gyo=r(d$e," \u2014 "),mG=n(d$e,"A",{href:!0});var Hpt=s(mG);Oyo=r(Hpt,"BertLMHeadModel"),Hpt.forEach(t),Vyo=r(d$e," (BERT model)"),d$e.forEach(t),Xyo=i(Q),k1=n(Q,"LI",{});var c$e=s(k1);ume=n(c$e,"STRONG",{});var Upt=s(ume);zyo=r(Upt,"bert-generation"),Upt.forEach(t),Qyo=r(c$e," \u2014 "),gG=n(c$e,"A",{href:!0});var Jpt=s(gG);Wyo=r(Jpt,"BertGenerationDecoder"),Jpt.forEach(t),Hyo=r(c$e," (Bert Generation model)"),c$e.forEach(t),Uyo=i(Q),S1=n(Q,"LI",{});var f$e=s(S1);bme=n(f$e,"STRONG",{});var Ypt=s(bme);Jyo=r(Ypt,"big_bird"),Ypt.forEach(t),Yyo=r(f$e," \u2014 "),hG=n(f$e,"A",{href:!0});var Kpt=s(hG);Kyo=r(Kpt,"BigBirdForCausalLM"),Kpt.forEach(t),Zyo=r(f$e," (BigBird model)"),f$e.forEach(t),e8o=i(Q),R1=n(Q,"LI",{});var m$e=s(R1);vme=n(m$e,"STRONG",{});var Zpt=s(vme);o8o=r(Zpt,"bigbird_pegasus"),Zpt.forEach(t),r8o=r(m$e," \u2014 "),pG=n(m$e,"A",{href:!0});var e_t=s(pG);t8o=r(e_t,"BigBirdPegasusForCausalLM"),e_t.forEach(t),a8o=r(m$e," (BigBird-Pegasus model)"),m$e.forEach(t),n8o=i(Q),P1=n(Q,"LI",{});var g$e=s(P1);Fme=n(g$e,"STRONG",{});var o_t=s(Fme);s8o=r(o_t,"blenderbot"),o_t.forEach(t),l8o=r(g$e," \u2014 "),_G=n(g$e,"A",{href:!0});var r_t=s(_G);i8o=r(r_t,"BlenderbotForCausalLM"),r_t.forEach(t),d8o=r(g$e," (Blenderbot model)"),g$e.forEach(t),c8o=i(Q),B1=n(Q,"LI",{});var h$e=s(B1);Tme=n(h$e,"STRONG",{});var t_t=s(Tme);f8o=r(t_t,"blenderbot-small"),t_t.forEach(t),m8o=r(h$e," \u2014 "),uG=n(h$e,"A",{href:!0});var a_t=s(uG);g8o=r(a_t,"BlenderbotSmallForCausalLM"),a_t.forEach(t),h8o=r(h$e," (BlenderbotSmall model)"),h$e.forEach(t),p8o=i(Q),I1=n(Q,"LI",{});var p$e=s(I1);Mme=n(p$e,"STRONG",{});var n_t=s(Mme);_8o=r(n_t,"bloom"),n_t.forEach(t),u8o=r(p$e," \u2014 "),bG=n(p$e,"A",{href:!0});var s_t=s(bG);b8o=r(s_t,"BloomForCausalLM"),s_t.forEach(t),v8o=r(p$e," (BLOOM model)"),p$e.forEach(t),F8o=i(Q),N1=n(Q,"LI",{});var _$e=s(N1);Eme=n(_$e,"STRONG",{});var l_t=s(Eme);T8o=r(l_t,"camembert"),l_t.forEach(t),M8o=r(_$e," \u2014 "),vG=n(_$e,"A",{href:!0});var i_t=s(vG);E8o=r(i_t,"CamembertForCausalLM"),i_t.forEach(t),C8o=r(_$e," (CamemBERT model)"),_$e.forEach(t),w8o=i(Q),q1=n(Q,"LI",{});var u$e=s(q1);Cme=n(u$e,"STRONG",{});var d_t=s(Cme);A8o=r(d_t,"codegen"),d_t.forEach(t),L8o=r(u$e," \u2014 "),FG=n(u$e,"A",{href:!0});var c_t=s(FG);y8o=r(c_t,"CodeGenForCausalLM"),c_t.forEach(t),x8o=r(u$e," (CodeGen model)"),u$e.forEach(t),$8o=i(Q),j1=n(Q,"LI",{});var b$e=s(j1);wme=n(b$e,"STRONG",{});var f_t=s(wme);k8o=r(f_t,"ctrl"),f_t.forEach(t),S8o=r(b$e," \u2014 "),TG=n(b$e,"A",{href:!0});var m_t=s(TG);R8o=r(m_t,"CTRLLMHeadModel"),m_t.forEach(t),P8o=r(b$e," (CTRL model)"),b$e.forEach(t),B8o=i(Q),D1=n(Q,"LI",{});var v$e=s(D1);Ame=n(v$e,"STRONG",{});var g_t=s(Ame);I8o=r(g_t,"data2vec-text"),g_t.forEach(t),N8o=r(v$e," \u2014 "),MG=n(v$e,"A",{href:!0});var h_t=s(MG);q8o=r(h_t,"Data2VecTextForCausalLM"),h_t.forEach(t),j8o=r(v$e," (Data2VecText model)"),v$e.forEach(t),D8o=i(Q),G1=n(Q,"LI",{});var F$e=s(G1);Lme=n(F$e,"STRONG",{});var p_t=s(Lme);G8o=r(p_t,"electra"),p_t.forEach(t),O8o=r(F$e," \u2014 "),EG=n(F$e,"A",{href:!0});var __t=s(EG);V8o=r(__t,"ElectraForCausalLM"),__t.forEach(t),X8o=r(F$e," (ELECTRA model)"),F$e.forEach(t),z8o=i(Q),O1=n(Q,"LI",{});var T$e=s(O1);yme=n(T$e,"STRONG",{});var u_t=s(yme);Q8o=r(u_t,"gpt2"),u_t.forEach(t),W8o=r(T$e," \u2014 "),CG=n(T$e,"A",{href:!0});var b_t=s(CG);H8o=r(b_t,"GPT2LMHeadModel"),b_t.forEach(t),U8o=r(T$e," (OpenAI GPT-2 model)"),T$e.forEach(t),J8o=i(Q),V1=n(Q,"LI",{});var M$e=s(V1);xme=n(M$e,"STRONG",{});var v_t=s(xme);Y8o=r(v_t,"gpt_neo"),v_t.forEach(t),K8o=r(M$e," \u2014 "),wG=n(M$e,"A",{href:!0});var F_t=s(wG);Z8o=r(F_t,"GPTNeoForCausalLM"),F_t.forEach(t),e9o=r(M$e," (GPT Neo model)"),M$e.forEach(t),o9o=i(Q),X1=n(Q,"LI",{});var E$e=s(X1);$me=n(E$e,"STRONG",{});var T_t=s($me);r9o=r(T_t,"gpt_neox"),T_t.forEach(t),t9o=r(E$e," \u2014 "),AG=n(E$e,"A",{href:!0});var M_t=s(AG);a9o=r(M_t,"GPTNeoXForCausalLM"),M_t.forEach(t),n9o=r(E$e," (GPT NeoX model)"),E$e.forEach(t),s9o=i(Q),z1=n(Q,"LI",{});var C$e=s(z1);kme=n(C$e,"STRONG",{});var E_t=s(kme);l9o=r(E_t,"gptj"),E_t.forEach(t),i9o=r(C$e," \u2014 "),LG=n(C$e,"A",{href:!0});var C_t=s(LG);d9o=r(C_t,"GPTJForCausalLM"),C_t.forEach(t),c9o=r(C$e," (GPT-J model)"),C$e.forEach(t),f9o=i(Q),Q1=n(Q,"LI",{});var w$e=s(Q1);Sme=n(w$e,"STRONG",{});var w_t=s(Sme);m9o=r(w_t,"marian"),w_t.forEach(t),g9o=r(w$e," \u2014 "),yG=n(w$e,"A",{href:!0});var A_t=s(yG);h9o=r(A_t,"MarianForCausalLM"),A_t.forEach(t),p9o=r(w$e," (Marian model)"),w$e.forEach(t),_9o=i(Q),W1=n(Q,"LI",{});var A$e=s(W1);Rme=n(A$e,"STRONG",{});var L_t=s(Rme);u9o=r(L_t,"mbart"),L_t.forEach(t),b9o=r(A$e," \u2014 "),xG=n(A$e,"A",{href:!0});var y_t=s(xG);v9o=r(y_t,"MBartForCausalLM"),y_t.forEach(t),F9o=r(A$e," (mBART model)"),A$e.forEach(t),T9o=i(Q),H1=n(Q,"LI",{});var L$e=s(H1);Pme=n(L$e,"STRONG",{});var x_t=s(Pme);M9o=r(x_t,"megatron-bert"),x_t.forEach(t),E9o=r(L$e," \u2014 "),$G=n(L$e,"A",{href:!0});var $_t=s($G);C9o=r($_t,"MegatronBertForCausalLM"),$_t.forEach(t),w9o=r(L$e," (Megatron-BERT model)"),L$e.forEach(t),A9o=i(Q),U1=n(Q,"LI",{});var y$e=s(U1);Bme=n(y$e,"STRONG",{});var k_t=s(Bme);L9o=r(k_t,"openai-gpt"),k_t.forEach(t),y9o=r(y$e," \u2014 "),kG=n(y$e,"A",{href:!0});var S_t=s(kG);x9o=r(S_t,"OpenAIGPTLMHeadModel"),S_t.forEach(t),$9o=r(y$e," (OpenAI GPT model)"),y$e.forEach(t),k9o=i(Q),J1=n(Q,"LI",{});var x$e=s(J1);Ime=n(x$e,"STRONG",{});var R_t=s(Ime);S9o=r(R_t,"opt"),R_t.forEach(t),R9o=r(x$e," \u2014 "),SG=n(x$e,"A",{href:!0});var P_t=s(SG);P9o=r(P_t,"OPTForCausalLM"),P_t.forEach(t),B9o=r(x$e," (OPT model)"),x$e.forEach(t),I9o=i(Q),Y1=n(Q,"LI",{});var $$e=s(Y1);Nme=n($$e,"STRONG",{});var B_t=s(Nme);N9o=r(B_t,"pegasus"),B_t.forEach(t),q9o=r($$e," \u2014 "),RG=n($$e,"A",{href:!0});var I_t=s(RG);j9o=r(I_t,"PegasusForCausalLM"),I_t.forEach(t),D9o=r($$e," (Pegasus model)"),$$e.forEach(t),G9o=i(Q),K1=n(Q,"LI",{});var k$e=s(K1);qme=n(k$e,"STRONG",{});var N_t=s(qme);O9o=r(N_t,"plbart"),N_t.forEach(t),V9o=r(k$e," \u2014 "),PG=n(k$e,"A",{href:!0});var q_t=s(PG);X9o=r(q_t,"PLBartForCausalLM"),q_t.forEach(t),z9o=r(k$e," (PLBart model)"),k$e.forEach(t),Q9o=i(Q),Z1=n(Q,"LI",{});var S$e=s(Z1);jme=n(S$e,"STRONG",{});var j_t=s(jme);W9o=r(j_t,"prophetnet"),j_t.forEach(t),H9o=r(S$e," \u2014 "),BG=n(S$e,"A",{href:!0});var D_t=s(BG);U9o=r(D_t,"ProphetNetForCausalLM"),D_t.forEach(t),J9o=r(S$e," (ProphetNet model)"),S$e.forEach(t),Y9o=i(Q),e2=n(Q,"LI",{});var R$e=s(e2);Dme=n(R$e,"STRONG",{});var G_t=s(Dme);K9o=r(G_t,"qdqbert"),G_t.forEach(t),Z9o=r(R$e," \u2014 "),IG=n(R$e,"A",{href:!0});var O_t=s(IG);exo=r(O_t,"QDQBertLMHeadModel"),O_t.forEach(t),oxo=r(R$e," (QDQBert model)"),R$e.forEach(t),rxo=i(Q),o2=n(Q,"LI",{});var P$e=s(o2);Gme=n(P$e,"STRONG",{});var V_t=s(Gme);txo=r(V_t,"reformer"),V_t.forEach(t),axo=r(P$e," \u2014 "),NG=n(P$e,"A",{href:!0});var X_t=s(NG);nxo=r(X_t,"ReformerModelWithLMHead"),X_t.forEach(t),sxo=r(P$e," (Reformer model)"),P$e.forEach(t),lxo=i(Q),r2=n(Q,"LI",{});var B$e=s(r2);Ome=n(B$e,"STRONG",{});var z_t=s(Ome);ixo=r(z_t,"rembert"),z_t.forEach(t),dxo=r(B$e," \u2014 "),qG=n(B$e,"A",{href:!0});var Q_t=s(qG);cxo=r(Q_t,"RemBertForCausalLM"),Q_t.forEach(t),fxo=r(B$e," (RemBERT model)"),B$e.forEach(t),mxo=i(Q),t2=n(Q,"LI",{});var I$e=s(t2);Vme=n(I$e,"STRONG",{});var W_t=s(Vme);gxo=r(W_t,"roberta"),W_t.forEach(t),hxo=r(I$e," \u2014 "),jG=n(I$e,"A",{href:!0});var H_t=s(jG);pxo=r(H_t,"RobertaForCausalLM"),H_t.forEach(t),_xo=r(I$e," (RoBERTa model)"),I$e.forEach(t),uxo=i(Q),a2=n(Q,"LI",{});var N$e=s(a2);Xme=n(N$e,"STRONG",{});var U_t=s(Xme);bxo=r(U_t,"roformer"),U_t.forEach(t),vxo=r(N$e," \u2014 "),DG=n(N$e,"A",{href:!0});var J_t=s(DG);Fxo=r(J_t,"RoFormerForCausalLM"),J_t.forEach(t),Txo=r(N$e," (RoFormer model)"),N$e.forEach(t),Mxo=i(Q),n2=n(Q,"LI",{});var q$e=s(n2);zme=n(q$e,"STRONG",{});var Y_t=s(zme);Exo=r(Y_t,"speech_to_text_2"),Y_t.forEach(t),Cxo=r(q$e," \u2014 "),GG=n(q$e,"A",{href:!0});var K_t=s(GG);wxo=r(K_t,"Speech2Text2ForCausalLM"),K_t.forEach(t),Axo=r(q$e," (Speech2Text2 model)"),q$e.forEach(t),Lxo=i(Q),s2=n(Q,"LI",{});var j$e=s(s2);Qme=n(j$e,"STRONG",{});var Z_t=s(Qme);yxo=r(Z_t,"transfo-xl"),Z_t.forEach(t),xxo=r(j$e," \u2014 "),OG=n(j$e,"A",{href:!0});var eut=s(OG);$xo=r(eut,"TransfoXLLMHeadModel"),eut.forEach(t),kxo=r(j$e," (Transformer-XL model)"),j$e.forEach(t),Sxo=i(Q),l2=n(Q,"LI",{});var D$e=s(l2);Wme=n(D$e,"STRONG",{});var out=s(Wme);Rxo=r(out,"trocr"),out.forEach(t),Pxo=r(D$e," \u2014 "),VG=n(D$e,"A",{href:!0});var rut=s(VG);Bxo=r(rut,"TrOCRForCausalLM"),rut.forEach(t),Ixo=r(D$e," (TrOCR model)"),D$e.forEach(t),Nxo=i(Q),i2=n(Q,"LI",{});var G$e=s(i2);Hme=n(G$e,"STRONG",{});var tut=s(Hme);qxo=r(tut,"xglm"),tut.forEach(t),jxo=r(G$e," \u2014 "),XG=n(G$e,"A",{href:!0});var aut=s(XG);Dxo=r(aut,"XGLMForCausalLM"),aut.forEach(t),Gxo=r(G$e," (XGLM model)"),G$e.forEach(t),Oxo=i(Q),d2=n(Q,"LI",{});var O$e=s(d2);Ume=n(O$e,"STRONG",{});var nut=s(Ume);Vxo=r(nut,"xlm"),nut.forEach(t),Xxo=r(O$e," \u2014 "),zG=n(O$e,"A",{href:!0});var sut=s(zG);zxo=r(sut,"XLMWithLMHeadModel"),sut.forEach(t),Qxo=r(O$e," (XLM model)"),O$e.forEach(t),Wxo=i(Q),c2=n(Q,"LI",{});var V$e=s(c2);Jme=n(V$e,"STRONG",{});var lut=s(Jme);Hxo=r(lut,"xlm-prophetnet"),lut.forEach(t),Uxo=r(V$e," \u2014 "),QG=n(V$e,"A",{href:!0});var iut=s(QG);Jxo=r(iut,"XLMProphetNetForCausalLM"),iut.forEach(t),Yxo=r(V$e," (XLM-ProphetNet model)"),V$e.forEach(t),Kxo=i(Q),f2=n(Q,"LI",{});var X$e=s(f2);Yme=n(X$e,"STRONG",{});var dut=s(Yme);Zxo=r(dut,"xlm-roberta"),dut.forEach(t),e$o=r(X$e," \u2014 "),WG=n(X$e,"A",{href:!0});var cut=s(WG);o$o=r(cut,"XLMRobertaForCausalLM"),cut.forEach(t),r$o=r(X$e," (XLM-RoBERTa model)"),X$e.forEach(t),t$o=i(Q),m2=n(Q,"LI",{});var z$e=s(m2);Kme=n(z$e,"STRONG",{});var fut=s(Kme);a$o=r(fut,"xlm-roberta-xl"),fut.forEach(t),n$o=r(z$e," \u2014 "),HG=n(z$e,"A",{href:!0});var mut=s(HG);s$o=r(mut,"XLMRobertaXLForCausalLM"),mut.forEach(t),l$o=r(z$e," (XLM-RoBERTa-XL model)"),z$e.forEach(t),i$o=i(Q),g2=n(Q,"LI",{});var Q$e=s(g2);Zme=n(Q$e,"STRONG",{});var gut=s(Zme);d$o=r(gut,"xlnet"),gut.forEach(t),c$o=r(Q$e," \u2014 "),UG=n(Q$e,"A",{href:!0});var hut=s(UG);f$o=r(hut,"XLNetLMHeadModel"),hut.forEach(t),m$o=r(Q$e," (XLNet model)"),Q$e.forEach(t),Q.forEach(t),g$o=i(sa),h2=n(sa,"P",{});var W$e=s(h2);h$o=r(W$e,"The model is set in evaluation mode by default using "),ege=n(W$e,"CODE",{});var put=s(ege);p$o=r(put,"model.eval()"),put.forEach(t),_$o=r(W$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),oge=n(W$e,"CODE",{});var _ut=s(oge);u$o=r(_ut,"model.train()"),_ut.forEach(t),W$e.forEach(t),b$o=i(sa),T(p2.$$.fragment,sa),sa.forEach(t),el.forEach(t),xOe=i(f),zi=n(f,"H2",{class:!0});var BXe=s(zi);_2=n(BXe,"A",{id:!0,class:!0,href:!0});var uut=s(_2);rge=n(uut,"SPAN",{});var but=s(rge);T(My.$$.fragment,but),but.forEach(t),uut.forEach(t),v$o=i(BXe),tge=n(BXe,"SPAN",{});var vut=s(tge);F$o=r(vut,"AutoModelForMaskedLM"),vut.forEach(t),BXe.forEach(t),$Oe=i(f),So=n(f,"DIV",{class:!0});var ol=s(So);T(Ey.$$.fragment,ol),T$o=i(ol),Qi=n(ol,"P",{});var joe=s(Qi);M$o=r(joe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),JG=n(joe,"A",{href:!0});var Fut=s(JG);E$o=r(Fut,"from_pretrained()"),Fut.forEach(t),C$o=r(joe," class method or the "),YG=n(joe,"A",{href:!0});var Tut=s(YG);w$o=r(Tut,"from_config()"),Tut.forEach(t),A$o=r(joe,` class
method.`),joe.forEach(t),L$o=i(ol),Cy=n(ol,"P",{});var IXe=s(Cy);y$o=r(IXe,"This class cannot be instantiated directly using "),age=n(IXe,"CODE",{});var Mut=s(age);x$o=r(Mut,"__init__()"),Mut.forEach(t),$$o=r(IXe," (throws an error)."),IXe.forEach(t),k$o=i(ol),it=n(ol,"DIV",{class:!0});var VA=s(it);T(wy.$$.fragment,VA),S$o=i(VA),nge=n(VA,"P",{});var Eut=s(nge);R$o=r(Eut,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Eut.forEach(t),P$o=i(VA),Wi=n(VA,"P",{});var Doe=s(Wi);B$o=r(Doe,`Note:
Loading a model from its configuration file does `),sge=n(Doe,"STRONG",{});var Cut=s(sge);I$o=r(Cut,"not"),Cut.forEach(t),N$o=r(Doe,` load the model weights. It only affects the
model\u2019s configuration. Use `),KG=n(Doe,"A",{href:!0});var wut=s(KG);q$o=r(wut,"from_pretrained()"),wut.forEach(t),j$o=r(Doe," to load the model weights."),Doe.forEach(t),D$o=i(VA),T(u2.$$.fragment,VA),VA.forEach(t),G$o=i(ol),Ze=n(ol,"DIV",{class:!0});var la=s(Ze);T(Ay.$$.fragment,la),O$o=i(la),lge=n(la,"P",{});var Aut=s(lge);V$o=r(Aut,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Aut.forEach(t),X$o=i(la),Ia=n(la,"P",{});var XA=s(Ia);z$o=r(XA,"The model class to instantiate is selected based on the "),ige=n(XA,"CODE",{});var Lut=s(ige);Q$o=r(Lut,"model_type"),Lut.forEach(t),W$o=r(XA,` property of the config object (either
passed as an argument or loaded from `),dge=n(XA,"CODE",{});var yut=s(dge);H$o=r(yut,"pretrained_model_name_or_path"),yut.forEach(t),U$o=r(XA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cge=n(XA,"CODE",{});var xut=s(cge);J$o=r(xut,"pretrained_model_name_or_path"),xut.forEach(t),Y$o=r(XA,":"),XA.forEach(t),K$o=i(la),W=n(la,"UL",{});var U=s(W);b2=n(U,"LI",{});var H$e=s(b2);fge=n(H$e,"STRONG",{});var $ut=s(fge);Z$o=r($ut,"albert"),$ut.forEach(t),eko=r(H$e," \u2014 "),ZG=n(H$e,"A",{href:!0});var kut=s(ZG);oko=r(kut,"AlbertForMaskedLM"),kut.forEach(t),rko=r(H$e," (ALBERT model)"),H$e.forEach(t),tko=i(U),v2=n(U,"LI",{});var U$e=s(v2);mge=n(U$e,"STRONG",{});var Sut=s(mge);ako=r(Sut,"bart"),Sut.forEach(t),nko=r(U$e," \u2014 "),eO=n(U$e,"A",{href:!0});var Rut=s(eO);sko=r(Rut,"BartForConditionalGeneration"),Rut.forEach(t),lko=r(U$e," (BART model)"),U$e.forEach(t),iko=i(U),F2=n(U,"LI",{});var J$e=s(F2);gge=n(J$e,"STRONG",{});var Put=s(gge);dko=r(Put,"bert"),Put.forEach(t),cko=r(J$e," \u2014 "),oO=n(J$e,"A",{href:!0});var But=s(oO);fko=r(But,"BertForMaskedLM"),But.forEach(t),mko=r(J$e," (BERT model)"),J$e.forEach(t),gko=i(U),T2=n(U,"LI",{});var Y$e=s(T2);hge=n(Y$e,"STRONG",{});var Iut=s(hge);hko=r(Iut,"big_bird"),Iut.forEach(t),pko=r(Y$e," \u2014 "),rO=n(Y$e,"A",{href:!0});var Nut=s(rO);_ko=r(Nut,"BigBirdForMaskedLM"),Nut.forEach(t),uko=r(Y$e," (BigBird model)"),Y$e.forEach(t),bko=i(U),M2=n(U,"LI",{});var K$e=s(M2);pge=n(K$e,"STRONG",{});var qut=s(pge);vko=r(qut,"camembert"),qut.forEach(t),Fko=r(K$e," \u2014 "),tO=n(K$e,"A",{href:!0});var jut=s(tO);Tko=r(jut,"CamembertForMaskedLM"),jut.forEach(t),Mko=r(K$e," (CamemBERT model)"),K$e.forEach(t),Eko=i(U),E2=n(U,"LI",{});var Z$e=s(E2);_ge=n(Z$e,"STRONG",{});var Dut=s(_ge);Cko=r(Dut,"convbert"),Dut.forEach(t),wko=r(Z$e," \u2014 "),aO=n(Z$e,"A",{href:!0});var Gut=s(aO);Ako=r(Gut,"ConvBertForMaskedLM"),Gut.forEach(t),Lko=r(Z$e," (ConvBERT model)"),Z$e.forEach(t),yko=i(U),C2=n(U,"LI",{});var eke=s(C2);uge=n(eke,"STRONG",{});var Out=s(uge);xko=r(Out,"data2vec-text"),Out.forEach(t),$ko=r(eke," \u2014 "),nO=n(eke,"A",{href:!0});var Vut=s(nO);kko=r(Vut,"Data2VecTextForMaskedLM"),Vut.forEach(t),Sko=r(eke," (Data2VecText model)"),eke.forEach(t),Rko=i(U),w2=n(U,"LI",{});var oke=s(w2);bge=n(oke,"STRONG",{});var Xut=s(bge);Pko=r(Xut,"deberta"),Xut.forEach(t),Bko=r(oke," \u2014 "),sO=n(oke,"A",{href:!0});var zut=s(sO);Iko=r(zut,"DebertaForMaskedLM"),zut.forEach(t),Nko=r(oke," (DeBERTa model)"),oke.forEach(t),qko=i(U),A2=n(U,"LI",{});var rke=s(A2);vge=n(rke,"STRONG",{});var Qut=s(vge);jko=r(Qut,"deberta-v2"),Qut.forEach(t),Dko=r(rke," \u2014 "),lO=n(rke,"A",{href:!0});var Wut=s(lO);Gko=r(Wut,"DebertaV2ForMaskedLM"),Wut.forEach(t),Oko=r(rke," (DeBERTa-v2 model)"),rke.forEach(t),Vko=i(U),L2=n(U,"LI",{});var tke=s(L2);Fge=n(tke,"STRONG",{});var Hut=s(Fge);Xko=r(Hut,"distilbert"),Hut.forEach(t),zko=r(tke," \u2014 "),iO=n(tke,"A",{href:!0});var Uut=s(iO);Qko=r(Uut,"DistilBertForMaskedLM"),Uut.forEach(t),Wko=r(tke," (DistilBERT model)"),tke.forEach(t),Hko=i(U),y2=n(U,"LI",{});var ake=s(y2);Tge=n(ake,"STRONG",{});var Jut=s(Tge);Uko=r(Jut,"electra"),Jut.forEach(t),Jko=r(ake," \u2014 "),dO=n(ake,"A",{href:!0});var Yut=s(dO);Yko=r(Yut,"ElectraForMaskedLM"),Yut.forEach(t),Kko=r(ake," (ELECTRA model)"),ake.forEach(t),Zko=i(U),x2=n(U,"LI",{});var nke=s(x2);Mge=n(nke,"STRONG",{});var Kut=s(Mge);eSo=r(Kut,"flaubert"),Kut.forEach(t),oSo=r(nke," \u2014 "),cO=n(nke,"A",{href:!0});var Zut=s(cO);rSo=r(Zut,"FlaubertWithLMHeadModel"),Zut.forEach(t),tSo=r(nke," (FlauBERT model)"),nke.forEach(t),aSo=i(U),$2=n(U,"LI",{});var ske=s($2);Ege=n(ske,"STRONG",{});var e1t=s(Ege);nSo=r(e1t,"fnet"),e1t.forEach(t),sSo=r(ske," \u2014 "),fO=n(ske,"A",{href:!0});var o1t=s(fO);lSo=r(o1t,"FNetForMaskedLM"),o1t.forEach(t),iSo=r(ske," (FNet model)"),ske.forEach(t),dSo=i(U),k2=n(U,"LI",{});var lke=s(k2);Cge=n(lke,"STRONG",{});var r1t=s(Cge);cSo=r(r1t,"funnel"),r1t.forEach(t),fSo=r(lke," \u2014 "),mO=n(lke,"A",{href:!0});var t1t=s(mO);mSo=r(t1t,"FunnelForMaskedLM"),t1t.forEach(t),gSo=r(lke," (Funnel Transformer model)"),lke.forEach(t),hSo=i(U),S2=n(U,"LI",{});var ike=s(S2);wge=n(ike,"STRONG",{});var a1t=s(wge);pSo=r(a1t,"ibert"),a1t.forEach(t),_So=r(ike," \u2014 "),gO=n(ike,"A",{href:!0});var n1t=s(gO);uSo=r(n1t,"IBertForMaskedLM"),n1t.forEach(t),bSo=r(ike," (I-BERT model)"),ike.forEach(t),vSo=i(U),R2=n(U,"LI",{});var dke=s(R2);Age=n(dke,"STRONG",{});var s1t=s(Age);FSo=r(s1t,"layoutlm"),s1t.forEach(t),TSo=r(dke," \u2014 "),hO=n(dke,"A",{href:!0});var l1t=s(hO);MSo=r(l1t,"LayoutLMForMaskedLM"),l1t.forEach(t),ESo=r(dke," (LayoutLM model)"),dke.forEach(t),CSo=i(U),P2=n(U,"LI",{});var cke=s(P2);Lge=n(cke,"STRONG",{});var i1t=s(Lge);wSo=r(i1t,"longformer"),i1t.forEach(t),ASo=r(cke," \u2014 "),pO=n(cke,"A",{href:!0});var d1t=s(pO);LSo=r(d1t,"LongformerForMaskedLM"),d1t.forEach(t),ySo=r(cke," (Longformer model)"),cke.forEach(t),xSo=i(U),B2=n(U,"LI",{});var fke=s(B2);yge=n(fke,"STRONG",{});var c1t=s(yge);$So=r(c1t,"luke"),c1t.forEach(t),kSo=r(fke," \u2014 "),_O=n(fke,"A",{href:!0});var f1t=s(_O);SSo=r(f1t,"LukeForMaskedLM"),f1t.forEach(t),RSo=r(fke," (LUKE model)"),fke.forEach(t),PSo=i(U),I2=n(U,"LI",{});var mke=s(I2);xge=n(mke,"STRONG",{});var m1t=s(xge);BSo=r(m1t,"mbart"),m1t.forEach(t),ISo=r(mke," \u2014 "),uO=n(mke,"A",{href:!0});var g1t=s(uO);NSo=r(g1t,"MBartForConditionalGeneration"),g1t.forEach(t),qSo=r(mke," (mBART model)"),mke.forEach(t),jSo=i(U),N2=n(U,"LI",{});var gke=s(N2);$ge=n(gke,"STRONG",{});var h1t=s($ge);DSo=r(h1t,"megatron-bert"),h1t.forEach(t),GSo=r(gke," \u2014 "),bO=n(gke,"A",{href:!0});var p1t=s(bO);OSo=r(p1t,"MegatronBertForMaskedLM"),p1t.forEach(t),VSo=r(gke," (Megatron-BERT model)"),gke.forEach(t),XSo=i(U),q2=n(U,"LI",{});var hke=s(q2);kge=n(hke,"STRONG",{});var _1t=s(kge);zSo=r(_1t,"mobilebert"),_1t.forEach(t),QSo=r(hke," \u2014 "),vO=n(hke,"A",{href:!0});var u1t=s(vO);WSo=r(u1t,"MobileBertForMaskedLM"),u1t.forEach(t),HSo=r(hke," (MobileBERT model)"),hke.forEach(t),USo=i(U),j2=n(U,"LI",{});var pke=s(j2);Sge=n(pke,"STRONG",{});var b1t=s(Sge);JSo=r(b1t,"mpnet"),b1t.forEach(t),YSo=r(pke," \u2014 "),FO=n(pke,"A",{href:!0});var v1t=s(FO);KSo=r(v1t,"MPNetForMaskedLM"),v1t.forEach(t),ZSo=r(pke," (MPNet model)"),pke.forEach(t),eRo=i(U),D2=n(U,"LI",{});var _ke=s(D2);Rge=n(_ke,"STRONG",{});var F1t=s(Rge);oRo=r(F1t,"nezha"),F1t.forEach(t),rRo=r(_ke," \u2014 "),TO=n(_ke,"A",{href:!0});var T1t=s(TO);tRo=r(T1t,"NezhaForMaskedLM"),T1t.forEach(t),aRo=r(_ke," (Nezha model)"),_ke.forEach(t),nRo=i(U),G2=n(U,"LI",{});var uke=s(G2);Pge=n(uke,"STRONG",{});var M1t=s(Pge);sRo=r(M1t,"nystromformer"),M1t.forEach(t),lRo=r(uke," \u2014 "),MO=n(uke,"A",{href:!0});var E1t=s(MO);iRo=r(E1t,"NystromformerForMaskedLM"),E1t.forEach(t),dRo=r(uke," (Nystr\xF6mformer model)"),uke.forEach(t),cRo=i(U),O2=n(U,"LI",{});var bke=s(O2);Bge=n(bke,"STRONG",{});var C1t=s(Bge);fRo=r(C1t,"perceiver"),C1t.forEach(t),mRo=r(bke," \u2014 "),EO=n(bke,"A",{href:!0});var w1t=s(EO);gRo=r(w1t,"PerceiverForMaskedLM"),w1t.forEach(t),hRo=r(bke," (Perceiver model)"),bke.forEach(t),pRo=i(U),V2=n(U,"LI",{});var vke=s(V2);Ige=n(vke,"STRONG",{});var A1t=s(Ige);_Ro=r(A1t,"qdqbert"),A1t.forEach(t),uRo=r(vke," \u2014 "),CO=n(vke,"A",{href:!0});var L1t=s(CO);bRo=r(L1t,"QDQBertForMaskedLM"),L1t.forEach(t),vRo=r(vke," (QDQBert model)"),vke.forEach(t),FRo=i(U),X2=n(U,"LI",{});var Fke=s(X2);Nge=n(Fke,"STRONG",{});var y1t=s(Nge);TRo=r(y1t,"reformer"),y1t.forEach(t),MRo=r(Fke," \u2014 "),wO=n(Fke,"A",{href:!0});var x1t=s(wO);ERo=r(x1t,"ReformerForMaskedLM"),x1t.forEach(t),CRo=r(Fke," (Reformer model)"),Fke.forEach(t),wRo=i(U),z2=n(U,"LI",{});var Tke=s(z2);qge=n(Tke,"STRONG",{});var $1t=s(qge);ARo=r($1t,"rembert"),$1t.forEach(t),LRo=r(Tke," \u2014 "),AO=n(Tke,"A",{href:!0});var k1t=s(AO);yRo=r(k1t,"RemBertForMaskedLM"),k1t.forEach(t),xRo=r(Tke," (RemBERT model)"),Tke.forEach(t),$Ro=i(U),Q2=n(U,"LI",{});var Mke=s(Q2);jge=n(Mke,"STRONG",{});var S1t=s(jge);kRo=r(S1t,"roberta"),S1t.forEach(t),SRo=r(Mke," \u2014 "),LO=n(Mke,"A",{href:!0});var R1t=s(LO);RRo=r(R1t,"RobertaForMaskedLM"),R1t.forEach(t),PRo=r(Mke," (RoBERTa model)"),Mke.forEach(t),BRo=i(U),W2=n(U,"LI",{});var Eke=s(W2);Dge=n(Eke,"STRONG",{});var P1t=s(Dge);IRo=r(P1t,"roformer"),P1t.forEach(t),NRo=r(Eke," \u2014 "),yO=n(Eke,"A",{href:!0});var B1t=s(yO);qRo=r(B1t,"RoFormerForMaskedLM"),B1t.forEach(t),jRo=r(Eke," (RoFormer model)"),Eke.forEach(t),DRo=i(U),H2=n(U,"LI",{});var Cke=s(H2);Gge=n(Cke,"STRONG",{});var I1t=s(Gge);GRo=r(I1t,"squeezebert"),I1t.forEach(t),ORo=r(Cke," \u2014 "),xO=n(Cke,"A",{href:!0});var N1t=s(xO);VRo=r(N1t,"SqueezeBertForMaskedLM"),N1t.forEach(t),XRo=r(Cke," (SqueezeBERT model)"),Cke.forEach(t),zRo=i(U),U2=n(U,"LI",{});var wke=s(U2);Oge=n(wke,"STRONG",{});var q1t=s(Oge);QRo=r(q1t,"tapas"),q1t.forEach(t),WRo=r(wke," \u2014 "),$O=n(wke,"A",{href:!0});var j1t=s($O);HRo=r(j1t,"TapasForMaskedLM"),j1t.forEach(t),URo=r(wke," (TAPAS model)"),wke.forEach(t),JRo=i(U),J2=n(U,"LI",{});var Ake=s(J2);Vge=n(Ake,"STRONG",{});var D1t=s(Vge);YRo=r(D1t,"wav2vec2"),D1t.forEach(t),KRo=r(Ake," \u2014 "),Xge=n(Ake,"CODE",{});var G1t=s(Xge);ZRo=r(G1t,"Wav2Vec2ForMaskedLM"),G1t.forEach(t),ePo=r(Ake," (Wav2Vec2 model)"),Ake.forEach(t),oPo=i(U),Y2=n(U,"LI",{});var Lke=s(Y2);zge=n(Lke,"STRONG",{});var O1t=s(zge);rPo=r(O1t,"xlm"),O1t.forEach(t),tPo=r(Lke," \u2014 "),kO=n(Lke,"A",{href:!0});var V1t=s(kO);aPo=r(V1t,"XLMWithLMHeadModel"),V1t.forEach(t),nPo=r(Lke," (XLM model)"),Lke.forEach(t),sPo=i(U),K2=n(U,"LI",{});var yke=s(K2);Qge=n(yke,"STRONG",{});var X1t=s(Qge);lPo=r(X1t,"xlm-roberta"),X1t.forEach(t),iPo=r(yke," \u2014 "),SO=n(yke,"A",{href:!0});var z1t=s(SO);dPo=r(z1t,"XLMRobertaForMaskedLM"),z1t.forEach(t),cPo=r(yke," (XLM-RoBERTa model)"),yke.forEach(t),fPo=i(U),Z2=n(U,"LI",{});var xke=s(Z2);Wge=n(xke,"STRONG",{});var Q1t=s(Wge);mPo=r(Q1t,"xlm-roberta-xl"),Q1t.forEach(t),gPo=r(xke," \u2014 "),RO=n(xke,"A",{href:!0});var W1t=s(RO);hPo=r(W1t,"XLMRobertaXLForMaskedLM"),W1t.forEach(t),pPo=r(xke," (XLM-RoBERTa-XL model)"),xke.forEach(t),_Po=i(U),eb=n(U,"LI",{});var $ke=s(eb);Hge=n($ke,"STRONG",{});var H1t=s(Hge);uPo=r(H1t,"yoso"),H1t.forEach(t),bPo=r($ke," \u2014 "),PO=n($ke,"A",{href:!0});var U1t=s(PO);vPo=r(U1t,"YosoForMaskedLM"),U1t.forEach(t),FPo=r($ke," (YOSO model)"),$ke.forEach(t),U.forEach(t),TPo=i(la),ob=n(la,"P",{});var kke=s(ob);MPo=r(kke,"The model is set in evaluation mode by default using "),Uge=n(kke,"CODE",{});var J1t=s(Uge);EPo=r(J1t,"model.eval()"),J1t.forEach(t),CPo=r(kke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jge=n(kke,"CODE",{});var Y1t=s(Jge);wPo=r(Y1t,"model.train()"),Y1t.forEach(t),kke.forEach(t),APo=i(la),T(rb.$$.fragment,la),la.forEach(t),ol.forEach(t),kOe=i(f),Hi=n(f,"H2",{class:!0});var NXe=s(Hi);tb=n(NXe,"A",{id:!0,class:!0,href:!0});var K1t=s(tb);Yge=n(K1t,"SPAN",{});var Z1t=s(Yge);T(Ly.$$.fragment,Z1t),Z1t.forEach(t),K1t.forEach(t),LPo=i(NXe),Kge=n(NXe,"SPAN",{});var e2t=s(Kge);yPo=r(e2t,"AutoModelForSeq2SeqLM"),e2t.forEach(t),NXe.forEach(t),SOe=i(f),Ro=n(f,"DIV",{class:!0});var rl=s(Ro);T(yy.$$.fragment,rl),xPo=i(rl),Ui=n(rl,"P",{});var Goe=s(Ui);$Po=r(Goe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),BO=n(Goe,"A",{href:!0});var o2t=s(BO);kPo=r(o2t,"from_pretrained()"),o2t.forEach(t),SPo=r(Goe," class method or the "),IO=n(Goe,"A",{href:!0});var r2t=s(IO);RPo=r(r2t,"from_config()"),r2t.forEach(t),PPo=r(Goe,` class
method.`),Goe.forEach(t),BPo=i(rl),xy=n(rl,"P",{});var qXe=s(xy);IPo=r(qXe,"This class cannot be instantiated directly using "),Zge=n(qXe,"CODE",{});var t2t=s(Zge);NPo=r(t2t,"__init__()"),t2t.forEach(t),qPo=r(qXe," (throws an error)."),qXe.forEach(t),jPo=i(rl),dt=n(rl,"DIV",{class:!0});var zA=s(dt);T($y.$$.fragment,zA),DPo=i(zA),ehe=n(zA,"P",{});var a2t=s(ehe);GPo=r(a2t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),a2t.forEach(t),OPo=i(zA),Ji=n(zA,"P",{});var Ooe=s(Ji);VPo=r(Ooe,`Note:
Loading a model from its configuration file does `),ohe=n(Ooe,"STRONG",{});var n2t=s(ohe);XPo=r(n2t,"not"),n2t.forEach(t),zPo=r(Ooe,` load the model weights. It only affects the
model\u2019s configuration. Use `),NO=n(Ooe,"A",{href:!0});var s2t=s(NO);QPo=r(s2t,"from_pretrained()"),s2t.forEach(t),WPo=r(Ooe," to load the model weights."),Ooe.forEach(t),HPo=i(zA),T(ab.$$.fragment,zA),zA.forEach(t),UPo=i(rl),eo=n(rl,"DIV",{class:!0});var ia=s(eo);T(ky.$$.fragment,ia),JPo=i(ia),rhe=n(ia,"P",{});var l2t=s(rhe);YPo=r(l2t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),l2t.forEach(t),KPo=i(ia),Na=n(ia,"P",{});var QA=s(Na);ZPo=r(QA,"The model class to instantiate is selected based on the "),the=n(QA,"CODE",{});var i2t=s(the);eBo=r(i2t,"model_type"),i2t.forEach(t),oBo=r(QA,` property of the config object (either
passed as an argument or loaded from `),ahe=n(QA,"CODE",{});var d2t=s(ahe);rBo=r(d2t,"pretrained_model_name_or_path"),d2t.forEach(t),tBo=r(QA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nhe=n(QA,"CODE",{});var c2t=s(nhe);aBo=r(c2t,"pretrained_model_name_or_path"),c2t.forEach(t),nBo=r(QA,":"),QA.forEach(t),sBo=i(ia),pe=n(ia,"UL",{});var be=s(pe);nb=n(be,"LI",{});var Ske=s(nb);she=n(Ske,"STRONG",{});var f2t=s(she);lBo=r(f2t,"bart"),f2t.forEach(t),iBo=r(Ske," \u2014 "),qO=n(Ske,"A",{href:!0});var m2t=s(qO);dBo=r(m2t,"BartForConditionalGeneration"),m2t.forEach(t),cBo=r(Ske," (BART model)"),Ske.forEach(t),fBo=i(be),sb=n(be,"LI",{});var Rke=s(sb);lhe=n(Rke,"STRONG",{});var g2t=s(lhe);mBo=r(g2t,"bigbird_pegasus"),g2t.forEach(t),gBo=r(Rke," \u2014 "),jO=n(Rke,"A",{href:!0});var h2t=s(jO);hBo=r(h2t,"BigBirdPegasusForConditionalGeneration"),h2t.forEach(t),pBo=r(Rke," (BigBird-Pegasus model)"),Rke.forEach(t),_Bo=i(be),lb=n(be,"LI",{});var Pke=s(lb);ihe=n(Pke,"STRONG",{});var p2t=s(ihe);uBo=r(p2t,"blenderbot"),p2t.forEach(t),bBo=r(Pke," \u2014 "),DO=n(Pke,"A",{href:!0});var _2t=s(DO);vBo=r(_2t,"BlenderbotForConditionalGeneration"),_2t.forEach(t),FBo=r(Pke," (Blenderbot model)"),Pke.forEach(t),TBo=i(be),ib=n(be,"LI",{});var Bke=s(ib);dhe=n(Bke,"STRONG",{});var u2t=s(dhe);MBo=r(u2t,"blenderbot-small"),u2t.forEach(t),EBo=r(Bke," \u2014 "),GO=n(Bke,"A",{href:!0});var b2t=s(GO);CBo=r(b2t,"BlenderbotSmallForConditionalGeneration"),b2t.forEach(t),wBo=r(Bke," (BlenderbotSmall model)"),Bke.forEach(t),ABo=i(be),db=n(be,"LI",{});var Ike=s(db);che=n(Ike,"STRONG",{});var v2t=s(che);LBo=r(v2t,"encoder-decoder"),v2t.forEach(t),yBo=r(Ike," \u2014 "),OO=n(Ike,"A",{href:!0});var F2t=s(OO);xBo=r(F2t,"EncoderDecoderModel"),F2t.forEach(t),$Bo=r(Ike," (Encoder decoder model)"),Ike.forEach(t),kBo=i(be),cb=n(be,"LI",{});var Nke=s(cb);fhe=n(Nke,"STRONG",{});var T2t=s(fhe);SBo=r(T2t,"fsmt"),T2t.forEach(t),RBo=r(Nke," \u2014 "),VO=n(Nke,"A",{href:!0});var M2t=s(VO);PBo=r(M2t,"FSMTForConditionalGeneration"),M2t.forEach(t),BBo=r(Nke," (FairSeq Machine-Translation model)"),Nke.forEach(t),IBo=i(be),fb=n(be,"LI",{});var qke=s(fb);mhe=n(qke,"STRONG",{});var E2t=s(mhe);NBo=r(E2t,"led"),E2t.forEach(t),qBo=r(qke," \u2014 "),XO=n(qke,"A",{href:!0});var C2t=s(XO);jBo=r(C2t,"LEDForConditionalGeneration"),C2t.forEach(t),DBo=r(qke," (LED model)"),qke.forEach(t),GBo=i(be),mb=n(be,"LI",{});var jke=s(mb);ghe=n(jke,"STRONG",{});var w2t=s(ghe);OBo=r(w2t,"longt5"),w2t.forEach(t),VBo=r(jke," \u2014 "),zO=n(jke,"A",{href:!0});var A2t=s(zO);XBo=r(A2t,"LongT5ForConditionalGeneration"),A2t.forEach(t),zBo=r(jke," (LongT5 model)"),jke.forEach(t),QBo=i(be),gb=n(be,"LI",{});var Dke=s(gb);hhe=n(Dke,"STRONG",{});var L2t=s(hhe);WBo=r(L2t,"m2m_100"),L2t.forEach(t),HBo=r(Dke," \u2014 "),QO=n(Dke,"A",{href:!0});var y2t=s(QO);UBo=r(y2t,"M2M100ForConditionalGeneration"),y2t.forEach(t),JBo=r(Dke," (M2M100 model)"),Dke.forEach(t),YBo=i(be),hb=n(be,"LI",{});var Gke=s(hb);phe=n(Gke,"STRONG",{});var x2t=s(phe);KBo=r(x2t,"marian"),x2t.forEach(t),ZBo=r(Gke," \u2014 "),WO=n(Gke,"A",{href:!0});var $2t=s(WO);eIo=r($2t,"MarianMTModel"),$2t.forEach(t),oIo=r(Gke," (Marian model)"),Gke.forEach(t),rIo=i(be),pb=n(be,"LI",{});var Oke=s(pb);_he=n(Oke,"STRONG",{});var k2t=s(_he);tIo=r(k2t,"mbart"),k2t.forEach(t),aIo=r(Oke," \u2014 "),HO=n(Oke,"A",{href:!0});var S2t=s(HO);nIo=r(S2t,"MBartForConditionalGeneration"),S2t.forEach(t),sIo=r(Oke," (mBART model)"),Oke.forEach(t),lIo=i(be),_b=n(be,"LI",{});var Vke=s(_b);uhe=n(Vke,"STRONG",{});var R2t=s(uhe);iIo=r(R2t,"mt5"),R2t.forEach(t),dIo=r(Vke," \u2014 "),UO=n(Vke,"A",{href:!0});var P2t=s(UO);cIo=r(P2t,"MT5ForConditionalGeneration"),P2t.forEach(t),fIo=r(Vke," (MT5 model)"),Vke.forEach(t),mIo=i(be),ub=n(be,"LI",{});var Xke=s(ub);bhe=n(Xke,"STRONG",{});var B2t=s(bhe);gIo=r(B2t,"pegasus"),B2t.forEach(t),hIo=r(Xke," \u2014 "),JO=n(Xke,"A",{href:!0});var I2t=s(JO);pIo=r(I2t,"PegasusForConditionalGeneration"),I2t.forEach(t),_Io=r(Xke," (Pegasus model)"),Xke.forEach(t),uIo=i(be),bb=n(be,"LI",{});var zke=s(bb);vhe=n(zke,"STRONG",{});var N2t=s(vhe);bIo=r(N2t,"plbart"),N2t.forEach(t),vIo=r(zke," \u2014 "),YO=n(zke,"A",{href:!0});var q2t=s(YO);FIo=r(q2t,"PLBartForConditionalGeneration"),q2t.forEach(t),TIo=r(zke," (PLBart model)"),zke.forEach(t),MIo=i(be),vb=n(be,"LI",{});var Qke=s(vb);Fhe=n(Qke,"STRONG",{});var j2t=s(Fhe);EIo=r(j2t,"prophetnet"),j2t.forEach(t),CIo=r(Qke," \u2014 "),KO=n(Qke,"A",{href:!0});var D2t=s(KO);wIo=r(D2t,"ProphetNetForConditionalGeneration"),D2t.forEach(t),AIo=r(Qke," (ProphetNet model)"),Qke.forEach(t),LIo=i(be),Fb=n(be,"LI",{});var Wke=s(Fb);The=n(Wke,"STRONG",{});var G2t=s(The);yIo=r(G2t,"t5"),G2t.forEach(t),xIo=r(Wke," \u2014 "),ZO=n(Wke,"A",{href:!0});var O2t=s(ZO);$Io=r(O2t,"T5ForConditionalGeneration"),O2t.forEach(t),kIo=r(Wke," (T5 model)"),Wke.forEach(t),SIo=i(be),Tb=n(be,"LI",{});var Hke=s(Tb);Mhe=n(Hke,"STRONG",{});var V2t=s(Mhe);RIo=r(V2t,"xlm-prophetnet"),V2t.forEach(t),PIo=r(Hke," \u2014 "),eV=n(Hke,"A",{href:!0});var X2t=s(eV);BIo=r(X2t,"XLMProphetNetForConditionalGeneration"),X2t.forEach(t),IIo=r(Hke," (XLM-ProphetNet model)"),Hke.forEach(t),be.forEach(t),NIo=i(ia),Mb=n(ia,"P",{});var Uke=s(Mb);qIo=r(Uke,"The model is set in evaluation mode by default using "),Ehe=n(Uke,"CODE",{});var z2t=s(Ehe);jIo=r(z2t,"model.eval()"),z2t.forEach(t),DIo=r(Uke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Che=n(Uke,"CODE",{});var Q2t=s(Che);GIo=r(Q2t,"model.train()"),Q2t.forEach(t),Uke.forEach(t),OIo=i(ia),T(Eb.$$.fragment,ia),ia.forEach(t),rl.forEach(t),ROe=i(f),Yi=n(f,"H2",{class:!0});var jXe=s(Yi);Cb=n(jXe,"A",{id:!0,class:!0,href:!0});var W2t=s(Cb);whe=n(W2t,"SPAN",{});var H2t=s(whe);T(Sy.$$.fragment,H2t),H2t.forEach(t),W2t.forEach(t),VIo=i(jXe),Ahe=n(jXe,"SPAN",{});var U2t=s(Ahe);XIo=r(U2t,"AutoModelForSequenceClassification"),U2t.forEach(t),jXe.forEach(t),POe=i(f),Po=n(f,"DIV",{class:!0});var tl=s(Po);T(Ry.$$.fragment,tl),zIo=i(tl),Ki=n(tl,"P",{});var Voe=s(Ki);QIo=r(Voe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),oV=n(Voe,"A",{href:!0});var J2t=s(oV);WIo=r(J2t,"from_pretrained()"),J2t.forEach(t),HIo=r(Voe," class method or the "),rV=n(Voe,"A",{href:!0});var Y2t=s(rV);UIo=r(Y2t,"from_config()"),Y2t.forEach(t),JIo=r(Voe,` class
method.`),Voe.forEach(t),YIo=i(tl),Py=n(tl,"P",{});var DXe=s(Py);KIo=r(DXe,"This class cannot be instantiated directly using "),Lhe=n(DXe,"CODE",{});var K2t=s(Lhe);ZIo=r(K2t,"__init__()"),K2t.forEach(t),eNo=r(DXe," (throws an error)."),DXe.forEach(t),oNo=i(tl),ct=n(tl,"DIV",{class:!0});var WA=s(ct);T(By.$$.fragment,WA),rNo=i(WA),yhe=n(WA,"P",{});var Z2t=s(yhe);tNo=r(Z2t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Z2t.forEach(t),aNo=i(WA),Zi=n(WA,"P",{});var Xoe=s(Zi);nNo=r(Xoe,`Note:
Loading a model from its configuration file does `),xhe=n(Xoe,"STRONG",{});var ebt=s(xhe);sNo=r(ebt,"not"),ebt.forEach(t),lNo=r(Xoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),tV=n(Xoe,"A",{href:!0});var obt=s(tV);iNo=r(obt,"from_pretrained()"),obt.forEach(t),dNo=r(Xoe," to load the model weights."),Xoe.forEach(t),cNo=i(WA),T(wb.$$.fragment,WA),WA.forEach(t),fNo=i(tl),oo=n(tl,"DIV",{class:!0});var da=s(oo);T(Iy.$$.fragment,da),mNo=i(da),$he=n(da,"P",{});var rbt=s($he);gNo=r(rbt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),rbt.forEach(t),hNo=i(da),qa=n(da,"P",{});var HA=s(qa);pNo=r(HA,"The model class to instantiate is selected based on the "),khe=n(HA,"CODE",{});var tbt=s(khe);_No=r(tbt,"model_type"),tbt.forEach(t),uNo=r(HA,` property of the config object (either
passed as an argument or loaded from `),She=n(HA,"CODE",{});var abt=s(She);bNo=r(abt,"pretrained_model_name_or_path"),abt.forEach(t),vNo=r(HA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rhe=n(HA,"CODE",{});var nbt=s(Rhe);FNo=r(nbt,"pretrained_model_name_or_path"),nbt.forEach(t),TNo=r(HA,":"),HA.forEach(t),MNo=i(da),N=n(da,"UL",{});var j=s(N);Ab=n(j,"LI",{});var Jke=s(Ab);Phe=n(Jke,"STRONG",{});var sbt=s(Phe);ENo=r(sbt,"albert"),sbt.forEach(t),CNo=r(Jke," \u2014 "),aV=n(Jke,"A",{href:!0});var lbt=s(aV);wNo=r(lbt,"AlbertForSequenceClassification"),lbt.forEach(t),ANo=r(Jke," (ALBERT model)"),Jke.forEach(t),LNo=i(j),Lb=n(j,"LI",{});var Yke=s(Lb);Bhe=n(Yke,"STRONG",{});var ibt=s(Bhe);yNo=r(ibt,"bart"),ibt.forEach(t),xNo=r(Yke," \u2014 "),nV=n(Yke,"A",{href:!0});var dbt=s(nV);$No=r(dbt,"BartForSequenceClassification"),dbt.forEach(t),kNo=r(Yke," (BART model)"),Yke.forEach(t),SNo=i(j),yb=n(j,"LI",{});var Kke=s(yb);Ihe=n(Kke,"STRONG",{});var cbt=s(Ihe);RNo=r(cbt,"bert"),cbt.forEach(t),PNo=r(Kke," \u2014 "),sV=n(Kke,"A",{href:!0});var fbt=s(sV);BNo=r(fbt,"BertForSequenceClassification"),fbt.forEach(t),INo=r(Kke," (BERT model)"),Kke.forEach(t),NNo=i(j),xb=n(j,"LI",{});var Zke=s(xb);Nhe=n(Zke,"STRONG",{});var mbt=s(Nhe);qNo=r(mbt,"big_bird"),mbt.forEach(t),jNo=r(Zke," \u2014 "),lV=n(Zke,"A",{href:!0});var gbt=s(lV);DNo=r(gbt,"BigBirdForSequenceClassification"),gbt.forEach(t),GNo=r(Zke," (BigBird model)"),Zke.forEach(t),ONo=i(j),$b=n(j,"LI",{});var eSe=s($b);qhe=n(eSe,"STRONG",{});var hbt=s(qhe);VNo=r(hbt,"bigbird_pegasus"),hbt.forEach(t),XNo=r(eSe," \u2014 "),iV=n(eSe,"A",{href:!0});var pbt=s(iV);zNo=r(pbt,"BigBirdPegasusForSequenceClassification"),pbt.forEach(t),QNo=r(eSe," (BigBird-Pegasus model)"),eSe.forEach(t),WNo=i(j),kb=n(j,"LI",{});var oSe=s(kb);jhe=n(oSe,"STRONG",{});var _bt=s(jhe);HNo=r(_bt,"bloom"),_bt.forEach(t),UNo=r(oSe," \u2014 "),dV=n(oSe,"A",{href:!0});var ubt=s(dV);JNo=r(ubt,"BloomForSequenceClassification"),ubt.forEach(t),YNo=r(oSe," (BLOOM model)"),oSe.forEach(t),KNo=i(j),Sb=n(j,"LI",{});var rSe=s(Sb);Dhe=n(rSe,"STRONG",{});var bbt=s(Dhe);ZNo=r(bbt,"camembert"),bbt.forEach(t),eqo=r(rSe," \u2014 "),cV=n(rSe,"A",{href:!0});var vbt=s(cV);oqo=r(vbt,"CamembertForSequenceClassification"),vbt.forEach(t),rqo=r(rSe," (CamemBERT model)"),rSe.forEach(t),tqo=i(j),Rb=n(j,"LI",{});var tSe=s(Rb);Ghe=n(tSe,"STRONG",{});var Fbt=s(Ghe);aqo=r(Fbt,"canine"),Fbt.forEach(t),nqo=r(tSe," \u2014 "),fV=n(tSe,"A",{href:!0});var Tbt=s(fV);sqo=r(Tbt,"CanineForSequenceClassification"),Tbt.forEach(t),lqo=r(tSe," (CANINE model)"),tSe.forEach(t),iqo=i(j),Pb=n(j,"LI",{});var aSe=s(Pb);Ohe=n(aSe,"STRONG",{});var Mbt=s(Ohe);dqo=r(Mbt,"convbert"),Mbt.forEach(t),cqo=r(aSe," \u2014 "),mV=n(aSe,"A",{href:!0});var Ebt=s(mV);fqo=r(Ebt,"ConvBertForSequenceClassification"),Ebt.forEach(t),mqo=r(aSe," (ConvBERT model)"),aSe.forEach(t),gqo=i(j),Bb=n(j,"LI",{});var nSe=s(Bb);Vhe=n(nSe,"STRONG",{});var Cbt=s(Vhe);hqo=r(Cbt,"ctrl"),Cbt.forEach(t),pqo=r(nSe," \u2014 "),gV=n(nSe,"A",{href:!0});var wbt=s(gV);_qo=r(wbt,"CTRLForSequenceClassification"),wbt.forEach(t),uqo=r(nSe," (CTRL model)"),nSe.forEach(t),bqo=i(j),Ib=n(j,"LI",{});var sSe=s(Ib);Xhe=n(sSe,"STRONG",{});var Abt=s(Xhe);vqo=r(Abt,"data2vec-text"),Abt.forEach(t),Fqo=r(sSe," \u2014 "),hV=n(sSe,"A",{href:!0});var Lbt=s(hV);Tqo=r(Lbt,"Data2VecTextForSequenceClassification"),Lbt.forEach(t),Mqo=r(sSe," (Data2VecText model)"),sSe.forEach(t),Eqo=i(j),Nb=n(j,"LI",{});var lSe=s(Nb);zhe=n(lSe,"STRONG",{});var ybt=s(zhe);Cqo=r(ybt,"deberta"),ybt.forEach(t),wqo=r(lSe," \u2014 "),pV=n(lSe,"A",{href:!0});var xbt=s(pV);Aqo=r(xbt,"DebertaForSequenceClassification"),xbt.forEach(t),Lqo=r(lSe," (DeBERTa model)"),lSe.forEach(t),yqo=i(j),qb=n(j,"LI",{});var iSe=s(qb);Qhe=n(iSe,"STRONG",{});var $bt=s(Qhe);xqo=r($bt,"deberta-v2"),$bt.forEach(t),$qo=r(iSe," \u2014 "),_V=n(iSe,"A",{href:!0});var kbt=s(_V);kqo=r(kbt,"DebertaV2ForSequenceClassification"),kbt.forEach(t),Sqo=r(iSe," (DeBERTa-v2 model)"),iSe.forEach(t),Rqo=i(j),jb=n(j,"LI",{});var dSe=s(jb);Whe=n(dSe,"STRONG",{});var Sbt=s(Whe);Pqo=r(Sbt,"distilbert"),Sbt.forEach(t),Bqo=r(dSe," \u2014 "),uV=n(dSe,"A",{href:!0});var Rbt=s(uV);Iqo=r(Rbt,"DistilBertForSequenceClassification"),Rbt.forEach(t),Nqo=r(dSe," (DistilBERT model)"),dSe.forEach(t),qqo=i(j),Db=n(j,"LI",{});var cSe=s(Db);Hhe=n(cSe,"STRONG",{});var Pbt=s(Hhe);jqo=r(Pbt,"electra"),Pbt.forEach(t),Dqo=r(cSe," \u2014 "),bV=n(cSe,"A",{href:!0});var Bbt=s(bV);Gqo=r(Bbt,"ElectraForSequenceClassification"),Bbt.forEach(t),Oqo=r(cSe," (ELECTRA model)"),cSe.forEach(t),Vqo=i(j),Gb=n(j,"LI",{});var fSe=s(Gb);Uhe=n(fSe,"STRONG",{});var Ibt=s(Uhe);Xqo=r(Ibt,"flaubert"),Ibt.forEach(t),zqo=r(fSe," \u2014 "),vV=n(fSe,"A",{href:!0});var Nbt=s(vV);Qqo=r(Nbt,"FlaubertForSequenceClassification"),Nbt.forEach(t),Wqo=r(fSe," (FlauBERT model)"),fSe.forEach(t),Hqo=i(j),Ob=n(j,"LI",{});var mSe=s(Ob);Jhe=n(mSe,"STRONG",{});var qbt=s(Jhe);Uqo=r(qbt,"fnet"),qbt.forEach(t),Jqo=r(mSe," \u2014 "),FV=n(mSe,"A",{href:!0});var jbt=s(FV);Yqo=r(jbt,"FNetForSequenceClassification"),jbt.forEach(t),Kqo=r(mSe," (FNet model)"),mSe.forEach(t),Zqo=i(j),Vb=n(j,"LI",{});var gSe=s(Vb);Yhe=n(gSe,"STRONG",{});var Dbt=s(Yhe);ejo=r(Dbt,"funnel"),Dbt.forEach(t),ojo=r(gSe," \u2014 "),TV=n(gSe,"A",{href:!0});var Gbt=s(TV);rjo=r(Gbt,"FunnelForSequenceClassification"),Gbt.forEach(t),tjo=r(gSe," (Funnel Transformer model)"),gSe.forEach(t),ajo=i(j),Xb=n(j,"LI",{});var hSe=s(Xb);Khe=n(hSe,"STRONG",{});var Obt=s(Khe);njo=r(Obt,"gpt2"),Obt.forEach(t),sjo=r(hSe," \u2014 "),MV=n(hSe,"A",{href:!0});var Vbt=s(MV);ljo=r(Vbt,"GPT2ForSequenceClassification"),Vbt.forEach(t),ijo=r(hSe," (OpenAI GPT-2 model)"),hSe.forEach(t),djo=i(j),zb=n(j,"LI",{});var pSe=s(zb);Zhe=n(pSe,"STRONG",{});var Xbt=s(Zhe);cjo=r(Xbt,"gpt_neo"),Xbt.forEach(t),fjo=r(pSe," \u2014 "),EV=n(pSe,"A",{href:!0});var zbt=s(EV);mjo=r(zbt,"GPTNeoForSequenceClassification"),zbt.forEach(t),gjo=r(pSe," (GPT Neo model)"),pSe.forEach(t),hjo=i(j),Qb=n(j,"LI",{});var _Se=s(Qb);epe=n(_Se,"STRONG",{});var Qbt=s(epe);pjo=r(Qbt,"gptj"),Qbt.forEach(t),_jo=r(_Se," \u2014 "),CV=n(_Se,"A",{href:!0});var Wbt=s(CV);ujo=r(Wbt,"GPTJForSequenceClassification"),Wbt.forEach(t),bjo=r(_Se," (GPT-J model)"),_Se.forEach(t),vjo=i(j),Wb=n(j,"LI",{});var uSe=s(Wb);ope=n(uSe,"STRONG",{});var Hbt=s(ope);Fjo=r(Hbt,"ibert"),Hbt.forEach(t),Tjo=r(uSe," \u2014 "),wV=n(uSe,"A",{href:!0});var Ubt=s(wV);Mjo=r(Ubt,"IBertForSequenceClassification"),Ubt.forEach(t),Ejo=r(uSe," (I-BERT model)"),uSe.forEach(t),Cjo=i(j),Hb=n(j,"LI",{});var bSe=s(Hb);rpe=n(bSe,"STRONG",{});var Jbt=s(rpe);wjo=r(Jbt,"layoutlm"),Jbt.forEach(t),Ajo=r(bSe," \u2014 "),AV=n(bSe,"A",{href:!0});var Ybt=s(AV);Ljo=r(Ybt,"LayoutLMForSequenceClassification"),Ybt.forEach(t),yjo=r(bSe," (LayoutLM model)"),bSe.forEach(t),xjo=i(j),Ub=n(j,"LI",{});var vSe=s(Ub);tpe=n(vSe,"STRONG",{});var Kbt=s(tpe);$jo=r(Kbt,"layoutlmv2"),Kbt.forEach(t),kjo=r(vSe," \u2014 "),LV=n(vSe,"A",{href:!0});var Zbt=s(LV);Sjo=r(Zbt,"LayoutLMv2ForSequenceClassification"),Zbt.forEach(t),Rjo=r(vSe," (LayoutLMv2 model)"),vSe.forEach(t),Pjo=i(j),Jb=n(j,"LI",{});var FSe=s(Jb);ape=n(FSe,"STRONG",{});var e4t=s(ape);Bjo=r(e4t,"layoutlmv3"),e4t.forEach(t),Ijo=r(FSe," \u2014 "),yV=n(FSe,"A",{href:!0});var o4t=s(yV);Njo=r(o4t,"LayoutLMv3ForSequenceClassification"),o4t.forEach(t),qjo=r(FSe," (LayoutLMv3 model)"),FSe.forEach(t),jjo=i(j),Yb=n(j,"LI",{});var TSe=s(Yb);npe=n(TSe,"STRONG",{});var r4t=s(npe);Djo=r(r4t,"led"),r4t.forEach(t),Gjo=r(TSe," \u2014 "),xV=n(TSe,"A",{href:!0});var t4t=s(xV);Ojo=r(t4t,"LEDForSequenceClassification"),t4t.forEach(t),Vjo=r(TSe," (LED model)"),TSe.forEach(t),Xjo=i(j),Kb=n(j,"LI",{});var MSe=s(Kb);spe=n(MSe,"STRONG",{});var a4t=s(spe);zjo=r(a4t,"longformer"),a4t.forEach(t),Qjo=r(MSe," \u2014 "),$V=n(MSe,"A",{href:!0});var n4t=s($V);Wjo=r(n4t,"LongformerForSequenceClassification"),n4t.forEach(t),Hjo=r(MSe," (Longformer model)"),MSe.forEach(t),Ujo=i(j),Zb=n(j,"LI",{});var ESe=s(Zb);lpe=n(ESe,"STRONG",{});var s4t=s(lpe);Jjo=r(s4t,"mbart"),s4t.forEach(t),Yjo=r(ESe," \u2014 "),kV=n(ESe,"A",{href:!0});var l4t=s(kV);Kjo=r(l4t,"MBartForSequenceClassification"),l4t.forEach(t),Zjo=r(ESe," (mBART model)"),ESe.forEach(t),eDo=i(j),e4=n(j,"LI",{});var CSe=s(e4);ipe=n(CSe,"STRONG",{});var i4t=s(ipe);oDo=r(i4t,"megatron-bert"),i4t.forEach(t),rDo=r(CSe," \u2014 "),SV=n(CSe,"A",{href:!0});var d4t=s(SV);tDo=r(d4t,"MegatronBertForSequenceClassification"),d4t.forEach(t),aDo=r(CSe," (Megatron-BERT model)"),CSe.forEach(t),nDo=i(j),o4=n(j,"LI",{});var wSe=s(o4);dpe=n(wSe,"STRONG",{});var c4t=s(dpe);sDo=r(c4t,"mobilebert"),c4t.forEach(t),lDo=r(wSe," \u2014 "),RV=n(wSe,"A",{href:!0});var f4t=s(RV);iDo=r(f4t,"MobileBertForSequenceClassification"),f4t.forEach(t),dDo=r(wSe," (MobileBERT model)"),wSe.forEach(t),cDo=i(j),r4=n(j,"LI",{});var ASe=s(r4);cpe=n(ASe,"STRONG",{});var m4t=s(cpe);fDo=r(m4t,"mpnet"),m4t.forEach(t),mDo=r(ASe," \u2014 "),PV=n(ASe,"A",{href:!0});var g4t=s(PV);gDo=r(g4t,"MPNetForSequenceClassification"),g4t.forEach(t),hDo=r(ASe," (MPNet model)"),ASe.forEach(t),pDo=i(j),t4=n(j,"LI",{});var LSe=s(t4);fpe=n(LSe,"STRONG",{});var h4t=s(fpe);_Do=r(h4t,"nezha"),h4t.forEach(t),uDo=r(LSe," \u2014 "),BV=n(LSe,"A",{href:!0});var p4t=s(BV);bDo=r(p4t,"NezhaForSequenceClassification"),p4t.forEach(t),vDo=r(LSe," (Nezha model)"),LSe.forEach(t),FDo=i(j),a4=n(j,"LI",{});var ySe=s(a4);mpe=n(ySe,"STRONG",{});var _4t=s(mpe);TDo=r(_4t,"nystromformer"),_4t.forEach(t),MDo=r(ySe," \u2014 "),IV=n(ySe,"A",{href:!0});var u4t=s(IV);EDo=r(u4t,"NystromformerForSequenceClassification"),u4t.forEach(t),CDo=r(ySe," (Nystr\xF6mformer model)"),ySe.forEach(t),wDo=i(j),n4=n(j,"LI",{});var xSe=s(n4);gpe=n(xSe,"STRONG",{});var b4t=s(gpe);ADo=r(b4t,"openai-gpt"),b4t.forEach(t),LDo=r(xSe," \u2014 "),NV=n(xSe,"A",{href:!0});var v4t=s(NV);yDo=r(v4t,"OpenAIGPTForSequenceClassification"),v4t.forEach(t),xDo=r(xSe," (OpenAI GPT model)"),xSe.forEach(t),$Do=i(j),s4=n(j,"LI",{});var $Se=s(s4);hpe=n($Se,"STRONG",{});var F4t=s(hpe);kDo=r(F4t,"perceiver"),F4t.forEach(t),SDo=r($Se," \u2014 "),qV=n($Se,"A",{href:!0});var T4t=s(qV);RDo=r(T4t,"PerceiverForSequenceClassification"),T4t.forEach(t),PDo=r($Se," (Perceiver model)"),$Se.forEach(t),BDo=i(j),l4=n(j,"LI",{});var kSe=s(l4);ppe=n(kSe,"STRONG",{});var M4t=s(ppe);IDo=r(M4t,"plbart"),M4t.forEach(t),NDo=r(kSe," \u2014 "),jV=n(kSe,"A",{href:!0});var E4t=s(jV);qDo=r(E4t,"PLBartForSequenceClassification"),E4t.forEach(t),jDo=r(kSe," (PLBart model)"),kSe.forEach(t),DDo=i(j),i4=n(j,"LI",{});var SSe=s(i4);_pe=n(SSe,"STRONG",{});var C4t=s(_pe);GDo=r(C4t,"qdqbert"),C4t.forEach(t),ODo=r(SSe," \u2014 "),DV=n(SSe,"A",{href:!0});var w4t=s(DV);VDo=r(w4t,"QDQBertForSequenceClassification"),w4t.forEach(t),XDo=r(SSe," (QDQBert model)"),SSe.forEach(t),zDo=i(j),d4=n(j,"LI",{});var RSe=s(d4);upe=n(RSe,"STRONG",{});var A4t=s(upe);QDo=r(A4t,"reformer"),A4t.forEach(t),WDo=r(RSe," \u2014 "),GV=n(RSe,"A",{href:!0});var L4t=s(GV);HDo=r(L4t,"ReformerForSequenceClassification"),L4t.forEach(t),UDo=r(RSe," (Reformer model)"),RSe.forEach(t),JDo=i(j),c4=n(j,"LI",{});var PSe=s(c4);bpe=n(PSe,"STRONG",{});var y4t=s(bpe);YDo=r(y4t,"rembert"),y4t.forEach(t),KDo=r(PSe," \u2014 "),OV=n(PSe,"A",{href:!0});var x4t=s(OV);ZDo=r(x4t,"RemBertForSequenceClassification"),x4t.forEach(t),eGo=r(PSe," (RemBERT model)"),PSe.forEach(t),oGo=i(j),f4=n(j,"LI",{});var BSe=s(f4);vpe=n(BSe,"STRONG",{});var $4t=s(vpe);rGo=r($4t,"roberta"),$4t.forEach(t),tGo=r(BSe," \u2014 "),VV=n(BSe,"A",{href:!0});var k4t=s(VV);aGo=r(k4t,"RobertaForSequenceClassification"),k4t.forEach(t),nGo=r(BSe," (RoBERTa model)"),BSe.forEach(t),sGo=i(j),m4=n(j,"LI",{});var ISe=s(m4);Fpe=n(ISe,"STRONG",{});var S4t=s(Fpe);lGo=r(S4t,"roformer"),S4t.forEach(t),iGo=r(ISe," \u2014 "),XV=n(ISe,"A",{href:!0});var R4t=s(XV);dGo=r(R4t,"RoFormerForSequenceClassification"),R4t.forEach(t),cGo=r(ISe," (RoFormer model)"),ISe.forEach(t),fGo=i(j),g4=n(j,"LI",{});var NSe=s(g4);Tpe=n(NSe,"STRONG",{});var P4t=s(Tpe);mGo=r(P4t,"squeezebert"),P4t.forEach(t),gGo=r(NSe," \u2014 "),zV=n(NSe,"A",{href:!0});var B4t=s(zV);hGo=r(B4t,"SqueezeBertForSequenceClassification"),B4t.forEach(t),pGo=r(NSe," (SqueezeBERT model)"),NSe.forEach(t),_Go=i(j),h4=n(j,"LI",{});var qSe=s(h4);Mpe=n(qSe,"STRONG",{});var I4t=s(Mpe);uGo=r(I4t,"tapas"),I4t.forEach(t),bGo=r(qSe," \u2014 "),QV=n(qSe,"A",{href:!0});var N4t=s(QV);vGo=r(N4t,"TapasForSequenceClassification"),N4t.forEach(t),FGo=r(qSe," (TAPAS model)"),qSe.forEach(t),TGo=i(j),p4=n(j,"LI",{});var jSe=s(p4);Epe=n(jSe,"STRONG",{});var q4t=s(Epe);MGo=r(q4t,"transfo-xl"),q4t.forEach(t),EGo=r(jSe," \u2014 "),WV=n(jSe,"A",{href:!0});var j4t=s(WV);CGo=r(j4t,"TransfoXLForSequenceClassification"),j4t.forEach(t),wGo=r(jSe," (Transformer-XL model)"),jSe.forEach(t),AGo=i(j),_4=n(j,"LI",{});var DSe=s(_4);Cpe=n(DSe,"STRONG",{});var D4t=s(Cpe);LGo=r(D4t,"xlm"),D4t.forEach(t),yGo=r(DSe," \u2014 "),HV=n(DSe,"A",{href:!0});var G4t=s(HV);xGo=r(G4t,"XLMForSequenceClassification"),G4t.forEach(t),$Go=r(DSe," (XLM model)"),DSe.forEach(t),kGo=i(j),u4=n(j,"LI",{});var GSe=s(u4);wpe=n(GSe,"STRONG",{});var O4t=s(wpe);SGo=r(O4t,"xlm-roberta"),O4t.forEach(t),RGo=r(GSe," \u2014 "),UV=n(GSe,"A",{href:!0});var V4t=s(UV);PGo=r(V4t,"XLMRobertaForSequenceClassification"),V4t.forEach(t),BGo=r(GSe," (XLM-RoBERTa model)"),GSe.forEach(t),IGo=i(j),b4=n(j,"LI",{});var OSe=s(b4);Ape=n(OSe,"STRONG",{});var X4t=s(Ape);NGo=r(X4t,"xlm-roberta-xl"),X4t.forEach(t),qGo=r(OSe," \u2014 "),JV=n(OSe,"A",{href:!0});var z4t=s(JV);jGo=r(z4t,"XLMRobertaXLForSequenceClassification"),z4t.forEach(t),DGo=r(OSe," (XLM-RoBERTa-XL model)"),OSe.forEach(t),GGo=i(j),v4=n(j,"LI",{});var VSe=s(v4);Lpe=n(VSe,"STRONG",{});var Q4t=s(Lpe);OGo=r(Q4t,"xlnet"),Q4t.forEach(t),VGo=r(VSe," \u2014 "),YV=n(VSe,"A",{href:!0});var W4t=s(YV);XGo=r(W4t,"XLNetForSequenceClassification"),W4t.forEach(t),zGo=r(VSe," (XLNet model)"),VSe.forEach(t),QGo=i(j),F4=n(j,"LI",{});var XSe=s(F4);ype=n(XSe,"STRONG",{});var H4t=s(ype);WGo=r(H4t,"yoso"),H4t.forEach(t),HGo=r(XSe," \u2014 "),KV=n(XSe,"A",{href:!0});var U4t=s(KV);UGo=r(U4t,"YosoForSequenceClassification"),U4t.forEach(t),JGo=r(XSe," (YOSO model)"),XSe.forEach(t),j.forEach(t),YGo=i(da),T4=n(da,"P",{});var zSe=s(T4);KGo=r(zSe,"The model is set in evaluation mode by default using "),xpe=n(zSe,"CODE",{});var J4t=s(xpe);ZGo=r(J4t,"model.eval()"),J4t.forEach(t),eOo=r(zSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$pe=n(zSe,"CODE",{});var Y4t=s($pe);oOo=r(Y4t,"model.train()"),Y4t.forEach(t),zSe.forEach(t),rOo=i(da),T(M4.$$.fragment,da),da.forEach(t),tl.forEach(t),BOe=i(f),ed=n(f,"H2",{class:!0});var GXe=s(ed);E4=n(GXe,"A",{id:!0,class:!0,href:!0});var K4t=s(E4);kpe=n(K4t,"SPAN",{});var Z4t=s(kpe);T(Ny.$$.fragment,Z4t),Z4t.forEach(t),K4t.forEach(t),tOo=i(GXe),Spe=n(GXe,"SPAN",{});var e5t=s(Spe);aOo=r(e5t,"AutoModelForMultipleChoice"),e5t.forEach(t),GXe.forEach(t),IOe=i(f),Bo=n(f,"DIV",{class:!0});var al=s(Bo);T(qy.$$.fragment,al),nOo=i(al),od=n(al,"P",{});var zoe=s(od);sOo=r(zoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),ZV=n(zoe,"A",{href:!0});var o5t=s(ZV);lOo=r(o5t,"from_pretrained()"),o5t.forEach(t),iOo=r(zoe," class method or the "),eX=n(zoe,"A",{href:!0});var r5t=s(eX);dOo=r(r5t,"from_config()"),r5t.forEach(t),cOo=r(zoe,` class
method.`),zoe.forEach(t),fOo=i(al),jy=n(al,"P",{});var OXe=s(jy);mOo=r(OXe,"This class cannot be instantiated directly using "),Rpe=n(OXe,"CODE",{});var t5t=s(Rpe);gOo=r(t5t,"__init__()"),t5t.forEach(t),hOo=r(OXe," (throws an error)."),OXe.forEach(t),pOo=i(al),ft=n(al,"DIV",{class:!0});var UA=s(ft);T(Dy.$$.fragment,UA),_Oo=i(UA),Ppe=n(UA,"P",{});var a5t=s(Ppe);uOo=r(a5t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),a5t.forEach(t),bOo=i(UA),rd=n(UA,"P",{});var Qoe=s(rd);vOo=r(Qoe,`Note:
Loading a model from its configuration file does `),Bpe=n(Qoe,"STRONG",{});var n5t=s(Bpe);FOo=r(n5t,"not"),n5t.forEach(t),TOo=r(Qoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),oX=n(Qoe,"A",{href:!0});var s5t=s(oX);MOo=r(s5t,"from_pretrained()"),s5t.forEach(t),EOo=r(Qoe," to load the model weights."),Qoe.forEach(t),COo=i(UA),T(C4.$$.fragment,UA),UA.forEach(t),wOo=i(al),ro=n(al,"DIV",{class:!0});var ca=s(ro);T(Gy.$$.fragment,ca),AOo=i(ca),Ipe=n(ca,"P",{});var l5t=s(Ipe);LOo=r(l5t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),l5t.forEach(t),yOo=i(ca),ja=n(ca,"P",{});var JA=s(ja);xOo=r(JA,"The model class to instantiate is selected based on the "),Npe=n(JA,"CODE",{});var i5t=s(Npe);$Oo=r(i5t,"model_type"),i5t.forEach(t),kOo=r(JA,` property of the config object (either
passed as an argument or loaded from `),qpe=n(JA,"CODE",{});var d5t=s(qpe);SOo=r(d5t,"pretrained_model_name_or_path"),d5t.forEach(t),ROo=r(JA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jpe=n(JA,"CODE",{});var c5t=s(jpe);POo=r(c5t,"pretrained_model_name_or_path"),c5t.forEach(t),BOo=r(JA,":"),JA.forEach(t),IOo=i(ca),Z=n(ca,"UL",{});var ee=s(Z);w4=n(ee,"LI",{});var QSe=s(w4);Dpe=n(QSe,"STRONG",{});var f5t=s(Dpe);NOo=r(f5t,"albert"),f5t.forEach(t),qOo=r(QSe," \u2014 "),rX=n(QSe,"A",{href:!0});var m5t=s(rX);jOo=r(m5t,"AlbertForMultipleChoice"),m5t.forEach(t),DOo=r(QSe," (ALBERT model)"),QSe.forEach(t),GOo=i(ee),A4=n(ee,"LI",{});var WSe=s(A4);Gpe=n(WSe,"STRONG",{});var g5t=s(Gpe);OOo=r(g5t,"bert"),g5t.forEach(t),VOo=r(WSe," \u2014 "),tX=n(WSe,"A",{href:!0});var h5t=s(tX);XOo=r(h5t,"BertForMultipleChoice"),h5t.forEach(t),zOo=r(WSe," (BERT model)"),WSe.forEach(t),QOo=i(ee),L4=n(ee,"LI",{});var HSe=s(L4);Ope=n(HSe,"STRONG",{});var p5t=s(Ope);WOo=r(p5t,"big_bird"),p5t.forEach(t),HOo=r(HSe," \u2014 "),aX=n(HSe,"A",{href:!0});var _5t=s(aX);UOo=r(_5t,"BigBirdForMultipleChoice"),_5t.forEach(t),JOo=r(HSe," (BigBird model)"),HSe.forEach(t),YOo=i(ee),y4=n(ee,"LI",{});var USe=s(y4);Vpe=n(USe,"STRONG",{});var u5t=s(Vpe);KOo=r(u5t,"camembert"),u5t.forEach(t),ZOo=r(USe," \u2014 "),nX=n(USe,"A",{href:!0});var b5t=s(nX);eVo=r(b5t,"CamembertForMultipleChoice"),b5t.forEach(t),oVo=r(USe," (CamemBERT model)"),USe.forEach(t),rVo=i(ee),x4=n(ee,"LI",{});var JSe=s(x4);Xpe=n(JSe,"STRONG",{});var v5t=s(Xpe);tVo=r(v5t,"canine"),v5t.forEach(t),aVo=r(JSe," \u2014 "),sX=n(JSe,"A",{href:!0});var F5t=s(sX);nVo=r(F5t,"CanineForMultipleChoice"),F5t.forEach(t),sVo=r(JSe," (CANINE model)"),JSe.forEach(t),lVo=i(ee),$4=n(ee,"LI",{});var YSe=s($4);zpe=n(YSe,"STRONG",{});var T5t=s(zpe);iVo=r(T5t,"convbert"),T5t.forEach(t),dVo=r(YSe," \u2014 "),lX=n(YSe,"A",{href:!0});var M5t=s(lX);cVo=r(M5t,"ConvBertForMultipleChoice"),M5t.forEach(t),fVo=r(YSe," (ConvBERT model)"),YSe.forEach(t),mVo=i(ee),k4=n(ee,"LI",{});var KSe=s(k4);Qpe=n(KSe,"STRONG",{});var E5t=s(Qpe);gVo=r(E5t,"data2vec-text"),E5t.forEach(t),hVo=r(KSe," \u2014 "),iX=n(KSe,"A",{href:!0});var C5t=s(iX);pVo=r(C5t,"Data2VecTextForMultipleChoice"),C5t.forEach(t),_Vo=r(KSe," (Data2VecText model)"),KSe.forEach(t),uVo=i(ee),S4=n(ee,"LI",{});var ZSe=s(S4);Wpe=n(ZSe,"STRONG",{});var w5t=s(Wpe);bVo=r(w5t,"deberta-v2"),w5t.forEach(t),vVo=r(ZSe," \u2014 "),dX=n(ZSe,"A",{href:!0});var A5t=s(dX);FVo=r(A5t,"DebertaV2ForMultipleChoice"),A5t.forEach(t),TVo=r(ZSe," (DeBERTa-v2 model)"),ZSe.forEach(t),MVo=i(ee),R4=n(ee,"LI",{});var eRe=s(R4);Hpe=n(eRe,"STRONG",{});var L5t=s(Hpe);EVo=r(L5t,"distilbert"),L5t.forEach(t),CVo=r(eRe," \u2014 "),cX=n(eRe,"A",{href:!0});var y5t=s(cX);wVo=r(y5t,"DistilBertForMultipleChoice"),y5t.forEach(t),AVo=r(eRe," (DistilBERT model)"),eRe.forEach(t),LVo=i(ee),P4=n(ee,"LI",{});var oRe=s(P4);Upe=n(oRe,"STRONG",{});var x5t=s(Upe);yVo=r(x5t,"electra"),x5t.forEach(t),xVo=r(oRe," \u2014 "),fX=n(oRe,"A",{href:!0});var $5t=s(fX);$Vo=r($5t,"ElectraForMultipleChoice"),$5t.forEach(t),kVo=r(oRe," (ELECTRA model)"),oRe.forEach(t),SVo=i(ee),B4=n(ee,"LI",{});var rRe=s(B4);Jpe=n(rRe,"STRONG",{});var k5t=s(Jpe);RVo=r(k5t,"flaubert"),k5t.forEach(t),PVo=r(rRe," \u2014 "),mX=n(rRe,"A",{href:!0});var S5t=s(mX);BVo=r(S5t,"FlaubertForMultipleChoice"),S5t.forEach(t),IVo=r(rRe," (FlauBERT model)"),rRe.forEach(t),NVo=i(ee),I4=n(ee,"LI",{});var tRe=s(I4);Ype=n(tRe,"STRONG",{});var R5t=s(Ype);qVo=r(R5t,"fnet"),R5t.forEach(t),jVo=r(tRe," \u2014 "),gX=n(tRe,"A",{href:!0});var P5t=s(gX);DVo=r(P5t,"FNetForMultipleChoice"),P5t.forEach(t),GVo=r(tRe," (FNet model)"),tRe.forEach(t),OVo=i(ee),N4=n(ee,"LI",{});var aRe=s(N4);Kpe=n(aRe,"STRONG",{});var B5t=s(Kpe);VVo=r(B5t,"funnel"),B5t.forEach(t),XVo=r(aRe," \u2014 "),hX=n(aRe,"A",{href:!0});var I5t=s(hX);zVo=r(I5t,"FunnelForMultipleChoice"),I5t.forEach(t),QVo=r(aRe," (Funnel Transformer model)"),aRe.forEach(t),WVo=i(ee),q4=n(ee,"LI",{});var nRe=s(q4);Zpe=n(nRe,"STRONG",{});var N5t=s(Zpe);HVo=r(N5t,"ibert"),N5t.forEach(t),UVo=r(nRe," \u2014 "),pX=n(nRe,"A",{href:!0});var q5t=s(pX);JVo=r(q5t,"IBertForMultipleChoice"),q5t.forEach(t),YVo=r(nRe," (I-BERT model)"),nRe.forEach(t),KVo=i(ee),j4=n(ee,"LI",{});var sRe=s(j4);e_e=n(sRe,"STRONG",{});var j5t=s(e_e);ZVo=r(j5t,"longformer"),j5t.forEach(t),eXo=r(sRe," \u2014 "),_X=n(sRe,"A",{href:!0});var D5t=s(_X);oXo=r(D5t,"LongformerForMultipleChoice"),D5t.forEach(t),rXo=r(sRe," (Longformer model)"),sRe.forEach(t),tXo=i(ee),D4=n(ee,"LI",{});var lRe=s(D4);o_e=n(lRe,"STRONG",{});var G5t=s(o_e);aXo=r(G5t,"megatron-bert"),G5t.forEach(t),nXo=r(lRe," \u2014 "),uX=n(lRe,"A",{href:!0});var O5t=s(uX);sXo=r(O5t,"MegatronBertForMultipleChoice"),O5t.forEach(t),lXo=r(lRe," (Megatron-BERT model)"),lRe.forEach(t),iXo=i(ee),G4=n(ee,"LI",{});var iRe=s(G4);r_e=n(iRe,"STRONG",{});var V5t=s(r_e);dXo=r(V5t,"mobilebert"),V5t.forEach(t),cXo=r(iRe," \u2014 "),bX=n(iRe,"A",{href:!0});var X5t=s(bX);fXo=r(X5t,"MobileBertForMultipleChoice"),X5t.forEach(t),mXo=r(iRe," (MobileBERT model)"),iRe.forEach(t),gXo=i(ee),O4=n(ee,"LI",{});var dRe=s(O4);t_e=n(dRe,"STRONG",{});var z5t=s(t_e);hXo=r(z5t,"mpnet"),z5t.forEach(t),pXo=r(dRe," \u2014 "),vX=n(dRe,"A",{href:!0});var Q5t=s(vX);_Xo=r(Q5t,"MPNetForMultipleChoice"),Q5t.forEach(t),uXo=r(dRe," (MPNet model)"),dRe.forEach(t),bXo=i(ee),V4=n(ee,"LI",{});var cRe=s(V4);a_e=n(cRe,"STRONG",{});var W5t=s(a_e);vXo=r(W5t,"nezha"),W5t.forEach(t),FXo=r(cRe," \u2014 "),FX=n(cRe,"A",{href:!0});var H5t=s(FX);TXo=r(H5t,"NezhaForMultipleChoice"),H5t.forEach(t),MXo=r(cRe," (Nezha model)"),cRe.forEach(t),EXo=i(ee),X4=n(ee,"LI",{});var fRe=s(X4);n_e=n(fRe,"STRONG",{});var U5t=s(n_e);CXo=r(U5t,"nystromformer"),U5t.forEach(t),wXo=r(fRe," \u2014 "),TX=n(fRe,"A",{href:!0});var J5t=s(TX);AXo=r(J5t,"NystromformerForMultipleChoice"),J5t.forEach(t),LXo=r(fRe," (Nystr\xF6mformer model)"),fRe.forEach(t),yXo=i(ee),z4=n(ee,"LI",{});var mRe=s(z4);s_e=n(mRe,"STRONG",{});var Y5t=s(s_e);xXo=r(Y5t,"qdqbert"),Y5t.forEach(t),$Xo=r(mRe," \u2014 "),MX=n(mRe,"A",{href:!0});var K5t=s(MX);kXo=r(K5t,"QDQBertForMultipleChoice"),K5t.forEach(t),SXo=r(mRe," (QDQBert model)"),mRe.forEach(t),RXo=i(ee),Q4=n(ee,"LI",{});var gRe=s(Q4);l_e=n(gRe,"STRONG",{});var Z5t=s(l_e);PXo=r(Z5t,"rembert"),Z5t.forEach(t),BXo=r(gRe," \u2014 "),EX=n(gRe,"A",{href:!0});var e3t=s(EX);IXo=r(e3t,"RemBertForMultipleChoice"),e3t.forEach(t),NXo=r(gRe," (RemBERT model)"),gRe.forEach(t),qXo=i(ee),W4=n(ee,"LI",{});var hRe=s(W4);i_e=n(hRe,"STRONG",{});var o3t=s(i_e);jXo=r(o3t,"roberta"),o3t.forEach(t),DXo=r(hRe," \u2014 "),CX=n(hRe,"A",{href:!0});var r3t=s(CX);GXo=r(r3t,"RobertaForMultipleChoice"),r3t.forEach(t),OXo=r(hRe," (RoBERTa model)"),hRe.forEach(t),VXo=i(ee),H4=n(ee,"LI",{});var pRe=s(H4);d_e=n(pRe,"STRONG",{});var t3t=s(d_e);XXo=r(t3t,"roformer"),t3t.forEach(t),zXo=r(pRe," \u2014 "),wX=n(pRe,"A",{href:!0});var a3t=s(wX);QXo=r(a3t,"RoFormerForMultipleChoice"),a3t.forEach(t),WXo=r(pRe," (RoFormer model)"),pRe.forEach(t),HXo=i(ee),U4=n(ee,"LI",{});var _Re=s(U4);c_e=n(_Re,"STRONG",{});var n3t=s(c_e);UXo=r(n3t,"squeezebert"),n3t.forEach(t),JXo=r(_Re," \u2014 "),AX=n(_Re,"A",{href:!0});var s3t=s(AX);YXo=r(s3t,"SqueezeBertForMultipleChoice"),s3t.forEach(t),KXo=r(_Re," (SqueezeBERT model)"),_Re.forEach(t),ZXo=i(ee),J4=n(ee,"LI",{});var uRe=s(J4);f_e=n(uRe,"STRONG",{});var l3t=s(f_e);ezo=r(l3t,"xlm"),l3t.forEach(t),ozo=r(uRe," \u2014 "),LX=n(uRe,"A",{href:!0});var i3t=s(LX);rzo=r(i3t,"XLMForMultipleChoice"),i3t.forEach(t),tzo=r(uRe," (XLM model)"),uRe.forEach(t),azo=i(ee),Y4=n(ee,"LI",{});var bRe=s(Y4);m_e=n(bRe,"STRONG",{});var d3t=s(m_e);nzo=r(d3t,"xlm-roberta"),d3t.forEach(t),szo=r(bRe," \u2014 "),yX=n(bRe,"A",{href:!0});var c3t=s(yX);lzo=r(c3t,"XLMRobertaForMultipleChoice"),c3t.forEach(t),izo=r(bRe," (XLM-RoBERTa model)"),bRe.forEach(t),dzo=i(ee),K4=n(ee,"LI",{});var vRe=s(K4);g_e=n(vRe,"STRONG",{});var f3t=s(g_e);czo=r(f3t,"xlm-roberta-xl"),f3t.forEach(t),fzo=r(vRe," \u2014 "),xX=n(vRe,"A",{href:!0});var m3t=s(xX);mzo=r(m3t,"XLMRobertaXLForMultipleChoice"),m3t.forEach(t),gzo=r(vRe," (XLM-RoBERTa-XL model)"),vRe.forEach(t),hzo=i(ee),Z4=n(ee,"LI",{});var FRe=s(Z4);h_e=n(FRe,"STRONG",{});var g3t=s(h_e);pzo=r(g3t,"xlnet"),g3t.forEach(t),_zo=r(FRe," \u2014 "),$X=n(FRe,"A",{href:!0});var h3t=s($X);uzo=r(h3t,"XLNetForMultipleChoice"),h3t.forEach(t),bzo=r(FRe," (XLNet model)"),FRe.forEach(t),vzo=i(ee),e5=n(ee,"LI",{});var TRe=s(e5);p_e=n(TRe,"STRONG",{});var p3t=s(p_e);Fzo=r(p3t,"yoso"),p3t.forEach(t),Tzo=r(TRe," \u2014 "),kX=n(TRe,"A",{href:!0});var _3t=s(kX);Mzo=r(_3t,"YosoForMultipleChoice"),_3t.forEach(t),Ezo=r(TRe," (YOSO model)"),TRe.forEach(t),ee.forEach(t),Czo=i(ca),o5=n(ca,"P",{});var MRe=s(o5);wzo=r(MRe,"The model is set in evaluation mode by default using "),__e=n(MRe,"CODE",{});var u3t=s(__e);Azo=r(u3t,"model.eval()"),u3t.forEach(t),Lzo=r(MRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),u_e=n(MRe,"CODE",{});var b3t=s(u_e);yzo=r(b3t,"model.train()"),b3t.forEach(t),MRe.forEach(t),xzo=i(ca),T(r5.$$.fragment,ca),ca.forEach(t),al.forEach(t),NOe=i(f),td=n(f,"H2",{class:!0});var VXe=s(td);t5=n(VXe,"A",{id:!0,class:!0,href:!0});var v3t=s(t5);b_e=n(v3t,"SPAN",{});var F3t=s(b_e);T(Oy.$$.fragment,F3t),F3t.forEach(t),v3t.forEach(t),$zo=i(VXe),v_e=n(VXe,"SPAN",{});var T3t=s(v_e);kzo=r(T3t,"AutoModelForNextSentencePrediction"),T3t.forEach(t),VXe.forEach(t),qOe=i(f),Io=n(f,"DIV",{class:!0});var nl=s(Io);T(Vy.$$.fragment,nl),Szo=i(nl),ad=n(nl,"P",{});var Woe=s(ad);Rzo=r(Woe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),SX=n(Woe,"A",{href:!0});var M3t=s(SX);Pzo=r(M3t,"from_pretrained()"),M3t.forEach(t),Bzo=r(Woe," class method or the "),RX=n(Woe,"A",{href:!0});var E3t=s(RX);Izo=r(E3t,"from_config()"),E3t.forEach(t),Nzo=r(Woe,` class
method.`),Woe.forEach(t),qzo=i(nl),Xy=n(nl,"P",{});var XXe=s(Xy);jzo=r(XXe,"This class cannot be instantiated directly using "),F_e=n(XXe,"CODE",{});var C3t=s(F_e);Dzo=r(C3t,"__init__()"),C3t.forEach(t),Gzo=r(XXe," (throws an error)."),XXe.forEach(t),Ozo=i(nl),mt=n(nl,"DIV",{class:!0});var YA=s(mt);T(zy.$$.fragment,YA),Vzo=i(YA),T_e=n(YA,"P",{});var w3t=s(T_e);Xzo=r(w3t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),w3t.forEach(t),zzo=i(YA),nd=n(YA,"P",{});var Hoe=s(nd);Qzo=r(Hoe,`Note:
Loading a model from its configuration file does `),M_e=n(Hoe,"STRONG",{});var A3t=s(M_e);Wzo=r(A3t,"not"),A3t.forEach(t),Hzo=r(Hoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),PX=n(Hoe,"A",{href:!0});var L3t=s(PX);Uzo=r(L3t,"from_pretrained()"),L3t.forEach(t),Jzo=r(Hoe," to load the model weights."),Hoe.forEach(t),Yzo=i(YA),T(a5.$$.fragment,YA),YA.forEach(t),Kzo=i(nl),to=n(nl,"DIV",{class:!0});var fa=s(to);T(Qy.$$.fragment,fa),Zzo=i(fa),E_e=n(fa,"P",{});var y3t=s(E_e);eQo=r(y3t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),y3t.forEach(t),oQo=i(fa),Da=n(fa,"P",{});var KA=s(Da);rQo=r(KA,"The model class to instantiate is selected based on the "),C_e=n(KA,"CODE",{});var x3t=s(C_e);tQo=r(x3t,"model_type"),x3t.forEach(t),aQo=r(KA,` property of the config object (either
passed as an argument or loaded from `),w_e=n(KA,"CODE",{});var $3t=s(w_e);nQo=r($3t,"pretrained_model_name_or_path"),$3t.forEach(t),sQo=r(KA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A_e=n(KA,"CODE",{});var k3t=s(A_e);lQo=r(k3t,"pretrained_model_name_or_path"),k3t.forEach(t),iQo=r(KA,":"),KA.forEach(t),dQo=i(fa),No=n(fa,"UL",{});var ma=s(No);n5=n(ma,"LI",{});var ERe=s(n5);L_e=n(ERe,"STRONG",{});var S3t=s(L_e);cQo=r(S3t,"bert"),S3t.forEach(t),fQo=r(ERe," \u2014 "),BX=n(ERe,"A",{href:!0});var R3t=s(BX);mQo=r(R3t,"BertForNextSentencePrediction"),R3t.forEach(t),gQo=r(ERe," (BERT model)"),ERe.forEach(t),hQo=i(ma),s5=n(ma,"LI",{});var CRe=s(s5);y_e=n(CRe,"STRONG",{});var P3t=s(y_e);pQo=r(P3t,"fnet"),P3t.forEach(t),_Qo=r(CRe," \u2014 "),IX=n(CRe,"A",{href:!0});var B3t=s(IX);uQo=r(B3t,"FNetForNextSentencePrediction"),B3t.forEach(t),bQo=r(CRe," (FNet model)"),CRe.forEach(t),vQo=i(ma),l5=n(ma,"LI",{});var wRe=s(l5);x_e=n(wRe,"STRONG",{});var I3t=s(x_e);FQo=r(I3t,"megatron-bert"),I3t.forEach(t),TQo=r(wRe," \u2014 "),NX=n(wRe,"A",{href:!0});var N3t=s(NX);MQo=r(N3t,"MegatronBertForNextSentencePrediction"),N3t.forEach(t),EQo=r(wRe," (Megatron-BERT model)"),wRe.forEach(t),CQo=i(ma),i5=n(ma,"LI",{});var ARe=s(i5);$_e=n(ARe,"STRONG",{});var q3t=s($_e);wQo=r(q3t,"mobilebert"),q3t.forEach(t),AQo=r(ARe," \u2014 "),qX=n(ARe,"A",{href:!0});var j3t=s(qX);LQo=r(j3t,"MobileBertForNextSentencePrediction"),j3t.forEach(t),yQo=r(ARe," (MobileBERT model)"),ARe.forEach(t),xQo=i(ma),d5=n(ma,"LI",{});var LRe=s(d5);k_e=n(LRe,"STRONG",{});var D3t=s(k_e);$Qo=r(D3t,"nezha"),D3t.forEach(t),kQo=r(LRe," \u2014 "),jX=n(LRe,"A",{href:!0});var G3t=s(jX);SQo=r(G3t,"NezhaForNextSentencePrediction"),G3t.forEach(t),RQo=r(LRe," (Nezha model)"),LRe.forEach(t),PQo=i(ma),c5=n(ma,"LI",{});var yRe=s(c5);S_e=n(yRe,"STRONG",{});var O3t=s(S_e);BQo=r(O3t,"qdqbert"),O3t.forEach(t),IQo=r(yRe," \u2014 "),DX=n(yRe,"A",{href:!0});var V3t=s(DX);NQo=r(V3t,"QDQBertForNextSentencePrediction"),V3t.forEach(t),qQo=r(yRe," (QDQBert model)"),yRe.forEach(t),ma.forEach(t),jQo=i(fa),f5=n(fa,"P",{});var xRe=s(f5);DQo=r(xRe,"The model is set in evaluation mode by default using "),R_e=n(xRe,"CODE",{});var X3t=s(R_e);GQo=r(X3t,"model.eval()"),X3t.forEach(t),OQo=r(xRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),P_e=n(xRe,"CODE",{});var z3t=s(P_e);VQo=r(z3t,"model.train()"),z3t.forEach(t),xRe.forEach(t),XQo=i(fa),T(m5.$$.fragment,fa),fa.forEach(t),nl.forEach(t),jOe=i(f),sd=n(f,"H2",{class:!0});var zXe=s(sd);g5=n(zXe,"A",{id:!0,class:!0,href:!0});var Q3t=s(g5);B_e=n(Q3t,"SPAN",{});var W3t=s(B_e);T(Wy.$$.fragment,W3t),W3t.forEach(t),Q3t.forEach(t),zQo=i(zXe),I_e=n(zXe,"SPAN",{});var H3t=s(I_e);QQo=r(H3t,"AutoModelForTokenClassification"),H3t.forEach(t),zXe.forEach(t),DOe=i(f),qo=n(f,"DIV",{class:!0});var sl=s(qo);T(Hy.$$.fragment,sl),WQo=i(sl),ld=n(sl,"P",{});var Uoe=s(ld);HQo=r(Uoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),GX=n(Uoe,"A",{href:!0});var U3t=s(GX);UQo=r(U3t,"from_pretrained()"),U3t.forEach(t),JQo=r(Uoe," class method or the "),OX=n(Uoe,"A",{href:!0});var J3t=s(OX);YQo=r(J3t,"from_config()"),J3t.forEach(t),KQo=r(Uoe,` class
method.`),Uoe.forEach(t),ZQo=i(sl),Uy=n(sl,"P",{});var QXe=s(Uy);eWo=r(QXe,"This class cannot be instantiated directly using "),N_e=n(QXe,"CODE",{});var Y3t=s(N_e);oWo=r(Y3t,"__init__()"),Y3t.forEach(t),rWo=r(QXe," (throws an error)."),QXe.forEach(t),tWo=i(sl),gt=n(sl,"DIV",{class:!0});var ZA=s(gt);T(Jy.$$.fragment,ZA),aWo=i(ZA),q_e=n(ZA,"P",{});var K3t=s(q_e);nWo=r(K3t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),K3t.forEach(t),sWo=i(ZA),id=n(ZA,"P",{});var Joe=s(id);lWo=r(Joe,`Note:
Loading a model from its configuration file does `),j_e=n(Joe,"STRONG",{});var Z3t=s(j_e);iWo=r(Z3t,"not"),Z3t.forEach(t),dWo=r(Joe,` load the model weights. It only affects the
model\u2019s configuration. Use `),VX=n(Joe,"A",{href:!0});var evt=s(VX);cWo=r(evt,"from_pretrained()"),evt.forEach(t),fWo=r(Joe," to load the model weights."),Joe.forEach(t),mWo=i(ZA),T(h5.$$.fragment,ZA),ZA.forEach(t),gWo=i(sl),ao=n(sl,"DIV",{class:!0});var ga=s(ao);T(Yy.$$.fragment,ga),hWo=i(ga),D_e=n(ga,"P",{});var ovt=s(D_e);pWo=r(ovt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),ovt.forEach(t),_Wo=i(ga),Ga=n(ga,"P",{});var eL=s(Ga);uWo=r(eL,"The model class to instantiate is selected based on the "),G_e=n(eL,"CODE",{});var rvt=s(G_e);bWo=r(rvt,"model_type"),rvt.forEach(t),vWo=r(eL,` property of the config object (either
passed as an argument or loaded from `),O_e=n(eL,"CODE",{});var tvt=s(O_e);FWo=r(tvt,"pretrained_model_name_or_path"),tvt.forEach(t),TWo=r(eL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V_e=n(eL,"CODE",{});var avt=s(V_e);MWo=r(avt,"pretrained_model_name_or_path"),avt.forEach(t),EWo=r(eL,":"),eL.forEach(t),CWo=i(ga),H=n(ga,"UL",{});var J=s(H);p5=n(J,"LI",{});var $Re=s(p5);X_e=n($Re,"STRONG",{});var nvt=s(X_e);wWo=r(nvt,"albert"),nvt.forEach(t),AWo=r($Re," \u2014 "),XX=n($Re,"A",{href:!0});var svt=s(XX);LWo=r(svt,"AlbertForTokenClassification"),svt.forEach(t),yWo=r($Re," (ALBERT model)"),$Re.forEach(t),xWo=i(J),_5=n(J,"LI",{});var kRe=s(_5);z_e=n(kRe,"STRONG",{});var lvt=s(z_e);$Wo=r(lvt,"bert"),lvt.forEach(t),kWo=r(kRe," \u2014 "),zX=n(kRe,"A",{href:!0});var ivt=s(zX);SWo=r(ivt,"BertForTokenClassification"),ivt.forEach(t),RWo=r(kRe," (BERT model)"),kRe.forEach(t),PWo=i(J),u5=n(J,"LI",{});var SRe=s(u5);Q_e=n(SRe,"STRONG",{});var dvt=s(Q_e);BWo=r(dvt,"big_bird"),dvt.forEach(t),IWo=r(SRe," \u2014 "),QX=n(SRe,"A",{href:!0});var cvt=s(QX);NWo=r(cvt,"BigBirdForTokenClassification"),cvt.forEach(t),qWo=r(SRe," (BigBird model)"),SRe.forEach(t),jWo=i(J),b5=n(J,"LI",{});var RRe=s(b5);W_e=n(RRe,"STRONG",{});var fvt=s(W_e);DWo=r(fvt,"bloom"),fvt.forEach(t),GWo=r(RRe," \u2014 "),WX=n(RRe,"A",{href:!0});var mvt=s(WX);OWo=r(mvt,"BloomForTokenClassification"),mvt.forEach(t),VWo=r(RRe," (BLOOM model)"),RRe.forEach(t),XWo=i(J),v5=n(J,"LI",{});var PRe=s(v5);H_e=n(PRe,"STRONG",{});var gvt=s(H_e);zWo=r(gvt,"camembert"),gvt.forEach(t),QWo=r(PRe," \u2014 "),HX=n(PRe,"A",{href:!0});var hvt=s(HX);WWo=r(hvt,"CamembertForTokenClassification"),hvt.forEach(t),HWo=r(PRe," (CamemBERT model)"),PRe.forEach(t),UWo=i(J),F5=n(J,"LI",{});var BRe=s(F5);U_e=n(BRe,"STRONG",{});var pvt=s(U_e);JWo=r(pvt,"canine"),pvt.forEach(t),YWo=r(BRe," \u2014 "),UX=n(BRe,"A",{href:!0});var _vt=s(UX);KWo=r(_vt,"CanineForTokenClassification"),_vt.forEach(t),ZWo=r(BRe," (CANINE model)"),BRe.forEach(t),eHo=i(J),T5=n(J,"LI",{});var IRe=s(T5);J_e=n(IRe,"STRONG",{});var uvt=s(J_e);oHo=r(uvt,"convbert"),uvt.forEach(t),rHo=r(IRe," \u2014 "),JX=n(IRe,"A",{href:!0});var bvt=s(JX);tHo=r(bvt,"ConvBertForTokenClassification"),bvt.forEach(t),aHo=r(IRe," (ConvBERT model)"),IRe.forEach(t),nHo=i(J),M5=n(J,"LI",{});var NRe=s(M5);Y_e=n(NRe,"STRONG",{});var vvt=s(Y_e);sHo=r(vvt,"data2vec-text"),vvt.forEach(t),lHo=r(NRe," \u2014 "),YX=n(NRe,"A",{href:!0});var Fvt=s(YX);iHo=r(Fvt,"Data2VecTextForTokenClassification"),Fvt.forEach(t),dHo=r(NRe," (Data2VecText model)"),NRe.forEach(t),cHo=i(J),E5=n(J,"LI",{});var qRe=s(E5);K_e=n(qRe,"STRONG",{});var Tvt=s(K_e);fHo=r(Tvt,"deberta"),Tvt.forEach(t),mHo=r(qRe," \u2014 "),KX=n(qRe,"A",{href:!0});var Mvt=s(KX);gHo=r(Mvt,"DebertaForTokenClassification"),Mvt.forEach(t),hHo=r(qRe," (DeBERTa model)"),qRe.forEach(t),pHo=i(J),C5=n(J,"LI",{});var jRe=s(C5);Z_e=n(jRe,"STRONG",{});var Evt=s(Z_e);_Ho=r(Evt,"deberta-v2"),Evt.forEach(t),uHo=r(jRe," \u2014 "),ZX=n(jRe,"A",{href:!0});var Cvt=s(ZX);bHo=r(Cvt,"DebertaV2ForTokenClassification"),Cvt.forEach(t),vHo=r(jRe," (DeBERTa-v2 model)"),jRe.forEach(t),FHo=i(J),w5=n(J,"LI",{});var DRe=s(w5);eue=n(DRe,"STRONG",{});var wvt=s(eue);THo=r(wvt,"distilbert"),wvt.forEach(t),MHo=r(DRe," \u2014 "),ez=n(DRe,"A",{href:!0});var Avt=s(ez);EHo=r(Avt,"DistilBertForTokenClassification"),Avt.forEach(t),CHo=r(DRe," (DistilBERT model)"),DRe.forEach(t),wHo=i(J),A5=n(J,"LI",{});var GRe=s(A5);oue=n(GRe,"STRONG",{});var Lvt=s(oue);AHo=r(Lvt,"electra"),Lvt.forEach(t),LHo=r(GRe," \u2014 "),oz=n(GRe,"A",{href:!0});var yvt=s(oz);yHo=r(yvt,"ElectraForTokenClassification"),yvt.forEach(t),xHo=r(GRe," (ELECTRA model)"),GRe.forEach(t),$Ho=i(J),L5=n(J,"LI",{});var ORe=s(L5);rue=n(ORe,"STRONG",{});var xvt=s(rue);kHo=r(xvt,"flaubert"),xvt.forEach(t),SHo=r(ORe," \u2014 "),rz=n(ORe,"A",{href:!0});var $vt=s(rz);RHo=r($vt,"FlaubertForTokenClassification"),$vt.forEach(t),PHo=r(ORe," (FlauBERT model)"),ORe.forEach(t),BHo=i(J),y5=n(J,"LI",{});var VRe=s(y5);tue=n(VRe,"STRONG",{});var kvt=s(tue);IHo=r(kvt,"fnet"),kvt.forEach(t),NHo=r(VRe," \u2014 "),tz=n(VRe,"A",{href:!0});var Svt=s(tz);qHo=r(Svt,"FNetForTokenClassification"),Svt.forEach(t),jHo=r(VRe," (FNet model)"),VRe.forEach(t),DHo=i(J),x5=n(J,"LI",{});var XRe=s(x5);aue=n(XRe,"STRONG",{});var Rvt=s(aue);GHo=r(Rvt,"funnel"),Rvt.forEach(t),OHo=r(XRe," \u2014 "),az=n(XRe,"A",{href:!0});var Pvt=s(az);VHo=r(Pvt,"FunnelForTokenClassification"),Pvt.forEach(t),XHo=r(XRe," (Funnel Transformer model)"),XRe.forEach(t),zHo=i(J),$5=n(J,"LI",{});var zRe=s($5);nue=n(zRe,"STRONG",{});var Bvt=s(nue);QHo=r(Bvt,"gpt2"),Bvt.forEach(t),WHo=r(zRe," \u2014 "),nz=n(zRe,"A",{href:!0});var Ivt=s(nz);HHo=r(Ivt,"GPT2ForTokenClassification"),Ivt.forEach(t),UHo=r(zRe," (OpenAI GPT-2 model)"),zRe.forEach(t),JHo=i(J),k5=n(J,"LI",{});var QRe=s(k5);sue=n(QRe,"STRONG",{});var Nvt=s(sue);YHo=r(Nvt,"ibert"),Nvt.forEach(t),KHo=r(QRe," \u2014 "),sz=n(QRe,"A",{href:!0});var qvt=s(sz);ZHo=r(qvt,"IBertForTokenClassification"),qvt.forEach(t),eUo=r(QRe," (I-BERT model)"),QRe.forEach(t),oUo=i(J),S5=n(J,"LI",{});var WRe=s(S5);lue=n(WRe,"STRONG",{});var jvt=s(lue);rUo=r(jvt,"layoutlm"),jvt.forEach(t),tUo=r(WRe," \u2014 "),lz=n(WRe,"A",{href:!0});var Dvt=s(lz);aUo=r(Dvt,"LayoutLMForTokenClassification"),Dvt.forEach(t),nUo=r(WRe," (LayoutLM model)"),WRe.forEach(t),sUo=i(J),R5=n(J,"LI",{});var HRe=s(R5);iue=n(HRe,"STRONG",{});var Gvt=s(iue);lUo=r(Gvt,"layoutlmv2"),Gvt.forEach(t),iUo=r(HRe," \u2014 "),iz=n(HRe,"A",{href:!0});var Ovt=s(iz);dUo=r(Ovt,"LayoutLMv2ForTokenClassification"),Ovt.forEach(t),cUo=r(HRe," (LayoutLMv2 model)"),HRe.forEach(t),fUo=i(J),P5=n(J,"LI",{});var URe=s(P5);due=n(URe,"STRONG",{});var Vvt=s(due);mUo=r(Vvt,"layoutlmv3"),Vvt.forEach(t),gUo=r(URe," \u2014 "),dz=n(URe,"A",{href:!0});var Xvt=s(dz);hUo=r(Xvt,"LayoutLMv3ForTokenClassification"),Xvt.forEach(t),pUo=r(URe," (LayoutLMv3 model)"),URe.forEach(t),_Uo=i(J),B5=n(J,"LI",{});var JRe=s(B5);cue=n(JRe,"STRONG",{});var zvt=s(cue);uUo=r(zvt,"longformer"),zvt.forEach(t),bUo=r(JRe," \u2014 "),cz=n(JRe,"A",{href:!0});var Qvt=s(cz);vUo=r(Qvt,"LongformerForTokenClassification"),Qvt.forEach(t),FUo=r(JRe," (Longformer model)"),JRe.forEach(t),TUo=i(J),I5=n(J,"LI",{});var YRe=s(I5);fue=n(YRe,"STRONG",{});var Wvt=s(fue);MUo=r(Wvt,"megatron-bert"),Wvt.forEach(t),EUo=r(YRe," \u2014 "),fz=n(YRe,"A",{href:!0});var Hvt=s(fz);CUo=r(Hvt,"MegatronBertForTokenClassification"),Hvt.forEach(t),wUo=r(YRe," (Megatron-BERT model)"),YRe.forEach(t),AUo=i(J),N5=n(J,"LI",{});var KRe=s(N5);mue=n(KRe,"STRONG",{});var Uvt=s(mue);LUo=r(Uvt,"mobilebert"),Uvt.forEach(t),yUo=r(KRe," \u2014 "),mz=n(KRe,"A",{href:!0});var Jvt=s(mz);xUo=r(Jvt,"MobileBertForTokenClassification"),Jvt.forEach(t),$Uo=r(KRe," (MobileBERT model)"),KRe.forEach(t),kUo=i(J),q5=n(J,"LI",{});var ZRe=s(q5);gue=n(ZRe,"STRONG",{});var Yvt=s(gue);SUo=r(Yvt,"mpnet"),Yvt.forEach(t),RUo=r(ZRe," \u2014 "),gz=n(ZRe,"A",{href:!0});var Kvt=s(gz);PUo=r(Kvt,"MPNetForTokenClassification"),Kvt.forEach(t),BUo=r(ZRe," (MPNet model)"),ZRe.forEach(t),IUo=i(J),j5=n(J,"LI",{});var ePe=s(j5);hue=n(ePe,"STRONG",{});var Zvt=s(hue);NUo=r(Zvt,"nezha"),Zvt.forEach(t),qUo=r(ePe," \u2014 "),hz=n(ePe,"A",{href:!0});var eFt=s(hz);jUo=r(eFt,"NezhaForTokenClassification"),eFt.forEach(t),DUo=r(ePe," (Nezha model)"),ePe.forEach(t),GUo=i(J),D5=n(J,"LI",{});var oPe=s(D5);pue=n(oPe,"STRONG",{});var oFt=s(pue);OUo=r(oFt,"nystromformer"),oFt.forEach(t),VUo=r(oPe," \u2014 "),pz=n(oPe,"A",{href:!0});var rFt=s(pz);XUo=r(rFt,"NystromformerForTokenClassification"),rFt.forEach(t),zUo=r(oPe," (Nystr\xF6mformer model)"),oPe.forEach(t),QUo=i(J),G5=n(J,"LI",{});var rPe=s(G5);_ue=n(rPe,"STRONG",{});var tFt=s(_ue);WUo=r(tFt,"qdqbert"),tFt.forEach(t),HUo=r(rPe," \u2014 "),_z=n(rPe,"A",{href:!0});var aFt=s(_z);UUo=r(aFt,"QDQBertForTokenClassification"),aFt.forEach(t),JUo=r(rPe," (QDQBert model)"),rPe.forEach(t),YUo=i(J),O5=n(J,"LI",{});var tPe=s(O5);uue=n(tPe,"STRONG",{});var nFt=s(uue);KUo=r(nFt,"rembert"),nFt.forEach(t),ZUo=r(tPe," \u2014 "),uz=n(tPe,"A",{href:!0});var sFt=s(uz);eJo=r(sFt,"RemBertForTokenClassification"),sFt.forEach(t),oJo=r(tPe," (RemBERT model)"),tPe.forEach(t),rJo=i(J),V5=n(J,"LI",{});var aPe=s(V5);bue=n(aPe,"STRONG",{});var lFt=s(bue);tJo=r(lFt,"roberta"),lFt.forEach(t),aJo=r(aPe," \u2014 "),bz=n(aPe,"A",{href:!0});var iFt=s(bz);nJo=r(iFt,"RobertaForTokenClassification"),iFt.forEach(t),sJo=r(aPe," (RoBERTa model)"),aPe.forEach(t),lJo=i(J),X5=n(J,"LI",{});var nPe=s(X5);vue=n(nPe,"STRONG",{});var dFt=s(vue);iJo=r(dFt,"roformer"),dFt.forEach(t),dJo=r(nPe," \u2014 "),vz=n(nPe,"A",{href:!0});var cFt=s(vz);cJo=r(cFt,"RoFormerForTokenClassification"),cFt.forEach(t),fJo=r(nPe," (RoFormer model)"),nPe.forEach(t),mJo=i(J),z5=n(J,"LI",{});var sPe=s(z5);Fue=n(sPe,"STRONG",{});var fFt=s(Fue);gJo=r(fFt,"squeezebert"),fFt.forEach(t),hJo=r(sPe," \u2014 "),Fz=n(sPe,"A",{href:!0});var mFt=s(Fz);pJo=r(mFt,"SqueezeBertForTokenClassification"),mFt.forEach(t),_Jo=r(sPe," (SqueezeBERT model)"),sPe.forEach(t),uJo=i(J),Q5=n(J,"LI",{});var lPe=s(Q5);Tue=n(lPe,"STRONG",{});var gFt=s(Tue);bJo=r(gFt,"xlm"),gFt.forEach(t),vJo=r(lPe," \u2014 "),Tz=n(lPe,"A",{href:!0});var hFt=s(Tz);FJo=r(hFt,"XLMForTokenClassification"),hFt.forEach(t),TJo=r(lPe," (XLM model)"),lPe.forEach(t),MJo=i(J),W5=n(J,"LI",{});var iPe=s(W5);Mue=n(iPe,"STRONG",{});var pFt=s(Mue);EJo=r(pFt,"xlm-roberta"),pFt.forEach(t),CJo=r(iPe," \u2014 "),Mz=n(iPe,"A",{href:!0});var _Ft=s(Mz);wJo=r(_Ft,"XLMRobertaForTokenClassification"),_Ft.forEach(t),AJo=r(iPe," (XLM-RoBERTa model)"),iPe.forEach(t),LJo=i(J),H5=n(J,"LI",{});var dPe=s(H5);Eue=n(dPe,"STRONG",{});var uFt=s(Eue);yJo=r(uFt,"xlm-roberta-xl"),uFt.forEach(t),xJo=r(dPe," \u2014 "),Ez=n(dPe,"A",{href:!0});var bFt=s(Ez);$Jo=r(bFt,"XLMRobertaXLForTokenClassification"),bFt.forEach(t),kJo=r(dPe," (XLM-RoBERTa-XL model)"),dPe.forEach(t),SJo=i(J),U5=n(J,"LI",{});var cPe=s(U5);Cue=n(cPe,"STRONG",{});var vFt=s(Cue);RJo=r(vFt,"xlnet"),vFt.forEach(t),PJo=r(cPe," \u2014 "),Cz=n(cPe,"A",{href:!0});var FFt=s(Cz);BJo=r(FFt,"XLNetForTokenClassification"),FFt.forEach(t),IJo=r(cPe," (XLNet model)"),cPe.forEach(t),NJo=i(J),J5=n(J,"LI",{});var fPe=s(J5);wue=n(fPe,"STRONG",{});var TFt=s(wue);qJo=r(TFt,"yoso"),TFt.forEach(t),jJo=r(fPe," \u2014 "),wz=n(fPe,"A",{href:!0});var MFt=s(wz);DJo=r(MFt,"YosoForTokenClassification"),MFt.forEach(t),GJo=r(fPe," (YOSO model)"),fPe.forEach(t),J.forEach(t),OJo=i(ga),Y5=n(ga,"P",{});var mPe=s(Y5);VJo=r(mPe,"The model is set in evaluation mode by default using "),Aue=n(mPe,"CODE",{});var EFt=s(Aue);XJo=r(EFt,"model.eval()"),EFt.forEach(t),zJo=r(mPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lue=n(mPe,"CODE",{});var CFt=s(Lue);QJo=r(CFt,"model.train()"),CFt.forEach(t),mPe.forEach(t),WJo=i(ga),T(K5.$$.fragment,ga),ga.forEach(t),sl.forEach(t),GOe=i(f),dd=n(f,"H2",{class:!0});var WXe=s(dd);Z5=n(WXe,"A",{id:!0,class:!0,href:!0});var wFt=s(Z5);yue=n(wFt,"SPAN",{});var AFt=s(yue);T(Ky.$$.fragment,AFt),AFt.forEach(t),wFt.forEach(t),HJo=i(WXe),xue=n(WXe,"SPAN",{});var LFt=s(xue);UJo=r(LFt,"AutoModelForQuestionAnswering"),LFt.forEach(t),WXe.forEach(t),OOe=i(f),jo=n(f,"DIV",{class:!0});var ll=s(jo);T(Zy.$$.fragment,ll),JJo=i(ll),cd=n(ll,"P",{});var Yoe=s(cd);YJo=r(Yoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Az=n(Yoe,"A",{href:!0});var yFt=s(Az);KJo=r(yFt,"from_pretrained()"),yFt.forEach(t),ZJo=r(Yoe," class method or the "),Lz=n(Yoe,"A",{href:!0});var xFt=s(Lz);eYo=r(xFt,"from_config()"),xFt.forEach(t),oYo=r(Yoe,` class
method.`),Yoe.forEach(t),rYo=i(ll),e8=n(ll,"P",{});var HXe=s(e8);tYo=r(HXe,"This class cannot be instantiated directly using "),$ue=n(HXe,"CODE",{});var $Ft=s($ue);aYo=r($Ft,"__init__()"),$Ft.forEach(t),nYo=r(HXe," (throws an error)."),HXe.forEach(t),sYo=i(ll),ht=n(ll,"DIV",{class:!0});var oL=s(ht);T(o8.$$.fragment,oL),lYo=i(oL),kue=n(oL,"P",{});var kFt=s(kue);iYo=r(kFt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),kFt.forEach(t),dYo=i(oL),fd=n(oL,"P",{});var Koe=s(fd);cYo=r(Koe,`Note:
Loading a model from its configuration file does `),Sue=n(Koe,"STRONG",{});var SFt=s(Sue);fYo=r(SFt,"not"),SFt.forEach(t),mYo=r(Koe,` load the model weights. It only affects the
model\u2019s configuration. Use `),yz=n(Koe,"A",{href:!0});var RFt=s(yz);gYo=r(RFt,"from_pretrained()"),RFt.forEach(t),hYo=r(Koe," to load the model weights."),Koe.forEach(t),pYo=i(oL),T(e3.$$.fragment,oL),oL.forEach(t),_Yo=i(ll),no=n(ll,"DIV",{class:!0});var ha=s(no);T(r8.$$.fragment,ha),uYo=i(ha),Rue=n(ha,"P",{});var PFt=s(Rue);bYo=r(PFt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),PFt.forEach(t),vYo=i(ha),Oa=n(ha,"P",{});var rL=s(Oa);FYo=r(rL,"The model class to instantiate is selected based on the "),Pue=n(rL,"CODE",{});var BFt=s(Pue);TYo=r(BFt,"model_type"),BFt.forEach(t),MYo=r(rL,` property of the config object (either
passed as an argument or loaded from `),Bue=n(rL,"CODE",{});var IFt=s(Bue);EYo=r(IFt,"pretrained_model_name_or_path"),IFt.forEach(t),CYo=r(rL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Iue=n(rL,"CODE",{});var NFt=s(Iue);wYo=r(NFt,"pretrained_model_name_or_path"),NFt.forEach(t),AYo=r(rL,":"),rL.forEach(t),LYo=i(ha),V=n(ha,"UL",{});var X=s(V);o3=n(X,"LI",{});var gPe=s(o3);Nue=n(gPe,"STRONG",{});var qFt=s(Nue);yYo=r(qFt,"albert"),qFt.forEach(t),xYo=r(gPe," \u2014 "),xz=n(gPe,"A",{href:!0});var jFt=s(xz);$Yo=r(jFt,"AlbertForQuestionAnswering"),jFt.forEach(t),kYo=r(gPe," (ALBERT model)"),gPe.forEach(t),SYo=i(X),r3=n(X,"LI",{});var hPe=s(r3);que=n(hPe,"STRONG",{});var DFt=s(que);RYo=r(DFt,"bart"),DFt.forEach(t),PYo=r(hPe," \u2014 "),$z=n(hPe,"A",{href:!0});var GFt=s($z);BYo=r(GFt,"BartForQuestionAnswering"),GFt.forEach(t),IYo=r(hPe," (BART model)"),hPe.forEach(t),NYo=i(X),t3=n(X,"LI",{});var pPe=s(t3);jue=n(pPe,"STRONG",{});var OFt=s(jue);qYo=r(OFt,"bert"),OFt.forEach(t),jYo=r(pPe," \u2014 "),kz=n(pPe,"A",{href:!0});var VFt=s(kz);DYo=r(VFt,"BertForQuestionAnswering"),VFt.forEach(t),GYo=r(pPe," (BERT model)"),pPe.forEach(t),OYo=i(X),a3=n(X,"LI",{});var _Pe=s(a3);Due=n(_Pe,"STRONG",{});var XFt=s(Due);VYo=r(XFt,"big_bird"),XFt.forEach(t),XYo=r(_Pe," \u2014 "),Sz=n(_Pe,"A",{href:!0});var zFt=s(Sz);zYo=r(zFt,"BigBirdForQuestionAnswering"),zFt.forEach(t),QYo=r(_Pe," (BigBird model)"),_Pe.forEach(t),WYo=i(X),n3=n(X,"LI",{});var uPe=s(n3);Gue=n(uPe,"STRONG",{});var QFt=s(Gue);HYo=r(QFt,"bigbird_pegasus"),QFt.forEach(t),UYo=r(uPe," \u2014 "),Rz=n(uPe,"A",{href:!0});var WFt=s(Rz);JYo=r(WFt,"BigBirdPegasusForQuestionAnswering"),WFt.forEach(t),YYo=r(uPe," (BigBird-Pegasus model)"),uPe.forEach(t),KYo=i(X),s3=n(X,"LI",{});var bPe=s(s3);Oue=n(bPe,"STRONG",{});var HFt=s(Oue);ZYo=r(HFt,"camembert"),HFt.forEach(t),eKo=r(bPe," \u2014 "),Pz=n(bPe,"A",{href:!0});var UFt=s(Pz);oKo=r(UFt,"CamembertForQuestionAnswering"),UFt.forEach(t),rKo=r(bPe," (CamemBERT model)"),bPe.forEach(t),tKo=i(X),l3=n(X,"LI",{});var vPe=s(l3);Vue=n(vPe,"STRONG",{});var JFt=s(Vue);aKo=r(JFt,"canine"),JFt.forEach(t),nKo=r(vPe," \u2014 "),Bz=n(vPe,"A",{href:!0});var YFt=s(Bz);sKo=r(YFt,"CanineForQuestionAnswering"),YFt.forEach(t),lKo=r(vPe," (CANINE model)"),vPe.forEach(t),iKo=i(X),i3=n(X,"LI",{});var FPe=s(i3);Xue=n(FPe,"STRONG",{});var KFt=s(Xue);dKo=r(KFt,"convbert"),KFt.forEach(t),cKo=r(FPe," \u2014 "),Iz=n(FPe,"A",{href:!0});var ZFt=s(Iz);fKo=r(ZFt,"ConvBertForQuestionAnswering"),ZFt.forEach(t),mKo=r(FPe," (ConvBERT model)"),FPe.forEach(t),gKo=i(X),d3=n(X,"LI",{});var TPe=s(d3);zue=n(TPe,"STRONG",{});var e6t=s(zue);hKo=r(e6t,"data2vec-text"),e6t.forEach(t),pKo=r(TPe," \u2014 "),Nz=n(TPe,"A",{href:!0});var o6t=s(Nz);_Ko=r(o6t,"Data2VecTextForQuestionAnswering"),o6t.forEach(t),uKo=r(TPe," (Data2VecText model)"),TPe.forEach(t),bKo=i(X),c3=n(X,"LI",{});var MPe=s(c3);Que=n(MPe,"STRONG",{});var r6t=s(Que);vKo=r(r6t,"deberta"),r6t.forEach(t),FKo=r(MPe," \u2014 "),qz=n(MPe,"A",{href:!0});var t6t=s(qz);TKo=r(t6t,"DebertaForQuestionAnswering"),t6t.forEach(t),MKo=r(MPe," (DeBERTa model)"),MPe.forEach(t),EKo=i(X),f3=n(X,"LI",{});var EPe=s(f3);Wue=n(EPe,"STRONG",{});var a6t=s(Wue);CKo=r(a6t,"deberta-v2"),a6t.forEach(t),wKo=r(EPe," \u2014 "),jz=n(EPe,"A",{href:!0});var n6t=s(jz);AKo=r(n6t,"DebertaV2ForQuestionAnswering"),n6t.forEach(t),LKo=r(EPe," (DeBERTa-v2 model)"),EPe.forEach(t),yKo=i(X),m3=n(X,"LI",{});var CPe=s(m3);Hue=n(CPe,"STRONG",{});var s6t=s(Hue);xKo=r(s6t,"distilbert"),s6t.forEach(t),$Ko=r(CPe," \u2014 "),Dz=n(CPe,"A",{href:!0});var l6t=s(Dz);kKo=r(l6t,"DistilBertForQuestionAnswering"),l6t.forEach(t),SKo=r(CPe," (DistilBERT model)"),CPe.forEach(t),RKo=i(X),g3=n(X,"LI",{});var wPe=s(g3);Uue=n(wPe,"STRONG",{});var i6t=s(Uue);PKo=r(i6t,"electra"),i6t.forEach(t),BKo=r(wPe," \u2014 "),Gz=n(wPe,"A",{href:!0});var d6t=s(Gz);IKo=r(d6t,"ElectraForQuestionAnswering"),d6t.forEach(t),NKo=r(wPe," (ELECTRA model)"),wPe.forEach(t),qKo=i(X),h3=n(X,"LI",{});var APe=s(h3);Jue=n(APe,"STRONG",{});var c6t=s(Jue);jKo=r(c6t,"flaubert"),c6t.forEach(t),DKo=r(APe," \u2014 "),Oz=n(APe,"A",{href:!0});var f6t=s(Oz);GKo=r(f6t,"FlaubertForQuestionAnsweringSimple"),f6t.forEach(t),OKo=r(APe," (FlauBERT model)"),APe.forEach(t),VKo=i(X),p3=n(X,"LI",{});var LPe=s(p3);Yue=n(LPe,"STRONG",{});var m6t=s(Yue);XKo=r(m6t,"fnet"),m6t.forEach(t),zKo=r(LPe," \u2014 "),Vz=n(LPe,"A",{href:!0});var g6t=s(Vz);QKo=r(g6t,"FNetForQuestionAnswering"),g6t.forEach(t),WKo=r(LPe," (FNet model)"),LPe.forEach(t),HKo=i(X),_3=n(X,"LI",{});var yPe=s(_3);Kue=n(yPe,"STRONG",{});var h6t=s(Kue);UKo=r(h6t,"funnel"),h6t.forEach(t),JKo=r(yPe," \u2014 "),Xz=n(yPe,"A",{href:!0});var p6t=s(Xz);YKo=r(p6t,"FunnelForQuestionAnswering"),p6t.forEach(t),KKo=r(yPe," (Funnel Transformer model)"),yPe.forEach(t),ZKo=i(X),u3=n(X,"LI",{});var xPe=s(u3);Zue=n(xPe,"STRONG",{});var _6t=s(Zue);eZo=r(_6t,"gptj"),_6t.forEach(t),oZo=r(xPe," \u2014 "),zz=n(xPe,"A",{href:!0});var u6t=s(zz);rZo=r(u6t,"GPTJForQuestionAnswering"),u6t.forEach(t),tZo=r(xPe," (GPT-J model)"),xPe.forEach(t),aZo=i(X),b3=n(X,"LI",{});var $Pe=s(b3);e1e=n($Pe,"STRONG",{});var b6t=s(e1e);nZo=r(b6t,"ibert"),b6t.forEach(t),sZo=r($Pe," \u2014 "),Qz=n($Pe,"A",{href:!0});var v6t=s(Qz);lZo=r(v6t,"IBertForQuestionAnswering"),v6t.forEach(t),iZo=r($Pe," (I-BERT model)"),$Pe.forEach(t),dZo=i(X),v3=n(X,"LI",{});var kPe=s(v3);o1e=n(kPe,"STRONG",{});var F6t=s(o1e);cZo=r(F6t,"layoutlmv2"),F6t.forEach(t),fZo=r(kPe," \u2014 "),Wz=n(kPe,"A",{href:!0});var T6t=s(Wz);mZo=r(T6t,"LayoutLMv2ForQuestionAnswering"),T6t.forEach(t),gZo=r(kPe," (LayoutLMv2 model)"),kPe.forEach(t),hZo=i(X),F3=n(X,"LI",{});var SPe=s(F3);r1e=n(SPe,"STRONG",{});var M6t=s(r1e);pZo=r(M6t,"layoutlmv3"),M6t.forEach(t),_Zo=r(SPe," \u2014 "),Hz=n(SPe,"A",{href:!0});var E6t=s(Hz);uZo=r(E6t,"LayoutLMv3ForQuestionAnswering"),E6t.forEach(t),bZo=r(SPe," (LayoutLMv3 model)"),SPe.forEach(t),vZo=i(X),T3=n(X,"LI",{});var RPe=s(T3);t1e=n(RPe,"STRONG",{});var C6t=s(t1e);FZo=r(C6t,"led"),C6t.forEach(t),TZo=r(RPe," \u2014 "),Uz=n(RPe,"A",{href:!0});var w6t=s(Uz);MZo=r(w6t,"LEDForQuestionAnswering"),w6t.forEach(t),EZo=r(RPe," (LED model)"),RPe.forEach(t),CZo=i(X),M3=n(X,"LI",{});var PPe=s(M3);a1e=n(PPe,"STRONG",{});var A6t=s(a1e);wZo=r(A6t,"longformer"),A6t.forEach(t),AZo=r(PPe," \u2014 "),Jz=n(PPe,"A",{href:!0});var L6t=s(Jz);LZo=r(L6t,"LongformerForQuestionAnswering"),L6t.forEach(t),yZo=r(PPe," (Longformer model)"),PPe.forEach(t),xZo=i(X),E3=n(X,"LI",{});var BPe=s(E3);n1e=n(BPe,"STRONG",{});var y6t=s(n1e);$Zo=r(y6t,"lxmert"),y6t.forEach(t),kZo=r(BPe," \u2014 "),Yz=n(BPe,"A",{href:!0});var x6t=s(Yz);SZo=r(x6t,"LxmertForQuestionAnswering"),x6t.forEach(t),RZo=r(BPe," (LXMERT model)"),BPe.forEach(t),PZo=i(X),C3=n(X,"LI",{});var IPe=s(C3);s1e=n(IPe,"STRONG",{});var $6t=s(s1e);BZo=r($6t,"mbart"),$6t.forEach(t),IZo=r(IPe," \u2014 "),Kz=n(IPe,"A",{href:!0});var k6t=s(Kz);NZo=r(k6t,"MBartForQuestionAnswering"),k6t.forEach(t),qZo=r(IPe," (mBART model)"),IPe.forEach(t),jZo=i(X),w3=n(X,"LI",{});var NPe=s(w3);l1e=n(NPe,"STRONG",{});var S6t=s(l1e);DZo=r(S6t,"megatron-bert"),S6t.forEach(t),GZo=r(NPe," \u2014 "),Zz=n(NPe,"A",{href:!0});var R6t=s(Zz);OZo=r(R6t,"MegatronBertForQuestionAnswering"),R6t.forEach(t),VZo=r(NPe," (Megatron-BERT model)"),NPe.forEach(t),XZo=i(X),A3=n(X,"LI",{});var qPe=s(A3);i1e=n(qPe,"STRONG",{});var P6t=s(i1e);zZo=r(P6t,"mobilebert"),P6t.forEach(t),QZo=r(qPe," \u2014 "),eQ=n(qPe,"A",{href:!0});var B6t=s(eQ);WZo=r(B6t,"MobileBertForQuestionAnswering"),B6t.forEach(t),HZo=r(qPe," (MobileBERT model)"),qPe.forEach(t),UZo=i(X),L3=n(X,"LI",{});var jPe=s(L3);d1e=n(jPe,"STRONG",{});var I6t=s(d1e);JZo=r(I6t,"mpnet"),I6t.forEach(t),YZo=r(jPe," \u2014 "),oQ=n(jPe,"A",{href:!0});var N6t=s(oQ);KZo=r(N6t,"MPNetForQuestionAnswering"),N6t.forEach(t),ZZo=r(jPe," (MPNet model)"),jPe.forEach(t),eer=i(X),y3=n(X,"LI",{});var DPe=s(y3);c1e=n(DPe,"STRONG",{});var q6t=s(c1e);oer=r(q6t,"nezha"),q6t.forEach(t),rer=r(DPe," \u2014 "),rQ=n(DPe,"A",{href:!0});var j6t=s(rQ);ter=r(j6t,"NezhaForQuestionAnswering"),j6t.forEach(t),aer=r(DPe," (Nezha model)"),DPe.forEach(t),ner=i(X),x3=n(X,"LI",{});var GPe=s(x3);f1e=n(GPe,"STRONG",{});var D6t=s(f1e);ser=r(D6t,"nystromformer"),D6t.forEach(t),ler=r(GPe," \u2014 "),tQ=n(GPe,"A",{href:!0});var G6t=s(tQ);ier=r(G6t,"NystromformerForQuestionAnswering"),G6t.forEach(t),der=r(GPe," (Nystr\xF6mformer model)"),GPe.forEach(t),cer=i(X),$3=n(X,"LI",{});var OPe=s($3);m1e=n(OPe,"STRONG",{});var O6t=s(m1e);fer=r(O6t,"qdqbert"),O6t.forEach(t),mer=r(OPe," \u2014 "),aQ=n(OPe,"A",{href:!0});var V6t=s(aQ);ger=r(V6t,"QDQBertForQuestionAnswering"),V6t.forEach(t),her=r(OPe," (QDQBert model)"),OPe.forEach(t),per=i(X),k3=n(X,"LI",{});var VPe=s(k3);g1e=n(VPe,"STRONG",{});var X6t=s(g1e);_er=r(X6t,"reformer"),X6t.forEach(t),uer=r(VPe," \u2014 "),nQ=n(VPe,"A",{href:!0});var z6t=s(nQ);ber=r(z6t,"ReformerForQuestionAnswering"),z6t.forEach(t),ver=r(VPe," (Reformer model)"),VPe.forEach(t),Fer=i(X),S3=n(X,"LI",{});var XPe=s(S3);h1e=n(XPe,"STRONG",{});var Q6t=s(h1e);Ter=r(Q6t,"rembert"),Q6t.forEach(t),Mer=r(XPe," \u2014 "),sQ=n(XPe,"A",{href:!0});var W6t=s(sQ);Eer=r(W6t,"RemBertForQuestionAnswering"),W6t.forEach(t),Cer=r(XPe," (RemBERT model)"),XPe.forEach(t),wer=i(X),R3=n(X,"LI",{});var zPe=s(R3);p1e=n(zPe,"STRONG",{});var H6t=s(p1e);Aer=r(H6t,"roberta"),H6t.forEach(t),Ler=r(zPe," \u2014 "),lQ=n(zPe,"A",{href:!0});var U6t=s(lQ);yer=r(U6t,"RobertaForQuestionAnswering"),U6t.forEach(t),xer=r(zPe," (RoBERTa model)"),zPe.forEach(t),$er=i(X),P3=n(X,"LI",{});var QPe=s(P3);_1e=n(QPe,"STRONG",{});var J6t=s(_1e);ker=r(J6t,"roformer"),J6t.forEach(t),Ser=r(QPe," \u2014 "),iQ=n(QPe,"A",{href:!0});var Y6t=s(iQ);Rer=r(Y6t,"RoFormerForQuestionAnswering"),Y6t.forEach(t),Per=r(QPe," (RoFormer model)"),QPe.forEach(t),Ber=i(X),B3=n(X,"LI",{});var WPe=s(B3);u1e=n(WPe,"STRONG",{});var K6t=s(u1e);Ier=r(K6t,"splinter"),K6t.forEach(t),Ner=r(WPe," \u2014 "),dQ=n(WPe,"A",{href:!0});var Z6t=s(dQ);qer=r(Z6t,"SplinterForQuestionAnswering"),Z6t.forEach(t),jer=r(WPe," (Splinter model)"),WPe.forEach(t),Der=i(X),I3=n(X,"LI",{});var HPe=s(I3);b1e=n(HPe,"STRONG",{});var eTt=s(b1e);Ger=r(eTt,"squeezebert"),eTt.forEach(t),Oer=r(HPe," \u2014 "),cQ=n(HPe,"A",{href:!0});var oTt=s(cQ);Ver=r(oTt,"SqueezeBertForQuestionAnswering"),oTt.forEach(t),Xer=r(HPe," (SqueezeBERT model)"),HPe.forEach(t),zer=i(X),N3=n(X,"LI",{});var UPe=s(N3);v1e=n(UPe,"STRONG",{});var rTt=s(v1e);Qer=r(rTt,"xlm"),rTt.forEach(t),Wer=r(UPe," \u2014 "),fQ=n(UPe,"A",{href:!0});var tTt=s(fQ);Her=r(tTt,"XLMForQuestionAnsweringSimple"),tTt.forEach(t),Uer=r(UPe," (XLM model)"),UPe.forEach(t),Jer=i(X),q3=n(X,"LI",{});var JPe=s(q3);F1e=n(JPe,"STRONG",{});var aTt=s(F1e);Yer=r(aTt,"xlm-roberta"),aTt.forEach(t),Ker=r(JPe," \u2014 "),mQ=n(JPe,"A",{href:!0});var nTt=s(mQ);Zer=r(nTt,"XLMRobertaForQuestionAnswering"),nTt.forEach(t),eor=r(JPe," (XLM-RoBERTa model)"),JPe.forEach(t),oor=i(X),j3=n(X,"LI",{});var YPe=s(j3);T1e=n(YPe,"STRONG",{});var sTt=s(T1e);ror=r(sTt,"xlm-roberta-xl"),sTt.forEach(t),tor=r(YPe," \u2014 "),gQ=n(YPe,"A",{href:!0});var lTt=s(gQ);aor=r(lTt,"XLMRobertaXLForQuestionAnswering"),lTt.forEach(t),nor=r(YPe," (XLM-RoBERTa-XL model)"),YPe.forEach(t),sor=i(X),D3=n(X,"LI",{});var KPe=s(D3);M1e=n(KPe,"STRONG",{});var iTt=s(M1e);lor=r(iTt,"xlnet"),iTt.forEach(t),ior=r(KPe," \u2014 "),hQ=n(KPe,"A",{href:!0});var dTt=s(hQ);dor=r(dTt,"XLNetForQuestionAnsweringSimple"),dTt.forEach(t),cor=r(KPe," (XLNet model)"),KPe.forEach(t),mor=i(X),G3=n(X,"LI",{});var ZPe=s(G3);E1e=n(ZPe,"STRONG",{});var cTt=s(E1e);gor=r(cTt,"yoso"),cTt.forEach(t),hor=r(ZPe," \u2014 "),pQ=n(ZPe,"A",{href:!0});var fTt=s(pQ);por=r(fTt,"YosoForQuestionAnswering"),fTt.forEach(t),_or=r(ZPe," (YOSO model)"),ZPe.forEach(t),X.forEach(t),uor=i(ha),O3=n(ha,"P",{});var eBe=s(O3);bor=r(eBe,"The model is set in evaluation mode by default using "),C1e=n(eBe,"CODE",{});var mTt=s(C1e);vor=r(mTt,"model.eval()"),mTt.forEach(t),For=r(eBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),w1e=n(eBe,"CODE",{});var gTt=s(w1e);Tor=r(gTt,"model.train()"),gTt.forEach(t),eBe.forEach(t),Mor=i(ha),T(V3.$$.fragment,ha),ha.forEach(t),ll.forEach(t),VOe=i(f),md=n(f,"H2",{class:!0});var UXe=s(md);X3=n(UXe,"A",{id:!0,class:!0,href:!0});var hTt=s(X3);A1e=n(hTt,"SPAN",{});var pTt=s(A1e);T(t8.$$.fragment,pTt),pTt.forEach(t),hTt.forEach(t),Eor=i(UXe),L1e=n(UXe,"SPAN",{});var _Tt=s(L1e);Cor=r(_Tt,"AutoModelForTableQuestionAnswering"),_Tt.forEach(t),UXe.forEach(t),XOe=i(f),Do=n(f,"DIV",{class:!0});var il=s(Do);T(a8.$$.fragment,il),wor=i(il),gd=n(il,"P",{});var Zoe=s(gd);Aor=r(Zoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),_Q=n(Zoe,"A",{href:!0});var uTt=s(_Q);Lor=r(uTt,"from_pretrained()"),uTt.forEach(t),yor=r(Zoe," class method or the "),uQ=n(Zoe,"A",{href:!0});var bTt=s(uQ);xor=r(bTt,"from_config()"),bTt.forEach(t),$or=r(Zoe,` class
method.`),Zoe.forEach(t),kor=i(il),n8=n(il,"P",{});var JXe=s(n8);Sor=r(JXe,"This class cannot be instantiated directly using "),y1e=n(JXe,"CODE",{});var vTt=s(y1e);Ror=r(vTt,"__init__()"),vTt.forEach(t),Por=r(JXe," (throws an error)."),JXe.forEach(t),Bor=i(il),pt=n(il,"DIV",{class:!0});var tL=s(pt);T(s8.$$.fragment,tL),Ior=i(tL),x1e=n(tL,"P",{});var FTt=s(x1e);Nor=r(FTt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),FTt.forEach(t),qor=i(tL),hd=n(tL,"P",{});var ere=s(hd);jor=r(ere,`Note:
Loading a model from its configuration file does `),$1e=n(ere,"STRONG",{});var TTt=s($1e);Dor=r(TTt,"not"),TTt.forEach(t),Gor=r(ere,` load the model weights. It only affects the
model\u2019s configuration. Use `),bQ=n(ere,"A",{href:!0});var MTt=s(bQ);Oor=r(MTt,"from_pretrained()"),MTt.forEach(t),Vor=r(ere," to load the model weights."),ere.forEach(t),Xor=i(tL),T(z3.$$.fragment,tL),tL.forEach(t),zor=i(il),so=n(il,"DIV",{class:!0});var pa=s(so);T(l8.$$.fragment,pa),Qor=i(pa),k1e=n(pa,"P",{});var ETt=s(k1e);Wor=r(ETt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),ETt.forEach(t),Hor=i(pa),Va=n(pa,"P",{});var aL=s(Va);Uor=r(aL,"The model class to instantiate is selected based on the "),S1e=n(aL,"CODE",{});var CTt=s(S1e);Jor=r(CTt,"model_type"),CTt.forEach(t),Yor=r(aL,` property of the config object (either
passed as an argument or loaded from `),R1e=n(aL,"CODE",{});var wTt=s(R1e);Kor=r(wTt,"pretrained_model_name_or_path"),wTt.forEach(t),Zor=r(aL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P1e=n(aL,"CODE",{});var ATt=s(P1e);err=r(ATt,"pretrained_model_name_or_path"),ATt.forEach(t),orr=r(aL,":"),aL.forEach(t),rrr=i(pa),B1e=n(pa,"UL",{});var LTt=s(B1e);Q3=n(LTt,"LI",{});var oBe=s(Q3);I1e=n(oBe,"STRONG",{});var yTt=s(I1e);trr=r(yTt,"tapas"),yTt.forEach(t),arr=r(oBe," \u2014 "),vQ=n(oBe,"A",{href:!0});var xTt=s(vQ);nrr=r(xTt,"TapasForQuestionAnswering"),xTt.forEach(t),srr=r(oBe," (TAPAS model)"),oBe.forEach(t),LTt.forEach(t),lrr=i(pa),W3=n(pa,"P",{});var rBe=s(W3);irr=r(rBe,"The model is set in evaluation mode by default using "),N1e=n(rBe,"CODE",{});var $Tt=s(N1e);drr=r($Tt,"model.eval()"),$Tt.forEach(t),crr=r(rBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),q1e=n(rBe,"CODE",{});var kTt=s(q1e);frr=r(kTt,"model.train()"),kTt.forEach(t),rBe.forEach(t),mrr=i(pa),T(H3.$$.fragment,pa),pa.forEach(t),il.forEach(t),zOe=i(f),pd=n(f,"H2",{class:!0});var YXe=s(pd);U3=n(YXe,"A",{id:!0,class:!0,href:!0});var STt=s(U3);j1e=n(STt,"SPAN",{});var RTt=s(j1e);T(i8.$$.fragment,RTt),RTt.forEach(t),STt.forEach(t),grr=i(YXe),D1e=n(YXe,"SPAN",{});var PTt=s(D1e);hrr=r(PTt,"AutoModelForImageClassification"),PTt.forEach(t),YXe.forEach(t),QOe=i(f),Go=n(f,"DIV",{class:!0});var dl=s(Go);T(d8.$$.fragment,dl),prr=i(dl),_d=n(dl,"P",{});var ore=s(_d);_rr=r(ore,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),FQ=n(ore,"A",{href:!0});var BTt=s(FQ);urr=r(BTt,"from_pretrained()"),BTt.forEach(t),brr=r(ore," class method or the "),TQ=n(ore,"A",{href:!0});var ITt=s(TQ);vrr=r(ITt,"from_config()"),ITt.forEach(t),Frr=r(ore,` class
method.`),ore.forEach(t),Trr=i(dl),c8=n(dl,"P",{});var KXe=s(c8);Mrr=r(KXe,"This class cannot be instantiated directly using "),G1e=n(KXe,"CODE",{});var NTt=s(G1e);Err=r(NTt,"__init__()"),NTt.forEach(t),Crr=r(KXe," (throws an error)."),KXe.forEach(t),wrr=i(dl),_t=n(dl,"DIV",{class:!0});var nL=s(_t);T(f8.$$.fragment,nL),Arr=i(nL),O1e=n(nL,"P",{});var qTt=s(O1e);Lrr=r(qTt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),qTt.forEach(t),yrr=i(nL),ud=n(nL,"P",{});var rre=s(ud);xrr=r(rre,`Note:
Loading a model from its configuration file does `),V1e=n(rre,"STRONG",{});var jTt=s(V1e);$rr=r(jTt,"not"),jTt.forEach(t),krr=r(rre,` load the model weights. It only affects the
model\u2019s configuration. Use `),MQ=n(rre,"A",{href:!0});var DTt=s(MQ);Srr=r(DTt,"from_pretrained()"),DTt.forEach(t),Rrr=r(rre," to load the model weights."),rre.forEach(t),Prr=i(nL),T(J3.$$.fragment,nL),nL.forEach(t),Brr=i(dl),lo=n(dl,"DIV",{class:!0});var _a=s(lo);T(m8.$$.fragment,_a),Irr=i(_a),X1e=n(_a,"P",{});var GTt=s(X1e);Nrr=r(GTt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),GTt.forEach(t),qrr=i(_a),Xa=n(_a,"P",{});var sL=s(Xa);jrr=r(sL,"The model class to instantiate is selected based on the "),z1e=n(sL,"CODE",{});var OTt=s(z1e);Drr=r(OTt,"model_type"),OTt.forEach(t),Grr=r(sL,` property of the config object (either
passed as an argument or loaded from `),Q1e=n(sL,"CODE",{});var VTt=s(Q1e);Orr=r(VTt,"pretrained_model_name_or_path"),VTt.forEach(t),Vrr=r(sL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W1e=n(sL,"CODE",{});var XTt=s(W1e);Xrr=r(XTt,"pretrained_model_name_or_path"),XTt.forEach(t),zrr=r(sL,":"),sL.forEach(t),Qrr=i(_a),Fe=n(_a,"UL",{});var Me=s(Fe);Y3=n(Me,"LI",{});var tBe=s(Y3);H1e=n(tBe,"STRONG",{});var zTt=s(H1e);Wrr=r(zTt,"beit"),zTt.forEach(t),Hrr=r(tBe," \u2014 "),EQ=n(tBe,"A",{href:!0});var QTt=s(EQ);Urr=r(QTt,"BeitForImageClassification"),QTt.forEach(t),Jrr=r(tBe," (BEiT model)"),tBe.forEach(t),Yrr=i(Me),K3=n(Me,"LI",{});var aBe=s(K3);U1e=n(aBe,"STRONG",{});var WTt=s(U1e);Krr=r(WTt,"convnext"),WTt.forEach(t),Zrr=r(aBe," \u2014 "),CQ=n(aBe,"A",{href:!0});var HTt=s(CQ);etr=r(HTt,"ConvNextForImageClassification"),HTt.forEach(t),otr=r(aBe," (ConvNeXT model)"),aBe.forEach(t),rtr=i(Me),Z3=n(Me,"LI",{});var nBe=s(Z3);J1e=n(nBe,"STRONG",{});var UTt=s(J1e);ttr=r(UTt,"cvt"),UTt.forEach(t),atr=r(nBe," \u2014 "),wQ=n(nBe,"A",{href:!0});var JTt=s(wQ);ntr=r(JTt,"CvtForImageClassification"),JTt.forEach(t),str=r(nBe," (CvT model)"),nBe.forEach(t),ltr=i(Me),ev=n(Me,"LI",{});var sBe=s(ev);Y1e=n(sBe,"STRONG",{});var YTt=s(Y1e);itr=r(YTt,"data2vec-vision"),YTt.forEach(t),dtr=r(sBe," \u2014 "),AQ=n(sBe,"A",{href:!0});var KTt=s(AQ);ctr=r(KTt,"Data2VecVisionForImageClassification"),KTt.forEach(t),ftr=r(sBe," (Data2VecVision model)"),sBe.forEach(t),mtr=i(Me),zs=n(Me,"LI",{});var sS=s(zs);K1e=n(sS,"STRONG",{});var ZTt=s(K1e);gtr=r(ZTt,"deit"),ZTt.forEach(t),htr=r(sS," \u2014 "),LQ=n(sS,"A",{href:!0});var eMt=s(LQ);ptr=r(eMt,"DeiTForImageClassification"),eMt.forEach(t),_tr=r(sS," or "),yQ=n(sS,"A",{href:!0});var oMt=s(yQ);utr=r(oMt,"DeiTForImageClassificationWithTeacher"),oMt.forEach(t),btr=r(sS," (DeiT model)"),sS.forEach(t),vtr=i(Me),ov=n(Me,"LI",{});var lBe=s(ov);Z1e=n(lBe,"STRONG",{});var rMt=s(Z1e);Ftr=r(rMt,"imagegpt"),rMt.forEach(t),Ttr=r(lBe," \u2014 "),xQ=n(lBe,"A",{href:!0});var tMt=s(xQ);Mtr=r(tMt,"ImageGPTForImageClassification"),tMt.forEach(t),Etr=r(lBe," (ImageGPT model)"),lBe.forEach(t),Ctr=i(Me),Qs=n(Me,"LI",{});var lS=s(Qs);e2e=n(lS,"STRONG",{});var aMt=s(e2e);wtr=r(aMt,"levit"),aMt.forEach(t),Atr=r(lS," \u2014 "),$Q=n(lS,"A",{href:!0});var nMt=s($Q);Ltr=r(nMt,"LevitForImageClassification"),nMt.forEach(t),ytr=r(lS," or "),kQ=n(lS,"A",{href:!0});var sMt=s(kQ);xtr=r(sMt,"LevitForImageClassificationWithTeacher"),sMt.forEach(t),$tr=r(lS," (LeViT model)"),lS.forEach(t),ktr=i(Me),ut=n(Me,"LI",{});var yf=s(ut);o2e=n(yf,"STRONG",{});var lMt=s(o2e);Str=r(lMt,"perceiver"),lMt.forEach(t),Rtr=r(yf," \u2014 "),SQ=n(yf,"A",{href:!0});var iMt=s(SQ);Ptr=r(iMt,"PerceiverForImageClassificationLearned"),iMt.forEach(t),Btr=r(yf," or "),RQ=n(yf,"A",{href:!0});var dMt=s(RQ);Itr=r(dMt,"PerceiverForImageClassificationFourier"),dMt.forEach(t),Ntr=r(yf," or "),PQ=n(yf,"A",{href:!0});var cMt=s(PQ);qtr=r(cMt,"PerceiverForImageClassificationConvProcessing"),cMt.forEach(t),jtr=r(yf," (Perceiver model)"),yf.forEach(t),Dtr=i(Me),rv=n(Me,"LI",{});var iBe=s(rv);r2e=n(iBe,"STRONG",{});var fMt=s(r2e);Gtr=r(fMt,"poolformer"),fMt.forEach(t),Otr=r(iBe," \u2014 "),BQ=n(iBe,"A",{href:!0});var mMt=s(BQ);Vtr=r(mMt,"PoolFormerForImageClassification"),mMt.forEach(t),Xtr=r(iBe," (PoolFormer model)"),iBe.forEach(t),ztr=i(Me),tv=n(Me,"LI",{});var dBe=s(tv);t2e=n(dBe,"STRONG",{});var gMt=s(t2e);Qtr=r(gMt,"regnet"),gMt.forEach(t),Wtr=r(dBe," \u2014 "),IQ=n(dBe,"A",{href:!0});var hMt=s(IQ);Htr=r(hMt,"RegNetForImageClassification"),hMt.forEach(t),Utr=r(dBe," (RegNet model)"),dBe.forEach(t),Jtr=i(Me),av=n(Me,"LI",{});var cBe=s(av);a2e=n(cBe,"STRONG",{});var pMt=s(a2e);Ytr=r(pMt,"resnet"),pMt.forEach(t),Ktr=r(cBe," \u2014 "),NQ=n(cBe,"A",{href:!0});var _Mt=s(NQ);Ztr=r(_Mt,"ResNetForImageClassification"),_Mt.forEach(t),ear=r(cBe," (ResNet model)"),cBe.forEach(t),oar=i(Me),nv=n(Me,"LI",{});var fBe=s(nv);n2e=n(fBe,"STRONG",{});var uMt=s(n2e);rar=r(uMt,"segformer"),uMt.forEach(t),tar=r(fBe," \u2014 "),qQ=n(fBe,"A",{href:!0});var bMt=s(qQ);aar=r(bMt,"SegformerForImageClassification"),bMt.forEach(t),nar=r(fBe," (SegFormer model)"),fBe.forEach(t),sar=i(Me),sv=n(Me,"LI",{});var mBe=s(sv);s2e=n(mBe,"STRONG",{});var vMt=s(s2e);lar=r(vMt,"swin"),vMt.forEach(t),iar=r(mBe," \u2014 "),jQ=n(mBe,"A",{href:!0});var FMt=s(jQ);dar=r(FMt,"SwinForImageClassification"),FMt.forEach(t),car=r(mBe," (Swin Transformer model)"),mBe.forEach(t),far=i(Me),lv=n(Me,"LI",{});var gBe=s(lv);l2e=n(gBe,"STRONG",{});var TMt=s(l2e);mar=r(TMt,"van"),TMt.forEach(t),gar=r(gBe," \u2014 "),DQ=n(gBe,"A",{href:!0});var MMt=s(DQ);har=r(MMt,"VanForImageClassification"),MMt.forEach(t),par=r(gBe," (VAN model)"),gBe.forEach(t),_ar=i(Me),iv=n(Me,"LI",{});var hBe=s(iv);i2e=n(hBe,"STRONG",{});var EMt=s(i2e);uar=r(EMt,"vit"),EMt.forEach(t),bar=r(hBe," \u2014 "),GQ=n(hBe,"A",{href:!0});var CMt=s(GQ);Far=r(CMt,"ViTForImageClassification"),CMt.forEach(t),Tar=r(hBe," (ViT model)"),hBe.forEach(t),Me.forEach(t),Mar=i(_a),dv=n(_a,"P",{});var pBe=s(dv);Ear=r(pBe,"The model is set in evaluation mode by default using "),d2e=n(pBe,"CODE",{});var wMt=s(d2e);Car=r(wMt,"model.eval()"),wMt.forEach(t),war=r(pBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),c2e=n(pBe,"CODE",{});var AMt=s(c2e);Aar=r(AMt,"model.train()"),AMt.forEach(t),pBe.forEach(t),Lar=i(_a),T(cv.$$.fragment,_a),_a.forEach(t),dl.forEach(t),WOe=i(f),bd=n(f,"H2",{class:!0});var ZXe=s(bd);fv=n(ZXe,"A",{id:!0,class:!0,href:!0});var LMt=s(fv);f2e=n(LMt,"SPAN",{});var yMt=s(f2e);T(g8.$$.fragment,yMt),yMt.forEach(t),LMt.forEach(t),yar=i(ZXe),m2e=n(ZXe,"SPAN",{});var xMt=s(m2e);xar=r(xMt,"AutoModelForVision2Seq"),xMt.forEach(t),ZXe.forEach(t),HOe=i(f),Oo=n(f,"DIV",{class:!0});var cl=s(Oo);T(h8.$$.fragment,cl),$ar=i(cl),vd=n(cl,"P",{});var tre=s(vd);kar=r(tre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),OQ=n(tre,"A",{href:!0});var $Mt=s(OQ);Sar=r($Mt,"from_pretrained()"),$Mt.forEach(t),Rar=r(tre," class method or the "),VQ=n(tre,"A",{href:!0});var kMt=s(VQ);Par=r(kMt,"from_config()"),kMt.forEach(t),Bar=r(tre,` class
method.`),tre.forEach(t),Iar=i(cl),p8=n(cl,"P",{});var eze=s(p8);Nar=r(eze,"This class cannot be instantiated directly using "),g2e=n(eze,"CODE",{});var SMt=s(g2e);qar=r(SMt,"__init__()"),SMt.forEach(t),jar=r(eze," (throws an error)."),eze.forEach(t),Dar=i(cl),bt=n(cl,"DIV",{class:!0});var lL=s(bt);T(_8.$$.fragment,lL),Gar=i(lL),h2e=n(lL,"P",{});var RMt=s(h2e);Oar=r(RMt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),RMt.forEach(t),Var=i(lL),Fd=n(lL,"P",{});var are=s(Fd);Xar=r(are,`Note:
Loading a model from its configuration file does `),p2e=n(are,"STRONG",{});var PMt=s(p2e);zar=r(PMt,"not"),PMt.forEach(t),Qar=r(are,` load the model weights. It only affects the
model\u2019s configuration. Use `),XQ=n(are,"A",{href:!0});var BMt=s(XQ);War=r(BMt,"from_pretrained()"),BMt.forEach(t),Har=r(are," to load the model weights."),are.forEach(t),Uar=i(lL),T(mv.$$.fragment,lL),lL.forEach(t),Jar=i(cl),io=n(cl,"DIV",{class:!0});var ua=s(io);T(u8.$$.fragment,ua),Yar=i(ua),_2e=n(ua,"P",{});var IMt=s(_2e);Kar=r(IMt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),IMt.forEach(t),Zar=i(ua),za=n(ua,"P",{});var iL=s(za);enr=r(iL,"The model class to instantiate is selected based on the "),u2e=n(iL,"CODE",{});var NMt=s(u2e);onr=r(NMt,"model_type"),NMt.forEach(t),rnr=r(iL,` property of the config object (either
passed as an argument or loaded from `),b2e=n(iL,"CODE",{});var qMt=s(b2e);tnr=r(qMt,"pretrained_model_name_or_path"),qMt.forEach(t),anr=r(iL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v2e=n(iL,"CODE",{});var jMt=s(v2e);nnr=r(jMt,"pretrained_model_name_or_path"),jMt.forEach(t),snr=r(iL,":"),iL.forEach(t),lnr=i(ua),F2e=n(ua,"UL",{});var DMt=s(F2e);gv=n(DMt,"LI",{});var _Be=s(gv);T2e=n(_Be,"STRONG",{});var GMt=s(T2e);inr=r(GMt,"vision-encoder-decoder"),GMt.forEach(t),dnr=r(_Be," \u2014 "),zQ=n(_Be,"A",{href:!0});var OMt=s(zQ);cnr=r(OMt,"VisionEncoderDecoderModel"),OMt.forEach(t),fnr=r(_Be," (Vision Encoder decoder model)"),_Be.forEach(t),DMt.forEach(t),mnr=i(ua),hv=n(ua,"P",{});var uBe=s(hv);gnr=r(uBe,"The model is set in evaluation mode by default using "),M2e=n(uBe,"CODE",{});var VMt=s(M2e);hnr=r(VMt,"model.eval()"),VMt.forEach(t),pnr=r(uBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),E2e=n(uBe,"CODE",{});var XMt=s(E2e);_nr=r(XMt,"model.train()"),XMt.forEach(t),uBe.forEach(t),unr=i(ua),T(pv.$$.fragment,ua),ua.forEach(t),cl.forEach(t),UOe=i(f),Td=n(f,"H2",{class:!0});var oze=s(Td);_v=n(oze,"A",{id:!0,class:!0,href:!0});var zMt=s(_v);C2e=n(zMt,"SPAN",{});var QMt=s(C2e);T(b8.$$.fragment,QMt),QMt.forEach(t),zMt.forEach(t),bnr=i(oze),w2e=n(oze,"SPAN",{});var WMt=s(w2e);vnr=r(WMt,"AutoModelForVisualQuestionAnswering"),WMt.forEach(t),oze.forEach(t),JOe=i(f),Vo=n(f,"DIV",{class:!0});var fl=s(Vo);T(v8.$$.fragment,fl),Fnr=i(fl),Md=n(fl,"P",{});var nre=s(Md);Tnr=r(nre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),QQ=n(nre,"A",{href:!0});var HMt=s(QQ);Mnr=r(HMt,"from_pretrained()"),HMt.forEach(t),Enr=r(nre," class method or the "),WQ=n(nre,"A",{href:!0});var UMt=s(WQ);Cnr=r(UMt,"from_config()"),UMt.forEach(t),wnr=r(nre,` class
method.`),nre.forEach(t),Anr=i(fl),F8=n(fl,"P",{});var rze=s(F8);Lnr=r(rze,"This class cannot be instantiated directly using "),A2e=n(rze,"CODE",{});var JMt=s(A2e);ynr=r(JMt,"__init__()"),JMt.forEach(t),xnr=r(rze," (throws an error)."),rze.forEach(t),$nr=i(fl),vt=n(fl,"DIV",{class:!0});var dL=s(vt);T(T8.$$.fragment,dL),knr=i(dL),L2e=n(dL,"P",{});var YMt=s(L2e);Snr=r(YMt,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),YMt.forEach(t),Rnr=i(dL),Ed=n(dL,"P",{});var sre=s(Ed);Pnr=r(sre,`Note:
Loading a model from its configuration file does `),y2e=n(sre,"STRONG",{});var KMt=s(y2e);Bnr=r(KMt,"not"),KMt.forEach(t),Inr=r(sre,` load the model weights. It only affects the
model\u2019s configuration. Use `),HQ=n(sre,"A",{href:!0});var ZMt=s(HQ);Nnr=r(ZMt,"from_pretrained()"),ZMt.forEach(t),qnr=r(sre," to load the model weights."),sre.forEach(t),jnr=i(dL),T(uv.$$.fragment,dL),dL.forEach(t),Dnr=i(fl),co=n(fl,"DIV",{class:!0});var ba=s(co);T(M8.$$.fragment,ba),Gnr=i(ba),x2e=n(ba,"P",{});var eEt=s(x2e);Onr=r(eEt,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),eEt.forEach(t),Vnr=i(ba),Qa=n(ba,"P",{});var cL=s(Qa);Xnr=r(cL,"The model class to instantiate is selected based on the "),$2e=n(cL,"CODE",{});var oEt=s($2e);znr=r(oEt,"model_type"),oEt.forEach(t),Qnr=r(cL,` property of the config object (either
passed as an argument or loaded from `),k2e=n(cL,"CODE",{});var rEt=s(k2e);Wnr=r(rEt,"pretrained_model_name_or_path"),rEt.forEach(t),Hnr=r(cL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S2e=n(cL,"CODE",{});var tEt=s(S2e);Unr=r(tEt,"pretrained_model_name_or_path"),tEt.forEach(t),Jnr=r(cL,":"),cL.forEach(t),Ynr=i(ba),R2e=n(ba,"UL",{});var aEt=s(R2e);bv=n(aEt,"LI",{});var bBe=s(bv);P2e=n(bBe,"STRONG",{});var nEt=s(P2e);Knr=r(nEt,"vilt"),nEt.forEach(t),Znr=r(bBe," \u2014 "),UQ=n(bBe,"A",{href:!0});var sEt=s(UQ);esr=r(sEt,"ViltForQuestionAnswering"),sEt.forEach(t),osr=r(bBe," (ViLT model)"),bBe.forEach(t),aEt.forEach(t),rsr=i(ba),vv=n(ba,"P",{});var vBe=s(vv);tsr=r(vBe,"The model is set in evaluation mode by default using "),B2e=n(vBe,"CODE",{});var lEt=s(B2e);asr=r(lEt,"model.eval()"),lEt.forEach(t),nsr=r(vBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),I2e=n(vBe,"CODE",{});var iEt=s(I2e);ssr=r(iEt,"model.train()"),iEt.forEach(t),vBe.forEach(t),lsr=i(ba),T(Fv.$$.fragment,ba),ba.forEach(t),fl.forEach(t),YOe=i(f),Cd=n(f,"H2",{class:!0});var tze=s(Cd);Tv=n(tze,"A",{id:!0,class:!0,href:!0});var dEt=s(Tv);N2e=n(dEt,"SPAN",{});var cEt=s(N2e);T(E8.$$.fragment,cEt),cEt.forEach(t),dEt.forEach(t),isr=i(tze),q2e=n(tze,"SPAN",{});var fEt=s(q2e);dsr=r(fEt,"AutoModelForAudioClassification"),fEt.forEach(t),tze.forEach(t),KOe=i(f),Xo=n(f,"DIV",{class:!0});var ml=s(Xo);T(C8.$$.fragment,ml),csr=i(ml),wd=n(ml,"P",{});var lre=s(wd);fsr=r(lre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),JQ=n(lre,"A",{href:!0});var mEt=s(JQ);msr=r(mEt,"from_pretrained()"),mEt.forEach(t),gsr=r(lre," class method or the "),YQ=n(lre,"A",{href:!0});var gEt=s(YQ);hsr=r(gEt,"from_config()"),gEt.forEach(t),psr=r(lre,` class
method.`),lre.forEach(t),_sr=i(ml),w8=n(ml,"P",{});var aze=s(w8);usr=r(aze,"This class cannot be instantiated directly using "),j2e=n(aze,"CODE",{});var hEt=s(j2e);bsr=r(hEt,"__init__()"),hEt.forEach(t),vsr=r(aze," (throws an error)."),aze.forEach(t),Fsr=i(ml),Ft=n(ml,"DIV",{class:!0});var fL=s(Ft);T(A8.$$.fragment,fL),Tsr=i(fL),D2e=n(fL,"P",{});var pEt=s(D2e);Msr=r(pEt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),pEt.forEach(t),Esr=i(fL),Ad=n(fL,"P",{});var ire=s(Ad);Csr=r(ire,`Note:
Loading a model from its configuration file does `),G2e=n(ire,"STRONG",{});var _Et=s(G2e);wsr=r(_Et,"not"),_Et.forEach(t),Asr=r(ire,` load the model weights. It only affects the
model\u2019s configuration. Use `),KQ=n(ire,"A",{href:!0});var uEt=s(KQ);Lsr=r(uEt,"from_pretrained()"),uEt.forEach(t),ysr=r(ire," to load the model weights."),ire.forEach(t),xsr=i(fL),T(Mv.$$.fragment,fL),fL.forEach(t),$sr=i(ml),fo=n(ml,"DIV",{class:!0});var va=s(fo);T(L8.$$.fragment,va),ksr=i(va),O2e=n(va,"P",{});var bEt=s(O2e);Ssr=r(bEt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),bEt.forEach(t),Rsr=i(va),Wa=n(va,"P",{});var mL=s(Wa);Psr=r(mL,"The model class to instantiate is selected based on the "),V2e=n(mL,"CODE",{});var vEt=s(V2e);Bsr=r(vEt,"model_type"),vEt.forEach(t),Isr=r(mL,` property of the config object (either
passed as an argument or loaded from `),X2e=n(mL,"CODE",{});var FEt=s(X2e);Nsr=r(FEt,"pretrained_model_name_or_path"),FEt.forEach(t),qsr=r(mL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z2e=n(mL,"CODE",{});var TEt=s(z2e);jsr=r(TEt,"pretrained_model_name_or_path"),TEt.forEach(t),Dsr=r(mL,":"),mL.forEach(t),Gsr=i(va),Pe=n(va,"UL",{});var ze=s(Pe);Ev=n(ze,"LI",{});var FBe=s(Ev);Q2e=n(FBe,"STRONG",{});var MEt=s(Q2e);Osr=r(MEt,"data2vec-audio"),MEt.forEach(t),Vsr=r(FBe," \u2014 "),ZQ=n(FBe,"A",{href:!0});var EEt=s(ZQ);Xsr=r(EEt,"Data2VecAudioForSequenceClassification"),EEt.forEach(t),zsr=r(FBe," (Data2VecAudio model)"),FBe.forEach(t),Qsr=i(ze),Cv=n(ze,"LI",{});var TBe=s(Cv);W2e=n(TBe,"STRONG",{});var CEt=s(W2e);Wsr=r(CEt,"hubert"),CEt.forEach(t),Hsr=r(TBe," \u2014 "),eW=n(TBe,"A",{href:!0});var wEt=s(eW);Usr=r(wEt,"HubertForSequenceClassification"),wEt.forEach(t),Jsr=r(TBe," (Hubert model)"),TBe.forEach(t),Ysr=i(ze),wv=n(ze,"LI",{});var MBe=s(wv);H2e=n(MBe,"STRONG",{});var AEt=s(H2e);Ksr=r(AEt,"sew"),AEt.forEach(t),Zsr=r(MBe," \u2014 "),oW=n(MBe,"A",{href:!0});var LEt=s(oW);elr=r(LEt,"SEWForSequenceClassification"),LEt.forEach(t),olr=r(MBe," (SEW model)"),MBe.forEach(t),rlr=i(ze),Av=n(ze,"LI",{});var EBe=s(Av);U2e=n(EBe,"STRONG",{});var yEt=s(U2e);tlr=r(yEt,"sew-d"),yEt.forEach(t),alr=r(EBe," \u2014 "),rW=n(EBe,"A",{href:!0});var xEt=s(rW);nlr=r(xEt,"SEWDForSequenceClassification"),xEt.forEach(t),slr=r(EBe," (SEW-D model)"),EBe.forEach(t),llr=i(ze),Lv=n(ze,"LI",{});var CBe=s(Lv);J2e=n(CBe,"STRONG",{});var $Et=s(J2e);ilr=r($Et,"unispeech"),$Et.forEach(t),dlr=r(CBe," \u2014 "),tW=n(CBe,"A",{href:!0});var kEt=s(tW);clr=r(kEt,"UniSpeechForSequenceClassification"),kEt.forEach(t),flr=r(CBe," (UniSpeech model)"),CBe.forEach(t),mlr=i(ze),yv=n(ze,"LI",{});var wBe=s(yv);Y2e=n(wBe,"STRONG",{});var SEt=s(Y2e);glr=r(SEt,"unispeech-sat"),SEt.forEach(t),hlr=r(wBe," \u2014 "),aW=n(wBe,"A",{href:!0});var REt=s(aW);plr=r(REt,"UniSpeechSatForSequenceClassification"),REt.forEach(t),_lr=r(wBe," (UniSpeechSat model)"),wBe.forEach(t),ulr=i(ze),xv=n(ze,"LI",{});var ABe=s(xv);K2e=n(ABe,"STRONG",{});var PEt=s(K2e);blr=r(PEt,"wav2vec2"),PEt.forEach(t),vlr=r(ABe," \u2014 "),nW=n(ABe,"A",{href:!0});var BEt=s(nW);Flr=r(BEt,"Wav2Vec2ForSequenceClassification"),BEt.forEach(t),Tlr=r(ABe," (Wav2Vec2 model)"),ABe.forEach(t),Mlr=i(ze),$v=n(ze,"LI",{});var LBe=s($v);Z2e=n(LBe,"STRONG",{});var IEt=s(Z2e);Elr=r(IEt,"wav2vec2-conformer"),IEt.forEach(t),Clr=r(LBe," \u2014 "),sW=n(LBe,"A",{href:!0});var NEt=s(sW);wlr=r(NEt,"Wav2Vec2ConformerForSequenceClassification"),NEt.forEach(t),Alr=r(LBe," (Wav2Vec2-Conformer model)"),LBe.forEach(t),Llr=i(ze),kv=n(ze,"LI",{});var yBe=s(kv);ebe=n(yBe,"STRONG",{});var qEt=s(ebe);ylr=r(qEt,"wavlm"),qEt.forEach(t),xlr=r(yBe," \u2014 "),lW=n(yBe,"A",{href:!0});var jEt=s(lW);$lr=r(jEt,"WavLMForSequenceClassification"),jEt.forEach(t),klr=r(yBe," (WavLM model)"),yBe.forEach(t),ze.forEach(t),Slr=i(va),Sv=n(va,"P",{});var xBe=s(Sv);Rlr=r(xBe,"The model is set in evaluation mode by default using "),obe=n(xBe,"CODE",{});var DEt=s(obe);Plr=r(DEt,"model.eval()"),DEt.forEach(t),Blr=r(xBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rbe=n(xBe,"CODE",{});var GEt=s(rbe);Ilr=r(GEt,"model.train()"),GEt.forEach(t),xBe.forEach(t),Nlr=i(va),T(Rv.$$.fragment,va),va.forEach(t),ml.forEach(t),ZOe=i(f),Ld=n(f,"H2",{class:!0});var nze=s(Ld);Pv=n(nze,"A",{id:!0,class:!0,href:!0});var OEt=s(Pv);tbe=n(OEt,"SPAN",{});var VEt=s(tbe);T(y8.$$.fragment,VEt),VEt.forEach(t),OEt.forEach(t),qlr=i(nze),abe=n(nze,"SPAN",{});var XEt=s(abe);jlr=r(XEt,"AutoModelForAudioFrameClassification"),XEt.forEach(t),nze.forEach(t),eVe=i(f),zo=n(f,"DIV",{class:!0});var gl=s(zo);T(x8.$$.fragment,gl),Dlr=i(gl),yd=n(gl,"P",{});var dre=s(yd);Glr=r(dre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),iW=n(dre,"A",{href:!0});var zEt=s(iW);Olr=r(zEt,"from_pretrained()"),zEt.forEach(t),Vlr=r(dre," class method or the "),dW=n(dre,"A",{href:!0});var QEt=s(dW);Xlr=r(QEt,"from_config()"),QEt.forEach(t),zlr=r(dre,` class
method.`),dre.forEach(t),Qlr=i(gl),$8=n(gl,"P",{});var sze=s($8);Wlr=r(sze,"This class cannot be instantiated directly using "),nbe=n(sze,"CODE",{});var WEt=s(nbe);Hlr=r(WEt,"__init__()"),WEt.forEach(t),Ulr=r(sze," (throws an error)."),sze.forEach(t),Jlr=i(gl),Tt=n(gl,"DIV",{class:!0});var gL=s(Tt);T(k8.$$.fragment,gL),Ylr=i(gL),sbe=n(gL,"P",{});var HEt=s(sbe);Klr=r(HEt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),HEt.forEach(t),Zlr=i(gL),xd=n(gL,"P",{});var cre=s(xd);eir=r(cre,`Note:
Loading a model from its configuration file does `),lbe=n(cre,"STRONG",{});var UEt=s(lbe);oir=r(UEt,"not"),UEt.forEach(t),rir=r(cre,` load the model weights. It only affects the
model\u2019s configuration. Use `),cW=n(cre,"A",{href:!0});var JEt=s(cW);tir=r(JEt,"from_pretrained()"),JEt.forEach(t),air=r(cre," to load the model weights."),cre.forEach(t),nir=i(gL),T(Bv.$$.fragment,gL),gL.forEach(t),sir=i(gl),mo=n(gl,"DIV",{class:!0});var Fa=s(mo);T(S8.$$.fragment,Fa),lir=i(Fa),ibe=n(Fa,"P",{});var YEt=s(ibe);iir=r(YEt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),YEt.forEach(t),dir=i(Fa),Ha=n(Fa,"P",{});var hL=s(Ha);cir=r(hL,"The model class to instantiate is selected based on the "),dbe=n(hL,"CODE",{});var KEt=s(dbe);fir=r(KEt,"model_type"),KEt.forEach(t),mir=r(hL,` property of the config object (either
passed as an argument or loaded from `),cbe=n(hL,"CODE",{});var ZEt=s(cbe);gir=r(ZEt,"pretrained_model_name_or_path"),ZEt.forEach(t),hir=r(hL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fbe=n(hL,"CODE",{});var eCt=s(fbe);pir=r(eCt,"pretrained_model_name_or_path"),eCt.forEach(t),_ir=r(hL,":"),hL.forEach(t),uir=i(Fa),et=n(Fa,"UL",{});var hl=s(et);Iv=n(hl,"LI",{});var $Be=s(Iv);mbe=n($Be,"STRONG",{});var oCt=s(mbe);bir=r(oCt,"data2vec-audio"),oCt.forEach(t),vir=r($Be," \u2014 "),fW=n($Be,"A",{href:!0});var rCt=s(fW);Fir=r(rCt,"Data2VecAudioForAudioFrameClassification"),rCt.forEach(t),Tir=r($Be," (Data2VecAudio model)"),$Be.forEach(t),Mir=i(hl),Nv=n(hl,"LI",{});var kBe=s(Nv);gbe=n(kBe,"STRONG",{});var tCt=s(gbe);Eir=r(tCt,"unispeech-sat"),tCt.forEach(t),Cir=r(kBe," \u2014 "),mW=n(kBe,"A",{href:!0});var aCt=s(mW);wir=r(aCt,"UniSpeechSatForAudioFrameClassification"),aCt.forEach(t),Air=r(kBe," (UniSpeechSat model)"),kBe.forEach(t),Lir=i(hl),qv=n(hl,"LI",{});var SBe=s(qv);hbe=n(SBe,"STRONG",{});var nCt=s(hbe);yir=r(nCt,"wav2vec2"),nCt.forEach(t),xir=r(SBe," \u2014 "),gW=n(SBe,"A",{href:!0});var sCt=s(gW);$ir=r(sCt,"Wav2Vec2ForAudioFrameClassification"),sCt.forEach(t),kir=r(SBe," (Wav2Vec2 model)"),SBe.forEach(t),Sir=i(hl),jv=n(hl,"LI",{});var RBe=s(jv);pbe=n(RBe,"STRONG",{});var lCt=s(pbe);Rir=r(lCt,"wav2vec2-conformer"),lCt.forEach(t),Pir=r(RBe," \u2014 "),hW=n(RBe,"A",{href:!0});var iCt=s(hW);Bir=r(iCt,"Wav2Vec2ConformerForAudioFrameClassification"),iCt.forEach(t),Iir=r(RBe," (Wav2Vec2-Conformer model)"),RBe.forEach(t),Nir=i(hl),Dv=n(hl,"LI",{});var PBe=s(Dv);_be=n(PBe,"STRONG",{});var dCt=s(_be);qir=r(dCt,"wavlm"),dCt.forEach(t),jir=r(PBe," \u2014 "),pW=n(PBe,"A",{href:!0});var cCt=s(pW);Dir=r(cCt,"WavLMForAudioFrameClassification"),cCt.forEach(t),Gir=r(PBe," (WavLM model)"),PBe.forEach(t),hl.forEach(t),Oir=i(Fa),Gv=n(Fa,"P",{});var BBe=s(Gv);Vir=r(BBe,"The model is set in evaluation mode by default using "),ube=n(BBe,"CODE",{});var fCt=s(ube);Xir=r(fCt,"model.eval()"),fCt.forEach(t),zir=r(BBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bbe=n(BBe,"CODE",{});var mCt=s(bbe);Qir=r(mCt,"model.train()"),mCt.forEach(t),BBe.forEach(t),Wir=i(Fa),T(Ov.$$.fragment,Fa),Fa.forEach(t),gl.forEach(t),oVe=i(f),$d=n(f,"H2",{class:!0});var lze=s($d);Vv=n(lze,"A",{id:!0,class:!0,href:!0});var gCt=s(Vv);vbe=n(gCt,"SPAN",{});var hCt=s(vbe);T(R8.$$.fragment,hCt),hCt.forEach(t),gCt.forEach(t),Hir=i(lze),Fbe=n(lze,"SPAN",{});var pCt=s(Fbe);Uir=r(pCt,"AutoModelForCTC"),pCt.forEach(t),lze.forEach(t),rVe=i(f),Qo=n(f,"DIV",{class:!0});var pl=s(Qo);T(P8.$$.fragment,pl),Jir=i(pl),kd=n(pl,"P",{});var fre=s(kd);Yir=r(fre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),_W=n(fre,"A",{href:!0});var _Ct=s(_W);Kir=r(_Ct,"from_pretrained()"),_Ct.forEach(t),Zir=r(fre," class method or the "),uW=n(fre,"A",{href:!0});var uCt=s(uW);edr=r(uCt,"from_config()"),uCt.forEach(t),odr=r(fre,` class
method.`),fre.forEach(t),rdr=i(pl),B8=n(pl,"P",{});var ize=s(B8);tdr=r(ize,"This class cannot be instantiated directly using "),Tbe=n(ize,"CODE",{});var bCt=s(Tbe);adr=r(bCt,"__init__()"),bCt.forEach(t),ndr=r(ize," (throws an error)."),ize.forEach(t),sdr=i(pl),Mt=n(pl,"DIV",{class:!0});var pL=s(Mt);T(I8.$$.fragment,pL),ldr=i(pL),Mbe=n(pL,"P",{});var vCt=s(Mbe);idr=r(vCt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),vCt.forEach(t),ddr=i(pL),Sd=n(pL,"P",{});var mre=s(Sd);cdr=r(mre,`Note:
Loading a model from its configuration file does `),Ebe=n(mre,"STRONG",{});var FCt=s(Ebe);fdr=r(FCt,"not"),FCt.forEach(t),mdr=r(mre,` load the model weights. It only affects the
model\u2019s configuration. Use `),bW=n(mre,"A",{href:!0});var TCt=s(bW);gdr=r(TCt,"from_pretrained()"),TCt.forEach(t),hdr=r(mre," to load the model weights."),mre.forEach(t),pdr=i(pL),T(Xv.$$.fragment,pL),pL.forEach(t),_dr=i(pl),go=n(pl,"DIV",{class:!0});var Ta=s(go);T(N8.$$.fragment,Ta),udr=i(Ta),Cbe=n(Ta,"P",{});var MCt=s(Cbe);bdr=r(MCt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),MCt.forEach(t),vdr=i(Ta),Ua=n(Ta,"P",{});var _L=s(Ua);Fdr=r(_L,"The model class to instantiate is selected based on the "),wbe=n(_L,"CODE",{});var ECt=s(wbe);Tdr=r(ECt,"model_type"),ECt.forEach(t),Mdr=r(_L,` property of the config object (either
passed as an argument or loaded from `),Abe=n(_L,"CODE",{});var CCt=s(Abe);Edr=r(CCt,"pretrained_model_name_or_path"),CCt.forEach(t),Cdr=r(_L,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lbe=n(_L,"CODE",{});var wCt=s(Lbe);wdr=r(wCt,"pretrained_model_name_or_path"),wCt.forEach(t),Adr=r(_L,":"),_L.forEach(t),Ldr=i(Ta),Le=n(Ta,"UL",{});var Be=s(Le);zv=n(Be,"LI",{});var IBe=s(zv);ybe=n(IBe,"STRONG",{});var ACt=s(ybe);ydr=r(ACt,"data2vec-audio"),ACt.forEach(t),xdr=r(IBe," \u2014 "),vW=n(IBe,"A",{href:!0});var LCt=s(vW);$dr=r(LCt,"Data2VecAudioForCTC"),LCt.forEach(t),kdr=r(IBe," (Data2VecAudio model)"),IBe.forEach(t),Sdr=i(Be),Qv=n(Be,"LI",{});var NBe=s(Qv);xbe=n(NBe,"STRONG",{});var yCt=s(xbe);Rdr=r(yCt,"hubert"),yCt.forEach(t),Pdr=r(NBe," \u2014 "),FW=n(NBe,"A",{href:!0});var xCt=s(FW);Bdr=r(xCt,"HubertForCTC"),xCt.forEach(t),Idr=r(NBe," (Hubert model)"),NBe.forEach(t),Ndr=i(Be),Wv=n(Be,"LI",{});var qBe=s(Wv);$be=n(qBe,"STRONG",{});var $Ct=s($be);qdr=r($Ct,"mctct"),$Ct.forEach(t),jdr=r(qBe," \u2014 "),TW=n(qBe,"A",{href:!0});var kCt=s(TW);Ddr=r(kCt,"MCTCTForCTC"),kCt.forEach(t),Gdr=r(qBe," (M-CTC-T model)"),qBe.forEach(t),Odr=i(Be),Hv=n(Be,"LI",{});var jBe=s(Hv);kbe=n(jBe,"STRONG",{});var SCt=s(kbe);Vdr=r(SCt,"sew"),SCt.forEach(t),Xdr=r(jBe," \u2014 "),MW=n(jBe,"A",{href:!0});var RCt=s(MW);zdr=r(RCt,"SEWForCTC"),RCt.forEach(t),Qdr=r(jBe," (SEW model)"),jBe.forEach(t),Wdr=i(Be),Uv=n(Be,"LI",{});var DBe=s(Uv);Sbe=n(DBe,"STRONG",{});var PCt=s(Sbe);Hdr=r(PCt,"sew-d"),PCt.forEach(t),Udr=r(DBe," \u2014 "),EW=n(DBe,"A",{href:!0});var BCt=s(EW);Jdr=r(BCt,"SEWDForCTC"),BCt.forEach(t),Ydr=r(DBe," (SEW-D model)"),DBe.forEach(t),Kdr=i(Be),Jv=n(Be,"LI",{});var GBe=s(Jv);Rbe=n(GBe,"STRONG",{});var ICt=s(Rbe);Zdr=r(ICt,"unispeech"),ICt.forEach(t),ecr=r(GBe," \u2014 "),CW=n(GBe,"A",{href:!0});var NCt=s(CW);ocr=r(NCt,"UniSpeechForCTC"),NCt.forEach(t),rcr=r(GBe," (UniSpeech model)"),GBe.forEach(t),tcr=i(Be),Yv=n(Be,"LI",{});var OBe=s(Yv);Pbe=n(OBe,"STRONG",{});var qCt=s(Pbe);acr=r(qCt,"unispeech-sat"),qCt.forEach(t),ncr=r(OBe," \u2014 "),wW=n(OBe,"A",{href:!0});var jCt=s(wW);scr=r(jCt,"UniSpeechSatForCTC"),jCt.forEach(t),lcr=r(OBe," (UniSpeechSat model)"),OBe.forEach(t),icr=i(Be),Kv=n(Be,"LI",{});var VBe=s(Kv);Bbe=n(VBe,"STRONG",{});var DCt=s(Bbe);dcr=r(DCt,"wav2vec2"),DCt.forEach(t),ccr=r(VBe," \u2014 "),AW=n(VBe,"A",{href:!0});var GCt=s(AW);fcr=r(GCt,"Wav2Vec2ForCTC"),GCt.forEach(t),mcr=r(VBe," (Wav2Vec2 model)"),VBe.forEach(t),gcr=i(Be),Zv=n(Be,"LI",{});var XBe=s(Zv);Ibe=n(XBe,"STRONG",{});var OCt=s(Ibe);hcr=r(OCt,"wav2vec2-conformer"),OCt.forEach(t),pcr=r(XBe," \u2014 "),LW=n(XBe,"A",{href:!0});var VCt=s(LW);_cr=r(VCt,"Wav2Vec2ConformerForCTC"),VCt.forEach(t),ucr=r(XBe," (Wav2Vec2-Conformer model)"),XBe.forEach(t),bcr=i(Be),eF=n(Be,"LI",{});var zBe=s(eF);Nbe=n(zBe,"STRONG",{});var XCt=s(Nbe);vcr=r(XCt,"wavlm"),XCt.forEach(t),Fcr=r(zBe," \u2014 "),yW=n(zBe,"A",{href:!0});var zCt=s(yW);Tcr=r(zCt,"WavLMForCTC"),zCt.forEach(t),Mcr=r(zBe," (WavLM model)"),zBe.forEach(t),Be.forEach(t),Ecr=i(Ta),oF=n(Ta,"P",{});var QBe=s(oF);Ccr=r(QBe,"The model is set in evaluation mode by default using "),qbe=n(QBe,"CODE",{});var QCt=s(qbe);wcr=r(QCt,"model.eval()"),QCt.forEach(t),Acr=r(QBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jbe=n(QBe,"CODE",{});var WCt=s(jbe);Lcr=r(WCt,"model.train()"),WCt.forEach(t),QBe.forEach(t),ycr=i(Ta),T(rF.$$.fragment,Ta),Ta.forEach(t),pl.forEach(t),tVe=i(f),Rd=n(f,"H2",{class:!0});var dze=s(Rd);tF=n(dze,"A",{id:!0,class:!0,href:!0});var HCt=s(tF);Dbe=n(HCt,"SPAN",{});var UCt=s(Dbe);T(q8.$$.fragment,UCt),UCt.forEach(t),HCt.forEach(t),xcr=i(dze),Gbe=n(dze,"SPAN",{});var JCt=s(Gbe);$cr=r(JCt,"AutoModelForSpeechSeq2Seq"),JCt.forEach(t),dze.forEach(t),aVe=i(f),Wo=n(f,"DIV",{class:!0});var _l=s(Wo);T(j8.$$.fragment,_l),kcr=i(_l),Pd=n(_l,"P",{});var gre=s(Pd);Scr=r(gre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),xW=n(gre,"A",{href:!0});var YCt=s(xW);Rcr=r(YCt,"from_pretrained()"),YCt.forEach(t),Pcr=r(gre," class method or the "),$W=n(gre,"A",{href:!0});var KCt=s($W);Bcr=r(KCt,"from_config()"),KCt.forEach(t),Icr=r(gre,` class
method.`),gre.forEach(t),Ncr=i(_l),D8=n(_l,"P",{});var cze=s(D8);qcr=r(cze,"This class cannot be instantiated directly using "),Obe=n(cze,"CODE",{});var ZCt=s(Obe);jcr=r(ZCt,"__init__()"),ZCt.forEach(t),Dcr=r(cze," (throws an error)."),cze.forEach(t),Gcr=i(_l),Et=n(_l,"DIV",{class:!0});var uL=s(Et);T(G8.$$.fragment,uL),Ocr=i(uL),Vbe=n(uL,"P",{});var e0t=s(Vbe);Vcr=r(e0t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),e0t.forEach(t),Xcr=i(uL),Bd=n(uL,"P",{});var hre=s(Bd);zcr=r(hre,`Note:
Loading a model from its configuration file does `),Xbe=n(hre,"STRONG",{});var o0t=s(Xbe);Qcr=r(o0t,"not"),o0t.forEach(t),Wcr=r(hre,` load the model weights. It only affects the
model\u2019s configuration. Use `),kW=n(hre,"A",{href:!0});var r0t=s(kW);Hcr=r(r0t,"from_pretrained()"),r0t.forEach(t),Ucr=r(hre," to load the model weights."),hre.forEach(t),Jcr=i(uL),T(aF.$$.fragment,uL),uL.forEach(t),Ycr=i(_l),ho=n(_l,"DIV",{class:!0});var Ma=s(ho);T(O8.$$.fragment,Ma),Kcr=i(Ma),zbe=n(Ma,"P",{});var t0t=s(zbe);Zcr=r(t0t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),t0t.forEach(t),efr=i(Ma),Ja=n(Ma,"P",{});var bL=s(Ja);ofr=r(bL,"The model class to instantiate is selected based on the "),Qbe=n(bL,"CODE",{});var a0t=s(Qbe);rfr=r(a0t,"model_type"),a0t.forEach(t),tfr=r(bL,` property of the config object (either
passed as an argument or loaded from `),Wbe=n(bL,"CODE",{});var n0t=s(Wbe);afr=r(n0t,"pretrained_model_name_or_path"),n0t.forEach(t),nfr=r(bL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hbe=n(bL,"CODE",{});var s0t=s(Hbe);sfr=r(s0t,"pretrained_model_name_or_path"),s0t.forEach(t),lfr=r(bL,":"),bL.forEach(t),ifr=i(Ma),V8=n(Ma,"UL",{});var fze=s(V8);nF=n(fze,"LI",{});var WBe=s(nF);Ube=n(WBe,"STRONG",{});var l0t=s(Ube);dfr=r(l0t,"speech-encoder-decoder"),l0t.forEach(t),cfr=r(WBe," \u2014 "),SW=n(WBe,"A",{href:!0});var i0t=s(SW);ffr=r(i0t,"SpeechEncoderDecoderModel"),i0t.forEach(t),mfr=r(WBe," (Speech Encoder decoder model)"),WBe.forEach(t),gfr=i(fze),sF=n(fze,"LI",{});var HBe=s(sF);Jbe=n(HBe,"STRONG",{});var d0t=s(Jbe);hfr=r(d0t,"speech_to_text"),d0t.forEach(t),pfr=r(HBe," \u2014 "),RW=n(HBe,"A",{href:!0});var c0t=s(RW);_fr=r(c0t,"Speech2TextForConditionalGeneration"),c0t.forEach(t),ufr=r(HBe," (Speech2Text model)"),HBe.forEach(t),fze.forEach(t),bfr=i(Ma),lF=n(Ma,"P",{});var UBe=s(lF);vfr=r(UBe,"The model is set in evaluation mode by default using "),Ybe=n(UBe,"CODE",{});var f0t=s(Ybe);Ffr=r(f0t,"model.eval()"),f0t.forEach(t),Tfr=r(UBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kbe=n(UBe,"CODE",{});var m0t=s(Kbe);Mfr=r(m0t,"model.train()"),m0t.forEach(t),UBe.forEach(t),Efr=i(Ma),T(iF.$$.fragment,Ma),Ma.forEach(t),_l.forEach(t),nVe=i(f),Id=n(f,"H2",{class:!0});var mze=s(Id);dF=n(mze,"A",{id:!0,class:!0,href:!0});var g0t=s(dF);Zbe=n(g0t,"SPAN",{});var h0t=s(Zbe);T(X8.$$.fragment,h0t),h0t.forEach(t),g0t.forEach(t),Cfr=i(mze),e4e=n(mze,"SPAN",{});var p0t=s(e4e);wfr=r(p0t,"AutoModelForAudioXVector"),p0t.forEach(t),mze.forEach(t),sVe=i(f),Ho=n(f,"DIV",{class:!0});var ul=s(Ho);T(z8.$$.fragment,ul),Afr=i(ul),Nd=n(ul,"P",{});var pre=s(Nd);Lfr=r(pre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),PW=n(pre,"A",{href:!0});var _0t=s(PW);yfr=r(_0t,"from_pretrained()"),_0t.forEach(t),xfr=r(pre," class method or the "),BW=n(pre,"A",{href:!0});var u0t=s(BW);$fr=r(u0t,"from_config()"),u0t.forEach(t),kfr=r(pre,` class
method.`),pre.forEach(t),Sfr=i(ul),Q8=n(ul,"P",{});var gze=s(Q8);Rfr=r(gze,"This class cannot be instantiated directly using "),o4e=n(gze,"CODE",{});var b0t=s(o4e);Pfr=r(b0t,"__init__()"),b0t.forEach(t),Bfr=r(gze," (throws an error)."),gze.forEach(t),Ifr=i(ul),Ct=n(ul,"DIV",{class:!0});var vL=s(Ct);T(W8.$$.fragment,vL),Nfr=i(vL),r4e=n(vL,"P",{});var v0t=s(r4e);qfr=r(v0t,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),v0t.forEach(t),jfr=i(vL),qd=n(vL,"P",{});var _re=s(qd);Dfr=r(_re,`Note:
Loading a model from its configuration file does `),t4e=n(_re,"STRONG",{});var F0t=s(t4e);Gfr=r(F0t,"not"),F0t.forEach(t),Ofr=r(_re,` load the model weights. It only affects the
model\u2019s configuration. Use `),IW=n(_re,"A",{href:!0});var T0t=s(IW);Vfr=r(T0t,"from_pretrained()"),T0t.forEach(t),Xfr=r(_re," to load the model weights."),_re.forEach(t),zfr=i(vL),T(cF.$$.fragment,vL),vL.forEach(t),Qfr=i(ul),po=n(ul,"DIV",{class:!0});var Ea=s(po);T(H8.$$.fragment,Ea),Wfr=i(Ea),a4e=n(Ea,"P",{});var M0t=s(a4e);Hfr=r(M0t,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),M0t.forEach(t),Ufr=i(Ea),Ya=n(Ea,"P",{});var FL=s(Ya);Jfr=r(FL,"The model class to instantiate is selected based on the "),n4e=n(FL,"CODE",{});var E0t=s(n4e);Yfr=r(E0t,"model_type"),E0t.forEach(t),Kfr=r(FL,` property of the config object (either
passed as an argument or loaded from `),s4e=n(FL,"CODE",{});var C0t=s(s4e);Zfr=r(C0t,"pretrained_model_name_or_path"),C0t.forEach(t),emr=r(FL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l4e=n(FL,"CODE",{});var w0t=s(l4e);omr=r(w0t,"pretrained_model_name_or_path"),w0t.forEach(t),rmr=r(FL,":"),FL.forEach(t),tmr=i(Ea),ot=n(Ea,"UL",{});var bl=s(ot);fF=n(bl,"LI",{});var JBe=s(fF);i4e=n(JBe,"STRONG",{});var A0t=s(i4e);amr=r(A0t,"data2vec-audio"),A0t.forEach(t),nmr=r(JBe," \u2014 "),NW=n(JBe,"A",{href:!0});var L0t=s(NW);smr=r(L0t,"Data2VecAudioForXVector"),L0t.forEach(t),lmr=r(JBe," (Data2VecAudio model)"),JBe.forEach(t),imr=i(bl),mF=n(bl,"LI",{});var YBe=s(mF);d4e=n(YBe,"STRONG",{});var y0t=s(d4e);dmr=r(y0t,"unispeech-sat"),y0t.forEach(t),cmr=r(YBe," \u2014 "),qW=n(YBe,"A",{href:!0});var x0t=s(qW);fmr=r(x0t,"UniSpeechSatForXVector"),x0t.forEach(t),mmr=r(YBe," (UniSpeechSat model)"),YBe.forEach(t),gmr=i(bl),gF=n(bl,"LI",{});var KBe=s(gF);c4e=n(KBe,"STRONG",{});var $0t=s(c4e);hmr=r($0t,"wav2vec2"),$0t.forEach(t),pmr=r(KBe," \u2014 "),jW=n(KBe,"A",{href:!0});var k0t=s(jW);_mr=r(k0t,"Wav2Vec2ForXVector"),k0t.forEach(t),umr=r(KBe," (Wav2Vec2 model)"),KBe.forEach(t),bmr=i(bl),hF=n(bl,"LI",{});var ZBe=s(hF);f4e=n(ZBe,"STRONG",{});var S0t=s(f4e);vmr=r(S0t,"wav2vec2-conformer"),S0t.forEach(t),Fmr=r(ZBe," \u2014 "),DW=n(ZBe,"A",{href:!0});var R0t=s(DW);Tmr=r(R0t,"Wav2Vec2ConformerForXVector"),R0t.forEach(t),Mmr=r(ZBe," (Wav2Vec2-Conformer model)"),ZBe.forEach(t),Emr=i(bl),pF=n(bl,"LI",{});var eIe=s(pF);m4e=n(eIe,"STRONG",{});var P0t=s(m4e);Cmr=r(P0t,"wavlm"),P0t.forEach(t),wmr=r(eIe," \u2014 "),GW=n(eIe,"A",{href:!0});var B0t=s(GW);Amr=r(B0t,"WavLMForXVector"),B0t.forEach(t),Lmr=r(eIe," (WavLM model)"),eIe.forEach(t),bl.forEach(t),ymr=i(Ea),_F=n(Ea,"P",{});var oIe=s(_F);xmr=r(oIe,"The model is set in evaluation mode by default using "),g4e=n(oIe,"CODE",{});var I0t=s(g4e);$mr=r(I0t,"model.eval()"),I0t.forEach(t),kmr=r(oIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),h4e=n(oIe,"CODE",{});var N0t=s(h4e);Smr=r(N0t,"model.train()"),N0t.forEach(t),oIe.forEach(t),Rmr=i(Ea),T(uF.$$.fragment,Ea),Ea.forEach(t),ul.forEach(t),lVe=i(f),jd=n(f,"H2",{class:!0});var hze=s(jd);bF=n(hze,"A",{id:!0,class:!0,href:!0});var q0t=s(bF);p4e=n(q0t,"SPAN",{});var j0t=s(p4e);T(U8.$$.fragment,j0t),j0t.forEach(t),q0t.forEach(t),Pmr=i(hze),_4e=n(hze,"SPAN",{});var D0t=s(_4e);Bmr=r(D0t,"AutoModelForMaskedImageModeling"),D0t.forEach(t),hze.forEach(t),iVe=i(f),Uo=n(f,"DIV",{class:!0});var vl=s(Uo);T(J8.$$.fragment,vl),Imr=i(vl),Dd=n(vl,"P",{});var ure=s(Dd);Nmr=r(ure,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),OW=n(ure,"A",{href:!0});var G0t=s(OW);qmr=r(G0t,"from_pretrained()"),G0t.forEach(t),jmr=r(ure," class method or the "),VW=n(ure,"A",{href:!0});var O0t=s(VW);Dmr=r(O0t,"from_config()"),O0t.forEach(t),Gmr=r(ure,` class
method.`),ure.forEach(t),Omr=i(vl),Y8=n(vl,"P",{});var pze=s(Y8);Vmr=r(pze,"This class cannot be instantiated directly using "),u4e=n(pze,"CODE",{});var V0t=s(u4e);Xmr=r(V0t,"__init__()"),V0t.forEach(t),zmr=r(pze," (throws an error)."),pze.forEach(t),Qmr=i(vl),wt=n(vl,"DIV",{class:!0});var TL=s(wt);T(K8.$$.fragment,TL),Wmr=i(TL),b4e=n(TL,"P",{});var X0t=s(b4e);Hmr=r(X0t,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),X0t.forEach(t),Umr=i(TL),Gd=n(TL,"P",{});var bre=s(Gd);Jmr=r(bre,`Note:
Loading a model from its configuration file does `),v4e=n(bre,"STRONG",{});var z0t=s(v4e);Ymr=r(z0t,"not"),z0t.forEach(t),Kmr=r(bre,` load the model weights. It only affects the
model\u2019s configuration. Use `),XW=n(bre,"A",{href:!0});var Q0t=s(XW);Zmr=r(Q0t,"from_pretrained()"),Q0t.forEach(t),egr=r(bre," to load the model weights."),bre.forEach(t),ogr=i(TL),T(vF.$$.fragment,TL),TL.forEach(t),rgr=i(vl),_o=n(vl,"DIV",{class:!0});var Ca=s(_o);T(Z8.$$.fragment,Ca),tgr=i(Ca),F4e=n(Ca,"P",{});var W0t=s(F4e);agr=r(W0t,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),W0t.forEach(t),ngr=i(Ca),Ka=n(Ca,"P",{});var ML=s(Ka);sgr=r(ML,"The model class to instantiate is selected based on the "),T4e=n(ML,"CODE",{});var H0t=s(T4e);lgr=r(H0t,"model_type"),H0t.forEach(t),igr=r(ML,` property of the config object (either
passed as an argument or loaded from `),M4e=n(ML,"CODE",{});var U0t=s(M4e);dgr=r(U0t,"pretrained_model_name_or_path"),U0t.forEach(t),cgr=r(ML,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E4e=n(ML,"CODE",{});var J0t=s(E4e);fgr=r(J0t,"pretrained_model_name_or_path"),J0t.forEach(t),mgr=r(ML,":"),ML.forEach(t),ggr=i(Ca),Od=n(Ca,"UL",{});var vre=s(Od);FF=n(vre,"LI",{});var rIe=s(FF);C4e=n(rIe,"STRONG",{});var Y0t=s(C4e);hgr=r(Y0t,"deit"),Y0t.forEach(t),pgr=r(rIe," \u2014 "),zW=n(rIe,"A",{href:!0});var K0t=s(zW);_gr=r(K0t,"DeiTForMaskedImageModeling"),K0t.forEach(t),ugr=r(rIe," (DeiT model)"),rIe.forEach(t),bgr=i(vre),TF=n(vre,"LI",{});var tIe=s(TF);w4e=n(tIe,"STRONG",{});var Z0t=s(w4e);vgr=r(Z0t,"swin"),Z0t.forEach(t),Fgr=r(tIe," \u2014 "),QW=n(tIe,"A",{href:!0});var ewt=s(QW);Tgr=r(ewt,"SwinForMaskedImageModeling"),ewt.forEach(t),Mgr=r(tIe," (Swin Transformer model)"),tIe.forEach(t),Egr=i(vre),MF=n(vre,"LI",{});var aIe=s(MF);A4e=n(aIe,"STRONG",{});var owt=s(A4e);Cgr=r(owt,"vit"),owt.forEach(t),wgr=r(aIe," \u2014 "),WW=n(aIe,"A",{href:!0});var rwt=s(WW);Agr=r(rwt,"ViTForMaskedImageModeling"),rwt.forEach(t),Lgr=r(aIe," (ViT model)"),aIe.forEach(t),vre.forEach(t),ygr=i(Ca),EF=n(Ca,"P",{});var nIe=s(EF);xgr=r(nIe,"The model is set in evaluation mode by default using "),L4e=n(nIe,"CODE",{});var twt=s(L4e);$gr=r(twt,"model.eval()"),twt.forEach(t),kgr=r(nIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),y4e=n(nIe,"CODE",{});var awt=s(y4e);Sgr=r(awt,"model.train()"),awt.forEach(t),nIe.forEach(t),Rgr=i(Ca),T(CF.$$.fragment,Ca),Ca.forEach(t),vl.forEach(t),dVe=i(f),Vd=n(f,"H2",{class:!0});var _ze=s(Vd);wF=n(_ze,"A",{id:!0,class:!0,href:!0});var nwt=s(wF);x4e=n(nwt,"SPAN",{});var swt=s(x4e);T(e9.$$.fragment,swt),swt.forEach(t),nwt.forEach(t),Pgr=i(_ze),$4e=n(_ze,"SPAN",{});var lwt=s($4e);Bgr=r(lwt,"AutoModelForObjectDetection"),lwt.forEach(t),_ze.forEach(t),cVe=i(f),Jo=n(f,"DIV",{class:!0});var Fl=s(Jo);T(o9.$$.fragment,Fl),Igr=i(Fl),Xd=n(Fl,"P",{});var Fre=s(Xd);Ngr=r(Fre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),HW=n(Fre,"A",{href:!0});var iwt=s(HW);qgr=r(iwt,"from_pretrained()"),iwt.forEach(t),jgr=r(Fre," class method or the "),UW=n(Fre,"A",{href:!0});var dwt=s(UW);Dgr=r(dwt,"from_config()"),dwt.forEach(t),Ggr=r(Fre,` class
method.`),Fre.forEach(t),Ogr=i(Fl),r9=n(Fl,"P",{});var uze=s(r9);Vgr=r(uze,"This class cannot be instantiated directly using "),k4e=n(uze,"CODE",{});var cwt=s(k4e);Xgr=r(cwt,"__init__()"),cwt.forEach(t),zgr=r(uze," (throws an error)."),uze.forEach(t),Qgr=i(Fl),At=n(Fl,"DIV",{class:!0});var EL=s(At);T(t9.$$.fragment,EL),Wgr=i(EL),S4e=n(EL,"P",{});var fwt=s(S4e);Hgr=r(fwt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),fwt.forEach(t),Ugr=i(EL),zd=n(EL,"P",{});var Tre=s(zd);Jgr=r(Tre,`Note:
Loading a model from its configuration file does `),R4e=n(Tre,"STRONG",{});var mwt=s(R4e);Ygr=r(mwt,"not"),mwt.forEach(t),Kgr=r(Tre,` load the model weights. It only affects the
model\u2019s configuration. Use `),JW=n(Tre,"A",{href:!0});var gwt=s(JW);Zgr=r(gwt,"from_pretrained()"),gwt.forEach(t),ehr=r(Tre," to load the model weights."),Tre.forEach(t),ohr=i(EL),T(AF.$$.fragment,EL),EL.forEach(t),rhr=i(Fl),uo=n(Fl,"DIV",{class:!0});var wa=s(uo);T(a9.$$.fragment,wa),thr=i(wa),P4e=n(wa,"P",{});var hwt=s(P4e);ahr=r(hwt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),hwt.forEach(t),nhr=i(wa),Za=n(wa,"P",{});var CL=s(Za);shr=r(CL,"The model class to instantiate is selected based on the "),B4e=n(CL,"CODE",{});var pwt=s(B4e);lhr=r(pwt,"model_type"),pwt.forEach(t),ihr=r(CL,` property of the config object (either
passed as an argument or loaded from `),I4e=n(CL,"CODE",{});var _wt=s(I4e);dhr=r(_wt,"pretrained_model_name_or_path"),_wt.forEach(t),chr=r(CL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N4e=n(CL,"CODE",{});var uwt=s(N4e);fhr=r(uwt,"pretrained_model_name_or_path"),uwt.forEach(t),mhr=r(CL,":"),CL.forEach(t),ghr=i(wa),n9=n(wa,"UL",{});var bze=s(n9);LF=n(bze,"LI",{});var sIe=s(LF);q4e=n(sIe,"STRONG",{});var bwt=s(q4e);hhr=r(bwt,"detr"),bwt.forEach(t),phr=r(sIe," \u2014 "),YW=n(sIe,"A",{href:!0});var vwt=s(YW);_hr=r(vwt,"DetrForObjectDetection"),vwt.forEach(t),uhr=r(sIe," (DETR model)"),sIe.forEach(t),bhr=i(bze),yF=n(bze,"LI",{});var lIe=s(yF);j4e=n(lIe,"STRONG",{});var Fwt=s(j4e);vhr=r(Fwt,"yolos"),Fwt.forEach(t),Fhr=r(lIe," \u2014 "),KW=n(lIe,"A",{href:!0});var Twt=s(KW);Thr=r(Twt,"YolosForObjectDetection"),Twt.forEach(t),Mhr=r(lIe," (YOLOS model)"),lIe.forEach(t),bze.forEach(t),Ehr=i(wa),xF=n(wa,"P",{});var iIe=s(xF);Chr=r(iIe,"The model is set in evaluation mode by default using "),D4e=n(iIe,"CODE",{});var Mwt=s(D4e);whr=r(Mwt,"model.eval()"),Mwt.forEach(t),Ahr=r(iIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),G4e=n(iIe,"CODE",{});var Ewt=s(G4e);Lhr=r(Ewt,"model.train()"),Ewt.forEach(t),iIe.forEach(t),yhr=i(wa),T($F.$$.fragment,wa),wa.forEach(t),Fl.forEach(t),fVe=i(f),Qd=n(f,"H2",{class:!0});var vze=s(Qd);kF=n(vze,"A",{id:!0,class:!0,href:!0});var Cwt=s(kF);O4e=n(Cwt,"SPAN",{});var wwt=s(O4e);T(s9.$$.fragment,wwt),wwt.forEach(t),Cwt.forEach(t),xhr=i(vze),V4e=n(vze,"SPAN",{});var Awt=s(V4e);$hr=r(Awt,"AutoModelForImageSegmentation"),Awt.forEach(t),vze.forEach(t),mVe=i(f),Yo=n(f,"DIV",{class:!0});var Tl=s(Yo);T(l9.$$.fragment,Tl),khr=i(Tl),Wd=n(Tl,"P",{});var Mre=s(Wd);Shr=r(Mre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),ZW=n(Mre,"A",{href:!0});var Lwt=s(ZW);Rhr=r(Lwt,"from_pretrained()"),Lwt.forEach(t),Phr=r(Mre," class method or the "),eH=n(Mre,"A",{href:!0});var ywt=s(eH);Bhr=r(ywt,"from_config()"),ywt.forEach(t),Ihr=r(Mre,` class
method.`),Mre.forEach(t),Nhr=i(Tl),i9=n(Tl,"P",{});var Fze=s(i9);qhr=r(Fze,"This class cannot be instantiated directly using "),X4e=n(Fze,"CODE",{});var xwt=s(X4e);jhr=r(xwt,"__init__()"),xwt.forEach(t),Dhr=r(Fze," (throws an error)."),Fze.forEach(t),Ghr=i(Tl),Lt=n(Tl,"DIV",{class:!0});var wL=s(Lt);T(d9.$$.fragment,wL),Ohr=i(wL),z4e=n(wL,"P",{});var $wt=s(z4e);Vhr=r($wt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),$wt.forEach(t),Xhr=i(wL),Hd=n(wL,"P",{});var Ere=s(Hd);zhr=r(Ere,`Note:
Loading a model from its configuration file does `),Q4e=n(Ere,"STRONG",{});var kwt=s(Q4e);Qhr=r(kwt,"not"),kwt.forEach(t),Whr=r(Ere,` load the model weights. It only affects the
model\u2019s configuration. Use `),oH=n(Ere,"A",{href:!0});var Swt=s(oH);Hhr=r(Swt,"from_pretrained()"),Swt.forEach(t),Uhr=r(Ere," to load the model weights."),Ere.forEach(t),Jhr=i(wL),T(SF.$$.fragment,wL),wL.forEach(t),Yhr=i(Tl),bo=n(Tl,"DIV",{class:!0});var Aa=s(bo);T(c9.$$.fragment,Aa),Khr=i(Aa),W4e=n(Aa,"P",{});var Rwt=s(W4e);Zhr=r(Rwt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Rwt.forEach(t),epr=i(Aa),en=n(Aa,"P",{});var AL=s(en);opr=r(AL,"The model class to instantiate is selected based on the "),H4e=n(AL,"CODE",{});var Pwt=s(H4e);rpr=r(Pwt,"model_type"),Pwt.forEach(t),tpr=r(AL,` property of the config object (either
passed as an argument or loaded from `),U4e=n(AL,"CODE",{});var Bwt=s(U4e);apr=r(Bwt,"pretrained_model_name_or_path"),Bwt.forEach(t),npr=r(AL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J4e=n(AL,"CODE",{});var Iwt=s(J4e);spr=r(Iwt,"pretrained_model_name_or_path"),Iwt.forEach(t),lpr=r(AL,":"),AL.forEach(t),ipr=i(Aa),Y4e=n(Aa,"UL",{});var Nwt=s(Y4e);RF=n(Nwt,"LI",{});var dIe=s(RF);K4e=n(dIe,"STRONG",{});var qwt=s(K4e);dpr=r(qwt,"detr"),qwt.forEach(t),cpr=r(dIe," \u2014 "),rH=n(dIe,"A",{href:!0});var jwt=s(rH);fpr=r(jwt,"DetrForSegmentation"),jwt.forEach(t),mpr=r(dIe," (DETR model)"),dIe.forEach(t),Nwt.forEach(t),gpr=i(Aa),PF=n(Aa,"P",{});var cIe=s(PF);hpr=r(cIe,"The model is set in evaluation mode by default using "),Z4e=n(cIe,"CODE",{});var Dwt=s(Z4e);ppr=r(Dwt,"model.eval()"),Dwt.forEach(t),_pr=r(cIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),e5e=n(cIe,"CODE",{});var Gwt=s(e5e);upr=r(Gwt,"model.train()"),Gwt.forEach(t),cIe.forEach(t),bpr=i(Aa),T(BF.$$.fragment,Aa),Aa.forEach(t),Tl.forEach(t),gVe=i(f),Ud=n(f,"H2",{class:!0});var Tze=s(Ud);IF=n(Tze,"A",{id:!0,class:!0,href:!0});var Owt=s(IF);o5e=n(Owt,"SPAN",{});var Vwt=s(o5e);T(f9.$$.fragment,Vwt),Vwt.forEach(t),Owt.forEach(t),vpr=i(Tze),r5e=n(Tze,"SPAN",{});var Xwt=s(r5e);Fpr=r(Xwt,"AutoModelForSemanticSegmentation"),Xwt.forEach(t),Tze.forEach(t),hVe=i(f),Ko=n(f,"DIV",{class:!0});var Ml=s(Ko);T(m9.$$.fragment,Ml),Tpr=i(Ml),Jd=n(Ml,"P",{});var Cre=s(Jd);Mpr=r(Cre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),tH=n(Cre,"A",{href:!0});var zwt=s(tH);Epr=r(zwt,"from_pretrained()"),zwt.forEach(t),Cpr=r(Cre," class method or the "),aH=n(Cre,"A",{href:!0});var Qwt=s(aH);wpr=r(Qwt,"from_config()"),Qwt.forEach(t),Apr=r(Cre,` class
method.`),Cre.forEach(t),Lpr=i(Ml),g9=n(Ml,"P",{});var Mze=s(g9);ypr=r(Mze,"This class cannot be instantiated directly using "),t5e=n(Mze,"CODE",{});var Wwt=s(t5e);xpr=r(Wwt,"__init__()"),Wwt.forEach(t),$pr=r(Mze," (throws an error)."),Mze.forEach(t),kpr=i(Ml),yt=n(Ml,"DIV",{class:!0});var LL=s(yt);T(h9.$$.fragment,LL),Spr=i(LL),a5e=n(LL,"P",{});var Hwt=s(a5e);Rpr=r(Hwt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Hwt.forEach(t),Ppr=i(LL),Yd=n(LL,"P",{});var wre=s(Yd);Bpr=r(wre,`Note:
Loading a model from its configuration file does `),n5e=n(wre,"STRONG",{});var Uwt=s(n5e);Ipr=r(Uwt,"not"),Uwt.forEach(t),Npr=r(wre,` load the model weights. It only affects the
model\u2019s configuration. Use `),nH=n(wre,"A",{href:!0});var Jwt=s(nH);qpr=r(Jwt,"from_pretrained()"),Jwt.forEach(t),jpr=r(wre," to load the model weights."),wre.forEach(t),Dpr=i(LL),T(NF.$$.fragment,LL),LL.forEach(t),Gpr=i(Ml),vo=n(Ml,"DIV",{class:!0});var La=s(vo);T(p9.$$.fragment,La),Opr=i(La),s5e=n(La,"P",{});var Ywt=s(s5e);Vpr=r(Ywt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Ywt.forEach(t),Xpr=i(La),on=n(La,"P",{});var yL=s(on);zpr=r(yL,"The model class to instantiate is selected based on the "),l5e=n(yL,"CODE",{});var Kwt=s(l5e);Qpr=r(Kwt,"model_type"),Kwt.forEach(t),Wpr=r(yL,` property of the config object (either
passed as an argument or loaded from `),i5e=n(yL,"CODE",{});var Zwt=s(i5e);Hpr=r(Zwt,"pretrained_model_name_or_path"),Zwt.forEach(t),Upr=r(yL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d5e=n(yL,"CODE",{});var eAt=s(d5e);Jpr=r(eAt,"pretrained_model_name_or_path"),eAt.forEach(t),Ypr=r(yL,":"),yL.forEach(t),Kpr=i(La),rn=n(La,"UL",{});var xL=s(rn);qF=n(xL,"LI",{});var fIe=s(qF);c5e=n(fIe,"STRONG",{});var oAt=s(c5e);Zpr=r(oAt,"beit"),oAt.forEach(t),e_r=r(fIe," \u2014 "),sH=n(fIe,"A",{href:!0});var rAt=s(sH);o_r=r(rAt,"BeitForSemanticSegmentation"),rAt.forEach(t),r_r=r(fIe," (BEiT model)"),fIe.forEach(t),t_r=i(xL),jF=n(xL,"LI",{});var mIe=s(jF);f5e=n(mIe,"STRONG",{});var tAt=s(f5e);a_r=r(tAt,"data2vec-vision"),tAt.forEach(t),n_r=r(mIe," \u2014 "),lH=n(mIe,"A",{href:!0});var aAt=s(lH);s_r=r(aAt,"Data2VecVisionForSemanticSegmentation"),aAt.forEach(t),l_r=r(mIe," (Data2VecVision model)"),mIe.forEach(t),i_r=i(xL),DF=n(xL,"LI",{});var gIe=s(DF);m5e=n(gIe,"STRONG",{});var nAt=s(m5e);d_r=r(nAt,"dpt"),nAt.forEach(t),c_r=r(gIe," \u2014 "),iH=n(gIe,"A",{href:!0});var sAt=s(iH);f_r=r(sAt,"DPTForSemanticSegmentation"),sAt.forEach(t),m_r=r(gIe," (DPT model)"),gIe.forEach(t),g_r=i(xL),GF=n(xL,"LI",{});var hIe=s(GF);g5e=n(hIe,"STRONG",{});var lAt=s(g5e);h_r=r(lAt,"segformer"),lAt.forEach(t),p_r=r(hIe," \u2014 "),dH=n(hIe,"A",{href:!0});var iAt=s(dH);__r=r(iAt,"SegformerForSemanticSegmentation"),iAt.forEach(t),u_r=r(hIe," (SegFormer model)"),hIe.forEach(t),xL.forEach(t),b_r=i(La),OF=n(La,"P",{});var pIe=s(OF);v_r=r(pIe,"The model is set in evaluation mode by default using "),h5e=n(pIe,"CODE",{});var dAt=s(h5e);F_r=r(dAt,"model.eval()"),dAt.forEach(t),T_r=r(pIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),p5e=n(pIe,"CODE",{});var cAt=s(p5e);M_r=r(cAt,"model.train()"),cAt.forEach(t),pIe.forEach(t),E_r=i(La),T(VF.$$.fragment,La),La.forEach(t),Ml.forEach(t),pVe=i(f),Kd=n(f,"H2",{class:!0});var Eze=s(Kd);XF=n(Eze,"A",{id:!0,class:!0,href:!0});var fAt=s(XF);_5e=n(fAt,"SPAN",{});var mAt=s(_5e);T(_9.$$.fragment,mAt),mAt.forEach(t),fAt.forEach(t),C_r=i(Eze),u5e=n(Eze,"SPAN",{});var gAt=s(u5e);w_r=r(gAt,"AutoModelForInstanceSegmentation"),gAt.forEach(t),Eze.forEach(t),_Ve=i(f),Zo=n(f,"DIV",{class:!0});var El=s(Zo);T(u9.$$.fragment,El),A_r=i(El),Zd=n(El,"P",{});var Are=s(Zd);L_r=r(Are,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),cH=n(Are,"A",{href:!0});var hAt=s(cH);y_r=r(hAt,"from_pretrained()"),hAt.forEach(t),x_r=r(Are," class method or the "),fH=n(Are,"A",{href:!0});var pAt=s(fH);$_r=r(pAt,"from_config()"),pAt.forEach(t),k_r=r(Are,` class
method.`),Are.forEach(t),S_r=i(El),b9=n(El,"P",{});var Cze=s(b9);R_r=r(Cze,"This class cannot be instantiated directly using "),b5e=n(Cze,"CODE",{});var _At=s(b5e);P_r=r(_At,"__init__()"),_At.forEach(t),B_r=r(Cze," (throws an error)."),Cze.forEach(t),I_r=i(El),xt=n(El,"DIV",{class:!0});var $L=s(xt);T(v9.$$.fragment,$L),N_r=i($L),v5e=n($L,"P",{});var uAt=s(v5e);q_r=r(uAt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),uAt.forEach(t),j_r=i($L),ec=n($L,"P",{});var Lre=s(ec);D_r=r(Lre,`Note:
Loading a model from its configuration file does `),F5e=n(Lre,"STRONG",{});var bAt=s(F5e);G_r=r(bAt,"not"),bAt.forEach(t),O_r=r(Lre,` load the model weights. It only affects the
model\u2019s configuration. Use `),mH=n(Lre,"A",{href:!0});var vAt=s(mH);V_r=r(vAt,"from_pretrained()"),vAt.forEach(t),X_r=r(Lre," to load the model weights."),Lre.forEach(t),z_r=i($L),T(zF.$$.fragment,$L),$L.forEach(t),Q_r=i(El),Fo=n(El,"DIV",{class:!0});var ya=s(Fo);T(F9.$$.fragment,ya),W_r=i(ya),T5e=n(ya,"P",{});var FAt=s(T5e);H_r=r(FAt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),FAt.forEach(t),U_r=i(ya),tn=n(ya,"P",{});var kL=s(tn);J_r=r(kL,"The model class to instantiate is selected based on the "),M5e=n(kL,"CODE",{});var TAt=s(M5e);Y_r=r(TAt,"model_type"),TAt.forEach(t),K_r=r(kL,` property of the config object (either
passed as an argument or loaded from `),E5e=n(kL,"CODE",{});var MAt=s(E5e);Z_r=r(MAt,"pretrained_model_name_or_path"),MAt.forEach(t),eur=r(kL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C5e=n(kL,"CODE",{});var EAt=s(C5e);our=r(EAt,"pretrained_model_name_or_path"),EAt.forEach(t),rur=r(kL,":"),kL.forEach(t),tur=i(ya),w5e=n(ya,"UL",{});var CAt=s(w5e);QF=n(CAt,"LI",{});var _Ie=s(QF);A5e=n(_Ie,"STRONG",{});var wAt=s(A5e);aur=r(wAt,"maskformer"),wAt.forEach(t),nur=r(_Ie," \u2014 "),gH=n(_Ie,"A",{href:!0});var AAt=s(gH);sur=r(AAt,"MaskFormerForInstanceSegmentation"),AAt.forEach(t),lur=r(_Ie," (MaskFormer model)"),_Ie.forEach(t),CAt.forEach(t),iur=i(ya),WF=n(ya,"P",{});var uIe=s(WF);dur=r(uIe,"The model is set in evaluation mode by default using "),L5e=n(uIe,"CODE",{});var LAt=s(L5e);cur=r(LAt,"model.eval()"),LAt.forEach(t),fur=r(uIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),y5e=n(uIe,"CODE",{});var yAt=s(y5e);mur=r(yAt,"model.train()"),yAt.forEach(t),uIe.forEach(t),gur=i(ya),T(HF.$$.fragment,ya),ya.forEach(t),El.forEach(t),uVe=i(f),oc=n(f,"H2",{class:!0});var wze=s(oc);UF=n(wze,"A",{id:!0,class:!0,href:!0});var xAt=s(UF);x5e=n(xAt,"SPAN",{});var $At=s(x5e);T(T9.$$.fragment,$At),$At.forEach(t),xAt.forEach(t),hur=i(wze),$5e=n(wze,"SPAN",{});var kAt=s($5e);pur=r(kAt,"TFAutoModel"),kAt.forEach(t),wze.forEach(t),bVe=i(f),er=n(f,"DIV",{class:!0});var Cl=s(er);T(M9.$$.fragment,Cl),_ur=i(Cl),rc=n(Cl,"P",{});var yre=s(rc);uur=r(yre,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),hH=n(yre,"A",{href:!0});var SAt=s(hH);bur=r(SAt,"from_pretrained()"),SAt.forEach(t),vur=r(yre," class method or the "),pH=n(yre,"A",{href:!0});var RAt=s(pH);Fur=r(RAt,"from_config()"),RAt.forEach(t),Tur=r(yre,` class
method.`),yre.forEach(t),Mur=i(Cl),E9=n(Cl,"P",{});var Aze=s(E9);Eur=r(Aze,"This class cannot be instantiated directly using "),k5e=n(Aze,"CODE",{});var PAt=s(k5e);Cur=r(PAt,"__init__()"),PAt.forEach(t),wur=r(Aze," (throws an error)."),Aze.forEach(t),Aur=i(Cl),$t=n(Cl,"DIV",{class:!0});var SL=s($t);T(C9.$$.fragment,SL),Lur=i(SL),S5e=n(SL,"P",{});var BAt=s(S5e);yur=r(BAt,"Instantiates one of the base model classes of the library from a configuration."),BAt.forEach(t),xur=i(SL),tc=n(SL,"P",{});var xre=s(tc);$ur=r(xre,`Note:
Loading a model from its configuration file does `),R5e=n(xre,"STRONG",{});var IAt=s(R5e);kur=r(IAt,"not"),IAt.forEach(t),Sur=r(xre,` load the model weights. It only affects the
model\u2019s configuration. Use `),_H=n(xre,"A",{href:!0});var NAt=s(_H);Rur=r(NAt,"from_pretrained()"),NAt.forEach(t),Pur=r(xre," to load the model weights."),xre.forEach(t),Bur=i(SL),T(JF.$$.fragment,SL),SL.forEach(t),Iur=i(Cl),yr=n(Cl,"DIV",{class:!0});var wl=s(yr);T(w9.$$.fragment,wl),Nur=i(wl),P5e=n(wl,"P",{});var qAt=s(P5e);qur=r(qAt,"Instantiate one of the base model classes of the library from a pretrained model."),qAt.forEach(t),jur=i(wl),an=n(wl,"P",{});var RL=s(an);Dur=r(RL,"The model class to instantiate is selected based on the "),B5e=n(RL,"CODE",{});var jAt=s(B5e);Gur=r(jAt,"model_type"),jAt.forEach(t),Our=r(RL,` property of the config object (either
passed as an argument or loaded from `),I5e=n(RL,"CODE",{});var DAt=s(I5e);Vur=r(DAt,"pretrained_model_name_or_path"),DAt.forEach(t),Xur=r(RL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N5e=n(RL,"CODE",{});var GAt=s(N5e);zur=r(GAt,"pretrained_model_name_or_path"),GAt.forEach(t),Qur=r(RL,":"),RL.forEach(t),Wur=i(wl),q=n(wl,"UL",{});var D=s(q);YF=n(D,"LI",{});var bIe=s(YF);q5e=n(bIe,"STRONG",{});var OAt=s(q5e);Hur=r(OAt,"albert"),OAt.forEach(t),Uur=r(bIe," \u2014 "),uH=n(bIe,"A",{href:!0});var VAt=s(uH);Jur=r(VAt,"TFAlbertModel"),VAt.forEach(t),Yur=r(bIe," (ALBERT model)"),bIe.forEach(t),Kur=i(D),KF=n(D,"LI",{});var vIe=s(KF);j5e=n(vIe,"STRONG",{});var XAt=s(j5e);Zur=r(XAt,"bart"),XAt.forEach(t),e1r=r(vIe," \u2014 "),bH=n(vIe,"A",{href:!0});var zAt=s(bH);o1r=r(zAt,"TFBartModel"),zAt.forEach(t),r1r=r(vIe," (BART model)"),vIe.forEach(t),t1r=i(D),ZF=n(D,"LI",{});var FIe=s(ZF);D5e=n(FIe,"STRONG",{});var QAt=s(D5e);a1r=r(QAt,"bert"),QAt.forEach(t),n1r=r(FIe," \u2014 "),vH=n(FIe,"A",{href:!0});var WAt=s(vH);s1r=r(WAt,"TFBertModel"),WAt.forEach(t),l1r=r(FIe," (BERT model)"),FIe.forEach(t),i1r=i(D),e6=n(D,"LI",{});var TIe=s(e6);G5e=n(TIe,"STRONG",{});var HAt=s(G5e);d1r=r(HAt,"blenderbot"),HAt.forEach(t),c1r=r(TIe," \u2014 "),FH=n(TIe,"A",{href:!0});var UAt=s(FH);f1r=r(UAt,"TFBlenderbotModel"),UAt.forEach(t),m1r=r(TIe," (Blenderbot model)"),TIe.forEach(t),g1r=i(D),o6=n(D,"LI",{});var MIe=s(o6);O5e=n(MIe,"STRONG",{});var JAt=s(O5e);h1r=r(JAt,"blenderbot-small"),JAt.forEach(t),p1r=r(MIe," \u2014 "),TH=n(MIe,"A",{href:!0});var YAt=s(TH);_1r=r(YAt,"TFBlenderbotSmallModel"),YAt.forEach(t),u1r=r(MIe," (BlenderbotSmall model)"),MIe.forEach(t),b1r=i(D),r6=n(D,"LI",{});var EIe=s(r6);V5e=n(EIe,"STRONG",{});var KAt=s(V5e);v1r=r(KAt,"camembert"),KAt.forEach(t),F1r=r(EIe," \u2014 "),MH=n(EIe,"A",{href:!0});var ZAt=s(MH);T1r=r(ZAt,"TFCamembertModel"),ZAt.forEach(t),M1r=r(EIe," (CamemBERT model)"),EIe.forEach(t),E1r=i(D),t6=n(D,"LI",{});var CIe=s(t6);X5e=n(CIe,"STRONG",{});var eLt=s(X5e);C1r=r(eLt,"clip"),eLt.forEach(t),w1r=r(CIe," \u2014 "),EH=n(CIe,"A",{href:!0});var oLt=s(EH);A1r=r(oLt,"TFCLIPModel"),oLt.forEach(t),L1r=r(CIe," (CLIP model)"),CIe.forEach(t),y1r=i(D),a6=n(D,"LI",{});var wIe=s(a6);z5e=n(wIe,"STRONG",{});var rLt=s(z5e);x1r=r(rLt,"convbert"),rLt.forEach(t),$1r=r(wIe," \u2014 "),CH=n(wIe,"A",{href:!0});var tLt=s(CH);k1r=r(tLt,"TFConvBertModel"),tLt.forEach(t),S1r=r(wIe," (ConvBERT model)"),wIe.forEach(t),R1r=i(D),n6=n(D,"LI",{});var AIe=s(n6);Q5e=n(AIe,"STRONG",{});var aLt=s(Q5e);P1r=r(aLt,"convnext"),aLt.forEach(t),B1r=r(AIe," \u2014 "),wH=n(AIe,"A",{href:!0});var nLt=s(wH);I1r=r(nLt,"TFConvNextModel"),nLt.forEach(t),N1r=r(AIe," (ConvNeXT model)"),AIe.forEach(t),q1r=i(D),s6=n(D,"LI",{});var LIe=s(s6);W5e=n(LIe,"STRONG",{});var sLt=s(W5e);j1r=r(sLt,"ctrl"),sLt.forEach(t),D1r=r(LIe," \u2014 "),AH=n(LIe,"A",{href:!0});var lLt=s(AH);G1r=r(lLt,"TFCTRLModel"),lLt.forEach(t),O1r=r(LIe," (CTRL model)"),LIe.forEach(t),V1r=i(D),l6=n(D,"LI",{});var yIe=s(l6);H5e=n(yIe,"STRONG",{});var iLt=s(H5e);X1r=r(iLt,"data2vec-vision"),iLt.forEach(t),z1r=r(yIe," \u2014 "),LH=n(yIe,"A",{href:!0});var dLt=s(LH);Q1r=r(dLt,"TFData2VecVisionModel"),dLt.forEach(t),W1r=r(yIe," (Data2VecVision model)"),yIe.forEach(t),H1r=i(D),i6=n(D,"LI",{});var xIe=s(i6);U5e=n(xIe,"STRONG",{});var cLt=s(U5e);U1r=r(cLt,"deberta"),cLt.forEach(t),J1r=r(xIe," \u2014 "),yH=n(xIe,"A",{href:!0});var fLt=s(yH);Y1r=r(fLt,"TFDebertaModel"),fLt.forEach(t),K1r=r(xIe," (DeBERTa model)"),xIe.forEach(t),Z1r=i(D),d6=n(D,"LI",{});var $Ie=s(d6);J5e=n($Ie,"STRONG",{});var mLt=s(J5e);e2r=r(mLt,"deberta-v2"),mLt.forEach(t),o2r=r($Ie," \u2014 "),xH=n($Ie,"A",{href:!0});var gLt=s(xH);r2r=r(gLt,"TFDebertaV2Model"),gLt.forEach(t),t2r=r($Ie," (DeBERTa-v2 model)"),$Ie.forEach(t),a2r=i(D),c6=n(D,"LI",{});var kIe=s(c6);Y5e=n(kIe,"STRONG",{});var hLt=s(Y5e);n2r=r(hLt,"distilbert"),hLt.forEach(t),s2r=r(kIe," \u2014 "),$H=n(kIe,"A",{href:!0});var pLt=s($H);l2r=r(pLt,"TFDistilBertModel"),pLt.forEach(t),i2r=r(kIe," (DistilBERT model)"),kIe.forEach(t),d2r=i(D),f6=n(D,"LI",{});var SIe=s(f6);K5e=n(SIe,"STRONG",{});var _Lt=s(K5e);c2r=r(_Lt,"dpr"),_Lt.forEach(t),f2r=r(SIe," \u2014 "),kH=n(SIe,"A",{href:!0});var uLt=s(kH);m2r=r(uLt,"TFDPRQuestionEncoder"),uLt.forEach(t),g2r=r(SIe," (DPR model)"),SIe.forEach(t),h2r=i(D),m6=n(D,"LI",{});var RIe=s(m6);Z5e=n(RIe,"STRONG",{});var bLt=s(Z5e);p2r=r(bLt,"electra"),bLt.forEach(t),_2r=r(RIe," \u2014 "),SH=n(RIe,"A",{href:!0});var vLt=s(SH);u2r=r(vLt,"TFElectraModel"),vLt.forEach(t),b2r=r(RIe," (ELECTRA model)"),RIe.forEach(t),v2r=i(D),g6=n(D,"LI",{});var PIe=s(g6);e3e=n(PIe,"STRONG",{});var FLt=s(e3e);F2r=r(FLt,"flaubert"),FLt.forEach(t),T2r=r(PIe," \u2014 "),RH=n(PIe,"A",{href:!0});var TLt=s(RH);M2r=r(TLt,"TFFlaubertModel"),TLt.forEach(t),E2r=r(PIe," (FlauBERT model)"),PIe.forEach(t),C2r=i(D),Ws=n(D,"LI",{});var iS=s(Ws);o3e=n(iS,"STRONG",{});var MLt=s(o3e);w2r=r(MLt,"funnel"),MLt.forEach(t),A2r=r(iS," \u2014 "),PH=n(iS,"A",{href:!0});var ELt=s(PH);L2r=r(ELt,"TFFunnelModel"),ELt.forEach(t),y2r=r(iS," or "),BH=n(iS,"A",{href:!0});var CLt=s(BH);x2r=r(CLt,"TFFunnelBaseModel"),CLt.forEach(t),$2r=r(iS," (Funnel Transformer model)"),iS.forEach(t),k2r=i(D),h6=n(D,"LI",{});var BIe=s(h6);r3e=n(BIe,"STRONG",{});var wLt=s(r3e);S2r=r(wLt,"gpt2"),wLt.forEach(t),R2r=r(BIe," \u2014 "),IH=n(BIe,"A",{href:!0});var ALt=s(IH);P2r=r(ALt,"TFGPT2Model"),ALt.forEach(t),B2r=r(BIe," (OpenAI GPT-2 model)"),BIe.forEach(t),I2r=i(D),p6=n(D,"LI",{});var IIe=s(p6);t3e=n(IIe,"STRONG",{});var LLt=s(t3e);N2r=r(LLt,"gptj"),LLt.forEach(t),q2r=r(IIe," \u2014 "),NH=n(IIe,"A",{href:!0});var yLt=s(NH);j2r=r(yLt,"TFGPTJModel"),yLt.forEach(t),D2r=r(IIe," (GPT-J model)"),IIe.forEach(t),G2r=i(D),_6=n(D,"LI",{});var NIe=s(_6);a3e=n(NIe,"STRONG",{});var xLt=s(a3e);O2r=r(xLt,"hubert"),xLt.forEach(t),V2r=r(NIe," \u2014 "),qH=n(NIe,"A",{href:!0});var $Lt=s(qH);X2r=r($Lt,"TFHubertModel"),$Lt.forEach(t),z2r=r(NIe," (Hubert model)"),NIe.forEach(t),Q2r=i(D),u6=n(D,"LI",{});var qIe=s(u6);n3e=n(qIe,"STRONG",{});var kLt=s(n3e);W2r=r(kLt,"layoutlm"),kLt.forEach(t),H2r=r(qIe," \u2014 "),jH=n(qIe,"A",{href:!0});var SLt=s(jH);U2r=r(SLt,"TFLayoutLMModel"),SLt.forEach(t),J2r=r(qIe," (LayoutLM model)"),qIe.forEach(t),Y2r=i(D),b6=n(D,"LI",{});var jIe=s(b6);s3e=n(jIe,"STRONG",{});var RLt=s(s3e);K2r=r(RLt,"led"),RLt.forEach(t),Z2r=r(jIe," \u2014 "),DH=n(jIe,"A",{href:!0});var PLt=s(DH);ebr=r(PLt,"TFLEDModel"),PLt.forEach(t),obr=r(jIe," (LED model)"),jIe.forEach(t),rbr=i(D),v6=n(D,"LI",{});var DIe=s(v6);l3e=n(DIe,"STRONG",{});var BLt=s(l3e);tbr=r(BLt,"longformer"),BLt.forEach(t),abr=r(DIe," \u2014 "),GH=n(DIe,"A",{href:!0});var ILt=s(GH);nbr=r(ILt,"TFLongformerModel"),ILt.forEach(t),sbr=r(DIe," (Longformer model)"),DIe.forEach(t),lbr=i(D),F6=n(D,"LI",{});var GIe=s(F6);i3e=n(GIe,"STRONG",{});var NLt=s(i3e);ibr=r(NLt,"lxmert"),NLt.forEach(t),dbr=r(GIe," \u2014 "),OH=n(GIe,"A",{href:!0});var qLt=s(OH);cbr=r(qLt,"TFLxmertModel"),qLt.forEach(t),fbr=r(GIe," (LXMERT model)"),GIe.forEach(t),mbr=i(D),T6=n(D,"LI",{});var OIe=s(T6);d3e=n(OIe,"STRONG",{});var jLt=s(d3e);gbr=r(jLt,"marian"),jLt.forEach(t),hbr=r(OIe," \u2014 "),VH=n(OIe,"A",{href:!0});var DLt=s(VH);pbr=r(DLt,"TFMarianModel"),DLt.forEach(t),_br=r(OIe," (Marian model)"),OIe.forEach(t),ubr=i(D),M6=n(D,"LI",{});var VIe=s(M6);c3e=n(VIe,"STRONG",{});var GLt=s(c3e);bbr=r(GLt,"mbart"),GLt.forEach(t),vbr=r(VIe," \u2014 "),XH=n(VIe,"A",{href:!0});var OLt=s(XH);Fbr=r(OLt,"TFMBartModel"),OLt.forEach(t),Tbr=r(VIe," (mBART model)"),VIe.forEach(t),Mbr=i(D),E6=n(D,"LI",{});var XIe=s(E6);f3e=n(XIe,"STRONG",{});var VLt=s(f3e);Ebr=r(VLt,"mobilebert"),VLt.forEach(t),Cbr=r(XIe," \u2014 "),zH=n(XIe,"A",{href:!0});var XLt=s(zH);wbr=r(XLt,"TFMobileBertModel"),XLt.forEach(t),Abr=r(XIe," (MobileBERT model)"),XIe.forEach(t),Lbr=i(D),C6=n(D,"LI",{});var zIe=s(C6);m3e=n(zIe,"STRONG",{});var zLt=s(m3e);ybr=r(zLt,"mpnet"),zLt.forEach(t),xbr=r(zIe," \u2014 "),QH=n(zIe,"A",{href:!0});var QLt=s(QH);$br=r(QLt,"TFMPNetModel"),QLt.forEach(t),kbr=r(zIe," (MPNet model)"),zIe.forEach(t),Sbr=i(D),w6=n(D,"LI",{});var QIe=s(w6);g3e=n(QIe,"STRONG",{});var WLt=s(g3e);Rbr=r(WLt,"mt5"),WLt.forEach(t),Pbr=r(QIe," \u2014 "),WH=n(QIe,"A",{href:!0});var HLt=s(WH);Bbr=r(HLt,"TFMT5Model"),HLt.forEach(t),Ibr=r(QIe," (MT5 model)"),QIe.forEach(t),Nbr=i(D),A6=n(D,"LI",{});var WIe=s(A6);h3e=n(WIe,"STRONG",{});var ULt=s(h3e);qbr=r(ULt,"openai-gpt"),ULt.forEach(t),jbr=r(WIe," \u2014 "),HH=n(WIe,"A",{href:!0});var JLt=s(HH);Dbr=r(JLt,"TFOpenAIGPTModel"),JLt.forEach(t),Gbr=r(WIe," (OpenAI GPT model)"),WIe.forEach(t),Obr=i(D),L6=n(D,"LI",{});var HIe=s(L6);p3e=n(HIe,"STRONG",{});var YLt=s(p3e);Vbr=r(YLt,"opt"),YLt.forEach(t),Xbr=r(HIe," \u2014 "),UH=n(HIe,"A",{href:!0});var KLt=s(UH);zbr=r(KLt,"TFOPTModel"),KLt.forEach(t),Qbr=r(HIe," (OPT model)"),HIe.forEach(t),Wbr=i(D),y6=n(D,"LI",{});var UIe=s(y6);_3e=n(UIe,"STRONG",{});var ZLt=s(_3e);Hbr=r(ZLt,"pegasus"),ZLt.forEach(t),Ubr=r(UIe," \u2014 "),JH=n(UIe,"A",{href:!0});var e7t=s(JH);Jbr=r(e7t,"TFPegasusModel"),e7t.forEach(t),Ybr=r(UIe," (Pegasus model)"),UIe.forEach(t),Kbr=i(D),x6=n(D,"LI",{});var JIe=s(x6);u3e=n(JIe,"STRONG",{});var o7t=s(u3e);Zbr=r(o7t,"rembert"),o7t.forEach(t),e4r=r(JIe," \u2014 "),YH=n(JIe,"A",{href:!0});var r7t=s(YH);o4r=r(r7t,"TFRemBertModel"),r7t.forEach(t),r4r=r(JIe," (RemBERT model)"),JIe.forEach(t),t4r=i(D),$6=n(D,"LI",{});var YIe=s($6);b3e=n(YIe,"STRONG",{});var t7t=s(b3e);a4r=r(t7t,"roberta"),t7t.forEach(t),n4r=r(YIe," \u2014 "),KH=n(YIe,"A",{href:!0});var a7t=s(KH);s4r=r(a7t,"TFRobertaModel"),a7t.forEach(t),l4r=r(YIe," (RoBERTa model)"),YIe.forEach(t),i4r=i(D),k6=n(D,"LI",{});var KIe=s(k6);v3e=n(KIe,"STRONG",{});var n7t=s(v3e);d4r=r(n7t,"roformer"),n7t.forEach(t),c4r=r(KIe," \u2014 "),ZH=n(KIe,"A",{href:!0});var s7t=s(ZH);f4r=r(s7t,"TFRoFormerModel"),s7t.forEach(t),m4r=r(KIe," (RoFormer model)"),KIe.forEach(t),g4r=i(D),S6=n(D,"LI",{});var ZIe=s(S6);F3e=n(ZIe,"STRONG",{});var l7t=s(F3e);h4r=r(l7t,"speech_to_text"),l7t.forEach(t),p4r=r(ZIe," \u2014 "),eU=n(ZIe,"A",{href:!0});var i7t=s(eU);_4r=r(i7t,"TFSpeech2TextModel"),i7t.forEach(t),u4r=r(ZIe," (Speech2Text model)"),ZIe.forEach(t),b4r=i(D),R6=n(D,"LI",{});var eNe=s(R6);T3e=n(eNe,"STRONG",{});var d7t=s(T3e);v4r=r(d7t,"swin"),d7t.forEach(t),F4r=r(eNe," \u2014 "),oU=n(eNe,"A",{href:!0});var c7t=s(oU);T4r=r(c7t,"TFSwinModel"),c7t.forEach(t),M4r=r(eNe," (Swin Transformer model)"),eNe.forEach(t),E4r=i(D),P6=n(D,"LI",{});var oNe=s(P6);M3e=n(oNe,"STRONG",{});var f7t=s(M3e);C4r=r(f7t,"t5"),f7t.forEach(t),w4r=r(oNe," \u2014 "),rU=n(oNe,"A",{href:!0});var m7t=s(rU);A4r=r(m7t,"TFT5Model"),m7t.forEach(t),L4r=r(oNe," (T5 model)"),oNe.forEach(t),y4r=i(D),B6=n(D,"LI",{});var rNe=s(B6);E3e=n(rNe,"STRONG",{});var g7t=s(E3e);x4r=r(g7t,"tapas"),g7t.forEach(t),$4r=r(rNe," \u2014 "),tU=n(rNe,"A",{href:!0});var h7t=s(tU);k4r=r(h7t,"TFTapasModel"),h7t.forEach(t),S4r=r(rNe," (TAPAS model)"),rNe.forEach(t),R4r=i(D),I6=n(D,"LI",{});var tNe=s(I6);C3e=n(tNe,"STRONG",{});var p7t=s(C3e);P4r=r(p7t,"transfo-xl"),p7t.forEach(t),B4r=r(tNe," \u2014 "),aU=n(tNe,"A",{href:!0});var _7t=s(aU);I4r=r(_7t,"TFTransfoXLModel"),_7t.forEach(t),N4r=r(tNe," (Transformer-XL model)"),tNe.forEach(t),q4r=i(D),N6=n(D,"LI",{});var aNe=s(N6);w3e=n(aNe,"STRONG",{});var u7t=s(w3e);j4r=r(u7t,"vit"),u7t.forEach(t),D4r=r(aNe," \u2014 "),nU=n(aNe,"A",{href:!0});var b7t=s(nU);G4r=r(b7t,"TFViTModel"),b7t.forEach(t),O4r=r(aNe," (ViT model)"),aNe.forEach(t),V4r=i(D),q6=n(D,"LI",{});var nNe=s(q6);A3e=n(nNe,"STRONG",{});var v7t=s(A3e);X4r=r(v7t,"vit_mae"),v7t.forEach(t),z4r=r(nNe," \u2014 "),sU=n(nNe,"A",{href:!0});var F7t=s(sU);Q4r=r(F7t,"TFViTMAEModel"),F7t.forEach(t),W4r=r(nNe," (ViTMAE model)"),nNe.forEach(t),H4r=i(D),j6=n(D,"LI",{});var sNe=s(j6);L3e=n(sNe,"STRONG",{});var T7t=s(L3e);U4r=r(T7t,"wav2vec2"),T7t.forEach(t),J4r=r(sNe," \u2014 "),lU=n(sNe,"A",{href:!0});var M7t=s(lU);Y4r=r(M7t,"TFWav2Vec2Model"),M7t.forEach(t),K4r=r(sNe," (Wav2Vec2 model)"),sNe.forEach(t),Z4r=i(D),D6=n(D,"LI",{});var lNe=s(D6);y3e=n(lNe,"STRONG",{});var E7t=s(y3e);e5r=r(E7t,"xglm"),E7t.forEach(t),o5r=r(lNe," \u2014 "),iU=n(lNe,"A",{href:!0});var C7t=s(iU);r5r=r(C7t,"TFXGLMModel"),C7t.forEach(t),t5r=r(lNe," (XGLM model)"),lNe.forEach(t),a5r=i(D),G6=n(D,"LI",{});var iNe=s(G6);x3e=n(iNe,"STRONG",{});var w7t=s(x3e);n5r=r(w7t,"xlm"),w7t.forEach(t),s5r=r(iNe," \u2014 "),dU=n(iNe,"A",{href:!0});var A7t=s(dU);l5r=r(A7t,"TFXLMModel"),A7t.forEach(t),i5r=r(iNe," (XLM model)"),iNe.forEach(t),d5r=i(D),O6=n(D,"LI",{});var dNe=s(O6);$3e=n(dNe,"STRONG",{});var L7t=s($3e);c5r=r(L7t,"xlm-roberta"),L7t.forEach(t),f5r=r(dNe," \u2014 "),cU=n(dNe,"A",{href:!0});var y7t=s(cU);m5r=r(y7t,"TFXLMRobertaModel"),y7t.forEach(t),g5r=r(dNe," (XLM-RoBERTa model)"),dNe.forEach(t),h5r=i(D),V6=n(D,"LI",{});var cNe=s(V6);k3e=n(cNe,"STRONG",{});var x7t=s(k3e);p5r=r(x7t,"xlnet"),x7t.forEach(t),_5r=r(cNe," \u2014 "),fU=n(cNe,"A",{href:!0});var $7t=s(fU);u5r=r($7t,"TFXLNetModel"),$7t.forEach(t),b5r=r(cNe," (XLNet model)"),cNe.forEach(t),D.forEach(t),v5r=i(wl),T(X6.$$.fragment,wl),wl.forEach(t),Cl.forEach(t),vVe=i(f),ac=n(f,"H2",{class:!0});var Lze=s(ac);z6=n(Lze,"A",{id:!0,class:!0,href:!0});var k7t=s(z6);S3e=n(k7t,"SPAN",{});var S7t=s(S3e);T(A9.$$.fragment,S7t),S7t.forEach(t),k7t.forEach(t),F5r=i(Lze),R3e=n(Lze,"SPAN",{});var R7t=s(R3e);T5r=r(R7t,"TFAutoModelForPreTraining"),R7t.forEach(t),Lze.forEach(t),FVe=i(f),or=n(f,"DIV",{class:!0});var Al=s(or);T(L9.$$.fragment,Al),M5r=i(Al),nc=n(Al,"P",{});var $re=s(nc);E5r=r($re,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),mU=n($re,"A",{href:!0});var P7t=s(mU);C5r=r(P7t,"from_pretrained()"),P7t.forEach(t),w5r=r($re," class method or the "),gU=n($re,"A",{href:!0});var B7t=s(gU);A5r=r(B7t,"from_config()"),B7t.forEach(t),L5r=r($re,` class
method.`),$re.forEach(t),y5r=i(Al),y9=n(Al,"P",{});var yze=s(y9);x5r=r(yze,"This class cannot be instantiated directly using "),P3e=n(yze,"CODE",{});var I7t=s(P3e);$5r=r(I7t,"__init__()"),I7t.forEach(t),k5r=r(yze," (throws an error)."),yze.forEach(t),S5r=i(Al),kt=n(Al,"DIV",{class:!0});var PL=s(kt);T(x9.$$.fragment,PL),R5r=i(PL),B3e=n(PL,"P",{});var N7t=s(B3e);P5r=r(N7t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),N7t.forEach(t),B5r=i(PL),sc=n(PL,"P",{});var kre=s(sc);I5r=r(kre,`Note:
Loading a model from its configuration file does `),I3e=n(kre,"STRONG",{});var q7t=s(I3e);N5r=r(q7t,"not"),q7t.forEach(t),q5r=r(kre,` load the model weights. It only affects the
model\u2019s configuration. Use `),hU=n(kre,"A",{href:!0});var j7t=s(hU);j5r=r(j7t,"from_pretrained()"),j7t.forEach(t),D5r=r(kre," to load the model weights."),kre.forEach(t),G5r=i(PL),T(Q6.$$.fragment,PL),PL.forEach(t),O5r=i(Al),xr=n(Al,"DIV",{class:!0});var Ll=s(xr);T($9.$$.fragment,Ll),V5r=i(Ll),N3e=n(Ll,"P",{});var D7t=s(N3e);X5r=r(D7t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),D7t.forEach(t),z5r=i(Ll),nn=n(Ll,"P",{});var BL=s(nn);Q5r=r(BL,"The model class to instantiate is selected based on the "),q3e=n(BL,"CODE",{});var G7t=s(q3e);W5r=r(G7t,"model_type"),G7t.forEach(t),H5r=r(BL,` property of the config object (either
passed as an argument or loaded from `),j3e=n(BL,"CODE",{});var O7t=s(j3e);U5r=r(O7t,"pretrained_model_name_or_path"),O7t.forEach(t),J5r=r(BL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D3e=n(BL,"CODE",{});var V7t=s(D3e);Y5r=r(V7t,"pretrained_model_name_or_path"),V7t.forEach(t),K5r=r(BL,":"),BL.forEach(t),Z5r=i(Ll),se=n(Ll,"UL",{});var le=s(se);W6=n(le,"LI",{});var fNe=s(W6);G3e=n(fNe,"STRONG",{});var X7t=s(G3e);e3r=r(X7t,"albert"),X7t.forEach(t),o3r=r(fNe," \u2014 "),pU=n(fNe,"A",{href:!0});var z7t=s(pU);r3r=r(z7t,"TFAlbertForPreTraining"),z7t.forEach(t),t3r=r(fNe," (ALBERT model)"),fNe.forEach(t),a3r=i(le),H6=n(le,"LI",{});var mNe=s(H6);O3e=n(mNe,"STRONG",{});var Q7t=s(O3e);n3r=r(Q7t,"bart"),Q7t.forEach(t),s3r=r(mNe," \u2014 "),_U=n(mNe,"A",{href:!0});var W7t=s(_U);l3r=r(W7t,"TFBartForConditionalGeneration"),W7t.forEach(t),i3r=r(mNe," (BART model)"),mNe.forEach(t),d3r=i(le),U6=n(le,"LI",{});var gNe=s(U6);V3e=n(gNe,"STRONG",{});var H7t=s(V3e);c3r=r(H7t,"bert"),H7t.forEach(t),f3r=r(gNe," \u2014 "),uU=n(gNe,"A",{href:!0});var U7t=s(uU);m3r=r(U7t,"TFBertForPreTraining"),U7t.forEach(t),g3r=r(gNe," (BERT model)"),gNe.forEach(t),h3r=i(le),J6=n(le,"LI",{});var hNe=s(J6);X3e=n(hNe,"STRONG",{});var J7t=s(X3e);p3r=r(J7t,"camembert"),J7t.forEach(t),_3r=r(hNe," \u2014 "),bU=n(hNe,"A",{href:!0});var Y7t=s(bU);u3r=r(Y7t,"TFCamembertForMaskedLM"),Y7t.forEach(t),b3r=r(hNe," (CamemBERT model)"),hNe.forEach(t),v3r=i(le),Y6=n(le,"LI",{});var pNe=s(Y6);z3e=n(pNe,"STRONG",{});var K7t=s(z3e);F3r=r(K7t,"ctrl"),K7t.forEach(t),T3r=r(pNe," \u2014 "),vU=n(pNe,"A",{href:!0});var Z7t=s(vU);M3r=r(Z7t,"TFCTRLLMHeadModel"),Z7t.forEach(t),E3r=r(pNe," (CTRL model)"),pNe.forEach(t),C3r=i(le),K6=n(le,"LI",{});var _Ne=s(K6);Q3e=n(_Ne,"STRONG",{});var eyt=s(Q3e);w3r=r(eyt,"distilbert"),eyt.forEach(t),A3r=r(_Ne," \u2014 "),FU=n(_Ne,"A",{href:!0});var oyt=s(FU);L3r=r(oyt,"TFDistilBertForMaskedLM"),oyt.forEach(t),y3r=r(_Ne," (DistilBERT model)"),_Ne.forEach(t),x3r=i(le),Z6=n(le,"LI",{});var uNe=s(Z6);W3e=n(uNe,"STRONG",{});var ryt=s(W3e);$3r=r(ryt,"electra"),ryt.forEach(t),k3r=r(uNe," \u2014 "),TU=n(uNe,"A",{href:!0});var tyt=s(TU);S3r=r(tyt,"TFElectraForPreTraining"),tyt.forEach(t),R3r=r(uNe," (ELECTRA model)"),uNe.forEach(t),P3r=i(le),eT=n(le,"LI",{});var bNe=s(eT);H3e=n(bNe,"STRONG",{});var ayt=s(H3e);B3r=r(ayt,"flaubert"),ayt.forEach(t),I3r=r(bNe," \u2014 "),MU=n(bNe,"A",{href:!0});var nyt=s(MU);N3r=r(nyt,"TFFlaubertWithLMHeadModel"),nyt.forEach(t),q3r=r(bNe," (FlauBERT model)"),bNe.forEach(t),j3r=i(le),oT=n(le,"LI",{});var vNe=s(oT);U3e=n(vNe,"STRONG",{});var syt=s(U3e);D3r=r(syt,"funnel"),syt.forEach(t),G3r=r(vNe," \u2014 "),EU=n(vNe,"A",{href:!0});var lyt=s(EU);O3r=r(lyt,"TFFunnelForPreTraining"),lyt.forEach(t),V3r=r(vNe," (Funnel Transformer model)"),vNe.forEach(t),X3r=i(le),rT=n(le,"LI",{});var FNe=s(rT);J3e=n(FNe,"STRONG",{});var iyt=s(J3e);z3r=r(iyt,"gpt2"),iyt.forEach(t),Q3r=r(FNe," \u2014 "),CU=n(FNe,"A",{href:!0});var dyt=s(CU);W3r=r(dyt,"TFGPT2LMHeadModel"),dyt.forEach(t),H3r=r(FNe," (OpenAI GPT-2 model)"),FNe.forEach(t),U3r=i(le),tT=n(le,"LI",{});var TNe=s(tT);Y3e=n(TNe,"STRONG",{});var cyt=s(Y3e);J3r=r(cyt,"layoutlm"),cyt.forEach(t),Y3r=r(TNe," \u2014 "),wU=n(TNe,"A",{href:!0});var fyt=s(wU);K3r=r(fyt,"TFLayoutLMForMaskedLM"),fyt.forEach(t),Z3r=r(TNe," (LayoutLM model)"),TNe.forEach(t),evr=i(le),aT=n(le,"LI",{});var MNe=s(aT);K3e=n(MNe,"STRONG",{});var myt=s(K3e);ovr=r(myt,"lxmert"),myt.forEach(t),rvr=r(MNe," \u2014 "),AU=n(MNe,"A",{href:!0});var gyt=s(AU);tvr=r(gyt,"TFLxmertForPreTraining"),gyt.forEach(t),avr=r(MNe," (LXMERT model)"),MNe.forEach(t),nvr=i(le),nT=n(le,"LI",{});var ENe=s(nT);Z3e=n(ENe,"STRONG",{});var hyt=s(Z3e);svr=r(hyt,"mobilebert"),hyt.forEach(t),lvr=r(ENe," \u2014 "),LU=n(ENe,"A",{href:!0});var pyt=s(LU);ivr=r(pyt,"TFMobileBertForPreTraining"),pyt.forEach(t),dvr=r(ENe," (MobileBERT model)"),ENe.forEach(t),cvr=i(le),sT=n(le,"LI",{});var CNe=s(sT);eve=n(CNe,"STRONG",{});var _yt=s(eve);fvr=r(_yt,"mpnet"),_yt.forEach(t),mvr=r(CNe," \u2014 "),yU=n(CNe,"A",{href:!0});var uyt=s(yU);gvr=r(uyt,"TFMPNetForMaskedLM"),uyt.forEach(t),hvr=r(CNe," (MPNet model)"),CNe.forEach(t),pvr=i(le),lT=n(le,"LI",{});var wNe=s(lT);ove=n(wNe,"STRONG",{});var byt=s(ove);_vr=r(byt,"openai-gpt"),byt.forEach(t),uvr=r(wNe," \u2014 "),xU=n(wNe,"A",{href:!0});var vyt=s(xU);bvr=r(vyt,"TFOpenAIGPTLMHeadModel"),vyt.forEach(t),vvr=r(wNe," (OpenAI GPT model)"),wNe.forEach(t),Fvr=i(le),iT=n(le,"LI",{});var ANe=s(iT);rve=n(ANe,"STRONG",{});var Fyt=s(rve);Tvr=r(Fyt,"roberta"),Fyt.forEach(t),Mvr=r(ANe," \u2014 "),$U=n(ANe,"A",{href:!0});var Tyt=s($U);Evr=r(Tyt,"TFRobertaForMaskedLM"),Tyt.forEach(t),Cvr=r(ANe," (RoBERTa model)"),ANe.forEach(t),wvr=i(le),dT=n(le,"LI",{});var LNe=s(dT);tve=n(LNe,"STRONG",{});var Myt=s(tve);Avr=r(Myt,"t5"),Myt.forEach(t),Lvr=r(LNe," \u2014 "),kU=n(LNe,"A",{href:!0});var Eyt=s(kU);yvr=r(Eyt,"TFT5ForConditionalGeneration"),Eyt.forEach(t),xvr=r(LNe," (T5 model)"),LNe.forEach(t),$vr=i(le),cT=n(le,"LI",{});var yNe=s(cT);ave=n(yNe,"STRONG",{});var Cyt=s(ave);kvr=r(Cyt,"tapas"),Cyt.forEach(t),Svr=r(yNe," \u2014 "),SU=n(yNe,"A",{href:!0});var wyt=s(SU);Rvr=r(wyt,"TFTapasForMaskedLM"),wyt.forEach(t),Pvr=r(yNe," (TAPAS model)"),yNe.forEach(t),Bvr=i(le),fT=n(le,"LI",{});var xNe=s(fT);nve=n(xNe,"STRONG",{});var Ayt=s(nve);Ivr=r(Ayt,"transfo-xl"),Ayt.forEach(t),Nvr=r(xNe," \u2014 "),RU=n(xNe,"A",{href:!0});var Lyt=s(RU);qvr=r(Lyt,"TFTransfoXLLMHeadModel"),Lyt.forEach(t),jvr=r(xNe," (Transformer-XL model)"),xNe.forEach(t),Dvr=i(le),mT=n(le,"LI",{});var $Ne=s(mT);sve=n($Ne,"STRONG",{});var yyt=s(sve);Gvr=r(yyt,"vit_mae"),yyt.forEach(t),Ovr=r($Ne," \u2014 "),PU=n($Ne,"A",{href:!0});var xyt=s(PU);Vvr=r(xyt,"TFViTMAEForPreTraining"),xyt.forEach(t),Xvr=r($Ne," (ViTMAE model)"),$Ne.forEach(t),zvr=i(le),gT=n(le,"LI",{});var kNe=s(gT);lve=n(kNe,"STRONG",{});var $yt=s(lve);Qvr=r($yt,"xlm"),$yt.forEach(t),Wvr=r(kNe," \u2014 "),BU=n(kNe,"A",{href:!0});var kyt=s(BU);Hvr=r(kyt,"TFXLMWithLMHeadModel"),kyt.forEach(t),Uvr=r(kNe," (XLM model)"),kNe.forEach(t),Jvr=i(le),hT=n(le,"LI",{});var SNe=s(hT);ive=n(SNe,"STRONG",{});var Syt=s(ive);Yvr=r(Syt,"xlm-roberta"),Syt.forEach(t),Kvr=r(SNe," \u2014 "),IU=n(SNe,"A",{href:!0});var Ryt=s(IU);Zvr=r(Ryt,"TFXLMRobertaForMaskedLM"),Ryt.forEach(t),eFr=r(SNe," (XLM-RoBERTa model)"),SNe.forEach(t),oFr=i(le),pT=n(le,"LI",{});var RNe=s(pT);dve=n(RNe,"STRONG",{});var Pyt=s(dve);rFr=r(Pyt,"xlnet"),Pyt.forEach(t),tFr=r(RNe," \u2014 "),NU=n(RNe,"A",{href:!0});var Byt=s(NU);aFr=r(Byt,"TFXLNetLMHeadModel"),Byt.forEach(t),nFr=r(RNe," (XLNet model)"),RNe.forEach(t),le.forEach(t),sFr=i(Ll),T(_T.$$.fragment,Ll),Ll.forEach(t),Al.forEach(t),TVe=i(f),lc=n(f,"H2",{class:!0});var xze=s(lc);uT=n(xze,"A",{id:!0,class:!0,href:!0});var Iyt=s(uT);cve=n(Iyt,"SPAN",{});var Nyt=s(cve);T(k9.$$.fragment,Nyt),Nyt.forEach(t),Iyt.forEach(t),lFr=i(xze),fve=n(xze,"SPAN",{});var qyt=s(fve);iFr=r(qyt,"TFAutoModelForCausalLM"),qyt.forEach(t),xze.forEach(t),MVe=i(f),rr=n(f,"DIV",{class:!0});var yl=s(rr);T(S9.$$.fragment,yl),dFr=i(yl),ic=n(yl,"P",{});var Sre=s(ic);cFr=r(Sre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),qU=n(Sre,"A",{href:!0});var jyt=s(qU);fFr=r(jyt,"from_pretrained()"),jyt.forEach(t),mFr=r(Sre," class method or the "),jU=n(Sre,"A",{href:!0});var Dyt=s(jU);gFr=r(Dyt,"from_config()"),Dyt.forEach(t),hFr=r(Sre,` class
method.`),Sre.forEach(t),pFr=i(yl),R9=n(yl,"P",{});var $ze=s(R9);_Fr=r($ze,"This class cannot be instantiated directly using "),mve=n($ze,"CODE",{});var Gyt=s(mve);uFr=r(Gyt,"__init__()"),Gyt.forEach(t),bFr=r($ze," (throws an error)."),$ze.forEach(t),vFr=i(yl),St=n(yl,"DIV",{class:!0});var IL=s(St);T(P9.$$.fragment,IL),FFr=i(IL),gve=n(IL,"P",{});var Oyt=s(gve);TFr=r(Oyt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Oyt.forEach(t),MFr=i(IL),dc=n(IL,"P",{});var Rre=s(dc);EFr=r(Rre,`Note:
Loading a model from its configuration file does `),hve=n(Rre,"STRONG",{});var Vyt=s(hve);CFr=r(Vyt,"not"),Vyt.forEach(t),wFr=r(Rre,` load the model weights. It only affects the
model\u2019s configuration. Use `),DU=n(Rre,"A",{href:!0});var Xyt=s(DU);AFr=r(Xyt,"from_pretrained()"),Xyt.forEach(t),LFr=r(Rre," to load the model weights."),Rre.forEach(t),yFr=i(IL),T(bT.$$.fragment,IL),IL.forEach(t),xFr=i(yl),$r=n(yl,"DIV",{class:!0});var xl=s($r);T(B9.$$.fragment,xl),$Fr=i(xl),pve=n(xl,"P",{});var zyt=s(pve);kFr=r(zyt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),zyt.forEach(t),SFr=i(xl),sn=n(xl,"P",{});var NL=s(sn);RFr=r(NL,"The model class to instantiate is selected based on the "),_ve=n(NL,"CODE",{});var Qyt=s(_ve);PFr=r(Qyt,"model_type"),Qyt.forEach(t),BFr=r(NL,` property of the config object (either
passed as an argument or loaded from `),uve=n(NL,"CODE",{});var Wyt=s(uve);IFr=r(Wyt,"pretrained_model_name_or_path"),Wyt.forEach(t),NFr=r(NL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bve=n(NL,"CODE",{});var Hyt=s(bve);qFr=r(Hyt,"pretrained_model_name_or_path"),Hyt.forEach(t),jFr=r(NL,":"),NL.forEach(t),DFr=i(xl),Te=n(xl,"UL",{});var Ce=s(Te);vT=n(Ce,"LI",{});var PNe=s(vT);vve=n(PNe,"STRONG",{});var Uyt=s(vve);GFr=r(Uyt,"bert"),Uyt.forEach(t),OFr=r(PNe," \u2014 "),GU=n(PNe,"A",{href:!0});var Jyt=s(GU);VFr=r(Jyt,"TFBertLMHeadModel"),Jyt.forEach(t),XFr=r(PNe," (BERT model)"),PNe.forEach(t),zFr=i(Ce),FT=n(Ce,"LI",{});var BNe=s(FT);Fve=n(BNe,"STRONG",{});var Yyt=s(Fve);QFr=r(Yyt,"camembert"),Yyt.forEach(t),WFr=r(BNe," \u2014 "),OU=n(BNe,"A",{href:!0});var Kyt=s(OU);HFr=r(Kyt,"TFCamembertForCausalLM"),Kyt.forEach(t),UFr=r(BNe," (CamemBERT model)"),BNe.forEach(t),JFr=i(Ce),TT=n(Ce,"LI",{});var INe=s(TT);Tve=n(INe,"STRONG",{});var Zyt=s(Tve);YFr=r(Zyt,"ctrl"),Zyt.forEach(t),KFr=r(INe," \u2014 "),VU=n(INe,"A",{href:!0});var e8t=s(VU);ZFr=r(e8t,"TFCTRLLMHeadModel"),e8t.forEach(t),e6r=r(INe," (CTRL model)"),INe.forEach(t),o6r=i(Ce),MT=n(Ce,"LI",{});var NNe=s(MT);Mve=n(NNe,"STRONG",{});var o8t=s(Mve);r6r=r(o8t,"gpt2"),o8t.forEach(t),t6r=r(NNe," \u2014 "),XU=n(NNe,"A",{href:!0});var r8t=s(XU);a6r=r(r8t,"TFGPT2LMHeadModel"),r8t.forEach(t),n6r=r(NNe," (OpenAI GPT-2 model)"),NNe.forEach(t),s6r=i(Ce),ET=n(Ce,"LI",{});var qNe=s(ET);Eve=n(qNe,"STRONG",{});var t8t=s(Eve);l6r=r(t8t,"gptj"),t8t.forEach(t),i6r=r(qNe," \u2014 "),zU=n(qNe,"A",{href:!0});var a8t=s(zU);d6r=r(a8t,"TFGPTJForCausalLM"),a8t.forEach(t),c6r=r(qNe," (GPT-J model)"),qNe.forEach(t),f6r=i(Ce),CT=n(Ce,"LI",{});var jNe=s(CT);Cve=n(jNe,"STRONG",{});var n8t=s(Cve);m6r=r(n8t,"openai-gpt"),n8t.forEach(t),g6r=r(jNe," \u2014 "),QU=n(jNe,"A",{href:!0});var s8t=s(QU);h6r=r(s8t,"TFOpenAIGPTLMHeadModel"),s8t.forEach(t),p6r=r(jNe," (OpenAI GPT model)"),jNe.forEach(t),_6r=i(Ce),wT=n(Ce,"LI",{});var DNe=s(wT);wve=n(DNe,"STRONG",{});var l8t=s(wve);u6r=r(l8t,"opt"),l8t.forEach(t),b6r=r(DNe," \u2014 "),WU=n(DNe,"A",{href:!0});var i8t=s(WU);v6r=r(i8t,"TFOPTForCausalLM"),i8t.forEach(t),F6r=r(DNe," (OPT model)"),DNe.forEach(t),T6r=i(Ce),AT=n(Ce,"LI",{});var GNe=s(AT);Ave=n(GNe,"STRONG",{});var d8t=s(Ave);M6r=r(d8t,"rembert"),d8t.forEach(t),E6r=r(GNe," \u2014 "),HU=n(GNe,"A",{href:!0});var c8t=s(HU);C6r=r(c8t,"TFRemBertForCausalLM"),c8t.forEach(t),w6r=r(GNe," (RemBERT model)"),GNe.forEach(t),A6r=i(Ce),LT=n(Ce,"LI",{});var ONe=s(LT);Lve=n(ONe,"STRONG",{});var f8t=s(Lve);L6r=r(f8t,"roberta"),f8t.forEach(t),y6r=r(ONe," \u2014 "),UU=n(ONe,"A",{href:!0});var m8t=s(UU);x6r=r(m8t,"TFRobertaForCausalLM"),m8t.forEach(t),$6r=r(ONe," (RoBERTa model)"),ONe.forEach(t),k6r=i(Ce),yT=n(Ce,"LI",{});var VNe=s(yT);yve=n(VNe,"STRONG",{});var g8t=s(yve);S6r=r(g8t,"roformer"),g8t.forEach(t),R6r=r(VNe," \u2014 "),JU=n(VNe,"A",{href:!0});var h8t=s(JU);P6r=r(h8t,"TFRoFormerForCausalLM"),h8t.forEach(t),B6r=r(VNe," (RoFormer model)"),VNe.forEach(t),I6r=i(Ce),xT=n(Ce,"LI",{});var XNe=s(xT);xve=n(XNe,"STRONG",{});var p8t=s(xve);N6r=r(p8t,"transfo-xl"),p8t.forEach(t),q6r=r(XNe," \u2014 "),YU=n(XNe,"A",{href:!0});var _8t=s(YU);j6r=r(_8t,"TFTransfoXLLMHeadModel"),_8t.forEach(t),D6r=r(XNe," (Transformer-XL model)"),XNe.forEach(t),G6r=i(Ce),$T=n(Ce,"LI",{});var zNe=s($T);$ve=n(zNe,"STRONG",{});var u8t=s($ve);O6r=r(u8t,"xglm"),u8t.forEach(t),V6r=r(zNe," \u2014 "),KU=n(zNe,"A",{href:!0});var b8t=s(KU);X6r=r(b8t,"TFXGLMForCausalLM"),b8t.forEach(t),z6r=r(zNe," (XGLM model)"),zNe.forEach(t),Q6r=i(Ce),kT=n(Ce,"LI",{});var QNe=s(kT);kve=n(QNe,"STRONG",{});var v8t=s(kve);W6r=r(v8t,"xlm"),v8t.forEach(t),H6r=r(QNe," \u2014 "),ZU=n(QNe,"A",{href:!0});var F8t=s(ZU);U6r=r(F8t,"TFXLMWithLMHeadModel"),F8t.forEach(t),J6r=r(QNe," (XLM model)"),QNe.forEach(t),Y6r=i(Ce),ST=n(Ce,"LI",{});var WNe=s(ST);Sve=n(WNe,"STRONG",{});var T8t=s(Sve);K6r=r(T8t,"xlnet"),T8t.forEach(t),Z6r=r(WNe," \u2014 "),eJ=n(WNe,"A",{href:!0});var M8t=s(eJ);eTr=r(M8t,"TFXLNetLMHeadModel"),M8t.forEach(t),oTr=r(WNe," (XLNet model)"),WNe.forEach(t),Ce.forEach(t),rTr=i(xl),T(RT.$$.fragment,xl),xl.forEach(t),yl.forEach(t),EVe=i(f),cc=n(f,"H2",{class:!0});var kze=s(cc);PT=n(kze,"A",{id:!0,class:!0,href:!0});var E8t=s(PT);Rve=n(E8t,"SPAN",{});var C8t=s(Rve);T(I9.$$.fragment,C8t),C8t.forEach(t),E8t.forEach(t),tTr=i(kze),Pve=n(kze,"SPAN",{});var w8t=s(Pve);aTr=r(w8t,"TFAutoModelForImageClassification"),w8t.forEach(t),kze.forEach(t),CVe=i(f),tr=n(f,"DIV",{class:!0});var $l=s(tr);T(N9.$$.fragment,$l),nTr=i($l),fc=n($l,"P",{});var Pre=s(fc);sTr=r(Pre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),oJ=n(Pre,"A",{href:!0});var A8t=s(oJ);lTr=r(A8t,"from_pretrained()"),A8t.forEach(t),iTr=r(Pre," class method or the "),rJ=n(Pre,"A",{href:!0});var L8t=s(rJ);dTr=r(L8t,"from_config()"),L8t.forEach(t),cTr=r(Pre,` class
method.`),Pre.forEach(t),fTr=i($l),q9=n($l,"P",{});var Sze=s(q9);mTr=r(Sze,"This class cannot be instantiated directly using "),Bve=n(Sze,"CODE",{});var y8t=s(Bve);gTr=r(y8t,"__init__()"),y8t.forEach(t),hTr=r(Sze," (throws an error)."),Sze.forEach(t),pTr=i($l),Rt=n($l,"DIV",{class:!0});var qL=s(Rt);T(j9.$$.fragment,qL),_Tr=i(qL),Ive=n(qL,"P",{});var x8t=s(Ive);uTr=r(x8t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),x8t.forEach(t),bTr=i(qL),mc=n(qL,"P",{});var Bre=s(mc);vTr=r(Bre,`Note:
Loading a model from its configuration file does `),Nve=n(Bre,"STRONG",{});var $8t=s(Nve);FTr=r($8t,"not"),$8t.forEach(t),TTr=r(Bre,` load the model weights. It only affects the
model\u2019s configuration. Use `),tJ=n(Bre,"A",{href:!0});var k8t=s(tJ);MTr=r(k8t,"from_pretrained()"),k8t.forEach(t),ETr=r(Bre," to load the model weights."),Bre.forEach(t),CTr=i(qL),T(BT.$$.fragment,qL),qL.forEach(t),wTr=i($l),kr=n($l,"DIV",{class:!0});var kl=s(kr);T(D9.$$.fragment,kl),ATr=i(kl),qve=n(kl,"P",{});var S8t=s(qve);LTr=r(S8t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),S8t.forEach(t),yTr=i(kl),ln=n(kl,"P",{});var jL=s(ln);xTr=r(jL,"The model class to instantiate is selected based on the "),jve=n(jL,"CODE",{});var R8t=s(jve);$Tr=r(R8t,"model_type"),R8t.forEach(t),kTr=r(jL,` property of the config object (either
passed as an argument or loaded from `),Dve=n(jL,"CODE",{});var P8t=s(Dve);STr=r(P8t,"pretrained_model_name_or_path"),P8t.forEach(t),RTr=r(jL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gve=n(jL,"CODE",{});var B8t=s(Gve);PTr=r(B8t,"pretrained_model_name_or_path"),B8t.forEach(t),BTr=r(jL,":"),jL.forEach(t),ITr=i(kl),dn=n(kl,"UL",{});var DL=s(dn);IT=n(DL,"LI",{});var HNe=s(IT);Ove=n(HNe,"STRONG",{});var I8t=s(Ove);NTr=r(I8t,"convnext"),I8t.forEach(t),qTr=r(HNe," \u2014 "),aJ=n(HNe,"A",{href:!0});var N8t=s(aJ);jTr=r(N8t,"TFConvNextForImageClassification"),N8t.forEach(t),DTr=r(HNe," (ConvNeXT model)"),HNe.forEach(t),GTr=i(DL),NT=n(DL,"LI",{});var UNe=s(NT);Vve=n(UNe,"STRONG",{});var q8t=s(Vve);OTr=r(q8t,"data2vec-vision"),q8t.forEach(t),VTr=r(UNe," \u2014 "),nJ=n(UNe,"A",{href:!0});var j8t=s(nJ);XTr=r(j8t,"TFData2VecVisionForImageClassification"),j8t.forEach(t),zTr=r(UNe," (Data2VecVision model)"),UNe.forEach(t),QTr=i(DL),qT=n(DL,"LI",{});var JNe=s(qT);Xve=n(JNe,"STRONG",{});var D8t=s(Xve);WTr=r(D8t,"swin"),D8t.forEach(t),HTr=r(JNe," \u2014 "),sJ=n(JNe,"A",{href:!0});var G8t=s(sJ);UTr=r(G8t,"TFSwinForImageClassification"),G8t.forEach(t),JTr=r(JNe," (Swin Transformer model)"),JNe.forEach(t),YTr=i(DL),jT=n(DL,"LI",{});var YNe=s(jT);zve=n(YNe,"STRONG",{});var O8t=s(zve);KTr=r(O8t,"vit"),O8t.forEach(t),ZTr=r(YNe," \u2014 "),lJ=n(YNe,"A",{href:!0});var V8t=s(lJ);eMr=r(V8t,"TFViTForImageClassification"),V8t.forEach(t),oMr=r(YNe," (ViT model)"),YNe.forEach(t),DL.forEach(t),rMr=i(kl),T(DT.$$.fragment,kl),kl.forEach(t),$l.forEach(t),wVe=i(f),gc=n(f,"H2",{class:!0});var Rze=s(gc);GT=n(Rze,"A",{id:!0,class:!0,href:!0});var X8t=s(GT);Qve=n(X8t,"SPAN",{});var z8t=s(Qve);T(G9.$$.fragment,z8t),z8t.forEach(t),X8t.forEach(t),tMr=i(Rze),Wve=n(Rze,"SPAN",{});var Q8t=s(Wve);aMr=r(Q8t,"TFAutoModelForMaskedLM"),Q8t.forEach(t),Rze.forEach(t),AVe=i(f),ar=n(f,"DIV",{class:!0});var Sl=s(ar);T(O9.$$.fragment,Sl),nMr=i(Sl),hc=n(Sl,"P",{});var Ire=s(hc);sMr=r(Ire,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),iJ=n(Ire,"A",{href:!0});var W8t=s(iJ);lMr=r(W8t,"from_pretrained()"),W8t.forEach(t),iMr=r(Ire," class method or the "),dJ=n(Ire,"A",{href:!0});var H8t=s(dJ);dMr=r(H8t,"from_config()"),H8t.forEach(t),cMr=r(Ire,` class
method.`),Ire.forEach(t),fMr=i(Sl),V9=n(Sl,"P",{});var Pze=s(V9);mMr=r(Pze,"This class cannot be instantiated directly using "),Hve=n(Pze,"CODE",{});var U8t=s(Hve);gMr=r(U8t,"__init__()"),U8t.forEach(t),hMr=r(Pze," (throws an error)."),Pze.forEach(t),pMr=i(Sl),Pt=n(Sl,"DIV",{class:!0});var GL=s(Pt);T(X9.$$.fragment,GL),_Mr=i(GL),Uve=n(GL,"P",{});var J8t=s(Uve);uMr=r(J8t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),J8t.forEach(t),bMr=i(GL),pc=n(GL,"P",{});var Nre=s(pc);vMr=r(Nre,`Note:
Loading a model from its configuration file does `),Jve=n(Nre,"STRONG",{});var Y8t=s(Jve);FMr=r(Y8t,"not"),Y8t.forEach(t),TMr=r(Nre,` load the model weights. It only affects the
model\u2019s configuration. Use `),cJ=n(Nre,"A",{href:!0});var K8t=s(cJ);MMr=r(K8t,"from_pretrained()"),K8t.forEach(t),EMr=r(Nre," to load the model weights."),Nre.forEach(t),CMr=i(GL),T(OT.$$.fragment,GL),GL.forEach(t),wMr=i(Sl),Sr=n(Sl,"DIV",{class:!0});var Rl=s(Sr);T(z9.$$.fragment,Rl),AMr=i(Rl),Yve=n(Rl,"P",{});var Z8t=s(Yve);LMr=r(Z8t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Z8t.forEach(t),yMr=i(Rl),cn=n(Rl,"P",{});var OL=s(cn);xMr=r(OL,"The model class to instantiate is selected based on the "),Kve=n(OL,"CODE",{});var e9t=s(Kve);$Mr=r(e9t,"model_type"),e9t.forEach(t),kMr=r(OL,` property of the config object (either
passed as an argument or loaded from `),Zve=n(OL,"CODE",{});var o9t=s(Zve);SMr=r(o9t,"pretrained_model_name_or_path"),o9t.forEach(t),RMr=r(OL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eFe=n(OL,"CODE",{});var r9t=s(eFe);PMr=r(r9t,"pretrained_model_name_or_path"),r9t.forEach(t),BMr=r(OL,":"),OL.forEach(t),IMr=i(Rl),ie=n(Rl,"UL",{});var fe=s(ie);VT=n(fe,"LI",{});var KNe=s(VT);oFe=n(KNe,"STRONG",{});var t9t=s(oFe);NMr=r(t9t,"albert"),t9t.forEach(t),qMr=r(KNe," \u2014 "),fJ=n(KNe,"A",{href:!0});var a9t=s(fJ);jMr=r(a9t,"TFAlbertForMaskedLM"),a9t.forEach(t),DMr=r(KNe," (ALBERT model)"),KNe.forEach(t),GMr=i(fe),XT=n(fe,"LI",{});var ZNe=s(XT);rFe=n(ZNe,"STRONG",{});var n9t=s(rFe);OMr=r(n9t,"bert"),n9t.forEach(t),VMr=r(ZNe," \u2014 "),mJ=n(ZNe,"A",{href:!0});var s9t=s(mJ);XMr=r(s9t,"TFBertForMaskedLM"),s9t.forEach(t),zMr=r(ZNe," (BERT model)"),ZNe.forEach(t),QMr=i(fe),zT=n(fe,"LI",{});var eqe=s(zT);tFe=n(eqe,"STRONG",{});var l9t=s(tFe);WMr=r(l9t,"camembert"),l9t.forEach(t),HMr=r(eqe," \u2014 "),gJ=n(eqe,"A",{href:!0});var i9t=s(gJ);UMr=r(i9t,"TFCamembertForMaskedLM"),i9t.forEach(t),JMr=r(eqe," (CamemBERT model)"),eqe.forEach(t),YMr=i(fe),QT=n(fe,"LI",{});var oqe=s(QT);aFe=n(oqe,"STRONG",{});var d9t=s(aFe);KMr=r(d9t,"convbert"),d9t.forEach(t),ZMr=r(oqe," \u2014 "),hJ=n(oqe,"A",{href:!0});var c9t=s(hJ);eEr=r(c9t,"TFConvBertForMaskedLM"),c9t.forEach(t),oEr=r(oqe," (ConvBERT model)"),oqe.forEach(t),rEr=i(fe),WT=n(fe,"LI",{});var rqe=s(WT);nFe=n(rqe,"STRONG",{});var f9t=s(nFe);tEr=r(f9t,"deberta"),f9t.forEach(t),aEr=r(rqe," \u2014 "),pJ=n(rqe,"A",{href:!0});var m9t=s(pJ);nEr=r(m9t,"TFDebertaForMaskedLM"),m9t.forEach(t),sEr=r(rqe," (DeBERTa model)"),rqe.forEach(t),lEr=i(fe),HT=n(fe,"LI",{});var tqe=s(HT);sFe=n(tqe,"STRONG",{});var g9t=s(sFe);iEr=r(g9t,"deberta-v2"),g9t.forEach(t),dEr=r(tqe," \u2014 "),_J=n(tqe,"A",{href:!0});var h9t=s(_J);cEr=r(h9t,"TFDebertaV2ForMaskedLM"),h9t.forEach(t),fEr=r(tqe," (DeBERTa-v2 model)"),tqe.forEach(t),mEr=i(fe),UT=n(fe,"LI",{});var aqe=s(UT);lFe=n(aqe,"STRONG",{});var p9t=s(lFe);gEr=r(p9t,"distilbert"),p9t.forEach(t),hEr=r(aqe," \u2014 "),uJ=n(aqe,"A",{href:!0});var _9t=s(uJ);pEr=r(_9t,"TFDistilBertForMaskedLM"),_9t.forEach(t),_Er=r(aqe," (DistilBERT model)"),aqe.forEach(t),uEr=i(fe),JT=n(fe,"LI",{});var nqe=s(JT);iFe=n(nqe,"STRONG",{});var u9t=s(iFe);bEr=r(u9t,"electra"),u9t.forEach(t),vEr=r(nqe," \u2014 "),bJ=n(nqe,"A",{href:!0});var b9t=s(bJ);FEr=r(b9t,"TFElectraForMaskedLM"),b9t.forEach(t),TEr=r(nqe," (ELECTRA model)"),nqe.forEach(t),MEr=i(fe),YT=n(fe,"LI",{});var sqe=s(YT);dFe=n(sqe,"STRONG",{});var v9t=s(dFe);EEr=r(v9t,"flaubert"),v9t.forEach(t),CEr=r(sqe," \u2014 "),vJ=n(sqe,"A",{href:!0});var F9t=s(vJ);wEr=r(F9t,"TFFlaubertWithLMHeadModel"),F9t.forEach(t),AEr=r(sqe," (FlauBERT model)"),sqe.forEach(t),LEr=i(fe),KT=n(fe,"LI",{});var lqe=s(KT);cFe=n(lqe,"STRONG",{});var T9t=s(cFe);yEr=r(T9t,"funnel"),T9t.forEach(t),xEr=r(lqe," \u2014 "),FJ=n(lqe,"A",{href:!0});var M9t=s(FJ);$Er=r(M9t,"TFFunnelForMaskedLM"),M9t.forEach(t),kEr=r(lqe," (Funnel Transformer model)"),lqe.forEach(t),SEr=i(fe),ZT=n(fe,"LI",{});var iqe=s(ZT);fFe=n(iqe,"STRONG",{});var E9t=s(fFe);REr=r(E9t,"layoutlm"),E9t.forEach(t),PEr=r(iqe," \u2014 "),TJ=n(iqe,"A",{href:!0});var C9t=s(TJ);BEr=r(C9t,"TFLayoutLMForMaskedLM"),C9t.forEach(t),IEr=r(iqe," (LayoutLM model)"),iqe.forEach(t),NEr=i(fe),eM=n(fe,"LI",{});var dqe=s(eM);mFe=n(dqe,"STRONG",{});var w9t=s(mFe);qEr=r(w9t,"longformer"),w9t.forEach(t),jEr=r(dqe," \u2014 "),MJ=n(dqe,"A",{href:!0});var A9t=s(MJ);DEr=r(A9t,"TFLongformerForMaskedLM"),A9t.forEach(t),GEr=r(dqe," (Longformer model)"),dqe.forEach(t),OEr=i(fe),oM=n(fe,"LI",{});var cqe=s(oM);gFe=n(cqe,"STRONG",{});var L9t=s(gFe);VEr=r(L9t,"mobilebert"),L9t.forEach(t),XEr=r(cqe," \u2014 "),EJ=n(cqe,"A",{href:!0});var y9t=s(EJ);zEr=r(y9t,"TFMobileBertForMaskedLM"),y9t.forEach(t),QEr=r(cqe," (MobileBERT model)"),cqe.forEach(t),WEr=i(fe),rM=n(fe,"LI",{});var fqe=s(rM);hFe=n(fqe,"STRONG",{});var x9t=s(hFe);HEr=r(x9t,"mpnet"),x9t.forEach(t),UEr=r(fqe," \u2014 "),CJ=n(fqe,"A",{href:!0});var $9t=s(CJ);JEr=r($9t,"TFMPNetForMaskedLM"),$9t.forEach(t),YEr=r(fqe," (MPNet model)"),fqe.forEach(t),KEr=i(fe),tM=n(fe,"LI",{});var mqe=s(tM);pFe=n(mqe,"STRONG",{});var k9t=s(pFe);ZEr=r(k9t,"rembert"),k9t.forEach(t),eCr=r(mqe," \u2014 "),wJ=n(mqe,"A",{href:!0});var S9t=s(wJ);oCr=r(S9t,"TFRemBertForMaskedLM"),S9t.forEach(t),rCr=r(mqe," (RemBERT model)"),mqe.forEach(t),tCr=i(fe),aM=n(fe,"LI",{});var gqe=s(aM);_Fe=n(gqe,"STRONG",{});var R9t=s(_Fe);aCr=r(R9t,"roberta"),R9t.forEach(t),nCr=r(gqe," \u2014 "),AJ=n(gqe,"A",{href:!0});var P9t=s(AJ);sCr=r(P9t,"TFRobertaForMaskedLM"),P9t.forEach(t),lCr=r(gqe," (RoBERTa model)"),gqe.forEach(t),iCr=i(fe),nM=n(fe,"LI",{});var hqe=s(nM);uFe=n(hqe,"STRONG",{});var B9t=s(uFe);dCr=r(B9t,"roformer"),B9t.forEach(t),cCr=r(hqe," \u2014 "),LJ=n(hqe,"A",{href:!0});var I9t=s(LJ);fCr=r(I9t,"TFRoFormerForMaskedLM"),I9t.forEach(t),mCr=r(hqe," (RoFormer model)"),hqe.forEach(t),gCr=i(fe),sM=n(fe,"LI",{});var pqe=s(sM);bFe=n(pqe,"STRONG",{});var N9t=s(bFe);hCr=r(N9t,"tapas"),N9t.forEach(t),pCr=r(pqe," \u2014 "),yJ=n(pqe,"A",{href:!0});var q9t=s(yJ);_Cr=r(q9t,"TFTapasForMaskedLM"),q9t.forEach(t),uCr=r(pqe," (TAPAS model)"),pqe.forEach(t),bCr=i(fe),lM=n(fe,"LI",{});var _qe=s(lM);vFe=n(_qe,"STRONG",{});var j9t=s(vFe);vCr=r(j9t,"xlm"),j9t.forEach(t),FCr=r(_qe," \u2014 "),xJ=n(_qe,"A",{href:!0});var D9t=s(xJ);TCr=r(D9t,"TFXLMWithLMHeadModel"),D9t.forEach(t),MCr=r(_qe," (XLM model)"),_qe.forEach(t),ECr=i(fe),iM=n(fe,"LI",{});var uqe=s(iM);FFe=n(uqe,"STRONG",{});var G9t=s(FFe);CCr=r(G9t,"xlm-roberta"),G9t.forEach(t),wCr=r(uqe," \u2014 "),$J=n(uqe,"A",{href:!0});var O9t=s($J);ACr=r(O9t,"TFXLMRobertaForMaskedLM"),O9t.forEach(t),LCr=r(uqe," (XLM-RoBERTa model)"),uqe.forEach(t),fe.forEach(t),yCr=i(Rl),T(dM.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),LVe=i(f),_c=n(f,"H2",{class:!0});var Bze=s(_c);cM=n(Bze,"A",{id:!0,class:!0,href:!0});var V9t=s(cM);TFe=n(V9t,"SPAN",{});var X9t=s(TFe);T(Q9.$$.fragment,X9t),X9t.forEach(t),V9t.forEach(t),xCr=i(Bze),MFe=n(Bze,"SPAN",{});var z9t=s(MFe);$Cr=r(z9t,"TFAutoModelForSeq2SeqLM"),z9t.forEach(t),Bze.forEach(t),yVe=i(f),nr=n(f,"DIV",{class:!0});var Pl=s(nr);T(W9.$$.fragment,Pl),kCr=i(Pl),uc=n(Pl,"P",{});var qre=s(uc);SCr=r(qre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),kJ=n(qre,"A",{href:!0});var Q9t=s(kJ);RCr=r(Q9t,"from_pretrained()"),Q9t.forEach(t),PCr=r(qre," class method or the "),SJ=n(qre,"A",{href:!0});var W9t=s(SJ);BCr=r(W9t,"from_config()"),W9t.forEach(t),ICr=r(qre,` class
method.`),qre.forEach(t),NCr=i(Pl),H9=n(Pl,"P",{});var Ize=s(H9);qCr=r(Ize,"This class cannot be instantiated directly using "),EFe=n(Ize,"CODE",{});var H9t=s(EFe);jCr=r(H9t,"__init__()"),H9t.forEach(t),DCr=r(Ize," (throws an error)."),Ize.forEach(t),GCr=i(Pl),Bt=n(Pl,"DIV",{class:!0});var VL=s(Bt);T(U9.$$.fragment,VL),OCr=i(VL),CFe=n(VL,"P",{});var U9t=s(CFe);VCr=r(U9t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),U9t.forEach(t),XCr=i(VL),bc=n(VL,"P",{});var jre=s(bc);zCr=r(jre,`Note:
Loading a model from its configuration file does `),wFe=n(jre,"STRONG",{});var J9t=s(wFe);QCr=r(J9t,"not"),J9t.forEach(t),WCr=r(jre,` load the model weights. It only affects the
model\u2019s configuration. Use `),RJ=n(jre,"A",{href:!0});var Y9t=s(RJ);HCr=r(Y9t,"from_pretrained()"),Y9t.forEach(t),UCr=r(jre," to load the model weights."),jre.forEach(t),JCr=i(VL),T(fM.$$.fragment,VL),VL.forEach(t),YCr=i(Pl),Rr=n(Pl,"DIV",{class:!0});var Bl=s(Rr);T(J9.$$.fragment,Bl),KCr=i(Bl),AFe=n(Bl,"P",{});var K9t=s(AFe);ZCr=r(K9t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),K9t.forEach(t),e0r=i(Bl),fn=n(Bl,"P",{});var XL=s(fn);o0r=r(XL,"The model class to instantiate is selected based on the "),LFe=n(XL,"CODE",{});var Z9t=s(LFe);r0r=r(Z9t,"model_type"),Z9t.forEach(t),t0r=r(XL,` property of the config object (either
passed as an argument or loaded from `),yFe=n(XL,"CODE",{});var ext=s(yFe);a0r=r(ext,"pretrained_model_name_or_path"),ext.forEach(t),n0r=r(XL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xFe=n(XL,"CODE",{});var oxt=s(xFe);s0r=r(oxt,"pretrained_model_name_or_path"),oxt.forEach(t),l0r=r(XL,":"),XL.forEach(t),i0r=i(Bl),ye=n(Bl,"UL",{});var Ie=s(ye);mM=n(Ie,"LI",{});var bqe=s(mM);$Fe=n(bqe,"STRONG",{});var rxt=s($Fe);d0r=r(rxt,"bart"),rxt.forEach(t),c0r=r(bqe," \u2014 "),PJ=n(bqe,"A",{href:!0});var txt=s(PJ);f0r=r(txt,"TFBartForConditionalGeneration"),txt.forEach(t),m0r=r(bqe," (BART model)"),bqe.forEach(t),g0r=i(Ie),gM=n(Ie,"LI",{});var vqe=s(gM);kFe=n(vqe,"STRONG",{});var axt=s(kFe);h0r=r(axt,"blenderbot"),axt.forEach(t),p0r=r(vqe," \u2014 "),BJ=n(vqe,"A",{href:!0});var nxt=s(BJ);_0r=r(nxt,"TFBlenderbotForConditionalGeneration"),nxt.forEach(t),u0r=r(vqe," (Blenderbot model)"),vqe.forEach(t),b0r=i(Ie),hM=n(Ie,"LI",{});var Fqe=s(hM);SFe=n(Fqe,"STRONG",{});var sxt=s(SFe);v0r=r(sxt,"blenderbot-small"),sxt.forEach(t),F0r=r(Fqe," \u2014 "),IJ=n(Fqe,"A",{href:!0});var lxt=s(IJ);T0r=r(lxt,"TFBlenderbotSmallForConditionalGeneration"),lxt.forEach(t),M0r=r(Fqe," (BlenderbotSmall model)"),Fqe.forEach(t),E0r=i(Ie),pM=n(Ie,"LI",{});var Tqe=s(pM);RFe=n(Tqe,"STRONG",{});var ixt=s(RFe);C0r=r(ixt,"encoder-decoder"),ixt.forEach(t),w0r=r(Tqe," \u2014 "),NJ=n(Tqe,"A",{href:!0});var dxt=s(NJ);A0r=r(dxt,"TFEncoderDecoderModel"),dxt.forEach(t),L0r=r(Tqe," (Encoder decoder model)"),Tqe.forEach(t),y0r=i(Ie),_M=n(Ie,"LI",{});var Mqe=s(_M);PFe=n(Mqe,"STRONG",{});var cxt=s(PFe);x0r=r(cxt,"led"),cxt.forEach(t),$0r=r(Mqe," \u2014 "),qJ=n(Mqe,"A",{href:!0});var fxt=s(qJ);k0r=r(fxt,"TFLEDForConditionalGeneration"),fxt.forEach(t),S0r=r(Mqe," (LED model)"),Mqe.forEach(t),R0r=i(Ie),uM=n(Ie,"LI",{});var Eqe=s(uM);BFe=n(Eqe,"STRONG",{});var mxt=s(BFe);P0r=r(mxt,"marian"),mxt.forEach(t),B0r=r(Eqe," \u2014 "),jJ=n(Eqe,"A",{href:!0});var gxt=s(jJ);I0r=r(gxt,"TFMarianMTModel"),gxt.forEach(t),N0r=r(Eqe," (Marian model)"),Eqe.forEach(t),q0r=i(Ie),bM=n(Ie,"LI",{});var Cqe=s(bM);IFe=n(Cqe,"STRONG",{});var hxt=s(IFe);j0r=r(hxt,"mbart"),hxt.forEach(t),D0r=r(Cqe," \u2014 "),DJ=n(Cqe,"A",{href:!0});var pxt=s(DJ);G0r=r(pxt,"TFMBartForConditionalGeneration"),pxt.forEach(t),O0r=r(Cqe," (mBART model)"),Cqe.forEach(t),V0r=i(Ie),vM=n(Ie,"LI",{});var wqe=s(vM);NFe=n(wqe,"STRONG",{});var _xt=s(NFe);X0r=r(_xt,"mt5"),_xt.forEach(t),z0r=r(wqe," \u2014 "),GJ=n(wqe,"A",{href:!0});var uxt=s(GJ);Q0r=r(uxt,"TFMT5ForConditionalGeneration"),uxt.forEach(t),W0r=r(wqe," (MT5 model)"),wqe.forEach(t),H0r=i(Ie),FM=n(Ie,"LI",{});var Aqe=s(FM);qFe=n(Aqe,"STRONG",{});var bxt=s(qFe);U0r=r(bxt,"pegasus"),bxt.forEach(t),J0r=r(Aqe," \u2014 "),OJ=n(Aqe,"A",{href:!0});var vxt=s(OJ);Y0r=r(vxt,"TFPegasusForConditionalGeneration"),vxt.forEach(t),K0r=r(Aqe," (Pegasus model)"),Aqe.forEach(t),Z0r=i(Ie),TM=n(Ie,"LI",{});var Lqe=s(TM);jFe=n(Lqe,"STRONG",{});var Fxt=s(jFe);ewr=r(Fxt,"t5"),Fxt.forEach(t),owr=r(Lqe," \u2014 "),VJ=n(Lqe,"A",{href:!0});var Txt=s(VJ);rwr=r(Txt,"TFT5ForConditionalGeneration"),Txt.forEach(t),twr=r(Lqe," (T5 model)"),Lqe.forEach(t),Ie.forEach(t),awr=i(Bl),T(MM.$$.fragment,Bl),Bl.forEach(t),Pl.forEach(t),xVe=i(f),vc=n(f,"H2",{class:!0});var Nze=s(vc);EM=n(Nze,"A",{id:!0,class:!0,href:!0});var Mxt=s(EM);DFe=n(Mxt,"SPAN",{});var Ext=s(DFe);T(Y9.$$.fragment,Ext),Ext.forEach(t),Mxt.forEach(t),nwr=i(Nze),GFe=n(Nze,"SPAN",{});var Cxt=s(GFe);swr=r(Cxt,"TFAutoModelForSequenceClassification"),Cxt.forEach(t),Nze.forEach(t),$Ve=i(f),sr=n(f,"DIV",{class:!0});var Il=s(sr);T(K9.$$.fragment,Il),lwr=i(Il),Fc=n(Il,"P",{});var Dre=s(Fc);iwr=r(Dre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),XJ=n(Dre,"A",{href:!0});var wxt=s(XJ);dwr=r(wxt,"from_pretrained()"),wxt.forEach(t),cwr=r(Dre," class method or the "),zJ=n(Dre,"A",{href:!0});var Axt=s(zJ);fwr=r(Axt,"from_config()"),Axt.forEach(t),mwr=r(Dre,` class
method.`),Dre.forEach(t),gwr=i(Il),Z9=n(Il,"P",{});var qze=s(Z9);hwr=r(qze,"This class cannot be instantiated directly using "),OFe=n(qze,"CODE",{});var Lxt=s(OFe);pwr=r(Lxt,"__init__()"),Lxt.forEach(t),_wr=r(qze," (throws an error)."),qze.forEach(t),uwr=i(Il),It=n(Il,"DIV",{class:!0});var zL=s(It);T(ex.$$.fragment,zL),bwr=i(zL),VFe=n(zL,"P",{});var yxt=s(VFe);vwr=r(yxt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),yxt.forEach(t),Fwr=i(zL),Tc=n(zL,"P",{});var Gre=s(Tc);Twr=r(Gre,`Note:
Loading a model from its configuration file does `),XFe=n(Gre,"STRONG",{});var xxt=s(XFe);Mwr=r(xxt,"not"),xxt.forEach(t),Ewr=r(Gre,` load the model weights. It only affects the
model\u2019s configuration. Use `),QJ=n(Gre,"A",{href:!0});var $xt=s(QJ);Cwr=r($xt,"from_pretrained()"),$xt.forEach(t),wwr=r(Gre," to load the model weights."),Gre.forEach(t),Awr=i(zL),T(CM.$$.fragment,zL),zL.forEach(t),Lwr=i(Il),Pr=n(Il,"DIV",{class:!0});var Nl=s(Pr);T(ox.$$.fragment,Nl),ywr=i(Nl),zFe=n(Nl,"P",{});var kxt=s(zFe);xwr=r(kxt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),kxt.forEach(t),$wr=i(Nl),mn=n(Nl,"P",{});var QL=s(mn);kwr=r(QL,"The model class to instantiate is selected based on the "),QFe=n(QL,"CODE",{});var Sxt=s(QFe);Swr=r(Sxt,"model_type"),Sxt.forEach(t),Rwr=r(QL,` property of the config object (either
passed as an argument or loaded from `),WFe=n(QL,"CODE",{});var Rxt=s(WFe);Pwr=r(Rxt,"pretrained_model_name_or_path"),Rxt.forEach(t),Bwr=r(QL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HFe=n(QL,"CODE",{});var Pxt=s(HFe);Iwr=r(Pxt,"pretrained_model_name_or_path"),Pxt.forEach(t),Nwr=r(QL,":"),QL.forEach(t),qwr=i(Nl),te=n(Nl,"UL",{});var ne=s(te);wM=n(ne,"LI",{});var yqe=s(wM);UFe=n(yqe,"STRONG",{});var Bxt=s(UFe);jwr=r(Bxt,"albert"),Bxt.forEach(t),Dwr=r(yqe," \u2014 "),WJ=n(yqe,"A",{href:!0});var Ixt=s(WJ);Gwr=r(Ixt,"TFAlbertForSequenceClassification"),Ixt.forEach(t),Owr=r(yqe," (ALBERT model)"),yqe.forEach(t),Vwr=i(ne),AM=n(ne,"LI",{});var xqe=s(AM);JFe=n(xqe,"STRONG",{});var Nxt=s(JFe);Xwr=r(Nxt,"bert"),Nxt.forEach(t),zwr=r(xqe," \u2014 "),HJ=n(xqe,"A",{href:!0});var qxt=s(HJ);Qwr=r(qxt,"TFBertForSequenceClassification"),qxt.forEach(t),Wwr=r(xqe," (BERT model)"),xqe.forEach(t),Hwr=i(ne),LM=n(ne,"LI",{});var $qe=s(LM);YFe=n($qe,"STRONG",{});var jxt=s(YFe);Uwr=r(jxt,"camembert"),jxt.forEach(t),Jwr=r($qe," \u2014 "),UJ=n($qe,"A",{href:!0});var Dxt=s(UJ);Ywr=r(Dxt,"TFCamembertForSequenceClassification"),Dxt.forEach(t),Kwr=r($qe," (CamemBERT model)"),$qe.forEach(t),Zwr=i(ne),yM=n(ne,"LI",{});var kqe=s(yM);KFe=n(kqe,"STRONG",{});var Gxt=s(KFe);eAr=r(Gxt,"convbert"),Gxt.forEach(t),oAr=r(kqe," \u2014 "),JJ=n(kqe,"A",{href:!0});var Oxt=s(JJ);rAr=r(Oxt,"TFConvBertForSequenceClassification"),Oxt.forEach(t),tAr=r(kqe," (ConvBERT model)"),kqe.forEach(t),aAr=i(ne),xM=n(ne,"LI",{});var Sqe=s(xM);ZFe=n(Sqe,"STRONG",{});var Vxt=s(ZFe);nAr=r(Vxt,"ctrl"),Vxt.forEach(t),sAr=r(Sqe," \u2014 "),YJ=n(Sqe,"A",{href:!0});var Xxt=s(YJ);lAr=r(Xxt,"TFCTRLForSequenceClassification"),Xxt.forEach(t),iAr=r(Sqe," (CTRL model)"),Sqe.forEach(t),dAr=i(ne),$M=n(ne,"LI",{});var Rqe=s($M);e6e=n(Rqe,"STRONG",{});var zxt=s(e6e);cAr=r(zxt,"deberta"),zxt.forEach(t),fAr=r(Rqe," \u2014 "),KJ=n(Rqe,"A",{href:!0});var Qxt=s(KJ);mAr=r(Qxt,"TFDebertaForSequenceClassification"),Qxt.forEach(t),gAr=r(Rqe," (DeBERTa model)"),Rqe.forEach(t),hAr=i(ne),kM=n(ne,"LI",{});var Pqe=s(kM);o6e=n(Pqe,"STRONG",{});var Wxt=s(o6e);pAr=r(Wxt,"deberta-v2"),Wxt.forEach(t),_Ar=r(Pqe," \u2014 "),ZJ=n(Pqe,"A",{href:!0});var Hxt=s(ZJ);uAr=r(Hxt,"TFDebertaV2ForSequenceClassification"),Hxt.forEach(t),bAr=r(Pqe," (DeBERTa-v2 model)"),Pqe.forEach(t),vAr=i(ne),SM=n(ne,"LI",{});var Bqe=s(SM);r6e=n(Bqe,"STRONG",{});var Uxt=s(r6e);FAr=r(Uxt,"distilbert"),Uxt.forEach(t),TAr=r(Bqe," \u2014 "),eY=n(Bqe,"A",{href:!0});var Jxt=s(eY);MAr=r(Jxt,"TFDistilBertForSequenceClassification"),Jxt.forEach(t),EAr=r(Bqe," (DistilBERT model)"),Bqe.forEach(t),CAr=i(ne),RM=n(ne,"LI",{});var Iqe=s(RM);t6e=n(Iqe,"STRONG",{});var Yxt=s(t6e);wAr=r(Yxt,"electra"),Yxt.forEach(t),AAr=r(Iqe," \u2014 "),oY=n(Iqe,"A",{href:!0});var Kxt=s(oY);LAr=r(Kxt,"TFElectraForSequenceClassification"),Kxt.forEach(t),yAr=r(Iqe," (ELECTRA model)"),Iqe.forEach(t),xAr=i(ne),PM=n(ne,"LI",{});var Nqe=s(PM);a6e=n(Nqe,"STRONG",{});var Zxt=s(a6e);$Ar=r(Zxt,"flaubert"),Zxt.forEach(t),kAr=r(Nqe," \u2014 "),rY=n(Nqe,"A",{href:!0});var e$t=s(rY);SAr=r(e$t,"TFFlaubertForSequenceClassification"),e$t.forEach(t),RAr=r(Nqe," (FlauBERT model)"),Nqe.forEach(t),PAr=i(ne),BM=n(ne,"LI",{});var qqe=s(BM);n6e=n(qqe,"STRONG",{});var o$t=s(n6e);BAr=r(o$t,"funnel"),o$t.forEach(t),IAr=r(qqe," \u2014 "),tY=n(qqe,"A",{href:!0});var r$t=s(tY);NAr=r(r$t,"TFFunnelForSequenceClassification"),r$t.forEach(t),qAr=r(qqe," (Funnel Transformer model)"),qqe.forEach(t),jAr=i(ne),IM=n(ne,"LI",{});var jqe=s(IM);s6e=n(jqe,"STRONG",{});var t$t=s(s6e);DAr=r(t$t,"gpt2"),t$t.forEach(t),GAr=r(jqe," \u2014 "),aY=n(jqe,"A",{href:!0});var a$t=s(aY);OAr=r(a$t,"TFGPT2ForSequenceClassification"),a$t.forEach(t),VAr=r(jqe," (OpenAI GPT-2 model)"),jqe.forEach(t),XAr=i(ne),NM=n(ne,"LI",{});var Dqe=s(NM);l6e=n(Dqe,"STRONG",{});var n$t=s(l6e);zAr=r(n$t,"gptj"),n$t.forEach(t),QAr=r(Dqe," \u2014 "),nY=n(Dqe,"A",{href:!0});var s$t=s(nY);WAr=r(s$t,"TFGPTJForSequenceClassification"),s$t.forEach(t),HAr=r(Dqe," (GPT-J model)"),Dqe.forEach(t),UAr=i(ne),qM=n(ne,"LI",{});var Gqe=s(qM);i6e=n(Gqe,"STRONG",{});var l$t=s(i6e);JAr=r(l$t,"layoutlm"),l$t.forEach(t),YAr=r(Gqe," \u2014 "),sY=n(Gqe,"A",{href:!0});var i$t=s(sY);KAr=r(i$t,"TFLayoutLMForSequenceClassification"),i$t.forEach(t),ZAr=r(Gqe," (LayoutLM model)"),Gqe.forEach(t),eLr=i(ne),jM=n(ne,"LI",{});var Oqe=s(jM);d6e=n(Oqe,"STRONG",{});var d$t=s(d6e);oLr=r(d$t,"longformer"),d$t.forEach(t),rLr=r(Oqe," \u2014 "),lY=n(Oqe,"A",{href:!0});var c$t=s(lY);tLr=r(c$t,"TFLongformerForSequenceClassification"),c$t.forEach(t),aLr=r(Oqe," (Longformer model)"),Oqe.forEach(t),nLr=i(ne),DM=n(ne,"LI",{});var Vqe=s(DM);c6e=n(Vqe,"STRONG",{});var f$t=s(c6e);sLr=r(f$t,"mobilebert"),f$t.forEach(t),lLr=r(Vqe," \u2014 "),iY=n(Vqe,"A",{href:!0});var m$t=s(iY);iLr=r(m$t,"TFMobileBertForSequenceClassification"),m$t.forEach(t),dLr=r(Vqe," (MobileBERT model)"),Vqe.forEach(t),cLr=i(ne),GM=n(ne,"LI",{});var Xqe=s(GM);f6e=n(Xqe,"STRONG",{});var g$t=s(f6e);fLr=r(g$t,"mpnet"),g$t.forEach(t),mLr=r(Xqe," \u2014 "),dY=n(Xqe,"A",{href:!0});var h$t=s(dY);gLr=r(h$t,"TFMPNetForSequenceClassification"),h$t.forEach(t),hLr=r(Xqe," (MPNet model)"),Xqe.forEach(t),pLr=i(ne),OM=n(ne,"LI",{});var zqe=s(OM);m6e=n(zqe,"STRONG",{});var p$t=s(m6e);_Lr=r(p$t,"openai-gpt"),p$t.forEach(t),uLr=r(zqe," \u2014 "),cY=n(zqe,"A",{href:!0});var _$t=s(cY);bLr=r(_$t,"TFOpenAIGPTForSequenceClassification"),_$t.forEach(t),vLr=r(zqe," (OpenAI GPT model)"),zqe.forEach(t),FLr=i(ne),VM=n(ne,"LI",{});var Qqe=s(VM);g6e=n(Qqe,"STRONG",{});var u$t=s(g6e);TLr=r(u$t,"rembert"),u$t.forEach(t),MLr=r(Qqe," \u2014 "),fY=n(Qqe,"A",{href:!0});var b$t=s(fY);ELr=r(b$t,"TFRemBertForSequenceClassification"),b$t.forEach(t),CLr=r(Qqe," (RemBERT model)"),Qqe.forEach(t),wLr=i(ne),XM=n(ne,"LI",{});var Wqe=s(XM);h6e=n(Wqe,"STRONG",{});var v$t=s(h6e);ALr=r(v$t,"roberta"),v$t.forEach(t),LLr=r(Wqe," \u2014 "),mY=n(Wqe,"A",{href:!0});var F$t=s(mY);yLr=r(F$t,"TFRobertaForSequenceClassification"),F$t.forEach(t),xLr=r(Wqe," (RoBERTa model)"),Wqe.forEach(t),$Lr=i(ne),zM=n(ne,"LI",{});var Hqe=s(zM);p6e=n(Hqe,"STRONG",{});var T$t=s(p6e);kLr=r(T$t,"roformer"),T$t.forEach(t),SLr=r(Hqe," \u2014 "),gY=n(Hqe,"A",{href:!0});var M$t=s(gY);RLr=r(M$t,"TFRoFormerForSequenceClassification"),M$t.forEach(t),PLr=r(Hqe," (RoFormer model)"),Hqe.forEach(t),BLr=i(ne),QM=n(ne,"LI",{});var Uqe=s(QM);_6e=n(Uqe,"STRONG",{});var E$t=s(_6e);ILr=r(E$t,"tapas"),E$t.forEach(t),NLr=r(Uqe," \u2014 "),hY=n(Uqe,"A",{href:!0});var C$t=s(hY);qLr=r(C$t,"TFTapasForSequenceClassification"),C$t.forEach(t),jLr=r(Uqe," (TAPAS model)"),Uqe.forEach(t),DLr=i(ne),WM=n(ne,"LI",{});var Jqe=s(WM);u6e=n(Jqe,"STRONG",{});var w$t=s(u6e);GLr=r(w$t,"transfo-xl"),w$t.forEach(t),OLr=r(Jqe," \u2014 "),pY=n(Jqe,"A",{href:!0});var A$t=s(pY);VLr=r(A$t,"TFTransfoXLForSequenceClassification"),A$t.forEach(t),XLr=r(Jqe," (Transformer-XL model)"),Jqe.forEach(t),zLr=i(ne),HM=n(ne,"LI",{});var Yqe=s(HM);b6e=n(Yqe,"STRONG",{});var L$t=s(b6e);QLr=r(L$t,"xlm"),L$t.forEach(t),WLr=r(Yqe," \u2014 "),_Y=n(Yqe,"A",{href:!0});var y$t=s(_Y);HLr=r(y$t,"TFXLMForSequenceClassification"),y$t.forEach(t),ULr=r(Yqe," (XLM model)"),Yqe.forEach(t),JLr=i(ne),UM=n(ne,"LI",{});var Kqe=s(UM);v6e=n(Kqe,"STRONG",{});var x$t=s(v6e);YLr=r(x$t,"xlm-roberta"),x$t.forEach(t),KLr=r(Kqe," \u2014 "),uY=n(Kqe,"A",{href:!0});var $$t=s(uY);ZLr=r($$t,"TFXLMRobertaForSequenceClassification"),$$t.forEach(t),e7r=r(Kqe," (XLM-RoBERTa model)"),Kqe.forEach(t),o7r=i(ne),JM=n(ne,"LI",{});var Zqe=s(JM);F6e=n(Zqe,"STRONG",{});var k$t=s(F6e);r7r=r(k$t,"xlnet"),k$t.forEach(t),t7r=r(Zqe," \u2014 "),bY=n(Zqe,"A",{href:!0});var S$t=s(bY);a7r=r(S$t,"TFXLNetForSequenceClassification"),S$t.forEach(t),n7r=r(Zqe," (XLNet model)"),Zqe.forEach(t),ne.forEach(t),s7r=i(Nl),T(YM.$$.fragment,Nl),Nl.forEach(t),Il.forEach(t),kVe=i(f),Mc=n(f,"H2",{class:!0});var jze=s(Mc);KM=n(jze,"A",{id:!0,class:!0,href:!0});var R$t=s(KM);T6e=n(R$t,"SPAN",{});var P$t=s(T6e);T(rx.$$.fragment,P$t),P$t.forEach(t),R$t.forEach(t),l7r=i(jze),M6e=n(jze,"SPAN",{});var B$t=s(M6e);i7r=r(B$t,"TFAutoModelForMultipleChoice"),B$t.forEach(t),jze.forEach(t),SVe=i(f),lr=n(f,"DIV",{class:!0});var ql=s(lr);T(tx.$$.fragment,ql),d7r=i(ql),Ec=n(ql,"P",{});var Ore=s(Ec);c7r=r(Ore,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),vY=n(Ore,"A",{href:!0});var I$t=s(vY);f7r=r(I$t,"from_pretrained()"),I$t.forEach(t),m7r=r(Ore," class method or the "),FY=n(Ore,"A",{href:!0});var N$t=s(FY);g7r=r(N$t,"from_config()"),N$t.forEach(t),h7r=r(Ore,` class
method.`),Ore.forEach(t),p7r=i(ql),ax=n(ql,"P",{});var Dze=s(ax);_7r=r(Dze,"This class cannot be instantiated directly using "),E6e=n(Dze,"CODE",{});var q$t=s(E6e);u7r=r(q$t,"__init__()"),q$t.forEach(t),b7r=r(Dze," (throws an error)."),Dze.forEach(t),v7r=i(ql),Nt=n(ql,"DIV",{class:!0});var WL=s(Nt);T(nx.$$.fragment,WL),F7r=i(WL),C6e=n(WL,"P",{});var j$t=s(C6e);T7r=r(j$t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),j$t.forEach(t),M7r=i(WL),Cc=n(WL,"P",{});var Vre=s(Cc);E7r=r(Vre,`Note:
Loading a model from its configuration file does `),w6e=n(Vre,"STRONG",{});var D$t=s(w6e);C7r=r(D$t,"not"),D$t.forEach(t),w7r=r(Vre,` load the model weights. It only affects the
model\u2019s configuration. Use `),TY=n(Vre,"A",{href:!0});var G$t=s(TY);A7r=r(G$t,"from_pretrained()"),G$t.forEach(t),L7r=r(Vre," to load the model weights."),Vre.forEach(t),y7r=i(WL),T(ZM.$$.fragment,WL),WL.forEach(t),x7r=i(ql),Br=n(ql,"DIV",{class:!0});var jl=s(Br);T(sx.$$.fragment,jl),$7r=i(jl),A6e=n(jl,"P",{});var O$t=s(A6e);k7r=r(O$t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),O$t.forEach(t),S7r=i(jl),gn=n(jl,"P",{});var HL=s(gn);R7r=r(HL,"The model class to instantiate is selected based on the "),L6e=n(HL,"CODE",{});var V$t=s(L6e);P7r=r(V$t,"model_type"),V$t.forEach(t),B7r=r(HL,` property of the config object (either
passed as an argument or loaded from `),y6e=n(HL,"CODE",{});var X$t=s(y6e);I7r=r(X$t,"pretrained_model_name_or_path"),X$t.forEach(t),N7r=r(HL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x6e=n(HL,"CODE",{});var z$t=s(x6e);q7r=r(z$t,"pretrained_model_name_or_path"),z$t.forEach(t),j7r=r(HL,":"),HL.forEach(t),D7r=i(jl),_e=n(jl,"UL",{});var ve=s(_e);eE=n(ve,"LI",{});var eje=s(eE);$6e=n(eje,"STRONG",{});var Q$t=s($6e);G7r=r(Q$t,"albert"),Q$t.forEach(t),O7r=r(eje," \u2014 "),MY=n(eje,"A",{href:!0});var W$t=s(MY);V7r=r(W$t,"TFAlbertForMultipleChoice"),W$t.forEach(t),X7r=r(eje," (ALBERT model)"),eje.forEach(t),z7r=i(ve),oE=n(ve,"LI",{});var oje=s(oE);k6e=n(oje,"STRONG",{});var H$t=s(k6e);Q7r=r(H$t,"bert"),H$t.forEach(t),W7r=r(oje," \u2014 "),EY=n(oje,"A",{href:!0});var U$t=s(EY);H7r=r(U$t,"TFBertForMultipleChoice"),U$t.forEach(t),U7r=r(oje," (BERT model)"),oje.forEach(t),J7r=i(ve),rE=n(ve,"LI",{});var rje=s(rE);S6e=n(rje,"STRONG",{});var J$t=s(S6e);Y7r=r(J$t,"camembert"),J$t.forEach(t),K7r=r(rje," \u2014 "),CY=n(rje,"A",{href:!0});var Y$t=s(CY);Z7r=r(Y$t,"TFCamembertForMultipleChoice"),Y$t.forEach(t),eyr=r(rje," (CamemBERT model)"),rje.forEach(t),oyr=i(ve),tE=n(ve,"LI",{});var tje=s(tE);R6e=n(tje,"STRONG",{});var K$t=s(R6e);ryr=r(K$t,"convbert"),K$t.forEach(t),tyr=r(tje," \u2014 "),wY=n(tje,"A",{href:!0});var Z$t=s(wY);ayr=r(Z$t,"TFConvBertForMultipleChoice"),Z$t.forEach(t),nyr=r(tje," (ConvBERT model)"),tje.forEach(t),syr=i(ve),aE=n(ve,"LI",{});var aje=s(aE);P6e=n(aje,"STRONG",{});var ekt=s(P6e);lyr=r(ekt,"distilbert"),ekt.forEach(t),iyr=r(aje," \u2014 "),AY=n(aje,"A",{href:!0});var okt=s(AY);dyr=r(okt,"TFDistilBertForMultipleChoice"),okt.forEach(t),cyr=r(aje," (DistilBERT model)"),aje.forEach(t),fyr=i(ve),nE=n(ve,"LI",{});var nje=s(nE);B6e=n(nje,"STRONG",{});var rkt=s(B6e);myr=r(rkt,"electra"),rkt.forEach(t),gyr=r(nje," \u2014 "),LY=n(nje,"A",{href:!0});var tkt=s(LY);hyr=r(tkt,"TFElectraForMultipleChoice"),tkt.forEach(t),pyr=r(nje," (ELECTRA model)"),nje.forEach(t),_yr=i(ve),sE=n(ve,"LI",{});var sje=s(sE);I6e=n(sje,"STRONG",{});var akt=s(I6e);uyr=r(akt,"flaubert"),akt.forEach(t),byr=r(sje," \u2014 "),yY=n(sje,"A",{href:!0});var nkt=s(yY);vyr=r(nkt,"TFFlaubertForMultipleChoice"),nkt.forEach(t),Fyr=r(sje," (FlauBERT model)"),sje.forEach(t),Tyr=i(ve),lE=n(ve,"LI",{});var lje=s(lE);N6e=n(lje,"STRONG",{});var skt=s(N6e);Myr=r(skt,"funnel"),skt.forEach(t),Eyr=r(lje," \u2014 "),xY=n(lje,"A",{href:!0});var lkt=s(xY);Cyr=r(lkt,"TFFunnelForMultipleChoice"),lkt.forEach(t),wyr=r(lje," (Funnel Transformer model)"),lje.forEach(t),Ayr=i(ve),iE=n(ve,"LI",{});var ije=s(iE);q6e=n(ije,"STRONG",{});var ikt=s(q6e);Lyr=r(ikt,"longformer"),ikt.forEach(t),yyr=r(ije," \u2014 "),$Y=n(ije,"A",{href:!0});var dkt=s($Y);xyr=r(dkt,"TFLongformerForMultipleChoice"),dkt.forEach(t),$yr=r(ije," (Longformer model)"),ije.forEach(t),kyr=i(ve),dE=n(ve,"LI",{});var dje=s(dE);j6e=n(dje,"STRONG",{});var ckt=s(j6e);Syr=r(ckt,"mobilebert"),ckt.forEach(t),Ryr=r(dje," \u2014 "),kY=n(dje,"A",{href:!0});var fkt=s(kY);Pyr=r(fkt,"TFMobileBertForMultipleChoice"),fkt.forEach(t),Byr=r(dje," (MobileBERT model)"),dje.forEach(t),Iyr=i(ve),cE=n(ve,"LI",{});var cje=s(cE);D6e=n(cje,"STRONG",{});var mkt=s(D6e);Nyr=r(mkt,"mpnet"),mkt.forEach(t),qyr=r(cje," \u2014 "),SY=n(cje,"A",{href:!0});var gkt=s(SY);jyr=r(gkt,"TFMPNetForMultipleChoice"),gkt.forEach(t),Dyr=r(cje," (MPNet model)"),cje.forEach(t),Gyr=i(ve),fE=n(ve,"LI",{});var fje=s(fE);G6e=n(fje,"STRONG",{});var hkt=s(G6e);Oyr=r(hkt,"rembert"),hkt.forEach(t),Vyr=r(fje," \u2014 "),RY=n(fje,"A",{href:!0});var pkt=s(RY);Xyr=r(pkt,"TFRemBertForMultipleChoice"),pkt.forEach(t),zyr=r(fje," (RemBERT model)"),fje.forEach(t),Qyr=i(ve),mE=n(ve,"LI",{});var mje=s(mE);O6e=n(mje,"STRONG",{});var _kt=s(O6e);Wyr=r(_kt,"roberta"),_kt.forEach(t),Hyr=r(mje," \u2014 "),PY=n(mje,"A",{href:!0});var ukt=s(PY);Uyr=r(ukt,"TFRobertaForMultipleChoice"),ukt.forEach(t),Jyr=r(mje," (RoBERTa model)"),mje.forEach(t),Yyr=i(ve),gE=n(ve,"LI",{});var gje=s(gE);V6e=n(gje,"STRONG",{});var bkt=s(V6e);Kyr=r(bkt,"roformer"),bkt.forEach(t),Zyr=r(gje," \u2014 "),BY=n(gje,"A",{href:!0});var vkt=s(BY);e8r=r(vkt,"TFRoFormerForMultipleChoice"),vkt.forEach(t),o8r=r(gje," (RoFormer model)"),gje.forEach(t),r8r=i(ve),hE=n(ve,"LI",{});var hje=s(hE);X6e=n(hje,"STRONG",{});var Fkt=s(X6e);t8r=r(Fkt,"xlm"),Fkt.forEach(t),a8r=r(hje," \u2014 "),IY=n(hje,"A",{href:!0});var Tkt=s(IY);n8r=r(Tkt,"TFXLMForMultipleChoice"),Tkt.forEach(t),s8r=r(hje," (XLM model)"),hje.forEach(t),l8r=i(ve),pE=n(ve,"LI",{});var pje=s(pE);z6e=n(pje,"STRONG",{});var Mkt=s(z6e);i8r=r(Mkt,"xlm-roberta"),Mkt.forEach(t),d8r=r(pje," \u2014 "),NY=n(pje,"A",{href:!0});var Ekt=s(NY);c8r=r(Ekt,"TFXLMRobertaForMultipleChoice"),Ekt.forEach(t),f8r=r(pje," (XLM-RoBERTa model)"),pje.forEach(t),m8r=i(ve),_E=n(ve,"LI",{});var _je=s(_E);Q6e=n(_je,"STRONG",{});var Ckt=s(Q6e);g8r=r(Ckt,"xlnet"),Ckt.forEach(t),h8r=r(_je," \u2014 "),qY=n(_je,"A",{href:!0});var wkt=s(qY);p8r=r(wkt,"TFXLNetForMultipleChoice"),wkt.forEach(t),_8r=r(_je," (XLNet model)"),_je.forEach(t),ve.forEach(t),u8r=i(jl),T(uE.$$.fragment,jl),jl.forEach(t),ql.forEach(t),RVe=i(f),wc=n(f,"H2",{class:!0});var Gze=s(wc);bE=n(Gze,"A",{id:!0,class:!0,href:!0});var Akt=s(bE);W6e=n(Akt,"SPAN",{});var Lkt=s(W6e);T(lx.$$.fragment,Lkt),Lkt.forEach(t),Akt.forEach(t),b8r=i(Gze),H6e=n(Gze,"SPAN",{});var ykt=s(H6e);v8r=r(ykt,"TFAutoModelForNextSentencePrediction"),ykt.forEach(t),Gze.forEach(t),PVe=i(f),ir=n(f,"DIV",{class:!0});var Dl=s(ir);T(ix.$$.fragment,Dl),F8r=i(Dl),Ac=n(Dl,"P",{});var Xre=s(Ac);T8r=r(Xre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),jY=n(Xre,"A",{href:!0});var xkt=s(jY);M8r=r(xkt,"from_pretrained()"),xkt.forEach(t),E8r=r(Xre," class method or the "),DY=n(Xre,"A",{href:!0});var $kt=s(DY);C8r=r($kt,"from_config()"),$kt.forEach(t),w8r=r(Xre,` class
method.`),Xre.forEach(t),A8r=i(Dl),dx=n(Dl,"P",{});var Oze=s(dx);L8r=r(Oze,"This class cannot be instantiated directly using "),U6e=n(Oze,"CODE",{});var kkt=s(U6e);y8r=r(kkt,"__init__()"),kkt.forEach(t),x8r=r(Oze," (throws an error)."),Oze.forEach(t),$8r=i(Dl),qt=n(Dl,"DIV",{class:!0});var UL=s(qt);T(cx.$$.fragment,UL),k8r=i(UL),J6e=n(UL,"P",{});var Skt=s(J6e);S8r=r(Skt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Skt.forEach(t),R8r=i(UL),Lc=n(UL,"P",{});var zre=s(Lc);P8r=r(zre,`Note:
Loading a model from its configuration file does `),Y6e=n(zre,"STRONG",{});var Rkt=s(Y6e);B8r=r(Rkt,"not"),Rkt.forEach(t),I8r=r(zre,` load the model weights. It only affects the
model\u2019s configuration. Use `),GY=n(zre,"A",{href:!0});var Pkt=s(GY);N8r=r(Pkt,"from_pretrained()"),Pkt.forEach(t),q8r=r(zre," to load the model weights."),zre.forEach(t),j8r=i(UL),T(vE.$$.fragment,UL),UL.forEach(t),D8r=i(Dl),Ir=n(Dl,"DIV",{class:!0});var Gl=s(Ir);T(fx.$$.fragment,Gl),G8r=i(Gl),K6e=n(Gl,"P",{});var Bkt=s(K6e);O8r=r(Bkt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Bkt.forEach(t),V8r=i(Gl),hn=n(Gl,"P",{});var JL=s(hn);X8r=r(JL,"The model class to instantiate is selected based on the "),Z6e=n(JL,"CODE",{});var Ikt=s(Z6e);z8r=r(Ikt,"model_type"),Ikt.forEach(t),Q8r=r(JL,` property of the config object (either
passed as an argument or loaded from `),eTe=n(JL,"CODE",{});var Nkt=s(eTe);W8r=r(Nkt,"pretrained_model_name_or_path"),Nkt.forEach(t),H8r=r(JL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oTe=n(JL,"CODE",{});var qkt=s(oTe);U8r=r(qkt,"pretrained_model_name_or_path"),qkt.forEach(t),J8r=r(JL,":"),JL.forEach(t),Y8r=i(Gl),mx=n(Gl,"UL",{});var Vze=s(mx);FE=n(Vze,"LI",{});var uje=s(FE);rTe=n(uje,"STRONG",{});var jkt=s(rTe);K8r=r(jkt,"bert"),jkt.forEach(t),Z8r=r(uje," \u2014 "),OY=n(uje,"A",{href:!0});var Dkt=s(OY);e9r=r(Dkt,"TFBertForNextSentencePrediction"),Dkt.forEach(t),o9r=r(uje," (BERT model)"),uje.forEach(t),r9r=i(Vze),TE=n(Vze,"LI",{});var bje=s(TE);tTe=n(bje,"STRONG",{});var Gkt=s(tTe);t9r=r(Gkt,"mobilebert"),Gkt.forEach(t),a9r=r(bje," \u2014 "),VY=n(bje,"A",{href:!0});var Okt=s(VY);n9r=r(Okt,"TFMobileBertForNextSentencePrediction"),Okt.forEach(t),s9r=r(bje," (MobileBERT model)"),bje.forEach(t),Vze.forEach(t),l9r=i(Gl),T(ME.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),BVe=i(f),yc=n(f,"H2",{class:!0});var Xze=s(yc);EE=n(Xze,"A",{id:!0,class:!0,href:!0});var Vkt=s(EE);aTe=n(Vkt,"SPAN",{});var Xkt=s(aTe);T(gx.$$.fragment,Xkt),Xkt.forEach(t),Vkt.forEach(t),i9r=i(Xze),nTe=n(Xze,"SPAN",{});var zkt=s(nTe);d9r=r(zkt,"TFAutoModelForTableQuestionAnswering"),zkt.forEach(t),Xze.forEach(t),IVe=i(f),dr=n(f,"DIV",{class:!0});var Ol=s(dr);T(hx.$$.fragment,Ol),c9r=i(Ol),xc=n(Ol,"P",{});var Qre=s(xc);f9r=r(Qre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),XY=n(Qre,"A",{href:!0});var Qkt=s(XY);m9r=r(Qkt,"from_pretrained()"),Qkt.forEach(t),g9r=r(Qre," class method or the "),zY=n(Qre,"A",{href:!0});var Wkt=s(zY);h9r=r(Wkt,"from_config()"),Wkt.forEach(t),p9r=r(Qre,` class
method.`),Qre.forEach(t),_9r=i(Ol),px=n(Ol,"P",{});var zze=s(px);u9r=r(zze,"This class cannot be instantiated directly using "),sTe=n(zze,"CODE",{});var Hkt=s(sTe);b9r=r(Hkt,"__init__()"),Hkt.forEach(t),v9r=r(zze," (throws an error)."),zze.forEach(t),F9r=i(Ol),jt=n(Ol,"DIV",{class:!0});var YL=s(jt);T(_x.$$.fragment,YL),T9r=i(YL),lTe=n(YL,"P",{});var Ukt=s(lTe);M9r=r(Ukt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Ukt.forEach(t),E9r=i(YL),$c=n(YL,"P",{});var Wre=s($c);C9r=r(Wre,`Note:
Loading a model from its configuration file does `),iTe=n(Wre,"STRONG",{});var Jkt=s(iTe);w9r=r(Jkt,"not"),Jkt.forEach(t),A9r=r(Wre,` load the model weights. It only affects the
model\u2019s configuration. Use `),QY=n(Wre,"A",{href:!0});var Ykt=s(QY);L9r=r(Ykt,"from_pretrained()"),Ykt.forEach(t),y9r=r(Wre," to load the model weights."),Wre.forEach(t),x9r=i(YL),T(CE.$$.fragment,YL),YL.forEach(t),$9r=i(Ol),Nr=n(Ol,"DIV",{class:!0});var Vl=s(Nr);T(ux.$$.fragment,Vl),k9r=i(Vl),dTe=n(Vl,"P",{});var Kkt=s(dTe);S9r=r(Kkt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Kkt.forEach(t),R9r=i(Vl),pn=n(Vl,"P",{});var KL=s(pn);P9r=r(KL,"The model class to instantiate is selected based on the "),cTe=n(KL,"CODE",{});var Zkt=s(cTe);B9r=r(Zkt,"model_type"),Zkt.forEach(t),I9r=r(KL,` property of the config object (either
passed as an argument or loaded from `),fTe=n(KL,"CODE",{});var eSt=s(fTe);N9r=r(eSt,"pretrained_model_name_or_path"),eSt.forEach(t),q9r=r(KL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mTe=n(KL,"CODE",{});var oSt=s(mTe);j9r=r(oSt,"pretrained_model_name_or_path"),oSt.forEach(t),D9r=r(KL,":"),KL.forEach(t),G9r=i(Vl),gTe=n(Vl,"UL",{});var rSt=s(gTe);wE=n(rSt,"LI",{});var vje=s(wE);hTe=n(vje,"STRONG",{});var tSt=s(hTe);O9r=r(tSt,"tapas"),tSt.forEach(t),V9r=r(vje," \u2014 "),WY=n(vje,"A",{href:!0});var aSt=s(WY);X9r=r(aSt,"TFTapasForQuestionAnswering"),aSt.forEach(t),z9r=r(vje," (TAPAS model)"),vje.forEach(t),rSt.forEach(t),Q9r=i(Vl),T(AE.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),NVe=i(f),kc=n(f,"H2",{class:!0});var Qze=s(kc);LE=n(Qze,"A",{id:!0,class:!0,href:!0});var nSt=s(LE);pTe=n(nSt,"SPAN",{});var sSt=s(pTe);T(bx.$$.fragment,sSt),sSt.forEach(t),nSt.forEach(t),W9r=i(Qze),_Te=n(Qze,"SPAN",{});var lSt=s(_Te);H9r=r(lSt,"TFAutoModelForTokenClassification"),lSt.forEach(t),Qze.forEach(t),qVe=i(f),cr=n(f,"DIV",{class:!0});var Xl=s(cr);T(vx.$$.fragment,Xl),U9r=i(Xl),Sc=n(Xl,"P",{});var Hre=s(Sc);J9r=r(Hre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),HY=n(Hre,"A",{href:!0});var iSt=s(HY);Y9r=r(iSt,"from_pretrained()"),iSt.forEach(t),K9r=r(Hre," class method or the "),UY=n(Hre,"A",{href:!0});var dSt=s(UY);Z9r=r(dSt,"from_config()"),dSt.forEach(t),exr=r(Hre,` class
method.`),Hre.forEach(t),oxr=i(Xl),Fx=n(Xl,"P",{});var Wze=s(Fx);rxr=r(Wze,"This class cannot be instantiated directly using "),uTe=n(Wze,"CODE",{});var cSt=s(uTe);txr=r(cSt,"__init__()"),cSt.forEach(t),axr=r(Wze," (throws an error)."),Wze.forEach(t),nxr=i(Xl),Dt=n(Xl,"DIV",{class:!0});var ZL=s(Dt);T(Tx.$$.fragment,ZL),sxr=i(ZL),bTe=n(ZL,"P",{});var fSt=s(bTe);lxr=r(fSt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),fSt.forEach(t),ixr=i(ZL),Rc=n(ZL,"P",{});var Ure=s(Rc);dxr=r(Ure,`Note:
Loading a model from its configuration file does `),vTe=n(Ure,"STRONG",{});var mSt=s(vTe);cxr=r(mSt,"not"),mSt.forEach(t),fxr=r(Ure,` load the model weights. It only affects the
model\u2019s configuration. Use `),JY=n(Ure,"A",{href:!0});var gSt=s(JY);mxr=r(gSt,"from_pretrained()"),gSt.forEach(t),gxr=r(Ure," to load the model weights."),Ure.forEach(t),hxr=i(ZL),T(yE.$$.fragment,ZL),ZL.forEach(t),pxr=i(Xl),qr=n(Xl,"DIV",{class:!0});var zl=s(qr);T(Mx.$$.fragment,zl),_xr=i(zl),FTe=n(zl,"P",{});var hSt=s(FTe);uxr=r(hSt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),hSt.forEach(t),bxr=i(zl),_n=n(zl,"P",{});var e7=s(_n);vxr=r(e7,"The model class to instantiate is selected based on the "),TTe=n(e7,"CODE",{});var pSt=s(TTe);Fxr=r(pSt,"model_type"),pSt.forEach(t),Txr=r(e7,` property of the config object (either
passed as an argument or loaded from `),MTe=n(e7,"CODE",{});var _St=s(MTe);Mxr=r(_St,"pretrained_model_name_or_path"),_St.forEach(t),Exr=r(e7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ETe=n(e7,"CODE",{});var uSt=s(ETe);Cxr=r(uSt,"pretrained_model_name_or_path"),uSt.forEach(t),wxr=r(e7,":"),e7.forEach(t),Axr=i(zl),de=n(zl,"UL",{});var me=s(de);xE=n(me,"LI",{});var Fje=s(xE);CTe=n(Fje,"STRONG",{});var bSt=s(CTe);Lxr=r(bSt,"albert"),bSt.forEach(t),yxr=r(Fje," \u2014 "),YY=n(Fje,"A",{href:!0});var vSt=s(YY);xxr=r(vSt,"TFAlbertForTokenClassification"),vSt.forEach(t),$xr=r(Fje," (ALBERT model)"),Fje.forEach(t),kxr=i(me),$E=n(me,"LI",{});var Tje=s($E);wTe=n(Tje,"STRONG",{});var FSt=s(wTe);Sxr=r(FSt,"bert"),FSt.forEach(t),Rxr=r(Tje," \u2014 "),KY=n(Tje,"A",{href:!0});var TSt=s(KY);Pxr=r(TSt,"TFBertForTokenClassification"),TSt.forEach(t),Bxr=r(Tje," (BERT model)"),Tje.forEach(t),Ixr=i(me),kE=n(me,"LI",{});var Mje=s(kE);ATe=n(Mje,"STRONG",{});var MSt=s(ATe);Nxr=r(MSt,"camembert"),MSt.forEach(t),qxr=r(Mje," \u2014 "),ZY=n(Mje,"A",{href:!0});var ESt=s(ZY);jxr=r(ESt,"TFCamembertForTokenClassification"),ESt.forEach(t),Dxr=r(Mje," (CamemBERT model)"),Mje.forEach(t),Gxr=i(me),SE=n(me,"LI",{});var Eje=s(SE);LTe=n(Eje,"STRONG",{});var CSt=s(LTe);Oxr=r(CSt,"convbert"),CSt.forEach(t),Vxr=r(Eje," \u2014 "),eK=n(Eje,"A",{href:!0});var wSt=s(eK);Xxr=r(wSt,"TFConvBertForTokenClassification"),wSt.forEach(t),zxr=r(Eje," (ConvBERT model)"),Eje.forEach(t),Qxr=i(me),RE=n(me,"LI",{});var Cje=s(RE);yTe=n(Cje,"STRONG",{});var ASt=s(yTe);Wxr=r(ASt,"deberta"),ASt.forEach(t),Hxr=r(Cje," \u2014 "),oK=n(Cje,"A",{href:!0});var LSt=s(oK);Uxr=r(LSt,"TFDebertaForTokenClassification"),LSt.forEach(t),Jxr=r(Cje," (DeBERTa model)"),Cje.forEach(t),Yxr=i(me),PE=n(me,"LI",{});var wje=s(PE);xTe=n(wje,"STRONG",{});var ySt=s(xTe);Kxr=r(ySt,"deberta-v2"),ySt.forEach(t),Zxr=r(wje," \u2014 "),rK=n(wje,"A",{href:!0});var xSt=s(rK);e$r=r(xSt,"TFDebertaV2ForTokenClassification"),xSt.forEach(t),o$r=r(wje," (DeBERTa-v2 model)"),wje.forEach(t),r$r=i(me),BE=n(me,"LI",{});var Aje=s(BE);$Te=n(Aje,"STRONG",{});var $St=s($Te);t$r=r($St,"distilbert"),$St.forEach(t),a$r=r(Aje," \u2014 "),tK=n(Aje,"A",{href:!0});var kSt=s(tK);n$r=r(kSt,"TFDistilBertForTokenClassification"),kSt.forEach(t),s$r=r(Aje," (DistilBERT model)"),Aje.forEach(t),l$r=i(me),IE=n(me,"LI",{});var Lje=s(IE);kTe=n(Lje,"STRONG",{});var SSt=s(kTe);i$r=r(SSt,"electra"),SSt.forEach(t),d$r=r(Lje," \u2014 "),aK=n(Lje,"A",{href:!0});var RSt=s(aK);c$r=r(RSt,"TFElectraForTokenClassification"),RSt.forEach(t),f$r=r(Lje," (ELECTRA model)"),Lje.forEach(t),m$r=i(me),NE=n(me,"LI",{});var yje=s(NE);STe=n(yje,"STRONG",{});var PSt=s(STe);g$r=r(PSt,"flaubert"),PSt.forEach(t),h$r=r(yje," \u2014 "),nK=n(yje,"A",{href:!0});var BSt=s(nK);p$r=r(BSt,"TFFlaubertForTokenClassification"),BSt.forEach(t),_$r=r(yje," (FlauBERT model)"),yje.forEach(t),u$r=i(me),qE=n(me,"LI",{});var xje=s(qE);RTe=n(xje,"STRONG",{});var ISt=s(RTe);b$r=r(ISt,"funnel"),ISt.forEach(t),v$r=r(xje," \u2014 "),sK=n(xje,"A",{href:!0});var NSt=s(sK);F$r=r(NSt,"TFFunnelForTokenClassification"),NSt.forEach(t),T$r=r(xje," (Funnel Transformer model)"),xje.forEach(t),M$r=i(me),jE=n(me,"LI",{});var $je=s(jE);PTe=n($je,"STRONG",{});var qSt=s(PTe);E$r=r(qSt,"layoutlm"),qSt.forEach(t),C$r=r($je," \u2014 "),lK=n($je,"A",{href:!0});var jSt=s(lK);w$r=r(jSt,"TFLayoutLMForTokenClassification"),jSt.forEach(t),A$r=r($je," (LayoutLM model)"),$je.forEach(t),L$r=i(me),DE=n(me,"LI",{});var kje=s(DE);BTe=n(kje,"STRONG",{});var DSt=s(BTe);y$r=r(DSt,"longformer"),DSt.forEach(t),x$r=r(kje," \u2014 "),iK=n(kje,"A",{href:!0});var GSt=s(iK);$$r=r(GSt,"TFLongformerForTokenClassification"),GSt.forEach(t),k$r=r(kje," (Longformer model)"),kje.forEach(t),S$r=i(me),GE=n(me,"LI",{});var Sje=s(GE);ITe=n(Sje,"STRONG",{});var OSt=s(ITe);R$r=r(OSt,"mobilebert"),OSt.forEach(t),P$r=r(Sje," \u2014 "),dK=n(Sje,"A",{href:!0});var VSt=s(dK);B$r=r(VSt,"TFMobileBertForTokenClassification"),VSt.forEach(t),I$r=r(Sje," (MobileBERT model)"),Sje.forEach(t),N$r=i(me),OE=n(me,"LI",{});var Rje=s(OE);NTe=n(Rje,"STRONG",{});var XSt=s(NTe);q$r=r(XSt,"mpnet"),XSt.forEach(t),j$r=r(Rje," \u2014 "),cK=n(Rje,"A",{href:!0});var zSt=s(cK);D$r=r(zSt,"TFMPNetForTokenClassification"),zSt.forEach(t),G$r=r(Rje," (MPNet model)"),Rje.forEach(t),O$r=i(me),VE=n(me,"LI",{});var Pje=s(VE);qTe=n(Pje,"STRONG",{});var QSt=s(qTe);V$r=r(QSt,"rembert"),QSt.forEach(t),X$r=r(Pje," \u2014 "),fK=n(Pje,"A",{href:!0});var WSt=s(fK);z$r=r(WSt,"TFRemBertForTokenClassification"),WSt.forEach(t),Q$r=r(Pje," (RemBERT model)"),Pje.forEach(t),W$r=i(me),XE=n(me,"LI",{});var Bje=s(XE);jTe=n(Bje,"STRONG",{});var HSt=s(jTe);H$r=r(HSt,"roberta"),HSt.forEach(t),U$r=r(Bje," \u2014 "),mK=n(Bje,"A",{href:!0});var USt=s(mK);J$r=r(USt,"TFRobertaForTokenClassification"),USt.forEach(t),Y$r=r(Bje," (RoBERTa model)"),Bje.forEach(t),K$r=i(me),zE=n(me,"LI",{});var Ije=s(zE);DTe=n(Ije,"STRONG",{});var JSt=s(DTe);Z$r=r(JSt,"roformer"),JSt.forEach(t),ekr=r(Ije," \u2014 "),gK=n(Ije,"A",{href:!0});var YSt=s(gK);okr=r(YSt,"TFRoFormerForTokenClassification"),YSt.forEach(t),rkr=r(Ije," (RoFormer model)"),Ije.forEach(t),tkr=i(me),QE=n(me,"LI",{});var Nje=s(QE);GTe=n(Nje,"STRONG",{});var KSt=s(GTe);akr=r(KSt,"xlm"),KSt.forEach(t),nkr=r(Nje," \u2014 "),hK=n(Nje,"A",{href:!0});var ZSt=s(hK);skr=r(ZSt,"TFXLMForTokenClassification"),ZSt.forEach(t),lkr=r(Nje," (XLM model)"),Nje.forEach(t),ikr=i(me),WE=n(me,"LI",{});var qje=s(WE);OTe=n(qje,"STRONG",{});var eRt=s(OTe);dkr=r(eRt,"xlm-roberta"),eRt.forEach(t),ckr=r(qje," \u2014 "),pK=n(qje,"A",{href:!0});var oRt=s(pK);fkr=r(oRt,"TFXLMRobertaForTokenClassification"),oRt.forEach(t),mkr=r(qje," (XLM-RoBERTa model)"),qje.forEach(t),gkr=i(me),HE=n(me,"LI",{});var jje=s(HE);VTe=n(jje,"STRONG",{});var rRt=s(VTe);hkr=r(rRt,"xlnet"),rRt.forEach(t),pkr=r(jje," \u2014 "),_K=n(jje,"A",{href:!0});var tRt=s(_K);_kr=r(tRt,"TFXLNetForTokenClassification"),tRt.forEach(t),ukr=r(jje," (XLNet model)"),jje.forEach(t),me.forEach(t),bkr=i(zl),T(UE.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),jVe=i(f),Pc=n(f,"H2",{class:!0});var Hze=s(Pc);JE=n(Hze,"A",{id:!0,class:!0,href:!0});var aRt=s(JE);XTe=n(aRt,"SPAN",{});var nRt=s(XTe);T(Ex.$$.fragment,nRt),nRt.forEach(t),aRt.forEach(t),vkr=i(Hze),zTe=n(Hze,"SPAN",{});var sRt=s(zTe);Fkr=r(sRt,"TFAutoModelForQuestionAnswering"),sRt.forEach(t),Hze.forEach(t),DVe=i(f),fr=n(f,"DIV",{class:!0});var Ql=s(fr);T(Cx.$$.fragment,Ql),Tkr=i(Ql),Bc=n(Ql,"P",{});var Jre=s(Bc);Mkr=r(Jre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),uK=n(Jre,"A",{href:!0});var lRt=s(uK);Ekr=r(lRt,"from_pretrained()"),lRt.forEach(t),Ckr=r(Jre," class method or the "),bK=n(Jre,"A",{href:!0});var iRt=s(bK);wkr=r(iRt,"from_config()"),iRt.forEach(t),Akr=r(Jre,` class
method.`),Jre.forEach(t),Lkr=i(Ql),wx=n(Ql,"P",{});var Uze=s(wx);ykr=r(Uze,"This class cannot be instantiated directly using "),QTe=n(Uze,"CODE",{});var dRt=s(QTe);xkr=r(dRt,"__init__()"),dRt.forEach(t),$kr=r(Uze," (throws an error)."),Uze.forEach(t),kkr=i(Ql),Gt=n(Ql,"DIV",{class:!0});var o7=s(Gt);T(Ax.$$.fragment,o7),Skr=i(o7),WTe=n(o7,"P",{});var cRt=s(WTe);Rkr=r(cRt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),cRt.forEach(t),Pkr=i(o7),Ic=n(o7,"P",{});var Yre=s(Ic);Bkr=r(Yre,`Note:
Loading a model from its configuration file does `),HTe=n(Yre,"STRONG",{});var fRt=s(HTe);Ikr=r(fRt,"not"),fRt.forEach(t),Nkr=r(Yre,` load the model weights. It only affects the
model\u2019s configuration. Use `),vK=n(Yre,"A",{href:!0});var mRt=s(vK);qkr=r(mRt,"from_pretrained()"),mRt.forEach(t),jkr=r(Yre," to load the model weights."),Yre.forEach(t),Dkr=i(o7),T(YE.$$.fragment,o7),o7.forEach(t),Gkr=i(Ql),jr=n(Ql,"DIV",{class:!0});var Wl=s(jr);T(Lx.$$.fragment,Wl),Okr=i(Wl),UTe=n(Wl,"P",{});var gRt=s(UTe);Vkr=r(gRt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),gRt.forEach(t),Xkr=i(Wl),un=n(Wl,"P",{});var r7=s(un);zkr=r(r7,"The model class to instantiate is selected based on the "),JTe=n(r7,"CODE",{});var hRt=s(JTe);Qkr=r(hRt,"model_type"),hRt.forEach(t),Wkr=r(r7,` property of the config object (either
passed as an argument or loaded from `),YTe=n(r7,"CODE",{});var pRt=s(YTe);Hkr=r(pRt,"pretrained_model_name_or_path"),pRt.forEach(t),Ukr=r(r7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KTe=n(r7,"CODE",{});var _Rt=s(KTe);Jkr=r(_Rt,"pretrained_model_name_or_path"),_Rt.forEach(t),Ykr=r(r7,":"),r7.forEach(t),Kkr=i(Wl),ce=n(Wl,"UL",{});var ge=s(ce);KE=n(ge,"LI",{});var Dje=s(KE);ZTe=n(Dje,"STRONG",{});var uRt=s(ZTe);Zkr=r(uRt,"albert"),uRt.forEach(t),eSr=r(Dje," \u2014 "),FK=n(Dje,"A",{href:!0});var bRt=s(FK);oSr=r(bRt,"TFAlbertForQuestionAnswering"),bRt.forEach(t),rSr=r(Dje," (ALBERT model)"),Dje.forEach(t),tSr=i(ge),ZE=n(ge,"LI",{});var Gje=s(ZE);eMe=n(Gje,"STRONG",{});var vRt=s(eMe);aSr=r(vRt,"bert"),vRt.forEach(t),nSr=r(Gje," \u2014 "),TK=n(Gje,"A",{href:!0});var FRt=s(TK);sSr=r(FRt,"TFBertForQuestionAnswering"),FRt.forEach(t),lSr=r(Gje," (BERT model)"),Gje.forEach(t),iSr=i(ge),eC=n(ge,"LI",{});var Oje=s(eC);oMe=n(Oje,"STRONG",{});var TRt=s(oMe);dSr=r(TRt,"camembert"),TRt.forEach(t),cSr=r(Oje," \u2014 "),MK=n(Oje,"A",{href:!0});var MRt=s(MK);fSr=r(MRt,"TFCamembertForQuestionAnswering"),MRt.forEach(t),mSr=r(Oje," (CamemBERT model)"),Oje.forEach(t),gSr=i(ge),oC=n(ge,"LI",{});var Vje=s(oC);rMe=n(Vje,"STRONG",{});var ERt=s(rMe);hSr=r(ERt,"convbert"),ERt.forEach(t),pSr=r(Vje," \u2014 "),EK=n(Vje,"A",{href:!0});var CRt=s(EK);_Sr=r(CRt,"TFConvBertForQuestionAnswering"),CRt.forEach(t),uSr=r(Vje," (ConvBERT model)"),Vje.forEach(t),bSr=i(ge),rC=n(ge,"LI",{});var Xje=s(rC);tMe=n(Xje,"STRONG",{});var wRt=s(tMe);vSr=r(wRt,"deberta"),wRt.forEach(t),FSr=r(Xje," \u2014 "),CK=n(Xje,"A",{href:!0});var ARt=s(CK);TSr=r(ARt,"TFDebertaForQuestionAnswering"),ARt.forEach(t),MSr=r(Xje," (DeBERTa model)"),Xje.forEach(t),ESr=i(ge),tC=n(ge,"LI",{});var zje=s(tC);aMe=n(zje,"STRONG",{});var LRt=s(aMe);CSr=r(LRt,"deberta-v2"),LRt.forEach(t),wSr=r(zje," \u2014 "),wK=n(zje,"A",{href:!0});var yRt=s(wK);ASr=r(yRt,"TFDebertaV2ForQuestionAnswering"),yRt.forEach(t),LSr=r(zje," (DeBERTa-v2 model)"),zje.forEach(t),ySr=i(ge),aC=n(ge,"LI",{});var Qje=s(aC);nMe=n(Qje,"STRONG",{});var xRt=s(nMe);xSr=r(xRt,"distilbert"),xRt.forEach(t),$Sr=r(Qje," \u2014 "),AK=n(Qje,"A",{href:!0});var $Rt=s(AK);kSr=r($Rt,"TFDistilBertForQuestionAnswering"),$Rt.forEach(t),SSr=r(Qje," (DistilBERT model)"),Qje.forEach(t),RSr=i(ge),nC=n(ge,"LI",{});var Wje=s(nC);sMe=n(Wje,"STRONG",{});var kRt=s(sMe);PSr=r(kRt,"electra"),kRt.forEach(t),BSr=r(Wje," \u2014 "),LK=n(Wje,"A",{href:!0});var SRt=s(LK);ISr=r(SRt,"TFElectraForQuestionAnswering"),SRt.forEach(t),NSr=r(Wje," (ELECTRA model)"),Wje.forEach(t),qSr=i(ge),sC=n(ge,"LI",{});var Hje=s(sC);lMe=n(Hje,"STRONG",{});var RRt=s(lMe);jSr=r(RRt,"flaubert"),RRt.forEach(t),DSr=r(Hje," \u2014 "),yK=n(Hje,"A",{href:!0});var PRt=s(yK);GSr=r(PRt,"TFFlaubertForQuestionAnsweringSimple"),PRt.forEach(t),OSr=r(Hje," (FlauBERT model)"),Hje.forEach(t),VSr=i(ge),lC=n(ge,"LI",{});var Uje=s(lC);iMe=n(Uje,"STRONG",{});var BRt=s(iMe);XSr=r(BRt,"funnel"),BRt.forEach(t),zSr=r(Uje," \u2014 "),xK=n(Uje,"A",{href:!0});var IRt=s(xK);QSr=r(IRt,"TFFunnelForQuestionAnswering"),IRt.forEach(t),WSr=r(Uje," (Funnel Transformer model)"),Uje.forEach(t),HSr=i(ge),iC=n(ge,"LI",{});var Jje=s(iC);dMe=n(Jje,"STRONG",{});var NRt=s(dMe);USr=r(NRt,"gptj"),NRt.forEach(t),JSr=r(Jje," \u2014 "),$K=n(Jje,"A",{href:!0});var qRt=s($K);YSr=r(qRt,"TFGPTJForQuestionAnswering"),qRt.forEach(t),KSr=r(Jje," (GPT-J model)"),Jje.forEach(t),ZSr=i(ge),dC=n(ge,"LI",{});var Yje=s(dC);cMe=n(Yje,"STRONG",{});var jRt=s(cMe);eRr=r(jRt,"longformer"),jRt.forEach(t),oRr=r(Yje," \u2014 "),kK=n(Yje,"A",{href:!0});var DRt=s(kK);rRr=r(DRt,"TFLongformerForQuestionAnswering"),DRt.forEach(t),tRr=r(Yje," (Longformer model)"),Yje.forEach(t),aRr=i(ge),cC=n(ge,"LI",{});var Kje=s(cC);fMe=n(Kje,"STRONG",{});var GRt=s(fMe);nRr=r(GRt,"mobilebert"),GRt.forEach(t),sRr=r(Kje," \u2014 "),SK=n(Kje,"A",{href:!0});var ORt=s(SK);lRr=r(ORt,"TFMobileBertForQuestionAnswering"),ORt.forEach(t),iRr=r(Kje," (MobileBERT model)"),Kje.forEach(t),dRr=i(ge),fC=n(ge,"LI",{});var Zje=s(fC);mMe=n(Zje,"STRONG",{});var VRt=s(mMe);cRr=r(VRt,"mpnet"),VRt.forEach(t),fRr=r(Zje," \u2014 "),RK=n(Zje,"A",{href:!0});var XRt=s(RK);mRr=r(XRt,"TFMPNetForQuestionAnswering"),XRt.forEach(t),gRr=r(Zje," (MPNet model)"),Zje.forEach(t),hRr=i(ge),mC=n(ge,"LI",{});var eDe=s(mC);gMe=n(eDe,"STRONG",{});var zRt=s(gMe);pRr=r(zRt,"rembert"),zRt.forEach(t),_Rr=r(eDe," \u2014 "),PK=n(eDe,"A",{href:!0});var QRt=s(PK);uRr=r(QRt,"TFRemBertForQuestionAnswering"),QRt.forEach(t),bRr=r(eDe," (RemBERT model)"),eDe.forEach(t),vRr=i(ge),gC=n(ge,"LI",{});var oDe=s(gC);hMe=n(oDe,"STRONG",{});var WRt=s(hMe);FRr=r(WRt,"roberta"),WRt.forEach(t),TRr=r(oDe," \u2014 "),BK=n(oDe,"A",{href:!0});var HRt=s(BK);MRr=r(HRt,"TFRobertaForQuestionAnswering"),HRt.forEach(t),ERr=r(oDe," (RoBERTa model)"),oDe.forEach(t),CRr=i(ge),hC=n(ge,"LI",{});var rDe=s(hC);pMe=n(rDe,"STRONG",{});var URt=s(pMe);wRr=r(URt,"roformer"),URt.forEach(t),ARr=r(rDe," \u2014 "),IK=n(rDe,"A",{href:!0});var JRt=s(IK);LRr=r(JRt,"TFRoFormerForQuestionAnswering"),JRt.forEach(t),yRr=r(rDe," (RoFormer model)"),rDe.forEach(t),xRr=i(ge),pC=n(ge,"LI",{});var tDe=s(pC);_Me=n(tDe,"STRONG",{});var YRt=s(_Me);$Rr=r(YRt,"xlm"),YRt.forEach(t),kRr=r(tDe," \u2014 "),NK=n(tDe,"A",{href:!0});var KRt=s(NK);SRr=r(KRt,"TFXLMForQuestionAnsweringSimple"),KRt.forEach(t),RRr=r(tDe," (XLM model)"),tDe.forEach(t),PRr=i(ge),_C=n(ge,"LI",{});var aDe=s(_C);uMe=n(aDe,"STRONG",{});var ZRt=s(uMe);BRr=r(ZRt,"xlm-roberta"),ZRt.forEach(t),IRr=r(aDe," \u2014 "),qK=n(aDe,"A",{href:!0});var ePt=s(qK);NRr=r(ePt,"TFXLMRobertaForQuestionAnswering"),ePt.forEach(t),qRr=r(aDe," (XLM-RoBERTa model)"),aDe.forEach(t),jRr=i(ge),uC=n(ge,"LI",{});var nDe=s(uC);bMe=n(nDe,"STRONG",{});var oPt=s(bMe);DRr=r(oPt,"xlnet"),oPt.forEach(t),GRr=r(nDe," \u2014 "),jK=n(nDe,"A",{href:!0});var rPt=s(jK);ORr=r(rPt,"TFXLNetForQuestionAnsweringSimple"),rPt.forEach(t),VRr=r(nDe," (XLNet model)"),nDe.forEach(t),ge.forEach(t),XRr=i(Wl),T(bC.$$.fragment,Wl),Wl.forEach(t),Ql.forEach(t),GVe=i(f),Nc=n(f,"H2",{class:!0});var Jze=s(Nc);vC=n(Jze,"A",{id:!0,class:!0,href:!0});var tPt=s(vC);vMe=n(tPt,"SPAN",{});var aPt=s(vMe);T(yx.$$.fragment,aPt),aPt.forEach(t),tPt.forEach(t),zRr=i(Jze),FMe=n(Jze,"SPAN",{});var nPt=s(FMe);QRr=r(nPt,"TFAutoModelForVision2Seq"),nPt.forEach(t),Jze.forEach(t),OVe=i(f),mr=n(f,"DIV",{class:!0});var Hl=s(mr);T(xx.$$.fragment,Hl),WRr=i(Hl),qc=n(Hl,"P",{});var Kre=s(qc);HRr=r(Kre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),DK=n(Kre,"A",{href:!0});var sPt=s(DK);URr=r(sPt,"from_pretrained()"),sPt.forEach(t),JRr=r(Kre," class method or the "),GK=n(Kre,"A",{href:!0});var lPt=s(GK);YRr=r(lPt,"from_config()"),lPt.forEach(t),KRr=r(Kre,` class
method.`),Kre.forEach(t),ZRr=i(Hl),$x=n(Hl,"P",{});var Yze=s($x);ePr=r(Yze,"This class cannot be instantiated directly using "),TMe=n(Yze,"CODE",{});var iPt=s(TMe);oPr=r(iPt,"__init__()"),iPt.forEach(t),rPr=r(Yze," (throws an error)."),Yze.forEach(t),tPr=i(Hl),Ot=n(Hl,"DIV",{class:!0});var t7=s(Ot);T(kx.$$.fragment,t7),aPr=i(t7),MMe=n(t7,"P",{});var dPt=s(MMe);nPr=r(dPt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),dPt.forEach(t),sPr=i(t7),jc=n(t7,"P",{});var Zre=s(jc);lPr=r(Zre,`Note:
Loading a model from its configuration file does `),EMe=n(Zre,"STRONG",{});var cPt=s(EMe);iPr=r(cPt,"not"),cPt.forEach(t),dPr=r(Zre,` load the model weights. It only affects the
model\u2019s configuration. Use `),OK=n(Zre,"A",{href:!0});var fPt=s(OK);cPr=r(fPt,"from_pretrained()"),fPt.forEach(t),fPr=r(Zre," to load the model weights."),Zre.forEach(t),mPr=i(t7),T(FC.$$.fragment,t7),t7.forEach(t),gPr=i(Hl),Dr=n(Hl,"DIV",{class:!0});var Ul=s(Dr);T(Sx.$$.fragment,Ul),hPr=i(Ul),CMe=n(Ul,"P",{});var mPt=s(CMe);pPr=r(mPt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),mPt.forEach(t),_Pr=i(Ul),bn=n(Ul,"P",{});var a7=s(bn);uPr=r(a7,"The model class to instantiate is selected based on the "),wMe=n(a7,"CODE",{});var gPt=s(wMe);bPr=r(gPt,"model_type"),gPt.forEach(t),vPr=r(a7,` property of the config object (either
passed as an argument or loaded from `),AMe=n(a7,"CODE",{});var hPt=s(AMe);FPr=r(hPt,"pretrained_model_name_or_path"),hPt.forEach(t),TPr=r(a7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LMe=n(a7,"CODE",{});var pPt=s(LMe);MPr=r(pPt,"pretrained_model_name_or_path"),pPt.forEach(t),EPr=r(a7,":"),a7.forEach(t),CPr=i(Ul),yMe=n(Ul,"UL",{});var _Pt=s(yMe);TC=n(_Pt,"LI",{});var sDe=s(TC);xMe=n(sDe,"STRONG",{});var uPt=s(xMe);wPr=r(uPt,"vision-encoder-decoder"),uPt.forEach(t),APr=r(sDe," \u2014 "),VK=n(sDe,"A",{href:!0});var bPt=s(VK);LPr=r(bPt,"TFVisionEncoderDecoderModel"),bPt.forEach(t),yPr=r(sDe," (Vision Encoder decoder model)"),sDe.forEach(t),_Pt.forEach(t),xPr=i(Ul),T(MC.$$.fragment,Ul),Ul.forEach(t),Hl.forEach(t),VVe=i(f),Dc=n(f,"H2",{class:!0});var Kze=s(Dc);EC=n(Kze,"A",{id:!0,class:!0,href:!0});var vPt=s(EC);$Me=n(vPt,"SPAN",{});var FPt=s($Me);T(Rx.$$.fragment,FPt),FPt.forEach(t),vPt.forEach(t),$Pr=i(Kze),kMe=n(Kze,"SPAN",{});var TPt=s(kMe);kPr=r(TPt,"TFAutoModelForSpeechSeq2Seq"),TPt.forEach(t),Kze.forEach(t),XVe=i(f),gr=n(f,"DIV",{class:!0});var Jl=s(gr);T(Px.$$.fragment,Jl),SPr=i(Jl),Gc=n(Jl,"P",{});var ete=s(Gc);RPr=r(ete,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),XK=n(ete,"A",{href:!0});var MPt=s(XK);PPr=r(MPt,"from_pretrained()"),MPt.forEach(t),BPr=r(ete," class method or the "),zK=n(ete,"A",{href:!0});var EPt=s(zK);IPr=r(EPt,"from_config()"),EPt.forEach(t),NPr=r(ete,` class
method.`),ete.forEach(t),qPr=i(Jl),Bx=n(Jl,"P",{});var Zze=s(Bx);jPr=r(Zze,"This class cannot be instantiated directly using "),SMe=n(Zze,"CODE",{});var CPt=s(SMe);DPr=r(CPt,"__init__()"),CPt.forEach(t),GPr=r(Zze," (throws an error)."),Zze.forEach(t),OPr=i(Jl),Vt=n(Jl,"DIV",{class:!0});var n7=s(Vt);T(Ix.$$.fragment,n7),VPr=i(n7),RMe=n(n7,"P",{});var wPt=s(RMe);XPr=r(wPt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),wPt.forEach(t),zPr=i(n7),Oc=n(n7,"P",{});var ote=s(Oc);QPr=r(ote,`Note:
Loading a model from its configuration file does `),PMe=n(ote,"STRONG",{});var APt=s(PMe);WPr=r(APt,"not"),APt.forEach(t),HPr=r(ote,` load the model weights. It only affects the
model\u2019s configuration. Use `),QK=n(ote,"A",{href:!0});var LPt=s(QK);UPr=r(LPt,"from_pretrained()"),LPt.forEach(t),JPr=r(ote," to load the model weights."),ote.forEach(t),YPr=i(n7),T(CC.$$.fragment,n7),n7.forEach(t),KPr=i(Jl),Gr=n(Jl,"DIV",{class:!0});var Yl=s(Gr);T(Nx.$$.fragment,Yl),ZPr=i(Yl),BMe=n(Yl,"P",{});var yPt=s(BMe);eBr=r(yPt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),yPt.forEach(t),oBr=i(Yl),vn=n(Yl,"P",{});var s7=s(vn);rBr=r(s7,"The model class to instantiate is selected based on the "),IMe=n(s7,"CODE",{});var xPt=s(IMe);tBr=r(xPt,"model_type"),xPt.forEach(t),aBr=r(s7,` property of the config object (either
passed as an argument or loaded from `),NMe=n(s7,"CODE",{});var $Pt=s(NMe);nBr=r($Pt,"pretrained_model_name_or_path"),$Pt.forEach(t),sBr=r(s7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qMe=n(s7,"CODE",{});var kPt=s(qMe);lBr=r(kPt,"pretrained_model_name_or_path"),kPt.forEach(t),iBr=r(s7,":"),s7.forEach(t),dBr=i(Yl),jMe=n(Yl,"UL",{});var SPt=s(jMe);wC=n(SPt,"LI",{});var lDe=s(wC);DMe=n(lDe,"STRONG",{});var RPt=s(DMe);cBr=r(RPt,"speech_to_text"),RPt.forEach(t),fBr=r(lDe," \u2014 "),WK=n(lDe,"A",{href:!0});var PPt=s(WK);mBr=r(PPt,"TFSpeech2TextForConditionalGeneration"),PPt.forEach(t),gBr=r(lDe," (Speech2Text model)"),lDe.forEach(t),SPt.forEach(t),hBr=i(Yl),T(AC.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),zVe=i(f),Vc=n(f,"H2",{class:!0});var eQe=s(Vc);LC=n(eQe,"A",{id:!0,class:!0,href:!0});var BPt=s(LC);GMe=n(BPt,"SPAN",{});var IPt=s(GMe);T(qx.$$.fragment,IPt),IPt.forEach(t),BPt.forEach(t),pBr=i(eQe),OMe=n(eQe,"SPAN",{});var NPt=s(OMe);_Br=r(NPt,"FlaxAutoModel"),NPt.forEach(t),eQe.forEach(t),QVe=i(f),hr=n(f,"DIV",{class:!0});var Kl=s(hr);T(jx.$$.fragment,Kl),uBr=i(Kl),Xc=n(Kl,"P",{});var rte=s(Xc);bBr=r(rte,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),HK=n(rte,"A",{href:!0});var qPt=s(HK);vBr=r(qPt,"from_pretrained()"),qPt.forEach(t),FBr=r(rte," class method or the "),UK=n(rte,"A",{href:!0});var jPt=s(UK);TBr=r(jPt,"from_config()"),jPt.forEach(t),MBr=r(rte,` class
method.`),rte.forEach(t),EBr=i(Kl),Dx=n(Kl,"P",{});var oQe=s(Dx);CBr=r(oQe,"This class cannot be instantiated directly using "),VMe=n(oQe,"CODE",{});var DPt=s(VMe);wBr=r(DPt,"__init__()"),DPt.forEach(t),ABr=r(oQe," (throws an error)."),oQe.forEach(t),LBr=i(Kl),Xt=n(Kl,"DIV",{class:!0});var l7=s(Xt);T(Gx.$$.fragment,l7),yBr=i(l7),XMe=n(l7,"P",{});var GPt=s(XMe);xBr=r(GPt,"Instantiates one of the base model classes of the library from a configuration."),GPt.forEach(t),$Br=i(l7),zc=n(l7,"P",{});var tte=s(zc);kBr=r(tte,`Note:
Loading a model from its configuration file does `),zMe=n(tte,"STRONG",{});var OPt=s(zMe);SBr=r(OPt,"not"),OPt.forEach(t),RBr=r(tte,` load the model weights. It only affects the
model\u2019s configuration. Use `),JK=n(tte,"A",{href:!0});var VPt=s(JK);PBr=r(VPt,"from_pretrained()"),VPt.forEach(t),BBr=r(tte," to load the model weights."),tte.forEach(t),IBr=i(l7),T(yC.$$.fragment,l7),l7.forEach(t),NBr=i(Kl),Or=n(Kl,"DIV",{class:!0});var Zl=s(Or);T(Ox.$$.fragment,Zl),qBr=i(Zl),QMe=n(Zl,"P",{});var XPt=s(QMe);jBr=r(XPt,"Instantiate one of the base model classes of the library from a pretrained model."),XPt.forEach(t),DBr=i(Zl),Fn=n(Zl,"P",{});var i7=s(Fn);GBr=r(i7,"The model class to instantiate is selected based on the "),WMe=n(i7,"CODE",{});var zPt=s(WMe);OBr=r(zPt,"model_type"),zPt.forEach(t),VBr=r(i7,` property of the config object (either
passed as an argument or loaded from `),HMe=n(i7,"CODE",{});var QPt=s(HMe);XBr=r(QPt,"pretrained_model_name_or_path"),QPt.forEach(t),zBr=r(i7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UMe=n(i7,"CODE",{});var WPt=s(UMe);QBr=r(WPt,"pretrained_model_name_or_path"),WPt.forEach(t),WBr=r(i7,":"),i7.forEach(t),HBr=i(Zl),oe=n(Zl,"UL",{});var ae=s(oe);xC=n(ae,"LI",{});var iDe=s(xC);JMe=n(iDe,"STRONG",{});var HPt=s(JMe);UBr=r(HPt,"albert"),HPt.forEach(t),JBr=r(iDe," \u2014 "),YK=n(iDe,"A",{href:!0});var UPt=s(YK);YBr=r(UPt,"FlaxAlbertModel"),UPt.forEach(t),KBr=r(iDe," (ALBERT model)"),iDe.forEach(t),ZBr=i(ae),$C=n(ae,"LI",{});var dDe=s($C);YMe=n(dDe,"STRONG",{});var JPt=s(YMe);eIr=r(JPt,"bart"),JPt.forEach(t),oIr=r(dDe," \u2014 "),KK=n(dDe,"A",{href:!0});var YPt=s(KK);rIr=r(YPt,"FlaxBartModel"),YPt.forEach(t),tIr=r(dDe," (BART model)"),dDe.forEach(t),aIr=i(ae),kC=n(ae,"LI",{});var cDe=s(kC);KMe=n(cDe,"STRONG",{});var KPt=s(KMe);nIr=r(KPt,"beit"),KPt.forEach(t),sIr=r(cDe," \u2014 "),ZK=n(cDe,"A",{href:!0});var ZPt=s(ZK);lIr=r(ZPt,"FlaxBeitModel"),ZPt.forEach(t),iIr=r(cDe," (BEiT model)"),cDe.forEach(t),dIr=i(ae),SC=n(ae,"LI",{});var fDe=s(SC);ZMe=n(fDe,"STRONG",{});var eBt=s(ZMe);cIr=r(eBt,"bert"),eBt.forEach(t),fIr=r(fDe," \u2014 "),eZ=n(fDe,"A",{href:!0});var oBt=s(eZ);mIr=r(oBt,"FlaxBertModel"),oBt.forEach(t),gIr=r(fDe," (BERT model)"),fDe.forEach(t),hIr=i(ae),RC=n(ae,"LI",{});var mDe=s(RC);eEe=n(mDe,"STRONG",{});var rBt=s(eEe);pIr=r(rBt,"big_bird"),rBt.forEach(t),_Ir=r(mDe," \u2014 "),oZ=n(mDe,"A",{href:!0});var tBt=s(oZ);uIr=r(tBt,"FlaxBigBirdModel"),tBt.forEach(t),bIr=r(mDe," (BigBird model)"),mDe.forEach(t),vIr=i(ae),PC=n(ae,"LI",{});var gDe=s(PC);oEe=n(gDe,"STRONG",{});var aBt=s(oEe);FIr=r(aBt,"blenderbot"),aBt.forEach(t),TIr=r(gDe," \u2014 "),rZ=n(gDe,"A",{href:!0});var nBt=s(rZ);MIr=r(nBt,"FlaxBlenderbotModel"),nBt.forEach(t),EIr=r(gDe," (Blenderbot model)"),gDe.forEach(t),CIr=i(ae),BC=n(ae,"LI",{});var hDe=s(BC);rEe=n(hDe,"STRONG",{});var sBt=s(rEe);wIr=r(sBt,"blenderbot-small"),sBt.forEach(t),AIr=r(hDe," \u2014 "),tZ=n(hDe,"A",{href:!0});var lBt=s(tZ);LIr=r(lBt,"FlaxBlenderbotSmallModel"),lBt.forEach(t),yIr=r(hDe," (BlenderbotSmall model)"),hDe.forEach(t),xIr=i(ae),IC=n(ae,"LI",{});var pDe=s(IC);tEe=n(pDe,"STRONG",{});var iBt=s(tEe);$Ir=r(iBt,"clip"),iBt.forEach(t),kIr=r(pDe," \u2014 "),aZ=n(pDe,"A",{href:!0});var dBt=s(aZ);SIr=r(dBt,"FlaxCLIPModel"),dBt.forEach(t),RIr=r(pDe," (CLIP model)"),pDe.forEach(t),PIr=i(ae),NC=n(ae,"LI",{});var _De=s(NC);aEe=n(_De,"STRONG",{});var cBt=s(aEe);BIr=r(cBt,"distilbert"),cBt.forEach(t),IIr=r(_De," \u2014 "),nZ=n(_De,"A",{href:!0});var fBt=s(nZ);NIr=r(fBt,"FlaxDistilBertModel"),fBt.forEach(t),qIr=r(_De," (DistilBERT model)"),_De.forEach(t),jIr=i(ae),qC=n(ae,"LI",{});var uDe=s(qC);nEe=n(uDe,"STRONG",{});var mBt=s(nEe);DIr=r(mBt,"electra"),mBt.forEach(t),GIr=r(uDe," \u2014 "),sZ=n(uDe,"A",{href:!0});var gBt=s(sZ);OIr=r(gBt,"FlaxElectraModel"),gBt.forEach(t),VIr=r(uDe," (ELECTRA model)"),uDe.forEach(t),XIr=i(ae),jC=n(ae,"LI",{});var bDe=s(jC);sEe=n(bDe,"STRONG",{});var hBt=s(sEe);zIr=r(hBt,"gpt2"),hBt.forEach(t),QIr=r(bDe," \u2014 "),lZ=n(bDe,"A",{href:!0});var pBt=s(lZ);WIr=r(pBt,"FlaxGPT2Model"),pBt.forEach(t),HIr=r(bDe," (OpenAI GPT-2 model)"),bDe.forEach(t),UIr=i(ae),DC=n(ae,"LI",{});var vDe=s(DC);lEe=n(vDe,"STRONG",{});var _Bt=s(lEe);JIr=r(_Bt,"gpt_neo"),_Bt.forEach(t),YIr=r(vDe," \u2014 "),iZ=n(vDe,"A",{href:!0});var uBt=s(iZ);KIr=r(uBt,"FlaxGPTNeoModel"),uBt.forEach(t),ZIr=r(vDe," (GPT Neo model)"),vDe.forEach(t),eNr=i(ae),GC=n(ae,"LI",{});var FDe=s(GC);iEe=n(FDe,"STRONG",{});var bBt=s(iEe);oNr=r(bBt,"gptj"),bBt.forEach(t),rNr=r(FDe," \u2014 "),dZ=n(FDe,"A",{href:!0});var vBt=s(dZ);tNr=r(vBt,"FlaxGPTJModel"),vBt.forEach(t),aNr=r(FDe," (GPT-J model)"),FDe.forEach(t),nNr=i(ae),OC=n(ae,"LI",{});var TDe=s(OC);dEe=n(TDe,"STRONG",{});var FBt=s(dEe);sNr=r(FBt,"longt5"),FBt.forEach(t),lNr=r(TDe," \u2014 "),cZ=n(TDe,"A",{href:!0});var TBt=s(cZ);iNr=r(TBt,"FlaxLongT5Model"),TBt.forEach(t),dNr=r(TDe," (LongT5 model)"),TDe.forEach(t),cNr=i(ae),VC=n(ae,"LI",{});var MDe=s(VC);cEe=n(MDe,"STRONG",{});var MBt=s(cEe);fNr=r(MBt,"marian"),MBt.forEach(t),mNr=r(MDe," \u2014 "),fZ=n(MDe,"A",{href:!0});var EBt=s(fZ);gNr=r(EBt,"FlaxMarianModel"),EBt.forEach(t),hNr=r(MDe," (Marian model)"),MDe.forEach(t),pNr=i(ae),XC=n(ae,"LI",{});var EDe=s(XC);fEe=n(EDe,"STRONG",{});var CBt=s(fEe);_Nr=r(CBt,"mbart"),CBt.forEach(t),uNr=r(EDe," \u2014 "),mZ=n(EDe,"A",{href:!0});var wBt=s(mZ);bNr=r(wBt,"FlaxMBartModel"),wBt.forEach(t),vNr=r(EDe," (mBART model)"),EDe.forEach(t),FNr=i(ae),zC=n(ae,"LI",{});var CDe=s(zC);mEe=n(CDe,"STRONG",{});var ABt=s(mEe);TNr=r(ABt,"mt5"),ABt.forEach(t),MNr=r(CDe," \u2014 "),gZ=n(CDe,"A",{href:!0});var LBt=s(gZ);ENr=r(LBt,"FlaxMT5Model"),LBt.forEach(t),CNr=r(CDe," (MT5 model)"),CDe.forEach(t),wNr=i(ae),QC=n(ae,"LI",{});var wDe=s(QC);gEe=n(wDe,"STRONG",{});var yBt=s(gEe);ANr=r(yBt,"opt"),yBt.forEach(t),LNr=r(wDe," \u2014 "),hZ=n(wDe,"A",{href:!0});var xBt=s(hZ);yNr=r(xBt,"FlaxOPTModel"),xBt.forEach(t),xNr=r(wDe," (OPT model)"),wDe.forEach(t),$Nr=i(ae),WC=n(ae,"LI",{});var ADe=s(WC);hEe=n(ADe,"STRONG",{});var $Bt=s(hEe);kNr=r($Bt,"pegasus"),$Bt.forEach(t),SNr=r(ADe," \u2014 "),pZ=n(ADe,"A",{href:!0});var kBt=s(pZ);RNr=r(kBt,"FlaxPegasusModel"),kBt.forEach(t),PNr=r(ADe," (Pegasus model)"),ADe.forEach(t),BNr=i(ae),HC=n(ae,"LI",{});var LDe=s(HC);pEe=n(LDe,"STRONG",{});var SBt=s(pEe);INr=r(SBt,"roberta"),SBt.forEach(t),NNr=r(LDe," \u2014 "),_Z=n(LDe,"A",{href:!0});var RBt=s(_Z);qNr=r(RBt,"FlaxRobertaModel"),RBt.forEach(t),jNr=r(LDe," (RoBERTa model)"),LDe.forEach(t),DNr=i(ae),UC=n(ae,"LI",{});var yDe=s(UC);_Ee=n(yDe,"STRONG",{});var PBt=s(_Ee);GNr=r(PBt,"roformer"),PBt.forEach(t),ONr=r(yDe," \u2014 "),uZ=n(yDe,"A",{href:!0});var BBt=s(uZ);VNr=r(BBt,"FlaxRoFormerModel"),BBt.forEach(t),XNr=r(yDe," (RoFormer model)"),yDe.forEach(t),zNr=i(ae),JC=n(ae,"LI",{});var xDe=s(JC);uEe=n(xDe,"STRONG",{});var IBt=s(uEe);QNr=r(IBt,"t5"),IBt.forEach(t),WNr=r(xDe," \u2014 "),bZ=n(xDe,"A",{href:!0});var NBt=s(bZ);HNr=r(NBt,"FlaxT5Model"),NBt.forEach(t),UNr=r(xDe," (T5 model)"),xDe.forEach(t),JNr=i(ae),YC=n(ae,"LI",{});var $De=s(YC);bEe=n($De,"STRONG",{});var qBt=s(bEe);YNr=r(qBt,"vision-text-dual-encoder"),qBt.forEach(t),KNr=r($De," \u2014 "),vZ=n($De,"A",{href:!0});var jBt=s(vZ);ZNr=r(jBt,"FlaxVisionTextDualEncoderModel"),jBt.forEach(t),eqr=r($De," (VisionTextDualEncoder model)"),$De.forEach(t),oqr=i(ae),KC=n(ae,"LI",{});var kDe=s(KC);vEe=n(kDe,"STRONG",{});var DBt=s(vEe);rqr=r(DBt,"vit"),DBt.forEach(t),tqr=r(kDe," \u2014 "),FZ=n(kDe,"A",{href:!0});var GBt=s(FZ);aqr=r(GBt,"FlaxViTModel"),GBt.forEach(t),nqr=r(kDe," (ViT model)"),kDe.forEach(t),sqr=i(ae),ZC=n(ae,"LI",{});var SDe=s(ZC);FEe=n(SDe,"STRONG",{});var OBt=s(FEe);lqr=r(OBt,"wav2vec2"),OBt.forEach(t),iqr=r(SDe," \u2014 "),TZ=n(SDe,"A",{href:!0});var VBt=s(TZ);dqr=r(VBt,"FlaxWav2Vec2Model"),VBt.forEach(t),cqr=r(SDe," (Wav2Vec2 model)"),SDe.forEach(t),fqr=i(ae),e0=n(ae,"LI",{});var RDe=s(e0);TEe=n(RDe,"STRONG",{});var XBt=s(TEe);mqr=r(XBt,"xglm"),XBt.forEach(t),gqr=r(RDe," \u2014 "),MZ=n(RDe,"A",{href:!0});var zBt=s(MZ);hqr=r(zBt,"FlaxXGLMModel"),zBt.forEach(t),pqr=r(RDe," (XGLM model)"),RDe.forEach(t),_qr=i(ae),o0=n(ae,"LI",{});var PDe=s(o0);MEe=n(PDe,"STRONG",{});var QBt=s(MEe);uqr=r(QBt,"xlm-roberta"),QBt.forEach(t),bqr=r(PDe," \u2014 "),EZ=n(PDe,"A",{href:!0});var WBt=s(EZ);vqr=r(WBt,"FlaxXLMRobertaModel"),WBt.forEach(t),Fqr=r(PDe," (XLM-RoBERTa model)"),PDe.forEach(t),ae.forEach(t),Tqr=i(Zl),T(r0.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),WVe=i(f),Qc=n(f,"H2",{class:!0});var rQe=s(Qc);t0=n(rQe,"A",{id:!0,class:!0,href:!0});var HBt=s(t0);EEe=n(HBt,"SPAN",{});var UBt=s(EEe);T(Vx.$$.fragment,UBt),UBt.forEach(t),HBt.forEach(t),Mqr=i(rQe),CEe=n(rQe,"SPAN",{});var JBt=s(CEe);Eqr=r(JBt,"FlaxAutoModelForCausalLM"),JBt.forEach(t),rQe.forEach(t),HVe=i(f),pr=n(f,"DIV",{class:!0});var ei=s(pr);T(Xx.$$.fragment,ei),Cqr=i(ei),Wc=n(ei,"P",{});var ate=s(Wc);wqr=r(ate,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),CZ=n(ate,"A",{href:!0});var YBt=s(CZ);Aqr=r(YBt,"from_pretrained()"),YBt.forEach(t),Lqr=r(ate," class method or the "),wZ=n(ate,"A",{href:!0});var KBt=s(wZ);yqr=r(KBt,"from_config()"),KBt.forEach(t),xqr=r(ate,` class
method.`),ate.forEach(t),$qr=i(ei),zx=n(ei,"P",{});var tQe=s(zx);kqr=r(tQe,"This class cannot be instantiated directly using "),wEe=n(tQe,"CODE",{});var ZBt=s(wEe);Sqr=r(ZBt,"__init__()"),ZBt.forEach(t),Rqr=r(tQe," (throws an error)."),tQe.forEach(t),Pqr=i(ei),zt=n(ei,"DIV",{class:!0});var d7=s(zt);T(Qx.$$.fragment,d7),Bqr=i(d7),AEe=n(d7,"P",{});var eIt=s(AEe);Iqr=r(eIt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),eIt.forEach(t),Nqr=i(d7),Hc=n(d7,"P",{});var nte=s(Hc);qqr=r(nte,`Note:
Loading a model from its configuration file does `),LEe=n(nte,"STRONG",{});var oIt=s(LEe);jqr=r(oIt,"not"),oIt.forEach(t),Dqr=r(nte,` load the model weights. It only affects the
model\u2019s configuration. Use `),AZ=n(nte,"A",{href:!0});var rIt=s(AZ);Gqr=r(rIt,"from_pretrained()"),rIt.forEach(t),Oqr=r(nte," to load the model weights."),nte.forEach(t),Vqr=i(d7),T(a0.$$.fragment,d7),d7.forEach(t),Xqr=i(ei),Vr=n(ei,"DIV",{class:!0});var oi=s(Vr);T(Wx.$$.fragment,oi),zqr=i(oi),yEe=n(oi,"P",{});var tIt=s(yEe);Qqr=r(tIt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),tIt.forEach(t),Wqr=i(oi),Tn=n(oi,"P",{});var c7=s(Tn);Hqr=r(c7,"The model class to instantiate is selected based on the "),xEe=n(c7,"CODE",{});var aIt=s(xEe);Uqr=r(aIt,"model_type"),aIt.forEach(t),Jqr=r(c7,` property of the config object (either
passed as an argument or loaded from `),$Ee=n(c7,"CODE",{});var nIt=s($Ee);Yqr=r(nIt,"pretrained_model_name_or_path"),nIt.forEach(t),Kqr=r(c7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kEe=n(c7,"CODE",{});var sIt=s(kEe);Zqr=r(sIt,"pretrained_model_name_or_path"),sIt.forEach(t),ejr=r(c7,":"),c7.forEach(t),ojr=i(oi),xe=n(oi,"UL",{});var Ne=s(xe);n0=n(Ne,"LI",{});var BDe=s(n0);SEe=n(BDe,"STRONG",{});var lIt=s(SEe);rjr=r(lIt,"bart"),lIt.forEach(t),tjr=r(BDe," \u2014 "),LZ=n(BDe,"A",{href:!0});var iIt=s(LZ);ajr=r(iIt,"FlaxBartForCausalLM"),iIt.forEach(t),njr=r(BDe," (BART model)"),BDe.forEach(t),sjr=i(Ne),s0=n(Ne,"LI",{});var IDe=s(s0);REe=n(IDe,"STRONG",{});var dIt=s(REe);ljr=r(dIt,"bert"),dIt.forEach(t),ijr=r(IDe," \u2014 "),yZ=n(IDe,"A",{href:!0});var cIt=s(yZ);djr=r(cIt,"FlaxBertForCausalLM"),cIt.forEach(t),cjr=r(IDe," (BERT model)"),IDe.forEach(t),fjr=i(Ne),l0=n(Ne,"LI",{});var NDe=s(l0);PEe=n(NDe,"STRONG",{});var fIt=s(PEe);mjr=r(fIt,"big_bird"),fIt.forEach(t),gjr=r(NDe," \u2014 "),xZ=n(NDe,"A",{href:!0});var mIt=s(xZ);hjr=r(mIt,"FlaxBigBirdForCausalLM"),mIt.forEach(t),pjr=r(NDe," (BigBird model)"),NDe.forEach(t),_jr=i(Ne),i0=n(Ne,"LI",{});var qDe=s(i0);BEe=n(qDe,"STRONG",{});var gIt=s(BEe);ujr=r(gIt,"electra"),gIt.forEach(t),bjr=r(qDe," \u2014 "),$Z=n(qDe,"A",{href:!0});var hIt=s($Z);vjr=r(hIt,"FlaxElectraForCausalLM"),hIt.forEach(t),Fjr=r(qDe," (ELECTRA model)"),qDe.forEach(t),Tjr=i(Ne),d0=n(Ne,"LI",{});var jDe=s(d0);IEe=n(jDe,"STRONG",{});var pIt=s(IEe);Mjr=r(pIt,"gpt2"),pIt.forEach(t),Ejr=r(jDe," \u2014 "),kZ=n(jDe,"A",{href:!0});var _It=s(kZ);Cjr=r(_It,"FlaxGPT2LMHeadModel"),_It.forEach(t),wjr=r(jDe," (OpenAI GPT-2 model)"),jDe.forEach(t),Ajr=i(Ne),c0=n(Ne,"LI",{});var DDe=s(c0);NEe=n(DDe,"STRONG",{});var uIt=s(NEe);Ljr=r(uIt,"gpt_neo"),uIt.forEach(t),yjr=r(DDe," \u2014 "),SZ=n(DDe,"A",{href:!0});var bIt=s(SZ);xjr=r(bIt,"FlaxGPTNeoForCausalLM"),bIt.forEach(t),$jr=r(DDe," (GPT Neo model)"),DDe.forEach(t),kjr=i(Ne),f0=n(Ne,"LI",{});var GDe=s(f0);qEe=n(GDe,"STRONG",{});var vIt=s(qEe);Sjr=r(vIt,"gptj"),vIt.forEach(t),Rjr=r(GDe," \u2014 "),RZ=n(GDe,"A",{href:!0});var FIt=s(RZ);Pjr=r(FIt,"FlaxGPTJForCausalLM"),FIt.forEach(t),Bjr=r(GDe," (GPT-J model)"),GDe.forEach(t),Ijr=i(Ne),m0=n(Ne,"LI",{});var ODe=s(m0);jEe=n(ODe,"STRONG",{});var TIt=s(jEe);Njr=r(TIt,"opt"),TIt.forEach(t),qjr=r(ODe," \u2014 "),PZ=n(ODe,"A",{href:!0});var MIt=s(PZ);jjr=r(MIt,"FlaxOPTForCausalLM"),MIt.forEach(t),Djr=r(ODe," (OPT model)"),ODe.forEach(t),Gjr=i(Ne),g0=n(Ne,"LI",{});var VDe=s(g0);DEe=n(VDe,"STRONG",{});var EIt=s(DEe);Ojr=r(EIt,"roberta"),EIt.forEach(t),Vjr=r(VDe," \u2014 "),BZ=n(VDe,"A",{href:!0});var CIt=s(BZ);Xjr=r(CIt,"FlaxRobertaForCausalLM"),CIt.forEach(t),zjr=r(VDe," (RoBERTa model)"),VDe.forEach(t),Qjr=i(Ne),h0=n(Ne,"LI",{});var XDe=s(h0);GEe=n(XDe,"STRONG",{});var wIt=s(GEe);Wjr=r(wIt,"xglm"),wIt.forEach(t),Hjr=r(XDe," \u2014 "),IZ=n(XDe,"A",{href:!0});var AIt=s(IZ);Ujr=r(AIt,"FlaxXGLMForCausalLM"),AIt.forEach(t),Jjr=r(XDe," (XGLM model)"),XDe.forEach(t),Ne.forEach(t),Yjr=i(oi),T(p0.$$.fragment,oi),oi.forEach(t),ei.forEach(t),UVe=i(f),Uc=n(f,"H2",{class:!0});var aQe=s(Uc);_0=n(aQe,"A",{id:!0,class:!0,href:!0});var LIt=s(_0);OEe=n(LIt,"SPAN",{});var yIt=s(OEe);T(Hx.$$.fragment,yIt),yIt.forEach(t),LIt.forEach(t),Kjr=i(aQe),VEe=n(aQe,"SPAN",{});var xIt=s(VEe);Zjr=r(xIt,"FlaxAutoModelForPreTraining"),xIt.forEach(t),aQe.forEach(t),JVe=i(f),_r=n(f,"DIV",{class:!0});var ri=s(_r);T(Ux.$$.fragment,ri),eDr=i(ri),Jc=n(ri,"P",{});var ste=s(Jc);oDr=r(ste,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),NZ=n(ste,"A",{href:!0});var $It=s(NZ);rDr=r($It,"from_pretrained()"),$It.forEach(t),tDr=r(ste," class method or the "),qZ=n(ste,"A",{href:!0});var kIt=s(qZ);aDr=r(kIt,"from_config()"),kIt.forEach(t),nDr=r(ste,` class
method.`),ste.forEach(t),sDr=i(ri),Jx=n(ri,"P",{});var nQe=s(Jx);lDr=r(nQe,"This class cannot be instantiated directly using "),XEe=n(nQe,"CODE",{});var SIt=s(XEe);iDr=r(SIt,"__init__()"),SIt.forEach(t),dDr=r(nQe," (throws an error)."),nQe.forEach(t),cDr=i(ri),Qt=n(ri,"DIV",{class:!0});var f7=s(Qt);T(Yx.$$.fragment,f7),fDr=i(f7),zEe=n(f7,"P",{});var RIt=s(zEe);mDr=r(RIt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),RIt.forEach(t),gDr=i(f7),Yc=n(f7,"P",{});var lte=s(Yc);hDr=r(lte,`Note:
Loading a model from its configuration file does `),QEe=n(lte,"STRONG",{});var PIt=s(QEe);pDr=r(PIt,"not"),PIt.forEach(t),_Dr=r(lte,` load the model weights. It only affects the
model\u2019s configuration. Use `),jZ=n(lte,"A",{href:!0});var BIt=s(jZ);uDr=r(BIt,"from_pretrained()"),BIt.forEach(t),bDr=r(lte," to load the model weights."),lte.forEach(t),vDr=i(f7),T(u0.$$.fragment,f7),f7.forEach(t),FDr=i(ri),Xr=n(ri,"DIV",{class:!0});var ti=s(Xr);T(Kx.$$.fragment,ti),TDr=i(ti),WEe=n(ti,"P",{});var IIt=s(WEe);MDr=r(IIt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),IIt.forEach(t),EDr=i(ti),Mn=n(ti,"P",{});var m7=s(Mn);CDr=r(m7,"The model class to instantiate is selected based on the "),HEe=n(m7,"CODE",{});var NIt=s(HEe);wDr=r(NIt,"model_type"),NIt.forEach(t),ADr=r(m7,` property of the config object (either
passed as an argument or loaded from `),UEe=n(m7,"CODE",{});var qIt=s(UEe);LDr=r(qIt,"pretrained_model_name_or_path"),qIt.forEach(t),yDr=r(m7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JEe=n(m7,"CODE",{});var jIt=s(JEe);xDr=r(jIt,"pretrained_model_name_or_path"),jIt.forEach(t),$Dr=r(m7,":"),m7.forEach(t),kDr=i(ti),Ee=n(ti,"UL",{});var we=s(Ee);b0=n(we,"LI",{});var zDe=s(b0);YEe=n(zDe,"STRONG",{});var DIt=s(YEe);SDr=r(DIt,"albert"),DIt.forEach(t),RDr=r(zDe," \u2014 "),DZ=n(zDe,"A",{href:!0});var GIt=s(DZ);PDr=r(GIt,"FlaxAlbertForPreTraining"),GIt.forEach(t),BDr=r(zDe," (ALBERT model)"),zDe.forEach(t),IDr=i(we),v0=n(we,"LI",{});var QDe=s(v0);KEe=n(QDe,"STRONG",{});var OIt=s(KEe);NDr=r(OIt,"bart"),OIt.forEach(t),qDr=r(QDe," \u2014 "),GZ=n(QDe,"A",{href:!0});var VIt=s(GZ);jDr=r(VIt,"FlaxBartForConditionalGeneration"),VIt.forEach(t),DDr=r(QDe," (BART model)"),QDe.forEach(t),GDr=i(we),F0=n(we,"LI",{});var WDe=s(F0);ZEe=n(WDe,"STRONG",{});var XIt=s(ZEe);ODr=r(XIt,"bert"),XIt.forEach(t),VDr=r(WDe," \u2014 "),OZ=n(WDe,"A",{href:!0});var zIt=s(OZ);XDr=r(zIt,"FlaxBertForPreTraining"),zIt.forEach(t),zDr=r(WDe," (BERT model)"),WDe.forEach(t),QDr=i(we),T0=n(we,"LI",{});var HDe=s(T0);eCe=n(HDe,"STRONG",{});var QIt=s(eCe);WDr=r(QIt,"big_bird"),QIt.forEach(t),HDr=r(HDe," \u2014 "),VZ=n(HDe,"A",{href:!0});var WIt=s(VZ);UDr=r(WIt,"FlaxBigBirdForPreTraining"),WIt.forEach(t),JDr=r(HDe," (BigBird model)"),HDe.forEach(t),YDr=i(we),M0=n(we,"LI",{});var UDe=s(M0);oCe=n(UDe,"STRONG",{});var HIt=s(oCe);KDr=r(HIt,"electra"),HIt.forEach(t),ZDr=r(UDe," \u2014 "),XZ=n(UDe,"A",{href:!0});var UIt=s(XZ);eGr=r(UIt,"FlaxElectraForPreTraining"),UIt.forEach(t),oGr=r(UDe," (ELECTRA model)"),UDe.forEach(t),rGr=i(we),E0=n(we,"LI",{});var JDe=s(E0);rCe=n(JDe,"STRONG",{});var JIt=s(rCe);tGr=r(JIt,"longt5"),JIt.forEach(t),aGr=r(JDe," \u2014 "),zZ=n(JDe,"A",{href:!0});var YIt=s(zZ);nGr=r(YIt,"FlaxLongT5ForConditionalGeneration"),YIt.forEach(t),sGr=r(JDe," (LongT5 model)"),JDe.forEach(t),lGr=i(we),C0=n(we,"LI",{});var YDe=s(C0);tCe=n(YDe,"STRONG",{});var KIt=s(tCe);iGr=r(KIt,"mbart"),KIt.forEach(t),dGr=r(YDe," \u2014 "),QZ=n(YDe,"A",{href:!0});var ZIt=s(QZ);cGr=r(ZIt,"FlaxMBartForConditionalGeneration"),ZIt.forEach(t),fGr=r(YDe," (mBART model)"),YDe.forEach(t),mGr=i(we),w0=n(we,"LI",{});var KDe=s(w0);aCe=n(KDe,"STRONG",{});var eNt=s(aCe);gGr=r(eNt,"mt5"),eNt.forEach(t),hGr=r(KDe," \u2014 "),WZ=n(KDe,"A",{href:!0});var oNt=s(WZ);pGr=r(oNt,"FlaxMT5ForConditionalGeneration"),oNt.forEach(t),_Gr=r(KDe," (MT5 model)"),KDe.forEach(t),uGr=i(we),A0=n(we,"LI",{});var ZDe=s(A0);nCe=n(ZDe,"STRONG",{});var rNt=s(nCe);bGr=r(rNt,"roberta"),rNt.forEach(t),vGr=r(ZDe," \u2014 "),HZ=n(ZDe,"A",{href:!0});var tNt=s(HZ);FGr=r(tNt,"FlaxRobertaForMaskedLM"),tNt.forEach(t),TGr=r(ZDe," (RoBERTa model)"),ZDe.forEach(t),MGr=i(we),L0=n(we,"LI",{});var eGe=s(L0);sCe=n(eGe,"STRONG",{});var aNt=s(sCe);EGr=r(aNt,"roformer"),aNt.forEach(t),CGr=r(eGe," \u2014 "),UZ=n(eGe,"A",{href:!0});var nNt=s(UZ);wGr=r(nNt,"FlaxRoFormerForMaskedLM"),nNt.forEach(t),AGr=r(eGe," (RoFormer model)"),eGe.forEach(t),LGr=i(we),y0=n(we,"LI",{});var oGe=s(y0);lCe=n(oGe,"STRONG",{});var sNt=s(lCe);yGr=r(sNt,"t5"),sNt.forEach(t),xGr=r(oGe," \u2014 "),JZ=n(oGe,"A",{href:!0});var lNt=s(JZ);$Gr=r(lNt,"FlaxT5ForConditionalGeneration"),lNt.forEach(t),kGr=r(oGe," (T5 model)"),oGe.forEach(t),SGr=i(we),x0=n(we,"LI",{});var rGe=s(x0);iCe=n(rGe,"STRONG",{});var iNt=s(iCe);RGr=r(iNt,"wav2vec2"),iNt.forEach(t),PGr=r(rGe," \u2014 "),YZ=n(rGe,"A",{href:!0});var dNt=s(YZ);BGr=r(dNt,"FlaxWav2Vec2ForPreTraining"),dNt.forEach(t),IGr=r(rGe," (Wav2Vec2 model)"),rGe.forEach(t),NGr=i(we),$0=n(we,"LI",{});var tGe=s($0);dCe=n(tGe,"STRONG",{});var cNt=s(dCe);qGr=r(cNt,"xlm-roberta"),cNt.forEach(t),jGr=r(tGe," \u2014 "),KZ=n(tGe,"A",{href:!0});var fNt=s(KZ);DGr=r(fNt,"FlaxXLMRobertaForMaskedLM"),fNt.forEach(t),GGr=r(tGe," (XLM-RoBERTa model)"),tGe.forEach(t),we.forEach(t),OGr=i(ti),T(k0.$$.fragment,ti),ti.forEach(t),ri.forEach(t),YVe=i(f),Kc=n(f,"H2",{class:!0});var sQe=s(Kc);S0=n(sQe,"A",{id:!0,class:!0,href:!0});var mNt=s(S0);cCe=n(mNt,"SPAN",{});var gNt=s(cCe);T(Zx.$$.fragment,gNt),gNt.forEach(t),mNt.forEach(t),VGr=i(sQe),fCe=n(sQe,"SPAN",{});var hNt=s(fCe);XGr=r(hNt,"FlaxAutoModelForMaskedLM"),hNt.forEach(t),sQe.forEach(t),KVe=i(f),ur=n(f,"DIV",{class:!0});var ai=s(ur);T(e$.$$.fragment,ai),zGr=i(ai),Zc=n(ai,"P",{});var ite=s(Zc);QGr=r(ite,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),ZZ=n(ite,"A",{href:!0});var pNt=s(ZZ);WGr=r(pNt,"from_pretrained()"),pNt.forEach(t),HGr=r(ite," class method or the "),eee=n(ite,"A",{href:!0});var _Nt=s(eee);UGr=r(_Nt,"from_config()"),_Nt.forEach(t),JGr=r(ite,` class
method.`),ite.forEach(t),YGr=i(ai),o$=n(ai,"P",{});var lQe=s(o$);KGr=r(lQe,"This class cannot be instantiated directly using "),mCe=n(lQe,"CODE",{});var uNt=s(mCe);ZGr=r(uNt,"__init__()"),uNt.forEach(t),eOr=r(lQe," (throws an error)."),lQe.forEach(t),oOr=i(ai),Wt=n(ai,"DIV",{class:!0});var g7=s(Wt);T(r$.$$.fragment,g7),rOr=i(g7),gCe=n(g7,"P",{});var bNt=s(gCe);tOr=r(bNt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),bNt.forEach(t),aOr=i(g7),ef=n(g7,"P",{});var dte=s(ef);nOr=r(dte,`Note:
Loading a model from its configuration file does `),hCe=n(dte,"STRONG",{});var vNt=s(hCe);sOr=r(vNt,"not"),vNt.forEach(t),lOr=r(dte,` load the model weights. It only affects the
model\u2019s configuration. Use `),oee=n(dte,"A",{href:!0});var FNt=s(oee);iOr=r(FNt,"from_pretrained()"),FNt.forEach(t),dOr=r(dte," to load the model weights."),dte.forEach(t),cOr=i(g7),T(R0.$$.fragment,g7),g7.forEach(t),fOr=i(ai),zr=n(ai,"DIV",{class:!0});var ni=s(zr);T(t$.$$.fragment,ni),mOr=i(ni),pCe=n(ni,"P",{});var TNt=s(pCe);gOr=r(TNt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),TNt.forEach(t),hOr=i(ni),En=n(ni,"P",{});var h7=s(En);pOr=r(h7,"The model class to instantiate is selected based on the "),_Ce=n(h7,"CODE",{});var MNt=s(_Ce);_Or=r(MNt,"model_type"),MNt.forEach(t),uOr=r(h7,` property of the config object (either
passed as an argument or loaded from `),uCe=n(h7,"CODE",{});var ENt=s(uCe);bOr=r(ENt,"pretrained_model_name_or_path"),ENt.forEach(t),vOr=r(h7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bCe=n(h7,"CODE",{});var CNt=s(bCe);FOr=r(CNt,"pretrained_model_name_or_path"),CNt.forEach(t),TOr=r(h7,":"),h7.forEach(t),MOr=i(ni),$e=n(ni,"UL",{});var qe=s($e);P0=n(qe,"LI",{});var aGe=s(P0);vCe=n(aGe,"STRONG",{});var wNt=s(vCe);EOr=r(wNt,"albert"),wNt.forEach(t),COr=r(aGe," \u2014 "),ree=n(aGe,"A",{href:!0});var ANt=s(ree);wOr=r(ANt,"FlaxAlbertForMaskedLM"),ANt.forEach(t),AOr=r(aGe," (ALBERT model)"),aGe.forEach(t),LOr=i(qe),B0=n(qe,"LI",{});var nGe=s(B0);FCe=n(nGe,"STRONG",{});var LNt=s(FCe);yOr=r(LNt,"bart"),LNt.forEach(t),xOr=r(nGe," \u2014 "),tee=n(nGe,"A",{href:!0});var yNt=s(tee);$Or=r(yNt,"FlaxBartForConditionalGeneration"),yNt.forEach(t),kOr=r(nGe," (BART model)"),nGe.forEach(t),SOr=i(qe),I0=n(qe,"LI",{});var sGe=s(I0);TCe=n(sGe,"STRONG",{});var xNt=s(TCe);ROr=r(xNt,"bert"),xNt.forEach(t),POr=r(sGe," \u2014 "),aee=n(sGe,"A",{href:!0});var $Nt=s(aee);BOr=r($Nt,"FlaxBertForMaskedLM"),$Nt.forEach(t),IOr=r(sGe," (BERT model)"),sGe.forEach(t),NOr=i(qe),N0=n(qe,"LI",{});var lGe=s(N0);MCe=n(lGe,"STRONG",{});var kNt=s(MCe);qOr=r(kNt,"big_bird"),kNt.forEach(t),jOr=r(lGe," \u2014 "),nee=n(lGe,"A",{href:!0});var SNt=s(nee);DOr=r(SNt,"FlaxBigBirdForMaskedLM"),SNt.forEach(t),GOr=r(lGe," (BigBird model)"),lGe.forEach(t),OOr=i(qe),q0=n(qe,"LI",{});var iGe=s(q0);ECe=n(iGe,"STRONG",{});var RNt=s(ECe);VOr=r(RNt,"distilbert"),RNt.forEach(t),XOr=r(iGe," \u2014 "),see=n(iGe,"A",{href:!0});var PNt=s(see);zOr=r(PNt,"FlaxDistilBertForMaskedLM"),PNt.forEach(t),QOr=r(iGe," (DistilBERT model)"),iGe.forEach(t),WOr=i(qe),j0=n(qe,"LI",{});var dGe=s(j0);CCe=n(dGe,"STRONG",{});var BNt=s(CCe);HOr=r(BNt,"electra"),BNt.forEach(t),UOr=r(dGe," \u2014 "),lee=n(dGe,"A",{href:!0});var INt=s(lee);JOr=r(INt,"FlaxElectraForMaskedLM"),INt.forEach(t),YOr=r(dGe," (ELECTRA model)"),dGe.forEach(t),KOr=i(qe),D0=n(qe,"LI",{});var cGe=s(D0);wCe=n(cGe,"STRONG",{});var NNt=s(wCe);ZOr=r(NNt,"mbart"),NNt.forEach(t),eVr=r(cGe," \u2014 "),iee=n(cGe,"A",{href:!0});var qNt=s(iee);oVr=r(qNt,"FlaxMBartForConditionalGeneration"),qNt.forEach(t),rVr=r(cGe," (mBART model)"),cGe.forEach(t),tVr=i(qe),G0=n(qe,"LI",{});var fGe=s(G0);ACe=n(fGe,"STRONG",{});var jNt=s(ACe);aVr=r(jNt,"roberta"),jNt.forEach(t),nVr=r(fGe," \u2014 "),dee=n(fGe,"A",{href:!0});var DNt=s(dee);sVr=r(DNt,"FlaxRobertaForMaskedLM"),DNt.forEach(t),lVr=r(fGe," (RoBERTa model)"),fGe.forEach(t),iVr=i(qe),O0=n(qe,"LI",{});var mGe=s(O0);LCe=n(mGe,"STRONG",{});var GNt=s(LCe);dVr=r(GNt,"roformer"),GNt.forEach(t),cVr=r(mGe," \u2014 "),cee=n(mGe,"A",{href:!0});var ONt=s(cee);fVr=r(ONt,"FlaxRoFormerForMaskedLM"),ONt.forEach(t),mVr=r(mGe," (RoFormer model)"),mGe.forEach(t),gVr=i(qe),V0=n(qe,"LI",{});var gGe=s(V0);yCe=n(gGe,"STRONG",{});var VNt=s(yCe);hVr=r(VNt,"xlm-roberta"),VNt.forEach(t),pVr=r(gGe," \u2014 "),fee=n(gGe,"A",{href:!0});var XNt=s(fee);_Vr=r(XNt,"FlaxXLMRobertaForMaskedLM"),XNt.forEach(t),uVr=r(gGe," (XLM-RoBERTa model)"),gGe.forEach(t),qe.forEach(t),bVr=i(ni),T(X0.$$.fragment,ni),ni.forEach(t),ai.forEach(t),ZVe=i(f),of=n(f,"H2",{class:!0});var iQe=s(of);z0=n(iQe,"A",{id:!0,class:!0,href:!0});var zNt=s(z0);xCe=n(zNt,"SPAN",{});var QNt=s(xCe);T(a$.$$.fragment,QNt),QNt.forEach(t),zNt.forEach(t),vVr=i(iQe),$Ce=n(iQe,"SPAN",{});var WNt=s($Ce);FVr=r(WNt,"FlaxAutoModelForSeq2SeqLM"),WNt.forEach(t),iQe.forEach(t),eXe=i(f),br=n(f,"DIV",{class:!0});var si=s(br);T(n$.$$.fragment,si),TVr=i(si),rf=n(si,"P",{});var cte=s(rf);MVr=r(cte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),mee=n(cte,"A",{href:!0});var HNt=s(mee);EVr=r(HNt,"from_pretrained()"),HNt.forEach(t),CVr=r(cte," class method or the "),gee=n(cte,"A",{href:!0});var UNt=s(gee);wVr=r(UNt,"from_config()"),UNt.forEach(t),AVr=r(cte,` class
method.`),cte.forEach(t),LVr=i(si),s$=n(si,"P",{});var dQe=s(s$);yVr=r(dQe,"This class cannot be instantiated directly using "),kCe=n(dQe,"CODE",{});var JNt=s(kCe);xVr=r(JNt,"__init__()"),JNt.forEach(t),$Vr=r(dQe," (throws an error)."),dQe.forEach(t),kVr=i(si),Ht=n(si,"DIV",{class:!0});var p7=s(Ht);T(l$.$$.fragment,p7),SVr=i(p7),SCe=n(p7,"P",{});var YNt=s(SCe);RVr=r(YNt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),YNt.forEach(t),PVr=i(p7),tf=n(p7,"P",{});var fte=s(tf);BVr=r(fte,`Note:
Loading a model from its configuration file does `),RCe=n(fte,"STRONG",{});var KNt=s(RCe);IVr=r(KNt,"not"),KNt.forEach(t),NVr=r(fte,` load the model weights. It only affects the
model\u2019s configuration. Use `),hee=n(fte,"A",{href:!0});var ZNt=s(hee);qVr=r(ZNt,"from_pretrained()"),ZNt.forEach(t),jVr=r(fte," to load the model weights."),fte.forEach(t),DVr=i(p7),T(Q0.$$.fragment,p7),p7.forEach(t),GVr=i(si),Qr=n(si,"DIV",{class:!0});var li=s(Qr);T(i$.$$.fragment,li),OVr=i(li),PCe=n(li,"P",{});var eqt=s(PCe);VVr=r(eqt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),eqt.forEach(t),XVr=i(li),Cn=n(li,"P",{});var _7=s(Cn);zVr=r(_7,"The model class to instantiate is selected based on the "),BCe=n(_7,"CODE",{});var oqt=s(BCe);QVr=r(oqt,"model_type"),oqt.forEach(t),WVr=r(_7,` property of the config object (either
passed as an argument or loaded from `),ICe=n(_7,"CODE",{});var rqt=s(ICe);HVr=r(rqt,"pretrained_model_name_or_path"),rqt.forEach(t),UVr=r(_7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NCe=n(_7,"CODE",{});var tqt=s(NCe);JVr=r(tqt,"pretrained_model_name_or_path"),tqt.forEach(t),YVr=r(_7,":"),_7.forEach(t),KVr=i(li),ke=n(li,"UL",{});var je=s(ke);W0=n(je,"LI",{});var hGe=s(W0);qCe=n(hGe,"STRONG",{});var aqt=s(qCe);ZVr=r(aqt,"bart"),aqt.forEach(t),eXr=r(hGe," \u2014 "),pee=n(hGe,"A",{href:!0});var nqt=s(pee);oXr=r(nqt,"FlaxBartForConditionalGeneration"),nqt.forEach(t),rXr=r(hGe," (BART model)"),hGe.forEach(t),tXr=i(je),H0=n(je,"LI",{});var pGe=s(H0);jCe=n(pGe,"STRONG",{});var sqt=s(jCe);aXr=r(sqt,"blenderbot"),sqt.forEach(t),nXr=r(pGe," \u2014 "),_ee=n(pGe,"A",{href:!0});var lqt=s(_ee);sXr=r(lqt,"FlaxBlenderbotForConditionalGeneration"),lqt.forEach(t),lXr=r(pGe," (Blenderbot model)"),pGe.forEach(t),iXr=i(je),U0=n(je,"LI",{});var _Ge=s(U0);DCe=n(_Ge,"STRONG",{});var iqt=s(DCe);dXr=r(iqt,"blenderbot-small"),iqt.forEach(t),cXr=r(_Ge," \u2014 "),uee=n(_Ge,"A",{href:!0});var dqt=s(uee);fXr=r(dqt,"FlaxBlenderbotSmallForConditionalGeneration"),dqt.forEach(t),mXr=r(_Ge," (BlenderbotSmall model)"),_Ge.forEach(t),gXr=i(je),J0=n(je,"LI",{});var uGe=s(J0);GCe=n(uGe,"STRONG",{});var cqt=s(GCe);hXr=r(cqt,"encoder-decoder"),cqt.forEach(t),pXr=r(uGe," \u2014 "),bee=n(uGe,"A",{href:!0});var fqt=s(bee);_Xr=r(fqt,"FlaxEncoderDecoderModel"),fqt.forEach(t),uXr=r(uGe," (Encoder decoder model)"),uGe.forEach(t),bXr=i(je),Y0=n(je,"LI",{});var bGe=s(Y0);OCe=n(bGe,"STRONG",{});var mqt=s(OCe);vXr=r(mqt,"longt5"),mqt.forEach(t),FXr=r(bGe," \u2014 "),vee=n(bGe,"A",{href:!0});var gqt=s(vee);TXr=r(gqt,"FlaxLongT5ForConditionalGeneration"),gqt.forEach(t),MXr=r(bGe," (LongT5 model)"),bGe.forEach(t),EXr=i(je),K0=n(je,"LI",{});var vGe=s(K0);VCe=n(vGe,"STRONG",{});var hqt=s(VCe);CXr=r(hqt,"marian"),hqt.forEach(t),wXr=r(vGe," \u2014 "),Fee=n(vGe,"A",{href:!0});var pqt=s(Fee);AXr=r(pqt,"FlaxMarianMTModel"),pqt.forEach(t),LXr=r(vGe," (Marian model)"),vGe.forEach(t),yXr=i(je),Z0=n(je,"LI",{});var FGe=s(Z0);XCe=n(FGe,"STRONG",{});var _qt=s(XCe);xXr=r(_qt,"mbart"),_qt.forEach(t),$Xr=r(FGe," \u2014 "),Tee=n(FGe,"A",{href:!0});var uqt=s(Tee);kXr=r(uqt,"FlaxMBartForConditionalGeneration"),uqt.forEach(t),SXr=r(FGe," (mBART model)"),FGe.forEach(t),RXr=i(je),ew=n(je,"LI",{});var TGe=s(ew);zCe=n(TGe,"STRONG",{});var bqt=s(zCe);PXr=r(bqt,"mt5"),bqt.forEach(t),BXr=r(TGe," \u2014 "),Mee=n(TGe,"A",{href:!0});var vqt=s(Mee);IXr=r(vqt,"FlaxMT5ForConditionalGeneration"),vqt.forEach(t),NXr=r(TGe," (MT5 model)"),TGe.forEach(t),qXr=i(je),ow=n(je,"LI",{});var MGe=s(ow);QCe=n(MGe,"STRONG",{});var Fqt=s(QCe);jXr=r(Fqt,"pegasus"),Fqt.forEach(t),DXr=r(MGe," \u2014 "),Eee=n(MGe,"A",{href:!0});var Tqt=s(Eee);GXr=r(Tqt,"FlaxPegasusForConditionalGeneration"),Tqt.forEach(t),OXr=r(MGe," (Pegasus model)"),MGe.forEach(t),VXr=i(je),rw=n(je,"LI",{});var EGe=s(rw);WCe=n(EGe,"STRONG",{});var Mqt=s(WCe);XXr=r(Mqt,"t5"),Mqt.forEach(t),zXr=r(EGe," \u2014 "),Cee=n(EGe,"A",{href:!0});var Eqt=s(Cee);QXr=r(Eqt,"FlaxT5ForConditionalGeneration"),Eqt.forEach(t),WXr=r(EGe," (T5 model)"),EGe.forEach(t),je.forEach(t),HXr=i(li),T(tw.$$.fragment,li),li.forEach(t),si.forEach(t),oXe=i(f),af=n(f,"H2",{class:!0});var cQe=s(af);aw=n(cQe,"A",{id:!0,class:!0,href:!0});var Cqt=s(aw);HCe=n(Cqt,"SPAN",{});var wqt=s(HCe);T(d$.$$.fragment,wqt),wqt.forEach(t),Cqt.forEach(t),UXr=i(cQe),UCe=n(cQe,"SPAN",{});var Aqt=s(UCe);JXr=r(Aqt,"FlaxAutoModelForSequenceClassification"),Aqt.forEach(t),cQe.forEach(t),rXe=i(f),vr=n(f,"DIV",{class:!0});var ii=s(vr);T(c$.$$.fragment,ii),YXr=i(ii),nf=n(ii,"P",{});var mte=s(nf);KXr=r(mte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),wee=n(mte,"A",{href:!0});var Lqt=s(wee);ZXr=r(Lqt,"from_pretrained()"),Lqt.forEach(t),ezr=r(mte," class method or the "),Aee=n(mte,"A",{href:!0});var yqt=s(Aee);ozr=r(yqt,"from_config()"),yqt.forEach(t),rzr=r(mte,` class
method.`),mte.forEach(t),tzr=i(ii),f$=n(ii,"P",{});var fQe=s(f$);azr=r(fQe,"This class cannot be instantiated directly using "),JCe=n(fQe,"CODE",{});var xqt=s(JCe);nzr=r(xqt,"__init__()"),xqt.forEach(t),szr=r(fQe," (throws an error)."),fQe.forEach(t),lzr=i(ii),Ut=n(ii,"DIV",{class:!0});var u7=s(Ut);T(m$.$$.fragment,u7),izr=i(u7),YCe=n(u7,"P",{});var $qt=s(YCe);dzr=r($qt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),$qt.forEach(t),czr=i(u7),sf=n(u7,"P",{});var gte=s(sf);fzr=r(gte,`Note:
Loading a model from its configuration file does `),KCe=n(gte,"STRONG",{});var kqt=s(KCe);mzr=r(kqt,"not"),kqt.forEach(t),gzr=r(gte,` load the model weights. It only affects the
model\u2019s configuration. Use `),Lee=n(gte,"A",{href:!0});var Sqt=s(Lee);hzr=r(Sqt,"from_pretrained()"),Sqt.forEach(t),pzr=r(gte," to load the model weights."),gte.forEach(t),_zr=i(u7),T(nw.$$.fragment,u7),u7.forEach(t),uzr=i(ii),Wr=n(ii,"DIV",{class:!0});var di=s(Wr);T(g$.$$.fragment,di),bzr=i(di),ZCe=n(di,"P",{});var Rqt=s(ZCe);vzr=r(Rqt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Rqt.forEach(t),Fzr=i(di),wn=n(di,"P",{});var b7=s(wn);Tzr=r(b7,"The model class to instantiate is selected based on the "),e0e=n(b7,"CODE",{});var Pqt=s(e0e);Mzr=r(Pqt,"model_type"),Pqt.forEach(t),Ezr=r(b7,` property of the config object (either
passed as an argument or loaded from `),o0e=n(b7,"CODE",{});var Bqt=s(o0e);Czr=r(Bqt,"pretrained_model_name_or_path"),Bqt.forEach(t),wzr=r(b7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r0e=n(b7,"CODE",{});var Iqt=s(r0e);Azr=r(Iqt,"pretrained_model_name_or_path"),Iqt.forEach(t),Lzr=r(b7,":"),b7.forEach(t),yzr=i(di),Se=n(di,"UL",{});var De=s(Se);sw=n(De,"LI",{});var CGe=s(sw);t0e=n(CGe,"STRONG",{});var Nqt=s(t0e);xzr=r(Nqt,"albert"),Nqt.forEach(t),$zr=r(CGe," \u2014 "),yee=n(CGe,"A",{href:!0});var qqt=s(yee);kzr=r(qqt,"FlaxAlbertForSequenceClassification"),qqt.forEach(t),Szr=r(CGe," (ALBERT model)"),CGe.forEach(t),Rzr=i(De),lw=n(De,"LI",{});var wGe=s(lw);a0e=n(wGe,"STRONG",{});var jqt=s(a0e);Pzr=r(jqt,"bart"),jqt.forEach(t),Bzr=r(wGe," \u2014 "),xee=n(wGe,"A",{href:!0});var Dqt=s(xee);Izr=r(Dqt,"FlaxBartForSequenceClassification"),Dqt.forEach(t),Nzr=r(wGe," (BART model)"),wGe.forEach(t),qzr=i(De),iw=n(De,"LI",{});var AGe=s(iw);n0e=n(AGe,"STRONG",{});var Gqt=s(n0e);jzr=r(Gqt,"bert"),Gqt.forEach(t),Dzr=r(AGe," \u2014 "),$ee=n(AGe,"A",{href:!0});var Oqt=s($ee);Gzr=r(Oqt,"FlaxBertForSequenceClassification"),Oqt.forEach(t),Ozr=r(AGe," (BERT model)"),AGe.forEach(t),Vzr=i(De),dw=n(De,"LI",{});var LGe=s(dw);s0e=n(LGe,"STRONG",{});var Vqt=s(s0e);Xzr=r(Vqt,"big_bird"),Vqt.forEach(t),zzr=r(LGe," \u2014 "),kee=n(LGe,"A",{href:!0});var Xqt=s(kee);Qzr=r(Xqt,"FlaxBigBirdForSequenceClassification"),Xqt.forEach(t),Wzr=r(LGe," (BigBird model)"),LGe.forEach(t),Hzr=i(De),cw=n(De,"LI",{});var yGe=s(cw);l0e=n(yGe,"STRONG",{});var zqt=s(l0e);Uzr=r(zqt,"distilbert"),zqt.forEach(t),Jzr=r(yGe," \u2014 "),See=n(yGe,"A",{href:!0});var Qqt=s(See);Yzr=r(Qqt,"FlaxDistilBertForSequenceClassification"),Qqt.forEach(t),Kzr=r(yGe," (DistilBERT model)"),yGe.forEach(t),Zzr=i(De),fw=n(De,"LI",{});var xGe=s(fw);i0e=n(xGe,"STRONG",{});var Wqt=s(i0e);eQr=r(Wqt,"electra"),Wqt.forEach(t),oQr=r(xGe," \u2014 "),Ree=n(xGe,"A",{href:!0});var Hqt=s(Ree);rQr=r(Hqt,"FlaxElectraForSequenceClassification"),Hqt.forEach(t),tQr=r(xGe," (ELECTRA model)"),xGe.forEach(t),aQr=i(De),mw=n(De,"LI",{});var $Ge=s(mw);d0e=n($Ge,"STRONG",{});var Uqt=s(d0e);nQr=r(Uqt,"mbart"),Uqt.forEach(t),sQr=r($Ge," \u2014 "),Pee=n($Ge,"A",{href:!0});var Jqt=s(Pee);lQr=r(Jqt,"FlaxMBartForSequenceClassification"),Jqt.forEach(t),iQr=r($Ge," (mBART model)"),$Ge.forEach(t),dQr=i(De),gw=n(De,"LI",{});var kGe=s(gw);c0e=n(kGe,"STRONG",{});var Yqt=s(c0e);cQr=r(Yqt,"roberta"),Yqt.forEach(t),fQr=r(kGe," \u2014 "),Bee=n(kGe,"A",{href:!0});var Kqt=s(Bee);mQr=r(Kqt,"FlaxRobertaForSequenceClassification"),Kqt.forEach(t),gQr=r(kGe," (RoBERTa model)"),kGe.forEach(t),hQr=i(De),hw=n(De,"LI",{});var SGe=s(hw);f0e=n(SGe,"STRONG",{});var Zqt=s(f0e);pQr=r(Zqt,"roformer"),Zqt.forEach(t),_Qr=r(SGe," \u2014 "),Iee=n(SGe,"A",{href:!0});var ejt=s(Iee);uQr=r(ejt,"FlaxRoFormerForSequenceClassification"),ejt.forEach(t),bQr=r(SGe," (RoFormer model)"),SGe.forEach(t),vQr=i(De),pw=n(De,"LI",{});var RGe=s(pw);m0e=n(RGe,"STRONG",{});var ojt=s(m0e);FQr=r(ojt,"xlm-roberta"),ojt.forEach(t),TQr=r(RGe," \u2014 "),Nee=n(RGe,"A",{href:!0});var rjt=s(Nee);MQr=r(rjt,"FlaxXLMRobertaForSequenceClassification"),rjt.forEach(t),EQr=r(RGe," (XLM-RoBERTa model)"),RGe.forEach(t),De.forEach(t),CQr=i(di),T(_w.$$.fragment,di),di.forEach(t),ii.forEach(t),tXe=i(f),lf=n(f,"H2",{class:!0});var mQe=s(lf);uw=n(mQe,"A",{id:!0,class:!0,href:!0});var tjt=s(uw);g0e=n(tjt,"SPAN",{});var ajt=s(g0e);T(h$.$$.fragment,ajt),ajt.forEach(t),tjt.forEach(t),wQr=i(mQe),h0e=n(mQe,"SPAN",{});var njt=s(h0e);AQr=r(njt,"FlaxAutoModelForQuestionAnswering"),njt.forEach(t),mQe.forEach(t),aXe=i(f),Fr=n(f,"DIV",{class:!0});var ci=s(Fr);T(p$.$$.fragment,ci),LQr=i(ci),df=n(ci,"P",{});var hte=s(df);yQr=r(hte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),qee=n(hte,"A",{href:!0});var sjt=s(qee);xQr=r(sjt,"from_pretrained()"),sjt.forEach(t),$Qr=r(hte," class method or the "),jee=n(hte,"A",{href:!0});var ljt=s(jee);kQr=r(ljt,"from_config()"),ljt.forEach(t),SQr=r(hte,` class
method.`),hte.forEach(t),RQr=i(ci),_$=n(ci,"P",{});var gQe=s(_$);PQr=r(gQe,"This class cannot be instantiated directly using "),p0e=n(gQe,"CODE",{});var ijt=s(p0e);BQr=r(ijt,"__init__()"),ijt.forEach(t),IQr=r(gQe," (throws an error)."),gQe.forEach(t),NQr=i(ci),Jt=n(ci,"DIV",{class:!0});var v7=s(Jt);T(u$.$$.fragment,v7),qQr=i(v7),_0e=n(v7,"P",{});var djt=s(_0e);jQr=r(djt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),djt.forEach(t),DQr=i(v7),cf=n(v7,"P",{});var pte=s(cf);GQr=r(pte,`Note:
Loading a model from its configuration file does `),u0e=n(pte,"STRONG",{});var cjt=s(u0e);OQr=r(cjt,"not"),cjt.forEach(t),VQr=r(pte,` load the model weights. It only affects the
model\u2019s configuration. Use `),Dee=n(pte,"A",{href:!0});var fjt=s(Dee);XQr=r(fjt,"from_pretrained()"),fjt.forEach(t),zQr=r(pte," to load the model weights."),pte.forEach(t),QQr=i(v7),T(bw.$$.fragment,v7),v7.forEach(t),WQr=i(ci),Hr=n(ci,"DIV",{class:!0});var fi=s(Hr);T(b$.$$.fragment,fi),HQr=i(fi),b0e=n(fi,"P",{});var mjt=s(b0e);UQr=r(mjt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),mjt.forEach(t),JQr=i(fi),An=n(fi,"P",{});var F7=s(An);YQr=r(F7,"The model class to instantiate is selected based on the "),v0e=n(F7,"CODE",{});var gjt=s(v0e);KQr=r(gjt,"model_type"),gjt.forEach(t),ZQr=r(F7,` property of the config object (either
passed as an argument or loaded from `),F0e=n(F7,"CODE",{});var hjt=s(F0e);eWr=r(hjt,"pretrained_model_name_or_path"),hjt.forEach(t),oWr=r(F7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T0e=n(F7,"CODE",{});var pjt=s(T0e);rWr=r(pjt,"pretrained_model_name_or_path"),pjt.forEach(t),tWr=r(F7,":"),F7.forEach(t),aWr=i(fi),Re=n(fi,"UL",{});var Ge=s(Re);vw=n(Ge,"LI",{});var PGe=s(vw);M0e=n(PGe,"STRONG",{});var _jt=s(M0e);nWr=r(_jt,"albert"),_jt.forEach(t),sWr=r(PGe," \u2014 "),Gee=n(PGe,"A",{href:!0});var ujt=s(Gee);lWr=r(ujt,"FlaxAlbertForQuestionAnswering"),ujt.forEach(t),iWr=r(PGe," (ALBERT model)"),PGe.forEach(t),dWr=i(Ge),Fw=n(Ge,"LI",{});var BGe=s(Fw);E0e=n(BGe,"STRONG",{});var bjt=s(E0e);cWr=r(bjt,"bart"),bjt.forEach(t),fWr=r(BGe," \u2014 "),Oee=n(BGe,"A",{href:!0});var vjt=s(Oee);mWr=r(vjt,"FlaxBartForQuestionAnswering"),vjt.forEach(t),gWr=r(BGe," (BART model)"),BGe.forEach(t),hWr=i(Ge),Tw=n(Ge,"LI",{});var IGe=s(Tw);C0e=n(IGe,"STRONG",{});var Fjt=s(C0e);pWr=r(Fjt,"bert"),Fjt.forEach(t),_Wr=r(IGe," \u2014 "),Vee=n(IGe,"A",{href:!0});var Tjt=s(Vee);uWr=r(Tjt,"FlaxBertForQuestionAnswering"),Tjt.forEach(t),bWr=r(IGe," (BERT model)"),IGe.forEach(t),vWr=i(Ge),Mw=n(Ge,"LI",{});var NGe=s(Mw);w0e=n(NGe,"STRONG",{});var Mjt=s(w0e);FWr=r(Mjt,"big_bird"),Mjt.forEach(t),TWr=r(NGe," \u2014 "),Xee=n(NGe,"A",{href:!0});var Ejt=s(Xee);MWr=r(Ejt,"FlaxBigBirdForQuestionAnswering"),Ejt.forEach(t),EWr=r(NGe," (BigBird model)"),NGe.forEach(t),CWr=i(Ge),Ew=n(Ge,"LI",{});var qGe=s(Ew);A0e=n(qGe,"STRONG",{});var Cjt=s(A0e);wWr=r(Cjt,"distilbert"),Cjt.forEach(t),AWr=r(qGe," \u2014 "),zee=n(qGe,"A",{href:!0});var wjt=s(zee);LWr=r(wjt,"FlaxDistilBertForQuestionAnswering"),wjt.forEach(t),yWr=r(qGe," (DistilBERT model)"),qGe.forEach(t),xWr=i(Ge),Cw=n(Ge,"LI",{});var jGe=s(Cw);L0e=n(jGe,"STRONG",{});var Ajt=s(L0e);$Wr=r(Ajt,"electra"),Ajt.forEach(t),kWr=r(jGe," \u2014 "),Qee=n(jGe,"A",{href:!0});var Ljt=s(Qee);SWr=r(Ljt,"FlaxElectraForQuestionAnswering"),Ljt.forEach(t),RWr=r(jGe," (ELECTRA model)"),jGe.forEach(t),PWr=i(Ge),ww=n(Ge,"LI",{});var DGe=s(ww);y0e=n(DGe,"STRONG",{});var yjt=s(y0e);BWr=r(yjt,"mbart"),yjt.forEach(t),IWr=r(DGe," \u2014 "),Wee=n(DGe,"A",{href:!0});var xjt=s(Wee);NWr=r(xjt,"FlaxMBartForQuestionAnswering"),xjt.forEach(t),qWr=r(DGe," (mBART model)"),DGe.forEach(t),jWr=i(Ge),Aw=n(Ge,"LI",{});var GGe=s(Aw);x0e=n(GGe,"STRONG",{});var $jt=s(x0e);DWr=r($jt,"roberta"),$jt.forEach(t),GWr=r(GGe," \u2014 "),Hee=n(GGe,"A",{href:!0});var kjt=s(Hee);OWr=r(kjt,"FlaxRobertaForQuestionAnswering"),kjt.forEach(t),VWr=r(GGe," (RoBERTa model)"),GGe.forEach(t),XWr=i(Ge),Lw=n(Ge,"LI",{});var OGe=s(Lw);$0e=n(OGe,"STRONG",{});var Sjt=s($0e);zWr=r(Sjt,"roformer"),Sjt.forEach(t),QWr=r(OGe," \u2014 "),Uee=n(OGe,"A",{href:!0});var Rjt=s(Uee);WWr=r(Rjt,"FlaxRoFormerForQuestionAnswering"),Rjt.forEach(t),HWr=r(OGe," (RoFormer model)"),OGe.forEach(t),UWr=i(Ge),yw=n(Ge,"LI",{});var VGe=s(yw);k0e=n(VGe,"STRONG",{});var Pjt=s(k0e);JWr=r(Pjt,"xlm-roberta"),Pjt.forEach(t),YWr=r(VGe," \u2014 "),Jee=n(VGe,"A",{href:!0});var Bjt=s(Jee);KWr=r(Bjt,"FlaxXLMRobertaForQuestionAnswering"),Bjt.forEach(t),ZWr=r(VGe," (XLM-RoBERTa model)"),VGe.forEach(t),Ge.forEach(t),eHr=i(fi),T(xw.$$.fragment,fi),fi.forEach(t),ci.forEach(t),nXe=i(f),ff=n(f,"H2",{class:!0});var hQe=s(ff);$w=n(hQe,"A",{id:!0,class:!0,href:!0});var Ijt=s($w);S0e=n(Ijt,"SPAN",{});var Njt=s(S0e);T(v$.$$.fragment,Njt),Njt.forEach(t),Ijt.forEach(t),oHr=i(hQe),R0e=n(hQe,"SPAN",{});var qjt=s(R0e);rHr=r(qjt,"FlaxAutoModelForTokenClassification"),qjt.forEach(t),hQe.forEach(t),sXe=i(f),Tr=n(f,"DIV",{class:!0});var mi=s(Tr);T(F$.$$.fragment,mi),tHr=i(mi),mf=n(mi,"P",{});var _te=s(mf);aHr=r(_te,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Yee=n(_te,"A",{href:!0});var jjt=s(Yee);nHr=r(jjt,"from_pretrained()"),jjt.forEach(t),sHr=r(_te," class method or the "),Kee=n(_te,"A",{href:!0});var Djt=s(Kee);lHr=r(Djt,"from_config()"),Djt.forEach(t),iHr=r(_te,` class
method.`),_te.forEach(t),dHr=i(mi),T$=n(mi,"P",{});var pQe=s(T$);cHr=r(pQe,"This class cannot be instantiated directly using "),P0e=n(pQe,"CODE",{});var Gjt=s(P0e);fHr=r(Gjt,"__init__()"),Gjt.forEach(t),mHr=r(pQe," (throws an error)."),pQe.forEach(t),gHr=i(mi),Yt=n(mi,"DIV",{class:!0});var T7=s(Yt);T(M$.$$.fragment,T7),hHr=i(T7),B0e=n(T7,"P",{});var Ojt=s(B0e);pHr=r(Ojt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Ojt.forEach(t),_Hr=i(T7),gf=n(T7,"P",{});var ute=s(gf);uHr=r(ute,`Note:
Loading a model from its configuration file does `),I0e=n(ute,"STRONG",{});var Vjt=s(I0e);bHr=r(Vjt,"not"),Vjt.forEach(t),vHr=r(ute,` load the model weights. It only affects the
model\u2019s configuration. Use `),Zee=n(ute,"A",{href:!0});var Xjt=s(Zee);FHr=r(Xjt,"from_pretrained()"),Xjt.forEach(t),THr=r(ute," to load the model weights."),ute.forEach(t),MHr=i(T7),T(kw.$$.fragment,T7),T7.forEach(t),EHr=i(mi),Ur=n(mi,"DIV",{class:!0});var gi=s(Ur);T(E$.$$.fragment,gi),CHr=i(gi),N0e=n(gi,"P",{});var zjt=s(N0e);wHr=r(zjt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),zjt.forEach(t),AHr=i(gi),Ln=n(gi,"P",{});var M7=s(Ln);LHr=r(M7,"The model class to instantiate is selected based on the "),q0e=n(M7,"CODE",{});var Qjt=s(q0e);yHr=r(Qjt,"model_type"),Qjt.forEach(t),xHr=r(M7,` property of the config object (either
passed as an argument or loaded from `),j0e=n(M7,"CODE",{});var Wjt=s(j0e);$Hr=r(Wjt,"pretrained_model_name_or_path"),Wjt.forEach(t),kHr=r(M7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D0e=n(M7,"CODE",{});var Hjt=s(D0e);SHr=r(Hjt,"pretrained_model_name_or_path"),Hjt.forEach(t),RHr=r(M7,":"),M7.forEach(t),PHr=i(gi),Ve=n(gi,"UL",{});var To=s(Ve);Sw=n(To,"LI",{});var XGe=s(Sw);G0e=n(XGe,"STRONG",{});var Ujt=s(G0e);BHr=r(Ujt,"albert"),Ujt.forEach(t),IHr=r(XGe," \u2014 "),eoe=n(XGe,"A",{href:!0});var Jjt=s(eoe);NHr=r(Jjt,"FlaxAlbertForTokenClassification"),Jjt.forEach(t),qHr=r(XGe," (ALBERT model)"),XGe.forEach(t),jHr=i(To),Rw=n(To,"LI",{});var zGe=s(Rw);O0e=n(zGe,"STRONG",{});var Yjt=s(O0e);DHr=r(Yjt,"bert"),Yjt.forEach(t),GHr=r(zGe," \u2014 "),ooe=n(zGe,"A",{href:!0});var Kjt=s(ooe);OHr=r(Kjt,"FlaxBertForTokenClassification"),Kjt.forEach(t),VHr=r(zGe," (BERT model)"),zGe.forEach(t),XHr=i(To),Pw=n(To,"LI",{});var QGe=s(Pw);V0e=n(QGe,"STRONG",{});var Zjt=s(V0e);zHr=r(Zjt,"big_bird"),Zjt.forEach(t),QHr=r(QGe," \u2014 "),roe=n(QGe,"A",{href:!0});var eDt=s(roe);WHr=r(eDt,"FlaxBigBirdForTokenClassification"),eDt.forEach(t),HHr=r(QGe," (BigBird model)"),QGe.forEach(t),UHr=i(To),Bw=n(To,"LI",{});var WGe=s(Bw);X0e=n(WGe,"STRONG",{});var oDt=s(X0e);JHr=r(oDt,"distilbert"),oDt.forEach(t),YHr=r(WGe," \u2014 "),toe=n(WGe,"A",{href:!0});var rDt=s(toe);KHr=r(rDt,"FlaxDistilBertForTokenClassification"),rDt.forEach(t),ZHr=r(WGe," (DistilBERT model)"),WGe.forEach(t),eUr=i(To),Iw=n(To,"LI",{});var HGe=s(Iw);z0e=n(HGe,"STRONG",{});var tDt=s(z0e);oUr=r(tDt,"electra"),tDt.forEach(t),rUr=r(HGe," \u2014 "),aoe=n(HGe,"A",{href:!0});var aDt=s(aoe);tUr=r(aDt,"FlaxElectraForTokenClassification"),aDt.forEach(t),aUr=r(HGe," (ELECTRA model)"),HGe.forEach(t),nUr=i(To),Nw=n(To,"LI",{});var UGe=s(Nw);Q0e=n(UGe,"STRONG",{});var nDt=s(Q0e);sUr=r(nDt,"roberta"),nDt.forEach(t),lUr=r(UGe," \u2014 "),noe=n(UGe,"A",{href:!0});var sDt=s(noe);iUr=r(sDt,"FlaxRobertaForTokenClassification"),sDt.forEach(t),dUr=r(UGe," (RoBERTa model)"),UGe.forEach(t),cUr=i(To),qw=n(To,"LI",{});var JGe=s(qw);W0e=n(JGe,"STRONG",{});var lDt=s(W0e);fUr=r(lDt,"roformer"),lDt.forEach(t),mUr=r(JGe," \u2014 "),soe=n(JGe,"A",{href:!0});var iDt=s(soe);gUr=r(iDt,"FlaxRoFormerForTokenClassification"),iDt.forEach(t),hUr=r(JGe," (RoFormer model)"),JGe.forEach(t),pUr=i(To),jw=n(To,"LI",{});var YGe=s(jw);H0e=n(YGe,"STRONG",{});var dDt=s(H0e);_Ur=r(dDt,"xlm-roberta"),dDt.forEach(t),uUr=r(YGe," \u2014 "),loe=n(YGe,"A",{href:!0});var cDt=s(loe);bUr=r(cDt,"FlaxXLMRobertaForTokenClassification"),cDt.forEach(t),vUr=r(YGe," (XLM-RoBERTa model)"),YGe.forEach(t),To.forEach(t),FUr=i(gi),T(Dw.$$.fragment,gi),gi.forEach(t),mi.forEach(t),lXe=i(f),hf=n(f,"H2",{class:!0});var _Qe=s(hf);Gw=n(_Qe,"A",{id:!0,class:!0,href:!0});var fDt=s(Gw);U0e=n(fDt,"SPAN",{});var mDt=s(U0e);T(C$.$$.fragment,mDt),mDt.forEach(t),fDt.forEach(t),TUr=i(_Qe),J0e=n(_Qe,"SPAN",{});var gDt=s(J0e);MUr=r(gDt,"FlaxAutoModelForMultipleChoice"),gDt.forEach(t),_Qe.forEach(t),iXe=i(f),Mr=n(f,"DIV",{class:!0});var hi=s(Mr);T(w$.$$.fragment,hi),EUr=i(hi),pf=n(hi,"P",{});var bte=s(pf);CUr=r(bte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),ioe=n(bte,"A",{href:!0});var hDt=s(ioe);wUr=r(hDt,"from_pretrained()"),hDt.forEach(t),AUr=r(bte," class method or the "),doe=n(bte,"A",{href:!0});var pDt=s(doe);LUr=r(pDt,"from_config()"),pDt.forEach(t),yUr=r(bte,` class
method.`),bte.forEach(t),xUr=i(hi),A$=n(hi,"P",{});var uQe=s(A$);$Ur=r(uQe,"This class cannot be instantiated directly using "),Y0e=n(uQe,"CODE",{});var _Dt=s(Y0e);kUr=r(_Dt,"__init__()"),_Dt.forEach(t),SUr=r(uQe," (throws an error)."),uQe.forEach(t),RUr=i(hi),Kt=n(hi,"DIV",{class:!0});var E7=s(Kt);T(L$.$$.fragment,E7),PUr=i(E7),K0e=n(E7,"P",{});var uDt=s(K0e);BUr=r(uDt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),uDt.forEach(t),IUr=i(E7),_f=n(E7,"P",{});var vte=s(_f);NUr=r(vte,`Note:
Loading a model from its configuration file does `),Z0e=n(vte,"STRONG",{});var bDt=s(Z0e);qUr=r(bDt,"not"),bDt.forEach(t),jUr=r(vte,` load the model weights. It only affects the
model\u2019s configuration. Use `),coe=n(vte,"A",{href:!0});var vDt=s(coe);DUr=r(vDt,"from_pretrained()"),vDt.forEach(t),GUr=r(vte," to load the model weights."),vte.forEach(t),OUr=i(E7),T(Ow.$$.fragment,E7),E7.forEach(t),VUr=i(hi),Jr=n(hi,"DIV",{class:!0});var pi=s(Jr);T(y$.$$.fragment,pi),XUr=i(pi),ewe=n(pi,"P",{});var FDt=s(ewe);zUr=r(FDt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),FDt.forEach(t),QUr=i(pi),yn=n(pi,"P",{});var C7=s(yn);WUr=r(C7,"The model class to instantiate is selected based on the "),owe=n(C7,"CODE",{});var TDt=s(owe);HUr=r(TDt,"model_type"),TDt.forEach(t),UUr=r(C7,` property of the config object (either
passed as an argument or loaded from `),rwe=n(C7,"CODE",{});var MDt=s(rwe);JUr=r(MDt,"pretrained_model_name_or_path"),MDt.forEach(t),YUr=r(C7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),twe=n(C7,"CODE",{});var EDt=s(twe);KUr=r(EDt,"pretrained_model_name_or_path"),EDt.forEach(t),ZUr=r(C7,":"),C7.forEach(t),eJr=i(pi),Xe=n(pi,"UL",{});var Mo=s(Xe);Vw=n(Mo,"LI",{});var KGe=s(Vw);awe=n(KGe,"STRONG",{});var CDt=s(awe);oJr=r(CDt,"albert"),CDt.forEach(t),rJr=r(KGe," \u2014 "),foe=n(KGe,"A",{href:!0});var wDt=s(foe);tJr=r(wDt,"FlaxAlbertForMultipleChoice"),wDt.forEach(t),aJr=r(KGe," (ALBERT model)"),KGe.forEach(t),nJr=i(Mo),Xw=n(Mo,"LI",{});var ZGe=s(Xw);nwe=n(ZGe,"STRONG",{});var ADt=s(nwe);sJr=r(ADt,"bert"),ADt.forEach(t),lJr=r(ZGe," \u2014 "),moe=n(ZGe,"A",{href:!0});var LDt=s(moe);iJr=r(LDt,"FlaxBertForMultipleChoice"),LDt.forEach(t),dJr=r(ZGe," (BERT model)"),ZGe.forEach(t),cJr=i(Mo),zw=n(Mo,"LI",{});var eOe=s(zw);swe=n(eOe,"STRONG",{});var yDt=s(swe);fJr=r(yDt,"big_bird"),yDt.forEach(t),mJr=r(eOe," \u2014 "),goe=n(eOe,"A",{href:!0});var xDt=s(goe);gJr=r(xDt,"FlaxBigBirdForMultipleChoice"),xDt.forEach(t),hJr=r(eOe," (BigBird model)"),eOe.forEach(t),pJr=i(Mo),Qw=n(Mo,"LI",{});var oOe=s(Qw);lwe=n(oOe,"STRONG",{});var $Dt=s(lwe);_Jr=r($Dt,"distilbert"),$Dt.forEach(t),uJr=r(oOe," \u2014 "),hoe=n(oOe,"A",{href:!0});var kDt=s(hoe);bJr=r(kDt,"FlaxDistilBertForMultipleChoice"),kDt.forEach(t),vJr=r(oOe," (DistilBERT model)"),oOe.forEach(t),FJr=i(Mo),Ww=n(Mo,"LI",{});var rOe=s(Ww);iwe=n(rOe,"STRONG",{});var SDt=s(iwe);TJr=r(SDt,"electra"),SDt.forEach(t),MJr=r(rOe," \u2014 "),poe=n(rOe,"A",{href:!0});var RDt=s(poe);EJr=r(RDt,"FlaxElectraForMultipleChoice"),RDt.forEach(t),CJr=r(rOe," (ELECTRA model)"),rOe.forEach(t),wJr=i(Mo),Hw=n(Mo,"LI",{});var tOe=s(Hw);dwe=n(tOe,"STRONG",{});var PDt=s(dwe);AJr=r(PDt,"roberta"),PDt.forEach(t),LJr=r(tOe," \u2014 "),_oe=n(tOe,"A",{href:!0});var BDt=s(_oe);yJr=r(BDt,"FlaxRobertaForMultipleChoice"),BDt.forEach(t),xJr=r(tOe," (RoBERTa model)"),tOe.forEach(t),$Jr=i(Mo),Uw=n(Mo,"LI",{});var aOe=s(Uw);cwe=n(aOe,"STRONG",{});var IDt=s(cwe);kJr=r(IDt,"roformer"),IDt.forEach(t),SJr=r(aOe," \u2014 "),uoe=n(aOe,"A",{href:!0});var NDt=s(uoe);RJr=r(NDt,"FlaxRoFormerForMultipleChoice"),NDt.forEach(t),PJr=r(aOe," (RoFormer model)"),aOe.forEach(t),BJr=i(Mo),Jw=n(Mo,"LI",{});var nOe=s(Jw);fwe=n(nOe,"STRONG",{});var qDt=s(fwe);IJr=r(qDt,"xlm-roberta"),qDt.forEach(t),NJr=r(nOe," \u2014 "),boe=n(nOe,"A",{href:!0});var jDt=s(boe);qJr=r(jDt,"FlaxXLMRobertaForMultipleChoice"),jDt.forEach(t),jJr=r(nOe," (XLM-RoBERTa model)"),nOe.forEach(t),Mo.forEach(t),DJr=i(pi),T(Yw.$$.fragment,pi),pi.forEach(t),hi.forEach(t),dXe=i(f),uf=n(f,"H2",{class:!0});var bQe=s(uf);Kw=n(bQe,"A",{id:!0,class:!0,href:!0});var DDt=s(Kw);mwe=n(DDt,"SPAN",{});var GDt=s(mwe);T(x$.$$.fragment,GDt),GDt.forEach(t),DDt.forEach(t),GJr=i(bQe),gwe=n(bQe,"SPAN",{});var ODt=s(gwe);OJr=r(ODt,"FlaxAutoModelForNextSentencePrediction"),ODt.forEach(t),bQe.forEach(t),cXe=i(f),Er=n(f,"DIV",{class:!0});var _i=s(Er);T($$.$$.fragment,_i),VJr=i(_i),bf=n(_i,"P",{});var Fte=s(bf);XJr=r(Fte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),voe=n(Fte,"A",{href:!0});var VDt=s(voe);zJr=r(VDt,"from_pretrained()"),VDt.forEach(t),QJr=r(Fte," class method or the "),Foe=n(Fte,"A",{href:!0});var XDt=s(Foe);WJr=r(XDt,"from_config()"),XDt.forEach(t),HJr=r(Fte,` class
method.`),Fte.forEach(t),UJr=i(_i),k$=n(_i,"P",{});var vQe=s(k$);JJr=r(vQe,"This class cannot be instantiated directly using "),hwe=n(vQe,"CODE",{});var zDt=s(hwe);YJr=r(zDt,"__init__()"),zDt.forEach(t),KJr=r(vQe," (throws an error)."),vQe.forEach(t),ZJr=i(_i),Zt=n(_i,"DIV",{class:!0});var w7=s(Zt);T(S$.$$.fragment,w7),eYr=i(w7),pwe=n(w7,"P",{});var QDt=s(pwe);oYr=r(QDt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),QDt.forEach(t),rYr=i(w7),vf=n(w7,"P",{});var Tte=s(vf);tYr=r(Tte,`Note:
Loading a model from its configuration file does `),_we=n(Tte,"STRONG",{});var WDt=s(_we);aYr=r(WDt,"not"),WDt.forEach(t),nYr=r(Tte,` load the model weights. It only affects the
model\u2019s configuration. Use `),Toe=n(Tte,"A",{href:!0});var HDt=s(Toe);sYr=r(HDt,"from_pretrained()"),HDt.forEach(t),lYr=r(Tte," to load the model weights."),Tte.forEach(t),iYr=i(w7),T(Zw.$$.fragment,w7),w7.forEach(t),dYr=i(_i),Yr=n(_i,"DIV",{class:!0});var ui=s(Yr);T(R$.$$.fragment,ui),cYr=i(ui),uwe=n(ui,"P",{});var UDt=s(uwe);fYr=r(UDt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),UDt.forEach(t),mYr=i(ui),xn=n(ui,"P",{});var A7=s(xn);gYr=r(A7,"The model class to instantiate is selected based on the "),bwe=n(A7,"CODE",{});var JDt=s(bwe);hYr=r(JDt,"model_type"),JDt.forEach(t),pYr=r(A7,` property of the config object (either
passed as an argument or loaded from `),vwe=n(A7,"CODE",{});var YDt=s(vwe);_Yr=r(YDt,"pretrained_model_name_or_path"),YDt.forEach(t),uYr=r(A7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fwe=n(A7,"CODE",{});var KDt=s(Fwe);bYr=r(KDt,"pretrained_model_name_or_path"),KDt.forEach(t),vYr=r(A7,":"),A7.forEach(t),FYr=i(ui),Twe=n(ui,"UL",{});var ZDt=s(Twe);eA=n(ZDt,"LI",{});var sOe=s(eA);Mwe=n(sOe,"STRONG",{});var eGt=s(Mwe);TYr=r(eGt,"bert"),eGt.forEach(t),MYr=r(sOe," \u2014 "),Moe=n(sOe,"A",{href:!0});var oGt=s(Moe);EYr=r(oGt,"FlaxBertForNextSentencePrediction"),oGt.forEach(t),CYr=r(sOe," (BERT model)"),sOe.forEach(t),ZDt.forEach(t),wYr=i(ui),T(oA.$$.fragment,ui),ui.forEach(t),_i.forEach(t),fXe=i(f),Ff=n(f,"H2",{class:!0});var FQe=s(Ff);rA=n(FQe,"A",{id:!0,class:!0,href:!0});var rGt=s(rA);Ewe=n(rGt,"SPAN",{});var tGt=s(Ewe);T(P$.$$.fragment,tGt),tGt.forEach(t),rGt.forEach(t),AYr=i(FQe),Cwe=n(FQe,"SPAN",{});var aGt=s(Cwe);LYr=r(aGt,"FlaxAutoModelForImageClassification"),aGt.forEach(t),FQe.forEach(t),mXe=i(f),Cr=n(f,"DIV",{class:!0});var bi=s(Cr);T(B$.$$.fragment,bi),yYr=i(bi),Tf=n(bi,"P",{});var Mte=s(Tf);xYr=r(Mte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Eoe=n(Mte,"A",{href:!0});var nGt=s(Eoe);$Yr=r(nGt,"from_pretrained()"),nGt.forEach(t),kYr=r(Mte," class method or the "),Coe=n(Mte,"A",{href:!0});var sGt=s(Coe);SYr=r(sGt,"from_config()"),sGt.forEach(t),RYr=r(Mte,` class
method.`),Mte.forEach(t),PYr=i(bi),I$=n(bi,"P",{});var TQe=s(I$);BYr=r(TQe,"This class cannot be instantiated directly using "),wwe=n(TQe,"CODE",{});var lGt=s(wwe);IYr=r(lGt,"__init__()"),lGt.forEach(t),NYr=r(TQe," (throws an error)."),TQe.forEach(t),qYr=i(bi),ea=n(bi,"DIV",{class:!0});var L7=s(ea);T(N$.$$.fragment,L7),jYr=i(L7),Awe=n(L7,"P",{});var iGt=s(Awe);DYr=r(iGt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),iGt.forEach(t),GYr=i(L7),Mf=n(L7,"P",{});var Ete=s(Mf);OYr=r(Ete,`Note:
Loading a model from its configuration file does `),Lwe=n(Ete,"STRONG",{});var dGt=s(Lwe);VYr=r(dGt,"not"),dGt.forEach(t),XYr=r(Ete,` load the model weights. It only affects the
model\u2019s configuration. Use `),woe=n(Ete,"A",{href:!0});var cGt=s(woe);zYr=r(cGt,"from_pretrained()"),cGt.forEach(t),QYr=r(Ete," to load the model weights."),Ete.forEach(t),WYr=i(L7),T(tA.$$.fragment,L7),L7.forEach(t),HYr=i(bi),Kr=n(bi,"DIV",{class:!0});var vi=s(Kr);T(q$.$$.fragment,vi),UYr=i(vi),ywe=n(vi,"P",{});var fGt=s(ywe);JYr=r(fGt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),fGt.forEach(t),YYr=i(vi),$n=n(vi,"P",{});var y7=s($n);KYr=r(y7,"The model class to instantiate is selected based on the "),xwe=n(y7,"CODE",{});var mGt=s(xwe);ZYr=r(mGt,"model_type"),mGt.forEach(t),eKr=r(y7,` property of the config object (either
passed as an argument or loaded from `),$we=n(y7,"CODE",{});var gGt=s($we);oKr=r(gGt,"pretrained_model_name_or_path"),gGt.forEach(t),rKr=r(y7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kwe=n(y7,"CODE",{});var hGt=s(kwe);tKr=r(hGt,"pretrained_model_name_or_path"),hGt.forEach(t),aKr=r(y7,":"),y7.forEach(t),nKr=i(vi),j$=n(vi,"UL",{});var MQe=s(j$);aA=n(MQe,"LI",{});var lOe=s(aA);Swe=n(lOe,"STRONG",{});var pGt=s(Swe);sKr=r(pGt,"beit"),pGt.forEach(t),lKr=r(lOe," \u2014 "),Aoe=n(lOe,"A",{href:!0});var _Gt=s(Aoe);iKr=r(_Gt,"FlaxBeitForImageClassification"),_Gt.forEach(t),dKr=r(lOe," (BEiT model)"),lOe.forEach(t),cKr=i(MQe),nA=n(MQe,"LI",{});var iOe=s(nA);Rwe=n(iOe,"STRONG",{});var uGt=s(Rwe);fKr=r(uGt,"vit"),uGt.forEach(t),mKr=r(iOe," \u2014 "),Loe=n(iOe,"A",{href:!0});var bGt=s(Loe);gKr=r(bGt,"FlaxViTForImageClassification"),bGt.forEach(t),hKr=r(iOe," (ViT model)"),iOe.forEach(t),MQe.forEach(t),pKr=i(vi),T(sA.$$.fragment,vi),vi.forEach(t),bi.forEach(t),gXe=i(f),Ef=n(f,"H2",{class:!0});var EQe=s(Ef);lA=n(EQe,"A",{id:!0,class:!0,href:!0});var vGt=s(lA);Pwe=n(vGt,"SPAN",{});var FGt=s(Pwe);T(D$.$$.fragment,FGt),FGt.forEach(t),vGt.forEach(t),_Kr=i(EQe),Bwe=n(EQe,"SPAN",{});var TGt=s(Bwe);uKr=r(TGt,"FlaxAutoModelForVision2Seq"),TGt.forEach(t),EQe.forEach(t),hXe=i(f),wr=n(f,"DIV",{class:!0});var Fi=s(wr);T(G$.$$.fragment,Fi),bKr=i(Fi),Cf=n(Fi,"P",{});var Cte=s(Cf);vKr=r(Cte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),yoe=n(Cte,"A",{href:!0});var MGt=s(yoe);FKr=r(MGt,"from_pretrained()"),MGt.forEach(t),TKr=r(Cte," class method or the "),xoe=n(Cte,"A",{href:!0});var EGt=s(xoe);MKr=r(EGt,"from_config()"),EGt.forEach(t),EKr=r(Cte,` class
method.`),Cte.forEach(t),CKr=i(Fi),O$=n(Fi,"P",{});var CQe=s(O$);wKr=r(CQe,"This class cannot be instantiated directly using "),Iwe=n(CQe,"CODE",{});var CGt=s(Iwe);AKr=r(CGt,"__init__()"),CGt.forEach(t),LKr=r(CQe," (throws an error)."),CQe.forEach(t),yKr=i(Fi),oa=n(Fi,"DIV",{class:!0});var x7=s(oa);T(V$.$$.fragment,x7),xKr=i(x7),Nwe=n(x7,"P",{});var wGt=s(Nwe);$Kr=r(wGt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),wGt.forEach(t),kKr=i(x7),wf=n(x7,"P",{});var wte=s(wf);SKr=r(wte,`Note:
Loading a model from its configuration file does `),qwe=n(wte,"STRONG",{});var AGt=s(qwe);RKr=r(AGt,"not"),AGt.forEach(t),PKr=r(wte,` load the model weights. It only affects the
model\u2019s configuration. Use `),$oe=n(wte,"A",{href:!0});var LGt=s($oe);BKr=r(LGt,"from_pretrained()"),LGt.forEach(t),IKr=r(wte," to load the model weights."),wte.forEach(t),NKr=i(x7),T(iA.$$.fragment,x7),x7.forEach(t),qKr=i(Fi),Zr=n(Fi,"DIV",{class:!0});var Ti=s(Zr);T(X$.$$.fragment,Ti),jKr=i(Ti),jwe=n(Ti,"P",{});var yGt=s(jwe);DKr=r(yGt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),yGt.forEach(t),GKr=i(Ti),kn=n(Ti,"P",{});var $7=s(kn);OKr=r($7,"The model class to instantiate is selected based on the "),Dwe=n($7,"CODE",{});var xGt=s(Dwe);VKr=r(xGt,"model_type"),xGt.forEach(t),XKr=r($7,` property of the config object (either
passed as an argument or loaded from `),Gwe=n($7,"CODE",{});var $Gt=s(Gwe);zKr=r($Gt,"pretrained_model_name_or_path"),$Gt.forEach(t),QKr=r($7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Owe=n($7,"CODE",{});var kGt=s(Owe);WKr=r(kGt,"pretrained_model_name_or_path"),kGt.forEach(t),HKr=r($7,":"),$7.forEach(t),UKr=i(Ti),Vwe=n(Ti,"UL",{});var SGt=s(Vwe);dA=n(SGt,"LI",{});var dOe=s(dA);Xwe=n(dOe,"STRONG",{});var RGt=s(Xwe);JKr=r(RGt,"vision-encoder-decoder"),RGt.forEach(t),YKr=r(dOe," \u2014 "),koe=n(dOe,"A",{href:!0});var PGt=s(koe);KKr=r(PGt,"FlaxVisionEncoderDecoderModel"),PGt.forEach(t),ZKr=r(dOe," (Vision Encoder decoder model)"),dOe.forEach(t),SGt.forEach(t),eZr=i(Ti),T(cA.$$.fragment,Ti),Ti.forEach(t),Fi.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(DVt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(Rn,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.AutoConfig"),c(Bn,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.AutoModel"),c(In,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.AutoTokenizer"),c(yi,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertModel"),c(Rf,"id","extending-the-auto-classes"),c(Rf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Rf,"href","#extending-the-auto-classes"),c(xi,"class","relative group"),c(Bf,"id","transformers.AutoConfig"),c(Bf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Bf,"href","#transformers.AutoConfig"),c($i,"class","relative group"),c(pS,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(_S,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig"),c(uS,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig"),c(bS,"href","/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitConfig"),c(vS,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig"),c(FS,"href","/docs/transformers/pr_16543/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(TS,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig"),c(MS,"href","/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(ES,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(CS,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(wS,"href","/docs/transformers/pr_16543/en/model_doc/bloom#transformers.BloomConfig"),c(AS,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig"),c(LS,"href","/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineConfig"),c(yS,"href","/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPConfig"),c(xS,"href","/docs/transformers/pr_16543/en/model_doc/codegen#transformers.CodeGenConfig"),c($S,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig"),c(kS,"href","/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextConfig"),c(SS,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLConfig"),c(RS,"href","/docs/transformers/pr_16543/en/model_doc/cvt#transformers.CvtConfig"),c(PS,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(BS,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(IS,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(NS,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig"),c(qS,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(jS,"href","/docs/transformers/pr_16543/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(DS,"href","/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTConfig"),c(GS,"href","/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrConfig"),c(OS,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig"),c(VS,"href","/docs/transformers/pr_16543/en/model_doc/dpr#transformers.DPRConfig"),c(XS,"href","/docs/transformers/pr_16543/en/model_doc/dpt#transformers.DPTConfig"),c(zS,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig"),c(QS,"href","/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(WS,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig"),c(HS,"href","/docs/transformers/pr_16543/en/model_doc/flava#transformers.FlavaConfig"),c(US,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetConfig"),c(JS,"href","/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTConfig"),c(YS,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig"),c(KS,"href","/docs/transformers/pr_16543/en/model_doc/glpn#transformers.GLPNConfig"),c(ZS,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config"),c(eR,"href","/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(oR,"href","/docs/transformers/pr_16543/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(rR,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig"),c(tR,"href","/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertConfig"),c(aR,"href","/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertConfig"),c(nR,"href","/docs/transformers/pr_16543/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(sR,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(lR,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(iR,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(dR,"href","/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDConfig"),c(cR,"href","/docs/transformers/pr_16543/en/model_doc/levit#transformers.LevitConfig"),c(fR,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig"),c(mR,"href","/docs/transformers/pr_16543/en/model_doc/longt5#transformers.LongT5Config"),c(gR,"href","/docs/transformers/pr_16543/en/model_doc/luke#transformers.LukeConfig"),c(hR,"href","/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertConfig"),c(pR,"href","/docs/transformers/pr_16543/en/model_doc/m2m_100#transformers.M2M100Config"),c(_R,"href","/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianConfig"),c(uR,"href","/docs/transformers/pr_16543/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(bR,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig"),c(vR,"href","/docs/transformers/pr_16543/en/model_doc/mctct#transformers.MCTCTConfig"),c(FR,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(TR,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(MR,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig"),c(ER,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Config"),c(CR,"href","/docs/transformers/pr_16543/en/model_doc/nezha#transformers.NezhaConfig"),c(wR,"href","/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(AR,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(LR,"href","/docs/transformers/pr_16543/en/model_doc/opt#transformers.OPTConfig"),c(yR,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusConfig"),c(xR,"href","/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverConfig"),c($R,"href","/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartConfig"),c(kR,"href","/docs/transformers/pr_16543/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(SR,"href","/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(RR,"href","/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(PR,"href","/docs/transformers/pr_16543/en/model_doc/rag#transformers.RagConfig"),c(BR,"href","/docs/transformers/pr_16543/en/model_doc/realm#transformers.RealmConfig"),c(IR,"href","/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerConfig"),c(NR,"href","/docs/transformers/pr_16543/en/model_doc/regnet#transformers.RegNetConfig"),c(qR,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig"),c(jR,"href","/docs/transformers/pr_16543/en/model_doc/resnet#transformers.ResNetConfig"),c(DR,"href","/docs/transformers/pr_16543/en/model_doc/retribert#transformers.RetriBertConfig"),c(GR,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig"),c(OR,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig"),c(VR,"href","/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerConfig"),c(XR,"href","/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWConfig"),c(zR,"href","/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDConfig"),c(QR,"href","/docs/transformers/pr_16543/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(WR,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(HR,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(UR,"href","/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterConfig"),c(JR,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(YR,"href","/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinConfig"),c(KR,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config"),c(ZR,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig"),c(eP,"href","/docs/transformers/pr_16543/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(oP,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(rP,"href","/docs/transformers/pr_16543/en/model_doc/trocr#transformers.TrOCRConfig"),c(tP,"href","/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(aP,"href","/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(nP,"href","/docs/transformers/pr_16543/en/model_doc/van#transformers.VanConfig"),c(sP,"href","/docs/transformers/pr_16543/en/model_doc/vilt#transformers.ViltConfig"),c(lP,"href","/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(iP,"href","/docs/transformers/pr_16543/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(dP,"href","/docs/transformers/pr_16543/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(cP,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTConfig"),c(fP,"href","/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(mP,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(gP,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(hP,"href","/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMConfig"),c(pP,"href","/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMConfig"),c(_P,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig"),c(uP,"href","/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(bP,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(vP,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(FP,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig"),c(TP,"href","/docs/transformers/pr_16543/en/model_doc/yolos#transformers.YolosConfig"),c(MP,"href","/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoConfig"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zg,"id","transformers.AutoTokenizer"),c(zg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zg,"href","#transformers.AutoTokenizer"),c(Si,"class","relative group"),c(EP,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(CP,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertTokenizer"),c(wP,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(AP,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartTokenizer"),c(LP,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartTokenizerFast"),c(yP,"href","/docs/transformers/pr_16543/en/model_doc/barthez#transformers.BarthezTokenizer"),c(xP,"href","/docs/transformers/pr_16543/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c($P,"href","/docs/transformers/pr_16543/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(kP,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertTokenizer"),c(SP,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertTokenizerFast"),c(RP,"href","/docs/transformers/pr_16543/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(PP,"href","/docs/transformers/pr_16543/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(BP,"href","/docs/transformers/pr_16543/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(IP,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(NP,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(qP,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(jP,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(DP,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(GP,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(OP,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(VP,"href","/docs/transformers/pr_16543/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(XP,"href","/docs/transformers/pr_16543/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(zP,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertTokenizer"),c(QP,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(WP,"href","/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineTokenizer"),c(HP,"href","/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPTokenizer"),c(UP,"href","/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(JP,"href","/docs/transformers/pr_16543/en/model_doc/codegen#transformers.CodeGenTokenizer"),c(YP,"href","/docs/transformers/pr_16543/en/model_doc/codegen#transformers.CodeGenTokenizerFast"),c(KP,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(ZP,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(eB,"href","/docs/transformers/pr_16543/en/model_doc/cpm#transformers.CpmTokenizer"),c(oB,"href","/docs/transformers/pr_16543/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(rB,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(tB,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaTokenizer"),c(aB,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(nB,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaTokenizer"),c(sB,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(lB,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(iB,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(dB,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(cB,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(fB,"href","/docs/transformers/pr_16543/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(mB,"href","/docs/transformers/pr_16543/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(gB,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraTokenizer"),c(hB,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(pB,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(_B,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetTokenizer"),c(uB,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(bB,"href","/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(vB,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelTokenizer"),c(FB,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(TB,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(MB,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(EB,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(CB,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(wB,"href","/docs/transformers/pr_16543/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(AB,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(LB,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(yB,"href","/docs/transformers/pr_16543/en/model_doc/herbert#transformers.HerbertTokenizer"),c(xB,"href","/docs/transformers/pr_16543/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c($B,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(kB,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaTokenizer"),c(SB,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(RB,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(PB,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(BB,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(IB,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(NB,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(qB,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(jB,"href","/docs/transformers/pr_16543/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(DB,"href","/docs/transformers/pr_16543/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(GB,"href","/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDTokenizer"),c(OB,"href","/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDTokenizerFast"),c(VB,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerTokenizer"),c(XB,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(zB,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Tokenizer"),c(QB,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5TokenizerFast"),c(WB,"href","/docs/transformers/pr_16543/en/model_doc/luke#transformers.LukeTokenizer"),c(HB,"href","/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(UB,"href","/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(JB,"href","/docs/transformers/pr_16543/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(YB,"href","/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianTokenizer"),c(KB,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartTokenizer"),c(ZB,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(eI,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(oI,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(rI,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertTokenizer"),c(tI,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertTokenizerFast"),c(aI,"href","/docs/transformers/pr_16543/en/model_doc/mluke#transformers.MLukeTokenizer"),c(nI,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(sI,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(lI,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(iI,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(dI,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Tokenizer"),c(cI,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5TokenizerFast"),c(fI,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertTokenizer"),c(mI,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertTokenizerFast"),c(gI,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertTokenizer"),c(hI,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(pI,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(_I,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(uI,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(bI,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(vI,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(FI,"href","/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(TI,"href","/docs/transformers/pr_16543/en/model_doc/phobert#transformers.PhobertTokenizer"),c(MI,"href","/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartTokenizer"),c(EI,"href","/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(CI,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertTokenizer"),c(wI,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertTokenizerFast"),c(AI,"href","/docs/transformers/pr_16543/en/model_doc/rag#transformers.RagTokenizer"),c(LI,"href","/docs/transformers/pr_16543/en/model_doc/realm#transformers.RealmTokenizer"),c(yI,"href","/docs/transformers/pr_16543/en/model_doc/realm#transformers.RealmTokenizerFast"),c(xI,"href","/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerTokenizer"),c($I,"href","/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(kI,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertTokenizer"),c(SI,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(RI,"href","/docs/transformers/pr_16543/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(PI,"href","/docs/transformers/pr_16543/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(BI,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaTokenizer"),c(II,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(NI,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(qI,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(jI,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(DI,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(GI,"href","/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterTokenizer"),c(OI,"href","/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(VI,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(XI,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(zI,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Tokenizer"),c(QI,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5TokenizerFast"),c(WI,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasTokenizer"),c(HI,"href","/docs/transformers/pr_16543/en/model_doc/tapex#transformers.TapexTokenizer"),c(UI,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(JI,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertTokenizer"),c(YI,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertTokenizerFast"),c(KI,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertTokenizer"),c(ZI,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertTokenizerFast"),c(eN,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(oN,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(rN,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(tN,"href","/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMTokenizer"),c(aN,"href","/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(nN,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMTokenizer"),c(sN,"href","/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(lN,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(iN,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(dN,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaTokenizer"),c(cN,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(fN,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(mN,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(gN,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertTokenizer"),c(hN,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ah,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lh,"id","transformers.AutoFeatureExtractor"),c(Lh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Lh,"href","#transformers.AutoFeatureExtractor"),c(Ri,"class","relative group"),c(pN,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(_N,"href","/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(uN,"href","/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(bN,"href","/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(vN,"href","/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(FN,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(TN,"href","/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(MN,"href","/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(EN,"href","/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(CN,"href","/docs/transformers/pr_16543/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(wN,"href","/docs/transformers/pr_16543/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(AN,"href","/docs/transformers/pr_16543/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(LN,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(yN,"href","/docs/transformers/pr_16543/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(xN,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c($N,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(kN,"href","/docs/transformers/pr_16543/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(SN,"href","/docs/transformers/pr_16543/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(RN,"href","/docs/transformers/pr_16543/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(PN,"href","/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(BN,"href","/docs/transformers/pr_16543/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(IN,"href","/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(NN,"href","/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(qN,"href","/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(jN,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(DN,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(GN,"href","/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(ON,"href","/docs/transformers/pr_16543/en/model_doc/vilt#transformers.ViltFeatureExtractor"),c(VN,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(XN,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(zN,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(QN,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(WN,"href","/docs/transformers/pr_16543/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ip,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dp,"id","transformers.AutoProcessor"),c(dp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dp,"href","#transformers.AutoProcessor"),c(Pi,"class","relative group"),c(HN,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(UN,"href","/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPProcessor"),c(JN,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(YN,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(KN,"href","/docs/transformers/pr_16543/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(ZN,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(eq,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(oq,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(rq,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(tq,"href","/docs/transformers/pr_16543/en/model_doc/trocr#transformers.TrOCRProcessor"),c(aq,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(nq,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(sq,"href","/docs/transformers/pr_16543/en/model_doc/vilt#transformers.ViltProcessor"),c(lq,"href","/docs/transformers/pr_16543/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(iq,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(dq,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(cq,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($p,"id","transformers.AutoModel"),c($p,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($p,"href","#transformers.AutoModel"),c(Ii,"class","relative group"),c(fq,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mq,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gq,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hq,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertModel"),c(pq,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartModel"),c(_q,"href","/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitModel"),c(uq,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertModel"),c(bq,"href","/docs/transformers/pr_16543/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(vq,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdModel"),c(Fq,"href","/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(Tq,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(Mq,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(Eq,"href","/docs/transformers/pr_16543/en/model_doc/bloom#transformers.BloomModel"),c(Cq,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertModel"),c(wq,"href","/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineModel"),c(Aq,"href","/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPModel"),c(Lq,"href","/docs/transformers/pr_16543/en/model_doc/codegen#transformers.CodeGenModel"),c(yq,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertModel"),c(xq,"href","/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextModel"),c($q,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLModel"),c(kq,"href","/docs/transformers/pr_16543/en/model_doc/cvt#transformers.CvtModel"),c(Sq,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(Rq,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(Pq,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(Bq,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaModel"),c(Iq,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(Nq,"href","/docs/transformers/pr_16543/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(qq,"href","/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTModel"),c(jq,"href","/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrModel"),c(Dq,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertModel"),c(Gq,"href","/docs/transformers/pr_16543/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(Oq,"href","/docs/transformers/pr_16543/en/model_doc/dpt#transformers.DPTModel"),c(Vq,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraModel"),c(Xq,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertModel"),c(zq,"href","/docs/transformers/pr_16543/en/model_doc/flava#transformers.FlavaModel"),c(Qq,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetModel"),c(Wq,"href","/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTModel"),c(Hq,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelModel"),c(Uq,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelBaseModel"),c(Jq,"href","/docs/transformers/pr_16543/en/model_doc/glpn#transformers.GLPNModel"),c(Yq,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Model"),c(Kq,"href","/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(Zq,"href","/docs/transformers/pr_16543/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(ej,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJModel"),c(oj,"href","/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertModel"),c(rj,"href","/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertModel"),c(tj,"href","/docs/transformers/pr_16543/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(aj,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(nj,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(sj,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(lj,"href","/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDModel"),c(ij,"href","/docs/transformers/pr_16543/en/model_doc/levit#transformers.LevitModel"),c(dj,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerModel"),c(cj,"href","/docs/transformers/pr_16543/en/model_doc/longt5#transformers.LongT5Model"),c(fj,"href","/docs/transformers/pr_16543/en/model_doc/luke#transformers.LukeModel"),c(mj,"href","/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertModel"),c(gj,"href","/docs/transformers/pr_16543/en/model_doc/m2m_100#transformers.M2M100Model"),c(hj,"href","/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianModel"),c(pj,"href","/docs/transformers/pr_16543/en/model_doc/maskformer#transformers.MaskFormerModel"),c(_j,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartModel"),c(uj,"href","/docs/transformers/pr_16543/en/model_doc/mctct#transformers.MCTCTModel"),c(bj,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(vj,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertModel"),c(Fj,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetModel"),c(Tj,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Model"),c(Mj,"href","/docs/transformers/pr_16543/en/model_doc/nezha#transformers.NezhaModel"),c(Ej,"href","/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerModel"),c(Cj,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(wj,"href","/docs/transformers/pr_16543/en/model_doc/opt#transformers.OPTModel"),c(Aj,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusModel"),c(Lj,"href","/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverModel"),c(yj,"href","/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartModel"),c(xj,"href","/docs/transformers/pr_16543/en/model_doc/poolformer#transformers.PoolFormerModel"),c($j,"href","/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(kj,"href","/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertModel"),c(Sj,"href","/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerModel"),c(Rj,"href","/docs/transformers/pr_16543/en/model_doc/regnet#transformers.RegNetModel"),c(Pj,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertModel"),c(Bj,"href","/docs/transformers/pr_16543/en/model_doc/resnet#transformers.ResNetModel"),c(Ij,"href","/docs/transformers/pr_16543/en/model_doc/retribert#transformers.RetriBertModel"),c(Nj,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaModel"),c(qj,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerModel"),c(jj,"href","/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerModel"),c(Dj,"href","/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWModel"),c(Gj,"href","/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDModel"),c(Oj,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(Vj,"href","/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterModel"),c(Xj,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(zj,"href","/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinModel"),c(Qj,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Model"),c(Wj,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasModel"),c(Hj,"href","/docs/transformers/pr_16543/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(Uj,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(Jj,"href","/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechModel"),c(Yj,"href","/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(Kj,"href","/docs/transformers/pr_16543/en/model_doc/van#transformers.VanModel"),c(Zj,"href","/docs/transformers/pr_16543/en/model_doc/vilt#transformers.ViltModel"),c(eD,"href","/docs/transformers/pr_16543/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(oD,"href","/docs/transformers/pr_16543/en/model_doc/visual_bert#transformers.VisualBertModel"),c(rD,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTModel"),c(tD,"href","/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(aD,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(nD,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(sD,"href","/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMModel"),c(lD,"href","/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMModel"),c(iD,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMModel"),c(dD,"href","/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(cD,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(fD,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(mD,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetModel"),c(gD,"href","/docs/transformers/pr_16543/en/model_doc/yolos#transformers.YolosModel"),c(hD,"href","/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ru,"id","transformers.AutoModelForPreTraining"),c(Ru,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ru,"href","#transformers.AutoModelForPreTraining"),c(ji,"class","relative group"),c(pD,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_D,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uD,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bD,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForPreTraining"),c(vD,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(FD,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForPreTraining"),c(TD,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(MD,"href","/docs/transformers/pr_16543/en/model_doc/bloom#transformers.BloomForCausalLM"),c(ED,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(CD,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(wD,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(AD,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(LD,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(yD,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(xD,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForPreTraining"),c($D,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(kD,"href","/docs/transformers/pr_16543/en/model_doc/flava#transformers.FlavaForPreTraining"),c(SD,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForPreTraining"),c(RD,"href","/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(PD,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(BD,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(ID,"href","/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(ND,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(qD,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(jD,"href","/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(DD,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(GD,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(OD,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(VD,"href","/docs/transformers/pr_16543/en/model_doc/nezha#transformers.NezhaForPreTraining"),c(XD,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(zD,"href","/docs/transformers/pr_16543/en/model_doc/retribert#transformers.RetriBertModel"),c(QD,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(WD,"href","/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(HD,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(UD,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(JD,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(YD,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(KD,"href","/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(ZD,"href","/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(eG,"href","/docs/transformers/pr_16543/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(oG,"href","/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(rG,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(tG,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(aG,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(nG,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(sG,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(lG,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(L1,"id","transformers.AutoModelForCausalLM"),c(L1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(L1,"href","#transformers.AutoModelForCausalLM"),c(Oi,"class","relative group"),c(iG,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dG,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cG,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fG,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForCausalLM"),c(mG,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertLMHeadModel"),c(gG,"href","/docs/transformers/pr_16543/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(hG,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(pG,"href","/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(_G,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(uG,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(bG,"href","/docs/transformers/pr_16543/en/model_doc/bloom#transformers.BloomForCausalLM"),c(vG,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(FG,"href","/docs/transformers/pr_16543/en/model_doc/codegen#transformers.CodeGenForCausalLM"),c(TG,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(MG,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(EG,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForCausalLM"),c(CG,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(wG,"href","/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(AG,"href","/docs/transformers/pr_16543/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(LG,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(yG,"href","/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianForCausalLM"),c(xG,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForCausalLM"),c($G,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(kG,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(SG,"href","/docs/transformers/pr_16543/en/model_doc/opt#transformers.OPTForCausalLM"),c(RG,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(PG,"href","/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(BG,"href","/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(IG,"href","/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(NG,"href","/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(qG,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(jG,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(DG,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(GG,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(OG,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(VG,"href","/docs/transformers/pr_16543/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(XG,"href","/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(zG,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(QG,"href","/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(WG,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(HG,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(UG,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_2,"id","transformers.AutoModelForMaskedLM"),c(_2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_2,"href","#transformers.AutoModelForMaskedLM"),c(zi,"class","relative group"),c(JG,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YG,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KG,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZG,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(eO,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(oO,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForMaskedLM"),c(rO,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(tO,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(aO,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(nO,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(sO,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(lO,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(iO,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(dO,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(cO,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(fO,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(mO,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(gO,"href","/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(hO,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(pO,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(_O,"href","/docs/transformers/pr_16543/en/model_doc/luke#transformers.LukeForMaskedLM"),c(uO,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(bO,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(vO,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(FO,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(TO,"href","/docs/transformers/pr_16543/en/model_doc/nezha#transformers.NezhaForMaskedLM"),c(MO,"href","/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(EO,"href","/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(CO,"href","/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(wO,"href","/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(AO,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(LO,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(yO,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(xO,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c($O,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(kO,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(SO,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(RO,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(PO,"href","/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tb,"id","transformers.AutoModelForSeq2SeqLM"),c(tb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tb,"href","#transformers.AutoModelForSeq2SeqLM"),c(Hi,"class","relative group"),c(BO,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IO,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NO,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qO,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(jO,"href","/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(DO,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(GO,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(OO,"href","/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(VO,"href","/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(XO,"href","/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(zO,"href","/docs/transformers/pr_16543/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c(QO,"href","/docs/transformers/pr_16543/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(WO,"href","/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianMTModel"),c(HO,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(UO,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(JO,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(YO,"href","/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(KO,"href","/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(ZO,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(eV,"href","/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cb,"id","transformers.AutoModelForSequenceClassification"),c(Cb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Cb,"href","#transformers.AutoModelForSequenceClassification"),c(Yi,"class","relative group"),c(oV,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rV,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tV,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aV,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(nV,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForSequenceClassification"),c(sV,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForSequenceClassification"),c(lV,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(iV,"href","/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(dV,"href","/docs/transformers/pr_16543/en/model_doc/bloom#transformers.BloomForSequenceClassification"),c(cV,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(fV,"href","/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(mV,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(gV,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(hV,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(pV,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(_V,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(uV,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(bV,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(vV,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(FV,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(TV,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(MV,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(EV,"href","/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(CV,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(wV,"href","/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(AV,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(LV,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(yV,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(xV,"href","/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDForSequenceClassification"),c($V,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(kV,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(SV,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(RV,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(PV,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(BV,"href","/docs/transformers/pr_16543/en/model_doc/nezha#transformers.NezhaForSequenceClassification"),c(IV,"href","/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(NV,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(qV,"href","/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(jV,"href","/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(DV,"href","/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(GV,"href","/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(OV,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(VV,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(XV,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(zV,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(QV,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(WV,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(HV,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(UV,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(JV,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(YV,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(KV,"href","/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(E4,"id","transformers.AutoModelForMultipleChoice"),c(E4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(E4,"href","#transformers.AutoModelForMultipleChoice"),c(ed,"class","relative group"),c(ZV,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rX,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(tX,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForMultipleChoice"),c(aX,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(nX,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(sX,"href","/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(lX,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(iX,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(dX,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(cX,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(fX,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(mX,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(gX,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(hX,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(pX,"href","/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(_X,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(uX,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(bX,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(vX,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(FX,"href","/docs/transformers/pr_16543/en/model_doc/nezha#transformers.NezhaForMultipleChoice"),c(TX,"href","/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(MX,"href","/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(EX,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(CX,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(wX,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(AX,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(LX,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(yX,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(xX,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c($X,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(kX,"href","/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(t5,"id","transformers.AutoModelForNextSentencePrediction"),c(t5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(t5,"href","#transformers.AutoModelForNextSentencePrediction"),c(td,"class","relative group"),c(SX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BX,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(IX,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(NX,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(qX,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(jX,"href","/docs/transformers/pr_16543/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction"),c(DX,"href","/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(g5,"id","transformers.AutoModelForTokenClassification"),c(g5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(g5,"href","#transformers.AutoModelForTokenClassification"),c(sd,"class","relative group"),c(GX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XX,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(zX,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForTokenClassification"),c(QX,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(WX,"href","/docs/transformers/pr_16543/en/model_doc/bloom#transformers.BloomForTokenClassification"),c(HX,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(UX,"href","/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineForTokenClassification"),c(JX,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(YX,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(KX,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(ZX,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(ez,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(oz,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(rz,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(tz,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(az,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(nz,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(sz,"href","/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(lz,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(iz,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(dz,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(cz,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(fz,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(mz,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(gz,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(hz,"href","/docs/transformers/pr_16543/en/model_doc/nezha#transformers.NezhaForTokenClassification"),c(pz,"href","/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(_z,"href","/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(uz,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(bz,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(vz,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(Fz,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(Tz,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(Mz,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(Ez,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(Cz,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(wz,"href","/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Z5,"id","transformers.AutoModelForQuestionAnswering"),c(Z5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Z5,"href","#transformers.AutoModelForQuestionAnswering"),c(dd,"class","relative group"),c(Az,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lz,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yz,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xz,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c($z,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(kz,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(Sz,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(Rz,"href","/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(Pz,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(Bz,"href","/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(Iz,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(Nz,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(qz,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(jz,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(Dz,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(Gz,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(Oz,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(Vz,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(Xz,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(zz,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(Qz,"href","/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(Wz,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(Hz,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(Uz,"href","/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(Jz,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(Yz,"href","/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(Kz,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(Zz,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(eQ,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(oQ,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(rQ,"href","/docs/transformers/pr_16543/en/model_doc/nezha#transformers.NezhaForQuestionAnswering"),c(tQ,"href","/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(aQ,"href","/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(nQ,"href","/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(sQ,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(lQ,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(iQ,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(dQ,"href","/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(cQ,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(fQ,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(mQ,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(gQ,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(hQ,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(pQ,"href","/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(X3,"id","transformers.AutoModelForTableQuestionAnswering"),c(X3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X3,"href","#transformers.AutoModelForTableQuestionAnswering"),c(md,"class","relative group"),c(_Q,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vQ,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U3,"id","transformers.AutoModelForImageClassification"),c(U3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U3,"href","#transformers.AutoModelForImageClassification"),c(pd,"class","relative group"),c(FQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EQ,"href","/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitForImageClassification"),c(CQ,"href","/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(wQ,"href","/docs/transformers/pr_16543/en/model_doc/cvt#transformers.CvtForImageClassification"),c(AQ,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(LQ,"href","/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTForImageClassification"),c(yQ,"href","/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(xQ,"href","/docs/transformers/pr_16543/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c($Q,"href","/docs/transformers/pr_16543/en/model_doc/levit#transformers.LevitForImageClassification"),c(kQ,"href","/docs/transformers/pr_16543/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(SQ,"href","/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(RQ,"href","/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(PQ,"href","/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(BQ,"href","/docs/transformers/pr_16543/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(IQ,"href","/docs/transformers/pr_16543/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(NQ,"href","/docs/transformers/pr_16543/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(qQ,"href","/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(jQ,"href","/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinForImageClassification"),c(DQ,"href","/docs/transformers/pr_16543/en/model_doc/van#transformers.VanForImageClassification"),c(GQ,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fv,"id","transformers.AutoModelForVision2Seq"),c(fv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fv,"href","#transformers.AutoModelForVision2Seq"),c(bd,"class","relative group"),c(OQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zQ,"href","/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_v,"id","transformers.AutoModelForVisualQuestionAnswering"),c(_v,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_v,"href","#transformers.AutoModelForVisualQuestionAnswering"),c(Td,"class","relative group"),c(QQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UQ,"href","/docs/transformers/pr_16543/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tv,"id","transformers.AutoModelForAudioClassification"),c(Tv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Tv,"href","#transformers.AutoModelForAudioClassification"),c(Cd,"class","relative group"),c(JQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZQ,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(eW,"href","/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(oW,"href","/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(rW,"href","/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(tW,"href","/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(aW,"href","/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(nW,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(sW,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(lW,"href","/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pv,"id","transformers.AutoModelForAudioFrameClassification"),c(Pv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Pv,"href","#transformers.AutoModelForAudioFrameClassification"),c(Ld,"class","relative group"),c(iW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fW,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(mW,"href","/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(gW,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(hW,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(pW,"href","/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vv,"id","transformers.AutoModelForCTC"),c(Vv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Vv,"href","#transformers.AutoModelForCTC"),c($d,"class","relative group"),c(_W,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vW,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(FW,"href","/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertForCTC"),c(TW,"href","/docs/transformers/pr_16543/en/model_doc/mctct#transformers.MCTCTForCTC"),c(MW,"href","/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWForCTC"),c(EW,"href","/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDForCTC"),c(CW,"href","/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(wW,"href","/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(AW,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(LW,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(yW,"href","/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMForCTC"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tF,"id","transformers.AutoModelForSpeechSeq2Seq"),c(tF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tF,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(Rd,"class","relative group"),c(xW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($W,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SW,"href","/docs/transformers/pr_16543/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(RW,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dF,"id","transformers.AutoModelForAudioXVector"),c(dF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dF,"href","#transformers.AutoModelForAudioXVector"),c(Id,"class","relative group"),c(PW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NW,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(qW,"href","/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(jW,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(DW,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(GW,"href","/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMForXVector"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bF,"id","transformers.AutoModelForMaskedImageModeling"),c(bF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bF,"href","#transformers.AutoModelForMaskedImageModeling"),c(jd,"class","relative group"),c(OW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zW,"href","/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(QW,"href","/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(WW,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wF,"id","transformers.AutoModelForObjectDetection"),c(wF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wF,"href","#transformers.AutoModelForObjectDetection"),c(Vd,"class","relative group"),c(HW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YW,"href","/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrForObjectDetection"),c(KW,"href","/docs/transformers/pr_16543/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kF,"id","transformers.AutoModelForImageSegmentation"),c(kF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kF,"href","#transformers.AutoModelForImageSegmentation"),c(Qd,"class","relative group"),c(ZW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rH,"href","/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrForSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IF,"id","transformers.AutoModelForSemanticSegmentation"),c(IF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(IF,"href","#transformers.AutoModelForSemanticSegmentation"),c(Ud,"class","relative group"),c(tH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sH,"href","/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(lH,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(iH,"href","/docs/transformers/pr_16543/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(dH,"href","/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XF,"id","transformers.AutoModelForInstanceSegmentation"),c(XF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(XF,"href","#transformers.AutoModelForInstanceSegmentation"),c(Kd,"class","relative group"),c(cH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gH,"href","/docs/transformers/pr_16543/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UF,"id","transformers.TFAutoModel"),c(UF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UF,"href","#transformers.TFAutoModel"),c(oc,"class","relative group"),c(hH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_H,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uH,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertModel"),c(bH,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.TFBartModel"),c(vH,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertModel"),c(FH,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(TH,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(MH,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertModel"),c(EH,"href","/docs/transformers/pr_16543/en/model_doc/clip#transformers.TFCLIPModel"),c(CH,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertModel"),c(wH,"href","/docs/transformers/pr_16543/en/model_doc/convnext#transformers.TFConvNextModel"),c(AH,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.TFCTRLModel"),c(LH,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(yH,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaModel"),c(xH,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c($H,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(kH,"href","/docs/transformers/pr_16543/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(SH,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraModel"),c(RH,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(PH,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelModel"),c(BH,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(IH,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.TFGPT2Model"),c(NH,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.TFGPTJModel"),c(qH,"href","/docs/transformers/pr_16543/en/model_doc/hubert#transformers.TFHubertModel"),c(jH,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(DH,"href","/docs/transformers/pr_16543/en/model_doc/led#transformers.TFLEDModel"),c(GH,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerModel"),c(OH,"href","/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.TFLxmertModel"),c(VH,"href","/docs/transformers/pr_16543/en/model_doc/marian#transformers.TFMarianModel"),c(XH,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.TFMBartModel"),c(zH,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(QH,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetModel"),c(WH,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.TFMT5Model"),c(HH,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(UH,"href","/docs/transformers/pr_16543/en/model_doc/opt#transformers.TFOPTModel"),c(JH,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.TFPegasusModel"),c(YH,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertModel"),c(KH,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaModel"),c(ZH,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerModel"),c(eU,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(oU,"href","/docs/transformers/pr_16543/en/model_doc/swin#transformers.TFSwinModel"),c(rU,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.TFT5Model"),c(tU,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasModel"),c(aU,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(nU,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.TFViTModel"),c(sU,"href","/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(lU,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(iU,"href","/docs/transformers/pr_16543/en/model_doc/xglm#transformers.TFXGLMModel"),c(dU,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMModel"),c(cU,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(fU,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z6,"id","transformers.TFAutoModelForPreTraining"),c(z6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z6,"href","#transformers.TFAutoModelForPreTraining"),c(ac,"class","relative group"),c(mU,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gU,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hU,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pU,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(_U,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(uU,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForPreTraining"),c(bU,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(vU,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(FU,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(TU,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(MU,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(EU,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(CU,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(wU,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(AU,"href","/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(LU,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(yU,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(xU,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c($U,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(kU,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(SU,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(RU,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(PU,"href","/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(BU,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(IU,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(NU,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uT,"id","transformers.TFAutoModelForCausalLM"),c(uT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uT,"href","#transformers.TFAutoModelForCausalLM"),c(lc,"class","relative group"),c(qU,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jU,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DU,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GU,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(OU,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(VU,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(XU,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(zU,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(QU,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(WU,"href","/docs/transformers/pr_16543/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(HU,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(UU,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(JU,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(YU,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(KU,"href","/docs/transformers/pr_16543/en/model_doc/xglm#transformers.TFXGLMForCausalLM"),c(ZU,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(eJ,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PT,"id","transformers.TFAutoModelForImageClassification"),c(PT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PT,"href","#transformers.TFAutoModelForImageClassification"),c(cc,"class","relative group"),c(oJ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rJ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tJ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aJ,"href","/docs/transformers/pr_16543/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(nJ,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(sJ,"href","/docs/transformers/pr_16543/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(lJ,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.TFViTForImageClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GT,"id","transformers.TFAutoModelForMaskedLM"),c(GT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(GT,"href","#transformers.TFAutoModelForMaskedLM"),c(gc,"class","relative group"),c(iJ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dJ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cJ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fJ,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(mJ,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(gJ,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(hJ,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(pJ,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(_J,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(uJ,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(bJ,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(vJ,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(FJ,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(TJ,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(MJ,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(EJ,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(CJ,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(wJ,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(AJ,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(LJ,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(yJ,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(xJ,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c($J,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cM,"id","transformers.TFAutoModelForSeq2SeqLM"),c(cM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cM,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(_c,"class","relative group"),c(kJ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SJ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RJ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PJ,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(BJ,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(IJ,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(NJ,"href","/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(qJ,"href","/docs/transformers/pr_16543/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(jJ,"href","/docs/transformers/pr_16543/en/model_doc/marian#transformers.TFMarianMTModel"),c(DJ,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(GJ,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(OJ,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(VJ,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EM,"id","transformers.TFAutoModelForSequenceClassification"),c(EM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(EM,"href","#transformers.TFAutoModelForSequenceClassification"),c(vc,"class","relative group"),c(XJ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zJ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QJ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WJ,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(HJ,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(UJ,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(JJ,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(YJ,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(KJ,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(ZJ,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(eY,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(oY,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(rY,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(tY,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(aY,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(nY,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(sY,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(lY,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(iY,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(dY,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(cY,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(fY,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(mY,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(gY,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(hY,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(pY,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(_Y,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(uY,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(bY,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KM,"id","transformers.TFAutoModelForMultipleChoice"),c(KM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(KM,"href","#transformers.TFAutoModelForMultipleChoice"),c(Mc,"class","relative group"),c(vY,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FY,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TY,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MY,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(EY,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(CY,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(wY,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(AY,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(LY,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(yY,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(xY,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c($Y,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(kY,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(SY,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(RY,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(PY,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(BY,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(IY,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(NY,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(qY,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bE,"id","transformers.TFAutoModelForNextSentencePrediction"),c(bE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bE,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(wc,"class","relative group"),c(jY,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DY,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GY,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OY,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(VY,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EE,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(EE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(EE,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(yc,"class","relative group"),c(XY,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zY,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QY,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WY,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LE,"id","transformers.TFAutoModelForTokenClassification"),c(LE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(LE,"href","#transformers.TFAutoModelForTokenClassification"),c(kc,"class","relative group"),c(HY,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UY,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JY,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YY,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(KY,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(ZY,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(eK,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(oK,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(rK,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(tK,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(aK,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(nK,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(sK,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(lK,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(iK,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(dK,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(cK,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(fK,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(mK,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(gK,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(hK,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(pK,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(_K,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JE,"id","transformers.TFAutoModelForQuestionAnswering"),c(JE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(JE,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Pc,"class","relative group"),c(uK,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bK,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vK,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FK,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(TK,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(MK,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(EK,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(CK,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(wK,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(AK,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(LK,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(yK,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(xK,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c($K,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(kK,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(SK,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(RK,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(PK,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(BK,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(IK,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(NK,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(qK,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(jK,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vC,"id","transformers.TFAutoModelForVision2Seq"),c(vC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vC,"href","#transformers.TFAutoModelForVision2Seq"),c(Nc,"class","relative group"),c(DK,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GK,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OK,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VK,"href","/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EC,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(EC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(EC,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Dc,"class","relative group"),c(XK,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zK,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QK,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WK,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LC,"id","transformers.FlaxAutoModel"),c(LC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(LC,"href","#transformers.FlaxAutoModel"),c(Vc,"class","relative group"),c(HK,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UK,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JK,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YK,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertModel"),c(KK,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartModel"),c(ZK,"href","/docs/transformers/pr_16543/en/model_doc/beit#transformers.FlaxBeitModel"),c(eZ,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertModel"),c(oZ,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(rZ,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(tZ,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(aZ,"href","/docs/transformers/pr_16543/en/model_doc/clip#transformers.FlaxCLIPModel"),c(nZ,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(sZ,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraModel"),c(lZ,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(iZ,"href","/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(dZ,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(cZ,"href","/docs/transformers/pr_16543/en/model_doc/longt5#transformers.FlaxLongT5Model"),c(fZ,"href","/docs/transformers/pr_16543/en/model_doc/marian#transformers.FlaxMarianModel"),c(mZ,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartModel"),c(gZ,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.FlaxMT5Model"),c(hZ,"href","/docs/transformers/pr_16543/en/model_doc/opt#transformers.FlaxOPTModel"),c(pZ,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(_Z,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(uZ,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(bZ,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.FlaxT5Model"),c(vZ,"href","/docs/transformers/pr_16543/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(FZ,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.FlaxViTModel"),c(TZ,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(MZ,"href","/docs/transformers/pr_16543/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(EZ,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(t0,"id","transformers.FlaxAutoModelForCausalLM"),c(t0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(t0,"href","#transformers.FlaxAutoModelForCausalLM"),c(Qc,"class","relative group"),c(CZ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wZ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AZ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LZ,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(yZ,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(xZ,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c($Z,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(kZ,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(SZ,"href","/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(RZ,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(PZ,"href","/docs/transformers/pr_16543/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(BZ,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(IZ,"href","/docs/transformers/pr_16543/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_0,"id","transformers.FlaxAutoModelForPreTraining"),c(_0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_0,"href","#transformers.FlaxAutoModelForPreTraining"),c(Uc,"class","relative group"),c(NZ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qZ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jZ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DZ,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(GZ,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(OZ,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(VZ,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(XZ,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(zZ,"href","/docs/transformers/pr_16543/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(QZ,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(WZ,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(HZ,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(UZ,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(JZ,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(YZ,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(KZ,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(S0,"id","transformers.FlaxAutoModelForMaskedLM"),c(S0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S0,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Kc,"class","relative group"),c(ZZ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eee,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oee,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ree,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(tee,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(aee,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(nee,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(see,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(lee,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(iee,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(dee,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(cee,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(fee,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z0,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(z0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z0,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(of,"class","relative group"),c(mee,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gee,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hee,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pee,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(_ee,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(uee,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(bee,"href","/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(vee,"href","/docs/transformers/pr_16543/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(Fee,"href","/docs/transformers/pr_16543/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(Tee,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(Mee,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(Eee,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(Cee,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aw,"id","transformers.FlaxAutoModelForSequenceClassification"),c(aw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aw,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(af,"class","relative group"),c(wee,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Aee,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Lee,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yee,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(xee,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c($ee,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(kee,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(See,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(Ree,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(Pee,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(Bee,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(Iee,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(Nee,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uw,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(uw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uw,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(lf,"class","relative group"),c(qee,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jee,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Dee,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gee,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(Oee,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(Vee,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(Xee,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(zee,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(Qee,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(Wee,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(Hee,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(Uee,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(Jee,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($w,"id","transformers.FlaxAutoModelForTokenClassification"),c($w,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($w,"href","#transformers.FlaxAutoModelForTokenClassification"),c(ff,"class","relative group"),c(Yee,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kee,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Zee,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eoe,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(ooe,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(roe,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(toe,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(aoe,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(noe,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(soe,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(loe,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gw,"id","transformers.FlaxAutoModelForMultipleChoice"),c(Gw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Gw,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(hf,"class","relative group"),c(ioe,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(doe,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(coe,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(foe,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(moe,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(goe,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(hoe,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(poe,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(_oe,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(uoe,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(boe,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Kw,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(Kw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Kw,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(uf,"class","relative group"),c(voe,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Foe,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Toe,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Moe,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rA,"id","transformers.FlaxAutoModelForImageClassification"),c(rA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rA,"href","#transformers.FlaxAutoModelForImageClassification"),c(Ff,"class","relative group"),c(Eoe,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Coe,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(woe,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Aoe,"href","/docs/transformers/pr_16543/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(Loe,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lA,"id","transformers.FlaxAutoModelForVision2Seq"),c(lA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lA,"href","#transformers.FlaxAutoModelForVision2Seq"),c(Ef,"class","relative group"),c(yoe,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xoe,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($oe,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(koe,"href","/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(d,_,null),e(p,h),e(p,Eo),e(Eo,Mi),b(f,xf,u),b(f,at,u),e(at,Ei),e(at,Ci),e(Ci,k7),e(at,$f),b(f,Oe,u),b(f,Qe,u),e(Qe,wi),e(Qe,Rn),e(Rn,S7),e(Qe,Pn),e(Qe,Bn),e(Bn,R7),e(Qe,Ai),e(Qe,In),e(In,P7),e(Qe,Li),b(f,kf,u),M(xa,f,u),b(f,We,u),b(f,Ae,u),e(Ae,dS),e(Ae,yi),e(yi,cS),e(Ae,fS),b(f,Co,u),b(f,$a,u),e($a,mS),e($a,Sf),e(Sf,gS),e($a,wQe),b(f,cOe,u),b(f,xi,u),e(xi,Rf),e(Rf,Ate),M(B7,Ate,null),e(xi,AQe),e(xi,Lte),e(Lte,LQe),b(f,fOe,u),b(f,Nn,u),e(Nn,yQe),e(Nn,yte),e(yte,xQe),e(Nn,$Qe),e(Nn,xte),e(xte,kQe),e(Nn,SQe),b(f,mOe,u),M(I7,f,u),b(f,gOe,u),b(f,hS,u),e(hS,RQe),b(f,hOe,u),M(Pf,f,u),b(f,pOe,u),b(f,$i,u),e($i,Bf),e(Bf,$te),M(N7,$te,null),e($i,PQe),e($i,kte),e(kte,BQe),b(f,_Oe,u),b(f,wo,u),M(q7,wo,null),e(wo,IQe),e(wo,j7),e(j7,NQe),e(j7,pS),e(pS,qQe),e(j7,jQe),e(wo,DQe),e(wo,D7),e(D7,GQe),e(D7,Ste),e(Ste,OQe),e(D7,VQe),e(wo,XQe),e(wo,Ar),M(G7,Ar,null),e(Ar,zQe),e(Ar,Rte),e(Rte,QQe),e(Ar,WQe),e(Ar,ki),e(ki,HQe),e(ki,Pte),e(Pte,UQe),e(ki,JQe),e(ki,Bte),e(Bte,YQe),e(ki,KQe),e(Ar,ZQe),e(Ar,A),e(A,If),e(If,Ite),e(Ite,eWe),e(If,oWe),e(If,_S),e(_S,rWe),e(If,tWe),e(A,aWe),e(A,Nf),e(Nf,Nte),e(Nte,nWe),e(Nf,sWe),e(Nf,uS),e(uS,lWe),e(Nf,iWe),e(A,dWe),e(A,qf),e(qf,qte),e(qte,cWe),e(qf,fWe),e(qf,bS),e(bS,mWe),e(qf,gWe),e(A,hWe),e(A,jf),e(jf,jte),e(jte,pWe),e(jf,_We),e(jf,vS),e(vS,uWe),e(jf,bWe),e(A,vWe),e(A,Df),e(Df,Dte),e(Dte,FWe),e(Df,TWe),e(Df,FS),e(FS,MWe),e(Df,EWe),e(A,CWe),e(A,Gf),e(Gf,Gte),e(Gte,wWe),e(Gf,AWe),e(Gf,TS),e(TS,LWe),e(Gf,yWe),e(A,xWe),e(A,Of),e(Of,Ote),e(Ote,$We),e(Of,kWe),e(Of,MS),e(MS,SWe),e(Of,RWe),e(A,PWe),e(A,Vf),e(Vf,Vte),e(Vte,BWe),e(Vf,IWe),e(Vf,ES),e(ES,NWe),e(Vf,qWe),e(A,jWe),e(A,Xf),e(Xf,Xte),e(Xte,DWe),e(Xf,GWe),e(Xf,CS),e(CS,OWe),e(Xf,VWe),e(A,XWe),e(A,zf),e(zf,zte),e(zte,zWe),e(zf,QWe),e(zf,wS),e(wS,WWe),e(zf,HWe),e(A,UWe),e(A,Qf),e(Qf,Qte),e(Qte,JWe),e(Qf,YWe),e(Qf,AS),e(AS,KWe),e(Qf,ZWe),e(A,eHe),e(A,Wf),e(Wf,Wte),e(Wte,oHe),e(Wf,rHe),e(Wf,LS),e(LS,tHe),e(Wf,aHe),e(A,nHe),e(A,Hf),e(Hf,Hte),e(Hte,sHe),e(Hf,lHe),e(Hf,yS),e(yS,iHe),e(Hf,dHe),e(A,cHe),e(A,Uf),e(Uf,Ute),e(Ute,fHe),e(Uf,mHe),e(Uf,xS),e(xS,gHe),e(Uf,hHe),e(A,pHe),e(A,Jf),e(Jf,Jte),e(Jte,_He),e(Jf,uHe),e(Jf,$S),e($S,bHe),e(Jf,vHe),e(A,FHe),e(A,Yf),e(Yf,Yte),e(Yte,THe),e(Yf,MHe),e(Yf,kS),e(kS,EHe),e(Yf,CHe),e(A,wHe),e(A,Kf),e(Kf,Kte),e(Kte,AHe),e(Kf,LHe),e(Kf,SS),e(SS,yHe),e(Kf,xHe),e(A,$He),e(A,Zf),e(Zf,Zte),e(Zte,kHe),e(Zf,SHe),e(Zf,RS),e(RS,RHe),e(Zf,PHe),e(A,BHe),e(A,em),e(em,eae),e(eae,IHe),e(em,NHe),e(em,PS),e(PS,qHe),e(em,jHe),e(A,DHe),e(A,om),e(om,oae),e(oae,GHe),e(om,OHe),e(om,BS),e(BS,VHe),e(om,XHe),e(A,zHe),e(A,rm),e(rm,rae),e(rae,QHe),e(rm,WHe),e(rm,IS),e(IS,HHe),e(rm,UHe),e(A,JHe),e(A,tm),e(tm,tae),e(tae,YHe),e(tm,KHe),e(tm,NS),e(NS,ZHe),e(tm,eUe),e(A,oUe),e(A,am),e(am,aae),e(aae,rUe),e(am,tUe),e(am,qS),e(qS,aUe),e(am,nUe),e(A,sUe),e(A,nm),e(nm,nae),e(nae,lUe),e(nm,iUe),e(nm,jS),e(jS,dUe),e(nm,cUe),e(A,fUe),e(A,sm),e(sm,sae),e(sae,mUe),e(sm,gUe),e(sm,DS),e(DS,hUe),e(sm,pUe),e(A,_Ue),e(A,lm),e(lm,lae),e(lae,uUe),e(lm,bUe),e(lm,GS),e(GS,vUe),e(lm,FUe),e(A,TUe),e(A,im),e(im,iae),e(iae,MUe),e(im,EUe),e(im,OS),e(OS,CUe),e(im,wUe),e(A,AUe),e(A,dm),e(dm,dae),e(dae,LUe),e(dm,yUe),e(dm,VS),e(VS,xUe),e(dm,$Ue),e(A,kUe),e(A,cm),e(cm,cae),e(cae,SUe),e(cm,RUe),e(cm,XS),e(XS,PUe),e(cm,BUe),e(A,IUe),e(A,fm),e(fm,fae),e(fae,NUe),e(fm,qUe),e(fm,zS),e(zS,jUe),e(fm,DUe),e(A,GUe),e(A,mm),e(mm,mae),e(mae,OUe),e(mm,VUe),e(mm,QS),e(QS,XUe),e(mm,zUe),e(A,QUe),e(A,gm),e(gm,gae),e(gae,WUe),e(gm,HUe),e(gm,WS),e(WS,UUe),e(gm,JUe),e(A,YUe),e(A,hm),e(hm,hae),e(hae,KUe),e(hm,ZUe),e(hm,HS),e(HS,eJe),e(hm,oJe),e(A,rJe),e(A,pm),e(pm,pae),e(pae,tJe),e(pm,aJe),e(pm,US),e(US,nJe),e(pm,sJe),e(A,lJe),e(A,_m),e(_m,_ae),e(_ae,iJe),e(_m,dJe),e(_m,JS),e(JS,cJe),e(_m,fJe),e(A,mJe),e(A,um),e(um,uae),e(uae,gJe),e(um,hJe),e(um,YS),e(YS,pJe),e(um,_Je),e(A,uJe),e(A,bm),e(bm,bae),e(bae,bJe),e(bm,vJe),e(bm,KS),e(KS,FJe),e(bm,TJe),e(A,MJe),e(A,vm),e(vm,vae),e(vae,EJe),e(vm,CJe),e(vm,ZS),e(ZS,wJe),e(vm,AJe),e(A,LJe),e(A,Fm),e(Fm,Fae),e(Fae,yJe),e(Fm,xJe),e(Fm,eR),e(eR,$Je),e(Fm,kJe),e(A,SJe),e(A,Tm),e(Tm,Tae),e(Tae,RJe),e(Tm,PJe),e(Tm,oR),e(oR,BJe),e(Tm,IJe),e(A,NJe),e(A,Mm),e(Mm,Mae),e(Mae,qJe),e(Mm,jJe),e(Mm,rR),e(rR,DJe),e(Mm,GJe),e(A,OJe),e(A,Em),e(Em,Eae),e(Eae,VJe),e(Em,XJe),e(Em,tR),e(tR,zJe),e(Em,QJe),e(A,WJe),e(A,Cm),e(Cm,Cae),e(Cae,HJe),e(Cm,UJe),e(Cm,aR),e(aR,JJe),e(Cm,YJe),e(A,KJe),e(A,wm),e(wm,wae),e(wae,ZJe),e(wm,eYe),e(wm,nR),e(nR,oYe),e(wm,rYe),e(A,tYe),e(A,Am),e(Am,Aae),e(Aae,aYe),e(Am,nYe),e(Am,sR),e(sR,sYe),e(Am,lYe),e(A,iYe),e(A,Lm),e(Lm,Lae),e(Lae,dYe),e(Lm,cYe),e(Lm,lR),e(lR,fYe),e(Lm,mYe),e(A,gYe),e(A,ym),e(ym,yae),e(yae,hYe),e(ym,pYe),e(ym,iR),e(iR,_Ye),e(ym,uYe),e(A,bYe),e(A,xm),e(xm,xae),e(xae,vYe),e(xm,FYe),e(xm,dR),e(dR,TYe),e(xm,MYe),e(A,EYe),e(A,$m),e($m,$ae),e($ae,CYe),e($m,wYe),e($m,cR),e(cR,AYe),e($m,LYe),e(A,yYe),e(A,km),e(km,kae),e(kae,xYe),e(km,$Ye),e(km,fR),e(fR,kYe),e(km,SYe),e(A,RYe),e(A,Sm),e(Sm,Sae),e(Sae,PYe),e(Sm,BYe),e(Sm,mR),e(mR,IYe),e(Sm,NYe),e(A,qYe),e(A,Rm),e(Rm,Rae),e(Rae,jYe),e(Rm,DYe),e(Rm,gR),e(gR,GYe),e(Rm,OYe),e(A,VYe),e(A,Pm),e(Pm,Pae),e(Pae,XYe),e(Pm,zYe),e(Pm,hR),e(hR,QYe),e(Pm,WYe),e(A,HYe),e(A,Bm),e(Bm,Bae),e(Bae,UYe),e(Bm,JYe),e(Bm,pR),e(pR,YYe),e(Bm,KYe),e(A,ZYe),e(A,Im),e(Im,Iae),e(Iae,eKe),e(Im,oKe),e(Im,_R),e(_R,rKe),e(Im,tKe),e(A,aKe),e(A,Nm),e(Nm,Nae),e(Nae,nKe),e(Nm,sKe),e(Nm,uR),e(uR,lKe),e(Nm,iKe),e(A,dKe),e(A,qm),e(qm,qae),e(qae,cKe),e(qm,fKe),e(qm,bR),e(bR,mKe),e(qm,gKe),e(A,hKe),e(A,jm),e(jm,jae),e(jae,pKe),e(jm,_Ke),e(jm,vR),e(vR,uKe),e(jm,bKe),e(A,vKe),e(A,Dm),e(Dm,Dae),e(Dae,FKe),e(Dm,TKe),e(Dm,FR),e(FR,MKe),e(Dm,EKe),e(A,CKe),e(A,Gm),e(Gm,Gae),e(Gae,wKe),e(Gm,AKe),e(Gm,TR),e(TR,LKe),e(Gm,yKe),e(A,xKe),e(A,Om),e(Om,Oae),e(Oae,$Ke),e(Om,kKe),e(Om,MR),e(MR,SKe),e(Om,RKe),e(A,PKe),e(A,Vm),e(Vm,Vae),e(Vae,BKe),e(Vm,IKe),e(Vm,ER),e(ER,NKe),e(Vm,qKe),e(A,jKe),e(A,Xm),e(Xm,Xae),e(Xae,DKe),e(Xm,GKe),e(Xm,CR),e(CR,OKe),e(Xm,VKe),e(A,XKe),e(A,zm),e(zm,zae),e(zae,zKe),e(zm,QKe),e(zm,wR),e(wR,WKe),e(zm,HKe),e(A,UKe),e(A,Qm),e(Qm,Qae),e(Qae,JKe),e(Qm,YKe),e(Qm,AR),e(AR,KKe),e(Qm,ZKe),e(A,eZe),e(A,Wm),e(Wm,Wae),e(Wae,oZe),e(Wm,rZe),e(Wm,LR),e(LR,tZe),e(Wm,aZe),e(A,nZe),e(A,Hm),e(Hm,Hae),e(Hae,sZe),e(Hm,lZe),e(Hm,yR),e(yR,iZe),e(Hm,dZe),e(A,cZe),e(A,Um),e(Um,Uae),e(Uae,fZe),e(Um,mZe),e(Um,xR),e(xR,gZe),e(Um,hZe),e(A,pZe),e(A,Jm),e(Jm,Jae),e(Jae,_Ze),e(Jm,uZe),e(Jm,$R),e($R,bZe),e(Jm,vZe),e(A,FZe),e(A,Ym),e(Ym,Yae),e(Yae,TZe),e(Ym,MZe),e(Ym,kR),e(kR,EZe),e(Ym,CZe),e(A,wZe),e(A,Km),e(Km,Kae),e(Kae,AZe),e(Km,LZe),e(Km,SR),e(SR,yZe),e(Km,xZe),e(A,$Ze),e(A,Zm),e(Zm,Zae),e(Zae,kZe),e(Zm,SZe),e(Zm,RR),e(RR,RZe),e(Zm,PZe),e(A,BZe),e(A,eg),e(eg,ene),e(ene,IZe),e(eg,NZe),e(eg,PR),e(PR,qZe),e(eg,jZe),e(A,DZe),e(A,og),e(og,one),e(one,GZe),e(og,OZe),e(og,BR),e(BR,VZe),e(og,XZe),e(A,zZe),e(A,rg),e(rg,rne),e(rne,QZe),e(rg,WZe),e(rg,IR),e(IR,HZe),e(rg,UZe),e(A,JZe),e(A,tg),e(tg,tne),e(tne,YZe),e(tg,KZe),e(tg,NR),e(NR,ZZe),e(tg,eeo),e(A,oeo),e(A,ag),e(ag,ane),e(ane,reo),e(ag,teo),e(ag,qR),e(qR,aeo),e(ag,neo),e(A,seo),e(A,ng),e(ng,nne),e(nne,leo),e(ng,ieo),e(ng,jR),e(jR,deo),e(ng,ceo),e(A,feo),e(A,sg),e(sg,sne),e(sne,meo),e(sg,geo),e(sg,DR),e(DR,heo),e(sg,peo),e(A,_eo),e(A,lg),e(lg,lne),e(lne,ueo),e(lg,beo),e(lg,GR),e(GR,veo),e(lg,Feo),e(A,Teo),e(A,ig),e(ig,ine),e(ine,Meo),e(ig,Eeo),e(ig,OR),e(OR,Ceo),e(ig,weo),e(A,Aeo),e(A,dg),e(dg,dne),e(dne,Leo),e(dg,yeo),e(dg,VR),e(VR,xeo),e(dg,$eo),e(A,keo),e(A,cg),e(cg,cne),e(cne,Seo),e(cg,Reo),e(cg,XR),e(XR,Peo),e(cg,Beo),e(A,Ieo),e(A,fg),e(fg,fne),e(fne,Neo),e(fg,qeo),e(fg,zR),e(zR,jeo),e(fg,Deo),e(A,Geo),e(A,mg),e(mg,mne),e(mne,Oeo),e(mg,Veo),e(mg,QR),e(QR,Xeo),e(mg,zeo),e(A,Qeo),e(A,gg),e(gg,gne),e(gne,Weo),e(gg,Heo),e(gg,WR),e(WR,Ueo),e(gg,Jeo),e(A,Yeo),e(A,hg),e(hg,hne),e(hne,Keo),e(hg,Zeo),e(hg,HR),e(HR,eoo),e(hg,ooo),e(A,roo),e(A,pg),e(pg,pne),e(pne,too),e(pg,aoo),e(pg,UR),e(UR,noo),e(pg,soo),e(A,loo),e(A,_g),e(_g,_ne),e(_ne,ioo),e(_g,doo),e(_g,JR),e(JR,coo),e(_g,foo),e(A,moo),e(A,ug),e(ug,une),e(une,goo),e(ug,hoo),e(ug,YR),e(YR,poo),e(ug,_oo),e(A,uoo),e(A,bg),e(bg,bne),e(bne,boo),e(bg,voo),e(bg,KR),e(KR,Foo),e(bg,Too),e(A,Moo),e(A,vg),e(vg,vne),e(vne,Eoo),e(vg,Coo),e(vg,ZR),e(ZR,woo),e(vg,Aoo),e(A,Loo),e(A,Fg),e(Fg,Fne),e(Fne,yoo),e(Fg,xoo),e(Fg,eP),e(eP,$oo),e(Fg,koo),e(A,Soo),e(A,Tg),e(Tg,Tne),e(Tne,Roo),e(Tg,Poo),e(Tg,oP),e(oP,Boo),e(Tg,Ioo),e(A,Noo),e(A,Mg),e(Mg,Mne),e(Mne,qoo),e(Mg,joo),e(Mg,rP),e(rP,Doo),e(Mg,Goo),e(A,Ooo),e(A,Eg),e(Eg,Ene),e(Ene,Voo),e(Eg,Xoo),e(Eg,tP),e(tP,zoo),e(Eg,Qoo),e(A,Woo),e(A,Cg),e(Cg,Cne),e(Cne,Hoo),e(Cg,Uoo),e(Cg,aP),e(aP,Joo),e(Cg,Yoo),e(A,Koo),e(A,wg),e(wg,wne),e(wne,Zoo),e(wg,ero),e(wg,nP),e(nP,oro),e(wg,rro),e(A,tro),e(A,Ag),e(Ag,Ane),e(Ane,aro),e(Ag,nro),e(Ag,sP),e(sP,sro),e(Ag,lro),e(A,iro),e(A,Lg),e(Lg,Lne),e(Lne,dro),e(Lg,cro),e(Lg,lP),e(lP,fro),e(Lg,mro),e(A,gro),e(A,yg),e(yg,yne),e(yne,hro),e(yg,pro),e(yg,iP),e(iP,_ro),e(yg,uro),e(A,bro),e(A,xg),e(xg,xne),e(xne,vro),e(xg,Fro),e(xg,dP),e(dP,Tro),e(xg,Mro),e(A,Ero),e(A,$g),e($g,$ne),e($ne,Cro),e($g,wro),e($g,cP),e(cP,Aro),e($g,Lro),e(A,yro),e(A,kg),e(kg,kne),e(kne,xro),e(kg,$ro),e(kg,fP),e(fP,kro),e(kg,Sro),e(A,Rro),e(A,Sg),e(Sg,Sne),e(Sne,Pro),e(Sg,Bro),e(Sg,mP),e(mP,Iro),e(Sg,Nro),e(A,qro),e(A,Rg),e(Rg,Rne),e(Rne,jro),e(Rg,Dro),e(Rg,gP),e(gP,Gro),e(Rg,Oro),e(A,Vro),e(A,Pg),e(Pg,Pne),e(Pne,Xro),e(Pg,zro),e(Pg,hP),e(hP,Qro),e(Pg,Wro),e(A,Hro),e(A,Bg),e(Bg,Bne),e(Bne,Uro),e(Bg,Jro),e(Bg,pP),e(pP,Yro),e(Bg,Kro),e(A,Zro),e(A,Ig),e(Ig,Ine),e(Ine,eto),e(Ig,oto),e(Ig,_P),e(_P,rto),e(Ig,tto),e(A,ato),e(A,Ng),e(Ng,Nne),e(Nne,nto),e(Ng,sto),e(Ng,uP),e(uP,lto),e(Ng,ito),e(A,dto),e(A,qg),e(qg,qne),e(qne,cto),e(qg,fto),e(qg,bP),e(bP,mto),e(qg,gto),e(A,hto),e(A,jg),e(jg,jne),e(jne,pto),e(jg,_to),e(jg,vP),e(vP,uto),e(jg,bto),e(A,vto),e(A,Dg),e(Dg,Dne),e(Dne,Fto),e(Dg,Tto),e(Dg,FP),e(FP,Mto),e(Dg,Eto),e(A,Cto),e(A,Gg),e(Gg,Gne),e(Gne,wto),e(Gg,Ato),e(Gg,TP),e(TP,Lto),e(Gg,yto),e(A,xto),e(A,Og),e(Og,One),e(One,$to),e(Og,kto),e(Og,MP),e(MP,Sto),e(Og,Rto),e(Ar,Pto),M(Vg,Ar,null),e(wo,Bto),e(wo,Xg),M(O7,Xg,null),e(Xg,Ito),e(Xg,Vne),e(Vne,Nto),b(f,uOe,u),b(f,Si,u),e(Si,zg),e(zg,Xne),M(V7,Xne,null),e(Si,qto),e(Si,zne),e(zne,jto),b(f,bOe,u),b(f,Ao,u),M(X7,Ao,null),e(Ao,Dto),e(Ao,z7),e(z7,Gto),e(z7,EP),e(EP,Oto),e(z7,Vto),e(Ao,Xto),e(Ao,Q7),e(Q7,zto),e(Q7,Qne),e(Qne,Qto),e(Q7,Wto),e(Ao,Hto),e(Ao,Lr),M(W7,Lr,null),e(Lr,Uto),e(Lr,Wne),e(Wne,Jto),e(Lr,Yto),e(Lr,ka),e(ka,Kto),e(ka,Hne),e(Hne,Zto),e(ka,eao),e(ka,Une),e(Une,oao),e(ka,rao),e(ka,Jne),e(Jne,tao),e(ka,aao),e(Lr,nao),e(Lr,k),e(k,qn),e(qn,Yne),e(Yne,sao),e(qn,lao),e(qn,CP),e(CP,iao),e(qn,dao),e(qn,wP),e(wP,cao),e(qn,fao),e(k,mao),e(k,jn),e(jn,Kne),e(Kne,gao),e(jn,hao),e(jn,AP),e(AP,pao),e(jn,_ao),e(jn,LP),e(LP,uao),e(jn,bao),e(k,vao),e(k,Dn),e(Dn,Zne),e(Zne,Fao),e(Dn,Tao),e(Dn,yP),e(yP,Mao),e(Dn,Eao),e(Dn,xP),e(xP,Cao),e(Dn,wao),e(k,Aao),e(k,Qg),e(Qg,ese),e(ese,Lao),e(Qg,yao),e(Qg,$P),e($P,xao),e(Qg,$ao),e(k,kao),e(k,Gn),e(Gn,ose),e(ose,Sao),e(Gn,Rao),e(Gn,kP),e(kP,Pao),e(Gn,Bao),e(Gn,SP),e(SP,Iao),e(Gn,Nao),e(k,qao),e(k,Wg),e(Wg,rse),e(rse,jao),e(Wg,Dao),e(Wg,RP),e(RP,Gao),e(Wg,Oao),e(k,Vao),e(k,Hg),e(Hg,tse),e(tse,Xao),e(Hg,zao),e(Hg,PP),e(PP,Qao),e(Hg,Wao),e(k,Hao),e(k,Ug),e(Ug,ase),e(ase,Uao),e(Ug,Jao),e(Ug,BP),e(BP,Yao),e(Ug,Kao),e(k,Zao),e(k,On),e(On,nse),e(nse,eno),e(On,ono),e(On,IP),e(IP,rno),e(On,tno),e(On,NP),e(NP,ano),e(On,nno),e(k,sno),e(k,Vn),e(Vn,sse),e(sse,lno),e(Vn,ino),e(Vn,qP),e(qP,dno),e(Vn,cno),e(Vn,jP),e(jP,fno),e(Vn,mno),e(k,gno),e(k,Xn),e(Xn,lse),e(lse,hno),e(Xn,pno),e(Xn,DP),e(DP,_no),e(Xn,uno),e(Xn,GP),e(GP,bno),e(Xn,vno),e(k,Fno),e(k,Jg),e(Jg,ise),e(ise,Tno),e(Jg,Mno),e(Jg,OP),e(OP,Eno),e(Jg,Cno),e(k,wno),e(k,Yg),e(Yg,dse),e(dse,Ano),e(Yg,Lno),e(Yg,VP),e(VP,yno),e(Yg,xno),e(k,$no),e(k,Kg),e(Kg,cse),e(cse,kno),e(Kg,Sno),e(Kg,XP),e(XP,Rno),e(Kg,Pno),e(k,Bno),e(k,zn),e(zn,fse),e(fse,Ino),e(zn,Nno),e(zn,zP),e(zP,qno),e(zn,jno),e(zn,QP),e(QP,Dno),e(zn,Gno),e(k,Ono),e(k,Zg),e(Zg,mse),e(mse,Vno),e(Zg,Xno),e(Zg,WP),e(WP,zno),e(Zg,Qno),e(k,Wno),e(k,Qn),e(Qn,gse),e(gse,Hno),e(Qn,Uno),e(Qn,HP),e(HP,Jno),e(Qn,Yno),e(Qn,UP),e(UP,Kno),e(Qn,Zno),e(k,eso),e(k,Wn),e(Wn,hse),e(hse,oso),e(Wn,rso),e(Wn,JP),e(JP,tso),e(Wn,aso),e(Wn,YP),e(YP,nso),e(Wn,sso),e(k,lso),e(k,Hn),e(Hn,pse),e(pse,iso),e(Hn,dso),e(Hn,KP),e(KP,cso),e(Hn,fso),e(Hn,ZP),e(ZP,mso),e(Hn,gso),e(k,hso),e(k,Un),e(Un,_se),e(_se,pso),e(Un,_so),e(Un,eB),e(eB,uso),e(Un,bso),e(Un,oB),e(oB,vso),e(Un,Fso),e(k,Tso),e(k,eh),e(eh,use),e(use,Mso),e(eh,Eso),e(eh,rB),e(rB,Cso),e(eh,wso),e(k,Aso),e(k,Jn),e(Jn,bse),e(bse,Lso),e(Jn,yso),e(Jn,tB),e(tB,xso),e(Jn,$so),e(Jn,aB),e(aB,kso),e(Jn,Sso),e(k,Rso),e(k,Yn),e(Yn,vse),e(vse,Pso),e(Yn,Bso),e(Yn,nB),e(nB,Iso),e(Yn,Nso),e(Yn,sB),e(sB,qso),e(Yn,jso),e(k,Dso),e(k,Kn),e(Kn,Fse),e(Fse,Gso),e(Kn,Oso),e(Kn,lB),e(lB,Vso),e(Kn,Xso),e(Kn,iB),e(iB,zso),e(Kn,Qso),e(k,Wso),e(k,Zn),e(Zn,Tse),e(Tse,Hso),e(Zn,Uso),e(Zn,dB),e(dB,Jso),e(Zn,Yso),e(Zn,cB),e(cB,Kso),e(Zn,Zso),e(k,elo),e(k,es),e(es,Mse),e(Mse,olo),e(es,rlo),e(es,fB),e(fB,tlo),e(es,alo),e(es,mB),e(mB,nlo),e(es,slo),e(k,llo),e(k,os),e(os,Ese),e(Ese,ilo),e(os,dlo),e(os,gB),e(gB,clo),e(os,flo),e(os,hB),e(hB,mlo),e(os,glo),e(k,hlo),e(k,oh),e(oh,Cse),e(Cse,plo),e(oh,_lo),e(oh,pB),e(pB,ulo),e(oh,blo),e(k,vlo),e(k,rs),e(rs,wse),e(wse,Flo),e(rs,Tlo),e(rs,_B),e(_B,Mlo),e(rs,Elo),e(rs,uB),e(uB,Clo),e(rs,wlo),e(k,Alo),e(k,rh),e(rh,Ase),e(Ase,Llo),e(rh,ylo),e(rh,bB),e(bB,xlo),e(rh,$lo),e(k,klo),e(k,ts),e(ts,Lse),e(Lse,Slo),e(ts,Rlo),e(ts,vB),e(vB,Plo),e(ts,Blo),e(ts,FB),e(FB,Ilo),e(ts,Nlo),e(k,qlo),e(k,as),e(as,yse),e(yse,jlo),e(as,Dlo),e(as,TB),e(TB,Glo),e(as,Olo),e(as,MB),e(MB,Vlo),e(as,Xlo),e(k,zlo),e(k,ns),e(ns,xse),e(xse,Qlo),e(ns,Wlo),e(ns,EB),e(EB,Hlo),e(ns,Ulo),e(ns,CB),e(CB,Jlo),e(ns,Ylo),e(k,Klo),e(k,th),e(th,$se),e($se,Zlo),e(th,eio),e(th,wB),e(wB,oio),e(th,rio),e(k,tio),e(k,ss),e(ss,kse),e(kse,aio),e(ss,nio),e(ss,AB),e(AB,sio),e(ss,lio),e(ss,LB),e(LB,iio),e(ss,dio),e(k,cio),e(k,ls),e(ls,Sse),e(Sse,fio),e(ls,mio),e(ls,yB),e(yB,gio),e(ls,hio),e(ls,xB),e(xB,pio),e(ls,_io),e(k,uio),e(k,ah),e(ah,Rse),e(Rse,bio),e(ah,vio),e(ah,$B),e($B,Fio),e(ah,Tio),e(k,Mio),e(k,is),e(is,Pse),e(Pse,Eio),e(is,Cio),e(is,kB),e(kB,wio),e(is,Aio),e(is,SB),e(SB,Lio),e(is,yio),e(k,xio),e(k,ds),e(ds,Bse),e(Bse,$io),e(ds,kio),e(ds,RB),e(RB,Sio),e(ds,Rio),e(ds,PB),e(PB,Pio),e(ds,Bio),e(k,Iio),e(k,cs),e(cs,Ise),e(Ise,Nio),e(cs,qio),e(cs,BB),e(BB,jio),e(cs,Dio),e(cs,IB),e(IB,Gio),e(cs,Oio),e(k,Vio),e(k,fs),e(fs,Nse),e(Nse,Xio),e(fs,zio),e(fs,NB),e(NB,Qio),e(fs,Wio),e(fs,qB),e(qB,Hio),e(fs,Uio),e(k,Jio),e(k,ms),e(ms,qse),e(qse,Yio),e(ms,Kio),e(ms,jB),e(jB,Zio),e(ms,edo),e(ms,DB),e(DB,odo),e(ms,rdo),e(k,tdo),e(k,gs),e(gs,jse),e(jse,ado),e(gs,ndo),e(gs,GB),e(GB,sdo),e(gs,ldo),e(gs,OB),e(OB,ido),e(gs,ddo),e(k,cdo),e(k,hs),e(hs,Dse),e(Dse,fdo),e(hs,mdo),e(hs,VB),e(VB,gdo),e(hs,hdo),e(hs,XB),e(XB,pdo),e(hs,_do),e(k,udo),e(k,ps),e(ps,Gse),e(Gse,bdo),e(ps,vdo),e(ps,zB),e(zB,Fdo),e(ps,Tdo),e(ps,QB),e(QB,Mdo),e(ps,Edo),e(k,Cdo),e(k,nh),e(nh,Ose),e(Ose,wdo),e(nh,Ado),e(nh,WB),e(WB,Ldo),e(nh,ydo),e(k,xdo),e(k,_s),e(_s,Vse),e(Vse,$do),e(_s,kdo),e(_s,HB),e(HB,Sdo),e(_s,Rdo),e(_s,UB),e(UB,Pdo),e(_s,Bdo),e(k,Ido),e(k,sh),e(sh,Xse),e(Xse,Ndo),e(sh,qdo),e(sh,JB),e(JB,jdo),e(sh,Ddo),e(k,Gdo),e(k,lh),e(lh,zse),e(zse,Odo),e(lh,Vdo),e(lh,YB),e(YB,Xdo),e(lh,zdo),e(k,Qdo),e(k,us),e(us,Qse),e(Qse,Wdo),e(us,Hdo),e(us,KB),e(KB,Udo),e(us,Jdo),e(us,ZB),e(ZB,Ydo),e(us,Kdo),e(k,Zdo),e(k,bs),e(bs,Wse),e(Wse,eco),e(bs,oco),e(bs,eI),e(eI,rco),e(bs,tco),e(bs,oI),e(oI,aco),e(bs,nco),e(k,sco),e(k,vs),e(vs,Hse),e(Hse,lco),e(vs,ico),e(vs,rI),e(rI,dco),e(vs,cco),e(vs,tI),e(tI,fco),e(vs,mco),e(k,gco),e(k,ih),e(ih,Use),e(Use,hco),e(ih,pco),e(ih,aI),e(aI,_co),e(ih,uco),e(k,bco),e(k,Fs),e(Fs,Jse),e(Jse,vco),e(Fs,Fco),e(Fs,nI),e(nI,Tco),e(Fs,Mco),e(Fs,sI),e(sI,Eco),e(Fs,Cco),e(k,wco),e(k,Ts),e(Ts,Yse),e(Yse,Aco),e(Ts,Lco),e(Ts,lI),e(lI,yco),e(Ts,xco),e(Ts,iI),e(iI,$co),e(Ts,kco),e(k,Sco),e(k,Ms),e(Ms,Kse),e(Kse,Rco),e(Ms,Pco),e(Ms,dI),e(dI,Bco),e(Ms,Ico),e(Ms,cI),e(cI,Nco),e(Ms,qco),e(k,jco),e(k,Es),e(Es,Zse),e(Zse,Dco),e(Es,Gco),e(Es,fI),e(fI,Oco),e(Es,Vco),e(Es,mI),e(mI,Xco),e(Es,zco),e(k,Qco),e(k,Cs),e(Cs,ele),e(ele,Wco),e(Cs,Hco),e(Cs,gI),e(gI,Uco),e(Cs,Jco),e(Cs,hI),e(hI,Yco),e(Cs,Kco),e(k,Zco),e(k,ws),e(ws,ole),e(ole,efo),e(ws,ofo),e(ws,pI),e(pI,rfo),e(ws,tfo),e(ws,_I),e(_I,afo),e(ws,nfo),e(k,sfo),e(k,dh),e(dh,rle),e(rle,lfo),e(dh,ifo),e(dh,uI),e(uI,dfo),e(dh,cfo),e(k,ffo),e(k,As),e(As,tle),e(tle,mfo),e(As,gfo),e(As,bI),e(bI,hfo),e(As,pfo),e(As,vI),e(vI,_fo),e(As,ufo),e(k,bfo),e(k,ch),e(ch,ale),e(ale,vfo),e(ch,Ffo),e(ch,FI),e(FI,Tfo),e(ch,Mfo),e(k,Efo),e(k,fh),e(fh,nle),e(nle,Cfo),e(fh,wfo),e(fh,TI),e(TI,Afo),e(fh,Lfo),e(k,yfo),e(k,mh),e(mh,sle),e(sle,xfo),e(mh,$fo),e(mh,MI),e(MI,kfo),e(mh,Sfo),e(k,Rfo),e(k,gh),e(gh,lle),e(lle,Pfo),e(gh,Bfo),e(gh,EI),e(EI,Ifo),e(gh,Nfo),e(k,qfo),e(k,Ls),e(Ls,ile),e(ile,jfo),e(Ls,Dfo),e(Ls,CI),e(CI,Gfo),e(Ls,Ofo),e(Ls,wI),e(wI,Vfo),e(Ls,Xfo),e(k,zfo),e(k,hh),e(hh,dle),e(dle,Qfo),e(hh,Wfo),e(hh,AI),e(AI,Hfo),e(hh,Ufo),e(k,Jfo),e(k,ys),e(ys,cle),e(cle,Yfo),e(ys,Kfo),e(ys,LI),e(LI,Zfo),e(ys,emo),e(ys,yI),e(yI,omo),e(ys,rmo),e(k,tmo),e(k,xs),e(xs,fle),e(fle,amo),e(xs,nmo),e(xs,xI),e(xI,smo),e(xs,lmo),e(xs,$I),e($I,imo),e(xs,dmo),e(k,cmo),e(k,$s),e($s,mle),e(mle,fmo),e($s,mmo),e($s,kI),e(kI,gmo),e($s,hmo),e($s,SI),e(SI,pmo),e($s,_mo),e(k,umo),e(k,ks),e(ks,gle),e(gle,bmo),e(ks,vmo),e(ks,RI),e(RI,Fmo),e(ks,Tmo),e(ks,PI),e(PI,Mmo),e(ks,Emo),e(k,Cmo),e(k,Ss),e(Ss,hle),e(hle,wmo),e(Ss,Amo),e(Ss,BI),e(BI,Lmo),e(Ss,ymo),e(Ss,II),e(II,xmo),e(Ss,$mo),e(k,kmo),e(k,Rs),e(Rs,ple),e(ple,Smo),e(Rs,Rmo),e(Rs,NI),e(NI,Pmo),e(Rs,Bmo),e(Rs,qI),e(qI,Imo),e(Rs,Nmo),e(k,qmo),e(k,ph),e(ph,_le),e(_le,jmo),e(ph,Dmo),e(ph,jI),e(jI,Gmo),e(ph,Omo),e(k,Vmo),e(k,_h),e(_h,ule),e(ule,Xmo),e(_h,zmo),e(_h,DI),e(DI,Qmo),e(_h,Wmo),e(k,Hmo),e(k,Ps),e(Ps,ble),e(ble,Umo),e(Ps,Jmo),e(Ps,GI),e(GI,Ymo),e(Ps,Kmo),e(Ps,OI),e(OI,Zmo),e(Ps,ego),e(k,ogo),e(k,Bs),e(Bs,vle),e(vle,rgo),e(Bs,tgo),e(Bs,VI),e(VI,ago),e(Bs,ngo),e(Bs,XI),e(XI,sgo),e(Bs,lgo),e(k,igo),e(k,Is),e(Is,Fle),e(Fle,dgo),e(Is,cgo),e(Is,zI),e(zI,fgo),e(Is,mgo),e(Is,QI),e(QI,ggo),e(Is,hgo),e(k,pgo),e(k,uh),e(uh,Tle),e(Tle,_go),e(uh,ugo),e(uh,WI),e(WI,bgo),e(uh,vgo),e(k,Fgo),e(k,bh),e(bh,Mle),e(Mle,Tgo),e(bh,Mgo),e(bh,HI),e(HI,Ego),e(bh,Cgo),e(k,wgo),e(k,vh),e(vh,Ele),e(Ele,Ago),e(vh,Lgo),e(vh,UI),e(UI,ygo),e(vh,xgo),e(k,$go),e(k,Ns),e(Ns,Cle),e(Cle,kgo),e(Ns,Sgo),e(Ns,JI),e(JI,Rgo),e(Ns,Pgo),e(Ns,YI),e(YI,Bgo),e(Ns,Igo),e(k,Ngo),e(k,qs),e(qs,wle),e(wle,qgo),e(qs,jgo),e(qs,KI),e(KI,Dgo),e(qs,Ggo),e(qs,ZI),e(ZI,Ogo),e(qs,Vgo),e(k,Xgo),e(k,Fh),e(Fh,Ale),e(Ale,zgo),e(Fh,Qgo),e(Fh,eN),e(eN,Wgo),e(Fh,Hgo),e(k,Ugo),e(k,Th),e(Th,Lle),e(Lle,Jgo),e(Th,Ygo),e(Th,oN),e(oN,Kgo),e(Th,Zgo),e(k,eho),e(k,Mh),e(Mh,yle),e(yle,oho),e(Mh,rho),e(Mh,rN),e(rN,tho),e(Mh,aho),e(k,nho),e(k,js),e(js,xle),e(xle,sho),e(js,lho),e(js,tN),e(tN,iho),e(js,dho),e(js,aN),e(aN,cho),e(js,fho),e(k,mho),e(k,Eh),e(Eh,$le),e($le,gho),e(Eh,hho),e(Eh,nN),e(nN,pho),e(Eh,_ho),e(k,uho),e(k,Ch),e(Ch,kle),e(kle,bho),e(Ch,vho),e(Ch,sN),e(sN,Fho),e(Ch,Tho),e(k,Mho),e(k,Ds),e(Ds,Sle),e(Sle,Eho),e(Ds,Cho),e(Ds,lN),e(lN,who),e(Ds,Aho),e(Ds,iN),e(iN,Lho),e(Ds,yho),e(k,xho),e(k,Gs),e(Gs,Rle),e(Rle,$ho),e(Gs,kho),e(Gs,dN),e(dN,Sho),e(Gs,Rho),e(Gs,cN),e(cN,Pho),e(Gs,Bho),e(k,Iho),e(k,Os),e(Os,Ple),e(Ple,Nho),e(Os,qho),e(Os,fN),e(fN,jho),e(Os,Dho),e(Os,mN),e(mN,Gho),e(Os,Oho),e(k,Vho),e(k,Vs),e(Vs,Ble),e(Ble,Xho),e(Vs,zho),e(Vs,gN),e(gN,Qho),e(Vs,Who),e(Vs,hN),e(hN,Hho),e(Vs,Uho),e(Lr,Jho),M(wh,Lr,null),e(Ao,Yho),e(Ao,Ah),M(H7,Ah,null),e(Ah,Kho),e(Ah,Ile),e(Ile,Zho),b(f,vOe,u),b(f,Ri,u),e(Ri,Lh),e(Lh,Nle),M(U7,Nle,null),e(Ri,epo),e(Ri,qle),e(qle,opo),b(f,FOe,u),b(f,Lo,u),M(J7,Lo,null),e(Lo,rpo),e(Lo,Y7),e(Y7,tpo),e(Y7,pN),e(pN,apo),e(Y7,npo),e(Lo,spo),e(Lo,K7),e(K7,lpo),e(K7,jle),e(jle,ipo),e(K7,dpo),e(Lo,cpo),e(Lo,He),M(Z7,He,null),e(He,fpo),e(He,Dle),e(Dle,mpo),e(He,gpo),e(He,Sa),e(Sa,hpo),e(Sa,Gle),e(Gle,ppo),e(Sa,_po),e(Sa,Ole),e(Ole,upo),e(Sa,bpo),e(Sa,Vle),e(Vle,vpo),e(Sa,Fpo),e(He,Tpo),e(He,Y),e(Y,yh),e(yh,Xle),e(Xle,Mpo),e(yh,Epo),e(yh,_N),e(_N,Cpo),e(yh,wpo),e(Y,Apo),e(Y,xh),e(xh,zle),e(zle,Lpo),e(xh,ypo),e(xh,uN),e(uN,xpo),e(xh,$po),e(Y,kpo),e(Y,$h),e($h,Qle),e(Qle,Spo),e($h,Rpo),e($h,bN),e(bN,Ppo),e($h,Bpo),e(Y,Ipo),e(Y,kh),e(kh,Wle),e(Wle,Npo),e(kh,qpo),e(kh,vN),e(vN,jpo),e(kh,Dpo),e(Y,Gpo),e(Y,Sh),e(Sh,Hle),e(Hle,Opo),e(Sh,Vpo),e(Sh,FN),e(FN,Xpo),e(Sh,zpo),e(Y,Qpo),e(Y,Rh),e(Rh,Ule),e(Ule,Wpo),e(Rh,Hpo),e(Rh,TN),e(TN,Upo),e(Rh,Jpo),e(Y,Ypo),e(Y,Ph),e(Ph,Jle),e(Jle,Kpo),e(Ph,Zpo),e(Ph,MN),e(MN,e_o),e(Ph,o_o),e(Y,r_o),e(Y,Bh),e(Bh,Yle),e(Yle,t_o),e(Bh,a_o),e(Bh,EN),e(EN,n_o),e(Bh,s_o),e(Y,l_o),e(Y,Ih),e(Ih,Kle),e(Kle,i_o),e(Ih,d_o),e(Ih,CN),e(CN,c_o),e(Ih,f_o),e(Y,m_o),e(Y,Nh),e(Nh,Zle),e(Zle,g_o),e(Nh,h_o),e(Nh,wN),e(wN,p_o),e(Nh,__o),e(Y,u_o),e(Y,qh),e(qh,eie),e(eie,b_o),e(qh,v_o),e(qh,AN),e(AN,F_o),e(qh,T_o),e(Y,M_o),e(Y,jh),e(jh,oie),e(oie,E_o),e(jh,C_o),e(jh,LN),e(LN,w_o),e(jh,A_o),e(Y,L_o),e(Y,Dh),e(Dh,rie),e(rie,y_o),e(Dh,x_o),e(Dh,yN),e(yN,$_o),e(Dh,k_o),e(Y,S_o),e(Y,Gh),e(Gh,tie),e(tie,R_o),e(Gh,P_o),e(Gh,xN),e(xN,B_o),e(Gh,I_o),e(Y,N_o),e(Y,Oh),e(Oh,aie),e(aie,q_o),e(Oh,j_o),e(Oh,$N),e($N,D_o),e(Oh,G_o),e(Y,O_o),e(Y,Vh),e(Vh,nie),e(nie,V_o),e(Vh,X_o),e(Vh,kN),e(kN,z_o),e(Vh,Q_o),e(Y,W_o),e(Y,Xh),e(Xh,sie),e(sie,H_o),e(Xh,U_o),e(Xh,SN),e(SN,J_o),e(Xh,Y_o),e(Y,K_o),e(Y,zh),e(zh,lie),e(lie,Z_o),e(zh,euo),e(zh,RN),e(RN,ouo),e(zh,ruo),e(Y,tuo),e(Y,Qh),e(Qh,iie),e(iie,auo),e(Qh,nuo),e(Qh,PN),e(PN,suo),e(Qh,luo),e(Y,iuo),e(Y,Wh),e(Wh,die),e(die,duo),e(Wh,cuo),e(Wh,BN),e(BN,fuo),e(Wh,muo),e(Y,guo),e(Y,Hh),e(Hh,cie),e(cie,huo),e(Hh,puo),e(Hh,IN),e(IN,_uo),e(Hh,uuo),e(Y,buo),e(Y,Uh),e(Uh,fie),e(fie,vuo),e(Uh,Fuo),e(Uh,NN),e(NN,Tuo),e(Uh,Muo),e(Y,Euo),e(Y,Jh),e(Jh,mie),e(mie,Cuo),e(Jh,wuo),e(Jh,qN),e(qN,Auo),e(Jh,Luo),e(Y,yuo),e(Y,Yh),e(Yh,gie),e(gie,xuo),e(Yh,$uo),e(Yh,jN),e(jN,kuo),e(Yh,Suo),e(Y,Ruo),e(Y,Kh),e(Kh,hie),e(hie,Puo),e(Kh,Buo),e(Kh,DN),e(DN,Iuo),e(Kh,Nuo),e(Y,quo),e(Y,Zh),e(Zh,pie),e(pie,juo),e(Zh,Duo),e(Zh,GN),e(GN,Guo),e(Zh,Ouo),e(Y,Vuo),e(Y,ep),e(ep,_ie),e(_ie,Xuo),e(ep,zuo),e(ep,ON),e(ON,Quo),e(ep,Wuo),e(Y,Huo),e(Y,op),e(op,uie),e(uie,Uuo),e(op,Juo),e(op,VN),e(VN,Yuo),e(op,Kuo),e(Y,Zuo),e(Y,rp),e(rp,bie),e(bie,e1o),e(rp,o1o),e(rp,XN),e(XN,r1o),e(rp,t1o),e(Y,a1o),e(Y,tp),e(tp,vie),e(vie,n1o),e(tp,s1o),e(tp,zN),e(zN,l1o),e(tp,i1o),e(Y,d1o),e(Y,ap),e(ap,Fie),e(Fie,c1o),e(ap,f1o),e(ap,QN),e(QN,m1o),e(ap,g1o),e(Y,h1o),e(Y,np),e(np,Tie),e(Tie,p1o),e(np,_1o),e(np,WN),e(WN,u1o),e(np,b1o),e(He,v1o),M(sp,He,null),e(He,F1o),M(lp,He,null),e(Lo,T1o),e(Lo,ip),M(ey,ip,null),e(ip,M1o),e(ip,Mie),e(Mie,E1o),b(f,TOe,u),b(f,Pi,u),e(Pi,dp),e(dp,Eie),M(oy,Eie,null),e(Pi,C1o),e(Pi,Cie),e(Cie,w1o),b(f,MOe,u),b(f,yo,u),M(ry,yo,null),e(yo,A1o),e(yo,ty),e(ty,L1o),e(ty,HN),e(HN,y1o),e(ty,x1o),e(yo,$1o),e(yo,ay),e(ay,k1o),e(ay,wie),e(wie,S1o),e(ay,R1o),e(yo,P1o),e(yo,Ue),M(ny,Ue,null),e(Ue,B1o),e(Ue,Aie),e(Aie,I1o),e(Ue,N1o),e(Ue,Bi),e(Bi,q1o),e(Bi,Lie),e(Lie,j1o),e(Bi,D1o),e(Bi,yie),e(yie,G1o),e(Bi,O1o),e(Ue,V1o),e(Ue,he),e(he,cp),e(cp,xie),e(xie,X1o),e(cp,z1o),e(cp,UN),e(UN,Q1o),e(cp,W1o),e(he,H1o),e(he,fp),e(fp,$ie),e($ie,U1o),e(fp,J1o),e(fp,kie),e(kie,Y1o),e(fp,K1o),e(he,Z1o),e(he,mp),e(mp,Sie),e(Sie,e2o),e(mp,o2o),e(mp,JN),e(JN,r2o),e(mp,t2o),e(he,a2o),e(he,gp),e(gp,Rie),e(Rie,n2o),e(gp,s2o),e(gp,YN),e(YN,l2o),e(gp,i2o),e(he,d2o),e(he,hp),e(hp,Pie),e(Pie,c2o),e(hp,f2o),e(hp,KN),e(KN,m2o),e(hp,g2o),e(he,h2o),e(he,pp),e(pp,Bie),e(Bie,p2o),e(pp,_2o),e(pp,ZN),e(ZN,u2o),e(pp,b2o),e(he,v2o),e(he,_p),e(_p,Iie),e(Iie,F2o),e(_p,T2o),e(_p,eq),e(eq,M2o),e(_p,E2o),e(he,C2o),e(he,up),e(up,Nie),e(Nie,w2o),e(up,A2o),e(up,oq),e(oq,L2o),e(up,y2o),e(he,x2o),e(he,bp),e(bp,qie),e(qie,$2o),e(bp,k2o),e(bp,rq),e(rq,S2o),e(bp,R2o),e(he,P2o),e(he,vp),e(vp,jie),e(jie,B2o),e(vp,I2o),e(vp,tq),e(tq,N2o),e(vp,q2o),e(he,j2o),e(he,Fp),e(Fp,Die),e(Die,D2o),e(Fp,G2o),e(Fp,aq),e(aq,O2o),e(Fp,V2o),e(he,X2o),e(he,Tp),e(Tp,Gie),e(Gie,z2o),e(Tp,Q2o),e(Tp,nq),e(nq,W2o),e(Tp,H2o),e(he,U2o),e(he,Mp),e(Mp,Oie),e(Oie,J2o),e(Mp,Y2o),e(Mp,sq),e(sq,K2o),e(Mp,Z2o),e(he,ebo),e(he,Ep),e(Ep,Vie),e(Vie,obo),e(Ep,rbo),e(Ep,lq),e(lq,tbo),e(Ep,abo),e(he,nbo),e(he,Cp),e(Cp,Xie),e(Xie,sbo),e(Cp,lbo),e(Cp,iq),e(iq,ibo),e(Cp,dbo),e(he,cbo),e(he,wp),e(wp,zie),e(zie,fbo),e(wp,mbo),e(wp,dq),e(dq,gbo),e(wp,hbo),e(he,pbo),e(he,Ap),e(Ap,Qie),e(Qie,_bo),e(Ap,ubo),e(Ap,cq),e(cq,bbo),e(Ap,vbo),e(Ue,Fbo),M(Lp,Ue,null),e(Ue,Tbo),M(yp,Ue,null),e(yo,Mbo),e(yo,xp),M(sy,xp,null),e(xp,Ebo),e(xp,Wie),e(Wie,Cbo),b(f,EOe,u),b(f,Ii,u),e(Ii,$p),e($p,Hie),M(ly,Hie,null),e(Ii,wbo),e(Ii,Uie),e(Uie,Abo),b(f,COe,u),b(f,xo,u),M(iy,xo,null),e(xo,Lbo),e(xo,Ni),e(Ni,ybo),e(Ni,fq),e(fq,xbo),e(Ni,$bo),e(Ni,mq),e(mq,kbo),e(Ni,Sbo),e(xo,Rbo),e(xo,dy),e(dy,Pbo),e(dy,Jie),e(Jie,Bbo),e(dy,Ibo),e(xo,Nbo),e(xo,nt),M(cy,nt,null),e(nt,qbo),e(nt,Yie),e(Yie,jbo),e(nt,Dbo),e(nt,qi),e(qi,Gbo),e(qi,Kie),e(Kie,Obo),e(qi,Vbo),e(qi,gq),e(gq,Xbo),e(qi,zbo),e(nt,Qbo),M(kp,nt,null),e(xo,Wbo),e(xo,Je),M(fy,Je,null),e(Je,Hbo),e(Je,Zie),e(Zie,Ubo),e(Je,Jbo),e(Je,Ra),e(Ra,Ybo),e(Ra,ede),e(ede,Kbo),e(Ra,Zbo),e(Ra,ode),e(ode,e4o),e(Ra,o4o),e(Ra,rde),e(rde,r4o),e(Ra,t4o),e(Je,a4o),e(Je,y),e(y,Sp),e(Sp,tde),e(tde,n4o),e(Sp,s4o),e(Sp,hq),e(hq,l4o),e(Sp,i4o),e(y,d4o),e(y,Rp),e(Rp,ade),e(ade,c4o),e(Rp,f4o),e(Rp,pq),e(pq,m4o),e(Rp,g4o),e(y,h4o),e(y,Pp),e(Pp,nde),e(nde,p4o),e(Pp,_4o),e(Pp,_q),e(_q,u4o),e(Pp,b4o),e(y,v4o),e(y,Bp),e(Bp,sde),e(sde,F4o),e(Bp,T4o),e(Bp,uq),e(uq,M4o),e(Bp,E4o),e(y,C4o),e(y,Ip),e(Ip,lde),e(lde,w4o),e(Ip,A4o),e(Ip,bq),e(bq,L4o),e(Ip,y4o),e(y,x4o),e(y,Np),e(Np,ide),e(ide,$4o),e(Np,k4o),e(Np,vq),e(vq,S4o),e(Np,R4o),e(y,P4o),e(y,qp),e(qp,dde),e(dde,B4o),e(qp,I4o),e(qp,Fq),e(Fq,N4o),e(qp,q4o),e(y,j4o),e(y,jp),e(jp,cde),e(cde,D4o),e(jp,G4o),e(jp,Tq),e(Tq,O4o),e(jp,V4o),e(y,X4o),e(y,Dp),e(Dp,fde),e(fde,z4o),e(Dp,Q4o),e(Dp,Mq),e(Mq,W4o),e(Dp,H4o),e(y,U4o),e(y,Gp),e(Gp,mde),e(mde,J4o),e(Gp,Y4o),e(Gp,Eq),e(Eq,K4o),e(Gp,Z4o),e(y,e5o),e(y,Op),e(Op,gde),e(gde,o5o),e(Op,r5o),e(Op,Cq),e(Cq,t5o),e(Op,a5o),e(y,n5o),e(y,Vp),e(Vp,hde),e(hde,s5o),e(Vp,l5o),e(Vp,wq),e(wq,i5o),e(Vp,d5o),e(y,c5o),e(y,Xp),e(Xp,pde),e(pde,f5o),e(Xp,m5o),e(Xp,Aq),e(Aq,g5o),e(Xp,h5o),e(y,p5o),e(y,zp),e(zp,_de),e(_de,_5o),e(zp,u5o),e(zp,Lq),e(Lq,b5o),e(zp,v5o),e(y,F5o),e(y,Qp),e(Qp,ude),e(ude,T5o),e(Qp,M5o),e(Qp,yq),e(yq,E5o),e(Qp,C5o),e(y,w5o),e(y,Wp),e(Wp,bde),e(bde,A5o),e(Wp,L5o),e(Wp,xq),e(xq,y5o),e(Wp,x5o),e(y,$5o),e(y,Hp),e(Hp,vde),e(vde,k5o),e(Hp,S5o),e(Hp,$q),e($q,R5o),e(Hp,P5o),e(y,B5o),e(y,Up),e(Up,Fde),e(Fde,I5o),e(Up,N5o),e(Up,kq),e(kq,q5o),e(Up,j5o),e(y,D5o),e(y,Jp),e(Jp,Tde),e(Tde,G5o),e(Jp,O5o),e(Jp,Sq),e(Sq,V5o),e(Jp,X5o),e(y,z5o),e(y,Yp),e(Yp,Mde),e(Mde,Q5o),e(Yp,W5o),e(Yp,Rq),e(Rq,H5o),e(Yp,U5o),e(y,J5o),e(y,Kp),e(Kp,Ede),e(Ede,Y5o),e(Kp,K5o),e(Kp,Pq),e(Pq,Z5o),e(Kp,e3o),e(y,o3o),e(y,Zp),e(Zp,Cde),e(Cde,r3o),e(Zp,t3o),e(Zp,Bq),e(Bq,a3o),e(Zp,n3o),e(y,s3o),e(y,e_),e(e_,wde),e(wde,l3o),e(e_,i3o),e(e_,Iq),e(Iq,d3o),e(e_,c3o),e(y,f3o),e(y,o_),e(o_,Ade),e(Ade,m3o),e(o_,g3o),e(o_,Nq),e(Nq,h3o),e(o_,p3o),e(y,_3o),e(y,r_),e(r_,Lde),e(Lde,u3o),e(r_,b3o),e(r_,qq),e(qq,v3o),e(r_,F3o),e(y,T3o),e(y,t_),e(t_,yde),e(yde,M3o),e(t_,E3o),e(t_,jq),e(jq,C3o),e(t_,w3o),e(y,A3o),e(y,a_),e(a_,xde),e(xde,L3o),e(a_,y3o),e(a_,Dq),e(Dq,x3o),e(a_,$3o),e(y,k3o),e(y,n_),e(n_,$de),e($de,S3o),e(n_,R3o),e(n_,Gq),e(Gq,P3o),e(n_,B3o),e(y,I3o),e(y,s_),e(s_,kde),e(kde,N3o),e(s_,q3o),e(s_,Oq),e(Oq,j3o),e(s_,D3o),e(y,G3o),e(y,l_),e(l_,Sde),e(Sde,O3o),e(l_,V3o),e(l_,Vq),e(Vq,X3o),e(l_,z3o),e(y,Q3o),e(y,i_),e(i_,Rde),e(Rde,W3o),e(i_,H3o),e(i_,Xq),e(Xq,U3o),e(i_,J3o),e(y,Y3o),e(y,d_),e(d_,Pde),e(Pde,K3o),e(d_,Z3o),e(d_,zq),e(zq,evo),e(d_,ovo),e(y,rvo),e(y,c_),e(c_,Bde),e(Bde,tvo),e(c_,avo),e(c_,Qq),e(Qq,nvo),e(c_,svo),e(y,lvo),e(y,f_),e(f_,Ide),e(Ide,ivo),e(f_,dvo),e(f_,Wq),e(Wq,cvo),e(f_,fvo),e(y,mvo),e(y,Xs),e(Xs,Nde),e(Nde,gvo),e(Xs,hvo),e(Xs,Hq),e(Hq,pvo),e(Xs,_vo),e(Xs,Uq),e(Uq,uvo),e(Xs,bvo),e(y,vvo),e(y,m_),e(m_,qde),e(qde,Fvo),e(m_,Tvo),e(m_,Jq),e(Jq,Mvo),e(m_,Evo),e(y,Cvo),e(y,g_),e(g_,jde),e(jde,wvo),e(g_,Avo),e(g_,Yq),e(Yq,Lvo),e(g_,yvo),e(y,xvo),e(y,h_),e(h_,Dde),e(Dde,$vo),e(h_,kvo),e(h_,Kq),e(Kq,Svo),e(h_,Rvo),e(y,Pvo),e(y,p_),e(p_,Gde),e(Gde,Bvo),e(p_,Ivo),e(p_,Zq),e(Zq,Nvo),e(p_,qvo),e(y,jvo),e(y,__),e(__,Ode),e(Ode,Dvo),e(__,Gvo),e(__,ej),e(ej,Ovo),e(__,Vvo),e(y,Xvo),e(y,u_),e(u_,Vde),e(Vde,zvo),e(u_,Qvo),e(u_,oj),e(oj,Wvo),e(u_,Hvo),e(y,Uvo),e(y,b_),e(b_,Xde),e(Xde,Jvo),e(b_,Yvo),e(b_,rj),e(rj,Kvo),e(b_,Zvo),e(y,eFo),e(y,v_),e(v_,zde),e(zde,oFo),e(v_,rFo),e(v_,tj),e(tj,tFo),e(v_,aFo),e(y,nFo),e(y,F_),e(F_,Qde),e(Qde,sFo),e(F_,lFo),e(F_,aj),e(aj,iFo),e(F_,dFo),e(y,cFo),e(y,T_),e(T_,Wde),e(Wde,fFo),e(T_,mFo),e(T_,nj),e(nj,gFo),e(T_,hFo),e(y,pFo),e(y,M_),e(M_,Hde),e(Hde,_Fo),e(M_,uFo),e(M_,sj),e(sj,bFo),e(M_,vFo),e(y,FFo),e(y,E_),e(E_,Ude),e(Ude,TFo),e(E_,MFo),e(E_,lj),e(lj,EFo),e(E_,CFo),e(y,wFo),e(y,C_),e(C_,Jde),e(Jde,AFo),e(C_,LFo),e(C_,ij),e(ij,yFo),e(C_,xFo),e(y,$Fo),e(y,w_),e(w_,Yde),e(Yde,kFo),e(w_,SFo),e(w_,dj),e(dj,RFo),e(w_,PFo),e(y,BFo),e(y,A_),e(A_,Kde),e(Kde,IFo),e(A_,NFo),e(A_,cj),e(cj,qFo),e(A_,jFo),e(y,DFo),e(y,L_),e(L_,Zde),e(Zde,GFo),e(L_,OFo),e(L_,fj),e(fj,VFo),e(L_,XFo),e(y,zFo),e(y,y_),e(y_,ece),e(ece,QFo),e(y_,WFo),e(y_,mj),e(mj,HFo),e(y_,UFo),e(y,JFo),e(y,x_),e(x_,oce),e(oce,YFo),e(x_,KFo),e(x_,gj),e(gj,ZFo),e(x_,e6o),e(y,o6o),e(y,$_),e($_,rce),e(rce,r6o),e($_,t6o),e($_,hj),e(hj,a6o),e($_,n6o),e(y,s6o),e(y,k_),e(k_,tce),e(tce,l6o),e(k_,i6o),e(k_,pj),e(pj,d6o),e(k_,c6o),e(y,f6o),e(y,S_),e(S_,ace),e(ace,m6o),e(S_,g6o),e(S_,_j),e(_j,h6o),e(S_,p6o),e(y,_6o),e(y,R_),e(R_,nce),e(nce,u6o),e(R_,b6o),e(R_,uj),e(uj,v6o),e(R_,F6o),e(y,T6o),e(y,P_),e(P_,sce),e(sce,M6o),e(P_,E6o),e(P_,bj),e(bj,C6o),e(P_,w6o),e(y,A6o),e(y,B_),e(B_,lce),e(lce,L6o),e(B_,y6o),e(B_,vj),e(vj,x6o),e(B_,$6o),e(y,k6o),e(y,I_),e(I_,ice),e(ice,S6o),e(I_,R6o),e(I_,Fj),e(Fj,P6o),e(I_,B6o),e(y,I6o),e(y,N_),e(N_,dce),e(dce,N6o),e(N_,q6o),e(N_,Tj),e(Tj,j6o),e(N_,D6o),e(y,G6o),e(y,q_),e(q_,cce),e(cce,O6o),e(q_,V6o),e(q_,Mj),e(Mj,X6o),e(q_,z6o),e(y,Q6o),e(y,j_),e(j_,fce),e(fce,W6o),e(j_,H6o),e(j_,Ej),e(Ej,U6o),e(j_,J6o),e(y,Y6o),e(y,D_),e(D_,mce),e(mce,K6o),e(D_,Z6o),e(D_,Cj),e(Cj,eTo),e(D_,oTo),e(y,rTo),e(y,G_),e(G_,gce),e(gce,tTo),e(G_,aTo),e(G_,wj),e(wj,nTo),e(G_,sTo),e(y,lTo),e(y,O_),e(O_,hce),e(hce,iTo),e(O_,dTo),e(O_,Aj),e(Aj,cTo),e(O_,fTo),e(y,mTo),e(y,V_),e(V_,pce),e(pce,gTo),e(V_,hTo),e(V_,Lj),e(Lj,pTo),e(V_,_To),e(y,uTo),e(y,X_),e(X_,_ce),e(_ce,bTo),e(X_,vTo),e(X_,yj),e(yj,FTo),e(X_,TTo),e(y,MTo),e(y,z_),e(z_,uce),e(uce,ETo),e(z_,CTo),e(z_,xj),e(xj,wTo),e(z_,ATo),e(y,LTo),e(y,Q_),e(Q_,bce),e(bce,yTo),e(Q_,xTo),e(Q_,$j),e($j,$To),e(Q_,kTo),e(y,STo),e(y,W_),e(W_,vce),e(vce,RTo),e(W_,PTo),e(W_,kj),e(kj,BTo),e(W_,ITo),e(y,NTo),e(y,H_),e(H_,Fce),e(Fce,qTo),e(H_,jTo),e(H_,Sj),e(Sj,DTo),e(H_,GTo),e(y,OTo),e(y,U_),e(U_,Tce),e(Tce,VTo),e(U_,XTo),e(U_,Rj),e(Rj,zTo),e(U_,QTo),e(y,WTo),e(y,J_),e(J_,Mce),e(Mce,HTo),e(J_,UTo),e(J_,Pj),e(Pj,JTo),e(J_,YTo),e(y,KTo),e(y,Y_),e(Y_,Ece),e(Ece,ZTo),e(Y_,eMo),e(Y_,Bj),e(Bj,oMo),e(Y_,rMo),e(y,tMo),e(y,K_),e(K_,Cce),e(Cce,aMo),e(K_,nMo),e(K_,Ij),e(Ij,sMo),e(K_,lMo),e(y,iMo),e(y,Z_),e(Z_,wce),e(wce,dMo),e(Z_,cMo),e(Z_,Nj),e(Nj,fMo),e(Z_,mMo),e(y,gMo),e(y,eu),e(eu,Ace),e(Ace,hMo),e(eu,pMo),e(eu,qj),e(qj,_Mo),e(eu,uMo),e(y,bMo),e(y,ou),e(ou,Lce),e(Lce,vMo),e(ou,FMo),e(ou,jj),e(jj,TMo),e(ou,MMo),e(y,EMo),e(y,ru),e(ru,yce),e(yce,CMo),e(ru,wMo),e(ru,Dj),e(Dj,AMo),e(ru,LMo),e(y,yMo),e(y,tu),e(tu,xce),e(xce,xMo),e(tu,$Mo),e(tu,Gj),e(Gj,kMo),e(tu,SMo),e(y,RMo),e(y,au),e(au,$ce),e($ce,PMo),e(au,BMo),e(au,Oj),e(Oj,IMo),e(au,NMo),e(y,qMo),e(y,nu),e(nu,kce),e(kce,jMo),e(nu,DMo),e(nu,Vj),e(Vj,GMo),e(nu,OMo),e(y,VMo),e(y,su),e(su,Sce),e(Sce,XMo),e(su,zMo),e(su,Xj),e(Xj,QMo),e(su,WMo),e(y,HMo),e(y,lu),e(lu,Rce),e(Rce,UMo),e(lu,JMo),e(lu,zj),e(zj,YMo),e(lu,KMo),e(y,ZMo),e(y,iu),e(iu,Pce),e(Pce,eEo),e(iu,oEo),e(iu,Qj),e(Qj,rEo),e(iu,tEo),e(y,aEo),e(y,du),e(du,Bce),e(Bce,nEo),e(du,sEo),e(du,Wj),e(Wj,lEo),e(du,iEo),e(y,dEo),e(y,cu),e(cu,Ice),e(Ice,cEo),e(cu,fEo),e(cu,Hj),e(Hj,mEo),e(cu,gEo),e(y,hEo),e(y,fu),e(fu,Nce),e(Nce,pEo),e(fu,_Eo),e(fu,Uj),e(Uj,uEo),e(fu,bEo),e(y,vEo),e(y,mu),e(mu,qce),e(qce,FEo),e(mu,TEo),e(mu,Jj),e(Jj,MEo),e(mu,EEo),e(y,CEo),e(y,gu),e(gu,jce),e(jce,wEo),e(gu,AEo),e(gu,Yj),e(Yj,LEo),e(gu,yEo),e(y,xEo),e(y,hu),e(hu,Dce),e(Dce,$Eo),e(hu,kEo),e(hu,Kj),e(Kj,SEo),e(hu,REo),e(y,PEo),e(y,pu),e(pu,Gce),e(Gce,BEo),e(pu,IEo),e(pu,Zj),e(Zj,NEo),e(pu,qEo),e(y,jEo),e(y,_u),e(_u,Oce),e(Oce,DEo),e(_u,GEo),e(_u,eD),e(eD,OEo),e(_u,VEo),e(y,XEo),e(y,uu),e(uu,Vce),e(Vce,zEo),e(uu,QEo),e(uu,oD),e(oD,WEo),e(uu,HEo),e(y,UEo),e(y,bu),e(bu,Xce),e(Xce,JEo),e(bu,YEo),e(bu,rD),e(rD,KEo),e(bu,ZEo),e(y,eCo),e(y,vu),e(vu,zce),e(zce,oCo),e(vu,rCo),e(vu,tD),e(tD,tCo),e(vu,aCo),e(y,nCo),e(y,Fu),e(Fu,Qce),e(Qce,sCo),e(Fu,lCo),e(Fu,aD),e(aD,iCo),e(Fu,dCo),e(y,cCo),e(y,Tu),e(Tu,Wce),e(Wce,fCo),e(Tu,mCo),e(Tu,nD),e(nD,gCo),e(Tu,hCo),e(y,pCo),e(y,Mu),e(Mu,Hce),e(Hce,_Co),e(Mu,uCo),e(Mu,sD),e(sD,bCo),e(Mu,vCo),e(y,FCo),e(y,Eu),e(Eu,Uce),e(Uce,TCo),e(Eu,MCo),e(Eu,lD),e(lD,ECo),e(Eu,CCo),e(y,wCo),e(y,Cu),e(Cu,Jce),e(Jce,ACo),e(Cu,LCo),e(Cu,iD),e(iD,yCo),e(Cu,xCo),e(y,$Co),e(y,wu),e(wu,Yce),e(Yce,kCo),e(wu,SCo),e(wu,dD),e(dD,RCo),e(wu,PCo),e(y,BCo),e(y,Au),e(Au,Kce),e(Kce,ICo),e(Au,NCo),e(Au,cD),e(cD,qCo),e(Au,jCo),e(y,DCo),e(y,Lu),e(Lu,Zce),e(Zce,GCo),e(Lu,OCo),e(Lu,fD),e(fD,VCo),e(Lu,XCo),e(y,zCo),e(y,yu),e(yu,efe),e(efe,QCo),e(yu,WCo),e(yu,mD),e(mD,HCo),e(yu,UCo),e(y,JCo),e(y,xu),e(xu,ofe),e(ofe,YCo),e(xu,KCo),e(xu,gD),e(gD,ZCo),e(xu,e0o),e(y,o0o),e(y,$u),e($u,rfe),e(rfe,r0o),e($u,t0o),e($u,hD),e(hD,a0o),e($u,n0o),e(Je,s0o),e(Je,ku),e(ku,l0o),e(ku,tfe),e(tfe,i0o),e(ku,d0o),e(ku,afe),e(afe,c0o),e(Je,f0o),M(Su,Je,null),b(f,wOe,u),b(f,ji,u),e(ji,Ru),e(Ru,nfe),M(my,nfe,null),e(ji,m0o),e(ji,sfe),e(sfe,g0o),b(f,AOe,u),b(f,$o,u),M(gy,$o,null),e($o,h0o),e($o,Di),e(Di,p0o),e(Di,pD),e(pD,_0o),e(Di,u0o),e(Di,_D),e(_D,b0o),e(Di,v0o),e($o,F0o),e($o,hy),e(hy,T0o),e(hy,lfe),e(lfe,M0o),e(hy,E0o),e($o,C0o),e($o,st),M(py,st,null),e(st,w0o),e(st,ife),e(ife,A0o),e(st,L0o),e(st,Gi),e(Gi,y0o),e(Gi,dfe),e(dfe,x0o),e(Gi,$0o),e(Gi,uD),e(uD,k0o),e(Gi,S0o),e(st,R0o),M(Pu,st,null),e($o,P0o),e($o,Ye),M(_y,Ye,null),e(Ye,B0o),e(Ye,cfe),e(cfe,I0o),e(Ye,N0o),e(Ye,Pa),e(Pa,q0o),e(Pa,ffe),e(ffe,j0o),e(Pa,D0o),e(Pa,mfe),e(mfe,G0o),e(Pa,O0o),e(Pa,gfe),e(gfe,V0o),e(Pa,X0o),e(Ye,z0o),e(Ye,G),e(G,Bu),e(Bu,hfe),e(hfe,Q0o),e(Bu,W0o),e(Bu,bD),e(bD,H0o),e(Bu,U0o),e(G,J0o),e(G,Iu),e(Iu,pfe),e(pfe,Y0o),e(Iu,K0o),e(Iu,vD),e(vD,Z0o),e(Iu,ewo),e(G,owo),e(G,Nu),e(Nu,_fe),e(_fe,rwo),e(Nu,two),e(Nu,FD),e(FD,awo),e(Nu,nwo),e(G,swo),e(G,qu),e(qu,ufe),e(ufe,lwo),e(qu,iwo),e(qu,TD),e(TD,dwo),e(qu,cwo),e(G,fwo),e(G,ju),e(ju,bfe),e(bfe,mwo),e(ju,gwo),e(ju,MD),e(MD,hwo),e(ju,pwo),e(G,_wo),e(G,Du),e(Du,vfe),e(vfe,uwo),e(Du,bwo),e(Du,ED),e(ED,vwo),e(Du,Fwo),e(G,Two),e(G,Gu),e(Gu,Ffe),e(Ffe,Mwo),e(Gu,Ewo),e(Gu,CD),e(CD,Cwo),e(Gu,wwo),e(G,Awo),e(G,Ou),e(Ou,Tfe),e(Tfe,Lwo),e(Ou,ywo),e(Ou,wD),e(wD,xwo),e(Ou,$wo),e(G,kwo),e(G,Vu),e(Vu,Mfe),e(Mfe,Swo),e(Vu,Rwo),e(Vu,AD),e(AD,Pwo),e(Vu,Bwo),e(G,Iwo),e(G,Xu),e(Xu,Efe),e(Efe,Nwo),e(Xu,qwo),e(Xu,LD),e(LD,jwo),e(Xu,Dwo),e(G,Gwo),e(G,zu),e(zu,Cfe),e(Cfe,Owo),e(zu,Vwo),e(zu,yD),e(yD,Xwo),e(zu,zwo),e(G,Qwo),e(G,Qu),e(Qu,wfe),e(wfe,Wwo),e(Qu,Hwo),e(Qu,xD),e(xD,Uwo),e(Qu,Jwo),e(G,Ywo),e(G,Wu),e(Wu,Afe),e(Afe,Kwo),e(Wu,Zwo),e(Wu,$D),e($D,eAo),e(Wu,oAo),e(G,rAo),e(G,Hu),e(Hu,Lfe),e(Lfe,tAo),e(Hu,aAo),e(Hu,kD),e(kD,nAo),e(Hu,sAo),e(G,lAo),e(G,Uu),e(Uu,yfe),e(yfe,iAo),e(Uu,dAo),e(Uu,SD),e(SD,cAo),e(Uu,fAo),e(G,mAo),e(G,Ju),e(Ju,xfe),e(xfe,gAo),e(Ju,hAo),e(Ju,RD),e(RD,pAo),e(Ju,_Ao),e(G,uAo),e(G,Yu),e(Yu,$fe),e($fe,bAo),e(Yu,vAo),e(Yu,PD),e(PD,FAo),e(Yu,TAo),e(G,MAo),e(G,Ku),e(Ku,kfe),e(kfe,EAo),e(Ku,CAo),e(Ku,BD),e(BD,wAo),e(Ku,AAo),e(G,LAo),e(G,Zu),e(Zu,Sfe),e(Sfe,yAo),e(Zu,xAo),e(Zu,ID),e(ID,$Ao),e(Zu,kAo),e(G,SAo),e(G,e1),e(e1,Rfe),e(Rfe,RAo),e(e1,PAo),e(e1,ND),e(ND,BAo),e(e1,IAo),e(G,NAo),e(G,o1),e(o1,Pfe),e(Pfe,qAo),e(o1,jAo),e(o1,qD),e(qD,DAo),e(o1,GAo),e(G,OAo),e(G,r1),e(r1,Bfe),e(Bfe,VAo),e(r1,XAo),e(r1,jD),e(jD,zAo),e(r1,QAo),e(G,WAo),e(G,t1),e(t1,Ife),e(Ife,HAo),e(t1,UAo),e(t1,DD),e(DD,JAo),e(t1,YAo),e(G,KAo),e(G,a1),e(a1,Nfe),e(Nfe,ZAo),e(a1,eLo),e(a1,GD),e(GD,oLo),e(a1,rLo),e(G,tLo),e(G,n1),e(n1,qfe),e(qfe,aLo),e(n1,nLo),e(n1,OD),e(OD,sLo),e(n1,lLo),e(G,iLo),e(G,s1),e(s1,jfe),e(jfe,dLo),e(s1,cLo),e(s1,VD),e(VD,fLo),e(s1,mLo),e(G,gLo),e(G,l1),e(l1,Dfe),e(Dfe,hLo),e(l1,pLo),e(l1,XD),e(XD,_Lo),e(l1,uLo),e(G,bLo),e(G,i1),e(i1,Gfe),e(Gfe,vLo),e(i1,FLo),e(i1,zD),e(zD,TLo),e(i1,MLo),e(G,ELo),e(G,d1),e(d1,Ofe),e(Ofe,CLo),e(d1,wLo),e(d1,QD),e(QD,ALo),e(d1,LLo),e(G,yLo),e(G,c1),e(c1,Vfe),e(Vfe,xLo),e(c1,$Lo),e(c1,WD),e(WD,kLo),e(c1,SLo),e(G,RLo),e(G,f1),e(f1,Xfe),e(Xfe,PLo),e(f1,BLo),e(f1,HD),e(HD,ILo),e(f1,NLo),e(G,qLo),e(G,m1),e(m1,zfe),e(zfe,jLo),e(m1,DLo),e(m1,UD),e(UD,GLo),e(m1,OLo),e(G,VLo),e(G,g1),e(g1,Qfe),e(Qfe,XLo),e(g1,zLo),e(g1,JD),e(JD,QLo),e(g1,WLo),e(G,HLo),e(G,h1),e(h1,Wfe),e(Wfe,ULo),e(h1,JLo),e(h1,YD),e(YD,YLo),e(h1,KLo),e(G,ZLo),e(G,p1),e(p1,Hfe),e(Hfe,e7o),e(p1,o7o),e(p1,KD),e(KD,r7o),e(p1,t7o),e(G,a7o),e(G,_1),e(_1,Ufe),e(Ufe,n7o),e(_1,s7o),e(_1,ZD),e(ZD,l7o),e(_1,i7o),e(G,d7o),e(G,u1),e(u1,Jfe),e(Jfe,c7o),e(u1,f7o),e(u1,eG),e(eG,m7o),e(u1,g7o),e(G,h7o),e(G,b1),e(b1,Yfe),e(Yfe,p7o),e(b1,_7o),e(b1,oG),e(oG,u7o),e(b1,b7o),e(G,v7o),e(G,v1),e(v1,Kfe),e(Kfe,F7o),e(v1,T7o),e(v1,rG),e(rG,M7o),e(v1,E7o),e(G,C7o),e(G,F1),e(F1,Zfe),e(Zfe,w7o),e(F1,A7o),e(F1,tG),e(tG,L7o),e(F1,y7o),e(G,x7o),e(G,T1),e(T1,eme),e(eme,$7o),e(T1,k7o),e(T1,aG),e(aG,S7o),e(T1,R7o),e(G,P7o),e(G,M1),e(M1,ome),e(ome,B7o),e(M1,I7o),e(M1,nG),e(nG,N7o),e(M1,q7o),e(G,j7o),e(G,E1),e(E1,rme),e(rme,D7o),e(E1,G7o),e(E1,sG),e(sG,O7o),e(E1,V7o),e(G,X7o),e(G,C1),e(C1,tme),e(tme,z7o),e(C1,Q7o),e(C1,lG),e(lG,W7o),e(C1,H7o),e(Ye,U7o),e(Ye,w1),e(w1,J7o),e(w1,ame),e(ame,Y7o),e(w1,K7o),e(w1,nme),e(nme,Z7o),e(Ye,eyo),M(A1,Ye,null),b(f,LOe,u),b(f,Oi,u),e(Oi,L1),e(L1,sme),M(uy,sme,null),e(Oi,oyo),e(Oi,lme),e(lme,ryo),b(f,yOe,u),b(f,ko,u),M(by,ko,null),e(ko,tyo),e(ko,Vi),e(Vi,ayo),e(Vi,iG),e(iG,nyo),e(Vi,syo),e(Vi,dG),e(dG,lyo),e(Vi,iyo),e(ko,dyo),e(ko,vy),e(vy,cyo),e(vy,ime),e(ime,fyo),e(vy,myo),e(ko,gyo),e(ko,lt),M(Fy,lt,null),e(lt,hyo),e(lt,dme),e(dme,pyo),e(lt,_yo),e(lt,Xi),e(Xi,uyo),e(Xi,cme),e(cme,byo),e(Xi,vyo),e(Xi,cG),e(cG,Fyo),e(Xi,Tyo),e(lt,Myo),M(y1,lt,null),e(ko,Eyo),e(ko,Ke),M(Ty,Ke,null),e(Ke,Cyo),e(Ke,fme),e(fme,wyo),e(Ke,Ayo),e(Ke,Ba),e(Ba,Lyo),e(Ba,mme),e(mme,yyo),e(Ba,xyo),e(Ba,gme),e(gme,$yo),e(Ba,kyo),e(Ba,hme),e(hme,Syo),e(Ba,Ryo),e(Ke,Pyo),e(Ke,z),e(z,x1),e(x1,pme),e(pme,Byo),e(x1,Iyo),e(x1,fG),e(fG,Nyo),e(x1,qyo),e(z,jyo),e(z,$1),e($1,_me),e(_me,Dyo),e($1,Gyo),e($1,mG),e(mG,Oyo),e($1,Vyo),e(z,Xyo),e(z,k1),e(k1,ume),e(ume,zyo),e(k1,Qyo),e(k1,gG),e(gG,Wyo),e(k1,Hyo),e(z,Uyo),e(z,S1),e(S1,bme),e(bme,Jyo),e(S1,Yyo),e(S1,hG),e(hG,Kyo),e(S1,Zyo),e(z,e8o),e(z,R1),e(R1,vme),e(vme,o8o),e(R1,r8o),e(R1,pG),e(pG,t8o),e(R1,a8o),e(z,n8o),e(z,P1),e(P1,Fme),e(Fme,s8o),e(P1,l8o),e(P1,_G),e(_G,i8o),e(P1,d8o),e(z,c8o),e(z,B1),e(B1,Tme),e(Tme,f8o),e(B1,m8o),e(B1,uG),e(uG,g8o),e(B1,h8o),e(z,p8o),e(z,I1),e(I1,Mme),e(Mme,_8o),e(I1,u8o),e(I1,bG),e(bG,b8o),e(I1,v8o),e(z,F8o),e(z,N1),e(N1,Eme),e(Eme,T8o),e(N1,M8o),e(N1,vG),e(vG,E8o),e(N1,C8o),e(z,w8o),e(z,q1),e(q1,Cme),e(Cme,A8o),e(q1,L8o),e(q1,FG),e(FG,y8o),e(q1,x8o),e(z,$8o),e(z,j1),e(j1,wme),e(wme,k8o),e(j1,S8o),e(j1,TG),e(TG,R8o),e(j1,P8o),e(z,B8o),e(z,D1),e(D1,Ame),e(Ame,I8o),e(D1,N8o),e(D1,MG),e(MG,q8o),e(D1,j8o),e(z,D8o),e(z,G1),e(G1,Lme),e(Lme,G8o),e(G1,O8o),e(G1,EG),e(EG,V8o),e(G1,X8o),e(z,z8o),e(z,O1),e(O1,yme),e(yme,Q8o),e(O1,W8o),e(O1,CG),e(CG,H8o),e(O1,U8o),e(z,J8o),e(z,V1),e(V1,xme),e(xme,Y8o),e(V1,K8o),e(V1,wG),e(wG,Z8o),e(V1,e9o),e(z,o9o),e(z,X1),e(X1,$me),e($me,r9o),e(X1,t9o),e(X1,AG),e(AG,a9o),e(X1,n9o),e(z,s9o),e(z,z1),e(z1,kme),e(kme,l9o),e(z1,i9o),e(z1,LG),e(LG,d9o),e(z1,c9o),e(z,f9o),e(z,Q1),e(Q1,Sme),e(Sme,m9o),e(Q1,g9o),e(Q1,yG),e(yG,h9o),e(Q1,p9o),e(z,_9o),e(z,W1),e(W1,Rme),e(Rme,u9o),e(W1,b9o),e(W1,xG),e(xG,v9o),e(W1,F9o),e(z,T9o),e(z,H1),e(H1,Pme),e(Pme,M9o),e(H1,E9o),e(H1,$G),e($G,C9o),e(H1,w9o),e(z,A9o),e(z,U1),e(U1,Bme),e(Bme,L9o),e(U1,y9o),e(U1,kG),e(kG,x9o),e(U1,$9o),e(z,k9o),e(z,J1),e(J1,Ime),e(Ime,S9o),e(J1,R9o),e(J1,SG),e(SG,P9o),e(J1,B9o),e(z,I9o),e(z,Y1),e(Y1,Nme),e(Nme,N9o),e(Y1,q9o),e(Y1,RG),e(RG,j9o),e(Y1,D9o),e(z,G9o),e(z,K1),e(K1,qme),e(qme,O9o),e(K1,V9o),e(K1,PG),e(PG,X9o),e(K1,z9o),e(z,Q9o),e(z,Z1),e(Z1,jme),e(jme,W9o),e(Z1,H9o),e(Z1,BG),e(BG,U9o),e(Z1,J9o),e(z,Y9o),e(z,e2),e(e2,Dme),e(Dme,K9o),e(e2,Z9o),e(e2,IG),e(IG,exo),e(e2,oxo),e(z,rxo),e(z,o2),e(o2,Gme),e(Gme,txo),e(o2,axo),e(o2,NG),e(NG,nxo),e(o2,sxo),e(z,lxo),e(z,r2),e(r2,Ome),e(Ome,ixo),e(r2,dxo),e(r2,qG),e(qG,cxo),e(r2,fxo),e(z,mxo),e(z,t2),e(t2,Vme),e(Vme,gxo),e(t2,hxo),e(t2,jG),e(jG,pxo),e(t2,_xo),e(z,uxo),e(z,a2),e(a2,Xme),e(Xme,bxo),e(a2,vxo),e(a2,DG),e(DG,Fxo),e(a2,Txo),e(z,Mxo),e(z,n2),e(n2,zme),e(zme,Exo),e(n2,Cxo),e(n2,GG),e(GG,wxo),e(n2,Axo),e(z,Lxo),e(z,s2),e(s2,Qme),e(Qme,yxo),e(s2,xxo),e(s2,OG),e(OG,$xo),e(s2,kxo),e(z,Sxo),e(z,l2),e(l2,Wme),e(Wme,Rxo),e(l2,Pxo),e(l2,VG),e(VG,Bxo),e(l2,Ixo),e(z,Nxo),e(z,i2),e(i2,Hme),e(Hme,qxo),e(i2,jxo),e(i2,XG),e(XG,Dxo),e(i2,Gxo),e(z,Oxo),e(z,d2),e(d2,Ume),e(Ume,Vxo),e(d2,Xxo),e(d2,zG),e(zG,zxo),e(d2,Qxo),e(z,Wxo),e(z,c2),e(c2,Jme),e(Jme,Hxo),e(c2,Uxo),e(c2,QG),e(QG,Jxo),e(c2,Yxo),e(z,Kxo),e(z,f2),e(f2,Yme),e(Yme,Zxo),e(f2,e$o),e(f2,WG),e(WG,o$o),e(f2,r$o),e(z,t$o),e(z,m2),e(m2,Kme),e(Kme,a$o),e(m2,n$o),e(m2,HG),e(HG,s$o),e(m2,l$o),e(z,i$o),e(z,g2),e(g2,Zme),e(Zme,d$o),e(g2,c$o),e(g2,UG),e(UG,f$o),e(g2,m$o),e(Ke,g$o),e(Ke,h2),e(h2,h$o),e(h2,ege),e(ege,p$o),e(h2,_$o),e(h2,oge),e(oge,u$o),e(Ke,b$o),M(p2,Ke,null),b(f,xOe,u),b(f,zi,u),e(zi,_2),e(_2,rge),M(My,rge,null),e(zi,v$o),e(zi,tge),e(tge,F$o),b(f,$Oe,u),b(f,So,u),M(Ey,So,null),e(So,T$o),e(So,Qi),e(Qi,M$o),e(Qi,JG),e(JG,E$o),e(Qi,C$o),e(Qi,YG),e(YG,w$o),e(Qi,A$o),e(So,L$o),e(So,Cy),e(Cy,y$o),e(Cy,age),e(age,x$o),e(Cy,$$o),e(So,k$o),e(So,it),M(wy,it,null),e(it,S$o),e(it,nge),e(nge,R$o),e(it,P$o),e(it,Wi),e(Wi,B$o),e(Wi,sge),e(sge,I$o),e(Wi,N$o),e(Wi,KG),e(KG,q$o),e(Wi,j$o),e(it,D$o),M(u2,it,null),e(So,G$o),e(So,Ze),M(Ay,Ze,null),e(Ze,O$o),e(Ze,lge),e(lge,V$o),e(Ze,X$o),e(Ze,Ia),e(Ia,z$o),e(Ia,ige),e(ige,Q$o),e(Ia,W$o),e(Ia,dge),e(dge,H$o),e(Ia,U$o),e(Ia,cge),e(cge,J$o),e(Ia,Y$o),e(Ze,K$o),e(Ze,W),e(W,b2),e(b2,fge),e(fge,Z$o),e(b2,eko),e(b2,ZG),e(ZG,oko),e(b2,rko),e(W,tko),e(W,v2),e(v2,mge),e(mge,ako),e(v2,nko),e(v2,eO),e(eO,sko),e(v2,lko),e(W,iko),e(W,F2),e(F2,gge),e(gge,dko),e(F2,cko),e(F2,oO),e(oO,fko),e(F2,mko),e(W,gko),e(W,T2),e(T2,hge),e(hge,hko),e(T2,pko),e(T2,rO),e(rO,_ko),e(T2,uko),e(W,bko),e(W,M2),e(M2,pge),e(pge,vko),e(M2,Fko),e(M2,tO),e(tO,Tko),e(M2,Mko),e(W,Eko),e(W,E2),e(E2,_ge),e(_ge,Cko),e(E2,wko),e(E2,aO),e(aO,Ako),e(E2,Lko),e(W,yko),e(W,C2),e(C2,uge),e(uge,xko),e(C2,$ko),e(C2,nO),e(nO,kko),e(C2,Sko),e(W,Rko),e(W,w2),e(w2,bge),e(bge,Pko),e(w2,Bko),e(w2,sO),e(sO,Iko),e(w2,Nko),e(W,qko),e(W,A2),e(A2,vge),e(vge,jko),e(A2,Dko),e(A2,lO),e(lO,Gko),e(A2,Oko),e(W,Vko),e(W,L2),e(L2,Fge),e(Fge,Xko),e(L2,zko),e(L2,iO),e(iO,Qko),e(L2,Wko),e(W,Hko),e(W,y2),e(y2,Tge),e(Tge,Uko),e(y2,Jko),e(y2,dO),e(dO,Yko),e(y2,Kko),e(W,Zko),e(W,x2),e(x2,Mge),e(Mge,eSo),e(x2,oSo),e(x2,cO),e(cO,rSo),e(x2,tSo),e(W,aSo),e(W,$2),e($2,Ege),e(Ege,nSo),e($2,sSo),e($2,fO),e(fO,lSo),e($2,iSo),e(W,dSo),e(W,k2),e(k2,Cge),e(Cge,cSo),e(k2,fSo),e(k2,mO),e(mO,mSo),e(k2,gSo),e(W,hSo),e(W,S2),e(S2,wge),e(wge,pSo),e(S2,_So),e(S2,gO),e(gO,uSo),e(S2,bSo),e(W,vSo),e(W,R2),e(R2,Age),e(Age,FSo),e(R2,TSo),e(R2,hO),e(hO,MSo),e(R2,ESo),e(W,CSo),e(W,P2),e(P2,Lge),e(Lge,wSo),e(P2,ASo),e(P2,pO),e(pO,LSo),e(P2,ySo),e(W,xSo),e(W,B2),e(B2,yge),e(yge,$So),e(B2,kSo),e(B2,_O),e(_O,SSo),e(B2,RSo),e(W,PSo),e(W,I2),e(I2,xge),e(xge,BSo),e(I2,ISo),e(I2,uO),e(uO,NSo),e(I2,qSo),e(W,jSo),e(W,N2),e(N2,$ge),e($ge,DSo),e(N2,GSo),e(N2,bO),e(bO,OSo),e(N2,VSo),e(W,XSo),e(W,q2),e(q2,kge),e(kge,zSo),e(q2,QSo),e(q2,vO),e(vO,WSo),e(q2,HSo),e(W,USo),e(W,j2),e(j2,Sge),e(Sge,JSo),e(j2,YSo),e(j2,FO),e(FO,KSo),e(j2,ZSo),e(W,eRo),e(W,D2),e(D2,Rge),e(Rge,oRo),e(D2,rRo),e(D2,TO),e(TO,tRo),e(D2,aRo),e(W,nRo),e(W,G2),e(G2,Pge),e(Pge,sRo),e(G2,lRo),e(G2,MO),e(MO,iRo),e(G2,dRo),e(W,cRo),e(W,O2),e(O2,Bge),e(Bge,fRo),e(O2,mRo),e(O2,EO),e(EO,gRo),e(O2,hRo),e(W,pRo),e(W,V2),e(V2,Ige),e(Ige,_Ro),e(V2,uRo),e(V2,CO),e(CO,bRo),e(V2,vRo),e(W,FRo),e(W,X2),e(X2,Nge),e(Nge,TRo),e(X2,MRo),e(X2,wO),e(wO,ERo),e(X2,CRo),e(W,wRo),e(W,z2),e(z2,qge),e(qge,ARo),e(z2,LRo),e(z2,AO),e(AO,yRo),e(z2,xRo),e(W,$Ro),e(W,Q2),e(Q2,jge),e(jge,kRo),e(Q2,SRo),e(Q2,LO),e(LO,RRo),e(Q2,PRo),e(W,BRo),e(W,W2),e(W2,Dge),e(Dge,IRo),e(W2,NRo),e(W2,yO),e(yO,qRo),e(W2,jRo),e(W,DRo),e(W,H2),e(H2,Gge),e(Gge,GRo),e(H2,ORo),e(H2,xO),e(xO,VRo),e(H2,XRo),e(W,zRo),e(W,U2),e(U2,Oge),e(Oge,QRo),e(U2,WRo),e(U2,$O),e($O,HRo),e(U2,URo),e(W,JRo),e(W,J2),e(J2,Vge),e(Vge,YRo),e(J2,KRo),e(J2,Xge),e(Xge,ZRo),e(J2,ePo),e(W,oPo),e(W,Y2),e(Y2,zge),e(zge,rPo),e(Y2,tPo),e(Y2,kO),e(kO,aPo),e(Y2,nPo),e(W,sPo),e(W,K2),e(K2,Qge),e(Qge,lPo),e(K2,iPo),e(K2,SO),e(SO,dPo),e(K2,cPo),e(W,fPo),e(W,Z2),e(Z2,Wge),e(Wge,mPo),e(Z2,gPo),e(Z2,RO),e(RO,hPo),e(Z2,pPo),e(W,_Po),e(W,eb),e(eb,Hge),e(Hge,uPo),e(eb,bPo),e(eb,PO),e(PO,vPo),e(eb,FPo),e(Ze,TPo),e(Ze,ob),e(ob,MPo),e(ob,Uge),e(Uge,EPo),e(ob,CPo),e(ob,Jge),e(Jge,wPo),e(Ze,APo),M(rb,Ze,null),b(f,kOe,u),b(f,Hi,u),e(Hi,tb),e(tb,Yge),M(Ly,Yge,null),e(Hi,LPo),e(Hi,Kge),e(Kge,yPo),b(f,SOe,u),b(f,Ro,u),M(yy,Ro,null),e(Ro,xPo),e(Ro,Ui),e(Ui,$Po),e(Ui,BO),e(BO,kPo),e(Ui,SPo),e(Ui,IO),e(IO,RPo),e(Ui,PPo),e(Ro,BPo),e(Ro,xy),e(xy,IPo),e(xy,Zge),e(Zge,NPo),e(xy,qPo),e(Ro,jPo),e(Ro,dt),M($y,dt,null),e(dt,DPo),e(dt,ehe),e(ehe,GPo),e(dt,OPo),e(dt,Ji),e(Ji,VPo),e(Ji,ohe),e(ohe,XPo),e(Ji,zPo),e(Ji,NO),e(NO,QPo),e(Ji,WPo),e(dt,HPo),M(ab,dt,null),e(Ro,UPo),e(Ro,eo),M(ky,eo,null),e(eo,JPo),e(eo,rhe),e(rhe,YPo),e(eo,KPo),e(eo,Na),e(Na,ZPo),e(Na,the),e(the,eBo),e(Na,oBo),e(Na,ahe),e(ahe,rBo),e(Na,tBo),e(Na,nhe),e(nhe,aBo),e(Na,nBo),e(eo,sBo),e(eo,pe),e(pe,nb),e(nb,she),e(she,lBo),e(nb,iBo),e(nb,qO),e(qO,dBo),e(nb,cBo),e(pe,fBo),e(pe,sb),e(sb,lhe),e(lhe,mBo),e(sb,gBo),e(sb,jO),e(jO,hBo),e(sb,pBo),e(pe,_Bo),e(pe,lb),e(lb,ihe),e(ihe,uBo),e(lb,bBo),e(lb,DO),e(DO,vBo),e(lb,FBo),e(pe,TBo),e(pe,ib),e(ib,dhe),e(dhe,MBo),e(ib,EBo),e(ib,GO),e(GO,CBo),e(ib,wBo),e(pe,ABo),e(pe,db),e(db,che),e(che,LBo),e(db,yBo),e(db,OO),e(OO,xBo),e(db,$Bo),e(pe,kBo),e(pe,cb),e(cb,fhe),e(fhe,SBo),e(cb,RBo),e(cb,VO),e(VO,PBo),e(cb,BBo),e(pe,IBo),e(pe,fb),e(fb,mhe),e(mhe,NBo),e(fb,qBo),e(fb,XO),e(XO,jBo),e(fb,DBo),e(pe,GBo),e(pe,mb),e(mb,ghe),e(ghe,OBo),e(mb,VBo),e(mb,zO),e(zO,XBo),e(mb,zBo),e(pe,QBo),e(pe,gb),e(gb,hhe),e(hhe,WBo),e(gb,HBo),e(gb,QO),e(QO,UBo),e(gb,JBo),e(pe,YBo),e(pe,hb),e(hb,phe),e(phe,KBo),e(hb,ZBo),e(hb,WO),e(WO,eIo),e(hb,oIo),e(pe,rIo),e(pe,pb),e(pb,_he),e(_he,tIo),e(pb,aIo),e(pb,HO),e(HO,nIo),e(pb,sIo),e(pe,lIo),e(pe,_b),e(_b,uhe),e(uhe,iIo),e(_b,dIo),e(_b,UO),e(UO,cIo),e(_b,fIo),e(pe,mIo),e(pe,ub),e(ub,bhe),e(bhe,gIo),e(ub,hIo),e(ub,JO),e(JO,pIo),e(ub,_Io),e(pe,uIo),e(pe,bb),e(bb,vhe),e(vhe,bIo),e(bb,vIo),e(bb,YO),e(YO,FIo),e(bb,TIo),e(pe,MIo),e(pe,vb),e(vb,Fhe),e(Fhe,EIo),e(vb,CIo),e(vb,KO),e(KO,wIo),e(vb,AIo),e(pe,LIo),e(pe,Fb),e(Fb,The),e(The,yIo),e(Fb,xIo),e(Fb,ZO),e(ZO,$Io),e(Fb,kIo),e(pe,SIo),e(pe,Tb),e(Tb,Mhe),e(Mhe,RIo),e(Tb,PIo),e(Tb,eV),e(eV,BIo),e(Tb,IIo),e(eo,NIo),e(eo,Mb),e(Mb,qIo),e(Mb,Ehe),e(Ehe,jIo),e(Mb,DIo),e(Mb,Che),e(Che,GIo),e(eo,OIo),M(Eb,eo,null),b(f,ROe,u),b(f,Yi,u),e(Yi,Cb),e(Cb,whe),M(Sy,whe,null),e(Yi,VIo),e(Yi,Ahe),e(Ahe,XIo),b(f,POe,u),b(f,Po,u),M(Ry,Po,null),e(Po,zIo),e(Po,Ki),e(Ki,QIo),e(Ki,oV),e(oV,WIo),e(Ki,HIo),e(Ki,rV),e(rV,UIo),e(Ki,JIo),e(Po,YIo),e(Po,Py),e(Py,KIo),e(Py,Lhe),e(Lhe,ZIo),e(Py,eNo),e(Po,oNo),e(Po,ct),M(By,ct,null),e(ct,rNo),e(ct,yhe),e(yhe,tNo),e(ct,aNo),e(ct,Zi),e(Zi,nNo),e(Zi,xhe),e(xhe,sNo),e(Zi,lNo),e(Zi,tV),e(tV,iNo),e(Zi,dNo),e(ct,cNo),M(wb,ct,null),e(Po,fNo),e(Po,oo),M(Iy,oo,null),e(oo,mNo),e(oo,$he),e($he,gNo),e(oo,hNo),e(oo,qa),e(qa,pNo),e(qa,khe),e(khe,_No),e(qa,uNo),e(qa,She),e(She,bNo),e(qa,vNo),e(qa,Rhe),e(Rhe,FNo),e(qa,TNo),e(oo,MNo),e(oo,N),e(N,Ab),e(Ab,Phe),e(Phe,ENo),e(Ab,CNo),e(Ab,aV),e(aV,wNo),e(Ab,ANo),e(N,LNo),e(N,Lb),e(Lb,Bhe),e(Bhe,yNo),e(Lb,xNo),e(Lb,nV),e(nV,$No),e(Lb,kNo),e(N,SNo),e(N,yb),e(yb,Ihe),e(Ihe,RNo),e(yb,PNo),e(yb,sV),e(sV,BNo),e(yb,INo),e(N,NNo),e(N,xb),e(xb,Nhe),e(Nhe,qNo),e(xb,jNo),e(xb,lV),e(lV,DNo),e(xb,GNo),e(N,ONo),e(N,$b),e($b,qhe),e(qhe,VNo),e($b,XNo),e($b,iV),e(iV,zNo),e($b,QNo),e(N,WNo),e(N,kb),e(kb,jhe),e(jhe,HNo),e(kb,UNo),e(kb,dV),e(dV,JNo),e(kb,YNo),e(N,KNo),e(N,Sb),e(Sb,Dhe),e(Dhe,ZNo),e(Sb,eqo),e(Sb,cV),e(cV,oqo),e(Sb,rqo),e(N,tqo),e(N,Rb),e(Rb,Ghe),e(Ghe,aqo),e(Rb,nqo),e(Rb,fV),e(fV,sqo),e(Rb,lqo),e(N,iqo),e(N,Pb),e(Pb,Ohe),e(Ohe,dqo),e(Pb,cqo),e(Pb,mV),e(mV,fqo),e(Pb,mqo),e(N,gqo),e(N,Bb),e(Bb,Vhe),e(Vhe,hqo),e(Bb,pqo),e(Bb,gV),e(gV,_qo),e(Bb,uqo),e(N,bqo),e(N,Ib),e(Ib,Xhe),e(Xhe,vqo),e(Ib,Fqo),e(Ib,hV),e(hV,Tqo),e(Ib,Mqo),e(N,Eqo),e(N,Nb),e(Nb,zhe),e(zhe,Cqo),e(Nb,wqo),e(Nb,pV),e(pV,Aqo),e(Nb,Lqo),e(N,yqo),e(N,qb),e(qb,Qhe),e(Qhe,xqo),e(qb,$qo),e(qb,_V),e(_V,kqo),e(qb,Sqo),e(N,Rqo),e(N,jb),e(jb,Whe),e(Whe,Pqo),e(jb,Bqo),e(jb,uV),e(uV,Iqo),e(jb,Nqo),e(N,qqo),e(N,Db),e(Db,Hhe),e(Hhe,jqo),e(Db,Dqo),e(Db,bV),e(bV,Gqo),e(Db,Oqo),e(N,Vqo),e(N,Gb),e(Gb,Uhe),e(Uhe,Xqo),e(Gb,zqo),e(Gb,vV),e(vV,Qqo),e(Gb,Wqo),e(N,Hqo),e(N,Ob),e(Ob,Jhe),e(Jhe,Uqo),e(Ob,Jqo),e(Ob,FV),e(FV,Yqo),e(Ob,Kqo),e(N,Zqo),e(N,Vb),e(Vb,Yhe),e(Yhe,ejo),e(Vb,ojo),e(Vb,TV),e(TV,rjo),e(Vb,tjo),e(N,ajo),e(N,Xb),e(Xb,Khe),e(Khe,njo),e(Xb,sjo),e(Xb,MV),e(MV,ljo),e(Xb,ijo),e(N,djo),e(N,zb),e(zb,Zhe),e(Zhe,cjo),e(zb,fjo),e(zb,EV),e(EV,mjo),e(zb,gjo),e(N,hjo),e(N,Qb),e(Qb,epe),e(epe,pjo),e(Qb,_jo),e(Qb,CV),e(CV,ujo),e(Qb,bjo),e(N,vjo),e(N,Wb),e(Wb,ope),e(ope,Fjo),e(Wb,Tjo),e(Wb,wV),e(wV,Mjo),e(Wb,Ejo),e(N,Cjo),e(N,Hb),e(Hb,rpe),e(rpe,wjo),e(Hb,Ajo),e(Hb,AV),e(AV,Ljo),e(Hb,yjo),e(N,xjo),e(N,Ub),e(Ub,tpe),e(tpe,$jo),e(Ub,kjo),e(Ub,LV),e(LV,Sjo),e(Ub,Rjo),e(N,Pjo),e(N,Jb),e(Jb,ape),e(ape,Bjo),e(Jb,Ijo),e(Jb,yV),e(yV,Njo),e(Jb,qjo),e(N,jjo),e(N,Yb),e(Yb,npe),e(npe,Djo),e(Yb,Gjo),e(Yb,xV),e(xV,Ojo),e(Yb,Vjo),e(N,Xjo),e(N,Kb),e(Kb,spe),e(spe,zjo),e(Kb,Qjo),e(Kb,$V),e($V,Wjo),e(Kb,Hjo),e(N,Ujo),e(N,Zb),e(Zb,lpe),e(lpe,Jjo),e(Zb,Yjo),e(Zb,kV),e(kV,Kjo),e(Zb,Zjo),e(N,eDo),e(N,e4),e(e4,ipe),e(ipe,oDo),e(e4,rDo),e(e4,SV),e(SV,tDo),e(e4,aDo),e(N,nDo),e(N,o4),e(o4,dpe),e(dpe,sDo),e(o4,lDo),e(o4,RV),e(RV,iDo),e(o4,dDo),e(N,cDo),e(N,r4),e(r4,cpe),e(cpe,fDo),e(r4,mDo),e(r4,PV),e(PV,gDo),e(r4,hDo),e(N,pDo),e(N,t4),e(t4,fpe),e(fpe,_Do),e(t4,uDo),e(t4,BV),e(BV,bDo),e(t4,vDo),e(N,FDo),e(N,a4),e(a4,mpe),e(mpe,TDo),e(a4,MDo),e(a4,IV),e(IV,EDo),e(a4,CDo),e(N,wDo),e(N,n4),e(n4,gpe),e(gpe,ADo),e(n4,LDo),e(n4,NV),e(NV,yDo),e(n4,xDo),e(N,$Do),e(N,s4),e(s4,hpe),e(hpe,kDo),e(s4,SDo),e(s4,qV),e(qV,RDo),e(s4,PDo),e(N,BDo),e(N,l4),e(l4,ppe),e(ppe,IDo),e(l4,NDo),e(l4,jV),e(jV,qDo),e(l4,jDo),e(N,DDo),e(N,i4),e(i4,_pe),e(_pe,GDo),e(i4,ODo),e(i4,DV),e(DV,VDo),e(i4,XDo),e(N,zDo),e(N,d4),e(d4,upe),e(upe,QDo),e(d4,WDo),e(d4,GV),e(GV,HDo),e(d4,UDo),e(N,JDo),e(N,c4),e(c4,bpe),e(bpe,YDo),e(c4,KDo),e(c4,OV),e(OV,ZDo),e(c4,eGo),e(N,oGo),e(N,f4),e(f4,vpe),e(vpe,rGo),e(f4,tGo),e(f4,VV),e(VV,aGo),e(f4,nGo),e(N,sGo),e(N,m4),e(m4,Fpe),e(Fpe,lGo),e(m4,iGo),e(m4,XV),e(XV,dGo),e(m4,cGo),e(N,fGo),e(N,g4),e(g4,Tpe),e(Tpe,mGo),e(g4,gGo),e(g4,zV),e(zV,hGo),e(g4,pGo),e(N,_Go),e(N,h4),e(h4,Mpe),e(Mpe,uGo),e(h4,bGo),e(h4,QV),e(QV,vGo),e(h4,FGo),e(N,TGo),e(N,p4),e(p4,Epe),e(Epe,MGo),e(p4,EGo),e(p4,WV),e(WV,CGo),e(p4,wGo),e(N,AGo),e(N,_4),e(_4,Cpe),e(Cpe,LGo),e(_4,yGo),e(_4,HV),e(HV,xGo),e(_4,$Go),e(N,kGo),e(N,u4),e(u4,wpe),e(wpe,SGo),e(u4,RGo),e(u4,UV),e(UV,PGo),e(u4,BGo),e(N,IGo),e(N,b4),e(b4,Ape),e(Ape,NGo),e(b4,qGo),e(b4,JV),e(JV,jGo),e(b4,DGo),e(N,GGo),e(N,v4),e(v4,Lpe),e(Lpe,OGo),e(v4,VGo),e(v4,YV),e(YV,XGo),e(v4,zGo),e(N,QGo),e(N,F4),e(F4,ype),e(ype,WGo),e(F4,HGo),e(F4,KV),e(KV,UGo),e(F4,JGo),e(oo,YGo),e(oo,T4),e(T4,KGo),e(T4,xpe),e(xpe,ZGo),e(T4,eOo),e(T4,$pe),e($pe,oOo),e(oo,rOo),M(M4,oo,null),b(f,BOe,u),b(f,ed,u),e(ed,E4),e(E4,kpe),M(Ny,kpe,null),e(ed,tOo),e(ed,Spe),e(Spe,aOo),b(f,IOe,u),b(f,Bo,u),M(qy,Bo,null),e(Bo,nOo),e(Bo,od),e(od,sOo),e(od,ZV),e(ZV,lOo),e(od,iOo),e(od,eX),e(eX,dOo),e(od,cOo),e(Bo,fOo),e(Bo,jy),e(jy,mOo),e(jy,Rpe),e(Rpe,gOo),e(jy,hOo),e(Bo,pOo),e(Bo,ft),M(Dy,ft,null),e(ft,_Oo),e(ft,Ppe),e(Ppe,uOo),e(ft,bOo),e(ft,rd),e(rd,vOo),e(rd,Bpe),e(Bpe,FOo),e(rd,TOo),e(rd,oX),e(oX,MOo),e(rd,EOo),e(ft,COo),M(C4,ft,null),e(Bo,wOo),e(Bo,ro),M(Gy,ro,null),e(ro,AOo),e(ro,Ipe),e(Ipe,LOo),e(ro,yOo),e(ro,ja),e(ja,xOo),e(ja,Npe),e(Npe,$Oo),e(ja,kOo),e(ja,qpe),e(qpe,SOo),e(ja,ROo),e(ja,jpe),e(jpe,POo),e(ja,BOo),e(ro,IOo),e(ro,Z),e(Z,w4),e(w4,Dpe),e(Dpe,NOo),e(w4,qOo),e(w4,rX),e(rX,jOo),e(w4,DOo),e(Z,GOo),e(Z,A4),e(A4,Gpe),e(Gpe,OOo),e(A4,VOo),e(A4,tX),e(tX,XOo),e(A4,zOo),e(Z,QOo),e(Z,L4),e(L4,Ope),e(Ope,WOo),e(L4,HOo),e(L4,aX),e(aX,UOo),e(L4,JOo),e(Z,YOo),e(Z,y4),e(y4,Vpe),e(Vpe,KOo),e(y4,ZOo),e(y4,nX),e(nX,eVo),e(y4,oVo),e(Z,rVo),e(Z,x4),e(x4,Xpe),e(Xpe,tVo),e(x4,aVo),e(x4,sX),e(sX,nVo),e(x4,sVo),e(Z,lVo),e(Z,$4),e($4,zpe),e(zpe,iVo),e($4,dVo),e($4,lX),e(lX,cVo),e($4,fVo),e(Z,mVo),e(Z,k4),e(k4,Qpe),e(Qpe,gVo),e(k4,hVo),e(k4,iX),e(iX,pVo),e(k4,_Vo),e(Z,uVo),e(Z,S4),e(S4,Wpe),e(Wpe,bVo),e(S4,vVo),e(S4,dX),e(dX,FVo),e(S4,TVo),e(Z,MVo),e(Z,R4),e(R4,Hpe),e(Hpe,EVo),e(R4,CVo),e(R4,cX),e(cX,wVo),e(R4,AVo),e(Z,LVo),e(Z,P4),e(P4,Upe),e(Upe,yVo),e(P4,xVo),e(P4,fX),e(fX,$Vo),e(P4,kVo),e(Z,SVo),e(Z,B4),e(B4,Jpe),e(Jpe,RVo),e(B4,PVo),e(B4,mX),e(mX,BVo),e(B4,IVo),e(Z,NVo),e(Z,I4),e(I4,Ype),e(Ype,qVo),e(I4,jVo),e(I4,gX),e(gX,DVo),e(I4,GVo),e(Z,OVo),e(Z,N4),e(N4,Kpe),e(Kpe,VVo),e(N4,XVo),e(N4,hX),e(hX,zVo),e(N4,QVo),e(Z,WVo),e(Z,q4),e(q4,Zpe),e(Zpe,HVo),e(q4,UVo),e(q4,pX),e(pX,JVo),e(q4,YVo),e(Z,KVo),e(Z,j4),e(j4,e_e),e(e_e,ZVo),e(j4,eXo),e(j4,_X),e(_X,oXo),e(j4,rXo),e(Z,tXo),e(Z,D4),e(D4,o_e),e(o_e,aXo),e(D4,nXo),e(D4,uX),e(uX,sXo),e(D4,lXo),e(Z,iXo),e(Z,G4),e(G4,r_e),e(r_e,dXo),e(G4,cXo),e(G4,bX),e(bX,fXo),e(G4,mXo),e(Z,gXo),e(Z,O4),e(O4,t_e),e(t_e,hXo),e(O4,pXo),e(O4,vX),e(vX,_Xo),e(O4,uXo),e(Z,bXo),e(Z,V4),e(V4,a_e),e(a_e,vXo),e(V4,FXo),e(V4,FX),e(FX,TXo),e(V4,MXo),e(Z,EXo),e(Z,X4),e(X4,n_e),e(n_e,CXo),e(X4,wXo),e(X4,TX),e(TX,AXo),e(X4,LXo),e(Z,yXo),e(Z,z4),e(z4,s_e),e(s_e,xXo),e(z4,$Xo),e(z4,MX),e(MX,kXo),e(z4,SXo),e(Z,RXo),e(Z,Q4),e(Q4,l_e),e(l_e,PXo),e(Q4,BXo),e(Q4,EX),e(EX,IXo),e(Q4,NXo),e(Z,qXo),e(Z,W4),e(W4,i_e),e(i_e,jXo),e(W4,DXo),e(W4,CX),e(CX,GXo),e(W4,OXo),e(Z,VXo),e(Z,H4),e(H4,d_e),e(d_e,XXo),e(H4,zXo),e(H4,wX),e(wX,QXo),e(H4,WXo),e(Z,HXo),e(Z,U4),e(U4,c_e),e(c_e,UXo),e(U4,JXo),e(U4,AX),e(AX,YXo),e(U4,KXo),e(Z,ZXo),e(Z,J4),e(J4,f_e),e(f_e,ezo),e(J4,ozo),e(J4,LX),e(LX,rzo),e(J4,tzo),e(Z,azo),e(Z,Y4),e(Y4,m_e),e(m_e,nzo),e(Y4,szo),e(Y4,yX),e(yX,lzo),e(Y4,izo),e(Z,dzo),e(Z,K4),e(K4,g_e),e(g_e,czo),e(K4,fzo),e(K4,xX),e(xX,mzo),e(K4,gzo),e(Z,hzo),e(Z,Z4),e(Z4,h_e),e(h_e,pzo),e(Z4,_zo),e(Z4,$X),e($X,uzo),e(Z4,bzo),e(Z,vzo),e(Z,e5),e(e5,p_e),e(p_e,Fzo),e(e5,Tzo),e(e5,kX),e(kX,Mzo),e(e5,Ezo),e(ro,Czo),e(ro,o5),e(o5,wzo),e(o5,__e),e(__e,Azo),e(o5,Lzo),e(o5,u_e),e(u_e,yzo),e(ro,xzo),M(r5,ro,null),b(f,NOe,u),b(f,td,u),e(td,t5),e(t5,b_e),M(Oy,b_e,null),e(td,$zo),e(td,v_e),e(v_e,kzo),b(f,qOe,u),b(f,Io,u),M(Vy,Io,null),e(Io,Szo),e(Io,ad),e(ad,Rzo),e(ad,SX),e(SX,Pzo),e(ad,Bzo),e(ad,RX),e(RX,Izo),e(ad,Nzo),e(Io,qzo),e(Io,Xy),e(Xy,jzo),e(Xy,F_e),e(F_e,Dzo),e(Xy,Gzo),e(Io,Ozo),e(Io,mt),M(zy,mt,null),e(mt,Vzo),e(mt,T_e),e(T_e,Xzo),e(mt,zzo),e(mt,nd),e(nd,Qzo),e(nd,M_e),e(M_e,Wzo),e(nd,Hzo),e(nd,PX),e(PX,Uzo),e(nd,Jzo),e(mt,Yzo),M(a5,mt,null),e(Io,Kzo),e(Io,to),M(Qy,to,null),e(to,Zzo),e(to,E_e),e(E_e,eQo),e(to,oQo),e(to,Da),e(Da,rQo),e(Da,C_e),e(C_e,tQo),e(Da,aQo),e(Da,w_e),e(w_e,nQo),e(Da,sQo),e(Da,A_e),e(A_e,lQo),e(Da,iQo),e(to,dQo),e(to,No),e(No,n5),e(n5,L_e),e(L_e,cQo),e(n5,fQo),e(n5,BX),e(BX,mQo),e(n5,gQo),e(No,hQo),e(No,s5),e(s5,y_e),e(y_e,pQo),e(s5,_Qo),e(s5,IX),e(IX,uQo),e(s5,bQo),e(No,vQo),e(No,l5),e(l5,x_e),e(x_e,FQo),e(l5,TQo),e(l5,NX),e(NX,MQo),e(l5,EQo),e(No,CQo),e(No,i5),e(i5,$_e),e($_e,wQo),e(i5,AQo),e(i5,qX),e(qX,LQo),e(i5,yQo),e(No,xQo),e(No,d5),e(d5,k_e),e(k_e,$Qo),e(d5,kQo),e(d5,jX),e(jX,SQo),e(d5,RQo),e(No,PQo),e(No,c5),e(c5,S_e),e(S_e,BQo),e(c5,IQo),e(c5,DX),e(DX,NQo),e(c5,qQo),e(to,jQo),e(to,f5),e(f5,DQo),e(f5,R_e),e(R_e,GQo),e(f5,OQo),e(f5,P_e),e(P_e,VQo),e(to,XQo),M(m5,to,null),b(f,jOe,u),b(f,sd,u),e(sd,g5),e(g5,B_e),M(Wy,B_e,null),e(sd,zQo),e(sd,I_e),e(I_e,QQo),b(f,DOe,u),b(f,qo,u),M(Hy,qo,null),e(qo,WQo),e(qo,ld),e(ld,HQo),e(ld,GX),e(GX,UQo),e(ld,JQo),e(ld,OX),e(OX,YQo),e(ld,KQo),e(qo,ZQo),e(qo,Uy),e(Uy,eWo),e(Uy,N_e),e(N_e,oWo),e(Uy,rWo),e(qo,tWo),e(qo,gt),M(Jy,gt,null),e(gt,aWo),e(gt,q_e),e(q_e,nWo),e(gt,sWo),e(gt,id),e(id,lWo),e(id,j_e),e(j_e,iWo),e(id,dWo),e(id,VX),e(VX,cWo),e(id,fWo),e(gt,mWo),M(h5,gt,null),e(qo,gWo),e(qo,ao),M(Yy,ao,null),e(ao,hWo),e(ao,D_e),e(D_e,pWo),e(ao,_Wo),e(ao,Ga),e(Ga,uWo),e(Ga,G_e),e(G_e,bWo),e(Ga,vWo),e(Ga,O_e),e(O_e,FWo),e(Ga,TWo),e(Ga,V_e),e(V_e,MWo),e(Ga,EWo),e(ao,CWo),e(ao,H),e(H,p5),e(p5,X_e),e(X_e,wWo),e(p5,AWo),e(p5,XX),e(XX,LWo),e(p5,yWo),e(H,xWo),e(H,_5),e(_5,z_e),e(z_e,$Wo),e(_5,kWo),e(_5,zX),e(zX,SWo),e(_5,RWo),e(H,PWo),e(H,u5),e(u5,Q_e),e(Q_e,BWo),e(u5,IWo),e(u5,QX),e(QX,NWo),e(u5,qWo),e(H,jWo),e(H,b5),e(b5,W_e),e(W_e,DWo),e(b5,GWo),e(b5,WX),e(WX,OWo),e(b5,VWo),e(H,XWo),e(H,v5),e(v5,H_e),e(H_e,zWo),e(v5,QWo),e(v5,HX),e(HX,WWo),e(v5,HWo),e(H,UWo),e(H,F5),e(F5,U_e),e(U_e,JWo),e(F5,YWo),e(F5,UX),e(UX,KWo),e(F5,ZWo),e(H,eHo),e(H,T5),e(T5,J_e),e(J_e,oHo),e(T5,rHo),e(T5,JX),e(JX,tHo),e(T5,aHo),e(H,nHo),e(H,M5),e(M5,Y_e),e(Y_e,sHo),e(M5,lHo),e(M5,YX),e(YX,iHo),e(M5,dHo),e(H,cHo),e(H,E5),e(E5,K_e),e(K_e,fHo),e(E5,mHo),e(E5,KX),e(KX,gHo),e(E5,hHo),e(H,pHo),e(H,C5),e(C5,Z_e),e(Z_e,_Ho),e(C5,uHo),e(C5,ZX),e(ZX,bHo),e(C5,vHo),e(H,FHo),e(H,w5),e(w5,eue),e(eue,THo),e(w5,MHo),e(w5,ez),e(ez,EHo),e(w5,CHo),e(H,wHo),e(H,A5),e(A5,oue),e(oue,AHo),e(A5,LHo),e(A5,oz),e(oz,yHo),e(A5,xHo),e(H,$Ho),e(H,L5),e(L5,rue),e(rue,kHo),e(L5,SHo),e(L5,rz),e(rz,RHo),e(L5,PHo),e(H,BHo),e(H,y5),e(y5,tue),e(tue,IHo),e(y5,NHo),e(y5,tz),e(tz,qHo),e(y5,jHo),e(H,DHo),e(H,x5),e(x5,aue),e(aue,GHo),e(x5,OHo),e(x5,az),e(az,VHo),e(x5,XHo),e(H,zHo),e(H,$5),e($5,nue),e(nue,QHo),e($5,WHo),e($5,nz),e(nz,HHo),e($5,UHo),e(H,JHo),e(H,k5),e(k5,sue),e(sue,YHo),e(k5,KHo),e(k5,sz),e(sz,ZHo),e(k5,eUo),e(H,oUo),e(H,S5),e(S5,lue),e(lue,rUo),e(S5,tUo),e(S5,lz),e(lz,aUo),e(S5,nUo),e(H,sUo),e(H,R5),e(R5,iue),e(iue,lUo),e(R5,iUo),e(R5,iz),e(iz,dUo),e(R5,cUo),e(H,fUo),e(H,P5),e(P5,due),e(due,mUo),e(P5,gUo),e(P5,dz),e(dz,hUo),e(P5,pUo),e(H,_Uo),e(H,B5),e(B5,cue),e(cue,uUo),e(B5,bUo),e(B5,cz),e(cz,vUo),e(B5,FUo),e(H,TUo),e(H,I5),e(I5,fue),e(fue,MUo),e(I5,EUo),e(I5,fz),e(fz,CUo),e(I5,wUo),e(H,AUo),e(H,N5),e(N5,mue),e(mue,LUo),e(N5,yUo),e(N5,mz),e(mz,xUo),e(N5,$Uo),e(H,kUo),e(H,q5),e(q5,gue),e(gue,SUo),e(q5,RUo),e(q5,gz),e(gz,PUo),e(q5,BUo),e(H,IUo),e(H,j5),e(j5,hue),e(hue,NUo),e(j5,qUo),e(j5,hz),e(hz,jUo),e(j5,DUo),e(H,GUo),e(H,D5),e(D5,pue),e(pue,OUo),e(D5,VUo),e(D5,pz),e(pz,XUo),e(D5,zUo),e(H,QUo),e(H,G5),e(G5,_ue),e(_ue,WUo),e(G5,HUo),e(G5,_z),e(_z,UUo),e(G5,JUo),e(H,YUo),e(H,O5),e(O5,uue),e(uue,KUo),e(O5,ZUo),e(O5,uz),e(uz,eJo),e(O5,oJo),e(H,rJo),e(H,V5),e(V5,bue),e(bue,tJo),e(V5,aJo),e(V5,bz),e(bz,nJo),e(V5,sJo),e(H,lJo),e(H,X5),e(X5,vue),e(vue,iJo),e(X5,dJo),e(X5,vz),e(vz,cJo),e(X5,fJo),e(H,mJo),e(H,z5),e(z5,Fue),e(Fue,gJo),e(z5,hJo),e(z5,Fz),e(Fz,pJo),e(z5,_Jo),e(H,uJo),e(H,Q5),e(Q5,Tue),e(Tue,bJo),e(Q5,vJo),e(Q5,Tz),e(Tz,FJo),e(Q5,TJo),e(H,MJo),e(H,W5),e(W5,Mue),e(Mue,EJo),e(W5,CJo),e(W5,Mz),e(Mz,wJo),e(W5,AJo),e(H,LJo),e(H,H5),e(H5,Eue),e(Eue,yJo),e(H5,xJo),e(H5,Ez),e(Ez,$Jo),e(H5,kJo),e(H,SJo),e(H,U5),e(U5,Cue),e(Cue,RJo),e(U5,PJo),e(U5,Cz),e(Cz,BJo),e(U5,IJo),e(H,NJo),e(H,J5),e(J5,wue),e(wue,qJo),e(J5,jJo),e(J5,wz),e(wz,DJo),e(J5,GJo),e(ao,OJo),e(ao,Y5),e(Y5,VJo),e(Y5,Aue),e(Aue,XJo),e(Y5,zJo),e(Y5,Lue),e(Lue,QJo),e(ao,WJo),M(K5,ao,null),b(f,GOe,u),b(f,dd,u),e(dd,Z5),e(Z5,yue),M(Ky,yue,null),e(dd,HJo),e(dd,xue),e(xue,UJo),b(f,OOe,u),b(f,jo,u),M(Zy,jo,null),e(jo,JJo),e(jo,cd),e(cd,YJo),e(cd,Az),e(Az,KJo),e(cd,ZJo),e(cd,Lz),e(Lz,eYo),e(cd,oYo),e(jo,rYo),e(jo,e8),e(e8,tYo),e(e8,$ue),e($ue,aYo),e(e8,nYo),e(jo,sYo),e(jo,ht),M(o8,ht,null),e(ht,lYo),e(ht,kue),e(kue,iYo),e(ht,dYo),e(ht,fd),e(fd,cYo),e(fd,Sue),e(Sue,fYo),e(fd,mYo),e(fd,yz),e(yz,gYo),e(fd,hYo),e(ht,pYo),M(e3,ht,null),e(jo,_Yo),e(jo,no),M(r8,no,null),e(no,uYo),e(no,Rue),e(Rue,bYo),e(no,vYo),e(no,Oa),e(Oa,FYo),e(Oa,Pue),e(Pue,TYo),e(Oa,MYo),e(Oa,Bue),e(Bue,EYo),e(Oa,CYo),e(Oa,Iue),e(Iue,wYo),e(Oa,AYo),e(no,LYo),e(no,V),e(V,o3),e(o3,Nue),e(Nue,yYo),e(o3,xYo),e(o3,xz),e(xz,$Yo),e(o3,kYo),e(V,SYo),e(V,r3),e(r3,que),e(que,RYo),e(r3,PYo),e(r3,$z),e($z,BYo),e(r3,IYo),e(V,NYo),e(V,t3),e(t3,jue),e(jue,qYo),e(t3,jYo),e(t3,kz),e(kz,DYo),e(t3,GYo),e(V,OYo),e(V,a3),e(a3,Due),e(Due,VYo),e(a3,XYo),e(a3,Sz),e(Sz,zYo),e(a3,QYo),e(V,WYo),e(V,n3),e(n3,Gue),e(Gue,HYo),e(n3,UYo),e(n3,Rz),e(Rz,JYo),e(n3,YYo),e(V,KYo),e(V,s3),e(s3,Oue),e(Oue,ZYo),e(s3,eKo),e(s3,Pz),e(Pz,oKo),e(s3,rKo),e(V,tKo),e(V,l3),e(l3,Vue),e(Vue,aKo),e(l3,nKo),e(l3,Bz),e(Bz,sKo),e(l3,lKo),e(V,iKo),e(V,i3),e(i3,Xue),e(Xue,dKo),e(i3,cKo),e(i3,Iz),e(Iz,fKo),e(i3,mKo),e(V,gKo),e(V,d3),e(d3,zue),e(zue,hKo),e(d3,pKo),e(d3,Nz),e(Nz,_Ko),e(d3,uKo),e(V,bKo),e(V,c3),e(c3,Que),e(Que,vKo),e(c3,FKo),e(c3,qz),e(qz,TKo),e(c3,MKo),e(V,EKo),e(V,f3),e(f3,Wue),e(Wue,CKo),e(f3,wKo),e(f3,jz),e(jz,AKo),e(f3,LKo),e(V,yKo),e(V,m3),e(m3,Hue),e(Hue,xKo),e(m3,$Ko),e(m3,Dz),e(Dz,kKo),e(m3,SKo),e(V,RKo),e(V,g3),e(g3,Uue),e(Uue,PKo),e(g3,BKo),e(g3,Gz),e(Gz,IKo),e(g3,NKo),e(V,qKo),e(V,h3),e(h3,Jue),e(Jue,jKo),e(h3,DKo),e(h3,Oz),e(Oz,GKo),e(h3,OKo),e(V,VKo),e(V,p3),e(p3,Yue),e(Yue,XKo),e(p3,zKo),e(p3,Vz),e(Vz,QKo),e(p3,WKo),e(V,HKo),e(V,_3),e(_3,Kue),e(Kue,UKo),e(_3,JKo),e(_3,Xz),e(Xz,YKo),e(_3,KKo),e(V,ZKo),e(V,u3),e(u3,Zue),e(Zue,eZo),e(u3,oZo),e(u3,zz),e(zz,rZo),e(u3,tZo),e(V,aZo),e(V,b3),e(b3,e1e),e(e1e,nZo),e(b3,sZo),e(b3,Qz),e(Qz,lZo),e(b3,iZo),e(V,dZo),e(V,v3),e(v3,o1e),e(o1e,cZo),e(v3,fZo),e(v3,Wz),e(Wz,mZo),e(v3,gZo),e(V,hZo),e(V,F3),e(F3,r1e),e(r1e,pZo),e(F3,_Zo),e(F3,Hz),e(Hz,uZo),e(F3,bZo),e(V,vZo),e(V,T3),e(T3,t1e),e(t1e,FZo),e(T3,TZo),e(T3,Uz),e(Uz,MZo),e(T3,EZo),e(V,CZo),e(V,M3),e(M3,a1e),e(a1e,wZo),e(M3,AZo),e(M3,Jz),e(Jz,LZo),e(M3,yZo),e(V,xZo),e(V,E3),e(E3,n1e),e(n1e,$Zo),e(E3,kZo),e(E3,Yz),e(Yz,SZo),e(E3,RZo),e(V,PZo),e(V,C3),e(C3,s1e),e(s1e,BZo),e(C3,IZo),e(C3,Kz),e(Kz,NZo),e(C3,qZo),e(V,jZo),e(V,w3),e(w3,l1e),e(l1e,DZo),e(w3,GZo),e(w3,Zz),e(Zz,OZo),e(w3,VZo),e(V,XZo),e(V,A3),e(A3,i1e),e(i1e,zZo),e(A3,QZo),e(A3,eQ),e(eQ,WZo),e(A3,HZo),e(V,UZo),e(V,L3),e(L3,d1e),e(d1e,JZo),e(L3,YZo),e(L3,oQ),e(oQ,KZo),e(L3,ZZo),e(V,eer),e(V,y3),e(y3,c1e),e(c1e,oer),e(y3,rer),e(y3,rQ),e(rQ,ter),e(y3,aer),e(V,ner),e(V,x3),e(x3,f1e),e(f1e,ser),e(x3,ler),e(x3,tQ),e(tQ,ier),e(x3,der),e(V,cer),e(V,$3),e($3,m1e),e(m1e,fer),e($3,mer),e($3,aQ),e(aQ,ger),e($3,her),e(V,per),e(V,k3),e(k3,g1e),e(g1e,_er),e(k3,uer),e(k3,nQ),e(nQ,ber),e(k3,ver),e(V,Fer),e(V,S3),e(S3,h1e),e(h1e,Ter),e(S3,Mer),e(S3,sQ),e(sQ,Eer),e(S3,Cer),e(V,wer),e(V,R3),e(R3,p1e),e(p1e,Aer),e(R3,Ler),e(R3,lQ),e(lQ,yer),e(R3,xer),e(V,$er),e(V,P3),e(P3,_1e),e(_1e,ker),e(P3,Ser),e(P3,iQ),e(iQ,Rer),e(P3,Per),e(V,Ber),e(V,B3),e(B3,u1e),e(u1e,Ier),e(B3,Ner),e(B3,dQ),e(dQ,qer),e(B3,jer),e(V,Der),e(V,I3),e(I3,b1e),e(b1e,Ger),e(I3,Oer),e(I3,cQ),e(cQ,Ver),e(I3,Xer),e(V,zer),e(V,N3),e(N3,v1e),e(v1e,Qer),e(N3,Wer),e(N3,fQ),e(fQ,Her),e(N3,Uer),e(V,Jer),e(V,q3),e(q3,F1e),e(F1e,Yer),e(q3,Ker),e(q3,mQ),e(mQ,Zer),e(q3,eor),e(V,oor),e(V,j3),e(j3,T1e),e(T1e,ror),e(j3,tor),e(j3,gQ),e(gQ,aor),e(j3,nor),e(V,sor),e(V,D3),e(D3,M1e),e(M1e,lor),e(D3,ior),e(D3,hQ),e(hQ,dor),e(D3,cor),e(V,mor),e(V,G3),e(G3,E1e),e(E1e,gor),e(G3,hor),e(G3,pQ),e(pQ,por),e(G3,_or),e(no,uor),e(no,O3),e(O3,bor),e(O3,C1e),e(C1e,vor),e(O3,For),e(O3,w1e),e(w1e,Tor),e(no,Mor),M(V3,no,null),b(f,VOe,u),b(f,md,u),e(md,X3),e(X3,A1e),M(t8,A1e,null),e(md,Eor),e(md,L1e),e(L1e,Cor),b(f,XOe,u),b(f,Do,u),M(a8,Do,null),e(Do,wor),e(Do,gd),e(gd,Aor),e(gd,_Q),e(_Q,Lor),e(gd,yor),e(gd,uQ),e(uQ,xor),e(gd,$or),e(Do,kor),e(Do,n8),e(n8,Sor),e(n8,y1e),e(y1e,Ror),e(n8,Por),e(Do,Bor),e(Do,pt),M(s8,pt,null),e(pt,Ior),e(pt,x1e),e(x1e,Nor),e(pt,qor),e(pt,hd),e(hd,jor),e(hd,$1e),e($1e,Dor),e(hd,Gor),e(hd,bQ),e(bQ,Oor),e(hd,Vor),e(pt,Xor),M(z3,pt,null),e(Do,zor),e(Do,so),M(l8,so,null),e(so,Qor),e(so,k1e),e(k1e,Wor),e(so,Hor),e(so,Va),e(Va,Uor),e(Va,S1e),e(S1e,Jor),e(Va,Yor),e(Va,R1e),e(R1e,Kor),e(Va,Zor),e(Va,P1e),e(P1e,err),e(Va,orr),e(so,rrr),e(so,B1e),e(B1e,Q3),e(Q3,I1e),e(I1e,trr),e(Q3,arr),e(Q3,vQ),e(vQ,nrr),e(Q3,srr),e(so,lrr),e(so,W3),e(W3,irr),e(W3,N1e),e(N1e,drr),e(W3,crr),e(W3,q1e),e(q1e,frr),e(so,mrr),M(H3,so,null),b(f,zOe,u),b(f,pd,u),e(pd,U3),e(U3,j1e),M(i8,j1e,null),e(pd,grr),e(pd,D1e),e(D1e,hrr),b(f,QOe,u),b(f,Go,u),M(d8,Go,null),e(Go,prr),e(Go,_d),e(_d,_rr),e(_d,FQ),e(FQ,urr),e(_d,brr),e(_d,TQ),e(TQ,vrr),e(_d,Frr),e(Go,Trr),e(Go,c8),e(c8,Mrr),e(c8,G1e),e(G1e,Err),e(c8,Crr),e(Go,wrr),e(Go,_t),M(f8,_t,null),e(_t,Arr),e(_t,O1e),e(O1e,Lrr),e(_t,yrr),e(_t,ud),e(ud,xrr),e(ud,V1e),e(V1e,$rr),e(ud,krr),e(ud,MQ),e(MQ,Srr),e(ud,Rrr),e(_t,Prr),M(J3,_t,null),e(Go,Brr),e(Go,lo),M(m8,lo,null),e(lo,Irr),e(lo,X1e),e(X1e,Nrr),e(lo,qrr),e(lo,Xa),e(Xa,jrr),e(Xa,z1e),e(z1e,Drr),e(Xa,Grr),e(Xa,Q1e),e(Q1e,Orr),e(Xa,Vrr),e(Xa,W1e),e(W1e,Xrr),e(Xa,zrr),e(lo,Qrr),e(lo,Fe),e(Fe,Y3),e(Y3,H1e),e(H1e,Wrr),e(Y3,Hrr),e(Y3,EQ),e(EQ,Urr),e(Y3,Jrr),e(Fe,Yrr),e(Fe,K3),e(K3,U1e),e(U1e,Krr),e(K3,Zrr),e(K3,CQ),e(CQ,etr),e(K3,otr),e(Fe,rtr),e(Fe,Z3),e(Z3,J1e),e(J1e,ttr),e(Z3,atr),e(Z3,wQ),e(wQ,ntr),e(Z3,str),e(Fe,ltr),e(Fe,ev),e(ev,Y1e),e(Y1e,itr),e(ev,dtr),e(ev,AQ),e(AQ,ctr),e(ev,ftr),e(Fe,mtr),e(Fe,zs),e(zs,K1e),e(K1e,gtr),e(zs,htr),e(zs,LQ),e(LQ,ptr),e(zs,_tr),e(zs,yQ),e(yQ,utr),e(zs,btr),e(Fe,vtr),e(Fe,ov),e(ov,Z1e),e(Z1e,Ftr),e(ov,Ttr),e(ov,xQ),e(xQ,Mtr),e(ov,Etr),e(Fe,Ctr),e(Fe,Qs),e(Qs,e2e),e(e2e,wtr),e(Qs,Atr),e(Qs,$Q),e($Q,Ltr),e(Qs,ytr),e(Qs,kQ),e(kQ,xtr),e(Qs,$tr),e(Fe,ktr),e(Fe,ut),e(ut,o2e),e(o2e,Str),e(ut,Rtr),e(ut,SQ),e(SQ,Ptr),e(ut,Btr),e(ut,RQ),e(RQ,Itr),e(ut,Ntr),e(ut,PQ),e(PQ,qtr),e(ut,jtr),e(Fe,Dtr),e(Fe,rv),e(rv,r2e),e(r2e,Gtr),e(rv,Otr),e(rv,BQ),e(BQ,Vtr),e(rv,Xtr),e(Fe,ztr),e(Fe,tv),e(tv,t2e),e(t2e,Qtr),e(tv,Wtr),e(tv,IQ),e(IQ,Htr),e(tv,Utr),e(Fe,Jtr),e(Fe,av),e(av,a2e),e(a2e,Ytr),e(av,Ktr),e(av,NQ),e(NQ,Ztr),e(av,ear),e(Fe,oar),e(Fe,nv),e(nv,n2e),e(n2e,rar),e(nv,tar),e(nv,qQ),e(qQ,aar),e(nv,nar),e(Fe,sar),e(Fe,sv),e(sv,s2e),e(s2e,lar),e(sv,iar),e(sv,jQ),e(jQ,dar),e(sv,car),e(Fe,far),e(Fe,lv),e(lv,l2e),e(l2e,mar),e(lv,gar),e(lv,DQ),e(DQ,har),e(lv,par),e(Fe,_ar),e(Fe,iv),e(iv,i2e),e(i2e,uar),e(iv,bar),e(iv,GQ),e(GQ,Far),e(iv,Tar),e(lo,Mar),e(lo,dv),e(dv,Ear),e(dv,d2e),e(d2e,Car),e(dv,war),e(dv,c2e),e(c2e,Aar),e(lo,Lar),M(cv,lo,null),b(f,WOe,u),b(f,bd,u),e(bd,fv),e(fv,f2e),M(g8,f2e,null),e(bd,yar),e(bd,m2e),e(m2e,xar),b(f,HOe,u),b(f,Oo,u),M(h8,Oo,null),e(Oo,$ar),e(Oo,vd),e(vd,kar),e(vd,OQ),e(OQ,Sar),e(vd,Rar),e(vd,VQ),e(VQ,Par),e(vd,Bar),e(Oo,Iar),e(Oo,p8),e(p8,Nar),e(p8,g2e),e(g2e,qar),e(p8,jar),e(Oo,Dar),e(Oo,bt),M(_8,bt,null),e(bt,Gar),e(bt,h2e),e(h2e,Oar),e(bt,Var),e(bt,Fd),e(Fd,Xar),e(Fd,p2e),e(p2e,zar),e(Fd,Qar),e(Fd,XQ),e(XQ,War),e(Fd,Har),e(bt,Uar),M(mv,bt,null),e(Oo,Jar),e(Oo,io),M(u8,io,null),e(io,Yar),e(io,_2e),e(_2e,Kar),e(io,Zar),e(io,za),e(za,enr),e(za,u2e),e(u2e,onr),e(za,rnr),e(za,b2e),e(b2e,tnr),e(za,anr),e(za,v2e),e(v2e,nnr),e(za,snr),e(io,lnr),e(io,F2e),e(F2e,gv),e(gv,T2e),e(T2e,inr),e(gv,dnr),e(gv,zQ),e(zQ,cnr),e(gv,fnr),e(io,mnr),e(io,hv),e(hv,gnr),e(hv,M2e),e(M2e,hnr),e(hv,pnr),e(hv,E2e),e(E2e,_nr),e(io,unr),M(pv,io,null),b(f,UOe,u),b(f,Td,u),e(Td,_v),e(_v,C2e),M(b8,C2e,null),e(Td,bnr),e(Td,w2e),e(w2e,vnr),b(f,JOe,u),b(f,Vo,u),M(v8,Vo,null),e(Vo,Fnr),e(Vo,Md),e(Md,Tnr),e(Md,QQ),e(QQ,Mnr),e(Md,Enr),e(Md,WQ),e(WQ,Cnr),e(Md,wnr),e(Vo,Anr),e(Vo,F8),e(F8,Lnr),e(F8,A2e),e(A2e,ynr),e(F8,xnr),e(Vo,$nr),e(Vo,vt),M(T8,vt,null),e(vt,knr),e(vt,L2e),e(L2e,Snr),e(vt,Rnr),e(vt,Ed),e(Ed,Pnr),e(Ed,y2e),e(y2e,Bnr),e(Ed,Inr),e(Ed,HQ),e(HQ,Nnr),e(Ed,qnr),e(vt,jnr),M(uv,vt,null),e(Vo,Dnr),e(Vo,co),M(M8,co,null),e(co,Gnr),e(co,x2e),e(x2e,Onr),e(co,Vnr),e(co,Qa),e(Qa,Xnr),e(Qa,$2e),e($2e,znr),e(Qa,Qnr),e(Qa,k2e),e(k2e,Wnr),e(Qa,Hnr),e(Qa,S2e),e(S2e,Unr),e(Qa,Jnr),e(co,Ynr),e(co,R2e),e(R2e,bv),e(bv,P2e),e(P2e,Knr),e(bv,Znr),e(bv,UQ),e(UQ,esr),e(bv,osr),e(co,rsr),e(co,vv),e(vv,tsr),e(vv,B2e),e(B2e,asr),e(vv,nsr),e(vv,I2e),e(I2e,ssr),e(co,lsr),M(Fv,co,null),b(f,YOe,u),b(f,Cd,u),e(Cd,Tv),e(Tv,N2e),M(E8,N2e,null),e(Cd,isr),e(Cd,q2e),e(q2e,dsr),b(f,KOe,u),b(f,Xo,u),M(C8,Xo,null),e(Xo,csr),e(Xo,wd),e(wd,fsr),e(wd,JQ),e(JQ,msr),e(wd,gsr),e(wd,YQ),e(YQ,hsr),e(wd,psr),e(Xo,_sr),e(Xo,w8),e(w8,usr),e(w8,j2e),e(j2e,bsr),e(w8,vsr),e(Xo,Fsr),e(Xo,Ft),M(A8,Ft,null),e(Ft,Tsr),e(Ft,D2e),e(D2e,Msr),e(Ft,Esr),e(Ft,Ad),e(Ad,Csr),e(Ad,G2e),e(G2e,wsr),e(Ad,Asr),e(Ad,KQ),e(KQ,Lsr),e(Ad,ysr),e(Ft,xsr),M(Mv,Ft,null),e(Xo,$sr),e(Xo,fo),M(L8,fo,null),e(fo,ksr),e(fo,O2e),e(O2e,Ssr),e(fo,Rsr),e(fo,Wa),e(Wa,Psr),e(Wa,V2e),e(V2e,Bsr),e(Wa,Isr),e(Wa,X2e),e(X2e,Nsr),e(Wa,qsr),e(Wa,z2e),e(z2e,jsr),e(Wa,Dsr),e(fo,Gsr),e(fo,Pe),e(Pe,Ev),e(Ev,Q2e),e(Q2e,Osr),e(Ev,Vsr),e(Ev,ZQ),e(ZQ,Xsr),e(Ev,zsr),e(Pe,Qsr),e(Pe,Cv),e(Cv,W2e),e(W2e,Wsr),e(Cv,Hsr),e(Cv,eW),e(eW,Usr),e(Cv,Jsr),e(Pe,Ysr),e(Pe,wv),e(wv,H2e),e(H2e,Ksr),e(wv,Zsr),e(wv,oW),e(oW,elr),e(wv,olr),e(Pe,rlr),e(Pe,Av),e(Av,U2e),e(U2e,tlr),e(Av,alr),e(Av,rW),e(rW,nlr),e(Av,slr),e(Pe,llr),e(Pe,Lv),e(Lv,J2e),e(J2e,ilr),e(Lv,dlr),e(Lv,tW),e(tW,clr),e(Lv,flr),e(Pe,mlr),e(Pe,yv),e(yv,Y2e),e(Y2e,glr),e(yv,hlr),e(yv,aW),e(aW,plr),e(yv,_lr),e(Pe,ulr),e(Pe,xv),e(xv,K2e),e(K2e,blr),e(xv,vlr),e(xv,nW),e(nW,Flr),e(xv,Tlr),e(Pe,Mlr),e(Pe,$v),e($v,Z2e),e(Z2e,Elr),e($v,Clr),e($v,sW),e(sW,wlr),e($v,Alr),e(Pe,Llr),e(Pe,kv),e(kv,ebe),e(ebe,ylr),e(kv,xlr),e(kv,lW),e(lW,$lr),e(kv,klr),e(fo,Slr),e(fo,Sv),e(Sv,Rlr),e(Sv,obe),e(obe,Plr),e(Sv,Blr),e(Sv,rbe),e(rbe,Ilr),e(fo,Nlr),M(Rv,fo,null),b(f,ZOe,u),b(f,Ld,u),e(Ld,Pv),e(Pv,tbe),M(y8,tbe,null),e(Ld,qlr),e(Ld,abe),e(abe,jlr),b(f,eVe,u),b(f,zo,u),M(x8,zo,null),e(zo,Dlr),e(zo,yd),e(yd,Glr),e(yd,iW),e(iW,Olr),e(yd,Vlr),e(yd,dW),e(dW,Xlr),e(yd,zlr),e(zo,Qlr),e(zo,$8),e($8,Wlr),e($8,nbe),e(nbe,Hlr),e($8,Ulr),e(zo,Jlr),e(zo,Tt),M(k8,Tt,null),e(Tt,Ylr),e(Tt,sbe),e(sbe,Klr),e(Tt,Zlr),e(Tt,xd),e(xd,eir),e(xd,lbe),e(lbe,oir),e(xd,rir),e(xd,cW),e(cW,tir),e(xd,air),e(Tt,nir),M(Bv,Tt,null),e(zo,sir),e(zo,mo),M(S8,mo,null),e(mo,lir),e(mo,ibe),e(ibe,iir),e(mo,dir),e(mo,Ha),e(Ha,cir),e(Ha,dbe),e(dbe,fir),e(Ha,mir),e(Ha,cbe),e(cbe,gir),e(Ha,hir),e(Ha,fbe),e(fbe,pir),e(Ha,_ir),e(mo,uir),e(mo,et),e(et,Iv),e(Iv,mbe),e(mbe,bir),e(Iv,vir),e(Iv,fW),e(fW,Fir),e(Iv,Tir),e(et,Mir),e(et,Nv),e(Nv,gbe),e(gbe,Eir),e(Nv,Cir),e(Nv,mW),e(mW,wir),e(Nv,Air),e(et,Lir),e(et,qv),e(qv,hbe),e(hbe,yir),e(qv,xir),e(qv,gW),e(gW,$ir),e(qv,kir),e(et,Sir),e(et,jv),e(jv,pbe),e(pbe,Rir),e(jv,Pir),e(jv,hW),e(hW,Bir),e(jv,Iir),e(et,Nir),e(et,Dv),e(Dv,_be),e(_be,qir),e(Dv,jir),e(Dv,pW),e(pW,Dir),e(Dv,Gir),e(mo,Oir),e(mo,Gv),e(Gv,Vir),e(Gv,ube),e(ube,Xir),e(Gv,zir),e(Gv,bbe),e(bbe,Qir),e(mo,Wir),M(Ov,mo,null),b(f,oVe,u),b(f,$d,u),e($d,Vv),e(Vv,vbe),M(R8,vbe,null),e($d,Hir),e($d,Fbe),e(Fbe,Uir),b(f,rVe,u),b(f,Qo,u),M(P8,Qo,null),e(Qo,Jir),e(Qo,kd),e(kd,Yir),e(kd,_W),e(_W,Kir),e(kd,Zir),e(kd,uW),e(uW,edr),e(kd,odr),e(Qo,rdr),e(Qo,B8),e(B8,tdr),e(B8,Tbe),e(Tbe,adr),e(B8,ndr),e(Qo,sdr),e(Qo,Mt),M(I8,Mt,null),e(Mt,ldr),e(Mt,Mbe),e(Mbe,idr),e(Mt,ddr),e(Mt,Sd),e(Sd,cdr),e(Sd,Ebe),e(Ebe,fdr),e(Sd,mdr),e(Sd,bW),e(bW,gdr),e(Sd,hdr),e(Mt,pdr),M(Xv,Mt,null),e(Qo,_dr),e(Qo,go),M(N8,go,null),e(go,udr),e(go,Cbe),e(Cbe,bdr),e(go,vdr),e(go,Ua),e(Ua,Fdr),e(Ua,wbe),e(wbe,Tdr),e(Ua,Mdr),e(Ua,Abe),e(Abe,Edr),e(Ua,Cdr),e(Ua,Lbe),e(Lbe,wdr),e(Ua,Adr),e(go,Ldr),e(go,Le),e(Le,zv),e(zv,ybe),e(ybe,ydr),e(zv,xdr),e(zv,vW),e(vW,$dr),e(zv,kdr),e(Le,Sdr),e(Le,Qv),e(Qv,xbe),e(xbe,Rdr),e(Qv,Pdr),e(Qv,FW),e(FW,Bdr),e(Qv,Idr),e(Le,Ndr),e(Le,Wv),e(Wv,$be),e($be,qdr),e(Wv,jdr),e(Wv,TW),e(TW,Ddr),e(Wv,Gdr),e(Le,Odr),e(Le,Hv),e(Hv,kbe),e(kbe,Vdr),e(Hv,Xdr),e(Hv,MW),e(MW,zdr),e(Hv,Qdr),e(Le,Wdr),e(Le,Uv),e(Uv,Sbe),e(Sbe,Hdr),e(Uv,Udr),e(Uv,EW),e(EW,Jdr),e(Uv,Ydr),e(Le,Kdr),e(Le,Jv),e(Jv,Rbe),e(Rbe,Zdr),e(Jv,ecr),e(Jv,CW),e(CW,ocr),e(Jv,rcr),e(Le,tcr),e(Le,Yv),e(Yv,Pbe),e(Pbe,acr),e(Yv,ncr),e(Yv,wW),e(wW,scr),e(Yv,lcr),e(Le,icr),e(Le,Kv),e(Kv,Bbe),e(Bbe,dcr),e(Kv,ccr),e(Kv,AW),e(AW,fcr),e(Kv,mcr),e(Le,gcr),e(Le,Zv),e(Zv,Ibe),e(Ibe,hcr),e(Zv,pcr),e(Zv,LW),e(LW,_cr),e(Zv,ucr),e(Le,bcr),e(Le,eF),e(eF,Nbe),e(Nbe,vcr),e(eF,Fcr),e(eF,yW),e(yW,Tcr),e(eF,Mcr),e(go,Ecr),e(go,oF),e(oF,Ccr),e(oF,qbe),e(qbe,wcr),e(oF,Acr),e(oF,jbe),e(jbe,Lcr),e(go,ycr),M(rF,go,null),b(f,tVe,u),b(f,Rd,u),e(Rd,tF),e(tF,Dbe),M(q8,Dbe,null),e(Rd,xcr),e(Rd,Gbe),e(Gbe,$cr),b(f,aVe,u),b(f,Wo,u),M(j8,Wo,null),e(Wo,kcr),e(Wo,Pd),e(Pd,Scr),e(Pd,xW),e(xW,Rcr),e(Pd,Pcr),e(Pd,$W),e($W,Bcr),e(Pd,Icr),e(Wo,Ncr),e(Wo,D8),e(D8,qcr),e(D8,Obe),e(Obe,jcr),e(D8,Dcr),e(Wo,Gcr),e(Wo,Et),M(G8,Et,null),e(Et,Ocr),e(Et,Vbe),e(Vbe,Vcr),e(Et,Xcr),e(Et,Bd),e(Bd,zcr),e(Bd,Xbe),e(Xbe,Qcr),e(Bd,Wcr),e(Bd,kW),e(kW,Hcr),e(Bd,Ucr),e(Et,Jcr),M(aF,Et,null),e(Wo,Ycr),e(Wo,ho),M(O8,ho,null),e(ho,Kcr),e(ho,zbe),e(zbe,Zcr),e(ho,efr),e(ho,Ja),e(Ja,ofr),e(Ja,Qbe),e(Qbe,rfr),e(Ja,tfr),e(Ja,Wbe),e(Wbe,afr),e(Ja,nfr),e(Ja,Hbe),e(Hbe,sfr),e(Ja,lfr),e(ho,ifr),e(ho,V8),e(V8,nF),e(nF,Ube),e(Ube,dfr),e(nF,cfr),e(nF,SW),e(SW,ffr),e(nF,mfr),e(V8,gfr),e(V8,sF),e(sF,Jbe),e(Jbe,hfr),e(sF,pfr),e(sF,RW),e(RW,_fr),e(sF,ufr),e(ho,bfr),e(ho,lF),e(lF,vfr),e(lF,Ybe),e(Ybe,Ffr),e(lF,Tfr),e(lF,Kbe),e(Kbe,Mfr),e(ho,Efr),M(iF,ho,null),b(f,nVe,u),b(f,Id,u),e(Id,dF),e(dF,Zbe),M(X8,Zbe,null),e(Id,Cfr),e(Id,e4e),e(e4e,wfr),b(f,sVe,u),b(f,Ho,u),M(z8,Ho,null),e(Ho,Afr),e(Ho,Nd),e(Nd,Lfr),e(Nd,PW),e(PW,yfr),e(Nd,xfr),e(Nd,BW),e(BW,$fr),e(Nd,kfr),e(Ho,Sfr),e(Ho,Q8),e(Q8,Rfr),e(Q8,o4e),e(o4e,Pfr),e(Q8,Bfr),e(Ho,Ifr),e(Ho,Ct),M(W8,Ct,null),e(Ct,Nfr),e(Ct,r4e),e(r4e,qfr),e(Ct,jfr),e(Ct,qd),e(qd,Dfr),e(qd,t4e),e(t4e,Gfr),e(qd,Ofr),e(qd,IW),e(IW,Vfr),e(qd,Xfr),e(Ct,zfr),M(cF,Ct,null),e(Ho,Qfr),e(Ho,po),M(H8,po,null),e(po,Wfr),e(po,a4e),e(a4e,Hfr),e(po,Ufr),e(po,Ya),e(Ya,Jfr),e(Ya,n4e),e(n4e,Yfr),e(Ya,Kfr),e(Ya,s4e),e(s4e,Zfr),e(Ya,emr),e(Ya,l4e),e(l4e,omr),e(Ya,rmr),e(po,tmr),e(po,ot),e(ot,fF),e(fF,i4e),e(i4e,amr),e(fF,nmr),e(fF,NW),e(NW,smr),e(fF,lmr),e(ot,imr),e(ot,mF),e(mF,d4e),e(d4e,dmr),e(mF,cmr),e(mF,qW),e(qW,fmr),e(mF,mmr),e(ot,gmr),e(ot,gF),e(gF,c4e),e(c4e,hmr),e(gF,pmr),e(gF,jW),e(jW,_mr),e(gF,umr),e(ot,bmr),e(ot,hF),e(hF,f4e),e(f4e,vmr),e(hF,Fmr),e(hF,DW),e(DW,Tmr),e(hF,Mmr),e(ot,Emr),e(ot,pF),e(pF,m4e),e(m4e,Cmr),e(pF,wmr),e(pF,GW),e(GW,Amr),e(pF,Lmr),e(po,ymr),e(po,_F),e(_F,xmr),e(_F,g4e),e(g4e,$mr),e(_F,kmr),e(_F,h4e),e(h4e,Smr),e(po,Rmr),M(uF,po,null),b(f,lVe,u),b(f,jd,u),e(jd,bF),e(bF,p4e),M(U8,p4e,null),e(jd,Pmr),e(jd,_4e),e(_4e,Bmr),b(f,iVe,u),b(f,Uo,u),M(J8,Uo,null),e(Uo,Imr),e(Uo,Dd),e(Dd,Nmr),e(Dd,OW),e(OW,qmr),e(Dd,jmr),e(Dd,VW),e(VW,Dmr),e(Dd,Gmr),e(Uo,Omr),e(Uo,Y8),e(Y8,Vmr),e(Y8,u4e),e(u4e,Xmr),e(Y8,zmr),e(Uo,Qmr),e(Uo,wt),M(K8,wt,null),e(wt,Wmr),e(wt,b4e),e(b4e,Hmr),e(wt,Umr),e(wt,Gd),e(Gd,Jmr),e(Gd,v4e),e(v4e,Ymr),e(Gd,Kmr),e(Gd,XW),e(XW,Zmr),e(Gd,egr),e(wt,ogr),M(vF,wt,null),e(Uo,rgr),e(Uo,_o),M(Z8,_o,null),e(_o,tgr),e(_o,F4e),e(F4e,agr),e(_o,ngr),e(_o,Ka),e(Ka,sgr),e(Ka,T4e),e(T4e,lgr),e(Ka,igr),e(Ka,M4e),e(M4e,dgr),e(Ka,cgr),e(Ka,E4e),e(E4e,fgr),e(Ka,mgr),e(_o,ggr),e(_o,Od),e(Od,FF),e(FF,C4e),e(C4e,hgr),e(FF,pgr),e(FF,zW),e(zW,_gr),e(FF,ugr),e(Od,bgr),e(Od,TF),e(TF,w4e),e(w4e,vgr),e(TF,Fgr),e(TF,QW),e(QW,Tgr),e(TF,Mgr),e(Od,Egr),e(Od,MF),e(MF,A4e),e(A4e,Cgr),e(MF,wgr),e(MF,WW),e(WW,Agr),e(MF,Lgr),e(_o,ygr),e(_o,EF),e(EF,xgr),e(EF,L4e),e(L4e,$gr),e(EF,kgr),e(EF,y4e),e(y4e,Sgr),e(_o,Rgr),M(CF,_o,null),b(f,dVe,u),b(f,Vd,u),e(Vd,wF),e(wF,x4e),M(e9,x4e,null),e(Vd,Pgr),e(Vd,$4e),e($4e,Bgr),b(f,cVe,u),b(f,Jo,u),M(o9,Jo,null),e(Jo,Igr),e(Jo,Xd),e(Xd,Ngr),e(Xd,HW),e(HW,qgr),e(Xd,jgr),e(Xd,UW),e(UW,Dgr),e(Xd,Ggr),e(Jo,Ogr),e(Jo,r9),e(r9,Vgr),e(r9,k4e),e(k4e,Xgr),e(r9,zgr),e(Jo,Qgr),e(Jo,At),M(t9,At,null),e(At,Wgr),e(At,S4e),e(S4e,Hgr),e(At,Ugr),e(At,zd),e(zd,Jgr),e(zd,R4e),e(R4e,Ygr),e(zd,Kgr),e(zd,JW),e(JW,Zgr),e(zd,ehr),e(At,ohr),M(AF,At,null),e(Jo,rhr),e(Jo,uo),M(a9,uo,null),e(uo,thr),e(uo,P4e),e(P4e,ahr),e(uo,nhr),e(uo,Za),e(Za,shr),e(Za,B4e),e(B4e,lhr),e(Za,ihr),e(Za,I4e),e(I4e,dhr),e(Za,chr),e(Za,N4e),e(N4e,fhr),e(Za,mhr),e(uo,ghr),e(uo,n9),e(n9,LF),e(LF,q4e),e(q4e,hhr),e(LF,phr),e(LF,YW),e(YW,_hr),e(LF,uhr),e(n9,bhr),e(n9,yF),e(yF,j4e),e(j4e,vhr),e(yF,Fhr),e(yF,KW),e(KW,Thr),e(yF,Mhr),e(uo,Ehr),e(uo,xF),e(xF,Chr),e(xF,D4e),e(D4e,whr),e(xF,Ahr),e(xF,G4e),e(G4e,Lhr),e(uo,yhr),M($F,uo,null),b(f,fVe,u),b(f,Qd,u),e(Qd,kF),e(kF,O4e),M(s9,O4e,null),e(Qd,xhr),e(Qd,V4e),e(V4e,$hr),b(f,mVe,u),b(f,Yo,u),M(l9,Yo,null),e(Yo,khr),e(Yo,Wd),e(Wd,Shr),e(Wd,ZW),e(ZW,Rhr),e(Wd,Phr),e(Wd,eH),e(eH,Bhr),e(Wd,Ihr),e(Yo,Nhr),e(Yo,i9),e(i9,qhr),e(i9,X4e),e(X4e,jhr),e(i9,Dhr),e(Yo,Ghr),e(Yo,Lt),M(d9,Lt,null),e(Lt,Ohr),e(Lt,z4e),e(z4e,Vhr),e(Lt,Xhr),e(Lt,Hd),e(Hd,zhr),e(Hd,Q4e),e(Q4e,Qhr),e(Hd,Whr),e(Hd,oH),e(oH,Hhr),e(Hd,Uhr),e(Lt,Jhr),M(SF,Lt,null),e(Yo,Yhr),e(Yo,bo),M(c9,bo,null),e(bo,Khr),e(bo,W4e),e(W4e,Zhr),e(bo,epr),e(bo,en),e(en,opr),e(en,H4e),e(H4e,rpr),e(en,tpr),e(en,U4e),e(U4e,apr),e(en,npr),e(en,J4e),e(J4e,spr),e(en,lpr),e(bo,ipr),e(bo,Y4e),e(Y4e,RF),e(RF,K4e),e(K4e,dpr),e(RF,cpr),e(RF,rH),e(rH,fpr),e(RF,mpr),e(bo,gpr),e(bo,PF),e(PF,hpr),e(PF,Z4e),e(Z4e,ppr),e(PF,_pr),e(PF,e5e),e(e5e,upr),e(bo,bpr),M(BF,bo,null),b(f,gVe,u),b(f,Ud,u),e(Ud,IF),e(IF,o5e),M(f9,o5e,null),e(Ud,vpr),e(Ud,r5e),e(r5e,Fpr),b(f,hVe,u),b(f,Ko,u),M(m9,Ko,null),e(Ko,Tpr),e(Ko,Jd),e(Jd,Mpr),e(Jd,tH),e(tH,Epr),e(Jd,Cpr),e(Jd,aH),e(aH,wpr),e(Jd,Apr),e(Ko,Lpr),e(Ko,g9),e(g9,ypr),e(g9,t5e),e(t5e,xpr),e(g9,$pr),e(Ko,kpr),e(Ko,yt),M(h9,yt,null),e(yt,Spr),e(yt,a5e),e(a5e,Rpr),e(yt,Ppr),e(yt,Yd),e(Yd,Bpr),e(Yd,n5e),e(n5e,Ipr),e(Yd,Npr),e(Yd,nH),e(nH,qpr),e(Yd,jpr),e(yt,Dpr),M(NF,yt,null),e(Ko,Gpr),e(Ko,vo),M(p9,vo,null),e(vo,Opr),e(vo,s5e),e(s5e,Vpr),e(vo,Xpr),e(vo,on),e(on,zpr),e(on,l5e),e(l5e,Qpr),e(on,Wpr),e(on,i5e),e(i5e,Hpr),e(on,Upr),e(on,d5e),e(d5e,Jpr),e(on,Ypr),e(vo,Kpr),e(vo,rn),e(rn,qF),e(qF,c5e),e(c5e,Zpr),e(qF,e_r),e(qF,sH),e(sH,o_r),e(qF,r_r),e(rn,t_r),e(rn,jF),e(jF,f5e),e(f5e,a_r),e(jF,n_r),e(jF,lH),e(lH,s_r),e(jF,l_r),e(rn,i_r),e(rn,DF),e(DF,m5e),e(m5e,d_r),e(DF,c_r),e(DF,iH),e(iH,f_r),e(DF,m_r),e(rn,g_r),e(rn,GF),e(GF,g5e),e(g5e,h_r),e(GF,p_r),e(GF,dH),e(dH,__r),e(GF,u_r),e(vo,b_r),e(vo,OF),e(OF,v_r),e(OF,h5e),e(h5e,F_r),e(OF,T_r),e(OF,p5e),e(p5e,M_r),e(vo,E_r),M(VF,vo,null),b(f,pVe,u),b(f,Kd,u),e(Kd,XF),e(XF,_5e),M(_9,_5e,null),e(Kd,C_r),e(Kd,u5e),e(u5e,w_r),b(f,_Ve,u),b(f,Zo,u),M(u9,Zo,null),e(Zo,A_r),e(Zo,Zd),e(Zd,L_r),e(Zd,cH),e(cH,y_r),e(Zd,x_r),e(Zd,fH),e(fH,$_r),e(Zd,k_r),e(Zo,S_r),e(Zo,b9),e(b9,R_r),e(b9,b5e),e(b5e,P_r),e(b9,B_r),e(Zo,I_r),e(Zo,xt),M(v9,xt,null),e(xt,N_r),e(xt,v5e),e(v5e,q_r),e(xt,j_r),e(xt,ec),e(ec,D_r),e(ec,F5e),e(F5e,G_r),e(ec,O_r),e(ec,mH),e(mH,V_r),e(ec,X_r),e(xt,z_r),M(zF,xt,null),e(Zo,Q_r),e(Zo,Fo),M(F9,Fo,null),e(Fo,W_r),e(Fo,T5e),e(T5e,H_r),e(Fo,U_r),e(Fo,tn),e(tn,J_r),e(tn,M5e),e(M5e,Y_r),e(tn,K_r),e(tn,E5e),e(E5e,Z_r),e(tn,eur),e(tn,C5e),e(C5e,our),e(tn,rur),e(Fo,tur),e(Fo,w5e),e(w5e,QF),e(QF,A5e),e(A5e,aur),e(QF,nur),e(QF,gH),e(gH,sur),e(QF,lur),e(Fo,iur),e(Fo,WF),e(WF,dur),e(WF,L5e),e(L5e,cur),e(WF,fur),e(WF,y5e),e(y5e,mur),e(Fo,gur),M(HF,Fo,null),b(f,uVe,u),b(f,oc,u),e(oc,UF),e(UF,x5e),M(T9,x5e,null),e(oc,hur),e(oc,$5e),e($5e,pur),b(f,bVe,u),b(f,er,u),M(M9,er,null),e(er,_ur),e(er,rc),e(rc,uur),e(rc,hH),e(hH,bur),e(rc,vur),e(rc,pH),e(pH,Fur),e(rc,Tur),e(er,Mur),e(er,E9),e(E9,Eur),e(E9,k5e),e(k5e,Cur),e(E9,wur),e(er,Aur),e(er,$t),M(C9,$t,null),e($t,Lur),e($t,S5e),e(S5e,yur),e($t,xur),e($t,tc),e(tc,$ur),e(tc,R5e),e(R5e,kur),e(tc,Sur),e(tc,_H),e(_H,Rur),e(tc,Pur),e($t,Bur),M(JF,$t,null),e(er,Iur),e(er,yr),M(w9,yr,null),e(yr,Nur),e(yr,P5e),e(P5e,qur),e(yr,jur),e(yr,an),e(an,Dur),e(an,B5e),e(B5e,Gur),e(an,Our),e(an,I5e),e(I5e,Vur),e(an,Xur),e(an,N5e),e(N5e,zur),e(an,Qur),e(yr,Wur),e(yr,q),e(q,YF),e(YF,q5e),e(q5e,Hur),e(YF,Uur),e(YF,uH),e(uH,Jur),e(YF,Yur),e(q,Kur),e(q,KF),e(KF,j5e),e(j5e,Zur),e(KF,e1r),e(KF,bH),e(bH,o1r),e(KF,r1r),e(q,t1r),e(q,ZF),e(ZF,D5e),e(D5e,a1r),e(ZF,n1r),e(ZF,vH),e(vH,s1r),e(ZF,l1r),e(q,i1r),e(q,e6),e(e6,G5e),e(G5e,d1r),e(e6,c1r),e(e6,FH),e(FH,f1r),e(e6,m1r),e(q,g1r),e(q,o6),e(o6,O5e),e(O5e,h1r),e(o6,p1r),e(o6,TH),e(TH,_1r),e(o6,u1r),e(q,b1r),e(q,r6),e(r6,V5e),e(V5e,v1r),e(r6,F1r),e(r6,MH),e(MH,T1r),e(r6,M1r),e(q,E1r),e(q,t6),e(t6,X5e),e(X5e,C1r),e(t6,w1r),e(t6,EH),e(EH,A1r),e(t6,L1r),e(q,y1r),e(q,a6),e(a6,z5e),e(z5e,x1r),e(a6,$1r),e(a6,CH),e(CH,k1r),e(a6,S1r),e(q,R1r),e(q,n6),e(n6,Q5e),e(Q5e,P1r),e(n6,B1r),e(n6,wH),e(wH,I1r),e(n6,N1r),e(q,q1r),e(q,s6),e(s6,W5e),e(W5e,j1r),e(s6,D1r),e(s6,AH),e(AH,G1r),e(s6,O1r),e(q,V1r),e(q,l6),e(l6,H5e),e(H5e,X1r),e(l6,z1r),e(l6,LH),e(LH,Q1r),e(l6,W1r),e(q,H1r),e(q,i6),e(i6,U5e),e(U5e,U1r),e(i6,J1r),e(i6,yH),e(yH,Y1r),e(i6,K1r),e(q,Z1r),e(q,d6),e(d6,J5e),e(J5e,e2r),e(d6,o2r),e(d6,xH),e(xH,r2r),e(d6,t2r),e(q,a2r),e(q,c6),e(c6,Y5e),e(Y5e,n2r),e(c6,s2r),e(c6,$H),e($H,l2r),e(c6,i2r),e(q,d2r),e(q,f6),e(f6,K5e),e(K5e,c2r),e(f6,f2r),e(f6,kH),e(kH,m2r),e(f6,g2r),e(q,h2r),e(q,m6),e(m6,Z5e),e(Z5e,p2r),e(m6,_2r),e(m6,SH),e(SH,u2r),e(m6,b2r),e(q,v2r),e(q,g6),e(g6,e3e),e(e3e,F2r),e(g6,T2r),e(g6,RH),e(RH,M2r),e(g6,E2r),e(q,C2r),e(q,Ws),e(Ws,o3e),e(o3e,w2r),e(Ws,A2r),e(Ws,PH),e(PH,L2r),e(Ws,y2r),e(Ws,BH),e(BH,x2r),e(Ws,$2r),e(q,k2r),e(q,h6),e(h6,r3e),e(r3e,S2r),e(h6,R2r),e(h6,IH),e(IH,P2r),e(h6,B2r),e(q,I2r),e(q,p6),e(p6,t3e),e(t3e,N2r),e(p6,q2r),e(p6,NH),e(NH,j2r),e(p6,D2r),e(q,G2r),e(q,_6),e(_6,a3e),e(a3e,O2r),e(_6,V2r),e(_6,qH),e(qH,X2r),e(_6,z2r),e(q,Q2r),e(q,u6),e(u6,n3e),e(n3e,W2r),e(u6,H2r),e(u6,jH),e(jH,U2r),e(u6,J2r),e(q,Y2r),e(q,b6),e(b6,s3e),e(s3e,K2r),e(b6,Z2r),e(b6,DH),e(DH,ebr),e(b6,obr),e(q,rbr),e(q,v6),e(v6,l3e),e(l3e,tbr),e(v6,abr),e(v6,GH),e(GH,nbr),e(v6,sbr),e(q,lbr),e(q,F6),e(F6,i3e),e(i3e,ibr),e(F6,dbr),e(F6,OH),e(OH,cbr),e(F6,fbr),e(q,mbr),e(q,T6),e(T6,d3e),e(d3e,gbr),e(T6,hbr),e(T6,VH),e(VH,pbr),e(T6,_br),e(q,ubr),e(q,M6),e(M6,c3e),e(c3e,bbr),e(M6,vbr),e(M6,XH),e(XH,Fbr),e(M6,Tbr),e(q,Mbr),e(q,E6),e(E6,f3e),e(f3e,Ebr),e(E6,Cbr),e(E6,zH),e(zH,wbr),e(E6,Abr),e(q,Lbr),e(q,C6),e(C6,m3e),e(m3e,ybr),e(C6,xbr),e(C6,QH),e(QH,$br),e(C6,kbr),e(q,Sbr),e(q,w6),e(w6,g3e),e(g3e,Rbr),e(w6,Pbr),e(w6,WH),e(WH,Bbr),e(w6,Ibr),e(q,Nbr),e(q,A6),e(A6,h3e),e(h3e,qbr),e(A6,jbr),e(A6,HH),e(HH,Dbr),e(A6,Gbr),e(q,Obr),e(q,L6),e(L6,p3e),e(p3e,Vbr),e(L6,Xbr),e(L6,UH),e(UH,zbr),e(L6,Qbr),e(q,Wbr),e(q,y6),e(y6,_3e),e(_3e,Hbr),e(y6,Ubr),e(y6,JH),e(JH,Jbr),e(y6,Ybr),e(q,Kbr),e(q,x6),e(x6,u3e),e(u3e,Zbr),e(x6,e4r),e(x6,YH),e(YH,o4r),e(x6,r4r),e(q,t4r),e(q,$6),e($6,b3e),e(b3e,a4r),e($6,n4r),e($6,KH),e(KH,s4r),e($6,l4r),e(q,i4r),e(q,k6),e(k6,v3e),e(v3e,d4r),e(k6,c4r),e(k6,ZH),e(ZH,f4r),e(k6,m4r),e(q,g4r),e(q,S6),e(S6,F3e),e(F3e,h4r),e(S6,p4r),e(S6,eU),e(eU,_4r),e(S6,u4r),e(q,b4r),e(q,R6),e(R6,T3e),e(T3e,v4r),e(R6,F4r),e(R6,oU),e(oU,T4r),e(R6,M4r),e(q,E4r),e(q,P6),e(P6,M3e),e(M3e,C4r),e(P6,w4r),e(P6,rU),e(rU,A4r),e(P6,L4r),e(q,y4r),e(q,B6),e(B6,E3e),e(E3e,x4r),e(B6,$4r),e(B6,tU),e(tU,k4r),e(B6,S4r),e(q,R4r),e(q,I6),e(I6,C3e),e(C3e,P4r),e(I6,B4r),e(I6,aU),e(aU,I4r),e(I6,N4r),e(q,q4r),e(q,N6),e(N6,w3e),e(w3e,j4r),e(N6,D4r),e(N6,nU),e(nU,G4r),e(N6,O4r),e(q,V4r),e(q,q6),e(q6,A3e),e(A3e,X4r),e(q6,z4r),e(q6,sU),e(sU,Q4r),e(q6,W4r),e(q,H4r),e(q,j6),e(j6,L3e),e(L3e,U4r),e(j6,J4r),e(j6,lU),e(lU,Y4r),e(j6,K4r),e(q,Z4r),e(q,D6),e(D6,y3e),e(y3e,e5r),e(D6,o5r),e(D6,iU),e(iU,r5r),e(D6,t5r),e(q,a5r),e(q,G6),e(G6,x3e),e(x3e,n5r),e(G6,s5r),e(G6,dU),e(dU,l5r),e(G6,i5r),e(q,d5r),e(q,O6),e(O6,$3e),e($3e,c5r),e(O6,f5r),e(O6,cU),e(cU,m5r),e(O6,g5r),e(q,h5r),e(q,V6),e(V6,k3e),e(k3e,p5r),e(V6,_5r),e(V6,fU),e(fU,u5r),e(V6,b5r),e(yr,v5r),M(X6,yr,null),b(f,vVe,u),b(f,ac,u),e(ac,z6),e(z6,S3e),M(A9,S3e,null),e(ac,F5r),e(ac,R3e),e(R3e,T5r),b(f,FVe,u),b(f,or,u),M(L9,or,null),e(or,M5r),e(or,nc),e(nc,E5r),e(nc,mU),e(mU,C5r),e(nc,w5r),e(nc,gU),e(gU,A5r),e(nc,L5r),e(or,y5r),e(or,y9),e(y9,x5r),e(y9,P3e),e(P3e,$5r),e(y9,k5r),e(or,S5r),e(or,kt),M(x9,kt,null),e(kt,R5r),e(kt,B3e),e(B3e,P5r),e(kt,B5r),e(kt,sc),e(sc,I5r),e(sc,I3e),e(I3e,N5r),e(sc,q5r),e(sc,hU),e(hU,j5r),e(sc,D5r),e(kt,G5r),M(Q6,kt,null),e(or,O5r),e(or,xr),M($9,xr,null),e(xr,V5r),e(xr,N3e),e(N3e,X5r),e(xr,z5r),e(xr,nn),e(nn,Q5r),e(nn,q3e),e(q3e,W5r),e(nn,H5r),e(nn,j3e),e(j3e,U5r),e(nn,J5r),e(nn,D3e),e(D3e,Y5r),e(nn,K5r),e(xr,Z5r),e(xr,se),e(se,W6),e(W6,G3e),e(G3e,e3r),e(W6,o3r),e(W6,pU),e(pU,r3r),e(W6,t3r),e(se,a3r),e(se,H6),e(H6,O3e),e(O3e,n3r),e(H6,s3r),e(H6,_U),e(_U,l3r),e(H6,i3r),e(se,d3r),e(se,U6),e(U6,V3e),e(V3e,c3r),e(U6,f3r),e(U6,uU),e(uU,m3r),e(U6,g3r),e(se,h3r),e(se,J6),e(J6,X3e),e(X3e,p3r),e(J6,_3r),e(J6,bU),e(bU,u3r),e(J6,b3r),e(se,v3r),e(se,Y6),e(Y6,z3e),e(z3e,F3r),e(Y6,T3r),e(Y6,vU),e(vU,M3r),e(Y6,E3r),e(se,C3r),e(se,K6),e(K6,Q3e),e(Q3e,w3r),e(K6,A3r),e(K6,FU),e(FU,L3r),e(K6,y3r),e(se,x3r),e(se,Z6),e(Z6,W3e),e(W3e,$3r),e(Z6,k3r),e(Z6,TU),e(TU,S3r),e(Z6,R3r),e(se,P3r),e(se,eT),e(eT,H3e),e(H3e,B3r),e(eT,I3r),e(eT,MU),e(MU,N3r),e(eT,q3r),e(se,j3r),e(se,oT),e(oT,U3e),e(U3e,D3r),e(oT,G3r),e(oT,EU),e(EU,O3r),e(oT,V3r),e(se,X3r),e(se,rT),e(rT,J3e),e(J3e,z3r),e(rT,Q3r),e(rT,CU),e(CU,W3r),e(rT,H3r),e(se,U3r),e(se,tT),e(tT,Y3e),e(Y3e,J3r),e(tT,Y3r),e(tT,wU),e(wU,K3r),e(tT,Z3r),e(se,evr),e(se,aT),e(aT,K3e),e(K3e,ovr),e(aT,rvr),e(aT,AU),e(AU,tvr),e(aT,avr),e(se,nvr),e(se,nT),e(nT,Z3e),e(Z3e,svr),e(nT,lvr),e(nT,LU),e(LU,ivr),e(nT,dvr),e(se,cvr),e(se,sT),e(sT,eve),e(eve,fvr),e(sT,mvr),e(sT,yU),e(yU,gvr),e(sT,hvr),e(se,pvr),e(se,lT),e(lT,ove),e(ove,_vr),e(lT,uvr),e(lT,xU),e(xU,bvr),e(lT,vvr),e(se,Fvr),e(se,iT),e(iT,rve),e(rve,Tvr),e(iT,Mvr),e(iT,$U),e($U,Evr),e(iT,Cvr),e(se,wvr),e(se,dT),e(dT,tve),e(tve,Avr),e(dT,Lvr),e(dT,kU),e(kU,yvr),e(dT,xvr),e(se,$vr),e(se,cT),e(cT,ave),e(ave,kvr),e(cT,Svr),e(cT,SU),e(SU,Rvr),e(cT,Pvr),e(se,Bvr),e(se,fT),e(fT,nve),e(nve,Ivr),e(fT,Nvr),e(fT,RU),e(RU,qvr),e(fT,jvr),e(se,Dvr),e(se,mT),e(mT,sve),e(sve,Gvr),e(mT,Ovr),e(mT,PU),e(PU,Vvr),e(mT,Xvr),e(se,zvr),e(se,gT),e(gT,lve),e(lve,Qvr),e(gT,Wvr),e(gT,BU),e(BU,Hvr),e(gT,Uvr),e(se,Jvr),e(se,hT),e(hT,ive),e(ive,Yvr),e(hT,Kvr),e(hT,IU),e(IU,Zvr),e(hT,eFr),e(se,oFr),e(se,pT),e(pT,dve),e(dve,rFr),e(pT,tFr),e(pT,NU),e(NU,aFr),e(pT,nFr),e(xr,sFr),M(_T,xr,null),b(f,TVe,u),b(f,lc,u),e(lc,uT),e(uT,cve),M(k9,cve,null),e(lc,lFr),e(lc,fve),e(fve,iFr),b(f,MVe,u),b(f,rr,u),M(S9,rr,null),e(rr,dFr),e(rr,ic),e(ic,cFr),e(ic,qU),e(qU,fFr),e(ic,mFr),e(ic,jU),e(jU,gFr),e(ic,hFr),e(rr,pFr),e(rr,R9),e(R9,_Fr),e(R9,mve),e(mve,uFr),e(R9,bFr),e(rr,vFr),e(rr,St),M(P9,St,null),e(St,FFr),e(St,gve),e(gve,TFr),e(St,MFr),e(St,dc),e(dc,EFr),e(dc,hve),e(hve,CFr),e(dc,wFr),e(dc,DU),e(DU,AFr),e(dc,LFr),e(St,yFr),M(bT,St,null),e(rr,xFr),e(rr,$r),M(B9,$r,null),e($r,$Fr),e($r,pve),e(pve,kFr),e($r,SFr),e($r,sn),e(sn,RFr),e(sn,_ve),e(_ve,PFr),e(sn,BFr),e(sn,uve),e(uve,IFr),e(sn,NFr),e(sn,bve),e(bve,qFr),e(sn,jFr),e($r,DFr),e($r,Te),e(Te,vT),e(vT,vve),e(vve,GFr),e(vT,OFr),e(vT,GU),e(GU,VFr),e(vT,XFr),e(Te,zFr),e(Te,FT),e(FT,Fve),e(Fve,QFr),e(FT,WFr),e(FT,OU),e(OU,HFr),e(FT,UFr),e(Te,JFr),e(Te,TT),e(TT,Tve),e(Tve,YFr),e(TT,KFr),e(TT,VU),e(VU,ZFr),e(TT,e6r),e(Te,o6r),e(Te,MT),e(MT,Mve),e(Mve,r6r),e(MT,t6r),e(MT,XU),e(XU,a6r),e(MT,n6r),e(Te,s6r),e(Te,ET),e(ET,Eve),e(Eve,l6r),e(ET,i6r),e(ET,zU),e(zU,d6r),e(ET,c6r),e(Te,f6r),e(Te,CT),e(CT,Cve),e(Cve,m6r),e(CT,g6r),e(CT,QU),e(QU,h6r),e(CT,p6r),e(Te,_6r),e(Te,wT),e(wT,wve),e(wve,u6r),e(wT,b6r),e(wT,WU),e(WU,v6r),e(wT,F6r),e(Te,T6r),e(Te,AT),e(AT,Ave),e(Ave,M6r),e(AT,E6r),e(AT,HU),e(HU,C6r),e(AT,w6r),e(Te,A6r),e(Te,LT),e(LT,Lve),e(Lve,L6r),e(LT,y6r),e(LT,UU),e(UU,x6r),e(LT,$6r),e(Te,k6r),e(Te,yT),e(yT,yve),e(yve,S6r),e(yT,R6r),e(yT,JU),e(JU,P6r),e(yT,B6r),e(Te,I6r),e(Te,xT),e(xT,xve),e(xve,N6r),e(xT,q6r),e(xT,YU),e(YU,j6r),e(xT,D6r),e(Te,G6r),e(Te,$T),e($T,$ve),e($ve,O6r),e($T,V6r),e($T,KU),e(KU,X6r),e($T,z6r),e(Te,Q6r),e(Te,kT),e(kT,kve),e(kve,W6r),e(kT,H6r),e(kT,ZU),e(ZU,U6r),e(kT,J6r),e(Te,Y6r),e(Te,ST),e(ST,Sve),e(Sve,K6r),e(ST,Z6r),e(ST,eJ),e(eJ,eTr),e(ST,oTr),e($r,rTr),M(RT,$r,null),b(f,EVe,u),b(f,cc,u),e(cc,PT),e(PT,Rve),M(I9,Rve,null),e(cc,tTr),e(cc,Pve),e(Pve,aTr),b(f,CVe,u),b(f,tr,u),M(N9,tr,null),e(tr,nTr),e(tr,fc),e(fc,sTr),e(fc,oJ),e(oJ,lTr),e(fc,iTr),e(fc,rJ),e(rJ,dTr),e(fc,cTr),e(tr,fTr),e(tr,q9),e(q9,mTr),e(q9,Bve),e(Bve,gTr),e(q9,hTr),e(tr,pTr),e(tr,Rt),M(j9,Rt,null),e(Rt,_Tr),e(Rt,Ive),e(Ive,uTr),e(Rt,bTr),e(Rt,mc),e(mc,vTr),e(mc,Nve),e(Nve,FTr),e(mc,TTr),e(mc,tJ),e(tJ,MTr),e(mc,ETr),e(Rt,CTr),M(BT,Rt,null),e(tr,wTr),e(tr,kr),M(D9,kr,null),e(kr,ATr),e(kr,qve),e(qve,LTr),e(kr,yTr),e(kr,ln),e(ln,xTr),e(ln,jve),e(jve,$Tr),e(ln,kTr),e(ln,Dve),e(Dve,STr),e(ln,RTr),e(ln,Gve),e(Gve,PTr),e(ln,BTr),e(kr,ITr),e(kr,dn),e(dn,IT),e(IT,Ove),e(Ove,NTr),e(IT,qTr),e(IT,aJ),e(aJ,jTr),e(IT,DTr),e(dn,GTr),e(dn,NT),e(NT,Vve),e(Vve,OTr),e(NT,VTr),e(NT,nJ),e(nJ,XTr),e(NT,zTr),e(dn,QTr),e(dn,qT),e(qT,Xve),e(Xve,WTr),e(qT,HTr),e(qT,sJ),e(sJ,UTr),e(qT,JTr),e(dn,YTr),e(dn,jT),e(jT,zve),e(zve,KTr),e(jT,ZTr),e(jT,lJ),e(lJ,eMr),e(jT,oMr),e(kr,rMr),M(DT,kr,null),b(f,wVe,u),b(f,gc,u),e(gc,GT),e(GT,Qve),M(G9,Qve,null),e(gc,tMr),e(gc,Wve),e(Wve,aMr),b(f,AVe,u),b(f,ar,u),M(O9,ar,null),e(ar,nMr),e(ar,hc),e(hc,sMr),e(hc,iJ),e(iJ,lMr),e(hc,iMr),e(hc,dJ),e(dJ,dMr),e(hc,cMr),e(ar,fMr),e(ar,V9),e(V9,mMr),e(V9,Hve),e(Hve,gMr),e(V9,hMr),e(ar,pMr),e(ar,Pt),M(X9,Pt,null),e(Pt,_Mr),e(Pt,Uve),e(Uve,uMr),e(Pt,bMr),e(Pt,pc),e(pc,vMr),e(pc,Jve),e(Jve,FMr),e(pc,TMr),e(pc,cJ),e(cJ,MMr),e(pc,EMr),e(Pt,CMr),M(OT,Pt,null),e(ar,wMr),e(ar,Sr),M(z9,Sr,null),e(Sr,AMr),e(Sr,Yve),e(Yve,LMr),e(Sr,yMr),e(Sr,cn),e(cn,xMr),e(cn,Kve),e(Kve,$Mr),e(cn,kMr),e(cn,Zve),e(Zve,SMr),e(cn,RMr),e(cn,eFe),e(eFe,PMr),e(cn,BMr),e(Sr,IMr),e(Sr,ie),e(ie,VT),e(VT,oFe),e(oFe,NMr),e(VT,qMr),e(VT,fJ),e(fJ,jMr),e(VT,DMr),e(ie,GMr),e(ie,XT),e(XT,rFe),e(rFe,OMr),e(XT,VMr),e(XT,mJ),e(mJ,XMr),e(XT,zMr),e(ie,QMr),e(ie,zT),e(zT,tFe),e(tFe,WMr),e(zT,HMr),e(zT,gJ),e(gJ,UMr),e(zT,JMr),e(ie,YMr),e(ie,QT),e(QT,aFe),e(aFe,KMr),e(QT,ZMr),e(QT,hJ),e(hJ,eEr),e(QT,oEr),e(ie,rEr),e(ie,WT),e(WT,nFe),e(nFe,tEr),e(WT,aEr),e(WT,pJ),e(pJ,nEr),e(WT,sEr),e(ie,lEr),e(ie,HT),e(HT,sFe),e(sFe,iEr),e(HT,dEr),e(HT,_J),e(_J,cEr),e(HT,fEr),e(ie,mEr),e(ie,UT),e(UT,lFe),e(lFe,gEr),e(UT,hEr),e(UT,uJ),e(uJ,pEr),e(UT,_Er),e(ie,uEr),e(ie,JT),e(JT,iFe),e(iFe,bEr),e(JT,vEr),e(JT,bJ),e(bJ,FEr),e(JT,TEr),e(ie,MEr),e(ie,YT),e(YT,dFe),e(dFe,EEr),e(YT,CEr),e(YT,vJ),e(vJ,wEr),e(YT,AEr),e(ie,LEr),e(ie,KT),e(KT,cFe),e(cFe,yEr),e(KT,xEr),e(KT,FJ),e(FJ,$Er),e(KT,kEr),e(ie,SEr),e(ie,ZT),e(ZT,fFe),e(fFe,REr),e(ZT,PEr),e(ZT,TJ),e(TJ,BEr),e(ZT,IEr),e(ie,NEr),e(ie,eM),e(eM,mFe),e(mFe,qEr),e(eM,jEr),e(eM,MJ),e(MJ,DEr),e(eM,GEr),e(ie,OEr),e(ie,oM),e(oM,gFe),e(gFe,VEr),e(oM,XEr),e(oM,EJ),e(EJ,zEr),e(oM,QEr),e(ie,WEr),e(ie,rM),e(rM,hFe),e(hFe,HEr),e(rM,UEr),e(rM,CJ),e(CJ,JEr),e(rM,YEr),e(ie,KEr),e(ie,tM),e(tM,pFe),e(pFe,ZEr),e(tM,eCr),e(tM,wJ),e(wJ,oCr),e(tM,rCr),e(ie,tCr),e(ie,aM),e(aM,_Fe),e(_Fe,aCr),e(aM,nCr),e(aM,AJ),e(AJ,sCr),e(aM,lCr),e(ie,iCr),e(ie,nM),e(nM,uFe),e(uFe,dCr),e(nM,cCr),e(nM,LJ),e(LJ,fCr),e(nM,mCr),e(ie,gCr),e(ie,sM),e(sM,bFe),e(bFe,hCr),e(sM,pCr),e(sM,yJ),e(yJ,_Cr),e(sM,uCr),e(ie,bCr),e(ie,lM),e(lM,vFe),e(vFe,vCr),e(lM,FCr),e(lM,xJ),e(xJ,TCr),e(lM,MCr),e(ie,ECr),e(ie,iM),e(iM,FFe),e(FFe,CCr),e(iM,wCr),e(iM,$J),e($J,ACr),e(iM,LCr),e(Sr,yCr),M(dM,Sr,null),b(f,LVe,u),b(f,_c,u),e(_c,cM),e(cM,TFe),M(Q9,TFe,null),e(_c,xCr),e(_c,MFe),e(MFe,$Cr),b(f,yVe,u),b(f,nr,u),M(W9,nr,null),e(nr,kCr),e(nr,uc),e(uc,SCr),e(uc,kJ),e(kJ,RCr),e(uc,PCr),e(uc,SJ),e(SJ,BCr),e(uc,ICr),e(nr,NCr),e(nr,H9),e(H9,qCr),e(H9,EFe),e(EFe,jCr),e(H9,DCr),e(nr,GCr),e(nr,Bt),M(U9,Bt,null),e(Bt,OCr),e(Bt,CFe),e(CFe,VCr),e(Bt,XCr),e(Bt,bc),e(bc,zCr),e(bc,wFe),e(wFe,QCr),e(bc,WCr),e(bc,RJ),e(RJ,HCr),e(bc,UCr),e(Bt,JCr),M(fM,Bt,null),e(nr,YCr),e(nr,Rr),M(J9,Rr,null),e(Rr,KCr),e(Rr,AFe),e(AFe,ZCr),e(Rr,e0r),e(Rr,fn),e(fn,o0r),e(fn,LFe),e(LFe,r0r),e(fn,t0r),e(fn,yFe),e(yFe,a0r),e(fn,n0r),e(fn,xFe),e(xFe,s0r),e(fn,l0r),e(Rr,i0r),e(Rr,ye),e(ye,mM),e(mM,$Fe),e($Fe,d0r),e(mM,c0r),e(mM,PJ),e(PJ,f0r),e(mM,m0r),e(ye,g0r),e(ye,gM),e(gM,kFe),e(kFe,h0r),e(gM,p0r),e(gM,BJ),e(BJ,_0r),e(gM,u0r),e(ye,b0r),e(ye,hM),e(hM,SFe),e(SFe,v0r),e(hM,F0r),e(hM,IJ),e(IJ,T0r),e(hM,M0r),e(ye,E0r),e(ye,pM),e(pM,RFe),e(RFe,C0r),e(pM,w0r),e(pM,NJ),e(NJ,A0r),e(pM,L0r),e(ye,y0r),e(ye,_M),e(_M,PFe),e(PFe,x0r),e(_M,$0r),e(_M,qJ),e(qJ,k0r),e(_M,S0r),e(ye,R0r),e(ye,uM),e(uM,BFe),e(BFe,P0r),e(uM,B0r),e(uM,jJ),e(jJ,I0r),e(uM,N0r),e(ye,q0r),e(ye,bM),e(bM,IFe),e(IFe,j0r),e(bM,D0r),e(bM,DJ),e(DJ,G0r),e(bM,O0r),e(ye,V0r),e(ye,vM),e(vM,NFe),e(NFe,X0r),e(vM,z0r),e(vM,GJ),e(GJ,Q0r),e(vM,W0r),e(ye,H0r),e(ye,FM),e(FM,qFe),e(qFe,U0r),e(FM,J0r),e(FM,OJ),e(OJ,Y0r),e(FM,K0r),e(ye,Z0r),e(ye,TM),e(TM,jFe),e(jFe,ewr),e(TM,owr),e(TM,VJ),e(VJ,rwr),e(TM,twr),e(Rr,awr),M(MM,Rr,null),b(f,xVe,u),b(f,vc,u),e(vc,EM),e(EM,DFe),M(Y9,DFe,null),e(vc,nwr),e(vc,GFe),e(GFe,swr),b(f,$Ve,u),b(f,sr,u),M(K9,sr,null),e(sr,lwr),e(sr,Fc),e(Fc,iwr),e(Fc,XJ),e(XJ,dwr),e(Fc,cwr),e(Fc,zJ),e(zJ,fwr),e(Fc,mwr),e(sr,gwr),e(sr,Z9),e(Z9,hwr),e(Z9,OFe),e(OFe,pwr),e(Z9,_wr),e(sr,uwr),e(sr,It),M(ex,It,null),e(It,bwr),e(It,VFe),e(VFe,vwr),e(It,Fwr),e(It,Tc),e(Tc,Twr),e(Tc,XFe),e(XFe,Mwr),e(Tc,Ewr),e(Tc,QJ),e(QJ,Cwr),e(Tc,wwr),e(It,Awr),M(CM,It,null),e(sr,Lwr),e(sr,Pr),M(ox,Pr,null),e(Pr,ywr),e(Pr,zFe),e(zFe,xwr),e(Pr,$wr),e(Pr,mn),e(mn,kwr),e(mn,QFe),e(QFe,Swr),e(mn,Rwr),e(mn,WFe),e(WFe,Pwr),e(mn,Bwr),e(mn,HFe),e(HFe,Iwr),e(mn,Nwr),e(Pr,qwr),e(Pr,te),e(te,wM),e(wM,UFe),e(UFe,jwr),e(wM,Dwr),e(wM,WJ),e(WJ,Gwr),e(wM,Owr),e(te,Vwr),e(te,AM),e(AM,JFe),e(JFe,Xwr),e(AM,zwr),e(AM,HJ),e(HJ,Qwr),e(AM,Wwr),e(te,Hwr),e(te,LM),e(LM,YFe),e(YFe,Uwr),e(LM,Jwr),e(LM,UJ),e(UJ,Ywr),e(LM,Kwr),e(te,Zwr),e(te,yM),e(yM,KFe),e(KFe,eAr),e(yM,oAr),e(yM,JJ),e(JJ,rAr),e(yM,tAr),e(te,aAr),e(te,xM),e(xM,ZFe),e(ZFe,nAr),e(xM,sAr),e(xM,YJ),e(YJ,lAr),e(xM,iAr),e(te,dAr),e(te,$M),e($M,e6e),e(e6e,cAr),e($M,fAr),e($M,KJ),e(KJ,mAr),e($M,gAr),e(te,hAr),e(te,kM),e(kM,o6e),e(o6e,pAr),e(kM,_Ar),e(kM,ZJ),e(ZJ,uAr),e(kM,bAr),e(te,vAr),e(te,SM),e(SM,r6e),e(r6e,FAr),e(SM,TAr),e(SM,eY),e(eY,MAr),e(SM,EAr),e(te,CAr),e(te,RM),e(RM,t6e),e(t6e,wAr),e(RM,AAr),e(RM,oY),e(oY,LAr),e(RM,yAr),e(te,xAr),e(te,PM),e(PM,a6e),e(a6e,$Ar),e(PM,kAr),e(PM,rY),e(rY,SAr),e(PM,RAr),e(te,PAr),e(te,BM),e(BM,n6e),e(n6e,BAr),e(BM,IAr),e(BM,tY),e(tY,NAr),e(BM,qAr),e(te,jAr),e(te,IM),e(IM,s6e),e(s6e,DAr),e(IM,GAr),e(IM,aY),e(aY,OAr),e(IM,VAr),e(te,XAr),e(te,NM),e(NM,l6e),e(l6e,zAr),e(NM,QAr),e(NM,nY),e(nY,WAr),e(NM,HAr),e(te,UAr),e(te,qM),e(qM,i6e),e(i6e,JAr),e(qM,YAr),e(qM,sY),e(sY,KAr),e(qM,ZAr),e(te,eLr),e(te,jM),e(jM,d6e),e(d6e,oLr),e(jM,rLr),e(jM,lY),e(lY,tLr),e(jM,aLr),e(te,nLr),e(te,DM),e(DM,c6e),e(c6e,sLr),e(DM,lLr),e(DM,iY),e(iY,iLr),e(DM,dLr),e(te,cLr),e(te,GM),e(GM,f6e),e(f6e,fLr),e(GM,mLr),e(GM,dY),e(dY,gLr),e(GM,hLr),e(te,pLr),e(te,OM),e(OM,m6e),e(m6e,_Lr),e(OM,uLr),e(OM,cY),e(cY,bLr),e(OM,vLr),e(te,FLr),e(te,VM),e(VM,g6e),e(g6e,TLr),e(VM,MLr),e(VM,fY),e(fY,ELr),e(VM,CLr),e(te,wLr),e(te,XM),e(XM,h6e),e(h6e,ALr),e(XM,LLr),e(XM,mY),e(mY,yLr),e(XM,xLr),e(te,$Lr),e(te,zM),e(zM,p6e),e(p6e,kLr),e(zM,SLr),e(zM,gY),e(gY,RLr),e(zM,PLr),e(te,BLr),e(te,QM),e(QM,_6e),e(_6e,ILr),e(QM,NLr),e(QM,hY),e(hY,qLr),e(QM,jLr),e(te,DLr),e(te,WM),e(WM,u6e),e(u6e,GLr),e(WM,OLr),e(WM,pY),e(pY,VLr),e(WM,XLr),e(te,zLr),e(te,HM),e(HM,b6e),e(b6e,QLr),e(HM,WLr),e(HM,_Y),e(_Y,HLr),e(HM,ULr),e(te,JLr),e(te,UM),e(UM,v6e),e(v6e,YLr),e(UM,KLr),e(UM,uY),e(uY,ZLr),e(UM,e7r),e(te,o7r),e(te,JM),e(JM,F6e),e(F6e,r7r),e(JM,t7r),e(JM,bY),e(bY,a7r),e(JM,n7r),e(Pr,s7r),M(YM,Pr,null),b(f,kVe,u),b(f,Mc,u),e(Mc,KM),e(KM,T6e),M(rx,T6e,null),e(Mc,l7r),e(Mc,M6e),e(M6e,i7r),b(f,SVe,u),b(f,lr,u),M(tx,lr,null),e(lr,d7r),e(lr,Ec),e(Ec,c7r),e(Ec,vY),e(vY,f7r),e(Ec,m7r),e(Ec,FY),e(FY,g7r),e(Ec,h7r),e(lr,p7r),e(lr,ax),e(ax,_7r),e(ax,E6e),e(E6e,u7r),e(ax,b7r),e(lr,v7r),e(lr,Nt),M(nx,Nt,null),e(Nt,F7r),e(Nt,C6e),e(C6e,T7r),e(Nt,M7r),e(Nt,Cc),e(Cc,E7r),e(Cc,w6e),e(w6e,C7r),e(Cc,w7r),e(Cc,TY),e(TY,A7r),e(Cc,L7r),e(Nt,y7r),M(ZM,Nt,null),e(lr,x7r),e(lr,Br),M(sx,Br,null),e(Br,$7r),e(Br,A6e),e(A6e,k7r),e(Br,S7r),e(Br,gn),e(gn,R7r),e(gn,L6e),e(L6e,P7r),e(gn,B7r),e(gn,y6e),e(y6e,I7r),e(gn,N7r),e(gn,x6e),e(x6e,q7r),e(gn,j7r),e(Br,D7r),e(Br,_e),e(_e,eE),e(eE,$6e),e($6e,G7r),e(eE,O7r),e(eE,MY),e(MY,V7r),e(eE,X7r),e(_e,z7r),e(_e,oE),e(oE,k6e),e(k6e,Q7r),e(oE,W7r),e(oE,EY),e(EY,H7r),e(oE,U7r),e(_e,J7r),e(_e,rE),e(rE,S6e),e(S6e,Y7r),e(rE,K7r),e(rE,CY),e(CY,Z7r),e(rE,eyr),e(_e,oyr),e(_e,tE),e(tE,R6e),e(R6e,ryr),e(tE,tyr),e(tE,wY),e(wY,ayr),e(tE,nyr),e(_e,syr),e(_e,aE),e(aE,P6e),e(P6e,lyr),e(aE,iyr),e(aE,AY),e(AY,dyr),e(aE,cyr),e(_e,fyr),e(_e,nE),e(nE,B6e),e(B6e,myr),e(nE,gyr),e(nE,LY),e(LY,hyr),e(nE,pyr),e(_e,_yr),e(_e,sE),e(sE,I6e),e(I6e,uyr),e(sE,byr),e(sE,yY),e(yY,vyr),e(sE,Fyr),e(_e,Tyr),e(_e,lE),e(lE,N6e),e(N6e,Myr),e(lE,Eyr),e(lE,xY),e(xY,Cyr),e(lE,wyr),e(_e,Ayr),e(_e,iE),e(iE,q6e),e(q6e,Lyr),e(iE,yyr),e(iE,$Y),e($Y,xyr),e(iE,$yr),e(_e,kyr),e(_e,dE),e(dE,j6e),e(j6e,Syr),e(dE,Ryr),e(dE,kY),e(kY,Pyr),e(dE,Byr),e(_e,Iyr),e(_e,cE),e(cE,D6e),e(D6e,Nyr),e(cE,qyr),e(cE,SY),e(SY,jyr),e(cE,Dyr),e(_e,Gyr),e(_e,fE),e(fE,G6e),e(G6e,Oyr),e(fE,Vyr),e(fE,RY),e(RY,Xyr),e(fE,zyr),e(_e,Qyr),e(_e,mE),e(mE,O6e),e(O6e,Wyr),e(mE,Hyr),e(mE,PY),e(PY,Uyr),e(mE,Jyr),e(_e,Yyr),e(_e,gE),e(gE,V6e),e(V6e,Kyr),e(gE,Zyr),e(gE,BY),e(BY,e8r),e(gE,o8r),e(_e,r8r),e(_e,hE),e(hE,X6e),e(X6e,t8r),e(hE,a8r),e(hE,IY),e(IY,n8r),e(hE,s8r),e(_e,l8r),e(_e,pE),e(pE,z6e),e(z6e,i8r),e(pE,d8r),e(pE,NY),e(NY,c8r),e(pE,f8r),e(_e,m8r),e(_e,_E),e(_E,Q6e),e(Q6e,g8r),e(_E,h8r),e(_E,qY),e(qY,p8r),e(_E,_8r),e(Br,u8r),M(uE,Br,null),b(f,RVe,u),b(f,wc,u),e(wc,bE),e(bE,W6e),M(lx,W6e,null),e(wc,b8r),e(wc,H6e),e(H6e,v8r),b(f,PVe,u),b(f,ir,u),M(ix,ir,null),e(ir,F8r),e(ir,Ac),e(Ac,T8r),e(Ac,jY),e(jY,M8r),e(Ac,E8r),e(Ac,DY),e(DY,C8r),e(Ac,w8r),e(ir,A8r),e(ir,dx),e(dx,L8r),e(dx,U6e),e(U6e,y8r),e(dx,x8r),e(ir,$8r),e(ir,qt),M(cx,qt,null),e(qt,k8r),e(qt,J6e),e(J6e,S8r),e(qt,R8r),e(qt,Lc),e(Lc,P8r),e(Lc,Y6e),e(Y6e,B8r),e(Lc,I8r),e(Lc,GY),e(GY,N8r),e(Lc,q8r),e(qt,j8r),M(vE,qt,null),e(ir,D8r),e(ir,Ir),M(fx,Ir,null),e(Ir,G8r),e(Ir,K6e),e(K6e,O8r),e(Ir,V8r),e(Ir,hn),e(hn,X8r),e(hn,Z6e),e(Z6e,z8r),e(hn,Q8r),e(hn,eTe),e(eTe,W8r),e(hn,H8r),e(hn,oTe),e(oTe,U8r),e(hn,J8r),e(Ir,Y8r),e(Ir,mx),e(mx,FE),e(FE,rTe),e(rTe,K8r),e(FE,Z8r),e(FE,OY),e(OY,e9r),e(FE,o9r),e(mx,r9r),e(mx,TE),e(TE,tTe),e(tTe,t9r),e(TE,a9r),e(TE,VY),e(VY,n9r),e(TE,s9r),e(Ir,l9r),M(ME,Ir,null),b(f,BVe,u),b(f,yc,u),e(yc,EE),e(EE,aTe),M(gx,aTe,null),e(yc,i9r),e(yc,nTe),e(nTe,d9r),b(f,IVe,u),b(f,dr,u),M(hx,dr,null),e(dr,c9r),e(dr,xc),e(xc,f9r),e(xc,XY),e(XY,m9r),e(xc,g9r),e(xc,zY),e(zY,h9r),e(xc,p9r),e(dr,_9r),e(dr,px),e(px,u9r),e(px,sTe),e(sTe,b9r),e(px,v9r),e(dr,F9r),e(dr,jt),M(_x,jt,null),e(jt,T9r),e(jt,lTe),e(lTe,M9r),e(jt,E9r),e(jt,$c),e($c,C9r),e($c,iTe),e(iTe,w9r),e($c,A9r),e($c,QY),e(QY,L9r),e($c,y9r),e(jt,x9r),M(CE,jt,null),e(dr,$9r),e(dr,Nr),M(ux,Nr,null),e(Nr,k9r),e(Nr,dTe),e(dTe,S9r),e(Nr,R9r),e(Nr,pn),e(pn,P9r),e(pn,cTe),e(cTe,B9r),e(pn,I9r),e(pn,fTe),e(fTe,N9r),e(pn,q9r),e(pn,mTe),e(mTe,j9r),e(pn,D9r),e(Nr,G9r),e(Nr,gTe),e(gTe,wE),e(wE,hTe),e(hTe,O9r),e(wE,V9r),e(wE,WY),e(WY,X9r),e(wE,z9r),e(Nr,Q9r),M(AE,Nr,null),b(f,NVe,u),b(f,kc,u),e(kc,LE),e(LE,pTe),M(bx,pTe,null),e(kc,W9r),e(kc,_Te),e(_Te,H9r),b(f,qVe,u),b(f,cr,u),M(vx,cr,null),e(cr,U9r),e(cr,Sc),e(Sc,J9r),e(Sc,HY),e(HY,Y9r),e(Sc,K9r),e(Sc,UY),e(UY,Z9r),e(Sc,exr),e(cr,oxr),e(cr,Fx),e(Fx,rxr),e(Fx,uTe),e(uTe,txr),e(Fx,axr),e(cr,nxr),e(cr,Dt),M(Tx,Dt,null),e(Dt,sxr),e(Dt,bTe),e(bTe,lxr),e(Dt,ixr),e(Dt,Rc),e(Rc,dxr),e(Rc,vTe),e(vTe,cxr),e(Rc,fxr),e(Rc,JY),e(JY,mxr),e(Rc,gxr),e(Dt,hxr),M(yE,Dt,null),e(cr,pxr),e(cr,qr),M(Mx,qr,null),e(qr,_xr),e(qr,FTe),e(FTe,uxr),e(qr,bxr),e(qr,_n),e(_n,vxr),e(_n,TTe),e(TTe,Fxr),e(_n,Txr),e(_n,MTe),e(MTe,Mxr),e(_n,Exr),e(_n,ETe),e(ETe,Cxr),e(_n,wxr),e(qr,Axr),e(qr,de),e(de,xE),e(xE,CTe),e(CTe,Lxr),e(xE,yxr),e(xE,YY),e(YY,xxr),e(xE,$xr),e(de,kxr),e(de,$E),e($E,wTe),e(wTe,Sxr),e($E,Rxr),e($E,KY),e(KY,Pxr),e($E,Bxr),e(de,Ixr),e(de,kE),e(kE,ATe),e(ATe,Nxr),e(kE,qxr),e(kE,ZY),e(ZY,jxr),e(kE,Dxr),e(de,Gxr),e(de,SE),e(SE,LTe),e(LTe,Oxr),e(SE,Vxr),e(SE,eK),e(eK,Xxr),e(SE,zxr),e(de,Qxr),e(de,RE),e(RE,yTe),e(yTe,Wxr),e(RE,Hxr),e(RE,oK),e(oK,Uxr),e(RE,Jxr),e(de,Yxr),e(de,PE),e(PE,xTe),e(xTe,Kxr),e(PE,Zxr),e(PE,rK),e(rK,e$r),e(PE,o$r),e(de,r$r),e(de,BE),e(BE,$Te),e($Te,t$r),e(BE,a$r),e(BE,tK),e(tK,n$r),e(BE,s$r),e(de,l$r),e(de,IE),e(IE,kTe),e(kTe,i$r),e(IE,d$r),e(IE,aK),e(aK,c$r),e(IE,f$r),e(de,m$r),e(de,NE),e(NE,STe),e(STe,g$r),e(NE,h$r),e(NE,nK),e(nK,p$r),e(NE,_$r),e(de,u$r),e(de,qE),e(qE,RTe),e(RTe,b$r),e(qE,v$r),e(qE,sK),e(sK,F$r),e(qE,T$r),e(de,M$r),e(de,jE),e(jE,PTe),e(PTe,E$r),e(jE,C$r),e(jE,lK),e(lK,w$r),e(jE,A$r),e(de,L$r),e(de,DE),e(DE,BTe),e(BTe,y$r),e(DE,x$r),e(DE,iK),e(iK,$$r),e(DE,k$r),e(de,S$r),e(de,GE),e(GE,ITe),e(ITe,R$r),e(GE,P$r),e(GE,dK),e(dK,B$r),e(GE,I$r),e(de,N$r),e(de,OE),e(OE,NTe),e(NTe,q$r),e(OE,j$r),e(OE,cK),e(cK,D$r),e(OE,G$r),e(de,O$r),e(de,VE),e(VE,qTe),e(qTe,V$r),e(VE,X$r),e(VE,fK),e(fK,z$r),e(VE,Q$r),e(de,W$r),e(de,XE),e(XE,jTe),e(jTe,H$r),e(XE,U$r),e(XE,mK),e(mK,J$r),e(XE,Y$r),e(de,K$r),e(de,zE),e(zE,DTe),e(DTe,Z$r),e(zE,ekr),e(zE,gK),e(gK,okr),e(zE,rkr),e(de,tkr),e(de,QE),e(QE,GTe),e(GTe,akr),e(QE,nkr),e(QE,hK),e(hK,skr),e(QE,lkr),e(de,ikr),e(de,WE),e(WE,OTe),e(OTe,dkr),e(WE,ckr),e(WE,pK),e(pK,fkr),e(WE,mkr),e(de,gkr),e(de,HE),e(HE,VTe),e(VTe,hkr),e(HE,pkr),e(HE,_K),e(_K,_kr),e(HE,ukr),e(qr,bkr),M(UE,qr,null),b(f,jVe,u),b(f,Pc,u),e(Pc,JE),e(JE,XTe),M(Ex,XTe,null),e(Pc,vkr),e(Pc,zTe),e(zTe,Fkr),b(f,DVe,u),b(f,fr,u),M(Cx,fr,null),e(fr,Tkr),e(fr,Bc),e(Bc,Mkr),e(Bc,uK),e(uK,Ekr),e(Bc,Ckr),e(Bc,bK),e(bK,wkr),e(Bc,Akr),e(fr,Lkr),e(fr,wx),e(wx,ykr),e(wx,QTe),e(QTe,xkr),e(wx,$kr),e(fr,kkr),e(fr,Gt),M(Ax,Gt,null),e(Gt,Skr),e(Gt,WTe),e(WTe,Rkr),e(Gt,Pkr),e(Gt,Ic),e(Ic,Bkr),e(Ic,HTe),e(HTe,Ikr),e(Ic,Nkr),e(Ic,vK),e(vK,qkr),e(Ic,jkr),e(Gt,Dkr),M(YE,Gt,null),e(fr,Gkr),e(fr,jr),M(Lx,jr,null),e(jr,Okr),e(jr,UTe),e(UTe,Vkr),e(jr,Xkr),e(jr,un),e(un,zkr),e(un,JTe),e(JTe,Qkr),e(un,Wkr),e(un,YTe),e(YTe,Hkr),e(un,Ukr),e(un,KTe),e(KTe,Jkr),e(un,Ykr),e(jr,Kkr),e(jr,ce),e(ce,KE),e(KE,ZTe),e(ZTe,Zkr),e(KE,eSr),e(KE,FK),e(FK,oSr),e(KE,rSr),e(ce,tSr),e(ce,ZE),e(ZE,eMe),e(eMe,aSr),e(ZE,nSr),e(ZE,TK),e(TK,sSr),e(ZE,lSr),e(ce,iSr),e(ce,eC),e(eC,oMe),e(oMe,dSr),e(eC,cSr),e(eC,MK),e(MK,fSr),e(eC,mSr),e(ce,gSr),e(ce,oC),e(oC,rMe),e(rMe,hSr),e(oC,pSr),e(oC,EK),e(EK,_Sr),e(oC,uSr),e(ce,bSr),e(ce,rC),e(rC,tMe),e(tMe,vSr),e(rC,FSr),e(rC,CK),e(CK,TSr),e(rC,MSr),e(ce,ESr),e(ce,tC),e(tC,aMe),e(aMe,CSr),e(tC,wSr),e(tC,wK),e(wK,ASr),e(tC,LSr),e(ce,ySr),e(ce,aC),e(aC,nMe),e(nMe,xSr),e(aC,$Sr),e(aC,AK),e(AK,kSr),e(aC,SSr),e(ce,RSr),e(ce,nC),e(nC,sMe),e(sMe,PSr),e(nC,BSr),e(nC,LK),e(LK,ISr),e(nC,NSr),e(ce,qSr),e(ce,sC),e(sC,lMe),e(lMe,jSr),e(sC,DSr),e(sC,yK),e(yK,GSr),e(sC,OSr),e(ce,VSr),e(ce,lC),e(lC,iMe),e(iMe,XSr),e(lC,zSr),e(lC,xK),e(xK,QSr),e(lC,WSr),e(ce,HSr),e(ce,iC),e(iC,dMe),e(dMe,USr),e(iC,JSr),e(iC,$K),e($K,YSr),e(iC,KSr),e(ce,ZSr),e(ce,dC),e(dC,cMe),e(cMe,eRr),e(dC,oRr),e(dC,kK),e(kK,rRr),e(dC,tRr),e(ce,aRr),e(ce,cC),e(cC,fMe),e(fMe,nRr),e(cC,sRr),e(cC,SK),e(SK,lRr),e(cC,iRr),e(ce,dRr),e(ce,fC),e(fC,mMe),e(mMe,cRr),e(fC,fRr),e(fC,RK),e(RK,mRr),e(fC,gRr),e(ce,hRr),e(ce,mC),e(mC,gMe),e(gMe,pRr),e(mC,_Rr),e(mC,PK),e(PK,uRr),e(mC,bRr),e(ce,vRr),e(ce,gC),e(gC,hMe),e(hMe,FRr),e(gC,TRr),e(gC,BK),e(BK,MRr),e(gC,ERr),e(ce,CRr),e(ce,hC),e(hC,pMe),e(pMe,wRr),e(hC,ARr),e(hC,IK),e(IK,LRr),e(hC,yRr),e(ce,xRr),e(ce,pC),e(pC,_Me),e(_Me,$Rr),e(pC,kRr),e(pC,NK),e(NK,SRr),e(pC,RRr),e(ce,PRr),e(ce,_C),e(_C,uMe),e(uMe,BRr),e(_C,IRr),e(_C,qK),e(qK,NRr),e(_C,qRr),e(ce,jRr),e(ce,uC),e(uC,bMe),e(bMe,DRr),e(uC,GRr),e(uC,jK),e(jK,ORr),e(uC,VRr),e(jr,XRr),M(bC,jr,null),b(f,GVe,u),b(f,Nc,u),e(Nc,vC),e(vC,vMe),M(yx,vMe,null),e(Nc,zRr),e(Nc,FMe),e(FMe,QRr),b(f,OVe,u),b(f,mr,u),M(xx,mr,null),e(mr,WRr),e(mr,qc),e(qc,HRr),e(qc,DK),e(DK,URr),e(qc,JRr),e(qc,GK),e(GK,YRr),e(qc,KRr),e(mr,ZRr),e(mr,$x),e($x,ePr),e($x,TMe),e(TMe,oPr),e($x,rPr),e(mr,tPr),e(mr,Ot),M(kx,Ot,null),e(Ot,aPr),e(Ot,MMe),e(MMe,nPr),e(Ot,sPr),e(Ot,jc),e(jc,lPr),e(jc,EMe),e(EMe,iPr),e(jc,dPr),e(jc,OK),e(OK,cPr),e(jc,fPr),e(Ot,mPr),M(FC,Ot,null),e(mr,gPr),e(mr,Dr),M(Sx,Dr,null),e(Dr,hPr),e(Dr,CMe),e(CMe,pPr),e(Dr,_Pr),e(Dr,bn),e(bn,uPr),e(bn,wMe),e(wMe,bPr),e(bn,vPr),e(bn,AMe),e(AMe,FPr),e(bn,TPr),e(bn,LMe),e(LMe,MPr),e(bn,EPr),e(Dr,CPr),e(Dr,yMe),e(yMe,TC),e(TC,xMe),e(xMe,wPr),e(TC,APr),e(TC,VK),e(VK,LPr),e(TC,yPr),e(Dr,xPr),M(MC,Dr,null),b(f,VVe,u),b(f,Dc,u),e(Dc,EC),e(EC,$Me),M(Rx,$Me,null),e(Dc,$Pr),e(Dc,kMe),e(kMe,kPr),b(f,XVe,u),b(f,gr,u),M(Px,gr,null),e(gr,SPr),e(gr,Gc),e(Gc,RPr),e(Gc,XK),e(XK,PPr),e(Gc,BPr),e(Gc,zK),e(zK,IPr),e(Gc,NPr),e(gr,qPr),e(gr,Bx),e(Bx,jPr),e(Bx,SMe),e(SMe,DPr),e(Bx,GPr),e(gr,OPr),e(gr,Vt),M(Ix,Vt,null),e(Vt,VPr),e(Vt,RMe),e(RMe,XPr),e(Vt,zPr),e(Vt,Oc),e(Oc,QPr),e(Oc,PMe),e(PMe,WPr),e(Oc,HPr),e(Oc,QK),e(QK,UPr),e(Oc,JPr),e(Vt,YPr),M(CC,Vt,null),e(gr,KPr),e(gr,Gr),M(Nx,Gr,null),e(Gr,ZPr),e(Gr,BMe),e(BMe,eBr),e(Gr,oBr),e(Gr,vn),e(vn,rBr),e(vn,IMe),e(IMe,tBr),e(vn,aBr),e(vn,NMe),e(NMe,nBr),e(vn,sBr),e(vn,qMe),e(qMe,lBr),e(vn,iBr),e(Gr,dBr),e(Gr,jMe),e(jMe,wC),e(wC,DMe),e(DMe,cBr),e(wC,fBr),e(wC,WK),e(WK,mBr),e(wC,gBr),e(Gr,hBr),M(AC,Gr,null),b(f,zVe,u),b(f,Vc,u),e(Vc,LC),e(LC,GMe),M(qx,GMe,null),e(Vc,pBr),e(Vc,OMe),e(OMe,_Br),b(f,QVe,u),b(f,hr,u),M(jx,hr,null),e(hr,uBr),e(hr,Xc),e(Xc,bBr),e(Xc,HK),e(HK,vBr),e(Xc,FBr),e(Xc,UK),e(UK,TBr),e(Xc,MBr),e(hr,EBr),e(hr,Dx),e(Dx,CBr),e(Dx,VMe),e(VMe,wBr),e(Dx,ABr),e(hr,LBr),e(hr,Xt),M(Gx,Xt,null),e(Xt,yBr),e(Xt,XMe),e(XMe,xBr),e(Xt,$Br),e(Xt,zc),e(zc,kBr),e(zc,zMe),e(zMe,SBr),e(zc,RBr),e(zc,JK),e(JK,PBr),e(zc,BBr),e(Xt,IBr),M(yC,Xt,null),e(hr,NBr),e(hr,Or),M(Ox,Or,null),e(Or,qBr),e(Or,QMe),e(QMe,jBr),e(Or,DBr),e(Or,Fn),e(Fn,GBr),e(Fn,WMe),e(WMe,OBr),e(Fn,VBr),e(Fn,HMe),e(HMe,XBr),e(Fn,zBr),e(Fn,UMe),e(UMe,QBr),e(Fn,WBr),e(Or,HBr),e(Or,oe),e(oe,xC),e(xC,JMe),e(JMe,UBr),e(xC,JBr),e(xC,YK),e(YK,YBr),e(xC,KBr),e(oe,ZBr),e(oe,$C),e($C,YMe),e(YMe,eIr),e($C,oIr),e($C,KK),e(KK,rIr),e($C,tIr),e(oe,aIr),e(oe,kC),e(kC,KMe),e(KMe,nIr),e(kC,sIr),e(kC,ZK),e(ZK,lIr),e(kC,iIr),e(oe,dIr),e(oe,SC),e(SC,ZMe),e(ZMe,cIr),e(SC,fIr),e(SC,eZ),e(eZ,mIr),e(SC,gIr),e(oe,hIr),e(oe,RC),e(RC,eEe),e(eEe,pIr),e(RC,_Ir),e(RC,oZ),e(oZ,uIr),e(RC,bIr),e(oe,vIr),e(oe,PC),e(PC,oEe),e(oEe,FIr),e(PC,TIr),e(PC,rZ),e(rZ,MIr),e(PC,EIr),e(oe,CIr),e(oe,BC),e(BC,rEe),e(rEe,wIr),e(BC,AIr),e(BC,tZ),e(tZ,LIr),e(BC,yIr),e(oe,xIr),e(oe,IC),e(IC,tEe),e(tEe,$Ir),e(IC,kIr),e(IC,aZ),e(aZ,SIr),e(IC,RIr),e(oe,PIr),e(oe,NC),e(NC,aEe),e(aEe,BIr),e(NC,IIr),e(NC,nZ),e(nZ,NIr),e(NC,qIr),e(oe,jIr),e(oe,qC),e(qC,nEe),e(nEe,DIr),e(qC,GIr),e(qC,sZ),e(sZ,OIr),e(qC,VIr),e(oe,XIr),e(oe,jC),e(jC,sEe),e(sEe,zIr),e(jC,QIr),e(jC,lZ),e(lZ,WIr),e(jC,HIr),e(oe,UIr),e(oe,DC),e(DC,lEe),e(lEe,JIr),e(DC,YIr),e(DC,iZ),e(iZ,KIr),e(DC,ZIr),e(oe,eNr),e(oe,GC),e(GC,iEe),e(iEe,oNr),e(GC,rNr),e(GC,dZ),e(dZ,tNr),e(GC,aNr),e(oe,nNr),e(oe,OC),e(OC,dEe),e(dEe,sNr),e(OC,lNr),e(OC,cZ),e(cZ,iNr),e(OC,dNr),e(oe,cNr),e(oe,VC),e(VC,cEe),e(cEe,fNr),e(VC,mNr),e(VC,fZ),e(fZ,gNr),e(VC,hNr),e(oe,pNr),e(oe,XC),e(XC,fEe),e(fEe,_Nr),e(XC,uNr),e(XC,mZ),e(mZ,bNr),e(XC,vNr),e(oe,FNr),e(oe,zC),e(zC,mEe),e(mEe,TNr),e(zC,MNr),e(zC,gZ),e(gZ,ENr),e(zC,CNr),e(oe,wNr),e(oe,QC),e(QC,gEe),e(gEe,ANr),e(QC,LNr),e(QC,hZ),e(hZ,yNr),e(QC,xNr),e(oe,$Nr),e(oe,WC),e(WC,hEe),e(hEe,kNr),e(WC,SNr),e(WC,pZ),e(pZ,RNr),e(WC,PNr),e(oe,BNr),e(oe,HC),e(HC,pEe),e(pEe,INr),e(HC,NNr),e(HC,_Z),e(_Z,qNr),e(HC,jNr),e(oe,DNr),e(oe,UC),e(UC,_Ee),e(_Ee,GNr),e(UC,ONr),e(UC,uZ),e(uZ,VNr),e(UC,XNr),e(oe,zNr),e(oe,JC),e(JC,uEe),e(uEe,QNr),e(JC,WNr),e(JC,bZ),e(bZ,HNr),e(JC,UNr),e(oe,JNr),e(oe,YC),e(YC,bEe),e(bEe,YNr),e(YC,KNr),e(YC,vZ),e(vZ,ZNr),e(YC,eqr),e(oe,oqr),e(oe,KC),e(KC,vEe),e(vEe,rqr),e(KC,tqr),e(KC,FZ),e(FZ,aqr),e(KC,nqr),e(oe,sqr),e(oe,ZC),e(ZC,FEe),e(FEe,lqr),e(ZC,iqr),e(ZC,TZ),e(TZ,dqr),e(ZC,cqr),e(oe,fqr),e(oe,e0),e(e0,TEe),e(TEe,mqr),e(e0,gqr),e(e0,MZ),e(MZ,hqr),e(e0,pqr),e(oe,_qr),e(oe,o0),e(o0,MEe),e(MEe,uqr),e(o0,bqr),e(o0,EZ),e(EZ,vqr),e(o0,Fqr),e(Or,Tqr),M(r0,Or,null),b(f,WVe,u),b(f,Qc,u),e(Qc,t0),e(t0,EEe),M(Vx,EEe,null),e(Qc,Mqr),e(Qc,CEe),e(CEe,Eqr),b(f,HVe,u),b(f,pr,u),M(Xx,pr,null),e(pr,Cqr),e(pr,Wc),e(Wc,wqr),e(Wc,CZ),e(CZ,Aqr),e(Wc,Lqr),e(Wc,wZ),e(wZ,yqr),e(Wc,xqr),e(pr,$qr),e(pr,zx),e(zx,kqr),e(zx,wEe),e(wEe,Sqr),e(zx,Rqr),e(pr,Pqr),e(pr,zt),M(Qx,zt,null),e(zt,Bqr),e(zt,AEe),e(AEe,Iqr),e(zt,Nqr),e(zt,Hc),e(Hc,qqr),e(Hc,LEe),e(LEe,jqr),e(Hc,Dqr),e(Hc,AZ),e(AZ,Gqr),e(Hc,Oqr),e(zt,Vqr),M(a0,zt,null),e(pr,Xqr),e(pr,Vr),M(Wx,Vr,null),e(Vr,zqr),e(Vr,yEe),e(yEe,Qqr),e(Vr,Wqr),e(Vr,Tn),e(Tn,Hqr),e(Tn,xEe),e(xEe,Uqr),e(Tn,Jqr),e(Tn,$Ee),e($Ee,Yqr),e(Tn,Kqr),e(Tn,kEe),e(kEe,Zqr),e(Tn,ejr),e(Vr,ojr),e(Vr,xe),e(xe,n0),e(n0,SEe),e(SEe,rjr),e(n0,tjr),e(n0,LZ),e(LZ,ajr),e(n0,njr),e(xe,sjr),e(xe,s0),e(s0,REe),e(REe,ljr),e(s0,ijr),e(s0,yZ),e(yZ,djr),e(s0,cjr),e(xe,fjr),e(xe,l0),e(l0,PEe),e(PEe,mjr),e(l0,gjr),e(l0,xZ),e(xZ,hjr),e(l0,pjr),e(xe,_jr),e(xe,i0),e(i0,BEe),e(BEe,ujr),e(i0,bjr),e(i0,$Z),e($Z,vjr),e(i0,Fjr),e(xe,Tjr),e(xe,d0),e(d0,IEe),e(IEe,Mjr),e(d0,Ejr),e(d0,kZ),e(kZ,Cjr),e(d0,wjr),e(xe,Ajr),e(xe,c0),e(c0,NEe),e(NEe,Ljr),e(c0,yjr),e(c0,SZ),e(SZ,xjr),e(c0,$jr),e(xe,kjr),e(xe,f0),e(f0,qEe),e(qEe,Sjr),e(f0,Rjr),e(f0,RZ),e(RZ,Pjr),e(f0,Bjr),e(xe,Ijr),e(xe,m0),e(m0,jEe),e(jEe,Njr),e(m0,qjr),e(m0,PZ),e(PZ,jjr),e(m0,Djr),e(xe,Gjr),e(xe,g0),e(g0,DEe),e(DEe,Ojr),e(g0,Vjr),e(g0,BZ),e(BZ,Xjr),e(g0,zjr),e(xe,Qjr),e(xe,h0),e(h0,GEe),e(GEe,Wjr),e(h0,Hjr),e(h0,IZ),e(IZ,Ujr),e(h0,Jjr),e(Vr,Yjr),M(p0,Vr,null),b(f,UVe,u),b(f,Uc,u),e(Uc,_0),e(_0,OEe),M(Hx,OEe,null),e(Uc,Kjr),e(Uc,VEe),e(VEe,Zjr),b(f,JVe,u),b(f,_r,u),M(Ux,_r,null),e(_r,eDr),e(_r,Jc),e(Jc,oDr),e(Jc,NZ),e(NZ,rDr),e(Jc,tDr),e(Jc,qZ),e(qZ,aDr),e(Jc,nDr),e(_r,sDr),e(_r,Jx),e(Jx,lDr),e(Jx,XEe),e(XEe,iDr),e(Jx,dDr),e(_r,cDr),e(_r,Qt),M(Yx,Qt,null),e(Qt,fDr),e(Qt,zEe),e(zEe,mDr),e(Qt,gDr),e(Qt,Yc),e(Yc,hDr),e(Yc,QEe),e(QEe,pDr),e(Yc,_Dr),e(Yc,jZ),e(jZ,uDr),e(Yc,bDr),e(Qt,vDr),M(u0,Qt,null),e(_r,FDr),e(_r,Xr),M(Kx,Xr,null),e(Xr,TDr),e(Xr,WEe),e(WEe,MDr),e(Xr,EDr),e(Xr,Mn),e(Mn,CDr),e(Mn,HEe),e(HEe,wDr),e(Mn,ADr),e(Mn,UEe),e(UEe,LDr),e(Mn,yDr),e(Mn,JEe),e(JEe,xDr),e(Mn,$Dr),e(Xr,kDr),e(Xr,Ee),e(Ee,b0),e(b0,YEe),e(YEe,SDr),e(b0,RDr),e(b0,DZ),e(DZ,PDr),e(b0,BDr),e(Ee,IDr),e(Ee,v0),e(v0,KEe),e(KEe,NDr),e(v0,qDr),e(v0,GZ),e(GZ,jDr),e(v0,DDr),e(Ee,GDr),e(Ee,F0),e(F0,ZEe),e(ZEe,ODr),e(F0,VDr),e(F0,OZ),e(OZ,XDr),e(F0,zDr),e(Ee,QDr),e(Ee,T0),e(T0,eCe),e(eCe,WDr),e(T0,HDr),e(T0,VZ),e(VZ,UDr),e(T0,JDr),e(Ee,YDr),e(Ee,M0),e(M0,oCe),e(oCe,KDr),e(M0,ZDr),e(M0,XZ),e(XZ,eGr),e(M0,oGr),e(Ee,rGr),e(Ee,E0),e(E0,rCe),e(rCe,tGr),e(E0,aGr),e(E0,zZ),e(zZ,nGr),e(E0,sGr),e(Ee,lGr),e(Ee,C0),e(C0,tCe),e(tCe,iGr),e(C0,dGr),e(C0,QZ),e(QZ,cGr),e(C0,fGr),e(Ee,mGr),e(Ee,w0),e(w0,aCe),e(aCe,gGr),e(w0,hGr),e(w0,WZ),e(WZ,pGr),e(w0,_Gr),e(Ee,uGr),e(Ee,A0),e(A0,nCe),e(nCe,bGr),e(A0,vGr),e(A0,HZ),e(HZ,FGr),e(A0,TGr),e(Ee,MGr),e(Ee,L0),e(L0,sCe),e(sCe,EGr),e(L0,CGr),e(L0,UZ),e(UZ,wGr),e(L0,AGr),e(Ee,LGr),e(Ee,y0),e(y0,lCe),e(lCe,yGr),e(y0,xGr),e(y0,JZ),e(JZ,$Gr),e(y0,kGr),e(Ee,SGr),e(Ee,x0),e(x0,iCe),e(iCe,RGr),e(x0,PGr),e(x0,YZ),e(YZ,BGr),e(x0,IGr),e(Ee,NGr),e(Ee,$0),e($0,dCe),e(dCe,qGr),e($0,jGr),e($0,KZ),e(KZ,DGr),e($0,GGr),e(Xr,OGr),M(k0,Xr,null),b(f,YVe,u),b(f,Kc,u),e(Kc,S0),e(S0,cCe),M(Zx,cCe,null),e(Kc,VGr),e(Kc,fCe),e(fCe,XGr),b(f,KVe,u),b(f,ur,u),M(e$,ur,null),e(ur,zGr),e(ur,Zc),e(Zc,QGr),e(Zc,ZZ),e(ZZ,WGr),e(Zc,HGr),e(Zc,eee),e(eee,UGr),e(Zc,JGr),e(ur,YGr),e(ur,o$),e(o$,KGr),e(o$,mCe),e(mCe,ZGr),e(o$,eOr),e(ur,oOr),e(ur,Wt),M(r$,Wt,null),e(Wt,rOr),e(Wt,gCe),e(gCe,tOr),e(Wt,aOr),e(Wt,ef),e(ef,nOr),e(ef,hCe),e(hCe,sOr),e(ef,lOr),e(ef,oee),e(oee,iOr),e(ef,dOr),e(Wt,cOr),M(R0,Wt,null),e(ur,fOr),e(ur,zr),M(t$,zr,null),e(zr,mOr),e(zr,pCe),e(pCe,gOr),e(zr,hOr),e(zr,En),e(En,pOr),e(En,_Ce),e(_Ce,_Or),e(En,uOr),e(En,uCe),e(uCe,bOr),e(En,vOr),e(En,bCe),e(bCe,FOr),e(En,TOr),e(zr,MOr),e(zr,$e),e($e,P0),e(P0,vCe),e(vCe,EOr),e(P0,COr),e(P0,ree),e(ree,wOr),e(P0,AOr),e($e,LOr),e($e,B0),e(B0,FCe),e(FCe,yOr),e(B0,xOr),e(B0,tee),e(tee,$Or),e(B0,kOr),e($e,SOr),e($e,I0),e(I0,TCe),e(TCe,ROr),e(I0,POr),e(I0,aee),e(aee,BOr),e(I0,IOr),e($e,NOr),e($e,N0),e(N0,MCe),e(MCe,qOr),e(N0,jOr),e(N0,nee),e(nee,DOr),e(N0,GOr),e($e,OOr),e($e,q0),e(q0,ECe),e(ECe,VOr),e(q0,XOr),e(q0,see),e(see,zOr),e(q0,QOr),e($e,WOr),e($e,j0),e(j0,CCe),e(CCe,HOr),e(j0,UOr),e(j0,lee),e(lee,JOr),e(j0,YOr),e($e,KOr),e($e,D0),e(D0,wCe),e(wCe,ZOr),e(D0,eVr),e(D0,iee),e(iee,oVr),e(D0,rVr),e($e,tVr),e($e,G0),e(G0,ACe),e(ACe,aVr),e(G0,nVr),e(G0,dee),e(dee,sVr),e(G0,lVr),e($e,iVr),e($e,O0),e(O0,LCe),e(LCe,dVr),e(O0,cVr),e(O0,cee),e(cee,fVr),e(O0,mVr),e($e,gVr),e($e,V0),e(V0,yCe),e(yCe,hVr),e(V0,pVr),e(V0,fee),e(fee,_Vr),e(V0,uVr),e(zr,bVr),M(X0,zr,null),b(f,ZVe,u),b(f,of,u),e(of,z0),e(z0,xCe),M(a$,xCe,null),e(of,vVr),e(of,$Ce),e($Ce,FVr),b(f,eXe,u),b(f,br,u),M(n$,br,null),e(br,TVr),e(br,rf),e(rf,MVr),e(rf,mee),e(mee,EVr),e(rf,CVr),e(rf,gee),e(gee,wVr),e(rf,AVr),e(br,LVr),e(br,s$),e(s$,yVr),e(s$,kCe),e(kCe,xVr),e(s$,$Vr),e(br,kVr),e(br,Ht),M(l$,Ht,null),e(Ht,SVr),e(Ht,SCe),e(SCe,RVr),e(Ht,PVr),e(Ht,tf),e(tf,BVr),e(tf,RCe),e(RCe,IVr),e(tf,NVr),e(tf,hee),e(hee,qVr),e(tf,jVr),e(Ht,DVr),M(Q0,Ht,null),e(br,GVr),e(br,Qr),M(i$,Qr,null),e(Qr,OVr),e(Qr,PCe),e(PCe,VVr),e(Qr,XVr),e(Qr,Cn),e(Cn,zVr),e(Cn,BCe),e(BCe,QVr),e(Cn,WVr),e(Cn,ICe),e(ICe,HVr),e(Cn,UVr),e(Cn,NCe),e(NCe,JVr),e(Cn,YVr),e(Qr,KVr),e(Qr,ke),e(ke,W0),e(W0,qCe),e(qCe,ZVr),e(W0,eXr),e(W0,pee),e(pee,oXr),e(W0,rXr),e(ke,tXr),e(ke,H0),e(H0,jCe),e(jCe,aXr),e(H0,nXr),e(H0,_ee),e(_ee,sXr),e(H0,lXr),e(ke,iXr),e(ke,U0),e(U0,DCe),e(DCe,dXr),e(U0,cXr),e(U0,uee),e(uee,fXr),e(U0,mXr),e(ke,gXr),e(ke,J0),e(J0,GCe),e(GCe,hXr),e(J0,pXr),e(J0,bee),e(bee,_Xr),e(J0,uXr),e(ke,bXr),e(ke,Y0),e(Y0,OCe),e(OCe,vXr),e(Y0,FXr),e(Y0,vee),e(vee,TXr),e(Y0,MXr),e(ke,EXr),e(ke,K0),e(K0,VCe),e(VCe,CXr),e(K0,wXr),e(K0,Fee),e(Fee,AXr),e(K0,LXr),e(ke,yXr),e(ke,Z0),e(Z0,XCe),e(XCe,xXr),e(Z0,$Xr),e(Z0,Tee),e(Tee,kXr),e(Z0,SXr),e(ke,RXr),e(ke,ew),e(ew,zCe),e(zCe,PXr),e(ew,BXr),e(ew,Mee),e(Mee,IXr),e(ew,NXr),e(ke,qXr),e(ke,ow),e(ow,QCe),e(QCe,jXr),e(ow,DXr),e(ow,Eee),e(Eee,GXr),e(ow,OXr),e(ke,VXr),e(ke,rw),e(rw,WCe),e(WCe,XXr),e(rw,zXr),e(rw,Cee),e(Cee,QXr),e(rw,WXr),e(Qr,HXr),M(tw,Qr,null),b(f,oXe,u),b(f,af,u),e(af,aw),e(aw,HCe),M(d$,HCe,null),e(af,UXr),e(af,UCe),e(UCe,JXr),b(f,rXe,u),b(f,vr,u),M(c$,vr,null),e(vr,YXr),e(vr,nf),e(nf,KXr),e(nf,wee),e(wee,ZXr),e(nf,ezr),e(nf,Aee),e(Aee,ozr),e(nf,rzr),e(vr,tzr),e(vr,f$),e(f$,azr),e(f$,JCe),e(JCe,nzr),e(f$,szr),e(vr,lzr),e(vr,Ut),M(m$,Ut,null),e(Ut,izr),e(Ut,YCe),e(YCe,dzr),e(Ut,czr),e(Ut,sf),e(sf,fzr),e(sf,KCe),e(KCe,mzr),e(sf,gzr),e(sf,Lee),e(Lee,hzr),e(sf,pzr),e(Ut,_zr),M(nw,Ut,null),e(vr,uzr),e(vr,Wr),M(g$,Wr,null),e(Wr,bzr),e(Wr,ZCe),e(ZCe,vzr),e(Wr,Fzr),e(Wr,wn),e(wn,Tzr),e(wn,e0e),e(e0e,Mzr),e(wn,Ezr),e(wn,o0e),e(o0e,Czr),e(wn,wzr),e(wn,r0e),e(r0e,Azr),e(wn,Lzr),e(Wr,yzr),e(Wr,Se),e(Se,sw),e(sw,t0e),e(t0e,xzr),e(sw,$zr),e(sw,yee),e(yee,kzr),e(sw,Szr),e(Se,Rzr),e(Se,lw),e(lw,a0e),e(a0e,Pzr),e(lw,Bzr),e(lw,xee),e(xee,Izr),e(lw,Nzr),e(Se,qzr),e(Se,iw),e(iw,n0e),e(n0e,jzr),e(iw,Dzr),e(iw,$ee),e($ee,Gzr),e(iw,Ozr),e(Se,Vzr),e(Se,dw),e(dw,s0e),e(s0e,Xzr),e(dw,zzr),e(dw,kee),e(kee,Qzr),e(dw,Wzr),e(Se,Hzr),e(Se,cw),e(cw,l0e),e(l0e,Uzr),e(cw,Jzr),e(cw,See),e(See,Yzr),e(cw,Kzr),e(Se,Zzr),e(Se,fw),e(fw,i0e),e(i0e,eQr),e(fw,oQr),e(fw,Ree),e(Ree,rQr),e(fw,tQr),e(Se,aQr),e(Se,mw),e(mw,d0e),e(d0e,nQr),e(mw,sQr),e(mw,Pee),e(Pee,lQr),e(mw,iQr),e(Se,dQr),e(Se,gw),e(gw,c0e),e(c0e,cQr),e(gw,fQr),e(gw,Bee),e(Bee,mQr),e(gw,gQr),e(Se,hQr),e(Se,hw),e(hw,f0e),e(f0e,pQr),e(hw,_Qr),e(hw,Iee),e(Iee,uQr),e(hw,bQr),e(Se,vQr),e(Se,pw),e(pw,m0e),e(m0e,FQr),e(pw,TQr),e(pw,Nee),e(Nee,MQr),e(pw,EQr),e(Wr,CQr),M(_w,Wr,null),b(f,tXe,u),b(f,lf,u),e(lf,uw),e(uw,g0e),M(h$,g0e,null),e(lf,wQr),e(lf,h0e),e(h0e,AQr),b(f,aXe,u),b(f,Fr,u),M(p$,Fr,null),e(Fr,LQr),e(Fr,df),e(df,yQr),e(df,qee),e(qee,xQr),e(df,$Qr),e(df,jee),e(jee,kQr),e(df,SQr),e(Fr,RQr),e(Fr,_$),e(_$,PQr),e(_$,p0e),e(p0e,BQr),e(_$,IQr),e(Fr,NQr),e(Fr,Jt),M(u$,Jt,null),e(Jt,qQr),e(Jt,_0e),e(_0e,jQr),e(Jt,DQr),e(Jt,cf),e(cf,GQr),e(cf,u0e),e(u0e,OQr),e(cf,VQr),e(cf,Dee),e(Dee,XQr),e(cf,zQr),e(Jt,QQr),M(bw,Jt,null),e(Fr,WQr),e(Fr,Hr),M(b$,Hr,null),e(Hr,HQr),e(Hr,b0e),e(b0e,UQr),e(Hr,JQr),e(Hr,An),e(An,YQr),e(An,v0e),e(v0e,KQr),e(An,ZQr),e(An,F0e),e(F0e,eWr),e(An,oWr),e(An,T0e),e(T0e,rWr),e(An,tWr),e(Hr,aWr),e(Hr,Re),e(Re,vw),e(vw,M0e),e(M0e,nWr),e(vw,sWr),e(vw,Gee),e(Gee,lWr),e(vw,iWr),e(Re,dWr),e(Re,Fw),e(Fw,E0e),e(E0e,cWr),e(Fw,fWr),e(Fw,Oee),e(Oee,mWr),e(Fw,gWr),e(Re,hWr),e(Re,Tw),e(Tw,C0e),e(C0e,pWr),e(Tw,_Wr),e(Tw,Vee),e(Vee,uWr),e(Tw,bWr),e(Re,vWr),e(Re,Mw),e(Mw,w0e),e(w0e,FWr),e(Mw,TWr),e(Mw,Xee),e(Xee,MWr),e(Mw,EWr),e(Re,CWr),e(Re,Ew),e(Ew,A0e),e(A0e,wWr),e(Ew,AWr),e(Ew,zee),e(zee,LWr),e(Ew,yWr),e(Re,xWr),e(Re,Cw),e(Cw,L0e),e(L0e,$Wr),e(Cw,kWr),e(Cw,Qee),e(Qee,SWr),e(Cw,RWr),e(Re,PWr),e(Re,ww),e(ww,y0e),e(y0e,BWr),e(ww,IWr),e(ww,Wee),e(Wee,NWr),e(ww,qWr),e(Re,jWr),e(Re,Aw),e(Aw,x0e),e(x0e,DWr),e(Aw,GWr),e(Aw,Hee),e(Hee,OWr),e(Aw,VWr),e(Re,XWr),e(Re,Lw),e(Lw,$0e),e($0e,zWr),e(Lw,QWr),e(Lw,Uee),e(Uee,WWr),e(Lw,HWr),e(Re,UWr),e(Re,yw),e(yw,k0e),e(k0e,JWr),e(yw,YWr),e(yw,Jee),e(Jee,KWr),e(yw,ZWr),e(Hr,eHr),M(xw,Hr,null),b(f,nXe,u),b(f,ff,u),e(ff,$w),e($w,S0e),M(v$,S0e,null),e(ff,oHr),e(ff,R0e),e(R0e,rHr),b(f,sXe,u),b(f,Tr,u),M(F$,Tr,null),e(Tr,tHr),e(Tr,mf),e(mf,aHr),e(mf,Yee),e(Yee,nHr),e(mf,sHr),e(mf,Kee),e(Kee,lHr),e(mf,iHr),e(Tr,dHr),e(Tr,T$),e(T$,cHr),e(T$,P0e),e(P0e,fHr),e(T$,mHr),e(Tr,gHr),e(Tr,Yt),M(M$,Yt,null),e(Yt,hHr),e(Yt,B0e),e(B0e,pHr),e(Yt,_Hr),e(Yt,gf),e(gf,uHr),e(gf,I0e),e(I0e,bHr),e(gf,vHr),e(gf,Zee),e(Zee,FHr),e(gf,THr),e(Yt,MHr),M(kw,Yt,null),e(Tr,EHr),e(Tr,Ur),M(E$,Ur,null),e(Ur,CHr),e(Ur,N0e),e(N0e,wHr),e(Ur,AHr),e(Ur,Ln),e(Ln,LHr),e(Ln,q0e),e(q0e,yHr),e(Ln,xHr),e(Ln,j0e),e(j0e,$Hr),e(Ln,kHr),e(Ln,D0e),e(D0e,SHr),e(Ln,RHr),e(Ur,PHr),e(Ur,Ve),e(Ve,Sw),e(Sw,G0e),e(G0e,BHr),e(Sw,IHr),e(Sw,eoe),e(eoe,NHr),e(Sw,qHr),e(Ve,jHr),e(Ve,Rw),e(Rw,O0e),e(O0e,DHr),e(Rw,GHr),e(Rw,ooe),e(ooe,OHr),e(Rw,VHr),e(Ve,XHr),e(Ve,Pw),e(Pw,V0e),e(V0e,zHr),e(Pw,QHr),e(Pw,roe),e(roe,WHr),e(Pw,HHr),e(Ve,UHr),e(Ve,Bw),e(Bw,X0e),e(X0e,JHr),e(Bw,YHr),e(Bw,toe),e(toe,KHr),e(Bw,ZHr),e(Ve,eUr),e(Ve,Iw),e(Iw,z0e),e(z0e,oUr),e(Iw,rUr),e(Iw,aoe),e(aoe,tUr),e(Iw,aUr),e(Ve,nUr),e(Ve,Nw),e(Nw,Q0e),e(Q0e,sUr),e(Nw,lUr),e(Nw,noe),e(noe,iUr),e(Nw,dUr),e(Ve,cUr),e(Ve,qw),e(qw,W0e),e(W0e,fUr),e(qw,mUr),e(qw,soe),e(soe,gUr),e(qw,hUr),e(Ve,pUr),e(Ve,jw),e(jw,H0e),e(H0e,_Ur),e(jw,uUr),e(jw,loe),e(loe,bUr),e(jw,vUr),e(Ur,FUr),M(Dw,Ur,null),b(f,lXe,u),b(f,hf,u),e(hf,Gw),e(Gw,U0e),M(C$,U0e,null),e(hf,TUr),e(hf,J0e),e(J0e,MUr),b(f,iXe,u),b(f,Mr,u),M(w$,Mr,null),e(Mr,EUr),e(Mr,pf),e(pf,CUr),e(pf,ioe),e(ioe,wUr),e(pf,AUr),e(pf,doe),e(doe,LUr),e(pf,yUr),e(Mr,xUr),e(Mr,A$),e(A$,$Ur),e(A$,Y0e),e(Y0e,kUr),e(A$,SUr),e(Mr,RUr),e(Mr,Kt),M(L$,Kt,null),e(Kt,PUr),e(Kt,K0e),e(K0e,BUr),e(Kt,IUr),e(Kt,_f),e(_f,NUr),e(_f,Z0e),e(Z0e,qUr),e(_f,jUr),e(_f,coe),e(coe,DUr),e(_f,GUr),e(Kt,OUr),M(Ow,Kt,null),e(Mr,VUr),e(Mr,Jr),M(y$,Jr,null),e(Jr,XUr),e(Jr,ewe),e(ewe,zUr),e(Jr,QUr),e(Jr,yn),e(yn,WUr),e(yn,owe),e(owe,HUr),e(yn,UUr),e(yn,rwe),e(rwe,JUr),e(yn,YUr),e(yn,twe),e(twe,KUr),e(yn,ZUr),e(Jr,eJr),e(Jr,Xe),e(Xe,Vw),e(Vw,awe),e(awe,oJr),e(Vw,rJr),e(Vw,foe),e(foe,tJr),e(Vw,aJr),e(Xe,nJr),e(Xe,Xw),e(Xw,nwe),e(nwe,sJr),e(Xw,lJr),e(Xw,moe),e(moe,iJr),e(Xw,dJr),e(Xe,cJr),e(Xe,zw),e(zw,swe),e(swe,fJr),e(zw,mJr),e(zw,goe),e(goe,gJr),e(zw,hJr),e(Xe,pJr),e(Xe,Qw),e(Qw,lwe),e(lwe,_Jr),e(Qw,uJr),e(Qw,hoe),e(hoe,bJr),e(Qw,vJr),e(Xe,FJr),e(Xe,Ww),e(Ww,iwe),e(iwe,TJr),e(Ww,MJr),e(Ww,poe),e(poe,EJr),e(Ww,CJr),e(Xe,wJr),e(Xe,Hw),e(Hw,dwe),e(dwe,AJr),e(Hw,LJr),e(Hw,_oe),e(_oe,yJr),e(Hw,xJr),e(Xe,$Jr),e(Xe,Uw),e(Uw,cwe),e(cwe,kJr),e(Uw,SJr),e(Uw,uoe),e(uoe,RJr),e(Uw,PJr),e(Xe,BJr),e(Xe,Jw),e(Jw,fwe),e(fwe,IJr),e(Jw,NJr),e(Jw,boe),e(boe,qJr),e(Jw,jJr),e(Jr,DJr),M(Yw,Jr,null),b(f,dXe,u),b(f,uf,u),e(uf,Kw),e(Kw,mwe),M(x$,mwe,null),e(uf,GJr),e(uf,gwe),e(gwe,OJr),b(f,cXe,u),b(f,Er,u),M($$,Er,null),e(Er,VJr),e(Er,bf),e(bf,XJr),e(bf,voe),e(voe,zJr),e(bf,QJr),e(bf,Foe),e(Foe,WJr),e(bf,HJr),e(Er,UJr),e(Er,k$),e(k$,JJr),e(k$,hwe),e(hwe,YJr),e(k$,KJr),e(Er,ZJr),e(Er,Zt),M(S$,Zt,null),e(Zt,eYr),e(Zt,pwe),e(pwe,oYr),e(Zt,rYr),e(Zt,vf),e(vf,tYr),e(vf,_we),e(_we,aYr),e(vf,nYr),e(vf,Toe),e(Toe,sYr),e(vf,lYr),e(Zt,iYr),M(Zw,Zt,null),e(Er,dYr),e(Er,Yr),M(R$,Yr,null),e(Yr,cYr),e(Yr,uwe),e(uwe,fYr),e(Yr,mYr),e(Yr,xn),e(xn,gYr),e(xn,bwe),e(bwe,hYr),e(xn,pYr),e(xn,vwe),e(vwe,_Yr),e(xn,uYr),e(xn,Fwe),e(Fwe,bYr),e(xn,vYr),e(Yr,FYr),e(Yr,Twe),e(Twe,eA),e(eA,Mwe),e(Mwe,TYr),e(eA,MYr),e(eA,Moe),e(Moe,EYr),e(eA,CYr),e(Yr,wYr),M(oA,Yr,null),b(f,fXe,u),b(f,Ff,u),e(Ff,rA),e(rA,Ewe),M(P$,Ewe,null),e(Ff,AYr),e(Ff,Cwe),e(Cwe,LYr),b(f,mXe,u),b(f,Cr,u),M(B$,Cr,null),e(Cr,yYr),e(Cr,Tf),e(Tf,xYr),e(Tf,Eoe),e(Eoe,$Yr),e(Tf,kYr),e(Tf,Coe),e(Coe,SYr),e(Tf,RYr),e(Cr,PYr),e(Cr,I$),e(I$,BYr),e(I$,wwe),e(wwe,IYr),e(I$,NYr),e(Cr,qYr),e(Cr,ea),M(N$,ea,null),e(ea,jYr),e(ea,Awe),e(Awe,DYr),e(ea,GYr),e(ea,Mf),e(Mf,OYr),e(Mf,Lwe),e(Lwe,VYr),e(Mf,XYr),e(Mf,woe),e(woe,zYr),e(Mf,QYr),e(ea,WYr),M(tA,ea,null),e(Cr,HYr),e(Cr,Kr),M(q$,Kr,null),e(Kr,UYr),e(Kr,ywe),e(ywe,JYr),e(Kr,YYr),e(Kr,$n),e($n,KYr),e($n,xwe),e(xwe,ZYr),e($n,eKr),e($n,$we),e($we,oKr),e($n,rKr),e($n,kwe),e(kwe,tKr),e($n,aKr),e(Kr,nKr),e(Kr,j$),e(j$,aA),e(aA,Swe),e(Swe,sKr),e(aA,lKr),e(aA,Aoe),e(Aoe,iKr),e(aA,dKr),e(j$,cKr),e(j$,nA),e(nA,Rwe),e(Rwe,fKr),e(nA,mKr),e(nA,Loe),e(Loe,gKr),e(nA,hKr),e(Kr,pKr),M(sA,Kr,null),b(f,gXe,u),b(f,Ef,u),e(Ef,lA),e(lA,Pwe),M(D$,Pwe,null),e(Ef,_Kr),e(Ef,Bwe),e(Bwe,uKr),b(f,hXe,u),b(f,wr,u),M(G$,wr,null),e(wr,bKr),e(wr,Cf),e(Cf,vKr),e(Cf,yoe),e(yoe,FKr),e(Cf,TKr),e(Cf,xoe),e(xoe,MKr),e(Cf,EKr),e(wr,CKr),e(wr,O$),e(O$,wKr),e(O$,Iwe),e(Iwe,AKr),e(O$,LKr),e(wr,yKr),e(wr,oa),M(V$,oa,null),e(oa,xKr),e(oa,Nwe),e(Nwe,$Kr),e(oa,kKr),e(oa,wf),e(wf,SKr),e(wf,qwe),e(qwe,RKr),e(wf,PKr),e(wf,$oe),e($oe,BKr),e(wf,IKr),e(oa,NKr),M(iA,oa,null),e(wr,qKr),e(wr,Zr),M(X$,Zr,null),e(Zr,jKr),e(Zr,jwe),e(jwe,DKr),e(Zr,GKr),e(Zr,kn),e(kn,OKr),e(kn,Dwe),e(Dwe,VKr),e(kn,XKr),e(kn,Gwe),e(Gwe,zKr),e(kn,QKr),e(kn,Owe),e(Owe,WKr),e(kn,HKr),e(Zr,UKr),e(Zr,Vwe),e(Vwe,dA),e(dA,Xwe),e(Xwe,JKr),e(dA,YKr),e(dA,koe),e(koe,KKr),e(dA,ZKr),e(Zr,eZr),M(cA,Zr,null),pXe=!0},p(f,[u]){const z$={};u&2&&(z$.$$scope={dirty:u,ctx:f}),Pf.$set(z$);const zwe={};u&2&&(zwe.$$scope={dirty:u,ctx:f}),Vg.$set(zwe);const Qwe={};u&2&&(Qwe.$$scope={dirty:u,ctx:f}),wh.$set(Qwe);const Wwe={};u&2&&(Wwe.$$scope={dirty:u,ctx:f}),sp.$set(Wwe);const Q$={};u&2&&(Q$.$$scope={dirty:u,ctx:f}),lp.$set(Q$);const Hwe={};u&2&&(Hwe.$$scope={dirty:u,ctx:f}),Lp.$set(Hwe);const Sn={};u&2&&(Sn.$$scope={dirty:u,ctx:f}),yp.$set(Sn);const Uwe={};u&2&&(Uwe.$$scope={dirty:u,ctx:f}),kp.$set(Uwe);const Jwe={};u&2&&(Jwe.$$scope={dirty:u,ctx:f}),Su.$set(Jwe);const Ywe={};u&2&&(Ywe.$$scope={dirty:u,ctx:f}),Pu.$set(Ywe);const W$={};u&2&&(W$.$$scope={dirty:u,ctx:f}),A1.$set(W$);const Kwe={};u&2&&(Kwe.$$scope={dirty:u,ctx:f}),y1.$set(Kwe);const H$={};u&2&&(H$.$$scope={dirty:u,ctx:f}),p2.$set(H$);const Zwe={};u&2&&(Zwe.$$scope={dirty:u,ctx:f}),u2.$set(Zwe);const U$={};u&2&&(U$.$$scope={dirty:u,ctx:f}),rb.$set(U$);const eAe={};u&2&&(eAe.$$scope={dirty:u,ctx:f}),ab.$set(eAe);const oAe={};u&2&&(oAe.$$scope={dirty:u,ctx:f}),Eb.$set(oAe);const rAe={};u&2&&(rAe.$$scope={dirty:u,ctx:f}),wb.$set(rAe);const Af={};u&2&&(Af.$$scope={dirty:u,ctx:f}),M4.$set(Af);const tAe={};u&2&&(tAe.$$scope={dirty:u,ctx:f}),C4.$set(tAe);const aAe={};u&2&&(aAe.$$scope={dirty:u,ctx:f}),r5.$set(aAe);const nAe={};u&2&&(nAe.$$scope={dirty:u,ctx:f}),a5.$set(nAe);const J$={};u&2&&(J$.$$scope={dirty:u,ctx:f}),m5.$set(J$);const sAe={};u&2&&(sAe.$$scope={dirty:u,ctx:f}),h5.$set(sAe);const lAe={};u&2&&(lAe.$$scope={dirty:u,ctx:f}),K5.$set(lAe);const iAe={};u&2&&(iAe.$$scope={dirty:u,ctx:f}),e3.$set(iAe);const rt={};u&2&&(rt.$$scope={dirty:u,ctx:f}),V3.$set(rt);const Y$={};u&2&&(Y$.$$scope={dirty:u,ctx:f}),z3.$set(Y$);const dAe={};u&2&&(dAe.$$scope={dirty:u,ctx:f}),H3.$set(dAe);const K$={};u&2&&(K$.$$scope={dirty:u,ctx:f}),J3.$set(K$);const cAe={};u&2&&(cAe.$$scope={dirty:u,ctx:f}),cv.$set(cAe);const tt={};u&2&&(tt.$$scope={dirty:u,ctx:f}),mv.$set(tt);const fAe={};u&2&&(fAe.$$scope={dirty:u,ctx:f}),pv.$set(fAe);const Lf={};u&2&&(Lf.$$scope={dirty:u,ctx:f}),uv.$set(Lf);const mAe={};u&2&&(mAe.$$scope={dirty:u,ctx:f}),Fv.$set(mAe);const gAe={};u&2&&(gAe.$$scope={dirty:u,ctx:f}),Mv.$set(gAe);const L={};u&2&&(L.$$scope={dirty:u,ctx:f}),Rv.$set(L);const fA={};u&2&&(fA.$$scope={dirty:u,ctx:f}),Bv.$set(fA);const hAe={};u&2&&(hAe.$$scope={dirty:u,ctx:f}),Ov.$set(hAe);const pAe={};u&2&&(pAe.$$scope={dirty:u,ctx:f}),Xv.$set(pAe);const mA={};u&2&&(mA.$$scope={dirty:u,ctx:f}),rF.$set(mA);const _Ae={};u&2&&(_Ae.$$scope={dirty:u,ctx:f}),aF.$set(_Ae);const uAe={};u&2&&(uAe.$$scope={dirty:u,ctx:f}),iF.$set(uAe);const gA={};u&2&&(gA.$$scope={dirty:u,ctx:f}),cF.$set(gA);const bAe={};u&2&&(bAe.$$scope={dirty:u,ctx:f}),uF.$set(bAe);const vAe={};u&2&&(vAe.$$scope={dirty:u,ctx:f}),vF.$set(vAe);const hA={};u&2&&(hA.$$scope={dirty:u,ctx:f}),CF.$set(hA);const FAe={};u&2&&(FAe.$$scope={dirty:u,ctx:f}),AF.$set(FAe);const TAe={};u&2&&(TAe.$$scope={dirty:u,ctx:f}),$F.$set(TAe);const pA={};u&2&&(pA.$$scope={dirty:u,ctx:f}),SF.$set(pA);const MAe={};u&2&&(MAe.$$scope={dirty:u,ctx:f}),BF.$set(MAe);const EAe={};u&2&&(EAe.$$scope={dirty:u,ctx:f}),NF.$set(EAe);const _A={};u&2&&(_A.$$scope={dirty:u,ctx:f}),VF.$set(_A);const CAe={};u&2&&(CAe.$$scope={dirty:u,ctx:f}),zF.$set(CAe);const wAe={};u&2&&(wAe.$$scope={dirty:u,ctx:f}),HF.$set(wAe);const uA={};u&2&&(uA.$$scope={dirty:u,ctx:f}),JF.$set(uA);const AAe={};u&2&&(AAe.$$scope={dirty:u,ctx:f}),X6.$set(AAe);const LAe={};u&2&&(LAe.$$scope={dirty:u,ctx:f}),Q6.$set(LAe);const bA={};u&2&&(bA.$$scope={dirty:u,ctx:f}),_T.$set(bA);const yAe={};u&2&&(yAe.$$scope={dirty:u,ctx:f}),bT.$set(yAe);const xAe={};u&2&&(xAe.$$scope={dirty:u,ctx:f}),RT.$set(xAe);const vA={};u&2&&(vA.$$scope={dirty:u,ctx:f}),BT.$set(vA);const $Ae={};u&2&&($Ae.$$scope={dirty:u,ctx:f}),DT.$set($Ae);const kAe={};u&2&&(kAe.$$scope={dirty:u,ctx:f}),OT.$set(kAe);const FA={};u&2&&(FA.$$scope={dirty:u,ctx:f}),dM.$set(FA);const SAe={};u&2&&(SAe.$$scope={dirty:u,ctx:f}),fM.$set(SAe);const RAe={};u&2&&(RAe.$$scope={dirty:u,ctx:f}),MM.$set(RAe);const TA={};u&2&&(TA.$$scope={dirty:u,ctx:f}),CM.$set(TA);const PAe={};u&2&&(PAe.$$scope={dirty:u,ctx:f}),YM.$set(PAe);const BAe={};u&2&&(BAe.$$scope={dirty:u,ctx:f}),ZM.$set(BAe);const MA={};u&2&&(MA.$$scope={dirty:u,ctx:f}),uE.$set(MA);const IAe={};u&2&&(IAe.$$scope={dirty:u,ctx:f}),vE.$set(IAe);const NAe={};u&2&&(NAe.$$scope={dirty:u,ctx:f}),ME.$set(NAe);const EA={};u&2&&(EA.$$scope={dirty:u,ctx:f}),CE.$set(EA);const qAe={};u&2&&(qAe.$$scope={dirty:u,ctx:f}),AE.$set(qAe);const jAe={};u&2&&(jAe.$$scope={dirty:u,ctx:f}),yE.$set(jAe);const CA={};u&2&&(CA.$$scope={dirty:u,ctx:f}),UE.$set(CA);const DAe={};u&2&&(DAe.$$scope={dirty:u,ctx:f}),YE.$set(DAe);const GAe={};u&2&&(GAe.$$scope={dirty:u,ctx:f}),bC.$set(GAe);const wA={};u&2&&(wA.$$scope={dirty:u,ctx:f}),FC.$set(wA);const OAe={};u&2&&(OAe.$$scope={dirty:u,ctx:f}),MC.$set(OAe);const VAe={};u&2&&(VAe.$$scope={dirty:u,ctx:f}),CC.$set(VAe);const AA={};u&2&&(AA.$$scope={dirty:u,ctx:f}),AC.$set(AA);const XAe={};u&2&&(XAe.$$scope={dirty:u,ctx:f}),yC.$set(XAe);const zAe={};u&2&&(zAe.$$scope={dirty:u,ctx:f}),r0.$set(zAe);const LA={};u&2&&(LA.$$scope={dirty:u,ctx:f}),a0.$set(LA);const QAe={};u&2&&(QAe.$$scope={dirty:u,ctx:f}),p0.$set(QAe);const WAe={};u&2&&(WAe.$$scope={dirty:u,ctx:f}),u0.$set(WAe);const yA={};u&2&&(yA.$$scope={dirty:u,ctx:f}),k0.$set(yA);const HAe={};u&2&&(HAe.$$scope={dirty:u,ctx:f}),R0.$set(HAe);const UAe={};u&2&&(UAe.$$scope={dirty:u,ctx:f}),X0.$set(UAe);const xA={};u&2&&(xA.$$scope={dirty:u,ctx:f}),Q0.$set(xA);const JAe={};u&2&&(JAe.$$scope={dirty:u,ctx:f}),tw.$set(JAe);const YAe={};u&2&&(YAe.$$scope={dirty:u,ctx:f}),nw.$set(YAe);const $A={};u&2&&($A.$$scope={dirty:u,ctx:f}),_w.$set($A);const KAe={};u&2&&(KAe.$$scope={dirty:u,ctx:f}),bw.$set(KAe);const ZAe={};u&2&&(ZAe.$$scope={dirty:u,ctx:f}),xw.$set(ZAe);const kA={};u&2&&(kA.$$scope={dirty:u,ctx:f}),kw.$set(kA);const eLe={};u&2&&(eLe.$$scope={dirty:u,ctx:f}),Dw.$set(eLe);const oLe={};u&2&&(oLe.$$scope={dirty:u,ctx:f}),Ow.$set(oLe);const SA={};u&2&&(SA.$$scope={dirty:u,ctx:f}),Yw.$set(SA);const rLe={};u&2&&(rLe.$$scope={dirty:u,ctx:f}),Zw.$set(rLe);const tLe={};u&2&&(tLe.$$scope={dirty:u,ctx:f}),oA.$set(tLe);const RA={};u&2&&(RA.$$scope={dirty:u,ctx:f}),tA.$set(RA);const aLe={};u&2&&(aLe.$$scope={dirty:u,ctx:f}),sA.$set(aLe);const nLe={};u&2&&(nLe.$$scope={dirty:u,ctx:f}),iA.$set(nLe);const PA={};u&2&&(PA.$$scope={dirty:u,ctx:f}),cA.$set(PA)},i(f){pXe||(E(d.$$.fragment,f),E(xa.$$.fragment,f),E(B7.$$.fragment,f),E(I7.$$.fragment,f),E(Pf.$$.fragment,f),E(N7.$$.fragment,f),E(q7.$$.fragment,f),E(G7.$$.fragment,f),E(Vg.$$.fragment,f),E(O7.$$.fragment,f),E(V7.$$.fragment,f),E(X7.$$.fragment,f),E(W7.$$.fragment,f),E(wh.$$.fragment,f),E(H7.$$.fragment,f),E(U7.$$.fragment,f),E(J7.$$.fragment,f),E(Z7.$$.fragment,f),E(sp.$$.fragment,f),E(lp.$$.fragment,f),E(ey.$$.fragment,f),E(oy.$$.fragment,f),E(ry.$$.fragment,f),E(ny.$$.fragment,f),E(Lp.$$.fragment,f),E(yp.$$.fragment,f),E(sy.$$.fragment,f),E(ly.$$.fragment,f),E(iy.$$.fragment,f),E(cy.$$.fragment,f),E(kp.$$.fragment,f),E(fy.$$.fragment,f),E(Su.$$.fragment,f),E(my.$$.fragment,f),E(gy.$$.fragment,f),E(py.$$.fragment,f),E(Pu.$$.fragment,f),E(_y.$$.fragment,f),E(A1.$$.fragment,f),E(uy.$$.fragment,f),E(by.$$.fragment,f),E(Fy.$$.fragment,f),E(y1.$$.fragment,f),E(Ty.$$.fragment,f),E(p2.$$.fragment,f),E(My.$$.fragment,f),E(Ey.$$.fragment,f),E(wy.$$.fragment,f),E(u2.$$.fragment,f),E(Ay.$$.fragment,f),E(rb.$$.fragment,f),E(Ly.$$.fragment,f),E(yy.$$.fragment,f),E($y.$$.fragment,f),E(ab.$$.fragment,f),E(ky.$$.fragment,f),E(Eb.$$.fragment,f),E(Sy.$$.fragment,f),E(Ry.$$.fragment,f),E(By.$$.fragment,f),E(wb.$$.fragment,f),E(Iy.$$.fragment,f),E(M4.$$.fragment,f),E(Ny.$$.fragment,f),E(qy.$$.fragment,f),E(Dy.$$.fragment,f),E(C4.$$.fragment,f),E(Gy.$$.fragment,f),E(r5.$$.fragment,f),E(Oy.$$.fragment,f),E(Vy.$$.fragment,f),E(zy.$$.fragment,f),E(a5.$$.fragment,f),E(Qy.$$.fragment,f),E(m5.$$.fragment,f),E(Wy.$$.fragment,f),E(Hy.$$.fragment,f),E(Jy.$$.fragment,f),E(h5.$$.fragment,f),E(Yy.$$.fragment,f),E(K5.$$.fragment,f),E(Ky.$$.fragment,f),E(Zy.$$.fragment,f),E(o8.$$.fragment,f),E(e3.$$.fragment,f),E(r8.$$.fragment,f),E(V3.$$.fragment,f),E(t8.$$.fragment,f),E(a8.$$.fragment,f),E(s8.$$.fragment,f),E(z3.$$.fragment,f),E(l8.$$.fragment,f),E(H3.$$.fragment,f),E(i8.$$.fragment,f),E(d8.$$.fragment,f),E(f8.$$.fragment,f),E(J3.$$.fragment,f),E(m8.$$.fragment,f),E(cv.$$.fragment,f),E(g8.$$.fragment,f),E(h8.$$.fragment,f),E(_8.$$.fragment,f),E(mv.$$.fragment,f),E(u8.$$.fragment,f),E(pv.$$.fragment,f),E(b8.$$.fragment,f),E(v8.$$.fragment,f),E(T8.$$.fragment,f),E(uv.$$.fragment,f),E(M8.$$.fragment,f),E(Fv.$$.fragment,f),E(E8.$$.fragment,f),E(C8.$$.fragment,f),E(A8.$$.fragment,f),E(Mv.$$.fragment,f),E(L8.$$.fragment,f),E(Rv.$$.fragment,f),E(y8.$$.fragment,f),E(x8.$$.fragment,f),E(k8.$$.fragment,f),E(Bv.$$.fragment,f),E(S8.$$.fragment,f),E(Ov.$$.fragment,f),E(R8.$$.fragment,f),E(P8.$$.fragment,f),E(I8.$$.fragment,f),E(Xv.$$.fragment,f),E(N8.$$.fragment,f),E(rF.$$.fragment,f),E(q8.$$.fragment,f),E(j8.$$.fragment,f),E(G8.$$.fragment,f),E(aF.$$.fragment,f),E(O8.$$.fragment,f),E(iF.$$.fragment,f),E(X8.$$.fragment,f),E(z8.$$.fragment,f),E(W8.$$.fragment,f),E(cF.$$.fragment,f),E(H8.$$.fragment,f),E(uF.$$.fragment,f),E(U8.$$.fragment,f),E(J8.$$.fragment,f),E(K8.$$.fragment,f),E(vF.$$.fragment,f),E(Z8.$$.fragment,f),E(CF.$$.fragment,f),E(e9.$$.fragment,f),E(o9.$$.fragment,f),E(t9.$$.fragment,f),E(AF.$$.fragment,f),E(a9.$$.fragment,f),E($F.$$.fragment,f),E(s9.$$.fragment,f),E(l9.$$.fragment,f),E(d9.$$.fragment,f),E(SF.$$.fragment,f),E(c9.$$.fragment,f),E(BF.$$.fragment,f),E(f9.$$.fragment,f),E(m9.$$.fragment,f),E(h9.$$.fragment,f),E(NF.$$.fragment,f),E(p9.$$.fragment,f),E(VF.$$.fragment,f),E(_9.$$.fragment,f),E(u9.$$.fragment,f),E(v9.$$.fragment,f),E(zF.$$.fragment,f),E(F9.$$.fragment,f),E(HF.$$.fragment,f),E(T9.$$.fragment,f),E(M9.$$.fragment,f),E(C9.$$.fragment,f),E(JF.$$.fragment,f),E(w9.$$.fragment,f),E(X6.$$.fragment,f),E(A9.$$.fragment,f),E(L9.$$.fragment,f),E(x9.$$.fragment,f),E(Q6.$$.fragment,f),E($9.$$.fragment,f),E(_T.$$.fragment,f),E(k9.$$.fragment,f),E(S9.$$.fragment,f),E(P9.$$.fragment,f),E(bT.$$.fragment,f),E(B9.$$.fragment,f),E(RT.$$.fragment,f),E(I9.$$.fragment,f),E(N9.$$.fragment,f),E(j9.$$.fragment,f),E(BT.$$.fragment,f),E(D9.$$.fragment,f),E(DT.$$.fragment,f),E(G9.$$.fragment,f),E(O9.$$.fragment,f),E(X9.$$.fragment,f),E(OT.$$.fragment,f),E(z9.$$.fragment,f),E(dM.$$.fragment,f),E(Q9.$$.fragment,f),E(W9.$$.fragment,f),E(U9.$$.fragment,f),E(fM.$$.fragment,f),E(J9.$$.fragment,f),E(MM.$$.fragment,f),E(Y9.$$.fragment,f),E(K9.$$.fragment,f),E(ex.$$.fragment,f),E(CM.$$.fragment,f),E(ox.$$.fragment,f),E(YM.$$.fragment,f),E(rx.$$.fragment,f),E(tx.$$.fragment,f),E(nx.$$.fragment,f),E(ZM.$$.fragment,f),E(sx.$$.fragment,f),E(uE.$$.fragment,f),E(lx.$$.fragment,f),E(ix.$$.fragment,f),E(cx.$$.fragment,f),E(vE.$$.fragment,f),E(fx.$$.fragment,f),E(ME.$$.fragment,f),E(gx.$$.fragment,f),E(hx.$$.fragment,f),E(_x.$$.fragment,f),E(CE.$$.fragment,f),E(ux.$$.fragment,f),E(AE.$$.fragment,f),E(bx.$$.fragment,f),E(vx.$$.fragment,f),E(Tx.$$.fragment,f),E(yE.$$.fragment,f),E(Mx.$$.fragment,f),E(UE.$$.fragment,f),E(Ex.$$.fragment,f),E(Cx.$$.fragment,f),E(Ax.$$.fragment,f),E(YE.$$.fragment,f),E(Lx.$$.fragment,f),E(bC.$$.fragment,f),E(yx.$$.fragment,f),E(xx.$$.fragment,f),E(kx.$$.fragment,f),E(FC.$$.fragment,f),E(Sx.$$.fragment,f),E(MC.$$.fragment,f),E(Rx.$$.fragment,f),E(Px.$$.fragment,f),E(Ix.$$.fragment,f),E(CC.$$.fragment,f),E(Nx.$$.fragment,f),E(AC.$$.fragment,f),E(qx.$$.fragment,f),E(jx.$$.fragment,f),E(Gx.$$.fragment,f),E(yC.$$.fragment,f),E(Ox.$$.fragment,f),E(r0.$$.fragment,f),E(Vx.$$.fragment,f),E(Xx.$$.fragment,f),E(Qx.$$.fragment,f),E(a0.$$.fragment,f),E(Wx.$$.fragment,f),E(p0.$$.fragment,f),E(Hx.$$.fragment,f),E(Ux.$$.fragment,f),E(Yx.$$.fragment,f),E(u0.$$.fragment,f),E(Kx.$$.fragment,f),E(k0.$$.fragment,f),E(Zx.$$.fragment,f),E(e$.$$.fragment,f),E(r$.$$.fragment,f),E(R0.$$.fragment,f),E(t$.$$.fragment,f),E(X0.$$.fragment,f),E(a$.$$.fragment,f),E(n$.$$.fragment,f),E(l$.$$.fragment,f),E(Q0.$$.fragment,f),E(i$.$$.fragment,f),E(tw.$$.fragment,f),E(d$.$$.fragment,f),E(c$.$$.fragment,f),E(m$.$$.fragment,f),E(nw.$$.fragment,f),E(g$.$$.fragment,f),E(_w.$$.fragment,f),E(h$.$$.fragment,f),E(p$.$$.fragment,f),E(u$.$$.fragment,f),E(bw.$$.fragment,f),E(b$.$$.fragment,f),E(xw.$$.fragment,f),E(v$.$$.fragment,f),E(F$.$$.fragment,f),E(M$.$$.fragment,f),E(kw.$$.fragment,f),E(E$.$$.fragment,f),E(Dw.$$.fragment,f),E(C$.$$.fragment,f),E(w$.$$.fragment,f),E(L$.$$.fragment,f),E(Ow.$$.fragment,f),E(y$.$$.fragment,f),E(Yw.$$.fragment,f),E(x$.$$.fragment,f),E($$.$$.fragment,f),E(S$.$$.fragment,f),E(Zw.$$.fragment,f),E(R$.$$.fragment,f),E(oA.$$.fragment,f),E(P$.$$.fragment,f),E(B$.$$.fragment,f),E(N$.$$.fragment,f),E(tA.$$.fragment,f),E(q$.$$.fragment,f),E(sA.$$.fragment,f),E(D$.$$.fragment,f),E(G$.$$.fragment,f),E(V$.$$.fragment,f),E(iA.$$.fragment,f),E(X$.$$.fragment,f),E(cA.$$.fragment,f),pXe=!0)},o(f){C(d.$$.fragment,f),C(xa.$$.fragment,f),C(B7.$$.fragment,f),C(I7.$$.fragment,f),C(Pf.$$.fragment,f),C(N7.$$.fragment,f),C(q7.$$.fragment,f),C(G7.$$.fragment,f),C(Vg.$$.fragment,f),C(O7.$$.fragment,f),C(V7.$$.fragment,f),C(X7.$$.fragment,f),C(W7.$$.fragment,f),C(wh.$$.fragment,f),C(H7.$$.fragment,f),C(U7.$$.fragment,f),C(J7.$$.fragment,f),C(Z7.$$.fragment,f),C(sp.$$.fragment,f),C(lp.$$.fragment,f),C(ey.$$.fragment,f),C(oy.$$.fragment,f),C(ry.$$.fragment,f),C(ny.$$.fragment,f),C(Lp.$$.fragment,f),C(yp.$$.fragment,f),C(sy.$$.fragment,f),C(ly.$$.fragment,f),C(iy.$$.fragment,f),C(cy.$$.fragment,f),C(kp.$$.fragment,f),C(fy.$$.fragment,f),C(Su.$$.fragment,f),C(my.$$.fragment,f),C(gy.$$.fragment,f),C(py.$$.fragment,f),C(Pu.$$.fragment,f),C(_y.$$.fragment,f),C(A1.$$.fragment,f),C(uy.$$.fragment,f),C(by.$$.fragment,f),C(Fy.$$.fragment,f),C(y1.$$.fragment,f),C(Ty.$$.fragment,f),C(p2.$$.fragment,f),C(My.$$.fragment,f),C(Ey.$$.fragment,f),C(wy.$$.fragment,f),C(u2.$$.fragment,f),C(Ay.$$.fragment,f),C(rb.$$.fragment,f),C(Ly.$$.fragment,f),C(yy.$$.fragment,f),C($y.$$.fragment,f),C(ab.$$.fragment,f),C(ky.$$.fragment,f),C(Eb.$$.fragment,f),C(Sy.$$.fragment,f),C(Ry.$$.fragment,f),C(By.$$.fragment,f),C(wb.$$.fragment,f),C(Iy.$$.fragment,f),C(M4.$$.fragment,f),C(Ny.$$.fragment,f),C(qy.$$.fragment,f),C(Dy.$$.fragment,f),C(C4.$$.fragment,f),C(Gy.$$.fragment,f),C(r5.$$.fragment,f),C(Oy.$$.fragment,f),C(Vy.$$.fragment,f),C(zy.$$.fragment,f),C(a5.$$.fragment,f),C(Qy.$$.fragment,f),C(m5.$$.fragment,f),C(Wy.$$.fragment,f),C(Hy.$$.fragment,f),C(Jy.$$.fragment,f),C(h5.$$.fragment,f),C(Yy.$$.fragment,f),C(K5.$$.fragment,f),C(Ky.$$.fragment,f),C(Zy.$$.fragment,f),C(o8.$$.fragment,f),C(e3.$$.fragment,f),C(r8.$$.fragment,f),C(V3.$$.fragment,f),C(t8.$$.fragment,f),C(a8.$$.fragment,f),C(s8.$$.fragment,f),C(z3.$$.fragment,f),C(l8.$$.fragment,f),C(H3.$$.fragment,f),C(i8.$$.fragment,f),C(d8.$$.fragment,f),C(f8.$$.fragment,f),C(J3.$$.fragment,f),C(m8.$$.fragment,f),C(cv.$$.fragment,f),C(g8.$$.fragment,f),C(h8.$$.fragment,f),C(_8.$$.fragment,f),C(mv.$$.fragment,f),C(u8.$$.fragment,f),C(pv.$$.fragment,f),C(b8.$$.fragment,f),C(v8.$$.fragment,f),C(T8.$$.fragment,f),C(uv.$$.fragment,f),C(M8.$$.fragment,f),C(Fv.$$.fragment,f),C(E8.$$.fragment,f),C(C8.$$.fragment,f),C(A8.$$.fragment,f),C(Mv.$$.fragment,f),C(L8.$$.fragment,f),C(Rv.$$.fragment,f),C(y8.$$.fragment,f),C(x8.$$.fragment,f),C(k8.$$.fragment,f),C(Bv.$$.fragment,f),C(S8.$$.fragment,f),C(Ov.$$.fragment,f),C(R8.$$.fragment,f),C(P8.$$.fragment,f),C(I8.$$.fragment,f),C(Xv.$$.fragment,f),C(N8.$$.fragment,f),C(rF.$$.fragment,f),C(q8.$$.fragment,f),C(j8.$$.fragment,f),C(G8.$$.fragment,f),C(aF.$$.fragment,f),C(O8.$$.fragment,f),C(iF.$$.fragment,f),C(X8.$$.fragment,f),C(z8.$$.fragment,f),C(W8.$$.fragment,f),C(cF.$$.fragment,f),C(H8.$$.fragment,f),C(uF.$$.fragment,f),C(U8.$$.fragment,f),C(J8.$$.fragment,f),C(K8.$$.fragment,f),C(vF.$$.fragment,f),C(Z8.$$.fragment,f),C(CF.$$.fragment,f),C(e9.$$.fragment,f),C(o9.$$.fragment,f),C(t9.$$.fragment,f),C(AF.$$.fragment,f),C(a9.$$.fragment,f),C($F.$$.fragment,f),C(s9.$$.fragment,f),C(l9.$$.fragment,f),C(d9.$$.fragment,f),C(SF.$$.fragment,f),C(c9.$$.fragment,f),C(BF.$$.fragment,f),C(f9.$$.fragment,f),C(m9.$$.fragment,f),C(h9.$$.fragment,f),C(NF.$$.fragment,f),C(p9.$$.fragment,f),C(VF.$$.fragment,f),C(_9.$$.fragment,f),C(u9.$$.fragment,f),C(v9.$$.fragment,f),C(zF.$$.fragment,f),C(F9.$$.fragment,f),C(HF.$$.fragment,f),C(T9.$$.fragment,f),C(M9.$$.fragment,f),C(C9.$$.fragment,f),C(JF.$$.fragment,f),C(w9.$$.fragment,f),C(X6.$$.fragment,f),C(A9.$$.fragment,f),C(L9.$$.fragment,f),C(x9.$$.fragment,f),C(Q6.$$.fragment,f),C($9.$$.fragment,f),C(_T.$$.fragment,f),C(k9.$$.fragment,f),C(S9.$$.fragment,f),C(P9.$$.fragment,f),C(bT.$$.fragment,f),C(B9.$$.fragment,f),C(RT.$$.fragment,f),C(I9.$$.fragment,f),C(N9.$$.fragment,f),C(j9.$$.fragment,f),C(BT.$$.fragment,f),C(D9.$$.fragment,f),C(DT.$$.fragment,f),C(G9.$$.fragment,f),C(O9.$$.fragment,f),C(X9.$$.fragment,f),C(OT.$$.fragment,f),C(z9.$$.fragment,f),C(dM.$$.fragment,f),C(Q9.$$.fragment,f),C(W9.$$.fragment,f),C(U9.$$.fragment,f),C(fM.$$.fragment,f),C(J9.$$.fragment,f),C(MM.$$.fragment,f),C(Y9.$$.fragment,f),C(K9.$$.fragment,f),C(ex.$$.fragment,f),C(CM.$$.fragment,f),C(ox.$$.fragment,f),C(YM.$$.fragment,f),C(rx.$$.fragment,f),C(tx.$$.fragment,f),C(nx.$$.fragment,f),C(ZM.$$.fragment,f),C(sx.$$.fragment,f),C(uE.$$.fragment,f),C(lx.$$.fragment,f),C(ix.$$.fragment,f),C(cx.$$.fragment,f),C(vE.$$.fragment,f),C(fx.$$.fragment,f),C(ME.$$.fragment,f),C(gx.$$.fragment,f),C(hx.$$.fragment,f),C(_x.$$.fragment,f),C(CE.$$.fragment,f),C(ux.$$.fragment,f),C(AE.$$.fragment,f),C(bx.$$.fragment,f),C(vx.$$.fragment,f),C(Tx.$$.fragment,f),C(yE.$$.fragment,f),C(Mx.$$.fragment,f),C(UE.$$.fragment,f),C(Ex.$$.fragment,f),C(Cx.$$.fragment,f),C(Ax.$$.fragment,f),C(YE.$$.fragment,f),C(Lx.$$.fragment,f),C(bC.$$.fragment,f),C(yx.$$.fragment,f),C(xx.$$.fragment,f),C(kx.$$.fragment,f),C(FC.$$.fragment,f),C(Sx.$$.fragment,f),C(MC.$$.fragment,f),C(Rx.$$.fragment,f),C(Px.$$.fragment,f),C(Ix.$$.fragment,f),C(CC.$$.fragment,f),C(Nx.$$.fragment,f),C(AC.$$.fragment,f),C(qx.$$.fragment,f),C(jx.$$.fragment,f),C(Gx.$$.fragment,f),C(yC.$$.fragment,f),C(Ox.$$.fragment,f),C(r0.$$.fragment,f),C(Vx.$$.fragment,f),C(Xx.$$.fragment,f),C(Qx.$$.fragment,f),C(a0.$$.fragment,f),C(Wx.$$.fragment,f),C(p0.$$.fragment,f),C(Hx.$$.fragment,f),C(Ux.$$.fragment,f),C(Yx.$$.fragment,f),C(u0.$$.fragment,f),C(Kx.$$.fragment,f),C(k0.$$.fragment,f),C(Zx.$$.fragment,f),C(e$.$$.fragment,f),C(r$.$$.fragment,f),C(R0.$$.fragment,f),C(t$.$$.fragment,f),C(X0.$$.fragment,f),C(a$.$$.fragment,f),C(n$.$$.fragment,f),C(l$.$$.fragment,f),C(Q0.$$.fragment,f),C(i$.$$.fragment,f),C(tw.$$.fragment,f),C(d$.$$.fragment,f),C(c$.$$.fragment,f),C(m$.$$.fragment,f),C(nw.$$.fragment,f),C(g$.$$.fragment,f),C(_w.$$.fragment,f),C(h$.$$.fragment,f),C(p$.$$.fragment,f),C(u$.$$.fragment,f),C(bw.$$.fragment,f),C(b$.$$.fragment,f),C(xw.$$.fragment,f),C(v$.$$.fragment,f),C(F$.$$.fragment,f),C(M$.$$.fragment,f),C(kw.$$.fragment,f),C(E$.$$.fragment,f),C(Dw.$$.fragment,f),C(C$.$$.fragment,f),C(w$.$$.fragment,f),C(L$.$$.fragment,f),C(Ow.$$.fragment,f),C(y$.$$.fragment,f),C(Yw.$$.fragment,f),C(x$.$$.fragment,f),C($$.$$.fragment,f),C(S$.$$.fragment,f),C(Zw.$$.fragment,f),C(R$.$$.fragment,f),C(oA.$$.fragment,f),C(P$.$$.fragment,f),C(B$.$$.fragment,f),C(N$.$$.fragment,f),C(tA.$$.fragment,f),C(q$.$$.fragment,f),C(sA.$$.fragment,f),C(D$.$$.fragment,f),C(G$.$$.fragment,f),C(V$.$$.fragment,f),C(iA.$$.fragment,f),C(X$.$$.fragment,f),C(cA.$$.fragment,f),pXe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(xf),f&&t(at),f&&t(Oe),f&&t(Qe),f&&t(kf),w(xa,f),f&&t(We),f&&t(Ae),f&&t(Co),f&&t($a),f&&t(cOe),f&&t(xi),w(B7),f&&t(fOe),f&&t(Nn),f&&t(mOe),w(I7,f),f&&t(gOe),f&&t(hS),f&&t(hOe),w(Pf,f),f&&t(pOe),f&&t($i),w(N7),f&&t(_Oe),f&&t(wo),w(q7),w(G7),w(Vg),w(O7),f&&t(uOe),f&&t(Si),w(V7),f&&t(bOe),f&&t(Ao),w(X7),w(W7),w(wh),w(H7),f&&t(vOe),f&&t(Ri),w(U7),f&&t(FOe),f&&t(Lo),w(J7),w(Z7),w(sp),w(lp),w(ey),f&&t(TOe),f&&t(Pi),w(oy),f&&t(MOe),f&&t(yo),w(ry),w(ny),w(Lp),w(yp),w(sy),f&&t(EOe),f&&t(Ii),w(ly),f&&t(COe),f&&t(xo),w(iy),w(cy),w(kp),w(fy),w(Su),f&&t(wOe),f&&t(ji),w(my),f&&t(AOe),f&&t($o),w(gy),w(py),w(Pu),w(_y),w(A1),f&&t(LOe),f&&t(Oi),w(uy),f&&t(yOe),f&&t(ko),w(by),w(Fy),w(y1),w(Ty),w(p2),f&&t(xOe),f&&t(zi),w(My),f&&t($Oe),f&&t(So),w(Ey),w(wy),w(u2),w(Ay),w(rb),f&&t(kOe),f&&t(Hi),w(Ly),f&&t(SOe),f&&t(Ro),w(yy),w($y),w(ab),w(ky),w(Eb),f&&t(ROe),f&&t(Yi),w(Sy),f&&t(POe),f&&t(Po),w(Ry),w(By),w(wb),w(Iy),w(M4),f&&t(BOe),f&&t(ed),w(Ny),f&&t(IOe),f&&t(Bo),w(qy),w(Dy),w(C4),w(Gy),w(r5),f&&t(NOe),f&&t(td),w(Oy),f&&t(qOe),f&&t(Io),w(Vy),w(zy),w(a5),w(Qy),w(m5),f&&t(jOe),f&&t(sd),w(Wy),f&&t(DOe),f&&t(qo),w(Hy),w(Jy),w(h5),w(Yy),w(K5),f&&t(GOe),f&&t(dd),w(Ky),f&&t(OOe),f&&t(jo),w(Zy),w(o8),w(e3),w(r8),w(V3),f&&t(VOe),f&&t(md),w(t8),f&&t(XOe),f&&t(Do),w(a8),w(s8),w(z3),w(l8),w(H3),f&&t(zOe),f&&t(pd),w(i8),f&&t(QOe),f&&t(Go),w(d8),w(f8),w(J3),w(m8),w(cv),f&&t(WOe),f&&t(bd),w(g8),f&&t(HOe),f&&t(Oo),w(h8),w(_8),w(mv),w(u8),w(pv),f&&t(UOe),f&&t(Td),w(b8),f&&t(JOe),f&&t(Vo),w(v8),w(T8),w(uv),w(M8),w(Fv),f&&t(YOe),f&&t(Cd),w(E8),f&&t(KOe),f&&t(Xo),w(C8),w(A8),w(Mv),w(L8),w(Rv),f&&t(ZOe),f&&t(Ld),w(y8),f&&t(eVe),f&&t(zo),w(x8),w(k8),w(Bv),w(S8),w(Ov),f&&t(oVe),f&&t($d),w(R8),f&&t(rVe),f&&t(Qo),w(P8),w(I8),w(Xv),w(N8),w(rF),f&&t(tVe),f&&t(Rd),w(q8),f&&t(aVe),f&&t(Wo),w(j8),w(G8),w(aF),w(O8),w(iF),f&&t(nVe),f&&t(Id),w(X8),f&&t(sVe),f&&t(Ho),w(z8),w(W8),w(cF),w(H8),w(uF),f&&t(lVe),f&&t(jd),w(U8),f&&t(iVe),f&&t(Uo),w(J8),w(K8),w(vF),w(Z8),w(CF),f&&t(dVe),f&&t(Vd),w(e9),f&&t(cVe),f&&t(Jo),w(o9),w(t9),w(AF),w(a9),w($F),f&&t(fVe),f&&t(Qd),w(s9),f&&t(mVe),f&&t(Yo),w(l9),w(d9),w(SF),w(c9),w(BF),f&&t(gVe),f&&t(Ud),w(f9),f&&t(hVe),f&&t(Ko),w(m9),w(h9),w(NF),w(p9),w(VF),f&&t(pVe),f&&t(Kd),w(_9),f&&t(_Ve),f&&t(Zo),w(u9),w(v9),w(zF),w(F9),w(HF),f&&t(uVe),f&&t(oc),w(T9),f&&t(bVe),f&&t(er),w(M9),w(C9),w(JF),w(w9),w(X6),f&&t(vVe),f&&t(ac),w(A9),f&&t(FVe),f&&t(or),w(L9),w(x9),w(Q6),w($9),w(_T),f&&t(TVe),f&&t(lc),w(k9),f&&t(MVe),f&&t(rr),w(S9),w(P9),w(bT),w(B9),w(RT),f&&t(EVe),f&&t(cc),w(I9),f&&t(CVe),f&&t(tr),w(N9),w(j9),w(BT),w(D9),w(DT),f&&t(wVe),f&&t(gc),w(G9),f&&t(AVe),f&&t(ar),w(O9),w(X9),w(OT),w(z9),w(dM),f&&t(LVe),f&&t(_c),w(Q9),f&&t(yVe),f&&t(nr),w(W9),w(U9),w(fM),w(J9),w(MM),f&&t(xVe),f&&t(vc),w(Y9),f&&t($Ve),f&&t(sr),w(K9),w(ex),w(CM),w(ox),w(YM),f&&t(kVe),f&&t(Mc),w(rx),f&&t(SVe),f&&t(lr),w(tx),w(nx),w(ZM),w(sx),w(uE),f&&t(RVe),f&&t(wc),w(lx),f&&t(PVe),f&&t(ir),w(ix),w(cx),w(vE),w(fx),w(ME),f&&t(BVe),f&&t(yc),w(gx),f&&t(IVe),f&&t(dr),w(hx),w(_x),w(CE),w(ux),w(AE),f&&t(NVe),f&&t(kc),w(bx),f&&t(qVe),f&&t(cr),w(vx),w(Tx),w(yE),w(Mx),w(UE),f&&t(jVe),f&&t(Pc),w(Ex),f&&t(DVe),f&&t(fr),w(Cx),w(Ax),w(YE),w(Lx),w(bC),f&&t(GVe),f&&t(Nc),w(yx),f&&t(OVe),f&&t(mr),w(xx),w(kx),w(FC),w(Sx),w(MC),f&&t(VVe),f&&t(Dc),w(Rx),f&&t(XVe),f&&t(gr),w(Px),w(Ix),w(CC),w(Nx),w(AC),f&&t(zVe),f&&t(Vc),w(qx),f&&t(QVe),f&&t(hr),w(jx),w(Gx),w(yC),w(Ox),w(r0),f&&t(WVe),f&&t(Qc),w(Vx),f&&t(HVe),f&&t(pr),w(Xx),w(Qx),w(a0),w(Wx),w(p0),f&&t(UVe),f&&t(Uc),w(Hx),f&&t(JVe),f&&t(_r),w(Ux),w(Yx),w(u0),w(Kx),w(k0),f&&t(YVe),f&&t(Kc),w(Zx),f&&t(KVe),f&&t(ur),w(e$),w(r$),w(R0),w(t$),w(X0),f&&t(ZVe),f&&t(of),w(a$),f&&t(eXe),f&&t(br),w(n$),w(l$),w(Q0),w(i$),w(tw),f&&t(oXe),f&&t(af),w(d$),f&&t(rXe),f&&t(vr),w(c$),w(m$),w(nw),w(g$),w(_w),f&&t(tXe),f&&t(lf),w(h$),f&&t(aXe),f&&t(Fr),w(p$),w(u$),w(bw),w(b$),w(xw),f&&t(nXe),f&&t(ff),w(v$),f&&t(sXe),f&&t(Tr),w(F$),w(M$),w(kw),w(E$),w(Dw),f&&t(lXe),f&&t(hf),w(C$),f&&t(iXe),f&&t(Mr),w(w$),w(L$),w(Ow),w(y$),w(Yw),f&&t(dXe),f&&t(uf),w(x$),f&&t(cXe),f&&t(Er),w($$),w(S$),w(Zw),w(R$),w(oA),f&&t(fXe),f&&t(Ff),w(P$),f&&t(mXe),f&&t(Cr),w(B$),w(N$),w(tA),w(q$),w(sA),f&&t(gXe),f&&t(Ef),w(D$),f&&t(hXe),f&&t(wr),w(G$),w(V$),w(iA),w(X$),w(cA)}}}const DVt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function GVt(x){return jGt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class HVt extends BGt{constructor(g){super();IGt(this,g,GVt,jVt,NGt,{})}}export{HVt as default,DVt as metadata};
