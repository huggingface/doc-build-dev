import{S as L$t,i as x$t,s as $$t,e as a,k as l,w as F,t as o,M as k$t,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as S$t,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as HVr}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as re}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function R$t(L){let g,v,p,m,_,d,h,Mo,fi,pf,rt,mi,gi,wy,_f,je,We,hi,yn,Ay,Ln,xn,yy,pi,$n,Ly,_i,uf,Ca;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),fi=a("code"),pf=o("model_type"),rt=o(" attribute is set to the same key you use when registering the config (here "),mi=a("code"),gi=o('"new-model"'),wy=o(")."),_f=l(),je=a("p"),We=o("Likewise, if your "),hi=a("code"),yn=o("NewModel"),Ay=o(" is a subclass of "),Ln=a("a"),xn=o("PreTrainedModel"),yy=o(`, make sure its
`),pi=a("code"),$n=o("config_class"),Ly=o(` attribute is set to the same class you use when registering the model (here
`),_i=a("code"),uf=o("NewModelConfig"),Ca=o(")."),this.h()},l(Qe){g=n(Qe,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var Q$=s(p);m=r(Q$,"NewModelConfig"),Q$.forEach(t),_=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var ui=s(d);h=r(ui,"PretrainedConfig"),ui.forEach(t),Mo=r(Ae,`, make sure its
`),fi=n(Ae,"CODE",{});var H$=s(fi);pf=r(H$,"model_type"),H$.forEach(t),rt=r(Ae," attribute is set to the same key you use when registering the config (here "),mi=n(Ae,"CODE",{});var U$=s(mi);gi=r(U$,'"new-model"'),U$.forEach(t),wy=r(Ae,")."),Ae.forEach(t),_f=i(Qe),je=n(Qe,"P",{});var Eo=s(je);We=r(Eo,"Likewise, if your "),hi=n(Eo,"CODE",{});var wa=s(hi);yn=r(wa,"NewModel"),wa.forEach(t),Ay=r(Eo," is a subclass of "),Ln=n(Eo,"A",{href:!0});var J$=s(Ln);xn=r(J$,"PreTrainedModel"),J$.forEach(t),yy=r(Eo,`, make sure its
`),pi=n(Eo,"CODE",{});var bf=s(pi);$n=r(bf,"config_class"),bf.forEach(t),Ly=r(Eo,` attribute is set to the same class you use when registering the model (here
`),_i=n(Eo,"CODE",{});var Y$=s(_i);uf=r(Y$,"NewModelConfig"),Y$.forEach(t),Ca=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(Ln,"href","/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel")},m(Qe,Ae){b(Qe,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,d),e(d,h),e(g,Mo),e(g,fi),e(fi,pf),e(g,rt),e(g,mi),e(mi,gi),e(g,wy),b(Qe,_f,Ae),b(Qe,je,Ae),e(je,We),e(je,hi),e(hi,yn),e(je,Ay),e(je,Ln),e(Ln,xn),e(je,yy),e(je,pi),e(pi,$n),e(je,Ly),e(je,_i),e(_i,uf),e(je,Ca)},d(Qe){Qe&&t(g),Qe&&t(_f),Qe&&t(je)}}}function P$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function B$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function I$t(L){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function N$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function q$t(L){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function j$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function D$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function G$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function O$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function V$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function X$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function z$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function W$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Q$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function H$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function U$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function J$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Y$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function K$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Z$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ekt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function okt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function akt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function skt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ikt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ckt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _kt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ukt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Fkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Tkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Mkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ekt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ckt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Akt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ykt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Lkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $kt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Skt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Rkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Pkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Bkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ikt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Nkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Dkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Okt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Xkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Wkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Hkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ukt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ykt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Kkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Zkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _St(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ESt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ASt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ySt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $St(L){let g,v,p,m,_,d,h,Mo,fi,pf,rt,mi,gi,wy,_f,je,We,hi,yn,Ay,Ln,xn,yy,pi,$n,Ly,_i,uf,Ca,Qe,Ae,Q$,ui,H$,U$,Eo,wa,J$,bf,Y$,uOe,sqe,bi,vf,coe,xy,bOe,foe,vOe,lqe,kn,FOe,moe,TOe,MOe,goe,EOe,COe,iqe,$y,dqe,K$,wOe,cqe,Ff,fqe,vi,Tf,hoe,ky,AOe,poe,yOe,mqe,Co,Sy,LOe,Ry,xOe,Z$,$Oe,kOe,SOe,Py,ROe,_oe,POe,BOe,IOe,Er,By,NOe,uoe,qOe,jOe,Fi,DOe,boe,GOe,OOe,voe,VOe,XOe,zOe,A,Mf,Foe,WOe,QOe,ek,HOe,UOe,JOe,Ef,Toe,YOe,KOe,ok,ZOe,eVe,oVe,Cf,Moe,rVe,tVe,rk,aVe,nVe,sVe,wf,Eoe,lVe,iVe,tk,dVe,cVe,fVe,Af,Coe,mVe,gVe,ak,hVe,pVe,_Ve,yf,woe,uVe,bVe,nk,vVe,FVe,TVe,Lf,Aoe,MVe,EVe,sk,CVe,wVe,AVe,xf,yoe,yVe,LVe,lk,xVe,$Ve,kVe,$f,Loe,SVe,RVe,ik,PVe,BVe,IVe,kf,xoe,NVe,qVe,dk,jVe,DVe,GVe,Sf,$oe,OVe,VVe,ck,XVe,zVe,WVe,Rf,koe,QVe,HVe,fk,UVe,JVe,YVe,Pf,Soe,KVe,ZVe,mk,eXe,oXe,rXe,Bf,Roe,tXe,aXe,gk,nXe,sXe,lXe,If,Poe,iXe,dXe,hk,cXe,fXe,mXe,Nf,Boe,gXe,hXe,pk,pXe,_Xe,uXe,qf,Ioe,bXe,vXe,_k,FXe,TXe,MXe,jf,Noe,EXe,CXe,uk,wXe,AXe,yXe,Df,qoe,LXe,xXe,bk,$Xe,kXe,SXe,Gf,joe,RXe,PXe,vk,BXe,IXe,NXe,Of,Doe,qXe,jXe,Fk,DXe,GXe,OXe,Vf,Goe,VXe,XXe,Tk,zXe,WXe,QXe,Xf,Ooe,HXe,UXe,Mk,JXe,YXe,KXe,zf,Voe,ZXe,eze,Ek,oze,rze,tze,Wf,Xoe,aze,nze,Ck,sze,lze,ize,Qf,zoe,dze,cze,wk,fze,mze,gze,Hf,Woe,hze,pze,Ak,_ze,uze,bze,Uf,Qoe,vze,Fze,yk,Tze,Mze,Eze,Jf,Hoe,Cze,wze,Lk,Aze,yze,Lze,Yf,Uoe,xze,$ze,xk,kze,Sze,Rze,Kf,Joe,Pze,Bze,$k,Ize,Nze,qze,Zf,Yoe,jze,Dze,kk,Gze,Oze,Vze,em,Koe,Xze,zze,Sk,Wze,Qze,Hze,om,Zoe,Uze,Jze,Rk,Yze,Kze,Zze,rm,ere,eWe,oWe,Pk,rWe,tWe,aWe,tm,ore,nWe,sWe,Bk,lWe,iWe,dWe,am,rre,cWe,fWe,Ik,mWe,gWe,hWe,nm,tre,pWe,_We,Nk,uWe,bWe,vWe,sm,are,FWe,TWe,qk,MWe,EWe,CWe,lm,nre,wWe,AWe,jk,yWe,LWe,xWe,im,sre,$We,kWe,Dk,SWe,RWe,PWe,dm,lre,BWe,IWe,Gk,NWe,qWe,jWe,cm,ire,DWe,GWe,Ok,OWe,VWe,XWe,fm,dre,zWe,WWe,Vk,QWe,HWe,UWe,mm,cre,JWe,YWe,Xk,KWe,ZWe,eQe,gm,fre,oQe,rQe,zk,tQe,aQe,nQe,hm,mre,sQe,lQe,Wk,iQe,dQe,cQe,pm,gre,fQe,mQe,Qk,gQe,hQe,pQe,_m,hre,_Qe,uQe,Hk,bQe,vQe,FQe,um,pre,TQe,MQe,Uk,EQe,CQe,wQe,bm,_re,AQe,yQe,Jk,LQe,xQe,$Qe,vm,ure,kQe,SQe,Yk,RQe,PQe,BQe,Fm,bre,IQe,NQe,Kk,qQe,jQe,DQe,Tm,vre,GQe,OQe,Zk,VQe,XQe,zQe,Mm,Fre,WQe,QQe,eS,HQe,UQe,JQe,Em,Tre,YQe,KQe,oS,ZQe,eHe,oHe,Cm,Mre,rHe,tHe,rS,aHe,nHe,sHe,wm,Ere,lHe,iHe,tS,dHe,cHe,fHe,Am,Cre,mHe,gHe,aS,hHe,pHe,_He,ym,wre,uHe,bHe,nS,vHe,FHe,THe,Lm,Are,MHe,EHe,sS,CHe,wHe,AHe,xm,yre,yHe,LHe,lS,xHe,$He,kHe,$m,Lre,SHe,RHe,iS,PHe,BHe,IHe,km,xre,NHe,qHe,dS,jHe,DHe,GHe,Sm,$re,OHe,VHe,cS,XHe,zHe,WHe,Rm,kre,QHe,HHe,fS,UHe,JHe,YHe,Pm,Sre,KHe,ZHe,mS,eUe,oUe,rUe,Bm,Rre,tUe,aUe,gS,nUe,sUe,lUe,Im,Pre,iUe,dUe,hS,cUe,fUe,mUe,Nm,Bre,gUe,hUe,pS,pUe,_Ue,uUe,qm,Ire,bUe,vUe,_S,FUe,TUe,MUe,jm,Nre,EUe,CUe,uS,wUe,AUe,yUe,Dm,qre,LUe,xUe,bS,$Ue,kUe,SUe,Gm,jre,RUe,PUe,vS,BUe,IUe,NUe,Om,Dre,qUe,jUe,FS,DUe,GUe,OUe,Vm,Gre,VUe,XUe,TS,zUe,WUe,QUe,Xm,Ore,HUe,UUe,MS,JUe,YUe,KUe,zm,Vre,ZUe,eJe,ES,oJe,rJe,tJe,Wm,Xre,aJe,nJe,CS,sJe,lJe,iJe,Qm,zre,dJe,cJe,wS,fJe,mJe,gJe,Hm,Wre,hJe,pJe,AS,_Je,uJe,bJe,Um,Qre,vJe,FJe,yS,TJe,MJe,EJe,Jm,Hre,CJe,wJe,LS,AJe,yJe,LJe,Ym,Ure,xJe,$Je,xS,kJe,SJe,RJe,Km,Jre,PJe,BJe,$S,IJe,NJe,qJe,Zm,Yre,jJe,DJe,kS,GJe,OJe,VJe,eg,Kre,XJe,zJe,SS,WJe,QJe,HJe,og,Zre,UJe,JJe,RS,YJe,KJe,ZJe,rg,ete,eYe,oYe,PS,rYe,tYe,aYe,tg,ote,nYe,sYe,BS,lYe,iYe,dYe,ag,rte,cYe,fYe,IS,mYe,gYe,hYe,ng,tte,pYe,_Ye,NS,uYe,bYe,vYe,sg,ate,FYe,TYe,qS,MYe,EYe,CYe,lg,nte,wYe,AYe,jS,yYe,LYe,xYe,ig,ste,$Ye,kYe,DS,SYe,RYe,PYe,dg,lte,BYe,IYe,GS,NYe,qYe,jYe,cg,ite,DYe,GYe,OS,OYe,VYe,XYe,fg,dte,zYe,WYe,VS,QYe,HYe,UYe,mg,cte,JYe,YYe,XS,KYe,ZYe,eKe,gg,fte,oKe,rKe,zS,tKe,aKe,nKe,hg,mte,sKe,lKe,WS,iKe,dKe,cKe,pg,gte,fKe,mKe,QS,gKe,hKe,pKe,_g,hte,_Ke,uKe,HS,bKe,vKe,FKe,ug,pte,TKe,MKe,US,EKe,CKe,wKe,bg,_te,AKe,yKe,JS,LKe,xKe,$Ke,vg,ute,kKe,SKe,YS,RKe,PKe,BKe,Fg,bte,IKe,NKe,KS,qKe,jKe,DKe,Tg,vte,GKe,OKe,ZS,VKe,XKe,zKe,Mg,Fte,WKe,QKe,eR,HKe,UKe,JKe,Eg,YKe,Cg,Iy,KKe,Tte,ZKe,gqe,Ti,wg,Mte,Ny,eZe,Ete,oZe,hqe,wo,qy,rZe,jy,tZe,oR,aZe,nZe,sZe,Dy,lZe,Cte,iZe,dZe,cZe,Cr,Gy,fZe,wte,mZe,gZe,Aa,hZe,Ate,pZe,_Ze,yte,uZe,bZe,Lte,vZe,FZe,TZe,k,Sn,xte,MZe,EZe,rR,CZe,wZe,tR,AZe,yZe,LZe,Rn,$te,xZe,$Ze,aR,kZe,SZe,nR,RZe,PZe,BZe,Pn,kte,IZe,NZe,sR,qZe,jZe,lR,DZe,GZe,OZe,Ag,Ste,VZe,XZe,iR,zZe,WZe,QZe,Bn,Rte,HZe,UZe,dR,JZe,YZe,cR,KZe,ZZe,eeo,yg,Pte,oeo,reo,fR,teo,aeo,neo,Lg,Bte,seo,leo,mR,ieo,deo,ceo,xg,Ite,feo,meo,gR,geo,heo,peo,In,Nte,_eo,ueo,hR,beo,veo,pR,Feo,Teo,Meo,Nn,qte,Eeo,Ceo,_R,weo,Aeo,uR,yeo,Leo,xeo,qn,jte,$eo,keo,bR,Seo,Reo,vR,Peo,Beo,Ieo,$g,Dte,Neo,qeo,FR,jeo,Deo,Geo,kg,Gte,Oeo,Veo,TR,Xeo,zeo,Weo,jn,Ote,Qeo,Heo,MR,Ueo,Jeo,ER,Yeo,Keo,Zeo,Sg,Vte,eoo,ooo,CR,roo,too,aoo,Dn,Xte,noo,soo,wR,loo,ioo,AR,doo,coo,foo,Gn,zte,moo,goo,yR,hoo,poo,LR,_oo,uoo,boo,On,Wte,voo,Foo,xR,Too,Moo,$R,Eoo,Coo,woo,Rg,Qte,Aoo,yoo,kR,Loo,xoo,$oo,Vn,Hte,koo,Soo,SR,Roo,Poo,RR,Boo,Ioo,Noo,Xn,Ute,qoo,joo,PR,Doo,Goo,BR,Ooo,Voo,Xoo,zn,Jte,zoo,Woo,IR,Qoo,Hoo,NR,Uoo,Joo,Yoo,Wn,Yte,Koo,Zoo,qR,ero,oro,jR,rro,tro,aro,Qn,Kte,nro,sro,DR,lro,iro,GR,dro,cro,fro,Hn,Zte,mro,gro,OR,hro,pro,VR,_ro,uro,bro,Pg,eae,vro,Fro,XR,Tro,Mro,Ero,Un,oae,Cro,wro,zR,Aro,yro,WR,Lro,xro,$ro,Bg,rae,kro,Sro,QR,Rro,Pro,Bro,Jn,tae,Iro,Nro,HR,qro,jro,UR,Dro,Gro,Oro,Yn,aae,Vro,Xro,JR,zro,Wro,YR,Qro,Hro,Uro,Kn,nae,Jro,Yro,KR,Kro,Zro,ZR,eto,oto,rto,Ig,sae,tto,ato,eP,nto,sto,lto,Zn,lae,ito,dto,oP,cto,fto,rP,mto,gto,hto,es,iae,pto,_to,tP,uto,bto,aP,vto,Fto,Tto,Ng,dae,Mto,Eto,nP,Cto,wto,Ato,os,cae,yto,Lto,sP,xto,$to,lP,kto,Sto,Rto,rs,fae,Pto,Bto,iP,Ito,Nto,dP,qto,jto,Dto,ts,mae,Gto,Oto,cP,Vto,Xto,fP,zto,Wto,Qto,as,gae,Hto,Uto,mP,Jto,Yto,gP,Kto,Zto,eao,ns,hae,oao,rao,hP,tao,aao,pP,nao,sao,lao,ss,pae,iao,dao,_P,cao,fao,uP,mao,gao,hao,ls,_ae,pao,_ao,bP,uao,bao,vP,vao,Fao,Tao,qg,uae,Mao,Eao,FP,Cao,wao,Aao,is,bae,yao,Lao,TP,xao,$ao,MP,kao,Sao,Rao,jg,vae,Pao,Bao,EP,Iao,Nao,qao,Dg,Fae,jao,Dao,CP,Gao,Oao,Vao,ds,Tae,Xao,zao,wP,Wao,Qao,AP,Hao,Uao,Jao,cs,Mae,Yao,Kao,yP,Zao,eno,LP,ono,rno,tno,fs,Eae,ano,nno,xP,sno,lno,$P,ino,dno,cno,Gg,Cae,fno,mno,kP,gno,hno,pno,ms,wae,_no,uno,SP,bno,vno,RP,Fno,Tno,Mno,gs,Aae,Eno,Cno,PP,wno,Ano,BP,yno,Lno,xno,hs,yae,$no,kno,IP,Sno,Rno,NP,Pno,Bno,Ino,ps,Lae,Nno,qno,qP,jno,Dno,jP,Gno,Ono,Vno,_s,xae,Xno,zno,DP,Wno,Qno,GP,Hno,Uno,Jno,Og,$ae,Yno,Kno,OP,Zno,eso,oso,us,kae,rso,tso,VP,aso,nso,XP,sso,lso,iso,Vg,Sae,dso,cso,zP,fso,mso,gso,Xg,Rae,hso,pso,WP,_so,uso,bso,zg,Pae,vso,Fso,QP,Tso,Mso,Eso,Wg,Bae,Cso,wso,HP,Aso,yso,Lso,bs,Iae,xso,$so,UP,kso,Sso,JP,Rso,Pso,Bso,Qg,Nae,Iso,Nso,YP,qso,jso,Dso,vs,qae,Gso,Oso,KP,Vso,Xso,ZP,zso,Wso,Qso,Fs,jae,Hso,Uso,eB,Jso,Yso,oB,Kso,Zso,elo,Ts,Dae,olo,rlo,rB,tlo,alo,tB,nlo,slo,llo,Ms,Gae,ilo,dlo,aB,clo,flo,nB,mlo,glo,hlo,Es,Oae,plo,_lo,sB,ulo,blo,lB,vlo,Flo,Tlo,Cs,Vae,Mlo,Elo,iB,Clo,wlo,dB,Alo,ylo,Llo,Hg,Xae,xlo,$lo,cB,klo,Slo,Rlo,Ug,zae,Plo,Blo,fB,Ilo,Nlo,qlo,ws,Wae,jlo,Dlo,mB,Glo,Olo,gB,Vlo,Xlo,zlo,As,Qae,Wlo,Qlo,hB,Hlo,Ulo,pB,Jlo,Ylo,Klo,ys,Hae,Zlo,eio,_B,oio,rio,uB,tio,aio,nio,Jg,Uae,sio,lio,bB,iio,dio,cio,Yg,Jae,fio,mio,vB,gio,hio,pio,Kg,Yae,_io,uio,FB,bio,vio,Fio,Ls,Kae,Tio,Mio,TB,Eio,Cio,MB,wio,Aio,yio,Zg,Zae,Lio,xio,EB,$io,kio,Sio,eh,ene,Rio,Pio,CB,Bio,Iio,Nio,oh,one,qio,jio,wB,Dio,Gio,Oio,xs,rne,Vio,Xio,AB,zio,Wio,yB,Qio,Hio,Uio,rh,tne,Jio,Yio,LB,Kio,Zio,edo,th,ane,odo,rdo,xB,tdo,ado,ndo,$s,nne,sdo,ldo,$B,ido,ddo,kB,cdo,fdo,mdo,ks,sne,gdo,hdo,SB,pdo,_do,RB,udo,bdo,vdo,Ss,lne,Fdo,Tdo,PB,Mdo,Edo,BB,Cdo,wdo,Ado,Rs,ine,ydo,Ldo,IB,xdo,$do,NB,kdo,Sdo,Rdo,ah,Pdo,nh,Oy,Bdo,dne,Ido,pqe,Mi,sh,cne,Vy,Ndo,fne,qdo,_qe,Ao,Xy,jdo,zy,Ddo,qB,Gdo,Odo,Vdo,Wy,Xdo,mne,zdo,Wdo,Qdo,He,Qy,Hdo,gne,Udo,Jdo,ya,Ydo,hne,Kdo,Zdo,pne,eco,oco,_ne,rco,tco,aco,Y,lh,une,nco,sco,jB,lco,ico,dco,ih,bne,cco,fco,DB,mco,gco,hco,dh,vne,pco,_co,GB,uco,bco,vco,ch,Fne,Fco,Tco,OB,Mco,Eco,Cco,fh,Tne,wco,Aco,VB,yco,Lco,xco,mh,Mne,$co,kco,XB,Sco,Rco,Pco,gh,Ene,Bco,Ico,zB,Nco,qco,jco,hh,Cne,Dco,Gco,WB,Oco,Vco,Xco,ph,wne,zco,Wco,QB,Qco,Hco,Uco,_h,Ane,Jco,Yco,HB,Kco,Zco,efo,uh,yne,ofo,rfo,UB,tfo,afo,nfo,bh,Lne,sfo,lfo,JB,ifo,dfo,cfo,vh,xne,ffo,mfo,YB,gfo,hfo,pfo,Fh,$ne,_fo,ufo,KB,bfo,vfo,Ffo,Th,kne,Tfo,Mfo,ZB,Efo,Cfo,wfo,Mh,Sne,Afo,yfo,eI,Lfo,xfo,$fo,Eh,Rne,kfo,Sfo,oI,Rfo,Pfo,Bfo,Ch,Pne,Ifo,Nfo,rI,qfo,jfo,Dfo,wh,Bne,Gfo,Ofo,tI,Vfo,Xfo,zfo,Ah,Ine,Wfo,Qfo,aI,Hfo,Ufo,Jfo,yh,Nne,Yfo,Kfo,nI,Zfo,emo,omo,Lh,qne,rmo,tmo,sI,amo,nmo,smo,xh,jne,lmo,imo,lI,dmo,cmo,fmo,$h,Dne,mmo,gmo,iI,hmo,pmo,_mo,kh,Gne,umo,bmo,dI,vmo,Fmo,Tmo,Sh,One,Mmo,Emo,cI,Cmo,wmo,Amo,Rh,Vne,ymo,Lmo,fI,xmo,$mo,kmo,Ph,Xne,Smo,Rmo,mI,Pmo,Bmo,Imo,Bh,zne,Nmo,qmo,gI,jmo,Dmo,Gmo,Ih,Omo,Nh,Vmo,qh,Hy,Xmo,Wne,zmo,uqe,Ei,jh,Qne,Uy,Wmo,Hne,Qmo,bqe,yo,Jy,Hmo,Yy,Umo,hI,Jmo,Ymo,Kmo,Ky,Zmo,Une,ego,ogo,rgo,Ue,Zy,tgo,Jne,ago,ngo,Ci,sgo,Yne,lgo,igo,Kne,dgo,cgo,fgo,he,Dh,Zne,mgo,ggo,pI,hgo,pgo,_go,Gh,ese,ugo,bgo,ose,vgo,Fgo,Tgo,Oh,rse,Mgo,Ego,_I,Cgo,wgo,Ago,Vh,tse,ygo,Lgo,uI,xgo,$go,kgo,Xh,ase,Sgo,Rgo,bI,Pgo,Bgo,Igo,zh,nse,Ngo,qgo,vI,jgo,Dgo,Ggo,Wh,sse,Ogo,Vgo,FI,Xgo,zgo,Wgo,Qh,lse,Qgo,Hgo,TI,Ugo,Jgo,Ygo,Hh,ise,Kgo,Zgo,MI,eho,oho,rho,Uh,dse,tho,aho,EI,nho,sho,lho,Jh,cse,iho,dho,CI,cho,fho,mho,Yh,fse,gho,hho,wI,pho,_ho,uho,Kh,mse,bho,vho,AI,Fho,Tho,Mho,Zh,gse,Eho,Cho,yI,who,Aho,yho,ep,hse,Lho,xho,LI,$ho,kho,Sho,op,pse,Rho,Pho,xI,Bho,Iho,Nho,rp,_se,qho,jho,$I,Dho,Gho,Oho,tp,Vho,ap,Xho,np,eL,zho,use,Who,vqe,wi,sp,bse,oL,Qho,vse,Hho,Fqe,Lo,rL,Uho,Ai,Jho,kI,Yho,Kho,SI,Zho,epo,opo,tL,rpo,Fse,tpo,apo,npo,tt,aL,spo,Tse,lpo,ipo,yi,dpo,Mse,cpo,fpo,RI,mpo,gpo,hpo,lp,ppo,Je,nL,_po,Ese,upo,bpo,La,vpo,Cse,Fpo,Tpo,wse,Mpo,Epo,Ase,Cpo,wpo,Apo,x,ip,yse,ypo,Lpo,PI,xpo,$po,kpo,dp,Lse,Spo,Rpo,BI,Ppo,Bpo,Ipo,cp,xse,Npo,qpo,II,jpo,Dpo,Gpo,fp,$se,Opo,Vpo,NI,Xpo,zpo,Wpo,mp,kse,Qpo,Hpo,qI,Upo,Jpo,Ypo,gp,Sse,Kpo,Zpo,jI,e_o,o_o,r_o,hp,Rse,t_o,a_o,DI,n_o,s_o,l_o,pp,Pse,i_o,d_o,GI,c_o,f_o,m_o,_p,Bse,g_o,h_o,OI,p_o,__o,u_o,up,Ise,b_o,v_o,VI,F_o,T_o,M_o,bp,Nse,E_o,C_o,XI,w_o,A_o,y_o,vp,qse,L_o,x_o,zI,$_o,k_o,S_o,Fp,jse,R_o,P_o,WI,B_o,I_o,N_o,Tp,Dse,q_o,j_o,QI,D_o,G_o,O_o,Mp,Gse,V_o,X_o,HI,z_o,W_o,Q_o,Ep,Ose,H_o,U_o,UI,J_o,Y_o,K_o,Cp,Vse,Z_o,euo,JI,ouo,ruo,tuo,wp,Xse,auo,nuo,YI,suo,luo,iuo,Ap,zse,duo,cuo,KI,fuo,muo,guo,yp,Wse,huo,puo,ZI,_uo,uuo,buo,Lp,Qse,vuo,Fuo,eN,Tuo,Muo,Euo,xp,Hse,Cuo,wuo,oN,Auo,yuo,Luo,$p,Use,xuo,$uo,rN,kuo,Suo,Ruo,kp,Jse,Puo,Buo,tN,Iuo,Nuo,quo,Sp,Yse,juo,Duo,aN,Guo,Ouo,Vuo,Rp,Kse,Xuo,zuo,nN,Wuo,Quo,Huo,Pp,Zse,Uuo,Juo,sN,Yuo,Kuo,Zuo,Bp,ele,e1o,o1o,lN,r1o,t1o,a1o,Ip,ole,n1o,s1o,iN,l1o,i1o,d1o,Np,rle,c1o,f1o,dN,m1o,g1o,h1o,qp,tle,p1o,_1o,cN,u1o,b1o,v1o,jp,ale,F1o,T1o,fN,M1o,E1o,C1o,Ps,nle,w1o,A1o,mN,y1o,L1o,gN,x1o,$1o,k1o,Dp,sle,S1o,R1o,hN,P1o,B1o,I1o,Gp,lle,N1o,q1o,pN,j1o,D1o,G1o,Op,ile,O1o,V1o,_N,X1o,z1o,W1o,Vp,dle,Q1o,H1o,uN,U1o,J1o,Y1o,Xp,cle,K1o,Z1o,bN,ebo,obo,rbo,zp,fle,tbo,abo,vN,nbo,sbo,lbo,Wp,mle,ibo,dbo,FN,cbo,fbo,mbo,Qp,gle,gbo,hbo,TN,pbo,_bo,ubo,Hp,hle,bbo,vbo,MN,Fbo,Tbo,Mbo,Up,ple,Ebo,Cbo,EN,wbo,Abo,ybo,Jp,_le,Lbo,xbo,CN,$bo,kbo,Sbo,Yp,ule,Rbo,Pbo,wN,Bbo,Ibo,Nbo,Kp,ble,qbo,jbo,AN,Dbo,Gbo,Obo,Zp,vle,Vbo,Xbo,yN,zbo,Wbo,Qbo,e_,Fle,Hbo,Ubo,LN,Jbo,Ybo,Kbo,o_,Tle,Zbo,e2o,xN,o2o,r2o,t2o,r_,Mle,a2o,n2o,$N,s2o,l2o,i2o,t_,Ele,d2o,c2o,kN,f2o,m2o,g2o,a_,Cle,h2o,p2o,SN,_2o,u2o,b2o,n_,wle,v2o,F2o,RN,T2o,M2o,E2o,s_,Ale,C2o,w2o,PN,A2o,y2o,L2o,l_,yle,x2o,$2o,BN,k2o,S2o,R2o,i_,Lle,P2o,B2o,IN,I2o,N2o,q2o,d_,xle,j2o,D2o,NN,G2o,O2o,V2o,c_,$le,X2o,z2o,qN,W2o,Q2o,H2o,f_,kle,U2o,J2o,jN,Y2o,K2o,Z2o,m_,Sle,e4o,o4o,DN,r4o,t4o,a4o,g_,Rle,n4o,s4o,GN,l4o,i4o,d4o,h_,Ple,c4o,f4o,ON,m4o,g4o,h4o,p_,Ble,p4o,_4o,VN,u4o,b4o,v4o,__,Ile,F4o,T4o,XN,M4o,E4o,C4o,u_,Nle,w4o,A4o,zN,y4o,L4o,x4o,b_,qle,$4o,k4o,WN,S4o,R4o,P4o,v_,jle,B4o,I4o,QN,N4o,q4o,j4o,F_,Dle,D4o,G4o,HN,O4o,V4o,X4o,T_,Gle,z4o,W4o,UN,Q4o,H4o,U4o,M_,Ole,J4o,Y4o,JN,K4o,Z4o,e5o,E_,Vle,o5o,r5o,YN,t5o,a5o,n5o,C_,Xle,s5o,l5o,KN,i5o,d5o,c5o,w_,zle,f5o,m5o,ZN,g5o,h5o,p5o,A_,Wle,_5o,u5o,eq,b5o,v5o,F5o,y_,Qle,T5o,M5o,oq,E5o,C5o,w5o,L_,Hle,A5o,y5o,rq,L5o,x5o,$5o,x_,Ule,k5o,S5o,tq,R5o,P5o,B5o,$_,Jle,I5o,N5o,aq,q5o,j5o,D5o,k_,Yle,G5o,O5o,nq,V5o,X5o,z5o,S_,Kle,W5o,Q5o,sq,H5o,U5o,J5o,R_,Zle,Y5o,K5o,lq,Z5o,evo,ovo,P_,eie,rvo,tvo,iq,avo,nvo,svo,B_,oie,lvo,ivo,dq,dvo,cvo,fvo,I_,rie,mvo,gvo,cq,hvo,pvo,_vo,N_,tie,uvo,bvo,fq,vvo,Fvo,Tvo,q_,aie,Mvo,Evo,mq,Cvo,wvo,Avo,j_,nie,yvo,Lvo,gq,xvo,$vo,kvo,D_,sie,Svo,Rvo,hq,Pvo,Bvo,Ivo,G_,lie,Nvo,qvo,pq,jvo,Dvo,Gvo,O_,iie,Ovo,Vvo,_q,Xvo,zvo,Wvo,V_,die,Qvo,Hvo,uq,Uvo,Jvo,Yvo,X_,cie,Kvo,Zvo,bq,e3o,o3o,r3o,z_,fie,t3o,a3o,vq,n3o,s3o,l3o,W_,mie,i3o,d3o,Fq,c3o,f3o,m3o,Q_,gie,g3o,h3o,Tq,p3o,_3o,u3o,H_,hie,b3o,v3o,Mq,F3o,T3o,M3o,U_,pie,E3o,C3o,Eq,w3o,A3o,y3o,J_,_ie,L3o,x3o,Cq,$3o,k3o,S3o,Y_,uie,R3o,P3o,wq,B3o,I3o,N3o,K_,bie,q3o,j3o,Aq,D3o,G3o,O3o,Z_,vie,V3o,X3o,yq,z3o,W3o,Q3o,eu,Fie,H3o,U3o,Lq,J3o,Y3o,K3o,ou,Z3o,Tie,eFo,oFo,Mie,rFo,tFo,ru,Tqe,Li,tu,Eie,sL,aFo,Cie,nFo,Mqe,xo,lL,sFo,xi,lFo,xq,iFo,dFo,$q,cFo,fFo,mFo,iL,gFo,wie,hFo,pFo,_Fo,at,dL,uFo,Aie,bFo,vFo,$i,FFo,yie,TFo,MFo,kq,EFo,CFo,wFo,au,AFo,Ye,cL,yFo,Lie,LFo,xFo,xa,$Fo,xie,kFo,SFo,$ie,RFo,PFo,kie,BFo,IFo,NFo,G,nu,Sie,qFo,jFo,Sq,DFo,GFo,OFo,su,Rie,VFo,XFo,Rq,zFo,WFo,QFo,lu,Pie,HFo,UFo,Pq,JFo,YFo,KFo,iu,Bie,ZFo,e6o,Bq,o6o,r6o,t6o,du,Iie,a6o,n6o,Iq,s6o,l6o,i6o,cu,Nie,d6o,c6o,Nq,f6o,m6o,g6o,fu,qie,h6o,p6o,qq,_6o,u6o,b6o,mu,jie,v6o,F6o,jq,T6o,M6o,E6o,gu,Die,C6o,w6o,Dq,A6o,y6o,L6o,hu,Gie,x6o,$6o,Gq,k6o,S6o,R6o,pu,Oie,P6o,B6o,Oq,I6o,N6o,q6o,_u,Vie,j6o,D6o,Vq,G6o,O6o,V6o,uu,Xie,X6o,z6o,Xq,W6o,Q6o,H6o,bu,zie,U6o,J6o,zq,Y6o,K6o,Z6o,vu,Wie,eTo,oTo,Wq,rTo,tTo,aTo,Fu,Qie,nTo,sTo,Qq,lTo,iTo,dTo,Tu,Hie,cTo,fTo,Hq,mTo,gTo,hTo,Mu,Uie,pTo,_To,Uq,uTo,bTo,vTo,Eu,Jie,FTo,TTo,Jq,MTo,ETo,CTo,Cu,Yie,wTo,ATo,Yq,yTo,LTo,xTo,wu,Kie,$To,kTo,Kq,STo,RTo,PTo,Au,Zie,BTo,ITo,Zq,NTo,qTo,jTo,yu,ede,DTo,GTo,ej,OTo,VTo,XTo,Lu,ode,zTo,WTo,oj,QTo,HTo,UTo,xu,rde,JTo,YTo,rj,KTo,ZTo,eMo,$u,tde,oMo,rMo,tj,tMo,aMo,nMo,ku,ade,sMo,lMo,aj,iMo,dMo,cMo,Su,nde,fMo,mMo,nj,gMo,hMo,pMo,Ru,sde,_Mo,uMo,sj,bMo,vMo,FMo,Pu,lde,TMo,MMo,lj,EMo,CMo,wMo,Bu,ide,AMo,yMo,ij,LMo,xMo,$Mo,Iu,dde,kMo,SMo,dj,RMo,PMo,BMo,Nu,cde,IMo,NMo,cj,qMo,jMo,DMo,qu,fde,GMo,OMo,fj,VMo,XMo,zMo,ju,mde,WMo,QMo,mj,HMo,UMo,JMo,Du,gde,YMo,KMo,gj,ZMo,eEo,oEo,Gu,hde,rEo,tEo,hj,aEo,nEo,sEo,Ou,pde,lEo,iEo,pj,dEo,cEo,fEo,Vu,_de,mEo,gEo,_j,hEo,pEo,_Eo,Xu,ude,uEo,bEo,uj,vEo,FEo,TEo,zu,bde,MEo,EEo,bj,CEo,wEo,AEo,Wu,vde,yEo,LEo,vj,xEo,$Eo,kEo,Qu,SEo,Fde,REo,PEo,Tde,BEo,IEo,Hu,Eqe,ki,Uu,Mde,fL,NEo,Ede,qEo,Cqe,$o,mL,jEo,Si,DEo,Fj,GEo,OEo,Tj,VEo,XEo,zEo,gL,WEo,Cde,QEo,HEo,UEo,nt,hL,JEo,wde,YEo,KEo,Ri,ZEo,Ade,eCo,oCo,Mj,rCo,tCo,aCo,Ju,nCo,Ke,pL,sCo,yde,lCo,iCo,$a,dCo,Lde,cCo,fCo,xde,mCo,gCo,$de,hCo,pCo,_Co,z,Yu,kde,uCo,bCo,Ej,vCo,FCo,TCo,Ku,Sde,MCo,ECo,Cj,CCo,wCo,ACo,Zu,Rde,yCo,LCo,wj,xCo,$Co,kCo,e1,Pde,SCo,RCo,Aj,PCo,BCo,ICo,o1,Bde,NCo,qCo,yj,jCo,DCo,GCo,r1,Ide,OCo,VCo,Lj,XCo,zCo,WCo,t1,Nde,QCo,HCo,xj,UCo,JCo,YCo,a1,qde,KCo,ZCo,$j,ewo,owo,rwo,n1,jde,two,awo,kj,nwo,swo,lwo,s1,Dde,iwo,dwo,Sj,cwo,fwo,mwo,l1,Gde,gwo,hwo,Rj,pwo,_wo,uwo,i1,Ode,bwo,vwo,Pj,Fwo,Two,Mwo,d1,Vde,Ewo,Cwo,Bj,wwo,Awo,ywo,c1,Xde,Lwo,xwo,Ij,$wo,kwo,Swo,f1,zde,Rwo,Pwo,Nj,Bwo,Iwo,Nwo,m1,Wde,qwo,jwo,qj,Dwo,Gwo,Owo,g1,Qde,Vwo,Xwo,jj,zwo,Wwo,Qwo,h1,Hde,Hwo,Uwo,Dj,Jwo,Ywo,Kwo,p1,Ude,Zwo,e0o,Gj,o0o,r0o,t0o,_1,Jde,a0o,n0o,Oj,s0o,l0o,i0o,u1,Yde,d0o,c0o,Vj,f0o,m0o,g0o,b1,Kde,h0o,p0o,Xj,_0o,u0o,b0o,v1,Zde,v0o,F0o,zj,T0o,M0o,E0o,F1,ece,C0o,w0o,Wj,A0o,y0o,L0o,T1,oce,x0o,$0o,Qj,k0o,S0o,R0o,M1,rce,P0o,B0o,Hj,I0o,N0o,q0o,E1,tce,j0o,D0o,Uj,G0o,O0o,V0o,C1,ace,X0o,z0o,Jj,W0o,Q0o,H0o,w1,nce,U0o,J0o,Yj,Y0o,K0o,Z0o,A1,sce,eAo,oAo,Kj,rAo,tAo,aAo,y1,lce,nAo,sAo,Zj,lAo,iAo,dAo,L1,ice,cAo,fAo,eD,mAo,gAo,hAo,x1,dce,pAo,_Ao,oD,uAo,bAo,vAo,$1,cce,FAo,TAo,rD,MAo,EAo,CAo,k1,fce,wAo,AAo,tD,yAo,LAo,xAo,S1,mce,$Ao,kAo,aD,SAo,RAo,PAo,R1,gce,BAo,IAo,nD,NAo,qAo,jAo,P1,DAo,hce,GAo,OAo,pce,VAo,XAo,B1,wqe,Pi,I1,_ce,_L,zAo,uce,WAo,Aqe,ko,uL,QAo,Bi,HAo,sD,UAo,JAo,lD,YAo,KAo,ZAo,bL,eyo,bce,oyo,ryo,tyo,st,vL,ayo,vce,nyo,syo,Ii,lyo,Fce,iyo,dyo,iD,cyo,fyo,myo,N1,gyo,Ze,FL,hyo,Tce,pyo,_yo,ka,uyo,Mce,byo,vyo,Ece,Fyo,Tyo,Cce,Myo,Eyo,Cyo,Q,q1,wce,wyo,Ayo,dD,yyo,Lyo,xyo,j1,Ace,$yo,kyo,cD,Syo,Ryo,Pyo,D1,yce,Byo,Iyo,fD,Nyo,qyo,jyo,G1,Lce,Dyo,Gyo,mD,Oyo,Vyo,Xyo,O1,xce,zyo,Wyo,gD,Qyo,Hyo,Uyo,V1,$ce,Jyo,Yyo,hD,Kyo,Zyo,eLo,X1,kce,oLo,rLo,pD,tLo,aLo,nLo,z1,Sce,sLo,lLo,_D,iLo,dLo,cLo,W1,Rce,fLo,mLo,uD,gLo,hLo,pLo,Q1,Pce,_Lo,uLo,bD,bLo,vLo,FLo,H1,Bce,TLo,MLo,vD,ELo,CLo,wLo,U1,Ice,ALo,yLo,FD,LLo,xLo,$Lo,J1,Nce,kLo,SLo,TD,RLo,PLo,BLo,Y1,qce,ILo,NLo,MD,qLo,jLo,DLo,K1,jce,GLo,OLo,ED,VLo,XLo,zLo,Z1,Dce,WLo,QLo,CD,HLo,ULo,JLo,eb,Gce,YLo,KLo,wD,ZLo,e8o,o8o,ob,Oce,r8o,t8o,AD,a8o,n8o,s8o,rb,Vce,l8o,i8o,yD,d8o,c8o,f8o,tb,Xce,m8o,g8o,LD,h8o,p8o,_8o,ab,zce,u8o,b8o,xD,v8o,F8o,T8o,nb,Wce,M8o,E8o,$D,C8o,w8o,A8o,sb,Qce,y8o,L8o,kD,x8o,$8o,k8o,lb,Hce,S8o,R8o,SD,P8o,B8o,I8o,ib,Uce,N8o,q8o,RD,j8o,D8o,G8o,db,Jce,O8o,V8o,PD,X8o,z8o,W8o,cb,Yce,Q8o,H8o,BD,U8o,J8o,Y8o,fb,Kce,K8o,Z8o,ID,e7o,o7o,r7o,mb,Zce,t7o,a7o,ND,n7o,s7o,l7o,gb,efe,i7o,d7o,qD,c7o,f7o,m7o,hb,ofe,g7o,h7o,rfe,p7o,_7o,u7o,pb,tfe,b7o,v7o,jD,F7o,T7o,M7o,_b,afe,E7o,C7o,DD,w7o,A7o,y7o,ub,nfe,L7o,x7o,GD,$7o,k7o,S7o,bb,sfe,R7o,P7o,OD,B7o,I7o,N7o,vb,q7o,lfe,j7o,D7o,ife,G7o,O7o,Fb,yqe,Ni,Tb,dfe,TL,V7o,cfe,X7o,Lqe,So,ML,z7o,qi,W7o,VD,Q7o,H7o,XD,U7o,J7o,Y7o,EL,K7o,ffe,Z7o,e9o,o9o,lt,CL,r9o,mfe,t9o,a9o,ji,n9o,gfe,s9o,l9o,zD,i9o,d9o,c9o,Mb,f9o,eo,wL,m9o,hfe,g9o,h9o,Sa,p9o,pfe,_9o,u9o,_fe,b9o,v9o,ufe,F9o,T9o,M9o,_e,Eb,bfe,E9o,C9o,WD,w9o,A9o,y9o,Cb,vfe,L9o,x9o,QD,$9o,k9o,S9o,wb,Ffe,R9o,P9o,HD,B9o,I9o,N9o,Ab,Tfe,q9o,j9o,UD,D9o,G9o,O9o,yb,Mfe,V9o,X9o,JD,z9o,W9o,Q9o,Lb,Efe,H9o,U9o,YD,J9o,Y9o,K9o,xb,Cfe,Z9o,exo,KD,oxo,rxo,txo,$b,wfe,axo,nxo,ZD,sxo,lxo,ixo,kb,Afe,dxo,cxo,eG,fxo,mxo,gxo,Sb,yfe,hxo,pxo,oG,_xo,uxo,bxo,Rb,Lfe,vxo,Fxo,rG,Txo,Mxo,Exo,Pb,xfe,Cxo,wxo,tG,Axo,yxo,Lxo,Bb,$fe,xxo,$xo,aG,kxo,Sxo,Rxo,Ib,kfe,Pxo,Bxo,nG,Ixo,Nxo,qxo,Nb,Sfe,jxo,Dxo,sG,Gxo,Oxo,Vxo,qb,Rfe,Xxo,zxo,lG,Wxo,Qxo,Hxo,jb,Uxo,Pfe,Jxo,Yxo,Bfe,Kxo,Zxo,Db,xqe,Di,Gb,Ife,AL,e$o,Nfe,o$o,$qe,Ro,yL,r$o,Gi,t$o,iG,a$o,n$o,dG,s$o,l$o,i$o,LL,d$o,qfe,c$o,f$o,m$o,it,xL,g$o,jfe,h$o,p$o,Oi,_$o,Dfe,u$o,b$o,cG,v$o,F$o,T$o,Ob,M$o,oo,$L,E$o,Gfe,C$o,w$o,Ra,A$o,Ofe,y$o,L$o,Vfe,x$o,$$o,Xfe,k$o,S$o,R$o,N,Vb,zfe,P$o,B$o,fG,I$o,N$o,q$o,Xb,Wfe,j$o,D$o,mG,G$o,O$o,V$o,zb,Qfe,X$o,z$o,gG,W$o,Q$o,H$o,Wb,Hfe,U$o,J$o,hG,Y$o,K$o,Z$o,Qb,Ufe,eko,oko,pG,rko,tko,ako,Hb,Jfe,nko,sko,_G,lko,iko,dko,Ub,Yfe,cko,fko,uG,mko,gko,hko,Jb,Kfe,pko,_ko,bG,uko,bko,vko,Yb,Zfe,Fko,Tko,vG,Mko,Eko,Cko,Kb,eme,wko,Ako,FG,yko,Lko,xko,Zb,ome,$ko,kko,TG,Sko,Rko,Pko,e2,rme,Bko,Iko,MG,Nko,qko,jko,o2,tme,Dko,Gko,EG,Oko,Vko,Xko,r2,ame,zko,Wko,CG,Qko,Hko,Uko,t2,nme,Jko,Yko,wG,Kko,Zko,eSo,a2,sme,oSo,rSo,AG,tSo,aSo,nSo,n2,lme,sSo,lSo,yG,iSo,dSo,cSo,s2,ime,fSo,mSo,LG,gSo,hSo,pSo,l2,dme,_So,uSo,xG,bSo,vSo,FSo,i2,cme,TSo,MSo,$G,ESo,CSo,wSo,d2,fme,ASo,ySo,kG,LSo,xSo,$So,c2,mme,kSo,SSo,SG,RSo,PSo,BSo,f2,gme,ISo,NSo,RG,qSo,jSo,DSo,m2,hme,GSo,OSo,PG,VSo,XSo,zSo,g2,pme,WSo,QSo,BG,HSo,USo,JSo,h2,_me,YSo,KSo,IG,ZSo,eRo,oRo,p2,ume,rRo,tRo,NG,aRo,nRo,sRo,_2,bme,lRo,iRo,qG,dRo,cRo,fRo,u2,vme,mRo,gRo,jG,hRo,pRo,_Ro,b2,Fme,uRo,bRo,DG,vRo,FRo,TRo,v2,Tme,MRo,ERo,GG,CRo,wRo,ARo,F2,Mme,yRo,LRo,OG,xRo,$Ro,kRo,T2,Eme,SRo,RRo,VG,PRo,BRo,IRo,M2,Cme,NRo,qRo,XG,jRo,DRo,GRo,E2,wme,ORo,VRo,zG,XRo,zRo,WRo,C2,Ame,QRo,HRo,WG,URo,JRo,YRo,w2,yme,KRo,ZRo,QG,ePo,oPo,rPo,A2,Lme,tPo,aPo,HG,nPo,sPo,lPo,y2,xme,iPo,dPo,UG,cPo,fPo,mPo,L2,$me,gPo,hPo,JG,pPo,_Po,uPo,x2,kme,bPo,vPo,YG,FPo,TPo,MPo,$2,Sme,EPo,CPo,KG,wPo,APo,yPo,k2,Rme,LPo,xPo,ZG,$Po,kPo,SPo,S2,Pme,RPo,PPo,eO,BPo,IPo,NPo,R2,Bme,qPo,jPo,oO,DPo,GPo,OPo,P2,Ime,VPo,XPo,rO,zPo,WPo,QPo,B2,Nme,HPo,UPo,tO,JPo,YPo,KPo,I2,ZPo,qme,eBo,oBo,jme,rBo,tBo,N2,kqe,Vi,q2,Dme,kL,aBo,Gme,nBo,Sqe,Po,SL,sBo,Xi,lBo,aO,iBo,dBo,nO,cBo,fBo,mBo,RL,gBo,Ome,hBo,pBo,_Bo,dt,PL,uBo,Vme,bBo,vBo,zi,FBo,Xme,TBo,MBo,sO,EBo,CBo,wBo,j2,ABo,ro,BL,yBo,zme,LBo,xBo,Pa,$Bo,Wme,kBo,SBo,Qme,RBo,PBo,Hme,BBo,IBo,NBo,K,D2,Ume,qBo,jBo,lO,DBo,GBo,OBo,G2,Jme,VBo,XBo,iO,zBo,WBo,QBo,O2,Yme,HBo,UBo,dO,JBo,YBo,KBo,V2,Kme,ZBo,eIo,cO,oIo,rIo,tIo,X2,Zme,aIo,nIo,fO,sIo,lIo,iIo,z2,ege,dIo,cIo,mO,fIo,mIo,gIo,W2,oge,hIo,pIo,gO,_Io,uIo,bIo,Q2,rge,vIo,FIo,hO,TIo,MIo,EIo,H2,tge,CIo,wIo,pO,AIo,yIo,LIo,U2,age,xIo,$Io,_O,kIo,SIo,RIo,J2,nge,PIo,BIo,uO,IIo,NIo,qIo,Y2,sge,jIo,DIo,bO,GIo,OIo,VIo,K2,lge,XIo,zIo,vO,WIo,QIo,HIo,Z2,ige,UIo,JIo,FO,YIo,KIo,ZIo,e4,dge,eNo,oNo,TO,rNo,tNo,aNo,o4,cge,nNo,sNo,MO,lNo,iNo,dNo,r4,fge,cNo,fNo,EO,mNo,gNo,hNo,t4,mge,pNo,_No,CO,uNo,bNo,vNo,a4,gge,FNo,TNo,wO,MNo,ENo,CNo,n4,hge,wNo,ANo,AO,yNo,LNo,xNo,s4,pge,$No,kNo,yO,SNo,RNo,PNo,l4,_ge,BNo,INo,LO,NNo,qNo,jNo,i4,uge,DNo,GNo,xO,ONo,VNo,XNo,d4,bge,zNo,WNo,$O,QNo,HNo,UNo,c4,vge,JNo,YNo,kO,KNo,ZNo,eqo,f4,Fge,oqo,rqo,SO,tqo,aqo,nqo,m4,Tge,sqo,lqo,RO,iqo,dqo,cqo,g4,Mge,fqo,mqo,PO,gqo,hqo,pqo,h4,Ege,_qo,uqo,BO,bqo,vqo,Fqo,p4,Tqo,Cge,Mqo,Eqo,wge,Cqo,wqo,_4,Rqe,Wi,u4,Age,IL,Aqo,yge,yqo,Pqe,Bo,NL,Lqo,Qi,xqo,IO,$qo,kqo,NO,Sqo,Rqo,Pqo,qL,Bqo,Lge,Iqo,Nqo,qqo,ct,jL,jqo,xge,Dqo,Gqo,Hi,Oqo,$ge,Vqo,Xqo,qO,zqo,Wqo,Qqo,b4,Hqo,to,DL,Uqo,kge,Jqo,Yqo,Ba,Kqo,Sge,Zqo,ejo,Rge,ojo,rjo,Pge,tjo,ajo,njo,Yr,v4,Bge,sjo,ljo,jO,ijo,djo,cjo,F4,Ige,fjo,mjo,DO,gjo,hjo,pjo,T4,Nge,_jo,ujo,GO,bjo,vjo,Fjo,M4,qge,Tjo,Mjo,OO,Ejo,Cjo,wjo,E4,jge,Ajo,yjo,VO,Ljo,xjo,$jo,C4,kjo,Dge,Sjo,Rjo,Gge,Pjo,Bjo,w4,Bqe,Ui,A4,Oge,GL,Ijo,Vge,Njo,Iqe,Io,OL,qjo,Ji,jjo,XO,Djo,Gjo,zO,Ojo,Vjo,Xjo,VL,zjo,Xge,Wjo,Qjo,Hjo,ft,XL,Ujo,zge,Jjo,Yjo,Yi,Kjo,Wge,Zjo,eDo,WO,oDo,rDo,tDo,y4,aDo,ao,zL,nDo,Qge,sDo,lDo,Ia,iDo,Hge,dDo,cDo,Uge,fDo,mDo,Jge,gDo,hDo,pDo,H,L4,Yge,_Do,uDo,QO,bDo,vDo,FDo,x4,Kge,TDo,MDo,HO,EDo,CDo,wDo,$4,Zge,ADo,yDo,UO,LDo,xDo,$Do,k4,ehe,kDo,SDo,JO,RDo,PDo,BDo,S4,ohe,IDo,NDo,YO,qDo,jDo,DDo,R4,rhe,GDo,ODo,KO,VDo,XDo,zDo,P4,the,WDo,QDo,ZO,HDo,UDo,JDo,B4,ahe,YDo,KDo,eV,ZDo,eGo,oGo,I4,nhe,rGo,tGo,oV,aGo,nGo,sGo,N4,she,lGo,iGo,rV,dGo,cGo,fGo,q4,lhe,mGo,gGo,tV,hGo,pGo,_Go,j4,ihe,uGo,bGo,aV,vGo,FGo,TGo,D4,dhe,MGo,EGo,nV,CGo,wGo,AGo,G4,che,yGo,LGo,sV,xGo,$Go,kGo,O4,fhe,SGo,RGo,lV,PGo,BGo,IGo,V4,mhe,NGo,qGo,iV,jGo,DGo,GGo,X4,ghe,OGo,VGo,dV,XGo,zGo,WGo,z4,hhe,QGo,HGo,cV,UGo,JGo,YGo,W4,phe,KGo,ZGo,fV,eOo,oOo,rOo,Q4,_he,tOo,aOo,mV,nOo,sOo,lOo,H4,uhe,iOo,dOo,gV,cOo,fOo,mOo,U4,bhe,gOo,hOo,hV,pOo,_Oo,uOo,J4,vhe,bOo,vOo,pV,FOo,TOo,MOo,Y4,Fhe,EOo,COo,_V,wOo,AOo,yOo,K4,The,LOo,xOo,uV,$Oo,kOo,SOo,Z4,Mhe,ROo,POo,bV,BOo,IOo,NOo,e5,Ehe,qOo,jOo,vV,DOo,GOo,OOo,o5,Che,VOo,XOo,FV,zOo,WOo,QOo,r5,whe,HOo,UOo,TV,JOo,YOo,KOo,t5,Ahe,ZOo,eVo,MV,oVo,rVo,tVo,a5,yhe,aVo,nVo,EV,sVo,lVo,iVo,n5,Lhe,dVo,cVo,CV,fVo,mVo,gVo,s5,xhe,hVo,pVo,wV,_Vo,uVo,bVo,l5,$he,vVo,FVo,AV,TVo,MVo,EVo,i5,CVo,khe,wVo,AVo,She,yVo,LVo,d5,Nqe,Ki,c5,Rhe,WL,xVo,Phe,$Vo,qqe,No,QL,kVo,Zi,SVo,yV,RVo,PVo,LV,BVo,IVo,NVo,HL,qVo,Bhe,jVo,DVo,GVo,mt,UL,OVo,Ihe,VVo,XVo,ed,zVo,Nhe,WVo,QVo,xV,HVo,UVo,JVo,f5,YVo,no,JL,KVo,qhe,ZVo,eXo,Na,oXo,jhe,rXo,tXo,Dhe,aXo,nXo,Ghe,sXo,lXo,iXo,V,m5,Ohe,dXo,cXo,$V,fXo,mXo,gXo,g5,Vhe,hXo,pXo,kV,_Xo,uXo,bXo,h5,Xhe,vXo,FXo,SV,TXo,MXo,EXo,p5,zhe,CXo,wXo,RV,AXo,yXo,LXo,_5,Whe,xXo,$Xo,PV,kXo,SXo,RXo,u5,Qhe,PXo,BXo,BV,IXo,NXo,qXo,b5,Hhe,jXo,DXo,IV,GXo,OXo,VXo,v5,Uhe,XXo,zXo,NV,WXo,QXo,HXo,F5,Jhe,UXo,JXo,qV,YXo,KXo,ZXo,T5,Yhe,ezo,ozo,jV,rzo,tzo,azo,M5,Khe,nzo,szo,DV,lzo,izo,dzo,E5,Zhe,czo,fzo,GV,mzo,gzo,hzo,C5,epe,pzo,_zo,OV,uzo,bzo,vzo,w5,ope,Fzo,Tzo,VV,Mzo,Ezo,Czo,A5,rpe,wzo,Azo,XV,yzo,Lzo,xzo,y5,tpe,$zo,kzo,zV,Szo,Rzo,Pzo,L5,ape,Bzo,Izo,WV,Nzo,qzo,jzo,x5,npe,Dzo,Gzo,QV,Ozo,Vzo,Xzo,$5,spe,zzo,Wzo,HV,Qzo,Hzo,Uzo,k5,lpe,Jzo,Yzo,UV,Kzo,Zzo,eWo,S5,ipe,oWo,rWo,JV,tWo,aWo,nWo,R5,dpe,sWo,lWo,YV,iWo,dWo,cWo,P5,cpe,fWo,mWo,KV,gWo,hWo,pWo,B5,fpe,_Wo,uWo,ZV,bWo,vWo,FWo,I5,mpe,TWo,MWo,eX,EWo,CWo,wWo,N5,gpe,AWo,yWo,oX,LWo,xWo,$Wo,q5,hpe,kWo,SWo,rX,RWo,PWo,BWo,j5,ppe,IWo,NWo,tX,qWo,jWo,DWo,D5,_pe,GWo,OWo,aX,VWo,XWo,zWo,G5,upe,WWo,QWo,nX,HWo,UWo,JWo,O5,bpe,YWo,KWo,sX,ZWo,eQo,oQo,V5,vpe,rQo,tQo,lX,aQo,nQo,sQo,X5,Fpe,lQo,iQo,iX,dQo,cQo,fQo,z5,Tpe,mQo,gQo,dX,hQo,pQo,_Qo,W5,Mpe,uQo,bQo,cX,vQo,FQo,TQo,Q5,Epe,MQo,EQo,fX,CQo,wQo,AQo,H5,Cpe,yQo,LQo,mX,xQo,$Qo,kQo,U5,wpe,SQo,RQo,gX,PQo,BQo,IQo,J5,Ape,NQo,qQo,hX,jQo,DQo,GQo,Y5,ype,OQo,VQo,pX,XQo,zQo,WQo,K5,QQo,Lpe,HQo,UQo,xpe,JQo,YQo,Z5,jqe,od,ev,$pe,YL,KQo,kpe,ZQo,Dqe,qo,KL,eHo,rd,oHo,_X,rHo,tHo,uX,aHo,nHo,sHo,ZL,lHo,Spe,iHo,dHo,cHo,gt,e8,fHo,Rpe,mHo,gHo,td,hHo,Ppe,pHo,_Ho,bX,uHo,bHo,vHo,ov,FHo,so,o8,THo,Bpe,MHo,EHo,qa,CHo,Ipe,wHo,AHo,Npe,yHo,LHo,qpe,xHo,$Ho,kHo,jpe,rv,Dpe,SHo,RHo,vX,PHo,BHo,IHo,tv,NHo,Gpe,qHo,jHo,Ope,DHo,GHo,av,Gqe,ad,nv,Vpe,r8,OHo,Xpe,VHo,Oqe,jo,t8,XHo,nd,zHo,FX,WHo,QHo,TX,HHo,UHo,JHo,a8,YHo,zpe,KHo,ZHo,eUo,ht,n8,oUo,Wpe,rUo,tUo,sd,aUo,Qpe,nUo,sUo,MX,lUo,iUo,dUo,sv,cUo,lo,s8,fUo,Hpe,mUo,gUo,ja,hUo,Upe,pUo,_Uo,Jpe,uUo,bUo,Ype,vUo,FUo,TUo,Fe,lv,Kpe,MUo,EUo,EX,CUo,wUo,AUo,iv,Zpe,yUo,LUo,CX,xUo,$Uo,kUo,dv,e_e,SUo,RUo,wX,PUo,BUo,IUo,cv,o_e,NUo,qUo,AX,jUo,DUo,GUo,Bs,r_e,OUo,VUo,yX,XUo,zUo,LX,WUo,QUo,HUo,fv,t_e,UUo,JUo,xX,YUo,KUo,ZUo,pt,a_e,eJo,oJo,$X,rJo,tJo,kX,aJo,nJo,SX,sJo,lJo,iJo,mv,n_e,dJo,cJo,RX,fJo,mJo,gJo,gv,s_e,hJo,pJo,PX,_Jo,uJo,bJo,hv,l_e,vJo,FJo,BX,TJo,MJo,EJo,pv,i_e,CJo,wJo,IX,AJo,yJo,LJo,_v,d_e,xJo,$Jo,NX,kJo,SJo,RJo,uv,c_e,PJo,BJo,qX,IJo,NJo,qJo,bv,f_e,jJo,DJo,jX,GJo,OJo,VJo,vv,XJo,m_e,zJo,WJo,g_e,QJo,HJo,Fv,Vqe,ld,Tv,h_e,l8,UJo,p_e,JJo,Xqe,Do,i8,YJo,id,KJo,DX,ZJo,eYo,GX,oYo,rYo,tYo,d8,aYo,__e,nYo,sYo,lYo,_t,c8,iYo,u_e,dYo,cYo,dd,fYo,b_e,mYo,gYo,OX,hYo,pYo,_Yo,Mv,uYo,io,f8,bYo,v_e,vYo,FYo,Da,TYo,F_e,MYo,EYo,T_e,CYo,wYo,M_e,AYo,yYo,LYo,E_e,Ev,C_e,xYo,$Yo,VX,kYo,SYo,RYo,Cv,PYo,w_e,BYo,IYo,A_e,NYo,qYo,wv,zqe,cd,Av,y_e,m8,jYo,L_e,DYo,Wqe,Go,g8,GYo,fd,OYo,XX,VYo,XYo,zX,zYo,WYo,QYo,h8,HYo,x_e,UYo,JYo,YYo,ut,p8,KYo,$_e,ZYo,eKo,md,oKo,k_e,rKo,tKo,WX,aKo,nKo,sKo,yv,lKo,co,_8,iKo,S_e,dKo,cKo,Ga,fKo,R_e,mKo,gKo,P_e,hKo,pKo,B_e,_Ko,uKo,bKo,ke,Lv,I_e,vKo,FKo,QX,TKo,MKo,EKo,xv,N_e,CKo,wKo,HX,AKo,yKo,LKo,$v,q_e,xKo,$Ko,UX,kKo,SKo,RKo,kv,j_e,PKo,BKo,JX,IKo,NKo,qKo,Sv,D_e,jKo,DKo,YX,GKo,OKo,VKo,Rv,G_e,XKo,zKo,KX,WKo,QKo,HKo,Pv,O_e,UKo,JKo,ZX,YKo,KKo,ZKo,Bv,V_e,eZo,oZo,ez,rZo,tZo,aZo,Iv,X_e,nZo,sZo,oz,lZo,iZo,dZo,Nv,cZo,z_e,fZo,mZo,W_e,gZo,hZo,qv,Qqe,gd,jv,Q_e,u8,pZo,H_e,_Zo,Hqe,Oo,b8,uZo,hd,bZo,rz,vZo,FZo,tz,TZo,MZo,EZo,v8,CZo,U_e,wZo,AZo,yZo,bt,F8,LZo,J_e,xZo,$Zo,pd,kZo,Y_e,SZo,RZo,az,PZo,BZo,IZo,Dv,NZo,fo,T8,qZo,K_e,jZo,DZo,Oa,GZo,Z_e,OZo,VZo,eue,XZo,zZo,oue,WZo,QZo,HZo,Kr,Gv,rue,UZo,JZo,nz,YZo,KZo,ZZo,Ov,tue,eer,oer,sz,rer,ter,aer,Vv,aue,ner,ser,lz,ler,ier,der,Xv,nue,cer,fer,iz,mer,ger,her,zv,sue,per,_er,dz,uer,ber,ver,Wv,Fer,lue,Ter,Mer,iue,Eer,Cer,Qv,Uqe,_d,Hv,due,M8,wer,cue,Aer,Jqe,Vo,E8,yer,ud,Ler,cz,xer,$er,fz,ker,Ser,Rer,C8,Per,fue,Ber,Ier,Ner,vt,w8,qer,mue,jer,Der,bd,Ger,gue,Oer,Ver,mz,Xer,zer,Wer,Uv,Qer,mo,A8,Her,hue,Uer,Jer,Va,Yer,pue,Ker,Zer,_ue,eor,oor,uue,ror,tor,aor,Se,Jv,bue,nor,sor,gz,lor,ior,dor,Yv,vue,cor,mor,hz,gor,hor,por,Kv,Fue,_or,uor,pz,bor,vor,For,Zv,Tue,Tor,Mor,_z,Eor,Cor,wor,e3,Mue,Aor,yor,uz,Lor,xor,$or,o3,Eue,kor,Sor,bz,Ror,Por,Bor,r3,Cue,Ior,Nor,vz,qor,jor,Dor,t3,wue,Gor,Oor,Fz,Vor,Xor,zor,a3,Aue,Wor,Qor,Tz,Hor,Uor,Jor,n3,Yor,yue,Kor,Zor,Lue,err,orr,s3,Yqe,vd,l3,xue,y8,rrr,$ue,trr,Kqe,Xo,L8,arr,Fd,nrr,Mz,srr,lrr,Ez,irr,drr,crr,x8,frr,kue,mrr,grr,hrr,Ft,$8,prr,Sue,_rr,urr,Td,brr,Rue,vrr,Frr,Cz,Trr,Mrr,Err,i3,Crr,go,k8,wrr,Pue,Arr,yrr,Xa,Lrr,Bue,xrr,$rr,Iue,krr,Srr,Nue,Rrr,Prr,Brr,S8,d3,que,Irr,Nrr,wz,qrr,jrr,Drr,c3,jue,Grr,Orr,Az,Vrr,Xrr,zrr,f3,Wrr,Due,Qrr,Hrr,Gue,Urr,Jrr,m3,Zqe,Md,g3,Oue,R8,Yrr,Vue,Krr,eje,zo,P8,Zrr,Ed,etr,yz,otr,rtr,Lz,ttr,atr,ntr,B8,str,Xue,ltr,itr,dtr,Tt,I8,ctr,zue,ftr,mtr,Cd,gtr,Wue,htr,ptr,xz,_tr,utr,btr,h3,vtr,ho,N8,Ftr,Que,Ttr,Mtr,za,Etr,Hue,Ctr,wtr,Uue,Atr,ytr,Jue,Ltr,xtr,$tr,Zr,p3,Yue,ktr,Str,$z,Rtr,Ptr,Btr,_3,Kue,Itr,Ntr,kz,qtr,jtr,Dtr,u3,Zue,Gtr,Otr,Sz,Vtr,Xtr,ztr,b3,e1e,Wtr,Qtr,Rz,Htr,Utr,Jtr,v3,o1e,Ytr,Ktr,Pz,Ztr,ear,oar,F3,rar,r1e,tar,aar,t1e,nar,sar,T3,oje,wd,M3,a1e,q8,lar,n1e,iar,rje,Wo,j8,dar,Ad,car,Bz,far,mar,Iz,gar,har,par,D8,_ar,s1e,uar,bar,Far,Mt,G8,Tar,l1e,Mar,Ear,yd,Car,i1e,war,Aar,Nz,yar,Lar,xar,E3,$ar,po,O8,kar,d1e,Sar,Rar,Wa,Par,c1e,Bar,Iar,f1e,Nar,qar,m1e,jar,Dar,Gar,Ld,C3,g1e,Oar,Var,qz,Xar,zar,War,w3,h1e,Qar,Har,jz,Uar,Jar,Yar,A3,p1e,Kar,Zar,Dz,enr,onr,rnr,y3,tnr,_1e,anr,nnr,u1e,snr,lnr,L3,tje,xd,x3,b1e,V8,inr,v1e,dnr,aje,Qo,X8,cnr,$d,fnr,Gz,mnr,gnr,Oz,hnr,pnr,_nr,z8,unr,F1e,bnr,vnr,Fnr,Et,W8,Tnr,T1e,Mnr,Enr,kd,Cnr,M1e,wnr,Anr,Vz,ynr,Lnr,xnr,$3,$nr,_o,Q8,knr,E1e,Snr,Rnr,Qa,Pnr,C1e,Bnr,Inr,w1e,Nnr,qnr,A1e,jnr,Dnr,Gnr,H8,k3,y1e,Onr,Vnr,Xz,Xnr,znr,Wnr,S3,L1e,Qnr,Hnr,zz,Unr,Jnr,Ynr,R3,Knr,x1e,Znr,esr,$1e,osr,rsr,P3,nje,Sd,B3,k1e,U8,tsr,S1e,asr,sje,Ho,J8,nsr,Rd,ssr,Wz,lsr,isr,Qz,dsr,csr,fsr,Y8,msr,R1e,gsr,hsr,psr,Ct,K8,_sr,P1e,usr,bsr,Pd,vsr,B1e,Fsr,Tsr,Hz,Msr,Esr,Csr,I3,wsr,uo,Z8,Asr,I1e,ysr,Lsr,Ha,xsr,N1e,$sr,ksr,q1e,Ssr,Rsr,j1e,Psr,Bsr,Isr,D1e,N3,G1e,Nsr,qsr,Uz,jsr,Dsr,Gsr,q3,Osr,O1e,Vsr,Xsr,V1e,zsr,Wsr,j3,lje,Bd,D3,X1e,e7,Qsr,z1e,Hsr,ije,Uo,o7,Usr,Id,Jsr,Jz,Ysr,Ksr,Yz,Zsr,elr,olr,r7,rlr,W1e,tlr,alr,nlr,wt,t7,slr,Q1e,llr,ilr,Nd,dlr,H1e,clr,flr,Kz,mlr,glr,hlr,G3,plr,bo,a7,_lr,U1e,ulr,blr,Ua,vlr,J1e,Flr,Tlr,Y1e,Mlr,Elr,K1e,Clr,wlr,Alr,Ja,O3,Z1e,ylr,Llr,Zz,xlr,$lr,klr,V3,ebe,Slr,Rlr,eW,Plr,Blr,Ilr,X3,obe,Nlr,qlr,oW,jlr,Dlr,Glr,z3,rbe,Olr,Vlr,rW,Xlr,zlr,Wlr,W3,Qlr,tbe,Hlr,Ulr,abe,Jlr,Ylr,Q3,dje,qd,H3,nbe,n7,Klr,sbe,Zlr,cje,Jo,s7,eir,jd,oir,tW,rir,tir,aW,air,nir,sir,l7,lir,lbe,iir,dir,cir,At,i7,fir,ibe,mir,gir,Dd,hir,dbe,pir,_ir,nW,uir,bir,vir,U3,Fir,vo,d7,Tir,cbe,Mir,Eir,Ya,Cir,fbe,wir,Air,mbe,yir,Lir,gbe,xir,$ir,kir,hbe,J3,pbe,Sir,Rir,sW,Pir,Bir,Iir,Y3,Nir,_be,qir,jir,ube,Dir,Gir,K3,fje,Gd,Z3,bbe,c7,Oir,vbe,Vir,mje,Yo,f7,Xir,Od,zir,lW,Wir,Qir,iW,Hir,Uir,Jir,m7,Yir,Fbe,Kir,Zir,edr,yt,g7,odr,Tbe,rdr,tdr,Vd,adr,Mbe,ndr,sdr,dW,ldr,idr,ddr,eF,cdr,wr,h7,fdr,Ebe,mdr,gdr,Ka,hdr,Cbe,pdr,_dr,wbe,udr,bdr,Abe,vdr,Fdr,Tdr,q,oF,ybe,Mdr,Edr,cW,Cdr,wdr,Adr,rF,Lbe,ydr,Ldr,fW,xdr,$dr,kdr,tF,xbe,Sdr,Rdr,mW,Pdr,Bdr,Idr,aF,$be,Ndr,qdr,gW,jdr,Ddr,Gdr,nF,kbe,Odr,Vdr,hW,Xdr,zdr,Wdr,sF,Sbe,Qdr,Hdr,pW,Udr,Jdr,Ydr,lF,Rbe,Kdr,Zdr,_W,ecr,ocr,rcr,iF,Pbe,tcr,acr,uW,ncr,scr,lcr,dF,Bbe,icr,dcr,bW,ccr,fcr,mcr,cF,Ibe,gcr,hcr,vW,pcr,_cr,ucr,fF,Nbe,bcr,vcr,FW,Fcr,Tcr,Mcr,mF,qbe,Ecr,Ccr,TW,wcr,Acr,ycr,gF,jbe,Lcr,xcr,MW,$cr,kcr,Scr,hF,Dbe,Rcr,Pcr,EW,Bcr,Icr,Ncr,pF,Gbe,qcr,jcr,CW,Dcr,Gcr,Ocr,_F,Obe,Vcr,Xcr,wW,zcr,Wcr,Qcr,uF,Vbe,Hcr,Ucr,AW,Jcr,Ycr,Kcr,Is,Xbe,Zcr,efr,yW,ofr,rfr,LW,tfr,afr,nfr,bF,zbe,sfr,lfr,xW,ifr,dfr,cfr,vF,Wbe,ffr,mfr,$W,gfr,hfr,pfr,FF,Qbe,_fr,ufr,kW,bfr,vfr,Ffr,TF,Hbe,Tfr,Mfr,SW,Efr,Cfr,wfr,MF,Ube,Afr,yfr,RW,Lfr,xfr,$fr,EF,Jbe,kfr,Sfr,PW,Rfr,Pfr,Bfr,CF,Ybe,Ifr,Nfr,BW,qfr,jfr,Dfr,wF,Kbe,Gfr,Ofr,IW,Vfr,Xfr,zfr,AF,Zbe,Wfr,Qfr,NW,Hfr,Ufr,Jfr,yF,e2e,Yfr,Kfr,qW,Zfr,emr,omr,LF,o2e,rmr,tmr,jW,amr,nmr,smr,xF,r2e,lmr,imr,DW,dmr,cmr,fmr,$F,t2e,mmr,gmr,GW,hmr,pmr,_mr,kF,a2e,umr,bmr,OW,vmr,Fmr,Tmr,SF,n2e,Mmr,Emr,VW,Cmr,wmr,Amr,RF,s2e,ymr,Lmr,XW,xmr,$mr,kmr,PF,l2e,Smr,Rmr,zW,Pmr,Bmr,Imr,BF,i2e,Nmr,qmr,WW,jmr,Dmr,Gmr,IF,d2e,Omr,Vmr,QW,Xmr,zmr,Wmr,NF,c2e,Qmr,Hmr,HW,Umr,Jmr,Ymr,qF,f2e,Kmr,Zmr,UW,egr,ogr,rgr,jF,m2e,tgr,agr,JW,ngr,sgr,lgr,DF,g2e,igr,dgr,YW,cgr,fgr,mgr,GF,h2e,ggr,hgr,KW,pgr,_gr,ugr,OF,p2e,bgr,vgr,ZW,Fgr,Tgr,Mgr,VF,_2e,Egr,Cgr,eQ,wgr,Agr,ygr,XF,u2e,Lgr,xgr,oQ,$gr,kgr,Sgr,zF,b2e,Rgr,Pgr,rQ,Bgr,Igr,Ngr,WF,v2e,qgr,jgr,tQ,Dgr,Ggr,Ogr,QF,gje,Xd,HF,F2e,p7,Vgr,T2e,Xgr,hje,Ko,_7,zgr,zd,Wgr,aQ,Qgr,Hgr,nQ,Ugr,Jgr,Ygr,u7,Kgr,M2e,Zgr,ehr,ohr,Lt,b7,rhr,E2e,thr,ahr,Wd,nhr,C2e,shr,lhr,sQ,ihr,dhr,chr,UF,fhr,Ar,v7,mhr,w2e,ghr,hhr,Za,phr,A2e,_hr,uhr,y2e,bhr,vhr,L2e,Fhr,Thr,Mhr,se,JF,x2e,Ehr,Chr,lQ,whr,Ahr,yhr,YF,$2e,Lhr,xhr,iQ,$hr,khr,Shr,KF,k2e,Rhr,Phr,dQ,Bhr,Ihr,Nhr,ZF,S2e,qhr,jhr,cQ,Dhr,Ghr,Ohr,e6,R2e,Vhr,Xhr,fQ,zhr,Whr,Qhr,o6,P2e,Hhr,Uhr,mQ,Jhr,Yhr,Khr,r6,B2e,Zhr,epr,gQ,opr,rpr,tpr,t6,I2e,apr,npr,hQ,spr,lpr,ipr,a6,N2e,dpr,cpr,pQ,fpr,mpr,gpr,n6,q2e,hpr,ppr,_Q,_pr,upr,bpr,s6,j2e,vpr,Fpr,uQ,Tpr,Mpr,Epr,l6,D2e,Cpr,wpr,bQ,Apr,ypr,Lpr,i6,G2e,xpr,$pr,vQ,kpr,Spr,Rpr,d6,O2e,Ppr,Bpr,FQ,Ipr,Npr,qpr,c6,V2e,jpr,Dpr,TQ,Gpr,Opr,Vpr,f6,X2e,Xpr,zpr,MQ,Wpr,Qpr,Hpr,m6,z2e,Upr,Jpr,EQ,Ypr,Kpr,Zpr,g6,W2e,e_r,o_r,CQ,r_r,t_r,a_r,h6,Q2e,n_r,s_r,wQ,l_r,i_r,d_r,p6,H2e,c_r,f_r,AQ,m_r,g_r,h_r,_6,U2e,p_r,__r,yQ,u_r,b_r,v_r,u6,J2e,F_r,T_r,LQ,M_r,E_r,C_r,b6,Y2e,w_r,A_r,xQ,y_r,L_r,x_r,v6,pje,Qd,F6,K2e,F7,$_r,Z2e,k_r,_je,Zo,T7,S_r,Hd,R_r,$Q,P_r,B_r,kQ,I_r,N_r,q_r,M7,j_r,e4e,D_r,G_r,O_r,xt,E7,V_r,o4e,X_r,z_r,Ud,W_r,r4e,Q_r,H_r,SQ,U_r,J_r,Y_r,T6,K_r,yr,C7,Z_r,t4e,eur,our,en,rur,a4e,tur,aur,n4e,nur,sur,s4e,lur,iur,dur,Te,M6,l4e,cur,fur,RQ,mur,gur,hur,E6,i4e,pur,_ur,PQ,uur,bur,vur,C6,d4e,Fur,Tur,BQ,Mur,Eur,Cur,w6,c4e,wur,Aur,IQ,yur,Lur,xur,A6,f4e,$ur,kur,NQ,Sur,Rur,Pur,y6,m4e,Bur,Iur,qQ,Nur,qur,jur,L6,g4e,Dur,Gur,jQ,Our,Vur,Xur,x6,h4e,zur,Wur,DQ,Qur,Hur,Uur,$6,p4e,Jur,Yur,GQ,Kur,Zur,e1r,k6,_4e,o1r,r1r,OQ,t1r,a1r,n1r,S6,u4e,s1r,l1r,VQ,i1r,d1r,c1r,R6,b4e,f1r,m1r,XQ,g1r,h1r,p1r,P6,v4e,_1r,u1r,zQ,b1r,v1r,F1r,B6,uje,Jd,I6,F4e,w7,T1r,T4e,M1r,bje,er,A7,E1r,Yd,C1r,WQ,w1r,A1r,QQ,y1r,L1r,x1r,y7,$1r,M4e,k1r,S1r,R1r,$t,L7,P1r,E4e,B1r,I1r,Kd,N1r,C4e,q1r,j1r,HQ,D1r,G1r,O1r,N6,V1r,Lr,x7,X1r,w4e,z1r,W1r,on,Q1r,A4e,H1r,U1r,y4e,J1r,Y1r,L4e,K1r,Z1r,ebr,rn,q6,x4e,obr,rbr,UQ,tbr,abr,nbr,j6,$4e,sbr,lbr,JQ,ibr,dbr,cbr,D6,k4e,fbr,mbr,YQ,gbr,hbr,pbr,G6,S4e,_br,ubr,KQ,bbr,vbr,Fbr,O6,vje,Zd,V6,R4e,$7,Tbr,P4e,Mbr,Fje,or,k7,Ebr,ec,Cbr,ZQ,wbr,Abr,eH,ybr,Lbr,xbr,S7,$br,B4e,kbr,Sbr,Rbr,kt,R7,Pbr,I4e,Bbr,Ibr,oc,Nbr,N4e,qbr,jbr,oH,Dbr,Gbr,Obr,X6,Vbr,xr,P7,Xbr,q4e,zbr,Wbr,tn,Qbr,j4e,Hbr,Ubr,D4e,Jbr,Ybr,G4e,Kbr,Zbr,e2r,ie,z6,O4e,o2r,r2r,rH,t2r,a2r,n2r,W6,V4e,s2r,l2r,tH,i2r,d2r,c2r,Q6,X4e,f2r,m2r,aH,g2r,h2r,p2r,H6,z4e,_2r,u2r,nH,b2r,v2r,F2r,U6,W4e,T2r,M2r,sH,E2r,C2r,w2r,J6,Q4e,A2r,y2r,lH,L2r,x2r,$2r,Y6,H4e,k2r,S2r,iH,R2r,P2r,B2r,K6,U4e,I2r,N2r,dH,q2r,j2r,D2r,Z6,J4e,G2r,O2r,cH,V2r,X2r,z2r,eT,Y4e,W2r,Q2r,fH,H2r,U2r,J2r,oT,K4e,Y2r,K2r,mH,Z2r,e4r,o4r,rT,Z4e,r4r,t4r,gH,a4r,n4r,s4r,tT,e5e,l4r,i4r,hH,d4r,c4r,f4r,aT,o5e,m4r,g4r,pH,h4r,p4r,_4r,nT,r5e,u4r,b4r,_H,v4r,F4r,T4r,sT,t5e,M4r,E4r,uH,C4r,w4r,A4r,lT,a5e,y4r,L4r,bH,x4r,$4r,k4r,iT,n5e,S4r,R4r,vH,P4r,B4r,I4r,dT,s5e,N4r,q4r,FH,j4r,D4r,G4r,cT,l5e,O4r,V4r,TH,X4r,z4r,W4r,fT,Tje,rc,mT,i5e,B7,Q4r,d5e,H4r,Mje,rr,I7,U4r,tc,J4r,MH,Y4r,K4r,EH,Z4r,e5r,o5r,N7,r5r,c5e,t5r,a5r,n5r,St,q7,s5r,f5e,l5r,i5r,ac,d5r,m5e,c5r,f5r,CH,m5r,g5r,h5r,gT,p5r,$r,j7,_5r,g5e,u5r,b5r,an,v5r,h5e,F5r,T5r,p5e,M5r,E5r,_5e,C5r,w5r,A5r,ye,hT,u5e,y5r,L5r,wH,x5r,$5r,k5r,pT,b5e,S5r,R5r,AH,P5r,B5r,I5r,_T,v5e,N5r,q5r,yH,j5r,D5r,G5r,uT,F5e,O5r,V5r,LH,X5r,z5r,W5r,bT,T5e,Q5r,H5r,xH,U5r,J5r,Y5r,vT,M5e,K5r,Z5r,$H,evr,ovr,rvr,FT,E5e,tvr,avr,kH,nvr,svr,lvr,TT,C5e,ivr,dvr,SH,cvr,fvr,mvr,MT,w5e,gvr,hvr,RH,pvr,_vr,uvr,ET,A5e,bvr,vvr,PH,Fvr,Tvr,Mvr,CT,Eje,nc,wT,y5e,D7,Evr,L5e,Cvr,Cje,tr,G7,wvr,sc,Avr,BH,yvr,Lvr,IH,xvr,$vr,kvr,O7,Svr,x5e,Rvr,Pvr,Bvr,Rt,V7,Ivr,$5e,Nvr,qvr,lc,jvr,k5e,Dvr,Gvr,NH,Ovr,Vvr,Xvr,AT,zvr,kr,X7,Wvr,S5e,Qvr,Hvr,nn,Uvr,R5e,Jvr,Yvr,P5e,Kvr,Zvr,B5e,e3r,o3r,r3r,oe,yT,I5e,t3r,a3r,qH,n3r,s3r,l3r,LT,N5e,i3r,d3r,jH,c3r,f3r,m3r,xT,q5e,g3r,h3r,DH,p3r,_3r,u3r,$T,j5e,b3r,v3r,GH,F3r,T3r,M3r,kT,D5e,E3r,C3r,OH,w3r,A3r,y3r,ST,G5e,L3r,x3r,VH,$3r,k3r,S3r,RT,O5e,R3r,P3r,XH,B3r,I3r,N3r,PT,V5e,q3r,j3r,zH,D3r,G3r,O3r,BT,X5e,V3r,X3r,WH,z3r,W3r,Q3r,IT,z5e,H3r,U3r,QH,J3r,Y3r,K3r,NT,W5e,Z3r,eFr,HH,oFr,rFr,tFr,qT,Q5e,aFr,nFr,UH,sFr,lFr,iFr,jT,H5e,dFr,cFr,JH,fFr,mFr,gFr,DT,U5e,hFr,pFr,YH,_Fr,uFr,bFr,GT,J5e,vFr,FFr,KH,TFr,MFr,EFr,OT,Y5e,CFr,wFr,ZH,AFr,yFr,LFr,VT,K5e,xFr,$Fr,eU,kFr,SFr,RFr,XT,Z5e,PFr,BFr,oU,IFr,NFr,qFr,zT,eve,jFr,DFr,rU,GFr,OFr,VFr,WT,ove,XFr,zFr,tU,WFr,QFr,HFr,QT,rve,UFr,JFr,aU,YFr,KFr,ZFr,HT,tve,e6r,o6r,nU,r6r,t6r,a6r,UT,ave,n6r,s6r,sU,l6r,i6r,d6r,JT,nve,c6r,f6r,lU,m6r,g6r,h6r,YT,sve,p6r,_6r,iU,u6r,b6r,v6r,KT,lve,F6r,T6r,dU,M6r,E6r,C6r,ZT,wje,ic,eM,ive,z7,w6r,dve,A6r,Aje,ar,W7,y6r,dc,L6r,cU,x6r,$6r,fU,k6r,S6r,R6r,Q7,P6r,cve,B6r,I6r,N6r,Pt,H7,q6r,fve,j6r,D6r,cc,G6r,mve,O6r,V6r,mU,X6r,z6r,W6r,oM,Q6r,Sr,U7,H6r,gve,U6r,J6r,sn,Y6r,hve,K6r,Z6r,pve,eTr,oTr,_ve,rTr,tTr,aTr,pe,rM,uve,nTr,sTr,gU,lTr,iTr,dTr,tM,bve,cTr,fTr,hU,mTr,gTr,hTr,aM,vve,pTr,_Tr,pU,uTr,bTr,vTr,nM,Fve,FTr,TTr,_U,MTr,ETr,CTr,sM,Tve,wTr,ATr,uU,yTr,LTr,xTr,lM,Mve,$Tr,kTr,bU,STr,RTr,PTr,iM,Eve,BTr,ITr,vU,NTr,qTr,jTr,dM,Cve,DTr,GTr,FU,OTr,VTr,XTr,cM,wve,zTr,WTr,TU,QTr,HTr,UTr,fM,Ave,JTr,YTr,MU,KTr,ZTr,eMr,mM,yve,oMr,rMr,EU,tMr,aMr,nMr,gM,Lve,sMr,lMr,CU,iMr,dMr,cMr,hM,xve,fMr,mMr,wU,gMr,hMr,pMr,pM,$ve,_Mr,uMr,AU,bMr,vMr,FMr,_M,kve,TMr,MMr,yU,EMr,CMr,wMr,uM,Sve,AMr,yMr,LU,LMr,xMr,$Mr,bM,Rve,kMr,SMr,xU,RMr,PMr,BMr,vM,yje,fc,FM,Pve,J7,IMr,Bve,NMr,Lje,nr,Y7,qMr,mc,jMr,$U,DMr,GMr,kU,OMr,VMr,XMr,K7,zMr,Ive,WMr,QMr,HMr,Bt,Z7,UMr,Nve,JMr,YMr,gc,KMr,qve,ZMr,eEr,SU,oEr,rEr,tEr,TM,aEr,Rr,e9,nEr,jve,sEr,lEr,ln,iEr,Dve,dEr,cEr,Gve,fEr,mEr,Ove,gEr,hEr,pEr,o9,MM,Vve,_Er,uEr,RU,bEr,vEr,FEr,EM,Xve,TEr,MEr,PU,EEr,CEr,wEr,CM,xje,hc,wM,zve,r9,AEr,Wve,yEr,$je,sr,t9,LEr,pc,xEr,BU,$Er,kEr,IU,SEr,REr,PEr,a9,BEr,Qve,IEr,NEr,qEr,It,n9,jEr,Hve,DEr,GEr,_c,OEr,Uve,VEr,XEr,NU,zEr,WEr,QEr,AM,HEr,Pr,s9,UEr,Jve,JEr,YEr,dn,KEr,Yve,ZEr,eCr,Kve,oCr,rCr,Zve,tCr,aCr,nCr,e3e,yM,o3e,sCr,lCr,qU,iCr,dCr,cCr,LM,kje,uc,xM,r3e,l9,fCr,t3e,mCr,Sje,lr,i9,gCr,bc,hCr,jU,pCr,_Cr,DU,uCr,bCr,vCr,d9,FCr,a3e,TCr,MCr,ECr,Nt,c9,CCr,n3e,wCr,ACr,vc,yCr,s3e,LCr,xCr,GU,$Cr,kCr,SCr,$M,RCr,Br,f9,PCr,l3e,BCr,ICr,cn,NCr,i3e,qCr,jCr,d3e,DCr,GCr,c3e,OCr,VCr,XCr,de,kM,f3e,zCr,WCr,OU,QCr,HCr,UCr,SM,m3e,JCr,YCr,VU,KCr,ZCr,ewr,RM,g3e,owr,rwr,XU,twr,awr,nwr,PM,h3e,swr,lwr,zU,iwr,dwr,cwr,BM,p3e,fwr,mwr,WU,gwr,hwr,pwr,IM,_3e,_wr,uwr,QU,bwr,vwr,Fwr,NM,u3e,Twr,Mwr,HU,Ewr,Cwr,wwr,qM,b3e,Awr,ywr,UU,Lwr,xwr,$wr,jM,v3e,kwr,Swr,JU,Rwr,Pwr,Bwr,DM,F3e,Iwr,Nwr,YU,qwr,jwr,Dwr,GM,T3e,Gwr,Owr,KU,Vwr,Xwr,zwr,OM,M3e,Wwr,Qwr,ZU,Hwr,Uwr,Jwr,VM,E3e,Ywr,Kwr,eJ,Zwr,e0r,o0r,XM,C3e,r0r,t0r,oJ,a0r,n0r,s0r,zM,w3e,l0r,i0r,rJ,d0r,c0r,f0r,WM,A3e,m0r,g0r,tJ,h0r,p0r,_0r,QM,y3e,u0r,b0r,aJ,v0r,F0r,T0r,HM,L3e,M0r,E0r,nJ,C0r,w0r,A0r,UM,x3e,y0r,L0r,sJ,x0r,$0r,k0r,JM,$3e,S0r,R0r,lJ,P0r,B0r,I0r,YM,Rje,Fc,KM,k3e,m9,N0r,S3e,q0r,Pje,ir,g9,j0r,Tc,D0r,iJ,G0r,O0r,dJ,V0r,X0r,z0r,h9,W0r,R3e,Q0r,H0r,U0r,qt,p9,J0r,P3e,Y0r,K0r,Mc,Z0r,B3e,eAr,oAr,cJ,rAr,tAr,aAr,ZM,nAr,Ir,_9,sAr,I3e,lAr,iAr,fn,dAr,N3e,cAr,fAr,q3e,mAr,gAr,j3e,hAr,pAr,_Ar,ce,eE,D3e,uAr,bAr,fJ,vAr,FAr,TAr,oE,G3e,MAr,EAr,mJ,CAr,wAr,AAr,rE,O3e,yAr,LAr,gJ,xAr,$Ar,kAr,tE,V3e,SAr,RAr,hJ,PAr,BAr,IAr,aE,X3e,NAr,qAr,pJ,jAr,DAr,GAr,nE,z3e,OAr,VAr,_J,XAr,zAr,WAr,sE,W3e,QAr,HAr,uJ,UAr,JAr,YAr,lE,Q3e,KAr,ZAr,bJ,eyr,oyr,ryr,iE,H3e,tyr,ayr,vJ,nyr,syr,lyr,dE,U3e,iyr,dyr,FJ,cyr,fyr,myr,cE,J3e,gyr,hyr,TJ,pyr,_yr,uyr,fE,Y3e,byr,vyr,MJ,Fyr,Tyr,Myr,mE,K3e,Eyr,Cyr,EJ,wyr,Ayr,yyr,gE,Z3e,Lyr,xyr,CJ,$yr,kyr,Syr,hE,eFe,Ryr,Pyr,wJ,Byr,Iyr,Nyr,pE,oFe,qyr,jyr,AJ,Dyr,Gyr,Oyr,_E,rFe,Vyr,Xyr,yJ,zyr,Wyr,Qyr,uE,tFe,Hyr,Uyr,LJ,Jyr,Yyr,Kyr,bE,aFe,Zyr,eLr,xJ,oLr,rLr,tLr,vE,nFe,aLr,nLr,$J,sLr,lLr,iLr,FE,Bje,Ec,TE,sFe,u9,dLr,lFe,cLr,Ije,dr,b9,fLr,Cc,mLr,kJ,gLr,hLr,SJ,pLr,_Lr,uLr,v9,bLr,iFe,vLr,FLr,TLr,jt,F9,MLr,dFe,ELr,CLr,wc,wLr,cFe,ALr,yLr,RJ,LLr,xLr,$Lr,ME,kLr,Nr,T9,SLr,fFe,RLr,PLr,mn,BLr,mFe,ILr,NLr,gFe,qLr,jLr,hFe,DLr,GLr,OLr,pFe,EE,_Fe,VLr,XLr,PJ,zLr,WLr,QLr,CE,Nje,Ac,wE,uFe,M9,HLr,bFe,ULr,qje,cr,E9,JLr,yc,YLr,BJ,KLr,ZLr,IJ,e8r,o8r,r8r,C9,t8r,vFe,a8r,n8r,s8r,Dt,w9,l8r,FFe,i8r,d8r,Lc,c8r,TFe,f8r,m8r,NJ,g8r,h8r,p8r,AE,_8r,qr,A9,u8r,MFe,b8r,v8r,gn,F8r,EFe,T8r,M8r,CFe,E8r,C8r,wFe,w8r,A8r,y8r,AFe,yE,yFe,L8r,x8r,qJ,$8r,k8r,S8r,LE,jje,xc,xE,LFe,y9,R8r,xFe,P8r,Dje,fr,L9,B8r,$c,I8r,jJ,N8r,q8r,DJ,j8r,D8r,G8r,x9,O8r,$Fe,V8r,X8r,z8r,Gt,$9,W8r,kFe,Q8r,H8r,kc,U8r,SFe,J8r,Y8r,GJ,K8r,Z8r,e7r,$E,o7r,jr,k9,r7r,RFe,t7r,a7r,hn,n7r,PFe,s7r,l7r,BFe,i7r,d7r,IFe,c7r,f7r,m7r,te,kE,NFe,g7r,h7r,OJ,p7r,_7r,u7r,SE,qFe,b7r,v7r,VJ,F7r,T7r,M7r,RE,jFe,E7r,C7r,XJ,w7r,A7r,y7r,PE,DFe,L7r,x7r,zJ,$7r,k7r,S7r,BE,GFe,R7r,P7r,WJ,B7r,I7r,N7r,IE,OFe,q7r,j7r,QJ,D7r,G7r,O7r,NE,VFe,V7r,X7r,HJ,z7r,W7r,Q7r,qE,XFe,H7r,U7r,UJ,J7r,Y7r,K7r,jE,zFe,Z7r,e9r,JJ,o9r,r9r,t9r,DE,WFe,a9r,n9r,YJ,s9r,l9r,i9r,GE,QFe,d9r,c9r,KJ,f9r,m9r,g9r,OE,HFe,h9r,p9r,ZJ,_9r,u9r,b9r,VE,UFe,v9r,F9r,eY,T9r,M9r,E9r,XE,JFe,C9r,w9r,oY,A9r,y9r,L9r,zE,YFe,x9r,$9r,rY,k9r,S9r,R9r,WE,KFe,P9r,B9r,tY,I9r,N9r,q9r,QE,ZFe,j9r,D9r,aY,G9r,O9r,V9r,HE,e6e,X9r,z9r,nY,W9r,Q9r,H9r,UE,o6e,U9r,J9r,sY,Y9r,K9r,Z9r,JE,r6e,exr,oxr,lY,rxr,txr,axr,YE,t6e,nxr,sxr,iY,lxr,ixr,dxr,KE,a6e,cxr,fxr,dY,mxr,gxr,hxr,ZE,n6e,pxr,_xr,cY,uxr,bxr,vxr,eC,s6e,Fxr,Txr,fY,Mxr,Exr,Cxr,oC,l6e,wxr,Axr,mY,yxr,Lxr,xxr,rC,Gje,Sc,tC,i6e,S9,$xr,d6e,kxr,Oje,mr,R9,Sxr,Rc,Rxr,gY,Pxr,Bxr,hY,Ixr,Nxr,qxr,P9,jxr,c6e,Dxr,Gxr,Oxr,Ot,B9,Vxr,f6e,Xxr,zxr,Pc,Wxr,m6e,Qxr,Hxr,pY,Uxr,Jxr,Yxr,aC,Kxr,Dr,I9,Zxr,g6e,e$r,o$r,pn,r$r,h6e,t$r,a$r,p6e,n$r,s$r,_6e,l$r,i$r,d$r,Re,nC,u6e,c$r,f$r,_Y,m$r,g$r,h$r,sC,b6e,p$r,_$r,uY,u$r,b$r,v$r,lC,v6e,F$r,T$r,bY,M$r,E$r,C$r,iC,F6e,w$r,A$r,vY,y$r,L$r,x$r,dC,T6e,$$r,k$r,FY,S$r,R$r,P$r,cC,M6e,B$r,I$r,TY,N$r,q$r,j$r,fC,E6e,D$r,G$r,MY,O$r,V$r,X$r,mC,C6e,z$r,W$r,EY,Q$r,H$r,U$r,gC,w6e,J$r,Y$r,CY,K$r,Z$r,ekr,hC,Vje,Bc,pC,A6e,N9,okr,y6e,rkr,Xje,gr,q9,tkr,Ic,akr,wY,nkr,skr,AY,lkr,ikr,dkr,j9,ckr,L6e,fkr,mkr,gkr,Vt,D9,hkr,x6e,pkr,_kr,Nc,ukr,$6e,bkr,vkr,yY,Fkr,Tkr,Mkr,_C,Ekr,Gr,G9,Ckr,k6e,wkr,Akr,_n,ykr,S6e,Lkr,xkr,R6e,$kr,kkr,P6e,Skr,Rkr,Pkr,Ee,uC,B6e,Bkr,Ikr,LY,Nkr,qkr,jkr,bC,I6e,Dkr,Gkr,xY,Okr,Vkr,Xkr,vC,N6e,zkr,Wkr,$Y,Qkr,Hkr,Ukr,FC,q6e,Jkr,Ykr,kY,Kkr,Zkr,eSr,TC,j6e,oSr,rSr,SY,tSr,aSr,nSr,MC,D6e,sSr,lSr,RY,iSr,dSr,cSr,EC,G6e,fSr,mSr,PY,gSr,hSr,pSr,CC,O6e,_Sr,uSr,BY,bSr,vSr,FSr,wC,V6e,TSr,MSr,IY,ESr,CSr,wSr,AC,X6e,ASr,ySr,NY,LSr,xSr,$Sr,yC,z6e,kSr,SSr,qY,RSr,PSr,BSr,LC,W6e,ISr,NSr,jY,qSr,jSr,DSr,xC,zje,qc,$C,Q6e,O9,GSr,H6e,OSr,Wje,hr,V9,VSr,jc,XSr,DY,zSr,WSr,GY,QSr,HSr,USr,X9,JSr,U6e,YSr,KSr,ZSr,Xt,z9,eRr,J6e,oRr,rRr,Dc,tRr,Y6e,aRr,nRr,OY,sRr,lRr,iRr,kC,dRr,Or,W9,cRr,K6e,fRr,mRr,un,gRr,Z6e,hRr,pRr,eTe,_Rr,uRr,oTe,bRr,vRr,FRr,Le,SC,rTe,TRr,MRr,VY,ERr,CRr,wRr,RC,tTe,ARr,yRr,XY,LRr,xRr,$Rr,PC,aTe,kRr,SRr,zY,RRr,PRr,BRr,BC,nTe,IRr,NRr,WY,qRr,jRr,DRr,IC,sTe,GRr,ORr,QY,VRr,XRr,zRr,NC,lTe,WRr,QRr,HY,HRr,URr,JRr,qC,iTe,YRr,KRr,UY,ZRr,ePr,oPr,jC,dTe,rPr,tPr,JY,aPr,nPr,sPr,DC,cTe,lPr,iPr,YY,dPr,cPr,fPr,GC,fTe,mPr,gPr,KY,hPr,pPr,_Pr,OC,Qje,Gc,VC,mTe,Q9,uPr,gTe,bPr,Hje,pr,H9,vPr,Oc,FPr,ZY,TPr,MPr,eK,EPr,CPr,wPr,U9,APr,hTe,yPr,LPr,xPr,zt,J9,$Pr,pTe,kPr,SPr,Vc,RPr,_Te,PPr,BPr,oK,IPr,NPr,qPr,XC,jPr,Vr,Y9,DPr,uTe,GPr,OPr,bn,VPr,bTe,XPr,zPr,vTe,WPr,QPr,FTe,HPr,UPr,JPr,Pe,zC,TTe,YPr,KPr,rK,ZPr,eBr,oBr,WC,MTe,rBr,tBr,tK,aBr,nBr,sBr,QC,ETe,lBr,iBr,aK,dBr,cBr,fBr,HC,CTe,mBr,gBr,nK,hBr,pBr,_Br,UC,wTe,uBr,bBr,sK,vBr,FBr,TBr,JC,ATe,MBr,EBr,lK,CBr,wBr,ABr,YC,yTe,yBr,LBr,iK,xBr,$Br,kBr,KC,LTe,SBr,RBr,dK,PBr,BBr,IBr,ZC,xTe,NBr,qBr,cK,jBr,DBr,GBr,ew,Uje,Xc,ow,$Te,K9,OBr,kTe,VBr,Jje,_r,Z9,XBr,zc,zBr,fK,WBr,QBr,mK,HBr,UBr,JBr,ex,YBr,STe,KBr,ZBr,eIr,Wt,ox,oIr,RTe,rIr,tIr,Wc,aIr,PTe,nIr,sIr,gK,lIr,iIr,dIr,rw,cIr,Xr,rx,fIr,BTe,mIr,gIr,vn,hIr,ITe,pIr,_Ir,NTe,uIr,bIr,qTe,vIr,FIr,TIr,xe,tw,jTe,MIr,EIr,hK,CIr,wIr,AIr,aw,DTe,yIr,LIr,pK,xIr,$Ir,kIr,nw,GTe,SIr,RIr,_K,PIr,BIr,IIr,sw,OTe,NIr,qIr,uK,jIr,DIr,GIr,lw,VTe,OIr,VIr,bK,XIr,zIr,WIr,iw,XTe,QIr,HIr,vK,UIr,JIr,YIr,dw,zTe,KIr,ZIr,FK,eNr,oNr,rNr,cw,WTe,tNr,aNr,TK,nNr,sNr,lNr,fw,QTe,iNr,dNr,MK,cNr,fNr,mNr,mw,HTe,gNr,hNr,EK,pNr,_Nr,uNr,gw,Yje,Qc,hw,UTe,tx,bNr,JTe,vNr,Kje,ur,ax,FNr,Hc,TNr,CK,MNr,ENr,wK,CNr,wNr,ANr,nx,yNr,YTe,LNr,xNr,$Nr,Qt,sx,kNr,KTe,SNr,RNr,Uc,PNr,ZTe,BNr,INr,AK,NNr,qNr,jNr,pw,DNr,zr,lx,GNr,eMe,ONr,VNr,Fn,XNr,oMe,zNr,WNr,rMe,QNr,HNr,tMe,UNr,JNr,YNr,$e,_w,aMe,KNr,ZNr,yK,eqr,oqr,rqr,uw,nMe,tqr,aqr,LK,nqr,sqr,lqr,bw,sMe,iqr,dqr,xK,cqr,fqr,mqr,vw,lMe,gqr,hqr,$K,pqr,_qr,uqr,Fw,iMe,bqr,vqr,kK,Fqr,Tqr,Mqr,Tw,dMe,Eqr,Cqr,SK,wqr,Aqr,yqr,Mw,cMe,Lqr,xqr,RK,$qr,kqr,Sqr,Ew,fMe,Rqr,Pqr,PK,Bqr,Iqr,Nqr,Cw,mMe,qqr,jqr,BK,Dqr,Gqr,Oqr,ww,gMe,Vqr,Xqr,IK,zqr,Wqr,Qqr,Aw,Zje,Jc,yw,hMe,ix,Hqr,pMe,Uqr,eDe,br,dx,Jqr,Yc,Yqr,NK,Kqr,Zqr,qK,ejr,ojr,rjr,cx,tjr,_Me,ajr,njr,sjr,Ht,fx,ljr,uMe,ijr,djr,Kc,cjr,bMe,fjr,mjr,jK,gjr,hjr,pjr,Lw,_jr,Wr,mx,ujr,vMe,bjr,vjr,Tn,Fjr,FMe,Tjr,Mjr,TMe,Ejr,Cjr,MMe,wjr,Ajr,yjr,De,xw,EMe,Ljr,xjr,DK,$jr,kjr,Sjr,$w,CMe,Rjr,Pjr,GK,Bjr,Ijr,Njr,kw,wMe,qjr,jjr,OK,Djr,Gjr,Ojr,Sw,AMe,Vjr,Xjr,VK,zjr,Wjr,Qjr,Rw,yMe,Hjr,Ujr,XK,Jjr,Yjr,Kjr,Pw,LMe,Zjr,eDr,zK,oDr,rDr,tDr,Bw,xMe,aDr,nDr,WK,sDr,lDr,iDr,Iw,$Me,dDr,cDr,QK,fDr,mDr,gDr,Nw,oDe,Zc,qw,kMe,gx,hDr,SMe,pDr,rDe,vr,hx,_Dr,ef,uDr,HK,bDr,vDr,UK,FDr,TDr,MDr,px,EDr,RMe,CDr,wDr,ADr,Ut,_x,yDr,PMe,LDr,xDr,of,$Dr,BMe,kDr,SDr,JK,RDr,PDr,BDr,jw,IDr,Qr,ux,NDr,IMe,qDr,jDr,Mn,DDr,NMe,GDr,ODr,qMe,VDr,XDr,jMe,zDr,WDr,QDr,Ge,Dw,DMe,HDr,UDr,YK,JDr,YDr,KDr,Gw,GMe,ZDr,eGr,KK,oGr,rGr,tGr,Ow,OMe,aGr,nGr,ZK,sGr,lGr,iGr,Vw,VMe,dGr,cGr,eZ,fGr,mGr,gGr,Xw,XMe,hGr,pGr,oZ,_Gr,uGr,bGr,zw,zMe,vGr,FGr,rZ,TGr,MGr,EGr,Ww,WMe,CGr,wGr,tZ,AGr,yGr,LGr,Qw,QMe,xGr,$Gr,aZ,kGr,SGr,RGr,Hw,tDe,rf,Uw,HMe,bx,PGr,UMe,BGr,aDe,Fr,vx,IGr,tf,NGr,nZ,qGr,jGr,sZ,DGr,GGr,OGr,Fx,VGr,JMe,XGr,zGr,WGr,Jt,Tx,QGr,YMe,HGr,UGr,af,JGr,KMe,YGr,KGr,lZ,ZGr,eOr,oOr,Jw,rOr,Hr,Mx,tOr,ZMe,aOr,nOr,En,sOr,eEe,lOr,iOr,oEe,dOr,cOr,rEe,fOr,mOr,gOr,tEe,Yw,aEe,hOr,pOr,iZ,_Or,uOr,bOr,Kw,nDe,nf,Zw,nEe,Ex,vOr,sEe,FOr,sDe,Tr,Cx,TOr,sf,MOr,dZ,EOr,COr,cZ,wOr,AOr,yOr,wx,LOr,lEe,xOr,$Or,kOr,Yt,Ax,SOr,iEe,ROr,POr,lf,BOr,dEe,IOr,NOr,fZ,qOr,jOr,DOr,e0,GOr,Ur,yx,OOr,cEe,VOr,XOr,Cn,zOr,fEe,WOr,QOr,mEe,HOr,UOr,gEe,JOr,YOr,KOr,Lx,o0,hEe,ZOr,eVr,mZ,oVr,rVr,tVr,r0,pEe,aVr,nVr,gZ,sVr,lVr,iVr,t0,lDe,df,a0,_Ee,xx,dVr,uEe,cVr,iDe,Mr,$x,fVr,cf,mVr,hZ,gVr,hVr,pZ,pVr,_Vr,uVr,kx,bVr,bEe,vVr,FVr,TVr,Kt,Sx,MVr,vEe,EVr,CVr,ff,wVr,FEe,AVr,yVr,_Z,LVr,xVr,$Vr,n0,kVr,Jr,Rx,SVr,TEe,RVr,PVr,wn,BVr,MEe,IVr,NVr,EEe,qVr,jVr,CEe,DVr,GVr,OVr,wEe,s0,AEe,VVr,XVr,uZ,zVr,WVr,QVr,l0,dDe;return d=new re({}),Ca=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),xy=new re({}),$y=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Ff=new HVr({props:{warning:!0,$$slots:{default:[R$t]},$$scope:{ctx:L}}}),ky=new re({}),Sy=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/configuration_auto.py#L584"}}),By=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/configuration_auto.py#L607"}}),Eg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[P$t]},$$scope:{ctx:L}}}),Iy=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/configuration_auto.py#L730"}}),Ny=new re({}),qy=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/tokenization_auto.py#L390"}}),Gy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_16543/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/tokenization_auto.py#L404"}}),ah=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[B$t]},$$scope:{ctx:L}}}),Oy=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/tokenization_auto.py#L603"}}),Vy=new re({}),Xy=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/feature_extraction_auto.py#L190"}}),Qy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_16543/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/feature_extraction_auto.py#L204"}}),Ih=new HVr({props:{$$slots:{default:[I$t]},$$scope:{ctx:L}}}),Nh=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[N$t]},$$scope:{ctx:L}}}),Hy=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/feature_extraction_auto.py#L331"}}),Uy=new re({}),Jy=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/processing_auto.py#L88"}}),Zy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/processing_auto.py#L102"}}),tp=new HVr({props:{$$slots:{default:[q$t]},$$scope:{ctx:L}}}),ap=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[j$t]},$$scope:{ctx:L}}}),eL=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/processing_auto.py#L255"}}),oL=new re({}),rL=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L736"}}),aL=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),lp=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[D$t]},$$scope:{ctx:L}}}),nL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),ru=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[G$t]},$$scope:{ctx:L}}}),sL=new re({}),lL=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L743"}}),dL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),au=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[O$t]},$$scope:{ctx:L}}}),cL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),Hu=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[V$t]},$$scope:{ctx:L}}}),fL=new re({}),mL=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L758"}}),hL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),Ju=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[X$t]},$$scope:{ctx:L}}}),pL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),B1=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[z$t]},$$scope:{ctx:L}}}),_L=new re({}),uL=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L765"}}),vL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),N1=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[W$t]},$$scope:{ctx:L}}}),FL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),Fb=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Q$t]},$$scope:{ctx:L}}}),TL=new re({}),ML=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L772"}}),CL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),Mb=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[H$t]},$$scope:{ctx:L}}}),wL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),Db=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[U$t]},$$scope:{ctx:L}}}),AL=new re({}),yL=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L781"}}),xL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),Ob=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[J$t]},$$scope:{ctx:L}}}),$L=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),N2=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Y$t]},$$scope:{ctx:L}}}),kL=new re({}),SL=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L815"}}),PL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),j2=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[K$t]},$$scope:{ctx:L}}}),BL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),_4=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Z$t]},$$scope:{ctx:L}}}),IL=new re({}),NL=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L822"}}),jL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),b4=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[ekt]},$$scope:{ctx:L}}}),DL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),w4=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[okt]},$$scope:{ctx:L}}}),GL=new re({}),OL=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L808"}}),XL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),y4=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[rkt]},$$scope:{ctx:L}}}),zL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),d5=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[tkt]},$$scope:{ctx:L}}}),WL=new re({}),QL=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L790"}}),UL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),f5=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[akt]},$$scope:{ctx:L}}}),JL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),Z5=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[nkt]},$$scope:{ctx:L}}}),YL=new re({}),KL=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L797"}}),e8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),ov=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[skt]},$$scope:{ctx:L}}}),o8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),av=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[lkt]},$$scope:{ctx:L}}}),r8=new re({}),t8=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L831"}}),n8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),sv=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[ikt]},$$scope:{ctx:L}}}),s8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),Fv=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[dkt]},$$scope:{ctx:L}}}),l8=new re({}),i8=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L870"}}),c8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),Mv=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[ckt]},$$scope:{ctx:L}}}),f8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),wv=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[fkt]},$$scope:{ctx:L}}}),m8=new re({}),g8=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L877"}}),p8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),yv=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[mkt]},$$scope:{ctx:L}}}),_8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),qv=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[gkt]},$$scope:{ctx:L}}}),u8=new re({}),b8=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L900"}}),F8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),Dv=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[hkt]},$$scope:{ctx:L}}}),T8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),Qv=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[pkt]},$$scope:{ctx:L}}}),M8=new re({}),E8=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L884"}}),w8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),Uv=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[_kt]},$$scope:{ctx:L}}}),A8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),s3=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[ukt]},$$scope:{ctx:L}}}),y8=new re({}),L8=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L891"}}),$8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),i3=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[bkt]},$$scope:{ctx:L}}}),k8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),m3=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[vkt]},$$scope:{ctx:L}}}),R8=new re({}),P8=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L909"}}),I8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),h3=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[Fkt]},$$scope:{ctx:L}}}),N8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),T3=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[Tkt]},$$scope:{ctx:L}}}),q8=new re({}),j8=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L916"}}),G8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),E3=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[Mkt]},$$scope:{ctx:L}}}),O8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),L3=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[Ekt]},$$scope:{ctx:L}}}),V8=new re({}),X8=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L863"}}),W8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),$3=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[Ckt]},$$scope:{ctx:L}}}),Q8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),P3=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[wkt]},$$scope:{ctx:L}}}),U8=new re({}),J8=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L838"}}),K8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),I3=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[Akt]},$$scope:{ctx:L}}}),Z8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),j3=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[ykt]},$$scope:{ctx:L}}}),e7=new re({}),o7=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L845"}}),t7=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),G3=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[Lkt]},$$scope:{ctx:L}}}),a7=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),Q3=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[xkt]},$$scope:{ctx:L}}}),n7=new re({}),s7=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L854"}}),i7=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),U3=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[$kt]},$$scope:{ctx:L}}}),d7=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),K3=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[kkt]},$$scope:{ctx:L}}}),c7=new re({}),f7=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L396"}}),g7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.TFXGLMModel">TFXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),eF=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[Skt]},$$scope:{ctx:L}}}),h7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),QF=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[Rkt]},$$scope:{ctx:L}}}),p7=new re({}),_7=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L403"}}),b7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),UF=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[Pkt]},$$scope:{ctx:L}}}),v7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),v6=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Bkt]},$$scope:{ctx:L}}}),F7=new re({}),T7=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L418"}}),E7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.TFXGLMForCausalLM">TFXGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),T6=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[Ikt]},$$scope:{ctx:L}}}),C7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),B6=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Nkt]},$$scope:{ctx:L}}}),w7=new re({}),A7=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L434"}}),L7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),N6=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[qkt]},$$scope:{ctx:L}}}),x7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),O6=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[jkt]},$$scope:{ctx:L}}}),$7=new re({}),k7=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L450"}}),R7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),X6=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[Dkt]},$$scope:{ctx:L}}}),P7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),fT=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Gkt]},$$scope:{ctx:L}}}),B7=new re({}),I7=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L457"}}),q7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),gT=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Okt]},$$scope:{ctx:L}}}),j7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),CT=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Vkt]},$$scope:{ctx:L}}}),D7=new re({}),G7=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L466"}}),V7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),AT=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[Xkt]},$$scope:{ctx:L}}}),X7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),ZT=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[zkt]},$$scope:{ctx:L}}}),z7=new re({}),W7=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L502"}}),H7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),oM=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[Wkt]},$$scope:{ctx:L}}}),U7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),vM=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Qkt]},$$scope:{ctx:L}}}),J7=new re({}),Y7=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L509"}}),Z7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),TM=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Hkt]},$$scope:{ctx:L}}}),e9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),CM=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Ukt]},$$scope:{ctx:L}}}),r9=new re({}),t9=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L482"}}),n9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),AM=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[Jkt]},$$scope:{ctx:L}}}),s9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),LM=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[Ykt]},$$scope:{ctx:L}}}),l9=new re({}),i9=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L493"}}),c9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),$M=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[Kkt]},$$scope:{ctx:L}}}),f9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),YM=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Zkt]},$$scope:{ctx:L}}}),m9=new re({}),g9=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L475"}}),p9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),ZM=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[eSt]},$$scope:{ctx:L}}}),_9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),FE=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[oSt]},$$scope:{ctx:L}}}),u9=new re({}),b9=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L443"}}),F9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),ME=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[rSt]},$$scope:{ctx:L}}}),T9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),CE=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[tSt]},$$scope:{ctx:L}}}),M9=new re({}),E9=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L518"}}),w9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),AE=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[aSt]},$$scope:{ctx:L}}}),A9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),LE=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[nSt]},$$scope:{ctx:L}}}),y9=new re({}),L9=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_flax_auto.py#L241"}}),$9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),$E=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[sSt]},$$scope:{ctx:L}}}),k9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),rC=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[lSt]},$$scope:{ctx:L}}}),S9=new re({}),R9=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_flax_auto.py#L255"}}),B9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),aC=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[iSt]},$$scope:{ctx:L}}}),I9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),hC=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[dSt]},$$scope:{ctx:L}}}),N9=new re({}),q9=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_flax_auto.py#L248"}}),D9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),_C=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[cSt]},$$scope:{ctx:L}}}),G9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),xC=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[fSt]},$$scope:{ctx:L}}}),O9=new re({}),V9=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_flax_auto.py#L262"}}),z9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),kC=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[mSt]},$$scope:{ctx:L}}}),W9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),OC=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[gSt]},$$scope:{ctx:L}}}),Q9=new re({}),H9=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_flax_auto.py#L269"}}),J9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),XC=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[hSt]},$$scope:{ctx:L}}}),Y9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),ew=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[pSt]},$$scope:{ctx:L}}}),K9=new re({}),Z9=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_flax_auto.py#L278"}}),ox=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),rw=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[_St]},$$scope:{ctx:L}}}),rx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),gw=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[uSt]},$$scope:{ctx:L}}}),tx=new re({}),ax=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_flax_auto.py#L287"}}),sx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),pw=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[bSt]},$$scope:{ctx:L}}}),lx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),Aw=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[vSt]},$$scope:{ctx:L}}}),ix=new re({}),dx=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_flax_auto.py#L294"}}),fx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),Lw=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[FSt]},$$scope:{ctx:L}}}),mx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),Nw=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[TSt]},$$scope:{ctx:L}}}),gx=new re({}),hx=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_flax_auto.py#L303"}}),_x=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),jw=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[MSt]},$$scope:{ctx:L}}}),ux=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),Hw=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[ESt]},$$scope:{ctx:L}}}),bx=new re({}),vx=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_flax_auto.py#L310"}}),Tx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),Jw=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[CSt]},$$scope:{ctx:L}}}),Mx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),Kw=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[wSt]},$$scope:{ctx:L}}}),Ex=new re({}),Cx=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_flax_auto.py#L319"}}),Ax=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),e0=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[ASt]},$$scope:{ctx:L}}}),yx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),t0=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[ySt]},$$scope:{ctx:L}}}),xx=new re({}),$x=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_flax_auto.py#L328"}}),Sx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),n0=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[LSt]},$$scope:{ctx:L}}}),Rx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),l0=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[xSt]},$$scope:{ctx:L}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),fi=o("Auto Classes"),pf=l(),rt=a("p"),mi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),gi=a("code"),wy=o("from_pretrained()"),_f=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),je=l(),We=a("p"),hi=o("Instantiating one of "),yn=a("a"),Ay=o("AutoConfig"),Ln=o(", "),xn=a("a"),yy=o("AutoModel"),pi=o(`, and
`),$n=a("a"),Ly=o("AutoTokenizer"),_i=o(" will directly create a class of the relevant architecture. For instance"),uf=l(),F(Ca.$$.fragment),Qe=l(),Ae=a("p"),Q$=o("will create a model that is an instance of "),ui=a("a"),H$=o("BertModel"),U$=o("."),Eo=l(),wa=a("p"),J$=o("There is one class of "),bf=a("code"),Y$=o("AutoModel"),uOe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),sqe=l(),bi=a("h2"),vf=a("a"),coe=a("span"),F(xy.$$.fragment),bOe=l(),foe=a("span"),vOe=o("Extending the Auto Classes"),lqe=l(),kn=a("p"),FOe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),moe=a("code"),TOe=o("NewModel"),MOe=o(", make sure you have a "),goe=a("code"),EOe=o("NewModelConfig"),COe=o(` then you can add those to the auto
classes like this:`),iqe=l(),F($y.$$.fragment),dqe=l(),K$=a("p"),wOe=o("You will then be able to use the auto classes like you would usually do!"),cqe=l(),F(Ff.$$.fragment),fqe=l(),vi=a("h2"),Tf=a("a"),hoe=a("span"),F(ky.$$.fragment),AOe=l(),poe=a("span"),yOe=o("AutoConfig"),mqe=l(),Co=a("div"),F(Sy.$$.fragment),LOe=l(),Ry=a("p"),xOe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),Z$=a("a"),$Oe=o("from_pretrained()"),kOe=o(" class method."),SOe=l(),Py=a("p"),ROe=o("This class cannot be instantiated directly using "),_oe=a("code"),POe=o("__init__()"),BOe=o(" (throws an error)."),IOe=l(),Er=a("div"),F(By.$$.fragment),NOe=l(),uoe=a("p"),qOe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),jOe=l(),Fi=a("p"),DOe=o("The configuration class to instantiate is selected based on the "),boe=a("code"),GOe=o("model_type"),OOe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),voe=a("code"),VOe=o("pretrained_model_name_or_path"),XOe=o(":"),zOe=l(),A=a("ul"),Mf=a("li"),Foe=a("strong"),WOe=o("albert"),QOe=o(" \u2014 "),ek=a("a"),HOe=o("AlbertConfig"),UOe=o(" (ALBERT model)"),JOe=l(),Ef=a("li"),Toe=a("strong"),YOe=o("bart"),KOe=o(" \u2014 "),ok=a("a"),ZOe=o("BartConfig"),eVe=o(" (BART model)"),oVe=l(),Cf=a("li"),Moe=a("strong"),rVe=o("beit"),tVe=o(" \u2014 "),rk=a("a"),aVe=o("BeitConfig"),nVe=o(" (BEiT model)"),sVe=l(),wf=a("li"),Eoe=a("strong"),lVe=o("bert"),iVe=o(" \u2014 "),tk=a("a"),dVe=o("BertConfig"),cVe=o(" (BERT model)"),fVe=l(),Af=a("li"),Coe=a("strong"),mVe=o("bert-generation"),gVe=o(" \u2014 "),ak=a("a"),hVe=o("BertGenerationConfig"),pVe=o(" (Bert Generation model)"),_Ve=l(),yf=a("li"),woe=a("strong"),uVe=o("big_bird"),bVe=o(" \u2014 "),nk=a("a"),vVe=o("BigBirdConfig"),FVe=o(" (BigBird model)"),TVe=l(),Lf=a("li"),Aoe=a("strong"),MVe=o("bigbird_pegasus"),EVe=o(" \u2014 "),sk=a("a"),CVe=o("BigBirdPegasusConfig"),wVe=o(" (BigBirdPegasus model)"),AVe=l(),xf=a("li"),yoe=a("strong"),yVe=o("blenderbot"),LVe=o(" \u2014 "),lk=a("a"),xVe=o("BlenderbotConfig"),$Ve=o(" (Blenderbot model)"),kVe=l(),$f=a("li"),Loe=a("strong"),SVe=o("blenderbot-small"),RVe=o(" \u2014 "),ik=a("a"),PVe=o("BlenderbotSmallConfig"),BVe=o(" (BlenderbotSmall model)"),IVe=l(),kf=a("li"),xoe=a("strong"),NVe=o("camembert"),qVe=o(" \u2014 "),dk=a("a"),jVe=o("CamembertConfig"),DVe=o(" (CamemBERT model)"),GVe=l(),Sf=a("li"),$oe=a("strong"),OVe=o("canine"),VVe=o(" \u2014 "),ck=a("a"),XVe=o("CanineConfig"),zVe=o(" (Canine model)"),WVe=l(),Rf=a("li"),koe=a("strong"),QVe=o("clip"),HVe=o(" \u2014 "),fk=a("a"),UVe=o("CLIPConfig"),JVe=o(" (CLIP model)"),YVe=l(),Pf=a("li"),Soe=a("strong"),KVe=o("convbert"),ZVe=o(" \u2014 "),mk=a("a"),eXe=o("ConvBertConfig"),oXe=o(" (ConvBERT model)"),rXe=l(),Bf=a("li"),Roe=a("strong"),tXe=o("convnext"),aXe=o(" \u2014 "),gk=a("a"),nXe=o("ConvNextConfig"),sXe=o(" (ConvNext model)"),lXe=l(),If=a("li"),Poe=a("strong"),iXe=o("ctrl"),dXe=o(" \u2014 "),hk=a("a"),cXe=o("CTRLConfig"),fXe=o(" (CTRL model)"),mXe=l(),Nf=a("li"),Boe=a("strong"),gXe=o("cvt"),hXe=o(" \u2014 "),pk=a("a"),pXe=o("CvtConfig"),_Xe=o(" (CvT model)"),uXe=l(),qf=a("li"),Ioe=a("strong"),bXe=o("data2vec-audio"),vXe=o(" \u2014 "),_k=a("a"),FXe=o("Data2VecAudioConfig"),TXe=o(" (Data2VecAudio model)"),MXe=l(),jf=a("li"),Noe=a("strong"),EXe=o("data2vec-text"),CXe=o(" \u2014 "),uk=a("a"),wXe=o("Data2VecTextConfig"),AXe=o(" (Data2VecText model)"),yXe=l(),Df=a("li"),qoe=a("strong"),LXe=o("data2vec-vision"),xXe=o(" \u2014 "),bk=a("a"),$Xe=o("Data2VecVisionConfig"),kXe=o(" (Data2VecVision model)"),SXe=l(),Gf=a("li"),joe=a("strong"),RXe=o("deberta"),PXe=o(" \u2014 "),vk=a("a"),BXe=o("DebertaConfig"),IXe=o(" (DeBERTa model)"),NXe=l(),Of=a("li"),Doe=a("strong"),qXe=o("deberta-v2"),jXe=o(" \u2014 "),Fk=a("a"),DXe=o("DebertaV2Config"),GXe=o(" (DeBERTa-v2 model)"),OXe=l(),Vf=a("li"),Goe=a("strong"),VXe=o("decision_transformer"),XXe=o(" \u2014 "),Tk=a("a"),zXe=o("DecisionTransformerConfig"),WXe=o(" (Decision Transformer model)"),QXe=l(),Xf=a("li"),Ooe=a("strong"),HXe=o("deit"),UXe=o(" \u2014 "),Mk=a("a"),JXe=o("DeiTConfig"),YXe=o(" (DeiT model)"),KXe=l(),zf=a("li"),Voe=a("strong"),ZXe=o("detr"),eze=o(" \u2014 "),Ek=a("a"),oze=o("DetrConfig"),rze=o(" (DETR model)"),tze=l(),Wf=a("li"),Xoe=a("strong"),aze=o("distilbert"),nze=o(" \u2014 "),Ck=a("a"),sze=o("DistilBertConfig"),lze=o(" (DistilBERT model)"),ize=l(),Qf=a("li"),zoe=a("strong"),dze=o("dpr"),cze=o(" \u2014 "),wk=a("a"),fze=o("DPRConfig"),mze=o(" (DPR model)"),gze=l(),Hf=a("li"),Woe=a("strong"),hze=o("dpt"),pze=o(" \u2014 "),Ak=a("a"),_ze=o("DPTConfig"),uze=o(" (DPT model)"),bze=l(),Uf=a("li"),Qoe=a("strong"),vze=o("electra"),Fze=o(" \u2014 "),yk=a("a"),Tze=o("ElectraConfig"),Mze=o(" (ELECTRA model)"),Eze=l(),Jf=a("li"),Hoe=a("strong"),Cze=o("encoder-decoder"),wze=o(" \u2014 "),Lk=a("a"),Aze=o("EncoderDecoderConfig"),yze=o(" (Encoder decoder model)"),Lze=l(),Yf=a("li"),Uoe=a("strong"),xze=o("flaubert"),$ze=o(" \u2014 "),xk=a("a"),kze=o("FlaubertConfig"),Sze=o(" (FlauBERT model)"),Rze=l(),Kf=a("li"),Joe=a("strong"),Pze=o("flava"),Bze=o(" \u2014 "),$k=a("a"),Ize=o("FlavaConfig"),Nze=o(" (Flava model)"),qze=l(),Zf=a("li"),Yoe=a("strong"),jze=o("fnet"),Dze=o(" \u2014 "),kk=a("a"),Gze=o("FNetConfig"),Oze=o(" (FNet model)"),Vze=l(),em=a("li"),Koe=a("strong"),Xze=o("fsmt"),zze=o(" \u2014 "),Sk=a("a"),Wze=o("FSMTConfig"),Qze=o(" (FairSeq Machine-Translation model)"),Hze=l(),om=a("li"),Zoe=a("strong"),Uze=o("funnel"),Jze=o(" \u2014 "),Rk=a("a"),Yze=o("FunnelConfig"),Kze=o(" (Funnel Transformer model)"),Zze=l(),rm=a("li"),ere=a("strong"),eWe=o("glpn"),oWe=o(" \u2014 "),Pk=a("a"),rWe=o("GLPNConfig"),tWe=o(" (GLPN model)"),aWe=l(),tm=a("li"),ore=a("strong"),nWe=o("gpt2"),sWe=o(" \u2014 "),Bk=a("a"),lWe=o("GPT2Config"),iWe=o(" (OpenAI GPT-2 model)"),dWe=l(),am=a("li"),rre=a("strong"),cWe=o("gpt_neo"),fWe=o(" \u2014 "),Ik=a("a"),mWe=o("GPTNeoConfig"),gWe=o(" (GPT Neo model)"),hWe=l(),nm=a("li"),tre=a("strong"),pWe=o("gpt_neox"),_We=o(" \u2014 "),Nk=a("a"),uWe=o("GPTNeoXConfig"),bWe=o(" (GPT NeoX model)"),vWe=l(),sm=a("li"),are=a("strong"),FWe=o("gptj"),TWe=o(" \u2014 "),qk=a("a"),MWe=o("GPTJConfig"),EWe=o(" (GPT-J model)"),CWe=l(),lm=a("li"),nre=a("strong"),wWe=o("hubert"),AWe=o(" \u2014 "),jk=a("a"),yWe=o("HubertConfig"),LWe=o(" (Hubert model)"),xWe=l(),im=a("li"),sre=a("strong"),$We=o("ibert"),kWe=o(" \u2014 "),Dk=a("a"),SWe=o("IBertConfig"),RWe=o(" (I-BERT model)"),PWe=l(),dm=a("li"),lre=a("strong"),BWe=o("imagegpt"),IWe=o(" \u2014 "),Gk=a("a"),NWe=o("ImageGPTConfig"),qWe=o(" (ImageGPT model)"),jWe=l(),cm=a("li"),ire=a("strong"),DWe=o("layoutlm"),GWe=o(" \u2014 "),Ok=a("a"),OWe=o("LayoutLMConfig"),VWe=o(" (LayoutLM model)"),XWe=l(),fm=a("li"),dre=a("strong"),zWe=o("layoutlmv2"),WWe=o(" \u2014 "),Vk=a("a"),QWe=o("LayoutLMv2Config"),HWe=o(" (LayoutLMv2 model)"),UWe=l(),mm=a("li"),cre=a("strong"),JWe=o("layoutlmv3"),YWe=o(" \u2014 "),Xk=a("a"),KWe=o("LayoutLMv3Config"),ZWe=o(" (LayoutLMv3 model)"),eQe=l(),gm=a("li"),fre=a("strong"),oQe=o("led"),rQe=o(" \u2014 "),zk=a("a"),tQe=o("LEDConfig"),aQe=o(" (LED model)"),nQe=l(),hm=a("li"),mre=a("strong"),sQe=o("longformer"),lQe=o(" \u2014 "),Wk=a("a"),iQe=o("LongformerConfig"),dQe=o(" (Longformer model)"),cQe=l(),pm=a("li"),gre=a("strong"),fQe=o("luke"),mQe=o(" \u2014 "),Qk=a("a"),gQe=o("LukeConfig"),hQe=o(" (LUKE model)"),pQe=l(),_m=a("li"),hre=a("strong"),_Qe=o("lxmert"),uQe=o(" \u2014 "),Hk=a("a"),bQe=o("LxmertConfig"),vQe=o(" (LXMERT model)"),FQe=l(),um=a("li"),pre=a("strong"),TQe=o("m2m_100"),MQe=o(" \u2014 "),Uk=a("a"),EQe=o("M2M100Config"),CQe=o(" (M2M100 model)"),wQe=l(),bm=a("li"),_re=a("strong"),AQe=o("marian"),yQe=o(" \u2014 "),Jk=a("a"),LQe=o("MarianConfig"),xQe=o(" (Marian model)"),$Qe=l(),vm=a("li"),ure=a("strong"),kQe=o("maskformer"),SQe=o(" \u2014 "),Yk=a("a"),RQe=o("MaskFormerConfig"),PQe=o(" (MaskFormer model)"),BQe=l(),Fm=a("li"),bre=a("strong"),IQe=o("mbart"),NQe=o(" \u2014 "),Kk=a("a"),qQe=o("MBartConfig"),jQe=o(" (mBART model)"),DQe=l(),Tm=a("li"),vre=a("strong"),GQe=o("megatron-bert"),OQe=o(" \u2014 "),Zk=a("a"),VQe=o("MegatronBertConfig"),XQe=o(" (MegatronBert model)"),zQe=l(),Mm=a("li"),Fre=a("strong"),WQe=o("mobilebert"),QQe=o(" \u2014 "),eS=a("a"),HQe=o("MobileBertConfig"),UQe=o(" (MobileBERT model)"),JQe=l(),Em=a("li"),Tre=a("strong"),YQe=o("mpnet"),KQe=o(" \u2014 "),oS=a("a"),ZQe=o("MPNetConfig"),eHe=o(" (MPNet model)"),oHe=l(),Cm=a("li"),Mre=a("strong"),rHe=o("mt5"),tHe=o(" \u2014 "),rS=a("a"),aHe=o("MT5Config"),nHe=o(" (mT5 model)"),sHe=l(),wm=a("li"),Ere=a("strong"),lHe=o("nystromformer"),iHe=o(" \u2014 "),tS=a("a"),dHe=o("NystromformerConfig"),cHe=o(" (Nystromformer model)"),fHe=l(),Am=a("li"),Cre=a("strong"),mHe=o("openai-gpt"),gHe=o(" \u2014 "),aS=a("a"),hHe=o("OpenAIGPTConfig"),pHe=o(" (OpenAI GPT model)"),_He=l(),ym=a("li"),wre=a("strong"),uHe=o("opt"),bHe=o(" \u2014 "),nS=a("a"),vHe=o("OPTConfig"),FHe=o(" (OPT model)"),THe=l(),Lm=a("li"),Are=a("strong"),MHe=o("pegasus"),EHe=o(" \u2014 "),sS=a("a"),CHe=o("PegasusConfig"),wHe=o(" (Pegasus model)"),AHe=l(),xm=a("li"),yre=a("strong"),yHe=o("perceiver"),LHe=o(" \u2014 "),lS=a("a"),xHe=o("PerceiverConfig"),$He=o(" (Perceiver model)"),kHe=l(),$m=a("li"),Lre=a("strong"),SHe=o("plbart"),RHe=o(" \u2014 "),iS=a("a"),PHe=o("PLBartConfig"),BHe=o(" (PLBart model)"),IHe=l(),km=a("li"),xre=a("strong"),NHe=o("poolformer"),qHe=o(" \u2014 "),dS=a("a"),jHe=o("PoolFormerConfig"),DHe=o(" (PoolFormer model)"),GHe=l(),Sm=a("li"),$re=a("strong"),OHe=o("prophetnet"),VHe=o(" \u2014 "),cS=a("a"),XHe=o("ProphetNetConfig"),zHe=o(" (ProphetNet model)"),WHe=l(),Rm=a("li"),kre=a("strong"),QHe=o("qdqbert"),HHe=o(" \u2014 "),fS=a("a"),UHe=o("QDQBertConfig"),JHe=o(" (QDQBert model)"),YHe=l(),Pm=a("li"),Sre=a("strong"),KHe=o("rag"),ZHe=o(" \u2014 "),mS=a("a"),eUe=o("RagConfig"),oUe=o(" (RAG model)"),rUe=l(),Bm=a("li"),Rre=a("strong"),tUe=o("realm"),aUe=o(" \u2014 "),gS=a("a"),nUe=o("RealmConfig"),sUe=o(" (Realm model)"),lUe=l(),Im=a("li"),Pre=a("strong"),iUe=o("reformer"),dUe=o(" \u2014 "),hS=a("a"),cUe=o("ReformerConfig"),fUe=o(" (Reformer model)"),mUe=l(),Nm=a("li"),Bre=a("strong"),gUe=o("regnet"),hUe=o(" \u2014 "),pS=a("a"),pUe=o("RegNetConfig"),_Ue=o(" (RegNet model)"),uUe=l(),qm=a("li"),Ire=a("strong"),bUe=o("rembert"),vUe=o(" \u2014 "),_S=a("a"),FUe=o("RemBertConfig"),TUe=o(" (RemBERT model)"),MUe=l(),jm=a("li"),Nre=a("strong"),EUe=o("resnet"),CUe=o(" \u2014 "),uS=a("a"),wUe=o("ResNetConfig"),AUe=o(" (ResNet model)"),yUe=l(),Dm=a("li"),qre=a("strong"),LUe=o("retribert"),xUe=o(" \u2014 "),bS=a("a"),$Ue=o("RetriBertConfig"),kUe=o(" (RetriBERT model)"),SUe=l(),Gm=a("li"),jre=a("strong"),RUe=o("roberta"),PUe=o(" \u2014 "),vS=a("a"),BUe=o("RobertaConfig"),IUe=o(" (RoBERTa model)"),NUe=l(),Om=a("li"),Dre=a("strong"),qUe=o("roformer"),jUe=o(" \u2014 "),FS=a("a"),DUe=o("RoFormerConfig"),GUe=o(" (RoFormer model)"),OUe=l(),Vm=a("li"),Gre=a("strong"),VUe=o("segformer"),XUe=o(" \u2014 "),TS=a("a"),zUe=o("SegformerConfig"),WUe=o(" (SegFormer model)"),QUe=l(),Xm=a("li"),Ore=a("strong"),HUe=o("sew"),UUe=o(" \u2014 "),MS=a("a"),JUe=o("SEWConfig"),YUe=o(" (SEW model)"),KUe=l(),zm=a("li"),Vre=a("strong"),ZUe=o("sew-d"),eJe=o(" \u2014 "),ES=a("a"),oJe=o("SEWDConfig"),rJe=o(" (SEW-D model)"),tJe=l(),Wm=a("li"),Xre=a("strong"),aJe=o("speech-encoder-decoder"),nJe=o(" \u2014 "),CS=a("a"),sJe=o("SpeechEncoderDecoderConfig"),lJe=o(" (Speech Encoder decoder model)"),iJe=l(),Qm=a("li"),zre=a("strong"),dJe=o("speech_to_text"),cJe=o(" \u2014 "),wS=a("a"),fJe=o("Speech2TextConfig"),mJe=o(" (Speech2Text model)"),gJe=l(),Hm=a("li"),Wre=a("strong"),hJe=o("speech_to_text_2"),pJe=o(" \u2014 "),AS=a("a"),_Je=o("Speech2Text2Config"),uJe=o(" (Speech2Text2 model)"),bJe=l(),Um=a("li"),Qre=a("strong"),vJe=o("splinter"),FJe=o(" \u2014 "),yS=a("a"),TJe=o("SplinterConfig"),MJe=o(" (Splinter model)"),EJe=l(),Jm=a("li"),Hre=a("strong"),CJe=o("squeezebert"),wJe=o(" \u2014 "),LS=a("a"),AJe=o("SqueezeBertConfig"),yJe=o(" (SqueezeBERT model)"),LJe=l(),Ym=a("li"),Ure=a("strong"),xJe=o("swin"),$Je=o(" \u2014 "),xS=a("a"),kJe=o("SwinConfig"),SJe=o(" (Swin model)"),RJe=l(),Km=a("li"),Jre=a("strong"),PJe=o("t5"),BJe=o(" \u2014 "),$S=a("a"),IJe=o("T5Config"),NJe=o(" (T5 model)"),qJe=l(),Zm=a("li"),Yre=a("strong"),jJe=o("tapas"),DJe=o(" \u2014 "),kS=a("a"),GJe=o("TapasConfig"),OJe=o(" (TAPAS model)"),VJe=l(),eg=a("li"),Kre=a("strong"),XJe=o("trajectory_transformer"),zJe=o(" \u2014 "),SS=a("a"),WJe=o("TrajectoryTransformerConfig"),QJe=o(" (Trajectory Transformer model)"),HJe=l(),og=a("li"),Zre=a("strong"),UJe=o("transfo-xl"),JJe=o(" \u2014 "),RS=a("a"),YJe=o("TransfoXLConfig"),KJe=o(" (Transformer-XL model)"),ZJe=l(),rg=a("li"),ete=a("strong"),eYe=o("trocr"),oYe=o(" \u2014 "),PS=a("a"),rYe=o("TrOCRConfig"),tYe=o(" (TrOCR model)"),aYe=l(),tg=a("li"),ote=a("strong"),nYe=o("unispeech"),sYe=o(" \u2014 "),BS=a("a"),lYe=o("UniSpeechConfig"),iYe=o(" (UniSpeech model)"),dYe=l(),ag=a("li"),rte=a("strong"),cYe=o("unispeech-sat"),fYe=o(" \u2014 "),IS=a("a"),mYe=o("UniSpeechSatConfig"),gYe=o(" (UniSpeechSat model)"),hYe=l(),ng=a("li"),tte=a("strong"),pYe=o("van"),_Ye=o(" \u2014 "),NS=a("a"),uYe=o("VanConfig"),bYe=o(" (VAN model)"),vYe=l(),sg=a("li"),ate=a("strong"),FYe=o("vilt"),TYe=o(" \u2014 "),qS=a("a"),MYe=o("ViltConfig"),EYe=o(" (ViLT model)"),CYe=l(),lg=a("li"),nte=a("strong"),wYe=o("vision-encoder-decoder"),AYe=o(" \u2014 "),jS=a("a"),yYe=o("VisionEncoderDecoderConfig"),LYe=o(" (Vision Encoder decoder model)"),xYe=l(),ig=a("li"),ste=a("strong"),$Ye=o("vision-text-dual-encoder"),kYe=o(" \u2014 "),DS=a("a"),SYe=o("VisionTextDualEncoderConfig"),RYe=o(" (VisionTextDualEncoder model)"),PYe=l(),dg=a("li"),lte=a("strong"),BYe=o("visual_bert"),IYe=o(" \u2014 "),GS=a("a"),NYe=o("VisualBertConfig"),qYe=o(" (VisualBert model)"),jYe=l(),cg=a("li"),ite=a("strong"),DYe=o("vit"),GYe=o(" \u2014 "),OS=a("a"),OYe=o("ViTConfig"),VYe=o(" (ViT model)"),XYe=l(),fg=a("li"),dte=a("strong"),zYe=o("vit_mae"),WYe=o(" \u2014 "),VS=a("a"),QYe=o("ViTMAEConfig"),HYe=o(" (ViTMAE model)"),UYe=l(),mg=a("li"),cte=a("strong"),JYe=o("wav2vec2"),YYe=o(" \u2014 "),XS=a("a"),KYe=o("Wav2Vec2Config"),ZYe=o(" (Wav2Vec2 model)"),eKe=l(),gg=a("li"),fte=a("strong"),oKe=o("wav2vec2-conformer"),rKe=o(" \u2014 "),zS=a("a"),tKe=o("Wav2Vec2ConformerConfig"),aKe=o(" (Wav2Vec2-Conformer model)"),nKe=l(),hg=a("li"),mte=a("strong"),sKe=o("wavlm"),lKe=o(" \u2014 "),WS=a("a"),iKe=o("WavLMConfig"),dKe=o(" (WavLM model)"),cKe=l(),pg=a("li"),gte=a("strong"),fKe=o("xglm"),mKe=o(" \u2014 "),QS=a("a"),gKe=o("XGLMConfig"),hKe=o(" (XGLM model)"),pKe=l(),_g=a("li"),hte=a("strong"),_Ke=o("xlm"),uKe=o(" \u2014 "),HS=a("a"),bKe=o("XLMConfig"),vKe=o(" (XLM model)"),FKe=l(),ug=a("li"),pte=a("strong"),TKe=o("xlm-prophetnet"),MKe=o(" \u2014 "),US=a("a"),EKe=o("XLMProphetNetConfig"),CKe=o(" (XLMProphetNet model)"),wKe=l(),bg=a("li"),_te=a("strong"),AKe=o("xlm-roberta"),yKe=o(" \u2014 "),JS=a("a"),LKe=o("XLMRobertaConfig"),xKe=o(" (XLM-RoBERTa model)"),$Ke=l(),vg=a("li"),ute=a("strong"),kKe=o("xlm-roberta-xl"),SKe=o(" \u2014 "),YS=a("a"),RKe=o("XLMRobertaXLConfig"),PKe=o(" (XLM-RoBERTa-XL model)"),BKe=l(),Fg=a("li"),bte=a("strong"),IKe=o("xlnet"),NKe=o(" \u2014 "),KS=a("a"),qKe=o("XLNetConfig"),jKe=o(" (XLNet model)"),DKe=l(),Tg=a("li"),vte=a("strong"),GKe=o("yolos"),OKe=o(" \u2014 "),ZS=a("a"),VKe=o("YolosConfig"),XKe=o(" (YOLOS model)"),zKe=l(),Mg=a("li"),Fte=a("strong"),WKe=o("yoso"),QKe=o(" \u2014 "),eR=a("a"),HKe=o("YosoConfig"),UKe=o(" (YOSO model)"),JKe=l(),F(Eg.$$.fragment),YKe=l(),Cg=a("div"),F(Iy.$$.fragment),KKe=l(),Tte=a("p"),ZKe=o("Register a new configuration for this class."),gqe=l(),Ti=a("h2"),wg=a("a"),Mte=a("span"),F(Ny.$$.fragment),eZe=l(),Ete=a("span"),oZe=o("AutoTokenizer"),hqe=l(),wo=a("div"),F(qy.$$.fragment),rZe=l(),jy=a("p"),tZe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),oR=a("a"),aZe=o("AutoTokenizer.from_pretrained()"),nZe=o(" class method."),sZe=l(),Dy=a("p"),lZe=o("This class cannot be instantiated directly using "),Cte=a("code"),iZe=o("__init__()"),dZe=o(" (throws an error)."),cZe=l(),Cr=a("div"),F(Gy.$$.fragment),fZe=l(),wte=a("p"),mZe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),gZe=l(),Aa=a("p"),hZe=o("The tokenizer class to instantiate is selected based on the "),Ate=a("code"),pZe=o("model_type"),_Ze=o(` property of the config object (either
passed as an argument or loaded from `),yte=a("code"),uZe=o("pretrained_model_name_or_path"),bZe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lte=a("code"),vZe=o("pretrained_model_name_or_path"),FZe=o(":"),TZe=l(),k=a("ul"),Sn=a("li"),xte=a("strong"),MZe=o("albert"),EZe=o(" \u2014 "),rR=a("a"),CZe=o("AlbertTokenizer"),wZe=o(" or "),tR=a("a"),AZe=o("AlbertTokenizerFast"),yZe=o(" (ALBERT model)"),LZe=l(),Rn=a("li"),$te=a("strong"),xZe=o("bart"),$Ze=o(" \u2014 "),aR=a("a"),kZe=o("BartTokenizer"),SZe=o(" or "),nR=a("a"),RZe=o("BartTokenizerFast"),PZe=o(" (BART model)"),BZe=l(),Pn=a("li"),kte=a("strong"),IZe=o("barthez"),NZe=o(" \u2014 "),sR=a("a"),qZe=o("BarthezTokenizer"),jZe=o(" or "),lR=a("a"),DZe=o("BarthezTokenizerFast"),GZe=o(" (BARThez model)"),OZe=l(),Ag=a("li"),Ste=a("strong"),VZe=o("bartpho"),XZe=o(" \u2014 "),iR=a("a"),zZe=o("BartphoTokenizer"),WZe=o(" (BARTpho model)"),QZe=l(),Bn=a("li"),Rte=a("strong"),HZe=o("bert"),UZe=o(" \u2014 "),dR=a("a"),JZe=o("BertTokenizer"),YZe=o(" or "),cR=a("a"),KZe=o("BertTokenizerFast"),ZZe=o(" (BERT model)"),eeo=l(),yg=a("li"),Pte=a("strong"),oeo=o("bert-generation"),reo=o(" \u2014 "),fR=a("a"),teo=o("BertGenerationTokenizer"),aeo=o(" (Bert Generation model)"),neo=l(),Lg=a("li"),Bte=a("strong"),seo=o("bert-japanese"),leo=o(" \u2014 "),mR=a("a"),ieo=o("BertJapaneseTokenizer"),deo=o(" (BertJapanese model)"),ceo=l(),xg=a("li"),Ite=a("strong"),feo=o("bertweet"),meo=o(" \u2014 "),gR=a("a"),geo=o("BertweetTokenizer"),heo=o(" (Bertweet model)"),peo=l(),In=a("li"),Nte=a("strong"),_eo=o("big_bird"),ueo=o(" \u2014 "),hR=a("a"),beo=o("BigBirdTokenizer"),veo=o(" or "),pR=a("a"),Feo=o("BigBirdTokenizerFast"),Teo=o(" (BigBird model)"),Meo=l(),Nn=a("li"),qte=a("strong"),Eeo=o("bigbird_pegasus"),Ceo=o(" \u2014 "),_R=a("a"),weo=o("PegasusTokenizer"),Aeo=o(" or "),uR=a("a"),yeo=o("PegasusTokenizerFast"),Leo=o(" (BigBirdPegasus model)"),xeo=l(),qn=a("li"),jte=a("strong"),$eo=o("blenderbot"),keo=o(" \u2014 "),bR=a("a"),Seo=o("BlenderbotTokenizer"),Reo=o(" or "),vR=a("a"),Peo=o("BlenderbotTokenizerFast"),Beo=o(" (Blenderbot model)"),Ieo=l(),$g=a("li"),Dte=a("strong"),Neo=o("blenderbot-small"),qeo=o(" \u2014 "),FR=a("a"),jeo=o("BlenderbotSmallTokenizer"),Deo=o(" (BlenderbotSmall model)"),Geo=l(),kg=a("li"),Gte=a("strong"),Oeo=o("byt5"),Veo=o(" \u2014 "),TR=a("a"),Xeo=o("ByT5Tokenizer"),zeo=o(" (ByT5 model)"),Weo=l(),jn=a("li"),Ote=a("strong"),Qeo=o("camembert"),Heo=o(" \u2014 "),MR=a("a"),Ueo=o("CamembertTokenizer"),Jeo=o(" or "),ER=a("a"),Yeo=o("CamembertTokenizerFast"),Keo=o(" (CamemBERT model)"),Zeo=l(),Sg=a("li"),Vte=a("strong"),eoo=o("canine"),ooo=o(" \u2014 "),CR=a("a"),roo=o("CanineTokenizer"),too=o(" (Canine model)"),aoo=l(),Dn=a("li"),Xte=a("strong"),noo=o("clip"),soo=o(" \u2014 "),wR=a("a"),loo=o("CLIPTokenizer"),ioo=o(" or "),AR=a("a"),doo=o("CLIPTokenizerFast"),coo=o(" (CLIP model)"),foo=l(),Gn=a("li"),zte=a("strong"),moo=o("convbert"),goo=o(" \u2014 "),yR=a("a"),hoo=o("ConvBertTokenizer"),poo=o(" or "),LR=a("a"),_oo=o("ConvBertTokenizerFast"),uoo=o(" (ConvBERT model)"),boo=l(),On=a("li"),Wte=a("strong"),voo=o("cpm"),Foo=o(" \u2014 "),xR=a("a"),Too=o("CpmTokenizer"),Moo=o(" or "),$R=a("a"),Eoo=o("CpmTokenizerFast"),Coo=o(" (CPM model)"),woo=l(),Rg=a("li"),Qte=a("strong"),Aoo=o("ctrl"),yoo=o(" \u2014 "),kR=a("a"),Loo=o("CTRLTokenizer"),xoo=o(" (CTRL model)"),$oo=l(),Vn=a("li"),Hte=a("strong"),koo=o("data2vec-text"),Soo=o(" \u2014 "),SR=a("a"),Roo=o("RobertaTokenizer"),Poo=o(" or "),RR=a("a"),Boo=o("RobertaTokenizerFast"),Ioo=o(" (Data2VecText model)"),Noo=l(),Xn=a("li"),Ute=a("strong"),qoo=o("deberta"),joo=o(" \u2014 "),PR=a("a"),Doo=o("DebertaTokenizer"),Goo=o(" or "),BR=a("a"),Ooo=o("DebertaTokenizerFast"),Voo=o(" (DeBERTa model)"),Xoo=l(),zn=a("li"),Jte=a("strong"),zoo=o("deberta-v2"),Woo=o(" \u2014 "),IR=a("a"),Qoo=o("DebertaV2Tokenizer"),Hoo=o(" or "),NR=a("a"),Uoo=o("DebertaV2TokenizerFast"),Joo=o(" (DeBERTa-v2 model)"),Yoo=l(),Wn=a("li"),Yte=a("strong"),Koo=o("distilbert"),Zoo=o(" \u2014 "),qR=a("a"),ero=o("DistilBertTokenizer"),oro=o(" or "),jR=a("a"),rro=o("DistilBertTokenizerFast"),tro=o(" (DistilBERT model)"),aro=l(),Qn=a("li"),Kte=a("strong"),nro=o("dpr"),sro=o(" \u2014 "),DR=a("a"),lro=o("DPRQuestionEncoderTokenizer"),iro=o(" or "),GR=a("a"),dro=o("DPRQuestionEncoderTokenizerFast"),cro=o(" (DPR model)"),fro=l(),Hn=a("li"),Zte=a("strong"),mro=o("electra"),gro=o(" \u2014 "),OR=a("a"),hro=o("ElectraTokenizer"),pro=o(" or "),VR=a("a"),_ro=o("ElectraTokenizerFast"),uro=o(" (ELECTRA model)"),bro=l(),Pg=a("li"),eae=a("strong"),vro=o("flaubert"),Fro=o(" \u2014 "),XR=a("a"),Tro=o("FlaubertTokenizer"),Mro=o(" (FlauBERT model)"),Ero=l(),Un=a("li"),oae=a("strong"),Cro=o("fnet"),wro=o(" \u2014 "),zR=a("a"),Aro=o("FNetTokenizer"),yro=o(" or "),WR=a("a"),Lro=o("FNetTokenizerFast"),xro=o(" (FNet model)"),$ro=l(),Bg=a("li"),rae=a("strong"),kro=o("fsmt"),Sro=o(" \u2014 "),QR=a("a"),Rro=o("FSMTTokenizer"),Pro=o(" (FairSeq Machine-Translation model)"),Bro=l(),Jn=a("li"),tae=a("strong"),Iro=o("funnel"),Nro=o(" \u2014 "),HR=a("a"),qro=o("FunnelTokenizer"),jro=o(" or "),UR=a("a"),Dro=o("FunnelTokenizerFast"),Gro=o(" (Funnel Transformer model)"),Oro=l(),Yn=a("li"),aae=a("strong"),Vro=o("gpt2"),Xro=o(" \u2014 "),JR=a("a"),zro=o("GPT2Tokenizer"),Wro=o(" or "),YR=a("a"),Qro=o("GPT2TokenizerFast"),Hro=o(" (OpenAI GPT-2 model)"),Uro=l(),Kn=a("li"),nae=a("strong"),Jro=o("gpt_neo"),Yro=o(" \u2014 "),KR=a("a"),Kro=o("GPT2Tokenizer"),Zro=o(" or "),ZR=a("a"),eto=o("GPT2TokenizerFast"),oto=o(" (GPT Neo model)"),rto=l(),Ig=a("li"),sae=a("strong"),tto=o("gpt_neox"),ato=o(" \u2014 "),eP=a("a"),nto=o("GPTNeoXTokenizerFast"),sto=o(" (GPT NeoX model)"),lto=l(),Zn=a("li"),lae=a("strong"),ito=o("gptj"),dto=o(" \u2014 "),oP=a("a"),cto=o("GPT2Tokenizer"),fto=o(" or "),rP=a("a"),mto=o("GPT2TokenizerFast"),gto=o(" (GPT-J model)"),hto=l(),es=a("li"),iae=a("strong"),pto=o("herbert"),_to=o(" \u2014 "),tP=a("a"),uto=o("HerbertTokenizer"),bto=o(" or "),aP=a("a"),vto=o("HerbertTokenizerFast"),Fto=o(" (HerBERT model)"),Tto=l(),Ng=a("li"),dae=a("strong"),Mto=o("hubert"),Eto=o(" \u2014 "),nP=a("a"),Cto=o("Wav2Vec2CTCTokenizer"),wto=o(" (Hubert model)"),Ato=l(),os=a("li"),cae=a("strong"),yto=o("ibert"),Lto=o(" \u2014 "),sP=a("a"),xto=o("RobertaTokenizer"),$to=o(" or "),lP=a("a"),kto=o("RobertaTokenizerFast"),Sto=o(" (I-BERT model)"),Rto=l(),rs=a("li"),fae=a("strong"),Pto=o("layoutlm"),Bto=o(" \u2014 "),iP=a("a"),Ito=o("LayoutLMTokenizer"),Nto=o(" or "),dP=a("a"),qto=o("LayoutLMTokenizerFast"),jto=o(" (LayoutLM model)"),Dto=l(),ts=a("li"),mae=a("strong"),Gto=o("layoutlmv2"),Oto=o(" \u2014 "),cP=a("a"),Vto=o("LayoutLMv2Tokenizer"),Xto=o(" or "),fP=a("a"),zto=o("LayoutLMv2TokenizerFast"),Wto=o(" (LayoutLMv2 model)"),Qto=l(),as=a("li"),gae=a("strong"),Hto=o("layoutlmv3"),Uto=o(" \u2014 "),mP=a("a"),Jto=o("LayoutLMv3Tokenizer"),Yto=o(" or "),gP=a("a"),Kto=o("LayoutLMv3TokenizerFast"),Zto=o(" (LayoutLMv3 model)"),eao=l(),ns=a("li"),hae=a("strong"),oao=o("layoutxlm"),rao=o(" \u2014 "),hP=a("a"),tao=o("LayoutXLMTokenizer"),aao=o(" or "),pP=a("a"),nao=o("LayoutXLMTokenizerFast"),sao=o(" (LayoutXLM model)"),lao=l(),ss=a("li"),pae=a("strong"),iao=o("led"),dao=o(" \u2014 "),_P=a("a"),cao=o("LEDTokenizer"),fao=o(" or "),uP=a("a"),mao=o("LEDTokenizerFast"),gao=o(" (LED model)"),hao=l(),ls=a("li"),_ae=a("strong"),pao=o("longformer"),_ao=o(" \u2014 "),bP=a("a"),uao=o("LongformerTokenizer"),bao=o(" or "),vP=a("a"),vao=o("LongformerTokenizerFast"),Fao=o(" (Longformer model)"),Tao=l(),qg=a("li"),uae=a("strong"),Mao=o("luke"),Eao=o(" \u2014 "),FP=a("a"),Cao=o("LukeTokenizer"),wao=o(" (LUKE model)"),Aao=l(),is=a("li"),bae=a("strong"),yao=o("lxmert"),Lao=o(" \u2014 "),TP=a("a"),xao=o("LxmertTokenizer"),$ao=o(" or "),MP=a("a"),kao=o("LxmertTokenizerFast"),Sao=o(" (LXMERT model)"),Rao=l(),jg=a("li"),vae=a("strong"),Pao=o("m2m_100"),Bao=o(" \u2014 "),EP=a("a"),Iao=o("M2M100Tokenizer"),Nao=o(" (M2M100 model)"),qao=l(),Dg=a("li"),Fae=a("strong"),jao=o("marian"),Dao=o(" \u2014 "),CP=a("a"),Gao=o("MarianTokenizer"),Oao=o(" (Marian model)"),Vao=l(),ds=a("li"),Tae=a("strong"),Xao=o("mbart"),zao=o(" \u2014 "),wP=a("a"),Wao=o("MBartTokenizer"),Qao=o(" or "),AP=a("a"),Hao=o("MBartTokenizerFast"),Uao=o(" (mBART model)"),Jao=l(),cs=a("li"),Mae=a("strong"),Yao=o("mbart50"),Kao=o(" \u2014 "),yP=a("a"),Zao=o("MBart50Tokenizer"),eno=o(" or "),LP=a("a"),ono=o("MBart50TokenizerFast"),rno=o(" (mBART-50 model)"),tno=l(),fs=a("li"),Eae=a("strong"),ano=o("megatron-bert"),nno=o(" \u2014 "),xP=a("a"),sno=o("BertTokenizer"),lno=o(" or "),$P=a("a"),ino=o("BertTokenizerFast"),dno=o(" (MegatronBert model)"),cno=l(),Gg=a("li"),Cae=a("strong"),fno=o("mluke"),mno=o(" \u2014 "),kP=a("a"),gno=o("MLukeTokenizer"),hno=o(" (mLUKE model)"),pno=l(),ms=a("li"),wae=a("strong"),_no=o("mobilebert"),uno=o(" \u2014 "),SP=a("a"),bno=o("MobileBertTokenizer"),vno=o(" or "),RP=a("a"),Fno=o("MobileBertTokenizerFast"),Tno=o(" (MobileBERT model)"),Mno=l(),gs=a("li"),Aae=a("strong"),Eno=o("mpnet"),Cno=o(" \u2014 "),PP=a("a"),wno=o("MPNetTokenizer"),Ano=o(" or "),BP=a("a"),yno=o("MPNetTokenizerFast"),Lno=o(" (MPNet model)"),xno=l(),hs=a("li"),yae=a("strong"),$no=o("mt5"),kno=o(" \u2014 "),IP=a("a"),Sno=o("MT5Tokenizer"),Rno=o(" or "),NP=a("a"),Pno=o("MT5TokenizerFast"),Bno=o(" (mT5 model)"),Ino=l(),ps=a("li"),Lae=a("strong"),Nno=o("nystromformer"),qno=o(" \u2014 "),qP=a("a"),jno=o("AlbertTokenizer"),Dno=o(" or "),jP=a("a"),Gno=o("AlbertTokenizerFast"),Ono=o(" (Nystromformer model)"),Vno=l(),_s=a("li"),xae=a("strong"),Xno=o("openai-gpt"),zno=o(" \u2014 "),DP=a("a"),Wno=o("OpenAIGPTTokenizer"),Qno=o(" or "),GP=a("a"),Hno=o("OpenAIGPTTokenizerFast"),Uno=o(" (OpenAI GPT model)"),Jno=l(),Og=a("li"),$ae=a("strong"),Yno=o("opt"),Kno=o(" \u2014 "),OP=a("a"),Zno=o("GPT2Tokenizer"),eso=o(" (OPT model)"),oso=l(),us=a("li"),kae=a("strong"),rso=o("pegasus"),tso=o(" \u2014 "),VP=a("a"),aso=o("PegasusTokenizer"),nso=o(" or "),XP=a("a"),sso=o("PegasusTokenizerFast"),lso=o(" (Pegasus model)"),iso=l(),Vg=a("li"),Sae=a("strong"),dso=o("perceiver"),cso=o(" \u2014 "),zP=a("a"),fso=o("PerceiverTokenizer"),mso=o(" (Perceiver model)"),gso=l(),Xg=a("li"),Rae=a("strong"),hso=o("phobert"),pso=o(" \u2014 "),WP=a("a"),_so=o("PhobertTokenizer"),uso=o(" (PhoBERT model)"),bso=l(),zg=a("li"),Pae=a("strong"),vso=o("plbart"),Fso=o(" \u2014 "),QP=a("a"),Tso=o("PLBartTokenizer"),Mso=o(" (PLBart model)"),Eso=l(),Wg=a("li"),Bae=a("strong"),Cso=o("prophetnet"),wso=o(" \u2014 "),HP=a("a"),Aso=o("ProphetNetTokenizer"),yso=o(" (ProphetNet model)"),Lso=l(),bs=a("li"),Iae=a("strong"),xso=o("qdqbert"),$so=o(" \u2014 "),UP=a("a"),kso=o("BertTokenizer"),Sso=o(" or "),JP=a("a"),Rso=o("BertTokenizerFast"),Pso=o(" (QDQBert model)"),Bso=l(),Qg=a("li"),Nae=a("strong"),Iso=o("rag"),Nso=o(" \u2014 "),YP=a("a"),qso=o("RagTokenizer"),jso=o(" (RAG model)"),Dso=l(),vs=a("li"),qae=a("strong"),Gso=o("realm"),Oso=o(" \u2014 "),KP=a("a"),Vso=o("RealmTokenizer"),Xso=o(" or "),ZP=a("a"),zso=o("RealmTokenizerFast"),Wso=o(" (Realm model)"),Qso=l(),Fs=a("li"),jae=a("strong"),Hso=o("reformer"),Uso=o(" \u2014 "),eB=a("a"),Jso=o("ReformerTokenizer"),Yso=o(" or "),oB=a("a"),Kso=o("ReformerTokenizerFast"),Zso=o(" (Reformer model)"),elo=l(),Ts=a("li"),Dae=a("strong"),olo=o("rembert"),rlo=o(" \u2014 "),rB=a("a"),tlo=o("RemBertTokenizer"),alo=o(" or "),tB=a("a"),nlo=o("RemBertTokenizerFast"),slo=o(" (RemBERT model)"),llo=l(),Ms=a("li"),Gae=a("strong"),ilo=o("retribert"),dlo=o(" \u2014 "),aB=a("a"),clo=o("RetriBertTokenizer"),flo=o(" or "),nB=a("a"),mlo=o("RetriBertTokenizerFast"),glo=o(" (RetriBERT model)"),hlo=l(),Es=a("li"),Oae=a("strong"),plo=o("roberta"),_lo=o(" \u2014 "),sB=a("a"),ulo=o("RobertaTokenizer"),blo=o(" or "),lB=a("a"),vlo=o("RobertaTokenizerFast"),Flo=o(" (RoBERTa model)"),Tlo=l(),Cs=a("li"),Vae=a("strong"),Mlo=o("roformer"),Elo=o(" \u2014 "),iB=a("a"),Clo=o("RoFormerTokenizer"),wlo=o(" or "),dB=a("a"),Alo=o("RoFormerTokenizerFast"),ylo=o(" (RoFormer model)"),Llo=l(),Hg=a("li"),Xae=a("strong"),xlo=o("speech_to_text"),$lo=o(" \u2014 "),cB=a("a"),klo=o("Speech2TextTokenizer"),Slo=o(" (Speech2Text model)"),Rlo=l(),Ug=a("li"),zae=a("strong"),Plo=o("speech_to_text_2"),Blo=o(" \u2014 "),fB=a("a"),Ilo=o("Speech2Text2Tokenizer"),Nlo=o(" (Speech2Text2 model)"),qlo=l(),ws=a("li"),Wae=a("strong"),jlo=o("splinter"),Dlo=o(" \u2014 "),mB=a("a"),Glo=o("SplinterTokenizer"),Olo=o(" or "),gB=a("a"),Vlo=o("SplinterTokenizerFast"),Xlo=o(" (Splinter model)"),zlo=l(),As=a("li"),Qae=a("strong"),Wlo=o("squeezebert"),Qlo=o(" \u2014 "),hB=a("a"),Hlo=o("SqueezeBertTokenizer"),Ulo=o(" or "),pB=a("a"),Jlo=o("SqueezeBertTokenizerFast"),Ylo=o(" (SqueezeBERT model)"),Klo=l(),ys=a("li"),Hae=a("strong"),Zlo=o("t5"),eio=o(" \u2014 "),_B=a("a"),oio=o("T5Tokenizer"),rio=o(" or "),uB=a("a"),tio=o("T5TokenizerFast"),aio=o(" (T5 model)"),nio=l(),Jg=a("li"),Uae=a("strong"),sio=o("tapas"),lio=o(" \u2014 "),bB=a("a"),iio=o("TapasTokenizer"),dio=o(" (TAPAS model)"),cio=l(),Yg=a("li"),Jae=a("strong"),fio=o("tapex"),mio=o(" \u2014 "),vB=a("a"),gio=o("TapexTokenizer"),hio=o(" (TAPEX model)"),pio=l(),Kg=a("li"),Yae=a("strong"),_io=o("transfo-xl"),uio=o(" \u2014 "),FB=a("a"),bio=o("TransfoXLTokenizer"),vio=o(" (Transformer-XL model)"),Fio=l(),Ls=a("li"),Kae=a("strong"),Tio=o("visual_bert"),Mio=o(" \u2014 "),TB=a("a"),Eio=o("BertTokenizer"),Cio=o(" or "),MB=a("a"),wio=o("BertTokenizerFast"),Aio=o(" (VisualBert model)"),yio=l(),Zg=a("li"),Zae=a("strong"),Lio=o("wav2vec2"),xio=o(" \u2014 "),EB=a("a"),$io=o("Wav2Vec2CTCTokenizer"),kio=o(" (Wav2Vec2 model)"),Sio=l(),eh=a("li"),ene=a("strong"),Rio=o("wav2vec2-conformer"),Pio=o(" \u2014 "),CB=a("a"),Bio=o("Wav2Vec2CTCTokenizer"),Iio=o(" (Wav2Vec2-Conformer model)"),Nio=l(),oh=a("li"),one=a("strong"),qio=o("wav2vec2_phoneme"),jio=o(" \u2014 "),wB=a("a"),Dio=o("Wav2Vec2PhonemeCTCTokenizer"),Gio=o(" (Wav2Vec2Phoneme model)"),Oio=l(),xs=a("li"),rne=a("strong"),Vio=o("xglm"),Xio=o(" \u2014 "),AB=a("a"),zio=o("XGLMTokenizer"),Wio=o(" or "),yB=a("a"),Qio=o("XGLMTokenizerFast"),Hio=o(" (XGLM model)"),Uio=l(),rh=a("li"),tne=a("strong"),Jio=o("xlm"),Yio=o(" \u2014 "),LB=a("a"),Kio=o("XLMTokenizer"),Zio=o(" (XLM model)"),edo=l(),th=a("li"),ane=a("strong"),odo=o("xlm-prophetnet"),rdo=o(" \u2014 "),xB=a("a"),tdo=o("XLMProphetNetTokenizer"),ado=o(" (XLMProphetNet model)"),ndo=l(),$s=a("li"),nne=a("strong"),sdo=o("xlm-roberta"),ldo=o(" \u2014 "),$B=a("a"),ido=o("XLMRobertaTokenizer"),ddo=o(" or "),kB=a("a"),cdo=o("XLMRobertaTokenizerFast"),fdo=o(" (XLM-RoBERTa model)"),mdo=l(),ks=a("li"),sne=a("strong"),gdo=o("xlm-roberta-xl"),hdo=o(" \u2014 "),SB=a("a"),pdo=o("RobertaTokenizer"),_do=o(" or "),RB=a("a"),udo=o("RobertaTokenizerFast"),bdo=o(" (XLM-RoBERTa-XL model)"),vdo=l(),Ss=a("li"),lne=a("strong"),Fdo=o("xlnet"),Tdo=o(" \u2014 "),PB=a("a"),Mdo=o("XLNetTokenizer"),Edo=o(" or "),BB=a("a"),Cdo=o("XLNetTokenizerFast"),wdo=o(" (XLNet model)"),Ado=l(),Rs=a("li"),ine=a("strong"),ydo=o("yoso"),Ldo=o(" \u2014 "),IB=a("a"),xdo=o("AlbertTokenizer"),$do=o(" or "),NB=a("a"),kdo=o("AlbertTokenizerFast"),Sdo=o(" (YOSO model)"),Rdo=l(),F(ah.$$.fragment),Pdo=l(),nh=a("div"),F(Oy.$$.fragment),Bdo=l(),dne=a("p"),Ido=o("Register a new tokenizer in this mapping."),pqe=l(),Mi=a("h2"),sh=a("a"),cne=a("span"),F(Vy.$$.fragment),Ndo=l(),fne=a("span"),qdo=o("AutoFeatureExtractor"),_qe=l(),Ao=a("div"),F(Xy.$$.fragment),jdo=l(),zy=a("p"),Ddo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),qB=a("a"),Gdo=o("AutoFeatureExtractor.from_pretrained()"),Odo=o(" class method."),Vdo=l(),Wy=a("p"),Xdo=o("This class cannot be instantiated directly using "),mne=a("code"),zdo=o("__init__()"),Wdo=o(" (throws an error)."),Qdo=l(),He=a("div"),F(Qy.$$.fragment),Hdo=l(),gne=a("p"),Udo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Jdo=l(),ya=a("p"),Ydo=o("The feature extractor class to instantiate is selected based on the "),hne=a("code"),Kdo=o("model_type"),Zdo=o(` property of the config object
(either passed as an argument or loaded from `),pne=a("code"),eco=o("pretrained_model_name_or_path"),oco=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),_ne=a("code"),rco=o("pretrained_model_name_or_path"),tco=o(":"),aco=l(),Y=a("ul"),lh=a("li"),une=a("strong"),nco=o("beit"),sco=o(" \u2014 "),jB=a("a"),lco=o("BeitFeatureExtractor"),ico=o(" (BEiT model)"),dco=l(),ih=a("li"),bne=a("strong"),cco=o("clip"),fco=o(" \u2014 "),DB=a("a"),mco=o("CLIPFeatureExtractor"),gco=o(" (CLIP model)"),hco=l(),dh=a("li"),vne=a("strong"),pco=o("convnext"),_co=o(" \u2014 "),GB=a("a"),uco=o("ConvNextFeatureExtractor"),bco=o(" (ConvNext model)"),vco=l(),ch=a("li"),Fne=a("strong"),Fco=o("cvt"),Tco=o(" \u2014 "),OB=a("a"),Mco=o("ConvNextFeatureExtractor"),Eco=o(" (CvT model)"),Cco=l(),fh=a("li"),Tne=a("strong"),wco=o("data2vec-audio"),Aco=o(" \u2014 "),VB=a("a"),yco=o("Wav2Vec2FeatureExtractor"),Lco=o(" (Data2VecAudio model)"),xco=l(),mh=a("li"),Mne=a("strong"),$co=o("data2vec-vision"),kco=o(" \u2014 "),XB=a("a"),Sco=o("BeitFeatureExtractor"),Rco=o(" (Data2VecVision model)"),Pco=l(),gh=a("li"),Ene=a("strong"),Bco=o("deit"),Ico=o(" \u2014 "),zB=a("a"),Nco=o("DeiTFeatureExtractor"),qco=o(" (DeiT model)"),jco=l(),hh=a("li"),Cne=a("strong"),Dco=o("detr"),Gco=o(" \u2014 "),WB=a("a"),Oco=o("DetrFeatureExtractor"),Vco=o(" (DETR model)"),Xco=l(),ph=a("li"),wne=a("strong"),zco=o("dpt"),Wco=o(" \u2014 "),QB=a("a"),Qco=o("DPTFeatureExtractor"),Hco=o(" (DPT model)"),Uco=l(),_h=a("li"),Ane=a("strong"),Jco=o("flava"),Yco=o(" \u2014 "),HB=a("a"),Kco=o("FlavaFeatureExtractor"),Zco=o(" (Flava model)"),efo=l(),uh=a("li"),yne=a("strong"),ofo=o("glpn"),rfo=o(" \u2014 "),UB=a("a"),tfo=o("GLPNFeatureExtractor"),afo=o(" (GLPN model)"),nfo=l(),bh=a("li"),Lne=a("strong"),sfo=o("hubert"),lfo=o(" \u2014 "),JB=a("a"),ifo=o("Wav2Vec2FeatureExtractor"),dfo=o(" (Hubert model)"),cfo=l(),vh=a("li"),xne=a("strong"),ffo=o("imagegpt"),mfo=o(" \u2014 "),YB=a("a"),gfo=o("ImageGPTFeatureExtractor"),hfo=o(" (ImageGPT model)"),pfo=l(),Fh=a("li"),$ne=a("strong"),_fo=o("layoutlmv2"),ufo=o(" \u2014 "),KB=a("a"),bfo=o("LayoutLMv2FeatureExtractor"),vfo=o(" (LayoutLMv2 model)"),Ffo=l(),Th=a("li"),kne=a("strong"),Tfo=o("layoutlmv3"),Mfo=o(" \u2014 "),ZB=a("a"),Efo=o("LayoutLMv3FeatureExtractor"),Cfo=o(" (LayoutLMv3 model)"),wfo=l(),Mh=a("li"),Sne=a("strong"),Afo=o("maskformer"),yfo=o(" \u2014 "),eI=a("a"),Lfo=o("MaskFormerFeatureExtractor"),xfo=o(" (MaskFormer model)"),$fo=l(),Eh=a("li"),Rne=a("strong"),kfo=o("perceiver"),Sfo=o(" \u2014 "),oI=a("a"),Rfo=o("PerceiverFeatureExtractor"),Pfo=o(" (Perceiver model)"),Bfo=l(),Ch=a("li"),Pne=a("strong"),Ifo=o("poolformer"),Nfo=o(" \u2014 "),rI=a("a"),qfo=o("PoolFormerFeatureExtractor"),jfo=o(" (PoolFormer model)"),Dfo=l(),wh=a("li"),Bne=a("strong"),Gfo=o("regnet"),Ofo=o(" \u2014 "),tI=a("a"),Vfo=o("ConvNextFeatureExtractor"),Xfo=o(" (RegNet model)"),zfo=l(),Ah=a("li"),Ine=a("strong"),Wfo=o("resnet"),Qfo=o(" \u2014 "),aI=a("a"),Hfo=o("ConvNextFeatureExtractor"),Ufo=o(" (ResNet model)"),Jfo=l(),yh=a("li"),Nne=a("strong"),Yfo=o("segformer"),Kfo=o(" \u2014 "),nI=a("a"),Zfo=o("SegformerFeatureExtractor"),emo=o(" (SegFormer model)"),omo=l(),Lh=a("li"),qne=a("strong"),rmo=o("speech_to_text"),tmo=o(" \u2014 "),sI=a("a"),amo=o("Speech2TextFeatureExtractor"),nmo=o(" (Speech2Text model)"),smo=l(),xh=a("li"),jne=a("strong"),lmo=o("swin"),imo=o(" \u2014 "),lI=a("a"),dmo=o("ViTFeatureExtractor"),cmo=o(" (Swin model)"),fmo=l(),$h=a("li"),Dne=a("strong"),mmo=o("van"),gmo=o(" \u2014 "),iI=a("a"),hmo=o("ConvNextFeatureExtractor"),pmo=o(" (VAN model)"),_mo=l(),kh=a("li"),Gne=a("strong"),umo=o("vit"),bmo=o(" \u2014 "),dI=a("a"),vmo=o("ViTFeatureExtractor"),Fmo=o(" (ViT model)"),Tmo=l(),Sh=a("li"),One=a("strong"),Mmo=o("vit_mae"),Emo=o(" \u2014 "),cI=a("a"),Cmo=o("ViTFeatureExtractor"),wmo=o(" (ViTMAE model)"),Amo=l(),Rh=a("li"),Vne=a("strong"),ymo=o("wav2vec2"),Lmo=o(" \u2014 "),fI=a("a"),xmo=o("Wav2Vec2FeatureExtractor"),$mo=o(" (Wav2Vec2 model)"),kmo=l(),Ph=a("li"),Xne=a("strong"),Smo=o("wav2vec2-conformer"),Rmo=o(" \u2014 "),mI=a("a"),Pmo=o("Wav2Vec2FeatureExtractor"),Bmo=o(" (Wav2Vec2-Conformer model)"),Imo=l(),Bh=a("li"),zne=a("strong"),Nmo=o("yolos"),qmo=o(" \u2014 "),gI=a("a"),jmo=o("YolosFeatureExtractor"),Dmo=o(" (YOLOS model)"),Gmo=l(),F(Ih.$$.fragment),Omo=l(),F(Nh.$$.fragment),Vmo=l(),qh=a("div"),F(Hy.$$.fragment),Xmo=l(),Wne=a("p"),zmo=o("Register a new feature extractor for this class."),uqe=l(),Ei=a("h2"),jh=a("a"),Qne=a("span"),F(Uy.$$.fragment),Wmo=l(),Hne=a("span"),Qmo=o("AutoProcessor"),bqe=l(),yo=a("div"),F(Jy.$$.fragment),Hmo=l(),Yy=a("p"),Umo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),hI=a("a"),Jmo=o("AutoProcessor.from_pretrained()"),Ymo=o(" class method."),Kmo=l(),Ky=a("p"),Zmo=o("This class cannot be instantiated directly using "),Une=a("code"),ego=o("__init__()"),ogo=o(" (throws an error)."),rgo=l(),Ue=a("div"),F(Zy.$$.fragment),tgo=l(),Jne=a("p"),ago=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),ngo=l(),Ci=a("p"),sgo=o("The processor class to instantiate is selected based on the "),Yne=a("code"),lgo=o("model_type"),igo=o(` property of the config object (either
passed as an argument or loaded from `),Kne=a("code"),dgo=o("pretrained_model_name_or_path"),cgo=o(" if possible):"),fgo=l(),he=a("ul"),Dh=a("li"),Zne=a("strong"),mgo=o("clip"),ggo=o(" \u2014 "),pI=a("a"),hgo=o("CLIPProcessor"),pgo=o(" (CLIP model)"),_go=l(),Gh=a("li"),ese=a("strong"),ugo=o("flava"),bgo=o(" \u2014 "),ose=a("code"),vgo=o("FLAVAProcessor"),Fgo=o(" (Flava model)"),Tgo=l(),Oh=a("li"),rse=a("strong"),Mgo=o("layoutlmv2"),Ego=o(" \u2014 "),_I=a("a"),Cgo=o("LayoutLMv2Processor"),wgo=o(" (LayoutLMv2 model)"),Ago=l(),Vh=a("li"),tse=a("strong"),ygo=o("layoutlmv3"),Lgo=o(" \u2014 "),uI=a("a"),xgo=o("LayoutLMv3Processor"),$go=o(" (LayoutLMv3 model)"),kgo=l(),Xh=a("li"),ase=a("strong"),Sgo=o("layoutxlm"),Rgo=o(" \u2014 "),bI=a("a"),Pgo=o("LayoutXLMProcessor"),Bgo=o(" (LayoutXLM model)"),Igo=l(),zh=a("li"),nse=a("strong"),Ngo=o("sew"),qgo=o(" \u2014 "),vI=a("a"),jgo=o("Wav2Vec2Processor"),Dgo=o(" (SEW model)"),Ggo=l(),Wh=a("li"),sse=a("strong"),Ogo=o("sew-d"),Vgo=o(" \u2014 "),FI=a("a"),Xgo=o("Wav2Vec2Processor"),zgo=o(" (SEW-D model)"),Wgo=l(),Qh=a("li"),lse=a("strong"),Qgo=o("speech_to_text"),Hgo=o(" \u2014 "),TI=a("a"),Ugo=o("Speech2TextProcessor"),Jgo=o(" (Speech2Text model)"),Ygo=l(),Hh=a("li"),ise=a("strong"),Kgo=o("speech_to_text_2"),Zgo=o(" \u2014 "),MI=a("a"),eho=o("Speech2Text2Processor"),oho=o(" (Speech2Text2 model)"),rho=l(),Uh=a("li"),dse=a("strong"),tho=o("trocr"),aho=o(" \u2014 "),EI=a("a"),nho=o("TrOCRProcessor"),sho=o(" (TrOCR model)"),lho=l(),Jh=a("li"),cse=a("strong"),iho=o("unispeech"),dho=o(" \u2014 "),CI=a("a"),cho=o("Wav2Vec2Processor"),fho=o(" (UniSpeech model)"),mho=l(),Yh=a("li"),fse=a("strong"),gho=o("unispeech-sat"),hho=o(" \u2014 "),wI=a("a"),pho=o("Wav2Vec2Processor"),_ho=o(" (UniSpeechSat model)"),uho=l(),Kh=a("li"),mse=a("strong"),bho=o("vilt"),vho=o(" \u2014 "),AI=a("a"),Fho=o("ViltProcessor"),Tho=o(" (ViLT model)"),Mho=l(),Zh=a("li"),gse=a("strong"),Eho=o("vision-text-dual-encoder"),Cho=o(" \u2014 "),yI=a("a"),who=o("VisionTextDualEncoderProcessor"),Aho=o(" (VisionTextDualEncoder model)"),yho=l(),ep=a("li"),hse=a("strong"),Lho=o("wav2vec2"),xho=o(" \u2014 "),LI=a("a"),$ho=o("Wav2Vec2Processor"),kho=o(" (Wav2Vec2 model)"),Sho=l(),op=a("li"),pse=a("strong"),Rho=o("wav2vec2-conformer"),Pho=o(" \u2014 "),xI=a("a"),Bho=o("Wav2Vec2Processor"),Iho=o(" (Wav2Vec2-Conformer model)"),Nho=l(),rp=a("li"),_se=a("strong"),qho=o("wavlm"),jho=o(" \u2014 "),$I=a("a"),Dho=o("Wav2Vec2Processor"),Gho=o(" (WavLM model)"),Oho=l(),F(tp.$$.fragment),Vho=l(),F(ap.$$.fragment),Xho=l(),np=a("div"),F(eL.$$.fragment),zho=l(),use=a("p"),Who=o("Register a new processor for this class."),vqe=l(),wi=a("h2"),sp=a("a"),bse=a("span"),F(oL.$$.fragment),Qho=l(),vse=a("span"),Hho=o("AutoModel"),Fqe=l(),Lo=a("div"),F(rL.$$.fragment),Uho=l(),Ai=a("p"),Jho=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),kI=a("a"),Yho=o("from_pretrained()"),Kho=o(" class method or the "),SI=a("a"),Zho=o("from_config()"),epo=o(` class
method.`),opo=l(),tL=a("p"),rpo=o("This class cannot be instantiated directly using "),Fse=a("code"),tpo=o("__init__()"),apo=o(" (throws an error)."),npo=l(),tt=a("div"),F(aL.$$.fragment),spo=l(),Tse=a("p"),lpo=o("Instantiates one of the base model classes of the library from a configuration."),ipo=l(),yi=a("p"),dpo=o(`Note:
Loading a model from its configuration file does `),Mse=a("strong"),cpo=o("not"),fpo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RI=a("a"),mpo=o("from_pretrained()"),gpo=o(" to load the model weights."),hpo=l(),F(lp.$$.fragment),ppo=l(),Je=a("div"),F(nL.$$.fragment),_po=l(),Ese=a("p"),upo=o("Instantiate one of the base model classes of the library from a pretrained model."),bpo=l(),La=a("p"),vpo=o("The model class to instantiate is selected based on the "),Cse=a("code"),Fpo=o("model_type"),Tpo=o(` property of the config object (either
passed as an argument or loaded from `),wse=a("code"),Mpo=o("pretrained_model_name_or_path"),Epo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ase=a("code"),Cpo=o("pretrained_model_name_or_path"),wpo=o(":"),Apo=l(),x=a("ul"),ip=a("li"),yse=a("strong"),ypo=o("albert"),Lpo=o(" \u2014 "),PI=a("a"),xpo=o("AlbertModel"),$po=o(" (ALBERT model)"),kpo=l(),dp=a("li"),Lse=a("strong"),Spo=o("bart"),Rpo=o(" \u2014 "),BI=a("a"),Ppo=o("BartModel"),Bpo=o(" (BART model)"),Ipo=l(),cp=a("li"),xse=a("strong"),Npo=o("beit"),qpo=o(" \u2014 "),II=a("a"),jpo=o("BeitModel"),Dpo=o(" (BEiT model)"),Gpo=l(),fp=a("li"),$se=a("strong"),Opo=o("bert"),Vpo=o(" \u2014 "),NI=a("a"),Xpo=o("BertModel"),zpo=o(" (BERT model)"),Wpo=l(),mp=a("li"),kse=a("strong"),Qpo=o("bert-generation"),Hpo=o(" \u2014 "),qI=a("a"),Upo=o("BertGenerationEncoder"),Jpo=o(" (Bert Generation model)"),Ypo=l(),gp=a("li"),Sse=a("strong"),Kpo=o("big_bird"),Zpo=o(" \u2014 "),jI=a("a"),e_o=o("BigBirdModel"),o_o=o(" (BigBird model)"),r_o=l(),hp=a("li"),Rse=a("strong"),t_o=o("bigbird_pegasus"),a_o=o(" \u2014 "),DI=a("a"),n_o=o("BigBirdPegasusModel"),s_o=o(" (BigBirdPegasus model)"),l_o=l(),pp=a("li"),Pse=a("strong"),i_o=o("blenderbot"),d_o=o(" \u2014 "),GI=a("a"),c_o=o("BlenderbotModel"),f_o=o(" (Blenderbot model)"),m_o=l(),_p=a("li"),Bse=a("strong"),g_o=o("blenderbot-small"),h_o=o(" \u2014 "),OI=a("a"),p_o=o("BlenderbotSmallModel"),__o=o(" (BlenderbotSmall model)"),u_o=l(),up=a("li"),Ise=a("strong"),b_o=o("camembert"),v_o=o(" \u2014 "),VI=a("a"),F_o=o("CamembertModel"),T_o=o(" (CamemBERT model)"),M_o=l(),bp=a("li"),Nse=a("strong"),E_o=o("canine"),C_o=o(" \u2014 "),XI=a("a"),w_o=o("CanineModel"),A_o=o(" (Canine model)"),y_o=l(),vp=a("li"),qse=a("strong"),L_o=o("clip"),x_o=o(" \u2014 "),zI=a("a"),$_o=o("CLIPModel"),k_o=o(" (CLIP model)"),S_o=l(),Fp=a("li"),jse=a("strong"),R_o=o("convbert"),P_o=o(" \u2014 "),WI=a("a"),B_o=o("ConvBertModel"),I_o=o(" (ConvBERT model)"),N_o=l(),Tp=a("li"),Dse=a("strong"),q_o=o("convnext"),j_o=o(" \u2014 "),QI=a("a"),D_o=o("ConvNextModel"),G_o=o(" (ConvNext model)"),O_o=l(),Mp=a("li"),Gse=a("strong"),V_o=o("ctrl"),X_o=o(" \u2014 "),HI=a("a"),z_o=o("CTRLModel"),W_o=o(" (CTRL model)"),Q_o=l(),Ep=a("li"),Ose=a("strong"),H_o=o("cvt"),U_o=o(" \u2014 "),UI=a("a"),J_o=o("CvtModel"),Y_o=o(" (CvT model)"),K_o=l(),Cp=a("li"),Vse=a("strong"),Z_o=o("data2vec-audio"),euo=o(" \u2014 "),JI=a("a"),ouo=o("Data2VecAudioModel"),ruo=o(" (Data2VecAudio model)"),tuo=l(),wp=a("li"),Xse=a("strong"),auo=o("data2vec-text"),nuo=o(" \u2014 "),YI=a("a"),suo=o("Data2VecTextModel"),luo=o(" (Data2VecText model)"),iuo=l(),Ap=a("li"),zse=a("strong"),duo=o("data2vec-vision"),cuo=o(" \u2014 "),KI=a("a"),fuo=o("Data2VecVisionModel"),muo=o(" (Data2VecVision model)"),guo=l(),yp=a("li"),Wse=a("strong"),huo=o("deberta"),puo=o(" \u2014 "),ZI=a("a"),_uo=o("DebertaModel"),uuo=o(" (DeBERTa model)"),buo=l(),Lp=a("li"),Qse=a("strong"),vuo=o("deberta-v2"),Fuo=o(" \u2014 "),eN=a("a"),Tuo=o("DebertaV2Model"),Muo=o(" (DeBERTa-v2 model)"),Euo=l(),xp=a("li"),Hse=a("strong"),Cuo=o("decision_transformer"),wuo=o(" \u2014 "),oN=a("a"),Auo=o("DecisionTransformerModel"),yuo=o(" (Decision Transformer model)"),Luo=l(),$p=a("li"),Use=a("strong"),xuo=o("deit"),$uo=o(" \u2014 "),rN=a("a"),kuo=o("DeiTModel"),Suo=o(" (DeiT model)"),Ruo=l(),kp=a("li"),Jse=a("strong"),Puo=o("detr"),Buo=o(" \u2014 "),tN=a("a"),Iuo=o("DetrModel"),Nuo=o(" (DETR model)"),quo=l(),Sp=a("li"),Yse=a("strong"),juo=o("distilbert"),Duo=o(" \u2014 "),aN=a("a"),Guo=o("DistilBertModel"),Ouo=o(" (DistilBERT model)"),Vuo=l(),Rp=a("li"),Kse=a("strong"),Xuo=o("dpr"),zuo=o(" \u2014 "),nN=a("a"),Wuo=o("DPRQuestionEncoder"),Quo=o(" (DPR model)"),Huo=l(),Pp=a("li"),Zse=a("strong"),Uuo=o("dpt"),Juo=o(" \u2014 "),sN=a("a"),Yuo=o("DPTModel"),Kuo=o(" (DPT model)"),Zuo=l(),Bp=a("li"),ele=a("strong"),e1o=o("electra"),o1o=o(" \u2014 "),lN=a("a"),r1o=o("ElectraModel"),t1o=o(" (ELECTRA model)"),a1o=l(),Ip=a("li"),ole=a("strong"),n1o=o("flaubert"),s1o=o(" \u2014 "),iN=a("a"),l1o=o("FlaubertModel"),i1o=o(" (FlauBERT model)"),d1o=l(),Np=a("li"),rle=a("strong"),c1o=o("flava"),f1o=o(" \u2014 "),dN=a("a"),m1o=o("FlavaModel"),g1o=o(" (Flava model)"),h1o=l(),qp=a("li"),tle=a("strong"),p1o=o("fnet"),_1o=o(" \u2014 "),cN=a("a"),u1o=o("FNetModel"),b1o=o(" (FNet model)"),v1o=l(),jp=a("li"),ale=a("strong"),F1o=o("fsmt"),T1o=o(" \u2014 "),fN=a("a"),M1o=o("FSMTModel"),E1o=o(" (FairSeq Machine-Translation model)"),C1o=l(),Ps=a("li"),nle=a("strong"),w1o=o("funnel"),A1o=o(" \u2014 "),mN=a("a"),y1o=o("FunnelModel"),L1o=o(" or "),gN=a("a"),x1o=o("FunnelBaseModel"),$1o=o(" (Funnel Transformer model)"),k1o=l(),Dp=a("li"),sle=a("strong"),S1o=o("glpn"),R1o=o(" \u2014 "),hN=a("a"),P1o=o("GLPNModel"),B1o=o(" (GLPN model)"),I1o=l(),Gp=a("li"),lle=a("strong"),N1o=o("gpt2"),q1o=o(" \u2014 "),pN=a("a"),j1o=o("GPT2Model"),D1o=o(" (OpenAI GPT-2 model)"),G1o=l(),Op=a("li"),ile=a("strong"),O1o=o("gpt_neo"),V1o=o(" \u2014 "),_N=a("a"),X1o=o("GPTNeoModel"),z1o=o(" (GPT Neo model)"),W1o=l(),Vp=a("li"),dle=a("strong"),Q1o=o("gpt_neox"),H1o=o(" \u2014 "),uN=a("a"),U1o=o("GPTNeoXModel"),J1o=o(" (GPT NeoX model)"),Y1o=l(),Xp=a("li"),cle=a("strong"),K1o=o("gptj"),Z1o=o(" \u2014 "),bN=a("a"),ebo=o("GPTJModel"),obo=o(" (GPT-J model)"),rbo=l(),zp=a("li"),fle=a("strong"),tbo=o("hubert"),abo=o(" \u2014 "),vN=a("a"),nbo=o("HubertModel"),sbo=o(" (Hubert model)"),lbo=l(),Wp=a("li"),mle=a("strong"),ibo=o("ibert"),dbo=o(" \u2014 "),FN=a("a"),cbo=o("IBertModel"),fbo=o(" (I-BERT model)"),mbo=l(),Qp=a("li"),gle=a("strong"),gbo=o("imagegpt"),hbo=o(" \u2014 "),TN=a("a"),pbo=o("ImageGPTModel"),_bo=o(" (ImageGPT model)"),ubo=l(),Hp=a("li"),hle=a("strong"),bbo=o("layoutlm"),vbo=o(" \u2014 "),MN=a("a"),Fbo=o("LayoutLMModel"),Tbo=o(" (LayoutLM model)"),Mbo=l(),Up=a("li"),ple=a("strong"),Ebo=o("layoutlmv2"),Cbo=o(" \u2014 "),EN=a("a"),wbo=o("LayoutLMv2Model"),Abo=o(" (LayoutLMv2 model)"),ybo=l(),Jp=a("li"),_le=a("strong"),Lbo=o("layoutlmv3"),xbo=o(" \u2014 "),CN=a("a"),$bo=o("LayoutLMv3Model"),kbo=o(" (LayoutLMv3 model)"),Sbo=l(),Yp=a("li"),ule=a("strong"),Rbo=o("led"),Pbo=o(" \u2014 "),wN=a("a"),Bbo=o("LEDModel"),Ibo=o(" (LED model)"),Nbo=l(),Kp=a("li"),ble=a("strong"),qbo=o("longformer"),jbo=o(" \u2014 "),AN=a("a"),Dbo=o("LongformerModel"),Gbo=o(" (Longformer model)"),Obo=l(),Zp=a("li"),vle=a("strong"),Vbo=o("luke"),Xbo=o(" \u2014 "),yN=a("a"),zbo=o("LukeModel"),Wbo=o(" (LUKE model)"),Qbo=l(),e_=a("li"),Fle=a("strong"),Hbo=o("lxmert"),Ubo=o(" \u2014 "),LN=a("a"),Jbo=o("LxmertModel"),Ybo=o(" (LXMERT model)"),Kbo=l(),o_=a("li"),Tle=a("strong"),Zbo=o("m2m_100"),e2o=o(" \u2014 "),xN=a("a"),o2o=o("M2M100Model"),r2o=o(" (M2M100 model)"),t2o=l(),r_=a("li"),Mle=a("strong"),a2o=o("marian"),n2o=o(" \u2014 "),$N=a("a"),s2o=o("MarianModel"),l2o=o(" (Marian model)"),i2o=l(),t_=a("li"),Ele=a("strong"),d2o=o("maskformer"),c2o=o(" \u2014 "),kN=a("a"),f2o=o("MaskFormerModel"),m2o=o(" (MaskFormer model)"),g2o=l(),a_=a("li"),Cle=a("strong"),h2o=o("mbart"),p2o=o(" \u2014 "),SN=a("a"),_2o=o("MBartModel"),u2o=o(" (mBART model)"),b2o=l(),n_=a("li"),wle=a("strong"),v2o=o("megatron-bert"),F2o=o(" \u2014 "),RN=a("a"),T2o=o("MegatronBertModel"),M2o=o(" (MegatronBert model)"),E2o=l(),s_=a("li"),Ale=a("strong"),C2o=o("mobilebert"),w2o=o(" \u2014 "),PN=a("a"),A2o=o("MobileBertModel"),y2o=o(" (MobileBERT model)"),L2o=l(),l_=a("li"),yle=a("strong"),x2o=o("mpnet"),$2o=o(" \u2014 "),BN=a("a"),k2o=o("MPNetModel"),S2o=o(" (MPNet model)"),R2o=l(),i_=a("li"),Lle=a("strong"),P2o=o("mt5"),B2o=o(" \u2014 "),IN=a("a"),I2o=o("MT5Model"),N2o=o(" (mT5 model)"),q2o=l(),d_=a("li"),xle=a("strong"),j2o=o("nystromformer"),D2o=o(" \u2014 "),NN=a("a"),G2o=o("NystromformerModel"),O2o=o(" (Nystromformer model)"),V2o=l(),c_=a("li"),$le=a("strong"),X2o=o("openai-gpt"),z2o=o(" \u2014 "),qN=a("a"),W2o=o("OpenAIGPTModel"),Q2o=o(" (OpenAI GPT model)"),H2o=l(),f_=a("li"),kle=a("strong"),U2o=o("opt"),J2o=o(" \u2014 "),jN=a("a"),Y2o=o("OPTModel"),K2o=o(" (OPT model)"),Z2o=l(),m_=a("li"),Sle=a("strong"),e4o=o("pegasus"),o4o=o(" \u2014 "),DN=a("a"),r4o=o("PegasusModel"),t4o=o(" (Pegasus model)"),a4o=l(),g_=a("li"),Rle=a("strong"),n4o=o("perceiver"),s4o=o(" \u2014 "),GN=a("a"),l4o=o("PerceiverModel"),i4o=o(" (Perceiver model)"),d4o=l(),h_=a("li"),Ple=a("strong"),c4o=o("plbart"),f4o=o(" \u2014 "),ON=a("a"),m4o=o("PLBartModel"),g4o=o(" (PLBart model)"),h4o=l(),p_=a("li"),Ble=a("strong"),p4o=o("poolformer"),_4o=o(" \u2014 "),VN=a("a"),u4o=o("PoolFormerModel"),b4o=o(" (PoolFormer model)"),v4o=l(),__=a("li"),Ile=a("strong"),F4o=o("prophetnet"),T4o=o(" \u2014 "),XN=a("a"),M4o=o("ProphetNetModel"),E4o=o(" (ProphetNet model)"),C4o=l(),u_=a("li"),Nle=a("strong"),w4o=o("qdqbert"),A4o=o(" \u2014 "),zN=a("a"),y4o=o("QDQBertModel"),L4o=o(" (QDQBert model)"),x4o=l(),b_=a("li"),qle=a("strong"),$4o=o("reformer"),k4o=o(" \u2014 "),WN=a("a"),S4o=o("ReformerModel"),R4o=o(" (Reformer model)"),P4o=l(),v_=a("li"),jle=a("strong"),B4o=o("regnet"),I4o=o(" \u2014 "),QN=a("a"),N4o=o("RegNetModel"),q4o=o(" (RegNet model)"),j4o=l(),F_=a("li"),Dle=a("strong"),D4o=o("rembert"),G4o=o(" \u2014 "),HN=a("a"),O4o=o("RemBertModel"),V4o=o(" (RemBERT model)"),X4o=l(),T_=a("li"),Gle=a("strong"),z4o=o("resnet"),W4o=o(" \u2014 "),UN=a("a"),Q4o=o("ResNetModel"),H4o=o(" (ResNet model)"),U4o=l(),M_=a("li"),Ole=a("strong"),J4o=o("retribert"),Y4o=o(" \u2014 "),JN=a("a"),K4o=o("RetriBertModel"),Z4o=o(" (RetriBERT model)"),e5o=l(),E_=a("li"),Vle=a("strong"),o5o=o("roberta"),r5o=o(" \u2014 "),YN=a("a"),t5o=o("RobertaModel"),a5o=o(" (RoBERTa model)"),n5o=l(),C_=a("li"),Xle=a("strong"),s5o=o("roformer"),l5o=o(" \u2014 "),KN=a("a"),i5o=o("RoFormerModel"),d5o=o(" (RoFormer model)"),c5o=l(),w_=a("li"),zle=a("strong"),f5o=o("segformer"),m5o=o(" \u2014 "),ZN=a("a"),g5o=o("SegformerModel"),h5o=o(" (SegFormer model)"),p5o=l(),A_=a("li"),Wle=a("strong"),_5o=o("sew"),u5o=o(" \u2014 "),eq=a("a"),b5o=o("SEWModel"),v5o=o(" (SEW model)"),F5o=l(),y_=a("li"),Qle=a("strong"),T5o=o("sew-d"),M5o=o(" \u2014 "),oq=a("a"),E5o=o("SEWDModel"),C5o=o(" (SEW-D model)"),w5o=l(),L_=a("li"),Hle=a("strong"),A5o=o("speech_to_text"),y5o=o(" \u2014 "),rq=a("a"),L5o=o("Speech2TextModel"),x5o=o(" (Speech2Text model)"),$5o=l(),x_=a("li"),Ule=a("strong"),k5o=o("splinter"),S5o=o(" \u2014 "),tq=a("a"),R5o=o("SplinterModel"),P5o=o(" (Splinter model)"),B5o=l(),$_=a("li"),Jle=a("strong"),I5o=o("squeezebert"),N5o=o(" \u2014 "),aq=a("a"),q5o=o("SqueezeBertModel"),j5o=o(" (SqueezeBERT model)"),D5o=l(),k_=a("li"),Yle=a("strong"),G5o=o("swin"),O5o=o(" \u2014 "),nq=a("a"),V5o=o("SwinModel"),X5o=o(" (Swin model)"),z5o=l(),S_=a("li"),Kle=a("strong"),W5o=o("t5"),Q5o=o(" \u2014 "),sq=a("a"),H5o=o("T5Model"),U5o=o(" (T5 model)"),J5o=l(),R_=a("li"),Zle=a("strong"),Y5o=o("tapas"),K5o=o(" \u2014 "),lq=a("a"),Z5o=o("TapasModel"),evo=o(" (TAPAS model)"),ovo=l(),P_=a("li"),eie=a("strong"),rvo=o("trajectory_transformer"),tvo=o(" \u2014 "),iq=a("a"),avo=o("TrajectoryTransformerModel"),nvo=o(" (Trajectory Transformer model)"),svo=l(),B_=a("li"),oie=a("strong"),lvo=o("transfo-xl"),ivo=o(" \u2014 "),dq=a("a"),dvo=o("TransfoXLModel"),cvo=o(" (Transformer-XL model)"),fvo=l(),I_=a("li"),rie=a("strong"),mvo=o("unispeech"),gvo=o(" \u2014 "),cq=a("a"),hvo=o("UniSpeechModel"),pvo=o(" (UniSpeech model)"),_vo=l(),N_=a("li"),tie=a("strong"),uvo=o("unispeech-sat"),bvo=o(" \u2014 "),fq=a("a"),vvo=o("UniSpeechSatModel"),Fvo=o(" (UniSpeechSat model)"),Tvo=l(),q_=a("li"),aie=a("strong"),Mvo=o("van"),Evo=o(" \u2014 "),mq=a("a"),Cvo=o("VanModel"),wvo=o(" (VAN model)"),Avo=l(),j_=a("li"),nie=a("strong"),yvo=o("vilt"),Lvo=o(" \u2014 "),gq=a("a"),xvo=o("ViltModel"),$vo=o(" (ViLT model)"),kvo=l(),D_=a("li"),sie=a("strong"),Svo=o("vision-text-dual-encoder"),Rvo=o(" \u2014 "),hq=a("a"),Pvo=o("VisionTextDualEncoderModel"),Bvo=o(" (VisionTextDualEncoder model)"),Ivo=l(),G_=a("li"),lie=a("strong"),Nvo=o("visual_bert"),qvo=o(" \u2014 "),pq=a("a"),jvo=o("VisualBertModel"),Dvo=o(" (VisualBert model)"),Gvo=l(),O_=a("li"),iie=a("strong"),Ovo=o("vit"),Vvo=o(" \u2014 "),_q=a("a"),Xvo=o("ViTModel"),zvo=o(" (ViT model)"),Wvo=l(),V_=a("li"),die=a("strong"),Qvo=o("vit_mae"),Hvo=o(" \u2014 "),uq=a("a"),Uvo=o("ViTMAEModel"),Jvo=o(" (ViTMAE model)"),Yvo=l(),X_=a("li"),cie=a("strong"),Kvo=o("wav2vec2"),Zvo=o(" \u2014 "),bq=a("a"),e3o=o("Wav2Vec2Model"),o3o=o(" (Wav2Vec2 model)"),r3o=l(),z_=a("li"),fie=a("strong"),t3o=o("wav2vec2-conformer"),a3o=o(" \u2014 "),vq=a("a"),n3o=o("Wav2Vec2ConformerModel"),s3o=o(" (Wav2Vec2-Conformer model)"),l3o=l(),W_=a("li"),mie=a("strong"),i3o=o("wavlm"),d3o=o(" \u2014 "),Fq=a("a"),c3o=o("WavLMModel"),f3o=o(" (WavLM model)"),m3o=l(),Q_=a("li"),gie=a("strong"),g3o=o("xglm"),h3o=o(" \u2014 "),Tq=a("a"),p3o=o("XGLMModel"),_3o=o(" (XGLM model)"),u3o=l(),H_=a("li"),hie=a("strong"),b3o=o("xlm"),v3o=o(" \u2014 "),Mq=a("a"),F3o=o("XLMModel"),T3o=o(" (XLM model)"),M3o=l(),U_=a("li"),pie=a("strong"),E3o=o("xlm-prophetnet"),C3o=o(" \u2014 "),Eq=a("a"),w3o=o("XLMProphetNetModel"),A3o=o(" (XLMProphetNet model)"),y3o=l(),J_=a("li"),_ie=a("strong"),L3o=o("xlm-roberta"),x3o=o(" \u2014 "),Cq=a("a"),$3o=o("XLMRobertaModel"),k3o=o(" (XLM-RoBERTa model)"),S3o=l(),Y_=a("li"),uie=a("strong"),R3o=o("xlm-roberta-xl"),P3o=o(" \u2014 "),wq=a("a"),B3o=o("XLMRobertaXLModel"),I3o=o(" (XLM-RoBERTa-XL model)"),N3o=l(),K_=a("li"),bie=a("strong"),q3o=o("xlnet"),j3o=o(" \u2014 "),Aq=a("a"),D3o=o("XLNetModel"),G3o=o(" (XLNet model)"),O3o=l(),Z_=a("li"),vie=a("strong"),V3o=o("yolos"),X3o=o(" \u2014 "),yq=a("a"),z3o=o("YolosModel"),W3o=o(" (YOLOS model)"),Q3o=l(),eu=a("li"),Fie=a("strong"),H3o=o("yoso"),U3o=o(" \u2014 "),Lq=a("a"),J3o=o("YosoModel"),Y3o=o(" (YOSO model)"),K3o=l(),ou=a("p"),Z3o=o("The model is set in evaluation mode by default using "),Tie=a("code"),eFo=o("model.eval()"),oFo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mie=a("code"),rFo=o("model.train()"),tFo=l(),F(ru.$$.fragment),Tqe=l(),Li=a("h2"),tu=a("a"),Eie=a("span"),F(sL.$$.fragment),aFo=l(),Cie=a("span"),nFo=o("AutoModelForPreTraining"),Mqe=l(),xo=a("div"),F(lL.$$.fragment),sFo=l(),xi=a("p"),lFo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),xq=a("a"),iFo=o("from_pretrained()"),dFo=o(" class method or the "),$q=a("a"),cFo=o("from_config()"),fFo=o(` class
method.`),mFo=l(),iL=a("p"),gFo=o("This class cannot be instantiated directly using "),wie=a("code"),hFo=o("__init__()"),pFo=o(" (throws an error)."),_Fo=l(),at=a("div"),F(dL.$$.fragment),uFo=l(),Aie=a("p"),bFo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),vFo=l(),$i=a("p"),FFo=o(`Note:
Loading a model from its configuration file does `),yie=a("strong"),TFo=o("not"),MFo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kq=a("a"),EFo=o("from_pretrained()"),CFo=o(" to load the model weights."),wFo=l(),F(au.$$.fragment),AFo=l(),Ye=a("div"),F(cL.$$.fragment),yFo=l(),Lie=a("p"),LFo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),xFo=l(),xa=a("p"),$Fo=o("The model class to instantiate is selected based on the "),xie=a("code"),kFo=o("model_type"),SFo=o(` property of the config object (either
passed as an argument or loaded from `),$ie=a("code"),RFo=o("pretrained_model_name_or_path"),PFo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kie=a("code"),BFo=o("pretrained_model_name_or_path"),IFo=o(":"),NFo=l(),G=a("ul"),nu=a("li"),Sie=a("strong"),qFo=o("albert"),jFo=o(" \u2014 "),Sq=a("a"),DFo=o("AlbertForPreTraining"),GFo=o(" (ALBERT model)"),OFo=l(),su=a("li"),Rie=a("strong"),VFo=o("bart"),XFo=o(" \u2014 "),Rq=a("a"),zFo=o("BartForConditionalGeneration"),WFo=o(" (BART model)"),QFo=l(),lu=a("li"),Pie=a("strong"),HFo=o("bert"),UFo=o(" \u2014 "),Pq=a("a"),JFo=o("BertForPreTraining"),YFo=o(" (BERT model)"),KFo=l(),iu=a("li"),Bie=a("strong"),ZFo=o("big_bird"),e6o=o(" \u2014 "),Bq=a("a"),o6o=o("BigBirdForPreTraining"),r6o=o(" (BigBird model)"),t6o=l(),du=a("li"),Iie=a("strong"),a6o=o("camembert"),n6o=o(" \u2014 "),Iq=a("a"),s6o=o("CamembertForMaskedLM"),l6o=o(" (CamemBERT model)"),i6o=l(),cu=a("li"),Nie=a("strong"),d6o=o("ctrl"),c6o=o(" \u2014 "),Nq=a("a"),f6o=o("CTRLLMHeadModel"),m6o=o(" (CTRL model)"),g6o=l(),fu=a("li"),qie=a("strong"),h6o=o("data2vec-text"),p6o=o(" \u2014 "),qq=a("a"),_6o=o("Data2VecTextForMaskedLM"),u6o=o(" (Data2VecText model)"),b6o=l(),mu=a("li"),jie=a("strong"),v6o=o("deberta"),F6o=o(" \u2014 "),jq=a("a"),T6o=o("DebertaForMaskedLM"),M6o=o(" (DeBERTa model)"),E6o=l(),gu=a("li"),Die=a("strong"),C6o=o("deberta-v2"),w6o=o(" \u2014 "),Dq=a("a"),A6o=o("DebertaV2ForMaskedLM"),y6o=o(" (DeBERTa-v2 model)"),L6o=l(),hu=a("li"),Gie=a("strong"),x6o=o("distilbert"),$6o=o(" \u2014 "),Gq=a("a"),k6o=o("DistilBertForMaskedLM"),S6o=o(" (DistilBERT model)"),R6o=l(),pu=a("li"),Oie=a("strong"),P6o=o("electra"),B6o=o(" \u2014 "),Oq=a("a"),I6o=o("ElectraForPreTraining"),N6o=o(" (ELECTRA model)"),q6o=l(),_u=a("li"),Vie=a("strong"),j6o=o("flaubert"),D6o=o(" \u2014 "),Vq=a("a"),G6o=o("FlaubertWithLMHeadModel"),O6o=o(" (FlauBERT model)"),V6o=l(),uu=a("li"),Xie=a("strong"),X6o=o("flava"),z6o=o(" \u2014 "),Xq=a("a"),W6o=o("FlavaForPreTraining"),Q6o=o(" (Flava model)"),H6o=l(),bu=a("li"),zie=a("strong"),U6o=o("fnet"),J6o=o(" \u2014 "),zq=a("a"),Y6o=o("FNetForPreTraining"),K6o=o(" (FNet model)"),Z6o=l(),vu=a("li"),Wie=a("strong"),eTo=o("fsmt"),oTo=o(" \u2014 "),Wq=a("a"),rTo=o("FSMTForConditionalGeneration"),tTo=o(" (FairSeq Machine-Translation model)"),aTo=l(),Fu=a("li"),Qie=a("strong"),nTo=o("funnel"),sTo=o(" \u2014 "),Qq=a("a"),lTo=o("FunnelForPreTraining"),iTo=o(" (Funnel Transformer model)"),dTo=l(),Tu=a("li"),Hie=a("strong"),cTo=o("gpt2"),fTo=o(" \u2014 "),Hq=a("a"),mTo=o("GPT2LMHeadModel"),gTo=o(" (OpenAI GPT-2 model)"),hTo=l(),Mu=a("li"),Uie=a("strong"),pTo=o("ibert"),_To=o(" \u2014 "),Uq=a("a"),uTo=o("IBertForMaskedLM"),bTo=o(" (I-BERT model)"),vTo=l(),Eu=a("li"),Jie=a("strong"),FTo=o("layoutlm"),TTo=o(" \u2014 "),Jq=a("a"),MTo=o("LayoutLMForMaskedLM"),ETo=o(" (LayoutLM model)"),CTo=l(),Cu=a("li"),Yie=a("strong"),wTo=o("longformer"),ATo=o(" \u2014 "),Yq=a("a"),yTo=o("LongformerForMaskedLM"),LTo=o(" (Longformer model)"),xTo=l(),wu=a("li"),Kie=a("strong"),$To=o("lxmert"),kTo=o(" \u2014 "),Kq=a("a"),STo=o("LxmertForPreTraining"),RTo=o(" (LXMERT model)"),PTo=l(),Au=a("li"),Zie=a("strong"),BTo=o("megatron-bert"),ITo=o(" \u2014 "),Zq=a("a"),NTo=o("MegatronBertForPreTraining"),qTo=o(" (MegatronBert model)"),jTo=l(),yu=a("li"),ede=a("strong"),DTo=o("mobilebert"),GTo=o(" \u2014 "),ej=a("a"),OTo=o("MobileBertForPreTraining"),VTo=o(" (MobileBERT model)"),XTo=l(),Lu=a("li"),ode=a("strong"),zTo=o("mpnet"),WTo=o(" \u2014 "),oj=a("a"),QTo=o("MPNetForMaskedLM"),HTo=o(" (MPNet model)"),UTo=l(),xu=a("li"),rde=a("strong"),JTo=o("openai-gpt"),YTo=o(" \u2014 "),rj=a("a"),KTo=o("OpenAIGPTLMHeadModel"),ZTo=o(" (OpenAI GPT model)"),eMo=l(),$u=a("li"),tde=a("strong"),oMo=o("retribert"),rMo=o(" \u2014 "),tj=a("a"),tMo=o("RetriBertModel"),aMo=o(" (RetriBERT model)"),nMo=l(),ku=a("li"),ade=a("strong"),sMo=o("roberta"),lMo=o(" \u2014 "),aj=a("a"),iMo=o("RobertaForMaskedLM"),dMo=o(" (RoBERTa model)"),cMo=l(),Su=a("li"),nde=a("strong"),fMo=o("splinter"),mMo=o(" \u2014 "),nj=a("a"),gMo=o("SplinterForPreTraining"),hMo=o(" (Splinter model)"),pMo=l(),Ru=a("li"),sde=a("strong"),_Mo=o("squeezebert"),uMo=o(" \u2014 "),sj=a("a"),bMo=o("SqueezeBertForMaskedLM"),vMo=o(" (SqueezeBERT model)"),FMo=l(),Pu=a("li"),lde=a("strong"),TMo=o("t5"),MMo=o(" \u2014 "),lj=a("a"),EMo=o("T5ForConditionalGeneration"),CMo=o(" (T5 model)"),wMo=l(),Bu=a("li"),ide=a("strong"),AMo=o("tapas"),yMo=o(" \u2014 "),ij=a("a"),LMo=o("TapasForMaskedLM"),xMo=o(" (TAPAS model)"),$Mo=l(),Iu=a("li"),dde=a("strong"),kMo=o("transfo-xl"),SMo=o(" \u2014 "),dj=a("a"),RMo=o("TransfoXLLMHeadModel"),PMo=o(" (Transformer-XL model)"),BMo=l(),Nu=a("li"),cde=a("strong"),IMo=o("unispeech"),NMo=o(" \u2014 "),cj=a("a"),qMo=o("UniSpeechForPreTraining"),jMo=o(" (UniSpeech model)"),DMo=l(),qu=a("li"),fde=a("strong"),GMo=o("unispeech-sat"),OMo=o(" \u2014 "),fj=a("a"),VMo=o("UniSpeechSatForPreTraining"),XMo=o(" (UniSpeechSat model)"),zMo=l(),ju=a("li"),mde=a("strong"),WMo=o("visual_bert"),QMo=o(" \u2014 "),mj=a("a"),HMo=o("VisualBertForPreTraining"),UMo=o(" (VisualBert model)"),JMo=l(),Du=a("li"),gde=a("strong"),YMo=o("vit_mae"),KMo=o(" \u2014 "),gj=a("a"),ZMo=o("ViTMAEForPreTraining"),eEo=o(" (ViTMAE model)"),oEo=l(),Gu=a("li"),hde=a("strong"),rEo=o("wav2vec2"),tEo=o(" \u2014 "),hj=a("a"),aEo=o("Wav2Vec2ForPreTraining"),nEo=o(" (Wav2Vec2 model)"),sEo=l(),Ou=a("li"),pde=a("strong"),lEo=o("wav2vec2-conformer"),iEo=o(" \u2014 "),pj=a("a"),dEo=o("Wav2Vec2ConformerForPreTraining"),cEo=o(" (Wav2Vec2-Conformer model)"),fEo=l(),Vu=a("li"),_de=a("strong"),mEo=o("xlm"),gEo=o(" \u2014 "),_j=a("a"),hEo=o("XLMWithLMHeadModel"),pEo=o(" (XLM model)"),_Eo=l(),Xu=a("li"),ude=a("strong"),uEo=o("xlm-roberta"),bEo=o(" \u2014 "),uj=a("a"),vEo=o("XLMRobertaForMaskedLM"),FEo=o(" (XLM-RoBERTa model)"),TEo=l(),zu=a("li"),bde=a("strong"),MEo=o("xlm-roberta-xl"),EEo=o(" \u2014 "),bj=a("a"),CEo=o("XLMRobertaXLForMaskedLM"),wEo=o(" (XLM-RoBERTa-XL model)"),AEo=l(),Wu=a("li"),vde=a("strong"),yEo=o("xlnet"),LEo=o(" \u2014 "),vj=a("a"),xEo=o("XLNetLMHeadModel"),$Eo=o(" (XLNet model)"),kEo=l(),Qu=a("p"),SEo=o("The model is set in evaluation mode by default using "),Fde=a("code"),REo=o("model.eval()"),PEo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tde=a("code"),BEo=o("model.train()"),IEo=l(),F(Hu.$$.fragment),Eqe=l(),ki=a("h2"),Uu=a("a"),Mde=a("span"),F(fL.$$.fragment),NEo=l(),Ede=a("span"),qEo=o("AutoModelForCausalLM"),Cqe=l(),$o=a("div"),F(mL.$$.fragment),jEo=l(),Si=a("p"),DEo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Fj=a("a"),GEo=o("from_pretrained()"),OEo=o(" class method or the "),Tj=a("a"),VEo=o("from_config()"),XEo=o(` class
method.`),zEo=l(),gL=a("p"),WEo=o("This class cannot be instantiated directly using "),Cde=a("code"),QEo=o("__init__()"),HEo=o(" (throws an error)."),UEo=l(),nt=a("div"),F(hL.$$.fragment),JEo=l(),wde=a("p"),YEo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),KEo=l(),Ri=a("p"),ZEo=o(`Note:
Loading a model from its configuration file does `),Ade=a("strong"),eCo=o("not"),oCo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Mj=a("a"),rCo=o("from_pretrained()"),tCo=o(" to load the model weights."),aCo=l(),F(Ju.$$.fragment),nCo=l(),Ke=a("div"),F(pL.$$.fragment),sCo=l(),yde=a("p"),lCo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),iCo=l(),$a=a("p"),dCo=o("The model class to instantiate is selected based on the "),Lde=a("code"),cCo=o("model_type"),fCo=o(` property of the config object (either
passed as an argument or loaded from `),xde=a("code"),mCo=o("pretrained_model_name_or_path"),gCo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$de=a("code"),hCo=o("pretrained_model_name_or_path"),pCo=o(":"),_Co=l(),z=a("ul"),Yu=a("li"),kde=a("strong"),uCo=o("bart"),bCo=o(" \u2014 "),Ej=a("a"),vCo=o("BartForCausalLM"),FCo=o(" (BART model)"),TCo=l(),Ku=a("li"),Sde=a("strong"),MCo=o("bert"),ECo=o(" \u2014 "),Cj=a("a"),CCo=o("BertLMHeadModel"),wCo=o(" (BERT model)"),ACo=l(),Zu=a("li"),Rde=a("strong"),yCo=o("bert-generation"),LCo=o(" \u2014 "),wj=a("a"),xCo=o("BertGenerationDecoder"),$Co=o(" (Bert Generation model)"),kCo=l(),e1=a("li"),Pde=a("strong"),SCo=o("big_bird"),RCo=o(" \u2014 "),Aj=a("a"),PCo=o("BigBirdForCausalLM"),BCo=o(" (BigBird model)"),ICo=l(),o1=a("li"),Bde=a("strong"),NCo=o("bigbird_pegasus"),qCo=o(" \u2014 "),yj=a("a"),jCo=o("BigBirdPegasusForCausalLM"),DCo=o(" (BigBirdPegasus model)"),GCo=l(),r1=a("li"),Ide=a("strong"),OCo=o("blenderbot"),VCo=o(" \u2014 "),Lj=a("a"),XCo=o("BlenderbotForCausalLM"),zCo=o(" (Blenderbot model)"),WCo=l(),t1=a("li"),Nde=a("strong"),QCo=o("blenderbot-small"),HCo=o(" \u2014 "),xj=a("a"),UCo=o("BlenderbotSmallForCausalLM"),JCo=o(" (BlenderbotSmall model)"),YCo=l(),a1=a("li"),qde=a("strong"),KCo=o("camembert"),ZCo=o(" \u2014 "),$j=a("a"),ewo=o("CamembertForCausalLM"),owo=o(" (CamemBERT model)"),rwo=l(),n1=a("li"),jde=a("strong"),two=o("ctrl"),awo=o(" \u2014 "),kj=a("a"),nwo=o("CTRLLMHeadModel"),swo=o(" (CTRL model)"),lwo=l(),s1=a("li"),Dde=a("strong"),iwo=o("data2vec-text"),dwo=o(" \u2014 "),Sj=a("a"),cwo=o("Data2VecTextForCausalLM"),fwo=o(" (Data2VecText model)"),mwo=l(),l1=a("li"),Gde=a("strong"),gwo=o("electra"),hwo=o(" \u2014 "),Rj=a("a"),pwo=o("ElectraForCausalLM"),_wo=o(" (ELECTRA model)"),uwo=l(),i1=a("li"),Ode=a("strong"),bwo=o("gpt2"),vwo=o(" \u2014 "),Pj=a("a"),Fwo=o("GPT2LMHeadModel"),Two=o(" (OpenAI GPT-2 model)"),Mwo=l(),d1=a("li"),Vde=a("strong"),Ewo=o("gpt_neo"),Cwo=o(" \u2014 "),Bj=a("a"),wwo=o("GPTNeoForCausalLM"),Awo=o(" (GPT Neo model)"),ywo=l(),c1=a("li"),Xde=a("strong"),Lwo=o("gpt_neox"),xwo=o(" \u2014 "),Ij=a("a"),$wo=o("GPTNeoXForCausalLM"),kwo=o(" (GPT NeoX model)"),Swo=l(),f1=a("li"),zde=a("strong"),Rwo=o("gptj"),Pwo=o(" \u2014 "),Nj=a("a"),Bwo=o("GPTJForCausalLM"),Iwo=o(" (GPT-J model)"),Nwo=l(),m1=a("li"),Wde=a("strong"),qwo=o("marian"),jwo=o(" \u2014 "),qj=a("a"),Dwo=o("MarianForCausalLM"),Gwo=o(" (Marian model)"),Owo=l(),g1=a("li"),Qde=a("strong"),Vwo=o("mbart"),Xwo=o(" \u2014 "),jj=a("a"),zwo=o("MBartForCausalLM"),Wwo=o(" (mBART model)"),Qwo=l(),h1=a("li"),Hde=a("strong"),Hwo=o("megatron-bert"),Uwo=o(" \u2014 "),Dj=a("a"),Jwo=o("MegatronBertForCausalLM"),Ywo=o(" (MegatronBert model)"),Kwo=l(),p1=a("li"),Ude=a("strong"),Zwo=o("openai-gpt"),e0o=o(" \u2014 "),Gj=a("a"),o0o=o("OpenAIGPTLMHeadModel"),r0o=o(" (OpenAI GPT model)"),t0o=l(),_1=a("li"),Jde=a("strong"),a0o=o("opt"),n0o=o(" \u2014 "),Oj=a("a"),s0o=o("OPTForCausalLM"),l0o=o(" (OPT model)"),i0o=l(),u1=a("li"),Yde=a("strong"),d0o=o("pegasus"),c0o=o(" \u2014 "),Vj=a("a"),f0o=o("PegasusForCausalLM"),m0o=o(" (Pegasus model)"),g0o=l(),b1=a("li"),Kde=a("strong"),h0o=o("plbart"),p0o=o(" \u2014 "),Xj=a("a"),_0o=o("PLBartForCausalLM"),u0o=o(" (PLBart model)"),b0o=l(),v1=a("li"),Zde=a("strong"),v0o=o("prophetnet"),F0o=o(" \u2014 "),zj=a("a"),T0o=o("ProphetNetForCausalLM"),M0o=o(" (ProphetNet model)"),E0o=l(),F1=a("li"),ece=a("strong"),C0o=o("qdqbert"),w0o=o(" \u2014 "),Wj=a("a"),A0o=o("QDQBertLMHeadModel"),y0o=o(" (QDQBert model)"),L0o=l(),T1=a("li"),oce=a("strong"),x0o=o("reformer"),$0o=o(" \u2014 "),Qj=a("a"),k0o=o("ReformerModelWithLMHead"),S0o=o(" (Reformer model)"),R0o=l(),M1=a("li"),rce=a("strong"),P0o=o("rembert"),B0o=o(" \u2014 "),Hj=a("a"),I0o=o("RemBertForCausalLM"),N0o=o(" (RemBERT model)"),q0o=l(),E1=a("li"),tce=a("strong"),j0o=o("roberta"),D0o=o(" \u2014 "),Uj=a("a"),G0o=o("RobertaForCausalLM"),O0o=o(" (RoBERTa model)"),V0o=l(),C1=a("li"),ace=a("strong"),X0o=o("roformer"),z0o=o(" \u2014 "),Jj=a("a"),W0o=o("RoFormerForCausalLM"),Q0o=o(" (RoFormer model)"),H0o=l(),w1=a("li"),nce=a("strong"),U0o=o("speech_to_text_2"),J0o=o(" \u2014 "),Yj=a("a"),Y0o=o("Speech2Text2ForCausalLM"),K0o=o(" (Speech2Text2 model)"),Z0o=l(),A1=a("li"),sce=a("strong"),eAo=o("transfo-xl"),oAo=o(" \u2014 "),Kj=a("a"),rAo=o("TransfoXLLMHeadModel"),tAo=o(" (Transformer-XL model)"),aAo=l(),y1=a("li"),lce=a("strong"),nAo=o("trocr"),sAo=o(" \u2014 "),Zj=a("a"),lAo=o("TrOCRForCausalLM"),iAo=o(" (TrOCR model)"),dAo=l(),L1=a("li"),ice=a("strong"),cAo=o("xglm"),fAo=o(" \u2014 "),eD=a("a"),mAo=o("XGLMForCausalLM"),gAo=o(" (XGLM model)"),hAo=l(),x1=a("li"),dce=a("strong"),pAo=o("xlm"),_Ao=o(" \u2014 "),oD=a("a"),uAo=o("XLMWithLMHeadModel"),bAo=o(" (XLM model)"),vAo=l(),$1=a("li"),cce=a("strong"),FAo=o("xlm-prophetnet"),TAo=o(" \u2014 "),rD=a("a"),MAo=o("XLMProphetNetForCausalLM"),EAo=o(" (XLMProphetNet model)"),CAo=l(),k1=a("li"),fce=a("strong"),wAo=o("xlm-roberta"),AAo=o(" \u2014 "),tD=a("a"),yAo=o("XLMRobertaForCausalLM"),LAo=o(" (XLM-RoBERTa model)"),xAo=l(),S1=a("li"),mce=a("strong"),$Ao=o("xlm-roberta-xl"),kAo=o(" \u2014 "),aD=a("a"),SAo=o("XLMRobertaXLForCausalLM"),RAo=o(" (XLM-RoBERTa-XL model)"),PAo=l(),R1=a("li"),gce=a("strong"),BAo=o("xlnet"),IAo=o(" \u2014 "),nD=a("a"),NAo=o("XLNetLMHeadModel"),qAo=o(" (XLNet model)"),jAo=l(),P1=a("p"),DAo=o("The model is set in evaluation mode by default using "),hce=a("code"),GAo=o("model.eval()"),OAo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pce=a("code"),VAo=o("model.train()"),XAo=l(),F(B1.$$.fragment),wqe=l(),Pi=a("h2"),I1=a("a"),_ce=a("span"),F(_L.$$.fragment),zAo=l(),uce=a("span"),WAo=o("AutoModelForMaskedLM"),Aqe=l(),ko=a("div"),F(uL.$$.fragment),QAo=l(),Bi=a("p"),HAo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),sD=a("a"),UAo=o("from_pretrained()"),JAo=o(" class method or the "),lD=a("a"),YAo=o("from_config()"),KAo=o(` class
method.`),ZAo=l(),bL=a("p"),eyo=o("This class cannot be instantiated directly using "),bce=a("code"),oyo=o("__init__()"),ryo=o(" (throws an error)."),tyo=l(),st=a("div"),F(vL.$$.fragment),ayo=l(),vce=a("p"),nyo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),syo=l(),Ii=a("p"),lyo=o(`Note:
Loading a model from its configuration file does `),Fce=a("strong"),iyo=o("not"),dyo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iD=a("a"),cyo=o("from_pretrained()"),fyo=o(" to load the model weights."),myo=l(),F(N1.$$.fragment),gyo=l(),Ze=a("div"),F(FL.$$.fragment),hyo=l(),Tce=a("p"),pyo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),_yo=l(),ka=a("p"),uyo=o("The model class to instantiate is selected based on the "),Mce=a("code"),byo=o("model_type"),vyo=o(` property of the config object (either
passed as an argument or loaded from `),Ece=a("code"),Fyo=o("pretrained_model_name_or_path"),Tyo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cce=a("code"),Myo=o("pretrained_model_name_or_path"),Eyo=o(":"),Cyo=l(),Q=a("ul"),q1=a("li"),wce=a("strong"),wyo=o("albert"),Ayo=o(" \u2014 "),dD=a("a"),yyo=o("AlbertForMaskedLM"),Lyo=o(" (ALBERT model)"),xyo=l(),j1=a("li"),Ace=a("strong"),$yo=o("bart"),kyo=o(" \u2014 "),cD=a("a"),Syo=o("BartForConditionalGeneration"),Ryo=o(" (BART model)"),Pyo=l(),D1=a("li"),yce=a("strong"),Byo=o("bert"),Iyo=o(" \u2014 "),fD=a("a"),Nyo=o("BertForMaskedLM"),qyo=o(" (BERT model)"),jyo=l(),G1=a("li"),Lce=a("strong"),Dyo=o("big_bird"),Gyo=o(" \u2014 "),mD=a("a"),Oyo=o("BigBirdForMaskedLM"),Vyo=o(" (BigBird model)"),Xyo=l(),O1=a("li"),xce=a("strong"),zyo=o("camembert"),Wyo=o(" \u2014 "),gD=a("a"),Qyo=o("CamembertForMaskedLM"),Hyo=o(" (CamemBERT model)"),Uyo=l(),V1=a("li"),$ce=a("strong"),Jyo=o("convbert"),Yyo=o(" \u2014 "),hD=a("a"),Kyo=o("ConvBertForMaskedLM"),Zyo=o(" (ConvBERT model)"),eLo=l(),X1=a("li"),kce=a("strong"),oLo=o("data2vec-text"),rLo=o(" \u2014 "),pD=a("a"),tLo=o("Data2VecTextForMaskedLM"),aLo=o(" (Data2VecText model)"),nLo=l(),z1=a("li"),Sce=a("strong"),sLo=o("deberta"),lLo=o(" \u2014 "),_D=a("a"),iLo=o("DebertaForMaskedLM"),dLo=o(" (DeBERTa model)"),cLo=l(),W1=a("li"),Rce=a("strong"),fLo=o("deberta-v2"),mLo=o(" \u2014 "),uD=a("a"),gLo=o("DebertaV2ForMaskedLM"),hLo=o(" (DeBERTa-v2 model)"),pLo=l(),Q1=a("li"),Pce=a("strong"),_Lo=o("distilbert"),uLo=o(" \u2014 "),bD=a("a"),bLo=o("DistilBertForMaskedLM"),vLo=o(" (DistilBERT model)"),FLo=l(),H1=a("li"),Bce=a("strong"),TLo=o("electra"),MLo=o(" \u2014 "),vD=a("a"),ELo=o("ElectraForMaskedLM"),CLo=o(" (ELECTRA model)"),wLo=l(),U1=a("li"),Ice=a("strong"),ALo=o("flaubert"),yLo=o(" \u2014 "),FD=a("a"),LLo=o("FlaubertWithLMHeadModel"),xLo=o(" (FlauBERT model)"),$Lo=l(),J1=a("li"),Nce=a("strong"),kLo=o("fnet"),SLo=o(" \u2014 "),TD=a("a"),RLo=o("FNetForMaskedLM"),PLo=o(" (FNet model)"),BLo=l(),Y1=a("li"),qce=a("strong"),ILo=o("funnel"),NLo=o(" \u2014 "),MD=a("a"),qLo=o("FunnelForMaskedLM"),jLo=o(" (Funnel Transformer model)"),DLo=l(),K1=a("li"),jce=a("strong"),GLo=o("ibert"),OLo=o(" \u2014 "),ED=a("a"),VLo=o("IBertForMaskedLM"),XLo=o(" (I-BERT model)"),zLo=l(),Z1=a("li"),Dce=a("strong"),WLo=o("layoutlm"),QLo=o(" \u2014 "),CD=a("a"),HLo=o("LayoutLMForMaskedLM"),ULo=o(" (LayoutLM model)"),JLo=l(),eb=a("li"),Gce=a("strong"),YLo=o("longformer"),KLo=o(" \u2014 "),wD=a("a"),ZLo=o("LongformerForMaskedLM"),e8o=o(" (Longformer model)"),o8o=l(),ob=a("li"),Oce=a("strong"),r8o=o("mbart"),t8o=o(" \u2014 "),AD=a("a"),a8o=o("MBartForConditionalGeneration"),n8o=o(" (mBART model)"),s8o=l(),rb=a("li"),Vce=a("strong"),l8o=o("megatron-bert"),i8o=o(" \u2014 "),yD=a("a"),d8o=o("MegatronBertForMaskedLM"),c8o=o(" (MegatronBert model)"),f8o=l(),tb=a("li"),Xce=a("strong"),m8o=o("mobilebert"),g8o=o(" \u2014 "),LD=a("a"),h8o=o("MobileBertForMaskedLM"),p8o=o(" (MobileBERT model)"),_8o=l(),ab=a("li"),zce=a("strong"),u8o=o("mpnet"),b8o=o(" \u2014 "),xD=a("a"),v8o=o("MPNetForMaskedLM"),F8o=o(" (MPNet model)"),T8o=l(),nb=a("li"),Wce=a("strong"),M8o=o("nystromformer"),E8o=o(" \u2014 "),$D=a("a"),C8o=o("NystromformerForMaskedLM"),w8o=o(" (Nystromformer model)"),A8o=l(),sb=a("li"),Qce=a("strong"),y8o=o("perceiver"),L8o=o(" \u2014 "),kD=a("a"),x8o=o("PerceiverForMaskedLM"),$8o=o(" (Perceiver model)"),k8o=l(),lb=a("li"),Hce=a("strong"),S8o=o("qdqbert"),R8o=o(" \u2014 "),SD=a("a"),P8o=o("QDQBertForMaskedLM"),B8o=o(" (QDQBert model)"),I8o=l(),ib=a("li"),Uce=a("strong"),N8o=o("reformer"),q8o=o(" \u2014 "),RD=a("a"),j8o=o("ReformerForMaskedLM"),D8o=o(" (Reformer model)"),G8o=l(),db=a("li"),Jce=a("strong"),O8o=o("rembert"),V8o=o(" \u2014 "),PD=a("a"),X8o=o("RemBertForMaskedLM"),z8o=o(" (RemBERT model)"),W8o=l(),cb=a("li"),Yce=a("strong"),Q8o=o("roberta"),H8o=o(" \u2014 "),BD=a("a"),U8o=o("RobertaForMaskedLM"),J8o=o(" (RoBERTa model)"),Y8o=l(),fb=a("li"),Kce=a("strong"),K8o=o("roformer"),Z8o=o(" \u2014 "),ID=a("a"),e7o=o("RoFormerForMaskedLM"),o7o=o(" (RoFormer model)"),r7o=l(),mb=a("li"),Zce=a("strong"),t7o=o("squeezebert"),a7o=o(" \u2014 "),ND=a("a"),n7o=o("SqueezeBertForMaskedLM"),s7o=o(" (SqueezeBERT model)"),l7o=l(),gb=a("li"),efe=a("strong"),i7o=o("tapas"),d7o=o(" \u2014 "),qD=a("a"),c7o=o("TapasForMaskedLM"),f7o=o(" (TAPAS model)"),m7o=l(),hb=a("li"),ofe=a("strong"),g7o=o("wav2vec2"),h7o=o(" \u2014 "),rfe=a("code"),p7o=o("Wav2Vec2ForMaskedLM"),_7o=o(" (Wav2Vec2 model)"),u7o=l(),pb=a("li"),tfe=a("strong"),b7o=o("xlm"),v7o=o(" \u2014 "),jD=a("a"),F7o=o("XLMWithLMHeadModel"),T7o=o(" (XLM model)"),M7o=l(),_b=a("li"),afe=a("strong"),E7o=o("xlm-roberta"),C7o=o(" \u2014 "),DD=a("a"),w7o=o("XLMRobertaForMaskedLM"),A7o=o(" (XLM-RoBERTa model)"),y7o=l(),ub=a("li"),nfe=a("strong"),L7o=o("xlm-roberta-xl"),x7o=o(" \u2014 "),GD=a("a"),$7o=o("XLMRobertaXLForMaskedLM"),k7o=o(" (XLM-RoBERTa-XL model)"),S7o=l(),bb=a("li"),sfe=a("strong"),R7o=o("yoso"),P7o=o(" \u2014 "),OD=a("a"),B7o=o("YosoForMaskedLM"),I7o=o(" (YOSO model)"),N7o=l(),vb=a("p"),q7o=o("The model is set in evaluation mode by default using "),lfe=a("code"),j7o=o("model.eval()"),D7o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ife=a("code"),G7o=o("model.train()"),O7o=l(),F(Fb.$$.fragment),yqe=l(),Ni=a("h2"),Tb=a("a"),dfe=a("span"),F(TL.$$.fragment),V7o=l(),cfe=a("span"),X7o=o("AutoModelForSeq2SeqLM"),Lqe=l(),So=a("div"),F(ML.$$.fragment),z7o=l(),qi=a("p"),W7o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),VD=a("a"),Q7o=o("from_pretrained()"),H7o=o(" class method or the "),XD=a("a"),U7o=o("from_config()"),J7o=o(` class
method.`),Y7o=l(),EL=a("p"),K7o=o("This class cannot be instantiated directly using "),ffe=a("code"),Z7o=o("__init__()"),e9o=o(" (throws an error)."),o9o=l(),lt=a("div"),F(CL.$$.fragment),r9o=l(),mfe=a("p"),t9o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),a9o=l(),ji=a("p"),n9o=o(`Note:
Loading a model from its configuration file does `),gfe=a("strong"),s9o=o("not"),l9o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zD=a("a"),i9o=o("from_pretrained()"),d9o=o(" to load the model weights."),c9o=l(),F(Mb.$$.fragment),f9o=l(),eo=a("div"),F(wL.$$.fragment),m9o=l(),hfe=a("p"),g9o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),h9o=l(),Sa=a("p"),p9o=o("The model class to instantiate is selected based on the "),pfe=a("code"),_9o=o("model_type"),u9o=o(` property of the config object (either
passed as an argument or loaded from `),_fe=a("code"),b9o=o("pretrained_model_name_or_path"),v9o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ufe=a("code"),F9o=o("pretrained_model_name_or_path"),T9o=o(":"),M9o=l(),_e=a("ul"),Eb=a("li"),bfe=a("strong"),E9o=o("bart"),C9o=o(" \u2014 "),WD=a("a"),w9o=o("BartForConditionalGeneration"),A9o=o(" (BART model)"),y9o=l(),Cb=a("li"),vfe=a("strong"),L9o=o("bigbird_pegasus"),x9o=o(" \u2014 "),QD=a("a"),$9o=o("BigBirdPegasusForConditionalGeneration"),k9o=o(" (BigBirdPegasus model)"),S9o=l(),wb=a("li"),Ffe=a("strong"),R9o=o("blenderbot"),P9o=o(" \u2014 "),HD=a("a"),B9o=o("BlenderbotForConditionalGeneration"),I9o=o(" (Blenderbot model)"),N9o=l(),Ab=a("li"),Tfe=a("strong"),q9o=o("blenderbot-small"),j9o=o(" \u2014 "),UD=a("a"),D9o=o("BlenderbotSmallForConditionalGeneration"),G9o=o(" (BlenderbotSmall model)"),O9o=l(),yb=a("li"),Mfe=a("strong"),V9o=o("encoder-decoder"),X9o=o(" \u2014 "),JD=a("a"),z9o=o("EncoderDecoderModel"),W9o=o(" (Encoder decoder model)"),Q9o=l(),Lb=a("li"),Efe=a("strong"),H9o=o("fsmt"),U9o=o(" \u2014 "),YD=a("a"),J9o=o("FSMTForConditionalGeneration"),Y9o=o(" (FairSeq Machine-Translation model)"),K9o=l(),xb=a("li"),Cfe=a("strong"),Z9o=o("led"),exo=o(" \u2014 "),KD=a("a"),oxo=o("LEDForConditionalGeneration"),rxo=o(" (LED model)"),txo=l(),$b=a("li"),wfe=a("strong"),axo=o("m2m_100"),nxo=o(" \u2014 "),ZD=a("a"),sxo=o("M2M100ForConditionalGeneration"),lxo=o(" (M2M100 model)"),ixo=l(),kb=a("li"),Afe=a("strong"),dxo=o("marian"),cxo=o(" \u2014 "),eG=a("a"),fxo=o("MarianMTModel"),mxo=o(" (Marian model)"),gxo=l(),Sb=a("li"),yfe=a("strong"),hxo=o("mbart"),pxo=o(" \u2014 "),oG=a("a"),_xo=o("MBartForConditionalGeneration"),uxo=o(" (mBART model)"),bxo=l(),Rb=a("li"),Lfe=a("strong"),vxo=o("mt5"),Fxo=o(" \u2014 "),rG=a("a"),Txo=o("MT5ForConditionalGeneration"),Mxo=o(" (mT5 model)"),Exo=l(),Pb=a("li"),xfe=a("strong"),Cxo=o("pegasus"),wxo=o(" \u2014 "),tG=a("a"),Axo=o("PegasusForConditionalGeneration"),yxo=o(" (Pegasus model)"),Lxo=l(),Bb=a("li"),$fe=a("strong"),xxo=o("plbart"),$xo=o(" \u2014 "),aG=a("a"),kxo=o("PLBartForConditionalGeneration"),Sxo=o(" (PLBart model)"),Rxo=l(),Ib=a("li"),kfe=a("strong"),Pxo=o("prophetnet"),Bxo=o(" \u2014 "),nG=a("a"),Ixo=o("ProphetNetForConditionalGeneration"),Nxo=o(" (ProphetNet model)"),qxo=l(),Nb=a("li"),Sfe=a("strong"),jxo=o("t5"),Dxo=o(" \u2014 "),sG=a("a"),Gxo=o("T5ForConditionalGeneration"),Oxo=o(" (T5 model)"),Vxo=l(),qb=a("li"),Rfe=a("strong"),Xxo=o("xlm-prophetnet"),zxo=o(" \u2014 "),lG=a("a"),Wxo=o("XLMProphetNetForConditionalGeneration"),Qxo=o(" (XLMProphetNet model)"),Hxo=l(),jb=a("p"),Uxo=o("The model is set in evaluation mode by default using "),Pfe=a("code"),Jxo=o("model.eval()"),Yxo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bfe=a("code"),Kxo=o("model.train()"),Zxo=l(),F(Db.$$.fragment),xqe=l(),Di=a("h2"),Gb=a("a"),Ife=a("span"),F(AL.$$.fragment),e$o=l(),Nfe=a("span"),o$o=o("AutoModelForSequenceClassification"),$qe=l(),Ro=a("div"),F(yL.$$.fragment),r$o=l(),Gi=a("p"),t$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),iG=a("a"),a$o=o("from_pretrained()"),n$o=o(" class method or the "),dG=a("a"),s$o=o("from_config()"),l$o=o(` class
method.`),i$o=l(),LL=a("p"),d$o=o("This class cannot be instantiated directly using "),qfe=a("code"),c$o=o("__init__()"),f$o=o(" (throws an error)."),m$o=l(),it=a("div"),F(xL.$$.fragment),g$o=l(),jfe=a("p"),h$o=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),p$o=l(),Oi=a("p"),_$o=o(`Note:
Loading a model from its configuration file does `),Dfe=a("strong"),u$o=o("not"),b$o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cG=a("a"),v$o=o("from_pretrained()"),F$o=o(" to load the model weights."),T$o=l(),F(Ob.$$.fragment),M$o=l(),oo=a("div"),F($L.$$.fragment),E$o=l(),Gfe=a("p"),C$o=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),w$o=l(),Ra=a("p"),A$o=o("The model class to instantiate is selected based on the "),Ofe=a("code"),y$o=o("model_type"),L$o=o(` property of the config object (either
passed as an argument or loaded from `),Vfe=a("code"),x$o=o("pretrained_model_name_or_path"),$$o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xfe=a("code"),k$o=o("pretrained_model_name_or_path"),S$o=o(":"),R$o=l(),N=a("ul"),Vb=a("li"),zfe=a("strong"),P$o=o("albert"),B$o=o(" \u2014 "),fG=a("a"),I$o=o("AlbertForSequenceClassification"),N$o=o(" (ALBERT model)"),q$o=l(),Xb=a("li"),Wfe=a("strong"),j$o=o("bart"),D$o=o(" \u2014 "),mG=a("a"),G$o=o("BartForSequenceClassification"),O$o=o(" (BART model)"),V$o=l(),zb=a("li"),Qfe=a("strong"),X$o=o("bert"),z$o=o(" \u2014 "),gG=a("a"),W$o=o("BertForSequenceClassification"),Q$o=o(" (BERT model)"),H$o=l(),Wb=a("li"),Hfe=a("strong"),U$o=o("big_bird"),J$o=o(" \u2014 "),hG=a("a"),Y$o=o("BigBirdForSequenceClassification"),K$o=o(" (BigBird model)"),Z$o=l(),Qb=a("li"),Ufe=a("strong"),eko=o("bigbird_pegasus"),oko=o(" \u2014 "),pG=a("a"),rko=o("BigBirdPegasusForSequenceClassification"),tko=o(" (BigBirdPegasus model)"),ako=l(),Hb=a("li"),Jfe=a("strong"),nko=o("camembert"),sko=o(" \u2014 "),_G=a("a"),lko=o("CamembertForSequenceClassification"),iko=o(" (CamemBERT model)"),dko=l(),Ub=a("li"),Yfe=a("strong"),cko=o("canine"),fko=o(" \u2014 "),uG=a("a"),mko=o("CanineForSequenceClassification"),gko=o(" (Canine model)"),hko=l(),Jb=a("li"),Kfe=a("strong"),pko=o("convbert"),_ko=o(" \u2014 "),bG=a("a"),uko=o("ConvBertForSequenceClassification"),bko=o(" (ConvBERT model)"),vko=l(),Yb=a("li"),Zfe=a("strong"),Fko=o("ctrl"),Tko=o(" \u2014 "),vG=a("a"),Mko=o("CTRLForSequenceClassification"),Eko=o(" (CTRL model)"),Cko=l(),Kb=a("li"),eme=a("strong"),wko=o("data2vec-text"),Ako=o(" \u2014 "),FG=a("a"),yko=o("Data2VecTextForSequenceClassification"),Lko=o(" (Data2VecText model)"),xko=l(),Zb=a("li"),ome=a("strong"),$ko=o("deberta"),kko=o(" \u2014 "),TG=a("a"),Sko=o("DebertaForSequenceClassification"),Rko=o(" (DeBERTa model)"),Pko=l(),e2=a("li"),rme=a("strong"),Bko=o("deberta-v2"),Iko=o(" \u2014 "),MG=a("a"),Nko=o("DebertaV2ForSequenceClassification"),qko=o(" (DeBERTa-v2 model)"),jko=l(),o2=a("li"),tme=a("strong"),Dko=o("distilbert"),Gko=o(" \u2014 "),EG=a("a"),Oko=o("DistilBertForSequenceClassification"),Vko=o(" (DistilBERT model)"),Xko=l(),r2=a("li"),ame=a("strong"),zko=o("electra"),Wko=o(" \u2014 "),CG=a("a"),Qko=o("ElectraForSequenceClassification"),Hko=o(" (ELECTRA model)"),Uko=l(),t2=a("li"),nme=a("strong"),Jko=o("flaubert"),Yko=o(" \u2014 "),wG=a("a"),Kko=o("FlaubertForSequenceClassification"),Zko=o(" (FlauBERT model)"),eSo=l(),a2=a("li"),sme=a("strong"),oSo=o("fnet"),rSo=o(" \u2014 "),AG=a("a"),tSo=o("FNetForSequenceClassification"),aSo=o(" (FNet model)"),nSo=l(),n2=a("li"),lme=a("strong"),sSo=o("funnel"),lSo=o(" \u2014 "),yG=a("a"),iSo=o("FunnelForSequenceClassification"),dSo=o(" (Funnel Transformer model)"),cSo=l(),s2=a("li"),ime=a("strong"),fSo=o("gpt2"),mSo=o(" \u2014 "),LG=a("a"),gSo=o("GPT2ForSequenceClassification"),hSo=o(" (OpenAI GPT-2 model)"),pSo=l(),l2=a("li"),dme=a("strong"),_So=o("gpt_neo"),uSo=o(" \u2014 "),xG=a("a"),bSo=o("GPTNeoForSequenceClassification"),vSo=o(" (GPT Neo model)"),FSo=l(),i2=a("li"),cme=a("strong"),TSo=o("gptj"),MSo=o(" \u2014 "),$G=a("a"),ESo=o("GPTJForSequenceClassification"),CSo=o(" (GPT-J model)"),wSo=l(),d2=a("li"),fme=a("strong"),ASo=o("ibert"),ySo=o(" \u2014 "),kG=a("a"),LSo=o("IBertForSequenceClassification"),xSo=o(" (I-BERT model)"),$So=l(),c2=a("li"),mme=a("strong"),kSo=o("layoutlm"),SSo=o(" \u2014 "),SG=a("a"),RSo=o("LayoutLMForSequenceClassification"),PSo=o(" (LayoutLM model)"),BSo=l(),f2=a("li"),gme=a("strong"),ISo=o("layoutlmv2"),NSo=o(" \u2014 "),RG=a("a"),qSo=o("LayoutLMv2ForSequenceClassification"),jSo=o(" (LayoutLMv2 model)"),DSo=l(),m2=a("li"),hme=a("strong"),GSo=o("layoutlmv3"),OSo=o(" \u2014 "),PG=a("a"),VSo=o("LayoutLMv3ForSequenceClassification"),XSo=o(" (LayoutLMv3 model)"),zSo=l(),g2=a("li"),pme=a("strong"),WSo=o("led"),QSo=o(" \u2014 "),BG=a("a"),HSo=o("LEDForSequenceClassification"),USo=o(" (LED model)"),JSo=l(),h2=a("li"),_me=a("strong"),YSo=o("longformer"),KSo=o(" \u2014 "),IG=a("a"),ZSo=o("LongformerForSequenceClassification"),eRo=o(" (Longformer model)"),oRo=l(),p2=a("li"),ume=a("strong"),rRo=o("mbart"),tRo=o(" \u2014 "),NG=a("a"),aRo=o("MBartForSequenceClassification"),nRo=o(" (mBART model)"),sRo=l(),_2=a("li"),bme=a("strong"),lRo=o("megatron-bert"),iRo=o(" \u2014 "),qG=a("a"),dRo=o("MegatronBertForSequenceClassification"),cRo=o(" (MegatronBert model)"),fRo=l(),u2=a("li"),vme=a("strong"),mRo=o("mobilebert"),gRo=o(" \u2014 "),jG=a("a"),hRo=o("MobileBertForSequenceClassification"),pRo=o(" (MobileBERT model)"),_Ro=l(),b2=a("li"),Fme=a("strong"),uRo=o("mpnet"),bRo=o(" \u2014 "),DG=a("a"),vRo=o("MPNetForSequenceClassification"),FRo=o(" (MPNet model)"),TRo=l(),v2=a("li"),Tme=a("strong"),MRo=o("nystromformer"),ERo=o(" \u2014 "),GG=a("a"),CRo=o("NystromformerForSequenceClassification"),wRo=o(" (Nystromformer model)"),ARo=l(),F2=a("li"),Mme=a("strong"),yRo=o("openai-gpt"),LRo=o(" \u2014 "),OG=a("a"),xRo=o("OpenAIGPTForSequenceClassification"),$Ro=o(" (OpenAI GPT model)"),kRo=l(),T2=a("li"),Eme=a("strong"),SRo=o("perceiver"),RRo=o(" \u2014 "),VG=a("a"),PRo=o("PerceiverForSequenceClassification"),BRo=o(" (Perceiver model)"),IRo=l(),M2=a("li"),Cme=a("strong"),NRo=o("plbart"),qRo=o(" \u2014 "),XG=a("a"),jRo=o("PLBartForSequenceClassification"),DRo=o(" (PLBart model)"),GRo=l(),E2=a("li"),wme=a("strong"),ORo=o("qdqbert"),VRo=o(" \u2014 "),zG=a("a"),XRo=o("QDQBertForSequenceClassification"),zRo=o(" (QDQBert model)"),WRo=l(),C2=a("li"),Ame=a("strong"),QRo=o("reformer"),HRo=o(" \u2014 "),WG=a("a"),URo=o("ReformerForSequenceClassification"),JRo=o(" (Reformer model)"),YRo=l(),w2=a("li"),yme=a("strong"),KRo=o("rembert"),ZRo=o(" \u2014 "),QG=a("a"),ePo=o("RemBertForSequenceClassification"),oPo=o(" (RemBERT model)"),rPo=l(),A2=a("li"),Lme=a("strong"),tPo=o("roberta"),aPo=o(" \u2014 "),HG=a("a"),nPo=o("RobertaForSequenceClassification"),sPo=o(" (RoBERTa model)"),lPo=l(),y2=a("li"),xme=a("strong"),iPo=o("roformer"),dPo=o(" \u2014 "),UG=a("a"),cPo=o("RoFormerForSequenceClassification"),fPo=o(" (RoFormer model)"),mPo=l(),L2=a("li"),$me=a("strong"),gPo=o("squeezebert"),hPo=o(" \u2014 "),JG=a("a"),pPo=o("SqueezeBertForSequenceClassification"),_Po=o(" (SqueezeBERT model)"),uPo=l(),x2=a("li"),kme=a("strong"),bPo=o("tapas"),vPo=o(" \u2014 "),YG=a("a"),FPo=o("TapasForSequenceClassification"),TPo=o(" (TAPAS model)"),MPo=l(),$2=a("li"),Sme=a("strong"),EPo=o("transfo-xl"),CPo=o(" \u2014 "),KG=a("a"),wPo=o("TransfoXLForSequenceClassification"),APo=o(" (Transformer-XL model)"),yPo=l(),k2=a("li"),Rme=a("strong"),LPo=o("xlm"),xPo=o(" \u2014 "),ZG=a("a"),$Po=o("XLMForSequenceClassification"),kPo=o(" (XLM model)"),SPo=l(),S2=a("li"),Pme=a("strong"),RPo=o("xlm-roberta"),PPo=o(" \u2014 "),eO=a("a"),BPo=o("XLMRobertaForSequenceClassification"),IPo=o(" (XLM-RoBERTa model)"),NPo=l(),R2=a("li"),Bme=a("strong"),qPo=o("xlm-roberta-xl"),jPo=o(" \u2014 "),oO=a("a"),DPo=o("XLMRobertaXLForSequenceClassification"),GPo=o(" (XLM-RoBERTa-XL model)"),OPo=l(),P2=a("li"),Ime=a("strong"),VPo=o("xlnet"),XPo=o(" \u2014 "),rO=a("a"),zPo=o("XLNetForSequenceClassification"),WPo=o(" (XLNet model)"),QPo=l(),B2=a("li"),Nme=a("strong"),HPo=o("yoso"),UPo=o(" \u2014 "),tO=a("a"),JPo=o("YosoForSequenceClassification"),YPo=o(" (YOSO model)"),KPo=l(),I2=a("p"),ZPo=o("The model is set in evaluation mode by default using "),qme=a("code"),eBo=o("model.eval()"),oBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jme=a("code"),rBo=o("model.train()"),tBo=l(),F(N2.$$.fragment),kqe=l(),Vi=a("h2"),q2=a("a"),Dme=a("span"),F(kL.$$.fragment),aBo=l(),Gme=a("span"),nBo=o("AutoModelForMultipleChoice"),Sqe=l(),Po=a("div"),F(SL.$$.fragment),sBo=l(),Xi=a("p"),lBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),aO=a("a"),iBo=o("from_pretrained()"),dBo=o(" class method or the "),nO=a("a"),cBo=o("from_config()"),fBo=o(` class
method.`),mBo=l(),RL=a("p"),gBo=o("This class cannot be instantiated directly using "),Ome=a("code"),hBo=o("__init__()"),pBo=o(" (throws an error)."),_Bo=l(),dt=a("div"),F(PL.$$.fragment),uBo=l(),Vme=a("p"),bBo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),vBo=l(),zi=a("p"),FBo=o(`Note:
Loading a model from its configuration file does `),Xme=a("strong"),TBo=o("not"),MBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sO=a("a"),EBo=o("from_pretrained()"),CBo=o(" to load the model weights."),wBo=l(),F(j2.$$.fragment),ABo=l(),ro=a("div"),F(BL.$$.fragment),yBo=l(),zme=a("p"),LBo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),xBo=l(),Pa=a("p"),$Bo=o("The model class to instantiate is selected based on the "),Wme=a("code"),kBo=o("model_type"),SBo=o(` property of the config object (either
passed as an argument or loaded from `),Qme=a("code"),RBo=o("pretrained_model_name_or_path"),PBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hme=a("code"),BBo=o("pretrained_model_name_or_path"),IBo=o(":"),NBo=l(),K=a("ul"),D2=a("li"),Ume=a("strong"),qBo=o("albert"),jBo=o(" \u2014 "),lO=a("a"),DBo=o("AlbertForMultipleChoice"),GBo=o(" (ALBERT model)"),OBo=l(),G2=a("li"),Jme=a("strong"),VBo=o("bert"),XBo=o(" \u2014 "),iO=a("a"),zBo=o("BertForMultipleChoice"),WBo=o(" (BERT model)"),QBo=l(),O2=a("li"),Yme=a("strong"),HBo=o("big_bird"),UBo=o(" \u2014 "),dO=a("a"),JBo=o("BigBirdForMultipleChoice"),YBo=o(" (BigBird model)"),KBo=l(),V2=a("li"),Kme=a("strong"),ZBo=o("camembert"),eIo=o(" \u2014 "),cO=a("a"),oIo=o("CamembertForMultipleChoice"),rIo=o(" (CamemBERT model)"),tIo=l(),X2=a("li"),Zme=a("strong"),aIo=o("canine"),nIo=o(" \u2014 "),fO=a("a"),sIo=o("CanineForMultipleChoice"),lIo=o(" (Canine model)"),iIo=l(),z2=a("li"),ege=a("strong"),dIo=o("convbert"),cIo=o(" \u2014 "),mO=a("a"),fIo=o("ConvBertForMultipleChoice"),mIo=o(" (ConvBERT model)"),gIo=l(),W2=a("li"),oge=a("strong"),hIo=o("data2vec-text"),pIo=o(" \u2014 "),gO=a("a"),_Io=o("Data2VecTextForMultipleChoice"),uIo=o(" (Data2VecText model)"),bIo=l(),Q2=a("li"),rge=a("strong"),vIo=o("deberta-v2"),FIo=o(" \u2014 "),hO=a("a"),TIo=o("DebertaV2ForMultipleChoice"),MIo=o(" (DeBERTa-v2 model)"),EIo=l(),H2=a("li"),tge=a("strong"),CIo=o("distilbert"),wIo=o(" \u2014 "),pO=a("a"),AIo=o("DistilBertForMultipleChoice"),yIo=o(" (DistilBERT model)"),LIo=l(),U2=a("li"),age=a("strong"),xIo=o("electra"),$Io=o(" \u2014 "),_O=a("a"),kIo=o("ElectraForMultipleChoice"),SIo=o(" (ELECTRA model)"),RIo=l(),J2=a("li"),nge=a("strong"),PIo=o("flaubert"),BIo=o(" \u2014 "),uO=a("a"),IIo=o("FlaubertForMultipleChoice"),NIo=o(" (FlauBERT model)"),qIo=l(),Y2=a("li"),sge=a("strong"),jIo=o("fnet"),DIo=o(" \u2014 "),bO=a("a"),GIo=o("FNetForMultipleChoice"),OIo=o(" (FNet model)"),VIo=l(),K2=a("li"),lge=a("strong"),XIo=o("funnel"),zIo=o(" \u2014 "),vO=a("a"),WIo=o("FunnelForMultipleChoice"),QIo=o(" (Funnel Transformer model)"),HIo=l(),Z2=a("li"),ige=a("strong"),UIo=o("ibert"),JIo=o(" \u2014 "),FO=a("a"),YIo=o("IBertForMultipleChoice"),KIo=o(" (I-BERT model)"),ZIo=l(),e4=a("li"),dge=a("strong"),eNo=o("longformer"),oNo=o(" \u2014 "),TO=a("a"),rNo=o("LongformerForMultipleChoice"),tNo=o(" (Longformer model)"),aNo=l(),o4=a("li"),cge=a("strong"),nNo=o("megatron-bert"),sNo=o(" \u2014 "),MO=a("a"),lNo=o("MegatronBertForMultipleChoice"),iNo=o(" (MegatronBert model)"),dNo=l(),r4=a("li"),fge=a("strong"),cNo=o("mobilebert"),fNo=o(" \u2014 "),EO=a("a"),mNo=o("MobileBertForMultipleChoice"),gNo=o(" (MobileBERT model)"),hNo=l(),t4=a("li"),mge=a("strong"),pNo=o("mpnet"),_No=o(" \u2014 "),CO=a("a"),uNo=o("MPNetForMultipleChoice"),bNo=o(" (MPNet model)"),vNo=l(),a4=a("li"),gge=a("strong"),FNo=o("nystromformer"),TNo=o(" \u2014 "),wO=a("a"),MNo=o("NystromformerForMultipleChoice"),ENo=o(" (Nystromformer model)"),CNo=l(),n4=a("li"),hge=a("strong"),wNo=o("qdqbert"),ANo=o(" \u2014 "),AO=a("a"),yNo=o("QDQBertForMultipleChoice"),LNo=o(" (QDQBert model)"),xNo=l(),s4=a("li"),pge=a("strong"),$No=o("rembert"),kNo=o(" \u2014 "),yO=a("a"),SNo=o("RemBertForMultipleChoice"),RNo=o(" (RemBERT model)"),PNo=l(),l4=a("li"),_ge=a("strong"),BNo=o("roberta"),INo=o(" \u2014 "),LO=a("a"),NNo=o("RobertaForMultipleChoice"),qNo=o(" (RoBERTa model)"),jNo=l(),i4=a("li"),uge=a("strong"),DNo=o("roformer"),GNo=o(" \u2014 "),xO=a("a"),ONo=o("RoFormerForMultipleChoice"),VNo=o(" (RoFormer model)"),XNo=l(),d4=a("li"),bge=a("strong"),zNo=o("squeezebert"),WNo=o(" \u2014 "),$O=a("a"),QNo=o("SqueezeBertForMultipleChoice"),HNo=o(" (SqueezeBERT model)"),UNo=l(),c4=a("li"),vge=a("strong"),JNo=o("xlm"),YNo=o(" \u2014 "),kO=a("a"),KNo=o("XLMForMultipleChoice"),ZNo=o(" (XLM model)"),eqo=l(),f4=a("li"),Fge=a("strong"),oqo=o("xlm-roberta"),rqo=o(" \u2014 "),SO=a("a"),tqo=o("XLMRobertaForMultipleChoice"),aqo=o(" (XLM-RoBERTa model)"),nqo=l(),m4=a("li"),Tge=a("strong"),sqo=o("xlm-roberta-xl"),lqo=o(" \u2014 "),RO=a("a"),iqo=o("XLMRobertaXLForMultipleChoice"),dqo=o(" (XLM-RoBERTa-XL model)"),cqo=l(),g4=a("li"),Mge=a("strong"),fqo=o("xlnet"),mqo=o(" \u2014 "),PO=a("a"),gqo=o("XLNetForMultipleChoice"),hqo=o(" (XLNet model)"),pqo=l(),h4=a("li"),Ege=a("strong"),_qo=o("yoso"),uqo=o(" \u2014 "),BO=a("a"),bqo=o("YosoForMultipleChoice"),vqo=o(" (YOSO model)"),Fqo=l(),p4=a("p"),Tqo=o("The model is set in evaluation mode by default using "),Cge=a("code"),Mqo=o("model.eval()"),Eqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wge=a("code"),Cqo=o("model.train()"),wqo=l(),F(_4.$$.fragment),Rqe=l(),Wi=a("h2"),u4=a("a"),Age=a("span"),F(IL.$$.fragment),Aqo=l(),yge=a("span"),yqo=o("AutoModelForNextSentencePrediction"),Pqe=l(),Bo=a("div"),F(NL.$$.fragment),Lqo=l(),Qi=a("p"),xqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),IO=a("a"),$qo=o("from_pretrained()"),kqo=o(" class method or the "),NO=a("a"),Sqo=o("from_config()"),Rqo=o(` class
method.`),Pqo=l(),qL=a("p"),Bqo=o("This class cannot be instantiated directly using "),Lge=a("code"),Iqo=o("__init__()"),Nqo=o(" (throws an error)."),qqo=l(),ct=a("div"),F(jL.$$.fragment),jqo=l(),xge=a("p"),Dqo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Gqo=l(),Hi=a("p"),Oqo=o(`Note:
Loading a model from its configuration file does `),$ge=a("strong"),Vqo=o("not"),Xqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qO=a("a"),zqo=o("from_pretrained()"),Wqo=o(" to load the model weights."),Qqo=l(),F(b4.$$.fragment),Hqo=l(),to=a("div"),F(DL.$$.fragment),Uqo=l(),kge=a("p"),Jqo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Yqo=l(),Ba=a("p"),Kqo=o("The model class to instantiate is selected based on the "),Sge=a("code"),Zqo=o("model_type"),ejo=o(` property of the config object (either
passed as an argument or loaded from `),Rge=a("code"),ojo=o("pretrained_model_name_or_path"),rjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pge=a("code"),tjo=o("pretrained_model_name_or_path"),ajo=o(":"),njo=l(),Yr=a("ul"),v4=a("li"),Bge=a("strong"),sjo=o("bert"),ljo=o(" \u2014 "),jO=a("a"),ijo=o("BertForNextSentencePrediction"),djo=o(" (BERT model)"),cjo=l(),F4=a("li"),Ige=a("strong"),fjo=o("fnet"),mjo=o(" \u2014 "),DO=a("a"),gjo=o("FNetForNextSentencePrediction"),hjo=o(" (FNet model)"),pjo=l(),T4=a("li"),Nge=a("strong"),_jo=o("megatron-bert"),ujo=o(" \u2014 "),GO=a("a"),bjo=o("MegatronBertForNextSentencePrediction"),vjo=o(" (MegatronBert model)"),Fjo=l(),M4=a("li"),qge=a("strong"),Tjo=o("mobilebert"),Mjo=o(" \u2014 "),OO=a("a"),Ejo=o("MobileBertForNextSentencePrediction"),Cjo=o(" (MobileBERT model)"),wjo=l(),E4=a("li"),jge=a("strong"),Ajo=o("qdqbert"),yjo=o(" \u2014 "),VO=a("a"),Ljo=o("QDQBertForNextSentencePrediction"),xjo=o(" (QDQBert model)"),$jo=l(),C4=a("p"),kjo=o("The model is set in evaluation mode by default using "),Dge=a("code"),Sjo=o("model.eval()"),Rjo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gge=a("code"),Pjo=o("model.train()"),Bjo=l(),F(w4.$$.fragment),Bqe=l(),Ui=a("h2"),A4=a("a"),Oge=a("span"),F(GL.$$.fragment),Ijo=l(),Vge=a("span"),Njo=o("AutoModelForTokenClassification"),Iqe=l(),Io=a("div"),F(OL.$$.fragment),qjo=l(),Ji=a("p"),jjo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),XO=a("a"),Djo=o("from_pretrained()"),Gjo=o(" class method or the "),zO=a("a"),Ojo=o("from_config()"),Vjo=o(` class
method.`),Xjo=l(),VL=a("p"),zjo=o("This class cannot be instantiated directly using "),Xge=a("code"),Wjo=o("__init__()"),Qjo=o(" (throws an error)."),Hjo=l(),ft=a("div"),F(XL.$$.fragment),Ujo=l(),zge=a("p"),Jjo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Yjo=l(),Yi=a("p"),Kjo=o(`Note:
Loading a model from its configuration file does `),Wge=a("strong"),Zjo=o("not"),eDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WO=a("a"),oDo=o("from_pretrained()"),rDo=o(" to load the model weights."),tDo=l(),F(y4.$$.fragment),aDo=l(),ao=a("div"),F(zL.$$.fragment),nDo=l(),Qge=a("p"),sDo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),lDo=l(),Ia=a("p"),iDo=o("The model class to instantiate is selected based on the "),Hge=a("code"),dDo=o("model_type"),cDo=o(` property of the config object (either
passed as an argument or loaded from `),Uge=a("code"),fDo=o("pretrained_model_name_or_path"),mDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jge=a("code"),gDo=o("pretrained_model_name_or_path"),hDo=o(":"),pDo=l(),H=a("ul"),L4=a("li"),Yge=a("strong"),_Do=o("albert"),uDo=o(" \u2014 "),QO=a("a"),bDo=o("AlbertForTokenClassification"),vDo=o(" (ALBERT model)"),FDo=l(),x4=a("li"),Kge=a("strong"),TDo=o("bert"),MDo=o(" \u2014 "),HO=a("a"),EDo=o("BertForTokenClassification"),CDo=o(" (BERT model)"),wDo=l(),$4=a("li"),Zge=a("strong"),ADo=o("big_bird"),yDo=o(" \u2014 "),UO=a("a"),LDo=o("BigBirdForTokenClassification"),xDo=o(" (BigBird model)"),$Do=l(),k4=a("li"),ehe=a("strong"),kDo=o("camembert"),SDo=o(" \u2014 "),JO=a("a"),RDo=o("CamembertForTokenClassification"),PDo=o(" (CamemBERT model)"),BDo=l(),S4=a("li"),ohe=a("strong"),IDo=o("canine"),NDo=o(" \u2014 "),YO=a("a"),qDo=o("CanineForTokenClassification"),jDo=o(" (Canine model)"),DDo=l(),R4=a("li"),rhe=a("strong"),GDo=o("convbert"),ODo=o(" \u2014 "),KO=a("a"),VDo=o("ConvBertForTokenClassification"),XDo=o(" (ConvBERT model)"),zDo=l(),P4=a("li"),the=a("strong"),WDo=o("data2vec-text"),QDo=o(" \u2014 "),ZO=a("a"),HDo=o("Data2VecTextForTokenClassification"),UDo=o(" (Data2VecText model)"),JDo=l(),B4=a("li"),ahe=a("strong"),YDo=o("deberta"),KDo=o(" \u2014 "),eV=a("a"),ZDo=o("DebertaForTokenClassification"),eGo=o(" (DeBERTa model)"),oGo=l(),I4=a("li"),nhe=a("strong"),rGo=o("deberta-v2"),tGo=o(" \u2014 "),oV=a("a"),aGo=o("DebertaV2ForTokenClassification"),nGo=o(" (DeBERTa-v2 model)"),sGo=l(),N4=a("li"),she=a("strong"),lGo=o("distilbert"),iGo=o(" \u2014 "),rV=a("a"),dGo=o("DistilBertForTokenClassification"),cGo=o(" (DistilBERT model)"),fGo=l(),q4=a("li"),lhe=a("strong"),mGo=o("electra"),gGo=o(" \u2014 "),tV=a("a"),hGo=o("ElectraForTokenClassification"),pGo=o(" (ELECTRA model)"),_Go=l(),j4=a("li"),ihe=a("strong"),uGo=o("flaubert"),bGo=o(" \u2014 "),aV=a("a"),vGo=o("FlaubertForTokenClassification"),FGo=o(" (FlauBERT model)"),TGo=l(),D4=a("li"),dhe=a("strong"),MGo=o("fnet"),EGo=o(" \u2014 "),nV=a("a"),CGo=o("FNetForTokenClassification"),wGo=o(" (FNet model)"),AGo=l(),G4=a("li"),che=a("strong"),yGo=o("funnel"),LGo=o(" \u2014 "),sV=a("a"),xGo=o("FunnelForTokenClassification"),$Go=o(" (Funnel Transformer model)"),kGo=l(),O4=a("li"),fhe=a("strong"),SGo=o("gpt2"),RGo=o(" \u2014 "),lV=a("a"),PGo=o("GPT2ForTokenClassification"),BGo=o(" (OpenAI GPT-2 model)"),IGo=l(),V4=a("li"),mhe=a("strong"),NGo=o("ibert"),qGo=o(" \u2014 "),iV=a("a"),jGo=o("IBertForTokenClassification"),DGo=o(" (I-BERT model)"),GGo=l(),X4=a("li"),ghe=a("strong"),OGo=o("layoutlm"),VGo=o(" \u2014 "),dV=a("a"),XGo=o("LayoutLMForTokenClassification"),zGo=o(" (LayoutLM model)"),WGo=l(),z4=a("li"),hhe=a("strong"),QGo=o("layoutlmv2"),HGo=o(" \u2014 "),cV=a("a"),UGo=o("LayoutLMv2ForTokenClassification"),JGo=o(" (LayoutLMv2 model)"),YGo=l(),W4=a("li"),phe=a("strong"),KGo=o("layoutlmv3"),ZGo=o(" \u2014 "),fV=a("a"),eOo=o("LayoutLMv3ForTokenClassification"),oOo=o(" (LayoutLMv3 model)"),rOo=l(),Q4=a("li"),_he=a("strong"),tOo=o("longformer"),aOo=o(" \u2014 "),mV=a("a"),nOo=o("LongformerForTokenClassification"),sOo=o(" (Longformer model)"),lOo=l(),H4=a("li"),uhe=a("strong"),iOo=o("megatron-bert"),dOo=o(" \u2014 "),gV=a("a"),cOo=o("MegatronBertForTokenClassification"),fOo=o(" (MegatronBert model)"),mOo=l(),U4=a("li"),bhe=a("strong"),gOo=o("mobilebert"),hOo=o(" \u2014 "),hV=a("a"),pOo=o("MobileBertForTokenClassification"),_Oo=o(" (MobileBERT model)"),uOo=l(),J4=a("li"),vhe=a("strong"),bOo=o("mpnet"),vOo=o(" \u2014 "),pV=a("a"),FOo=o("MPNetForTokenClassification"),TOo=o(" (MPNet model)"),MOo=l(),Y4=a("li"),Fhe=a("strong"),EOo=o("nystromformer"),COo=o(" \u2014 "),_V=a("a"),wOo=o("NystromformerForTokenClassification"),AOo=o(" (Nystromformer model)"),yOo=l(),K4=a("li"),The=a("strong"),LOo=o("qdqbert"),xOo=o(" \u2014 "),uV=a("a"),$Oo=o("QDQBertForTokenClassification"),kOo=o(" (QDQBert model)"),SOo=l(),Z4=a("li"),Mhe=a("strong"),ROo=o("rembert"),POo=o(" \u2014 "),bV=a("a"),BOo=o("RemBertForTokenClassification"),IOo=o(" (RemBERT model)"),NOo=l(),e5=a("li"),Ehe=a("strong"),qOo=o("roberta"),jOo=o(" \u2014 "),vV=a("a"),DOo=o("RobertaForTokenClassification"),GOo=o(" (RoBERTa model)"),OOo=l(),o5=a("li"),Che=a("strong"),VOo=o("roformer"),XOo=o(" \u2014 "),FV=a("a"),zOo=o("RoFormerForTokenClassification"),WOo=o(" (RoFormer model)"),QOo=l(),r5=a("li"),whe=a("strong"),HOo=o("squeezebert"),UOo=o(" \u2014 "),TV=a("a"),JOo=o("SqueezeBertForTokenClassification"),YOo=o(" (SqueezeBERT model)"),KOo=l(),t5=a("li"),Ahe=a("strong"),ZOo=o("xlm"),eVo=o(" \u2014 "),MV=a("a"),oVo=o("XLMForTokenClassification"),rVo=o(" (XLM model)"),tVo=l(),a5=a("li"),yhe=a("strong"),aVo=o("xlm-roberta"),nVo=o(" \u2014 "),EV=a("a"),sVo=o("XLMRobertaForTokenClassification"),lVo=o(" (XLM-RoBERTa model)"),iVo=l(),n5=a("li"),Lhe=a("strong"),dVo=o("xlm-roberta-xl"),cVo=o(" \u2014 "),CV=a("a"),fVo=o("XLMRobertaXLForTokenClassification"),mVo=o(" (XLM-RoBERTa-XL model)"),gVo=l(),s5=a("li"),xhe=a("strong"),hVo=o("xlnet"),pVo=o(" \u2014 "),wV=a("a"),_Vo=o("XLNetForTokenClassification"),uVo=o(" (XLNet model)"),bVo=l(),l5=a("li"),$he=a("strong"),vVo=o("yoso"),FVo=o(" \u2014 "),AV=a("a"),TVo=o("YosoForTokenClassification"),MVo=o(" (YOSO model)"),EVo=l(),i5=a("p"),CVo=o("The model is set in evaluation mode by default using "),khe=a("code"),wVo=o("model.eval()"),AVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),She=a("code"),yVo=o("model.train()"),LVo=l(),F(d5.$$.fragment),Nqe=l(),Ki=a("h2"),c5=a("a"),Rhe=a("span"),F(WL.$$.fragment),xVo=l(),Phe=a("span"),$Vo=o("AutoModelForQuestionAnswering"),qqe=l(),No=a("div"),F(QL.$$.fragment),kVo=l(),Zi=a("p"),SVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),yV=a("a"),RVo=o("from_pretrained()"),PVo=o(" class method or the "),LV=a("a"),BVo=o("from_config()"),IVo=o(` class
method.`),NVo=l(),HL=a("p"),qVo=o("This class cannot be instantiated directly using "),Bhe=a("code"),jVo=o("__init__()"),DVo=o(" (throws an error)."),GVo=l(),mt=a("div"),F(UL.$$.fragment),OVo=l(),Ihe=a("p"),VVo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),XVo=l(),ed=a("p"),zVo=o(`Note:
Loading a model from its configuration file does `),Nhe=a("strong"),WVo=o("not"),QVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xV=a("a"),HVo=o("from_pretrained()"),UVo=o(" to load the model weights."),JVo=l(),F(f5.$$.fragment),YVo=l(),no=a("div"),F(JL.$$.fragment),KVo=l(),qhe=a("p"),ZVo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),eXo=l(),Na=a("p"),oXo=o("The model class to instantiate is selected based on the "),jhe=a("code"),rXo=o("model_type"),tXo=o(` property of the config object (either
passed as an argument or loaded from `),Dhe=a("code"),aXo=o("pretrained_model_name_or_path"),nXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ghe=a("code"),sXo=o("pretrained_model_name_or_path"),lXo=o(":"),iXo=l(),V=a("ul"),m5=a("li"),Ohe=a("strong"),dXo=o("albert"),cXo=o(" \u2014 "),$V=a("a"),fXo=o("AlbertForQuestionAnswering"),mXo=o(" (ALBERT model)"),gXo=l(),g5=a("li"),Vhe=a("strong"),hXo=o("bart"),pXo=o(" \u2014 "),kV=a("a"),_Xo=o("BartForQuestionAnswering"),uXo=o(" (BART model)"),bXo=l(),h5=a("li"),Xhe=a("strong"),vXo=o("bert"),FXo=o(" \u2014 "),SV=a("a"),TXo=o("BertForQuestionAnswering"),MXo=o(" (BERT model)"),EXo=l(),p5=a("li"),zhe=a("strong"),CXo=o("big_bird"),wXo=o(" \u2014 "),RV=a("a"),AXo=o("BigBirdForQuestionAnswering"),yXo=o(" (BigBird model)"),LXo=l(),_5=a("li"),Whe=a("strong"),xXo=o("bigbird_pegasus"),$Xo=o(" \u2014 "),PV=a("a"),kXo=o("BigBirdPegasusForQuestionAnswering"),SXo=o(" (BigBirdPegasus model)"),RXo=l(),u5=a("li"),Qhe=a("strong"),PXo=o("camembert"),BXo=o(" \u2014 "),BV=a("a"),IXo=o("CamembertForQuestionAnswering"),NXo=o(" (CamemBERT model)"),qXo=l(),b5=a("li"),Hhe=a("strong"),jXo=o("canine"),DXo=o(" \u2014 "),IV=a("a"),GXo=o("CanineForQuestionAnswering"),OXo=o(" (Canine model)"),VXo=l(),v5=a("li"),Uhe=a("strong"),XXo=o("convbert"),zXo=o(" \u2014 "),NV=a("a"),WXo=o("ConvBertForQuestionAnswering"),QXo=o(" (ConvBERT model)"),HXo=l(),F5=a("li"),Jhe=a("strong"),UXo=o("data2vec-text"),JXo=o(" \u2014 "),qV=a("a"),YXo=o("Data2VecTextForQuestionAnswering"),KXo=o(" (Data2VecText model)"),ZXo=l(),T5=a("li"),Yhe=a("strong"),ezo=o("deberta"),ozo=o(" \u2014 "),jV=a("a"),rzo=o("DebertaForQuestionAnswering"),tzo=o(" (DeBERTa model)"),azo=l(),M5=a("li"),Khe=a("strong"),nzo=o("deberta-v2"),szo=o(" \u2014 "),DV=a("a"),lzo=o("DebertaV2ForQuestionAnswering"),izo=o(" (DeBERTa-v2 model)"),dzo=l(),E5=a("li"),Zhe=a("strong"),czo=o("distilbert"),fzo=o(" \u2014 "),GV=a("a"),mzo=o("DistilBertForQuestionAnswering"),gzo=o(" (DistilBERT model)"),hzo=l(),C5=a("li"),epe=a("strong"),pzo=o("electra"),_zo=o(" \u2014 "),OV=a("a"),uzo=o("ElectraForQuestionAnswering"),bzo=o(" (ELECTRA model)"),vzo=l(),w5=a("li"),ope=a("strong"),Fzo=o("flaubert"),Tzo=o(" \u2014 "),VV=a("a"),Mzo=o("FlaubertForQuestionAnsweringSimple"),Ezo=o(" (FlauBERT model)"),Czo=l(),A5=a("li"),rpe=a("strong"),wzo=o("fnet"),Azo=o(" \u2014 "),XV=a("a"),yzo=o("FNetForQuestionAnswering"),Lzo=o(" (FNet model)"),xzo=l(),y5=a("li"),tpe=a("strong"),$zo=o("funnel"),kzo=o(" \u2014 "),zV=a("a"),Szo=o("FunnelForQuestionAnswering"),Rzo=o(" (Funnel Transformer model)"),Pzo=l(),L5=a("li"),ape=a("strong"),Bzo=o("gptj"),Izo=o(" \u2014 "),WV=a("a"),Nzo=o("GPTJForQuestionAnswering"),qzo=o(" (GPT-J model)"),jzo=l(),x5=a("li"),npe=a("strong"),Dzo=o("ibert"),Gzo=o(" \u2014 "),QV=a("a"),Ozo=o("IBertForQuestionAnswering"),Vzo=o(" (I-BERT model)"),Xzo=l(),$5=a("li"),spe=a("strong"),zzo=o("layoutlmv2"),Wzo=o(" \u2014 "),HV=a("a"),Qzo=o("LayoutLMv2ForQuestionAnswering"),Hzo=o(" (LayoutLMv2 model)"),Uzo=l(),k5=a("li"),lpe=a("strong"),Jzo=o("layoutlmv3"),Yzo=o(" \u2014 "),UV=a("a"),Kzo=o("LayoutLMv3ForQuestionAnswering"),Zzo=o(" (LayoutLMv3 model)"),eWo=l(),S5=a("li"),ipe=a("strong"),oWo=o("led"),rWo=o(" \u2014 "),JV=a("a"),tWo=o("LEDForQuestionAnswering"),aWo=o(" (LED model)"),nWo=l(),R5=a("li"),dpe=a("strong"),sWo=o("longformer"),lWo=o(" \u2014 "),YV=a("a"),iWo=o("LongformerForQuestionAnswering"),dWo=o(" (Longformer model)"),cWo=l(),P5=a("li"),cpe=a("strong"),fWo=o("lxmert"),mWo=o(" \u2014 "),KV=a("a"),gWo=o("LxmertForQuestionAnswering"),hWo=o(" (LXMERT model)"),pWo=l(),B5=a("li"),fpe=a("strong"),_Wo=o("mbart"),uWo=o(" \u2014 "),ZV=a("a"),bWo=o("MBartForQuestionAnswering"),vWo=o(" (mBART model)"),FWo=l(),I5=a("li"),mpe=a("strong"),TWo=o("megatron-bert"),MWo=o(" \u2014 "),eX=a("a"),EWo=o("MegatronBertForQuestionAnswering"),CWo=o(" (MegatronBert model)"),wWo=l(),N5=a("li"),gpe=a("strong"),AWo=o("mobilebert"),yWo=o(" \u2014 "),oX=a("a"),LWo=o("MobileBertForQuestionAnswering"),xWo=o(" (MobileBERT model)"),$Wo=l(),q5=a("li"),hpe=a("strong"),kWo=o("mpnet"),SWo=o(" \u2014 "),rX=a("a"),RWo=o("MPNetForQuestionAnswering"),PWo=o(" (MPNet model)"),BWo=l(),j5=a("li"),ppe=a("strong"),IWo=o("nystromformer"),NWo=o(" \u2014 "),tX=a("a"),qWo=o("NystromformerForQuestionAnswering"),jWo=o(" (Nystromformer model)"),DWo=l(),D5=a("li"),_pe=a("strong"),GWo=o("qdqbert"),OWo=o(" \u2014 "),aX=a("a"),VWo=o("QDQBertForQuestionAnswering"),XWo=o(" (QDQBert model)"),zWo=l(),G5=a("li"),upe=a("strong"),WWo=o("reformer"),QWo=o(" \u2014 "),nX=a("a"),HWo=o("ReformerForQuestionAnswering"),UWo=o(" (Reformer model)"),JWo=l(),O5=a("li"),bpe=a("strong"),YWo=o("rembert"),KWo=o(" \u2014 "),sX=a("a"),ZWo=o("RemBertForQuestionAnswering"),eQo=o(" (RemBERT model)"),oQo=l(),V5=a("li"),vpe=a("strong"),rQo=o("roberta"),tQo=o(" \u2014 "),lX=a("a"),aQo=o("RobertaForQuestionAnswering"),nQo=o(" (RoBERTa model)"),sQo=l(),X5=a("li"),Fpe=a("strong"),lQo=o("roformer"),iQo=o(" \u2014 "),iX=a("a"),dQo=o("RoFormerForQuestionAnswering"),cQo=o(" (RoFormer model)"),fQo=l(),z5=a("li"),Tpe=a("strong"),mQo=o("splinter"),gQo=o(" \u2014 "),dX=a("a"),hQo=o("SplinterForQuestionAnswering"),pQo=o(" (Splinter model)"),_Qo=l(),W5=a("li"),Mpe=a("strong"),uQo=o("squeezebert"),bQo=o(" \u2014 "),cX=a("a"),vQo=o("SqueezeBertForQuestionAnswering"),FQo=o(" (SqueezeBERT model)"),TQo=l(),Q5=a("li"),Epe=a("strong"),MQo=o("xlm"),EQo=o(" \u2014 "),fX=a("a"),CQo=o("XLMForQuestionAnsweringSimple"),wQo=o(" (XLM model)"),AQo=l(),H5=a("li"),Cpe=a("strong"),yQo=o("xlm-roberta"),LQo=o(" \u2014 "),mX=a("a"),xQo=o("XLMRobertaForQuestionAnswering"),$Qo=o(" (XLM-RoBERTa model)"),kQo=l(),U5=a("li"),wpe=a("strong"),SQo=o("xlm-roberta-xl"),RQo=o(" \u2014 "),gX=a("a"),PQo=o("XLMRobertaXLForQuestionAnswering"),BQo=o(" (XLM-RoBERTa-XL model)"),IQo=l(),J5=a("li"),Ape=a("strong"),NQo=o("xlnet"),qQo=o(" \u2014 "),hX=a("a"),jQo=o("XLNetForQuestionAnsweringSimple"),DQo=o(" (XLNet model)"),GQo=l(),Y5=a("li"),ype=a("strong"),OQo=o("yoso"),VQo=o(" \u2014 "),pX=a("a"),XQo=o("YosoForQuestionAnswering"),zQo=o(" (YOSO model)"),WQo=l(),K5=a("p"),QQo=o("The model is set in evaluation mode by default using "),Lpe=a("code"),HQo=o("model.eval()"),UQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xpe=a("code"),JQo=o("model.train()"),YQo=l(),F(Z5.$$.fragment),jqe=l(),od=a("h2"),ev=a("a"),$pe=a("span"),F(YL.$$.fragment),KQo=l(),kpe=a("span"),ZQo=o("AutoModelForTableQuestionAnswering"),Dqe=l(),qo=a("div"),F(KL.$$.fragment),eHo=l(),rd=a("p"),oHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),_X=a("a"),rHo=o("from_pretrained()"),tHo=o(" class method or the "),uX=a("a"),aHo=o("from_config()"),nHo=o(` class
method.`),sHo=l(),ZL=a("p"),lHo=o("This class cannot be instantiated directly using "),Spe=a("code"),iHo=o("__init__()"),dHo=o(" (throws an error)."),cHo=l(),gt=a("div"),F(e8.$$.fragment),fHo=l(),Rpe=a("p"),mHo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),gHo=l(),td=a("p"),hHo=o(`Note:
Loading a model from its configuration file does `),Ppe=a("strong"),pHo=o("not"),_Ho=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bX=a("a"),uHo=o("from_pretrained()"),bHo=o(" to load the model weights."),vHo=l(),F(ov.$$.fragment),FHo=l(),so=a("div"),F(o8.$$.fragment),THo=l(),Bpe=a("p"),MHo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),EHo=l(),qa=a("p"),CHo=o("The model class to instantiate is selected based on the "),Ipe=a("code"),wHo=o("model_type"),AHo=o(` property of the config object (either
passed as an argument or loaded from `),Npe=a("code"),yHo=o("pretrained_model_name_or_path"),LHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qpe=a("code"),xHo=o("pretrained_model_name_or_path"),$Ho=o(":"),kHo=l(),jpe=a("ul"),rv=a("li"),Dpe=a("strong"),SHo=o("tapas"),RHo=o(" \u2014 "),vX=a("a"),PHo=o("TapasForQuestionAnswering"),BHo=o(" (TAPAS model)"),IHo=l(),tv=a("p"),NHo=o("The model is set in evaluation mode by default using "),Gpe=a("code"),qHo=o("model.eval()"),jHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ope=a("code"),DHo=o("model.train()"),GHo=l(),F(av.$$.fragment),Gqe=l(),ad=a("h2"),nv=a("a"),Vpe=a("span"),F(r8.$$.fragment),OHo=l(),Xpe=a("span"),VHo=o("AutoModelForImageClassification"),Oqe=l(),jo=a("div"),F(t8.$$.fragment),XHo=l(),nd=a("p"),zHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),FX=a("a"),WHo=o("from_pretrained()"),QHo=o(" class method or the "),TX=a("a"),HHo=o("from_config()"),UHo=o(` class
method.`),JHo=l(),a8=a("p"),YHo=o("This class cannot be instantiated directly using "),zpe=a("code"),KHo=o("__init__()"),ZHo=o(" (throws an error)."),eUo=l(),ht=a("div"),F(n8.$$.fragment),oUo=l(),Wpe=a("p"),rUo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),tUo=l(),sd=a("p"),aUo=o(`Note:
Loading a model from its configuration file does `),Qpe=a("strong"),nUo=o("not"),sUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MX=a("a"),lUo=o("from_pretrained()"),iUo=o(" to load the model weights."),dUo=l(),F(sv.$$.fragment),cUo=l(),lo=a("div"),F(s8.$$.fragment),fUo=l(),Hpe=a("p"),mUo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),gUo=l(),ja=a("p"),hUo=o("The model class to instantiate is selected based on the "),Upe=a("code"),pUo=o("model_type"),_Uo=o(` property of the config object (either
passed as an argument or loaded from `),Jpe=a("code"),uUo=o("pretrained_model_name_or_path"),bUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ype=a("code"),vUo=o("pretrained_model_name_or_path"),FUo=o(":"),TUo=l(),Fe=a("ul"),lv=a("li"),Kpe=a("strong"),MUo=o("beit"),EUo=o(" \u2014 "),EX=a("a"),CUo=o("BeitForImageClassification"),wUo=o(" (BEiT model)"),AUo=l(),iv=a("li"),Zpe=a("strong"),yUo=o("convnext"),LUo=o(" \u2014 "),CX=a("a"),xUo=o("ConvNextForImageClassification"),$Uo=o(" (ConvNext model)"),kUo=l(),dv=a("li"),e_e=a("strong"),SUo=o("cvt"),RUo=o(" \u2014 "),wX=a("a"),PUo=o("CvtForImageClassification"),BUo=o(" (CvT model)"),IUo=l(),cv=a("li"),o_e=a("strong"),NUo=o("data2vec-vision"),qUo=o(" \u2014 "),AX=a("a"),jUo=o("Data2VecVisionForImageClassification"),DUo=o(" (Data2VecVision model)"),GUo=l(),Bs=a("li"),r_e=a("strong"),OUo=o("deit"),VUo=o(" \u2014 "),yX=a("a"),XUo=o("DeiTForImageClassification"),zUo=o(" or "),LX=a("a"),WUo=o("DeiTForImageClassificationWithTeacher"),QUo=o(" (DeiT model)"),HUo=l(),fv=a("li"),t_e=a("strong"),UUo=o("imagegpt"),JUo=o(" \u2014 "),xX=a("a"),YUo=o("ImageGPTForImageClassification"),KUo=o(" (ImageGPT model)"),ZUo=l(),pt=a("li"),a_e=a("strong"),eJo=o("perceiver"),oJo=o(" \u2014 "),$X=a("a"),rJo=o("PerceiverForImageClassificationLearned"),tJo=o(" or "),kX=a("a"),aJo=o("PerceiverForImageClassificationFourier"),nJo=o(" or "),SX=a("a"),sJo=o("PerceiverForImageClassificationConvProcessing"),lJo=o(" (Perceiver model)"),iJo=l(),mv=a("li"),n_e=a("strong"),dJo=o("poolformer"),cJo=o(" \u2014 "),RX=a("a"),fJo=o("PoolFormerForImageClassification"),mJo=o(" (PoolFormer model)"),gJo=l(),gv=a("li"),s_e=a("strong"),hJo=o("regnet"),pJo=o(" \u2014 "),PX=a("a"),_Jo=o("RegNetForImageClassification"),uJo=o(" (RegNet model)"),bJo=l(),hv=a("li"),l_e=a("strong"),vJo=o("resnet"),FJo=o(" \u2014 "),BX=a("a"),TJo=o("ResNetForImageClassification"),MJo=o(" (ResNet model)"),EJo=l(),pv=a("li"),i_e=a("strong"),CJo=o("segformer"),wJo=o(" \u2014 "),IX=a("a"),AJo=o("SegformerForImageClassification"),yJo=o(" (SegFormer model)"),LJo=l(),_v=a("li"),d_e=a("strong"),xJo=o("swin"),$Jo=o(" \u2014 "),NX=a("a"),kJo=o("SwinForImageClassification"),SJo=o(" (Swin model)"),RJo=l(),uv=a("li"),c_e=a("strong"),PJo=o("van"),BJo=o(" \u2014 "),qX=a("a"),IJo=o("VanForImageClassification"),NJo=o(" (VAN model)"),qJo=l(),bv=a("li"),f_e=a("strong"),jJo=o("vit"),DJo=o(" \u2014 "),jX=a("a"),GJo=o("ViTForImageClassification"),OJo=o(" (ViT model)"),VJo=l(),vv=a("p"),XJo=o("The model is set in evaluation mode by default using "),m_e=a("code"),zJo=o("model.eval()"),WJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),g_e=a("code"),QJo=o("model.train()"),HJo=l(),F(Fv.$$.fragment),Vqe=l(),ld=a("h2"),Tv=a("a"),h_e=a("span"),F(l8.$$.fragment),UJo=l(),p_e=a("span"),JJo=o("AutoModelForVision2Seq"),Xqe=l(),Do=a("div"),F(i8.$$.fragment),YJo=l(),id=a("p"),KJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),DX=a("a"),ZJo=o("from_pretrained()"),eYo=o(" class method or the "),GX=a("a"),oYo=o("from_config()"),rYo=o(` class
method.`),tYo=l(),d8=a("p"),aYo=o("This class cannot be instantiated directly using "),__e=a("code"),nYo=o("__init__()"),sYo=o(" (throws an error)."),lYo=l(),_t=a("div"),F(c8.$$.fragment),iYo=l(),u_e=a("p"),dYo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),cYo=l(),dd=a("p"),fYo=o(`Note:
Loading a model from its configuration file does `),b_e=a("strong"),mYo=o("not"),gYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OX=a("a"),hYo=o("from_pretrained()"),pYo=o(" to load the model weights."),_Yo=l(),F(Mv.$$.fragment),uYo=l(),io=a("div"),F(f8.$$.fragment),bYo=l(),v_e=a("p"),vYo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),FYo=l(),Da=a("p"),TYo=o("The model class to instantiate is selected based on the "),F_e=a("code"),MYo=o("model_type"),EYo=o(` property of the config object (either
passed as an argument or loaded from `),T_e=a("code"),CYo=o("pretrained_model_name_or_path"),wYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M_e=a("code"),AYo=o("pretrained_model_name_or_path"),yYo=o(":"),LYo=l(),E_e=a("ul"),Ev=a("li"),C_e=a("strong"),xYo=o("vision-encoder-decoder"),$Yo=o(" \u2014 "),VX=a("a"),kYo=o("VisionEncoderDecoderModel"),SYo=o(" (Vision Encoder decoder model)"),RYo=l(),Cv=a("p"),PYo=o("The model is set in evaluation mode by default using "),w_e=a("code"),BYo=o("model.eval()"),IYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),A_e=a("code"),NYo=o("model.train()"),qYo=l(),F(wv.$$.fragment),zqe=l(),cd=a("h2"),Av=a("a"),y_e=a("span"),F(m8.$$.fragment),jYo=l(),L_e=a("span"),DYo=o("AutoModelForAudioClassification"),Wqe=l(),Go=a("div"),F(g8.$$.fragment),GYo=l(),fd=a("p"),OYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),XX=a("a"),VYo=o("from_pretrained()"),XYo=o(" class method or the "),zX=a("a"),zYo=o("from_config()"),WYo=o(` class
method.`),QYo=l(),h8=a("p"),HYo=o("This class cannot be instantiated directly using "),x_e=a("code"),UYo=o("__init__()"),JYo=o(" (throws an error)."),YYo=l(),ut=a("div"),F(p8.$$.fragment),KYo=l(),$_e=a("p"),ZYo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),eKo=l(),md=a("p"),oKo=o(`Note:
Loading a model from its configuration file does `),k_e=a("strong"),rKo=o("not"),tKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WX=a("a"),aKo=o("from_pretrained()"),nKo=o(" to load the model weights."),sKo=l(),F(yv.$$.fragment),lKo=l(),co=a("div"),F(_8.$$.fragment),iKo=l(),S_e=a("p"),dKo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),cKo=l(),Ga=a("p"),fKo=o("The model class to instantiate is selected based on the "),R_e=a("code"),mKo=o("model_type"),gKo=o(` property of the config object (either
passed as an argument or loaded from `),P_e=a("code"),hKo=o("pretrained_model_name_or_path"),pKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B_e=a("code"),_Ko=o("pretrained_model_name_or_path"),uKo=o(":"),bKo=l(),ke=a("ul"),Lv=a("li"),I_e=a("strong"),vKo=o("data2vec-audio"),FKo=o(" \u2014 "),QX=a("a"),TKo=o("Data2VecAudioForSequenceClassification"),MKo=o(" (Data2VecAudio model)"),EKo=l(),xv=a("li"),N_e=a("strong"),CKo=o("hubert"),wKo=o(" \u2014 "),HX=a("a"),AKo=o("HubertForSequenceClassification"),yKo=o(" (Hubert model)"),LKo=l(),$v=a("li"),q_e=a("strong"),xKo=o("sew"),$Ko=o(" \u2014 "),UX=a("a"),kKo=o("SEWForSequenceClassification"),SKo=o(" (SEW model)"),RKo=l(),kv=a("li"),j_e=a("strong"),PKo=o("sew-d"),BKo=o(" \u2014 "),JX=a("a"),IKo=o("SEWDForSequenceClassification"),NKo=o(" (SEW-D model)"),qKo=l(),Sv=a("li"),D_e=a("strong"),jKo=o("unispeech"),DKo=o(" \u2014 "),YX=a("a"),GKo=o("UniSpeechForSequenceClassification"),OKo=o(" (UniSpeech model)"),VKo=l(),Rv=a("li"),G_e=a("strong"),XKo=o("unispeech-sat"),zKo=o(" \u2014 "),KX=a("a"),WKo=o("UniSpeechSatForSequenceClassification"),QKo=o(" (UniSpeechSat model)"),HKo=l(),Pv=a("li"),O_e=a("strong"),UKo=o("wav2vec2"),JKo=o(" \u2014 "),ZX=a("a"),YKo=o("Wav2Vec2ForSequenceClassification"),KKo=o(" (Wav2Vec2 model)"),ZKo=l(),Bv=a("li"),V_e=a("strong"),eZo=o("wav2vec2-conformer"),oZo=o(" \u2014 "),ez=a("a"),rZo=o("Wav2Vec2ConformerForSequenceClassification"),tZo=o(" (Wav2Vec2-Conformer model)"),aZo=l(),Iv=a("li"),X_e=a("strong"),nZo=o("wavlm"),sZo=o(" \u2014 "),oz=a("a"),lZo=o("WavLMForSequenceClassification"),iZo=o(" (WavLM model)"),dZo=l(),Nv=a("p"),cZo=o("The model is set in evaluation mode by default using "),z_e=a("code"),fZo=o("model.eval()"),mZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),W_e=a("code"),gZo=o("model.train()"),hZo=l(),F(qv.$$.fragment),Qqe=l(),gd=a("h2"),jv=a("a"),Q_e=a("span"),F(u8.$$.fragment),pZo=l(),H_e=a("span"),_Zo=o("AutoModelForAudioFrameClassification"),Hqe=l(),Oo=a("div"),F(b8.$$.fragment),uZo=l(),hd=a("p"),bZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),rz=a("a"),vZo=o("from_pretrained()"),FZo=o(" class method or the "),tz=a("a"),TZo=o("from_config()"),MZo=o(` class
method.`),EZo=l(),v8=a("p"),CZo=o("This class cannot be instantiated directly using "),U_e=a("code"),wZo=o("__init__()"),AZo=o(" (throws an error)."),yZo=l(),bt=a("div"),F(F8.$$.fragment),LZo=l(),J_e=a("p"),xZo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),$Zo=l(),pd=a("p"),kZo=o(`Note:
Loading a model from its configuration file does `),Y_e=a("strong"),SZo=o("not"),RZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),az=a("a"),PZo=o("from_pretrained()"),BZo=o(" to load the model weights."),IZo=l(),F(Dv.$$.fragment),NZo=l(),fo=a("div"),F(T8.$$.fragment),qZo=l(),K_e=a("p"),jZo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),DZo=l(),Oa=a("p"),GZo=o("The model class to instantiate is selected based on the "),Z_e=a("code"),OZo=o("model_type"),VZo=o(` property of the config object (either
passed as an argument or loaded from `),eue=a("code"),XZo=o("pretrained_model_name_or_path"),zZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oue=a("code"),WZo=o("pretrained_model_name_or_path"),QZo=o(":"),HZo=l(),Kr=a("ul"),Gv=a("li"),rue=a("strong"),UZo=o("data2vec-audio"),JZo=o(" \u2014 "),nz=a("a"),YZo=o("Data2VecAudioForAudioFrameClassification"),KZo=o(" (Data2VecAudio model)"),ZZo=l(),Ov=a("li"),tue=a("strong"),eer=o("unispeech-sat"),oer=o(" \u2014 "),sz=a("a"),rer=o("UniSpeechSatForAudioFrameClassification"),ter=o(" (UniSpeechSat model)"),aer=l(),Vv=a("li"),aue=a("strong"),ner=o("wav2vec2"),ser=o(" \u2014 "),lz=a("a"),ler=o("Wav2Vec2ForAudioFrameClassification"),ier=o(" (Wav2Vec2 model)"),der=l(),Xv=a("li"),nue=a("strong"),cer=o("wav2vec2-conformer"),fer=o(" \u2014 "),iz=a("a"),mer=o("Wav2Vec2ConformerForAudioFrameClassification"),ger=o(" (Wav2Vec2-Conformer model)"),her=l(),zv=a("li"),sue=a("strong"),per=o("wavlm"),_er=o(" \u2014 "),dz=a("a"),uer=o("WavLMForAudioFrameClassification"),ber=o(" (WavLM model)"),ver=l(),Wv=a("p"),Fer=o("The model is set in evaluation mode by default using "),lue=a("code"),Ter=o("model.eval()"),Mer=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),iue=a("code"),Eer=o("model.train()"),Cer=l(),F(Qv.$$.fragment),Uqe=l(),_d=a("h2"),Hv=a("a"),due=a("span"),F(M8.$$.fragment),wer=l(),cue=a("span"),Aer=o("AutoModelForCTC"),Jqe=l(),Vo=a("div"),F(E8.$$.fragment),yer=l(),ud=a("p"),Ler=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),cz=a("a"),xer=o("from_pretrained()"),$er=o(" class method or the "),fz=a("a"),ker=o("from_config()"),Ser=o(` class
method.`),Rer=l(),C8=a("p"),Per=o("This class cannot be instantiated directly using "),fue=a("code"),Ber=o("__init__()"),Ier=o(" (throws an error)."),Ner=l(),vt=a("div"),F(w8.$$.fragment),qer=l(),mue=a("p"),jer=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Der=l(),bd=a("p"),Ger=o(`Note:
Loading a model from its configuration file does `),gue=a("strong"),Oer=o("not"),Ver=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mz=a("a"),Xer=o("from_pretrained()"),zer=o(" to load the model weights."),Wer=l(),F(Uv.$$.fragment),Qer=l(),mo=a("div"),F(A8.$$.fragment),Her=l(),hue=a("p"),Uer=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Jer=l(),Va=a("p"),Yer=o("The model class to instantiate is selected based on the "),pue=a("code"),Ker=o("model_type"),Zer=o(` property of the config object (either
passed as an argument or loaded from `),_ue=a("code"),eor=o("pretrained_model_name_or_path"),oor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uue=a("code"),ror=o("pretrained_model_name_or_path"),tor=o(":"),aor=l(),Se=a("ul"),Jv=a("li"),bue=a("strong"),nor=o("data2vec-audio"),sor=o(" \u2014 "),gz=a("a"),lor=o("Data2VecAudioForCTC"),ior=o(" (Data2VecAudio model)"),dor=l(),Yv=a("li"),vue=a("strong"),cor=o("hubert"),mor=o(" \u2014 "),hz=a("a"),gor=o("HubertForCTC"),hor=o(" (Hubert model)"),por=l(),Kv=a("li"),Fue=a("strong"),_or=o("sew"),uor=o(" \u2014 "),pz=a("a"),bor=o("SEWForCTC"),vor=o(" (SEW model)"),For=l(),Zv=a("li"),Tue=a("strong"),Tor=o("sew-d"),Mor=o(" \u2014 "),_z=a("a"),Eor=o("SEWDForCTC"),Cor=o(" (SEW-D model)"),wor=l(),e3=a("li"),Mue=a("strong"),Aor=o("unispeech"),yor=o(" \u2014 "),uz=a("a"),Lor=o("UniSpeechForCTC"),xor=o(" (UniSpeech model)"),$or=l(),o3=a("li"),Eue=a("strong"),kor=o("unispeech-sat"),Sor=o(" \u2014 "),bz=a("a"),Ror=o("UniSpeechSatForCTC"),Por=o(" (UniSpeechSat model)"),Bor=l(),r3=a("li"),Cue=a("strong"),Ior=o("wav2vec2"),Nor=o(" \u2014 "),vz=a("a"),qor=o("Wav2Vec2ForCTC"),jor=o(" (Wav2Vec2 model)"),Dor=l(),t3=a("li"),wue=a("strong"),Gor=o("wav2vec2-conformer"),Oor=o(" \u2014 "),Fz=a("a"),Vor=o("Wav2Vec2ConformerForCTC"),Xor=o(" (Wav2Vec2-Conformer model)"),zor=l(),a3=a("li"),Aue=a("strong"),Wor=o("wavlm"),Qor=o(" \u2014 "),Tz=a("a"),Hor=o("WavLMForCTC"),Uor=o(" (WavLM model)"),Jor=l(),n3=a("p"),Yor=o("The model is set in evaluation mode by default using "),yue=a("code"),Kor=o("model.eval()"),Zor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lue=a("code"),err=o("model.train()"),orr=l(),F(s3.$$.fragment),Yqe=l(),vd=a("h2"),l3=a("a"),xue=a("span"),F(y8.$$.fragment),rrr=l(),$ue=a("span"),trr=o("AutoModelForSpeechSeq2Seq"),Kqe=l(),Xo=a("div"),F(L8.$$.fragment),arr=l(),Fd=a("p"),nrr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Mz=a("a"),srr=o("from_pretrained()"),lrr=o(" class method or the "),Ez=a("a"),irr=o("from_config()"),drr=o(` class
method.`),crr=l(),x8=a("p"),frr=o("This class cannot be instantiated directly using "),kue=a("code"),mrr=o("__init__()"),grr=o(" (throws an error)."),hrr=l(),Ft=a("div"),F($8.$$.fragment),prr=l(),Sue=a("p"),_rr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),urr=l(),Td=a("p"),brr=o(`Note:
Loading a model from its configuration file does `),Rue=a("strong"),vrr=o("not"),Frr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Cz=a("a"),Trr=o("from_pretrained()"),Mrr=o(" to load the model weights."),Err=l(),F(i3.$$.fragment),Crr=l(),go=a("div"),F(k8.$$.fragment),wrr=l(),Pue=a("p"),Arr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),yrr=l(),Xa=a("p"),Lrr=o("The model class to instantiate is selected based on the "),Bue=a("code"),xrr=o("model_type"),$rr=o(` property of the config object (either
passed as an argument or loaded from `),Iue=a("code"),krr=o("pretrained_model_name_or_path"),Srr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nue=a("code"),Rrr=o("pretrained_model_name_or_path"),Prr=o(":"),Brr=l(),S8=a("ul"),d3=a("li"),que=a("strong"),Irr=o("speech-encoder-decoder"),Nrr=o(" \u2014 "),wz=a("a"),qrr=o("SpeechEncoderDecoderModel"),jrr=o(" (Speech Encoder decoder model)"),Drr=l(),c3=a("li"),jue=a("strong"),Grr=o("speech_to_text"),Orr=o(" \u2014 "),Az=a("a"),Vrr=o("Speech2TextForConditionalGeneration"),Xrr=o(" (Speech2Text model)"),zrr=l(),f3=a("p"),Wrr=o("The model is set in evaluation mode by default using "),Due=a("code"),Qrr=o("model.eval()"),Hrr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gue=a("code"),Urr=o("model.train()"),Jrr=l(),F(m3.$$.fragment),Zqe=l(),Md=a("h2"),g3=a("a"),Oue=a("span"),F(R8.$$.fragment),Yrr=l(),Vue=a("span"),Krr=o("AutoModelForAudioXVector"),eje=l(),zo=a("div"),F(P8.$$.fragment),Zrr=l(),Ed=a("p"),etr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),yz=a("a"),otr=o("from_pretrained()"),rtr=o(" class method or the "),Lz=a("a"),ttr=o("from_config()"),atr=o(` class
method.`),ntr=l(),B8=a("p"),str=o("This class cannot be instantiated directly using "),Xue=a("code"),ltr=o("__init__()"),itr=o(" (throws an error)."),dtr=l(),Tt=a("div"),F(I8.$$.fragment),ctr=l(),zue=a("p"),ftr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),mtr=l(),Cd=a("p"),gtr=o(`Note:
Loading a model from its configuration file does `),Wue=a("strong"),htr=o("not"),ptr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xz=a("a"),_tr=o("from_pretrained()"),utr=o(" to load the model weights."),btr=l(),F(h3.$$.fragment),vtr=l(),ho=a("div"),F(N8.$$.fragment),Ftr=l(),Que=a("p"),Ttr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Mtr=l(),za=a("p"),Etr=o("The model class to instantiate is selected based on the "),Hue=a("code"),Ctr=o("model_type"),wtr=o(` property of the config object (either
passed as an argument or loaded from `),Uue=a("code"),Atr=o("pretrained_model_name_or_path"),ytr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jue=a("code"),Ltr=o("pretrained_model_name_or_path"),xtr=o(":"),$tr=l(),Zr=a("ul"),p3=a("li"),Yue=a("strong"),ktr=o("data2vec-audio"),Str=o(" \u2014 "),$z=a("a"),Rtr=o("Data2VecAudioForXVector"),Ptr=o(" (Data2VecAudio model)"),Btr=l(),_3=a("li"),Kue=a("strong"),Itr=o("unispeech-sat"),Ntr=o(" \u2014 "),kz=a("a"),qtr=o("UniSpeechSatForXVector"),jtr=o(" (UniSpeechSat model)"),Dtr=l(),u3=a("li"),Zue=a("strong"),Gtr=o("wav2vec2"),Otr=o(" \u2014 "),Sz=a("a"),Vtr=o("Wav2Vec2ForXVector"),Xtr=o(" (Wav2Vec2 model)"),ztr=l(),b3=a("li"),e1e=a("strong"),Wtr=o("wav2vec2-conformer"),Qtr=o(" \u2014 "),Rz=a("a"),Htr=o("Wav2Vec2ConformerForXVector"),Utr=o(" (Wav2Vec2-Conformer model)"),Jtr=l(),v3=a("li"),o1e=a("strong"),Ytr=o("wavlm"),Ktr=o(" \u2014 "),Pz=a("a"),Ztr=o("WavLMForXVector"),ear=o(" (WavLM model)"),oar=l(),F3=a("p"),rar=o("The model is set in evaluation mode by default using "),r1e=a("code"),tar=o("model.eval()"),aar=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),t1e=a("code"),nar=o("model.train()"),sar=l(),F(T3.$$.fragment),oje=l(),wd=a("h2"),M3=a("a"),a1e=a("span"),F(q8.$$.fragment),lar=l(),n1e=a("span"),iar=o("AutoModelForMaskedImageModeling"),rje=l(),Wo=a("div"),F(j8.$$.fragment),dar=l(),Ad=a("p"),car=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Bz=a("a"),far=o("from_pretrained()"),mar=o(" class method or the "),Iz=a("a"),gar=o("from_config()"),har=o(` class
method.`),par=l(),D8=a("p"),_ar=o("This class cannot be instantiated directly using "),s1e=a("code"),uar=o("__init__()"),bar=o(" (throws an error)."),Far=l(),Mt=a("div"),F(G8.$$.fragment),Tar=l(),l1e=a("p"),Mar=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Ear=l(),yd=a("p"),Car=o(`Note:
Loading a model from its configuration file does `),i1e=a("strong"),war=o("not"),Aar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Nz=a("a"),yar=o("from_pretrained()"),Lar=o(" to load the model weights."),xar=l(),F(E3.$$.fragment),$ar=l(),po=a("div"),F(O8.$$.fragment),kar=l(),d1e=a("p"),Sar=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Rar=l(),Wa=a("p"),Par=o("The model class to instantiate is selected based on the "),c1e=a("code"),Bar=o("model_type"),Iar=o(` property of the config object (either
passed as an argument or loaded from `),f1e=a("code"),Nar=o("pretrained_model_name_or_path"),qar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m1e=a("code"),jar=o("pretrained_model_name_or_path"),Dar=o(":"),Gar=l(),Ld=a("ul"),C3=a("li"),g1e=a("strong"),Oar=o("deit"),Var=o(" \u2014 "),qz=a("a"),Xar=o("DeiTForMaskedImageModeling"),zar=o(" (DeiT model)"),War=l(),w3=a("li"),h1e=a("strong"),Qar=o("swin"),Har=o(" \u2014 "),jz=a("a"),Uar=o("SwinForMaskedImageModeling"),Jar=o(" (Swin model)"),Yar=l(),A3=a("li"),p1e=a("strong"),Kar=o("vit"),Zar=o(" \u2014 "),Dz=a("a"),enr=o("ViTForMaskedImageModeling"),onr=o(" (ViT model)"),rnr=l(),y3=a("p"),tnr=o("The model is set in evaluation mode by default using "),_1e=a("code"),anr=o("model.eval()"),nnr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),u1e=a("code"),snr=o("model.train()"),lnr=l(),F(L3.$$.fragment),tje=l(),xd=a("h2"),x3=a("a"),b1e=a("span"),F(V8.$$.fragment),inr=l(),v1e=a("span"),dnr=o("AutoModelForObjectDetection"),aje=l(),Qo=a("div"),F(X8.$$.fragment),cnr=l(),$d=a("p"),fnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),Gz=a("a"),mnr=o("from_pretrained()"),gnr=o(" class method or the "),Oz=a("a"),hnr=o("from_config()"),pnr=o(` class
method.`),_nr=l(),z8=a("p"),unr=o("This class cannot be instantiated directly using "),F1e=a("code"),bnr=o("__init__()"),vnr=o(" (throws an error)."),Fnr=l(),Et=a("div"),F(W8.$$.fragment),Tnr=l(),T1e=a("p"),Mnr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Enr=l(),kd=a("p"),Cnr=o(`Note:
Loading a model from its configuration file does `),M1e=a("strong"),wnr=o("not"),Anr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Vz=a("a"),ynr=o("from_pretrained()"),Lnr=o(" to load the model weights."),xnr=l(),F($3.$$.fragment),$nr=l(),_o=a("div"),F(Q8.$$.fragment),knr=l(),E1e=a("p"),Snr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Rnr=l(),Qa=a("p"),Pnr=o("The model class to instantiate is selected based on the "),C1e=a("code"),Bnr=o("model_type"),Inr=o(` property of the config object (either
passed as an argument or loaded from `),w1e=a("code"),Nnr=o("pretrained_model_name_or_path"),qnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A1e=a("code"),jnr=o("pretrained_model_name_or_path"),Dnr=o(":"),Gnr=l(),H8=a("ul"),k3=a("li"),y1e=a("strong"),Onr=o("detr"),Vnr=o(" \u2014 "),Xz=a("a"),Xnr=o("DetrForObjectDetection"),znr=o(" (DETR model)"),Wnr=l(),S3=a("li"),L1e=a("strong"),Qnr=o("yolos"),Hnr=o(" \u2014 "),zz=a("a"),Unr=o("YolosForObjectDetection"),Jnr=o(" (YOLOS model)"),Ynr=l(),R3=a("p"),Knr=o("The model is set in evaluation mode by default using "),x1e=a("code"),Znr=o("model.eval()"),esr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$1e=a("code"),osr=o("model.train()"),rsr=l(),F(P3.$$.fragment),nje=l(),Sd=a("h2"),B3=a("a"),k1e=a("span"),F(U8.$$.fragment),tsr=l(),S1e=a("span"),asr=o("AutoModelForImageSegmentation"),sje=l(),Ho=a("div"),F(J8.$$.fragment),nsr=l(),Rd=a("p"),ssr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),Wz=a("a"),lsr=o("from_pretrained()"),isr=o(" class method or the "),Qz=a("a"),dsr=o("from_config()"),csr=o(` class
method.`),fsr=l(),Y8=a("p"),msr=o("This class cannot be instantiated directly using "),R1e=a("code"),gsr=o("__init__()"),hsr=o(" (throws an error)."),psr=l(),Ct=a("div"),F(K8.$$.fragment),_sr=l(),P1e=a("p"),usr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),bsr=l(),Pd=a("p"),vsr=o(`Note:
Loading a model from its configuration file does `),B1e=a("strong"),Fsr=o("not"),Tsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Hz=a("a"),Msr=o("from_pretrained()"),Esr=o(" to load the model weights."),Csr=l(),F(I3.$$.fragment),wsr=l(),uo=a("div"),F(Z8.$$.fragment),Asr=l(),I1e=a("p"),ysr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Lsr=l(),Ha=a("p"),xsr=o("The model class to instantiate is selected based on the "),N1e=a("code"),$sr=o("model_type"),ksr=o(` property of the config object (either
passed as an argument or loaded from `),q1e=a("code"),Ssr=o("pretrained_model_name_or_path"),Rsr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j1e=a("code"),Psr=o("pretrained_model_name_or_path"),Bsr=o(":"),Isr=l(),D1e=a("ul"),N3=a("li"),G1e=a("strong"),Nsr=o("detr"),qsr=o(" \u2014 "),Uz=a("a"),jsr=o("DetrForSegmentation"),Dsr=o(" (DETR model)"),Gsr=l(),q3=a("p"),Osr=o("The model is set in evaluation mode by default using "),O1e=a("code"),Vsr=o("model.eval()"),Xsr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),V1e=a("code"),zsr=o("model.train()"),Wsr=l(),F(j3.$$.fragment),lje=l(),Bd=a("h2"),D3=a("a"),X1e=a("span"),F(e7.$$.fragment),Qsr=l(),z1e=a("span"),Hsr=o("AutoModelForSemanticSegmentation"),ije=l(),Uo=a("div"),F(o7.$$.fragment),Usr=l(),Id=a("p"),Jsr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Jz=a("a"),Ysr=o("from_pretrained()"),Ksr=o(" class method or the "),Yz=a("a"),Zsr=o("from_config()"),elr=o(` class
method.`),olr=l(),r7=a("p"),rlr=o("This class cannot be instantiated directly using "),W1e=a("code"),tlr=o("__init__()"),alr=o(" (throws an error)."),nlr=l(),wt=a("div"),F(t7.$$.fragment),slr=l(),Q1e=a("p"),llr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),ilr=l(),Nd=a("p"),dlr=o(`Note:
Loading a model from its configuration file does `),H1e=a("strong"),clr=o("not"),flr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Kz=a("a"),mlr=o("from_pretrained()"),glr=o(" to load the model weights."),hlr=l(),F(G3.$$.fragment),plr=l(),bo=a("div"),F(a7.$$.fragment),_lr=l(),U1e=a("p"),ulr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),blr=l(),Ua=a("p"),vlr=o("The model class to instantiate is selected based on the "),J1e=a("code"),Flr=o("model_type"),Tlr=o(` property of the config object (either
passed as an argument or loaded from `),Y1e=a("code"),Mlr=o("pretrained_model_name_or_path"),Elr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K1e=a("code"),Clr=o("pretrained_model_name_or_path"),wlr=o(":"),Alr=l(),Ja=a("ul"),O3=a("li"),Z1e=a("strong"),ylr=o("beit"),Llr=o(" \u2014 "),Zz=a("a"),xlr=o("BeitForSemanticSegmentation"),$lr=o(" (BEiT model)"),klr=l(),V3=a("li"),ebe=a("strong"),Slr=o("data2vec-vision"),Rlr=o(" \u2014 "),eW=a("a"),Plr=o("Data2VecVisionForSemanticSegmentation"),Blr=o(" (Data2VecVision model)"),Ilr=l(),X3=a("li"),obe=a("strong"),Nlr=o("dpt"),qlr=o(" \u2014 "),oW=a("a"),jlr=o("DPTForSemanticSegmentation"),Dlr=o(" (DPT model)"),Glr=l(),z3=a("li"),rbe=a("strong"),Olr=o("segformer"),Vlr=o(" \u2014 "),rW=a("a"),Xlr=o("SegformerForSemanticSegmentation"),zlr=o(" (SegFormer model)"),Wlr=l(),W3=a("p"),Qlr=o("The model is set in evaluation mode by default using "),tbe=a("code"),Hlr=o("model.eval()"),Ulr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),abe=a("code"),Jlr=o("model.train()"),Ylr=l(),F(Q3.$$.fragment),dje=l(),qd=a("h2"),H3=a("a"),nbe=a("span"),F(n7.$$.fragment),Klr=l(),sbe=a("span"),Zlr=o("AutoModelForInstanceSegmentation"),cje=l(),Jo=a("div"),F(s7.$$.fragment),eir=l(),jd=a("p"),oir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),tW=a("a"),rir=o("from_pretrained()"),tir=o(" class method or the "),aW=a("a"),air=o("from_config()"),nir=o(` class
method.`),sir=l(),l7=a("p"),lir=o("This class cannot be instantiated directly using "),lbe=a("code"),iir=o("__init__()"),dir=o(" (throws an error)."),cir=l(),At=a("div"),F(i7.$$.fragment),fir=l(),ibe=a("p"),mir=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),gir=l(),Dd=a("p"),hir=o(`Note:
Loading a model from its configuration file does `),dbe=a("strong"),pir=o("not"),_ir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nW=a("a"),uir=o("from_pretrained()"),bir=o(" to load the model weights."),vir=l(),F(U3.$$.fragment),Fir=l(),vo=a("div"),F(d7.$$.fragment),Tir=l(),cbe=a("p"),Mir=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Eir=l(),Ya=a("p"),Cir=o("The model class to instantiate is selected based on the "),fbe=a("code"),wir=o("model_type"),Air=o(` property of the config object (either
passed as an argument or loaded from `),mbe=a("code"),yir=o("pretrained_model_name_or_path"),Lir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gbe=a("code"),xir=o("pretrained_model_name_or_path"),$ir=o(":"),kir=l(),hbe=a("ul"),J3=a("li"),pbe=a("strong"),Sir=o("maskformer"),Rir=o(" \u2014 "),sW=a("a"),Pir=o("MaskFormerForInstanceSegmentation"),Bir=o(" (MaskFormer model)"),Iir=l(),Y3=a("p"),Nir=o("The model is set in evaluation mode by default using "),_be=a("code"),qir=o("model.eval()"),jir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ube=a("code"),Dir=o("model.train()"),Gir=l(),F(K3.$$.fragment),fje=l(),Gd=a("h2"),Z3=a("a"),bbe=a("span"),F(c7.$$.fragment),Oir=l(),vbe=a("span"),Vir=o("TFAutoModel"),mje=l(),Yo=a("div"),F(f7.$$.fragment),Xir=l(),Od=a("p"),zir=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),lW=a("a"),Wir=o("from_pretrained()"),Qir=o(" class method or the "),iW=a("a"),Hir=o("from_config()"),Uir=o(` class
method.`),Jir=l(),m7=a("p"),Yir=o("This class cannot be instantiated directly using "),Fbe=a("code"),Kir=o("__init__()"),Zir=o(" (throws an error)."),edr=l(),yt=a("div"),F(g7.$$.fragment),odr=l(),Tbe=a("p"),rdr=o("Instantiates one of the base model classes of the library from a configuration."),tdr=l(),Vd=a("p"),adr=o(`Note:
Loading a model from its configuration file does `),Mbe=a("strong"),ndr=o("not"),sdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dW=a("a"),ldr=o("from_pretrained()"),idr=o(" to load the model weights."),ddr=l(),F(eF.$$.fragment),cdr=l(),wr=a("div"),F(h7.$$.fragment),fdr=l(),Ebe=a("p"),mdr=o("Instantiate one of the base model classes of the library from a pretrained model."),gdr=l(),Ka=a("p"),hdr=o("The model class to instantiate is selected based on the "),Cbe=a("code"),pdr=o("model_type"),_dr=o(` property of the config object (either
passed as an argument or loaded from `),wbe=a("code"),udr=o("pretrained_model_name_or_path"),bdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Abe=a("code"),vdr=o("pretrained_model_name_or_path"),Fdr=o(":"),Tdr=l(),q=a("ul"),oF=a("li"),ybe=a("strong"),Mdr=o("albert"),Edr=o(" \u2014 "),cW=a("a"),Cdr=o("TFAlbertModel"),wdr=o(" (ALBERT model)"),Adr=l(),rF=a("li"),Lbe=a("strong"),ydr=o("bart"),Ldr=o(" \u2014 "),fW=a("a"),xdr=o("TFBartModel"),$dr=o(" (BART model)"),kdr=l(),tF=a("li"),xbe=a("strong"),Sdr=o("bert"),Rdr=o(" \u2014 "),mW=a("a"),Pdr=o("TFBertModel"),Bdr=o(" (BERT model)"),Idr=l(),aF=a("li"),$be=a("strong"),Ndr=o("blenderbot"),qdr=o(" \u2014 "),gW=a("a"),jdr=o("TFBlenderbotModel"),Ddr=o(" (Blenderbot model)"),Gdr=l(),nF=a("li"),kbe=a("strong"),Odr=o("blenderbot-small"),Vdr=o(" \u2014 "),hW=a("a"),Xdr=o("TFBlenderbotSmallModel"),zdr=o(" (BlenderbotSmall model)"),Wdr=l(),sF=a("li"),Sbe=a("strong"),Qdr=o("camembert"),Hdr=o(" \u2014 "),pW=a("a"),Udr=o("TFCamembertModel"),Jdr=o(" (CamemBERT model)"),Ydr=l(),lF=a("li"),Rbe=a("strong"),Kdr=o("clip"),Zdr=o(" \u2014 "),_W=a("a"),ecr=o("TFCLIPModel"),ocr=o(" (CLIP model)"),rcr=l(),iF=a("li"),Pbe=a("strong"),tcr=o("convbert"),acr=o(" \u2014 "),uW=a("a"),ncr=o("TFConvBertModel"),scr=o(" (ConvBERT model)"),lcr=l(),dF=a("li"),Bbe=a("strong"),icr=o("convnext"),dcr=o(" \u2014 "),bW=a("a"),ccr=o("TFConvNextModel"),fcr=o(" (ConvNext model)"),mcr=l(),cF=a("li"),Ibe=a("strong"),gcr=o("ctrl"),hcr=o(" \u2014 "),vW=a("a"),pcr=o("TFCTRLModel"),_cr=o(" (CTRL model)"),ucr=l(),fF=a("li"),Nbe=a("strong"),bcr=o("data2vec-vision"),vcr=o(" \u2014 "),FW=a("a"),Fcr=o("TFData2VecVisionModel"),Tcr=o(" (Data2VecVision model)"),Mcr=l(),mF=a("li"),qbe=a("strong"),Ecr=o("deberta"),Ccr=o(" \u2014 "),TW=a("a"),wcr=o("TFDebertaModel"),Acr=o(" (DeBERTa model)"),ycr=l(),gF=a("li"),jbe=a("strong"),Lcr=o("deberta-v2"),xcr=o(" \u2014 "),MW=a("a"),$cr=o("TFDebertaV2Model"),kcr=o(" (DeBERTa-v2 model)"),Scr=l(),hF=a("li"),Dbe=a("strong"),Rcr=o("distilbert"),Pcr=o(" \u2014 "),EW=a("a"),Bcr=o("TFDistilBertModel"),Icr=o(" (DistilBERT model)"),Ncr=l(),pF=a("li"),Gbe=a("strong"),qcr=o("dpr"),jcr=o(" \u2014 "),CW=a("a"),Dcr=o("TFDPRQuestionEncoder"),Gcr=o(" (DPR model)"),Ocr=l(),_F=a("li"),Obe=a("strong"),Vcr=o("electra"),Xcr=o(" \u2014 "),wW=a("a"),zcr=o("TFElectraModel"),Wcr=o(" (ELECTRA model)"),Qcr=l(),uF=a("li"),Vbe=a("strong"),Hcr=o("flaubert"),Ucr=o(" \u2014 "),AW=a("a"),Jcr=o("TFFlaubertModel"),Ycr=o(" (FlauBERT model)"),Kcr=l(),Is=a("li"),Xbe=a("strong"),Zcr=o("funnel"),efr=o(" \u2014 "),yW=a("a"),ofr=o("TFFunnelModel"),rfr=o(" or "),LW=a("a"),tfr=o("TFFunnelBaseModel"),afr=o(" (Funnel Transformer model)"),nfr=l(),bF=a("li"),zbe=a("strong"),sfr=o("gpt2"),lfr=o(" \u2014 "),xW=a("a"),ifr=o("TFGPT2Model"),dfr=o(" (OpenAI GPT-2 model)"),cfr=l(),vF=a("li"),Wbe=a("strong"),ffr=o("gptj"),mfr=o(" \u2014 "),$W=a("a"),gfr=o("TFGPTJModel"),hfr=o(" (GPT-J model)"),pfr=l(),FF=a("li"),Qbe=a("strong"),_fr=o("hubert"),ufr=o(" \u2014 "),kW=a("a"),bfr=o("TFHubertModel"),vfr=o(" (Hubert model)"),Ffr=l(),TF=a("li"),Hbe=a("strong"),Tfr=o("layoutlm"),Mfr=o(" \u2014 "),SW=a("a"),Efr=o("TFLayoutLMModel"),Cfr=o(" (LayoutLM model)"),wfr=l(),MF=a("li"),Ube=a("strong"),Afr=o("led"),yfr=o(" \u2014 "),RW=a("a"),Lfr=o("TFLEDModel"),xfr=o(" (LED model)"),$fr=l(),EF=a("li"),Jbe=a("strong"),kfr=o("longformer"),Sfr=o(" \u2014 "),PW=a("a"),Rfr=o("TFLongformerModel"),Pfr=o(" (Longformer model)"),Bfr=l(),CF=a("li"),Ybe=a("strong"),Ifr=o("lxmert"),Nfr=o(" \u2014 "),BW=a("a"),qfr=o("TFLxmertModel"),jfr=o(" (LXMERT model)"),Dfr=l(),wF=a("li"),Kbe=a("strong"),Gfr=o("marian"),Ofr=o(" \u2014 "),IW=a("a"),Vfr=o("TFMarianModel"),Xfr=o(" (Marian model)"),zfr=l(),AF=a("li"),Zbe=a("strong"),Wfr=o("mbart"),Qfr=o(" \u2014 "),NW=a("a"),Hfr=o("TFMBartModel"),Ufr=o(" (mBART model)"),Jfr=l(),yF=a("li"),e2e=a("strong"),Yfr=o("mobilebert"),Kfr=o(" \u2014 "),qW=a("a"),Zfr=o("TFMobileBertModel"),emr=o(" (MobileBERT model)"),omr=l(),LF=a("li"),o2e=a("strong"),rmr=o("mpnet"),tmr=o(" \u2014 "),jW=a("a"),amr=o("TFMPNetModel"),nmr=o(" (MPNet model)"),smr=l(),xF=a("li"),r2e=a("strong"),lmr=o("mt5"),imr=o(" \u2014 "),DW=a("a"),dmr=o("TFMT5Model"),cmr=o(" (mT5 model)"),fmr=l(),$F=a("li"),t2e=a("strong"),mmr=o("openai-gpt"),gmr=o(" \u2014 "),GW=a("a"),hmr=o("TFOpenAIGPTModel"),pmr=o(" (OpenAI GPT model)"),_mr=l(),kF=a("li"),a2e=a("strong"),umr=o("pegasus"),bmr=o(" \u2014 "),OW=a("a"),vmr=o("TFPegasusModel"),Fmr=o(" (Pegasus model)"),Tmr=l(),SF=a("li"),n2e=a("strong"),Mmr=o("rembert"),Emr=o(" \u2014 "),VW=a("a"),Cmr=o("TFRemBertModel"),wmr=o(" (RemBERT model)"),Amr=l(),RF=a("li"),s2e=a("strong"),ymr=o("roberta"),Lmr=o(" \u2014 "),XW=a("a"),xmr=o("TFRobertaModel"),$mr=o(" (RoBERTa model)"),kmr=l(),PF=a("li"),l2e=a("strong"),Smr=o("roformer"),Rmr=o(" \u2014 "),zW=a("a"),Pmr=o("TFRoFormerModel"),Bmr=o(" (RoFormer model)"),Imr=l(),BF=a("li"),i2e=a("strong"),Nmr=o("speech_to_text"),qmr=o(" \u2014 "),WW=a("a"),jmr=o("TFSpeech2TextModel"),Dmr=o(" (Speech2Text model)"),Gmr=l(),IF=a("li"),d2e=a("strong"),Omr=o("swin"),Vmr=o(" \u2014 "),QW=a("a"),Xmr=o("TFSwinModel"),zmr=o(" (Swin model)"),Wmr=l(),NF=a("li"),c2e=a("strong"),Qmr=o("t5"),Hmr=o(" \u2014 "),HW=a("a"),Umr=o("TFT5Model"),Jmr=o(" (T5 model)"),Ymr=l(),qF=a("li"),f2e=a("strong"),Kmr=o("tapas"),Zmr=o(" \u2014 "),UW=a("a"),egr=o("TFTapasModel"),ogr=o(" (TAPAS model)"),rgr=l(),jF=a("li"),m2e=a("strong"),tgr=o("transfo-xl"),agr=o(" \u2014 "),JW=a("a"),ngr=o("TFTransfoXLModel"),sgr=o(" (Transformer-XL model)"),lgr=l(),DF=a("li"),g2e=a("strong"),igr=o("vit"),dgr=o(" \u2014 "),YW=a("a"),cgr=o("TFViTModel"),fgr=o(" (ViT model)"),mgr=l(),GF=a("li"),h2e=a("strong"),ggr=o("vit_mae"),hgr=o(" \u2014 "),KW=a("a"),pgr=o("TFViTMAEModel"),_gr=o(" (ViTMAE model)"),ugr=l(),OF=a("li"),p2e=a("strong"),bgr=o("wav2vec2"),vgr=o(" \u2014 "),ZW=a("a"),Fgr=o("TFWav2Vec2Model"),Tgr=o(" (Wav2Vec2 model)"),Mgr=l(),VF=a("li"),_2e=a("strong"),Egr=o("xglm"),Cgr=o(" \u2014 "),eQ=a("a"),wgr=o("TFXGLMModel"),Agr=o(" (XGLM model)"),ygr=l(),XF=a("li"),u2e=a("strong"),Lgr=o("xlm"),xgr=o(" \u2014 "),oQ=a("a"),$gr=o("TFXLMModel"),kgr=o(" (XLM model)"),Sgr=l(),zF=a("li"),b2e=a("strong"),Rgr=o("xlm-roberta"),Pgr=o(" \u2014 "),rQ=a("a"),Bgr=o("TFXLMRobertaModel"),Igr=o(" (XLM-RoBERTa model)"),Ngr=l(),WF=a("li"),v2e=a("strong"),qgr=o("xlnet"),jgr=o(" \u2014 "),tQ=a("a"),Dgr=o("TFXLNetModel"),Ggr=o(" (XLNet model)"),Ogr=l(),F(QF.$$.fragment),gje=l(),Xd=a("h2"),HF=a("a"),F2e=a("span"),F(p7.$$.fragment),Vgr=l(),T2e=a("span"),Xgr=o("TFAutoModelForPreTraining"),hje=l(),Ko=a("div"),F(_7.$$.fragment),zgr=l(),zd=a("p"),Wgr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),aQ=a("a"),Qgr=o("from_pretrained()"),Hgr=o(" class method or the "),nQ=a("a"),Ugr=o("from_config()"),Jgr=o(` class
method.`),Ygr=l(),u7=a("p"),Kgr=o("This class cannot be instantiated directly using "),M2e=a("code"),Zgr=o("__init__()"),ehr=o(" (throws an error)."),ohr=l(),Lt=a("div"),F(b7.$$.fragment),rhr=l(),E2e=a("p"),thr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),ahr=l(),Wd=a("p"),nhr=o(`Note:
Loading a model from its configuration file does `),C2e=a("strong"),shr=o("not"),lhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sQ=a("a"),ihr=o("from_pretrained()"),dhr=o(" to load the model weights."),chr=l(),F(UF.$$.fragment),fhr=l(),Ar=a("div"),F(v7.$$.fragment),mhr=l(),w2e=a("p"),ghr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),hhr=l(),Za=a("p"),phr=o("The model class to instantiate is selected based on the "),A2e=a("code"),_hr=o("model_type"),uhr=o(` property of the config object (either
passed as an argument or loaded from `),y2e=a("code"),bhr=o("pretrained_model_name_or_path"),vhr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L2e=a("code"),Fhr=o("pretrained_model_name_or_path"),Thr=o(":"),Mhr=l(),se=a("ul"),JF=a("li"),x2e=a("strong"),Ehr=o("albert"),Chr=o(" \u2014 "),lQ=a("a"),whr=o("TFAlbertForPreTraining"),Ahr=o(" (ALBERT model)"),yhr=l(),YF=a("li"),$2e=a("strong"),Lhr=o("bart"),xhr=o(" \u2014 "),iQ=a("a"),$hr=o("TFBartForConditionalGeneration"),khr=o(" (BART model)"),Shr=l(),KF=a("li"),k2e=a("strong"),Rhr=o("bert"),Phr=o(" \u2014 "),dQ=a("a"),Bhr=o("TFBertForPreTraining"),Ihr=o(" (BERT model)"),Nhr=l(),ZF=a("li"),S2e=a("strong"),qhr=o("camembert"),jhr=o(" \u2014 "),cQ=a("a"),Dhr=o("TFCamembertForMaskedLM"),Ghr=o(" (CamemBERT model)"),Ohr=l(),e6=a("li"),R2e=a("strong"),Vhr=o("ctrl"),Xhr=o(" \u2014 "),fQ=a("a"),zhr=o("TFCTRLLMHeadModel"),Whr=o(" (CTRL model)"),Qhr=l(),o6=a("li"),P2e=a("strong"),Hhr=o("distilbert"),Uhr=o(" \u2014 "),mQ=a("a"),Jhr=o("TFDistilBertForMaskedLM"),Yhr=o(" (DistilBERT model)"),Khr=l(),r6=a("li"),B2e=a("strong"),Zhr=o("electra"),epr=o(" \u2014 "),gQ=a("a"),opr=o("TFElectraForPreTraining"),rpr=o(" (ELECTRA model)"),tpr=l(),t6=a("li"),I2e=a("strong"),apr=o("flaubert"),npr=o(" \u2014 "),hQ=a("a"),spr=o("TFFlaubertWithLMHeadModel"),lpr=o(" (FlauBERT model)"),ipr=l(),a6=a("li"),N2e=a("strong"),dpr=o("funnel"),cpr=o(" \u2014 "),pQ=a("a"),fpr=o("TFFunnelForPreTraining"),mpr=o(" (Funnel Transformer model)"),gpr=l(),n6=a("li"),q2e=a("strong"),hpr=o("gpt2"),ppr=o(" \u2014 "),_Q=a("a"),_pr=o("TFGPT2LMHeadModel"),upr=o(" (OpenAI GPT-2 model)"),bpr=l(),s6=a("li"),j2e=a("strong"),vpr=o("layoutlm"),Fpr=o(" \u2014 "),uQ=a("a"),Tpr=o("TFLayoutLMForMaskedLM"),Mpr=o(" (LayoutLM model)"),Epr=l(),l6=a("li"),D2e=a("strong"),Cpr=o("lxmert"),wpr=o(" \u2014 "),bQ=a("a"),Apr=o("TFLxmertForPreTraining"),ypr=o(" (LXMERT model)"),Lpr=l(),i6=a("li"),G2e=a("strong"),xpr=o("mobilebert"),$pr=o(" \u2014 "),vQ=a("a"),kpr=o("TFMobileBertForPreTraining"),Spr=o(" (MobileBERT model)"),Rpr=l(),d6=a("li"),O2e=a("strong"),Ppr=o("mpnet"),Bpr=o(" \u2014 "),FQ=a("a"),Ipr=o("TFMPNetForMaskedLM"),Npr=o(" (MPNet model)"),qpr=l(),c6=a("li"),V2e=a("strong"),jpr=o("openai-gpt"),Dpr=o(" \u2014 "),TQ=a("a"),Gpr=o("TFOpenAIGPTLMHeadModel"),Opr=o(" (OpenAI GPT model)"),Vpr=l(),f6=a("li"),X2e=a("strong"),Xpr=o("roberta"),zpr=o(" \u2014 "),MQ=a("a"),Wpr=o("TFRobertaForMaskedLM"),Qpr=o(" (RoBERTa model)"),Hpr=l(),m6=a("li"),z2e=a("strong"),Upr=o("t5"),Jpr=o(" \u2014 "),EQ=a("a"),Ypr=o("TFT5ForConditionalGeneration"),Kpr=o(" (T5 model)"),Zpr=l(),g6=a("li"),W2e=a("strong"),e_r=o("tapas"),o_r=o(" \u2014 "),CQ=a("a"),r_r=o("TFTapasForMaskedLM"),t_r=o(" (TAPAS model)"),a_r=l(),h6=a("li"),Q2e=a("strong"),n_r=o("transfo-xl"),s_r=o(" \u2014 "),wQ=a("a"),l_r=o("TFTransfoXLLMHeadModel"),i_r=o(" (Transformer-XL model)"),d_r=l(),p6=a("li"),H2e=a("strong"),c_r=o("vit_mae"),f_r=o(" \u2014 "),AQ=a("a"),m_r=o("TFViTMAEForPreTraining"),g_r=o(" (ViTMAE model)"),h_r=l(),_6=a("li"),U2e=a("strong"),p_r=o("xlm"),__r=o(" \u2014 "),yQ=a("a"),u_r=o("TFXLMWithLMHeadModel"),b_r=o(" (XLM model)"),v_r=l(),u6=a("li"),J2e=a("strong"),F_r=o("xlm-roberta"),T_r=o(" \u2014 "),LQ=a("a"),M_r=o("TFXLMRobertaForMaskedLM"),E_r=o(" (XLM-RoBERTa model)"),C_r=l(),b6=a("li"),Y2e=a("strong"),w_r=o("xlnet"),A_r=o(" \u2014 "),xQ=a("a"),y_r=o("TFXLNetLMHeadModel"),L_r=o(" (XLNet model)"),x_r=l(),F(v6.$$.fragment),pje=l(),Qd=a("h2"),F6=a("a"),K2e=a("span"),F(F7.$$.fragment),$_r=l(),Z2e=a("span"),k_r=o("TFAutoModelForCausalLM"),_je=l(),Zo=a("div"),F(T7.$$.fragment),S_r=l(),Hd=a("p"),R_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),$Q=a("a"),P_r=o("from_pretrained()"),B_r=o(" class method or the "),kQ=a("a"),I_r=o("from_config()"),N_r=o(` class
method.`),q_r=l(),M7=a("p"),j_r=o("This class cannot be instantiated directly using "),e4e=a("code"),D_r=o("__init__()"),G_r=o(" (throws an error)."),O_r=l(),xt=a("div"),F(E7.$$.fragment),V_r=l(),o4e=a("p"),X_r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),z_r=l(),Ud=a("p"),W_r=o(`Note:
Loading a model from its configuration file does `),r4e=a("strong"),Q_r=o("not"),H_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SQ=a("a"),U_r=o("from_pretrained()"),J_r=o(" to load the model weights."),Y_r=l(),F(T6.$$.fragment),K_r=l(),yr=a("div"),F(C7.$$.fragment),Z_r=l(),t4e=a("p"),eur=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),our=l(),en=a("p"),rur=o("The model class to instantiate is selected based on the "),a4e=a("code"),tur=o("model_type"),aur=o(` property of the config object (either
passed as an argument or loaded from `),n4e=a("code"),nur=o("pretrained_model_name_or_path"),sur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s4e=a("code"),lur=o("pretrained_model_name_or_path"),iur=o(":"),dur=l(),Te=a("ul"),M6=a("li"),l4e=a("strong"),cur=o("bert"),fur=o(" \u2014 "),RQ=a("a"),mur=o("TFBertLMHeadModel"),gur=o(" (BERT model)"),hur=l(),E6=a("li"),i4e=a("strong"),pur=o("camembert"),_ur=o(" \u2014 "),PQ=a("a"),uur=o("TFCamembertForCausalLM"),bur=o(" (CamemBERT model)"),vur=l(),C6=a("li"),d4e=a("strong"),Fur=o("ctrl"),Tur=o(" \u2014 "),BQ=a("a"),Mur=o("TFCTRLLMHeadModel"),Eur=o(" (CTRL model)"),Cur=l(),w6=a("li"),c4e=a("strong"),wur=o("gpt2"),Aur=o(" \u2014 "),IQ=a("a"),yur=o("TFGPT2LMHeadModel"),Lur=o(" (OpenAI GPT-2 model)"),xur=l(),A6=a("li"),f4e=a("strong"),$ur=o("gptj"),kur=o(" \u2014 "),NQ=a("a"),Sur=o("TFGPTJForCausalLM"),Rur=o(" (GPT-J model)"),Pur=l(),y6=a("li"),m4e=a("strong"),Bur=o("openai-gpt"),Iur=o(" \u2014 "),qQ=a("a"),Nur=o("TFOpenAIGPTLMHeadModel"),qur=o(" (OpenAI GPT model)"),jur=l(),L6=a("li"),g4e=a("strong"),Dur=o("rembert"),Gur=o(" \u2014 "),jQ=a("a"),Our=o("TFRemBertForCausalLM"),Vur=o(" (RemBERT model)"),Xur=l(),x6=a("li"),h4e=a("strong"),zur=o("roberta"),Wur=o(" \u2014 "),DQ=a("a"),Qur=o("TFRobertaForCausalLM"),Hur=o(" (RoBERTa model)"),Uur=l(),$6=a("li"),p4e=a("strong"),Jur=o("roformer"),Yur=o(" \u2014 "),GQ=a("a"),Kur=o("TFRoFormerForCausalLM"),Zur=o(" (RoFormer model)"),e1r=l(),k6=a("li"),_4e=a("strong"),o1r=o("transfo-xl"),r1r=o(" \u2014 "),OQ=a("a"),t1r=o("TFTransfoXLLMHeadModel"),a1r=o(" (Transformer-XL model)"),n1r=l(),S6=a("li"),u4e=a("strong"),s1r=o("xglm"),l1r=o(" \u2014 "),VQ=a("a"),i1r=o("TFXGLMForCausalLM"),d1r=o(" (XGLM model)"),c1r=l(),R6=a("li"),b4e=a("strong"),f1r=o("xlm"),m1r=o(" \u2014 "),XQ=a("a"),g1r=o("TFXLMWithLMHeadModel"),h1r=o(" (XLM model)"),p1r=l(),P6=a("li"),v4e=a("strong"),_1r=o("xlnet"),u1r=o(" \u2014 "),zQ=a("a"),b1r=o("TFXLNetLMHeadModel"),v1r=o(" (XLNet model)"),F1r=l(),F(B6.$$.fragment),uje=l(),Jd=a("h2"),I6=a("a"),F4e=a("span"),F(w7.$$.fragment),T1r=l(),T4e=a("span"),M1r=o("TFAutoModelForImageClassification"),bje=l(),er=a("div"),F(A7.$$.fragment),E1r=l(),Yd=a("p"),C1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),WQ=a("a"),w1r=o("from_pretrained()"),A1r=o(" class method or the "),QQ=a("a"),y1r=o("from_config()"),L1r=o(` class
method.`),x1r=l(),y7=a("p"),$1r=o("This class cannot be instantiated directly using "),M4e=a("code"),k1r=o("__init__()"),S1r=o(" (throws an error)."),R1r=l(),$t=a("div"),F(L7.$$.fragment),P1r=l(),E4e=a("p"),B1r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),I1r=l(),Kd=a("p"),N1r=o(`Note:
Loading a model from its configuration file does `),C4e=a("strong"),q1r=o("not"),j1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HQ=a("a"),D1r=o("from_pretrained()"),G1r=o(" to load the model weights."),O1r=l(),F(N6.$$.fragment),V1r=l(),Lr=a("div"),F(x7.$$.fragment),X1r=l(),w4e=a("p"),z1r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),W1r=l(),on=a("p"),Q1r=o("The model class to instantiate is selected based on the "),A4e=a("code"),H1r=o("model_type"),U1r=o(` property of the config object (either
passed as an argument or loaded from `),y4e=a("code"),J1r=o("pretrained_model_name_or_path"),Y1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L4e=a("code"),K1r=o("pretrained_model_name_or_path"),Z1r=o(":"),ebr=l(),rn=a("ul"),q6=a("li"),x4e=a("strong"),obr=o("convnext"),rbr=o(" \u2014 "),UQ=a("a"),tbr=o("TFConvNextForImageClassification"),abr=o(" (ConvNext model)"),nbr=l(),j6=a("li"),$4e=a("strong"),sbr=o("data2vec-vision"),lbr=o(" \u2014 "),JQ=a("a"),ibr=o("TFData2VecVisionForImageClassification"),dbr=o(" (Data2VecVision model)"),cbr=l(),D6=a("li"),k4e=a("strong"),fbr=o("swin"),mbr=o(" \u2014 "),YQ=a("a"),gbr=o("TFSwinForImageClassification"),hbr=o(" (Swin model)"),pbr=l(),G6=a("li"),S4e=a("strong"),_br=o("vit"),ubr=o(" \u2014 "),KQ=a("a"),bbr=o("TFViTForImageClassification"),vbr=o(" (ViT model)"),Fbr=l(),F(O6.$$.fragment),vje=l(),Zd=a("h2"),V6=a("a"),R4e=a("span"),F($7.$$.fragment),Tbr=l(),P4e=a("span"),Mbr=o("TFAutoModelForMaskedLM"),Fje=l(),or=a("div"),F(k7.$$.fragment),Ebr=l(),ec=a("p"),Cbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),ZQ=a("a"),wbr=o("from_pretrained()"),Abr=o(" class method or the "),eH=a("a"),ybr=o("from_config()"),Lbr=o(` class
method.`),xbr=l(),S7=a("p"),$br=o("This class cannot be instantiated directly using "),B4e=a("code"),kbr=o("__init__()"),Sbr=o(" (throws an error)."),Rbr=l(),kt=a("div"),F(R7.$$.fragment),Pbr=l(),I4e=a("p"),Bbr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Ibr=l(),oc=a("p"),Nbr=o(`Note:
Loading a model from its configuration file does `),N4e=a("strong"),qbr=o("not"),jbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oH=a("a"),Dbr=o("from_pretrained()"),Gbr=o(" to load the model weights."),Obr=l(),F(X6.$$.fragment),Vbr=l(),xr=a("div"),F(P7.$$.fragment),Xbr=l(),q4e=a("p"),zbr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Wbr=l(),tn=a("p"),Qbr=o("The model class to instantiate is selected based on the "),j4e=a("code"),Hbr=o("model_type"),Ubr=o(` property of the config object (either
passed as an argument or loaded from `),D4e=a("code"),Jbr=o("pretrained_model_name_or_path"),Ybr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G4e=a("code"),Kbr=o("pretrained_model_name_or_path"),Zbr=o(":"),e2r=l(),ie=a("ul"),z6=a("li"),O4e=a("strong"),o2r=o("albert"),r2r=o(" \u2014 "),rH=a("a"),t2r=o("TFAlbertForMaskedLM"),a2r=o(" (ALBERT model)"),n2r=l(),W6=a("li"),V4e=a("strong"),s2r=o("bert"),l2r=o(" \u2014 "),tH=a("a"),i2r=o("TFBertForMaskedLM"),d2r=o(" (BERT model)"),c2r=l(),Q6=a("li"),X4e=a("strong"),f2r=o("camembert"),m2r=o(" \u2014 "),aH=a("a"),g2r=o("TFCamembertForMaskedLM"),h2r=o(" (CamemBERT model)"),p2r=l(),H6=a("li"),z4e=a("strong"),_2r=o("convbert"),u2r=o(" \u2014 "),nH=a("a"),b2r=o("TFConvBertForMaskedLM"),v2r=o(" (ConvBERT model)"),F2r=l(),U6=a("li"),W4e=a("strong"),T2r=o("deberta"),M2r=o(" \u2014 "),sH=a("a"),E2r=o("TFDebertaForMaskedLM"),C2r=o(" (DeBERTa model)"),w2r=l(),J6=a("li"),Q4e=a("strong"),A2r=o("deberta-v2"),y2r=o(" \u2014 "),lH=a("a"),L2r=o("TFDebertaV2ForMaskedLM"),x2r=o(" (DeBERTa-v2 model)"),$2r=l(),Y6=a("li"),H4e=a("strong"),k2r=o("distilbert"),S2r=o(" \u2014 "),iH=a("a"),R2r=o("TFDistilBertForMaskedLM"),P2r=o(" (DistilBERT model)"),B2r=l(),K6=a("li"),U4e=a("strong"),I2r=o("electra"),N2r=o(" \u2014 "),dH=a("a"),q2r=o("TFElectraForMaskedLM"),j2r=o(" (ELECTRA model)"),D2r=l(),Z6=a("li"),J4e=a("strong"),G2r=o("flaubert"),O2r=o(" \u2014 "),cH=a("a"),V2r=o("TFFlaubertWithLMHeadModel"),X2r=o(" (FlauBERT model)"),z2r=l(),eT=a("li"),Y4e=a("strong"),W2r=o("funnel"),Q2r=o(" \u2014 "),fH=a("a"),H2r=o("TFFunnelForMaskedLM"),U2r=o(" (Funnel Transformer model)"),J2r=l(),oT=a("li"),K4e=a("strong"),Y2r=o("layoutlm"),K2r=o(" \u2014 "),mH=a("a"),Z2r=o("TFLayoutLMForMaskedLM"),e4r=o(" (LayoutLM model)"),o4r=l(),rT=a("li"),Z4e=a("strong"),r4r=o("longformer"),t4r=o(" \u2014 "),gH=a("a"),a4r=o("TFLongformerForMaskedLM"),n4r=o(" (Longformer model)"),s4r=l(),tT=a("li"),e5e=a("strong"),l4r=o("mobilebert"),i4r=o(" \u2014 "),hH=a("a"),d4r=o("TFMobileBertForMaskedLM"),c4r=o(" (MobileBERT model)"),f4r=l(),aT=a("li"),o5e=a("strong"),m4r=o("mpnet"),g4r=o(" \u2014 "),pH=a("a"),h4r=o("TFMPNetForMaskedLM"),p4r=o(" (MPNet model)"),_4r=l(),nT=a("li"),r5e=a("strong"),u4r=o("rembert"),b4r=o(" \u2014 "),_H=a("a"),v4r=o("TFRemBertForMaskedLM"),F4r=o(" (RemBERT model)"),T4r=l(),sT=a("li"),t5e=a("strong"),M4r=o("roberta"),E4r=o(" \u2014 "),uH=a("a"),C4r=o("TFRobertaForMaskedLM"),w4r=o(" (RoBERTa model)"),A4r=l(),lT=a("li"),a5e=a("strong"),y4r=o("roformer"),L4r=o(" \u2014 "),bH=a("a"),x4r=o("TFRoFormerForMaskedLM"),$4r=o(" (RoFormer model)"),k4r=l(),iT=a("li"),n5e=a("strong"),S4r=o("tapas"),R4r=o(" \u2014 "),vH=a("a"),P4r=o("TFTapasForMaskedLM"),B4r=o(" (TAPAS model)"),I4r=l(),dT=a("li"),s5e=a("strong"),N4r=o("xlm"),q4r=o(" \u2014 "),FH=a("a"),j4r=o("TFXLMWithLMHeadModel"),D4r=o(" (XLM model)"),G4r=l(),cT=a("li"),l5e=a("strong"),O4r=o("xlm-roberta"),V4r=o(" \u2014 "),TH=a("a"),X4r=o("TFXLMRobertaForMaskedLM"),z4r=o(" (XLM-RoBERTa model)"),W4r=l(),F(fT.$$.fragment),Tje=l(),rc=a("h2"),mT=a("a"),i5e=a("span"),F(B7.$$.fragment),Q4r=l(),d5e=a("span"),H4r=o("TFAutoModelForSeq2SeqLM"),Mje=l(),rr=a("div"),F(I7.$$.fragment),U4r=l(),tc=a("p"),J4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),MH=a("a"),Y4r=o("from_pretrained()"),K4r=o(" class method or the "),EH=a("a"),Z4r=o("from_config()"),e5r=o(` class
method.`),o5r=l(),N7=a("p"),r5r=o("This class cannot be instantiated directly using "),c5e=a("code"),t5r=o("__init__()"),a5r=o(" (throws an error)."),n5r=l(),St=a("div"),F(q7.$$.fragment),s5r=l(),f5e=a("p"),l5r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),i5r=l(),ac=a("p"),d5r=o(`Note:
Loading a model from its configuration file does `),m5e=a("strong"),c5r=o("not"),f5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CH=a("a"),m5r=o("from_pretrained()"),g5r=o(" to load the model weights."),h5r=l(),F(gT.$$.fragment),p5r=l(),$r=a("div"),F(j7.$$.fragment),_5r=l(),g5e=a("p"),u5r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),b5r=l(),an=a("p"),v5r=o("The model class to instantiate is selected based on the "),h5e=a("code"),F5r=o("model_type"),T5r=o(` property of the config object (either
passed as an argument or loaded from `),p5e=a("code"),M5r=o("pretrained_model_name_or_path"),E5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_5e=a("code"),C5r=o("pretrained_model_name_or_path"),w5r=o(":"),A5r=l(),ye=a("ul"),hT=a("li"),u5e=a("strong"),y5r=o("bart"),L5r=o(" \u2014 "),wH=a("a"),x5r=o("TFBartForConditionalGeneration"),$5r=o(" (BART model)"),k5r=l(),pT=a("li"),b5e=a("strong"),S5r=o("blenderbot"),R5r=o(" \u2014 "),AH=a("a"),P5r=o("TFBlenderbotForConditionalGeneration"),B5r=o(" (Blenderbot model)"),I5r=l(),_T=a("li"),v5e=a("strong"),N5r=o("blenderbot-small"),q5r=o(" \u2014 "),yH=a("a"),j5r=o("TFBlenderbotSmallForConditionalGeneration"),D5r=o(" (BlenderbotSmall model)"),G5r=l(),uT=a("li"),F5e=a("strong"),O5r=o("encoder-decoder"),V5r=o(" \u2014 "),LH=a("a"),X5r=o("TFEncoderDecoderModel"),z5r=o(" (Encoder decoder model)"),W5r=l(),bT=a("li"),T5e=a("strong"),Q5r=o("led"),H5r=o(" \u2014 "),xH=a("a"),U5r=o("TFLEDForConditionalGeneration"),J5r=o(" (LED model)"),Y5r=l(),vT=a("li"),M5e=a("strong"),K5r=o("marian"),Z5r=o(" \u2014 "),$H=a("a"),evr=o("TFMarianMTModel"),ovr=o(" (Marian model)"),rvr=l(),FT=a("li"),E5e=a("strong"),tvr=o("mbart"),avr=o(" \u2014 "),kH=a("a"),nvr=o("TFMBartForConditionalGeneration"),svr=o(" (mBART model)"),lvr=l(),TT=a("li"),C5e=a("strong"),ivr=o("mt5"),dvr=o(" \u2014 "),SH=a("a"),cvr=o("TFMT5ForConditionalGeneration"),fvr=o(" (mT5 model)"),mvr=l(),MT=a("li"),w5e=a("strong"),gvr=o("pegasus"),hvr=o(" \u2014 "),RH=a("a"),pvr=o("TFPegasusForConditionalGeneration"),_vr=o(" (Pegasus model)"),uvr=l(),ET=a("li"),A5e=a("strong"),bvr=o("t5"),vvr=o(" \u2014 "),PH=a("a"),Fvr=o("TFT5ForConditionalGeneration"),Tvr=o(" (T5 model)"),Mvr=l(),F(CT.$$.fragment),Eje=l(),nc=a("h2"),wT=a("a"),y5e=a("span"),F(D7.$$.fragment),Evr=l(),L5e=a("span"),Cvr=o("TFAutoModelForSequenceClassification"),Cje=l(),tr=a("div"),F(G7.$$.fragment),wvr=l(),sc=a("p"),Avr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),BH=a("a"),yvr=o("from_pretrained()"),Lvr=o(" class method or the "),IH=a("a"),xvr=o("from_config()"),$vr=o(` class
method.`),kvr=l(),O7=a("p"),Svr=o("This class cannot be instantiated directly using "),x5e=a("code"),Rvr=o("__init__()"),Pvr=o(" (throws an error)."),Bvr=l(),Rt=a("div"),F(V7.$$.fragment),Ivr=l(),$5e=a("p"),Nvr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),qvr=l(),lc=a("p"),jvr=o(`Note:
Loading a model from its configuration file does `),k5e=a("strong"),Dvr=o("not"),Gvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NH=a("a"),Ovr=o("from_pretrained()"),Vvr=o(" to load the model weights."),Xvr=l(),F(AT.$$.fragment),zvr=l(),kr=a("div"),F(X7.$$.fragment),Wvr=l(),S5e=a("p"),Qvr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Hvr=l(),nn=a("p"),Uvr=o("The model class to instantiate is selected based on the "),R5e=a("code"),Jvr=o("model_type"),Yvr=o(` property of the config object (either
passed as an argument or loaded from `),P5e=a("code"),Kvr=o("pretrained_model_name_or_path"),Zvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B5e=a("code"),e3r=o("pretrained_model_name_or_path"),o3r=o(":"),r3r=l(),oe=a("ul"),yT=a("li"),I5e=a("strong"),t3r=o("albert"),a3r=o(" \u2014 "),qH=a("a"),n3r=o("TFAlbertForSequenceClassification"),s3r=o(" (ALBERT model)"),l3r=l(),LT=a("li"),N5e=a("strong"),i3r=o("bert"),d3r=o(" \u2014 "),jH=a("a"),c3r=o("TFBertForSequenceClassification"),f3r=o(" (BERT model)"),m3r=l(),xT=a("li"),q5e=a("strong"),g3r=o("camembert"),h3r=o(" \u2014 "),DH=a("a"),p3r=o("TFCamembertForSequenceClassification"),_3r=o(" (CamemBERT model)"),u3r=l(),$T=a("li"),j5e=a("strong"),b3r=o("convbert"),v3r=o(" \u2014 "),GH=a("a"),F3r=o("TFConvBertForSequenceClassification"),T3r=o(" (ConvBERT model)"),M3r=l(),kT=a("li"),D5e=a("strong"),E3r=o("ctrl"),C3r=o(" \u2014 "),OH=a("a"),w3r=o("TFCTRLForSequenceClassification"),A3r=o(" (CTRL model)"),y3r=l(),ST=a("li"),G5e=a("strong"),L3r=o("deberta"),x3r=o(" \u2014 "),VH=a("a"),$3r=o("TFDebertaForSequenceClassification"),k3r=o(" (DeBERTa model)"),S3r=l(),RT=a("li"),O5e=a("strong"),R3r=o("deberta-v2"),P3r=o(" \u2014 "),XH=a("a"),B3r=o("TFDebertaV2ForSequenceClassification"),I3r=o(" (DeBERTa-v2 model)"),N3r=l(),PT=a("li"),V5e=a("strong"),q3r=o("distilbert"),j3r=o(" \u2014 "),zH=a("a"),D3r=o("TFDistilBertForSequenceClassification"),G3r=o(" (DistilBERT model)"),O3r=l(),BT=a("li"),X5e=a("strong"),V3r=o("electra"),X3r=o(" \u2014 "),WH=a("a"),z3r=o("TFElectraForSequenceClassification"),W3r=o(" (ELECTRA model)"),Q3r=l(),IT=a("li"),z5e=a("strong"),H3r=o("flaubert"),U3r=o(" \u2014 "),QH=a("a"),J3r=o("TFFlaubertForSequenceClassification"),Y3r=o(" (FlauBERT model)"),K3r=l(),NT=a("li"),W5e=a("strong"),Z3r=o("funnel"),eFr=o(" \u2014 "),HH=a("a"),oFr=o("TFFunnelForSequenceClassification"),rFr=o(" (Funnel Transformer model)"),tFr=l(),qT=a("li"),Q5e=a("strong"),aFr=o("gpt2"),nFr=o(" \u2014 "),UH=a("a"),sFr=o("TFGPT2ForSequenceClassification"),lFr=o(" (OpenAI GPT-2 model)"),iFr=l(),jT=a("li"),H5e=a("strong"),dFr=o("gptj"),cFr=o(" \u2014 "),JH=a("a"),fFr=o("TFGPTJForSequenceClassification"),mFr=o(" (GPT-J model)"),gFr=l(),DT=a("li"),U5e=a("strong"),hFr=o("layoutlm"),pFr=o(" \u2014 "),YH=a("a"),_Fr=o("TFLayoutLMForSequenceClassification"),uFr=o(" (LayoutLM model)"),bFr=l(),GT=a("li"),J5e=a("strong"),vFr=o("longformer"),FFr=o(" \u2014 "),KH=a("a"),TFr=o("TFLongformerForSequenceClassification"),MFr=o(" (Longformer model)"),EFr=l(),OT=a("li"),Y5e=a("strong"),CFr=o("mobilebert"),wFr=o(" \u2014 "),ZH=a("a"),AFr=o("TFMobileBertForSequenceClassification"),yFr=o(" (MobileBERT model)"),LFr=l(),VT=a("li"),K5e=a("strong"),xFr=o("mpnet"),$Fr=o(" \u2014 "),eU=a("a"),kFr=o("TFMPNetForSequenceClassification"),SFr=o(" (MPNet model)"),RFr=l(),XT=a("li"),Z5e=a("strong"),PFr=o("openai-gpt"),BFr=o(" \u2014 "),oU=a("a"),IFr=o("TFOpenAIGPTForSequenceClassification"),NFr=o(" (OpenAI GPT model)"),qFr=l(),zT=a("li"),eve=a("strong"),jFr=o("rembert"),DFr=o(" \u2014 "),rU=a("a"),GFr=o("TFRemBertForSequenceClassification"),OFr=o(" (RemBERT model)"),VFr=l(),WT=a("li"),ove=a("strong"),XFr=o("roberta"),zFr=o(" \u2014 "),tU=a("a"),WFr=o("TFRobertaForSequenceClassification"),QFr=o(" (RoBERTa model)"),HFr=l(),QT=a("li"),rve=a("strong"),UFr=o("roformer"),JFr=o(" \u2014 "),aU=a("a"),YFr=o("TFRoFormerForSequenceClassification"),KFr=o(" (RoFormer model)"),ZFr=l(),HT=a("li"),tve=a("strong"),e6r=o("tapas"),o6r=o(" \u2014 "),nU=a("a"),r6r=o("TFTapasForSequenceClassification"),t6r=o(" (TAPAS model)"),a6r=l(),UT=a("li"),ave=a("strong"),n6r=o("transfo-xl"),s6r=o(" \u2014 "),sU=a("a"),l6r=o("TFTransfoXLForSequenceClassification"),i6r=o(" (Transformer-XL model)"),d6r=l(),JT=a("li"),nve=a("strong"),c6r=o("xlm"),f6r=o(" \u2014 "),lU=a("a"),m6r=o("TFXLMForSequenceClassification"),g6r=o(" (XLM model)"),h6r=l(),YT=a("li"),sve=a("strong"),p6r=o("xlm-roberta"),_6r=o(" \u2014 "),iU=a("a"),u6r=o("TFXLMRobertaForSequenceClassification"),b6r=o(" (XLM-RoBERTa model)"),v6r=l(),KT=a("li"),lve=a("strong"),F6r=o("xlnet"),T6r=o(" \u2014 "),dU=a("a"),M6r=o("TFXLNetForSequenceClassification"),E6r=o(" (XLNet model)"),C6r=l(),F(ZT.$$.fragment),wje=l(),ic=a("h2"),eM=a("a"),ive=a("span"),F(z7.$$.fragment),w6r=l(),dve=a("span"),A6r=o("TFAutoModelForMultipleChoice"),Aje=l(),ar=a("div"),F(W7.$$.fragment),y6r=l(),dc=a("p"),L6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),cU=a("a"),x6r=o("from_pretrained()"),$6r=o(" class method or the "),fU=a("a"),k6r=o("from_config()"),S6r=o(` class
method.`),R6r=l(),Q7=a("p"),P6r=o("This class cannot be instantiated directly using "),cve=a("code"),B6r=o("__init__()"),I6r=o(" (throws an error)."),N6r=l(),Pt=a("div"),F(H7.$$.fragment),q6r=l(),fve=a("p"),j6r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),D6r=l(),cc=a("p"),G6r=o(`Note:
Loading a model from its configuration file does `),mve=a("strong"),O6r=o("not"),V6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mU=a("a"),X6r=o("from_pretrained()"),z6r=o(" to load the model weights."),W6r=l(),F(oM.$$.fragment),Q6r=l(),Sr=a("div"),F(U7.$$.fragment),H6r=l(),gve=a("p"),U6r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),J6r=l(),sn=a("p"),Y6r=o("The model class to instantiate is selected based on the "),hve=a("code"),K6r=o("model_type"),Z6r=o(` property of the config object (either
passed as an argument or loaded from `),pve=a("code"),eTr=o("pretrained_model_name_or_path"),oTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_ve=a("code"),rTr=o("pretrained_model_name_or_path"),tTr=o(":"),aTr=l(),pe=a("ul"),rM=a("li"),uve=a("strong"),nTr=o("albert"),sTr=o(" \u2014 "),gU=a("a"),lTr=o("TFAlbertForMultipleChoice"),iTr=o(" (ALBERT model)"),dTr=l(),tM=a("li"),bve=a("strong"),cTr=o("bert"),fTr=o(" \u2014 "),hU=a("a"),mTr=o("TFBertForMultipleChoice"),gTr=o(" (BERT model)"),hTr=l(),aM=a("li"),vve=a("strong"),pTr=o("camembert"),_Tr=o(" \u2014 "),pU=a("a"),uTr=o("TFCamembertForMultipleChoice"),bTr=o(" (CamemBERT model)"),vTr=l(),nM=a("li"),Fve=a("strong"),FTr=o("convbert"),TTr=o(" \u2014 "),_U=a("a"),MTr=o("TFConvBertForMultipleChoice"),ETr=o(" (ConvBERT model)"),CTr=l(),sM=a("li"),Tve=a("strong"),wTr=o("distilbert"),ATr=o(" \u2014 "),uU=a("a"),yTr=o("TFDistilBertForMultipleChoice"),LTr=o(" (DistilBERT model)"),xTr=l(),lM=a("li"),Mve=a("strong"),$Tr=o("electra"),kTr=o(" \u2014 "),bU=a("a"),STr=o("TFElectraForMultipleChoice"),RTr=o(" (ELECTRA model)"),PTr=l(),iM=a("li"),Eve=a("strong"),BTr=o("flaubert"),ITr=o(" \u2014 "),vU=a("a"),NTr=o("TFFlaubertForMultipleChoice"),qTr=o(" (FlauBERT model)"),jTr=l(),dM=a("li"),Cve=a("strong"),DTr=o("funnel"),GTr=o(" \u2014 "),FU=a("a"),OTr=o("TFFunnelForMultipleChoice"),VTr=o(" (Funnel Transformer model)"),XTr=l(),cM=a("li"),wve=a("strong"),zTr=o("longformer"),WTr=o(" \u2014 "),TU=a("a"),QTr=o("TFLongformerForMultipleChoice"),HTr=o(" (Longformer model)"),UTr=l(),fM=a("li"),Ave=a("strong"),JTr=o("mobilebert"),YTr=o(" \u2014 "),MU=a("a"),KTr=o("TFMobileBertForMultipleChoice"),ZTr=o(" (MobileBERT model)"),eMr=l(),mM=a("li"),yve=a("strong"),oMr=o("mpnet"),rMr=o(" \u2014 "),EU=a("a"),tMr=o("TFMPNetForMultipleChoice"),aMr=o(" (MPNet model)"),nMr=l(),gM=a("li"),Lve=a("strong"),sMr=o("rembert"),lMr=o(" \u2014 "),CU=a("a"),iMr=o("TFRemBertForMultipleChoice"),dMr=o(" (RemBERT model)"),cMr=l(),hM=a("li"),xve=a("strong"),fMr=o("roberta"),mMr=o(" \u2014 "),wU=a("a"),gMr=o("TFRobertaForMultipleChoice"),hMr=o(" (RoBERTa model)"),pMr=l(),pM=a("li"),$ve=a("strong"),_Mr=o("roformer"),uMr=o(" \u2014 "),AU=a("a"),bMr=o("TFRoFormerForMultipleChoice"),vMr=o(" (RoFormer model)"),FMr=l(),_M=a("li"),kve=a("strong"),TMr=o("xlm"),MMr=o(" \u2014 "),yU=a("a"),EMr=o("TFXLMForMultipleChoice"),CMr=o(" (XLM model)"),wMr=l(),uM=a("li"),Sve=a("strong"),AMr=o("xlm-roberta"),yMr=o(" \u2014 "),LU=a("a"),LMr=o("TFXLMRobertaForMultipleChoice"),xMr=o(" (XLM-RoBERTa model)"),$Mr=l(),bM=a("li"),Rve=a("strong"),kMr=o("xlnet"),SMr=o(" \u2014 "),xU=a("a"),RMr=o("TFXLNetForMultipleChoice"),PMr=o(" (XLNet model)"),BMr=l(),F(vM.$$.fragment),yje=l(),fc=a("h2"),FM=a("a"),Pve=a("span"),F(J7.$$.fragment),IMr=l(),Bve=a("span"),NMr=o("TFAutoModelForNextSentencePrediction"),Lje=l(),nr=a("div"),F(Y7.$$.fragment),qMr=l(),mc=a("p"),jMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),$U=a("a"),DMr=o("from_pretrained()"),GMr=o(" class method or the "),kU=a("a"),OMr=o("from_config()"),VMr=o(` class
method.`),XMr=l(),K7=a("p"),zMr=o("This class cannot be instantiated directly using "),Ive=a("code"),WMr=o("__init__()"),QMr=o(" (throws an error)."),HMr=l(),Bt=a("div"),F(Z7.$$.fragment),UMr=l(),Nve=a("p"),JMr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),YMr=l(),gc=a("p"),KMr=o(`Note:
Loading a model from its configuration file does `),qve=a("strong"),ZMr=o("not"),eEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SU=a("a"),oEr=o("from_pretrained()"),rEr=o(" to load the model weights."),tEr=l(),F(TM.$$.fragment),aEr=l(),Rr=a("div"),F(e9.$$.fragment),nEr=l(),jve=a("p"),sEr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),lEr=l(),ln=a("p"),iEr=o("The model class to instantiate is selected based on the "),Dve=a("code"),dEr=o("model_type"),cEr=o(` property of the config object (either
passed as an argument or loaded from `),Gve=a("code"),fEr=o("pretrained_model_name_or_path"),mEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ove=a("code"),gEr=o("pretrained_model_name_or_path"),hEr=o(":"),pEr=l(),o9=a("ul"),MM=a("li"),Vve=a("strong"),_Er=o("bert"),uEr=o(" \u2014 "),RU=a("a"),bEr=o("TFBertForNextSentencePrediction"),vEr=o(" (BERT model)"),FEr=l(),EM=a("li"),Xve=a("strong"),TEr=o("mobilebert"),MEr=o(" \u2014 "),PU=a("a"),EEr=o("TFMobileBertForNextSentencePrediction"),CEr=o(" (MobileBERT model)"),wEr=l(),F(CM.$$.fragment),xje=l(),hc=a("h2"),wM=a("a"),zve=a("span"),F(r9.$$.fragment),AEr=l(),Wve=a("span"),yEr=o("TFAutoModelForTableQuestionAnswering"),$je=l(),sr=a("div"),F(t9.$$.fragment),LEr=l(),pc=a("p"),xEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),BU=a("a"),$Er=o("from_pretrained()"),kEr=o(" class method or the "),IU=a("a"),SEr=o("from_config()"),REr=o(` class
method.`),PEr=l(),a9=a("p"),BEr=o("This class cannot be instantiated directly using "),Qve=a("code"),IEr=o("__init__()"),NEr=o(" (throws an error)."),qEr=l(),It=a("div"),F(n9.$$.fragment),jEr=l(),Hve=a("p"),DEr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),GEr=l(),_c=a("p"),OEr=o(`Note:
Loading a model from its configuration file does `),Uve=a("strong"),VEr=o("not"),XEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NU=a("a"),zEr=o("from_pretrained()"),WEr=o(" to load the model weights."),QEr=l(),F(AM.$$.fragment),HEr=l(),Pr=a("div"),F(s9.$$.fragment),UEr=l(),Jve=a("p"),JEr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),YEr=l(),dn=a("p"),KEr=o("The model class to instantiate is selected based on the "),Yve=a("code"),ZEr=o("model_type"),eCr=o(` property of the config object (either
passed as an argument or loaded from `),Kve=a("code"),oCr=o("pretrained_model_name_or_path"),rCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zve=a("code"),tCr=o("pretrained_model_name_or_path"),aCr=o(":"),nCr=l(),e3e=a("ul"),yM=a("li"),o3e=a("strong"),sCr=o("tapas"),lCr=o(" \u2014 "),qU=a("a"),iCr=o("TFTapasForQuestionAnswering"),dCr=o(" (TAPAS model)"),cCr=l(),F(LM.$$.fragment),kje=l(),uc=a("h2"),xM=a("a"),r3e=a("span"),F(l9.$$.fragment),fCr=l(),t3e=a("span"),mCr=o("TFAutoModelForTokenClassification"),Sje=l(),lr=a("div"),F(i9.$$.fragment),gCr=l(),bc=a("p"),hCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),jU=a("a"),pCr=o("from_pretrained()"),_Cr=o(" class method or the "),DU=a("a"),uCr=o("from_config()"),bCr=o(` class
method.`),vCr=l(),d9=a("p"),FCr=o("This class cannot be instantiated directly using "),a3e=a("code"),TCr=o("__init__()"),MCr=o(" (throws an error)."),ECr=l(),Nt=a("div"),F(c9.$$.fragment),CCr=l(),n3e=a("p"),wCr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),ACr=l(),vc=a("p"),yCr=o(`Note:
Loading a model from its configuration file does `),s3e=a("strong"),LCr=o("not"),xCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GU=a("a"),$Cr=o("from_pretrained()"),kCr=o(" to load the model weights."),SCr=l(),F($M.$$.fragment),RCr=l(),Br=a("div"),F(f9.$$.fragment),PCr=l(),l3e=a("p"),BCr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),ICr=l(),cn=a("p"),NCr=o("The model class to instantiate is selected based on the "),i3e=a("code"),qCr=o("model_type"),jCr=o(` property of the config object (either
passed as an argument or loaded from `),d3e=a("code"),DCr=o("pretrained_model_name_or_path"),GCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c3e=a("code"),OCr=o("pretrained_model_name_or_path"),VCr=o(":"),XCr=l(),de=a("ul"),kM=a("li"),f3e=a("strong"),zCr=o("albert"),WCr=o(" \u2014 "),OU=a("a"),QCr=o("TFAlbertForTokenClassification"),HCr=o(" (ALBERT model)"),UCr=l(),SM=a("li"),m3e=a("strong"),JCr=o("bert"),YCr=o(" \u2014 "),VU=a("a"),KCr=o("TFBertForTokenClassification"),ZCr=o(" (BERT model)"),ewr=l(),RM=a("li"),g3e=a("strong"),owr=o("camembert"),rwr=o(" \u2014 "),XU=a("a"),twr=o("TFCamembertForTokenClassification"),awr=o(" (CamemBERT model)"),nwr=l(),PM=a("li"),h3e=a("strong"),swr=o("convbert"),lwr=o(" \u2014 "),zU=a("a"),iwr=o("TFConvBertForTokenClassification"),dwr=o(" (ConvBERT model)"),cwr=l(),BM=a("li"),p3e=a("strong"),fwr=o("deberta"),mwr=o(" \u2014 "),WU=a("a"),gwr=o("TFDebertaForTokenClassification"),hwr=o(" (DeBERTa model)"),pwr=l(),IM=a("li"),_3e=a("strong"),_wr=o("deberta-v2"),uwr=o(" \u2014 "),QU=a("a"),bwr=o("TFDebertaV2ForTokenClassification"),vwr=o(" (DeBERTa-v2 model)"),Fwr=l(),NM=a("li"),u3e=a("strong"),Twr=o("distilbert"),Mwr=o(" \u2014 "),HU=a("a"),Ewr=o("TFDistilBertForTokenClassification"),Cwr=o(" (DistilBERT model)"),wwr=l(),qM=a("li"),b3e=a("strong"),Awr=o("electra"),ywr=o(" \u2014 "),UU=a("a"),Lwr=o("TFElectraForTokenClassification"),xwr=o(" (ELECTRA model)"),$wr=l(),jM=a("li"),v3e=a("strong"),kwr=o("flaubert"),Swr=o(" \u2014 "),JU=a("a"),Rwr=o("TFFlaubertForTokenClassification"),Pwr=o(" (FlauBERT model)"),Bwr=l(),DM=a("li"),F3e=a("strong"),Iwr=o("funnel"),Nwr=o(" \u2014 "),YU=a("a"),qwr=o("TFFunnelForTokenClassification"),jwr=o(" (Funnel Transformer model)"),Dwr=l(),GM=a("li"),T3e=a("strong"),Gwr=o("layoutlm"),Owr=o(" \u2014 "),KU=a("a"),Vwr=o("TFLayoutLMForTokenClassification"),Xwr=o(" (LayoutLM model)"),zwr=l(),OM=a("li"),M3e=a("strong"),Wwr=o("longformer"),Qwr=o(" \u2014 "),ZU=a("a"),Hwr=o("TFLongformerForTokenClassification"),Uwr=o(" (Longformer model)"),Jwr=l(),VM=a("li"),E3e=a("strong"),Ywr=o("mobilebert"),Kwr=o(" \u2014 "),eJ=a("a"),Zwr=o("TFMobileBertForTokenClassification"),e0r=o(" (MobileBERT model)"),o0r=l(),XM=a("li"),C3e=a("strong"),r0r=o("mpnet"),t0r=o(" \u2014 "),oJ=a("a"),a0r=o("TFMPNetForTokenClassification"),n0r=o(" (MPNet model)"),s0r=l(),zM=a("li"),w3e=a("strong"),l0r=o("rembert"),i0r=o(" \u2014 "),rJ=a("a"),d0r=o("TFRemBertForTokenClassification"),c0r=o(" (RemBERT model)"),f0r=l(),WM=a("li"),A3e=a("strong"),m0r=o("roberta"),g0r=o(" \u2014 "),tJ=a("a"),h0r=o("TFRobertaForTokenClassification"),p0r=o(" (RoBERTa model)"),_0r=l(),QM=a("li"),y3e=a("strong"),u0r=o("roformer"),b0r=o(" \u2014 "),aJ=a("a"),v0r=o("TFRoFormerForTokenClassification"),F0r=o(" (RoFormer model)"),T0r=l(),HM=a("li"),L3e=a("strong"),M0r=o("xlm"),E0r=o(" \u2014 "),nJ=a("a"),C0r=o("TFXLMForTokenClassification"),w0r=o(" (XLM model)"),A0r=l(),UM=a("li"),x3e=a("strong"),y0r=o("xlm-roberta"),L0r=o(" \u2014 "),sJ=a("a"),x0r=o("TFXLMRobertaForTokenClassification"),$0r=o(" (XLM-RoBERTa model)"),k0r=l(),JM=a("li"),$3e=a("strong"),S0r=o("xlnet"),R0r=o(" \u2014 "),lJ=a("a"),P0r=o("TFXLNetForTokenClassification"),B0r=o(" (XLNet model)"),I0r=l(),F(YM.$$.fragment),Rje=l(),Fc=a("h2"),KM=a("a"),k3e=a("span"),F(m9.$$.fragment),N0r=l(),S3e=a("span"),q0r=o("TFAutoModelForQuestionAnswering"),Pje=l(),ir=a("div"),F(g9.$$.fragment),j0r=l(),Tc=a("p"),D0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),iJ=a("a"),G0r=o("from_pretrained()"),O0r=o(" class method or the "),dJ=a("a"),V0r=o("from_config()"),X0r=o(` class
method.`),z0r=l(),h9=a("p"),W0r=o("This class cannot be instantiated directly using "),R3e=a("code"),Q0r=o("__init__()"),H0r=o(" (throws an error)."),U0r=l(),qt=a("div"),F(p9.$$.fragment),J0r=l(),P3e=a("p"),Y0r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),K0r=l(),Mc=a("p"),Z0r=o(`Note:
Loading a model from its configuration file does `),B3e=a("strong"),eAr=o("not"),oAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cJ=a("a"),rAr=o("from_pretrained()"),tAr=o(" to load the model weights."),aAr=l(),F(ZM.$$.fragment),nAr=l(),Ir=a("div"),F(_9.$$.fragment),sAr=l(),I3e=a("p"),lAr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),iAr=l(),fn=a("p"),dAr=o("The model class to instantiate is selected based on the "),N3e=a("code"),cAr=o("model_type"),fAr=o(` property of the config object (either
passed as an argument or loaded from `),q3e=a("code"),mAr=o("pretrained_model_name_or_path"),gAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j3e=a("code"),hAr=o("pretrained_model_name_or_path"),pAr=o(":"),_Ar=l(),ce=a("ul"),eE=a("li"),D3e=a("strong"),uAr=o("albert"),bAr=o(" \u2014 "),fJ=a("a"),vAr=o("TFAlbertForQuestionAnswering"),FAr=o(" (ALBERT model)"),TAr=l(),oE=a("li"),G3e=a("strong"),MAr=o("bert"),EAr=o(" \u2014 "),mJ=a("a"),CAr=o("TFBertForQuestionAnswering"),wAr=o(" (BERT model)"),AAr=l(),rE=a("li"),O3e=a("strong"),yAr=o("camembert"),LAr=o(" \u2014 "),gJ=a("a"),xAr=o("TFCamembertForQuestionAnswering"),$Ar=o(" (CamemBERT model)"),kAr=l(),tE=a("li"),V3e=a("strong"),SAr=o("convbert"),RAr=o(" \u2014 "),hJ=a("a"),PAr=o("TFConvBertForQuestionAnswering"),BAr=o(" (ConvBERT model)"),IAr=l(),aE=a("li"),X3e=a("strong"),NAr=o("deberta"),qAr=o(" \u2014 "),pJ=a("a"),jAr=o("TFDebertaForQuestionAnswering"),DAr=o(" (DeBERTa model)"),GAr=l(),nE=a("li"),z3e=a("strong"),OAr=o("deberta-v2"),VAr=o(" \u2014 "),_J=a("a"),XAr=o("TFDebertaV2ForQuestionAnswering"),zAr=o(" (DeBERTa-v2 model)"),WAr=l(),sE=a("li"),W3e=a("strong"),QAr=o("distilbert"),HAr=o(" \u2014 "),uJ=a("a"),UAr=o("TFDistilBertForQuestionAnswering"),JAr=o(" (DistilBERT model)"),YAr=l(),lE=a("li"),Q3e=a("strong"),KAr=o("electra"),ZAr=o(" \u2014 "),bJ=a("a"),eyr=o("TFElectraForQuestionAnswering"),oyr=o(" (ELECTRA model)"),ryr=l(),iE=a("li"),H3e=a("strong"),tyr=o("flaubert"),ayr=o(" \u2014 "),vJ=a("a"),nyr=o("TFFlaubertForQuestionAnsweringSimple"),syr=o(" (FlauBERT model)"),lyr=l(),dE=a("li"),U3e=a("strong"),iyr=o("funnel"),dyr=o(" \u2014 "),FJ=a("a"),cyr=o("TFFunnelForQuestionAnswering"),fyr=o(" (Funnel Transformer model)"),myr=l(),cE=a("li"),J3e=a("strong"),gyr=o("gptj"),hyr=o(" \u2014 "),TJ=a("a"),pyr=o("TFGPTJForQuestionAnswering"),_yr=o(" (GPT-J model)"),uyr=l(),fE=a("li"),Y3e=a("strong"),byr=o("longformer"),vyr=o(" \u2014 "),MJ=a("a"),Fyr=o("TFLongformerForQuestionAnswering"),Tyr=o(" (Longformer model)"),Myr=l(),mE=a("li"),K3e=a("strong"),Eyr=o("mobilebert"),Cyr=o(" \u2014 "),EJ=a("a"),wyr=o("TFMobileBertForQuestionAnswering"),Ayr=o(" (MobileBERT model)"),yyr=l(),gE=a("li"),Z3e=a("strong"),Lyr=o("mpnet"),xyr=o(" \u2014 "),CJ=a("a"),$yr=o("TFMPNetForQuestionAnswering"),kyr=o(" (MPNet model)"),Syr=l(),hE=a("li"),eFe=a("strong"),Ryr=o("rembert"),Pyr=o(" \u2014 "),wJ=a("a"),Byr=o("TFRemBertForQuestionAnswering"),Iyr=o(" (RemBERT model)"),Nyr=l(),pE=a("li"),oFe=a("strong"),qyr=o("roberta"),jyr=o(" \u2014 "),AJ=a("a"),Dyr=o("TFRobertaForQuestionAnswering"),Gyr=o(" (RoBERTa model)"),Oyr=l(),_E=a("li"),rFe=a("strong"),Vyr=o("roformer"),Xyr=o(" \u2014 "),yJ=a("a"),zyr=o("TFRoFormerForQuestionAnswering"),Wyr=o(" (RoFormer model)"),Qyr=l(),uE=a("li"),tFe=a("strong"),Hyr=o("xlm"),Uyr=o(" \u2014 "),LJ=a("a"),Jyr=o("TFXLMForQuestionAnsweringSimple"),Yyr=o(" (XLM model)"),Kyr=l(),bE=a("li"),aFe=a("strong"),Zyr=o("xlm-roberta"),eLr=o(" \u2014 "),xJ=a("a"),oLr=o("TFXLMRobertaForQuestionAnswering"),rLr=o(" (XLM-RoBERTa model)"),tLr=l(),vE=a("li"),nFe=a("strong"),aLr=o("xlnet"),nLr=o(" \u2014 "),$J=a("a"),sLr=o("TFXLNetForQuestionAnsweringSimple"),lLr=o(" (XLNet model)"),iLr=l(),F(FE.$$.fragment),Bje=l(),Ec=a("h2"),TE=a("a"),sFe=a("span"),F(u9.$$.fragment),dLr=l(),lFe=a("span"),cLr=o("TFAutoModelForVision2Seq"),Ije=l(),dr=a("div"),F(b9.$$.fragment),fLr=l(),Cc=a("p"),mLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),kJ=a("a"),gLr=o("from_pretrained()"),hLr=o(" class method or the "),SJ=a("a"),pLr=o("from_config()"),_Lr=o(` class
method.`),uLr=l(),v9=a("p"),bLr=o("This class cannot be instantiated directly using "),iFe=a("code"),vLr=o("__init__()"),FLr=o(" (throws an error)."),TLr=l(),jt=a("div"),F(F9.$$.fragment),MLr=l(),dFe=a("p"),ELr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),CLr=l(),wc=a("p"),wLr=o(`Note:
Loading a model from its configuration file does `),cFe=a("strong"),ALr=o("not"),yLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RJ=a("a"),LLr=o("from_pretrained()"),xLr=o(" to load the model weights."),$Lr=l(),F(ME.$$.fragment),kLr=l(),Nr=a("div"),F(T9.$$.fragment),SLr=l(),fFe=a("p"),RLr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),PLr=l(),mn=a("p"),BLr=o("The model class to instantiate is selected based on the "),mFe=a("code"),ILr=o("model_type"),NLr=o(` property of the config object (either
passed as an argument or loaded from `),gFe=a("code"),qLr=o("pretrained_model_name_or_path"),jLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hFe=a("code"),DLr=o("pretrained_model_name_or_path"),GLr=o(":"),OLr=l(),pFe=a("ul"),EE=a("li"),_Fe=a("strong"),VLr=o("vision-encoder-decoder"),XLr=o(" \u2014 "),PJ=a("a"),zLr=o("TFVisionEncoderDecoderModel"),WLr=o(" (Vision Encoder decoder model)"),QLr=l(),F(CE.$$.fragment),Nje=l(),Ac=a("h2"),wE=a("a"),uFe=a("span"),F(M9.$$.fragment),HLr=l(),bFe=a("span"),ULr=o("TFAutoModelForSpeechSeq2Seq"),qje=l(),cr=a("div"),F(E9.$$.fragment),JLr=l(),yc=a("p"),YLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),BJ=a("a"),KLr=o("from_pretrained()"),ZLr=o(" class method or the "),IJ=a("a"),e8r=o("from_config()"),o8r=o(` class
method.`),r8r=l(),C9=a("p"),t8r=o("This class cannot be instantiated directly using "),vFe=a("code"),a8r=o("__init__()"),n8r=o(" (throws an error)."),s8r=l(),Dt=a("div"),F(w9.$$.fragment),l8r=l(),FFe=a("p"),i8r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),d8r=l(),Lc=a("p"),c8r=o(`Note:
Loading a model from its configuration file does `),TFe=a("strong"),f8r=o("not"),m8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NJ=a("a"),g8r=o("from_pretrained()"),h8r=o(" to load the model weights."),p8r=l(),F(AE.$$.fragment),_8r=l(),qr=a("div"),F(A9.$$.fragment),u8r=l(),MFe=a("p"),b8r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),v8r=l(),gn=a("p"),F8r=o("The model class to instantiate is selected based on the "),EFe=a("code"),T8r=o("model_type"),M8r=o(` property of the config object (either
passed as an argument or loaded from `),CFe=a("code"),E8r=o("pretrained_model_name_or_path"),C8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wFe=a("code"),w8r=o("pretrained_model_name_or_path"),A8r=o(":"),y8r=l(),AFe=a("ul"),yE=a("li"),yFe=a("strong"),L8r=o("speech_to_text"),x8r=o(" \u2014 "),qJ=a("a"),$8r=o("TFSpeech2TextForConditionalGeneration"),k8r=o(" (Speech2Text model)"),S8r=l(),F(LE.$$.fragment),jje=l(),xc=a("h2"),xE=a("a"),LFe=a("span"),F(y9.$$.fragment),R8r=l(),xFe=a("span"),P8r=o("FlaxAutoModel"),Dje=l(),fr=a("div"),F(L9.$$.fragment),B8r=l(),$c=a("p"),I8r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),jJ=a("a"),N8r=o("from_pretrained()"),q8r=o(" class method or the "),DJ=a("a"),j8r=o("from_config()"),D8r=o(` class
method.`),G8r=l(),x9=a("p"),O8r=o("This class cannot be instantiated directly using "),$Fe=a("code"),V8r=o("__init__()"),X8r=o(" (throws an error)."),z8r=l(),Gt=a("div"),F($9.$$.fragment),W8r=l(),kFe=a("p"),Q8r=o("Instantiates one of the base model classes of the library from a configuration."),H8r=l(),kc=a("p"),U8r=o(`Note:
Loading a model from its configuration file does `),SFe=a("strong"),J8r=o("not"),Y8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GJ=a("a"),K8r=o("from_pretrained()"),Z8r=o(" to load the model weights."),e7r=l(),F($E.$$.fragment),o7r=l(),jr=a("div"),F(k9.$$.fragment),r7r=l(),RFe=a("p"),t7r=o("Instantiate one of the base model classes of the library from a pretrained model."),a7r=l(),hn=a("p"),n7r=o("The model class to instantiate is selected based on the "),PFe=a("code"),s7r=o("model_type"),l7r=o(` property of the config object (either
passed as an argument or loaded from `),BFe=a("code"),i7r=o("pretrained_model_name_or_path"),d7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),IFe=a("code"),c7r=o("pretrained_model_name_or_path"),f7r=o(":"),m7r=l(),te=a("ul"),kE=a("li"),NFe=a("strong"),g7r=o("albert"),h7r=o(" \u2014 "),OJ=a("a"),p7r=o("FlaxAlbertModel"),_7r=o(" (ALBERT model)"),u7r=l(),SE=a("li"),qFe=a("strong"),b7r=o("bart"),v7r=o(" \u2014 "),VJ=a("a"),F7r=o("FlaxBartModel"),T7r=o(" (BART model)"),M7r=l(),RE=a("li"),jFe=a("strong"),E7r=o("beit"),C7r=o(" \u2014 "),XJ=a("a"),w7r=o("FlaxBeitModel"),A7r=o(" (BEiT model)"),y7r=l(),PE=a("li"),DFe=a("strong"),L7r=o("bert"),x7r=o(" \u2014 "),zJ=a("a"),$7r=o("FlaxBertModel"),k7r=o(" (BERT model)"),S7r=l(),BE=a("li"),GFe=a("strong"),R7r=o("big_bird"),P7r=o(" \u2014 "),WJ=a("a"),B7r=o("FlaxBigBirdModel"),I7r=o(" (BigBird model)"),N7r=l(),IE=a("li"),OFe=a("strong"),q7r=o("blenderbot"),j7r=o(" \u2014 "),QJ=a("a"),D7r=o("FlaxBlenderbotModel"),G7r=o(" (Blenderbot model)"),O7r=l(),NE=a("li"),VFe=a("strong"),V7r=o("blenderbot-small"),X7r=o(" \u2014 "),HJ=a("a"),z7r=o("FlaxBlenderbotSmallModel"),W7r=o(" (BlenderbotSmall model)"),Q7r=l(),qE=a("li"),XFe=a("strong"),H7r=o("clip"),U7r=o(" \u2014 "),UJ=a("a"),J7r=o("FlaxCLIPModel"),Y7r=o(" (CLIP model)"),K7r=l(),jE=a("li"),zFe=a("strong"),Z7r=o("distilbert"),e9r=o(" \u2014 "),JJ=a("a"),o9r=o("FlaxDistilBertModel"),r9r=o(" (DistilBERT model)"),t9r=l(),DE=a("li"),WFe=a("strong"),a9r=o("electra"),n9r=o(" \u2014 "),YJ=a("a"),s9r=o("FlaxElectraModel"),l9r=o(" (ELECTRA model)"),i9r=l(),GE=a("li"),QFe=a("strong"),d9r=o("gpt2"),c9r=o(" \u2014 "),KJ=a("a"),f9r=o("FlaxGPT2Model"),m9r=o(" (OpenAI GPT-2 model)"),g9r=l(),OE=a("li"),HFe=a("strong"),h9r=o("gpt_neo"),p9r=o(" \u2014 "),ZJ=a("a"),_9r=o("FlaxGPTNeoModel"),u9r=o(" (GPT Neo model)"),b9r=l(),VE=a("li"),UFe=a("strong"),v9r=o("gptj"),F9r=o(" \u2014 "),eY=a("a"),T9r=o("FlaxGPTJModel"),M9r=o(" (GPT-J model)"),E9r=l(),XE=a("li"),JFe=a("strong"),C9r=o("marian"),w9r=o(" \u2014 "),oY=a("a"),A9r=o("FlaxMarianModel"),y9r=o(" (Marian model)"),L9r=l(),zE=a("li"),YFe=a("strong"),x9r=o("mbart"),$9r=o(" \u2014 "),rY=a("a"),k9r=o("FlaxMBartModel"),S9r=o(" (mBART model)"),R9r=l(),WE=a("li"),KFe=a("strong"),P9r=o("mt5"),B9r=o(" \u2014 "),tY=a("a"),I9r=o("FlaxMT5Model"),N9r=o(" (mT5 model)"),q9r=l(),QE=a("li"),ZFe=a("strong"),j9r=o("pegasus"),D9r=o(" \u2014 "),aY=a("a"),G9r=o("FlaxPegasusModel"),O9r=o(" (Pegasus model)"),V9r=l(),HE=a("li"),e6e=a("strong"),X9r=o("roberta"),z9r=o(" \u2014 "),nY=a("a"),W9r=o("FlaxRobertaModel"),Q9r=o(" (RoBERTa model)"),H9r=l(),UE=a("li"),o6e=a("strong"),U9r=o("roformer"),J9r=o(" \u2014 "),sY=a("a"),Y9r=o("FlaxRoFormerModel"),K9r=o(" (RoFormer model)"),Z9r=l(),JE=a("li"),r6e=a("strong"),exr=o("t5"),oxr=o(" \u2014 "),lY=a("a"),rxr=o("FlaxT5Model"),txr=o(" (T5 model)"),axr=l(),YE=a("li"),t6e=a("strong"),nxr=o("vision-text-dual-encoder"),sxr=o(" \u2014 "),iY=a("a"),lxr=o("FlaxVisionTextDualEncoderModel"),ixr=o(" (VisionTextDualEncoder model)"),dxr=l(),KE=a("li"),a6e=a("strong"),cxr=o("vit"),fxr=o(" \u2014 "),dY=a("a"),mxr=o("FlaxViTModel"),gxr=o(" (ViT model)"),hxr=l(),ZE=a("li"),n6e=a("strong"),pxr=o("wav2vec2"),_xr=o(" \u2014 "),cY=a("a"),uxr=o("FlaxWav2Vec2Model"),bxr=o(" (Wav2Vec2 model)"),vxr=l(),eC=a("li"),s6e=a("strong"),Fxr=o("xglm"),Txr=o(" \u2014 "),fY=a("a"),Mxr=o("FlaxXGLMModel"),Exr=o(" (XGLM model)"),Cxr=l(),oC=a("li"),l6e=a("strong"),wxr=o("xlm-roberta"),Axr=o(" \u2014 "),mY=a("a"),yxr=o("FlaxXLMRobertaModel"),Lxr=o(" (XLM-RoBERTa model)"),xxr=l(),F(rC.$$.fragment),Gje=l(),Sc=a("h2"),tC=a("a"),i6e=a("span"),F(S9.$$.fragment),$xr=l(),d6e=a("span"),kxr=o("FlaxAutoModelForCausalLM"),Oje=l(),mr=a("div"),F(R9.$$.fragment),Sxr=l(),Rc=a("p"),Rxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),gY=a("a"),Pxr=o("from_pretrained()"),Bxr=o(" class method or the "),hY=a("a"),Ixr=o("from_config()"),Nxr=o(` class
method.`),qxr=l(),P9=a("p"),jxr=o("This class cannot be instantiated directly using "),c6e=a("code"),Dxr=o("__init__()"),Gxr=o(" (throws an error)."),Oxr=l(),Ot=a("div"),F(B9.$$.fragment),Vxr=l(),f6e=a("p"),Xxr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),zxr=l(),Pc=a("p"),Wxr=o(`Note:
Loading a model from its configuration file does `),m6e=a("strong"),Qxr=o("not"),Hxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pY=a("a"),Uxr=o("from_pretrained()"),Jxr=o(" to load the model weights."),Yxr=l(),F(aC.$$.fragment),Kxr=l(),Dr=a("div"),F(I9.$$.fragment),Zxr=l(),g6e=a("p"),e$r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),o$r=l(),pn=a("p"),r$r=o("The model class to instantiate is selected based on the "),h6e=a("code"),t$r=o("model_type"),a$r=o(` property of the config object (either
passed as an argument or loaded from `),p6e=a("code"),n$r=o("pretrained_model_name_or_path"),s$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_6e=a("code"),l$r=o("pretrained_model_name_or_path"),i$r=o(":"),d$r=l(),Re=a("ul"),nC=a("li"),u6e=a("strong"),c$r=o("bart"),f$r=o(" \u2014 "),_Y=a("a"),m$r=o("FlaxBartForCausalLM"),g$r=o(" (BART model)"),h$r=l(),sC=a("li"),b6e=a("strong"),p$r=o("bert"),_$r=o(" \u2014 "),uY=a("a"),u$r=o("FlaxBertForCausalLM"),b$r=o(" (BERT model)"),v$r=l(),lC=a("li"),v6e=a("strong"),F$r=o("big_bird"),T$r=o(" \u2014 "),bY=a("a"),M$r=o("FlaxBigBirdForCausalLM"),E$r=o(" (BigBird model)"),C$r=l(),iC=a("li"),F6e=a("strong"),w$r=o("electra"),A$r=o(" \u2014 "),vY=a("a"),y$r=o("FlaxElectraForCausalLM"),L$r=o(" (ELECTRA model)"),x$r=l(),dC=a("li"),T6e=a("strong"),$$r=o("gpt2"),k$r=o(" \u2014 "),FY=a("a"),S$r=o("FlaxGPT2LMHeadModel"),R$r=o(" (OpenAI GPT-2 model)"),P$r=l(),cC=a("li"),M6e=a("strong"),B$r=o("gpt_neo"),I$r=o(" \u2014 "),TY=a("a"),N$r=o("FlaxGPTNeoForCausalLM"),q$r=o(" (GPT Neo model)"),j$r=l(),fC=a("li"),E6e=a("strong"),D$r=o("gptj"),G$r=o(" \u2014 "),MY=a("a"),O$r=o("FlaxGPTJForCausalLM"),V$r=o(" (GPT-J model)"),X$r=l(),mC=a("li"),C6e=a("strong"),z$r=o("roberta"),W$r=o(" \u2014 "),EY=a("a"),Q$r=o("FlaxRobertaForCausalLM"),H$r=o(" (RoBERTa model)"),U$r=l(),gC=a("li"),w6e=a("strong"),J$r=o("xglm"),Y$r=o(" \u2014 "),CY=a("a"),K$r=o("FlaxXGLMForCausalLM"),Z$r=o(" (XGLM model)"),ekr=l(),F(hC.$$.fragment),Vje=l(),Bc=a("h2"),pC=a("a"),A6e=a("span"),F(N9.$$.fragment),okr=l(),y6e=a("span"),rkr=o("FlaxAutoModelForPreTraining"),Xje=l(),gr=a("div"),F(q9.$$.fragment),tkr=l(),Ic=a("p"),akr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),wY=a("a"),nkr=o("from_pretrained()"),skr=o(" class method or the "),AY=a("a"),lkr=o("from_config()"),ikr=o(` class
method.`),dkr=l(),j9=a("p"),ckr=o("This class cannot be instantiated directly using "),L6e=a("code"),fkr=o("__init__()"),mkr=o(" (throws an error)."),gkr=l(),Vt=a("div"),F(D9.$$.fragment),hkr=l(),x6e=a("p"),pkr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),_kr=l(),Nc=a("p"),ukr=o(`Note:
Loading a model from its configuration file does `),$6e=a("strong"),bkr=o("not"),vkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yY=a("a"),Fkr=o("from_pretrained()"),Tkr=o(" to load the model weights."),Mkr=l(),F(_C.$$.fragment),Ekr=l(),Gr=a("div"),F(G9.$$.fragment),Ckr=l(),k6e=a("p"),wkr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Akr=l(),_n=a("p"),ykr=o("The model class to instantiate is selected based on the "),S6e=a("code"),Lkr=o("model_type"),xkr=o(` property of the config object (either
passed as an argument or loaded from `),R6e=a("code"),$kr=o("pretrained_model_name_or_path"),kkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P6e=a("code"),Skr=o("pretrained_model_name_or_path"),Rkr=o(":"),Pkr=l(),Ee=a("ul"),uC=a("li"),B6e=a("strong"),Bkr=o("albert"),Ikr=o(" \u2014 "),LY=a("a"),Nkr=o("FlaxAlbertForPreTraining"),qkr=o(" (ALBERT model)"),jkr=l(),bC=a("li"),I6e=a("strong"),Dkr=o("bart"),Gkr=o(" \u2014 "),xY=a("a"),Okr=o("FlaxBartForConditionalGeneration"),Vkr=o(" (BART model)"),Xkr=l(),vC=a("li"),N6e=a("strong"),zkr=o("bert"),Wkr=o(" \u2014 "),$Y=a("a"),Qkr=o("FlaxBertForPreTraining"),Hkr=o(" (BERT model)"),Ukr=l(),FC=a("li"),q6e=a("strong"),Jkr=o("big_bird"),Ykr=o(" \u2014 "),kY=a("a"),Kkr=o("FlaxBigBirdForPreTraining"),Zkr=o(" (BigBird model)"),eSr=l(),TC=a("li"),j6e=a("strong"),oSr=o("electra"),rSr=o(" \u2014 "),SY=a("a"),tSr=o("FlaxElectraForPreTraining"),aSr=o(" (ELECTRA model)"),nSr=l(),MC=a("li"),D6e=a("strong"),sSr=o("mbart"),lSr=o(" \u2014 "),RY=a("a"),iSr=o("FlaxMBartForConditionalGeneration"),dSr=o(" (mBART model)"),cSr=l(),EC=a("li"),G6e=a("strong"),fSr=o("mt5"),mSr=o(" \u2014 "),PY=a("a"),gSr=o("FlaxMT5ForConditionalGeneration"),hSr=o(" (mT5 model)"),pSr=l(),CC=a("li"),O6e=a("strong"),_Sr=o("roberta"),uSr=o(" \u2014 "),BY=a("a"),bSr=o("FlaxRobertaForMaskedLM"),vSr=o(" (RoBERTa model)"),FSr=l(),wC=a("li"),V6e=a("strong"),TSr=o("roformer"),MSr=o(" \u2014 "),IY=a("a"),ESr=o("FlaxRoFormerForMaskedLM"),CSr=o(" (RoFormer model)"),wSr=l(),AC=a("li"),X6e=a("strong"),ASr=o("t5"),ySr=o(" \u2014 "),NY=a("a"),LSr=o("FlaxT5ForConditionalGeneration"),xSr=o(" (T5 model)"),$Sr=l(),yC=a("li"),z6e=a("strong"),kSr=o("wav2vec2"),SSr=o(" \u2014 "),qY=a("a"),RSr=o("FlaxWav2Vec2ForPreTraining"),PSr=o(" (Wav2Vec2 model)"),BSr=l(),LC=a("li"),W6e=a("strong"),ISr=o("xlm-roberta"),NSr=o(" \u2014 "),jY=a("a"),qSr=o("FlaxXLMRobertaForMaskedLM"),jSr=o(" (XLM-RoBERTa model)"),DSr=l(),F(xC.$$.fragment),zje=l(),qc=a("h2"),$C=a("a"),Q6e=a("span"),F(O9.$$.fragment),GSr=l(),H6e=a("span"),OSr=o("FlaxAutoModelForMaskedLM"),Wje=l(),hr=a("div"),F(V9.$$.fragment),VSr=l(),jc=a("p"),XSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),DY=a("a"),zSr=o("from_pretrained()"),WSr=o(" class method or the "),GY=a("a"),QSr=o("from_config()"),HSr=o(` class
method.`),USr=l(),X9=a("p"),JSr=o("This class cannot be instantiated directly using "),U6e=a("code"),YSr=o("__init__()"),KSr=o(" (throws an error)."),ZSr=l(),Xt=a("div"),F(z9.$$.fragment),eRr=l(),J6e=a("p"),oRr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),rRr=l(),Dc=a("p"),tRr=o(`Note:
Loading a model from its configuration file does `),Y6e=a("strong"),aRr=o("not"),nRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OY=a("a"),sRr=o("from_pretrained()"),lRr=o(" to load the model weights."),iRr=l(),F(kC.$$.fragment),dRr=l(),Or=a("div"),F(W9.$$.fragment),cRr=l(),K6e=a("p"),fRr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),mRr=l(),un=a("p"),gRr=o("The model class to instantiate is selected based on the "),Z6e=a("code"),hRr=o("model_type"),pRr=o(` property of the config object (either
passed as an argument or loaded from `),eTe=a("code"),_Rr=o("pretrained_model_name_or_path"),uRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oTe=a("code"),bRr=o("pretrained_model_name_or_path"),vRr=o(":"),FRr=l(),Le=a("ul"),SC=a("li"),rTe=a("strong"),TRr=o("albert"),MRr=o(" \u2014 "),VY=a("a"),ERr=o("FlaxAlbertForMaskedLM"),CRr=o(" (ALBERT model)"),wRr=l(),RC=a("li"),tTe=a("strong"),ARr=o("bart"),yRr=o(" \u2014 "),XY=a("a"),LRr=o("FlaxBartForConditionalGeneration"),xRr=o(" (BART model)"),$Rr=l(),PC=a("li"),aTe=a("strong"),kRr=o("bert"),SRr=o(" \u2014 "),zY=a("a"),RRr=o("FlaxBertForMaskedLM"),PRr=o(" (BERT model)"),BRr=l(),BC=a("li"),nTe=a("strong"),IRr=o("big_bird"),NRr=o(" \u2014 "),WY=a("a"),qRr=o("FlaxBigBirdForMaskedLM"),jRr=o(" (BigBird model)"),DRr=l(),IC=a("li"),sTe=a("strong"),GRr=o("distilbert"),ORr=o(" \u2014 "),QY=a("a"),VRr=o("FlaxDistilBertForMaskedLM"),XRr=o(" (DistilBERT model)"),zRr=l(),NC=a("li"),lTe=a("strong"),WRr=o("electra"),QRr=o(" \u2014 "),HY=a("a"),HRr=o("FlaxElectraForMaskedLM"),URr=o(" (ELECTRA model)"),JRr=l(),qC=a("li"),iTe=a("strong"),YRr=o("mbart"),KRr=o(" \u2014 "),UY=a("a"),ZRr=o("FlaxMBartForConditionalGeneration"),ePr=o(" (mBART model)"),oPr=l(),jC=a("li"),dTe=a("strong"),rPr=o("roberta"),tPr=o(" \u2014 "),JY=a("a"),aPr=o("FlaxRobertaForMaskedLM"),nPr=o(" (RoBERTa model)"),sPr=l(),DC=a("li"),cTe=a("strong"),lPr=o("roformer"),iPr=o(" \u2014 "),YY=a("a"),dPr=o("FlaxRoFormerForMaskedLM"),cPr=o(" (RoFormer model)"),fPr=l(),GC=a("li"),fTe=a("strong"),mPr=o("xlm-roberta"),gPr=o(" \u2014 "),KY=a("a"),hPr=o("FlaxXLMRobertaForMaskedLM"),pPr=o(" (XLM-RoBERTa model)"),_Pr=l(),F(OC.$$.fragment),Qje=l(),Gc=a("h2"),VC=a("a"),mTe=a("span"),F(Q9.$$.fragment),uPr=l(),gTe=a("span"),bPr=o("FlaxAutoModelForSeq2SeqLM"),Hje=l(),pr=a("div"),F(H9.$$.fragment),vPr=l(),Oc=a("p"),FPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),ZY=a("a"),TPr=o("from_pretrained()"),MPr=o(" class method or the "),eK=a("a"),EPr=o("from_config()"),CPr=o(` class
method.`),wPr=l(),U9=a("p"),APr=o("This class cannot be instantiated directly using "),hTe=a("code"),yPr=o("__init__()"),LPr=o(" (throws an error)."),xPr=l(),zt=a("div"),F(J9.$$.fragment),$Pr=l(),pTe=a("p"),kPr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),SPr=l(),Vc=a("p"),RPr=o(`Note:
Loading a model from its configuration file does `),_Te=a("strong"),PPr=o("not"),BPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oK=a("a"),IPr=o("from_pretrained()"),NPr=o(" to load the model weights."),qPr=l(),F(XC.$$.fragment),jPr=l(),Vr=a("div"),F(Y9.$$.fragment),DPr=l(),uTe=a("p"),GPr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),OPr=l(),bn=a("p"),VPr=o("The model class to instantiate is selected based on the "),bTe=a("code"),XPr=o("model_type"),zPr=o(` property of the config object (either
passed as an argument or loaded from `),vTe=a("code"),WPr=o("pretrained_model_name_or_path"),QPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FTe=a("code"),HPr=o("pretrained_model_name_or_path"),UPr=o(":"),JPr=l(),Pe=a("ul"),zC=a("li"),TTe=a("strong"),YPr=o("bart"),KPr=o(" \u2014 "),rK=a("a"),ZPr=o("FlaxBartForConditionalGeneration"),eBr=o(" (BART model)"),oBr=l(),WC=a("li"),MTe=a("strong"),rBr=o("blenderbot"),tBr=o(" \u2014 "),tK=a("a"),aBr=o("FlaxBlenderbotForConditionalGeneration"),nBr=o(" (Blenderbot model)"),sBr=l(),QC=a("li"),ETe=a("strong"),lBr=o("blenderbot-small"),iBr=o(" \u2014 "),aK=a("a"),dBr=o("FlaxBlenderbotSmallForConditionalGeneration"),cBr=o(" (BlenderbotSmall model)"),fBr=l(),HC=a("li"),CTe=a("strong"),mBr=o("encoder-decoder"),gBr=o(" \u2014 "),nK=a("a"),hBr=o("FlaxEncoderDecoderModel"),pBr=o(" (Encoder decoder model)"),_Br=l(),UC=a("li"),wTe=a("strong"),uBr=o("marian"),bBr=o(" \u2014 "),sK=a("a"),vBr=o("FlaxMarianMTModel"),FBr=o(" (Marian model)"),TBr=l(),JC=a("li"),ATe=a("strong"),MBr=o("mbart"),EBr=o(" \u2014 "),lK=a("a"),CBr=o("FlaxMBartForConditionalGeneration"),wBr=o(" (mBART model)"),ABr=l(),YC=a("li"),yTe=a("strong"),yBr=o("mt5"),LBr=o(" \u2014 "),iK=a("a"),xBr=o("FlaxMT5ForConditionalGeneration"),$Br=o(" (mT5 model)"),kBr=l(),KC=a("li"),LTe=a("strong"),SBr=o("pegasus"),RBr=o(" \u2014 "),dK=a("a"),PBr=o("FlaxPegasusForConditionalGeneration"),BBr=o(" (Pegasus model)"),IBr=l(),ZC=a("li"),xTe=a("strong"),NBr=o("t5"),qBr=o(" \u2014 "),cK=a("a"),jBr=o("FlaxT5ForConditionalGeneration"),DBr=o(" (T5 model)"),GBr=l(),F(ew.$$.fragment),Uje=l(),Xc=a("h2"),ow=a("a"),$Te=a("span"),F(K9.$$.fragment),OBr=l(),kTe=a("span"),VBr=o("FlaxAutoModelForSequenceClassification"),Jje=l(),_r=a("div"),F(Z9.$$.fragment),XBr=l(),zc=a("p"),zBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),fK=a("a"),WBr=o("from_pretrained()"),QBr=o(" class method or the "),mK=a("a"),HBr=o("from_config()"),UBr=o(` class
method.`),JBr=l(),ex=a("p"),YBr=o("This class cannot be instantiated directly using "),STe=a("code"),KBr=o("__init__()"),ZBr=o(" (throws an error)."),eIr=l(),Wt=a("div"),F(ox.$$.fragment),oIr=l(),RTe=a("p"),rIr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),tIr=l(),Wc=a("p"),aIr=o(`Note:
Loading a model from its configuration file does `),PTe=a("strong"),nIr=o("not"),sIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gK=a("a"),lIr=o("from_pretrained()"),iIr=o(" to load the model weights."),dIr=l(),F(rw.$$.fragment),cIr=l(),Xr=a("div"),F(rx.$$.fragment),fIr=l(),BTe=a("p"),mIr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),gIr=l(),vn=a("p"),hIr=o("The model class to instantiate is selected based on the "),ITe=a("code"),pIr=o("model_type"),_Ir=o(` property of the config object (either
passed as an argument or loaded from `),NTe=a("code"),uIr=o("pretrained_model_name_or_path"),bIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qTe=a("code"),vIr=o("pretrained_model_name_or_path"),FIr=o(":"),TIr=l(),xe=a("ul"),tw=a("li"),jTe=a("strong"),MIr=o("albert"),EIr=o(" \u2014 "),hK=a("a"),CIr=o("FlaxAlbertForSequenceClassification"),wIr=o(" (ALBERT model)"),AIr=l(),aw=a("li"),DTe=a("strong"),yIr=o("bart"),LIr=o(" \u2014 "),pK=a("a"),xIr=o("FlaxBartForSequenceClassification"),$Ir=o(" (BART model)"),kIr=l(),nw=a("li"),GTe=a("strong"),SIr=o("bert"),RIr=o(" \u2014 "),_K=a("a"),PIr=o("FlaxBertForSequenceClassification"),BIr=o(" (BERT model)"),IIr=l(),sw=a("li"),OTe=a("strong"),NIr=o("big_bird"),qIr=o(" \u2014 "),uK=a("a"),jIr=o("FlaxBigBirdForSequenceClassification"),DIr=o(" (BigBird model)"),GIr=l(),lw=a("li"),VTe=a("strong"),OIr=o("distilbert"),VIr=o(" \u2014 "),bK=a("a"),XIr=o("FlaxDistilBertForSequenceClassification"),zIr=o(" (DistilBERT model)"),WIr=l(),iw=a("li"),XTe=a("strong"),QIr=o("electra"),HIr=o(" \u2014 "),vK=a("a"),UIr=o("FlaxElectraForSequenceClassification"),JIr=o(" (ELECTRA model)"),YIr=l(),dw=a("li"),zTe=a("strong"),KIr=o("mbart"),ZIr=o(" \u2014 "),FK=a("a"),eNr=o("FlaxMBartForSequenceClassification"),oNr=o(" (mBART model)"),rNr=l(),cw=a("li"),WTe=a("strong"),tNr=o("roberta"),aNr=o(" \u2014 "),TK=a("a"),nNr=o("FlaxRobertaForSequenceClassification"),sNr=o(" (RoBERTa model)"),lNr=l(),fw=a("li"),QTe=a("strong"),iNr=o("roformer"),dNr=o(" \u2014 "),MK=a("a"),cNr=o("FlaxRoFormerForSequenceClassification"),fNr=o(" (RoFormer model)"),mNr=l(),mw=a("li"),HTe=a("strong"),gNr=o("xlm-roberta"),hNr=o(" \u2014 "),EK=a("a"),pNr=o("FlaxXLMRobertaForSequenceClassification"),_Nr=o(" (XLM-RoBERTa model)"),uNr=l(),F(gw.$$.fragment),Yje=l(),Qc=a("h2"),hw=a("a"),UTe=a("span"),F(tx.$$.fragment),bNr=l(),JTe=a("span"),vNr=o("FlaxAutoModelForQuestionAnswering"),Kje=l(),ur=a("div"),F(ax.$$.fragment),FNr=l(),Hc=a("p"),TNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),CK=a("a"),MNr=o("from_pretrained()"),ENr=o(" class method or the "),wK=a("a"),CNr=o("from_config()"),wNr=o(` class
method.`),ANr=l(),nx=a("p"),yNr=o("This class cannot be instantiated directly using "),YTe=a("code"),LNr=o("__init__()"),xNr=o(" (throws an error)."),$Nr=l(),Qt=a("div"),F(sx.$$.fragment),kNr=l(),KTe=a("p"),SNr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),RNr=l(),Uc=a("p"),PNr=o(`Note:
Loading a model from its configuration file does `),ZTe=a("strong"),BNr=o("not"),INr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AK=a("a"),NNr=o("from_pretrained()"),qNr=o(" to load the model weights."),jNr=l(),F(pw.$$.fragment),DNr=l(),zr=a("div"),F(lx.$$.fragment),GNr=l(),eMe=a("p"),ONr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),VNr=l(),Fn=a("p"),XNr=o("The model class to instantiate is selected based on the "),oMe=a("code"),zNr=o("model_type"),WNr=o(` property of the config object (either
passed as an argument or loaded from `),rMe=a("code"),QNr=o("pretrained_model_name_or_path"),HNr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tMe=a("code"),UNr=o("pretrained_model_name_or_path"),JNr=o(":"),YNr=l(),$e=a("ul"),_w=a("li"),aMe=a("strong"),KNr=o("albert"),ZNr=o(" \u2014 "),yK=a("a"),eqr=o("FlaxAlbertForQuestionAnswering"),oqr=o(" (ALBERT model)"),rqr=l(),uw=a("li"),nMe=a("strong"),tqr=o("bart"),aqr=o(" \u2014 "),LK=a("a"),nqr=o("FlaxBartForQuestionAnswering"),sqr=o(" (BART model)"),lqr=l(),bw=a("li"),sMe=a("strong"),iqr=o("bert"),dqr=o(" \u2014 "),xK=a("a"),cqr=o("FlaxBertForQuestionAnswering"),fqr=o(" (BERT model)"),mqr=l(),vw=a("li"),lMe=a("strong"),gqr=o("big_bird"),hqr=o(" \u2014 "),$K=a("a"),pqr=o("FlaxBigBirdForQuestionAnswering"),_qr=o(" (BigBird model)"),uqr=l(),Fw=a("li"),iMe=a("strong"),bqr=o("distilbert"),vqr=o(" \u2014 "),kK=a("a"),Fqr=o("FlaxDistilBertForQuestionAnswering"),Tqr=o(" (DistilBERT model)"),Mqr=l(),Tw=a("li"),dMe=a("strong"),Eqr=o("electra"),Cqr=o(" \u2014 "),SK=a("a"),wqr=o("FlaxElectraForQuestionAnswering"),Aqr=o(" (ELECTRA model)"),yqr=l(),Mw=a("li"),cMe=a("strong"),Lqr=o("mbart"),xqr=o(" \u2014 "),RK=a("a"),$qr=o("FlaxMBartForQuestionAnswering"),kqr=o(" (mBART model)"),Sqr=l(),Ew=a("li"),fMe=a("strong"),Rqr=o("roberta"),Pqr=o(" \u2014 "),PK=a("a"),Bqr=o("FlaxRobertaForQuestionAnswering"),Iqr=o(" (RoBERTa model)"),Nqr=l(),Cw=a("li"),mMe=a("strong"),qqr=o("roformer"),jqr=o(" \u2014 "),BK=a("a"),Dqr=o("FlaxRoFormerForQuestionAnswering"),Gqr=o(" (RoFormer model)"),Oqr=l(),ww=a("li"),gMe=a("strong"),Vqr=o("xlm-roberta"),Xqr=o(" \u2014 "),IK=a("a"),zqr=o("FlaxXLMRobertaForQuestionAnswering"),Wqr=o(" (XLM-RoBERTa model)"),Qqr=l(),F(Aw.$$.fragment),Zje=l(),Jc=a("h2"),yw=a("a"),hMe=a("span"),F(ix.$$.fragment),Hqr=l(),pMe=a("span"),Uqr=o("FlaxAutoModelForTokenClassification"),eDe=l(),br=a("div"),F(dx.$$.fragment),Jqr=l(),Yc=a("p"),Yqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),NK=a("a"),Kqr=o("from_pretrained()"),Zqr=o(" class method or the "),qK=a("a"),ejr=o("from_config()"),ojr=o(` class
method.`),rjr=l(),cx=a("p"),tjr=o("This class cannot be instantiated directly using "),_Me=a("code"),ajr=o("__init__()"),njr=o(" (throws an error)."),sjr=l(),Ht=a("div"),F(fx.$$.fragment),ljr=l(),uMe=a("p"),ijr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),djr=l(),Kc=a("p"),cjr=o(`Note:
Loading a model from its configuration file does `),bMe=a("strong"),fjr=o("not"),mjr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jK=a("a"),gjr=o("from_pretrained()"),hjr=o(" to load the model weights."),pjr=l(),F(Lw.$$.fragment),_jr=l(),Wr=a("div"),F(mx.$$.fragment),ujr=l(),vMe=a("p"),bjr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),vjr=l(),Tn=a("p"),Fjr=o("The model class to instantiate is selected based on the "),FMe=a("code"),Tjr=o("model_type"),Mjr=o(` property of the config object (either
passed as an argument or loaded from `),TMe=a("code"),Ejr=o("pretrained_model_name_or_path"),Cjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MMe=a("code"),wjr=o("pretrained_model_name_or_path"),Ajr=o(":"),yjr=l(),De=a("ul"),xw=a("li"),EMe=a("strong"),Ljr=o("albert"),xjr=o(" \u2014 "),DK=a("a"),$jr=o("FlaxAlbertForTokenClassification"),kjr=o(" (ALBERT model)"),Sjr=l(),$w=a("li"),CMe=a("strong"),Rjr=o("bert"),Pjr=o(" \u2014 "),GK=a("a"),Bjr=o("FlaxBertForTokenClassification"),Ijr=o(" (BERT model)"),Njr=l(),kw=a("li"),wMe=a("strong"),qjr=o("big_bird"),jjr=o(" \u2014 "),OK=a("a"),Djr=o("FlaxBigBirdForTokenClassification"),Gjr=o(" (BigBird model)"),Ojr=l(),Sw=a("li"),AMe=a("strong"),Vjr=o("distilbert"),Xjr=o(" \u2014 "),VK=a("a"),zjr=o("FlaxDistilBertForTokenClassification"),Wjr=o(" (DistilBERT model)"),Qjr=l(),Rw=a("li"),yMe=a("strong"),Hjr=o("electra"),Ujr=o(" \u2014 "),XK=a("a"),Jjr=o("FlaxElectraForTokenClassification"),Yjr=o(" (ELECTRA model)"),Kjr=l(),Pw=a("li"),LMe=a("strong"),Zjr=o("roberta"),eDr=o(" \u2014 "),zK=a("a"),oDr=o("FlaxRobertaForTokenClassification"),rDr=o(" (RoBERTa model)"),tDr=l(),Bw=a("li"),xMe=a("strong"),aDr=o("roformer"),nDr=o(" \u2014 "),WK=a("a"),sDr=o("FlaxRoFormerForTokenClassification"),lDr=o(" (RoFormer model)"),iDr=l(),Iw=a("li"),$Me=a("strong"),dDr=o("xlm-roberta"),cDr=o(" \u2014 "),QK=a("a"),fDr=o("FlaxXLMRobertaForTokenClassification"),mDr=o(" (XLM-RoBERTa model)"),gDr=l(),F(Nw.$$.fragment),oDe=l(),Zc=a("h2"),qw=a("a"),kMe=a("span"),F(gx.$$.fragment),hDr=l(),SMe=a("span"),pDr=o("FlaxAutoModelForMultipleChoice"),rDe=l(),vr=a("div"),F(hx.$$.fragment),_Dr=l(),ef=a("p"),uDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),HK=a("a"),bDr=o("from_pretrained()"),vDr=o(" class method or the "),UK=a("a"),FDr=o("from_config()"),TDr=o(` class
method.`),MDr=l(),px=a("p"),EDr=o("This class cannot be instantiated directly using "),RMe=a("code"),CDr=o("__init__()"),wDr=o(" (throws an error)."),ADr=l(),Ut=a("div"),F(_x.$$.fragment),yDr=l(),PMe=a("p"),LDr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),xDr=l(),of=a("p"),$Dr=o(`Note:
Loading a model from its configuration file does `),BMe=a("strong"),kDr=o("not"),SDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JK=a("a"),RDr=o("from_pretrained()"),PDr=o(" to load the model weights."),BDr=l(),F(jw.$$.fragment),IDr=l(),Qr=a("div"),F(ux.$$.fragment),NDr=l(),IMe=a("p"),qDr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),jDr=l(),Mn=a("p"),DDr=o("The model class to instantiate is selected based on the "),NMe=a("code"),GDr=o("model_type"),ODr=o(` property of the config object (either
passed as an argument or loaded from `),qMe=a("code"),VDr=o("pretrained_model_name_or_path"),XDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jMe=a("code"),zDr=o("pretrained_model_name_or_path"),WDr=o(":"),QDr=l(),Ge=a("ul"),Dw=a("li"),DMe=a("strong"),HDr=o("albert"),UDr=o(" \u2014 "),YK=a("a"),JDr=o("FlaxAlbertForMultipleChoice"),YDr=o(" (ALBERT model)"),KDr=l(),Gw=a("li"),GMe=a("strong"),ZDr=o("bert"),eGr=o(" \u2014 "),KK=a("a"),oGr=o("FlaxBertForMultipleChoice"),rGr=o(" (BERT model)"),tGr=l(),Ow=a("li"),OMe=a("strong"),aGr=o("big_bird"),nGr=o(" \u2014 "),ZK=a("a"),sGr=o("FlaxBigBirdForMultipleChoice"),lGr=o(" (BigBird model)"),iGr=l(),Vw=a("li"),VMe=a("strong"),dGr=o("distilbert"),cGr=o(" \u2014 "),eZ=a("a"),fGr=o("FlaxDistilBertForMultipleChoice"),mGr=o(" (DistilBERT model)"),gGr=l(),Xw=a("li"),XMe=a("strong"),hGr=o("electra"),pGr=o(" \u2014 "),oZ=a("a"),_Gr=o("FlaxElectraForMultipleChoice"),uGr=o(" (ELECTRA model)"),bGr=l(),zw=a("li"),zMe=a("strong"),vGr=o("roberta"),FGr=o(" \u2014 "),rZ=a("a"),TGr=o("FlaxRobertaForMultipleChoice"),MGr=o(" (RoBERTa model)"),EGr=l(),Ww=a("li"),WMe=a("strong"),CGr=o("roformer"),wGr=o(" \u2014 "),tZ=a("a"),AGr=o("FlaxRoFormerForMultipleChoice"),yGr=o(" (RoFormer model)"),LGr=l(),Qw=a("li"),QMe=a("strong"),xGr=o("xlm-roberta"),$Gr=o(" \u2014 "),aZ=a("a"),kGr=o("FlaxXLMRobertaForMultipleChoice"),SGr=o(" (XLM-RoBERTa model)"),RGr=l(),F(Hw.$$.fragment),tDe=l(),rf=a("h2"),Uw=a("a"),HMe=a("span"),F(bx.$$.fragment),PGr=l(),UMe=a("span"),BGr=o("FlaxAutoModelForNextSentencePrediction"),aDe=l(),Fr=a("div"),F(vx.$$.fragment),IGr=l(),tf=a("p"),NGr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),nZ=a("a"),qGr=o("from_pretrained()"),jGr=o(" class method or the "),sZ=a("a"),DGr=o("from_config()"),GGr=o(` class
method.`),OGr=l(),Fx=a("p"),VGr=o("This class cannot be instantiated directly using "),JMe=a("code"),XGr=o("__init__()"),zGr=o(" (throws an error)."),WGr=l(),Jt=a("div"),F(Tx.$$.fragment),QGr=l(),YMe=a("p"),HGr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),UGr=l(),af=a("p"),JGr=o(`Note:
Loading a model from its configuration file does `),KMe=a("strong"),YGr=o("not"),KGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lZ=a("a"),ZGr=o("from_pretrained()"),eOr=o(" to load the model weights."),oOr=l(),F(Jw.$$.fragment),rOr=l(),Hr=a("div"),F(Mx.$$.fragment),tOr=l(),ZMe=a("p"),aOr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),nOr=l(),En=a("p"),sOr=o("The model class to instantiate is selected based on the "),eEe=a("code"),lOr=o("model_type"),iOr=o(` property of the config object (either
passed as an argument or loaded from `),oEe=a("code"),dOr=o("pretrained_model_name_or_path"),cOr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rEe=a("code"),fOr=o("pretrained_model_name_or_path"),mOr=o(":"),gOr=l(),tEe=a("ul"),Yw=a("li"),aEe=a("strong"),hOr=o("bert"),pOr=o(" \u2014 "),iZ=a("a"),_Or=o("FlaxBertForNextSentencePrediction"),uOr=o(" (BERT model)"),bOr=l(),F(Kw.$$.fragment),nDe=l(),nf=a("h2"),Zw=a("a"),nEe=a("span"),F(Ex.$$.fragment),vOr=l(),sEe=a("span"),FOr=o("FlaxAutoModelForImageClassification"),sDe=l(),Tr=a("div"),F(Cx.$$.fragment),TOr=l(),sf=a("p"),MOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),dZ=a("a"),EOr=o("from_pretrained()"),COr=o(" class method or the "),cZ=a("a"),wOr=o("from_config()"),AOr=o(` class
method.`),yOr=l(),wx=a("p"),LOr=o("This class cannot be instantiated directly using "),lEe=a("code"),xOr=o("__init__()"),$Or=o(" (throws an error)."),kOr=l(),Yt=a("div"),F(Ax.$$.fragment),SOr=l(),iEe=a("p"),ROr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),POr=l(),lf=a("p"),BOr=o(`Note:
Loading a model from its configuration file does `),dEe=a("strong"),IOr=o("not"),NOr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fZ=a("a"),qOr=o("from_pretrained()"),jOr=o(" to load the model weights."),DOr=l(),F(e0.$$.fragment),GOr=l(),Ur=a("div"),F(yx.$$.fragment),OOr=l(),cEe=a("p"),VOr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),XOr=l(),Cn=a("p"),zOr=o("The model class to instantiate is selected based on the "),fEe=a("code"),WOr=o("model_type"),QOr=o(` property of the config object (either
passed as an argument or loaded from `),mEe=a("code"),HOr=o("pretrained_model_name_or_path"),UOr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gEe=a("code"),JOr=o("pretrained_model_name_or_path"),YOr=o(":"),KOr=l(),Lx=a("ul"),o0=a("li"),hEe=a("strong"),ZOr=o("beit"),eVr=o(" \u2014 "),mZ=a("a"),oVr=o("FlaxBeitForImageClassification"),rVr=o(" (BEiT model)"),tVr=l(),r0=a("li"),pEe=a("strong"),aVr=o("vit"),nVr=o(" \u2014 "),gZ=a("a"),sVr=o("FlaxViTForImageClassification"),lVr=o(" (ViT model)"),iVr=l(),F(t0.$$.fragment),lDe=l(),df=a("h2"),a0=a("a"),_Ee=a("span"),F(xx.$$.fragment),dVr=l(),uEe=a("span"),cVr=o("FlaxAutoModelForVision2Seq"),iDe=l(),Mr=a("div"),F($x.$$.fragment),fVr=l(),cf=a("p"),mVr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),hZ=a("a"),gVr=o("from_pretrained()"),hVr=o(" class method or the "),pZ=a("a"),pVr=o("from_config()"),_Vr=o(` class
method.`),uVr=l(),kx=a("p"),bVr=o("This class cannot be instantiated directly using "),bEe=a("code"),vVr=o("__init__()"),FVr=o(" (throws an error)."),TVr=l(),Kt=a("div"),F(Sx.$$.fragment),MVr=l(),vEe=a("p"),EVr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),CVr=l(),ff=a("p"),wVr=o(`Note:
Loading a model from its configuration file does `),FEe=a("strong"),AVr=o("not"),yVr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_Z=a("a"),LVr=o("from_pretrained()"),xVr=o(" to load the model weights."),$Vr=l(),F(n0.$$.fragment),kVr=l(),Jr=a("div"),F(Rx.$$.fragment),SVr=l(),TEe=a("p"),RVr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),PVr=l(),wn=a("p"),BVr=o("The model class to instantiate is selected based on the "),MEe=a("code"),IVr=o("model_type"),NVr=o(` property of the config object (either
passed as an argument or loaded from `),EEe=a("code"),qVr=o("pretrained_model_name_or_path"),jVr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CEe=a("code"),DVr=o("pretrained_model_name_or_path"),GVr=o(":"),OVr=l(),wEe=a("ul"),s0=a("li"),AEe=a("strong"),VVr=o("vision-encoder-decoder"),XVr=o(" \u2014 "),uZ=a("a"),zVr=o("FlaxVisionEncoderDecoderModel"),WVr=o(" (Vision Encoder decoder model)"),QVr=l(),F(l0.$$.fragment),this.h()},l(f){const u=k$t('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var Px=s(p);m=n(Px,"A",{id:!0,class:!0,href:!0});var yEe=s(m);_=n(yEe,"SPAN",{});var LEe=s(_);T(d.$$.fragment,LEe),LEe.forEach(t),yEe.forEach(t),h=i(Px),Mo=n(Px,"SPAN",{});var xEe=s(Mo);fi=r(xEe,"Auto Classes"),xEe.forEach(t),Px.forEach(t),pf=i(f),rt=n(f,"P",{});var Bx=s(rt);mi=r(Bx,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),gi=n(Bx,"CODE",{});var $Ee=s(gi);wy=r($Ee,"from_pretrained()"),$Ee.forEach(t),_f=r(Bx,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Bx.forEach(t),je=i(f),We=n(f,"P",{});var An=s(We);hi=r(An,"Instantiating one of "),yn=n(An,"A",{href:!0});var kEe=s(yn);Ay=r(kEe,"AutoConfig"),kEe.forEach(t),Ln=r(An,", "),xn=n(An,"A",{href:!0});var SEe=s(xn);yy=r(SEe,"AutoModel"),SEe.forEach(t),pi=r(An,`, and
`),$n=n(An,"A",{href:!0});var REe=s($n);Ly=r(REe,"AutoTokenizer"),REe.forEach(t),_i=r(An," will directly create a class of the relevant architecture. For instance"),An.forEach(t),uf=i(f),T(Ca.$$.fragment,f),Qe=i(f),Ae=n(f,"P",{});var Ix=s(Ae);Q$=r(Ix,"will create a model that is an instance of "),ui=n(Ix,"A",{href:!0});var PEe=s(ui);H$=r(PEe,"BertModel"),PEe.forEach(t),U$=r(Ix,"."),Ix.forEach(t),Eo=i(f),wa=n(f,"P",{});var Nx=s(wa);J$=r(Nx,"There is one class of "),bf=n(Nx,"CODE",{});var BEe=s(bf);Y$=r(BEe,"AutoModel"),BEe.forEach(t),uOe=r(Nx," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Nx.forEach(t),sqe=i(f),bi=n(f,"H2",{class:!0});var qx=s(bi);vf=n(qx,"A",{id:!0,class:!0,href:!0});var IEe=s(vf);coe=n(IEe,"SPAN",{});var NEe=s(coe);T(xy.$$.fragment,NEe),NEe.forEach(t),IEe.forEach(t),bOe=i(qx),foe=n(qx,"SPAN",{});var qEe=s(foe);vOe=r(qEe,"Extending the Auto Classes"),qEe.forEach(t),qx.forEach(t),lqe=i(f),kn=n(f,"P",{});var mf=s(kn);FOe=r(mf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),moe=n(mf,"CODE",{});var jEe=s(moe);TOe=r(jEe,"NewModel"),jEe.forEach(t),MOe=r(mf,", make sure you have a "),goe=n(mf,"CODE",{});var DEe=s(goe);EOe=r(DEe,"NewModelConfig"),DEe.forEach(t),COe=r(mf,` then you can add those to the auto
classes like this:`),mf.forEach(t),iqe=i(f),T($y.$$.fragment,f),dqe=i(f),K$=n(f,"P",{});var GEe=s(K$);wOe=r(GEe,"You will then be able to use the auto classes like you would usually do!"),GEe.forEach(t),cqe=i(f),T(Ff.$$.fragment,f),fqe=i(f),vi=n(f,"H2",{class:!0});var jx=s(vi);Tf=n(jx,"A",{id:!0,class:!0,href:!0});var OEe=s(Tf);hoe=n(OEe,"SPAN",{});var VEe=s(hoe);T(ky.$$.fragment,VEe),VEe.forEach(t),OEe.forEach(t),AOe=i(jx),poe=n(jx,"SPAN",{});var XEe=s(poe);yOe=r(XEe,"AutoConfig"),XEe.forEach(t),jx.forEach(t),mqe=i(f),Co=n(f,"DIV",{class:!0});var et=s(Co);T(Sy.$$.fragment,et),LOe=i(et),Ry=n(et,"P",{});var Dx=s(Ry);xOe=r(Dx,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),Z$=n(Dx,"A",{href:!0});var zEe=s(Z$);$Oe=r(zEe,"from_pretrained()"),zEe.forEach(t),kOe=r(Dx," class method."),Dx.forEach(t),SOe=i(et),Py=n(et,"P",{});var Gx=s(Py);ROe=r(Gx,"This class cannot be instantiated directly using "),_oe=n(Gx,"CODE",{});var WEe=s(_oe);POe=r(WEe,"__init__()"),WEe.forEach(t),BOe=r(Gx," (throws an error)."),Gx.forEach(t),IOe=i(et),Er=n(et,"DIV",{class:!0});var ot=s(Er);T(By.$$.fragment,ot),NOe=i(ot),uoe=n(ot,"P",{});var QEe=s(uoe);qOe=r(QEe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),QEe.forEach(t),jOe=i(ot),Fi=n(ot,"P",{});var gf=s(Fi);DOe=r(gf,"The configuration class to instantiate is selected based on the "),boe=n(gf,"CODE",{});var HEe=s(boe);GOe=r(HEe,"model_type"),HEe.forEach(t),OOe=r(gf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),voe=n(gf,"CODE",{});var UEe=s(voe);VOe=r(UEe,"pretrained_model_name_or_path"),UEe.forEach(t),XOe=r(gf,":"),gf.forEach(t),zOe=i(ot),A=n(ot,"UL",{});var y=s(A);Mf=n(y,"LI",{});var i0=s(Mf);Foe=n(i0,"STRONG",{});var JEe=s(Foe);WOe=r(JEe,"albert"),JEe.forEach(t),QOe=r(i0," \u2014 "),ek=n(i0,"A",{href:!0});var YEe=s(ek);HOe=r(YEe,"AlbertConfig"),YEe.forEach(t),UOe=r(i0," (ALBERT model)"),i0.forEach(t),JOe=i(y),Ef=n(y,"LI",{});var d0=s(Ef);Toe=n(d0,"STRONG",{});var KEe=s(Toe);YOe=r(KEe,"bart"),KEe.forEach(t),KOe=r(d0," \u2014 "),ok=n(d0,"A",{href:!0});var ZEe=s(ok);ZOe=r(ZEe,"BartConfig"),ZEe.forEach(t),eVe=r(d0," (BART model)"),d0.forEach(t),oVe=i(y),Cf=n(y,"LI",{});var c0=s(Cf);Moe=n(c0,"STRONG",{});var eCe=s(Moe);rVe=r(eCe,"beit"),eCe.forEach(t),tVe=r(c0," \u2014 "),rk=n(c0,"A",{href:!0});var oCe=s(rk);aVe=r(oCe,"BeitConfig"),oCe.forEach(t),nVe=r(c0," (BEiT model)"),c0.forEach(t),sVe=i(y),wf=n(y,"LI",{});var f0=s(wf);Eoe=n(f0,"STRONG",{});var rCe=s(Eoe);lVe=r(rCe,"bert"),rCe.forEach(t),iVe=r(f0," \u2014 "),tk=n(f0,"A",{href:!0});var tCe=s(tk);dVe=r(tCe,"BertConfig"),tCe.forEach(t),cVe=r(f0," (BERT model)"),f0.forEach(t),fVe=i(y),Af=n(y,"LI",{});var m0=s(Af);Coe=n(m0,"STRONG",{});var aCe=s(Coe);mVe=r(aCe,"bert-generation"),aCe.forEach(t),gVe=r(m0," \u2014 "),ak=n(m0,"A",{href:!0});var nCe=s(ak);hVe=r(nCe,"BertGenerationConfig"),nCe.forEach(t),pVe=r(m0," (Bert Generation model)"),m0.forEach(t),_Ve=i(y),yf=n(y,"LI",{});var g0=s(yf);woe=n(g0,"STRONG",{});var sCe=s(woe);uVe=r(sCe,"big_bird"),sCe.forEach(t),bVe=r(g0," \u2014 "),nk=n(g0,"A",{href:!0});var lCe=s(nk);vVe=r(lCe,"BigBirdConfig"),lCe.forEach(t),FVe=r(g0," (BigBird model)"),g0.forEach(t),TVe=i(y),Lf=n(y,"LI",{});var h0=s(Lf);Aoe=n(h0,"STRONG",{});var iCe=s(Aoe);MVe=r(iCe,"bigbird_pegasus"),iCe.forEach(t),EVe=r(h0," \u2014 "),sk=n(h0,"A",{href:!0});var dCe=s(sk);CVe=r(dCe,"BigBirdPegasusConfig"),dCe.forEach(t),wVe=r(h0," (BigBirdPegasus model)"),h0.forEach(t),AVe=i(y),xf=n(y,"LI",{});var p0=s(xf);yoe=n(p0,"STRONG",{});var cCe=s(yoe);yVe=r(cCe,"blenderbot"),cCe.forEach(t),LVe=r(p0," \u2014 "),lk=n(p0,"A",{href:!0});var fCe=s(lk);xVe=r(fCe,"BlenderbotConfig"),fCe.forEach(t),$Ve=r(p0," (Blenderbot model)"),p0.forEach(t),kVe=i(y),$f=n(y,"LI",{});var _0=s($f);Loe=n(_0,"STRONG",{});var mCe=s(Loe);SVe=r(mCe,"blenderbot-small"),mCe.forEach(t),RVe=r(_0," \u2014 "),ik=n(_0,"A",{href:!0});var gCe=s(ik);PVe=r(gCe,"BlenderbotSmallConfig"),gCe.forEach(t),BVe=r(_0," (BlenderbotSmall model)"),_0.forEach(t),IVe=i(y),kf=n(y,"LI",{});var u0=s(kf);xoe=n(u0,"STRONG",{});var hCe=s(xoe);NVe=r(hCe,"camembert"),hCe.forEach(t),qVe=r(u0," \u2014 "),dk=n(u0,"A",{href:!0});var pCe=s(dk);jVe=r(pCe,"CamembertConfig"),pCe.forEach(t),DVe=r(u0," (CamemBERT model)"),u0.forEach(t),GVe=i(y),Sf=n(y,"LI",{});var b0=s(Sf);$oe=n(b0,"STRONG",{});var _Ce=s($oe);OVe=r(_Ce,"canine"),_Ce.forEach(t),VVe=r(b0," \u2014 "),ck=n(b0,"A",{href:!0});var uCe=s(ck);XVe=r(uCe,"CanineConfig"),uCe.forEach(t),zVe=r(b0," (Canine model)"),b0.forEach(t),WVe=i(y),Rf=n(y,"LI",{});var v0=s(Rf);koe=n(v0,"STRONG",{});var bCe=s(koe);QVe=r(bCe,"clip"),bCe.forEach(t),HVe=r(v0," \u2014 "),fk=n(v0,"A",{href:!0});var vCe=s(fk);UVe=r(vCe,"CLIPConfig"),vCe.forEach(t),JVe=r(v0," (CLIP model)"),v0.forEach(t),YVe=i(y),Pf=n(y,"LI",{});var F0=s(Pf);Soe=n(F0,"STRONG",{});var FCe=s(Soe);KVe=r(FCe,"convbert"),FCe.forEach(t),ZVe=r(F0," \u2014 "),mk=n(F0,"A",{href:!0});var TCe=s(mk);eXe=r(TCe,"ConvBertConfig"),TCe.forEach(t),oXe=r(F0," (ConvBERT model)"),F0.forEach(t),rXe=i(y),Bf=n(y,"LI",{});var T0=s(Bf);Roe=n(T0,"STRONG",{});var MCe=s(Roe);tXe=r(MCe,"convnext"),MCe.forEach(t),aXe=r(T0," \u2014 "),gk=n(T0,"A",{href:!0});var ECe=s(gk);nXe=r(ECe,"ConvNextConfig"),ECe.forEach(t),sXe=r(T0," (ConvNext model)"),T0.forEach(t),lXe=i(y),If=n(y,"LI",{});var M0=s(If);Poe=n(M0,"STRONG",{});var CCe=s(Poe);iXe=r(CCe,"ctrl"),CCe.forEach(t),dXe=r(M0," \u2014 "),hk=n(M0,"A",{href:!0});var wCe=s(hk);cXe=r(wCe,"CTRLConfig"),wCe.forEach(t),fXe=r(M0," (CTRL model)"),M0.forEach(t),mXe=i(y),Nf=n(y,"LI",{});var E0=s(Nf);Boe=n(E0,"STRONG",{});var ACe=s(Boe);gXe=r(ACe,"cvt"),ACe.forEach(t),hXe=r(E0," \u2014 "),pk=n(E0,"A",{href:!0});var yCe=s(pk);pXe=r(yCe,"CvtConfig"),yCe.forEach(t),_Xe=r(E0," (CvT model)"),E0.forEach(t),uXe=i(y),qf=n(y,"LI",{});var C0=s(qf);Ioe=n(C0,"STRONG",{});var LCe=s(Ioe);bXe=r(LCe,"data2vec-audio"),LCe.forEach(t),vXe=r(C0," \u2014 "),_k=n(C0,"A",{href:!0});var xCe=s(_k);FXe=r(xCe,"Data2VecAudioConfig"),xCe.forEach(t),TXe=r(C0," (Data2VecAudio model)"),C0.forEach(t),MXe=i(y),jf=n(y,"LI",{});var w0=s(jf);Noe=n(w0,"STRONG",{});var $Ce=s(Noe);EXe=r($Ce,"data2vec-text"),$Ce.forEach(t),CXe=r(w0," \u2014 "),uk=n(w0,"A",{href:!0});var kCe=s(uk);wXe=r(kCe,"Data2VecTextConfig"),kCe.forEach(t),AXe=r(w0," (Data2VecText model)"),w0.forEach(t),yXe=i(y),Df=n(y,"LI",{});var A0=s(Df);qoe=n(A0,"STRONG",{});var SCe=s(qoe);LXe=r(SCe,"data2vec-vision"),SCe.forEach(t),xXe=r(A0," \u2014 "),bk=n(A0,"A",{href:!0});var RCe=s(bk);$Xe=r(RCe,"Data2VecVisionConfig"),RCe.forEach(t),kXe=r(A0," (Data2VecVision model)"),A0.forEach(t),SXe=i(y),Gf=n(y,"LI",{});var y0=s(Gf);joe=n(y0,"STRONG",{});var PCe=s(joe);RXe=r(PCe,"deberta"),PCe.forEach(t),PXe=r(y0," \u2014 "),vk=n(y0,"A",{href:!0});var BCe=s(vk);BXe=r(BCe,"DebertaConfig"),BCe.forEach(t),IXe=r(y0," (DeBERTa model)"),y0.forEach(t),NXe=i(y),Of=n(y,"LI",{});var L0=s(Of);Doe=n(L0,"STRONG",{});var ICe=s(Doe);qXe=r(ICe,"deberta-v2"),ICe.forEach(t),jXe=r(L0," \u2014 "),Fk=n(L0,"A",{href:!0});var NCe=s(Fk);DXe=r(NCe,"DebertaV2Config"),NCe.forEach(t),GXe=r(L0," (DeBERTa-v2 model)"),L0.forEach(t),OXe=i(y),Vf=n(y,"LI",{});var x0=s(Vf);Goe=n(x0,"STRONG",{});var qCe=s(Goe);VXe=r(qCe,"decision_transformer"),qCe.forEach(t),XXe=r(x0," \u2014 "),Tk=n(x0,"A",{href:!0});var jCe=s(Tk);zXe=r(jCe,"DecisionTransformerConfig"),jCe.forEach(t),WXe=r(x0," (Decision Transformer model)"),x0.forEach(t),QXe=i(y),Xf=n(y,"LI",{});var $0=s(Xf);Ooe=n($0,"STRONG",{});var DCe=s(Ooe);HXe=r(DCe,"deit"),DCe.forEach(t),UXe=r($0," \u2014 "),Mk=n($0,"A",{href:!0});var UVr=s(Mk);JXe=r(UVr,"DeiTConfig"),UVr.forEach(t),YXe=r($0," (DeiT model)"),$0.forEach(t),KXe=i(y),zf=n(y,"LI",{});var GCe=s(zf);Voe=n(GCe,"STRONG",{});var JVr=s(Voe);ZXe=r(JVr,"detr"),JVr.forEach(t),eze=r(GCe," \u2014 "),Ek=n(GCe,"A",{href:!0});var YVr=s(Ek);oze=r(YVr,"DetrConfig"),YVr.forEach(t),rze=r(GCe," (DETR model)"),GCe.forEach(t),tze=i(y),Wf=n(y,"LI",{});var OCe=s(Wf);Xoe=n(OCe,"STRONG",{});var KVr=s(Xoe);aze=r(KVr,"distilbert"),KVr.forEach(t),nze=r(OCe," \u2014 "),Ck=n(OCe,"A",{href:!0});var ZVr=s(Ck);sze=r(ZVr,"DistilBertConfig"),ZVr.forEach(t),lze=r(OCe," (DistilBERT model)"),OCe.forEach(t),ize=i(y),Qf=n(y,"LI",{});var VCe=s(Qf);zoe=n(VCe,"STRONG",{});var eXr=s(zoe);dze=r(eXr,"dpr"),eXr.forEach(t),cze=r(VCe," \u2014 "),wk=n(VCe,"A",{href:!0});var oXr=s(wk);fze=r(oXr,"DPRConfig"),oXr.forEach(t),mze=r(VCe," (DPR model)"),VCe.forEach(t),gze=i(y),Hf=n(y,"LI",{});var XCe=s(Hf);Woe=n(XCe,"STRONG",{});var rXr=s(Woe);hze=r(rXr,"dpt"),rXr.forEach(t),pze=r(XCe," \u2014 "),Ak=n(XCe,"A",{href:!0});var tXr=s(Ak);_ze=r(tXr,"DPTConfig"),tXr.forEach(t),uze=r(XCe," (DPT model)"),XCe.forEach(t),bze=i(y),Uf=n(y,"LI",{});var zCe=s(Uf);Qoe=n(zCe,"STRONG",{});var aXr=s(Qoe);vze=r(aXr,"electra"),aXr.forEach(t),Fze=r(zCe," \u2014 "),yk=n(zCe,"A",{href:!0});var nXr=s(yk);Tze=r(nXr,"ElectraConfig"),nXr.forEach(t),Mze=r(zCe," (ELECTRA model)"),zCe.forEach(t),Eze=i(y),Jf=n(y,"LI",{});var WCe=s(Jf);Hoe=n(WCe,"STRONG",{});var sXr=s(Hoe);Cze=r(sXr,"encoder-decoder"),sXr.forEach(t),wze=r(WCe," \u2014 "),Lk=n(WCe,"A",{href:!0});var lXr=s(Lk);Aze=r(lXr,"EncoderDecoderConfig"),lXr.forEach(t),yze=r(WCe," (Encoder decoder model)"),WCe.forEach(t),Lze=i(y),Yf=n(y,"LI",{});var QCe=s(Yf);Uoe=n(QCe,"STRONG",{});var iXr=s(Uoe);xze=r(iXr,"flaubert"),iXr.forEach(t),$ze=r(QCe," \u2014 "),xk=n(QCe,"A",{href:!0});var dXr=s(xk);kze=r(dXr,"FlaubertConfig"),dXr.forEach(t),Sze=r(QCe," (FlauBERT model)"),QCe.forEach(t),Rze=i(y),Kf=n(y,"LI",{});var HCe=s(Kf);Joe=n(HCe,"STRONG",{});var cXr=s(Joe);Pze=r(cXr,"flava"),cXr.forEach(t),Bze=r(HCe," \u2014 "),$k=n(HCe,"A",{href:!0});var fXr=s($k);Ize=r(fXr,"FlavaConfig"),fXr.forEach(t),Nze=r(HCe," (Flava model)"),HCe.forEach(t),qze=i(y),Zf=n(y,"LI",{});var UCe=s(Zf);Yoe=n(UCe,"STRONG",{});var mXr=s(Yoe);jze=r(mXr,"fnet"),mXr.forEach(t),Dze=r(UCe," \u2014 "),kk=n(UCe,"A",{href:!0});var gXr=s(kk);Gze=r(gXr,"FNetConfig"),gXr.forEach(t),Oze=r(UCe," (FNet model)"),UCe.forEach(t),Vze=i(y),em=n(y,"LI",{});var JCe=s(em);Koe=n(JCe,"STRONG",{});var hXr=s(Koe);Xze=r(hXr,"fsmt"),hXr.forEach(t),zze=r(JCe," \u2014 "),Sk=n(JCe,"A",{href:!0});var pXr=s(Sk);Wze=r(pXr,"FSMTConfig"),pXr.forEach(t),Qze=r(JCe," (FairSeq Machine-Translation model)"),JCe.forEach(t),Hze=i(y),om=n(y,"LI",{});var YCe=s(om);Zoe=n(YCe,"STRONG",{});var _Xr=s(Zoe);Uze=r(_Xr,"funnel"),_Xr.forEach(t),Jze=r(YCe," \u2014 "),Rk=n(YCe,"A",{href:!0});var uXr=s(Rk);Yze=r(uXr,"FunnelConfig"),uXr.forEach(t),Kze=r(YCe," (Funnel Transformer model)"),YCe.forEach(t),Zze=i(y),rm=n(y,"LI",{});var KCe=s(rm);ere=n(KCe,"STRONG",{});var bXr=s(ere);eWe=r(bXr,"glpn"),bXr.forEach(t),oWe=r(KCe," \u2014 "),Pk=n(KCe,"A",{href:!0});var vXr=s(Pk);rWe=r(vXr,"GLPNConfig"),vXr.forEach(t),tWe=r(KCe," (GLPN model)"),KCe.forEach(t),aWe=i(y),tm=n(y,"LI",{});var ZCe=s(tm);ore=n(ZCe,"STRONG",{});var FXr=s(ore);nWe=r(FXr,"gpt2"),FXr.forEach(t),sWe=r(ZCe," \u2014 "),Bk=n(ZCe,"A",{href:!0});var TXr=s(Bk);lWe=r(TXr,"GPT2Config"),TXr.forEach(t),iWe=r(ZCe," (OpenAI GPT-2 model)"),ZCe.forEach(t),dWe=i(y),am=n(y,"LI",{});var ewe=s(am);rre=n(ewe,"STRONG",{});var MXr=s(rre);cWe=r(MXr,"gpt_neo"),MXr.forEach(t),fWe=r(ewe," \u2014 "),Ik=n(ewe,"A",{href:!0});var EXr=s(Ik);mWe=r(EXr,"GPTNeoConfig"),EXr.forEach(t),gWe=r(ewe," (GPT Neo model)"),ewe.forEach(t),hWe=i(y),nm=n(y,"LI",{});var owe=s(nm);tre=n(owe,"STRONG",{});var CXr=s(tre);pWe=r(CXr,"gpt_neox"),CXr.forEach(t),_We=r(owe," \u2014 "),Nk=n(owe,"A",{href:!0});var wXr=s(Nk);uWe=r(wXr,"GPTNeoXConfig"),wXr.forEach(t),bWe=r(owe," (GPT NeoX model)"),owe.forEach(t),vWe=i(y),sm=n(y,"LI",{});var rwe=s(sm);are=n(rwe,"STRONG",{});var AXr=s(are);FWe=r(AXr,"gptj"),AXr.forEach(t),TWe=r(rwe," \u2014 "),qk=n(rwe,"A",{href:!0});var yXr=s(qk);MWe=r(yXr,"GPTJConfig"),yXr.forEach(t),EWe=r(rwe," (GPT-J model)"),rwe.forEach(t),CWe=i(y),lm=n(y,"LI",{});var twe=s(lm);nre=n(twe,"STRONG",{});var LXr=s(nre);wWe=r(LXr,"hubert"),LXr.forEach(t),AWe=r(twe," \u2014 "),jk=n(twe,"A",{href:!0});var xXr=s(jk);yWe=r(xXr,"HubertConfig"),xXr.forEach(t),LWe=r(twe," (Hubert model)"),twe.forEach(t),xWe=i(y),im=n(y,"LI",{});var awe=s(im);sre=n(awe,"STRONG",{});var $Xr=s(sre);$We=r($Xr,"ibert"),$Xr.forEach(t),kWe=r(awe," \u2014 "),Dk=n(awe,"A",{href:!0});var kXr=s(Dk);SWe=r(kXr,"IBertConfig"),kXr.forEach(t),RWe=r(awe," (I-BERT model)"),awe.forEach(t),PWe=i(y),dm=n(y,"LI",{});var nwe=s(dm);lre=n(nwe,"STRONG",{});var SXr=s(lre);BWe=r(SXr,"imagegpt"),SXr.forEach(t),IWe=r(nwe," \u2014 "),Gk=n(nwe,"A",{href:!0});var RXr=s(Gk);NWe=r(RXr,"ImageGPTConfig"),RXr.forEach(t),qWe=r(nwe," (ImageGPT model)"),nwe.forEach(t),jWe=i(y),cm=n(y,"LI",{});var swe=s(cm);ire=n(swe,"STRONG",{});var PXr=s(ire);DWe=r(PXr,"layoutlm"),PXr.forEach(t),GWe=r(swe," \u2014 "),Ok=n(swe,"A",{href:!0});var BXr=s(Ok);OWe=r(BXr,"LayoutLMConfig"),BXr.forEach(t),VWe=r(swe," (LayoutLM model)"),swe.forEach(t),XWe=i(y),fm=n(y,"LI",{});var lwe=s(fm);dre=n(lwe,"STRONG",{});var IXr=s(dre);zWe=r(IXr,"layoutlmv2"),IXr.forEach(t),WWe=r(lwe," \u2014 "),Vk=n(lwe,"A",{href:!0});var NXr=s(Vk);QWe=r(NXr,"LayoutLMv2Config"),NXr.forEach(t),HWe=r(lwe," (LayoutLMv2 model)"),lwe.forEach(t),UWe=i(y),mm=n(y,"LI",{});var iwe=s(mm);cre=n(iwe,"STRONG",{});var qXr=s(cre);JWe=r(qXr,"layoutlmv3"),qXr.forEach(t),YWe=r(iwe," \u2014 "),Xk=n(iwe,"A",{href:!0});var jXr=s(Xk);KWe=r(jXr,"LayoutLMv3Config"),jXr.forEach(t),ZWe=r(iwe," (LayoutLMv3 model)"),iwe.forEach(t),eQe=i(y),gm=n(y,"LI",{});var dwe=s(gm);fre=n(dwe,"STRONG",{});var DXr=s(fre);oQe=r(DXr,"led"),DXr.forEach(t),rQe=r(dwe," \u2014 "),zk=n(dwe,"A",{href:!0});var GXr=s(zk);tQe=r(GXr,"LEDConfig"),GXr.forEach(t),aQe=r(dwe," (LED model)"),dwe.forEach(t),nQe=i(y),hm=n(y,"LI",{});var cwe=s(hm);mre=n(cwe,"STRONG",{});var OXr=s(mre);sQe=r(OXr,"longformer"),OXr.forEach(t),lQe=r(cwe," \u2014 "),Wk=n(cwe,"A",{href:!0});var VXr=s(Wk);iQe=r(VXr,"LongformerConfig"),VXr.forEach(t),dQe=r(cwe," (Longformer model)"),cwe.forEach(t),cQe=i(y),pm=n(y,"LI",{});var fwe=s(pm);gre=n(fwe,"STRONG",{});var XXr=s(gre);fQe=r(XXr,"luke"),XXr.forEach(t),mQe=r(fwe," \u2014 "),Qk=n(fwe,"A",{href:!0});var zXr=s(Qk);gQe=r(zXr,"LukeConfig"),zXr.forEach(t),hQe=r(fwe," (LUKE model)"),fwe.forEach(t),pQe=i(y),_m=n(y,"LI",{});var mwe=s(_m);hre=n(mwe,"STRONG",{});var WXr=s(hre);_Qe=r(WXr,"lxmert"),WXr.forEach(t),uQe=r(mwe," \u2014 "),Hk=n(mwe,"A",{href:!0});var QXr=s(Hk);bQe=r(QXr,"LxmertConfig"),QXr.forEach(t),vQe=r(mwe," (LXMERT model)"),mwe.forEach(t),FQe=i(y),um=n(y,"LI",{});var gwe=s(um);pre=n(gwe,"STRONG",{});var HXr=s(pre);TQe=r(HXr,"m2m_100"),HXr.forEach(t),MQe=r(gwe," \u2014 "),Uk=n(gwe,"A",{href:!0});var UXr=s(Uk);EQe=r(UXr,"M2M100Config"),UXr.forEach(t),CQe=r(gwe," (M2M100 model)"),gwe.forEach(t),wQe=i(y),bm=n(y,"LI",{});var hwe=s(bm);_re=n(hwe,"STRONG",{});var JXr=s(_re);AQe=r(JXr,"marian"),JXr.forEach(t),yQe=r(hwe," \u2014 "),Jk=n(hwe,"A",{href:!0});var YXr=s(Jk);LQe=r(YXr,"MarianConfig"),YXr.forEach(t),xQe=r(hwe," (Marian model)"),hwe.forEach(t),$Qe=i(y),vm=n(y,"LI",{});var pwe=s(vm);ure=n(pwe,"STRONG",{});var KXr=s(ure);kQe=r(KXr,"maskformer"),KXr.forEach(t),SQe=r(pwe," \u2014 "),Yk=n(pwe,"A",{href:!0});var ZXr=s(Yk);RQe=r(ZXr,"MaskFormerConfig"),ZXr.forEach(t),PQe=r(pwe," (MaskFormer model)"),pwe.forEach(t),BQe=i(y),Fm=n(y,"LI",{});var _we=s(Fm);bre=n(_we,"STRONG",{});var ezr=s(bre);IQe=r(ezr,"mbart"),ezr.forEach(t),NQe=r(_we," \u2014 "),Kk=n(_we,"A",{href:!0});var ozr=s(Kk);qQe=r(ozr,"MBartConfig"),ozr.forEach(t),jQe=r(_we," (mBART model)"),_we.forEach(t),DQe=i(y),Tm=n(y,"LI",{});var uwe=s(Tm);vre=n(uwe,"STRONG",{});var rzr=s(vre);GQe=r(rzr,"megatron-bert"),rzr.forEach(t),OQe=r(uwe," \u2014 "),Zk=n(uwe,"A",{href:!0});var tzr=s(Zk);VQe=r(tzr,"MegatronBertConfig"),tzr.forEach(t),XQe=r(uwe," (MegatronBert model)"),uwe.forEach(t),zQe=i(y),Mm=n(y,"LI",{});var bwe=s(Mm);Fre=n(bwe,"STRONG",{});var azr=s(Fre);WQe=r(azr,"mobilebert"),azr.forEach(t),QQe=r(bwe," \u2014 "),eS=n(bwe,"A",{href:!0});var nzr=s(eS);HQe=r(nzr,"MobileBertConfig"),nzr.forEach(t),UQe=r(bwe," (MobileBERT model)"),bwe.forEach(t),JQe=i(y),Em=n(y,"LI",{});var vwe=s(Em);Tre=n(vwe,"STRONG",{});var szr=s(Tre);YQe=r(szr,"mpnet"),szr.forEach(t),KQe=r(vwe," \u2014 "),oS=n(vwe,"A",{href:!0});var lzr=s(oS);ZQe=r(lzr,"MPNetConfig"),lzr.forEach(t),eHe=r(vwe," (MPNet model)"),vwe.forEach(t),oHe=i(y),Cm=n(y,"LI",{});var Fwe=s(Cm);Mre=n(Fwe,"STRONG",{});var izr=s(Mre);rHe=r(izr,"mt5"),izr.forEach(t),tHe=r(Fwe," \u2014 "),rS=n(Fwe,"A",{href:!0});var dzr=s(rS);aHe=r(dzr,"MT5Config"),dzr.forEach(t),nHe=r(Fwe," (mT5 model)"),Fwe.forEach(t),sHe=i(y),wm=n(y,"LI",{});var Twe=s(wm);Ere=n(Twe,"STRONG",{});var czr=s(Ere);lHe=r(czr,"nystromformer"),czr.forEach(t),iHe=r(Twe," \u2014 "),tS=n(Twe,"A",{href:!0});var fzr=s(tS);dHe=r(fzr,"NystromformerConfig"),fzr.forEach(t),cHe=r(Twe," (Nystromformer model)"),Twe.forEach(t),fHe=i(y),Am=n(y,"LI",{});var Mwe=s(Am);Cre=n(Mwe,"STRONG",{});var mzr=s(Cre);mHe=r(mzr,"openai-gpt"),mzr.forEach(t),gHe=r(Mwe," \u2014 "),aS=n(Mwe,"A",{href:!0});var gzr=s(aS);hHe=r(gzr,"OpenAIGPTConfig"),gzr.forEach(t),pHe=r(Mwe," (OpenAI GPT model)"),Mwe.forEach(t),_He=i(y),ym=n(y,"LI",{});var Ewe=s(ym);wre=n(Ewe,"STRONG",{});var hzr=s(wre);uHe=r(hzr,"opt"),hzr.forEach(t),bHe=r(Ewe," \u2014 "),nS=n(Ewe,"A",{href:!0});var pzr=s(nS);vHe=r(pzr,"OPTConfig"),pzr.forEach(t),FHe=r(Ewe," (OPT model)"),Ewe.forEach(t),THe=i(y),Lm=n(y,"LI",{});var Cwe=s(Lm);Are=n(Cwe,"STRONG",{});var _zr=s(Are);MHe=r(_zr,"pegasus"),_zr.forEach(t),EHe=r(Cwe," \u2014 "),sS=n(Cwe,"A",{href:!0});var uzr=s(sS);CHe=r(uzr,"PegasusConfig"),uzr.forEach(t),wHe=r(Cwe," (Pegasus model)"),Cwe.forEach(t),AHe=i(y),xm=n(y,"LI",{});var wwe=s(xm);yre=n(wwe,"STRONG",{});var bzr=s(yre);yHe=r(bzr,"perceiver"),bzr.forEach(t),LHe=r(wwe," \u2014 "),lS=n(wwe,"A",{href:!0});var vzr=s(lS);xHe=r(vzr,"PerceiverConfig"),vzr.forEach(t),$He=r(wwe," (Perceiver model)"),wwe.forEach(t),kHe=i(y),$m=n(y,"LI",{});var Awe=s($m);Lre=n(Awe,"STRONG",{});var Fzr=s(Lre);SHe=r(Fzr,"plbart"),Fzr.forEach(t),RHe=r(Awe," \u2014 "),iS=n(Awe,"A",{href:!0});var Tzr=s(iS);PHe=r(Tzr,"PLBartConfig"),Tzr.forEach(t),BHe=r(Awe," (PLBart model)"),Awe.forEach(t),IHe=i(y),km=n(y,"LI",{});var ywe=s(km);xre=n(ywe,"STRONG",{});var Mzr=s(xre);NHe=r(Mzr,"poolformer"),Mzr.forEach(t),qHe=r(ywe," \u2014 "),dS=n(ywe,"A",{href:!0});var Ezr=s(dS);jHe=r(Ezr,"PoolFormerConfig"),Ezr.forEach(t),DHe=r(ywe," (PoolFormer model)"),ywe.forEach(t),GHe=i(y),Sm=n(y,"LI",{});var Lwe=s(Sm);$re=n(Lwe,"STRONG",{});var Czr=s($re);OHe=r(Czr,"prophetnet"),Czr.forEach(t),VHe=r(Lwe," \u2014 "),cS=n(Lwe,"A",{href:!0});var wzr=s(cS);XHe=r(wzr,"ProphetNetConfig"),wzr.forEach(t),zHe=r(Lwe," (ProphetNet model)"),Lwe.forEach(t),WHe=i(y),Rm=n(y,"LI",{});var xwe=s(Rm);kre=n(xwe,"STRONG",{});var Azr=s(kre);QHe=r(Azr,"qdqbert"),Azr.forEach(t),HHe=r(xwe," \u2014 "),fS=n(xwe,"A",{href:!0});var yzr=s(fS);UHe=r(yzr,"QDQBertConfig"),yzr.forEach(t),JHe=r(xwe," (QDQBert model)"),xwe.forEach(t),YHe=i(y),Pm=n(y,"LI",{});var $we=s(Pm);Sre=n($we,"STRONG",{});var Lzr=s(Sre);KHe=r(Lzr,"rag"),Lzr.forEach(t),ZHe=r($we," \u2014 "),mS=n($we,"A",{href:!0});var xzr=s(mS);eUe=r(xzr,"RagConfig"),xzr.forEach(t),oUe=r($we," (RAG model)"),$we.forEach(t),rUe=i(y),Bm=n(y,"LI",{});var kwe=s(Bm);Rre=n(kwe,"STRONG",{});var $zr=s(Rre);tUe=r($zr,"realm"),$zr.forEach(t),aUe=r(kwe," \u2014 "),gS=n(kwe,"A",{href:!0});var kzr=s(gS);nUe=r(kzr,"RealmConfig"),kzr.forEach(t),sUe=r(kwe," (Realm model)"),kwe.forEach(t),lUe=i(y),Im=n(y,"LI",{});var Swe=s(Im);Pre=n(Swe,"STRONG",{});var Szr=s(Pre);iUe=r(Szr,"reformer"),Szr.forEach(t),dUe=r(Swe," \u2014 "),hS=n(Swe,"A",{href:!0});var Rzr=s(hS);cUe=r(Rzr,"ReformerConfig"),Rzr.forEach(t),fUe=r(Swe," (Reformer model)"),Swe.forEach(t),mUe=i(y),Nm=n(y,"LI",{});var Rwe=s(Nm);Bre=n(Rwe,"STRONG",{});var Pzr=s(Bre);gUe=r(Pzr,"regnet"),Pzr.forEach(t),hUe=r(Rwe," \u2014 "),pS=n(Rwe,"A",{href:!0});var Bzr=s(pS);pUe=r(Bzr,"RegNetConfig"),Bzr.forEach(t),_Ue=r(Rwe," (RegNet model)"),Rwe.forEach(t),uUe=i(y),qm=n(y,"LI",{});var Pwe=s(qm);Ire=n(Pwe,"STRONG",{});var Izr=s(Ire);bUe=r(Izr,"rembert"),Izr.forEach(t),vUe=r(Pwe," \u2014 "),_S=n(Pwe,"A",{href:!0});var Nzr=s(_S);FUe=r(Nzr,"RemBertConfig"),Nzr.forEach(t),TUe=r(Pwe," (RemBERT model)"),Pwe.forEach(t),MUe=i(y),jm=n(y,"LI",{});var Bwe=s(jm);Nre=n(Bwe,"STRONG",{});var qzr=s(Nre);EUe=r(qzr,"resnet"),qzr.forEach(t),CUe=r(Bwe," \u2014 "),uS=n(Bwe,"A",{href:!0});var jzr=s(uS);wUe=r(jzr,"ResNetConfig"),jzr.forEach(t),AUe=r(Bwe," (ResNet model)"),Bwe.forEach(t),yUe=i(y),Dm=n(y,"LI",{});var Iwe=s(Dm);qre=n(Iwe,"STRONG",{});var Dzr=s(qre);LUe=r(Dzr,"retribert"),Dzr.forEach(t),xUe=r(Iwe," \u2014 "),bS=n(Iwe,"A",{href:!0});var Gzr=s(bS);$Ue=r(Gzr,"RetriBertConfig"),Gzr.forEach(t),kUe=r(Iwe," (RetriBERT model)"),Iwe.forEach(t),SUe=i(y),Gm=n(y,"LI",{});var Nwe=s(Gm);jre=n(Nwe,"STRONG",{});var Ozr=s(jre);RUe=r(Ozr,"roberta"),Ozr.forEach(t),PUe=r(Nwe," \u2014 "),vS=n(Nwe,"A",{href:!0});var Vzr=s(vS);BUe=r(Vzr,"RobertaConfig"),Vzr.forEach(t),IUe=r(Nwe," (RoBERTa model)"),Nwe.forEach(t),NUe=i(y),Om=n(y,"LI",{});var qwe=s(Om);Dre=n(qwe,"STRONG",{});var Xzr=s(Dre);qUe=r(Xzr,"roformer"),Xzr.forEach(t),jUe=r(qwe," \u2014 "),FS=n(qwe,"A",{href:!0});var zzr=s(FS);DUe=r(zzr,"RoFormerConfig"),zzr.forEach(t),GUe=r(qwe," (RoFormer model)"),qwe.forEach(t),OUe=i(y),Vm=n(y,"LI",{});var jwe=s(Vm);Gre=n(jwe,"STRONG",{});var Wzr=s(Gre);VUe=r(Wzr,"segformer"),Wzr.forEach(t),XUe=r(jwe," \u2014 "),TS=n(jwe,"A",{href:!0});var Qzr=s(TS);zUe=r(Qzr,"SegformerConfig"),Qzr.forEach(t),WUe=r(jwe," (SegFormer model)"),jwe.forEach(t),QUe=i(y),Xm=n(y,"LI",{});var Dwe=s(Xm);Ore=n(Dwe,"STRONG",{});var Hzr=s(Ore);HUe=r(Hzr,"sew"),Hzr.forEach(t),UUe=r(Dwe," \u2014 "),MS=n(Dwe,"A",{href:!0});var Uzr=s(MS);JUe=r(Uzr,"SEWConfig"),Uzr.forEach(t),YUe=r(Dwe," (SEW model)"),Dwe.forEach(t),KUe=i(y),zm=n(y,"LI",{});var Gwe=s(zm);Vre=n(Gwe,"STRONG",{});var Jzr=s(Vre);ZUe=r(Jzr,"sew-d"),Jzr.forEach(t),eJe=r(Gwe," \u2014 "),ES=n(Gwe,"A",{href:!0});var Yzr=s(ES);oJe=r(Yzr,"SEWDConfig"),Yzr.forEach(t),rJe=r(Gwe," (SEW-D model)"),Gwe.forEach(t),tJe=i(y),Wm=n(y,"LI",{});var Owe=s(Wm);Xre=n(Owe,"STRONG",{});var Kzr=s(Xre);aJe=r(Kzr,"speech-encoder-decoder"),Kzr.forEach(t),nJe=r(Owe," \u2014 "),CS=n(Owe,"A",{href:!0});var Zzr=s(CS);sJe=r(Zzr,"SpeechEncoderDecoderConfig"),Zzr.forEach(t),lJe=r(Owe," (Speech Encoder decoder model)"),Owe.forEach(t),iJe=i(y),Qm=n(y,"LI",{});var Vwe=s(Qm);zre=n(Vwe,"STRONG",{});var eWr=s(zre);dJe=r(eWr,"speech_to_text"),eWr.forEach(t),cJe=r(Vwe," \u2014 "),wS=n(Vwe,"A",{href:!0});var oWr=s(wS);fJe=r(oWr,"Speech2TextConfig"),oWr.forEach(t),mJe=r(Vwe," (Speech2Text model)"),Vwe.forEach(t),gJe=i(y),Hm=n(y,"LI",{});var Xwe=s(Hm);Wre=n(Xwe,"STRONG",{});var rWr=s(Wre);hJe=r(rWr,"speech_to_text_2"),rWr.forEach(t),pJe=r(Xwe," \u2014 "),AS=n(Xwe,"A",{href:!0});var tWr=s(AS);_Je=r(tWr,"Speech2Text2Config"),tWr.forEach(t),uJe=r(Xwe," (Speech2Text2 model)"),Xwe.forEach(t),bJe=i(y),Um=n(y,"LI",{});var zwe=s(Um);Qre=n(zwe,"STRONG",{});var aWr=s(Qre);vJe=r(aWr,"splinter"),aWr.forEach(t),FJe=r(zwe," \u2014 "),yS=n(zwe,"A",{href:!0});var nWr=s(yS);TJe=r(nWr,"SplinterConfig"),nWr.forEach(t),MJe=r(zwe," (Splinter model)"),zwe.forEach(t),EJe=i(y),Jm=n(y,"LI",{});var Wwe=s(Jm);Hre=n(Wwe,"STRONG",{});var sWr=s(Hre);CJe=r(sWr,"squeezebert"),sWr.forEach(t),wJe=r(Wwe," \u2014 "),LS=n(Wwe,"A",{href:!0});var lWr=s(LS);AJe=r(lWr,"SqueezeBertConfig"),lWr.forEach(t),yJe=r(Wwe," (SqueezeBERT model)"),Wwe.forEach(t),LJe=i(y),Ym=n(y,"LI",{});var Qwe=s(Ym);Ure=n(Qwe,"STRONG",{});var iWr=s(Ure);xJe=r(iWr,"swin"),iWr.forEach(t),$Je=r(Qwe," \u2014 "),xS=n(Qwe,"A",{href:!0});var dWr=s(xS);kJe=r(dWr,"SwinConfig"),dWr.forEach(t),SJe=r(Qwe," (Swin model)"),Qwe.forEach(t),RJe=i(y),Km=n(y,"LI",{});var Hwe=s(Km);Jre=n(Hwe,"STRONG",{});var cWr=s(Jre);PJe=r(cWr,"t5"),cWr.forEach(t),BJe=r(Hwe," \u2014 "),$S=n(Hwe,"A",{href:!0});var fWr=s($S);IJe=r(fWr,"T5Config"),fWr.forEach(t),NJe=r(Hwe," (T5 model)"),Hwe.forEach(t),qJe=i(y),Zm=n(y,"LI",{});var Uwe=s(Zm);Yre=n(Uwe,"STRONG",{});var mWr=s(Yre);jJe=r(mWr,"tapas"),mWr.forEach(t),DJe=r(Uwe," \u2014 "),kS=n(Uwe,"A",{href:!0});var gWr=s(kS);GJe=r(gWr,"TapasConfig"),gWr.forEach(t),OJe=r(Uwe," (TAPAS model)"),Uwe.forEach(t),VJe=i(y),eg=n(y,"LI",{});var Jwe=s(eg);Kre=n(Jwe,"STRONG",{});var hWr=s(Kre);XJe=r(hWr,"trajectory_transformer"),hWr.forEach(t),zJe=r(Jwe," \u2014 "),SS=n(Jwe,"A",{href:!0});var pWr=s(SS);WJe=r(pWr,"TrajectoryTransformerConfig"),pWr.forEach(t),QJe=r(Jwe," (Trajectory Transformer model)"),Jwe.forEach(t),HJe=i(y),og=n(y,"LI",{});var Ywe=s(og);Zre=n(Ywe,"STRONG",{});var _Wr=s(Zre);UJe=r(_Wr,"transfo-xl"),_Wr.forEach(t),JJe=r(Ywe," \u2014 "),RS=n(Ywe,"A",{href:!0});var uWr=s(RS);YJe=r(uWr,"TransfoXLConfig"),uWr.forEach(t),KJe=r(Ywe," (Transformer-XL model)"),Ywe.forEach(t),ZJe=i(y),rg=n(y,"LI",{});var Kwe=s(rg);ete=n(Kwe,"STRONG",{});var bWr=s(ete);eYe=r(bWr,"trocr"),bWr.forEach(t),oYe=r(Kwe," \u2014 "),PS=n(Kwe,"A",{href:!0});var vWr=s(PS);rYe=r(vWr,"TrOCRConfig"),vWr.forEach(t),tYe=r(Kwe," (TrOCR model)"),Kwe.forEach(t),aYe=i(y),tg=n(y,"LI",{});var Zwe=s(tg);ote=n(Zwe,"STRONG",{});var FWr=s(ote);nYe=r(FWr,"unispeech"),FWr.forEach(t),sYe=r(Zwe," \u2014 "),BS=n(Zwe,"A",{href:!0});var TWr=s(BS);lYe=r(TWr,"UniSpeechConfig"),TWr.forEach(t),iYe=r(Zwe," (UniSpeech model)"),Zwe.forEach(t),dYe=i(y),ag=n(y,"LI",{});var e0e=s(ag);rte=n(e0e,"STRONG",{});var MWr=s(rte);cYe=r(MWr,"unispeech-sat"),MWr.forEach(t),fYe=r(e0e," \u2014 "),IS=n(e0e,"A",{href:!0});var EWr=s(IS);mYe=r(EWr,"UniSpeechSatConfig"),EWr.forEach(t),gYe=r(e0e," (UniSpeechSat model)"),e0e.forEach(t),hYe=i(y),ng=n(y,"LI",{});var o0e=s(ng);tte=n(o0e,"STRONG",{});var CWr=s(tte);pYe=r(CWr,"van"),CWr.forEach(t),_Ye=r(o0e," \u2014 "),NS=n(o0e,"A",{href:!0});var wWr=s(NS);uYe=r(wWr,"VanConfig"),wWr.forEach(t),bYe=r(o0e," (VAN model)"),o0e.forEach(t),vYe=i(y),sg=n(y,"LI",{});var r0e=s(sg);ate=n(r0e,"STRONG",{});var AWr=s(ate);FYe=r(AWr,"vilt"),AWr.forEach(t),TYe=r(r0e," \u2014 "),qS=n(r0e,"A",{href:!0});var yWr=s(qS);MYe=r(yWr,"ViltConfig"),yWr.forEach(t),EYe=r(r0e," (ViLT model)"),r0e.forEach(t),CYe=i(y),lg=n(y,"LI",{});var t0e=s(lg);nte=n(t0e,"STRONG",{});var LWr=s(nte);wYe=r(LWr,"vision-encoder-decoder"),LWr.forEach(t),AYe=r(t0e," \u2014 "),jS=n(t0e,"A",{href:!0});var xWr=s(jS);yYe=r(xWr,"VisionEncoderDecoderConfig"),xWr.forEach(t),LYe=r(t0e," (Vision Encoder decoder model)"),t0e.forEach(t),xYe=i(y),ig=n(y,"LI",{});var a0e=s(ig);ste=n(a0e,"STRONG",{});var $Wr=s(ste);$Ye=r($Wr,"vision-text-dual-encoder"),$Wr.forEach(t),kYe=r(a0e," \u2014 "),DS=n(a0e,"A",{href:!0});var kWr=s(DS);SYe=r(kWr,"VisionTextDualEncoderConfig"),kWr.forEach(t),RYe=r(a0e," (VisionTextDualEncoder model)"),a0e.forEach(t),PYe=i(y),dg=n(y,"LI",{});var n0e=s(dg);lte=n(n0e,"STRONG",{});var SWr=s(lte);BYe=r(SWr,"visual_bert"),SWr.forEach(t),IYe=r(n0e," \u2014 "),GS=n(n0e,"A",{href:!0});var RWr=s(GS);NYe=r(RWr,"VisualBertConfig"),RWr.forEach(t),qYe=r(n0e," (VisualBert model)"),n0e.forEach(t),jYe=i(y),cg=n(y,"LI",{});var s0e=s(cg);ite=n(s0e,"STRONG",{});var PWr=s(ite);DYe=r(PWr,"vit"),PWr.forEach(t),GYe=r(s0e," \u2014 "),OS=n(s0e,"A",{href:!0});var BWr=s(OS);OYe=r(BWr,"ViTConfig"),BWr.forEach(t),VYe=r(s0e," (ViT model)"),s0e.forEach(t),XYe=i(y),fg=n(y,"LI",{});var l0e=s(fg);dte=n(l0e,"STRONG",{});var IWr=s(dte);zYe=r(IWr,"vit_mae"),IWr.forEach(t),WYe=r(l0e," \u2014 "),VS=n(l0e,"A",{href:!0});var NWr=s(VS);QYe=r(NWr,"ViTMAEConfig"),NWr.forEach(t),HYe=r(l0e," (ViTMAE model)"),l0e.forEach(t),UYe=i(y),mg=n(y,"LI",{});var i0e=s(mg);cte=n(i0e,"STRONG",{});var qWr=s(cte);JYe=r(qWr,"wav2vec2"),qWr.forEach(t),YYe=r(i0e," \u2014 "),XS=n(i0e,"A",{href:!0});var jWr=s(XS);KYe=r(jWr,"Wav2Vec2Config"),jWr.forEach(t),ZYe=r(i0e," (Wav2Vec2 model)"),i0e.forEach(t),eKe=i(y),gg=n(y,"LI",{});var d0e=s(gg);fte=n(d0e,"STRONG",{});var DWr=s(fte);oKe=r(DWr,"wav2vec2-conformer"),DWr.forEach(t),rKe=r(d0e," \u2014 "),zS=n(d0e,"A",{href:!0});var GWr=s(zS);tKe=r(GWr,"Wav2Vec2ConformerConfig"),GWr.forEach(t),aKe=r(d0e," (Wav2Vec2-Conformer model)"),d0e.forEach(t),nKe=i(y),hg=n(y,"LI",{});var c0e=s(hg);mte=n(c0e,"STRONG",{});var OWr=s(mte);sKe=r(OWr,"wavlm"),OWr.forEach(t),lKe=r(c0e," \u2014 "),WS=n(c0e,"A",{href:!0});var VWr=s(WS);iKe=r(VWr,"WavLMConfig"),VWr.forEach(t),dKe=r(c0e," (WavLM model)"),c0e.forEach(t),cKe=i(y),pg=n(y,"LI",{});var f0e=s(pg);gte=n(f0e,"STRONG",{});var XWr=s(gte);fKe=r(XWr,"xglm"),XWr.forEach(t),mKe=r(f0e," \u2014 "),QS=n(f0e,"A",{href:!0});var zWr=s(QS);gKe=r(zWr,"XGLMConfig"),zWr.forEach(t),hKe=r(f0e," (XGLM model)"),f0e.forEach(t),pKe=i(y),_g=n(y,"LI",{});var m0e=s(_g);hte=n(m0e,"STRONG",{});var WWr=s(hte);_Ke=r(WWr,"xlm"),WWr.forEach(t),uKe=r(m0e," \u2014 "),HS=n(m0e,"A",{href:!0});var QWr=s(HS);bKe=r(QWr,"XLMConfig"),QWr.forEach(t),vKe=r(m0e," (XLM model)"),m0e.forEach(t),FKe=i(y),ug=n(y,"LI",{});var g0e=s(ug);pte=n(g0e,"STRONG",{});var HWr=s(pte);TKe=r(HWr,"xlm-prophetnet"),HWr.forEach(t),MKe=r(g0e," \u2014 "),US=n(g0e,"A",{href:!0});var UWr=s(US);EKe=r(UWr,"XLMProphetNetConfig"),UWr.forEach(t),CKe=r(g0e," (XLMProphetNet model)"),g0e.forEach(t),wKe=i(y),bg=n(y,"LI",{});var h0e=s(bg);_te=n(h0e,"STRONG",{});var JWr=s(_te);AKe=r(JWr,"xlm-roberta"),JWr.forEach(t),yKe=r(h0e," \u2014 "),JS=n(h0e,"A",{href:!0});var YWr=s(JS);LKe=r(YWr,"XLMRobertaConfig"),YWr.forEach(t),xKe=r(h0e," (XLM-RoBERTa model)"),h0e.forEach(t),$Ke=i(y),vg=n(y,"LI",{});var p0e=s(vg);ute=n(p0e,"STRONG",{});var KWr=s(ute);kKe=r(KWr,"xlm-roberta-xl"),KWr.forEach(t),SKe=r(p0e," \u2014 "),YS=n(p0e,"A",{href:!0});var ZWr=s(YS);RKe=r(ZWr,"XLMRobertaXLConfig"),ZWr.forEach(t),PKe=r(p0e," (XLM-RoBERTa-XL model)"),p0e.forEach(t),BKe=i(y),Fg=n(y,"LI",{});var _0e=s(Fg);bte=n(_0e,"STRONG",{});var eQr=s(bte);IKe=r(eQr,"xlnet"),eQr.forEach(t),NKe=r(_0e," \u2014 "),KS=n(_0e,"A",{href:!0});var oQr=s(KS);qKe=r(oQr,"XLNetConfig"),oQr.forEach(t),jKe=r(_0e," (XLNet model)"),_0e.forEach(t),DKe=i(y),Tg=n(y,"LI",{});var u0e=s(Tg);vte=n(u0e,"STRONG",{});var rQr=s(vte);GKe=r(rQr,"yolos"),rQr.forEach(t),OKe=r(u0e," \u2014 "),ZS=n(u0e,"A",{href:!0});var tQr=s(ZS);VKe=r(tQr,"YolosConfig"),tQr.forEach(t),XKe=r(u0e," (YOLOS model)"),u0e.forEach(t),zKe=i(y),Mg=n(y,"LI",{});var b0e=s(Mg);Fte=n(b0e,"STRONG",{});var aQr=s(Fte);WKe=r(aQr,"yoso"),aQr.forEach(t),QKe=r(b0e," \u2014 "),eR=n(b0e,"A",{href:!0});var nQr=s(eR);HKe=r(nQr,"YosoConfig"),nQr.forEach(t),UKe=r(b0e," (YOSO model)"),b0e.forEach(t),y.forEach(t),JKe=i(ot),T(Eg.$$.fragment,ot),ot.forEach(t),YKe=i(et),Cg=n(et,"DIV",{class:!0});var cDe=s(Cg);T(Iy.$$.fragment,cDe),KKe=i(cDe),Tte=n(cDe,"P",{});var sQr=s(Tte);ZKe=r(sQr,"Register a new configuration for this class."),sQr.forEach(t),cDe.forEach(t),et.forEach(t),gqe=i(f),Ti=n(f,"H2",{class:!0});var fDe=s(Ti);wg=n(fDe,"A",{id:!0,class:!0,href:!0});var lQr=s(wg);Mte=n(lQr,"SPAN",{});var iQr=s(Mte);T(Ny.$$.fragment,iQr),iQr.forEach(t),lQr.forEach(t),eZe=i(fDe),Ete=n(fDe,"SPAN",{});var dQr=s(Ete);oZe=r(dQr,"AutoTokenizer"),dQr.forEach(t),fDe.forEach(t),hqe=i(f),wo=n(f,"DIV",{class:!0});var Ns=s(wo);T(qy.$$.fragment,Ns),rZe=i(Ns),jy=n(Ns,"P",{});var mDe=s(jy);tZe=r(mDe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),oR=n(mDe,"A",{href:!0});var cQr=s(oR);aZe=r(cQr,"AutoTokenizer.from_pretrained()"),cQr.forEach(t),nZe=r(mDe," class method."),mDe.forEach(t),sZe=i(Ns),Dy=n(Ns,"P",{});var gDe=s(Dy);lZe=r(gDe,"This class cannot be instantiated directly using "),Cte=n(gDe,"CODE",{});var fQr=s(Cte);iZe=r(fQr,"__init__()"),fQr.forEach(t),dZe=r(gDe," (throws an error)."),gDe.forEach(t),cZe=i(Ns),Cr=n(Ns,"DIV",{class:!0});var qs=s(Cr);T(Gy.$$.fragment,qs),fZe=i(qs),wte=n(qs,"P",{});var mQr=s(wte);mZe=r(mQr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),mQr.forEach(t),gZe=i(qs),Aa=n(qs,"P",{});var k0=s(Aa);hZe=r(k0,"The tokenizer class to instantiate is selected based on the "),Ate=n(k0,"CODE",{});var gQr=s(Ate);pZe=r(gQr,"model_type"),gQr.forEach(t),_Ze=r(k0,` property of the config object (either
passed as an argument or loaded from `),yte=n(k0,"CODE",{});var hQr=s(yte);uZe=r(hQr,"pretrained_model_name_or_path"),hQr.forEach(t),bZe=r(k0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lte=n(k0,"CODE",{});var pQr=s(Lte);vZe=r(pQr,"pretrained_model_name_or_path"),pQr.forEach(t),FZe=r(k0,":"),k0.forEach(t),TZe=i(qs),k=n(qs,"UL",{});var S=s(k);Sn=n(S,"LI",{});var Ox=s(Sn);xte=n(Ox,"STRONG",{});var _Qr=s(xte);MZe=r(_Qr,"albert"),_Qr.forEach(t),EZe=r(Ox," \u2014 "),rR=n(Ox,"A",{href:!0});var uQr=s(rR);CZe=r(uQr,"AlbertTokenizer"),uQr.forEach(t),wZe=r(Ox," or "),tR=n(Ox,"A",{href:!0});var bQr=s(tR);AZe=r(bQr,"AlbertTokenizerFast"),bQr.forEach(t),yZe=r(Ox," (ALBERT model)"),Ox.forEach(t),LZe=i(S),Rn=n(S,"LI",{});var Vx=s(Rn);$te=n(Vx,"STRONG",{});var vQr=s($te);xZe=r(vQr,"bart"),vQr.forEach(t),$Ze=r(Vx," \u2014 "),aR=n(Vx,"A",{href:!0});var FQr=s(aR);kZe=r(FQr,"BartTokenizer"),FQr.forEach(t),SZe=r(Vx," or "),nR=n(Vx,"A",{href:!0});var TQr=s(nR);RZe=r(TQr,"BartTokenizerFast"),TQr.forEach(t),PZe=r(Vx," (BART model)"),Vx.forEach(t),BZe=i(S),Pn=n(S,"LI",{});var Xx=s(Pn);kte=n(Xx,"STRONG",{});var MQr=s(kte);IZe=r(MQr,"barthez"),MQr.forEach(t),NZe=r(Xx," \u2014 "),sR=n(Xx,"A",{href:!0});var EQr=s(sR);qZe=r(EQr,"BarthezTokenizer"),EQr.forEach(t),jZe=r(Xx," or "),lR=n(Xx,"A",{href:!0});var CQr=s(lR);DZe=r(CQr,"BarthezTokenizerFast"),CQr.forEach(t),GZe=r(Xx," (BARThez model)"),Xx.forEach(t),OZe=i(S),Ag=n(S,"LI",{});var v0e=s(Ag);Ste=n(v0e,"STRONG",{});var wQr=s(Ste);VZe=r(wQr,"bartpho"),wQr.forEach(t),XZe=r(v0e," \u2014 "),iR=n(v0e,"A",{href:!0});var AQr=s(iR);zZe=r(AQr,"BartphoTokenizer"),AQr.forEach(t),WZe=r(v0e," (BARTpho model)"),v0e.forEach(t),QZe=i(S),Bn=n(S,"LI",{});var zx=s(Bn);Rte=n(zx,"STRONG",{});var yQr=s(Rte);HZe=r(yQr,"bert"),yQr.forEach(t),UZe=r(zx," \u2014 "),dR=n(zx,"A",{href:!0});var LQr=s(dR);JZe=r(LQr,"BertTokenizer"),LQr.forEach(t),YZe=r(zx," or "),cR=n(zx,"A",{href:!0});var xQr=s(cR);KZe=r(xQr,"BertTokenizerFast"),xQr.forEach(t),ZZe=r(zx," (BERT model)"),zx.forEach(t),eeo=i(S),yg=n(S,"LI",{});var F0e=s(yg);Pte=n(F0e,"STRONG",{});var $Qr=s(Pte);oeo=r($Qr,"bert-generation"),$Qr.forEach(t),reo=r(F0e," \u2014 "),fR=n(F0e,"A",{href:!0});var kQr=s(fR);teo=r(kQr,"BertGenerationTokenizer"),kQr.forEach(t),aeo=r(F0e," (Bert Generation model)"),F0e.forEach(t),neo=i(S),Lg=n(S,"LI",{});var T0e=s(Lg);Bte=n(T0e,"STRONG",{});var SQr=s(Bte);seo=r(SQr,"bert-japanese"),SQr.forEach(t),leo=r(T0e," \u2014 "),mR=n(T0e,"A",{href:!0});var RQr=s(mR);ieo=r(RQr,"BertJapaneseTokenizer"),RQr.forEach(t),deo=r(T0e," (BertJapanese model)"),T0e.forEach(t),ceo=i(S),xg=n(S,"LI",{});var M0e=s(xg);Ite=n(M0e,"STRONG",{});var PQr=s(Ite);feo=r(PQr,"bertweet"),PQr.forEach(t),meo=r(M0e," \u2014 "),gR=n(M0e,"A",{href:!0});var BQr=s(gR);geo=r(BQr,"BertweetTokenizer"),BQr.forEach(t),heo=r(M0e," (Bertweet model)"),M0e.forEach(t),peo=i(S),In=n(S,"LI",{});var Wx=s(In);Nte=n(Wx,"STRONG",{});var IQr=s(Nte);_eo=r(IQr,"big_bird"),IQr.forEach(t),ueo=r(Wx," \u2014 "),hR=n(Wx,"A",{href:!0});var NQr=s(hR);beo=r(NQr,"BigBirdTokenizer"),NQr.forEach(t),veo=r(Wx," or "),pR=n(Wx,"A",{href:!0});var qQr=s(pR);Feo=r(qQr,"BigBirdTokenizerFast"),qQr.forEach(t),Teo=r(Wx," (BigBird model)"),Wx.forEach(t),Meo=i(S),Nn=n(S,"LI",{});var Qx=s(Nn);qte=n(Qx,"STRONG",{});var jQr=s(qte);Eeo=r(jQr,"bigbird_pegasus"),jQr.forEach(t),Ceo=r(Qx," \u2014 "),_R=n(Qx,"A",{href:!0});var DQr=s(_R);weo=r(DQr,"PegasusTokenizer"),DQr.forEach(t),Aeo=r(Qx," or "),uR=n(Qx,"A",{href:!0});var GQr=s(uR);yeo=r(GQr,"PegasusTokenizerFast"),GQr.forEach(t),Leo=r(Qx," (BigBirdPegasus model)"),Qx.forEach(t),xeo=i(S),qn=n(S,"LI",{});var Hx=s(qn);jte=n(Hx,"STRONG",{});var OQr=s(jte);$eo=r(OQr,"blenderbot"),OQr.forEach(t),keo=r(Hx," \u2014 "),bR=n(Hx,"A",{href:!0});var VQr=s(bR);Seo=r(VQr,"BlenderbotTokenizer"),VQr.forEach(t),Reo=r(Hx," or "),vR=n(Hx,"A",{href:!0});var XQr=s(vR);Peo=r(XQr,"BlenderbotTokenizerFast"),XQr.forEach(t),Beo=r(Hx," (Blenderbot model)"),Hx.forEach(t),Ieo=i(S),$g=n(S,"LI",{});var E0e=s($g);Dte=n(E0e,"STRONG",{});var zQr=s(Dte);Neo=r(zQr,"blenderbot-small"),zQr.forEach(t),qeo=r(E0e," \u2014 "),FR=n(E0e,"A",{href:!0});var WQr=s(FR);jeo=r(WQr,"BlenderbotSmallTokenizer"),WQr.forEach(t),Deo=r(E0e," (BlenderbotSmall model)"),E0e.forEach(t),Geo=i(S),kg=n(S,"LI",{});var C0e=s(kg);Gte=n(C0e,"STRONG",{});var QQr=s(Gte);Oeo=r(QQr,"byt5"),QQr.forEach(t),Veo=r(C0e," \u2014 "),TR=n(C0e,"A",{href:!0});var HQr=s(TR);Xeo=r(HQr,"ByT5Tokenizer"),HQr.forEach(t),zeo=r(C0e," (ByT5 model)"),C0e.forEach(t),Weo=i(S),jn=n(S,"LI",{});var Ux=s(jn);Ote=n(Ux,"STRONG",{});var UQr=s(Ote);Qeo=r(UQr,"camembert"),UQr.forEach(t),Heo=r(Ux," \u2014 "),MR=n(Ux,"A",{href:!0});var JQr=s(MR);Ueo=r(JQr,"CamembertTokenizer"),JQr.forEach(t),Jeo=r(Ux," or "),ER=n(Ux,"A",{href:!0});var YQr=s(ER);Yeo=r(YQr,"CamembertTokenizerFast"),YQr.forEach(t),Keo=r(Ux," (CamemBERT model)"),Ux.forEach(t),Zeo=i(S),Sg=n(S,"LI",{});var w0e=s(Sg);Vte=n(w0e,"STRONG",{});var KQr=s(Vte);eoo=r(KQr,"canine"),KQr.forEach(t),ooo=r(w0e," \u2014 "),CR=n(w0e,"A",{href:!0});var ZQr=s(CR);roo=r(ZQr,"CanineTokenizer"),ZQr.forEach(t),too=r(w0e," (Canine model)"),w0e.forEach(t),aoo=i(S),Dn=n(S,"LI",{});var Jx=s(Dn);Xte=n(Jx,"STRONG",{});var eHr=s(Xte);noo=r(eHr,"clip"),eHr.forEach(t),soo=r(Jx," \u2014 "),wR=n(Jx,"A",{href:!0});var oHr=s(wR);loo=r(oHr,"CLIPTokenizer"),oHr.forEach(t),ioo=r(Jx," or "),AR=n(Jx,"A",{href:!0});var rHr=s(AR);doo=r(rHr,"CLIPTokenizerFast"),rHr.forEach(t),coo=r(Jx," (CLIP model)"),Jx.forEach(t),foo=i(S),Gn=n(S,"LI",{});var Yx=s(Gn);zte=n(Yx,"STRONG",{});var tHr=s(zte);moo=r(tHr,"convbert"),tHr.forEach(t),goo=r(Yx," \u2014 "),yR=n(Yx,"A",{href:!0});var aHr=s(yR);hoo=r(aHr,"ConvBertTokenizer"),aHr.forEach(t),poo=r(Yx," or "),LR=n(Yx,"A",{href:!0});var nHr=s(LR);_oo=r(nHr,"ConvBertTokenizerFast"),nHr.forEach(t),uoo=r(Yx," (ConvBERT model)"),Yx.forEach(t),boo=i(S),On=n(S,"LI",{});var Kx=s(On);Wte=n(Kx,"STRONG",{});var sHr=s(Wte);voo=r(sHr,"cpm"),sHr.forEach(t),Foo=r(Kx," \u2014 "),xR=n(Kx,"A",{href:!0});var lHr=s(xR);Too=r(lHr,"CpmTokenizer"),lHr.forEach(t),Moo=r(Kx," or "),$R=n(Kx,"A",{href:!0});var iHr=s($R);Eoo=r(iHr,"CpmTokenizerFast"),iHr.forEach(t),Coo=r(Kx," (CPM model)"),Kx.forEach(t),woo=i(S),Rg=n(S,"LI",{});var A0e=s(Rg);Qte=n(A0e,"STRONG",{});var dHr=s(Qte);Aoo=r(dHr,"ctrl"),dHr.forEach(t),yoo=r(A0e," \u2014 "),kR=n(A0e,"A",{href:!0});var cHr=s(kR);Loo=r(cHr,"CTRLTokenizer"),cHr.forEach(t),xoo=r(A0e," (CTRL model)"),A0e.forEach(t),$oo=i(S),Vn=n(S,"LI",{});var Zx=s(Vn);Hte=n(Zx,"STRONG",{});var fHr=s(Hte);koo=r(fHr,"data2vec-text"),fHr.forEach(t),Soo=r(Zx," \u2014 "),SR=n(Zx,"A",{href:!0});var mHr=s(SR);Roo=r(mHr,"RobertaTokenizer"),mHr.forEach(t),Poo=r(Zx," or "),RR=n(Zx,"A",{href:!0});var gHr=s(RR);Boo=r(gHr,"RobertaTokenizerFast"),gHr.forEach(t),Ioo=r(Zx," (Data2VecText model)"),Zx.forEach(t),Noo=i(S),Xn=n(S,"LI",{});var e$=s(Xn);Ute=n(e$,"STRONG",{});var hHr=s(Ute);qoo=r(hHr,"deberta"),hHr.forEach(t),joo=r(e$," \u2014 "),PR=n(e$,"A",{href:!0});var pHr=s(PR);Doo=r(pHr,"DebertaTokenizer"),pHr.forEach(t),Goo=r(e$," or "),BR=n(e$,"A",{href:!0});var _Hr=s(BR);Ooo=r(_Hr,"DebertaTokenizerFast"),_Hr.forEach(t),Voo=r(e$," (DeBERTa model)"),e$.forEach(t),Xoo=i(S),zn=n(S,"LI",{});var o$=s(zn);Jte=n(o$,"STRONG",{});var uHr=s(Jte);zoo=r(uHr,"deberta-v2"),uHr.forEach(t),Woo=r(o$," \u2014 "),IR=n(o$,"A",{href:!0});var bHr=s(IR);Qoo=r(bHr,"DebertaV2Tokenizer"),bHr.forEach(t),Hoo=r(o$," or "),NR=n(o$,"A",{href:!0});var vHr=s(NR);Uoo=r(vHr,"DebertaV2TokenizerFast"),vHr.forEach(t),Joo=r(o$," (DeBERTa-v2 model)"),o$.forEach(t),Yoo=i(S),Wn=n(S,"LI",{});var r$=s(Wn);Yte=n(r$,"STRONG",{});var FHr=s(Yte);Koo=r(FHr,"distilbert"),FHr.forEach(t),Zoo=r(r$," \u2014 "),qR=n(r$,"A",{href:!0});var THr=s(qR);ero=r(THr,"DistilBertTokenizer"),THr.forEach(t),oro=r(r$," or "),jR=n(r$,"A",{href:!0});var MHr=s(jR);rro=r(MHr,"DistilBertTokenizerFast"),MHr.forEach(t),tro=r(r$," (DistilBERT model)"),r$.forEach(t),aro=i(S),Qn=n(S,"LI",{});var t$=s(Qn);Kte=n(t$,"STRONG",{});var EHr=s(Kte);nro=r(EHr,"dpr"),EHr.forEach(t),sro=r(t$," \u2014 "),DR=n(t$,"A",{href:!0});var CHr=s(DR);lro=r(CHr,"DPRQuestionEncoderTokenizer"),CHr.forEach(t),iro=r(t$," or "),GR=n(t$,"A",{href:!0});var wHr=s(GR);dro=r(wHr,"DPRQuestionEncoderTokenizerFast"),wHr.forEach(t),cro=r(t$," (DPR model)"),t$.forEach(t),fro=i(S),Hn=n(S,"LI",{});var a$=s(Hn);Zte=n(a$,"STRONG",{});var AHr=s(Zte);mro=r(AHr,"electra"),AHr.forEach(t),gro=r(a$," \u2014 "),OR=n(a$,"A",{href:!0});var yHr=s(OR);hro=r(yHr,"ElectraTokenizer"),yHr.forEach(t),pro=r(a$," or "),VR=n(a$,"A",{href:!0});var LHr=s(VR);_ro=r(LHr,"ElectraTokenizerFast"),LHr.forEach(t),uro=r(a$," (ELECTRA model)"),a$.forEach(t),bro=i(S),Pg=n(S,"LI",{});var y0e=s(Pg);eae=n(y0e,"STRONG",{});var xHr=s(eae);vro=r(xHr,"flaubert"),xHr.forEach(t),Fro=r(y0e," \u2014 "),XR=n(y0e,"A",{href:!0});var $Hr=s(XR);Tro=r($Hr,"FlaubertTokenizer"),$Hr.forEach(t),Mro=r(y0e," (FlauBERT model)"),y0e.forEach(t),Ero=i(S),Un=n(S,"LI",{});var n$=s(Un);oae=n(n$,"STRONG",{});var kHr=s(oae);Cro=r(kHr,"fnet"),kHr.forEach(t),wro=r(n$," \u2014 "),zR=n(n$,"A",{href:!0});var SHr=s(zR);Aro=r(SHr,"FNetTokenizer"),SHr.forEach(t),yro=r(n$," or "),WR=n(n$,"A",{href:!0});var RHr=s(WR);Lro=r(RHr,"FNetTokenizerFast"),RHr.forEach(t),xro=r(n$," (FNet model)"),n$.forEach(t),$ro=i(S),Bg=n(S,"LI",{});var L0e=s(Bg);rae=n(L0e,"STRONG",{});var PHr=s(rae);kro=r(PHr,"fsmt"),PHr.forEach(t),Sro=r(L0e," \u2014 "),QR=n(L0e,"A",{href:!0});var BHr=s(QR);Rro=r(BHr,"FSMTTokenizer"),BHr.forEach(t),Pro=r(L0e," (FairSeq Machine-Translation model)"),L0e.forEach(t),Bro=i(S),Jn=n(S,"LI",{});var s$=s(Jn);tae=n(s$,"STRONG",{});var IHr=s(tae);Iro=r(IHr,"funnel"),IHr.forEach(t),Nro=r(s$," \u2014 "),HR=n(s$,"A",{href:!0});var NHr=s(HR);qro=r(NHr,"FunnelTokenizer"),NHr.forEach(t),jro=r(s$," or "),UR=n(s$,"A",{href:!0});var qHr=s(UR);Dro=r(qHr,"FunnelTokenizerFast"),qHr.forEach(t),Gro=r(s$," (Funnel Transformer model)"),s$.forEach(t),Oro=i(S),Yn=n(S,"LI",{});var l$=s(Yn);aae=n(l$,"STRONG",{});var jHr=s(aae);Vro=r(jHr,"gpt2"),jHr.forEach(t),Xro=r(l$," \u2014 "),JR=n(l$,"A",{href:!0});var DHr=s(JR);zro=r(DHr,"GPT2Tokenizer"),DHr.forEach(t),Wro=r(l$," or "),YR=n(l$,"A",{href:!0});var GHr=s(YR);Qro=r(GHr,"GPT2TokenizerFast"),GHr.forEach(t),Hro=r(l$," (OpenAI GPT-2 model)"),l$.forEach(t),Uro=i(S),Kn=n(S,"LI",{});var i$=s(Kn);nae=n(i$,"STRONG",{});var OHr=s(nae);Jro=r(OHr,"gpt_neo"),OHr.forEach(t),Yro=r(i$," \u2014 "),KR=n(i$,"A",{href:!0});var VHr=s(KR);Kro=r(VHr,"GPT2Tokenizer"),VHr.forEach(t),Zro=r(i$," or "),ZR=n(i$,"A",{href:!0});var XHr=s(ZR);eto=r(XHr,"GPT2TokenizerFast"),XHr.forEach(t),oto=r(i$," (GPT Neo model)"),i$.forEach(t),rto=i(S),Ig=n(S,"LI",{});var x0e=s(Ig);sae=n(x0e,"STRONG",{});var zHr=s(sae);tto=r(zHr,"gpt_neox"),zHr.forEach(t),ato=r(x0e," \u2014 "),eP=n(x0e,"A",{href:!0});var WHr=s(eP);nto=r(WHr,"GPTNeoXTokenizerFast"),WHr.forEach(t),sto=r(x0e," (GPT NeoX model)"),x0e.forEach(t),lto=i(S),Zn=n(S,"LI",{});var d$=s(Zn);lae=n(d$,"STRONG",{});var QHr=s(lae);ito=r(QHr,"gptj"),QHr.forEach(t),dto=r(d$," \u2014 "),oP=n(d$,"A",{href:!0});var HHr=s(oP);cto=r(HHr,"GPT2Tokenizer"),HHr.forEach(t),fto=r(d$," or "),rP=n(d$,"A",{href:!0});var UHr=s(rP);mto=r(UHr,"GPT2TokenizerFast"),UHr.forEach(t),gto=r(d$," (GPT-J model)"),d$.forEach(t),hto=i(S),es=n(S,"LI",{});var c$=s(es);iae=n(c$,"STRONG",{});var JHr=s(iae);pto=r(JHr,"herbert"),JHr.forEach(t),_to=r(c$," \u2014 "),tP=n(c$,"A",{href:!0});var YHr=s(tP);uto=r(YHr,"HerbertTokenizer"),YHr.forEach(t),bto=r(c$," or "),aP=n(c$,"A",{href:!0});var KHr=s(aP);vto=r(KHr,"HerbertTokenizerFast"),KHr.forEach(t),Fto=r(c$," (HerBERT model)"),c$.forEach(t),Tto=i(S),Ng=n(S,"LI",{});var $0e=s(Ng);dae=n($0e,"STRONG",{});var ZHr=s(dae);Mto=r(ZHr,"hubert"),ZHr.forEach(t),Eto=r($0e," \u2014 "),nP=n($0e,"A",{href:!0});var eUr=s(nP);Cto=r(eUr,"Wav2Vec2CTCTokenizer"),eUr.forEach(t),wto=r($0e," (Hubert model)"),$0e.forEach(t),Ato=i(S),os=n(S,"LI",{});var f$=s(os);cae=n(f$,"STRONG",{});var oUr=s(cae);yto=r(oUr,"ibert"),oUr.forEach(t),Lto=r(f$," \u2014 "),sP=n(f$,"A",{href:!0});var rUr=s(sP);xto=r(rUr,"RobertaTokenizer"),rUr.forEach(t),$to=r(f$," or "),lP=n(f$,"A",{href:!0});var tUr=s(lP);kto=r(tUr,"RobertaTokenizerFast"),tUr.forEach(t),Sto=r(f$," (I-BERT model)"),f$.forEach(t),Rto=i(S),rs=n(S,"LI",{});var m$=s(rs);fae=n(m$,"STRONG",{});var aUr=s(fae);Pto=r(aUr,"layoutlm"),aUr.forEach(t),Bto=r(m$," \u2014 "),iP=n(m$,"A",{href:!0});var nUr=s(iP);Ito=r(nUr,"LayoutLMTokenizer"),nUr.forEach(t),Nto=r(m$," or "),dP=n(m$,"A",{href:!0});var sUr=s(dP);qto=r(sUr,"LayoutLMTokenizerFast"),sUr.forEach(t),jto=r(m$," (LayoutLM model)"),m$.forEach(t),Dto=i(S),ts=n(S,"LI",{});var g$=s(ts);mae=n(g$,"STRONG",{});var lUr=s(mae);Gto=r(lUr,"layoutlmv2"),lUr.forEach(t),Oto=r(g$," \u2014 "),cP=n(g$,"A",{href:!0});var iUr=s(cP);Vto=r(iUr,"LayoutLMv2Tokenizer"),iUr.forEach(t),Xto=r(g$," or "),fP=n(g$,"A",{href:!0});var dUr=s(fP);zto=r(dUr,"LayoutLMv2TokenizerFast"),dUr.forEach(t),Wto=r(g$," (LayoutLMv2 model)"),g$.forEach(t),Qto=i(S),as=n(S,"LI",{});var h$=s(as);gae=n(h$,"STRONG",{});var cUr=s(gae);Hto=r(cUr,"layoutlmv3"),cUr.forEach(t),Uto=r(h$," \u2014 "),mP=n(h$,"A",{href:!0});var fUr=s(mP);Jto=r(fUr,"LayoutLMv3Tokenizer"),fUr.forEach(t),Yto=r(h$," or "),gP=n(h$,"A",{href:!0});var mUr=s(gP);Kto=r(mUr,"LayoutLMv3TokenizerFast"),mUr.forEach(t),Zto=r(h$," (LayoutLMv3 model)"),h$.forEach(t),eao=i(S),ns=n(S,"LI",{});var p$=s(ns);hae=n(p$,"STRONG",{});var gUr=s(hae);oao=r(gUr,"layoutxlm"),gUr.forEach(t),rao=r(p$," \u2014 "),hP=n(p$,"A",{href:!0});var hUr=s(hP);tao=r(hUr,"LayoutXLMTokenizer"),hUr.forEach(t),aao=r(p$," or "),pP=n(p$,"A",{href:!0});var pUr=s(pP);nao=r(pUr,"LayoutXLMTokenizerFast"),pUr.forEach(t),sao=r(p$," (LayoutXLM model)"),p$.forEach(t),lao=i(S),ss=n(S,"LI",{});var _$=s(ss);pae=n(_$,"STRONG",{});var _Ur=s(pae);iao=r(_Ur,"led"),_Ur.forEach(t),dao=r(_$," \u2014 "),_P=n(_$,"A",{href:!0});var uUr=s(_P);cao=r(uUr,"LEDTokenizer"),uUr.forEach(t),fao=r(_$," or "),uP=n(_$,"A",{href:!0});var bUr=s(uP);mao=r(bUr,"LEDTokenizerFast"),bUr.forEach(t),gao=r(_$," (LED model)"),_$.forEach(t),hao=i(S),ls=n(S,"LI",{});var u$=s(ls);_ae=n(u$,"STRONG",{});var vUr=s(_ae);pao=r(vUr,"longformer"),vUr.forEach(t),_ao=r(u$," \u2014 "),bP=n(u$,"A",{href:!0});var FUr=s(bP);uao=r(FUr,"LongformerTokenizer"),FUr.forEach(t),bao=r(u$," or "),vP=n(u$,"A",{href:!0});var TUr=s(vP);vao=r(TUr,"LongformerTokenizerFast"),TUr.forEach(t),Fao=r(u$," (Longformer model)"),u$.forEach(t),Tao=i(S),qg=n(S,"LI",{});var k0e=s(qg);uae=n(k0e,"STRONG",{});var MUr=s(uae);Mao=r(MUr,"luke"),MUr.forEach(t),Eao=r(k0e," \u2014 "),FP=n(k0e,"A",{href:!0});var EUr=s(FP);Cao=r(EUr,"LukeTokenizer"),EUr.forEach(t),wao=r(k0e," (LUKE model)"),k0e.forEach(t),Aao=i(S),is=n(S,"LI",{});var b$=s(is);bae=n(b$,"STRONG",{});var CUr=s(bae);yao=r(CUr,"lxmert"),CUr.forEach(t),Lao=r(b$," \u2014 "),TP=n(b$,"A",{href:!0});var wUr=s(TP);xao=r(wUr,"LxmertTokenizer"),wUr.forEach(t),$ao=r(b$," or "),MP=n(b$,"A",{href:!0});var AUr=s(MP);kao=r(AUr,"LxmertTokenizerFast"),AUr.forEach(t),Sao=r(b$," (LXMERT model)"),b$.forEach(t),Rao=i(S),jg=n(S,"LI",{});var S0e=s(jg);vae=n(S0e,"STRONG",{});var yUr=s(vae);Pao=r(yUr,"m2m_100"),yUr.forEach(t),Bao=r(S0e," \u2014 "),EP=n(S0e,"A",{href:!0});var LUr=s(EP);Iao=r(LUr,"M2M100Tokenizer"),LUr.forEach(t),Nao=r(S0e," (M2M100 model)"),S0e.forEach(t),qao=i(S),Dg=n(S,"LI",{});var R0e=s(Dg);Fae=n(R0e,"STRONG",{});var xUr=s(Fae);jao=r(xUr,"marian"),xUr.forEach(t),Dao=r(R0e," \u2014 "),CP=n(R0e,"A",{href:!0});var $Ur=s(CP);Gao=r($Ur,"MarianTokenizer"),$Ur.forEach(t),Oao=r(R0e," (Marian model)"),R0e.forEach(t),Vao=i(S),ds=n(S,"LI",{});var v$=s(ds);Tae=n(v$,"STRONG",{});var kUr=s(Tae);Xao=r(kUr,"mbart"),kUr.forEach(t),zao=r(v$," \u2014 "),wP=n(v$,"A",{href:!0});var SUr=s(wP);Wao=r(SUr,"MBartTokenizer"),SUr.forEach(t),Qao=r(v$," or "),AP=n(v$,"A",{href:!0});var RUr=s(AP);Hao=r(RUr,"MBartTokenizerFast"),RUr.forEach(t),Uao=r(v$," (mBART model)"),v$.forEach(t),Jao=i(S),cs=n(S,"LI",{});var F$=s(cs);Mae=n(F$,"STRONG",{});var PUr=s(Mae);Yao=r(PUr,"mbart50"),PUr.forEach(t),Kao=r(F$," \u2014 "),yP=n(F$,"A",{href:!0});var BUr=s(yP);Zao=r(BUr,"MBart50Tokenizer"),BUr.forEach(t),eno=r(F$," or "),LP=n(F$,"A",{href:!0});var IUr=s(LP);ono=r(IUr,"MBart50TokenizerFast"),IUr.forEach(t),rno=r(F$," (mBART-50 model)"),F$.forEach(t),tno=i(S),fs=n(S,"LI",{});var T$=s(fs);Eae=n(T$,"STRONG",{});var NUr=s(Eae);ano=r(NUr,"megatron-bert"),NUr.forEach(t),nno=r(T$," \u2014 "),xP=n(T$,"A",{href:!0});var qUr=s(xP);sno=r(qUr,"BertTokenizer"),qUr.forEach(t),lno=r(T$," or "),$P=n(T$,"A",{href:!0});var jUr=s($P);ino=r(jUr,"BertTokenizerFast"),jUr.forEach(t),dno=r(T$," (MegatronBert model)"),T$.forEach(t),cno=i(S),Gg=n(S,"LI",{});var P0e=s(Gg);Cae=n(P0e,"STRONG",{});var DUr=s(Cae);fno=r(DUr,"mluke"),DUr.forEach(t),mno=r(P0e," \u2014 "),kP=n(P0e,"A",{href:!0});var GUr=s(kP);gno=r(GUr,"MLukeTokenizer"),GUr.forEach(t),hno=r(P0e," (mLUKE model)"),P0e.forEach(t),pno=i(S),ms=n(S,"LI",{});var M$=s(ms);wae=n(M$,"STRONG",{});var OUr=s(wae);_no=r(OUr,"mobilebert"),OUr.forEach(t),uno=r(M$," \u2014 "),SP=n(M$,"A",{href:!0});var VUr=s(SP);bno=r(VUr,"MobileBertTokenizer"),VUr.forEach(t),vno=r(M$," or "),RP=n(M$,"A",{href:!0});var XUr=s(RP);Fno=r(XUr,"MobileBertTokenizerFast"),XUr.forEach(t),Tno=r(M$," (MobileBERT model)"),M$.forEach(t),Mno=i(S),gs=n(S,"LI",{});var E$=s(gs);Aae=n(E$,"STRONG",{});var zUr=s(Aae);Eno=r(zUr,"mpnet"),zUr.forEach(t),Cno=r(E$," \u2014 "),PP=n(E$,"A",{href:!0});var WUr=s(PP);wno=r(WUr,"MPNetTokenizer"),WUr.forEach(t),Ano=r(E$," or "),BP=n(E$,"A",{href:!0});var QUr=s(BP);yno=r(QUr,"MPNetTokenizerFast"),QUr.forEach(t),Lno=r(E$," (MPNet model)"),E$.forEach(t),xno=i(S),hs=n(S,"LI",{});var C$=s(hs);yae=n(C$,"STRONG",{});var HUr=s(yae);$no=r(HUr,"mt5"),HUr.forEach(t),kno=r(C$," \u2014 "),IP=n(C$,"A",{href:!0});var UUr=s(IP);Sno=r(UUr,"MT5Tokenizer"),UUr.forEach(t),Rno=r(C$," or "),NP=n(C$,"A",{href:!0});var JUr=s(NP);Pno=r(JUr,"MT5TokenizerFast"),JUr.forEach(t),Bno=r(C$," (mT5 model)"),C$.forEach(t),Ino=i(S),ps=n(S,"LI",{});var w$=s(ps);Lae=n(w$,"STRONG",{});var YUr=s(Lae);Nno=r(YUr,"nystromformer"),YUr.forEach(t),qno=r(w$," \u2014 "),qP=n(w$,"A",{href:!0});var KUr=s(qP);jno=r(KUr,"AlbertTokenizer"),KUr.forEach(t),Dno=r(w$," or "),jP=n(w$,"A",{href:!0});var ZUr=s(jP);Gno=r(ZUr,"AlbertTokenizerFast"),ZUr.forEach(t),Ono=r(w$," (Nystromformer model)"),w$.forEach(t),Vno=i(S),_s=n(S,"LI",{});var A$=s(_s);xae=n(A$,"STRONG",{});var eJr=s(xae);Xno=r(eJr,"openai-gpt"),eJr.forEach(t),zno=r(A$," \u2014 "),DP=n(A$,"A",{href:!0});var oJr=s(DP);Wno=r(oJr,"OpenAIGPTTokenizer"),oJr.forEach(t),Qno=r(A$," or "),GP=n(A$,"A",{href:!0});var rJr=s(GP);Hno=r(rJr,"OpenAIGPTTokenizerFast"),rJr.forEach(t),Uno=r(A$," (OpenAI GPT model)"),A$.forEach(t),Jno=i(S),Og=n(S,"LI",{});var B0e=s(Og);$ae=n(B0e,"STRONG",{});var tJr=s($ae);Yno=r(tJr,"opt"),tJr.forEach(t),Kno=r(B0e," \u2014 "),OP=n(B0e,"A",{href:!0});var aJr=s(OP);Zno=r(aJr,"GPT2Tokenizer"),aJr.forEach(t),eso=r(B0e," (OPT model)"),B0e.forEach(t),oso=i(S),us=n(S,"LI",{});var y$=s(us);kae=n(y$,"STRONG",{});var nJr=s(kae);rso=r(nJr,"pegasus"),nJr.forEach(t),tso=r(y$," \u2014 "),VP=n(y$,"A",{href:!0});var sJr=s(VP);aso=r(sJr,"PegasusTokenizer"),sJr.forEach(t),nso=r(y$," or "),XP=n(y$,"A",{href:!0});var lJr=s(XP);sso=r(lJr,"PegasusTokenizerFast"),lJr.forEach(t),lso=r(y$," (Pegasus model)"),y$.forEach(t),iso=i(S),Vg=n(S,"LI",{});var I0e=s(Vg);Sae=n(I0e,"STRONG",{});var iJr=s(Sae);dso=r(iJr,"perceiver"),iJr.forEach(t),cso=r(I0e," \u2014 "),zP=n(I0e,"A",{href:!0});var dJr=s(zP);fso=r(dJr,"PerceiverTokenizer"),dJr.forEach(t),mso=r(I0e," (Perceiver model)"),I0e.forEach(t),gso=i(S),Xg=n(S,"LI",{});var N0e=s(Xg);Rae=n(N0e,"STRONG",{});var cJr=s(Rae);hso=r(cJr,"phobert"),cJr.forEach(t),pso=r(N0e," \u2014 "),WP=n(N0e,"A",{href:!0});var fJr=s(WP);_so=r(fJr,"PhobertTokenizer"),fJr.forEach(t),uso=r(N0e," (PhoBERT model)"),N0e.forEach(t),bso=i(S),zg=n(S,"LI",{});var q0e=s(zg);Pae=n(q0e,"STRONG",{});var mJr=s(Pae);vso=r(mJr,"plbart"),mJr.forEach(t),Fso=r(q0e," \u2014 "),QP=n(q0e,"A",{href:!0});var gJr=s(QP);Tso=r(gJr,"PLBartTokenizer"),gJr.forEach(t),Mso=r(q0e," (PLBart model)"),q0e.forEach(t),Eso=i(S),Wg=n(S,"LI",{});var j0e=s(Wg);Bae=n(j0e,"STRONG",{});var hJr=s(Bae);Cso=r(hJr,"prophetnet"),hJr.forEach(t),wso=r(j0e," \u2014 "),HP=n(j0e,"A",{href:!0});var pJr=s(HP);Aso=r(pJr,"ProphetNetTokenizer"),pJr.forEach(t),yso=r(j0e," (ProphetNet model)"),j0e.forEach(t),Lso=i(S),bs=n(S,"LI",{});var L$=s(bs);Iae=n(L$,"STRONG",{});var _Jr=s(Iae);xso=r(_Jr,"qdqbert"),_Jr.forEach(t),$so=r(L$," \u2014 "),UP=n(L$,"A",{href:!0});var uJr=s(UP);kso=r(uJr,"BertTokenizer"),uJr.forEach(t),Sso=r(L$," or "),JP=n(L$,"A",{href:!0});var bJr=s(JP);Rso=r(bJr,"BertTokenizerFast"),bJr.forEach(t),Pso=r(L$," (QDQBert model)"),L$.forEach(t),Bso=i(S),Qg=n(S,"LI",{});var D0e=s(Qg);Nae=n(D0e,"STRONG",{});var vJr=s(Nae);Iso=r(vJr,"rag"),vJr.forEach(t),Nso=r(D0e," \u2014 "),YP=n(D0e,"A",{href:!0});var FJr=s(YP);qso=r(FJr,"RagTokenizer"),FJr.forEach(t),jso=r(D0e," (RAG model)"),D0e.forEach(t),Dso=i(S),vs=n(S,"LI",{});var x$=s(vs);qae=n(x$,"STRONG",{});var TJr=s(qae);Gso=r(TJr,"realm"),TJr.forEach(t),Oso=r(x$," \u2014 "),KP=n(x$,"A",{href:!0});var MJr=s(KP);Vso=r(MJr,"RealmTokenizer"),MJr.forEach(t),Xso=r(x$," or "),ZP=n(x$,"A",{href:!0});var EJr=s(ZP);zso=r(EJr,"RealmTokenizerFast"),EJr.forEach(t),Wso=r(x$," (Realm model)"),x$.forEach(t),Qso=i(S),Fs=n(S,"LI",{});var $$=s(Fs);jae=n($$,"STRONG",{});var CJr=s(jae);Hso=r(CJr,"reformer"),CJr.forEach(t),Uso=r($$," \u2014 "),eB=n($$,"A",{href:!0});var wJr=s(eB);Jso=r(wJr,"ReformerTokenizer"),wJr.forEach(t),Yso=r($$," or "),oB=n($$,"A",{href:!0});var AJr=s(oB);Kso=r(AJr,"ReformerTokenizerFast"),AJr.forEach(t),Zso=r($$," (Reformer model)"),$$.forEach(t),elo=i(S),Ts=n(S,"LI",{});var k$=s(Ts);Dae=n(k$,"STRONG",{});var yJr=s(Dae);olo=r(yJr,"rembert"),yJr.forEach(t),rlo=r(k$," \u2014 "),rB=n(k$,"A",{href:!0});var LJr=s(rB);tlo=r(LJr,"RemBertTokenizer"),LJr.forEach(t),alo=r(k$," or "),tB=n(k$,"A",{href:!0});var xJr=s(tB);nlo=r(xJr,"RemBertTokenizerFast"),xJr.forEach(t),slo=r(k$," (RemBERT model)"),k$.forEach(t),llo=i(S),Ms=n(S,"LI",{});var S$=s(Ms);Gae=n(S$,"STRONG",{});var $Jr=s(Gae);ilo=r($Jr,"retribert"),$Jr.forEach(t),dlo=r(S$," \u2014 "),aB=n(S$,"A",{href:!0});var kJr=s(aB);clo=r(kJr,"RetriBertTokenizer"),kJr.forEach(t),flo=r(S$," or "),nB=n(S$,"A",{href:!0});var SJr=s(nB);mlo=r(SJr,"RetriBertTokenizerFast"),SJr.forEach(t),glo=r(S$," (RetriBERT model)"),S$.forEach(t),hlo=i(S),Es=n(S,"LI",{});var R$=s(Es);Oae=n(R$,"STRONG",{});var RJr=s(Oae);plo=r(RJr,"roberta"),RJr.forEach(t),_lo=r(R$," \u2014 "),sB=n(R$,"A",{href:!0});var PJr=s(sB);ulo=r(PJr,"RobertaTokenizer"),PJr.forEach(t),blo=r(R$," or "),lB=n(R$,"A",{href:!0});var BJr=s(lB);vlo=r(BJr,"RobertaTokenizerFast"),BJr.forEach(t),Flo=r(R$," (RoBERTa model)"),R$.forEach(t),Tlo=i(S),Cs=n(S,"LI",{});var P$=s(Cs);Vae=n(P$,"STRONG",{});var IJr=s(Vae);Mlo=r(IJr,"roformer"),IJr.forEach(t),Elo=r(P$," \u2014 "),iB=n(P$,"A",{href:!0});var NJr=s(iB);Clo=r(NJr,"RoFormerTokenizer"),NJr.forEach(t),wlo=r(P$," or "),dB=n(P$,"A",{href:!0});var qJr=s(dB);Alo=r(qJr,"RoFormerTokenizerFast"),qJr.forEach(t),ylo=r(P$," (RoFormer model)"),P$.forEach(t),Llo=i(S),Hg=n(S,"LI",{});var G0e=s(Hg);Xae=n(G0e,"STRONG",{});var jJr=s(Xae);xlo=r(jJr,"speech_to_text"),jJr.forEach(t),$lo=r(G0e," \u2014 "),cB=n(G0e,"A",{href:!0});var DJr=s(cB);klo=r(DJr,"Speech2TextTokenizer"),DJr.forEach(t),Slo=r(G0e," (Speech2Text model)"),G0e.forEach(t),Rlo=i(S),Ug=n(S,"LI",{});var O0e=s(Ug);zae=n(O0e,"STRONG",{});var GJr=s(zae);Plo=r(GJr,"speech_to_text_2"),GJr.forEach(t),Blo=r(O0e," \u2014 "),fB=n(O0e,"A",{href:!0});var OJr=s(fB);Ilo=r(OJr,"Speech2Text2Tokenizer"),OJr.forEach(t),Nlo=r(O0e," (Speech2Text2 model)"),O0e.forEach(t),qlo=i(S),ws=n(S,"LI",{});var B$=s(ws);Wae=n(B$,"STRONG",{});var VJr=s(Wae);jlo=r(VJr,"splinter"),VJr.forEach(t),Dlo=r(B$," \u2014 "),mB=n(B$,"A",{href:!0});var XJr=s(mB);Glo=r(XJr,"SplinterTokenizer"),XJr.forEach(t),Olo=r(B$," or "),gB=n(B$,"A",{href:!0});var zJr=s(gB);Vlo=r(zJr,"SplinterTokenizerFast"),zJr.forEach(t),Xlo=r(B$," (Splinter model)"),B$.forEach(t),zlo=i(S),As=n(S,"LI",{});var I$=s(As);Qae=n(I$,"STRONG",{});var WJr=s(Qae);Wlo=r(WJr,"squeezebert"),WJr.forEach(t),Qlo=r(I$," \u2014 "),hB=n(I$,"A",{href:!0});var QJr=s(hB);Hlo=r(QJr,"SqueezeBertTokenizer"),QJr.forEach(t),Ulo=r(I$," or "),pB=n(I$,"A",{href:!0});var HJr=s(pB);Jlo=r(HJr,"SqueezeBertTokenizerFast"),HJr.forEach(t),Ylo=r(I$," (SqueezeBERT model)"),I$.forEach(t),Klo=i(S),ys=n(S,"LI",{});var N$=s(ys);Hae=n(N$,"STRONG",{});var UJr=s(Hae);Zlo=r(UJr,"t5"),UJr.forEach(t),eio=r(N$," \u2014 "),_B=n(N$,"A",{href:!0});var JJr=s(_B);oio=r(JJr,"T5Tokenizer"),JJr.forEach(t),rio=r(N$," or "),uB=n(N$,"A",{href:!0});var YJr=s(uB);tio=r(YJr,"T5TokenizerFast"),YJr.forEach(t),aio=r(N$," (T5 model)"),N$.forEach(t),nio=i(S),Jg=n(S,"LI",{});var V0e=s(Jg);Uae=n(V0e,"STRONG",{});var KJr=s(Uae);sio=r(KJr,"tapas"),KJr.forEach(t),lio=r(V0e," \u2014 "),bB=n(V0e,"A",{href:!0});var ZJr=s(bB);iio=r(ZJr,"TapasTokenizer"),ZJr.forEach(t),dio=r(V0e," (TAPAS model)"),V0e.forEach(t),cio=i(S),Yg=n(S,"LI",{});var X0e=s(Yg);Jae=n(X0e,"STRONG",{});var eYr=s(Jae);fio=r(eYr,"tapex"),eYr.forEach(t),mio=r(X0e," \u2014 "),vB=n(X0e,"A",{href:!0});var oYr=s(vB);gio=r(oYr,"TapexTokenizer"),oYr.forEach(t),hio=r(X0e," (TAPEX model)"),X0e.forEach(t),pio=i(S),Kg=n(S,"LI",{});var z0e=s(Kg);Yae=n(z0e,"STRONG",{});var rYr=s(Yae);_io=r(rYr,"transfo-xl"),rYr.forEach(t),uio=r(z0e," \u2014 "),FB=n(z0e,"A",{href:!0});var tYr=s(FB);bio=r(tYr,"TransfoXLTokenizer"),tYr.forEach(t),vio=r(z0e," (Transformer-XL model)"),z0e.forEach(t),Fio=i(S),Ls=n(S,"LI",{});var q$=s(Ls);Kae=n(q$,"STRONG",{});var aYr=s(Kae);Tio=r(aYr,"visual_bert"),aYr.forEach(t),Mio=r(q$," \u2014 "),TB=n(q$,"A",{href:!0});var nYr=s(TB);Eio=r(nYr,"BertTokenizer"),nYr.forEach(t),Cio=r(q$," or "),MB=n(q$,"A",{href:!0});var sYr=s(MB);wio=r(sYr,"BertTokenizerFast"),sYr.forEach(t),Aio=r(q$," (VisualBert model)"),q$.forEach(t),yio=i(S),Zg=n(S,"LI",{});var W0e=s(Zg);Zae=n(W0e,"STRONG",{});var lYr=s(Zae);Lio=r(lYr,"wav2vec2"),lYr.forEach(t),xio=r(W0e," \u2014 "),EB=n(W0e,"A",{href:!0});var iYr=s(EB);$io=r(iYr,"Wav2Vec2CTCTokenizer"),iYr.forEach(t),kio=r(W0e," (Wav2Vec2 model)"),W0e.forEach(t),Sio=i(S),eh=n(S,"LI",{});var Q0e=s(eh);ene=n(Q0e,"STRONG",{});var dYr=s(ene);Rio=r(dYr,"wav2vec2-conformer"),dYr.forEach(t),Pio=r(Q0e," \u2014 "),CB=n(Q0e,"A",{href:!0});var cYr=s(CB);Bio=r(cYr,"Wav2Vec2CTCTokenizer"),cYr.forEach(t),Iio=r(Q0e," (Wav2Vec2-Conformer model)"),Q0e.forEach(t),Nio=i(S),oh=n(S,"LI",{});var H0e=s(oh);one=n(H0e,"STRONG",{});var fYr=s(one);qio=r(fYr,"wav2vec2_phoneme"),fYr.forEach(t),jio=r(H0e," \u2014 "),wB=n(H0e,"A",{href:!0});var mYr=s(wB);Dio=r(mYr,"Wav2Vec2PhonemeCTCTokenizer"),mYr.forEach(t),Gio=r(H0e," (Wav2Vec2Phoneme model)"),H0e.forEach(t),Oio=i(S),xs=n(S,"LI",{});var j$=s(xs);rne=n(j$,"STRONG",{});var gYr=s(rne);Vio=r(gYr,"xglm"),gYr.forEach(t),Xio=r(j$," \u2014 "),AB=n(j$,"A",{href:!0});var hYr=s(AB);zio=r(hYr,"XGLMTokenizer"),hYr.forEach(t),Wio=r(j$," or "),yB=n(j$,"A",{href:!0});var pYr=s(yB);Qio=r(pYr,"XGLMTokenizerFast"),pYr.forEach(t),Hio=r(j$," (XGLM model)"),j$.forEach(t),Uio=i(S),rh=n(S,"LI",{});var U0e=s(rh);tne=n(U0e,"STRONG",{});var _Yr=s(tne);Jio=r(_Yr,"xlm"),_Yr.forEach(t),Yio=r(U0e," \u2014 "),LB=n(U0e,"A",{href:!0});var uYr=s(LB);Kio=r(uYr,"XLMTokenizer"),uYr.forEach(t),Zio=r(U0e," (XLM model)"),U0e.forEach(t),edo=i(S),th=n(S,"LI",{});var J0e=s(th);ane=n(J0e,"STRONG",{});var bYr=s(ane);odo=r(bYr,"xlm-prophetnet"),bYr.forEach(t),rdo=r(J0e," \u2014 "),xB=n(J0e,"A",{href:!0});var vYr=s(xB);tdo=r(vYr,"XLMProphetNetTokenizer"),vYr.forEach(t),ado=r(J0e," (XLMProphetNet model)"),J0e.forEach(t),ndo=i(S),$s=n(S,"LI",{});var D$=s($s);nne=n(D$,"STRONG",{});var FYr=s(nne);sdo=r(FYr,"xlm-roberta"),FYr.forEach(t),ldo=r(D$," \u2014 "),$B=n(D$,"A",{href:!0});var TYr=s($B);ido=r(TYr,"XLMRobertaTokenizer"),TYr.forEach(t),ddo=r(D$," or "),kB=n(D$,"A",{href:!0});var MYr=s(kB);cdo=r(MYr,"XLMRobertaTokenizerFast"),MYr.forEach(t),fdo=r(D$," (XLM-RoBERTa model)"),D$.forEach(t),mdo=i(S),ks=n(S,"LI",{});var G$=s(ks);sne=n(G$,"STRONG",{});var EYr=s(sne);gdo=r(EYr,"xlm-roberta-xl"),EYr.forEach(t),hdo=r(G$," \u2014 "),SB=n(G$,"A",{href:!0});var CYr=s(SB);pdo=r(CYr,"RobertaTokenizer"),CYr.forEach(t),_do=r(G$," or "),RB=n(G$,"A",{href:!0});var wYr=s(RB);udo=r(wYr,"RobertaTokenizerFast"),wYr.forEach(t),bdo=r(G$," (XLM-RoBERTa-XL model)"),G$.forEach(t),vdo=i(S),Ss=n(S,"LI",{});var O$=s(Ss);lne=n(O$,"STRONG",{});var AYr=s(lne);Fdo=r(AYr,"xlnet"),AYr.forEach(t),Tdo=r(O$," \u2014 "),PB=n(O$,"A",{href:!0});var yYr=s(PB);Mdo=r(yYr,"XLNetTokenizer"),yYr.forEach(t),Edo=r(O$," or "),BB=n(O$,"A",{href:!0});var LYr=s(BB);Cdo=r(LYr,"XLNetTokenizerFast"),LYr.forEach(t),wdo=r(O$," (XLNet model)"),O$.forEach(t),Ado=i(S),Rs=n(S,"LI",{});var V$=s(Rs);ine=n(V$,"STRONG",{});var xYr=s(ine);ydo=r(xYr,"yoso"),xYr.forEach(t),Ldo=r(V$," \u2014 "),IB=n(V$,"A",{href:!0});var $Yr=s(IB);xdo=r($Yr,"AlbertTokenizer"),$Yr.forEach(t),$do=r(V$," or "),NB=n(V$,"A",{href:!0});var kYr=s(NB);kdo=r(kYr,"AlbertTokenizerFast"),kYr.forEach(t),Sdo=r(V$," (YOSO model)"),V$.forEach(t),S.forEach(t),Rdo=i(qs),T(ah.$$.fragment,qs),qs.forEach(t),Pdo=i(Ns),nh=n(Ns,"DIV",{class:!0});var hDe=s(nh);T(Oy.$$.fragment,hDe),Bdo=i(hDe),dne=n(hDe,"P",{});var SYr=s(dne);Ido=r(SYr,"Register a new tokenizer in this mapping."),SYr.forEach(t),hDe.forEach(t),Ns.forEach(t),pqe=i(f),Mi=n(f,"H2",{class:!0});var pDe=s(Mi);sh=n(pDe,"A",{id:!0,class:!0,href:!0});var RYr=s(sh);cne=n(RYr,"SPAN",{});var PYr=s(cne);T(Vy.$$.fragment,PYr),PYr.forEach(t),RYr.forEach(t),Ndo=i(pDe),fne=n(pDe,"SPAN",{});var BYr=s(fne);qdo=r(BYr,"AutoFeatureExtractor"),BYr.forEach(t),pDe.forEach(t),_qe=i(f),Ao=n(f,"DIV",{class:!0});var js=s(Ao);T(Xy.$$.fragment,js),jdo=i(js),zy=n(js,"P",{});var _De=s(zy);Ddo=r(_De,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),qB=n(_De,"A",{href:!0});var IYr=s(qB);Gdo=r(IYr,"AutoFeatureExtractor.from_pretrained()"),IYr.forEach(t),Odo=r(_De," class method."),_De.forEach(t),Vdo=i(js),Wy=n(js,"P",{});var uDe=s(Wy);Xdo=r(uDe,"This class cannot be instantiated directly using "),mne=n(uDe,"CODE",{});var NYr=s(mne);zdo=r(NYr,"__init__()"),NYr.forEach(t),Wdo=r(uDe," (throws an error)."),uDe.forEach(t),Qdo=i(js),He=n(js,"DIV",{class:!0});var Zt=s(He);T(Qy.$$.fragment,Zt),Hdo=i(Zt),gne=n(Zt,"P",{});var qYr=s(gne);Udo=r(qYr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),qYr.forEach(t),Jdo=i(Zt),ya=n(Zt,"P",{});var S0=s(ya);Ydo=r(S0,"The feature extractor class to instantiate is selected based on the "),hne=n(S0,"CODE",{});var jYr=s(hne);Kdo=r(jYr,"model_type"),jYr.forEach(t),Zdo=r(S0,` property of the config object
(either passed as an argument or loaded from `),pne=n(S0,"CODE",{});var DYr=s(pne);eco=r(DYr,"pretrained_model_name_or_path"),DYr.forEach(t),oco=r(S0,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),_ne=n(S0,"CODE",{});var GYr=s(_ne);rco=r(GYr,"pretrained_model_name_or_path"),GYr.forEach(t),tco=r(S0,":"),S0.forEach(t),aco=i(Zt),Y=n(Zt,"UL",{});var Z=s(Y);lh=n(Z,"LI",{});var Y0e=s(lh);une=n(Y0e,"STRONG",{});var OYr=s(une);nco=r(OYr,"beit"),OYr.forEach(t),sco=r(Y0e," \u2014 "),jB=n(Y0e,"A",{href:!0});var VYr=s(jB);lco=r(VYr,"BeitFeatureExtractor"),VYr.forEach(t),ico=r(Y0e," (BEiT model)"),Y0e.forEach(t),dco=i(Z),ih=n(Z,"LI",{});var K0e=s(ih);bne=n(K0e,"STRONG",{});var XYr=s(bne);cco=r(XYr,"clip"),XYr.forEach(t),fco=r(K0e," \u2014 "),DB=n(K0e,"A",{href:!0});var zYr=s(DB);mco=r(zYr,"CLIPFeatureExtractor"),zYr.forEach(t),gco=r(K0e," (CLIP model)"),K0e.forEach(t),hco=i(Z),dh=n(Z,"LI",{});var Z0e=s(dh);vne=n(Z0e,"STRONG",{});var WYr=s(vne);pco=r(WYr,"convnext"),WYr.forEach(t),_co=r(Z0e," \u2014 "),GB=n(Z0e,"A",{href:!0});var QYr=s(GB);uco=r(QYr,"ConvNextFeatureExtractor"),QYr.forEach(t),bco=r(Z0e," (ConvNext model)"),Z0e.forEach(t),vco=i(Z),ch=n(Z,"LI",{});var eAe=s(ch);Fne=n(eAe,"STRONG",{});var HYr=s(Fne);Fco=r(HYr,"cvt"),HYr.forEach(t),Tco=r(eAe," \u2014 "),OB=n(eAe,"A",{href:!0});var UYr=s(OB);Mco=r(UYr,"ConvNextFeatureExtractor"),UYr.forEach(t),Eco=r(eAe," (CvT model)"),eAe.forEach(t),Cco=i(Z),fh=n(Z,"LI",{});var oAe=s(fh);Tne=n(oAe,"STRONG",{});var JYr=s(Tne);wco=r(JYr,"data2vec-audio"),JYr.forEach(t),Aco=r(oAe," \u2014 "),VB=n(oAe,"A",{href:!0});var YYr=s(VB);yco=r(YYr,"Wav2Vec2FeatureExtractor"),YYr.forEach(t),Lco=r(oAe," (Data2VecAudio model)"),oAe.forEach(t),xco=i(Z),mh=n(Z,"LI",{});var rAe=s(mh);Mne=n(rAe,"STRONG",{});var KYr=s(Mne);$co=r(KYr,"data2vec-vision"),KYr.forEach(t),kco=r(rAe," \u2014 "),XB=n(rAe,"A",{href:!0});var ZYr=s(XB);Sco=r(ZYr,"BeitFeatureExtractor"),ZYr.forEach(t),Rco=r(rAe," (Data2VecVision model)"),rAe.forEach(t),Pco=i(Z),gh=n(Z,"LI",{});var tAe=s(gh);Ene=n(tAe,"STRONG",{});var eKr=s(Ene);Bco=r(eKr,"deit"),eKr.forEach(t),Ico=r(tAe," \u2014 "),zB=n(tAe,"A",{href:!0});var oKr=s(zB);Nco=r(oKr,"DeiTFeatureExtractor"),oKr.forEach(t),qco=r(tAe," (DeiT model)"),tAe.forEach(t),jco=i(Z),hh=n(Z,"LI",{});var aAe=s(hh);Cne=n(aAe,"STRONG",{});var rKr=s(Cne);Dco=r(rKr,"detr"),rKr.forEach(t),Gco=r(aAe," \u2014 "),WB=n(aAe,"A",{href:!0});var tKr=s(WB);Oco=r(tKr,"DetrFeatureExtractor"),tKr.forEach(t),Vco=r(aAe," (DETR model)"),aAe.forEach(t),Xco=i(Z),ph=n(Z,"LI",{});var nAe=s(ph);wne=n(nAe,"STRONG",{});var aKr=s(wne);zco=r(aKr,"dpt"),aKr.forEach(t),Wco=r(nAe," \u2014 "),QB=n(nAe,"A",{href:!0});var nKr=s(QB);Qco=r(nKr,"DPTFeatureExtractor"),nKr.forEach(t),Hco=r(nAe," (DPT model)"),nAe.forEach(t),Uco=i(Z),_h=n(Z,"LI",{});var sAe=s(_h);Ane=n(sAe,"STRONG",{});var sKr=s(Ane);Jco=r(sKr,"flava"),sKr.forEach(t),Yco=r(sAe," \u2014 "),HB=n(sAe,"A",{href:!0});var lKr=s(HB);Kco=r(lKr,"FlavaFeatureExtractor"),lKr.forEach(t),Zco=r(sAe," (Flava model)"),sAe.forEach(t),efo=i(Z),uh=n(Z,"LI",{});var lAe=s(uh);yne=n(lAe,"STRONG",{});var iKr=s(yne);ofo=r(iKr,"glpn"),iKr.forEach(t),rfo=r(lAe," \u2014 "),UB=n(lAe,"A",{href:!0});var dKr=s(UB);tfo=r(dKr,"GLPNFeatureExtractor"),dKr.forEach(t),afo=r(lAe," (GLPN model)"),lAe.forEach(t),nfo=i(Z),bh=n(Z,"LI",{});var iAe=s(bh);Lne=n(iAe,"STRONG",{});var cKr=s(Lne);sfo=r(cKr,"hubert"),cKr.forEach(t),lfo=r(iAe," \u2014 "),JB=n(iAe,"A",{href:!0});var fKr=s(JB);ifo=r(fKr,"Wav2Vec2FeatureExtractor"),fKr.forEach(t),dfo=r(iAe," (Hubert model)"),iAe.forEach(t),cfo=i(Z),vh=n(Z,"LI",{});var dAe=s(vh);xne=n(dAe,"STRONG",{});var mKr=s(xne);ffo=r(mKr,"imagegpt"),mKr.forEach(t),mfo=r(dAe," \u2014 "),YB=n(dAe,"A",{href:!0});var gKr=s(YB);gfo=r(gKr,"ImageGPTFeatureExtractor"),gKr.forEach(t),hfo=r(dAe," (ImageGPT model)"),dAe.forEach(t),pfo=i(Z),Fh=n(Z,"LI",{});var cAe=s(Fh);$ne=n(cAe,"STRONG",{});var hKr=s($ne);_fo=r(hKr,"layoutlmv2"),hKr.forEach(t),ufo=r(cAe," \u2014 "),KB=n(cAe,"A",{href:!0});var pKr=s(KB);bfo=r(pKr,"LayoutLMv2FeatureExtractor"),pKr.forEach(t),vfo=r(cAe," (LayoutLMv2 model)"),cAe.forEach(t),Ffo=i(Z),Th=n(Z,"LI",{});var fAe=s(Th);kne=n(fAe,"STRONG",{});var _Kr=s(kne);Tfo=r(_Kr,"layoutlmv3"),_Kr.forEach(t),Mfo=r(fAe," \u2014 "),ZB=n(fAe,"A",{href:!0});var uKr=s(ZB);Efo=r(uKr,"LayoutLMv3FeatureExtractor"),uKr.forEach(t),Cfo=r(fAe," (LayoutLMv3 model)"),fAe.forEach(t),wfo=i(Z),Mh=n(Z,"LI",{});var mAe=s(Mh);Sne=n(mAe,"STRONG",{});var bKr=s(Sne);Afo=r(bKr,"maskformer"),bKr.forEach(t),yfo=r(mAe," \u2014 "),eI=n(mAe,"A",{href:!0});var vKr=s(eI);Lfo=r(vKr,"MaskFormerFeatureExtractor"),vKr.forEach(t),xfo=r(mAe," (MaskFormer model)"),mAe.forEach(t),$fo=i(Z),Eh=n(Z,"LI",{});var gAe=s(Eh);Rne=n(gAe,"STRONG",{});var FKr=s(Rne);kfo=r(FKr,"perceiver"),FKr.forEach(t),Sfo=r(gAe," \u2014 "),oI=n(gAe,"A",{href:!0});var TKr=s(oI);Rfo=r(TKr,"PerceiverFeatureExtractor"),TKr.forEach(t),Pfo=r(gAe," (Perceiver model)"),gAe.forEach(t),Bfo=i(Z),Ch=n(Z,"LI",{});var hAe=s(Ch);Pne=n(hAe,"STRONG",{});var MKr=s(Pne);Ifo=r(MKr,"poolformer"),MKr.forEach(t),Nfo=r(hAe," \u2014 "),rI=n(hAe,"A",{href:!0});var EKr=s(rI);qfo=r(EKr,"PoolFormerFeatureExtractor"),EKr.forEach(t),jfo=r(hAe," (PoolFormer model)"),hAe.forEach(t),Dfo=i(Z),wh=n(Z,"LI",{});var pAe=s(wh);Bne=n(pAe,"STRONG",{});var CKr=s(Bne);Gfo=r(CKr,"regnet"),CKr.forEach(t),Ofo=r(pAe," \u2014 "),tI=n(pAe,"A",{href:!0});var wKr=s(tI);Vfo=r(wKr,"ConvNextFeatureExtractor"),wKr.forEach(t),Xfo=r(pAe," (RegNet model)"),pAe.forEach(t),zfo=i(Z),Ah=n(Z,"LI",{});var _Ae=s(Ah);Ine=n(_Ae,"STRONG",{});var AKr=s(Ine);Wfo=r(AKr,"resnet"),AKr.forEach(t),Qfo=r(_Ae," \u2014 "),aI=n(_Ae,"A",{href:!0});var yKr=s(aI);Hfo=r(yKr,"ConvNextFeatureExtractor"),yKr.forEach(t),Ufo=r(_Ae," (ResNet model)"),_Ae.forEach(t),Jfo=i(Z),yh=n(Z,"LI",{});var uAe=s(yh);Nne=n(uAe,"STRONG",{});var LKr=s(Nne);Yfo=r(LKr,"segformer"),LKr.forEach(t),Kfo=r(uAe," \u2014 "),nI=n(uAe,"A",{href:!0});var xKr=s(nI);Zfo=r(xKr,"SegformerFeatureExtractor"),xKr.forEach(t),emo=r(uAe," (SegFormer model)"),uAe.forEach(t),omo=i(Z),Lh=n(Z,"LI",{});var bAe=s(Lh);qne=n(bAe,"STRONG",{});var $Kr=s(qne);rmo=r($Kr,"speech_to_text"),$Kr.forEach(t),tmo=r(bAe," \u2014 "),sI=n(bAe,"A",{href:!0});var kKr=s(sI);amo=r(kKr,"Speech2TextFeatureExtractor"),kKr.forEach(t),nmo=r(bAe," (Speech2Text model)"),bAe.forEach(t),smo=i(Z),xh=n(Z,"LI",{});var vAe=s(xh);jne=n(vAe,"STRONG",{});var SKr=s(jne);lmo=r(SKr,"swin"),SKr.forEach(t),imo=r(vAe," \u2014 "),lI=n(vAe,"A",{href:!0});var RKr=s(lI);dmo=r(RKr,"ViTFeatureExtractor"),RKr.forEach(t),cmo=r(vAe," (Swin model)"),vAe.forEach(t),fmo=i(Z),$h=n(Z,"LI",{});var FAe=s($h);Dne=n(FAe,"STRONG",{});var PKr=s(Dne);mmo=r(PKr,"van"),PKr.forEach(t),gmo=r(FAe," \u2014 "),iI=n(FAe,"A",{href:!0});var BKr=s(iI);hmo=r(BKr,"ConvNextFeatureExtractor"),BKr.forEach(t),pmo=r(FAe," (VAN model)"),FAe.forEach(t),_mo=i(Z),kh=n(Z,"LI",{});var TAe=s(kh);Gne=n(TAe,"STRONG",{});var IKr=s(Gne);umo=r(IKr,"vit"),IKr.forEach(t),bmo=r(TAe," \u2014 "),dI=n(TAe,"A",{href:!0});var NKr=s(dI);vmo=r(NKr,"ViTFeatureExtractor"),NKr.forEach(t),Fmo=r(TAe," (ViT model)"),TAe.forEach(t),Tmo=i(Z),Sh=n(Z,"LI",{});var MAe=s(Sh);One=n(MAe,"STRONG",{});var qKr=s(One);Mmo=r(qKr,"vit_mae"),qKr.forEach(t),Emo=r(MAe," \u2014 "),cI=n(MAe,"A",{href:!0});var jKr=s(cI);Cmo=r(jKr,"ViTFeatureExtractor"),jKr.forEach(t),wmo=r(MAe," (ViTMAE model)"),MAe.forEach(t),Amo=i(Z),Rh=n(Z,"LI",{});var EAe=s(Rh);Vne=n(EAe,"STRONG",{});var DKr=s(Vne);ymo=r(DKr,"wav2vec2"),DKr.forEach(t),Lmo=r(EAe," \u2014 "),fI=n(EAe,"A",{href:!0});var GKr=s(fI);xmo=r(GKr,"Wav2Vec2FeatureExtractor"),GKr.forEach(t),$mo=r(EAe," (Wav2Vec2 model)"),EAe.forEach(t),kmo=i(Z),Ph=n(Z,"LI",{});var CAe=s(Ph);Xne=n(CAe,"STRONG",{});var OKr=s(Xne);Smo=r(OKr,"wav2vec2-conformer"),OKr.forEach(t),Rmo=r(CAe," \u2014 "),mI=n(CAe,"A",{href:!0});var VKr=s(mI);Pmo=r(VKr,"Wav2Vec2FeatureExtractor"),VKr.forEach(t),Bmo=r(CAe," (Wav2Vec2-Conformer model)"),CAe.forEach(t),Imo=i(Z),Bh=n(Z,"LI",{});var wAe=s(Bh);zne=n(wAe,"STRONG",{});var XKr=s(zne);Nmo=r(XKr,"yolos"),XKr.forEach(t),qmo=r(wAe," \u2014 "),gI=n(wAe,"A",{href:!0});var zKr=s(gI);jmo=r(zKr,"YolosFeatureExtractor"),zKr.forEach(t),Dmo=r(wAe," (YOLOS model)"),wAe.forEach(t),Z.forEach(t),Gmo=i(Zt),T(Ih.$$.fragment,Zt),Omo=i(Zt),T(Nh.$$.fragment,Zt),Zt.forEach(t),Vmo=i(js),qh=n(js,"DIV",{class:!0});var bDe=s(qh);T(Hy.$$.fragment,bDe),Xmo=i(bDe),Wne=n(bDe,"P",{});var WKr=s(Wne);zmo=r(WKr,"Register a new feature extractor for this class."),WKr.forEach(t),bDe.forEach(t),js.forEach(t),uqe=i(f),Ei=n(f,"H2",{class:!0});var vDe=s(Ei);jh=n(vDe,"A",{id:!0,class:!0,href:!0});var QKr=s(jh);Qne=n(QKr,"SPAN",{});var HKr=s(Qne);T(Uy.$$.fragment,HKr),HKr.forEach(t),QKr.forEach(t),Wmo=i(vDe),Hne=n(vDe,"SPAN",{});var UKr=s(Hne);Qmo=r(UKr,"AutoProcessor"),UKr.forEach(t),vDe.forEach(t),bqe=i(f),yo=n(f,"DIV",{class:!0});var Ds=s(yo);T(Jy.$$.fragment,Ds),Hmo=i(Ds),Yy=n(Ds,"P",{});var FDe=s(Yy);Umo=r(FDe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),hI=n(FDe,"A",{href:!0});var JKr=s(hI);Jmo=r(JKr,"AutoProcessor.from_pretrained()"),JKr.forEach(t),Ymo=r(FDe," class method."),FDe.forEach(t),Kmo=i(Ds),Ky=n(Ds,"P",{});var TDe=s(Ky);Zmo=r(TDe,"This class cannot be instantiated directly using "),Une=n(TDe,"CODE",{});var YKr=s(Une);ego=r(YKr,"__init__()"),YKr.forEach(t),ogo=r(TDe," (throws an error)."),TDe.forEach(t),rgo=i(Ds),Ue=n(Ds,"DIV",{class:!0});var ea=s(Ue);T(Zy.$$.fragment,ea),tgo=i(ea),Jne=n(ea,"P",{});var KKr=s(Jne);ago=r(KKr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),KKr.forEach(t),ngo=i(ea),Ci=n(ea,"P",{});var bZ=s(Ci);sgo=r(bZ,"The processor class to instantiate is selected based on the "),Yne=n(bZ,"CODE",{});var ZKr=s(Yne);lgo=r(ZKr,"model_type"),ZKr.forEach(t),igo=r(bZ,` property of the config object (either
passed as an argument or loaded from `),Kne=n(bZ,"CODE",{});var eZr=s(Kne);dgo=r(eZr,"pretrained_model_name_or_path"),eZr.forEach(t),cgo=r(bZ," if possible):"),bZ.forEach(t),fgo=i(ea),he=n(ea,"UL",{});var ue=s(he);Dh=n(ue,"LI",{});var AAe=s(Dh);Zne=n(AAe,"STRONG",{});var oZr=s(Zne);mgo=r(oZr,"clip"),oZr.forEach(t),ggo=r(AAe," \u2014 "),pI=n(AAe,"A",{href:!0});var rZr=s(pI);hgo=r(rZr,"CLIPProcessor"),rZr.forEach(t),pgo=r(AAe," (CLIP model)"),AAe.forEach(t),_go=i(ue),Gh=n(ue,"LI",{});var yAe=s(Gh);ese=n(yAe,"STRONG",{});var tZr=s(ese);ugo=r(tZr,"flava"),tZr.forEach(t),bgo=r(yAe," \u2014 "),ose=n(yAe,"CODE",{});var aZr=s(ose);vgo=r(aZr,"FLAVAProcessor"),aZr.forEach(t),Fgo=r(yAe," (Flava model)"),yAe.forEach(t),Tgo=i(ue),Oh=n(ue,"LI",{});var LAe=s(Oh);rse=n(LAe,"STRONG",{});var nZr=s(rse);Mgo=r(nZr,"layoutlmv2"),nZr.forEach(t),Ego=r(LAe," \u2014 "),_I=n(LAe,"A",{href:!0});var sZr=s(_I);Cgo=r(sZr,"LayoutLMv2Processor"),sZr.forEach(t),wgo=r(LAe," (LayoutLMv2 model)"),LAe.forEach(t),Ago=i(ue),Vh=n(ue,"LI",{});var xAe=s(Vh);tse=n(xAe,"STRONG",{});var lZr=s(tse);ygo=r(lZr,"layoutlmv3"),lZr.forEach(t),Lgo=r(xAe," \u2014 "),uI=n(xAe,"A",{href:!0});var iZr=s(uI);xgo=r(iZr,"LayoutLMv3Processor"),iZr.forEach(t),$go=r(xAe," (LayoutLMv3 model)"),xAe.forEach(t),kgo=i(ue),Xh=n(ue,"LI",{});var $Ae=s(Xh);ase=n($Ae,"STRONG",{});var dZr=s(ase);Sgo=r(dZr,"layoutxlm"),dZr.forEach(t),Rgo=r($Ae," \u2014 "),bI=n($Ae,"A",{href:!0});var cZr=s(bI);Pgo=r(cZr,"LayoutXLMProcessor"),cZr.forEach(t),Bgo=r($Ae," (LayoutXLM model)"),$Ae.forEach(t),Igo=i(ue),zh=n(ue,"LI",{});var kAe=s(zh);nse=n(kAe,"STRONG",{});var fZr=s(nse);Ngo=r(fZr,"sew"),fZr.forEach(t),qgo=r(kAe," \u2014 "),vI=n(kAe,"A",{href:!0});var mZr=s(vI);jgo=r(mZr,"Wav2Vec2Processor"),mZr.forEach(t),Dgo=r(kAe," (SEW model)"),kAe.forEach(t),Ggo=i(ue),Wh=n(ue,"LI",{});var SAe=s(Wh);sse=n(SAe,"STRONG",{});var gZr=s(sse);Ogo=r(gZr,"sew-d"),gZr.forEach(t),Vgo=r(SAe," \u2014 "),FI=n(SAe,"A",{href:!0});var hZr=s(FI);Xgo=r(hZr,"Wav2Vec2Processor"),hZr.forEach(t),zgo=r(SAe," (SEW-D model)"),SAe.forEach(t),Wgo=i(ue),Qh=n(ue,"LI",{});var RAe=s(Qh);lse=n(RAe,"STRONG",{});var pZr=s(lse);Qgo=r(pZr,"speech_to_text"),pZr.forEach(t),Hgo=r(RAe," \u2014 "),TI=n(RAe,"A",{href:!0});var _Zr=s(TI);Ugo=r(_Zr,"Speech2TextProcessor"),_Zr.forEach(t),Jgo=r(RAe," (Speech2Text model)"),RAe.forEach(t),Ygo=i(ue),Hh=n(ue,"LI",{});var PAe=s(Hh);ise=n(PAe,"STRONG",{});var uZr=s(ise);Kgo=r(uZr,"speech_to_text_2"),uZr.forEach(t),Zgo=r(PAe," \u2014 "),MI=n(PAe,"A",{href:!0});var bZr=s(MI);eho=r(bZr,"Speech2Text2Processor"),bZr.forEach(t),oho=r(PAe," (Speech2Text2 model)"),PAe.forEach(t),rho=i(ue),Uh=n(ue,"LI",{});var BAe=s(Uh);dse=n(BAe,"STRONG",{});var vZr=s(dse);tho=r(vZr,"trocr"),vZr.forEach(t),aho=r(BAe," \u2014 "),EI=n(BAe,"A",{href:!0});var FZr=s(EI);nho=r(FZr,"TrOCRProcessor"),FZr.forEach(t),sho=r(BAe," (TrOCR model)"),BAe.forEach(t),lho=i(ue),Jh=n(ue,"LI",{});var IAe=s(Jh);cse=n(IAe,"STRONG",{});var TZr=s(cse);iho=r(TZr,"unispeech"),TZr.forEach(t),dho=r(IAe," \u2014 "),CI=n(IAe,"A",{href:!0});var MZr=s(CI);cho=r(MZr,"Wav2Vec2Processor"),MZr.forEach(t),fho=r(IAe," (UniSpeech model)"),IAe.forEach(t),mho=i(ue),Yh=n(ue,"LI",{});var NAe=s(Yh);fse=n(NAe,"STRONG",{});var EZr=s(fse);gho=r(EZr,"unispeech-sat"),EZr.forEach(t),hho=r(NAe," \u2014 "),wI=n(NAe,"A",{href:!0});var CZr=s(wI);pho=r(CZr,"Wav2Vec2Processor"),CZr.forEach(t),_ho=r(NAe," (UniSpeechSat model)"),NAe.forEach(t),uho=i(ue),Kh=n(ue,"LI",{});var qAe=s(Kh);mse=n(qAe,"STRONG",{});var wZr=s(mse);bho=r(wZr,"vilt"),wZr.forEach(t),vho=r(qAe," \u2014 "),AI=n(qAe,"A",{href:!0});var AZr=s(AI);Fho=r(AZr,"ViltProcessor"),AZr.forEach(t),Tho=r(qAe," (ViLT model)"),qAe.forEach(t),Mho=i(ue),Zh=n(ue,"LI",{});var jAe=s(Zh);gse=n(jAe,"STRONG",{});var yZr=s(gse);Eho=r(yZr,"vision-text-dual-encoder"),yZr.forEach(t),Cho=r(jAe," \u2014 "),yI=n(jAe,"A",{href:!0});var LZr=s(yI);who=r(LZr,"VisionTextDualEncoderProcessor"),LZr.forEach(t),Aho=r(jAe," (VisionTextDualEncoder model)"),jAe.forEach(t),yho=i(ue),ep=n(ue,"LI",{});var DAe=s(ep);hse=n(DAe,"STRONG",{});var xZr=s(hse);Lho=r(xZr,"wav2vec2"),xZr.forEach(t),xho=r(DAe," \u2014 "),LI=n(DAe,"A",{href:!0});var $Zr=s(LI);$ho=r($Zr,"Wav2Vec2Processor"),$Zr.forEach(t),kho=r(DAe," (Wav2Vec2 model)"),DAe.forEach(t),Sho=i(ue),op=n(ue,"LI",{});var GAe=s(op);pse=n(GAe,"STRONG",{});var kZr=s(pse);Rho=r(kZr,"wav2vec2-conformer"),kZr.forEach(t),Pho=r(GAe," \u2014 "),xI=n(GAe,"A",{href:!0});var SZr=s(xI);Bho=r(SZr,"Wav2Vec2Processor"),SZr.forEach(t),Iho=r(GAe," (Wav2Vec2-Conformer model)"),GAe.forEach(t),Nho=i(ue),rp=n(ue,"LI",{});var OAe=s(rp);_se=n(OAe,"STRONG",{});var RZr=s(_se);qho=r(RZr,"wavlm"),RZr.forEach(t),jho=r(OAe," \u2014 "),$I=n(OAe,"A",{href:!0});var PZr=s($I);Dho=r(PZr,"Wav2Vec2Processor"),PZr.forEach(t),Gho=r(OAe," (WavLM model)"),OAe.forEach(t),ue.forEach(t),Oho=i(ea),T(tp.$$.fragment,ea),Vho=i(ea),T(ap.$$.fragment,ea),ea.forEach(t),Xho=i(Ds),np=n(Ds,"DIV",{class:!0});var MDe=s(np);T(eL.$$.fragment,MDe),zho=i(MDe),use=n(MDe,"P",{});var BZr=s(use);Who=r(BZr,"Register a new processor for this class."),BZr.forEach(t),MDe.forEach(t),Ds.forEach(t),vqe=i(f),wi=n(f,"H2",{class:!0});var EDe=s(wi);sp=n(EDe,"A",{id:!0,class:!0,href:!0});var IZr=s(sp);bse=n(IZr,"SPAN",{});var NZr=s(bse);T(oL.$$.fragment,NZr),NZr.forEach(t),IZr.forEach(t),Qho=i(EDe),vse=n(EDe,"SPAN",{});var qZr=s(vse);Hho=r(qZr,"AutoModel"),qZr.forEach(t),EDe.forEach(t),Fqe=i(f),Lo=n(f,"DIV",{class:!0});var Gs=s(Lo);T(rL.$$.fragment,Gs),Uho=i(Gs),Ai=n(Gs,"P",{});var vZ=s(Ai);Jho=r(vZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),kI=n(vZ,"A",{href:!0});var jZr=s(kI);Yho=r(jZr,"from_pretrained()"),jZr.forEach(t),Kho=r(vZ," class method or the "),SI=n(vZ,"A",{href:!0});var DZr=s(SI);Zho=r(DZr,"from_config()"),DZr.forEach(t),epo=r(vZ,` class
method.`),vZ.forEach(t),opo=i(Gs),tL=n(Gs,"P",{});var CDe=s(tL);rpo=r(CDe,"This class cannot be instantiated directly using "),Fse=n(CDe,"CODE",{});var GZr=s(Fse);tpo=r(GZr,"__init__()"),GZr.forEach(t),apo=r(CDe," (throws an error)."),CDe.forEach(t),npo=i(Gs),tt=n(Gs,"DIV",{class:!0});var R0=s(tt);T(aL.$$.fragment,R0),spo=i(R0),Tse=n(R0,"P",{});var OZr=s(Tse);lpo=r(OZr,"Instantiates one of the base model classes of the library from a configuration."),OZr.forEach(t),ipo=i(R0),yi=n(R0,"P",{});var FZ=s(yi);dpo=r(FZ,`Note:
Loading a model from its configuration file does `),Mse=n(FZ,"STRONG",{});var VZr=s(Mse);cpo=r(VZr,"not"),VZr.forEach(t),fpo=r(FZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),RI=n(FZ,"A",{href:!0});var XZr=s(RI);mpo=r(XZr,"from_pretrained()"),XZr.forEach(t),gpo=r(FZ," to load the model weights."),FZ.forEach(t),hpo=i(R0),T(lp.$$.fragment,R0),R0.forEach(t),ppo=i(Gs),Je=n(Gs,"DIV",{class:!0});var oa=s(Je);T(nL.$$.fragment,oa),_po=i(oa),Ese=n(oa,"P",{});var zZr=s(Ese);upo=r(zZr,"Instantiate one of the base model classes of the library from a pretrained model."),zZr.forEach(t),bpo=i(oa),La=n(oa,"P",{});var P0=s(La);vpo=r(P0,"The model class to instantiate is selected based on the "),Cse=n(P0,"CODE",{});var WZr=s(Cse);Fpo=r(WZr,"model_type"),WZr.forEach(t),Tpo=r(P0,` property of the config object (either
passed as an argument or loaded from `),wse=n(P0,"CODE",{});var QZr=s(wse);Mpo=r(QZr,"pretrained_model_name_or_path"),QZr.forEach(t),Epo=r(P0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ase=n(P0,"CODE",{});var HZr=s(Ase);Cpo=r(HZr,"pretrained_model_name_or_path"),HZr.forEach(t),wpo=r(P0,":"),P0.forEach(t),Apo=i(oa),x=n(oa,"UL",{});var $=s(x);ip=n($,"LI",{});var VAe=s(ip);yse=n(VAe,"STRONG",{});var UZr=s(yse);ypo=r(UZr,"albert"),UZr.forEach(t),Lpo=r(VAe," \u2014 "),PI=n(VAe,"A",{href:!0});var JZr=s(PI);xpo=r(JZr,"AlbertModel"),JZr.forEach(t),$po=r(VAe," (ALBERT model)"),VAe.forEach(t),kpo=i($),dp=n($,"LI",{});var XAe=s(dp);Lse=n(XAe,"STRONG",{});var YZr=s(Lse);Spo=r(YZr,"bart"),YZr.forEach(t),Rpo=r(XAe," \u2014 "),BI=n(XAe,"A",{href:!0});var KZr=s(BI);Ppo=r(KZr,"BartModel"),KZr.forEach(t),Bpo=r(XAe," (BART model)"),XAe.forEach(t),Ipo=i($),cp=n($,"LI",{});var zAe=s(cp);xse=n(zAe,"STRONG",{});var ZZr=s(xse);Npo=r(ZZr,"beit"),ZZr.forEach(t),qpo=r(zAe," \u2014 "),II=n(zAe,"A",{href:!0});var eet=s(II);jpo=r(eet,"BeitModel"),eet.forEach(t),Dpo=r(zAe," (BEiT model)"),zAe.forEach(t),Gpo=i($),fp=n($,"LI",{});var WAe=s(fp);$se=n(WAe,"STRONG",{});var oet=s($se);Opo=r(oet,"bert"),oet.forEach(t),Vpo=r(WAe," \u2014 "),NI=n(WAe,"A",{href:!0});var ret=s(NI);Xpo=r(ret,"BertModel"),ret.forEach(t),zpo=r(WAe," (BERT model)"),WAe.forEach(t),Wpo=i($),mp=n($,"LI",{});var QAe=s(mp);kse=n(QAe,"STRONG",{});var tet=s(kse);Qpo=r(tet,"bert-generation"),tet.forEach(t),Hpo=r(QAe," \u2014 "),qI=n(QAe,"A",{href:!0});var aet=s(qI);Upo=r(aet,"BertGenerationEncoder"),aet.forEach(t),Jpo=r(QAe," (Bert Generation model)"),QAe.forEach(t),Ypo=i($),gp=n($,"LI",{});var HAe=s(gp);Sse=n(HAe,"STRONG",{});var net=s(Sse);Kpo=r(net,"big_bird"),net.forEach(t),Zpo=r(HAe," \u2014 "),jI=n(HAe,"A",{href:!0});var set=s(jI);e_o=r(set,"BigBirdModel"),set.forEach(t),o_o=r(HAe," (BigBird model)"),HAe.forEach(t),r_o=i($),hp=n($,"LI",{});var UAe=s(hp);Rse=n(UAe,"STRONG",{});var iet=s(Rse);t_o=r(iet,"bigbird_pegasus"),iet.forEach(t),a_o=r(UAe," \u2014 "),DI=n(UAe,"A",{href:!0});var det=s(DI);n_o=r(det,"BigBirdPegasusModel"),det.forEach(t),s_o=r(UAe," (BigBirdPegasus model)"),UAe.forEach(t),l_o=i($),pp=n($,"LI",{});var JAe=s(pp);Pse=n(JAe,"STRONG",{});var cet=s(Pse);i_o=r(cet,"blenderbot"),cet.forEach(t),d_o=r(JAe," \u2014 "),GI=n(JAe,"A",{href:!0});var fet=s(GI);c_o=r(fet,"BlenderbotModel"),fet.forEach(t),f_o=r(JAe," (Blenderbot model)"),JAe.forEach(t),m_o=i($),_p=n($,"LI",{});var YAe=s(_p);Bse=n(YAe,"STRONG",{});var met=s(Bse);g_o=r(met,"blenderbot-small"),met.forEach(t),h_o=r(YAe," \u2014 "),OI=n(YAe,"A",{href:!0});var get=s(OI);p_o=r(get,"BlenderbotSmallModel"),get.forEach(t),__o=r(YAe," (BlenderbotSmall model)"),YAe.forEach(t),u_o=i($),up=n($,"LI",{});var KAe=s(up);Ise=n(KAe,"STRONG",{});var het=s(Ise);b_o=r(het,"camembert"),het.forEach(t),v_o=r(KAe," \u2014 "),VI=n(KAe,"A",{href:!0});var pet=s(VI);F_o=r(pet,"CamembertModel"),pet.forEach(t),T_o=r(KAe," (CamemBERT model)"),KAe.forEach(t),M_o=i($),bp=n($,"LI",{});var ZAe=s(bp);Nse=n(ZAe,"STRONG",{});var _et=s(Nse);E_o=r(_et,"canine"),_et.forEach(t),C_o=r(ZAe," \u2014 "),XI=n(ZAe,"A",{href:!0});var uet=s(XI);w_o=r(uet,"CanineModel"),uet.forEach(t),A_o=r(ZAe," (Canine model)"),ZAe.forEach(t),y_o=i($),vp=n($,"LI",{});var eye=s(vp);qse=n(eye,"STRONG",{});var bet=s(qse);L_o=r(bet,"clip"),bet.forEach(t),x_o=r(eye," \u2014 "),zI=n(eye,"A",{href:!0});var vet=s(zI);$_o=r(vet,"CLIPModel"),vet.forEach(t),k_o=r(eye," (CLIP model)"),eye.forEach(t),S_o=i($),Fp=n($,"LI",{});var oye=s(Fp);jse=n(oye,"STRONG",{});var Fet=s(jse);R_o=r(Fet,"convbert"),Fet.forEach(t),P_o=r(oye," \u2014 "),WI=n(oye,"A",{href:!0});var Tet=s(WI);B_o=r(Tet,"ConvBertModel"),Tet.forEach(t),I_o=r(oye," (ConvBERT model)"),oye.forEach(t),N_o=i($),Tp=n($,"LI",{});var rye=s(Tp);Dse=n(rye,"STRONG",{});var Met=s(Dse);q_o=r(Met,"convnext"),Met.forEach(t),j_o=r(rye," \u2014 "),QI=n(rye,"A",{href:!0});var Eet=s(QI);D_o=r(Eet,"ConvNextModel"),Eet.forEach(t),G_o=r(rye," (ConvNext model)"),rye.forEach(t),O_o=i($),Mp=n($,"LI",{});var tye=s(Mp);Gse=n(tye,"STRONG",{});var Cet=s(Gse);V_o=r(Cet,"ctrl"),Cet.forEach(t),X_o=r(tye," \u2014 "),HI=n(tye,"A",{href:!0});var wet=s(HI);z_o=r(wet,"CTRLModel"),wet.forEach(t),W_o=r(tye," (CTRL model)"),tye.forEach(t),Q_o=i($),Ep=n($,"LI",{});var aye=s(Ep);Ose=n(aye,"STRONG",{});var Aet=s(Ose);H_o=r(Aet,"cvt"),Aet.forEach(t),U_o=r(aye," \u2014 "),UI=n(aye,"A",{href:!0});var yet=s(UI);J_o=r(yet,"CvtModel"),yet.forEach(t),Y_o=r(aye," (CvT model)"),aye.forEach(t),K_o=i($),Cp=n($,"LI",{});var nye=s(Cp);Vse=n(nye,"STRONG",{});var Let=s(Vse);Z_o=r(Let,"data2vec-audio"),Let.forEach(t),euo=r(nye," \u2014 "),JI=n(nye,"A",{href:!0});var xet=s(JI);ouo=r(xet,"Data2VecAudioModel"),xet.forEach(t),ruo=r(nye," (Data2VecAudio model)"),nye.forEach(t),tuo=i($),wp=n($,"LI",{});var sye=s(wp);Xse=n(sye,"STRONG",{});var $et=s(Xse);auo=r($et,"data2vec-text"),$et.forEach(t),nuo=r(sye," \u2014 "),YI=n(sye,"A",{href:!0});var ket=s(YI);suo=r(ket,"Data2VecTextModel"),ket.forEach(t),luo=r(sye," (Data2VecText model)"),sye.forEach(t),iuo=i($),Ap=n($,"LI",{});var lye=s(Ap);zse=n(lye,"STRONG",{});var Set=s(zse);duo=r(Set,"data2vec-vision"),Set.forEach(t),cuo=r(lye," \u2014 "),KI=n(lye,"A",{href:!0});var Ret=s(KI);fuo=r(Ret,"Data2VecVisionModel"),Ret.forEach(t),muo=r(lye," (Data2VecVision model)"),lye.forEach(t),guo=i($),yp=n($,"LI",{});var iye=s(yp);Wse=n(iye,"STRONG",{});var Pet=s(Wse);huo=r(Pet,"deberta"),Pet.forEach(t),puo=r(iye," \u2014 "),ZI=n(iye,"A",{href:!0});var Bet=s(ZI);_uo=r(Bet,"DebertaModel"),Bet.forEach(t),uuo=r(iye," (DeBERTa model)"),iye.forEach(t),buo=i($),Lp=n($,"LI",{});var dye=s(Lp);Qse=n(dye,"STRONG",{});var Iet=s(Qse);vuo=r(Iet,"deberta-v2"),Iet.forEach(t),Fuo=r(dye," \u2014 "),eN=n(dye,"A",{href:!0});var Net=s(eN);Tuo=r(Net,"DebertaV2Model"),Net.forEach(t),Muo=r(dye," (DeBERTa-v2 model)"),dye.forEach(t),Euo=i($),xp=n($,"LI",{});var cye=s(xp);Hse=n(cye,"STRONG",{});var qet=s(Hse);Cuo=r(qet,"decision_transformer"),qet.forEach(t),wuo=r(cye," \u2014 "),oN=n(cye,"A",{href:!0});var jet=s(oN);Auo=r(jet,"DecisionTransformerModel"),jet.forEach(t),yuo=r(cye," (Decision Transformer model)"),cye.forEach(t),Luo=i($),$p=n($,"LI",{});var fye=s($p);Use=n(fye,"STRONG",{});var Det=s(Use);xuo=r(Det,"deit"),Det.forEach(t),$uo=r(fye," \u2014 "),rN=n(fye,"A",{href:!0});var Get=s(rN);kuo=r(Get,"DeiTModel"),Get.forEach(t),Suo=r(fye," (DeiT model)"),fye.forEach(t),Ruo=i($),kp=n($,"LI",{});var mye=s(kp);Jse=n(mye,"STRONG",{});var Oet=s(Jse);Puo=r(Oet,"detr"),Oet.forEach(t),Buo=r(mye," \u2014 "),tN=n(mye,"A",{href:!0});var Vet=s(tN);Iuo=r(Vet,"DetrModel"),Vet.forEach(t),Nuo=r(mye," (DETR model)"),mye.forEach(t),quo=i($),Sp=n($,"LI",{});var gye=s(Sp);Yse=n(gye,"STRONG",{});var Xet=s(Yse);juo=r(Xet,"distilbert"),Xet.forEach(t),Duo=r(gye," \u2014 "),aN=n(gye,"A",{href:!0});var zet=s(aN);Guo=r(zet,"DistilBertModel"),zet.forEach(t),Ouo=r(gye," (DistilBERT model)"),gye.forEach(t),Vuo=i($),Rp=n($,"LI",{});var hye=s(Rp);Kse=n(hye,"STRONG",{});var Wet=s(Kse);Xuo=r(Wet,"dpr"),Wet.forEach(t),zuo=r(hye," \u2014 "),nN=n(hye,"A",{href:!0});var Qet=s(nN);Wuo=r(Qet,"DPRQuestionEncoder"),Qet.forEach(t),Quo=r(hye," (DPR model)"),hye.forEach(t),Huo=i($),Pp=n($,"LI",{});var pye=s(Pp);Zse=n(pye,"STRONG",{});var Het=s(Zse);Uuo=r(Het,"dpt"),Het.forEach(t),Juo=r(pye," \u2014 "),sN=n(pye,"A",{href:!0});var Uet=s(sN);Yuo=r(Uet,"DPTModel"),Uet.forEach(t),Kuo=r(pye," (DPT model)"),pye.forEach(t),Zuo=i($),Bp=n($,"LI",{});var _ye=s(Bp);ele=n(_ye,"STRONG",{});var Jet=s(ele);e1o=r(Jet,"electra"),Jet.forEach(t),o1o=r(_ye," \u2014 "),lN=n(_ye,"A",{href:!0});var Yet=s(lN);r1o=r(Yet,"ElectraModel"),Yet.forEach(t),t1o=r(_ye," (ELECTRA model)"),_ye.forEach(t),a1o=i($),Ip=n($,"LI",{});var uye=s(Ip);ole=n(uye,"STRONG",{});var Ket=s(ole);n1o=r(Ket,"flaubert"),Ket.forEach(t),s1o=r(uye," \u2014 "),iN=n(uye,"A",{href:!0});var Zet=s(iN);l1o=r(Zet,"FlaubertModel"),Zet.forEach(t),i1o=r(uye," (FlauBERT model)"),uye.forEach(t),d1o=i($),Np=n($,"LI",{});var bye=s(Np);rle=n(bye,"STRONG",{});var eot=s(rle);c1o=r(eot,"flava"),eot.forEach(t),f1o=r(bye," \u2014 "),dN=n(bye,"A",{href:!0});var oot=s(dN);m1o=r(oot,"FlavaModel"),oot.forEach(t),g1o=r(bye," (Flava model)"),bye.forEach(t),h1o=i($),qp=n($,"LI",{});var vye=s(qp);tle=n(vye,"STRONG",{});var rot=s(tle);p1o=r(rot,"fnet"),rot.forEach(t),_1o=r(vye," \u2014 "),cN=n(vye,"A",{href:!0});var tot=s(cN);u1o=r(tot,"FNetModel"),tot.forEach(t),b1o=r(vye," (FNet model)"),vye.forEach(t),v1o=i($),jp=n($,"LI",{});var Fye=s(jp);ale=n(Fye,"STRONG",{});var aot=s(ale);F1o=r(aot,"fsmt"),aot.forEach(t),T1o=r(Fye," \u2014 "),fN=n(Fye,"A",{href:!0});var not=s(fN);M1o=r(not,"FSMTModel"),not.forEach(t),E1o=r(Fye," (FairSeq Machine-Translation model)"),Fye.forEach(t),C1o=i($),Ps=n($,"LI",{});var X$=s(Ps);nle=n(X$,"STRONG",{});var sot=s(nle);w1o=r(sot,"funnel"),sot.forEach(t),A1o=r(X$," \u2014 "),mN=n(X$,"A",{href:!0});var lot=s(mN);y1o=r(lot,"FunnelModel"),lot.forEach(t),L1o=r(X$," or "),gN=n(X$,"A",{href:!0});var iot=s(gN);x1o=r(iot,"FunnelBaseModel"),iot.forEach(t),$1o=r(X$," (Funnel Transformer model)"),X$.forEach(t),k1o=i($),Dp=n($,"LI",{});var Tye=s(Dp);sle=n(Tye,"STRONG",{});var dot=s(sle);S1o=r(dot,"glpn"),dot.forEach(t),R1o=r(Tye," \u2014 "),hN=n(Tye,"A",{href:!0});var cot=s(hN);P1o=r(cot,"GLPNModel"),cot.forEach(t),B1o=r(Tye," (GLPN model)"),Tye.forEach(t),I1o=i($),Gp=n($,"LI",{});var Mye=s(Gp);lle=n(Mye,"STRONG",{});var fot=s(lle);N1o=r(fot,"gpt2"),fot.forEach(t),q1o=r(Mye," \u2014 "),pN=n(Mye,"A",{href:!0});var mot=s(pN);j1o=r(mot,"GPT2Model"),mot.forEach(t),D1o=r(Mye," (OpenAI GPT-2 model)"),Mye.forEach(t),G1o=i($),Op=n($,"LI",{});var Eye=s(Op);ile=n(Eye,"STRONG",{});var got=s(ile);O1o=r(got,"gpt_neo"),got.forEach(t),V1o=r(Eye," \u2014 "),_N=n(Eye,"A",{href:!0});var hot=s(_N);X1o=r(hot,"GPTNeoModel"),hot.forEach(t),z1o=r(Eye," (GPT Neo model)"),Eye.forEach(t),W1o=i($),Vp=n($,"LI",{});var Cye=s(Vp);dle=n(Cye,"STRONG",{});var pot=s(dle);Q1o=r(pot,"gpt_neox"),pot.forEach(t),H1o=r(Cye," \u2014 "),uN=n(Cye,"A",{href:!0});var _ot=s(uN);U1o=r(_ot,"GPTNeoXModel"),_ot.forEach(t),J1o=r(Cye," (GPT NeoX model)"),Cye.forEach(t),Y1o=i($),Xp=n($,"LI",{});var wye=s(Xp);cle=n(wye,"STRONG",{});var uot=s(cle);K1o=r(uot,"gptj"),uot.forEach(t),Z1o=r(wye," \u2014 "),bN=n(wye,"A",{href:!0});var bot=s(bN);ebo=r(bot,"GPTJModel"),bot.forEach(t),obo=r(wye," (GPT-J model)"),wye.forEach(t),rbo=i($),zp=n($,"LI",{});var Aye=s(zp);fle=n(Aye,"STRONG",{});var vot=s(fle);tbo=r(vot,"hubert"),vot.forEach(t),abo=r(Aye," \u2014 "),vN=n(Aye,"A",{href:!0});var Fot=s(vN);nbo=r(Fot,"HubertModel"),Fot.forEach(t),sbo=r(Aye," (Hubert model)"),Aye.forEach(t),lbo=i($),Wp=n($,"LI",{});var yye=s(Wp);mle=n(yye,"STRONG",{});var Tot=s(mle);ibo=r(Tot,"ibert"),Tot.forEach(t),dbo=r(yye," \u2014 "),FN=n(yye,"A",{href:!0});var Mot=s(FN);cbo=r(Mot,"IBertModel"),Mot.forEach(t),fbo=r(yye," (I-BERT model)"),yye.forEach(t),mbo=i($),Qp=n($,"LI",{});var Lye=s(Qp);gle=n(Lye,"STRONG",{});var Eot=s(gle);gbo=r(Eot,"imagegpt"),Eot.forEach(t),hbo=r(Lye," \u2014 "),TN=n(Lye,"A",{href:!0});var Cot=s(TN);pbo=r(Cot,"ImageGPTModel"),Cot.forEach(t),_bo=r(Lye," (ImageGPT model)"),Lye.forEach(t),ubo=i($),Hp=n($,"LI",{});var xye=s(Hp);hle=n(xye,"STRONG",{});var wot=s(hle);bbo=r(wot,"layoutlm"),wot.forEach(t),vbo=r(xye," \u2014 "),MN=n(xye,"A",{href:!0});var Aot=s(MN);Fbo=r(Aot,"LayoutLMModel"),Aot.forEach(t),Tbo=r(xye," (LayoutLM model)"),xye.forEach(t),Mbo=i($),Up=n($,"LI",{});var $ye=s(Up);ple=n($ye,"STRONG",{});var yot=s(ple);Ebo=r(yot,"layoutlmv2"),yot.forEach(t),Cbo=r($ye," \u2014 "),EN=n($ye,"A",{href:!0});var Lot=s(EN);wbo=r(Lot,"LayoutLMv2Model"),Lot.forEach(t),Abo=r($ye," (LayoutLMv2 model)"),$ye.forEach(t),ybo=i($),Jp=n($,"LI",{});var kye=s(Jp);_le=n(kye,"STRONG",{});var xot=s(_le);Lbo=r(xot,"layoutlmv3"),xot.forEach(t),xbo=r(kye," \u2014 "),CN=n(kye,"A",{href:!0});var $ot=s(CN);$bo=r($ot,"LayoutLMv3Model"),$ot.forEach(t),kbo=r(kye," (LayoutLMv3 model)"),kye.forEach(t),Sbo=i($),Yp=n($,"LI",{});var Sye=s(Yp);ule=n(Sye,"STRONG",{});var kot=s(ule);Rbo=r(kot,"led"),kot.forEach(t),Pbo=r(Sye," \u2014 "),wN=n(Sye,"A",{href:!0});var Sot=s(wN);Bbo=r(Sot,"LEDModel"),Sot.forEach(t),Ibo=r(Sye," (LED model)"),Sye.forEach(t),Nbo=i($),Kp=n($,"LI",{});var Rye=s(Kp);ble=n(Rye,"STRONG",{});var Rot=s(ble);qbo=r(Rot,"longformer"),Rot.forEach(t),jbo=r(Rye," \u2014 "),AN=n(Rye,"A",{href:!0});var Pot=s(AN);Dbo=r(Pot,"LongformerModel"),Pot.forEach(t),Gbo=r(Rye," (Longformer model)"),Rye.forEach(t),Obo=i($),Zp=n($,"LI",{});var Pye=s(Zp);vle=n(Pye,"STRONG",{});var Bot=s(vle);Vbo=r(Bot,"luke"),Bot.forEach(t),Xbo=r(Pye," \u2014 "),yN=n(Pye,"A",{href:!0});var Iot=s(yN);zbo=r(Iot,"LukeModel"),Iot.forEach(t),Wbo=r(Pye," (LUKE model)"),Pye.forEach(t),Qbo=i($),e_=n($,"LI",{});var Bye=s(e_);Fle=n(Bye,"STRONG",{});var Not=s(Fle);Hbo=r(Not,"lxmert"),Not.forEach(t),Ubo=r(Bye," \u2014 "),LN=n(Bye,"A",{href:!0});var qot=s(LN);Jbo=r(qot,"LxmertModel"),qot.forEach(t),Ybo=r(Bye," (LXMERT model)"),Bye.forEach(t),Kbo=i($),o_=n($,"LI",{});var Iye=s(o_);Tle=n(Iye,"STRONG",{});var jot=s(Tle);Zbo=r(jot,"m2m_100"),jot.forEach(t),e2o=r(Iye," \u2014 "),xN=n(Iye,"A",{href:!0});var Dot=s(xN);o2o=r(Dot,"M2M100Model"),Dot.forEach(t),r2o=r(Iye," (M2M100 model)"),Iye.forEach(t),t2o=i($),r_=n($,"LI",{});var Nye=s(r_);Mle=n(Nye,"STRONG",{});var Got=s(Mle);a2o=r(Got,"marian"),Got.forEach(t),n2o=r(Nye," \u2014 "),$N=n(Nye,"A",{href:!0});var Oot=s($N);s2o=r(Oot,"MarianModel"),Oot.forEach(t),l2o=r(Nye," (Marian model)"),Nye.forEach(t),i2o=i($),t_=n($,"LI",{});var qye=s(t_);Ele=n(qye,"STRONG",{});var Vot=s(Ele);d2o=r(Vot,"maskformer"),Vot.forEach(t),c2o=r(qye," \u2014 "),kN=n(qye,"A",{href:!0});var Xot=s(kN);f2o=r(Xot,"MaskFormerModel"),Xot.forEach(t),m2o=r(qye," (MaskFormer model)"),qye.forEach(t),g2o=i($),a_=n($,"LI",{});var jye=s(a_);Cle=n(jye,"STRONG",{});var zot=s(Cle);h2o=r(zot,"mbart"),zot.forEach(t),p2o=r(jye," \u2014 "),SN=n(jye,"A",{href:!0});var Wot=s(SN);_2o=r(Wot,"MBartModel"),Wot.forEach(t),u2o=r(jye," (mBART model)"),jye.forEach(t),b2o=i($),n_=n($,"LI",{});var Dye=s(n_);wle=n(Dye,"STRONG",{});var Qot=s(wle);v2o=r(Qot,"megatron-bert"),Qot.forEach(t),F2o=r(Dye," \u2014 "),RN=n(Dye,"A",{href:!0});var Hot=s(RN);T2o=r(Hot,"MegatronBertModel"),Hot.forEach(t),M2o=r(Dye," (MegatronBert model)"),Dye.forEach(t),E2o=i($),s_=n($,"LI",{});var Gye=s(s_);Ale=n(Gye,"STRONG",{});var Uot=s(Ale);C2o=r(Uot,"mobilebert"),Uot.forEach(t),w2o=r(Gye," \u2014 "),PN=n(Gye,"A",{href:!0});var Jot=s(PN);A2o=r(Jot,"MobileBertModel"),Jot.forEach(t),y2o=r(Gye," (MobileBERT model)"),Gye.forEach(t),L2o=i($),l_=n($,"LI",{});var Oye=s(l_);yle=n(Oye,"STRONG",{});var Yot=s(yle);x2o=r(Yot,"mpnet"),Yot.forEach(t),$2o=r(Oye," \u2014 "),BN=n(Oye,"A",{href:!0});var Kot=s(BN);k2o=r(Kot,"MPNetModel"),Kot.forEach(t),S2o=r(Oye," (MPNet model)"),Oye.forEach(t),R2o=i($),i_=n($,"LI",{});var Vye=s(i_);Lle=n(Vye,"STRONG",{});var Zot=s(Lle);P2o=r(Zot,"mt5"),Zot.forEach(t),B2o=r(Vye," \u2014 "),IN=n(Vye,"A",{href:!0});var ert=s(IN);I2o=r(ert,"MT5Model"),ert.forEach(t),N2o=r(Vye," (mT5 model)"),Vye.forEach(t),q2o=i($),d_=n($,"LI",{});var Xye=s(d_);xle=n(Xye,"STRONG",{});var ort=s(xle);j2o=r(ort,"nystromformer"),ort.forEach(t),D2o=r(Xye," \u2014 "),NN=n(Xye,"A",{href:!0});var rrt=s(NN);G2o=r(rrt,"NystromformerModel"),rrt.forEach(t),O2o=r(Xye," (Nystromformer model)"),Xye.forEach(t),V2o=i($),c_=n($,"LI",{});var zye=s(c_);$le=n(zye,"STRONG",{});var trt=s($le);X2o=r(trt,"openai-gpt"),trt.forEach(t),z2o=r(zye," \u2014 "),qN=n(zye,"A",{href:!0});var art=s(qN);W2o=r(art,"OpenAIGPTModel"),art.forEach(t),Q2o=r(zye," (OpenAI GPT model)"),zye.forEach(t),H2o=i($),f_=n($,"LI",{});var Wye=s(f_);kle=n(Wye,"STRONG",{});var nrt=s(kle);U2o=r(nrt,"opt"),nrt.forEach(t),J2o=r(Wye," \u2014 "),jN=n(Wye,"A",{href:!0});var srt=s(jN);Y2o=r(srt,"OPTModel"),srt.forEach(t),K2o=r(Wye," (OPT model)"),Wye.forEach(t),Z2o=i($),m_=n($,"LI",{});var Qye=s(m_);Sle=n(Qye,"STRONG",{});var lrt=s(Sle);e4o=r(lrt,"pegasus"),lrt.forEach(t),o4o=r(Qye," \u2014 "),DN=n(Qye,"A",{href:!0});var irt=s(DN);r4o=r(irt,"PegasusModel"),irt.forEach(t),t4o=r(Qye," (Pegasus model)"),Qye.forEach(t),a4o=i($),g_=n($,"LI",{});var Hye=s(g_);Rle=n(Hye,"STRONG",{});var drt=s(Rle);n4o=r(drt,"perceiver"),drt.forEach(t),s4o=r(Hye," \u2014 "),GN=n(Hye,"A",{href:!0});var crt=s(GN);l4o=r(crt,"PerceiverModel"),crt.forEach(t),i4o=r(Hye," (Perceiver model)"),Hye.forEach(t),d4o=i($),h_=n($,"LI",{});var Uye=s(h_);Ple=n(Uye,"STRONG",{});var frt=s(Ple);c4o=r(frt,"plbart"),frt.forEach(t),f4o=r(Uye," \u2014 "),ON=n(Uye,"A",{href:!0});var mrt=s(ON);m4o=r(mrt,"PLBartModel"),mrt.forEach(t),g4o=r(Uye," (PLBart model)"),Uye.forEach(t),h4o=i($),p_=n($,"LI",{});var Jye=s(p_);Ble=n(Jye,"STRONG",{});var grt=s(Ble);p4o=r(grt,"poolformer"),grt.forEach(t),_4o=r(Jye," \u2014 "),VN=n(Jye,"A",{href:!0});var hrt=s(VN);u4o=r(hrt,"PoolFormerModel"),hrt.forEach(t),b4o=r(Jye," (PoolFormer model)"),Jye.forEach(t),v4o=i($),__=n($,"LI",{});var Yye=s(__);Ile=n(Yye,"STRONG",{});var prt=s(Ile);F4o=r(prt,"prophetnet"),prt.forEach(t),T4o=r(Yye," \u2014 "),XN=n(Yye,"A",{href:!0});var _rt=s(XN);M4o=r(_rt,"ProphetNetModel"),_rt.forEach(t),E4o=r(Yye," (ProphetNet model)"),Yye.forEach(t),C4o=i($),u_=n($,"LI",{});var Kye=s(u_);Nle=n(Kye,"STRONG",{});var urt=s(Nle);w4o=r(urt,"qdqbert"),urt.forEach(t),A4o=r(Kye," \u2014 "),zN=n(Kye,"A",{href:!0});var brt=s(zN);y4o=r(brt,"QDQBertModel"),brt.forEach(t),L4o=r(Kye," (QDQBert model)"),Kye.forEach(t),x4o=i($),b_=n($,"LI",{});var Zye=s(b_);qle=n(Zye,"STRONG",{});var vrt=s(qle);$4o=r(vrt,"reformer"),vrt.forEach(t),k4o=r(Zye," \u2014 "),WN=n(Zye,"A",{href:!0});var Frt=s(WN);S4o=r(Frt,"ReformerModel"),Frt.forEach(t),R4o=r(Zye," (Reformer model)"),Zye.forEach(t),P4o=i($),v_=n($,"LI",{});var eLe=s(v_);jle=n(eLe,"STRONG",{});var Trt=s(jle);B4o=r(Trt,"regnet"),Trt.forEach(t),I4o=r(eLe," \u2014 "),QN=n(eLe,"A",{href:!0});var Mrt=s(QN);N4o=r(Mrt,"RegNetModel"),Mrt.forEach(t),q4o=r(eLe," (RegNet model)"),eLe.forEach(t),j4o=i($),F_=n($,"LI",{});var oLe=s(F_);Dle=n(oLe,"STRONG",{});var Ert=s(Dle);D4o=r(Ert,"rembert"),Ert.forEach(t),G4o=r(oLe," \u2014 "),HN=n(oLe,"A",{href:!0});var Crt=s(HN);O4o=r(Crt,"RemBertModel"),Crt.forEach(t),V4o=r(oLe," (RemBERT model)"),oLe.forEach(t),X4o=i($),T_=n($,"LI",{});var rLe=s(T_);Gle=n(rLe,"STRONG",{});var wrt=s(Gle);z4o=r(wrt,"resnet"),wrt.forEach(t),W4o=r(rLe," \u2014 "),UN=n(rLe,"A",{href:!0});var Art=s(UN);Q4o=r(Art,"ResNetModel"),Art.forEach(t),H4o=r(rLe," (ResNet model)"),rLe.forEach(t),U4o=i($),M_=n($,"LI",{});var tLe=s(M_);Ole=n(tLe,"STRONG",{});var yrt=s(Ole);J4o=r(yrt,"retribert"),yrt.forEach(t),Y4o=r(tLe," \u2014 "),JN=n(tLe,"A",{href:!0});var Lrt=s(JN);K4o=r(Lrt,"RetriBertModel"),Lrt.forEach(t),Z4o=r(tLe," (RetriBERT model)"),tLe.forEach(t),e5o=i($),E_=n($,"LI",{});var aLe=s(E_);Vle=n(aLe,"STRONG",{});var xrt=s(Vle);o5o=r(xrt,"roberta"),xrt.forEach(t),r5o=r(aLe," \u2014 "),YN=n(aLe,"A",{href:!0});var $rt=s(YN);t5o=r($rt,"RobertaModel"),$rt.forEach(t),a5o=r(aLe," (RoBERTa model)"),aLe.forEach(t),n5o=i($),C_=n($,"LI",{});var nLe=s(C_);Xle=n(nLe,"STRONG",{});var krt=s(Xle);s5o=r(krt,"roformer"),krt.forEach(t),l5o=r(nLe," \u2014 "),KN=n(nLe,"A",{href:!0});var Srt=s(KN);i5o=r(Srt,"RoFormerModel"),Srt.forEach(t),d5o=r(nLe," (RoFormer model)"),nLe.forEach(t),c5o=i($),w_=n($,"LI",{});var sLe=s(w_);zle=n(sLe,"STRONG",{});var Rrt=s(zle);f5o=r(Rrt,"segformer"),Rrt.forEach(t),m5o=r(sLe," \u2014 "),ZN=n(sLe,"A",{href:!0});var Prt=s(ZN);g5o=r(Prt,"SegformerModel"),Prt.forEach(t),h5o=r(sLe," (SegFormer model)"),sLe.forEach(t),p5o=i($),A_=n($,"LI",{});var lLe=s(A_);Wle=n(lLe,"STRONG",{});var Brt=s(Wle);_5o=r(Brt,"sew"),Brt.forEach(t),u5o=r(lLe," \u2014 "),eq=n(lLe,"A",{href:!0});var Irt=s(eq);b5o=r(Irt,"SEWModel"),Irt.forEach(t),v5o=r(lLe," (SEW model)"),lLe.forEach(t),F5o=i($),y_=n($,"LI",{});var iLe=s(y_);Qle=n(iLe,"STRONG",{});var Nrt=s(Qle);T5o=r(Nrt,"sew-d"),Nrt.forEach(t),M5o=r(iLe," \u2014 "),oq=n(iLe,"A",{href:!0});var qrt=s(oq);E5o=r(qrt,"SEWDModel"),qrt.forEach(t),C5o=r(iLe," (SEW-D model)"),iLe.forEach(t),w5o=i($),L_=n($,"LI",{});var dLe=s(L_);Hle=n(dLe,"STRONG",{});var jrt=s(Hle);A5o=r(jrt,"speech_to_text"),jrt.forEach(t),y5o=r(dLe," \u2014 "),rq=n(dLe,"A",{href:!0});var Drt=s(rq);L5o=r(Drt,"Speech2TextModel"),Drt.forEach(t),x5o=r(dLe," (Speech2Text model)"),dLe.forEach(t),$5o=i($),x_=n($,"LI",{});var cLe=s(x_);Ule=n(cLe,"STRONG",{});var Grt=s(Ule);k5o=r(Grt,"splinter"),Grt.forEach(t),S5o=r(cLe," \u2014 "),tq=n(cLe,"A",{href:!0});var Ort=s(tq);R5o=r(Ort,"SplinterModel"),Ort.forEach(t),P5o=r(cLe," (Splinter model)"),cLe.forEach(t),B5o=i($),$_=n($,"LI",{});var fLe=s($_);Jle=n(fLe,"STRONG",{});var Vrt=s(Jle);I5o=r(Vrt,"squeezebert"),Vrt.forEach(t),N5o=r(fLe," \u2014 "),aq=n(fLe,"A",{href:!0});var Xrt=s(aq);q5o=r(Xrt,"SqueezeBertModel"),Xrt.forEach(t),j5o=r(fLe," (SqueezeBERT model)"),fLe.forEach(t),D5o=i($),k_=n($,"LI",{});var mLe=s(k_);Yle=n(mLe,"STRONG",{});var zrt=s(Yle);G5o=r(zrt,"swin"),zrt.forEach(t),O5o=r(mLe," \u2014 "),nq=n(mLe,"A",{href:!0});var Wrt=s(nq);V5o=r(Wrt,"SwinModel"),Wrt.forEach(t),X5o=r(mLe," (Swin model)"),mLe.forEach(t),z5o=i($),S_=n($,"LI",{});var gLe=s(S_);Kle=n(gLe,"STRONG",{});var Qrt=s(Kle);W5o=r(Qrt,"t5"),Qrt.forEach(t),Q5o=r(gLe," \u2014 "),sq=n(gLe,"A",{href:!0});var Hrt=s(sq);H5o=r(Hrt,"T5Model"),Hrt.forEach(t),U5o=r(gLe," (T5 model)"),gLe.forEach(t),J5o=i($),R_=n($,"LI",{});var hLe=s(R_);Zle=n(hLe,"STRONG",{});var Urt=s(Zle);Y5o=r(Urt,"tapas"),Urt.forEach(t),K5o=r(hLe," \u2014 "),lq=n(hLe,"A",{href:!0});var Jrt=s(lq);Z5o=r(Jrt,"TapasModel"),Jrt.forEach(t),evo=r(hLe," (TAPAS model)"),hLe.forEach(t),ovo=i($),P_=n($,"LI",{});var pLe=s(P_);eie=n(pLe,"STRONG",{});var Yrt=s(eie);rvo=r(Yrt,"trajectory_transformer"),Yrt.forEach(t),tvo=r(pLe," \u2014 "),iq=n(pLe,"A",{href:!0});var Krt=s(iq);avo=r(Krt,"TrajectoryTransformerModel"),Krt.forEach(t),nvo=r(pLe," (Trajectory Transformer model)"),pLe.forEach(t),svo=i($),B_=n($,"LI",{});var _Le=s(B_);oie=n(_Le,"STRONG",{});var Zrt=s(oie);lvo=r(Zrt,"transfo-xl"),Zrt.forEach(t),ivo=r(_Le," \u2014 "),dq=n(_Le,"A",{href:!0});var ett=s(dq);dvo=r(ett,"TransfoXLModel"),ett.forEach(t),cvo=r(_Le," (Transformer-XL model)"),_Le.forEach(t),fvo=i($),I_=n($,"LI",{});var uLe=s(I_);rie=n(uLe,"STRONG",{});var ott=s(rie);mvo=r(ott,"unispeech"),ott.forEach(t),gvo=r(uLe," \u2014 "),cq=n(uLe,"A",{href:!0});var rtt=s(cq);hvo=r(rtt,"UniSpeechModel"),rtt.forEach(t),pvo=r(uLe," (UniSpeech model)"),uLe.forEach(t),_vo=i($),N_=n($,"LI",{});var bLe=s(N_);tie=n(bLe,"STRONG",{});var ttt=s(tie);uvo=r(ttt,"unispeech-sat"),ttt.forEach(t),bvo=r(bLe," \u2014 "),fq=n(bLe,"A",{href:!0});var att=s(fq);vvo=r(att,"UniSpeechSatModel"),att.forEach(t),Fvo=r(bLe," (UniSpeechSat model)"),bLe.forEach(t),Tvo=i($),q_=n($,"LI",{});var vLe=s(q_);aie=n(vLe,"STRONG",{});var ntt=s(aie);Mvo=r(ntt,"van"),ntt.forEach(t),Evo=r(vLe," \u2014 "),mq=n(vLe,"A",{href:!0});var stt=s(mq);Cvo=r(stt,"VanModel"),stt.forEach(t),wvo=r(vLe," (VAN model)"),vLe.forEach(t),Avo=i($),j_=n($,"LI",{});var FLe=s(j_);nie=n(FLe,"STRONG",{});var ltt=s(nie);yvo=r(ltt,"vilt"),ltt.forEach(t),Lvo=r(FLe," \u2014 "),gq=n(FLe,"A",{href:!0});var itt=s(gq);xvo=r(itt,"ViltModel"),itt.forEach(t),$vo=r(FLe," (ViLT model)"),FLe.forEach(t),kvo=i($),D_=n($,"LI",{});var TLe=s(D_);sie=n(TLe,"STRONG",{});var dtt=s(sie);Svo=r(dtt,"vision-text-dual-encoder"),dtt.forEach(t),Rvo=r(TLe," \u2014 "),hq=n(TLe,"A",{href:!0});var ctt=s(hq);Pvo=r(ctt,"VisionTextDualEncoderModel"),ctt.forEach(t),Bvo=r(TLe," (VisionTextDualEncoder model)"),TLe.forEach(t),Ivo=i($),G_=n($,"LI",{});var MLe=s(G_);lie=n(MLe,"STRONG",{});var ftt=s(lie);Nvo=r(ftt,"visual_bert"),ftt.forEach(t),qvo=r(MLe," \u2014 "),pq=n(MLe,"A",{href:!0});var mtt=s(pq);jvo=r(mtt,"VisualBertModel"),mtt.forEach(t),Dvo=r(MLe," (VisualBert model)"),MLe.forEach(t),Gvo=i($),O_=n($,"LI",{});var ELe=s(O_);iie=n(ELe,"STRONG",{});var gtt=s(iie);Ovo=r(gtt,"vit"),gtt.forEach(t),Vvo=r(ELe," \u2014 "),_q=n(ELe,"A",{href:!0});var htt=s(_q);Xvo=r(htt,"ViTModel"),htt.forEach(t),zvo=r(ELe," (ViT model)"),ELe.forEach(t),Wvo=i($),V_=n($,"LI",{});var CLe=s(V_);die=n(CLe,"STRONG",{});var ptt=s(die);Qvo=r(ptt,"vit_mae"),ptt.forEach(t),Hvo=r(CLe," \u2014 "),uq=n(CLe,"A",{href:!0});var _tt=s(uq);Uvo=r(_tt,"ViTMAEModel"),_tt.forEach(t),Jvo=r(CLe," (ViTMAE model)"),CLe.forEach(t),Yvo=i($),X_=n($,"LI",{});var wLe=s(X_);cie=n(wLe,"STRONG",{});var utt=s(cie);Kvo=r(utt,"wav2vec2"),utt.forEach(t),Zvo=r(wLe," \u2014 "),bq=n(wLe,"A",{href:!0});var btt=s(bq);e3o=r(btt,"Wav2Vec2Model"),btt.forEach(t),o3o=r(wLe," (Wav2Vec2 model)"),wLe.forEach(t),r3o=i($),z_=n($,"LI",{});var ALe=s(z_);fie=n(ALe,"STRONG",{});var vtt=s(fie);t3o=r(vtt,"wav2vec2-conformer"),vtt.forEach(t),a3o=r(ALe," \u2014 "),vq=n(ALe,"A",{href:!0});var Ftt=s(vq);n3o=r(Ftt,"Wav2Vec2ConformerModel"),Ftt.forEach(t),s3o=r(ALe," (Wav2Vec2-Conformer model)"),ALe.forEach(t),l3o=i($),W_=n($,"LI",{});var yLe=s(W_);mie=n(yLe,"STRONG",{});var Ttt=s(mie);i3o=r(Ttt,"wavlm"),Ttt.forEach(t),d3o=r(yLe," \u2014 "),Fq=n(yLe,"A",{href:!0});var Mtt=s(Fq);c3o=r(Mtt,"WavLMModel"),Mtt.forEach(t),f3o=r(yLe," (WavLM model)"),yLe.forEach(t),m3o=i($),Q_=n($,"LI",{});var LLe=s(Q_);gie=n(LLe,"STRONG",{});var Ett=s(gie);g3o=r(Ett,"xglm"),Ett.forEach(t),h3o=r(LLe," \u2014 "),Tq=n(LLe,"A",{href:!0});var Ctt=s(Tq);p3o=r(Ctt,"XGLMModel"),Ctt.forEach(t),_3o=r(LLe," (XGLM model)"),LLe.forEach(t),u3o=i($),H_=n($,"LI",{});var xLe=s(H_);hie=n(xLe,"STRONG",{});var wtt=s(hie);b3o=r(wtt,"xlm"),wtt.forEach(t),v3o=r(xLe," \u2014 "),Mq=n(xLe,"A",{href:!0});var Att=s(Mq);F3o=r(Att,"XLMModel"),Att.forEach(t),T3o=r(xLe," (XLM model)"),xLe.forEach(t),M3o=i($),U_=n($,"LI",{});var $Le=s(U_);pie=n($Le,"STRONG",{});var ytt=s(pie);E3o=r(ytt,"xlm-prophetnet"),ytt.forEach(t),C3o=r($Le," \u2014 "),Eq=n($Le,"A",{href:!0});var Ltt=s(Eq);w3o=r(Ltt,"XLMProphetNetModel"),Ltt.forEach(t),A3o=r($Le," (XLMProphetNet model)"),$Le.forEach(t),y3o=i($),J_=n($,"LI",{});var kLe=s(J_);_ie=n(kLe,"STRONG",{});var xtt=s(_ie);L3o=r(xtt,"xlm-roberta"),xtt.forEach(t),x3o=r(kLe," \u2014 "),Cq=n(kLe,"A",{href:!0});var $tt=s(Cq);$3o=r($tt,"XLMRobertaModel"),$tt.forEach(t),k3o=r(kLe," (XLM-RoBERTa model)"),kLe.forEach(t),S3o=i($),Y_=n($,"LI",{});var SLe=s(Y_);uie=n(SLe,"STRONG",{});var ktt=s(uie);R3o=r(ktt,"xlm-roberta-xl"),ktt.forEach(t),P3o=r(SLe," \u2014 "),wq=n(SLe,"A",{href:!0});var Stt=s(wq);B3o=r(Stt,"XLMRobertaXLModel"),Stt.forEach(t),I3o=r(SLe," (XLM-RoBERTa-XL model)"),SLe.forEach(t),N3o=i($),K_=n($,"LI",{});var RLe=s(K_);bie=n(RLe,"STRONG",{});var Rtt=s(bie);q3o=r(Rtt,"xlnet"),Rtt.forEach(t),j3o=r(RLe," \u2014 "),Aq=n(RLe,"A",{href:!0});var Ptt=s(Aq);D3o=r(Ptt,"XLNetModel"),Ptt.forEach(t),G3o=r(RLe," (XLNet model)"),RLe.forEach(t),O3o=i($),Z_=n($,"LI",{});var PLe=s(Z_);vie=n(PLe,"STRONG",{});var Btt=s(vie);V3o=r(Btt,"yolos"),Btt.forEach(t),X3o=r(PLe," \u2014 "),yq=n(PLe,"A",{href:!0});var Itt=s(yq);z3o=r(Itt,"YolosModel"),Itt.forEach(t),W3o=r(PLe," (YOLOS model)"),PLe.forEach(t),Q3o=i($),eu=n($,"LI",{});var BLe=s(eu);Fie=n(BLe,"STRONG",{});var Ntt=s(Fie);H3o=r(Ntt,"yoso"),Ntt.forEach(t),U3o=r(BLe," \u2014 "),Lq=n(BLe,"A",{href:!0});var qtt=s(Lq);J3o=r(qtt,"YosoModel"),qtt.forEach(t),Y3o=r(BLe," (YOSO model)"),BLe.forEach(t),$.forEach(t),K3o=i(oa),ou=n(oa,"P",{});var ILe=s(ou);Z3o=r(ILe,"The model is set in evaluation mode by default using "),Tie=n(ILe,"CODE",{});var jtt=s(Tie);eFo=r(jtt,"model.eval()"),jtt.forEach(t),oFo=r(ILe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mie=n(ILe,"CODE",{});var Dtt=s(Mie);rFo=r(Dtt,"model.train()"),Dtt.forEach(t),ILe.forEach(t),tFo=i(oa),T(ru.$$.fragment,oa),oa.forEach(t),Gs.forEach(t),Tqe=i(f),Li=n(f,"H2",{class:!0});var wDe=s(Li);tu=n(wDe,"A",{id:!0,class:!0,href:!0});var Gtt=s(tu);Eie=n(Gtt,"SPAN",{});var Ott=s(Eie);T(sL.$$.fragment,Ott),Ott.forEach(t),Gtt.forEach(t),aFo=i(wDe),Cie=n(wDe,"SPAN",{});var Vtt=s(Cie);nFo=r(Vtt,"AutoModelForPreTraining"),Vtt.forEach(t),wDe.forEach(t),Mqe=i(f),xo=n(f,"DIV",{class:!0});var Os=s(xo);T(lL.$$.fragment,Os),sFo=i(Os),xi=n(Os,"P",{});var TZ=s(xi);lFo=r(TZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),xq=n(TZ,"A",{href:!0});var Xtt=s(xq);iFo=r(Xtt,"from_pretrained()"),Xtt.forEach(t),dFo=r(TZ," class method or the "),$q=n(TZ,"A",{href:!0});var ztt=s($q);cFo=r(ztt,"from_config()"),ztt.forEach(t),fFo=r(TZ,` class
method.`),TZ.forEach(t),mFo=i(Os),iL=n(Os,"P",{});var ADe=s(iL);gFo=r(ADe,"This class cannot be instantiated directly using "),wie=n(ADe,"CODE",{});var Wtt=s(wie);hFo=r(Wtt,"__init__()"),Wtt.forEach(t),pFo=r(ADe," (throws an error)."),ADe.forEach(t),_Fo=i(Os),at=n(Os,"DIV",{class:!0});var B0=s(at);T(dL.$$.fragment,B0),uFo=i(B0),Aie=n(B0,"P",{});var Qtt=s(Aie);bFo=r(Qtt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Qtt.forEach(t),vFo=i(B0),$i=n(B0,"P",{});var MZ=s($i);FFo=r(MZ,`Note:
Loading a model from its configuration file does `),yie=n(MZ,"STRONG",{});var Htt=s(yie);TFo=r(Htt,"not"),Htt.forEach(t),MFo=r(MZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),kq=n(MZ,"A",{href:!0});var Utt=s(kq);EFo=r(Utt,"from_pretrained()"),Utt.forEach(t),CFo=r(MZ," to load the model weights."),MZ.forEach(t),wFo=i(B0),T(au.$$.fragment,B0),B0.forEach(t),AFo=i(Os),Ye=n(Os,"DIV",{class:!0});var ra=s(Ye);T(cL.$$.fragment,ra),yFo=i(ra),Lie=n(ra,"P",{});var Jtt=s(Lie);LFo=r(Jtt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Jtt.forEach(t),xFo=i(ra),xa=n(ra,"P",{});var I0=s(xa);$Fo=r(I0,"The model class to instantiate is selected based on the "),xie=n(I0,"CODE",{});var Ytt=s(xie);kFo=r(Ytt,"model_type"),Ytt.forEach(t),SFo=r(I0,` property of the config object (either
passed as an argument or loaded from `),$ie=n(I0,"CODE",{});var Ktt=s($ie);RFo=r(Ktt,"pretrained_model_name_or_path"),Ktt.forEach(t),PFo=r(I0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kie=n(I0,"CODE",{});var Ztt=s(kie);BFo=r(Ztt,"pretrained_model_name_or_path"),Ztt.forEach(t),IFo=r(I0,":"),I0.forEach(t),NFo=i(ra),G=n(ra,"UL",{});var O=s(G);nu=n(O,"LI",{});var NLe=s(nu);Sie=n(NLe,"STRONG",{});var eat=s(Sie);qFo=r(eat,"albert"),eat.forEach(t),jFo=r(NLe," \u2014 "),Sq=n(NLe,"A",{href:!0});var oat=s(Sq);DFo=r(oat,"AlbertForPreTraining"),oat.forEach(t),GFo=r(NLe," (ALBERT model)"),NLe.forEach(t),OFo=i(O),su=n(O,"LI",{});var qLe=s(su);Rie=n(qLe,"STRONG",{});var rat=s(Rie);VFo=r(rat,"bart"),rat.forEach(t),XFo=r(qLe," \u2014 "),Rq=n(qLe,"A",{href:!0});var tat=s(Rq);zFo=r(tat,"BartForConditionalGeneration"),tat.forEach(t),WFo=r(qLe," (BART model)"),qLe.forEach(t),QFo=i(O),lu=n(O,"LI",{});var jLe=s(lu);Pie=n(jLe,"STRONG",{});var aat=s(Pie);HFo=r(aat,"bert"),aat.forEach(t),UFo=r(jLe," \u2014 "),Pq=n(jLe,"A",{href:!0});var nat=s(Pq);JFo=r(nat,"BertForPreTraining"),nat.forEach(t),YFo=r(jLe," (BERT model)"),jLe.forEach(t),KFo=i(O),iu=n(O,"LI",{});var DLe=s(iu);Bie=n(DLe,"STRONG",{});var sat=s(Bie);ZFo=r(sat,"big_bird"),sat.forEach(t),e6o=r(DLe," \u2014 "),Bq=n(DLe,"A",{href:!0});var lat=s(Bq);o6o=r(lat,"BigBirdForPreTraining"),lat.forEach(t),r6o=r(DLe," (BigBird model)"),DLe.forEach(t),t6o=i(O),du=n(O,"LI",{});var GLe=s(du);Iie=n(GLe,"STRONG",{});var iat=s(Iie);a6o=r(iat,"camembert"),iat.forEach(t),n6o=r(GLe," \u2014 "),Iq=n(GLe,"A",{href:!0});var dat=s(Iq);s6o=r(dat,"CamembertForMaskedLM"),dat.forEach(t),l6o=r(GLe," (CamemBERT model)"),GLe.forEach(t),i6o=i(O),cu=n(O,"LI",{});var OLe=s(cu);Nie=n(OLe,"STRONG",{});var cat=s(Nie);d6o=r(cat,"ctrl"),cat.forEach(t),c6o=r(OLe," \u2014 "),Nq=n(OLe,"A",{href:!0});var fat=s(Nq);f6o=r(fat,"CTRLLMHeadModel"),fat.forEach(t),m6o=r(OLe," (CTRL model)"),OLe.forEach(t),g6o=i(O),fu=n(O,"LI",{});var VLe=s(fu);qie=n(VLe,"STRONG",{});var mat=s(qie);h6o=r(mat,"data2vec-text"),mat.forEach(t),p6o=r(VLe," \u2014 "),qq=n(VLe,"A",{href:!0});var gat=s(qq);_6o=r(gat,"Data2VecTextForMaskedLM"),gat.forEach(t),u6o=r(VLe," (Data2VecText model)"),VLe.forEach(t),b6o=i(O),mu=n(O,"LI",{});var XLe=s(mu);jie=n(XLe,"STRONG",{});var hat=s(jie);v6o=r(hat,"deberta"),hat.forEach(t),F6o=r(XLe," \u2014 "),jq=n(XLe,"A",{href:!0});var pat=s(jq);T6o=r(pat,"DebertaForMaskedLM"),pat.forEach(t),M6o=r(XLe," (DeBERTa model)"),XLe.forEach(t),E6o=i(O),gu=n(O,"LI",{});var zLe=s(gu);Die=n(zLe,"STRONG",{});var _at=s(Die);C6o=r(_at,"deberta-v2"),_at.forEach(t),w6o=r(zLe," \u2014 "),Dq=n(zLe,"A",{href:!0});var uat=s(Dq);A6o=r(uat,"DebertaV2ForMaskedLM"),uat.forEach(t),y6o=r(zLe," (DeBERTa-v2 model)"),zLe.forEach(t),L6o=i(O),hu=n(O,"LI",{});var WLe=s(hu);Gie=n(WLe,"STRONG",{});var bat=s(Gie);x6o=r(bat,"distilbert"),bat.forEach(t),$6o=r(WLe," \u2014 "),Gq=n(WLe,"A",{href:!0});var vat=s(Gq);k6o=r(vat,"DistilBertForMaskedLM"),vat.forEach(t),S6o=r(WLe," (DistilBERT model)"),WLe.forEach(t),R6o=i(O),pu=n(O,"LI",{});var QLe=s(pu);Oie=n(QLe,"STRONG",{});var Fat=s(Oie);P6o=r(Fat,"electra"),Fat.forEach(t),B6o=r(QLe," \u2014 "),Oq=n(QLe,"A",{href:!0});var Tat=s(Oq);I6o=r(Tat,"ElectraForPreTraining"),Tat.forEach(t),N6o=r(QLe," (ELECTRA model)"),QLe.forEach(t),q6o=i(O),_u=n(O,"LI",{});var HLe=s(_u);Vie=n(HLe,"STRONG",{});var Mat=s(Vie);j6o=r(Mat,"flaubert"),Mat.forEach(t),D6o=r(HLe," \u2014 "),Vq=n(HLe,"A",{href:!0});var Eat=s(Vq);G6o=r(Eat,"FlaubertWithLMHeadModel"),Eat.forEach(t),O6o=r(HLe," (FlauBERT model)"),HLe.forEach(t),V6o=i(O),uu=n(O,"LI",{});var ULe=s(uu);Xie=n(ULe,"STRONG",{});var Cat=s(Xie);X6o=r(Cat,"flava"),Cat.forEach(t),z6o=r(ULe," \u2014 "),Xq=n(ULe,"A",{href:!0});var wat=s(Xq);W6o=r(wat,"FlavaForPreTraining"),wat.forEach(t),Q6o=r(ULe," (Flava model)"),ULe.forEach(t),H6o=i(O),bu=n(O,"LI",{});var JLe=s(bu);zie=n(JLe,"STRONG",{});var Aat=s(zie);U6o=r(Aat,"fnet"),Aat.forEach(t),J6o=r(JLe," \u2014 "),zq=n(JLe,"A",{href:!0});var yat=s(zq);Y6o=r(yat,"FNetForPreTraining"),yat.forEach(t),K6o=r(JLe," (FNet model)"),JLe.forEach(t),Z6o=i(O),vu=n(O,"LI",{});var YLe=s(vu);Wie=n(YLe,"STRONG",{});var Lat=s(Wie);eTo=r(Lat,"fsmt"),Lat.forEach(t),oTo=r(YLe," \u2014 "),Wq=n(YLe,"A",{href:!0});var xat=s(Wq);rTo=r(xat,"FSMTForConditionalGeneration"),xat.forEach(t),tTo=r(YLe," (FairSeq Machine-Translation model)"),YLe.forEach(t),aTo=i(O),Fu=n(O,"LI",{});var KLe=s(Fu);Qie=n(KLe,"STRONG",{});var $at=s(Qie);nTo=r($at,"funnel"),$at.forEach(t),sTo=r(KLe," \u2014 "),Qq=n(KLe,"A",{href:!0});var kat=s(Qq);lTo=r(kat,"FunnelForPreTraining"),kat.forEach(t),iTo=r(KLe," (Funnel Transformer model)"),KLe.forEach(t),dTo=i(O),Tu=n(O,"LI",{});var ZLe=s(Tu);Hie=n(ZLe,"STRONG",{});var Sat=s(Hie);cTo=r(Sat,"gpt2"),Sat.forEach(t),fTo=r(ZLe," \u2014 "),Hq=n(ZLe,"A",{href:!0});var Rat=s(Hq);mTo=r(Rat,"GPT2LMHeadModel"),Rat.forEach(t),gTo=r(ZLe," (OpenAI GPT-2 model)"),ZLe.forEach(t),hTo=i(O),Mu=n(O,"LI",{});var e8e=s(Mu);Uie=n(e8e,"STRONG",{});var Pat=s(Uie);pTo=r(Pat,"ibert"),Pat.forEach(t),_To=r(e8e," \u2014 "),Uq=n(e8e,"A",{href:!0});var Bat=s(Uq);uTo=r(Bat,"IBertForMaskedLM"),Bat.forEach(t),bTo=r(e8e," (I-BERT model)"),e8e.forEach(t),vTo=i(O),Eu=n(O,"LI",{});var o8e=s(Eu);Jie=n(o8e,"STRONG",{});var Iat=s(Jie);FTo=r(Iat,"layoutlm"),Iat.forEach(t),TTo=r(o8e," \u2014 "),Jq=n(o8e,"A",{href:!0});var Nat=s(Jq);MTo=r(Nat,"LayoutLMForMaskedLM"),Nat.forEach(t),ETo=r(o8e," (LayoutLM model)"),o8e.forEach(t),CTo=i(O),Cu=n(O,"LI",{});var r8e=s(Cu);Yie=n(r8e,"STRONG",{});var qat=s(Yie);wTo=r(qat,"longformer"),qat.forEach(t),ATo=r(r8e," \u2014 "),Yq=n(r8e,"A",{href:!0});var jat=s(Yq);yTo=r(jat,"LongformerForMaskedLM"),jat.forEach(t),LTo=r(r8e," (Longformer model)"),r8e.forEach(t),xTo=i(O),wu=n(O,"LI",{});var t8e=s(wu);Kie=n(t8e,"STRONG",{});var Dat=s(Kie);$To=r(Dat,"lxmert"),Dat.forEach(t),kTo=r(t8e," \u2014 "),Kq=n(t8e,"A",{href:!0});var Gat=s(Kq);STo=r(Gat,"LxmertForPreTraining"),Gat.forEach(t),RTo=r(t8e," (LXMERT model)"),t8e.forEach(t),PTo=i(O),Au=n(O,"LI",{});var a8e=s(Au);Zie=n(a8e,"STRONG",{});var Oat=s(Zie);BTo=r(Oat,"megatron-bert"),Oat.forEach(t),ITo=r(a8e," \u2014 "),Zq=n(a8e,"A",{href:!0});var Vat=s(Zq);NTo=r(Vat,"MegatronBertForPreTraining"),Vat.forEach(t),qTo=r(a8e," (MegatronBert model)"),a8e.forEach(t),jTo=i(O),yu=n(O,"LI",{});var n8e=s(yu);ede=n(n8e,"STRONG",{});var Xat=s(ede);DTo=r(Xat,"mobilebert"),Xat.forEach(t),GTo=r(n8e," \u2014 "),ej=n(n8e,"A",{href:!0});var zat=s(ej);OTo=r(zat,"MobileBertForPreTraining"),zat.forEach(t),VTo=r(n8e," (MobileBERT model)"),n8e.forEach(t),XTo=i(O),Lu=n(O,"LI",{});var s8e=s(Lu);ode=n(s8e,"STRONG",{});var Wat=s(ode);zTo=r(Wat,"mpnet"),Wat.forEach(t),WTo=r(s8e," \u2014 "),oj=n(s8e,"A",{href:!0});var Qat=s(oj);QTo=r(Qat,"MPNetForMaskedLM"),Qat.forEach(t),HTo=r(s8e," (MPNet model)"),s8e.forEach(t),UTo=i(O),xu=n(O,"LI",{});var l8e=s(xu);rde=n(l8e,"STRONG",{});var Hat=s(rde);JTo=r(Hat,"openai-gpt"),Hat.forEach(t),YTo=r(l8e," \u2014 "),rj=n(l8e,"A",{href:!0});var Uat=s(rj);KTo=r(Uat,"OpenAIGPTLMHeadModel"),Uat.forEach(t),ZTo=r(l8e," (OpenAI GPT model)"),l8e.forEach(t),eMo=i(O),$u=n(O,"LI",{});var i8e=s($u);tde=n(i8e,"STRONG",{});var Jat=s(tde);oMo=r(Jat,"retribert"),Jat.forEach(t),rMo=r(i8e," \u2014 "),tj=n(i8e,"A",{href:!0});var Yat=s(tj);tMo=r(Yat,"RetriBertModel"),Yat.forEach(t),aMo=r(i8e," (RetriBERT model)"),i8e.forEach(t),nMo=i(O),ku=n(O,"LI",{});var d8e=s(ku);ade=n(d8e,"STRONG",{});var Kat=s(ade);sMo=r(Kat,"roberta"),Kat.forEach(t),lMo=r(d8e," \u2014 "),aj=n(d8e,"A",{href:!0});var Zat=s(aj);iMo=r(Zat,"RobertaForMaskedLM"),Zat.forEach(t),dMo=r(d8e," (RoBERTa model)"),d8e.forEach(t),cMo=i(O),Su=n(O,"LI",{});var c8e=s(Su);nde=n(c8e,"STRONG",{});var ent=s(nde);fMo=r(ent,"splinter"),ent.forEach(t),mMo=r(c8e," \u2014 "),nj=n(c8e,"A",{href:!0});var ont=s(nj);gMo=r(ont,"SplinterForPreTraining"),ont.forEach(t),hMo=r(c8e," (Splinter model)"),c8e.forEach(t),pMo=i(O),Ru=n(O,"LI",{});var f8e=s(Ru);sde=n(f8e,"STRONG",{});var rnt=s(sde);_Mo=r(rnt,"squeezebert"),rnt.forEach(t),uMo=r(f8e," \u2014 "),sj=n(f8e,"A",{href:!0});var tnt=s(sj);bMo=r(tnt,"SqueezeBertForMaskedLM"),tnt.forEach(t),vMo=r(f8e," (SqueezeBERT model)"),f8e.forEach(t),FMo=i(O),Pu=n(O,"LI",{});var m8e=s(Pu);lde=n(m8e,"STRONG",{});var ant=s(lde);TMo=r(ant,"t5"),ant.forEach(t),MMo=r(m8e," \u2014 "),lj=n(m8e,"A",{href:!0});var nnt=s(lj);EMo=r(nnt,"T5ForConditionalGeneration"),nnt.forEach(t),CMo=r(m8e," (T5 model)"),m8e.forEach(t),wMo=i(O),Bu=n(O,"LI",{});var g8e=s(Bu);ide=n(g8e,"STRONG",{});var snt=s(ide);AMo=r(snt,"tapas"),snt.forEach(t),yMo=r(g8e," \u2014 "),ij=n(g8e,"A",{href:!0});var lnt=s(ij);LMo=r(lnt,"TapasForMaskedLM"),lnt.forEach(t),xMo=r(g8e," (TAPAS model)"),g8e.forEach(t),$Mo=i(O),Iu=n(O,"LI",{});var h8e=s(Iu);dde=n(h8e,"STRONG",{});var int=s(dde);kMo=r(int,"transfo-xl"),int.forEach(t),SMo=r(h8e," \u2014 "),dj=n(h8e,"A",{href:!0});var dnt=s(dj);RMo=r(dnt,"TransfoXLLMHeadModel"),dnt.forEach(t),PMo=r(h8e," (Transformer-XL model)"),h8e.forEach(t),BMo=i(O),Nu=n(O,"LI",{});var p8e=s(Nu);cde=n(p8e,"STRONG",{});var cnt=s(cde);IMo=r(cnt,"unispeech"),cnt.forEach(t),NMo=r(p8e," \u2014 "),cj=n(p8e,"A",{href:!0});var fnt=s(cj);qMo=r(fnt,"UniSpeechForPreTraining"),fnt.forEach(t),jMo=r(p8e," (UniSpeech model)"),p8e.forEach(t),DMo=i(O),qu=n(O,"LI",{});var _8e=s(qu);fde=n(_8e,"STRONG",{});var mnt=s(fde);GMo=r(mnt,"unispeech-sat"),mnt.forEach(t),OMo=r(_8e," \u2014 "),fj=n(_8e,"A",{href:!0});var gnt=s(fj);VMo=r(gnt,"UniSpeechSatForPreTraining"),gnt.forEach(t),XMo=r(_8e," (UniSpeechSat model)"),_8e.forEach(t),zMo=i(O),ju=n(O,"LI",{});var u8e=s(ju);mde=n(u8e,"STRONG",{});var hnt=s(mde);WMo=r(hnt,"visual_bert"),hnt.forEach(t),QMo=r(u8e," \u2014 "),mj=n(u8e,"A",{href:!0});var pnt=s(mj);HMo=r(pnt,"VisualBertForPreTraining"),pnt.forEach(t),UMo=r(u8e," (VisualBert model)"),u8e.forEach(t),JMo=i(O),Du=n(O,"LI",{});var b8e=s(Du);gde=n(b8e,"STRONG",{});var _nt=s(gde);YMo=r(_nt,"vit_mae"),_nt.forEach(t),KMo=r(b8e," \u2014 "),gj=n(b8e,"A",{href:!0});var unt=s(gj);ZMo=r(unt,"ViTMAEForPreTraining"),unt.forEach(t),eEo=r(b8e," (ViTMAE model)"),b8e.forEach(t),oEo=i(O),Gu=n(O,"LI",{});var v8e=s(Gu);hde=n(v8e,"STRONG",{});var bnt=s(hde);rEo=r(bnt,"wav2vec2"),bnt.forEach(t),tEo=r(v8e," \u2014 "),hj=n(v8e,"A",{href:!0});var vnt=s(hj);aEo=r(vnt,"Wav2Vec2ForPreTraining"),vnt.forEach(t),nEo=r(v8e," (Wav2Vec2 model)"),v8e.forEach(t),sEo=i(O),Ou=n(O,"LI",{});var F8e=s(Ou);pde=n(F8e,"STRONG",{});var Fnt=s(pde);lEo=r(Fnt,"wav2vec2-conformer"),Fnt.forEach(t),iEo=r(F8e," \u2014 "),pj=n(F8e,"A",{href:!0});var Tnt=s(pj);dEo=r(Tnt,"Wav2Vec2ConformerForPreTraining"),Tnt.forEach(t),cEo=r(F8e," (Wav2Vec2-Conformer model)"),F8e.forEach(t),fEo=i(O),Vu=n(O,"LI",{});var T8e=s(Vu);_de=n(T8e,"STRONG",{});var Mnt=s(_de);mEo=r(Mnt,"xlm"),Mnt.forEach(t),gEo=r(T8e," \u2014 "),_j=n(T8e,"A",{href:!0});var Ent=s(_j);hEo=r(Ent,"XLMWithLMHeadModel"),Ent.forEach(t),pEo=r(T8e," (XLM model)"),T8e.forEach(t),_Eo=i(O),Xu=n(O,"LI",{});var M8e=s(Xu);ude=n(M8e,"STRONG",{});var Cnt=s(ude);uEo=r(Cnt,"xlm-roberta"),Cnt.forEach(t),bEo=r(M8e," \u2014 "),uj=n(M8e,"A",{href:!0});var wnt=s(uj);vEo=r(wnt,"XLMRobertaForMaskedLM"),wnt.forEach(t),FEo=r(M8e," (XLM-RoBERTa model)"),M8e.forEach(t),TEo=i(O),zu=n(O,"LI",{});var E8e=s(zu);bde=n(E8e,"STRONG",{});var Ant=s(bde);MEo=r(Ant,"xlm-roberta-xl"),Ant.forEach(t),EEo=r(E8e," \u2014 "),bj=n(E8e,"A",{href:!0});var ynt=s(bj);CEo=r(ynt,"XLMRobertaXLForMaskedLM"),ynt.forEach(t),wEo=r(E8e," (XLM-RoBERTa-XL model)"),E8e.forEach(t),AEo=i(O),Wu=n(O,"LI",{});var C8e=s(Wu);vde=n(C8e,"STRONG",{});var Lnt=s(vde);yEo=r(Lnt,"xlnet"),Lnt.forEach(t),LEo=r(C8e," \u2014 "),vj=n(C8e,"A",{href:!0});var xnt=s(vj);xEo=r(xnt,"XLNetLMHeadModel"),xnt.forEach(t),$Eo=r(C8e," (XLNet model)"),C8e.forEach(t),O.forEach(t),kEo=i(ra),Qu=n(ra,"P",{});var w8e=s(Qu);SEo=r(w8e,"The model is set in evaluation mode by default using "),Fde=n(w8e,"CODE",{});var $nt=s(Fde);REo=r($nt,"model.eval()"),$nt.forEach(t),PEo=r(w8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tde=n(w8e,"CODE",{});var knt=s(Tde);BEo=r(knt,"model.train()"),knt.forEach(t),w8e.forEach(t),IEo=i(ra),T(Hu.$$.fragment,ra),ra.forEach(t),Os.forEach(t),Eqe=i(f),ki=n(f,"H2",{class:!0});var yDe=s(ki);Uu=n(yDe,"A",{id:!0,class:!0,href:!0});var Snt=s(Uu);Mde=n(Snt,"SPAN",{});var Rnt=s(Mde);T(fL.$$.fragment,Rnt),Rnt.forEach(t),Snt.forEach(t),NEo=i(yDe),Ede=n(yDe,"SPAN",{});var Pnt=s(Ede);qEo=r(Pnt,"AutoModelForCausalLM"),Pnt.forEach(t),yDe.forEach(t),Cqe=i(f),$o=n(f,"DIV",{class:!0});var Vs=s($o);T(mL.$$.fragment,Vs),jEo=i(Vs),Si=n(Vs,"P",{});var EZ=s(Si);DEo=r(EZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Fj=n(EZ,"A",{href:!0});var Bnt=s(Fj);GEo=r(Bnt,"from_pretrained()"),Bnt.forEach(t),OEo=r(EZ," class method or the "),Tj=n(EZ,"A",{href:!0});var Int=s(Tj);VEo=r(Int,"from_config()"),Int.forEach(t),XEo=r(EZ,` class
method.`),EZ.forEach(t),zEo=i(Vs),gL=n(Vs,"P",{});var LDe=s(gL);WEo=r(LDe,"This class cannot be instantiated directly using "),Cde=n(LDe,"CODE",{});var Nnt=s(Cde);QEo=r(Nnt,"__init__()"),Nnt.forEach(t),HEo=r(LDe," (throws an error)."),LDe.forEach(t),UEo=i(Vs),nt=n(Vs,"DIV",{class:!0});var N0=s(nt);T(hL.$$.fragment,N0),JEo=i(N0),wde=n(N0,"P",{});var qnt=s(wde);YEo=r(qnt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),qnt.forEach(t),KEo=i(N0),Ri=n(N0,"P",{});var CZ=s(Ri);ZEo=r(CZ,`Note:
Loading a model from its configuration file does `),Ade=n(CZ,"STRONG",{});var jnt=s(Ade);eCo=r(jnt,"not"),jnt.forEach(t),oCo=r(CZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Mj=n(CZ,"A",{href:!0});var Dnt=s(Mj);rCo=r(Dnt,"from_pretrained()"),Dnt.forEach(t),tCo=r(CZ," to load the model weights."),CZ.forEach(t),aCo=i(N0),T(Ju.$$.fragment,N0),N0.forEach(t),nCo=i(Vs),Ke=n(Vs,"DIV",{class:!0});var ta=s(Ke);T(pL.$$.fragment,ta),sCo=i(ta),yde=n(ta,"P",{});var Gnt=s(yde);lCo=r(Gnt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Gnt.forEach(t),iCo=i(ta),$a=n(ta,"P",{});var q0=s($a);dCo=r(q0,"The model class to instantiate is selected based on the "),Lde=n(q0,"CODE",{});var Ont=s(Lde);cCo=r(Ont,"model_type"),Ont.forEach(t),fCo=r(q0,` property of the config object (either
passed as an argument or loaded from `),xde=n(q0,"CODE",{});var Vnt=s(xde);mCo=r(Vnt,"pretrained_model_name_or_path"),Vnt.forEach(t),gCo=r(q0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$de=n(q0,"CODE",{});var Xnt=s($de);hCo=r(Xnt,"pretrained_model_name_or_path"),Xnt.forEach(t),pCo=r(q0,":"),q0.forEach(t),_Co=i(ta),z=n(ta,"UL",{});var W=s(z);Yu=n(W,"LI",{});var A8e=s(Yu);kde=n(A8e,"STRONG",{});var znt=s(kde);uCo=r(znt,"bart"),znt.forEach(t),bCo=r(A8e," \u2014 "),Ej=n(A8e,"A",{href:!0});var Wnt=s(Ej);vCo=r(Wnt,"BartForCausalLM"),Wnt.forEach(t),FCo=r(A8e," (BART model)"),A8e.forEach(t),TCo=i(W),Ku=n(W,"LI",{});var y8e=s(Ku);Sde=n(y8e,"STRONG",{});var Qnt=s(Sde);MCo=r(Qnt,"bert"),Qnt.forEach(t),ECo=r(y8e," \u2014 "),Cj=n(y8e,"A",{href:!0});var Hnt=s(Cj);CCo=r(Hnt,"BertLMHeadModel"),Hnt.forEach(t),wCo=r(y8e," (BERT model)"),y8e.forEach(t),ACo=i(W),Zu=n(W,"LI",{});var L8e=s(Zu);Rde=n(L8e,"STRONG",{});var Unt=s(Rde);yCo=r(Unt,"bert-generation"),Unt.forEach(t),LCo=r(L8e," \u2014 "),wj=n(L8e,"A",{href:!0});var Jnt=s(wj);xCo=r(Jnt,"BertGenerationDecoder"),Jnt.forEach(t),$Co=r(L8e," (Bert Generation model)"),L8e.forEach(t),kCo=i(W),e1=n(W,"LI",{});var x8e=s(e1);Pde=n(x8e,"STRONG",{});var Ynt=s(Pde);SCo=r(Ynt,"big_bird"),Ynt.forEach(t),RCo=r(x8e," \u2014 "),Aj=n(x8e,"A",{href:!0});var Knt=s(Aj);PCo=r(Knt,"BigBirdForCausalLM"),Knt.forEach(t),BCo=r(x8e," (BigBird model)"),x8e.forEach(t),ICo=i(W),o1=n(W,"LI",{});var $8e=s(o1);Bde=n($8e,"STRONG",{});var Znt=s(Bde);NCo=r(Znt,"bigbird_pegasus"),Znt.forEach(t),qCo=r($8e," \u2014 "),yj=n($8e,"A",{href:!0});var est=s(yj);jCo=r(est,"BigBirdPegasusForCausalLM"),est.forEach(t),DCo=r($8e," (BigBirdPegasus model)"),$8e.forEach(t),GCo=i(W),r1=n(W,"LI",{});var k8e=s(r1);Ide=n(k8e,"STRONG",{});var ost=s(Ide);OCo=r(ost,"blenderbot"),ost.forEach(t),VCo=r(k8e," \u2014 "),Lj=n(k8e,"A",{href:!0});var rst=s(Lj);XCo=r(rst,"BlenderbotForCausalLM"),rst.forEach(t),zCo=r(k8e," (Blenderbot model)"),k8e.forEach(t),WCo=i(W),t1=n(W,"LI",{});var S8e=s(t1);Nde=n(S8e,"STRONG",{});var tst=s(Nde);QCo=r(tst,"blenderbot-small"),tst.forEach(t),HCo=r(S8e," \u2014 "),xj=n(S8e,"A",{href:!0});var ast=s(xj);UCo=r(ast,"BlenderbotSmallForCausalLM"),ast.forEach(t),JCo=r(S8e," (BlenderbotSmall model)"),S8e.forEach(t),YCo=i(W),a1=n(W,"LI",{});var R8e=s(a1);qde=n(R8e,"STRONG",{});var nst=s(qde);KCo=r(nst,"camembert"),nst.forEach(t),ZCo=r(R8e," \u2014 "),$j=n(R8e,"A",{href:!0});var sst=s($j);ewo=r(sst,"CamembertForCausalLM"),sst.forEach(t),owo=r(R8e," (CamemBERT model)"),R8e.forEach(t),rwo=i(W),n1=n(W,"LI",{});var P8e=s(n1);jde=n(P8e,"STRONG",{});var lst=s(jde);two=r(lst,"ctrl"),lst.forEach(t),awo=r(P8e," \u2014 "),kj=n(P8e,"A",{href:!0});var ist=s(kj);nwo=r(ist,"CTRLLMHeadModel"),ist.forEach(t),swo=r(P8e," (CTRL model)"),P8e.forEach(t),lwo=i(W),s1=n(W,"LI",{});var B8e=s(s1);Dde=n(B8e,"STRONG",{});var dst=s(Dde);iwo=r(dst,"data2vec-text"),dst.forEach(t),dwo=r(B8e," \u2014 "),Sj=n(B8e,"A",{href:!0});var cst=s(Sj);cwo=r(cst,"Data2VecTextForCausalLM"),cst.forEach(t),fwo=r(B8e," (Data2VecText model)"),B8e.forEach(t),mwo=i(W),l1=n(W,"LI",{});var I8e=s(l1);Gde=n(I8e,"STRONG",{});var fst=s(Gde);gwo=r(fst,"electra"),fst.forEach(t),hwo=r(I8e," \u2014 "),Rj=n(I8e,"A",{href:!0});var mst=s(Rj);pwo=r(mst,"ElectraForCausalLM"),mst.forEach(t),_wo=r(I8e," (ELECTRA model)"),I8e.forEach(t),uwo=i(W),i1=n(W,"LI",{});var N8e=s(i1);Ode=n(N8e,"STRONG",{});var gst=s(Ode);bwo=r(gst,"gpt2"),gst.forEach(t),vwo=r(N8e," \u2014 "),Pj=n(N8e,"A",{href:!0});var hst=s(Pj);Fwo=r(hst,"GPT2LMHeadModel"),hst.forEach(t),Two=r(N8e," (OpenAI GPT-2 model)"),N8e.forEach(t),Mwo=i(W),d1=n(W,"LI",{});var q8e=s(d1);Vde=n(q8e,"STRONG",{});var pst=s(Vde);Ewo=r(pst,"gpt_neo"),pst.forEach(t),Cwo=r(q8e," \u2014 "),Bj=n(q8e,"A",{href:!0});var _st=s(Bj);wwo=r(_st,"GPTNeoForCausalLM"),_st.forEach(t),Awo=r(q8e," (GPT Neo model)"),q8e.forEach(t),ywo=i(W),c1=n(W,"LI",{});var j8e=s(c1);Xde=n(j8e,"STRONG",{});var ust=s(Xde);Lwo=r(ust,"gpt_neox"),ust.forEach(t),xwo=r(j8e," \u2014 "),Ij=n(j8e,"A",{href:!0});var bst=s(Ij);$wo=r(bst,"GPTNeoXForCausalLM"),bst.forEach(t),kwo=r(j8e," (GPT NeoX model)"),j8e.forEach(t),Swo=i(W),f1=n(W,"LI",{});var D8e=s(f1);zde=n(D8e,"STRONG",{});var vst=s(zde);Rwo=r(vst,"gptj"),vst.forEach(t),Pwo=r(D8e," \u2014 "),Nj=n(D8e,"A",{href:!0});var Fst=s(Nj);Bwo=r(Fst,"GPTJForCausalLM"),Fst.forEach(t),Iwo=r(D8e," (GPT-J model)"),D8e.forEach(t),Nwo=i(W),m1=n(W,"LI",{});var G8e=s(m1);Wde=n(G8e,"STRONG",{});var Tst=s(Wde);qwo=r(Tst,"marian"),Tst.forEach(t),jwo=r(G8e," \u2014 "),qj=n(G8e,"A",{href:!0});var Mst=s(qj);Dwo=r(Mst,"MarianForCausalLM"),Mst.forEach(t),Gwo=r(G8e," (Marian model)"),G8e.forEach(t),Owo=i(W),g1=n(W,"LI",{});var O8e=s(g1);Qde=n(O8e,"STRONG",{});var Est=s(Qde);Vwo=r(Est,"mbart"),Est.forEach(t),Xwo=r(O8e," \u2014 "),jj=n(O8e,"A",{href:!0});var Cst=s(jj);zwo=r(Cst,"MBartForCausalLM"),Cst.forEach(t),Wwo=r(O8e," (mBART model)"),O8e.forEach(t),Qwo=i(W),h1=n(W,"LI",{});var V8e=s(h1);Hde=n(V8e,"STRONG",{});var wst=s(Hde);Hwo=r(wst,"megatron-bert"),wst.forEach(t),Uwo=r(V8e," \u2014 "),Dj=n(V8e,"A",{href:!0});var Ast=s(Dj);Jwo=r(Ast,"MegatronBertForCausalLM"),Ast.forEach(t),Ywo=r(V8e," (MegatronBert model)"),V8e.forEach(t),Kwo=i(W),p1=n(W,"LI",{});var X8e=s(p1);Ude=n(X8e,"STRONG",{});var yst=s(Ude);Zwo=r(yst,"openai-gpt"),yst.forEach(t),e0o=r(X8e," \u2014 "),Gj=n(X8e,"A",{href:!0});var Lst=s(Gj);o0o=r(Lst,"OpenAIGPTLMHeadModel"),Lst.forEach(t),r0o=r(X8e," (OpenAI GPT model)"),X8e.forEach(t),t0o=i(W),_1=n(W,"LI",{});var z8e=s(_1);Jde=n(z8e,"STRONG",{});var xst=s(Jde);a0o=r(xst,"opt"),xst.forEach(t),n0o=r(z8e," \u2014 "),Oj=n(z8e,"A",{href:!0});var $st=s(Oj);s0o=r($st,"OPTForCausalLM"),$st.forEach(t),l0o=r(z8e," (OPT model)"),z8e.forEach(t),i0o=i(W),u1=n(W,"LI",{});var W8e=s(u1);Yde=n(W8e,"STRONG",{});var kst=s(Yde);d0o=r(kst,"pegasus"),kst.forEach(t),c0o=r(W8e," \u2014 "),Vj=n(W8e,"A",{href:!0});var Sst=s(Vj);f0o=r(Sst,"PegasusForCausalLM"),Sst.forEach(t),m0o=r(W8e," (Pegasus model)"),W8e.forEach(t),g0o=i(W),b1=n(W,"LI",{});var Q8e=s(b1);Kde=n(Q8e,"STRONG",{});var Rst=s(Kde);h0o=r(Rst,"plbart"),Rst.forEach(t),p0o=r(Q8e," \u2014 "),Xj=n(Q8e,"A",{href:!0});var Pst=s(Xj);_0o=r(Pst,"PLBartForCausalLM"),Pst.forEach(t),u0o=r(Q8e," (PLBart model)"),Q8e.forEach(t),b0o=i(W),v1=n(W,"LI",{});var H8e=s(v1);Zde=n(H8e,"STRONG",{});var Bst=s(Zde);v0o=r(Bst,"prophetnet"),Bst.forEach(t),F0o=r(H8e," \u2014 "),zj=n(H8e,"A",{href:!0});var Ist=s(zj);T0o=r(Ist,"ProphetNetForCausalLM"),Ist.forEach(t),M0o=r(H8e," (ProphetNet model)"),H8e.forEach(t),E0o=i(W),F1=n(W,"LI",{});var U8e=s(F1);ece=n(U8e,"STRONG",{});var Nst=s(ece);C0o=r(Nst,"qdqbert"),Nst.forEach(t),w0o=r(U8e," \u2014 "),Wj=n(U8e,"A",{href:!0});var qst=s(Wj);A0o=r(qst,"QDQBertLMHeadModel"),qst.forEach(t),y0o=r(U8e," (QDQBert model)"),U8e.forEach(t),L0o=i(W),T1=n(W,"LI",{});var J8e=s(T1);oce=n(J8e,"STRONG",{});var jst=s(oce);x0o=r(jst,"reformer"),jst.forEach(t),$0o=r(J8e," \u2014 "),Qj=n(J8e,"A",{href:!0});var Dst=s(Qj);k0o=r(Dst,"ReformerModelWithLMHead"),Dst.forEach(t),S0o=r(J8e," (Reformer model)"),J8e.forEach(t),R0o=i(W),M1=n(W,"LI",{});var Y8e=s(M1);rce=n(Y8e,"STRONG",{});var Gst=s(rce);P0o=r(Gst,"rembert"),Gst.forEach(t),B0o=r(Y8e," \u2014 "),Hj=n(Y8e,"A",{href:!0});var Ost=s(Hj);I0o=r(Ost,"RemBertForCausalLM"),Ost.forEach(t),N0o=r(Y8e," (RemBERT model)"),Y8e.forEach(t),q0o=i(W),E1=n(W,"LI",{});var K8e=s(E1);tce=n(K8e,"STRONG",{});var Vst=s(tce);j0o=r(Vst,"roberta"),Vst.forEach(t),D0o=r(K8e," \u2014 "),Uj=n(K8e,"A",{href:!0});var Xst=s(Uj);G0o=r(Xst,"RobertaForCausalLM"),Xst.forEach(t),O0o=r(K8e," (RoBERTa model)"),K8e.forEach(t),V0o=i(W),C1=n(W,"LI",{});var Z8e=s(C1);ace=n(Z8e,"STRONG",{});var zst=s(ace);X0o=r(zst,"roformer"),zst.forEach(t),z0o=r(Z8e," \u2014 "),Jj=n(Z8e,"A",{href:!0});var Wst=s(Jj);W0o=r(Wst,"RoFormerForCausalLM"),Wst.forEach(t),Q0o=r(Z8e," (RoFormer model)"),Z8e.forEach(t),H0o=i(W),w1=n(W,"LI",{});var e7e=s(w1);nce=n(e7e,"STRONG",{});var Qst=s(nce);U0o=r(Qst,"speech_to_text_2"),Qst.forEach(t),J0o=r(e7e," \u2014 "),Yj=n(e7e,"A",{href:!0});var Hst=s(Yj);Y0o=r(Hst,"Speech2Text2ForCausalLM"),Hst.forEach(t),K0o=r(e7e," (Speech2Text2 model)"),e7e.forEach(t),Z0o=i(W),A1=n(W,"LI",{});var o7e=s(A1);sce=n(o7e,"STRONG",{});var Ust=s(sce);eAo=r(Ust,"transfo-xl"),Ust.forEach(t),oAo=r(o7e," \u2014 "),Kj=n(o7e,"A",{href:!0});var Jst=s(Kj);rAo=r(Jst,"TransfoXLLMHeadModel"),Jst.forEach(t),tAo=r(o7e," (Transformer-XL model)"),o7e.forEach(t),aAo=i(W),y1=n(W,"LI",{});var r7e=s(y1);lce=n(r7e,"STRONG",{});var Yst=s(lce);nAo=r(Yst,"trocr"),Yst.forEach(t),sAo=r(r7e," \u2014 "),Zj=n(r7e,"A",{href:!0});var Kst=s(Zj);lAo=r(Kst,"TrOCRForCausalLM"),Kst.forEach(t),iAo=r(r7e," (TrOCR model)"),r7e.forEach(t),dAo=i(W),L1=n(W,"LI",{});var t7e=s(L1);ice=n(t7e,"STRONG",{});var Zst=s(ice);cAo=r(Zst,"xglm"),Zst.forEach(t),fAo=r(t7e," \u2014 "),eD=n(t7e,"A",{href:!0});var elt=s(eD);mAo=r(elt,"XGLMForCausalLM"),elt.forEach(t),gAo=r(t7e," (XGLM model)"),t7e.forEach(t),hAo=i(W),x1=n(W,"LI",{});var a7e=s(x1);dce=n(a7e,"STRONG",{});var olt=s(dce);pAo=r(olt,"xlm"),olt.forEach(t),_Ao=r(a7e," \u2014 "),oD=n(a7e,"A",{href:!0});var rlt=s(oD);uAo=r(rlt,"XLMWithLMHeadModel"),rlt.forEach(t),bAo=r(a7e," (XLM model)"),a7e.forEach(t),vAo=i(W),$1=n(W,"LI",{});var n7e=s($1);cce=n(n7e,"STRONG",{});var tlt=s(cce);FAo=r(tlt,"xlm-prophetnet"),tlt.forEach(t),TAo=r(n7e," \u2014 "),rD=n(n7e,"A",{href:!0});var alt=s(rD);MAo=r(alt,"XLMProphetNetForCausalLM"),alt.forEach(t),EAo=r(n7e," (XLMProphetNet model)"),n7e.forEach(t),CAo=i(W),k1=n(W,"LI",{});var s7e=s(k1);fce=n(s7e,"STRONG",{});var nlt=s(fce);wAo=r(nlt,"xlm-roberta"),nlt.forEach(t),AAo=r(s7e," \u2014 "),tD=n(s7e,"A",{href:!0});var slt=s(tD);yAo=r(slt,"XLMRobertaForCausalLM"),slt.forEach(t),LAo=r(s7e," (XLM-RoBERTa model)"),s7e.forEach(t),xAo=i(W),S1=n(W,"LI",{});var l7e=s(S1);mce=n(l7e,"STRONG",{});var llt=s(mce);$Ao=r(llt,"xlm-roberta-xl"),llt.forEach(t),kAo=r(l7e," \u2014 "),aD=n(l7e,"A",{href:!0});var ilt=s(aD);SAo=r(ilt,"XLMRobertaXLForCausalLM"),ilt.forEach(t),RAo=r(l7e," (XLM-RoBERTa-XL model)"),l7e.forEach(t),PAo=i(W),R1=n(W,"LI",{});var i7e=s(R1);gce=n(i7e,"STRONG",{});var dlt=s(gce);BAo=r(dlt,"xlnet"),dlt.forEach(t),IAo=r(i7e," \u2014 "),nD=n(i7e,"A",{href:!0});var clt=s(nD);NAo=r(clt,"XLNetLMHeadModel"),clt.forEach(t),qAo=r(i7e," (XLNet model)"),i7e.forEach(t),W.forEach(t),jAo=i(ta),P1=n(ta,"P",{});var d7e=s(P1);DAo=r(d7e,"The model is set in evaluation mode by default using "),hce=n(d7e,"CODE",{});var flt=s(hce);GAo=r(flt,"model.eval()"),flt.forEach(t),OAo=r(d7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pce=n(d7e,"CODE",{});var mlt=s(pce);VAo=r(mlt,"model.train()"),mlt.forEach(t),d7e.forEach(t),XAo=i(ta),T(B1.$$.fragment,ta),ta.forEach(t),Vs.forEach(t),wqe=i(f),Pi=n(f,"H2",{class:!0});var xDe=s(Pi);I1=n(xDe,"A",{id:!0,class:!0,href:!0});var glt=s(I1);_ce=n(glt,"SPAN",{});var hlt=s(_ce);T(_L.$$.fragment,hlt),hlt.forEach(t),glt.forEach(t),zAo=i(xDe),uce=n(xDe,"SPAN",{});var plt=s(uce);WAo=r(plt,"AutoModelForMaskedLM"),plt.forEach(t),xDe.forEach(t),Aqe=i(f),ko=n(f,"DIV",{class:!0});var Xs=s(ko);T(uL.$$.fragment,Xs),QAo=i(Xs),Bi=n(Xs,"P",{});var wZ=s(Bi);HAo=r(wZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),sD=n(wZ,"A",{href:!0});var _lt=s(sD);UAo=r(_lt,"from_pretrained()"),_lt.forEach(t),JAo=r(wZ," class method or the "),lD=n(wZ,"A",{href:!0});var ult=s(lD);YAo=r(ult,"from_config()"),ult.forEach(t),KAo=r(wZ,` class
method.`),wZ.forEach(t),ZAo=i(Xs),bL=n(Xs,"P",{});var $De=s(bL);eyo=r($De,"This class cannot be instantiated directly using "),bce=n($De,"CODE",{});var blt=s(bce);oyo=r(blt,"__init__()"),blt.forEach(t),ryo=r($De," (throws an error)."),$De.forEach(t),tyo=i(Xs),st=n(Xs,"DIV",{class:!0});var j0=s(st);T(vL.$$.fragment,j0),ayo=i(j0),vce=n(j0,"P",{});var vlt=s(vce);nyo=r(vlt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),vlt.forEach(t),syo=i(j0),Ii=n(j0,"P",{});var AZ=s(Ii);lyo=r(AZ,`Note:
Loading a model from its configuration file does `),Fce=n(AZ,"STRONG",{});var Flt=s(Fce);iyo=r(Flt,"not"),Flt.forEach(t),dyo=r(AZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),iD=n(AZ,"A",{href:!0});var Tlt=s(iD);cyo=r(Tlt,"from_pretrained()"),Tlt.forEach(t),fyo=r(AZ," to load the model weights."),AZ.forEach(t),myo=i(j0),T(N1.$$.fragment,j0),j0.forEach(t),gyo=i(Xs),Ze=n(Xs,"DIV",{class:!0});var aa=s(Ze);T(FL.$$.fragment,aa),hyo=i(aa),Tce=n(aa,"P",{});var Mlt=s(Tce);pyo=r(Mlt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Mlt.forEach(t),_yo=i(aa),ka=n(aa,"P",{});var D0=s(ka);uyo=r(D0,"The model class to instantiate is selected based on the "),Mce=n(D0,"CODE",{});var Elt=s(Mce);byo=r(Elt,"model_type"),Elt.forEach(t),vyo=r(D0,` property of the config object (either
passed as an argument or loaded from `),Ece=n(D0,"CODE",{});var Clt=s(Ece);Fyo=r(Clt,"pretrained_model_name_or_path"),Clt.forEach(t),Tyo=r(D0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cce=n(D0,"CODE",{});var wlt=s(Cce);Myo=r(wlt,"pretrained_model_name_or_path"),wlt.forEach(t),Eyo=r(D0,":"),D0.forEach(t),Cyo=i(aa),Q=n(aa,"UL",{});var U=s(Q);q1=n(U,"LI",{});var c7e=s(q1);wce=n(c7e,"STRONG",{});var Alt=s(wce);wyo=r(Alt,"albert"),Alt.forEach(t),Ayo=r(c7e," \u2014 "),dD=n(c7e,"A",{href:!0});var ylt=s(dD);yyo=r(ylt,"AlbertForMaskedLM"),ylt.forEach(t),Lyo=r(c7e," (ALBERT model)"),c7e.forEach(t),xyo=i(U),j1=n(U,"LI",{});var f7e=s(j1);Ace=n(f7e,"STRONG",{});var Llt=s(Ace);$yo=r(Llt,"bart"),Llt.forEach(t),kyo=r(f7e," \u2014 "),cD=n(f7e,"A",{href:!0});var xlt=s(cD);Syo=r(xlt,"BartForConditionalGeneration"),xlt.forEach(t),Ryo=r(f7e," (BART model)"),f7e.forEach(t),Pyo=i(U),D1=n(U,"LI",{});var m7e=s(D1);yce=n(m7e,"STRONG",{});var $lt=s(yce);Byo=r($lt,"bert"),$lt.forEach(t),Iyo=r(m7e," \u2014 "),fD=n(m7e,"A",{href:!0});var klt=s(fD);Nyo=r(klt,"BertForMaskedLM"),klt.forEach(t),qyo=r(m7e," (BERT model)"),m7e.forEach(t),jyo=i(U),G1=n(U,"LI",{});var g7e=s(G1);Lce=n(g7e,"STRONG",{});var Slt=s(Lce);Dyo=r(Slt,"big_bird"),Slt.forEach(t),Gyo=r(g7e," \u2014 "),mD=n(g7e,"A",{href:!0});var Rlt=s(mD);Oyo=r(Rlt,"BigBirdForMaskedLM"),Rlt.forEach(t),Vyo=r(g7e," (BigBird model)"),g7e.forEach(t),Xyo=i(U),O1=n(U,"LI",{});var h7e=s(O1);xce=n(h7e,"STRONG",{});var Plt=s(xce);zyo=r(Plt,"camembert"),Plt.forEach(t),Wyo=r(h7e," \u2014 "),gD=n(h7e,"A",{href:!0});var Blt=s(gD);Qyo=r(Blt,"CamembertForMaskedLM"),Blt.forEach(t),Hyo=r(h7e," (CamemBERT model)"),h7e.forEach(t),Uyo=i(U),V1=n(U,"LI",{});var p7e=s(V1);$ce=n(p7e,"STRONG",{});var Ilt=s($ce);Jyo=r(Ilt,"convbert"),Ilt.forEach(t),Yyo=r(p7e," \u2014 "),hD=n(p7e,"A",{href:!0});var Nlt=s(hD);Kyo=r(Nlt,"ConvBertForMaskedLM"),Nlt.forEach(t),Zyo=r(p7e," (ConvBERT model)"),p7e.forEach(t),eLo=i(U),X1=n(U,"LI",{});var _7e=s(X1);kce=n(_7e,"STRONG",{});var qlt=s(kce);oLo=r(qlt,"data2vec-text"),qlt.forEach(t),rLo=r(_7e," \u2014 "),pD=n(_7e,"A",{href:!0});var jlt=s(pD);tLo=r(jlt,"Data2VecTextForMaskedLM"),jlt.forEach(t),aLo=r(_7e," (Data2VecText model)"),_7e.forEach(t),nLo=i(U),z1=n(U,"LI",{});var u7e=s(z1);Sce=n(u7e,"STRONG",{});var Dlt=s(Sce);sLo=r(Dlt,"deberta"),Dlt.forEach(t),lLo=r(u7e," \u2014 "),_D=n(u7e,"A",{href:!0});var Glt=s(_D);iLo=r(Glt,"DebertaForMaskedLM"),Glt.forEach(t),dLo=r(u7e," (DeBERTa model)"),u7e.forEach(t),cLo=i(U),W1=n(U,"LI",{});var b7e=s(W1);Rce=n(b7e,"STRONG",{});var Olt=s(Rce);fLo=r(Olt,"deberta-v2"),Olt.forEach(t),mLo=r(b7e," \u2014 "),uD=n(b7e,"A",{href:!0});var Vlt=s(uD);gLo=r(Vlt,"DebertaV2ForMaskedLM"),Vlt.forEach(t),hLo=r(b7e," (DeBERTa-v2 model)"),b7e.forEach(t),pLo=i(U),Q1=n(U,"LI",{});var v7e=s(Q1);Pce=n(v7e,"STRONG",{});var Xlt=s(Pce);_Lo=r(Xlt,"distilbert"),Xlt.forEach(t),uLo=r(v7e," \u2014 "),bD=n(v7e,"A",{href:!0});var zlt=s(bD);bLo=r(zlt,"DistilBertForMaskedLM"),zlt.forEach(t),vLo=r(v7e," (DistilBERT model)"),v7e.forEach(t),FLo=i(U),H1=n(U,"LI",{});var F7e=s(H1);Bce=n(F7e,"STRONG",{});var Wlt=s(Bce);TLo=r(Wlt,"electra"),Wlt.forEach(t),MLo=r(F7e," \u2014 "),vD=n(F7e,"A",{href:!0});var Qlt=s(vD);ELo=r(Qlt,"ElectraForMaskedLM"),Qlt.forEach(t),CLo=r(F7e," (ELECTRA model)"),F7e.forEach(t),wLo=i(U),U1=n(U,"LI",{});var T7e=s(U1);Ice=n(T7e,"STRONG",{});var Hlt=s(Ice);ALo=r(Hlt,"flaubert"),Hlt.forEach(t),yLo=r(T7e," \u2014 "),FD=n(T7e,"A",{href:!0});var Ult=s(FD);LLo=r(Ult,"FlaubertWithLMHeadModel"),Ult.forEach(t),xLo=r(T7e," (FlauBERT model)"),T7e.forEach(t),$Lo=i(U),J1=n(U,"LI",{});var M7e=s(J1);Nce=n(M7e,"STRONG",{});var Jlt=s(Nce);kLo=r(Jlt,"fnet"),Jlt.forEach(t),SLo=r(M7e," \u2014 "),TD=n(M7e,"A",{href:!0});var Ylt=s(TD);RLo=r(Ylt,"FNetForMaskedLM"),Ylt.forEach(t),PLo=r(M7e," (FNet model)"),M7e.forEach(t),BLo=i(U),Y1=n(U,"LI",{});var E7e=s(Y1);qce=n(E7e,"STRONG",{});var Klt=s(qce);ILo=r(Klt,"funnel"),Klt.forEach(t),NLo=r(E7e," \u2014 "),MD=n(E7e,"A",{href:!0});var Zlt=s(MD);qLo=r(Zlt,"FunnelForMaskedLM"),Zlt.forEach(t),jLo=r(E7e," (Funnel Transformer model)"),E7e.forEach(t),DLo=i(U),K1=n(U,"LI",{});var C7e=s(K1);jce=n(C7e,"STRONG",{});var eit=s(jce);GLo=r(eit,"ibert"),eit.forEach(t),OLo=r(C7e," \u2014 "),ED=n(C7e,"A",{href:!0});var oit=s(ED);VLo=r(oit,"IBertForMaskedLM"),oit.forEach(t),XLo=r(C7e," (I-BERT model)"),C7e.forEach(t),zLo=i(U),Z1=n(U,"LI",{});var w7e=s(Z1);Dce=n(w7e,"STRONG",{});var rit=s(Dce);WLo=r(rit,"layoutlm"),rit.forEach(t),QLo=r(w7e," \u2014 "),CD=n(w7e,"A",{href:!0});var tit=s(CD);HLo=r(tit,"LayoutLMForMaskedLM"),tit.forEach(t),ULo=r(w7e," (LayoutLM model)"),w7e.forEach(t),JLo=i(U),eb=n(U,"LI",{});var A7e=s(eb);Gce=n(A7e,"STRONG",{});var ait=s(Gce);YLo=r(ait,"longformer"),ait.forEach(t),KLo=r(A7e," \u2014 "),wD=n(A7e,"A",{href:!0});var nit=s(wD);ZLo=r(nit,"LongformerForMaskedLM"),nit.forEach(t),e8o=r(A7e," (Longformer model)"),A7e.forEach(t),o8o=i(U),ob=n(U,"LI",{});var y7e=s(ob);Oce=n(y7e,"STRONG",{});var sit=s(Oce);r8o=r(sit,"mbart"),sit.forEach(t),t8o=r(y7e," \u2014 "),AD=n(y7e,"A",{href:!0});var lit=s(AD);a8o=r(lit,"MBartForConditionalGeneration"),lit.forEach(t),n8o=r(y7e," (mBART model)"),y7e.forEach(t),s8o=i(U),rb=n(U,"LI",{});var L7e=s(rb);Vce=n(L7e,"STRONG",{});var iit=s(Vce);l8o=r(iit,"megatron-bert"),iit.forEach(t),i8o=r(L7e," \u2014 "),yD=n(L7e,"A",{href:!0});var dit=s(yD);d8o=r(dit,"MegatronBertForMaskedLM"),dit.forEach(t),c8o=r(L7e," (MegatronBert model)"),L7e.forEach(t),f8o=i(U),tb=n(U,"LI",{});var x7e=s(tb);Xce=n(x7e,"STRONG",{});var cit=s(Xce);m8o=r(cit,"mobilebert"),cit.forEach(t),g8o=r(x7e," \u2014 "),LD=n(x7e,"A",{href:!0});var fit=s(LD);h8o=r(fit,"MobileBertForMaskedLM"),fit.forEach(t),p8o=r(x7e," (MobileBERT model)"),x7e.forEach(t),_8o=i(U),ab=n(U,"LI",{});var $7e=s(ab);zce=n($7e,"STRONG",{});var mit=s(zce);u8o=r(mit,"mpnet"),mit.forEach(t),b8o=r($7e," \u2014 "),xD=n($7e,"A",{href:!0});var git=s(xD);v8o=r(git,"MPNetForMaskedLM"),git.forEach(t),F8o=r($7e," (MPNet model)"),$7e.forEach(t),T8o=i(U),nb=n(U,"LI",{});var k7e=s(nb);Wce=n(k7e,"STRONG",{});var hit=s(Wce);M8o=r(hit,"nystromformer"),hit.forEach(t),E8o=r(k7e," \u2014 "),$D=n(k7e,"A",{href:!0});var pit=s($D);C8o=r(pit,"NystromformerForMaskedLM"),pit.forEach(t),w8o=r(k7e," (Nystromformer model)"),k7e.forEach(t),A8o=i(U),sb=n(U,"LI",{});var S7e=s(sb);Qce=n(S7e,"STRONG",{});var _it=s(Qce);y8o=r(_it,"perceiver"),_it.forEach(t),L8o=r(S7e," \u2014 "),kD=n(S7e,"A",{href:!0});var uit=s(kD);x8o=r(uit,"PerceiverForMaskedLM"),uit.forEach(t),$8o=r(S7e," (Perceiver model)"),S7e.forEach(t),k8o=i(U),lb=n(U,"LI",{});var R7e=s(lb);Hce=n(R7e,"STRONG",{});var bit=s(Hce);S8o=r(bit,"qdqbert"),bit.forEach(t),R8o=r(R7e," \u2014 "),SD=n(R7e,"A",{href:!0});var vit=s(SD);P8o=r(vit,"QDQBertForMaskedLM"),vit.forEach(t),B8o=r(R7e," (QDQBert model)"),R7e.forEach(t),I8o=i(U),ib=n(U,"LI",{});var P7e=s(ib);Uce=n(P7e,"STRONG",{});var Fit=s(Uce);N8o=r(Fit,"reformer"),Fit.forEach(t),q8o=r(P7e," \u2014 "),RD=n(P7e,"A",{href:!0});var Tit=s(RD);j8o=r(Tit,"ReformerForMaskedLM"),Tit.forEach(t),D8o=r(P7e," (Reformer model)"),P7e.forEach(t),G8o=i(U),db=n(U,"LI",{});var B7e=s(db);Jce=n(B7e,"STRONG",{});var Mit=s(Jce);O8o=r(Mit,"rembert"),Mit.forEach(t),V8o=r(B7e," \u2014 "),PD=n(B7e,"A",{href:!0});var Eit=s(PD);X8o=r(Eit,"RemBertForMaskedLM"),Eit.forEach(t),z8o=r(B7e," (RemBERT model)"),B7e.forEach(t),W8o=i(U),cb=n(U,"LI",{});var I7e=s(cb);Yce=n(I7e,"STRONG",{});var Cit=s(Yce);Q8o=r(Cit,"roberta"),Cit.forEach(t),H8o=r(I7e," \u2014 "),BD=n(I7e,"A",{href:!0});var wit=s(BD);U8o=r(wit,"RobertaForMaskedLM"),wit.forEach(t),J8o=r(I7e," (RoBERTa model)"),I7e.forEach(t),Y8o=i(U),fb=n(U,"LI",{});var N7e=s(fb);Kce=n(N7e,"STRONG",{});var Ait=s(Kce);K8o=r(Ait,"roformer"),Ait.forEach(t),Z8o=r(N7e," \u2014 "),ID=n(N7e,"A",{href:!0});var yit=s(ID);e7o=r(yit,"RoFormerForMaskedLM"),yit.forEach(t),o7o=r(N7e," (RoFormer model)"),N7e.forEach(t),r7o=i(U),mb=n(U,"LI",{});var q7e=s(mb);Zce=n(q7e,"STRONG",{});var Lit=s(Zce);t7o=r(Lit,"squeezebert"),Lit.forEach(t),a7o=r(q7e," \u2014 "),ND=n(q7e,"A",{href:!0});var xit=s(ND);n7o=r(xit,"SqueezeBertForMaskedLM"),xit.forEach(t),s7o=r(q7e," (SqueezeBERT model)"),q7e.forEach(t),l7o=i(U),gb=n(U,"LI",{});var j7e=s(gb);efe=n(j7e,"STRONG",{});var $it=s(efe);i7o=r($it,"tapas"),$it.forEach(t),d7o=r(j7e," \u2014 "),qD=n(j7e,"A",{href:!0});var kit=s(qD);c7o=r(kit,"TapasForMaskedLM"),kit.forEach(t),f7o=r(j7e," (TAPAS model)"),j7e.forEach(t),m7o=i(U),hb=n(U,"LI",{});var D7e=s(hb);ofe=n(D7e,"STRONG",{});var Sit=s(ofe);g7o=r(Sit,"wav2vec2"),Sit.forEach(t),h7o=r(D7e," \u2014 "),rfe=n(D7e,"CODE",{});var Rit=s(rfe);p7o=r(Rit,"Wav2Vec2ForMaskedLM"),Rit.forEach(t),_7o=r(D7e," (Wav2Vec2 model)"),D7e.forEach(t),u7o=i(U),pb=n(U,"LI",{});var G7e=s(pb);tfe=n(G7e,"STRONG",{});var Pit=s(tfe);b7o=r(Pit,"xlm"),Pit.forEach(t),v7o=r(G7e," \u2014 "),jD=n(G7e,"A",{href:!0});var Bit=s(jD);F7o=r(Bit,"XLMWithLMHeadModel"),Bit.forEach(t),T7o=r(G7e," (XLM model)"),G7e.forEach(t),M7o=i(U),_b=n(U,"LI",{});var O7e=s(_b);afe=n(O7e,"STRONG",{});var Iit=s(afe);E7o=r(Iit,"xlm-roberta"),Iit.forEach(t),C7o=r(O7e," \u2014 "),DD=n(O7e,"A",{href:!0});var Nit=s(DD);w7o=r(Nit,"XLMRobertaForMaskedLM"),Nit.forEach(t),A7o=r(O7e," (XLM-RoBERTa model)"),O7e.forEach(t),y7o=i(U),ub=n(U,"LI",{});var V7e=s(ub);nfe=n(V7e,"STRONG",{});var qit=s(nfe);L7o=r(qit,"xlm-roberta-xl"),qit.forEach(t),x7o=r(V7e," \u2014 "),GD=n(V7e,"A",{href:!0});var jit=s(GD);$7o=r(jit,"XLMRobertaXLForMaskedLM"),jit.forEach(t),k7o=r(V7e," (XLM-RoBERTa-XL model)"),V7e.forEach(t),S7o=i(U),bb=n(U,"LI",{});var X7e=s(bb);sfe=n(X7e,"STRONG",{});var Dit=s(sfe);R7o=r(Dit,"yoso"),Dit.forEach(t),P7o=r(X7e," \u2014 "),OD=n(X7e,"A",{href:!0});var Git=s(OD);B7o=r(Git,"YosoForMaskedLM"),Git.forEach(t),I7o=r(X7e," (YOSO model)"),X7e.forEach(t),U.forEach(t),N7o=i(aa),vb=n(aa,"P",{});var z7e=s(vb);q7o=r(z7e,"The model is set in evaluation mode by default using "),lfe=n(z7e,"CODE",{});var Oit=s(lfe);j7o=r(Oit,"model.eval()"),Oit.forEach(t),D7o=r(z7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ife=n(z7e,"CODE",{});var Vit=s(ife);G7o=r(Vit,"model.train()"),Vit.forEach(t),z7e.forEach(t),O7o=i(aa),T(Fb.$$.fragment,aa),aa.forEach(t),Xs.forEach(t),yqe=i(f),Ni=n(f,"H2",{class:!0});var kDe=s(Ni);Tb=n(kDe,"A",{id:!0,class:!0,href:!0});var Xit=s(Tb);dfe=n(Xit,"SPAN",{});var zit=s(dfe);T(TL.$$.fragment,zit),zit.forEach(t),Xit.forEach(t),V7o=i(kDe),cfe=n(kDe,"SPAN",{});var Wit=s(cfe);X7o=r(Wit,"AutoModelForSeq2SeqLM"),Wit.forEach(t),kDe.forEach(t),Lqe=i(f),So=n(f,"DIV",{class:!0});var zs=s(So);T(ML.$$.fragment,zs),z7o=i(zs),qi=n(zs,"P",{});var yZ=s(qi);W7o=r(yZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),VD=n(yZ,"A",{href:!0});var Qit=s(VD);Q7o=r(Qit,"from_pretrained()"),Qit.forEach(t),H7o=r(yZ," class method or the "),XD=n(yZ,"A",{href:!0});var Hit=s(XD);U7o=r(Hit,"from_config()"),Hit.forEach(t),J7o=r(yZ,` class
method.`),yZ.forEach(t),Y7o=i(zs),EL=n(zs,"P",{});var SDe=s(EL);K7o=r(SDe,"This class cannot be instantiated directly using "),ffe=n(SDe,"CODE",{});var Uit=s(ffe);Z7o=r(Uit,"__init__()"),Uit.forEach(t),e9o=r(SDe," (throws an error)."),SDe.forEach(t),o9o=i(zs),lt=n(zs,"DIV",{class:!0});var G0=s(lt);T(CL.$$.fragment,G0),r9o=i(G0),mfe=n(G0,"P",{});var Jit=s(mfe);t9o=r(Jit,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Jit.forEach(t),a9o=i(G0),ji=n(G0,"P",{});var LZ=s(ji);n9o=r(LZ,`Note:
Loading a model from its configuration file does `),gfe=n(LZ,"STRONG",{});var Yit=s(gfe);s9o=r(Yit,"not"),Yit.forEach(t),l9o=r(LZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),zD=n(LZ,"A",{href:!0});var Kit=s(zD);i9o=r(Kit,"from_pretrained()"),Kit.forEach(t),d9o=r(LZ," to load the model weights."),LZ.forEach(t),c9o=i(G0),T(Mb.$$.fragment,G0),G0.forEach(t),f9o=i(zs),eo=n(zs,"DIV",{class:!0});var na=s(eo);T(wL.$$.fragment,na),m9o=i(na),hfe=n(na,"P",{});var Zit=s(hfe);g9o=r(Zit,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Zit.forEach(t),h9o=i(na),Sa=n(na,"P",{});var O0=s(Sa);p9o=r(O0,"The model class to instantiate is selected based on the "),pfe=n(O0,"CODE",{});var edt=s(pfe);_9o=r(edt,"model_type"),edt.forEach(t),u9o=r(O0,` property of the config object (either
passed as an argument or loaded from `),_fe=n(O0,"CODE",{});var odt=s(_fe);b9o=r(odt,"pretrained_model_name_or_path"),odt.forEach(t),v9o=r(O0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ufe=n(O0,"CODE",{});var rdt=s(ufe);F9o=r(rdt,"pretrained_model_name_or_path"),rdt.forEach(t),T9o=r(O0,":"),O0.forEach(t),M9o=i(na),_e=n(na,"UL",{});var ve=s(_e);Eb=n(ve,"LI",{});var W7e=s(Eb);bfe=n(W7e,"STRONG",{});var tdt=s(bfe);E9o=r(tdt,"bart"),tdt.forEach(t),C9o=r(W7e," \u2014 "),WD=n(W7e,"A",{href:!0});var adt=s(WD);w9o=r(adt,"BartForConditionalGeneration"),adt.forEach(t),A9o=r(W7e," (BART model)"),W7e.forEach(t),y9o=i(ve),Cb=n(ve,"LI",{});var Q7e=s(Cb);vfe=n(Q7e,"STRONG",{});var ndt=s(vfe);L9o=r(ndt,"bigbird_pegasus"),ndt.forEach(t),x9o=r(Q7e," \u2014 "),QD=n(Q7e,"A",{href:!0});var sdt=s(QD);$9o=r(sdt,"BigBirdPegasusForConditionalGeneration"),sdt.forEach(t),k9o=r(Q7e," (BigBirdPegasus model)"),Q7e.forEach(t),S9o=i(ve),wb=n(ve,"LI",{});var H7e=s(wb);Ffe=n(H7e,"STRONG",{});var ldt=s(Ffe);R9o=r(ldt,"blenderbot"),ldt.forEach(t),P9o=r(H7e," \u2014 "),HD=n(H7e,"A",{href:!0});var idt=s(HD);B9o=r(idt,"BlenderbotForConditionalGeneration"),idt.forEach(t),I9o=r(H7e," (Blenderbot model)"),H7e.forEach(t),N9o=i(ve),Ab=n(ve,"LI",{});var U7e=s(Ab);Tfe=n(U7e,"STRONG",{});var ddt=s(Tfe);q9o=r(ddt,"blenderbot-small"),ddt.forEach(t),j9o=r(U7e," \u2014 "),UD=n(U7e,"A",{href:!0});var cdt=s(UD);D9o=r(cdt,"BlenderbotSmallForConditionalGeneration"),cdt.forEach(t),G9o=r(U7e," (BlenderbotSmall model)"),U7e.forEach(t),O9o=i(ve),yb=n(ve,"LI",{});var J7e=s(yb);Mfe=n(J7e,"STRONG",{});var fdt=s(Mfe);V9o=r(fdt,"encoder-decoder"),fdt.forEach(t),X9o=r(J7e," \u2014 "),JD=n(J7e,"A",{href:!0});var mdt=s(JD);z9o=r(mdt,"EncoderDecoderModel"),mdt.forEach(t),W9o=r(J7e," (Encoder decoder model)"),J7e.forEach(t),Q9o=i(ve),Lb=n(ve,"LI",{});var Y7e=s(Lb);Efe=n(Y7e,"STRONG",{});var gdt=s(Efe);H9o=r(gdt,"fsmt"),gdt.forEach(t),U9o=r(Y7e," \u2014 "),YD=n(Y7e,"A",{href:!0});var hdt=s(YD);J9o=r(hdt,"FSMTForConditionalGeneration"),hdt.forEach(t),Y9o=r(Y7e," (FairSeq Machine-Translation model)"),Y7e.forEach(t),K9o=i(ve),xb=n(ve,"LI",{});var K7e=s(xb);Cfe=n(K7e,"STRONG",{});var pdt=s(Cfe);Z9o=r(pdt,"led"),pdt.forEach(t),exo=r(K7e," \u2014 "),KD=n(K7e,"A",{href:!0});var _dt=s(KD);oxo=r(_dt,"LEDForConditionalGeneration"),_dt.forEach(t),rxo=r(K7e," (LED model)"),K7e.forEach(t),txo=i(ve),$b=n(ve,"LI",{});var Z7e=s($b);wfe=n(Z7e,"STRONG",{});var udt=s(wfe);axo=r(udt,"m2m_100"),udt.forEach(t),nxo=r(Z7e," \u2014 "),ZD=n(Z7e,"A",{href:!0});var bdt=s(ZD);sxo=r(bdt,"M2M100ForConditionalGeneration"),bdt.forEach(t),lxo=r(Z7e," (M2M100 model)"),Z7e.forEach(t),ixo=i(ve),kb=n(ve,"LI",{});var e9e=s(kb);Afe=n(e9e,"STRONG",{});var vdt=s(Afe);dxo=r(vdt,"marian"),vdt.forEach(t),cxo=r(e9e," \u2014 "),eG=n(e9e,"A",{href:!0});var Fdt=s(eG);fxo=r(Fdt,"MarianMTModel"),Fdt.forEach(t),mxo=r(e9e," (Marian model)"),e9e.forEach(t),gxo=i(ve),Sb=n(ve,"LI",{});var o9e=s(Sb);yfe=n(o9e,"STRONG",{});var Tdt=s(yfe);hxo=r(Tdt,"mbart"),Tdt.forEach(t),pxo=r(o9e," \u2014 "),oG=n(o9e,"A",{href:!0});var Mdt=s(oG);_xo=r(Mdt,"MBartForConditionalGeneration"),Mdt.forEach(t),uxo=r(o9e," (mBART model)"),o9e.forEach(t),bxo=i(ve),Rb=n(ve,"LI",{});var r9e=s(Rb);Lfe=n(r9e,"STRONG",{});var Edt=s(Lfe);vxo=r(Edt,"mt5"),Edt.forEach(t),Fxo=r(r9e," \u2014 "),rG=n(r9e,"A",{href:!0});var Cdt=s(rG);Txo=r(Cdt,"MT5ForConditionalGeneration"),Cdt.forEach(t),Mxo=r(r9e," (mT5 model)"),r9e.forEach(t),Exo=i(ve),Pb=n(ve,"LI",{});var t9e=s(Pb);xfe=n(t9e,"STRONG",{});var wdt=s(xfe);Cxo=r(wdt,"pegasus"),wdt.forEach(t),wxo=r(t9e," \u2014 "),tG=n(t9e,"A",{href:!0});var Adt=s(tG);Axo=r(Adt,"PegasusForConditionalGeneration"),Adt.forEach(t),yxo=r(t9e," (Pegasus model)"),t9e.forEach(t),Lxo=i(ve),Bb=n(ve,"LI",{});var a9e=s(Bb);$fe=n(a9e,"STRONG",{});var ydt=s($fe);xxo=r(ydt,"plbart"),ydt.forEach(t),$xo=r(a9e," \u2014 "),aG=n(a9e,"A",{href:!0});var Ldt=s(aG);kxo=r(Ldt,"PLBartForConditionalGeneration"),Ldt.forEach(t),Sxo=r(a9e," (PLBart model)"),a9e.forEach(t),Rxo=i(ve),Ib=n(ve,"LI",{});var n9e=s(Ib);kfe=n(n9e,"STRONG",{});var xdt=s(kfe);Pxo=r(xdt,"prophetnet"),xdt.forEach(t),Bxo=r(n9e," \u2014 "),nG=n(n9e,"A",{href:!0});var $dt=s(nG);Ixo=r($dt,"ProphetNetForConditionalGeneration"),$dt.forEach(t),Nxo=r(n9e," (ProphetNet model)"),n9e.forEach(t),qxo=i(ve),Nb=n(ve,"LI",{});var s9e=s(Nb);Sfe=n(s9e,"STRONG",{});var kdt=s(Sfe);jxo=r(kdt,"t5"),kdt.forEach(t),Dxo=r(s9e," \u2014 "),sG=n(s9e,"A",{href:!0});var Sdt=s(sG);Gxo=r(Sdt,"T5ForConditionalGeneration"),Sdt.forEach(t),Oxo=r(s9e," (T5 model)"),s9e.forEach(t),Vxo=i(ve),qb=n(ve,"LI",{});var l9e=s(qb);Rfe=n(l9e,"STRONG",{});var Rdt=s(Rfe);Xxo=r(Rdt,"xlm-prophetnet"),Rdt.forEach(t),zxo=r(l9e," \u2014 "),lG=n(l9e,"A",{href:!0});var Pdt=s(lG);Wxo=r(Pdt,"XLMProphetNetForConditionalGeneration"),Pdt.forEach(t),Qxo=r(l9e," (XLMProphetNet model)"),l9e.forEach(t),ve.forEach(t),Hxo=i(na),jb=n(na,"P",{});var i9e=s(jb);Uxo=r(i9e,"The model is set in evaluation mode by default using "),Pfe=n(i9e,"CODE",{});var Bdt=s(Pfe);Jxo=r(Bdt,"model.eval()"),Bdt.forEach(t),Yxo=r(i9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bfe=n(i9e,"CODE",{});var Idt=s(Bfe);Kxo=r(Idt,"model.train()"),Idt.forEach(t),i9e.forEach(t),Zxo=i(na),T(Db.$$.fragment,na),na.forEach(t),zs.forEach(t),xqe=i(f),Di=n(f,"H2",{class:!0});var RDe=s(Di);Gb=n(RDe,"A",{id:!0,class:!0,href:!0});var Ndt=s(Gb);Ife=n(Ndt,"SPAN",{});var qdt=s(Ife);T(AL.$$.fragment,qdt),qdt.forEach(t),Ndt.forEach(t),e$o=i(RDe),Nfe=n(RDe,"SPAN",{});var jdt=s(Nfe);o$o=r(jdt,"AutoModelForSequenceClassification"),jdt.forEach(t),RDe.forEach(t),$qe=i(f),Ro=n(f,"DIV",{class:!0});var Ws=s(Ro);T(yL.$$.fragment,Ws),r$o=i(Ws),Gi=n(Ws,"P",{});var xZ=s(Gi);t$o=r(xZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),iG=n(xZ,"A",{href:!0});var Ddt=s(iG);a$o=r(Ddt,"from_pretrained()"),Ddt.forEach(t),n$o=r(xZ," class method or the "),dG=n(xZ,"A",{href:!0});var Gdt=s(dG);s$o=r(Gdt,"from_config()"),Gdt.forEach(t),l$o=r(xZ,` class
method.`),xZ.forEach(t),i$o=i(Ws),LL=n(Ws,"P",{});var PDe=s(LL);d$o=r(PDe,"This class cannot be instantiated directly using "),qfe=n(PDe,"CODE",{});var Odt=s(qfe);c$o=r(Odt,"__init__()"),Odt.forEach(t),f$o=r(PDe," (throws an error)."),PDe.forEach(t),m$o=i(Ws),it=n(Ws,"DIV",{class:!0});var V0=s(it);T(xL.$$.fragment,V0),g$o=i(V0),jfe=n(V0,"P",{});var Vdt=s(jfe);h$o=r(Vdt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Vdt.forEach(t),p$o=i(V0),Oi=n(V0,"P",{});var $Z=s(Oi);_$o=r($Z,`Note:
Loading a model from its configuration file does `),Dfe=n($Z,"STRONG",{});var Xdt=s(Dfe);u$o=r(Xdt,"not"),Xdt.forEach(t),b$o=r($Z,` load the model weights. It only affects the
model\u2019s configuration. Use `),cG=n($Z,"A",{href:!0});var zdt=s(cG);v$o=r(zdt,"from_pretrained()"),zdt.forEach(t),F$o=r($Z," to load the model weights."),$Z.forEach(t),T$o=i(V0),T(Ob.$$.fragment,V0),V0.forEach(t),M$o=i(Ws),oo=n(Ws,"DIV",{class:!0});var sa=s(oo);T($L.$$.fragment,sa),E$o=i(sa),Gfe=n(sa,"P",{});var Wdt=s(Gfe);C$o=r(Wdt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Wdt.forEach(t),w$o=i(sa),Ra=n(sa,"P",{});var X0=s(Ra);A$o=r(X0,"The model class to instantiate is selected based on the "),Ofe=n(X0,"CODE",{});var Qdt=s(Ofe);y$o=r(Qdt,"model_type"),Qdt.forEach(t),L$o=r(X0,` property of the config object (either
passed as an argument or loaded from `),Vfe=n(X0,"CODE",{});var Hdt=s(Vfe);x$o=r(Hdt,"pretrained_model_name_or_path"),Hdt.forEach(t),$$o=r(X0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xfe=n(X0,"CODE",{});var Udt=s(Xfe);k$o=r(Udt,"pretrained_model_name_or_path"),Udt.forEach(t),S$o=r(X0,":"),X0.forEach(t),R$o=i(sa),N=n(sa,"UL",{});var j=s(N);Vb=n(j,"LI",{});var d9e=s(Vb);zfe=n(d9e,"STRONG",{});var Jdt=s(zfe);P$o=r(Jdt,"albert"),Jdt.forEach(t),B$o=r(d9e," \u2014 "),fG=n(d9e,"A",{href:!0});var Ydt=s(fG);I$o=r(Ydt,"AlbertForSequenceClassification"),Ydt.forEach(t),N$o=r(d9e," (ALBERT model)"),d9e.forEach(t),q$o=i(j),Xb=n(j,"LI",{});var c9e=s(Xb);Wfe=n(c9e,"STRONG",{});var Kdt=s(Wfe);j$o=r(Kdt,"bart"),Kdt.forEach(t),D$o=r(c9e," \u2014 "),mG=n(c9e,"A",{href:!0});var Zdt=s(mG);G$o=r(Zdt,"BartForSequenceClassification"),Zdt.forEach(t),O$o=r(c9e," (BART model)"),c9e.forEach(t),V$o=i(j),zb=n(j,"LI",{});var f9e=s(zb);Qfe=n(f9e,"STRONG",{});var ect=s(Qfe);X$o=r(ect,"bert"),ect.forEach(t),z$o=r(f9e," \u2014 "),gG=n(f9e,"A",{href:!0});var oct=s(gG);W$o=r(oct,"BertForSequenceClassification"),oct.forEach(t),Q$o=r(f9e," (BERT model)"),f9e.forEach(t),H$o=i(j),Wb=n(j,"LI",{});var m9e=s(Wb);Hfe=n(m9e,"STRONG",{});var rct=s(Hfe);U$o=r(rct,"big_bird"),rct.forEach(t),J$o=r(m9e," \u2014 "),hG=n(m9e,"A",{href:!0});var tct=s(hG);Y$o=r(tct,"BigBirdForSequenceClassification"),tct.forEach(t),K$o=r(m9e," (BigBird model)"),m9e.forEach(t),Z$o=i(j),Qb=n(j,"LI",{});var g9e=s(Qb);Ufe=n(g9e,"STRONG",{});var act=s(Ufe);eko=r(act,"bigbird_pegasus"),act.forEach(t),oko=r(g9e," \u2014 "),pG=n(g9e,"A",{href:!0});var nct=s(pG);rko=r(nct,"BigBirdPegasusForSequenceClassification"),nct.forEach(t),tko=r(g9e," (BigBirdPegasus model)"),g9e.forEach(t),ako=i(j),Hb=n(j,"LI",{});var h9e=s(Hb);Jfe=n(h9e,"STRONG",{});var sct=s(Jfe);nko=r(sct,"camembert"),sct.forEach(t),sko=r(h9e," \u2014 "),_G=n(h9e,"A",{href:!0});var lct=s(_G);lko=r(lct,"CamembertForSequenceClassification"),lct.forEach(t),iko=r(h9e," (CamemBERT model)"),h9e.forEach(t),dko=i(j),Ub=n(j,"LI",{});var p9e=s(Ub);Yfe=n(p9e,"STRONG",{});var ict=s(Yfe);cko=r(ict,"canine"),ict.forEach(t),fko=r(p9e," \u2014 "),uG=n(p9e,"A",{href:!0});var dct=s(uG);mko=r(dct,"CanineForSequenceClassification"),dct.forEach(t),gko=r(p9e," (Canine model)"),p9e.forEach(t),hko=i(j),Jb=n(j,"LI",{});var _9e=s(Jb);Kfe=n(_9e,"STRONG",{});var cct=s(Kfe);pko=r(cct,"convbert"),cct.forEach(t),_ko=r(_9e," \u2014 "),bG=n(_9e,"A",{href:!0});var fct=s(bG);uko=r(fct,"ConvBertForSequenceClassification"),fct.forEach(t),bko=r(_9e," (ConvBERT model)"),_9e.forEach(t),vko=i(j),Yb=n(j,"LI",{});var u9e=s(Yb);Zfe=n(u9e,"STRONG",{});var mct=s(Zfe);Fko=r(mct,"ctrl"),mct.forEach(t),Tko=r(u9e," \u2014 "),vG=n(u9e,"A",{href:!0});var gct=s(vG);Mko=r(gct,"CTRLForSequenceClassification"),gct.forEach(t),Eko=r(u9e," (CTRL model)"),u9e.forEach(t),Cko=i(j),Kb=n(j,"LI",{});var b9e=s(Kb);eme=n(b9e,"STRONG",{});var hct=s(eme);wko=r(hct,"data2vec-text"),hct.forEach(t),Ako=r(b9e," \u2014 "),FG=n(b9e,"A",{href:!0});var pct=s(FG);yko=r(pct,"Data2VecTextForSequenceClassification"),pct.forEach(t),Lko=r(b9e," (Data2VecText model)"),b9e.forEach(t),xko=i(j),Zb=n(j,"LI",{});var v9e=s(Zb);ome=n(v9e,"STRONG",{});var _ct=s(ome);$ko=r(_ct,"deberta"),_ct.forEach(t),kko=r(v9e," \u2014 "),TG=n(v9e,"A",{href:!0});var uct=s(TG);Sko=r(uct,"DebertaForSequenceClassification"),uct.forEach(t),Rko=r(v9e," (DeBERTa model)"),v9e.forEach(t),Pko=i(j),e2=n(j,"LI",{});var F9e=s(e2);rme=n(F9e,"STRONG",{});var bct=s(rme);Bko=r(bct,"deberta-v2"),bct.forEach(t),Iko=r(F9e," \u2014 "),MG=n(F9e,"A",{href:!0});var vct=s(MG);Nko=r(vct,"DebertaV2ForSequenceClassification"),vct.forEach(t),qko=r(F9e," (DeBERTa-v2 model)"),F9e.forEach(t),jko=i(j),o2=n(j,"LI",{});var T9e=s(o2);tme=n(T9e,"STRONG",{});var Fct=s(tme);Dko=r(Fct,"distilbert"),Fct.forEach(t),Gko=r(T9e," \u2014 "),EG=n(T9e,"A",{href:!0});var Tct=s(EG);Oko=r(Tct,"DistilBertForSequenceClassification"),Tct.forEach(t),Vko=r(T9e," (DistilBERT model)"),T9e.forEach(t),Xko=i(j),r2=n(j,"LI",{});var M9e=s(r2);ame=n(M9e,"STRONG",{});var Mct=s(ame);zko=r(Mct,"electra"),Mct.forEach(t),Wko=r(M9e," \u2014 "),CG=n(M9e,"A",{href:!0});var Ect=s(CG);Qko=r(Ect,"ElectraForSequenceClassification"),Ect.forEach(t),Hko=r(M9e," (ELECTRA model)"),M9e.forEach(t),Uko=i(j),t2=n(j,"LI",{});var E9e=s(t2);nme=n(E9e,"STRONG",{});var Cct=s(nme);Jko=r(Cct,"flaubert"),Cct.forEach(t),Yko=r(E9e," \u2014 "),wG=n(E9e,"A",{href:!0});var wct=s(wG);Kko=r(wct,"FlaubertForSequenceClassification"),wct.forEach(t),Zko=r(E9e," (FlauBERT model)"),E9e.forEach(t),eSo=i(j),a2=n(j,"LI",{});var C9e=s(a2);sme=n(C9e,"STRONG",{});var Act=s(sme);oSo=r(Act,"fnet"),Act.forEach(t),rSo=r(C9e," \u2014 "),AG=n(C9e,"A",{href:!0});var yct=s(AG);tSo=r(yct,"FNetForSequenceClassification"),yct.forEach(t),aSo=r(C9e," (FNet model)"),C9e.forEach(t),nSo=i(j),n2=n(j,"LI",{});var w9e=s(n2);lme=n(w9e,"STRONG",{});var Lct=s(lme);sSo=r(Lct,"funnel"),Lct.forEach(t),lSo=r(w9e," \u2014 "),yG=n(w9e,"A",{href:!0});var xct=s(yG);iSo=r(xct,"FunnelForSequenceClassification"),xct.forEach(t),dSo=r(w9e," (Funnel Transformer model)"),w9e.forEach(t),cSo=i(j),s2=n(j,"LI",{});var A9e=s(s2);ime=n(A9e,"STRONG",{});var $ct=s(ime);fSo=r($ct,"gpt2"),$ct.forEach(t),mSo=r(A9e," \u2014 "),LG=n(A9e,"A",{href:!0});var kct=s(LG);gSo=r(kct,"GPT2ForSequenceClassification"),kct.forEach(t),hSo=r(A9e," (OpenAI GPT-2 model)"),A9e.forEach(t),pSo=i(j),l2=n(j,"LI",{});var y9e=s(l2);dme=n(y9e,"STRONG",{});var Sct=s(dme);_So=r(Sct,"gpt_neo"),Sct.forEach(t),uSo=r(y9e," \u2014 "),xG=n(y9e,"A",{href:!0});var Rct=s(xG);bSo=r(Rct,"GPTNeoForSequenceClassification"),Rct.forEach(t),vSo=r(y9e," (GPT Neo model)"),y9e.forEach(t),FSo=i(j),i2=n(j,"LI",{});var L9e=s(i2);cme=n(L9e,"STRONG",{});var Pct=s(cme);TSo=r(Pct,"gptj"),Pct.forEach(t),MSo=r(L9e," \u2014 "),$G=n(L9e,"A",{href:!0});var Bct=s($G);ESo=r(Bct,"GPTJForSequenceClassification"),Bct.forEach(t),CSo=r(L9e," (GPT-J model)"),L9e.forEach(t),wSo=i(j),d2=n(j,"LI",{});var x9e=s(d2);fme=n(x9e,"STRONG",{});var Ict=s(fme);ASo=r(Ict,"ibert"),Ict.forEach(t),ySo=r(x9e," \u2014 "),kG=n(x9e,"A",{href:!0});var Nct=s(kG);LSo=r(Nct,"IBertForSequenceClassification"),Nct.forEach(t),xSo=r(x9e," (I-BERT model)"),x9e.forEach(t),$So=i(j),c2=n(j,"LI",{});var $9e=s(c2);mme=n($9e,"STRONG",{});var qct=s(mme);kSo=r(qct,"layoutlm"),qct.forEach(t),SSo=r($9e," \u2014 "),SG=n($9e,"A",{href:!0});var jct=s(SG);RSo=r(jct,"LayoutLMForSequenceClassification"),jct.forEach(t),PSo=r($9e," (LayoutLM model)"),$9e.forEach(t),BSo=i(j),f2=n(j,"LI",{});var k9e=s(f2);gme=n(k9e,"STRONG",{});var Dct=s(gme);ISo=r(Dct,"layoutlmv2"),Dct.forEach(t),NSo=r(k9e," \u2014 "),RG=n(k9e,"A",{href:!0});var Gct=s(RG);qSo=r(Gct,"LayoutLMv2ForSequenceClassification"),Gct.forEach(t),jSo=r(k9e," (LayoutLMv2 model)"),k9e.forEach(t),DSo=i(j),m2=n(j,"LI",{});var S9e=s(m2);hme=n(S9e,"STRONG",{});var Oct=s(hme);GSo=r(Oct,"layoutlmv3"),Oct.forEach(t),OSo=r(S9e," \u2014 "),PG=n(S9e,"A",{href:!0});var Vct=s(PG);VSo=r(Vct,"LayoutLMv3ForSequenceClassification"),Vct.forEach(t),XSo=r(S9e," (LayoutLMv3 model)"),S9e.forEach(t),zSo=i(j),g2=n(j,"LI",{});var R9e=s(g2);pme=n(R9e,"STRONG",{});var Xct=s(pme);WSo=r(Xct,"led"),Xct.forEach(t),QSo=r(R9e," \u2014 "),BG=n(R9e,"A",{href:!0});var zct=s(BG);HSo=r(zct,"LEDForSequenceClassification"),zct.forEach(t),USo=r(R9e," (LED model)"),R9e.forEach(t),JSo=i(j),h2=n(j,"LI",{});var P9e=s(h2);_me=n(P9e,"STRONG",{});var Wct=s(_me);YSo=r(Wct,"longformer"),Wct.forEach(t),KSo=r(P9e," \u2014 "),IG=n(P9e,"A",{href:!0});var Qct=s(IG);ZSo=r(Qct,"LongformerForSequenceClassification"),Qct.forEach(t),eRo=r(P9e," (Longformer model)"),P9e.forEach(t),oRo=i(j),p2=n(j,"LI",{});var B9e=s(p2);ume=n(B9e,"STRONG",{});var Hct=s(ume);rRo=r(Hct,"mbart"),Hct.forEach(t),tRo=r(B9e," \u2014 "),NG=n(B9e,"A",{href:!0});var Uct=s(NG);aRo=r(Uct,"MBartForSequenceClassification"),Uct.forEach(t),nRo=r(B9e," (mBART model)"),B9e.forEach(t),sRo=i(j),_2=n(j,"LI",{});var I9e=s(_2);bme=n(I9e,"STRONG",{});var Jct=s(bme);lRo=r(Jct,"megatron-bert"),Jct.forEach(t),iRo=r(I9e," \u2014 "),qG=n(I9e,"A",{href:!0});var Yct=s(qG);dRo=r(Yct,"MegatronBertForSequenceClassification"),Yct.forEach(t),cRo=r(I9e," (MegatronBert model)"),I9e.forEach(t),fRo=i(j),u2=n(j,"LI",{});var N9e=s(u2);vme=n(N9e,"STRONG",{});var Kct=s(vme);mRo=r(Kct,"mobilebert"),Kct.forEach(t),gRo=r(N9e," \u2014 "),jG=n(N9e,"A",{href:!0});var Zct=s(jG);hRo=r(Zct,"MobileBertForSequenceClassification"),Zct.forEach(t),pRo=r(N9e," (MobileBERT model)"),N9e.forEach(t),_Ro=i(j),b2=n(j,"LI",{});var q9e=s(b2);Fme=n(q9e,"STRONG",{});var eft=s(Fme);uRo=r(eft,"mpnet"),eft.forEach(t),bRo=r(q9e," \u2014 "),DG=n(q9e,"A",{href:!0});var oft=s(DG);vRo=r(oft,"MPNetForSequenceClassification"),oft.forEach(t),FRo=r(q9e," (MPNet model)"),q9e.forEach(t),TRo=i(j),v2=n(j,"LI",{});var j9e=s(v2);Tme=n(j9e,"STRONG",{});var rft=s(Tme);MRo=r(rft,"nystromformer"),rft.forEach(t),ERo=r(j9e," \u2014 "),GG=n(j9e,"A",{href:!0});var tft=s(GG);CRo=r(tft,"NystromformerForSequenceClassification"),tft.forEach(t),wRo=r(j9e," (Nystromformer model)"),j9e.forEach(t),ARo=i(j),F2=n(j,"LI",{});var D9e=s(F2);Mme=n(D9e,"STRONG",{});var aft=s(Mme);yRo=r(aft,"openai-gpt"),aft.forEach(t),LRo=r(D9e," \u2014 "),OG=n(D9e,"A",{href:!0});var nft=s(OG);xRo=r(nft,"OpenAIGPTForSequenceClassification"),nft.forEach(t),$Ro=r(D9e," (OpenAI GPT model)"),D9e.forEach(t),kRo=i(j),T2=n(j,"LI",{});var G9e=s(T2);Eme=n(G9e,"STRONG",{});var sft=s(Eme);SRo=r(sft,"perceiver"),sft.forEach(t),RRo=r(G9e," \u2014 "),VG=n(G9e,"A",{href:!0});var lft=s(VG);PRo=r(lft,"PerceiverForSequenceClassification"),lft.forEach(t),BRo=r(G9e," (Perceiver model)"),G9e.forEach(t),IRo=i(j),M2=n(j,"LI",{});var O9e=s(M2);Cme=n(O9e,"STRONG",{});var ift=s(Cme);NRo=r(ift,"plbart"),ift.forEach(t),qRo=r(O9e," \u2014 "),XG=n(O9e,"A",{href:!0});var dft=s(XG);jRo=r(dft,"PLBartForSequenceClassification"),dft.forEach(t),DRo=r(O9e," (PLBart model)"),O9e.forEach(t),GRo=i(j),E2=n(j,"LI",{});var V9e=s(E2);wme=n(V9e,"STRONG",{});var cft=s(wme);ORo=r(cft,"qdqbert"),cft.forEach(t),VRo=r(V9e," \u2014 "),zG=n(V9e,"A",{href:!0});var fft=s(zG);XRo=r(fft,"QDQBertForSequenceClassification"),fft.forEach(t),zRo=r(V9e," (QDQBert model)"),V9e.forEach(t),WRo=i(j),C2=n(j,"LI",{});var X9e=s(C2);Ame=n(X9e,"STRONG",{});var mft=s(Ame);QRo=r(mft,"reformer"),mft.forEach(t),HRo=r(X9e," \u2014 "),WG=n(X9e,"A",{href:!0});var gft=s(WG);URo=r(gft,"ReformerForSequenceClassification"),gft.forEach(t),JRo=r(X9e," (Reformer model)"),X9e.forEach(t),YRo=i(j),w2=n(j,"LI",{});var z9e=s(w2);yme=n(z9e,"STRONG",{});var hft=s(yme);KRo=r(hft,"rembert"),hft.forEach(t),ZRo=r(z9e," \u2014 "),QG=n(z9e,"A",{href:!0});var pft=s(QG);ePo=r(pft,"RemBertForSequenceClassification"),pft.forEach(t),oPo=r(z9e," (RemBERT model)"),z9e.forEach(t),rPo=i(j),A2=n(j,"LI",{});var W9e=s(A2);Lme=n(W9e,"STRONG",{});var _ft=s(Lme);tPo=r(_ft,"roberta"),_ft.forEach(t),aPo=r(W9e," \u2014 "),HG=n(W9e,"A",{href:!0});var uft=s(HG);nPo=r(uft,"RobertaForSequenceClassification"),uft.forEach(t),sPo=r(W9e," (RoBERTa model)"),W9e.forEach(t),lPo=i(j),y2=n(j,"LI",{});var Q9e=s(y2);xme=n(Q9e,"STRONG",{});var bft=s(xme);iPo=r(bft,"roformer"),bft.forEach(t),dPo=r(Q9e," \u2014 "),UG=n(Q9e,"A",{href:!0});var vft=s(UG);cPo=r(vft,"RoFormerForSequenceClassification"),vft.forEach(t),fPo=r(Q9e," (RoFormer model)"),Q9e.forEach(t),mPo=i(j),L2=n(j,"LI",{});var H9e=s(L2);$me=n(H9e,"STRONG",{});var Fft=s($me);gPo=r(Fft,"squeezebert"),Fft.forEach(t),hPo=r(H9e," \u2014 "),JG=n(H9e,"A",{href:!0});var Tft=s(JG);pPo=r(Tft,"SqueezeBertForSequenceClassification"),Tft.forEach(t),_Po=r(H9e," (SqueezeBERT model)"),H9e.forEach(t),uPo=i(j),x2=n(j,"LI",{});var U9e=s(x2);kme=n(U9e,"STRONG",{});var Mft=s(kme);bPo=r(Mft,"tapas"),Mft.forEach(t),vPo=r(U9e," \u2014 "),YG=n(U9e,"A",{href:!0});var Eft=s(YG);FPo=r(Eft,"TapasForSequenceClassification"),Eft.forEach(t),TPo=r(U9e," (TAPAS model)"),U9e.forEach(t),MPo=i(j),$2=n(j,"LI",{});var J9e=s($2);Sme=n(J9e,"STRONG",{});var Cft=s(Sme);EPo=r(Cft,"transfo-xl"),Cft.forEach(t),CPo=r(J9e," \u2014 "),KG=n(J9e,"A",{href:!0});var wft=s(KG);wPo=r(wft,"TransfoXLForSequenceClassification"),wft.forEach(t),APo=r(J9e," (Transformer-XL model)"),J9e.forEach(t),yPo=i(j),k2=n(j,"LI",{});var Y9e=s(k2);Rme=n(Y9e,"STRONG",{});var Aft=s(Rme);LPo=r(Aft,"xlm"),Aft.forEach(t),xPo=r(Y9e," \u2014 "),ZG=n(Y9e,"A",{href:!0});var yft=s(ZG);$Po=r(yft,"XLMForSequenceClassification"),yft.forEach(t),kPo=r(Y9e," (XLM model)"),Y9e.forEach(t),SPo=i(j),S2=n(j,"LI",{});var K9e=s(S2);Pme=n(K9e,"STRONG",{});var Lft=s(Pme);RPo=r(Lft,"xlm-roberta"),Lft.forEach(t),PPo=r(K9e," \u2014 "),eO=n(K9e,"A",{href:!0});var xft=s(eO);BPo=r(xft,"XLMRobertaForSequenceClassification"),xft.forEach(t),IPo=r(K9e," (XLM-RoBERTa model)"),K9e.forEach(t),NPo=i(j),R2=n(j,"LI",{});var Z9e=s(R2);Bme=n(Z9e,"STRONG",{});var $ft=s(Bme);qPo=r($ft,"xlm-roberta-xl"),$ft.forEach(t),jPo=r(Z9e," \u2014 "),oO=n(Z9e,"A",{href:!0});var kft=s(oO);DPo=r(kft,"XLMRobertaXLForSequenceClassification"),kft.forEach(t),GPo=r(Z9e," (XLM-RoBERTa-XL model)"),Z9e.forEach(t),OPo=i(j),P2=n(j,"LI",{});var exe=s(P2);Ime=n(exe,"STRONG",{});var Sft=s(Ime);VPo=r(Sft,"xlnet"),Sft.forEach(t),XPo=r(exe," \u2014 "),rO=n(exe,"A",{href:!0});var Rft=s(rO);zPo=r(Rft,"XLNetForSequenceClassification"),Rft.forEach(t),WPo=r(exe," (XLNet model)"),exe.forEach(t),QPo=i(j),B2=n(j,"LI",{});var oxe=s(B2);Nme=n(oxe,"STRONG",{});var Pft=s(Nme);HPo=r(Pft,"yoso"),Pft.forEach(t),UPo=r(oxe," \u2014 "),tO=n(oxe,"A",{href:!0});var Bft=s(tO);JPo=r(Bft,"YosoForSequenceClassification"),Bft.forEach(t),YPo=r(oxe," (YOSO model)"),oxe.forEach(t),j.forEach(t),KPo=i(sa),I2=n(sa,"P",{});var rxe=s(I2);ZPo=r(rxe,"The model is set in evaluation mode by default using "),qme=n(rxe,"CODE",{});var Ift=s(qme);eBo=r(Ift,"model.eval()"),Ift.forEach(t),oBo=r(rxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jme=n(rxe,"CODE",{});var Nft=s(jme);rBo=r(Nft,"model.train()"),Nft.forEach(t),rxe.forEach(t),tBo=i(sa),T(N2.$$.fragment,sa),sa.forEach(t),Ws.forEach(t),kqe=i(f),Vi=n(f,"H2",{class:!0});var BDe=s(Vi);q2=n(BDe,"A",{id:!0,class:!0,href:!0});var qft=s(q2);Dme=n(qft,"SPAN",{});var jft=s(Dme);T(kL.$$.fragment,jft),jft.forEach(t),qft.forEach(t),aBo=i(BDe),Gme=n(BDe,"SPAN",{});var Dft=s(Gme);nBo=r(Dft,"AutoModelForMultipleChoice"),Dft.forEach(t),BDe.forEach(t),Sqe=i(f),Po=n(f,"DIV",{class:!0});var Qs=s(Po);T(SL.$$.fragment,Qs),sBo=i(Qs),Xi=n(Qs,"P",{});var kZ=s(Xi);lBo=r(kZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),aO=n(kZ,"A",{href:!0});var Gft=s(aO);iBo=r(Gft,"from_pretrained()"),Gft.forEach(t),dBo=r(kZ," class method or the "),nO=n(kZ,"A",{href:!0});var Oft=s(nO);cBo=r(Oft,"from_config()"),Oft.forEach(t),fBo=r(kZ,` class
method.`),kZ.forEach(t),mBo=i(Qs),RL=n(Qs,"P",{});var IDe=s(RL);gBo=r(IDe,"This class cannot be instantiated directly using "),Ome=n(IDe,"CODE",{});var Vft=s(Ome);hBo=r(Vft,"__init__()"),Vft.forEach(t),pBo=r(IDe," (throws an error)."),IDe.forEach(t),_Bo=i(Qs),dt=n(Qs,"DIV",{class:!0});var z0=s(dt);T(PL.$$.fragment,z0),uBo=i(z0),Vme=n(z0,"P",{});var Xft=s(Vme);bBo=r(Xft,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Xft.forEach(t),vBo=i(z0),zi=n(z0,"P",{});var SZ=s(zi);FBo=r(SZ,`Note:
Loading a model from its configuration file does `),Xme=n(SZ,"STRONG",{});var zft=s(Xme);TBo=r(zft,"not"),zft.forEach(t),MBo=r(SZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),sO=n(SZ,"A",{href:!0});var Wft=s(sO);EBo=r(Wft,"from_pretrained()"),Wft.forEach(t),CBo=r(SZ," to load the model weights."),SZ.forEach(t),wBo=i(z0),T(j2.$$.fragment,z0),z0.forEach(t),ABo=i(Qs),ro=n(Qs,"DIV",{class:!0});var la=s(ro);T(BL.$$.fragment,la),yBo=i(la),zme=n(la,"P",{});var Qft=s(zme);LBo=r(Qft,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Qft.forEach(t),xBo=i(la),Pa=n(la,"P",{});var W0=s(Pa);$Bo=r(W0,"The model class to instantiate is selected based on the "),Wme=n(W0,"CODE",{});var Hft=s(Wme);kBo=r(Hft,"model_type"),Hft.forEach(t),SBo=r(W0,` property of the config object (either
passed as an argument or loaded from `),Qme=n(W0,"CODE",{});var Uft=s(Qme);RBo=r(Uft,"pretrained_model_name_or_path"),Uft.forEach(t),PBo=r(W0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hme=n(W0,"CODE",{});var Jft=s(Hme);BBo=r(Jft,"pretrained_model_name_or_path"),Jft.forEach(t),IBo=r(W0,":"),W0.forEach(t),NBo=i(la),K=n(la,"UL",{});var ee=s(K);D2=n(ee,"LI",{});var txe=s(D2);Ume=n(txe,"STRONG",{});var Yft=s(Ume);qBo=r(Yft,"albert"),Yft.forEach(t),jBo=r(txe," \u2014 "),lO=n(txe,"A",{href:!0});var Kft=s(lO);DBo=r(Kft,"AlbertForMultipleChoice"),Kft.forEach(t),GBo=r(txe," (ALBERT model)"),txe.forEach(t),OBo=i(ee),G2=n(ee,"LI",{});var axe=s(G2);Jme=n(axe,"STRONG",{});var Zft=s(Jme);VBo=r(Zft,"bert"),Zft.forEach(t),XBo=r(axe," \u2014 "),iO=n(axe,"A",{href:!0});var emt=s(iO);zBo=r(emt,"BertForMultipleChoice"),emt.forEach(t),WBo=r(axe," (BERT model)"),axe.forEach(t),QBo=i(ee),O2=n(ee,"LI",{});var nxe=s(O2);Yme=n(nxe,"STRONG",{});var omt=s(Yme);HBo=r(omt,"big_bird"),omt.forEach(t),UBo=r(nxe," \u2014 "),dO=n(nxe,"A",{href:!0});var rmt=s(dO);JBo=r(rmt,"BigBirdForMultipleChoice"),rmt.forEach(t),YBo=r(nxe," (BigBird model)"),nxe.forEach(t),KBo=i(ee),V2=n(ee,"LI",{});var sxe=s(V2);Kme=n(sxe,"STRONG",{});var tmt=s(Kme);ZBo=r(tmt,"camembert"),tmt.forEach(t),eIo=r(sxe," \u2014 "),cO=n(sxe,"A",{href:!0});var amt=s(cO);oIo=r(amt,"CamembertForMultipleChoice"),amt.forEach(t),rIo=r(sxe," (CamemBERT model)"),sxe.forEach(t),tIo=i(ee),X2=n(ee,"LI",{});var lxe=s(X2);Zme=n(lxe,"STRONG",{});var nmt=s(Zme);aIo=r(nmt,"canine"),nmt.forEach(t),nIo=r(lxe," \u2014 "),fO=n(lxe,"A",{href:!0});var smt=s(fO);sIo=r(smt,"CanineForMultipleChoice"),smt.forEach(t),lIo=r(lxe," (Canine model)"),lxe.forEach(t),iIo=i(ee),z2=n(ee,"LI",{});var ixe=s(z2);ege=n(ixe,"STRONG",{});var lmt=s(ege);dIo=r(lmt,"convbert"),lmt.forEach(t),cIo=r(ixe," \u2014 "),mO=n(ixe,"A",{href:!0});var imt=s(mO);fIo=r(imt,"ConvBertForMultipleChoice"),imt.forEach(t),mIo=r(ixe," (ConvBERT model)"),ixe.forEach(t),gIo=i(ee),W2=n(ee,"LI",{});var dxe=s(W2);oge=n(dxe,"STRONG",{});var dmt=s(oge);hIo=r(dmt,"data2vec-text"),dmt.forEach(t),pIo=r(dxe," \u2014 "),gO=n(dxe,"A",{href:!0});var cmt=s(gO);_Io=r(cmt,"Data2VecTextForMultipleChoice"),cmt.forEach(t),uIo=r(dxe," (Data2VecText model)"),dxe.forEach(t),bIo=i(ee),Q2=n(ee,"LI",{});var cxe=s(Q2);rge=n(cxe,"STRONG",{});var fmt=s(rge);vIo=r(fmt,"deberta-v2"),fmt.forEach(t),FIo=r(cxe," \u2014 "),hO=n(cxe,"A",{href:!0});var mmt=s(hO);TIo=r(mmt,"DebertaV2ForMultipleChoice"),mmt.forEach(t),MIo=r(cxe," (DeBERTa-v2 model)"),cxe.forEach(t),EIo=i(ee),H2=n(ee,"LI",{});var fxe=s(H2);tge=n(fxe,"STRONG",{});var gmt=s(tge);CIo=r(gmt,"distilbert"),gmt.forEach(t),wIo=r(fxe," \u2014 "),pO=n(fxe,"A",{href:!0});var hmt=s(pO);AIo=r(hmt,"DistilBertForMultipleChoice"),hmt.forEach(t),yIo=r(fxe," (DistilBERT model)"),fxe.forEach(t),LIo=i(ee),U2=n(ee,"LI",{});var mxe=s(U2);age=n(mxe,"STRONG",{});var pmt=s(age);xIo=r(pmt,"electra"),pmt.forEach(t),$Io=r(mxe," \u2014 "),_O=n(mxe,"A",{href:!0});var _mt=s(_O);kIo=r(_mt,"ElectraForMultipleChoice"),_mt.forEach(t),SIo=r(mxe," (ELECTRA model)"),mxe.forEach(t),RIo=i(ee),J2=n(ee,"LI",{});var gxe=s(J2);nge=n(gxe,"STRONG",{});var umt=s(nge);PIo=r(umt,"flaubert"),umt.forEach(t),BIo=r(gxe," \u2014 "),uO=n(gxe,"A",{href:!0});var bmt=s(uO);IIo=r(bmt,"FlaubertForMultipleChoice"),bmt.forEach(t),NIo=r(gxe," (FlauBERT model)"),gxe.forEach(t),qIo=i(ee),Y2=n(ee,"LI",{});var hxe=s(Y2);sge=n(hxe,"STRONG",{});var vmt=s(sge);jIo=r(vmt,"fnet"),vmt.forEach(t),DIo=r(hxe," \u2014 "),bO=n(hxe,"A",{href:!0});var Fmt=s(bO);GIo=r(Fmt,"FNetForMultipleChoice"),Fmt.forEach(t),OIo=r(hxe," (FNet model)"),hxe.forEach(t),VIo=i(ee),K2=n(ee,"LI",{});var pxe=s(K2);lge=n(pxe,"STRONG",{});var Tmt=s(lge);XIo=r(Tmt,"funnel"),Tmt.forEach(t),zIo=r(pxe," \u2014 "),vO=n(pxe,"A",{href:!0});var Mmt=s(vO);WIo=r(Mmt,"FunnelForMultipleChoice"),Mmt.forEach(t),QIo=r(pxe," (Funnel Transformer model)"),pxe.forEach(t),HIo=i(ee),Z2=n(ee,"LI",{});var _xe=s(Z2);ige=n(_xe,"STRONG",{});var Emt=s(ige);UIo=r(Emt,"ibert"),Emt.forEach(t),JIo=r(_xe," \u2014 "),FO=n(_xe,"A",{href:!0});var Cmt=s(FO);YIo=r(Cmt,"IBertForMultipleChoice"),Cmt.forEach(t),KIo=r(_xe," (I-BERT model)"),_xe.forEach(t),ZIo=i(ee),e4=n(ee,"LI",{});var uxe=s(e4);dge=n(uxe,"STRONG",{});var wmt=s(dge);eNo=r(wmt,"longformer"),wmt.forEach(t),oNo=r(uxe," \u2014 "),TO=n(uxe,"A",{href:!0});var Amt=s(TO);rNo=r(Amt,"LongformerForMultipleChoice"),Amt.forEach(t),tNo=r(uxe," (Longformer model)"),uxe.forEach(t),aNo=i(ee),o4=n(ee,"LI",{});var bxe=s(o4);cge=n(bxe,"STRONG",{});var ymt=s(cge);nNo=r(ymt,"megatron-bert"),ymt.forEach(t),sNo=r(bxe," \u2014 "),MO=n(bxe,"A",{href:!0});var Lmt=s(MO);lNo=r(Lmt,"MegatronBertForMultipleChoice"),Lmt.forEach(t),iNo=r(bxe," (MegatronBert model)"),bxe.forEach(t),dNo=i(ee),r4=n(ee,"LI",{});var vxe=s(r4);fge=n(vxe,"STRONG",{});var xmt=s(fge);cNo=r(xmt,"mobilebert"),xmt.forEach(t),fNo=r(vxe," \u2014 "),EO=n(vxe,"A",{href:!0});var $mt=s(EO);mNo=r($mt,"MobileBertForMultipleChoice"),$mt.forEach(t),gNo=r(vxe," (MobileBERT model)"),vxe.forEach(t),hNo=i(ee),t4=n(ee,"LI",{});var Fxe=s(t4);mge=n(Fxe,"STRONG",{});var kmt=s(mge);pNo=r(kmt,"mpnet"),kmt.forEach(t),_No=r(Fxe," \u2014 "),CO=n(Fxe,"A",{href:!0});var Smt=s(CO);uNo=r(Smt,"MPNetForMultipleChoice"),Smt.forEach(t),bNo=r(Fxe," (MPNet model)"),Fxe.forEach(t),vNo=i(ee),a4=n(ee,"LI",{});var Txe=s(a4);gge=n(Txe,"STRONG",{});var Rmt=s(gge);FNo=r(Rmt,"nystromformer"),Rmt.forEach(t),TNo=r(Txe," \u2014 "),wO=n(Txe,"A",{href:!0});var Pmt=s(wO);MNo=r(Pmt,"NystromformerForMultipleChoice"),Pmt.forEach(t),ENo=r(Txe," (Nystromformer model)"),Txe.forEach(t),CNo=i(ee),n4=n(ee,"LI",{});var Mxe=s(n4);hge=n(Mxe,"STRONG",{});var Bmt=s(hge);wNo=r(Bmt,"qdqbert"),Bmt.forEach(t),ANo=r(Mxe," \u2014 "),AO=n(Mxe,"A",{href:!0});var Imt=s(AO);yNo=r(Imt,"QDQBertForMultipleChoice"),Imt.forEach(t),LNo=r(Mxe," (QDQBert model)"),Mxe.forEach(t),xNo=i(ee),s4=n(ee,"LI",{});var Exe=s(s4);pge=n(Exe,"STRONG",{});var Nmt=s(pge);$No=r(Nmt,"rembert"),Nmt.forEach(t),kNo=r(Exe," \u2014 "),yO=n(Exe,"A",{href:!0});var qmt=s(yO);SNo=r(qmt,"RemBertForMultipleChoice"),qmt.forEach(t),RNo=r(Exe," (RemBERT model)"),Exe.forEach(t),PNo=i(ee),l4=n(ee,"LI",{});var Cxe=s(l4);_ge=n(Cxe,"STRONG",{});var jmt=s(_ge);BNo=r(jmt,"roberta"),jmt.forEach(t),INo=r(Cxe," \u2014 "),LO=n(Cxe,"A",{href:!0});var Dmt=s(LO);NNo=r(Dmt,"RobertaForMultipleChoice"),Dmt.forEach(t),qNo=r(Cxe," (RoBERTa model)"),Cxe.forEach(t),jNo=i(ee),i4=n(ee,"LI",{});var wxe=s(i4);uge=n(wxe,"STRONG",{});var Gmt=s(uge);DNo=r(Gmt,"roformer"),Gmt.forEach(t),GNo=r(wxe," \u2014 "),xO=n(wxe,"A",{href:!0});var Omt=s(xO);ONo=r(Omt,"RoFormerForMultipleChoice"),Omt.forEach(t),VNo=r(wxe," (RoFormer model)"),wxe.forEach(t),XNo=i(ee),d4=n(ee,"LI",{});var Axe=s(d4);bge=n(Axe,"STRONG",{});var Vmt=s(bge);zNo=r(Vmt,"squeezebert"),Vmt.forEach(t),WNo=r(Axe," \u2014 "),$O=n(Axe,"A",{href:!0});var Xmt=s($O);QNo=r(Xmt,"SqueezeBertForMultipleChoice"),Xmt.forEach(t),HNo=r(Axe," (SqueezeBERT model)"),Axe.forEach(t),UNo=i(ee),c4=n(ee,"LI",{});var yxe=s(c4);vge=n(yxe,"STRONG",{});var zmt=s(vge);JNo=r(zmt,"xlm"),zmt.forEach(t),YNo=r(yxe," \u2014 "),kO=n(yxe,"A",{href:!0});var Wmt=s(kO);KNo=r(Wmt,"XLMForMultipleChoice"),Wmt.forEach(t),ZNo=r(yxe," (XLM model)"),yxe.forEach(t),eqo=i(ee),f4=n(ee,"LI",{});var Lxe=s(f4);Fge=n(Lxe,"STRONG",{});var Qmt=s(Fge);oqo=r(Qmt,"xlm-roberta"),Qmt.forEach(t),rqo=r(Lxe," \u2014 "),SO=n(Lxe,"A",{href:!0});var Hmt=s(SO);tqo=r(Hmt,"XLMRobertaForMultipleChoice"),Hmt.forEach(t),aqo=r(Lxe," (XLM-RoBERTa model)"),Lxe.forEach(t),nqo=i(ee),m4=n(ee,"LI",{});var xxe=s(m4);Tge=n(xxe,"STRONG",{});var Umt=s(Tge);sqo=r(Umt,"xlm-roberta-xl"),Umt.forEach(t),lqo=r(xxe," \u2014 "),RO=n(xxe,"A",{href:!0});var Jmt=s(RO);iqo=r(Jmt,"XLMRobertaXLForMultipleChoice"),Jmt.forEach(t),dqo=r(xxe," (XLM-RoBERTa-XL model)"),xxe.forEach(t),cqo=i(ee),g4=n(ee,"LI",{});var $xe=s(g4);Mge=n($xe,"STRONG",{});var Ymt=s(Mge);fqo=r(Ymt,"xlnet"),Ymt.forEach(t),mqo=r($xe," \u2014 "),PO=n($xe,"A",{href:!0});var Kmt=s(PO);gqo=r(Kmt,"XLNetForMultipleChoice"),Kmt.forEach(t),hqo=r($xe," (XLNet model)"),$xe.forEach(t),pqo=i(ee),h4=n(ee,"LI",{});var kxe=s(h4);Ege=n(kxe,"STRONG",{});var Zmt=s(Ege);_qo=r(Zmt,"yoso"),Zmt.forEach(t),uqo=r(kxe," \u2014 "),BO=n(kxe,"A",{href:!0});var egt=s(BO);bqo=r(egt,"YosoForMultipleChoice"),egt.forEach(t),vqo=r(kxe," (YOSO model)"),kxe.forEach(t),ee.forEach(t),Fqo=i(la),p4=n(la,"P",{});var Sxe=s(p4);Tqo=r(Sxe,"The model is set in evaluation mode by default using "),Cge=n(Sxe,"CODE",{});var ogt=s(Cge);Mqo=r(ogt,"model.eval()"),ogt.forEach(t),Eqo=r(Sxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wge=n(Sxe,"CODE",{});var rgt=s(wge);Cqo=r(rgt,"model.train()"),rgt.forEach(t),Sxe.forEach(t),wqo=i(la),T(_4.$$.fragment,la),la.forEach(t),Qs.forEach(t),Rqe=i(f),Wi=n(f,"H2",{class:!0});var NDe=s(Wi);u4=n(NDe,"A",{id:!0,class:!0,href:!0});var tgt=s(u4);Age=n(tgt,"SPAN",{});var agt=s(Age);T(IL.$$.fragment,agt),agt.forEach(t),tgt.forEach(t),Aqo=i(NDe),yge=n(NDe,"SPAN",{});var ngt=s(yge);yqo=r(ngt,"AutoModelForNextSentencePrediction"),ngt.forEach(t),NDe.forEach(t),Pqe=i(f),Bo=n(f,"DIV",{class:!0});var Hs=s(Bo);T(NL.$$.fragment,Hs),Lqo=i(Hs),Qi=n(Hs,"P",{});var RZ=s(Qi);xqo=r(RZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),IO=n(RZ,"A",{href:!0});var sgt=s(IO);$qo=r(sgt,"from_pretrained()"),sgt.forEach(t),kqo=r(RZ," class method or the "),NO=n(RZ,"A",{href:!0});var lgt=s(NO);Sqo=r(lgt,"from_config()"),lgt.forEach(t),Rqo=r(RZ,` class
method.`),RZ.forEach(t),Pqo=i(Hs),qL=n(Hs,"P",{});var qDe=s(qL);Bqo=r(qDe,"This class cannot be instantiated directly using "),Lge=n(qDe,"CODE",{});var igt=s(Lge);Iqo=r(igt,"__init__()"),igt.forEach(t),Nqo=r(qDe," (throws an error)."),qDe.forEach(t),qqo=i(Hs),ct=n(Hs,"DIV",{class:!0});var Q0=s(ct);T(jL.$$.fragment,Q0),jqo=i(Q0),xge=n(Q0,"P",{});var dgt=s(xge);Dqo=r(dgt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),dgt.forEach(t),Gqo=i(Q0),Hi=n(Q0,"P",{});var PZ=s(Hi);Oqo=r(PZ,`Note:
Loading a model from its configuration file does `),$ge=n(PZ,"STRONG",{});var cgt=s($ge);Vqo=r(cgt,"not"),cgt.forEach(t),Xqo=r(PZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),qO=n(PZ,"A",{href:!0});var fgt=s(qO);zqo=r(fgt,"from_pretrained()"),fgt.forEach(t),Wqo=r(PZ," to load the model weights."),PZ.forEach(t),Qqo=i(Q0),T(b4.$$.fragment,Q0),Q0.forEach(t),Hqo=i(Hs),to=n(Hs,"DIV",{class:!0});var ia=s(to);T(DL.$$.fragment,ia),Uqo=i(ia),kge=n(ia,"P",{});var mgt=s(kge);Jqo=r(mgt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),mgt.forEach(t),Yqo=i(ia),Ba=n(ia,"P",{});var H0=s(Ba);Kqo=r(H0,"The model class to instantiate is selected based on the "),Sge=n(H0,"CODE",{});var ggt=s(Sge);Zqo=r(ggt,"model_type"),ggt.forEach(t),ejo=r(H0,` property of the config object (either
passed as an argument or loaded from `),Rge=n(H0,"CODE",{});var hgt=s(Rge);ojo=r(hgt,"pretrained_model_name_or_path"),hgt.forEach(t),rjo=r(H0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pge=n(H0,"CODE",{});var pgt=s(Pge);tjo=r(pgt,"pretrained_model_name_or_path"),pgt.forEach(t),ajo=r(H0,":"),H0.forEach(t),njo=i(ia),Yr=n(ia,"UL",{});var Us=s(Yr);v4=n(Us,"LI",{});var Rxe=s(v4);Bge=n(Rxe,"STRONG",{});var _gt=s(Bge);sjo=r(_gt,"bert"),_gt.forEach(t),ljo=r(Rxe," \u2014 "),jO=n(Rxe,"A",{href:!0});var ugt=s(jO);ijo=r(ugt,"BertForNextSentencePrediction"),ugt.forEach(t),djo=r(Rxe," (BERT model)"),Rxe.forEach(t),cjo=i(Us),F4=n(Us,"LI",{});var Pxe=s(F4);Ige=n(Pxe,"STRONG",{});var bgt=s(Ige);fjo=r(bgt,"fnet"),bgt.forEach(t),mjo=r(Pxe," \u2014 "),DO=n(Pxe,"A",{href:!0});var vgt=s(DO);gjo=r(vgt,"FNetForNextSentencePrediction"),vgt.forEach(t),hjo=r(Pxe," (FNet model)"),Pxe.forEach(t),pjo=i(Us),T4=n(Us,"LI",{});var Bxe=s(T4);Nge=n(Bxe,"STRONG",{});var Fgt=s(Nge);_jo=r(Fgt,"megatron-bert"),Fgt.forEach(t),ujo=r(Bxe," \u2014 "),GO=n(Bxe,"A",{href:!0});var Tgt=s(GO);bjo=r(Tgt,"MegatronBertForNextSentencePrediction"),Tgt.forEach(t),vjo=r(Bxe," (MegatronBert model)"),Bxe.forEach(t),Fjo=i(Us),M4=n(Us,"LI",{});var Ixe=s(M4);qge=n(Ixe,"STRONG",{});var Mgt=s(qge);Tjo=r(Mgt,"mobilebert"),Mgt.forEach(t),Mjo=r(Ixe," \u2014 "),OO=n(Ixe,"A",{href:!0});var Egt=s(OO);Ejo=r(Egt,"MobileBertForNextSentencePrediction"),Egt.forEach(t),Cjo=r(Ixe," (MobileBERT model)"),Ixe.forEach(t),wjo=i(Us),E4=n(Us,"LI",{});var Nxe=s(E4);jge=n(Nxe,"STRONG",{});var Cgt=s(jge);Ajo=r(Cgt,"qdqbert"),Cgt.forEach(t),yjo=r(Nxe," \u2014 "),VO=n(Nxe,"A",{href:!0});var wgt=s(VO);Ljo=r(wgt,"QDQBertForNextSentencePrediction"),wgt.forEach(t),xjo=r(Nxe," (QDQBert model)"),Nxe.forEach(t),Us.forEach(t),$jo=i(ia),C4=n(ia,"P",{});var qxe=s(C4);kjo=r(qxe,"The model is set in evaluation mode by default using "),Dge=n(qxe,"CODE",{});var Agt=s(Dge);Sjo=r(Agt,"model.eval()"),Agt.forEach(t),Rjo=r(qxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gge=n(qxe,"CODE",{});var ygt=s(Gge);Pjo=r(ygt,"model.train()"),ygt.forEach(t),qxe.forEach(t),Bjo=i(ia),T(w4.$$.fragment,ia),ia.forEach(t),Hs.forEach(t),Bqe=i(f),Ui=n(f,"H2",{class:!0});var jDe=s(Ui);A4=n(jDe,"A",{id:!0,class:!0,href:!0});var Lgt=s(A4);Oge=n(Lgt,"SPAN",{});var xgt=s(Oge);T(GL.$$.fragment,xgt),xgt.forEach(t),Lgt.forEach(t),Ijo=i(jDe),Vge=n(jDe,"SPAN",{});var $gt=s(Vge);Njo=r($gt,"AutoModelForTokenClassification"),$gt.forEach(t),jDe.forEach(t),Iqe=i(f),Io=n(f,"DIV",{class:!0});var Js=s(Io);T(OL.$$.fragment,Js),qjo=i(Js),Ji=n(Js,"P",{});var BZ=s(Ji);jjo=r(BZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),XO=n(BZ,"A",{href:!0});var kgt=s(XO);Djo=r(kgt,"from_pretrained()"),kgt.forEach(t),Gjo=r(BZ," class method or the "),zO=n(BZ,"A",{href:!0});var Sgt=s(zO);Ojo=r(Sgt,"from_config()"),Sgt.forEach(t),Vjo=r(BZ,` class
method.`),BZ.forEach(t),Xjo=i(Js),VL=n(Js,"P",{});var DDe=s(VL);zjo=r(DDe,"This class cannot be instantiated directly using "),Xge=n(DDe,"CODE",{});var Rgt=s(Xge);Wjo=r(Rgt,"__init__()"),Rgt.forEach(t),Qjo=r(DDe," (throws an error)."),DDe.forEach(t),Hjo=i(Js),ft=n(Js,"DIV",{class:!0});var U0=s(ft);T(XL.$$.fragment,U0),Ujo=i(U0),zge=n(U0,"P",{});var Pgt=s(zge);Jjo=r(Pgt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Pgt.forEach(t),Yjo=i(U0),Yi=n(U0,"P",{});var IZ=s(Yi);Kjo=r(IZ,`Note:
Loading a model from its configuration file does `),Wge=n(IZ,"STRONG",{});var Bgt=s(Wge);Zjo=r(Bgt,"not"),Bgt.forEach(t),eDo=r(IZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),WO=n(IZ,"A",{href:!0});var Igt=s(WO);oDo=r(Igt,"from_pretrained()"),Igt.forEach(t),rDo=r(IZ," to load the model weights."),IZ.forEach(t),tDo=i(U0),T(y4.$$.fragment,U0),U0.forEach(t),aDo=i(Js),ao=n(Js,"DIV",{class:!0});var da=s(ao);T(zL.$$.fragment,da),nDo=i(da),Qge=n(da,"P",{});var Ngt=s(Qge);sDo=r(Ngt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Ngt.forEach(t),lDo=i(da),Ia=n(da,"P",{});var J0=s(Ia);iDo=r(J0,"The model class to instantiate is selected based on the "),Hge=n(J0,"CODE",{});var qgt=s(Hge);dDo=r(qgt,"model_type"),qgt.forEach(t),cDo=r(J0,` property of the config object (either
passed as an argument or loaded from `),Uge=n(J0,"CODE",{});var jgt=s(Uge);fDo=r(jgt,"pretrained_model_name_or_path"),jgt.forEach(t),mDo=r(J0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jge=n(J0,"CODE",{});var Dgt=s(Jge);gDo=r(Dgt,"pretrained_model_name_or_path"),Dgt.forEach(t),hDo=r(J0,":"),J0.forEach(t),pDo=i(da),H=n(da,"UL",{});var J=s(H);L4=n(J,"LI",{});var jxe=s(L4);Yge=n(jxe,"STRONG",{});var Ggt=s(Yge);_Do=r(Ggt,"albert"),Ggt.forEach(t),uDo=r(jxe," \u2014 "),QO=n(jxe,"A",{href:!0});var Ogt=s(QO);bDo=r(Ogt,"AlbertForTokenClassification"),Ogt.forEach(t),vDo=r(jxe," (ALBERT model)"),jxe.forEach(t),FDo=i(J),x4=n(J,"LI",{});var Dxe=s(x4);Kge=n(Dxe,"STRONG",{});var Vgt=s(Kge);TDo=r(Vgt,"bert"),Vgt.forEach(t),MDo=r(Dxe," \u2014 "),HO=n(Dxe,"A",{href:!0});var Xgt=s(HO);EDo=r(Xgt,"BertForTokenClassification"),Xgt.forEach(t),CDo=r(Dxe," (BERT model)"),Dxe.forEach(t),wDo=i(J),$4=n(J,"LI",{});var Gxe=s($4);Zge=n(Gxe,"STRONG",{});var zgt=s(Zge);ADo=r(zgt,"big_bird"),zgt.forEach(t),yDo=r(Gxe," \u2014 "),UO=n(Gxe,"A",{href:!0});var Wgt=s(UO);LDo=r(Wgt,"BigBirdForTokenClassification"),Wgt.forEach(t),xDo=r(Gxe," (BigBird model)"),Gxe.forEach(t),$Do=i(J),k4=n(J,"LI",{});var Oxe=s(k4);ehe=n(Oxe,"STRONG",{});var Qgt=s(ehe);kDo=r(Qgt,"camembert"),Qgt.forEach(t),SDo=r(Oxe," \u2014 "),JO=n(Oxe,"A",{href:!0});var Hgt=s(JO);RDo=r(Hgt,"CamembertForTokenClassification"),Hgt.forEach(t),PDo=r(Oxe," (CamemBERT model)"),Oxe.forEach(t),BDo=i(J),S4=n(J,"LI",{});var Vxe=s(S4);ohe=n(Vxe,"STRONG",{});var Ugt=s(ohe);IDo=r(Ugt,"canine"),Ugt.forEach(t),NDo=r(Vxe," \u2014 "),YO=n(Vxe,"A",{href:!0});var Jgt=s(YO);qDo=r(Jgt,"CanineForTokenClassification"),Jgt.forEach(t),jDo=r(Vxe," (Canine model)"),Vxe.forEach(t),DDo=i(J),R4=n(J,"LI",{});var Xxe=s(R4);rhe=n(Xxe,"STRONG",{});var Ygt=s(rhe);GDo=r(Ygt,"convbert"),Ygt.forEach(t),ODo=r(Xxe," \u2014 "),KO=n(Xxe,"A",{href:!0});var Kgt=s(KO);VDo=r(Kgt,"ConvBertForTokenClassification"),Kgt.forEach(t),XDo=r(Xxe," (ConvBERT model)"),Xxe.forEach(t),zDo=i(J),P4=n(J,"LI",{});var zxe=s(P4);the=n(zxe,"STRONG",{});var Zgt=s(the);WDo=r(Zgt,"data2vec-text"),Zgt.forEach(t),QDo=r(zxe," \u2014 "),ZO=n(zxe,"A",{href:!0});var eht=s(ZO);HDo=r(eht,"Data2VecTextForTokenClassification"),eht.forEach(t),UDo=r(zxe," (Data2VecText model)"),zxe.forEach(t),JDo=i(J),B4=n(J,"LI",{});var Wxe=s(B4);ahe=n(Wxe,"STRONG",{});var oht=s(ahe);YDo=r(oht,"deberta"),oht.forEach(t),KDo=r(Wxe," \u2014 "),eV=n(Wxe,"A",{href:!0});var rht=s(eV);ZDo=r(rht,"DebertaForTokenClassification"),rht.forEach(t),eGo=r(Wxe," (DeBERTa model)"),Wxe.forEach(t),oGo=i(J),I4=n(J,"LI",{});var Qxe=s(I4);nhe=n(Qxe,"STRONG",{});var tht=s(nhe);rGo=r(tht,"deberta-v2"),tht.forEach(t),tGo=r(Qxe," \u2014 "),oV=n(Qxe,"A",{href:!0});var aht=s(oV);aGo=r(aht,"DebertaV2ForTokenClassification"),aht.forEach(t),nGo=r(Qxe," (DeBERTa-v2 model)"),Qxe.forEach(t),sGo=i(J),N4=n(J,"LI",{});var Hxe=s(N4);she=n(Hxe,"STRONG",{});var nht=s(she);lGo=r(nht,"distilbert"),nht.forEach(t),iGo=r(Hxe," \u2014 "),rV=n(Hxe,"A",{href:!0});var sht=s(rV);dGo=r(sht,"DistilBertForTokenClassification"),sht.forEach(t),cGo=r(Hxe," (DistilBERT model)"),Hxe.forEach(t),fGo=i(J),q4=n(J,"LI",{});var Uxe=s(q4);lhe=n(Uxe,"STRONG",{});var lht=s(lhe);mGo=r(lht,"electra"),lht.forEach(t),gGo=r(Uxe," \u2014 "),tV=n(Uxe,"A",{href:!0});var iht=s(tV);hGo=r(iht,"ElectraForTokenClassification"),iht.forEach(t),pGo=r(Uxe," (ELECTRA model)"),Uxe.forEach(t),_Go=i(J),j4=n(J,"LI",{});var Jxe=s(j4);ihe=n(Jxe,"STRONG",{});var dht=s(ihe);uGo=r(dht,"flaubert"),dht.forEach(t),bGo=r(Jxe," \u2014 "),aV=n(Jxe,"A",{href:!0});var cht=s(aV);vGo=r(cht,"FlaubertForTokenClassification"),cht.forEach(t),FGo=r(Jxe," (FlauBERT model)"),Jxe.forEach(t),TGo=i(J),D4=n(J,"LI",{});var Yxe=s(D4);dhe=n(Yxe,"STRONG",{});var fht=s(dhe);MGo=r(fht,"fnet"),fht.forEach(t),EGo=r(Yxe," \u2014 "),nV=n(Yxe,"A",{href:!0});var mht=s(nV);CGo=r(mht,"FNetForTokenClassification"),mht.forEach(t),wGo=r(Yxe," (FNet model)"),Yxe.forEach(t),AGo=i(J),G4=n(J,"LI",{});var Kxe=s(G4);che=n(Kxe,"STRONG",{});var ght=s(che);yGo=r(ght,"funnel"),ght.forEach(t),LGo=r(Kxe," \u2014 "),sV=n(Kxe,"A",{href:!0});var hht=s(sV);xGo=r(hht,"FunnelForTokenClassification"),hht.forEach(t),$Go=r(Kxe," (Funnel Transformer model)"),Kxe.forEach(t),kGo=i(J),O4=n(J,"LI",{});var Zxe=s(O4);fhe=n(Zxe,"STRONG",{});var pht=s(fhe);SGo=r(pht,"gpt2"),pht.forEach(t),RGo=r(Zxe," \u2014 "),lV=n(Zxe,"A",{href:!0});var _ht=s(lV);PGo=r(_ht,"GPT2ForTokenClassification"),_ht.forEach(t),BGo=r(Zxe," (OpenAI GPT-2 model)"),Zxe.forEach(t),IGo=i(J),V4=n(J,"LI",{});var e$e=s(V4);mhe=n(e$e,"STRONG",{});var uht=s(mhe);NGo=r(uht,"ibert"),uht.forEach(t),qGo=r(e$e," \u2014 "),iV=n(e$e,"A",{href:!0});var bht=s(iV);jGo=r(bht,"IBertForTokenClassification"),bht.forEach(t),DGo=r(e$e," (I-BERT model)"),e$e.forEach(t),GGo=i(J),X4=n(J,"LI",{});var o$e=s(X4);ghe=n(o$e,"STRONG",{});var vht=s(ghe);OGo=r(vht,"layoutlm"),vht.forEach(t),VGo=r(o$e," \u2014 "),dV=n(o$e,"A",{href:!0});var Fht=s(dV);XGo=r(Fht,"LayoutLMForTokenClassification"),Fht.forEach(t),zGo=r(o$e," (LayoutLM model)"),o$e.forEach(t),WGo=i(J),z4=n(J,"LI",{});var r$e=s(z4);hhe=n(r$e,"STRONG",{});var Tht=s(hhe);QGo=r(Tht,"layoutlmv2"),Tht.forEach(t),HGo=r(r$e," \u2014 "),cV=n(r$e,"A",{href:!0});var Mht=s(cV);UGo=r(Mht,"LayoutLMv2ForTokenClassification"),Mht.forEach(t),JGo=r(r$e," (LayoutLMv2 model)"),r$e.forEach(t),YGo=i(J),W4=n(J,"LI",{});var t$e=s(W4);phe=n(t$e,"STRONG",{});var Eht=s(phe);KGo=r(Eht,"layoutlmv3"),Eht.forEach(t),ZGo=r(t$e," \u2014 "),fV=n(t$e,"A",{href:!0});var Cht=s(fV);eOo=r(Cht,"LayoutLMv3ForTokenClassification"),Cht.forEach(t),oOo=r(t$e," (LayoutLMv3 model)"),t$e.forEach(t),rOo=i(J),Q4=n(J,"LI",{});var a$e=s(Q4);_he=n(a$e,"STRONG",{});var wht=s(_he);tOo=r(wht,"longformer"),wht.forEach(t),aOo=r(a$e," \u2014 "),mV=n(a$e,"A",{href:!0});var Aht=s(mV);nOo=r(Aht,"LongformerForTokenClassification"),Aht.forEach(t),sOo=r(a$e," (Longformer model)"),a$e.forEach(t),lOo=i(J),H4=n(J,"LI",{});var n$e=s(H4);uhe=n(n$e,"STRONG",{});var yht=s(uhe);iOo=r(yht,"megatron-bert"),yht.forEach(t),dOo=r(n$e," \u2014 "),gV=n(n$e,"A",{href:!0});var Lht=s(gV);cOo=r(Lht,"MegatronBertForTokenClassification"),Lht.forEach(t),fOo=r(n$e," (MegatronBert model)"),n$e.forEach(t),mOo=i(J),U4=n(J,"LI",{});var s$e=s(U4);bhe=n(s$e,"STRONG",{});var xht=s(bhe);gOo=r(xht,"mobilebert"),xht.forEach(t),hOo=r(s$e," \u2014 "),hV=n(s$e,"A",{href:!0});var $ht=s(hV);pOo=r($ht,"MobileBertForTokenClassification"),$ht.forEach(t),_Oo=r(s$e," (MobileBERT model)"),s$e.forEach(t),uOo=i(J),J4=n(J,"LI",{});var l$e=s(J4);vhe=n(l$e,"STRONG",{});var kht=s(vhe);bOo=r(kht,"mpnet"),kht.forEach(t),vOo=r(l$e," \u2014 "),pV=n(l$e,"A",{href:!0});var Sht=s(pV);FOo=r(Sht,"MPNetForTokenClassification"),Sht.forEach(t),TOo=r(l$e," (MPNet model)"),l$e.forEach(t),MOo=i(J),Y4=n(J,"LI",{});var i$e=s(Y4);Fhe=n(i$e,"STRONG",{});var Rht=s(Fhe);EOo=r(Rht,"nystromformer"),Rht.forEach(t),COo=r(i$e," \u2014 "),_V=n(i$e,"A",{href:!0});var Pht=s(_V);wOo=r(Pht,"NystromformerForTokenClassification"),Pht.forEach(t),AOo=r(i$e," (Nystromformer model)"),i$e.forEach(t),yOo=i(J),K4=n(J,"LI",{});var d$e=s(K4);The=n(d$e,"STRONG",{});var Bht=s(The);LOo=r(Bht,"qdqbert"),Bht.forEach(t),xOo=r(d$e," \u2014 "),uV=n(d$e,"A",{href:!0});var Iht=s(uV);$Oo=r(Iht,"QDQBertForTokenClassification"),Iht.forEach(t),kOo=r(d$e," (QDQBert model)"),d$e.forEach(t),SOo=i(J),Z4=n(J,"LI",{});var c$e=s(Z4);Mhe=n(c$e,"STRONG",{});var Nht=s(Mhe);ROo=r(Nht,"rembert"),Nht.forEach(t),POo=r(c$e," \u2014 "),bV=n(c$e,"A",{href:!0});var qht=s(bV);BOo=r(qht,"RemBertForTokenClassification"),qht.forEach(t),IOo=r(c$e," (RemBERT model)"),c$e.forEach(t),NOo=i(J),e5=n(J,"LI",{});var f$e=s(e5);Ehe=n(f$e,"STRONG",{});var jht=s(Ehe);qOo=r(jht,"roberta"),jht.forEach(t),jOo=r(f$e," \u2014 "),vV=n(f$e,"A",{href:!0});var Dht=s(vV);DOo=r(Dht,"RobertaForTokenClassification"),Dht.forEach(t),GOo=r(f$e," (RoBERTa model)"),f$e.forEach(t),OOo=i(J),o5=n(J,"LI",{});var m$e=s(o5);Che=n(m$e,"STRONG",{});var Ght=s(Che);VOo=r(Ght,"roformer"),Ght.forEach(t),XOo=r(m$e," \u2014 "),FV=n(m$e,"A",{href:!0});var Oht=s(FV);zOo=r(Oht,"RoFormerForTokenClassification"),Oht.forEach(t),WOo=r(m$e," (RoFormer model)"),m$e.forEach(t),QOo=i(J),r5=n(J,"LI",{});var g$e=s(r5);whe=n(g$e,"STRONG",{});var Vht=s(whe);HOo=r(Vht,"squeezebert"),Vht.forEach(t),UOo=r(g$e," \u2014 "),TV=n(g$e,"A",{href:!0});var Xht=s(TV);JOo=r(Xht,"SqueezeBertForTokenClassification"),Xht.forEach(t),YOo=r(g$e," (SqueezeBERT model)"),g$e.forEach(t),KOo=i(J),t5=n(J,"LI",{});var h$e=s(t5);Ahe=n(h$e,"STRONG",{});var zht=s(Ahe);ZOo=r(zht,"xlm"),zht.forEach(t),eVo=r(h$e," \u2014 "),MV=n(h$e,"A",{href:!0});var Wht=s(MV);oVo=r(Wht,"XLMForTokenClassification"),Wht.forEach(t),rVo=r(h$e," (XLM model)"),h$e.forEach(t),tVo=i(J),a5=n(J,"LI",{});var p$e=s(a5);yhe=n(p$e,"STRONG",{});var Qht=s(yhe);aVo=r(Qht,"xlm-roberta"),Qht.forEach(t),nVo=r(p$e," \u2014 "),EV=n(p$e,"A",{href:!0});var Hht=s(EV);sVo=r(Hht,"XLMRobertaForTokenClassification"),Hht.forEach(t),lVo=r(p$e," (XLM-RoBERTa model)"),p$e.forEach(t),iVo=i(J),n5=n(J,"LI",{});var _$e=s(n5);Lhe=n(_$e,"STRONG",{});var Uht=s(Lhe);dVo=r(Uht,"xlm-roberta-xl"),Uht.forEach(t),cVo=r(_$e," \u2014 "),CV=n(_$e,"A",{href:!0});var Jht=s(CV);fVo=r(Jht,"XLMRobertaXLForTokenClassification"),Jht.forEach(t),mVo=r(_$e," (XLM-RoBERTa-XL model)"),_$e.forEach(t),gVo=i(J),s5=n(J,"LI",{});var u$e=s(s5);xhe=n(u$e,"STRONG",{});var Yht=s(xhe);hVo=r(Yht,"xlnet"),Yht.forEach(t),pVo=r(u$e," \u2014 "),wV=n(u$e,"A",{href:!0});var Kht=s(wV);_Vo=r(Kht,"XLNetForTokenClassification"),Kht.forEach(t),uVo=r(u$e," (XLNet model)"),u$e.forEach(t),bVo=i(J),l5=n(J,"LI",{});var b$e=s(l5);$he=n(b$e,"STRONG",{});var Zht=s($he);vVo=r(Zht,"yoso"),Zht.forEach(t),FVo=r(b$e," \u2014 "),AV=n(b$e,"A",{href:!0});var ept=s(AV);TVo=r(ept,"YosoForTokenClassification"),ept.forEach(t),MVo=r(b$e," (YOSO model)"),b$e.forEach(t),J.forEach(t),EVo=i(da),i5=n(da,"P",{});var v$e=s(i5);CVo=r(v$e,"The model is set in evaluation mode by default using "),khe=n(v$e,"CODE",{});var opt=s(khe);wVo=r(opt,"model.eval()"),opt.forEach(t),AVo=r(v$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),She=n(v$e,"CODE",{});var rpt=s(She);yVo=r(rpt,"model.train()"),rpt.forEach(t),v$e.forEach(t),LVo=i(da),T(d5.$$.fragment,da),da.forEach(t),Js.forEach(t),Nqe=i(f),Ki=n(f,"H2",{class:!0});var GDe=s(Ki);c5=n(GDe,"A",{id:!0,class:!0,href:!0});var tpt=s(c5);Rhe=n(tpt,"SPAN",{});var apt=s(Rhe);T(WL.$$.fragment,apt),apt.forEach(t),tpt.forEach(t),xVo=i(GDe),Phe=n(GDe,"SPAN",{});var npt=s(Phe);$Vo=r(npt,"AutoModelForQuestionAnswering"),npt.forEach(t),GDe.forEach(t),qqe=i(f),No=n(f,"DIV",{class:!0});var Ys=s(No);T(QL.$$.fragment,Ys),kVo=i(Ys),Zi=n(Ys,"P",{});var NZ=s(Zi);SVo=r(NZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),yV=n(NZ,"A",{href:!0});var spt=s(yV);RVo=r(spt,"from_pretrained()"),spt.forEach(t),PVo=r(NZ," class method or the "),LV=n(NZ,"A",{href:!0});var lpt=s(LV);BVo=r(lpt,"from_config()"),lpt.forEach(t),IVo=r(NZ,` class
method.`),NZ.forEach(t),NVo=i(Ys),HL=n(Ys,"P",{});var ODe=s(HL);qVo=r(ODe,"This class cannot be instantiated directly using "),Bhe=n(ODe,"CODE",{});var ipt=s(Bhe);jVo=r(ipt,"__init__()"),ipt.forEach(t),DVo=r(ODe," (throws an error)."),ODe.forEach(t),GVo=i(Ys),mt=n(Ys,"DIV",{class:!0});var Y0=s(mt);T(UL.$$.fragment,Y0),OVo=i(Y0),Ihe=n(Y0,"P",{});var dpt=s(Ihe);VVo=r(dpt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),dpt.forEach(t),XVo=i(Y0),ed=n(Y0,"P",{});var qZ=s(ed);zVo=r(qZ,`Note:
Loading a model from its configuration file does `),Nhe=n(qZ,"STRONG",{});var cpt=s(Nhe);WVo=r(cpt,"not"),cpt.forEach(t),QVo=r(qZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),xV=n(qZ,"A",{href:!0});var fpt=s(xV);HVo=r(fpt,"from_pretrained()"),fpt.forEach(t),UVo=r(qZ," to load the model weights."),qZ.forEach(t),JVo=i(Y0),T(f5.$$.fragment,Y0),Y0.forEach(t),YVo=i(Ys),no=n(Ys,"DIV",{class:!0});var ca=s(no);T(JL.$$.fragment,ca),KVo=i(ca),qhe=n(ca,"P",{});var mpt=s(qhe);ZVo=r(mpt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),mpt.forEach(t),eXo=i(ca),Na=n(ca,"P",{});var K0=s(Na);oXo=r(K0,"The model class to instantiate is selected based on the "),jhe=n(K0,"CODE",{});var gpt=s(jhe);rXo=r(gpt,"model_type"),gpt.forEach(t),tXo=r(K0,` property of the config object (either
passed as an argument or loaded from `),Dhe=n(K0,"CODE",{});var hpt=s(Dhe);aXo=r(hpt,"pretrained_model_name_or_path"),hpt.forEach(t),nXo=r(K0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ghe=n(K0,"CODE",{});var ppt=s(Ghe);sXo=r(ppt,"pretrained_model_name_or_path"),ppt.forEach(t),lXo=r(K0,":"),K0.forEach(t),iXo=i(ca),V=n(ca,"UL",{});var X=s(V);m5=n(X,"LI",{});var F$e=s(m5);Ohe=n(F$e,"STRONG",{});var _pt=s(Ohe);dXo=r(_pt,"albert"),_pt.forEach(t),cXo=r(F$e," \u2014 "),$V=n(F$e,"A",{href:!0});var upt=s($V);fXo=r(upt,"AlbertForQuestionAnswering"),upt.forEach(t),mXo=r(F$e," (ALBERT model)"),F$e.forEach(t),gXo=i(X),g5=n(X,"LI",{});var T$e=s(g5);Vhe=n(T$e,"STRONG",{});var bpt=s(Vhe);hXo=r(bpt,"bart"),bpt.forEach(t),pXo=r(T$e," \u2014 "),kV=n(T$e,"A",{href:!0});var vpt=s(kV);_Xo=r(vpt,"BartForQuestionAnswering"),vpt.forEach(t),uXo=r(T$e," (BART model)"),T$e.forEach(t),bXo=i(X),h5=n(X,"LI",{});var M$e=s(h5);Xhe=n(M$e,"STRONG",{});var Fpt=s(Xhe);vXo=r(Fpt,"bert"),Fpt.forEach(t),FXo=r(M$e," \u2014 "),SV=n(M$e,"A",{href:!0});var Tpt=s(SV);TXo=r(Tpt,"BertForQuestionAnswering"),Tpt.forEach(t),MXo=r(M$e," (BERT model)"),M$e.forEach(t),EXo=i(X),p5=n(X,"LI",{});var E$e=s(p5);zhe=n(E$e,"STRONG",{});var Mpt=s(zhe);CXo=r(Mpt,"big_bird"),Mpt.forEach(t),wXo=r(E$e," \u2014 "),RV=n(E$e,"A",{href:!0});var Ept=s(RV);AXo=r(Ept,"BigBirdForQuestionAnswering"),Ept.forEach(t),yXo=r(E$e," (BigBird model)"),E$e.forEach(t),LXo=i(X),_5=n(X,"LI",{});var C$e=s(_5);Whe=n(C$e,"STRONG",{});var Cpt=s(Whe);xXo=r(Cpt,"bigbird_pegasus"),Cpt.forEach(t),$Xo=r(C$e," \u2014 "),PV=n(C$e,"A",{href:!0});var wpt=s(PV);kXo=r(wpt,"BigBirdPegasusForQuestionAnswering"),wpt.forEach(t),SXo=r(C$e," (BigBirdPegasus model)"),C$e.forEach(t),RXo=i(X),u5=n(X,"LI",{});var w$e=s(u5);Qhe=n(w$e,"STRONG",{});var Apt=s(Qhe);PXo=r(Apt,"camembert"),Apt.forEach(t),BXo=r(w$e," \u2014 "),BV=n(w$e,"A",{href:!0});var ypt=s(BV);IXo=r(ypt,"CamembertForQuestionAnswering"),ypt.forEach(t),NXo=r(w$e," (CamemBERT model)"),w$e.forEach(t),qXo=i(X),b5=n(X,"LI",{});var A$e=s(b5);Hhe=n(A$e,"STRONG",{});var Lpt=s(Hhe);jXo=r(Lpt,"canine"),Lpt.forEach(t),DXo=r(A$e," \u2014 "),IV=n(A$e,"A",{href:!0});var xpt=s(IV);GXo=r(xpt,"CanineForQuestionAnswering"),xpt.forEach(t),OXo=r(A$e," (Canine model)"),A$e.forEach(t),VXo=i(X),v5=n(X,"LI",{});var y$e=s(v5);Uhe=n(y$e,"STRONG",{});var $pt=s(Uhe);XXo=r($pt,"convbert"),$pt.forEach(t),zXo=r(y$e," \u2014 "),NV=n(y$e,"A",{href:!0});var kpt=s(NV);WXo=r(kpt,"ConvBertForQuestionAnswering"),kpt.forEach(t),QXo=r(y$e," (ConvBERT model)"),y$e.forEach(t),HXo=i(X),F5=n(X,"LI",{});var L$e=s(F5);Jhe=n(L$e,"STRONG",{});var Spt=s(Jhe);UXo=r(Spt,"data2vec-text"),Spt.forEach(t),JXo=r(L$e," \u2014 "),qV=n(L$e,"A",{href:!0});var Rpt=s(qV);YXo=r(Rpt,"Data2VecTextForQuestionAnswering"),Rpt.forEach(t),KXo=r(L$e," (Data2VecText model)"),L$e.forEach(t),ZXo=i(X),T5=n(X,"LI",{});var x$e=s(T5);Yhe=n(x$e,"STRONG",{});var Ppt=s(Yhe);ezo=r(Ppt,"deberta"),Ppt.forEach(t),ozo=r(x$e," \u2014 "),jV=n(x$e,"A",{href:!0});var Bpt=s(jV);rzo=r(Bpt,"DebertaForQuestionAnswering"),Bpt.forEach(t),tzo=r(x$e," (DeBERTa model)"),x$e.forEach(t),azo=i(X),M5=n(X,"LI",{});var $$e=s(M5);Khe=n($$e,"STRONG",{});var Ipt=s(Khe);nzo=r(Ipt,"deberta-v2"),Ipt.forEach(t),szo=r($$e," \u2014 "),DV=n($$e,"A",{href:!0});var Npt=s(DV);lzo=r(Npt,"DebertaV2ForQuestionAnswering"),Npt.forEach(t),izo=r($$e," (DeBERTa-v2 model)"),$$e.forEach(t),dzo=i(X),E5=n(X,"LI",{});var k$e=s(E5);Zhe=n(k$e,"STRONG",{});var qpt=s(Zhe);czo=r(qpt,"distilbert"),qpt.forEach(t),fzo=r(k$e," \u2014 "),GV=n(k$e,"A",{href:!0});var jpt=s(GV);mzo=r(jpt,"DistilBertForQuestionAnswering"),jpt.forEach(t),gzo=r(k$e," (DistilBERT model)"),k$e.forEach(t),hzo=i(X),C5=n(X,"LI",{});var S$e=s(C5);epe=n(S$e,"STRONG",{});var Dpt=s(epe);pzo=r(Dpt,"electra"),Dpt.forEach(t),_zo=r(S$e," \u2014 "),OV=n(S$e,"A",{href:!0});var Gpt=s(OV);uzo=r(Gpt,"ElectraForQuestionAnswering"),Gpt.forEach(t),bzo=r(S$e," (ELECTRA model)"),S$e.forEach(t),vzo=i(X),w5=n(X,"LI",{});var R$e=s(w5);ope=n(R$e,"STRONG",{});var Opt=s(ope);Fzo=r(Opt,"flaubert"),Opt.forEach(t),Tzo=r(R$e," \u2014 "),VV=n(R$e,"A",{href:!0});var Vpt=s(VV);Mzo=r(Vpt,"FlaubertForQuestionAnsweringSimple"),Vpt.forEach(t),Ezo=r(R$e," (FlauBERT model)"),R$e.forEach(t),Czo=i(X),A5=n(X,"LI",{});var P$e=s(A5);rpe=n(P$e,"STRONG",{});var Xpt=s(rpe);wzo=r(Xpt,"fnet"),Xpt.forEach(t),Azo=r(P$e," \u2014 "),XV=n(P$e,"A",{href:!0});var zpt=s(XV);yzo=r(zpt,"FNetForQuestionAnswering"),zpt.forEach(t),Lzo=r(P$e," (FNet model)"),P$e.forEach(t),xzo=i(X),y5=n(X,"LI",{});var B$e=s(y5);tpe=n(B$e,"STRONG",{});var Wpt=s(tpe);$zo=r(Wpt,"funnel"),Wpt.forEach(t),kzo=r(B$e," \u2014 "),zV=n(B$e,"A",{href:!0});var Qpt=s(zV);Szo=r(Qpt,"FunnelForQuestionAnswering"),Qpt.forEach(t),Rzo=r(B$e," (Funnel Transformer model)"),B$e.forEach(t),Pzo=i(X),L5=n(X,"LI",{});var I$e=s(L5);ape=n(I$e,"STRONG",{});var Hpt=s(ape);Bzo=r(Hpt,"gptj"),Hpt.forEach(t),Izo=r(I$e," \u2014 "),WV=n(I$e,"A",{href:!0});var Upt=s(WV);Nzo=r(Upt,"GPTJForQuestionAnswering"),Upt.forEach(t),qzo=r(I$e," (GPT-J model)"),I$e.forEach(t),jzo=i(X),x5=n(X,"LI",{});var N$e=s(x5);npe=n(N$e,"STRONG",{});var Jpt=s(npe);Dzo=r(Jpt,"ibert"),Jpt.forEach(t),Gzo=r(N$e," \u2014 "),QV=n(N$e,"A",{href:!0});var Ypt=s(QV);Ozo=r(Ypt,"IBertForQuestionAnswering"),Ypt.forEach(t),Vzo=r(N$e," (I-BERT model)"),N$e.forEach(t),Xzo=i(X),$5=n(X,"LI",{});var q$e=s($5);spe=n(q$e,"STRONG",{});var Kpt=s(spe);zzo=r(Kpt,"layoutlmv2"),Kpt.forEach(t),Wzo=r(q$e," \u2014 "),HV=n(q$e,"A",{href:!0});var Zpt=s(HV);Qzo=r(Zpt,"LayoutLMv2ForQuestionAnswering"),Zpt.forEach(t),Hzo=r(q$e," (LayoutLMv2 model)"),q$e.forEach(t),Uzo=i(X),k5=n(X,"LI",{});var j$e=s(k5);lpe=n(j$e,"STRONG",{});var e_t=s(lpe);Jzo=r(e_t,"layoutlmv3"),e_t.forEach(t),Yzo=r(j$e," \u2014 "),UV=n(j$e,"A",{href:!0});var o_t=s(UV);Kzo=r(o_t,"LayoutLMv3ForQuestionAnswering"),o_t.forEach(t),Zzo=r(j$e," (LayoutLMv3 model)"),j$e.forEach(t),eWo=i(X),S5=n(X,"LI",{});var D$e=s(S5);ipe=n(D$e,"STRONG",{});var r_t=s(ipe);oWo=r(r_t,"led"),r_t.forEach(t),rWo=r(D$e," \u2014 "),JV=n(D$e,"A",{href:!0});var t_t=s(JV);tWo=r(t_t,"LEDForQuestionAnswering"),t_t.forEach(t),aWo=r(D$e," (LED model)"),D$e.forEach(t),nWo=i(X),R5=n(X,"LI",{});var G$e=s(R5);dpe=n(G$e,"STRONG",{});var a_t=s(dpe);sWo=r(a_t,"longformer"),a_t.forEach(t),lWo=r(G$e," \u2014 "),YV=n(G$e,"A",{href:!0});var n_t=s(YV);iWo=r(n_t,"LongformerForQuestionAnswering"),n_t.forEach(t),dWo=r(G$e," (Longformer model)"),G$e.forEach(t),cWo=i(X),P5=n(X,"LI",{});var O$e=s(P5);cpe=n(O$e,"STRONG",{});var s_t=s(cpe);fWo=r(s_t,"lxmert"),s_t.forEach(t),mWo=r(O$e," \u2014 "),KV=n(O$e,"A",{href:!0});var l_t=s(KV);gWo=r(l_t,"LxmertForQuestionAnswering"),l_t.forEach(t),hWo=r(O$e," (LXMERT model)"),O$e.forEach(t),pWo=i(X),B5=n(X,"LI",{});var V$e=s(B5);fpe=n(V$e,"STRONG",{});var i_t=s(fpe);_Wo=r(i_t,"mbart"),i_t.forEach(t),uWo=r(V$e," \u2014 "),ZV=n(V$e,"A",{href:!0});var d_t=s(ZV);bWo=r(d_t,"MBartForQuestionAnswering"),d_t.forEach(t),vWo=r(V$e," (mBART model)"),V$e.forEach(t),FWo=i(X),I5=n(X,"LI",{});var X$e=s(I5);mpe=n(X$e,"STRONG",{});var c_t=s(mpe);TWo=r(c_t,"megatron-bert"),c_t.forEach(t),MWo=r(X$e," \u2014 "),eX=n(X$e,"A",{href:!0});var f_t=s(eX);EWo=r(f_t,"MegatronBertForQuestionAnswering"),f_t.forEach(t),CWo=r(X$e," (MegatronBert model)"),X$e.forEach(t),wWo=i(X),N5=n(X,"LI",{});var z$e=s(N5);gpe=n(z$e,"STRONG",{});var m_t=s(gpe);AWo=r(m_t,"mobilebert"),m_t.forEach(t),yWo=r(z$e," \u2014 "),oX=n(z$e,"A",{href:!0});var g_t=s(oX);LWo=r(g_t,"MobileBertForQuestionAnswering"),g_t.forEach(t),xWo=r(z$e," (MobileBERT model)"),z$e.forEach(t),$Wo=i(X),q5=n(X,"LI",{});var W$e=s(q5);hpe=n(W$e,"STRONG",{});var h_t=s(hpe);kWo=r(h_t,"mpnet"),h_t.forEach(t),SWo=r(W$e," \u2014 "),rX=n(W$e,"A",{href:!0});var p_t=s(rX);RWo=r(p_t,"MPNetForQuestionAnswering"),p_t.forEach(t),PWo=r(W$e," (MPNet model)"),W$e.forEach(t),BWo=i(X),j5=n(X,"LI",{});var Q$e=s(j5);ppe=n(Q$e,"STRONG",{});var __t=s(ppe);IWo=r(__t,"nystromformer"),__t.forEach(t),NWo=r(Q$e," \u2014 "),tX=n(Q$e,"A",{href:!0});var u_t=s(tX);qWo=r(u_t,"NystromformerForQuestionAnswering"),u_t.forEach(t),jWo=r(Q$e," (Nystromformer model)"),Q$e.forEach(t),DWo=i(X),D5=n(X,"LI",{});var H$e=s(D5);_pe=n(H$e,"STRONG",{});var b_t=s(_pe);GWo=r(b_t,"qdqbert"),b_t.forEach(t),OWo=r(H$e," \u2014 "),aX=n(H$e,"A",{href:!0});var v_t=s(aX);VWo=r(v_t,"QDQBertForQuestionAnswering"),v_t.forEach(t),XWo=r(H$e," (QDQBert model)"),H$e.forEach(t),zWo=i(X),G5=n(X,"LI",{});var U$e=s(G5);upe=n(U$e,"STRONG",{});var F_t=s(upe);WWo=r(F_t,"reformer"),F_t.forEach(t),QWo=r(U$e," \u2014 "),nX=n(U$e,"A",{href:!0});var T_t=s(nX);HWo=r(T_t,"ReformerForQuestionAnswering"),T_t.forEach(t),UWo=r(U$e," (Reformer model)"),U$e.forEach(t),JWo=i(X),O5=n(X,"LI",{});var J$e=s(O5);bpe=n(J$e,"STRONG",{});var M_t=s(bpe);YWo=r(M_t,"rembert"),M_t.forEach(t),KWo=r(J$e," \u2014 "),sX=n(J$e,"A",{href:!0});var E_t=s(sX);ZWo=r(E_t,"RemBertForQuestionAnswering"),E_t.forEach(t),eQo=r(J$e," (RemBERT model)"),J$e.forEach(t),oQo=i(X),V5=n(X,"LI",{});var Y$e=s(V5);vpe=n(Y$e,"STRONG",{});var C_t=s(vpe);rQo=r(C_t,"roberta"),C_t.forEach(t),tQo=r(Y$e," \u2014 "),lX=n(Y$e,"A",{href:!0});var w_t=s(lX);aQo=r(w_t,"RobertaForQuestionAnswering"),w_t.forEach(t),nQo=r(Y$e," (RoBERTa model)"),Y$e.forEach(t),sQo=i(X),X5=n(X,"LI",{});var K$e=s(X5);Fpe=n(K$e,"STRONG",{});var A_t=s(Fpe);lQo=r(A_t,"roformer"),A_t.forEach(t),iQo=r(K$e," \u2014 "),iX=n(K$e,"A",{href:!0});var y_t=s(iX);dQo=r(y_t,"RoFormerForQuestionAnswering"),y_t.forEach(t),cQo=r(K$e," (RoFormer model)"),K$e.forEach(t),fQo=i(X),z5=n(X,"LI",{});var Z$e=s(z5);Tpe=n(Z$e,"STRONG",{});var L_t=s(Tpe);mQo=r(L_t,"splinter"),L_t.forEach(t),gQo=r(Z$e," \u2014 "),dX=n(Z$e,"A",{href:!0});var x_t=s(dX);hQo=r(x_t,"SplinterForQuestionAnswering"),x_t.forEach(t),pQo=r(Z$e," (Splinter model)"),Z$e.forEach(t),_Qo=i(X),W5=n(X,"LI",{});var eke=s(W5);Mpe=n(eke,"STRONG",{});var $_t=s(Mpe);uQo=r($_t,"squeezebert"),$_t.forEach(t),bQo=r(eke," \u2014 "),cX=n(eke,"A",{href:!0});var k_t=s(cX);vQo=r(k_t,"SqueezeBertForQuestionAnswering"),k_t.forEach(t),FQo=r(eke," (SqueezeBERT model)"),eke.forEach(t),TQo=i(X),Q5=n(X,"LI",{});var oke=s(Q5);Epe=n(oke,"STRONG",{});var S_t=s(Epe);MQo=r(S_t,"xlm"),S_t.forEach(t),EQo=r(oke," \u2014 "),fX=n(oke,"A",{href:!0});var R_t=s(fX);CQo=r(R_t,"XLMForQuestionAnsweringSimple"),R_t.forEach(t),wQo=r(oke," (XLM model)"),oke.forEach(t),AQo=i(X),H5=n(X,"LI",{});var rke=s(H5);Cpe=n(rke,"STRONG",{});var P_t=s(Cpe);yQo=r(P_t,"xlm-roberta"),P_t.forEach(t),LQo=r(rke," \u2014 "),mX=n(rke,"A",{href:!0});var B_t=s(mX);xQo=r(B_t,"XLMRobertaForQuestionAnswering"),B_t.forEach(t),$Qo=r(rke," (XLM-RoBERTa model)"),rke.forEach(t),kQo=i(X),U5=n(X,"LI",{});var tke=s(U5);wpe=n(tke,"STRONG",{});var I_t=s(wpe);SQo=r(I_t,"xlm-roberta-xl"),I_t.forEach(t),RQo=r(tke," \u2014 "),gX=n(tke,"A",{href:!0});var N_t=s(gX);PQo=r(N_t,"XLMRobertaXLForQuestionAnswering"),N_t.forEach(t),BQo=r(tke," (XLM-RoBERTa-XL model)"),tke.forEach(t),IQo=i(X),J5=n(X,"LI",{});var ake=s(J5);Ape=n(ake,"STRONG",{});var q_t=s(Ape);NQo=r(q_t,"xlnet"),q_t.forEach(t),qQo=r(ake," \u2014 "),hX=n(ake,"A",{href:!0});var j_t=s(hX);jQo=r(j_t,"XLNetForQuestionAnsweringSimple"),j_t.forEach(t),DQo=r(ake," (XLNet model)"),ake.forEach(t),GQo=i(X),Y5=n(X,"LI",{});var nke=s(Y5);ype=n(nke,"STRONG",{});var D_t=s(ype);OQo=r(D_t,"yoso"),D_t.forEach(t),VQo=r(nke," \u2014 "),pX=n(nke,"A",{href:!0});var G_t=s(pX);XQo=r(G_t,"YosoForQuestionAnswering"),G_t.forEach(t),zQo=r(nke," (YOSO model)"),nke.forEach(t),X.forEach(t),WQo=i(ca),K5=n(ca,"P",{});var ske=s(K5);QQo=r(ske,"The model is set in evaluation mode by default using "),Lpe=n(ske,"CODE",{});var O_t=s(Lpe);HQo=r(O_t,"model.eval()"),O_t.forEach(t),UQo=r(ske,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xpe=n(ske,"CODE",{});var V_t=s(xpe);JQo=r(V_t,"model.train()"),V_t.forEach(t),ske.forEach(t),YQo=i(ca),T(Z5.$$.fragment,ca),ca.forEach(t),Ys.forEach(t),jqe=i(f),od=n(f,"H2",{class:!0});var VDe=s(od);ev=n(VDe,"A",{id:!0,class:!0,href:!0});var X_t=s(ev);$pe=n(X_t,"SPAN",{});var z_t=s($pe);T(YL.$$.fragment,z_t),z_t.forEach(t),X_t.forEach(t),KQo=i(VDe),kpe=n(VDe,"SPAN",{});var W_t=s(kpe);ZQo=r(W_t,"AutoModelForTableQuestionAnswering"),W_t.forEach(t),VDe.forEach(t),Dqe=i(f),qo=n(f,"DIV",{class:!0});var Ks=s(qo);T(KL.$$.fragment,Ks),eHo=i(Ks),rd=n(Ks,"P",{});var jZ=s(rd);oHo=r(jZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),_X=n(jZ,"A",{href:!0});var Q_t=s(_X);rHo=r(Q_t,"from_pretrained()"),Q_t.forEach(t),tHo=r(jZ," class method or the "),uX=n(jZ,"A",{href:!0});var H_t=s(uX);aHo=r(H_t,"from_config()"),H_t.forEach(t),nHo=r(jZ,` class
method.`),jZ.forEach(t),sHo=i(Ks),ZL=n(Ks,"P",{});var XDe=s(ZL);lHo=r(XDe,"This class cannot be instantiated directly using "),Spe=n(XDe,"CODE",{});var U_t=s(Spe);iHo=r(U_t,"__init__()"),U_t.forEach(t),dHo=r(XDe," (throws an error)."),XDe.forEach(t),cHo=i(Ks),gt=n(Ks,"DIV",{class:!0});var Z0=s(gt);T(e8.$$.fragment,Z0),fHo=i(Z0),Rpe=n(Z0,"P",{});var J_t=s(Rpe);mHo=r(J_t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),J_t.forEach(t),gHo=i(Z0),td=n(Z0,"P",{});var DZ=s(td);hHo=r(DZ,`Note:
Loading a model from its configuration file does `),Ppe=n(DZ,"STRONG",{});var Y_t=s(Ppe);pHo=r(Y_t,"not"),Y_t.forEach(t),_Ho=r(DZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),bX=n(DZ,"A",{href:!0});var K_t=s(bX);uHo=r(K_t,"from_pretrained()"),K_t.forEach(t),bHo=r(DZ," to load the model weights."),DZ.forEach(t),vHo=i(Z0),T(ov.$$.fragment,Z0),Z0.forEach(t),FHo=i(Ks),so=n(Ks,"DIV",{class:!0});var fa=s(so);T(o8.$$.fragment,fa),THo=i(fa),Bpe=n(fa,"P",{});var Z_t=s(Bpe);MHo=r(Z_t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Z_t.forEach(t),EHo=i(fa),qa=n(fa,"P",{});var eA=s(qa);CHo=r(eA,"The model class to instantiate is selected based on the "),Ipe=n(eA,"CODE",{});var eut=s(Ipe);wHo=r(eut,"model_type"),eut.forEach(t),AHo=r(eA,` property of the config object (either
passed as an argument or loaded from `),Npe=n(eA,"CODE",{});var out=s(Npe);yHo=r(out,"pretrained_model_name_or_path"),out.forEach(t),LHo=r(eA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qpe=n(eA,"CODE",{});var rut=s(qpe);xHo=r(rut,"pretrained_model_name_or_path"),rut.forEach(t),$Ho=r(eA,":"),eA.forEach(t),kHo=i(fa),jpe=n(fa,"UL",{});var tut=s(jpe);rv=n(tut,"LI",{});var lke=s(rv);Dpe=n(lke,"STRONG",{});var aut=s(Dpe);SHo=r(aut,"tapas"),aut.forEach(t),RHo=r(lke," \u2014 "),vX=n(lke,"A",{href:!0});var nut=s(vX);PHo=r(nut,"TapasForQuestionAnswering"),nut.forEach(t),BHo=r(lke," (TAPAS model)"),lke.forEach(t),tut.forEach(t),IHo=i(fa),tv=n(fa,"P",{});var ike=s(tv);NHo=r(ike,"The model is set in evaluation mode by default using "),Gpe=n(ike,"CODE",{});var sut=s(Gpe);qHo=r(sut,"model.eval()"),sut.forEach(t),jHo=r(ike,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ope=n(ike,"CODE",{});var lut=s(Ope);DHo=r(lut,"model.train()"),lut.forEach(t),ike.forEach(t),GHo=i(fa),T(av.$$.fragment,fa),fa.forEach(t),Ks.forEach(t),Gqe=i(f),ad=n(f,"H2",{class:!0});var zDe=s(ad);nv=n(zDe,"A",{id:!0,class:!0,href:!0});var iut=s(nv);Vpe=n(iut,"SPAN",{});var dut=s(Vpe);T(r8.$$.fragment,dut),dut.forEach(t),iut.forEach(t),OHo=i(zDe),Xpe=n(zDe,"SPAN",{});var cut=s(Xpe);VHo=r(cut,"AutoModelForImageClassification"),cut.forEach(t),zDe.forEach(t),Oqe=i(f),jo=n(f,"DIV",{class:!0});var Zs=s(jo);T(t8.$$.fragment,Zs),XHo=i(Zs),nd=n(Zs,"P",{});var GZ=s(nd);zHo=r(GZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),FX=n(GZ,"A",{href:!0});var fut=s(FX);WHo=r(fut,"from_pretrained()"),fut.forEach(t),QHo=r(GZ," class method or the "),TX=n(GZ,"A",{href:!0});var mut=s(TX);HHo=r(mut,"from_config()"),mut.forEach(t),UHo=r(GZ,` class
method.`),GZ.forEach(t),JHo=i(Zs),a8=n(Zs,"P",{});var WDe=s(a8);YHo=r(WDe,"This class cannot be instantiated directly using "),zpe=n(WDe,"CODE",{});var gut=s(zpe);KHo=r(gut,"__init__()"),gut.forEach(t),ZHo=r(WDe," (throws an error)."),WDe.forEach(t),eUo=i(Zs),ht=n(Zs,"DIV",{class:!0});var oA=s(ht);T(n8.$$.fragment,oA),oUo=i(oA),Wpe=n(oA,"P",{});var hut=s(Wpe);rUo=r(hut,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),hut.forEach(t),tUo=i(oA),sd=n(oA,"P",{});var OZ=s(sd);aUo=r(OZ,`Note:
Loading a model from its configuration file does `),Qpe=n(OZ,"STRONG",{});var put=s(Qpe);nUo=r(put,"not"),put.forEach(t),sUo=r(OZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),MX=n(OZ,"A",{href:!0});var _ut=s(MX);lUo=r(_ut,"from_pretrained()"),_ut.forEach(t),iUo=r(OZ," to load the model weights."),OZ.forEach(t),dUo=i(oA),T(sv.$$.fragment,oA),oA.forEach(t),cUo=i(Zs),lo=n(Zs,"DIV",{class:!0});var ma=s(lo);T(s8.$$.fragment,ma),fUo=i(ma),Hpe=n(ma,"P",{});var uut=s(Hpe);mUo=r(uut,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),uut.forEach(t),gUo=i(ma),ja=n(ma,"P",{});var rA=s(ja);hUo=r(rA,"The model class to instantiate is selected based on the "),Upe=n(rA,"CODE",{});var but=s(Upe);pUo=r(but,"model_type"),but.forEach(t),_Uo=r(rA,` property of the config object (either
passed as an argument or loaded from `),Jpe=n(rA,"CODE",{});var vut=s(Jpe);uUo=r(vut,"pretrained_model_name_or_path"),vut.forEach(t),bUo=r(rA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ype=n(rA,"CODE",{});var Fut=s(Ype);vUo=r(Fut,"pretrained_model_name_or_path"),Fut.forEach(t),FUo=r(rA,":"),rA.forEach(t),TUo=i(ma),Fe=n(ma,"UL",{});var Me=s(Fe);lv=n(Me,"LI",{});var dke=s(lv);Kpe=n(dke,"STRONG",{});var Tut=s(Kpe);MUo=r(Tut,"beit"),Tut.forEach(t),EUo=r(dke," \u2014 "),EX=n(dke,"A",{href:!0});var Mut=s(EX);CUo=r(Mut,"BeitForImageClassification"),Mut.forEach(t),wUo=r(dke," (BEiT model)"),dke.forEach(t),AUo=i(Me),iv=n(Me,"LI",{});var cke=s(iv);Zpe=n(cke,"STRONG",{});var Eut=s(Zpe);yUo=r(Eut,"convnext"),Eut.forEach(t),LUo=r(cke," \u2014 "),CX=n(cke,"A",{href:!0});var Cut=s(CX);xUo=r(Cut,"ConvNextForImageClassification"),Cut.forEach(t),$Uo=r(cke," (ConvNext model)"),cke.forEach(t),kUo=i(Me),dv=n(Me,"LI",{});var fke=s(dv);e_e=n(fke,"STRONG",{});var wut=s(e_e);SUo=r(wut,"cvt"),wut.forEach(t),RUo=r(fke," \u2014 "),wX=n(fke,"A",{href:!0});var Aut=s(wX);PUo=r(Aut,"CvtForImageClassification"),Aut.forEach(t),BUo=r(fke," (CvT model)"),fke.forEach(t),IUo=i(Me),cv=n(Me,"LI",{});var mke=s(cv);o_e=n(mke,"STRONG",{});var yut=s(o_e);NUo=r(yut,"data2vec-vision"),yut.forEach(t),qUo=r(mke," \u2014 "),AX=n(mke,"A",{href:!0});var Lut=s(AX);jUo=r(Lut,"Data2VecVisionForImageClassification"),Lut.forEach(t),DUo=r(mke," (Data2VecVision model)"),mke.forEach(t),GUo=i(Me),Bs=n(Me,"LI",{});var z$=s(Bs);r_e=n(z$,"STRONG",{});var xut=s(r_e);OUo=r(xut,"deit"),xut.forEach(t),VUo=r(z$," \u2014 "),yX=n(z$,"A",{href:!0});var $ut=s(yX);XUo=r($ut,"DeiTForImageClassification"),$ut.forEach(t),zUo=r(z$," or "),LX=n(z$,"A",{href:!0});var kut=s(LX);WUo=r(kut,"DeiTForImageClassificationWithTeacher"),kut.forEach(t),QUo=r(z$," (DeiT model)"),z$.forEach(t),HUo=i(Me),fv=n(Me,"LI",{});var gke=s(fv);t_e=n(gke,"STRONG",{});var Sut=s(t_e);UUo=r(Sut,"imagegpt"),Sut.forEach(t),JUo=r(gke," \u2014 "),xX=n(gke,"A",{href:!0});var Rut=s(xX);YUo=r(Rut,"ImageGPTForImageClassification"),Rut.forEach(t),KUo=r(gke," (ImageGPT model)"),gke.forEach(t),ZUo=i(Me),pt=n(Me,"LI",{});var hf=s(pt);a_e=n(hf,"STRONG",{});var Put=s(a_e);eJo=r(Put,"perceiver"),Put.forEach(t),oJo=r(hf," \u2014 "),$X=n(hf,"A",{href:!0});var But=s($X);rJo=r(But,"PerceiverForImageClassificationLearned"),But.forEach(t),tJo=r(hf," or "),kX=n(hf,"A",{href:!0});var Iut=s(kX);aJo=r(Iut,"PerceiverForImageClassificationFourier"),Iut.forEach(t),nJo=r(hf," or "),SX=n(hf,"A",{href:!0});var Nut=s(SX);sJo=r(Nut,"PerceiverForImageClassificationConvProcessing"),Nut.forEach(t),lJo=r(hf," (Perceiver model)"),hf.forEach(t),iJo=i(Me),mv=n(Me,"LI",{});var hke=s(mv);n_e=n(hke,"STRONG",{});var qut=s(n_e);dJo=r(qut,"poolformer"),qut.forEach(t),cJo=r(hke," \u2014 "),RX=n(hke,"A",{href:!0});var jut=s(RX);fJo=r(jut,"PoolFormerForImageClassification"),jut.forEach(t),mJo=r(hke," (PoolFormer model)"),hke.forEach(t),gJo=i(Me),gv=n(Me,"LI",{});var pke=s(gv);s_e=n(pke,"STRONG",{});var Dut=s(s_e);hJo=r(Dut,"regnet"),Dut.forEach(t),pJo=r(pke," \u2014 "),PX=n(pke,"A",{href:!0});var Gut=s(PX);_Jo=r(Gut,"RegNetForImageClassification"),Gut.forEach(t),uJo=r(pke," (RegNet model)"),pke.forEach(t),bJo=i(Me),hv=n(Me,"LI",{});var _ke=s(hv);l_e=n(_ke,"STRONG",{});var Out=s(l_e);vJo=r(Out,"resnet"),Out.forEach(t),FJo=r(_ke," \u2014 "),BX=n(_ke,"A",{href:!0});var Vut=s(BX);TJo=r(Vut,"ResNetForImageClassification"),Vut.forEach(t),MJo=r(_ke," (ResNet model)"),_ke.forEach(t),EJo=i(Me),pv=n(Me,"LI",{});var uke=s(pv);i_e=n(uke,"STRONG",{});var Xut=s(i_e);CJo=r(Xut,"segformer"),Xut.forEach(t),wJo=r(uke," \u2014 "),IX=n(uke,"A",{href:!0});var zut=s(IX);AJo=r(zut,"SegformerForImageClassification"),zut.forEach(t),yJo=r(uke," (SegFormer model)"),uke.forEach(t),LJo=i(Me),_v=n(Me,"LI",{});var bke=s(_v);d_e=n(bke,"STRONG",{});var Wut=s(d_e);xJo=r(Wut,"swin"),Wut.forEach(t),$Jo=r(bke," \u2014 "),NX=n(bke,"A",{href:!0});var Qut=s(NX);kJo=r(Qut,"SwinForImageClassification"),Qut.forEach(t),SJo=r(bke," (Swin model)"),bke.forEach(t),RJo=i(Me),uv=n(Me,"LI",{});var vke=s(uv);c_e=n(vke,"STRONG",{});var Hut=s(c_e);PJo=r(Hut,"van"),Hut.forEach(t),BJo=r(vke," \u2014 "),qX=n(vke,"A",{href:!0});var Uut=s(qX);IJo=r(Uut,"VanForImageClassification"),Uut.forEach(t),NJo=r(vke," (VAN model)"),vke.forEach(t),qJo=i(Me),bv=n(Me,"LI",{});var Fke=s(bv);f_e=n(Fke,"STRONG",{});var Jut=s(f_e);jJo=r(Jut,"vit"),Jut.forEach(t),DJo=r(Fke," \u2014 "),jX=n(Fke,"A",{href:!0});var Yut=s(jX);GJo=r(Yut,"ViTForImageClassification"),Yut.forEach(t),OJo=r(Fke," (ViT model)"),Fke.forEach(t),Me.forEach(t),VJo=i(ma),vv=n(ma,"P",{});var Tke=s(vv);XJo=r(Tke,"The model is set in evaluation mode by default using "),m_e=n(Tke,"CODE",{});var Kut=s(m_e);zJo=r(Kut,"model.eval()"),Kut.forEach(t),WJo=r(Tke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),g_e=n(Tke,"CODE",{});var Zut=s(g_e);QJo=r(Zut,"model.train()"),Zut.forEach(t),Tke.forEach(t),HJo=i(ma),T(Fv.$$.fragment,ma),ma.forEach(t),Zs.forEach(t),Vqe=i(f),ld=n(f,"H2",{class:!0});var QDe=s(ld);Tv=n(QDe,"A",{id:!0,class:!0,href:!0});var e1t=s(Tv);h_e=n(e1t,"SPAN",{});var o1t=s(h_e);T(l8.$$.fragment,o1t),o1t.forEach(t),e1t.forEach(t),UJo=i(QDe),p_e=n(QDe,"SPAN",{});var r1t=s(p_e);JJo=r(r1t,"AutoModelForVision2Seq"),r1t.forEach(t),QDe.forEach(t),Xqe=i(f),Do=n(f,"DIV",{class:!0});var el=s(Do);T(i8.$$.fragment,el),YJo=i(el),id=n(el,"P",{});var VZ=s(id);KJo=r(VZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),DX=n(VZ,"A",{href:!0});var t1t=s(DX);ZJo=r(t1t,"from_pretrained()"),t1t.forEach(t),eYo=r(VZ," class method or the "),GX=n(VZ,"A",{href:!0});var a1t=s(GX);oYo=r(a1t,"from_config()"),a1t.forEach(t),rYo=r(VZ,` class
method.`),VZ.forEach(t),tYo=i(el),d8=n(el,"P",{});var HDe=s(d8);aYo=r(HDe,"This class cannot be instantiated directly using "),__e=n(HDe,"CODE",{});var n1t=s(__e);nYo=r(n1t,"__init__()"),n1t.forEach(t),sYo=r(HDe," (throws an error)."),HDe.forEach(t),lYo=i(el),_t=n(el,"DIV",{class:!0});var tA=s(_t);T(c8.$$.fragment,tA),iYo=i(tA),u_e=n(tA,"P",{});var s1t=s(u_e);dYo=r(s1t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),s1t.forEach(t),cYo=i(tA),dd=n(tA,"P",{});var XZ=s(dd);fYo=r(XZ,`Note:
Loading a model from its configuration file does `),b_e=n(XZ,"STRONG",{});var l1t=s(b_e);mYo=r(l1t,"not"),l1t.forEach(t),gYo=r(XZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),OX=n(XZ,"A",{href:!0});var i1t=s(OX);hYo=r(i1t,"from_pretrained()"),i1t.forEach(t),pYo=r(XZ," to load the model weights."),XZ.forEach(t),_Yo=i(tA),T(Mv.$$.fragment,tA),tA.forEach(t),uYo=i(el),io=n(el,"DIV",{class:!0});var ga=s(io);T(f8.$$.fragment,ga),bYo=i(ga),v_e=n(ga,"P",{});var d1t=s(v_e);vYo=r(d1t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),d1t.forEach(t),FYo=i(ga),Da=n(ga,"P",{});var aA=s(Da);TYo=r(aA,"The model class to instantiate is selected based on the "),F_e=n(aA,"CODE",{});var c1t=s(F_e);MYo=r(c1t,"model_type"),c1t.forEach(t),EYo=r(aA,` property of the config object (either
passed as an argument or loaded from `),T_e=n(aA,"CODE",{});var f1t=s(T_e);CYo=r(f1t,"pretrained_model_name_or_path"),f1t.forEach(t),wYo=r(aA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M_e=n(aA,"CODE",{});var m1t=s(M_e);AYo=r(m1t,"pretrained_model_name_or_path"),m1t.forEach(t),yYo=r(aA,":"),aA.forEach(t),LYo=i(ga),E_e=n(ga,"UL",{});var g1t=s(E_e);Ev=n(g1t,"LI",{});var Mke=s(Ev);C_e=n(Mke,"STRONG",{});var h1t=s(C_e);xYo=r(h1t,"vision-encoder-decoder"),h1t.forEach(t),$Yo=r(Mke," \u2014 "),VX=n(Mke,"A",{href:!0});var p1t=s(VX);kYo=r(p1t,"VisionEncoderDecoderModel"),p1t.forEach(t),SYo=r(Mke," (Vision Encoder decoder model)"),Mke.forEach(t),g1t.forEach(t),RYo=i(ga),Cv=n(ga,"P",{});var Eke=s(Cv);PYo=r(Eke,"The model is set in evaluation mode by default using "),w_e=n(Eke,"CODE",{});var _1t=s(w_e);BYo=r(_1t,"model.eval()"),_1t.forEach(t),IYo=r(Eke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),A_e=n(Eke,"CODE",{});var u1t=s(A_e);NYo=r(u1t,"model.train()"),u1t.forEach(t),Eke.forEach(t),qYo=i(ga),T(wv.$$.fragment,ga),ga.forEach(t),el.forEach(t),zqe=i(f),cd=n(f,"H2",{class:!0});var UDe=s(cd);Av=n(UDe,"A",{id:!0,class:!0,href:!0});var b1t=s(Av);y_e=n(b1t,"SPAN",{});var v1t=s(y_e);T(m8.$$.fragment,v1t),v1t.forEach(t),b1t.forEach(t),jYo=i(UDe),L_e=n(UDe,"SPAN",{});var F1t=s(L_e);DYo=r(F1t,"AutoModelForAudioClassification"),F1t.forEach(t),UDe.forEach(t),Wqe=i(f),Go=n(f,"DIV",{class:!0});var ol=s(Go);T(g8.$$.fragment,ol),GYo=i(ol),fd=n(ol,"P",{});var zZ=s(fd);OYo=r(zZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),XX=n(zZ,"A",{href:!0});var T1t=s(XX);VYo=r(T1t,"from_pretrained()"),T1t.forEach(t),XYo=r(zZ," class method or the "),zX=n(zZ,"A",{href:!0});var M1t=s(zX);zYo=r(M1t,"from_config()"),M1t.forEach(t),WYo=r(zZ,` class
method.`),zZ.forEach(t),QYo=i(ol),h8=n(ol,"P",{});var JDe=s(h8);HYo=r(JDe,"This class cannot be instantiated directly using "),x_e=n(JDe,"CODE",{});var E1t=s(x_e);UYo=r(E1t,"__init__()"),E1t.forEach(t),JYo=r(JDe," (throws an error)."),JDe.forEach(t),YYo=i(ol),ut=n(ol,"DIV",{class:!0});var nA=s(ut);T(p8.$$.fragment,nA),KYo=i(nA),$_e=n(nA,"P",{});var C1t=s($_e);ZYo=r(C1t,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),C1t.forEach(t),eKo=i(nA),md=n(nA,"P",{});var WZ=s(md);oKo=r(WZ,`Note:
Loading a model from its configuration file does `),k_e=n(WZ,"STRONG",{});var w1t=s(k_e);rKo=r(w1t,"not"),w1t.forEach(t),tKo=r(WZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),WX=n(WZ,"A",{href:!0});var A1t=s(WX);aKo=r(A1t,"from_pretrained()"),A1t.forEach(t),nKo=r(WZ," to load the model weights."),WZ.forEach(t),sKo=i(nA),T(yv.$$.fragment,nA),nA.forEach(t),lKo=i(ol),co=n(ol,"DIV",{class:!0});var ha=s(co);T(_8.$$.fragment,ha),iKo=i(ha),S_e=n(ha,"P",{});var y1t=s(S_e);dKo=r(y1t,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),y1t.forEach(t),cKo=i(ha),Ga=n(ha,"P",{});var sA=s(Ga);fKo=r(sA,"The model class to instantiate is selected based on the "),R_e=n(sA,"CODE",{});var L1t=s(R_e);mKo=r(L1t,"model_type"),L1t.forEach(t),gKo=r(sA,` property of the config object (either
passed as an argument or loaded from `),P_e=n(sA,"CODE",{});var x1t=s(P_e);hKo=r(x1t,"pretrained_model_name_or_path"),x1t.forEach(t),pKo=r(sA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B_e=n(sA,"CODE",{});var $1t=s(B_e);_Ko=r($1t,"pretrained_model_name_or_path"),$1t.forEach(t),uKo=r(sA,":"),sA.forEach(t),bKo=i(ha),ke=n(ha,"UL",{});var Oe=s(ke);Lv=n(Oe,"LI",{});var Cke=s(Lv);I_e=n(Cke,"STRONG",{});var k1t=s(I_e);vKo=r(k1t,"data2vec-audio"),k1t.forEach(t),FKo=r(Cke," \u2014 "),QX=n(Cke,"A",{href:!0});var S1t=s(QX);TKo=r(S1t,"Data2VecAudioForSequenceClassification"),S1t.forEach(t),MKo=r(Cke," (Data2VecAudio model)"),Cke.forEach(t),EKo=i(Oe),xv=n(Oe,"LI",{});var wke=s(xv);N_e=n(wke,"STRONG",{});var R1t=s(N_e);CKo=r(R1t,"hubert"),R1t.forEach(t),wKo=r(wke," \u2014 "),HX=n(wke,"A",{href:!0});var P1t=s(HX);AKo=r(P1t,"HubertForSequenceClassification"),P1t.forEach(t),yKo=r(wke," (Hubert model)"),wke.forEach(t),LKo=i(Oe),$v=n(Oe,"LI",{});var Ake=s($v);q_e=n(Ake,"STRONG",{});var B1t=s(q_e);xKo=r(B1t,"sew"),B1t.forEach(t),$Ko=r(Ake," \u2014 "),UX=n(Ake,"A",{href:!0});var I1t=s(UX);kKo=r(I1t,"SEWForSequenceClassification"),I1t.forEach(t),SKo=r(Ake," (SEW model)"),Ake.forEach(t),RKo=i(Oe),kv=n(Oe,"LI",{});var yke=s(kv);j_e=n(yke,"STRONG",{});var N1t=s(j_e);PKo=r(N1t,"sew-d"),N1t.forEach(t),BKo=r(yke," \u2014 "),JX=n(yke,"A",{href:!0});var q1t=s(JX);IKo=r(q1t,"SEWDForSequenceClassification"),q1t.forEach(t),NKo=r(yke," (SEW-D model)"),yke.forEach(t),qKo=i(Oe),Sv=n(Oe,"LI",{});var Lke=s(Sv);D_e=n(Lke,"STRONG",{});var j1t=s(D_e);jKo=r(j1t,"unispeech"),j1t.forEach(t),DKo=r(Lke," \u2014 "),YX=n(Lke,"A",{href:!0});var D1t=s(YX);GKo=r(D1t,"UniSpeechForSequenceClassification"),D1t.forEach(t),OKo=r(Lke," (UniSpeech model)"),Lke.forEach(t),VKo=i(Oe),Rv=n(Oe,"LI",{});var xke=s(Rv);G_e=n(xke,"STRONG",{});var G1t=s(G_e);XKo=r(G1t,"unispeech-sat"),G1t.forEach(t),zKo=r(xke," \u2014 "),KX=n(xke,"A",{href:!0});var O1t=s(KX);WKo=r(O1t,"UniSpeechSatForSequenceClassification"),O1t.forEach(t),QKo=r(xke," (UniSpeechSat model)"),xke.forEach(t),HKo=i(Oe),Pv=n(Oe,"LI",{});var $ke=s(Pv);O_e=n($ke,"STRONG",{});var V1t=s(O_e);UKo=r(V1t,"wav2vec2"),V1t.forEach(t),JKo=r($ke," \u2014 "),ZX=n($ke,"A",{href:!0});var X1t=s(ZX);YKo=r(X1t,"Wav2Vec2ForSequenceClassification"),X1t.forEach(t),KKo=r($ke," (Wav2Vec2 model)"),$ke.forEach(t),ZKo=i(Oe),Bv=n(Oe,"LI",{});var kke=s(Bv);V_e=n(kke,"STRONG",{});var z1t=s(V_e);eZo=r(z1t,"wav2vec2-conformer"),z1t.forEach(t),oZo=r(kke," \u2014 "),ez=n(kke,"A",{href:!0});var W1t=s(ez);rZo=r(W1t,"Wav2Vec2ConformerForSequenceClassification"),W1t.forEach(t),tZo=r(kke," (Wav2Vec2-Conformer model)"),kke.forEach(t),aZo=i(Oe),Iv=n(Oe,"LI",{});var Ske=s(Iv);X_e=n(Ske,"STRONG",{});var Q1t=s(X_e);nZo=r(Q1t,"wavlm"),Q1t.forEach(t),sZo=r(Ske," \u2014 "),oz=n(Ske,"A",{href:!0});var H1t=s(oz);lZo=r(H1t,"WavLMForSequenceClassification"),H1t.forEach(t),iZo=r(Ske," (WavLM model)"),Ske.forEach(t),Oe.forEach(t),dZo=i(ha),Nv=n(ha,"P",{});var Rke=s(Nv);cZo=r(Rke,"The model is set in evaluation mode by default using "),z_e=n(Rke,"CODE",{});var U1t=s(z_e);fZo=r(U1t,"model.eval()"),U1t.forEach(t),mZo=r(Rke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),W_e=n(Rke,"CODE",{});var J1t=s(W_e);gZo=r(J1t,"model.train()"),J1t.forEach(t),Rke.forEach(t),hZo=i(ha),T(qv.$$.fragment,ha),ha.forEach(t),ol.forEach(t),Qqe=i(f),gd=n(f,"H2",{class:!0});var YDe=s(gd);jv=n(YDe,"A",{id:!0,class:!0,href:!0});var Y1t=s(jv);Q_e=n(Y1t,"SPAN",{});var K1t=s(Q_e);T(u8.$$.fragment,K1t),K1t.forEach(t),Y1t.forEach(t),pZo=i(YDe),H_e=n(YDe,"SPAN",{});var Z1t=s(H_e);_Zo=r(Z1t,"AutoModelForAudioFrameClassification"),Z1t.forEach(t),YDe.forEach(t),Hqe=i(f),Oo=n(f,"DIV",{class:!0});var rl=s(Oo);T(b8.$$.fragment,rl),uZo=i(rl),hd=n(rl,"P",{});var QZ=s(hd);bZo=r(QZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),rz=n(QZ,"A",{href:!0});var ebt=s(rz);vZo=r(ebt,"from_pretrained()"),ebt.forEach(t),FZo=r(QZ," class method or the "),tz=n(QZ,"A",{href:!0});var obt=s(tz);TZo=r(obt,"from_config()"),obt.forEach(t),MZo=r(QZ,` class
method.`),QZ.forEach(t),EZo=i(rl),v8=n(rl,"P",{});var KDe=s(v8);CZo=r(KDe,"This class cannot be instantiated directly using "),U_e=n(KDe,"CODE",{});var rbt=s(U_e);wZo=r(rbt,"__init__()"),rbt.forEach(t),AZo=r(KDe," (throws an error)."),KDe.forEach(t),yZo=i(rl),bt=n(rl,"DIV",{class:!0});var lA=s(bt);T(F8.$$.fragment,lA),LZo=i(lA),J_e=n(lA,"P",{});var tbt=s(J_e);xZo=r(tbt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),tbt.forEach(t),$Zo=i(lA),pd=n(lA,"P",{});var HZ=s(pd);kZo=r(HZ,`Note:
Loading a model from its configuration file does `),Y_e=n(HZ,"STRONG",{});var abt=s(Y_e);SZo=r(abt,"not"),abt.forEach(t),RZo=r(HZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),az=n(HZ,"A",{href:!0});var nbt=s(az);PZo=r(nbt,"from_pretrained()"),nbt.forEach(t),BZo=r(HZ," to load the model weights."),HZ.forEach(t),IZo=i(lA),T(Dv.$$.fragment,lA),lA.forEach(t),NZo=i(rl),fo=n(rl,"DIV",{class:!0});var pa=s(fo);T(T8.$$.fragment,pa),qZo=i(pa),K_e=n(pa,"P",{});var sbt=s(K_e);jZo=r(sbt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),sbt.forEach(t),DZo=i(pa),Oa=n(pa,"P",{});var iA=s(Oa);GZo=r(iA,"The model class to instantiate is selected based on the "),Z_e=n(iA,"CODE",{});var lbt=s(Z_e);OZo=r(lbt,"model_type"),lbt.forEach(t),VZo=r(iA,` property of the config object (either
passed as an argument or loaded from `),eue=n(iA,"CODE",{});var ibt=s(eue);XZo=r(ibt,"pretrained_model_name_or_path"),ibt.forEach(t),zZo=r(iA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oue=n(iA,"CODE",{});var dbt=s(oue);WZo=r(dbt,"pretrained_model_name_or_path"),dbt.forEach(t),QZo=r(iA,":"),iA.forEach(t),HZo=i(pa),Kr=n(pa,"UL",{});var tl=s(Kr);Gv=n(tl,"LI",{});var Pke=s(Gv);rue=n(Pke,"STRONG",{});var cbt=s(rue);UZo=r(cbt,"data2vec-audio"),cbt.forEach(t),JZo=r(Pke," \u2014 "),nz=n(Pke,"A",{href:!0});var fbt=s(nz);YZo=r(fbt,"Data2VecAudioForAudioFrameClassification"),fbt.forEach(t),KZo=r(Pke," (Data2VecAudio model)"),Pke.forEach(t),ZZo=i(tl),Ov=n(tl,"LI",{});var Bke=s(Ov);tue=n(Bke,"STRONG",{});var mbt=s(tue);eer=r(mbt,"unispeech-sat"),mbt.forEach(t),oer=r(Bke," \u2014 "),sz=n(Bke,"A",{href:!0});var gbt=s(sz);rer=r(gbt,"UniSpeechSatForAudioFrameClassification"),gbt.forEach(t),ter=r(Bke," (UniSpeechSat model)"),Bke.forEach(t),aer=i(tl),Vv=n(tl,"LI",{});var Ike=s(Vv);aue=n(Ike,"STRONG",{});var hbt=s(aue);ner=r(hbt,"wav2vec2"),hbt.forEach(t),ser=r(Ike," \u2014 "),lz=n(Ike,"A",{href:!0});var pbt=s(lz);ler=r(pbt,"Wav2Vec2ForAudioFrameClassification"),pbt.forEach(t),ier=r(Ike," (Wav2Vec2 model)"),Ike.forEach(t),der=i(tl),Xv=n(tl,"LI",{});var Nke=s(Xv);nue=n(Nke,"STRONG",{});var _bt=s(nue);cer=r(_bt,"wav2vec2-conformer"),_bt.forEach(t),fer=r(Nke," \u2014 "),iz=n(Nke,"A",{href:!0});var ubt=s(iz);mer=r(ubt,"Wav2Vec2ConformerForAudioFrameClassification"),ubt.forEach(t),ger=r(Nke," (Wav2Vec2-Conformer model)"),Nke.forEach(t),her=i(tl),zv=n(tl,"LI",{});var qke=s(zv);sue=n(qke,"STRONG",{});var bbt=s(sue);per=r(bbt,"wavlm"),bbt.forEach(t),_er=r(qke," \u2014 "),dz=n(qke,"A",{href:!0});var vbt=s(dz);uer=r(vbt,"WavLMForAudioFrameClassification"),vbt.forEach(t),ber=r(qke," (WavLM model)"),qke.forEach(t),tl.forEach(t),ver=i(pa),Wv=n(pa,"P",{});var jke=s(Wv);Fer=r(jke,"The model is set in evaluation mode by default using "),lue=n(jke,"CODE",{});var Fbt=s(lue);Ter=r(Fbt,"model.eval()"),Fbt.forEach(t),Mer=r(jke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),iue=n(jke,"CODE",{});var Tbt=s(iue);Eer=r(Tbt,"model.train()"),Tbt.forEach(t),jke.forEach(t),Cer=i(pa),T(Qv.$$.fragment,pa),pa.forEach(t),rl.forEach(t),Uqe=i(f),_d=n(f,"H2",{class:!0});var ZDe=s(_d);Hv=n(ZDe,"A",{id:!0,class:!0,href:!0});var Mbt=s(Hv);due=n(Mbt,"SPAN",{});var Ebt=s(due);T(M8.$$.fragment,Ebt),Ebt.forEach(t),Mbt.forEach(t),wer=i(ZDe),cue=n(ZDe,"SPAN",{});var Cbt=s(cue);Aer=r(Cbt,"AutoModelForCTC"),Cbt.forEach(t),ZDe.forEach(t),Jqe=i(f),Vo=n(f,"DIV",{class:!0});var al=s(Vo);T(E8.$$.fragment,al),yer=i(al),ud=n(al,"P",{});var UZ=s(ud);Ler=r(UZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),cz=n(UZ,"A",{href:!0});var wbt=s(cz);xer=r(wbt,"from_pretrained()"),wbt.forEach(t),$er=r(UZ," class method or the "),fz=n(UZ,"A",{href:!0});var Abt=s(fz);ker=r(Abt,"from_config()"),Abt.forEach(t),Ser=r(UZ,` class
method.`),UZ.forEach(t),Rer=i(al),C8=n(al,"P",{});var eGe=s(C8);Per=r(eGe,"This class cannot be instantiated directly using "),fue=n(eGe,"CODE",{});var ybt=s(fue);Ber=r(ybt,"__init__()"),ybt.forEach(t),Ier=r(eGe," (throws an error)."),eGe.forEach(t),Ner=i(al),vt=n(al,"DIV",{class:!0});var dA=s(vt);T(w8.$$.fragment,dA),qer=i(dA),mue=n(dA,"P",{});var Lbt=s(mue);jer=r(Lbt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Lbt.forEach(t),Der=i(dA),bd=n(dA,"P",{});var JZ=s(bd);Ger=r(JZ,`Note:
Loading a model from its configuration file does `),gue=n(JZ,"STRONG",{});var xbt=s(gue);Oer=r(xbt,"not"),xbt.forEach(t),Ver=r(JZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),mz=n(JZ,"A",{href:!0});var $bt=s(mz);Xer=r($bt,"from_pretrained()"),$bt.forEach(t),zer=r(JZ," to load the model weights."),JZ.forEach(t),Wer=i(dA),T(Uv.$$.fragment,dA),dA.forEach(t),Qer=i(al),mo=n(al,"DIV",{class:!0});var _a=s(mo);T(A8.$$.fragment,_a),Her=i(_a),hue=n(_a,"P",{});var kbt=s(hue);Uer=r(kbt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),kbt.forEach(t),Jer=i(_a),Va=n(_a,"P",{});var cA=s(Va);Yer=r(cA,"The model class to instantiate is selected based on the "),pue=n(cA,"CODE",{});var Sbt=s(pue);Ker=r(Sbt,"model_type"),Sbt.forEach(t),Zer=r(cA,` property of the config object (either
passed as an argument or loaded from `),_ue=n(cA,"CODE",{});var Rbt=s(_ue);eor=r(Rbt,"pretrained_model_name_or_path"),Rbt.forEach(t),oor=r(cA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uue=n(cA,"CODE",{});var Pbt=s(uue);ror=r(Pbt,"pretrained_model_name_or_path"),Pbt.forEach(t),tor=r(cA,":"),cA.forEach(t),aor=i(_a),Se=n(_a,"UL",{});var Ve=s(Se);Jv=n(Ve,"LI",{});var Dke=s(Jv);bue=n(Dke,"STRONG",{});var Bbt=s(bue);nor=r(Bbt,"data2vec-audio"),Bbt.forEach(t),sor=r(Dke," \u2014 "),gz=n(Dke,"A",{href:!0});var Ibt=s(gz);lor=r(Ibt,"Data2VecAudioForCTC"),Ibt.forEach(t),ior=r(Dke," (Data2VecAudio model)"),Dke.forEach(t),dor=i(Ve),Yv=n(Ve,"LI",{});var Gke=s(Yv);vue=n(Gke,"STRONG",{});var Nbt=s(vue);cor=r(Nbt,"hubert"),Nbt.forEach(t),mor=r(Gke," \u2014 "),hz=n(Gke,"A",{href:!0});var qbt=s(hz);gor=r(qbt,"HubertForCTC"),qbt.forEach(t),hor=r(Gke," (Hubert model)"),Gke.forEach(t),por=i(Ve),Kv=n(Ve,"LI",{});var Oke=s(Kv);Fue=n(Oke,"STRONG",{});var jbt=s(Fue);_or=r(jbt,"sew"),jbt.forEach(t),uor=r(Oke," \u2014 "),pz=n(Oke,"A",{href:!0});var Dbt=s(pz);bor=r(Dbt,"SEWForCTC"),Dbt.forEach(t),vor=r(Oke," (SEW model)"),Oke.forEach(t),For=i(Ve),Zv=n(Ve,"LI",{});var Vke=s(Zv);Tue=n(Vke,"STRONG",{});var Gbt=s(Tue);Tor=r(Gbt,"sew-d"),Gbt.forEach(t),Mor=r(Vke," \u2014 "),_z=n(Vke,"A",{href:!0});var Obt=s(_z);Eor=r(Obt,"SEWDForCTC"),Obt.forEach(t),Cor=r(Vke," (SEW-D model)"),Vke.forEach(t),wor=i(Ve),e3=n(Ve,"LI",{});var Xke=s(e3);Mue=n(Xke,"STRONG",{});var Vbt=s(Mue);Aor=r(Vbt,"unispeech"),Vbt.forEach(t),yor=r(Xke," \u2014 "),uz=n(Xke,"A",{href:!0});var Xbt=s(uz);Lor=r(Xbt,"UniSpeechForCTC"),Xbt.forEach(t),xor=r(Xke," (UniSpeech model)"),Xke.forEach(t),$or=i(Ve),o3=n(Ve,"LI",{});var zke=s(o3);Eue=n(zke,"STRONG",{});var zbt=s(Eue);kor=r(zbt,"unispeech-sat"),zbt.forEach(t),Sor=r(zke," \u2014 "),bz=n(zke,"A",{href:!0});var Wbt=s(bz);Ror=r(Wbt,"UniSpeechSatForCTC"),Wbt.forEach(t),Por=r(zke," (UniSpeechSat model)"),zke.forEach(t),Bor=i(Ve),r3=n(Ve,"LI",{});var Wke=s(r3);Cue=n(Wke,"STRONG",{});var Qbt=s(Cue);Ior=r(Qbt,"wav2vec2"),Qbt.forEach(t),Nor=r(Wke," \u2014 "),vz=n(Wke,"A",{href:!0});var Hbt=s(vz);qor=r(Hbt,"Wav2Vec2ForCTC"),Hbt.forEach(t),jor=r(Wke," (Wav2Vec2 model)"),Wke.forEach(t),Dor=i(Ve),t3=n(Ve,"LI",{});var Qke=s(t3);wue=n(Qke,"STRONG",{});var Ubt=s(wue);Gor=r(Ubt,"wav2vec2-conformer"),Ubt.forEach(t),Oor=r(Qke," \u2014 "),Fz=n(Qke,"A",{href:!0});var Jbt=s(Fz);Vor=r(Jbt,"Wav2Vec2ConformerForCTC"),Jbt.forEach(t),Xor=r(Qke," (Wav2Vec2-Conformer model)"),Qke.forEach(t),zor=i(Ve),a3=n(Ve,"LI",{});var Hke=s(a3);Aue=n(Hke,"STRONG",{});var Ybt=s(Aue);Wor=r(Ybt,"wavlm"),Ybt.forEach(t),Qor=r(Hke," \u2014 "),Tz=n(Hke,"A",{href:!0});var Kbt=s(Tz);Hor=r(Kbt,"WavLMForCTC"),Kbt.forEach(t),Uor=r(Hke," (WavLM model)"),Hke.forEach(t),Ve.forEach(t),Jor=i(_a),n3=n(_a,"P",{});var Uke=s(n3);Yor=r(Uke,"The model is set in evaluation mode by default using "),yue=n(Uke,"CODE",{});var Zbt=s(yue);Kor=r(Zbt,"model.eval()"),Zbt.forEach(t),Zor=r(Uke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lue=n(Uke,"CODE",{});var e2t=s(Lue);err=r(e2t,"model.train()"),e2t.forEach(t),Uke.forEach(t),orr=i(_a),T(s3.$$.fragment,_a),_a.forEach(t),al.forEach(t),Yqe=i(f),vd=n(f,"H2",{class:!0});var oGe=s(vd);l3=n(oGe,"A",{id:!0,class:!0,href:!0});var o2t=s(l3);xue=n(o2t,"SPAN",{});var r2t=s(xue);T(y8.$$.fragment,r2t),r2t.forEach(t),o2t.forEach(t),rrr=i(oGe),$ue=n(oGe,"SPAN",{});var t2t=s($ue);trr=r(t2t,"AutoModelForSpeechSeq2Seq"),t2t.forEach(t),oGe.forEach(t),Kqe=i(f),Xo=n(f,"DIV",{class:!0});var nl=s(Xo);T(L8.$$.fragment,nl),arr=i(nl),Fd=n(nl,"P",{});var YZ=s(Fd);nrr=r(YZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Mz=n(YZ,"A",{href:!0});var a2t=s(Mz);srr=r(a2t,"from_pretrained()"),a2t.forEach(t),lrr=r(YZ," class method or the "),Ez=n(YZ,"A",{href:!0});var n2t=s(Ez);irr=r(n2t,"from_config()"),n2t.forEach(t),drr=r(YZ,` class
method.`),YZ.forEach(t),crr=i(nl),x8=n(nl,"P",{});var rGe=s(x8);frr=r(rGe,"This class cannot be instantiated directly using "),kue=n(rGe,"CODE",{});var s2t=s(kue);mrr=r(s2t,"__init__()"),s2t.forEach(t),grr=r(rGe," (throws an error)."),rGe.forEach(t),hrr=i(nl),Ft=n(nl,"DIV",{class:!0});var fA=s(Ft);T($8.$$.fragment,fA),prr=i(fA),Sue=n(fA,"P",{});var l2t=s(Sue);_rr=r(l2t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),l2t.forEach(t),urr=i(fA),Td=n(fA,"P",{});var KZ=s(Td);brr=r(KZ,`Note:
Loading a model from its configuration file does `),Rue=n(KZ,"STRONG",{});var i2t=s(Rue);vrr=r(i2t,"not"),i2t.forEach(t),Frr=r(KZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Cz=n(KZ,"A",{href:!0});var d2t=s(Cz);Trr=r(d2t,"from_pretrained()"),d2t.forEach(t),Mrr=r(KZ," to load the model weights."),KZ.forEach(t),Err=i(fA),T(i3.$$.fragment,fA),fA.forEach(t),Crr=i(nl),go=n(nl,"DIV",{class:!0});var ua=s(go);T(k8.$$.fragment,ua),wrr=i(ua),Pue=n(ua,"P",{});var c2t=s(Pue);Arr=r(c2t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),c2t.forEach(t),yrr=i(ua),Xa=n(ua,"P",{});var mA=s(Xa);Lrr=r(mA,"The model class to instantiate is selected based on the "),Bue=n(mA,"CODE",{});var f2t=s(Bue);xrr=r(f2t,"model_type"),f2t.forEach(t),$rr=r(mA,` property of the config object (either
passed as an argument or loaded from `),Iue=n(mA,"CODE",{});var m2t=s(Iue);krr=r(m2t,"pretrained_model_name_or_path"),m2t.forEach(t),Srr=r(mA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nue=n(mA,"CODE",{});var g2t=s(Nue);Rrr=r(g2t,"pretrained_model_name_or_path"),g2t.forEach(t),Prr=r(mA,":"),mA.forEach(t),Brr=i(ua),S8=n(ua,"UL",{});var tGe=s(S8);d3=n(tGe,"LI",{});var Jke=s(d3);que=n(Jke,"STRONG",{});var h2t=s(que);Irr=r(h2t,"speech-encoder-decoder"),h2t.forEach(t),Nrr=r(Jke," \u2014 "),wz=n(Jke,"A",{href:!0});var p2t=s(wz);qrr=r(p2t,"SpeechEncoderDecoderModel"),p2t.forEach(t),jrr=r(Jke," (Speech Encoder decoder model)"),Jke.forEach(t),Drr=i(tGe),c3=n(tGe,"LI",{});var Yke=s(c3);jue=n(Yke,"STRONG",{});var _2t=s(jue);Grr=r(_2t,"speech_to_text"),_2t.forEach(t),Orr=r(Yke," \u2014 "),Az=n(Yke,"A",{href:!0});var u2t=s(Az);Vrr=r(u2t,"Speech2TextForConditionalGeneration"),u2t.forEach(t),Xrr=r(Yke," (Speech2Text model)"),Yke.forEach(t),tGe.forEach(t),zrr=i(ua),f3=n(ua,"P",{});var Kke=s(f3);Wrr=r(Kke,"The model is set in evaluation mode by default using "),Due=n(Kke,"CODE",{});var b2t=s(Due);Qrr=r(b2t,"model.eval()"),b2t.forEach(t),Hrr=r(Kke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gue=n(Kke,"CODE",{});var v2t=s(Gue);Urr=r(v2t,"model.train()"),v2t.forEach(t),Kke.forEach(t),Jrr=i(ua),T(m3.$$.fragment,ua),ua.forEach(t),nl.forEach(t),Zqe=i(f),Md=n(f,"H2",{class:!0});var aGe=s(Md);g3=n(aGe,"A",{id:!0,class:!0,href:!0});var F2t=s(g3);Oue=n(F2t,"SPAN",{});var T2t=s(Oue);T(R8.$$.fragment,T2t),T2t.forEach(t),F2t.forEach(t),Yrr=i(aGe),Vue=n(aGe,"SPAN",{});var M2t=s(Vue);Krr=r(M2t,"AutoModelForAudioXVector"),M2t.forEach(t),aGe.forEach(t),eje=i(f),zo=n(f,"DIV",{class:!0});var sl=s(zo);T(P8.$$.fragment,sl),Zrr=i(sl),Ed=n(sl,"P",{});var ZZ=s(Ed);etr=r(ZZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),yz=n(ZZ,"A",{href:!0});var E2t=s(yz);otr=r(E2t,"from_pretrained()"),E2t.forEach(t),rtr=r(ZZ," class method or the "),Lz=n(ZZ,"A",{href:!0});var C2t=s(Lz);ttr=r(C2t,"from_config()"),C2t.forEach(t),atr=r(ZZ,` class
method.`),ZZ.forEach(t),ntr=i(sl),B8=n(sl,"P",{});var nGe=s(B8);str=r(nGe,"This class cannot be instantiated directly using "),Xue=n(nGe,"CODE",{});var w2t=s(Xue);ltr=r(w2t,"__init__()"),w2t.forEach(t),itr=r(nGe," (throws an error)."),nGe.forEach(t),dtr=i(sl),Tt=n(sl,"DIV",{class:!0});var gA=s(Tt);T(I8.$$.fragment,gA),ctr=i(gA),zue=n(gA,"P",{});var A2t=s(zue);ftr=r(A2t,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),A2t.forEach(t),mtr=i(gA),Cd=n(gA,"P",{});var eee=s(Cd);gtr=r(eee,`Note:
Loading a model from its configuration file does `),Wue=n(eee,"STRONG",{});var y2t=s(Wue);htr=r(y2t,"not"),y2t.forEach(t),ptr=r(eee,` load the model weights. It only affects the
model\u2019s configuration. Use `),xz=n(eee,"A",{href:!0});var L2t=s(xz);_tr=r(L2t,"from_pretrained()"),L2t.forEach(t),utr=r(eee," to load the model weights."),eee.forEach(t),btr=i(gA),T(h3.$$.fragment,gA),gA.forEach(t),vtr=i(sl),ho=n(sl,"DIV",{class:!0});var ba=s(ho);T(N8.$$.fragment,ba),Ftr=i(ba),Que=n(ba,"P",{});var x2t=s(Que);Ttr=r(x2t,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),x2t.forEach(t),Mtr=i(ba),za=n(ba,"P",{});var hA=s(za);Etr=r(hA,"The model class to instantiate is selected based on the "),Hue=n(hA,"CODE",{});var $2t=s(Hue);Ctr=r($2t,"model_type"),$2t.forEach(t),wtr=r(hA,` property of the config object (either
passed as an argument or loaded from `),Uue=n(hA,"CODE",{});var k2t=s(Uue);Atr=r(k2t,"pretrained_model_name_or_path"),k2t.forEach(t),ytr=r(hA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jue=n(hA,"CODE",{});var S2t=s(Jue);Ltr=r(S2t,"pretrained_model_name_or_path"),S2t.forEach(t),xtr=r(hA,":"),hA.forEach(t),$tr=i(ba),Zr=n(ba,"UL",{});var ll=s(Zr);p3=n(ll,"LI",{});var Zke=s(p3);Yue=n(Zke,"STRONG",{});var R2t=s(Yue);ktr=r(R2t,"data2vec-audio"),R2t.forEach(t),Str=r(Zke," \u2014 "),$z=n(Zke,"A",{href:!0});var P2t=s($z);Rtr=r(P2t,"Data2VecAudioForXVector"),P2t.forEach(t),Ptr=r(Zke," (Data2VecAudio model)"),Zke.forEach(t),Btr=i(ll),_3=n(ll,"LI",{});var eSe=s(_3);Kue=n(eSe,"STRONG",{});var B2t=s(Kue);Itr=r(B2t,"unispeech-sat"),B2t.forEach(t),Ntr=r(eSe," \u2014 "),kz=n(eSe,"A",{href:!0});var I2t=s(kz);qtr=r(I2t,"UniSpeechSatForXVector"),I2t.forEach(t),jtr=r(eSe," (UniSpeechSat model)"),eSe.forEach(t),Dtr=i(ll),u3=n(ll,"LI",{});var oSe=s(u3);Zue=n(oSe,"STRONG",{});var N2t=s(Zue);Gtr=r(N2t,"wav2vec2"),N2t.forEach(t),Otr=r(oSe," \u2014 "),Sz=n(oSe,"A",{href:!0});var q2t=s(Sz);Vtr=r(q2t,"Wav2Vec2ForXVector"),q2t.forEach(t),Xtr=r(oSe," (Wav2Vec2 model)"),oSe.forEach(t),ztr=i(ll),b3=n(ll,"LI",{});var rSe=s(b3);e1e=n(rSe,"STRONG",{});var j2t=s(e1e);Wtr=r(j2t,"wav2vec2-conformer"),j2t.forEach(t),Qtr=r(rSe," \u2014 "),Rz=n(rSe,"A",{href:!0});var D2t=s(Rz);Htr=r(D2t,"Wav2Vec2ConformerForXVector"),D2t.forEach(t),Utr=r(rSe," (Wav2Vec2-Conformer model)"),rSe.forEach(t),Jtr=i(ll),v3=n(ll,"LI",{});var tSe=s(v3);o1e=n(tSe,"STRONG",{});var G2t=s(o1e);Ytr=r(G2t,"wavlm"),G2t.forEach(t),Ktr=r(tSe," \u2014 "),Pz=n(tSe,"A",{href:!0});var O2t=s(Pz);Ztr=r(O2t,"WavLMForXVector"),O2t.forEach(t),ear=r(tSe," (WavLM model)"),tSe.forEach(t),ll.forEach(t),oar=i(ba),F3=n(ba,"P",{});var aSe=s(F3);rar=r(aSe,"The model is set in evaluation mode by default using "),r1e=n(aSe,"CODE",{});var V2t=s(r1e);tar=r(V2t,"model.eval()"),V2t.forEach(t),aar=r(aSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),t1e=n(aSe,"CODE",{});var X2t=s(t1e);nar=r(X2t,"model.train()"),X2t.forEach(t),aSe.forEach(t),sar=i(ba),T(T3.$$.fragment,ba),ba.forEach(t),sl.forEach(t),oje=i(f),wd=n(f,"H2",{class:!0});var sGe=s(wd);M3=n(sGe,"A",{id:!0,class:!0,href:!0});var z2t=s(M3);a1e=n(z2t,"SPAN",{});var W2t=s(a1e);T(q8.$$.fragment,W2t),W2t.forEach(t),z2t.forEach(t),lar=i(sGe),n1e=n(sGe,"SPAN",{});var Q2t=s(n1e);iar=r(Q2t,"AutoModelForMaskedImageModeling"),Q2t.forEach(t),sGe.forEach(t),rje=i(f),Wo=n(f,"DIV",{class:!0});var il=s(Wo);T(j8.$$.fragment,il),dar=i(il),Ad=n(il,"P",{});var oee=s(Ad);car=r(oee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Bz=n(oee,"A",{href:!0});var H2t=s(Bz);far=r(H2t,"from_pretrained()"),H2t.forEach(t),mar=r(oee," class method or the "),Iz=n(oee,"A",{href:!0});var U2t=s(Iz);gar=r(U2t,"from_config()"),U2t.forEach(t),har=r(oee,` class
method.`),oee.forEach(t),par=i(il),D8=n(il,"P",{});var lGe=s(D8);_ar=r(lGe,"This class cannot be instantiated directly using "),s1e=n(lGe,"CODE",{});var J2t=s(s1e);uar=r(J2t,"__init__()"),J2t.forEach(t),bar=r(lGe," (throws an error)."),lGe.forEach(t),Far=i(il),Mt=n(il,"DIV",{class:!0});var pA=s(Mt);T(G8.$$.fragment,pA),Tar=i(pA),l1e=n(pA,"P",{});var Y2t=s(l1e);Mar=r(Y2t,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Y2t.forEach(t),Ear=i(pA),yd=n(pA,"P",{});var ree=s(yd);Car=r(ree,`Note:
Loading a model from its configuration file does `),i1e=n(ree,"STRONG",{});var K2t=s(i1e);war=r(K2t,"not"),K2t.forEach(t),Aar=r(ree,` load the model weights. It only affects the
model\u2019s configuration. Use `),Nz=n(ree,"A",{href:!0});var Z2t=s(Nz);yar=r(Z2t,"from_pretrained()"),Z2t.forEach(t),Lar=r(ree," to load the model weights."),ree.forEach(t),xar=i(pA),T(E3.$$.fragment,pA),pA.forEach(t),$ar=i(il),po=n(il,"DIV",{class:!0});var va=s(po);T(O8.$$.fragment,va),kar=i(va),d1e=n(va,"P",{});var e4t=s(d1e);Sar=r(e4t,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),e4t.forEach(t),Rar=i(va),Wa=n(va,"P",{});var _A=s(Wa);Par=r(_A,"The model class to instantiate is selected based on the "),c1e=n(_A,"CODE",{});var o4t=s(c1e);Bar=r(o4t,"model_type"),o4t.forEach(t),Iar=r(_A,` property of the config object (either
passed as an argument or loaded from `),f1e=n(_A,"CODE",{});var r4t=s(f1e);Nar=r(r4t,"pretrained_model_name_or_path"),r4t.forEach(t),qar=r(_A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m1e=n(_A,"CODE",{});var t4t=s(m1e);jar=r(t4t,"pretrained_model_name_or_path"),t4t.forEach(t),Dar=r(_A,":"),_A.forEach(t),Gar=i(va),Ld=n(va,"UL",{});var tee=s(Ld);C3=n(tee,"LI",{});var nSe=s(C3);g1e=n(nSe,"STRONG",{});var a4t=s(g1e);Oar=r(a4t,"deit"),a4t.forEach(t),Var=r(nSe," \u2014 "),qz=n(nSe,"A",{href:!0});var n4t=s(qz);Xar=r(n4t,"DeiTForMaskedImageModeling"),n4t.forEach(t),zar=r(nSe," (DeiT model)"),nSe.forEach(t),War=i(tee),w3=n(tee,"LI",{});var sSe=s(w3);h1e=n(sSe,"STRONG",{});var s4t=s(h1e);Qar=r(s4t,"swin"),s4t.forEach(t),Har=r(sSe," \u2014 "),jz=n(sSe,"A",{href:!0});var l4t=s(jz);Uar=r(l4t,"SwinForMaskedImageModeling"),l4t.forEach(t),Jar=r(sSe," (Swin model)"),sSe.forEach(t),Yar=i(tee),A3=n(tee,"LI",{});var lSe=s(A3);p1e=n(lSe,"STRONG",{});var i4t=s(p1e);Kar=r(i4t,"vit"),i4t.forEach(t),Zar=r(lSe," \u2014 "),Dz=n(lSe,"A",{href:!0});var d4t=s(Dz);enr=r(d4t,"ViTForMaskedImageModeling"),d4t.forEach(t),onr=r(lSe," (ViT model)"),lSe.forEach(t),tee.forEach(t),rnr=i(va),y3=n(va,"P",{});var iSe=s(y3);tnr=r(iSe,"The model is set in evaluation mode by default using "),_1e=n(iSe,"CODE",{});var c4t=s(_1e);anr=r(c4t,"model.eval()"),c4t.forEach(t),nnr=r(iSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),u1e=n(iSe,"CODE",{});var f4t=s(u1e);snr=r(f4t,"model.train()"),f4t.forEach(t),iSe.forEach(t),lnr=i(va),T(L3.$$.fragment,va),va.forEach(t),il.forEach(t),tje=i(f),xd=n(f,"H2",{class:!0});var iGe=s(xd);x3=n(iGe,"A",{id:!0,class:!0,href:!0});var m4t=s(x3);b1e=n(m4t,"SPAN",{});var g4t=s(b1e);T(V8.$$.fragment,g4t),g4t.forEach(t),m4t.forEach(t),inr=i(iGe),v1e=n(iGe,"SPAN",{});var h4t=s(v1e);dnr=r(h4t,"AutoModelForObjectDetection"),h4t.forEach(t),iGe.forEach(t),aje=i(f),Qo=n(f,"DIV",{class:!0});var dl=s(Qo);T(X8.$$.fragment,dl),cnr=i(dl),$d=n(dl,"P",{});var aee=s($d);fnr=r(aee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),Gz=n(aee,"A",{href:!0});var p4t=s(Gz);mnr=r(p4t,"from_pretrained()"),p4t.forEach(t),gnr=r(aee," class method or the "),Oz=n(aee,"A",{href:!0});var _4t=s(Oz);hnr=r(_4t,"from_config()"),_4t.forEach(t),pnr=r(aee,` class
method.`),aee.forEach(t),_nr=i(dl),z8=n(dl,"P",{});var dGe=s(z8);unr=r(dGe,"This class cannot be instantiated directly using "),F1e=n(dGe,"CODE",{});var u4t=s(F1e);bnr=r(u4t,"__init__()"),u4t.forEach(t),vnr=r(dGe," (throws an error)."),dGe.forEach(t),Fnr=i(dl),Et=n(dl,"DIV",{class:!0});var uA=s(Et);T(W8.$$.fragment,uA),Tnr=i(uA),T1e=n(uA,"P",{});var b4t=s(T1e);Mnr=r(b4t,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),b4t.forEach(t),Enr=i(uA),kd=n(uA,"P",{});var nee=s(kd);Cnr=r(nee,`Note:
Loading a model from its configuration file does `),M1e=n(nee,"STRONG",{});var v4t=s(M1e);wnr=r(v4t,"not"),v4t.forEach(t),Anr=r(nee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Vz=n(nee,"A",{href:!0});var F4t=s(Vz);ynr=r(F4t,"from_pretrained()"),F4t.forEach(t),Lnr=r(nee," to load the model weights."),nee.forEach(t),xnr=i(uA),T($3.$$.fragment,uA),uA.forEach(t),$nr=i(dl),_o=n(dl,"DIV",{class:!0});var Fa=s(_o);T(Q8.$$.fragment,Fa),knr=i(Fa),E1e=n(Fa,"P",{});var T4t=s(E1e);Snr=r(T4t,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),T4t.forEach(t),Rnr=i(Fa),Qa=n(Fa,"P",{});var bA=s(Qa);Pnr=r(bA,"The model class to instantiate is selected based on the "),C1e=n(bA,"CODE",{});var M4t=s(C1e);Bnr=r(M4t,"model_type"),M4t.forEach(t),Inr=r(bA,` property of the config object (either
passed as an argument or loaded from `),w1e=n(bA,"CODE",{});var E4t=s(w1e);Nnr=r(E4t,"pretrained_model_name_or_path"),E4t.forEach(t),qnr=r(bA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A1e=n(bA,"CODE",{});var C4t=s(A1e);jnr=r(C4t,"pretrained_model_name_or_path"),C4t.forEach(t),Dnr=r(bA,":"),bA.forEach(t),Gnr=i(Fa),H8=n(Fa,"UL",{});var cGe=s(H8);k3=n(cGe,"LI",{});var dSe=s(k3);y1e=n(dSe,"STRONG",{});var w4t=s(y1e);Onr=r(w4t,"detr"),w4t.forEach(t),Vnr=r(dSe," \u2014 "),Xz=n(dSe,"A",{href:!0});var A4t=s(Xz);Xnr=r(A4t,"DetrForObjectDetection"),A4t.forEach(t),znr=r(dSe," (DETR model)"),dSe.forEach(t),Wnr=i(cGe),S3=n(cGe,"LI",{});var cSe=s(S3);L1e=n(cSe,"STRONG",{});var y4t=s(L1e);Qnr=r(y4t,"yolos"),y4t.forEach(t),Hnr=r(cSe," \u2014 "),zz=n(cSe,"A",{href:!0});var L4t=s(zz);Unr=r(L4t,"YolosForObjectDetection"),L4t.forEach(t),Jnr=r(cSe," (YOLOS model)"),cSe.forEach(t),cGe.forEach(t),Ynr=i(Fa),R3=n(Fa,"P",{});var fSe=s(R3);Knr=r(fSe,"The model is set in evaluation mode by default using "),x1e=n(fSe,"CODE",{});var x4t=s(x1e);Znr=r(x4t,"model.eval()"),x4t.forEach(t),esr=r(fSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$1e=n(fSe,"CODE",{});var $4t=s($1e);osr=r($4t,"model.train()"),$4t.forEach(t),fSe.forEach(t),rsr=i(Fa),T(P3.$$.fragment,Fa),Fa.forEach(t),dl.forEach(t),nje=i(f),Sd=n(f,"H2",{class:!0});var fGe=s(Sd);B3=n(fGe,"A",{id:!0,class:!0,href:!0});var k4t=s(B3);k1e=n(k4t,"SPAN",{});var S4t=s(k1e);T(U8.$$.fragment,S4t),S4t.forEach(t),k4t.forEach(t),tsr=i(fGe),S1e=n(fGe,"SPAN",{});var R4t=s(S1e);asr=r(R4t,"AutoModelForImageSegmentation"),R4t.forEach(t),fGe.forEach(t),sje=i(f),Ho=n(f,"DIV",{class:!0});var cl=s(Ho);T(J8.$$.fragment,cl),nsr=i(cl),Rd=n(cl,"P",{});var see=s(Rd);ssr=r(see,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),Wz=n(see,"A",{href:!0});var P4t=s(Wz);lsr=r(P4t,"from_pretrained()"),P4t.forEach(t),isr=r(see," class method or the "),Qz=n(see,"A",{href:!0});var B4t=s(Qz);dsr=r(B4t,"from_config()"),B4t.forEach(t),csr=r(see,` class
method.`),see.forEach(t),fsr=i(cl),Y8=n(cl,"P",{});var mGe=s(Y8);msr=r(mGe,"This class cannot be instantiated directly using "),R1e=n(mGe,"CODE",{});var I4t=s(R1e);gsr=r(I4t,"__init__()"),I4t.forEach(t),hsr=r(mGe," (throws an error)."),mGe.forEach(t),psr=i(cl),Ct=n(cl,"DIV",{class:!0});var vA=s(Ct);T(K8.$$.fragment,vA),_sr=i(vA),P1e=n(vA,"P",{});var N4t=s(P1e);usr=r(N4t,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),N4t.forEach(t),bsr=i(vA),Pd=n(vA,"P",{});var lee=s(Pd);vsr=r(lee,`Note:
Loading a model from its configuration file does `),B1e=n(lee,"STRONG",{});var q4t=s(B1e);Fsr=r(q4t,"not"),q4t.forEach(t),Tsr=r(lee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Hz=n(lee,"A",{href:!0});var j4t=s(Hz);Msr=r(j4t,"from_pretrained()"),j4t.forEach(t),Esr=r(lee," to load the model weights."),lee.forEach(t),Csr=i(vA),T(I3.$$.fragment,vA),vA.forEach(t),wsr=i(cl),uo=n(cl,"DIV",{class:!0});var Ta=s(uo);T(Z8.$$.fragment,Ta),Asr=i(Ta),I1e=n(Ta,"P",{});var D4t=s(I1e);ysr=r(D4t,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),D4t.forEach(t),Lsr=i(Ta),Ha=n(Ta,"P",{});var FA=s(Ha);xsr=r(FA,"The model class to instantiate is selected based on the "),N1e=n(FA,"CODE",{});var G4t=s(N1e);$sr=r(G4t,"model_type"),G4t.forEach(t),ksr=r(FA,` property of the config object (either
passed as an argument or loaded from `),q1e=n(FA,"CODE",{});var O4t=s(q1e);Ssr=r(O4t,"pretrained_model_name_or_path"),O4t.forEach(t),Rsr=r(FA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j1e=n(FA,"CODE",{});var V4t=s(j1e);Psr=r(V4t,"pretrained_model_name_or_path"),V4t.forEach(t),Bsr=r(FA,":"),FA.forEach(t),Isr=i(Ta),D1e=n(Ta,"UL",{});var X4t=s(D1e);N3=n(X4t,"LI",{});var mSe=s(N3);G1e=n(mSe,"STRONG",{});var z4t=s(G1e);Nsr=r(z4t,"detr"),z4t.forEach(t),qsr=r(mSe," \u2014 "),Uz=n(mSe,"A",{href:!0});var W4t=s(Uz);jsr=r(W4t,"DetrForSegmentation"),W4t.forEach(t),Dsr=r(mSe," (DETR model)"),mSe.forEach(t),X4t.forEach(t),Gsr=i(Ta),q3=n(Ta,"P",{});var gSe=s(q3);Osr=r(gSe,"The model is set in evaluation mode by default using "),O1e=n(gSe,"CODE",{});var Q4t=s(O1e);Vsr=r(Q4t,"model.eval()"),Q4t.forEach(t),Xsr=r(gSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),V1e=n(gSe,"CODE",{});var H4t=s(V1e);zsr=r(H4t,"model.train()"),H4t.forEach(t),gSe.forEach(t),Wsr=i(Ta),T(j3.$$.fragment,Ta),Ta.forEach(t),cl.forEach(t),lje=i(f),Bd=n(f,"H2",{class:!0});var gGe=s(Bd);D3=n(gGe,"A",{id:!0,class:!0,href:!0});var U4t=s(D3);X1e=n(U4t,"SPAN",{});var J4t=s(X1e);T(e7.$$.fragment,J4t),J4t.forEach(t),U4t.forEach(t),Qsr=i(gGe),z1e=n(gGe,"SPAN",{});var Y4t=s(z1e);Hsr=r(Y4t,"AutoModelForSemanticSegmentation"),Y4t.forEach(t),gGe.forEach(t),ije=i(f),Uo=n(f,"DIV",{class:!0});var fl=s(Uo);T(o7.$$.fragment,fl),Usr=i(fl),Id=n(fl,"P",{});var iee=s(Id);Jsr=r(iee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Jz=n(iee,"A",{href:!0});var K4t=s(Jz);Ysr=r(K4t,"from_pretrained()"),K4t.forEach(t),Ksr=r(iee," class method or the "),Yz=n(iee,"A",{href:!0});var Z4t=s(Yz);Zsr=r(Z4t,"from_config()"),Z4t.forEach(t),elr=r(iee,` class
method.`),iee.forEach(t),olr=i(fl),r7=n(fl,"P",{});var hGe=s(r7);rlr=r(hGe,"This class cannot be instantiated directly using "),W1e=n(hGe,"CODE",{});var e5t=s(W1e);tlr=r(e5t,"__init__()"),e5t.forEach(t),alr=r(hGe," (throws an error)."),hGe.forEach(t),nlr=i(fl),wt=n(fl,"DIV",{class:!0});var TA=s(wt);T(t7.$$.fragment,TA),slr=i(TA),Q1e=n(TA,"P",{});var o5t=s(Q1e);llr=r(o5t,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),o5t.forEach(t),ilr=i(TA),Nd=n(TA,"P",{});var dee=s(Nd);dlr=r(dee,`Note:
Loading a model from its configuration file does `),H1e=n(dee,"STRONG",{});var r5t=s(H1e);clr=r(r5t,"not"),r5t.forEach(t),flr=r(dee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Kz=n(dee,"A",{href:!0});var t5t=s(Kz);mlr=r(t5t,"from_pretrained()"),t5t.forEach(t),glr=r(dee," to load the model weights."),dee.forEach(t),hlr=i(TA),T(G3.$$.fragment,TA),TA.forEach(t),plr=i(fl),bo=n(fl,"DIV",{class:!0});var Ma=s(bo);T(a7.$$.fragment,Ma),_lr=i(Ma),U1e=n(Ma,"P",{});var a5t=s(U1e);ulr=r(a5t,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),a5t.forEach(t),blr=i(Ma),Ua=n(Ma,"P",{});var MA=s(Ua);vlr=r(MA,"The model class to instantiate is selected based on the "),J1e=n(MA,"CODE",{});var n5t=s(J1e);Flr=r(n5t,"model_type"),n5t.forEach(t),Tlr=r(MA,` property of the config object (either
passed as an argument or loaded from `),Y1e=n(MA,"CODE",{});var s5t=s(Y1e);Mlr=r(s5t,"pretrained_model_name_or_path"),s5t.forEach(t),Elr=r(MA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K1e=n(MA,"CODE",{});var l5t=s(K1e);Clr=r(l5t,"pretrained_model_name_or_path"),l5t.forEach(t),wlr=r(MA,":"),MA.forEach(t),Alr=i(Ma),Ja=n(Ma,"UL",{});var EA=s(Ja);O3=n(EA,"LI",{});var hSe=s(O3);Z1e=n(hSe,"STRONG",{});var i5t=s(Z1e);ylr=r(i5t,"beit"),i5t.forEach(t),Llr=r(hSe," \u2014 "),Zz=n(hSe,"A",{href:!0});var d5t=s(Zz);xlr=r(d5t,"BeitForSemanticSegmentation"),d5t.forEach(t),$lr=r(hSe," (BEiT model)"),hSe.forEach(t),klr=i(EA),V3=n(EA,"LI",{});var pSe=s(V3);ebe=n(pSe,"STRONG",{});var c5t=s(ebe);Slr=r(c5t,"data2vec-vision"),c5t.forEach(t),Rlr=r(pSe," \u2014 "),eW=n(pSe,"A",{href:!0});var f5t=s(eW);Plr=r(f5t,"Data2VecVisionForSemanticSegmentation"),f5t.forEach(t),Blr=r(pSe," (Data2VecVision model)"),pSe.forEach(t),Ilr=i(EA),X3=n(EA,"LI",{});var _Se=s(X3);obe=n(_Se,"STRONG",{});var m5t=s(obe);Nlr=r(m5t,"dpt"),m5t.forEach(t),qlr=r(_Se," \u2014 "),oW=n(_Se,"A",{href:!0});var g5t=s(oW);jlr=r(g5t,"DPTForSemanticSegmentation"),g5t.forEach(t),Dlr=r(_Se," (DPT model)"),_Se.forEach(t),Glr=i(EA),z3=n(EA,"LI",{});var uSe=s(z3);rbe=n(uSe,"STRONG",{});var h5t=s(rbe);Olr=r(h5t,"segformer"),h5t.forEach(t),Vlr=r(uSe," \u2014 "),rW=n(uSe,"A",{href:!0});var p5t=s(rW);Xlr=r(p5t,"SegformerForSemanticSegmentation"),p5t.forEach(t),zlr=r(uSe," (SegFormer model)"),uSe.forEach(t),EA.forEach(t),Wlr=i(Ma),W3=n(Ma,"P",{});var bSe=s(W3);Qlr=r(bSe,"The model is set in evaluation mode by default using "),tbe=n(bSe,"CODE",{});var _5t=s(tbe);Hlr=r(_5t,"model.eval()"),_5t.forEach(t),Ulr=r(bSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),abe=n(bSe,"CODE",{});var u5t=s(abe);Jlr=r(u5t,"model.train()"),u5t.forEach(t),bSe.forEach(t),Ylr=i(Ma),T(Q3.$$.fragment,Ma),Ma.forEach(t),fl.forEach(t),dje=i(f),qd=n(f,"H2",{class:!0});var pGe=s(qd);H3=n(pGe,"A",{id:!0,class:!0,href:!0});var b5t=s(H3);nbe=n(b5t,"SPAN",{});var v5t=s(nbe);T(n7.$$.fragment,v5t),v5t.forEach(t),b5t.forEach(t),Klr=i(pGe),sbe=n(pGe,"SPAN",{});var F5t=s(sbe);Zlr=r(F5t,"AutoModelForInstanceSegmentation"),F5t.forEach(t),pGe.forEach(t),cje=i(f),Jo=n(f,"DIV",{class:!0});var ml=s(Jo);T(s7.$$.fragment,ml),eir=i(ml),jd=n(ml,"P",{});var cee=s(jd);oir=r(cee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),tW=n(cee,"A",{href:!0});var T5t=s(tW);rir=r(T5t,"from_pretrained()"),T5t.forEach(t),tir=r(cee," class method or the "),aW=n(cee,"A",{href:!0});var M5t=s(aW);air=r(M5t,"from_config()"),M5t.forEach(t),nir=r(cee,` class
method.`),cee.forEach(t),sir=i(ml),l7=n(ml,"P",{});var _Ge=s(l7);lir=r(_Ge,"This class cannot be instantiated directly using "),lbe=n(_Ge,"CODE",{});var E5t=s(lbe);iir=r(E5t,"__init__()"),E5t.forEach(t),dir=r(_Ge," (throws an error)."),_Ge.forEach(t),cir=i(ml),At=n(ml,"DIV",{class:!0});var CA=s(At);T(i7.$$.fragment,CA),fir=i(CA),ibe=n(CA,"P",{});var C5t=s(ibe);mir=r(C5t,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),C5t.forEach(t),gir=i(CA),Dd=n(CA,"P",{});var fee=s(Dd);hir=r(fee,`Note:
Loading a model from its configuration file does `),dbe=n(fee,"STRONG",{});var w5t=s(dbe);pir=r(w5t,"not"),w5t.forEach(t),_ir=r(fee,` load the model weights. It only affects the
model\u2019s configuration. Use `),nW=n(fee,"A",{href:!0});var A5t=s(nW);uir=r(A5t,"from_pretrained()"),A5t.forEach(t),bir=r(fee," to load the model weights."),fee.forEach(t),vir=i(CA),T(U3.$$.fragment,CA),CA.forEach(t),Fir=i(ml),vo=n(ml,"DIV",{class:!0});var Ea=s(vo);T(d7.$$.fragment,Ea),Tir=i(Ea),cbe=n(Ea,"P",{});var y5t=s(cbe);Mir=r(y5t,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),y5t.forEach(t),Eir=i(Ea),Ya=n(Ea,"P",{});var wA=s(Ya);Cir=r(wA,"The model class to instantiate is selected based on the "),fbe=n(wA,"CODE",{});var L5t=s(fbe);wir=r(L5t,"model_type"),L5t.forEach(t),Air=r(wA,` property of the config object (either
passed as an argument or loaded from `),mbe=n(wA,"CODE",{});var x5t=s(mbe);yir=r(x5t,"pretrained_model_name_or_path"),x5t.forEach(t),Lir=r(wA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gbe=n(wA,"CODE",{});var $5t=s(gbe);xir=r($5t,"pretrained_model_name_or_path"),$5t.forEach(t),$ir=r(wA,":"),wA.forEach(t),kir=i(Ea),hbe=n(Ea,"UL",{});var k5t=s(hbe);J3=n(k5t,"LI",{});var vSe=s(J3);pbe=n(vSe,"STRONG",{});var S5t=s(pbe);Sir=r(S5t,"maskformer"),S5t.forEach(t),Rir=r(vSe," \u2014 "),sW=n(vSe,"A",{href:!0});var R5t=s(sW);Pir=r(R5t,"MaskFormerForInstanceSegmentation"),R5t.forEach(t),Bir=r(vSe," (MaskFormer model)"),vSe.forEach(t),k5t.forEach(t),Iir=i(Ea),Y3=n(Ea,"P",{});var FSe=s(Y3);Nir=r(FSe,"The model is set in evaluation mode by default using "),_be=n(FSe,"CODE",{});var P5t=s(_be);qir=r(P5t,"model.eval()"),P5t.forEach(t),jir=r(FSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ube=n(FSe,"CODE",{});var B5t=s(ube);Dir=r(B5t,"model.train()"),B5t.forEach(t),FSe.forEach(t),Gir=i(Ea),T(K3.$$.fragment,Ea),Ea.forEach(t),ml.forEach(t),fje=i(f),Gd=n(f,"H2",{class:!0});var uGe=s(Gd);Z3=n(uGe,"A",{id:!0,class:!0,href:!0});var I5t=s(Z3);bbe=n(I5t,"SPAN",{});var N5t=s(bbe);T(c7.$$.fragment,N5t),N5t.forEach(t),I5t.forEach(t),Oir=i(uGe),vbe=n(uGe,"SPAN",{});var q5t=s(vbe);Vir=r(q5t,"TFAutoModel"),q5t.forEach(t),uGe.forEach(t),mje=i(f),Yo=n(f,"DIV",{class:!0});var gl=s(Yo);T(f7.$$.fragment,gl),Xir=i(gl),Od=n(gl,"P",{});var mee=s(Od);zir=r(mee,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),lW=n(mee,"A",{href:!0});var j5t=s(lW);Wir=r(j5t,"from_pretrained()"),j5t.forEach(t),Qir=r(mee," class method or the "),iW=n(mee,"A",{href:!0});var D5t=s(iW);Hir=r(D5t,"from_config()"),D5t.forEach(t),Uir=r(mee,` class
method.`),mee.forEach(t),Jir=i(gl),m7=n(gl,"P",{});var bGe=s(m7);Yir=r(bGe,"This class cannot be instantiated directly using "),Fbe=n(bGe,"CODE",{});var G5t=s(Fbe);Kir=r(G5t,"__init__()"),G5t.forEach(t),Zir=r(bGe," (throws an error)."),bGe.forEach(t),edr=i(gl),yt=n(gl,"DIV",{class:!0});var AA=s(yt);T(g7.$$.fragment,AA),odr=i(AA),Tbe=n(AA,"P",{});var O5t=s(Tbe);rdr=r(O5t,"Instantiates one of the base model classes of the library from a configuration."),O5t.forEach(t),tdr=i(AA),Vd=n(AA,"P",{});var gee=s(Vd);adr=r(gee,`Note:
Loading a model from its configuration file does `),Mbe=n(gee,"STRONG",{});var V5t=s(Mbe);ndr=r(V5t,"not"),V5t.forEach(t),sdr=r(gee,` load the model weights. It only affects the
model\u2019s configuration. Use `),dW=n(gee,"A",{href:!0});var X5t=s(dW);ldr=r(X5t,"from_pretrained()"),X5t.forEach(t),idr=r(gee," to load the model weights."),gee.forEach(t),ddr=i(AA),T(eF.$$.fragment,AA),AA.forEach(t),cdr=i(gl),wr=n(gl,"DIV",{class:!0});var hl=s(wr);T(h7.$$.fragment,hl),fdr=i(hl),Ebe=n(hl,"P",{});var z5t=s(Ebe);mdr=r(z5t,"Instantiate one of the base model classes of the library from a pretrained model."),z5t.forEach(t),gdr=i(hl),Ka=n(hl,"P",{});var yA=s(Ka);hdr=r(yA,"The model class to instantiate is selected based on the "),Cbe=n(yA,"CODE",{});var W5t=s(Cbe);pdr=r(W5t,"model_type"),W5t.forEach(t),_dr=r(yA,` property of the config object (either
passed as an argument or loaded from `),wbe=n(yA,"CODE",{});var Q5t=s(wbe);udr=r(Q5t,"pretrained_model_name_or_path"),Q5t.forEach(t),bdr=r(yA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Abe=n(yA,"CODE",{});var H5t=s(Abe);vdr=r(H5t,"pretrained_model_name_or_path"),H5t.forEach(t),Fdr=r(yA,":"),yA.forEach(t),Tdr=i(hl),q=n(hl,"UL",{});var D=s(q);oF=n(D,"LI",{});var TSe=s(oF);ybe=n(TSe,"STRONG",{});var U5t=s(ybe);Mdr=r(U5t,"albert"),U5t.forEach(t),Edr=r(TSe," \u2014 "),cW=n(TSe,"A",{href:!0});var J5t=s(cW);Cdr=r(J5t,"TFAlbertModel"),J5t.forEach(t),wdr=r(TSe," (ALBERT model)"),TSe.forEach(t),Adr=i(D),rF=n(D,"LI",{});var MSe=s(rF);Lbe=n(MSe,"STRONG",{});var Y5t=s(Lbe);ydr=r(Y5t,"bart"),Y5t.forEach(t),Ldr=r(MSe," \u2014 "),fW=n(MSe,"A",{href:!0});var K5t=s(fW);xdr=r(K5t,"TFBartModel"),K5t.forEach(t),$dr=r(MSe," (BART model)"),MSe.forEach(t),kdr=i(D),tF=n(D,"LI",{});var ESe=s(tF);xbe=n(ESe,"STRONG",{});var Z5t=s(xbe);Sdr=r(Z5t,"bert"),Z5t.forEach(t),Rdr=r(ESe," \u2014 "),mW=n(ESe,"A",{href:!0});var evt=s(mW);Pdr=r(evt,"TFBertModel"),evt.forEach(t),Bdr=r(ESe," (BERT model)"),ESe.forEach(t),Idr=i(D),aF=n(D,"LI",{});var CSe=s(aF);$be=n(CSe,"STRONG",{});var ovt=s($be);Ndr=r(ovt,"blenderbot"),ovt.forEach(t),qdr=r(CSe," \u2014 "),gW=n(CSe,"A",{href:!0});var rvt=s(gW);jdr=r(rvt,"TFBlenderbotModel"),rvt.forEach(t),Ddr=r(CSe," (Blenderbot model)"),CSe.forEach(t),Gdr=i(D),nF=n(D,"LI",{});var wSe=s(nF);kbe=n(wSe,"STRONG",{});var tvt=s(kbe);Odr=r(tvt,"blenderbot-small"),tvt.forEach(t),Vdr=r(wSe," \u2014 "),hW=n(wSe,"A",{href:!0});var avt=s(hW);Xdr=r(avt,"TFBlenderbotSmallModel"),avt.forEach(t),zdr=r(wSe," (BlenderbotSmall model)"),wSe.forEach(t),Wdr=i(D),sF=n(D,"LI",{});var ASe=s(sF);Sbe=n(ASe,"STRONG",{});var nvt=s(Sbe);Qdr=r(nvt,"camembert"),nvt.forEach(t),Hdr=r(ASe," \u2014 "),pW=n(ASe,"A",{href:!0});var svt=s(pW);Udr=r(svt,"TFCamembertModel"),svt.forEach(t),Jdr=r(ASe," (CamemBERT model)"),ASe.forEach(t),Ydr=i(D),lF=n(D,"LI",{});var ySe=s(lF);Rbe=n(ySe,"STRONG",{});var lvt=s(Rbe);Kdr=r(lvt,"clip"),lvt.forEach(t),Zdr=r(ySe," \u2014 "),_W=n(ySe,"A",{href:!0});var ivt=s(_W);ecr=r(ivt,"TFCLIPModel"),ivt.forEach(t),ocr=r(ySe," (CLIP model)"),ySe.forEach(t),rcr=i(D),iF=n(D,"LI",{});var LSe=s(iF);Pbe=n(LSe,"STRONG",{});var dvt=s(Pbe);tcr=r(dvt,"convbert"),dvt.forEach(t),acr=r(LSe," \u2014 "),uW=n(LSe,"A",{href:!0});var cvt=s(uW);ncr=r(cvt,"TFConvBertModel"),cvt.forEach(t),scr=r(LSe," (ConvBERT model)"),LSe.forEach(t),lcr=i(D),dF=n(D,"LI",{});var xSe=s(dF);Bbe=n(xSe,"STRONG",{});var fvt=s(Bbe);icr=r(fvt,"convnext"),fvt.forEach(t),dcr=r(xSe," \u2014 "),bW=n(xSe,"A",{href:!0});var mvt=s(bW);ccr=r(mvt,"TFConvNextModel"),mvt.forEach(t),fcr=r(xSe," (ConvNext model)"),xSe.forEach(t),mcr=i(D),cF=n(D,"LI",{});var $Se=s(cF);Ibe=n($Se,"STRONG",{});var gvt=s(Ibe);gcr=r(gvt,"ctrl"),gvt.forEach(t),hcr=r($Se," \u2014 "),vW=n($Se,"A",{href:!0});var hvt=s(vW);pcr=r(hvt,"TFCTRLModel"),hvt.forEach(t),_cr=r($Se," (CTRL model)"),$Se.forEach(t),ucr=i(D),fF=n(D,"LI",{});var kSe=s(fF);Nbe=n(kSe,"STRONG",{});var pvt=s(Nbe);bcr=r(pvt,"data2vec-vision"),pvt.forEach(t),vcr=r(kSe," \u2014 "),FW=n(kSe,"A",{href:!0});var _vt=s(FW);Fcr=r(_vt,"TFData2VecVisionModel"),_vt.forEach(t),Tcr=r(kSe," (Data2VecVision model)"),kSe.forEach(t),Mcr=i(D),mF=n(D,"LI",{});var SSe=s(mF);qbe=n(SSe,"STRONG",{});var uvt=s(qbe);Ecr=r(uvt,"deberta"),uvt.forEach(t),Ccr=r(SSe," \u2014 "),TW=n(SSe,"A",{href:!0});var bvt=s(TW);wcr=r(bvt,"TFDebertaModel"),bvt.forEach(t),Acr=r(SSe," (DeBERTa model)"),SSe.forEach(t),ycr=i(D),gF=n(D,"LI",{});var RSe=s(gF);jbe=n(RSe,"STRONG",{});var vvt=s(jbe);Lcr=r(vvt,"deberta-v2"),vvt.forEach(t),xcr=r(RSe," \u2014 "),MW=n(RSe,"A",{href:!0});var Fvt=s(MW);$cr=r(Fvt,"TFDebertaV2Model"),Fvt.forEach(t),kcr=r(RSe," (DeBERTa-v2 model)"),RSe.forEach(t),Scr=i(D),hF=n(D,"LI",{});var PSe=s(hF);Dbe=n(PSe,"STRONG",{});var Tvt=s(Dbe);Rcr=r(Tvt,"distilbert"),Tvt.forEach(t),Pcr=r(PSe," \u2014 "),EW=n(PSe,"A",{href:!0});var Mvt=s(EW);Bcr=r(Mvt,"TFDistilBertModel"),Mvt.forEach(t),Icr=r(PSe," (DistilBERT model)"),PSe.forEach(t),Ncr=i(D),pF=n(D,"LI",{});var BSe=s(pF);Gbe=n(BSe,"STRONG",{});var Evt=s(Gbe);qcr=r(Evt,"dpr"),Evt.forEach(t),jcr=r(BSe," \u2014 "),CW=n(BSe,"A",{href:!0});var Cvt=s(CW);Dcr=r(Cvt,"TFDPRQuestionEncoder"),Cvt.forEach(t),Gcr=r(BSe," (DPR model)"),BSe.forEach(t),Ocr=i(D),_F=n(D,"LI",{});var ISe=s(_F);Obe=n(ISe,"STRONG",{});var wvt=s(Obe);Vcr=r(wvt,"electra"),wvt.forEach(t),Xcr=r(ISe," \u2014 "),wW=n(ISe,"A",{href:!0});var Avt=s(wW);zcr=r(Avt,"TFElectraModel"),Avt.forEach(t),Wcr=r(ISe," (ELECTRA model)"),ISe.forEach(t),Qcr=i(D),uF=n(D,"LI",{});var NSe=s(uF);Vbe=n(NSe,"STRONG",{});var yvt=s(Vbe);Hcr=r(yvt,"flaubert"),yvt.forEach(t),Ucr=r(NSe," \u2014 "),AW=n(NSe,"A",{href:!0});var Lvt=s(AW);Jcr=r(Lvt,"TFFlaubertModel"),Lvt.forEach(t),Ycr=r(NSe," (FlauBERT model)"),NSe.forEach(t),Kcr=i(D),Is=n(D,"LI",{});var W$=s(Is);Xbe=n(W$,"STRONG",{});var xvt=s(Xbe);Zcr=r(xvt,"funnel"),xvt.forEach(t),efr=r(W$," \u2014 "),yW=n(W$,"A",{href:!0});var $vt=s(yW);ofr=r($vt,"TFFunnelModel"),$vt.forEach(t),rfr=r(W$," or "),LW=n(W$,"A",{href:!0});var kvt=s(LW);tfr=r(kvt,"TFFunnelBaseModel"),kvt.forEach(t),afr=r(W$," (Funnel Transformer model)"),W$.forEach(t),nfr=i(D),bF=n(D,"LI",{});var qSe=s(bF);zbe=n(qSe,"STRONG",{});var Svt=s(zbe);sfr=r(Svt,"gpt2"),Svt.forEach(t),lfr=r(qSe," \u2014 "),xW=n(qSe,"A",{href:!0});var Rvt=s(xW);ifr=r(Rvt,"TFGPT2Model"),Rvt.forEach(t),dfr=r(qSe," (OpenAI GPT-2 model)"),qSe.forEach(t),cfr=i(D),vF=n(D,"LI",{});var jSe=s(vF);Wbe=n(jSe,"STRONG",{});var Pvt=s(Wbe);ffr=r(Pvt,"gptj"),Pvt.forEach(t),mfr=r(jSe," \u2014 "),$W=n(jSe,"A",{href:!0});var Bvt=s($W);gfr=r(Bvt,"TFGPTJModel"),Bvt.forEach(t),hfr=r(jSe," (GPT-J model)"),jSe.forEach(t),pfr=i(D),FF=n(D,"LI",{});var DSe=s(FF);Qbe=n(DSe,"STRONG",{});var Ivt=s(Qbe);_fr=r(Ivt,"hubert"),Ivt.forEach(t),ufr=r(DSe," \u2014 "),kW=n(DSe,"A",{href:!0});var Nvt=s(kW);bfr=r(Nvt,"TFHubertModel"),Nvt.forEach(t),vfr=r(DSe," (Hubert model)"),DSe.forEach(t),Ffr=i(D),TF=n(D,"LI",{});var GSe=s(TF);Hbe=n(GSe,"STRONG",{});var qvt=s(Hbe);Tfr=r(qvt,"layoutlm"),qvt.forEach(t),Mfr=r(GSe," \u2014 "),SW=n(GSe,"A",{href:!0});var jvt=s(SW);Efr=r(jvt,"TFLayoutLMModel"),jvt.forEach(t),Cfr=r(GSe," (LayoutLM model)"),GSe.forEach(t),wfr=i(D),MF=n(D,"LI",{});var OSe=s(MF);Ube=n(OSe,"STRONG",{});var Dvt=s(Ube);Afr=r(Dvt,"led"),Dvt.forEach(t),yfr=r(OSe," \u2014 "),RW=n(OSe,"A",{href:!0});var Gvt=s(RW);Lfr=r(Gvt,"TFLEDModel"),Gvt.forEach(t),xfr=r(OSe," (LED model)"),OSe.forEach(t),$fr=i(D),EF=n(D,"LI",{});var VSe=s(EF);Jbe=n(VSe,"STRONG",{});var Ovt=s(Jbe);kfr=r(Ovt,"longformer"),Ovt.forEach(t),Sfr=r(VSe," \u2014 "),PW=n(VSe,"A",{href:!0});var Vvt=s(PW);Rfr=r(Vvt,"TFLongformerModel"),Vvt.forEach(t),Pfr=r(VSe," (Longformer model)"),VSe.forEach(t),Bfr=i(D),CF=n(D,"LI",{});var XSe=s(CF);Ybe=n(XSe,"STRONG",{});var Xvt=s(Ybe);Ifr=r(Xvt,"lxmert"),Xvt.forEach(t),Nfr=r(XSe," \u2014 "),BW=n(XSe,"A",{href:!0});var zvt=s(BW);qfr=r(zvt,"TFLxmertModel"),zvt.forEach(t),jfr=r(XSe," (LXMERT model)"),XSe.forEach(t),Dfr=i(D),wF=n(D,"LI",{});var zSe=s(wF);Kbe=n(zSe,"STRONG",{});var Wvt=s(Kbe);Gfr=r(Wvt,"marian"),Wvt.forEach(t),Ofr=r(zSe," \u2014 "),IW=n(zSe,"A",{href:!0});var Qvt=s(IW);Vfr=r(Qvt,"TFMarianModel"),Qvt.forEach(t),Xfr=r(zSe," (Marian model)"),zSe.forEach(t),zfr=i(D),AF=n(D,"LI",{});var WSe=s(AF);Zbe=n(WSe,"STRONG",{});var Hvt=s(Zbe);Wfr=r(Hvt,"mbart"),Hvt.forEach(t),Qfr=r(WSe," \u2014 "),NW=n(WSe,"A",{href:!0});var Uvt=s(NW);Hfr=r(Uvt,"TFMBartModel"),Uvt.forEach(t),Ufr=r(WSe," (mBART model)"),WSe.forEach(t),Jfr=i(D),yF=n(D,"LI",{});var QSe=s(yF);e2e=n(QSe,"STRONG",{});var Jvt=s(e2e);Yfr=r(Jvt,"mobilebert"),Jvt.forEach(t),Kfr=r(QSe," \u2014 "),qW=n(QSe,"A",{href:!0});var Yvt=s(qW);Zfr=r(Yvt,"TFMobileBertModel"),Yvt.forEach(t),emr=r(QSe," (MobileBERT model)"),QSe.forEach(t),omr=i(D),LF=n(D,"LI",{});var HSe=s(LF);o2e=n(HSe,"STRONG",{});var Kvt=s(o2e);rmr=r(Kvt,"mpnet"),Kvt.forEach(t),tmr=r(HSe," \u2014 "),jW=n(HSe,"A",{href:!0});var Zvt=s(jW);amr=r(Zvt,"TFMPNetModel"),Zvt.forEach(t),nmr=r(HSe," (MPNet model)"),HSe.forEach(t),smr=i(D),xF=n(D,"LI",{});var USe=s(xF);r2e=n(USe,"STRONG",{});var e3t=s(r2e);lmr=r(e3t,"mt5"),e3t.forEach(t),imr=r(USe," \u2014 "),DW=n(USe,"A",{href:!0});var o3t=s(DW);dmr=r(o3t,"TFMT5Model"),o3t.forEach(t),cmr=r(USe," (mT5 model)"),USe.forEach(t),fmr=i(D),$F=n(D,"LI",{});var JSe=s($F);t2e=n(JSe,"STRONG",{});var r3t=s(t2e);mmr=r(r3t,"openai-gpt"),r3t.forEach(t),gmr=r(JSe," \u2014 "),GW=n(JSe,"A",{href:!0});var t3t=s(GW);hmr=r(t3t,"TFOpenAIGPTModel"),t3t.forEach(t),pmr=r(JSe," (OpenAI GPT model)"),JSe.forEach(t),_mr=i(D),kF=n(D,"LI",{});var YSe=s(kF);a2e=n(YSe,"STRONG",{});var a3t=s(a2e);umr=r(a3t,"pegasus"),a3t.forEach(t),bmr=r(YSe," \u2014 "),OW=n(YSe,"A",{href:!0});var n3t=s(OW);vmr=r(n3t,"TFPegasusModel"),n3t.forEach(t),Fmr=r(YSe," (Pegasus model)"),YSe.forEach(t),Tmr=i(D),SF=n(D,"LI",{});var KSe=s(SF);n2e=n(KSe,"STRONG",{});var s3t=s(n2e);Mmr=r(s3t,"rembert"),s3t.forEach(t),Emr=r(KSe," \u2014 "),VW=n(KSe,"A",{href:!0});var l3t=s(VW);Cmr=r(l3t,"TFRemBertModel"),l3t.forEach(t),wmr=r(KSe," (RemBERT model)"),KSe.forEach(t),Amr=i(D),RF=n(D,"LI",{});var ZSe=s(RF);s2e=n(ZSe,"STRONG",{});var i3t=s(s2e);ymr=r(i3t,"roberta"),i3t.forEach(t),Lmr=r(ZSe," \u2014 "),XW=n(ZSe,"A",{href:!0});var d3t=s(XW);xmr=r(d3t,"TFRobertaModel"),d3t.forEach(t),$mr=r(ZSe," (RoBERTa model)"),ZSe.forEach(t),kmr=i(D),PF=n(D,"LI",{});var eRe=s(PF);l2e=n(eRe,"STRONG",{});var c3t=s(l2e);Smr=r(c3t,"roformer"),c3t.forEach(t),Rmr=r(eRe," \u2014 "),zW=n(eRe,"A",{href:!0});var f3t=s(zW);Pmr=r(f3t,"TFRoFormerModel"),f3t.forEach(t),Bmr=r(eRe," (RoFormer model)"),eRe.forEach(t),Imr=i(D),BF=n(D,"LI",{});var oRe=s(BF);i2e=n(oRe,"STRONG",{});var m3t=s(i2e);Nmr=r(m3t,"speech_to_text"),m3t.forEach(t),qmr=r(oRe," \u2014 "),WW=n(oRe,"A",{href:!0});var g3t=s(WW);jmr=r(g3t,"TFSpeech2TextModel"),g3t.forEach(t),Dmr=r(oRe," (Speech2Text model)"),oRe.forEach(t),Gmr=i(D),IF=n(D,"LI",{});var rRe=s(IF);d2e=n(rRe,"STRONG",{});var h3t=s(d2e);Omr=r(h3t,"swin"),h3t.forEach(t),Vmr=r(rRe," \u2014 "),QW=n(rRe,"A",{href:!0});var p3t=s(QW);Xmr=r(p3t,"TFSwinModel"),p3t.forEach(t),zmr=r(rRe," (Swin model)"),rRe.forEach(t),Wmr=i(D),NF=n(D,"LI",{});var tRe=s(NF);c2e=n(tRe,"STRONG",{});var _3t=s(c2e);Qmr=r(_3t,"t5"),_3t.forEach(t),Hmr=r(tRe," \u2014 "),HW=n(tRe,"A",{href:!0});var u3t=s(HW);Umr=r(u3t,"TFT5Model"),u3t.forEach(t),Jmr=r(tRe," (T5 model)"),tRe.forEach(t),Ymr=i(D),qF=n(D,"LI",{});var aRe=s(qF);f2e=n(aRe,"STRONG",{});var b3t=s(f2e);Kmr=r(b3t,"tapas"),b3t.forEach(t),Zmr=r(aRe," \u2014 "),UW=n(aRe,"A",{href:!0});var v3t=s(UW);egr=r(v3t,"TFTapasModel"),v3t.forEach(t),ogr=r(aRe," (TAPAS model)"),aRe.forEach(t),rgr=i(D),jF=n(D,"LI",{});var nRe=s(jF);m2e=n(nRe,"STRONG",{});var F3t=s(m2e);tgr=r(F3t,"transfo-xl"),F3t.forEach(t),agr=r(nRe," \u2014 "),JW=n(nRe,"A",{href:!0});var T3t=s(JW);ngr=r(T3t,"TFTransfoXLModel"),T3t.forEach(t),sgr=r(nRe," (Transformer-XL model)"),nRe.forEach(t),lgr=i(D),DF=n(D,"LI",{});var sRe=s(DF);g2e=n(sRe,"STRONG",{});var M3t=s(g2e);igr=r(M3t,"vit"),M3t.forEach(t),dgr=r(sRe," \u2014 "),YW=n(sRe,"A",{href:!0});var E3t=s(YW);cgr=r(E3t,"TFViTModel"),E3t.forEach(t),fgr=r(sRe," (ViT model)"),sRe.forEach(t),mgr=i(D),GF=n(D,"LI",{});var lRe=s(GF);h2e=n(lRe,"STRONG",{});var C3t=s(h2e);ggr=r(C3t,"vit_mae"),C3t.forEach(t),hgr=r(lRe," \u2014 "),KW=n(lRe,"A",{href:!0});var w3t=s(KW);pgr=r(w3t,"TFViTMAEModel"),w3t.forEach(t),_gr=r(lRe," (ViTMAE model)"),lRe.forEach(t),ugr=i(D),OF=n(D,"LI",{});var iRe=s(OF);p2e=n(iRe,"STRONG",{});var A3t=s(p2e);bgr=r(A3t,"wav2vec2"),A3t.forEach(t),vgr=r(iRe," \u2014 "),ZW=n(iRe,"A",{href:!0});var y3t=s(ZW);Fgr=r(y3t,"TFWav2Vec2Model"),y3t.forEach(t),Tgr=r(iRe," (Wav2Vec2 model)"),iRe.forEach(t),Mgr=i(D),VF=n(D,"LI",{});var dRe=s(VF);_2e=n(dRe,"STRONG",{});var L3t=s(_2e);Egr=r(L3t,"xglm"),L3t.forEach(t),Cgr=r(dRe," \u2014 "),eQ=n(dRe,"A",{href:!0});var x3t=s(eQ);wgr=r(x3t,"TFXGLMModel"),x3t.forEach(t),Agr=r(dRe," (XGLM model)"),dRe.forEach(t),ygr=i(D),XF=n(D,"LI",{});var cRe=s(XF);u2e=n(cRe,"STRONG",{});var $3t=s(u2e);Lgr=r($3t,"xlm"),$3t.forEach(t),xgr=r(cRe," \u2014 "),oQ=n(cRe,"A",{href:!0});var k3t=s(oQ);$gr=r(k3t,"TFXLMModel"),k3t.forEach(t),kgr=r(cRe," (XLM model)"),cRe.forEach(t),Sgr=i(D),zF=n(D,"LI",{});var fRe=s(zF);b2e=n(fRe,"STRONG",{});var S3t=s(b2e);Rgr=r(S3t,"xlm-roberta"),S3t.forEach(t),Pgr=r(fRe," \u2014 "),rQ=n(fRe,"A",{href:!0});var R3t=s(rQ);Bgr=r(R3t,"TFXLMRobertaModel"),R3t.forEach(t),Igr=r(fRe," (XLM-RoBERTa model)"),fRe.forEach(t),Ngr=i(D),WF=n(D,"LI",{});var mRe=s(WF);v2e=n(mRe,"STRONG",{});var P3t=s(v2e);qgr=r(P3t,"xlnet"),P3t.forEach(t),jgr=r(mRe," \u2014 "),tQ=n(mRe,"A",{href:!0});var B3t=s(tQ);Dgr=r(B3t,"TFXLNetModel"),B3t.forEach(t),Ggr=r(mRe," (XLNet model)"),mRe.forEach(t),D.forEach(t),Ogr=i(hl),T(QF.$$.fragment,hl),hl.forEach(t),gl.forEach(t),gje=i(f),Xd=n(f,"H2",{class:!0});var vGe=s(Xd);HF=n(vGe,"A",{id:!0,class:!0,href:!0});var I3t=s(HF);F2e=n(I3t,"SPAN",{});var N3t=s(F2e);T(p7.$$.fragment,N3t),N3t.forEach(t),I3t.forEach(t),Vgr=i(vGe),T2e=n(vGe,"SPAN",{});var q3t=s(T2e);Xgr=r(q3t,"TFAutoModelForPreTraining"),q3t.forEach(t),vGe.forEach(t),hje=i(f),Ko=n(f,"DIV",{class:!0});var pl=s(Ko);T(_7.$$.fragment,pl),zgr=i(pl),zd=n(pl,"P",{});var hee=s(zd);Wgr=r(hee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),aQ=n(hee,"A",{href:!0});var j3t=s(aQ);Qgr=r(j3t,"from_pretrained()"),j3t.forEach(t),Hgr=r(hee," class method or the "),nQ=n(hee,"A",{href:!0});var D3t=s(nQ);Ugr=r(D3t,"from_config()"),D3t.forEach(t),Jgr=r(hee,` class
method.`),hee.forEach(t),Ygr=i(pl),u7=n(pl,"P",{});var FGe=s(u7);Kgr=r(FGe,"This class cannot be instantiated directly using "),M2e=n(FGe,"CODE",{});var G3t=s(M2e);Zgr=r(G3t,"__init__()"),G3t.forEach(t),ehr=r(FGe," (throws an error)."),FGe.forEach(t),ohr=i(pl),Lt=n(pl,"DIV",{class:!0});var LA=s(Lt);T(b7.$$.fragment,LA),rhr=i(LA),E2e=n(LA,"P",{});var O3t=s(E2e);thr=r(O3t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),O3t.forEach(t),ahr=i(LA),Wd=n(LA,"P",{});var pee=s(Wd);nhr=r(pee,`Note:
Loading a model from its configuration file does `),C2e=n(pee,"STRONG",{});var V3t=s(C2e);shr=r(V3t,"not"),V3t.forEach(t),lhr=r(pee,` load the model weights. It only affects the
model\u2019s configuration. Use `),sQ=n(pee,"A",{href:!0});var X3t=s(sQ);ihr=r(X3t,"from_pretrained()"),X3t.forEach(t),dhr=r(pee," to load the model weights."),pee.forEach(t),chr=i(LA),T(UF.$$.fragment,LA),LA.forEach(t),fhr=i(pl),Ar=n(pl,"DIV",{class:!0});var _l=s(Ar);T(v7.$$.fragment,_l),mhr=i(_l),w2e=n(_l,"P",{});var z3t=s(w2e);ghr=r(z3t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),z3t.forEach(t),hhr=i(_l),Za=n(_l,"P",{});var xA=s(Za);phr=r(xA,"The model class to instantiate is selected based on the "),A2e=n(xA,"CODE",{});var W3t=s(A2e);_hr=r(W3t,"model_type"),W3t.forEach(t),uhr=r(xA,` property of the config object (either
passed as an argument or loaded from `),y2e=n(xA,"CODE",{});var Q3t=s(y2e);bhr=r(Q3t,"pretrained_model_name_or_path"),Q3t.forEach(t),vhr=r(xA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L2e=n(xA,"CODE",{});var H3t=s(L2e);Fhr=r(H3t,"pretrained_model_name_or_path"),H3t.forEach(t),Thr=r(xA,":"),xA.forEach(t),Mhr=i(_l),se=n(_l,"UL",{});var le=s(se);JF=n(le,"LI",{});var gRe=s(JF);x2e=n(gRe,"STRONG",{});var U3t=s(x2e);Ehr=r(U3t,"albert"),U3t.forEach(t),Chr=r(gRe," \u2014 "),lQ=n(gRe,"A",{href:!0});var J3t=s(lQ);whr=r(J3t,"TFAlbertForPreTraining"),J3t.forEach(t),Ahr=r(gRe," (ALBERT model)"),gRe.forEach(t),yhr=i(le),YF=n(le,"LI",{});var hRe=s(YF);$2e=n(hRe,"STRONG",{});var Y3t=s($2e);Lhr=r(Y3t,"bart"),Y3t.forEach(t),xhr=r(hRe," \u2014 "),iQ=n(hRe,"A",{href:!0});var K3t=s(iQ);$hr=r(K3t,"TFBartForConditionalGeneration"),K3t.forEach(t),khr=r(hRe," (BART model)"),hRe.forEach(t),Shr=i(le),KF=n(le,"LI",{});var pRe=s(KF);k2e=n(pRe,"STRONG",{});var Z3t=s(k2e);Rhr=r(Z3t,"bert"),Z3t.forEach(t),Phr=r(pRe," \u2014 "),dQ=n(pRe,"A",{href:!0});var eFt=s(dQ);Bhr=r(eFt,"TFBertForPreTraining"),eFt.forEach(t),Ihr=r(pRe," (BERT model)"),pRe.forEach(t),Nhr=i(le),ZF=n(le,"LI",{});var _Re=s(ZF);S2e=n(_Re,"STRONG",{});var oFt=s(S2e);qhr=r(oFt,"camembert"),oFt.forEach(t),jhr=r(_Re," \u2014 "),cQ=n(_Re,"A",{href:!0});var rFt=s(cQ);Dhr=r(rFt,"TFCamembertForMaskedLM"),rFt.forEach(t),Ghr=r(_Re," (CamemBERT model)"),_Re.forEach(t),Ohr=i(le),e6=n(le,"LI",{});var uRe=s(e6);R2e=n(uRe,"STRONG",{});var tFt=s(R2e);Vhr=r(tFt,"ctrl"),tFt.forEach(t),Xhr=r(uRe," \u2014 "),fQ=n(uRe,"A",{href:!0});var aFt=s(fQ);zhr=r(aFt,"TFCTRLLMHeadModel"),aFt.forEach(t),Whr=r(uRe," (CTRL model)"),uRe.forEach(t),Qhr=i(le),o6=n(le,"LI",{});var bRe=s(o6);P2e=n(bRe,"STRONG",{});var nFt=s(P2e);Hhr=r(nFt,"distilbert"),nFt.forEach(t),Uhr=r(bRe," \u2014 "),mQ=n(bRe,"A",{href:!0});var sFt=s(mQ);Jhr=r(sFt,"TFDistilBertForMaskedLM"),sFt.forEach(t),Yhr=r(bRe," (DistilBERT model)"),bRe.forEach(t),Khr=i(le),r6=n(le,"LI",{});var vRe=s(r6);B2e=n(vRe,"STRONG",{});var lFt=s(B2e);Zhr=r(lFt,"electra"),lFt.forEach(t),epr=r(vRe," \u2014 "),gQ=n(vRe,"A",{href:!0});var iFt=s(gQ);opr=r(iFt,"TFElectraForPreTraining"),iFt.forEach(t),rpr=r(vRe," (ELECTRA model)"),vRe.forEach(t),tpr=i(le),t6=n(le,"LI",{});var FRe=s(t6);I2e=n(FRe,"STRONG",{});var dFt=s(I2e);apr=r(dFt,"flaubert"),dFt.forEach(t),npr=r(FRe," \u2014 "),hQ=n(FRe,"A",{href:!0});var cFt=s(hQ);spr=r(cFt,"TFFlaubertWithLMHeadModel"),cFt.forEach(t),lpr=r(FRe," (FlauBERT model)"),FRe.forEach(t),ipr=i(le),a6=n(le,"LI",{});var TRe=s(a6);N2e=n(TRe,"STRONG",{});var fFt=s(N2e);dpr=r(fFt,"funnel"),fFt.forEach(t),cpr=r(TRe," \u2014 "),pQ=n(TRe,"A",{href:!0});var mFt=s(pQ);fpr=r(mFt,"TFFunnelForPreTraining"),mFt.forEach(t),mpr=r(TRe," (Funnel Transformer model)"),TRe.forEach(t),gpr=i(le),n6=n(le,"LI",{});var MRe=s(n6);q2e=n(MRe,"STRONG",{});var gFt=s(q2e);hpr=r(gFt,"gpt2"),gFt.forEach(t),ppr=r(MRe," \u2014 "),_Q=n(MRe,"A",{href:!0});var hFt=s(_Q);_pr=r(hFt,"TFGPT2LMHeadModel"),hFt.forEach(t),upr=r(MRe," (OpenAI GPT-2 model)"),MRe.forEach(t),bpr=i(le),s6=n(le,"LI",{});var ERe=s(s6);j2e=n(ERe,"STRONG",{});var pFt=s(j2e);vpr=r(pFt,"layoutlm"),pFt.forEach(t),Fpr=r(ERe," \u2014 "),uQ=n(ERe,"A",{href:!0});var _Ft=s(uQ);Tpr=r(_Ft,"TFLayoutLMForMaskedLM"),_Ft.forEach(t),Mpr=r(ERe," (LayoutLM model)"),ERe.forEach(t),Epr=i(le),l6=n(le,"LI",{});var CRe=s(l6);D2e=n(CRe,"STRONG",{});var uFt=s(D2e);Cpr=r(uFt,"lxmert"),uFt.forEach(t),wpr=r(CRe," \u2014 "),bQ=n(CRe,"A",{href:!0});var bFt=s(bQ);Apr=r(bFt,"TFLxmertForPreTraining"),bFt.forEach(t),ypr=r(CRe," (LXMERT model)"),CRe.forEach(t),Lpr=i(le),i6=n(le,"LI",{});var wRe=s(i6);G2e=n(wRe,"STRONG",{});var vFt=s(G2e);xpr=r(vFt,"mobilebert"),vFt.forEach(t),$pr=r(wRe," \u2014 "),vQ=n(wRe,"A",{href:!0});var FFt=s(vQ);kpr=r(FFt,"TFMobileBertForPreTraining"),FFt.forEach(t),Spr=r(wRe," (MobileBERT model)"),wRe.forEach(t),Rpr=i(le),d6=n(le,"LI",{});var ARe=s(d6);O2e=n(ARe,"STRONG",{});var TFt=s(O2e);Ppr=r(TFt,"mpnet"),TFt.forEach(t),Bpr=r(ARe," \u2014 "),FQ=n(ARe,"A",{href:!0});var MFt=s(FQ);Ipr=r(MFt,"TFMPNetForMaskedLM"),MFt.forEach(t),Npr=r(ARe," (MPNet model)"),ARe.forEach(t),qpr=i(le),c6=n(le,"LI",{});var yRe=s(c6);V2e=n(yRe,"STRONG",{});var EFt=s(V2e);jpr=r(EFt,"openai-gpt"),EFt.forEach(t),Dpr=r(yRe," \u2014 "),TQ=n(yRe,"A",{href:!0});var CFt=s(TQ);Gpr=r(CFt,"TFOpenAIGPTLMHeadModel"),CFt.forEach(t),Opr=r(yRe," (OpenAI GPT model)"),yRe.forEach(t),Vpr=i(le),f6=n(le,"LI",{});var LRe=s(f6);X2e=n(LRe,"STRONG",{});var wFt=s(X2e);Xpr=r(wFt,"roberta"),wFt.forEach(t),zpr=r(LRe," \u2014 "),MQ=n(LRe,"A",{href:!0});var AFt=s(MQ);Wpr=r(AFt,"TFRobertaForMaskedLM"),AFt.forEach(t),Qpr=r(LRe," (RoBERTa model)"),LRe.forEach(t),Hpr=i(le),m6=n(le,"LI",{});var xRe=s(m6);z2e=n(xRe,"STRONG",{});var yFt=s(z2e);Upr=r(yFt,"t5"),yFt.forEach(t),Jpr=r(xRe," \u2014 "),EQ=n(xRe,"A",{href:!0});var LFt=s(EQ);Ypr=r(LFt,"TFT5ForConditionalGeneration"),LFt.forEach(t),Kpr=r(xRe," (T5 model)"),xRe.forEach(t),Zpr=i(le),g6=n(le,"LI",{});var $Re=s(g6);W2e=n($Re,"STRONG",{});var xFt=s(W2e);e_r=r(xFt,"tapas"),xFt.forEach(t),o_r=r($Re," \u2014 "),CQ=n($Re,"A",{href:!0});var $Ft=s(CQ);r_r=r($Ft,"TFTapasForMaskedLM"),$Ft.forEach(t),t_r=r($Re," (TAPAS model)"),$Re.forEach(t),a_r=i(le),h6=n(le,"LI",{});var kRe=s(h6);Q2e=n(kRe,"STRONG",{});var kFt=s(Q2e);n_r=r(kFt,"transfo-xl"),kFt.forEach(t),s_r=r(kRe," \u2014 "),wQ=n(kRe,"A",{href:!0});var SFt=s(wQ);l_r=r(SFt,"TFTransfoXLLMHeadModel"),SFt.forEach(t),i_r=r(kRe," (Transformer-XL model)"),kRe.forEach(t),d_r=i(le),p6=n(le,"LI",{});var SRe=s(p6);H2e=n(SRe,"STRONG",{});var RFt=s(H2e);c_r=r(RFt,"vit_mae"),RFt.forEach(t),f_r=r(SRe," \u2014 "),AQ=n(SRe,"A",{href:!0});var PFt=s(AQ);m_r=r(PFt,"TFViTMAEForPreTraining"),PFt.forEach(t),g_r=r(SRe," (ViTMAE model)"),SRe.forEach(t),h_r=i(le),_6=n(le,"LI",{});var RRe=s(_6);U2e=n(RRe,"STRONG",{});var BFt=s(U2e);p_r=r(BFt,"xlm"),BFt.forEach(t),__r=r(RRe," \u2014 "),yQ=n(RRe,"A",{href:!0});var IFt=s(yQ);u_r=r(IFt,"TFXLMWithLMHeadModel"),IFt.forEach(t),b_r=r(RRe," (XLM model)"),RRe.forEach(t),v_r=i(le),u6=n(le,"LI",{});var PRe=s(u6);J2e=n(PRe,"STRONG",{});var NFt=s(J2e);F_r=r(NFt,"xlm-roberta"),NFt.forEach(t),T_r=r(PRe," \u2014 "),LQ=n(PRe,"A",{href:!0});var qFt=s(LQ);M_r=r(qFt,"TFXLMRobertaForMaskedLM"),qFt.forEach(t),E_r=r(PRe," (XLM-RoBERTa model)"),PRe.forEach(t),C_r=i(le),b6=n(le,"LI",{});var BRe=s(b6);Y2e=n(BRe,"STRONG",{});var jFt=s(Y2e);w_r=r(jFt,"xlnet"),jFt.forEach(t),A_r=r(BRe," \u2014 "),xQ=n(BRe,"A",{href:!0});var DFt=s(xQ);y_r=r(DFt,"TFXLNetLMHeadModel"),DFt.forEach(t),L_r=r(BRe," (XLNet model)"),BRe.forEach(t),le.forEach(t),x_r=i(_l),T(v6.$$.fragment,_l),_l.forEach(t),pl.forEach(t),pje=i(f),Qd=n(f,"H2",{class:!0});var TGe=s(Qd);F6=n(TGe,"A",{id:!0,class:!0,href:!0});var GFt=s(F6);K2e=n(GFt,"SPAN",{});var OFt=s(K2e);T(F7.$$.fragment,OFt),OFt.forEach(t),GFt.forEach(t),$_r=i(TGe),Z2e=n(TGe,"SPAN",{});var VFt=s(Z2e);k_r=r(VFt,"TFAutoModelForCausalLM"),VFt.forEach(t),TGe.forEach(t),_je=i(f),Zo=n(f,"DIV",{class:!0});var ul=s(Zo);T(T7.$$.fragment,ul),S_r=i(ul),Hd=n(ul,"P",{});var _ee=s(Hd);R_r=r(_ee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),$Q=n(_ee,"A",{href:!0});var XFt=s($Q);P_r=r(XFt,"from_pretrained()"),XFt.forEach(t),B_r=r(_ee," class method or the "),kQ=n(_ee,"A",{href:!0});var zFt=s(kQ);I_r=r(zFt,"from_config()"),zFt.forEach(t),N_r=r(_ee,` class
method.`),_ee.forEach(t),q_r=i(ul),M7=n(ul,"P",{});var MGe=s(M7);j_r=r(MGe,"This class cannot be instantiated directly using "),e4e=n(MGe,"CODE",{});var WFt=s(e4e);D_r=r(WFt,"__init__()"),WFt.forEach(t),G_r=r(MGe," (throws an error)."),MGe.forEach(t),O_r=i(ul),xt=n(ul,"DIV",{class:!0});var $A=s(xt);T(E7.$$.fragment,$A),V_r=i($A),o4e=n($A,"P",{});var QFt=s(o4e);X_r=r(QFt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),QFt.forEach(t),z_r=i($A),Ud=n($A,"P",{});var uee=s(Ud);W_r=r(uee,`Note:
Loading a model from its configuration file does `),r4e=n(uee,"STRONG",{});var HFt=s(r4e);Q_r=r(HFt,"not"),HFt.forEach(t),H_r=r(uee,` load the model weights. It only affects the
model\u2019s configuration. Use `),SQ=n(uee,"A",{href:!0});var UFt=s(SQ);U_r=r(UFt,"from_pretrained()"),UFt.forEach(t),J_r=r(uee," to load the model weights."),uee.forEach(t),Y_r=i($A),T(T6.$$.fragment,$A),$A.forEach(t),K_r=i(ul),yr=n(ul,"DIV",{class:!0});var bl=s(yr);T(C7.$$.fragment,bl),Z_r=i(bl),t4e=n(bl,"P",{});var JFt=s(t4e);eur=r(JFt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),JFt.forEach(t),our=i(bl),en=n(bl,"P",{});var kA=s(en);rur=r(kA,"The model class to instantiate is selected based on the "),a4e=n(kA,"CODE",{});var YFt=s(a4e);tur=r(YFt,"model_type"),YFt.forEach(t),aur=r(kA,` property of the config object (either
passed as an argument or loaded from `),n4e=n(kA,"CODE",{});var KFt=s(n4e);nur=r(KFt,"pretrained_model_name_or_path"),KFt.forEach(t),sur=r(kA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s4e=n(kA,"CODE",{});var ZFt=s(s4e);lur=r(ZFt,"pretrained_model_name_or_path"),ZFt.forEach(t),iur=r(kA,":"),kA.forEach(t),dur=i(bl),Te=n(bl,"UL",{});var Ce=s(Te);M6=n(Ce,"LI",{});var IRe=s(M6);l4e=n(IRe,"STRONG",{});var e6t=s(l4e);cur=r(e6t,"bert"),e6t.forEach(t),fur=r(IRe," \u2014 "),RQ=n(IRe,"A",{href:!0});var o6t=s(RQ);mur=r(o6t,"TFBertLMHeadModel"),o6t.forEach(t),gur=r(IRe," (BERT model)"),IRe.forEach(t),hur=i(Ce),E6=n(Ce,"LI",{});var NRe=s(E6);i4e=n(NRe,"STRONG",{});var r6t=s(i4e);pur=r(r6t,"camembert"),r6t.forEach(t),_ur=r(NRe," \u2014 "),PQ=n(NRe,"A",{href:!0});var t6t=s(PQ);uur=r(t6t,"TFCamembertForCausalLM"),t6t.forEach(t),bur=r(NRe," (CamemBERT model)"),NRe.forEach(t),vur=i(Ce),C6=n(Ce,"LI",{});var qRe=s(C6);d4e=n(qRe,"STRONG",{});var a6t=s(d4e);Fur=r(a6t,"ctrl"),a6t.forEach(t),Tur=r(qRe," \u2014 "),BQ=n(qRe,"A",{href:!0});var n6t=s(BQ);Mur=r(n6t,"TFCTRLLMHeadModel"),n6t.forEach(t),Eur=r(qRe," (CTRL model)"),qRe.forEach(t),Cur=i(Ce),w6=n(Ce,"LI",{});var jRe=s(w6);c4e=n(jRe,"STRONG",{});var s6t=s(c4e);wur=r(s6t,"gpt2"),s6t.forEach(t),Aur=r(jRe," \u2014 "),IQ=n(jRe,"A",{href:!0});var l6t=s(IQ);yur=r(l6t,"TFGPT2LMHeadModel"),l6t.forEach(t),Lur=r(jRe," (OpenAI GPT-2 model)"),jRe.forEach(t),xur=i(Ce),A6=n(Ce,"LI",{});var DRe=s(A6);f4e=n(DRe,"STRONG",{});var i6t=s(f4e);$ur=r(i6t,"gptj"),i6t.forEach(t),kur=r(DRe," \u2014 "),NQ=n(DRe,"A",{href:!0});var d6t=s(NQ);Sur=r(d6t,"TFGPTJForCausalLM"),d6t.forEach(t),Rur=r(DRe," (GPT-J model)"),DRe.forEach(t),Pur=i(Ce),y6=n(Ce,"LI",{});var GRe=s(y6);m4e=n(GRe,"STRONG",{});var c6t=s(m4e);Bur=r(c6t,"openai-gpt"),c6t.forEach(t),Iur=r(GRe," \u2014 "),qQ=n(GRe,"A",{href:!0});var f6t=s(qQ);Nur=r(f6t,"TFOpenAIGPTLMHeadModel"),f6t.forEach(t),qur=r(GRe," (OpenAI GPT model)"),GRe.forEach(t),jur=i(Ce),L6=n(Ce,"LI",{});var ORe=s(L6);g4e=n(ORe,"STRONG",{});var m6t=s(g4e);Dur=r(m6t,"rembert"),m6t.forEach(t),Gur=r(ORe," \u2014 "),jQ=n(ORe,"A",{href:!0});var g6t=s(jQ);Our=r(g6t,"TFRemBertForCausalLM"),g6t.forEach(t),Vur=r(ORe," (RemBERT model)"),ORe.forEach(t),Xur=i(Ce),x6=n(Ce,"LI",{});var VRe=s(x6);h4e=n(VRe,"STRONG",{});var h6t=s(h4e);zur=r(h6t,"roberta"),h6t.forEach(t),Wur=r(VRe," \u2014 "),DQ=n(VRe,"A",{href:!0});var p6t=s(DQ);Qur=r(p6t,"TFRobertaForCausalLM"),p6t.forEach(t),Hur=r(VRe," (RoBERTa model)"),VRe.forEach(t),Uur=i(Ce),$6=n(Ce,"LI",{});var XRe=s($6);p4e=n(XRe,"STRONG",{});var _6t=s(p4e);Jur=r(_6t,"roformer"),_6t.forEach(t),Yur=r(XRe," \u2014 "),GQ=n(XRe,"A",{href:!0});var u6t=s(GQ);Kur=r(u6t,"TFRoFormerForCausalLM"),u6t.forEach(t),Zur=r(XRe," (RoFormer model)"),XRe.forEach(t),e1r=i(Ce),k6=n(Ce,"LI",{});var zRe=s(k6);_4e=n(zRe,"STRONG",{});var b6t=s(_4e);o1r=r(b6t,"transfo-xl"),b6t.forEach(t),r1r=r(zRe," \u2014 "),OQ=n(zRe,"A",{href:!0});var v6t=s(OQ);t1r=r(v6t,"TFTransfoXLLMHeadModel"),v6t.forEach(t),a1r=r(zRe," (Transformer-XL model)"),zRe.forEach(t),n1r=i(Ce),S6=n(Ce,"LI",{});var WRe=s(S6);u4e=n(WRe,"STRONG",{});var F6t=s(u4e);s1r=r(F6t,"xglm"),F6t.forEach(t),l1r=r(WRe," \u2014 "),VQ=n(WRe,"A",{href:!0});var T6t=s(VQ);i1r=r(T6t,"TFXGLMForCausalLM"),T6t.forEach(t),d1r=r(WRe," (XGLM model)"),WRe.forEach(t),c1r=i(Ce),R6=n(Ce,"LI",{});var QRe=s(R6);b4e=n(QRe,"STRONG",{});var M6t=s(b4e);f1r=r(M6t,"xlm"),M6t.forEach(t),m1r=r(QRe," \u2014 "),XQ=n(QRe,"A",{href:!0});var E6t=s(XQ);g1r=r(E6t,"TFXLMWithLMHeadModel"),E6t.forEach(t),h1r=r(QRe," (XLM model)"),QRe.forEach(t),p1r=i(Ce),P6=n(Ce,"LI",{});var HRe=s(P6);v4e=n(HRe,"STRONG",{});var C6t=s(v4e);_1r=r(C6t,"xlnet"),C6t.forEach(t),u1r=r(HRe," \u2014 "),zQ=n(HRe,"A",{href:!0});var w6t=s(zQ);b1r=r(w6t,"TFXLNetLMHeadModel"),w6t.forEach(t),v1r=r(HRe," (XLNet model)"),HRe.forEach(t),Ce.forEach(t),F1r=i(bl),T(B6.$$.fragment,bl),bl.forEach(t),ul.forEach(t),uje=i(f),Jd=n(f,"H2",{class:!0});var EGe=s(Jd);I6=n(EGe,"A",{id:!0,class:!0,href:!0});var A6t=s(I6);F4e=n(A6t,"SPAN",{});var y6t=s(F4e);T(w7.$$.fragment,y6t),y6t.forEach(t),A6t.forEach(t),T1r=i(EGe),T4e=n(EGe,"SPAN",{});var L6t=s(T4e);M1r=r(L6t,"TFAutoModelForImageClassification"),L6t.forEach(t),EGe.forEach(t),bje=i(f),er=n(f,"DIV",{class:!0});var vl=s(er);T(A7.$$.fragment,vl),E1r=i(vl),Yd=n(vl,"P",{});var bee=s(Yd);C1r=r(bee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),WQ=n(bee,"A",{href:!0});var x6t=s(WQ);w1r=r(x6t,"from_pretrained()"),x6t.forEach(t),A1r=r(bee," class method or the "),QQ=n(bee,"A",{href:!0});var $6t=s(QQ);y1r=r($6t,"from_config()"),$6t.forEach(t),L1r=r(bee,` class
method.`),bee.forEach(t),x1r=i(vl),y7=n(vl,"P",{});var CGe=s(y7);$1r=r(CGe,"This class cannot be instantiated directly using "),M4e=n(CGe,"CODE",{});var k6t=s(M4e);k1r=r(k6t,"__init__()"),k6t.forEach(t),S1r=r(CGe," (throws an error)."),CGe.forEach(t),R1r=i(vl),$t=n(vl,"DIV",{class:!0});var SA=s($t);T(L7.$$.fragment,SA),P1r=i(SA),E4e=n(SA,"P",{});var S6t=s(E4e);B1r=r(S6t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),S6t.forEach(t),I1r=i(SA),Kd=n(SA,"P",{});var vee=s(Kd);N1r=r(vee,`Note:
Loading a model from its configuration file does `),C4e=n(vee,"STRONG",{});var R6t=s(C4e);q1r=r(R6t,"not"),R6t.forEach(t),j1r=r(vee,` load the model weights. It only affects the
model\u2019s configuration. Use `),HQ=n(vee,"A",{href:!0});var P6t=s(HQ);D1r=r(P6t,"from_pretrained()"),P6t.forEach(t),G1r=r(vee," to load the model weights."),vee.forEach(t),O1r=i(SA),T(N6.$$.fragment,SA),SA.forEach(t),V1r=i(vl),Lr=n(vl,"DIV",{class:!0});var Fl=s(Lr);T(x7.$$.fragment,Fl),X1r=i(Fl),w4e=n(Fl,"P",{});var B6t=s(w4e);z1r=r(B6t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),B6t.forEach(t),W1r=i(Fl),on=n(Fl,"P",{});var RA=s(on);Q1r=r(RA,"The model class to instantiate is selected based on the "),A4e=n(RA,"CODE",{});var I6t=s(A4e);H1r=r(I6t,"model_type"),I6t.forEach(t),U1r=r(RA,` property of the config object (either
passed as an argument or loaded from `),y4e=n(RA,"CODE",{});var N6t=s(y4e);J1r=r(N6t,"pretrained_model_name_or_path"),N6t.forEach(t),Y1r=r(RA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L4e=n(RA,"CODE",{});var q6t=s(L4e);K1r=r(q6t,"pretrained_model_name_or_path"),q6t.forEach(t),Z1r=r(RA,":"),RA.forEach(t),ebr=i(Fl),rn=n(Fl,"UL",{});var PA=s(rn);q6=n(PA,"LI",{});var URe=s(q6);x4e=n(URe,"STRONG",{});var j6t=s(x4e);obr=r(j6t,"convnext"),j6t.forEach(t),rbr=r(URe," \u2014 "),UQ=n(URe,"A",{href:!0});var D6t=s(UQ);tbr=r(D6t,"TFConvNextForImageClassification"),D6t.forEach(t),abr=r(URe," (ConvNext model)"),URe.forEach(t),nbr=i(PA),j6=n(PA,"LI",{});var JRe=s(j6);$4e=n(JRe,"STRONG",{});var G6t=s($4e);sbr=r(G6t,"data2vec-vision"),G6t.forEach(t),lbr=r(JRe," \u2014 "),JQ=n(JRe,"A",{href:!0});var O6t=s(JQ);ibr=r(O6t,"TFData2VecVisionForImageClassification"),O6t.forEach(t),dbr=r(JRe," (Data2VecVision model)"),JRe.forEach(t),cbr=i(PA),D6=n(PA,"LI",{});var YRe=s(D6);k4e=n(YRe,"STRONG",{});var V6t=s(k4e);fbr=r(V6t,"swin"),V6t.forEach(t),mbr=r(YRe," \u2014 "),YQ=n(YRe,"A",{href:!0});var X6t=s(YQ);gbr=r(X6t,"TFSwinForImageClassification"),X6t.forEach(t),hbr=r(YRe," (Swin model)"),YRe.forEach(t),pbr=i(PA),G6=n(PA,"LI",{});var KRe=s(G6);S4e=n(KRe,"STRONG",{});var z6t=s(S4e);_br=r(z6t,"vit"),z6t.forEach(t),ubr=r(KRe," \u2014 "),KQ=n(KRe,"A",{href:!0});var W6t=s(KQ);bbr=r(W6t,"TFViTForImageClassification"),W6t.forEach(t),vbr=r(KRe," (ViT model)"),KRe.forEach(t),PA.forEach(t),Fbr=i(Fl),T(O6.$$.fragment,Fl),Fl.forEach(t),vl.forEach(t),vje=i(f),Zd=n(f,"H2",{class:!0});var wGe=s(Zd);V6=n(wGe,"A",{id:!0,class:!0,href:!0});var Q6t=s(V6);R4e=n(Q6t,"SPAN",{});var H6t=s(R4e);T($7.$$.fragment,H6t),H6t.forEach(t),Q6t.forEach(t),Tbr=i(wGe),P4e=n(wGe,"SPAN",{});var U6t=s(P4e);Mbr=r(U6t,"TFAutoModelForMaskedLM"),U6t.forEach(t),wGe.forEach(t),Fje=i(f),or=n(f,"DIV",{class:!0});var Tl=s(or);T(k7.$$.fragment,Tl),Ebr=i(Tl),ec=n(Tl,"P",{});var Fee=s(ec);Cbr=r(Fee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),ZQ=n(Fee,"A",{href:!0});var J6t=s(ZQ);wbr=r(J6t,"from_pretrained()"),J6t.forEach(t),Abr=r(Fee," class method or the "),eH=n(Fee,"A",{href:!0});var Y6t=s(eH);ybr=r(Y6t,"from_config()"),Y6t.forEach(t),Lbr=r(Fee,` class
method.`),Fee.forEach(t),xbr=i(Tl),S7=n(Tl,"P",{});var AGe=s(S7);$br=r(AGe,"This class cannot be instantiated directly using "),B4e=n(AGe,"CODE",{});var K6t=s(B4e);kbr=r(K6t,"__init__()"),K6t.forEach(t),Sbr=r(AGe," (throws an error)."),AGe.forEach(t),Rbr=i(Tl),kt=n(Tl,"DIV",{class:!0});var BA=s(kt);T(R7.$$.fragment,BA),Pbr=i(BA),I4e=n(BA,"P",{});var Z6t=s(I4e);Bbr=r(Z6t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Z6t.forEach(t),Ibr=i(BA),oc=n(BA,"P",{});var Tee=s(oc);Nbr=r(Tee,`Note:
Loading a model from its configuration file does `),N4e=n(Tee,"STRONG",{});var eTt=s(N4e);qbr=r(eTt,"not"),eTt.forEach(t),jbr=r(Tee,` load the model weights. It only affects the
model\u2019s configuration. Use `),oH=n(Tee,"A",{href:!0});var oTt=s(oH);Dbr=r(oTt,"from_pretrained()"),oTt.forEach(t),Gbr=r(Tee," to load the model weights."),Tee.forEach(t),Obr=i(BA),T(X6.$$.fragment,BA),BA.forEach(t),Vbr=i(Tl),xr=n(Tl,"DIV",{class:!0});var Ml=s(xr);T(P7.$$.fragment,Ml),Xbr=i(Ml),q4e=n(Ml,"P",{});var rTt=s(q4e);zbr=r(rTt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),rTt.forEach(t),Wbr=i(Ml),tn=n(Ml,"P",{});var IA=s(tn);Qbr=r(IA,"The model class to instantiate is selected based on the "),j4e=n(IA,"CODE",{});var tTt=s(j4e);Hbr=r(tTt,"model_type"),tTt.forEach(t),Ubr=r(IA,` property of the config object (either
passed as an argument or loaded from `),D4e=n(IA,"CODE",{});var aTt=s(D4e);Jbr=r(aTt,"pretrained_model_name_or_path"),aTt.forEach(t),Ybr=r(IA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G4e=n(IA,"CODE",{});var nTt=s(G4e);Kbr=r(nTt,"pretrained_model_name_or_path"),nTt.forEach(t),Zbr=r(IA,":"),IA.forEach(t),e2r=i(Ml),ie=n(Ml,"UL",{});var fe=s(ie);z6=n(fe,"LI",{});var ZRe=s(z6);O4e=n(ZRe,"STRONG",{});var sTt=s(O4e);o2r=r(sTt,"albert"),sTt.forEach(t),r2r=r(ZRe," \u2014 "),rH=n(ZRe,"A",{href:!0});var lTt=s(rH);t2r=r(lTt,"TFAlbertForMaskedLM"),lTt.forEach(t),a2r=r(ZRe," (ALBERT model)"),ZRe.forEach(t),n2r=i(fe),W6=n(fe,"LI",{});var ePe=s(W6);V4e=n(ePe,"STRONG",{});var iTt=s(V4e);s2r=r(iTt,"bert"),iTt.forEach(t),l2r=r(ePe," \u2014 "),tH=n(ePe,"A",{href:!0});var dTt=s(tH);i2r=r(dTt,"TFBertForMaskedLM"),dTt.forEach(t),d2r=r(ePe," (BERT model)"),ePe.forEach(t),c2r=i(fe),Q6=n(fe,"LI",{});var oPe=s(Q6);X4e=n(oPe,"STRONG",{});var cTt=s(X4e);f2r=r(cTt,"camembert"),cTt.forEach(t),m2r=r(oPe," \u2014 "),aH=n(oPe,"A",{href:!0});var fTt=s(aH);g2r=r(fTt,"TFCamembertForMaskedLM"),fTt.forEach(t),h2r=r(oPe," (CamemBERT model)"),oPe.forEach(t),p2r=i(fe),H6=n(fe,"LI",{});var rPe=s(H6);z4e=n(rPe,"STRONG",{});var mTt=s(z4e);_2r=r(mTt,"convbert"),mTt.forEach(t),u2r=r(rPe," \u2014 "),nH=n(rPe,"A",{href:!0});var gTt=s(nH);b2r=r(gTt,"TFConvBertForMaskedLM"),gTt.forEach(t),v2r=r(rPe," (ConvBERT model)"),rPe.forEach(t),F2r=i(fe),U6=n(fe,"LI",{});var tPe=s(U6);W4e=n(tPe,"STRONG",{});var hTt=s(W4e);T2r=r(hTt,"deberta"),hTt.forEach(t),M2r=r(tPe," \u2014 "),sH=n(tPe,"A",{href:!0});var pTt=s(sH);E2r=r(pTt,"TFDebertaForMaskedLM"),pTt.forEach(t),C2r=r(tPe," (DeBERTa model)"),tPe.forEach(t),w2r=i(fe),J6=n(fe,"LI",{});var aPe=s(J6);Q4e=n(aPe,"STRONG",{});var _Tt=s(Q4e);A2r=r(_Tt,"deberta-v2"),_Tt.forEach(t),y2r=r(aPe," \u2014 "),lH=n(aPe,"A",{href:!0});var uTt=s(lH);L2r=r(uTt,"TFDebertaV2ForMaskedLM"),uTt.forEach(t),x2r=r(aPe," (DeBERTa-v2 model)"),aPe.forEach(t),$2r=i(fe),Y6=n(fe,"LI",{});var nPe=s(Y6);H4e=n(nPe,"STRONG",{});var bTt=s(H4e);k2r=r(bTt,"distilbert"),bTt.forEach(t),S2r=r(nPe," \u2014 "),iH=n(nPe,"A",{href:!0});var vTt=s(iH);R2r=r(vTt,"TFDistilBertForMaskedLM"),vTt.forEach(t),P2r=r(nPe," (DistilBERT model)"),nPe.forEach(t),B2r=i(fe),K6=n(fe,"LI",{});var sPe=s(K6);U4e=n(sPe,"STRONG",{});var FTt=s(U4e);I2r=r(FTt,"electra"),FTt.forEach(t),N2r=r(sPe," \u2014 "),dH=n(sPe,"A",{href:!0});var TTt=s(dH);q2r=r(TTt,"TFElectraForMaskedLM"),TTt.forEach(t),j2r=r(sPe," (ELECTRA model)"),sPe.forEach(t),D2r=i(fe),Z6=n(fe,"LI",{});var lPe=s(Z6);J4e=n(lPe,"STRONG",{});var MTt=s(J4e);G2r=r(MTt,"flaubert"),MTt.forEach(t),O2r=r(lPe," \u2014 "),cH=n(lPe,"A",{href:!0});var ETt=s(cH);V2r=r(ETt,"TFFlaubertWithLMHeadModel"),ETt.forEach(t),X2r=r(lPe," (FlauBERT model)"),lPe.forEach(t),z2r=i(fe),eT=n(fe,"LI",{});var iPe=s(eT);Y4e=n(iPe,"STRONG",{});var CTt=s(Y4e);W2r=r(CTt,"funnel"),CTt.forEach(t),Q2r=r(iPe," \u2014 "),fH=n(iPe,"A",{href:!0});var wTt=s(fH);H2r=r(wTt,"TFFunnelForMaskedLM"),wTt.forEach(t),U2r=r(iPe," (Funnel Transformer model)"),iPe.forEach(t),J2r=i(fe),oT=n(fe,"LI",{});var dPe=s(oT);K4e=n(dPe,"STRONG",{});var ATt=s(K4e);Y2r=r(ATt,"layoutlm"),ATt.forEach(t),K2r=r(dPe," \u2014 "),mH=n(dPe,"A",{href:!0});var yTt=s(mH);Z2r=r(yTt,"TFLayoutLMForMaskedLM"),yTt.forEach(t),e4r=r(dPe," (LayoutLM model)"),dPe.forEach(t),o4r=i(fe),rT=n(fe,"LI",{});var cPe=s(rT);Z4e=n(cPe,"STRONG",{});var LTt=s(Z4e);r4r=r(LTt,"longformer"),LTt.forEach(t),t4r=r(cPe," \u2014 "),gH=n(cPe,"A",{href:!0});var xTt=s(gH);a4r=r(xTt,"TFLongformerForMaskedLM"),xTt.forEach(t),n4r=r(cPe," (Longformer model)"),cPe.forEach(t),s4r=i(fe),tT=n(fe,"LI",{});var fPe=s(tT);e5e=n(fPe,"STRONG",{});var $Tt=s(e5e);l4r=r($Tt,"mobilebert"),$Tt.forEach(t),i4r=r(fPe," \u2014 "),hH=n(fPe,"A",{href:!0});var kTt=s(hH);d4r=r(kTt,"TFMobileBertForMaskedLM"),kTt.forEach(t),c4r=r(fPe," (MobileBERT model)"),fPe.forEach(t),f4r=i(fe),aT=n(fe,"LI",{});var mPe=s(aT);o5e=n(mPe,"STRONG",{});var STt=s(o5e);m4r=r(STt,"mpnet"),STt.forEach(t),g4r=r(mPe," \u2014 "),pH=n(mPe,"A",{href:!0});var RTt=s(pH);h4r=r(RTt,"TFMPNetForMaskedLM"),RTt.forEach(t),p4r=r(mPe," (MPNet model)"),mPe.forEach(t),_4r=i(fe),nT=n(fe,"LI",{});var gPe=s(nT);r5e=n(gPe,"STRONG",{});var PTt=s(r5e);u4r=r(PTt,"rembert"),PTt.forEach(t),b4r=r(gPe," \u2014 "),_H=n(gPe,"A",{href:!0});var BTt=s(_H);v4r=r(BTt,"TFRemBertForMaskedLM"),BTt.forEach(t),F4r=r(gPe," (RemBERT model)"),gPe.forEach(t),T4r=i(fe),sT=n(fe,"LI",{});var hPe=s(sT);t5e=n(hPe,"STRONG",{});var ITt=s(t5e);M4r=r(ITt,"roberta"),ITt.forEach(t),E4r=r(hPe," \u2014 "),uH=n(hPe,"A",{href:!0});var NTt=s(uH);C4r=r(NTt,"TFRobertaForMaskedLM"),NTt.forEach(t),w4r=r(hPe," (RoBERTa model)"),hPe.forEach(t),A4r=i(fe),lT=n(fe,"LI",{});var pPe=s(lT);a5e=n(pPe,"STRONG",{});var qTt=s(a5e);y4r=r(qTt,"roformer"),qTt.forEach(t),L4r=r(pPe," \u2014 "),bH=n(pPe,"A",{href:!0});var jTt=s(bH);x4r=r(jTt,"TFRoFormerForMaskedLM"),jTt.forEach(t),$4r=r(pPe," (RoFormer model)"),pPe.forEach(t),k4r=i(fe),iT=n(fe,"LI",{});var _Pe=s(iT);n5e=n(_Pe,"STRONG",{});var DTt=s(n5e);S4r=r(DTt,"tapas"),DTt.forEach(t),R4r=r(_Pe," \u2014 "),vH=n(_Pe,"A",{href:!0});var GTt=s(vH);P4r=r(GTt,"TFTapasForMaskedLM"),GTt.forEach(t),B4r=r(_Pe," (TAPAS model)"),_Pe.forEach(t),I4r=i(fe),dT=n(fe,"LI",{});var uPe=s(dT);s5e=n(uPe,"STRONG",{});var OTt=s(s5e);N4r=r(OTt,"xlm"),OTt.forEach(t),q4r=r(uPe," \u2014 "),FH=n(uPe,"A",{href:!0});var VTt=s(FH);j4r=r(VTt,"TFXLMWithLMHeadModel"),VTt.forEach(t),D4r=r(uPe," (XLM model)"),uPe.forEach(t),G4r=i(fe),cT=n(fe,"LI",{});var bPe=s(cT);l5e=n(bPe,"STRONG",{});var XTt=s(l5e);O4r=r(XTt,"xlm-roberta"),XTt.forEach(t),V4r=r(bPe," \u2014 "),TH=n(bPe,"A",{href:!0});var zTt=s(TH);X4r=r(zTt,"TFXLMRobertaForMaskedLM"),zTt.forEach(t),z4r=r(bPe," (XLM-RoBERTa model)"),bPe.forEach(t),fe.forEach(t),W4r=i(Ml),T(fT.$$.fragment,Ml),Ml.forEach(t),Tl.forEach(t),Tje=i(f),rc=n(f,"H2",{class:!0});var yGe=s(rc);mT=n(yGe,"A",{id:!0,class:!0,href:!0});var WTt=s(mT);i5e=n(WTt,"SPAN",{});var QTt=s(i5e);T(B7.$$.fragment,QTt),QTt.forEach(t),WTt.forEach(t),Q4r=i(yGe),d5e=n(yGe,"SPAN",{});var HTt=s(d5e);H4r=r(HTt,"TFAutoModelForSeq2SeqLM"),HTt.forEach(t),yGe.forEach(t),Mje=i(f),rr=n(f,"DIV",{class:!0});var El=s(rr);T(I7.$$.fragment,El),U4r=i(El),tc=n(El,"P",{});var Mee=s(tc);J4r=r(Mee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),MH=n(Mee,"A",{href:!0});var UTt=s(MH);Y4r=r(UTt,"from_pretrained()"),UTt.forEach(t),K4r=r(Mee," class method or the "),EH=n(Mee,"A",{href:!0});var JTt=s(EH);Z4r=r(JTt,"from_config()"),JTt.forEach(t),e5r=r(Mee,` class
method.`),Mee.forEach(t),o5r=i(El),N7=n(El,"P",{});var LGe=s(N7);r5r=r(LGe,"This class cannot be instantiated directly using "),c5e=n(LGe,"CODE",{});var YTt=s(c5e);t5r=r(YTt,"__init__()"),YTt.forEach(t),a5r=r(LGe," (throws an error)."),LGe.forEach(t),n5r=i(El),St=n(El,"DIV",{class:!0});var NA=s(St);T(q7.$$.fragment,NA),s5r=i(NA),f5e=n(NA,"P",{});var KTt=s(f5e);l5r=r(KTt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),KTt.forEach(t),i5r=i(NA),ac=n(NA,"P",{});var Eee=s(ac);d5r=r(Eee,`Note:
Loading a model from its configuration file does `),m5e=n(Eee,"STRONG",{});var ZTt=s(m5e);c5r=r(ZTt,"not"),ZTt.forEach(t),f5r=r(Eee,` load the model weights. It only affects the
model\u2019s configuration. Use `),CH=n(Eee,"A",{href:!0});var eMt=s(CH);m5r=r(eMt,"from_pretrained()"),eMt.forEach(t),g5r=r(Eee," to load the model weights."),Eee.forEach(t),h5r=i(NA),T(gT.$$.fragment,NA),NA.forEach(t),p5r=i(El),$r=n(El,"DIV",{class:!0});var Cl=s($r);T(j7.$$.fragment,Cl),_5r=i(Cl),g5e=n(Cl,"P",{});var oMt=s(g5e);u5r=r(oMt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),oMt.forEach(t),b5r=i(Cl),an=n(Cl,"P",{});var qA=s(an);v5r=r(qA,"The model class to instantiate is selected based on the "),h5e=n(qA,"CODE",{});var rMt=s(h5e);F5r=r(rMt,"model_type"),rMt.forEach(t),T5r=r(qA,` property of the config object (either
passed as an argument or loaded from `),p5e=n(qA,"CODE",{});var tMt=s(p5e);M5r=r(tMt,"pretrained_model_name_or_path"),tMt.forEach(t),E5r=r(qA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_5e=n(qA,"CODE",{});var aMt=s(_5e);C5r=r(aMt,"pretrained_model_name_or_path"),aMt.forEach(t),w5r=r(qA,":"),qA.forEach(t),A5r=i(Cl),ye=n(Cl,"UL",{});var Be=s(ye);hT=n(Be,"LI",{});var vPe=s(hT);u5e=n(vPe,"STRONG",{});var nMt=s(u5e);y5r=r(nMt,"bart"),nMt.forEach(t),L5r=r(vPe," \u2014 "),wH=n(vPe,"A",{href:!0});var sMt=s(wH);x5r=r(sMt,"TFBartForConditionalGeneration"),sMt.forEach(t),$5r=r(vPe," (BART model)"),vPe.forEach(t),k5r=i(Be),pT=n(Be,"LI",{});var FPe=s(pT);b5e=n(FPe,"STRONG",{});var lMt=s(b5e);S5r=r(lMt,"blenderbot"),lMt.forEach(t),R5r=r(FPe," \u2014 "),AH=n(FPe,"A",{href:!0});var iMt=s(AH);P5r=r(iMt,"TFBlenderbotForConditionalGeneration"),iMt.forEach(t),B5r=r(FPe," (Blenderbot model)"),FPe.forEach(t),I5r=i(Be),_T=n(Be,"LI",{});var TPe=s(_T);v5e=n(TPe,"STRONG",{});var dMt=s(v5e);N5r=r(dMt,"blenderbot-small"),dMt.forEach(t),q5r=r(TPe," \u2014 "),yH=n(TPe,"A",{href:!0});var cMt=s(yH);j5r=r(cMt,"TFBlenderbotSmallForConditionalGeneration"),cMt.forEach(t),D5r=r(TPe," (BlenderbotSmall model)"),TPe.forEach(t),G5r=i(Be),uT=n(Be,"LI",{});var MPe=s(uT);F5e=n(MPe,"STRONG",{});var fMt=s(F5e);O5r=r(fMt,"encoder-decoder"),fMt.forEach(t),V5r=r(MPe," \u2014 "),LH=n(MPe,"A",{href:!0});var mMt=s(LH);X5r=r(mMt,"TFEncoderDecoderModel"),mMt.forEach(t),z5r=r(MPe," (Encoder decoder model)"),MPe.forEach(t),W5r=i(Be),bT=n(Be,"LI",{});var EPe=s(bT);T5e=n(EPe,"STRONG",{});var gMt=s(T5e);Q5r=r(gMt,"led"),gMt.forEach(t),H5r=r(EPe," \u2014 "),xH=n(EPe,"A",{href:!0});var hMt=s(xH);U5r=r(hMt,"TFLEDForConditionalGeneration"),hMt.forEach(t),J5r=r(EPe," (LED model)"),EPe.forEach(t),Y5r=i(Be),vT=n(Be,"LI",{});var CPe=s(vT);M5e=n(CPe,"STRONG",{});var pMt=s(M5e);K5r=r(pMt,"marian"),pMt.forEach(t),Z5r=r(CPe," \u2014 "),$H=n(CPe,"A",{href:!0});var _Mt=s($H);evr=r(_Mt,"TFMarianMTModel"),_Mt.forEach(t),ovr=r(CPe," (Marian model)"),CPe.forEach(t),rvr=i(Be),FT=n(Be,"LI",{});var wPe=s(FT);E5e=n(wPe,"STRONG",{});var uMt=s(E5e);tvr=r(uMt,"mbart"),uMt.forEach(t),avr=r(wPe," \u2014 "),kH=n(wPe,"A",{href:!0});var bMt=s(kH);nvr=r(bMt,"TFMBartForConditionalGeneration"),bMt.forEach(t),svr=r(wPe," (mBART model)"),wPe.forEach(t),lvr=i(Be),TT=n(Be,"LI",{});var APe=s(TT);C5e=n(APe,"STRONG",{});var vMt=s(C5e);ivr=r(vMt,"mt5"),vMt.forEach(t),dvr=r(APe," \u2014 "),SH=n(APe,"A",{href:!0});var FMt=s(SH);cvr=r(FMt,"TFMT5ForConditionalGeneration"),FMt.forEach(t),fvr=r(APe," (mT5 model)"),APe.forEach(t),mvr=i(Be),MT=n(Be,"LI",{});var yPe=s(MT);w5e=n(yPe,"STRONG",{});var TMt=s(w5e);gvr=r(TMt,"pegasus"),TMt.forEach(t),hvr=r(yPe," \u2014 "),RH=n(yPe,"A",{href:!0});var MMt=s(RH);pvr=r(MMt,"TFPegasusForConditionalGeneration"),MMt.forEach(t),_vr=r(yPe," (Pegasus model)"),yPe.forEach(t),uvr=i(Be),ET=n(Be,"LI",{});var LPe=s(ET);A5e=n(LPe,"STRONG",{});var EMt=s(A5e);bvr=r(EMt,"t5"),EMt.forEach(t),vvr=r(LPe," \u2014 "),PH=n(LPe,"A",{href:!0});var CMt=s(PH);Fvr=r(CMt,"TFT5ForConditionalGeneration"),CMt.forEach(t),Tvr=r(LPe," (T5 model)"),LPe.forEach(t),Be.forEach(t),Mvr=i(Cl),T(CT.$$.fragment,Cl),Cl.forEach(t),El.forEach(t),Eje=i(f),nc=n(f,"H2",{class:!0});var xGe=s(nc);wT=n(xGe,"A",{id:!0,class:!0,href:!0});var wMt=s(wT);y5e=n(wMt,"SPAN",{});var AMt=s(y5e);T(D7.$$.fragment,AMt),AMt.forEach(t),wMt.forEach(t),Evr=i(xGe),L5e=n(xGe,"SPAN",{});var yMt=s(L5e);Cvr=r(yMt,"TFAutoModelForSequenceClassification"),yMt.forEach(t),xGe.forEach(t),Cje=i(f),tr=n(f,"DIV",{class:!0});var wl=s(tr);T(G7.$$.fragment,wl),wvr=i(wl),sc=n(wl,"P",{});var Cee=s(sc);Avr=r(Cee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),BH=n(Cee,"A",{href:!0});var LMt=s(BH);yvr=r(LMt,"from_pretrained()"),LMt.forEach(t),Lvr=r(Cee," class method or the "),IH=n(Cee,"A",{href:!0});var xMt=s(IH);xvr=r(xMt,"from_config()"),xMt.forEach(t),$vr=r(Cee,` class
method.`),Cee.forEach(t),kvr=i(wl),O7=n(wl,"P",{});var $Ge=s(O7);Svr=r($Ge,"This class cannot be instantiated directly using "),x5e=n($Ge,"CODE",{});var $Mt=s(x5e);Rvr=r($Mt,"__init__()"),$Mt.forEach(t),Pvr=r($Ge," (throws an error)."),$Ge.forEach(t),Bvr=i(wl),Rt=n(wl,"DIV",{class:!0});var jA=s(Rt);T(V7.$$.fragment,jA),Ivr=i(jA),$5e=n(jA,"P",{});var kMt=s($5e);Nvr=r(kMt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),kMt.forEach(t),qvr=i(jA),lc=n(jA,"P",{});var wee=s(lc);jvr=r(wee,`Note:
Loading a model from its configuration file does `),k5e=n(wee,"STRONG",{});var SMt=s(k5e);Dvr=r(SMt,"not"),SMt.forEach(t),Gvr=r(wee,` load the model weights. It only affects the
model\u2019s configuration. Use `),NH=n(wee,"A",{href:!0});var RMt=s(NH);Ovr=r(RMt,"from_pretrained()"),RMt.forEach(t),Vvr=r(wee," to load the model weights."),wee.forEach(t),Xvr=i(jA),T(AT.$$.fragment,jA),jA.forEach(t),zvr=i(wl),kr=n(wl,"DIV",{class:!0});var Al=s(kr);T(X7.$$.fragment,Al),Wvr=i(Al),S5e=n(Al,"P",{});var PMt=s(S5e);Qvr=r(PMt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),PMt.forEach(t),Hvr=i(Al),nn=n(Al,"P",{});var DA=s(nn);Uvr=r(DA,"The model class to instantiate is selected based on the "),R5e=n(DA,"CODE",{});var BMt=s(R5e);Jvr=r(BMt,"model_type"),BMt.forEach(t),Yvr=r(DA,` property of the config object (either
passed as an argument or loaded from `),P5e=n(DA,"CODE",{});var IMt=s(P5e);Kvr=r(IMt,"pretrained_model_name_or_path"),IMt.forEach(t),Zvr=r(DA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B5e=n(DA,"CODE",{});var NMt=s(B5e);e3r=r(NMt,"pretrained_model_name_or_path"),NMt.forEach(t),o3r=r(DA,":"),DA.forEach(t),r3r=i(Al),oe=n(Al,"UL",{});var ae=s(oe);yT=n(ae,"LI",{});var xPe=s(yT);I5e=n(xPe,"STRONG",{});var qMt=s(I5e);t3r=r(qMt,"albert"),qMt.forEach(t),a3r=r(xPe," \u2014 "),qH=n(xPe,"A",{href:!0});var jMt=s(qH);n3r=r(jMt,"TFAlbertForSequenceClassification"),jMt.forEach(t),s3r=r(xPe," (ALBERT model)"),xPe.forEach(t),l3r=i(ae),LT=n(ae,"LI",{});var $Pe=s(LT);N5e=n($Pe,"STRONG",{});var DMt=s(N5e);i3r=r(DMt,"bert"),DMt.forEach(t),d3r=r($Pe," \u2014 "),jH=n($Pe,"A",{href:!0});var GMt=s(jH);c3r=r(GMt,"TFBertForSequenceClassification"),GMt.forEach(t),f3r=r($Pe," (BERT model)"),$Pe.forEach(t),m3r=i(ae),xT=n(ae,"LI",{});var kPe=s(xT);q5e=n(kPe,"STRONG",{});var OMt=s(q5e);g3r=r(OMt,"camembert"),OMt.forEach(t),h3r=r(kPe," \u2014 "),DH=n(kPe,"A",{href:!0});var VMt=s(DH);p3r=r(VMt,"TFCamembertForSequenceClassification"),VMt.forEach(t),_3r=r(kPe," (CamemBERT model)"),kPe.forEach(t),u3r=i(ae),$T=n(ae,"LI",{});var SPe=s($T);j5e=n(SPe,"STRONG",{});var XMt=s(j5e);b3r=r(XMt,"convbert"),XMt.forEach(t),v3r=r(SPe," \u2014 "),GH=n(SPe,"A",{href:!0});var zMt=s(GH);F3r=r(zMt,"TFConvBertForSequenceClassification"),zMt.forEach(t),T3r=r(SPe," (ConvBERT model)"),SPe.forEach(t),M3r=i(ae),kT=n(ae,"LI",{});var RPe=s(kT);D5e=n(RPe,"STRONG",{});var WMt=s(D5e);E3r=r(WMt,"ctrl"),WMt.forEach(t),C3r=r(RPe," \u2014 "),OH=n(RPe,"A",{href:!0});var QMt=s(OH);w3r=r(QMt,"TFCTRLForSequenceClassification"),QMt.forEach(t),A3r=r(RPe," (CTRL model)"),RPe.forEach(t),y3r=i(ae),ST=n(ae,"LI",{});var PPe=s(ST);G5e=n(PPe,"STRONG",{});var HMt=s(G5e);L3r=r(HMt,"deberta"),HMt.forEach(t),x3r=r(PPe," \u2014 "),VH=n(PPe,"A",{href:!0});var UMt=s(VH);$3r=r(UMt,"TFDebertaForSequenceClassification"),UMt.forEach(t),k3r=r(PPe," (DeBERTa model)"),PPe.forEach(t),S3r=i(ae),RT=n(ae,"LI",{});var BPe=s(RT);O5e=n(BPe,"STRONG",{});var JMt=s(O5e);R3r=r(JMt,"deberta-v2"),JMt.forEach(t),P3r=r(BPe," \u2014 "),XH=n(BPe,"A",{href:!0});var YMt=s(XH);B3r=r(YMt,"TFDebertaV2ForSequenceClassification"),YMt.forEach(t),I3r=r(BPe," (DeBERTa-v2 model)"),BPe.forEach(t),N3r=i(ae),PT=n(ae,"LI",{});var IPe=s(PT);V5e=n(IPe,"STRONG",{});var KMt=s(V5e);q3r=r(KMt,"distilbert"),KMt.forEach(t),j3r=r(IPe," \u2014 "),zH=n(IPe,"A",{href:!0});var ZMt=s(zH);D3r=r(ZMt,"TFDistilBertForSequenceClassification"),ZMt.forEach(t),G3r=r(IPe," (DistilBERT model)"),IPe.forEach(t),O3r=i(ae),BT=n(ae,"LI",{});var NPe=s(BT);X5e=n(NPe,"STRONG",{});var eEt=s(X5e);V3r=r(eEt,"electra"),eEt.forEach(t),X3r=r(NPe," \u2014 "),WH=n(NPe,"A",{href:!0});var oEt=s(WH);z3r=r(oEt,"TFElectraForSequenceClassification"),oEt.forEach(t),W3r=r(NPe," (ELECTRA model)"),NPe.forEach(t),Q3r=i(ae),IT=n(ae,"LI",{});var qPe=s(IT);z5e=n(qPe,"STRONG",{});var rEt=s(z5e);H3r=r(rEt,"flaubert"),rEt.forEach(t),U3r=r(qPe," \u2014 "),QH=n(qPe,"A",{href:!0});var tEt=s(QH);J3r=r(tEt,"TFFlaubertForSequenceClassification"),tEt.forEach(t),Y3r=r(qPe," (FlauBERT model)"),qPe.forEach(t),K3r=i(ae),NT=n(ae,"LI",{});var jPe=s(NT);W5e=n(jPe,"STRONG",{});var aEt=s(W5e);Z3r=r(aEt,"funnel"),aEt.forEach(t),eFr=r(jPe," \u2014 "),HH=n(jPe,"A",{href:!0});var nEt=s(HH);oFr=r(nEt,"TFFunnelForSequenceClassification"),nEt.forEach(t),rFr=r(jPe," (Funnel Transformer model)"),jPe.forEach(t),tFr=i(ae),qT=n(ae,"LI",{});var DPe=s(qT);Q5e=n(DPe,"STRONG",{});var sEt=s(Q5e);aFr=r(sEt,"gpt2"),sEt.forEach(t),nFr=r(DPe," \u2014 "),UH=n(DPe,"A",{href:!0});var lEt=s(UH);sFr=r(lEt,"TFGPT2ForSequenceClassification"),lEt.forEach(t),lFr=r(DPe," (OpenAI GPT-2 model)"),DPe.forEach(t),iFr=i(ae),jT=n(ae,"LI",{});var GPe=s(jT);H5e=n(GPe,"STRONG",{});var iEt=s(H5e);dFr=r(iEt,"gptj"),iEt.forEach(t),cFr=r(GPe," \u2014 "),JH=n(GPe,"A",{href:!0});var dEt=s(JH);fFr=r(dEt,"TFGPTJForSequenceClassification"),dEt.forEach(t),mFr=r(GPe," (GPT-J model)"),GPe.forEach(t),gFr=i(ae),DT=n(ae,"LI",{});var OPe=s(DT);U5e=n(OPe,"STRONG",{});var cEt=s(U5e);hFr=r(cEt,"layoutlm"),cEt.forEach(t),pFr=r(OPe," \u2014 "),YH=n(OPe,"A",{href:!0});var fEt=s(YH);_Fr=r(fEt,"TFLayoutLMForSequenceClassification"),fEt.forEach(t),uFr=r(OPe," (LayoutLM model)"),OPe.forEach(t),bFr=i(ae),GT=n(ae,"LI",{});var VPe=s(GT);J5e=n(VPe,"STRONG",{});var mEt=s(J5e);vFr=r(mEt,"longformer"),mEt.forEach(t),FFr=r(VPe," \u2014 "),KH=n(VPe,"A",{href:!0});var gEt=s(KH);TFr=r(gEt,"TFLongformerForSequenceClassification"),gEt.forEach(t),MFr=r(VPe," (Longformer model)"),VPe.forEach(t),EFr=i(ae),OT=n(ae,"LI",{});var XPe=s(OT);Y5e=n(XPe,"STRONG",{});var hEt=s(Y5e);CFr=r(hEt,"mobilebert"),hEt.forEach(t),wFr=r(XPe," \u2014 "),ZH=n(XPe,"A",{href:!0});var pEt=s(ZH);AFr=r(pEt,"TFMobileBertForSequenceClassification"),pEt.forEach(t),yFr=r(XPe," (MobileBERT model)"),XPe.forEach(t),LFr=i(ae),VT=n(ae,"LI",{});var zPe=s(VT);K5e=n(zPe,"STRONG",{});var _Et=s(K5e);xFr=r(_Et,"mpnet"),_Et.forEach(t),$Fr=r(zPe," \u2014 "),eU=n(zPe,"A",{href:!0});var uEt=s(eU);kFr=r(uEt,"TFMPNetForSequenceClassification"),uEt.forEach(t),SFr=r(zPe," (MPNet model)"),zPe.forEach(t),RFr=i(ae),XT=n(ae,"LI",{});var WPe=s(XT);Z5e=n(WPe,"STRONG",{});var bEt=s(Z5e);PFr=r(bEt,"openai-gpt"),bEt.forEach(t),BFr=r(WPe," \u2014 "),oU=n(WPe,"A",{href:!0});var vEt=s(oU);IFr=r(vEt,"TFOpenAIGPTForSequenceClassification"),vEt.forEach(t),NFr=r(WPe," (OpenAI GPT model)"),WPe.forEach(t),qFr=i(ae),zT=n(ae,"LI",{});var QPe=s(zT);eve=n(QPe,"STRONG",{});var FEt=s(eve);jFr=r(FEt,"rembert"),FEt.forEach(t),DFr=r(QPe," \u2014 "),rU=n(QPe,"A",{href:!0});var TEt=s(rU);GFr=r(TEt,"TFRemBertForSequenceClassification"),TEt.forEach(t),OFr=r(QPe," (RemBERT model)"),QPe.forEach(t),VFr=i(ae),WT=n(ae,"LI",{});var HPe=s(WT);ove=n(HPe,"STRONG",{});var MEt=s(ove);XFr=r(MEt,"roberta"),MEt.forEach(t),zFr=r(HPe," \u2014 "),tU=n(HPe,"A",{href:!0});var EEt=s(tU);WFr=r(EEt,"TFRobertaForSequenceClassification"),EEt.forEach(t),QFr=r(HPe," (RoBERTa model)"),HPe.forEach(t),HFr=i(ae),QT=n(ae,"LI",{});var UPe=s(QT);rve=n(UPe,"STRONG",{});var CEt=s(rve);UFr=r(CEt,"roformer"),CEt.forEach(t),JFr=r(UPe," \u2014 "),aU=n(UPe,"A",{href:!0});var wEt=s(aU);YFr=r(wEt,"TFRoFormerForSequenceClassification"),wEt.forEach(t),KFr=r(UPe," (RoFormer model)"),UPe.forEach(t),ZFr=i(ae),HT=n(ae,"LI",{});var JPe=s(HT);tve=n(JPe,"STRONG",{});var AEt=s(tve);e6r=r(AEt,"tapas"),AEt.forEach(t),o6r=r(JPe," \u2014 "),nU=n(JPe,"A",{href:!0});var yEt=s(nU);r6r=r(yEt,"TFTapasForSequenceClassification"),yEt.forEach(t),t6r=r(JPe," (TAPAS model)"),JPe.forEach(t),a6r=i(ae),UT=n(ae,"LI",{});var YPe=s(UT);ave=n(YPe,"STRONG",{});var LEt=s(ave);n6r=r(LEt,"transfo-xl"),LEt.forEach(t),s6r=r(YPe," \u2014 "),sU=n(YPe,"A",{href:!0});var xEt=s(sU);l6r=r(xEt,"TFTransfoXLForSequenceClassification"),xEt.forEach(t),i6r=r(YPe," (Transformer-XL model)"),YPe.forEach(t),d6r=i(ae),JT=n(ae,"LI",{});var KPe=s(JT);nve=n(KPe,"STRONG",{});var $Et=s(nve);c6r=r($Et,"xlm"),$Et.forEach(t),f6r=r(KPe," \u2014 "),lU=n(KPe,"A",{href:!0});var kEt=s(lU);m6r=r(kEt,"TFXLMForSequenceClassification"),kEt.forEach(t),g6r=r(KPe," (XLM model)"),KPe.forEach(t),h6r=i(ae),YT=n(ae,"LI",{});var ZPe=s(YT);sve=n(ZPe,"STRONG",{});var SEt=s(sve);p6r=r(SEt,"xlm-roberta"),SEt.forEach(t),_6r=r(ZPe," \u2014 "),iU=n(ZPe,"A",{href:!0});var REt=s(iU);u6r=r(REt,"TFXLMRobertaForSequenceClassification"),REt.forEach(t),b6r=r(ZPe," (XLM-RoBERTa model)"),ZPe.forEach(t),v6r=i(ae),KT=n(ae,"LI",{});var eBe=s(KT);lve=n(eBe,"STRONG",{});var PEt=s(lve);F6r=r(PEt,"xlnet"),PEt.forEach(t),T6r=r(eBe," \u2014 "),dU=n(eBe,"A",{href:!0});var BEt=s(dU);M6r=r(BEt,"TFXLNetForSequenceClassification"),BEt.forEach(t),E6r=r(eBe," (XLNet model)"),eBe.forEach(t),ae.forEach(t),C6r=i(Al),T(ZT.$$.fragment,Al),Al.forEach(t),wl.forEach(t),wje=i(f),ic=n(f,"H2",{class:!0});var kGe=s(ic);eM=n(kGe,"A",{id:!0,class:!0,href:!0});var IEt=s(eM);ive=n(IEt,"SPAN",{});var NEt=s(ive);T(z7.$$.fragment,NEt),NEt.forEach(t),IEt.forEach(t),w6r=i(kGe),dve=n(kGe,"SPAN",{});var qEt=s(dve);A6r=r(qEt,"TFAutoModelForMultipleChoice"),qEt.forEach(t),kGe.forEach(t),Aje=i(f),ar=n(f,"DIV",{class:!0});var yl=s(ar);T(W7.$$.fragment,yl),y6r=i(yl),dc=n(yl,"P",{});var Aee=s(dc);L6r=r(Aee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),cU=n(Aee,"A",{href:!0});var jEt=s(cU);x6r=r(jEt,"from_pretrained()"),jEt.forEach(t),$6r=r(Aee," class method or the "),fU=n(Aee,"A",{href:!0});var DEt=s(fU);k6r=r(DEt,"from_config()"),DEt.forEach(t),S6r=r(Aee,` class
method.`),Aee.forEach(t),R6r=i(yl),Q7=n(yl,"P",{});var SGe=s(Q7);P6r=r(SGe,"This class cannot be instantiated directly using "),cve=n(SGe,"CODE",{});var GEt=s(cve);B6r=r(GEt,"__init__()"),GEt.forEach(t),I6r=r(SGe," (throws an error)."),SGe.forEach(t),N6r=i(yl),Pt=n(yl,"DIV",{class:!0});var GA=s(Pt);T(H7.$$.fragment,GA),q6r=i(GA),fve=n(GA,"P",{});var OEt=s(fve);j6r=r(OEt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),OEt.forEach(t),D6r=i(GA),cc=n(GA,"P",{});var yee=s(cc);G6r=r(yee,`Note:
Loading a model from its configuration file does `),mve=n(yee,"STRONG",{});var VEt=s(mve);O6r=r(VEt,"not"),VEt.forEach(t),V6r=r(yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),mU=n(yee,"A",{href:!0});var XEt=s(mU);X6r=r(XEt,"from_pretrained()"),XEt.forEach(t),z6r=r(yee," to load the model weights."),yee.forEach(t),W6r=i(GA),T(oM.$$.fragment,GA),GA.forEach(t),Q6r=i(yl),Sr=n(yl,"DIV",{class:!0});var Ll=s(Sr);T(U7.$$.fragment,Ll),H6r=i(Ll),gve=n(Ll,"P",{});var zEt=s(gve);U6r=r(zEt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),zEt.forEach(t),J6r=i(Ll),sn=n(Ll,"P",{});var OA=s(sn);Y6r=r(OA,"The model class to instantiate is selected based on the "),hve=n(OA,"CODE",{});var WEt=s(hve);K6r=r(WEt,"model_type"),WEt.forEach(t),Z6r=r(OA,` property of the config object (either
passed as an argument or loaded from `),pve=n(OA,"CODE",{});var QEt=s(pve);eTr=r(QEt,"pretrained_model_name_or_path"),QEt.forEach(t),oTr=r(OA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_ve=n(OA,"CODE",{});var HEt=s(_ve);rTr=r(HEt,"pretrained_model_name_or_path"),HEt.forEach(t),tTr=r(OA,":"),OA.forEach(t),aTr=i(Ll),pe=n(Ll,"UL",{});var be=s(pe);rM=n(be,"LI",{});var oBe=s(rM);uve=n(oBe,"STRONG",{});var UEt=s(uve);nTr=r(UEt,"albert"),UEt.forEach(t),sTr=r(oBe," \u2014 "),gU=n(oBe,"A",{href:!0});var JEt=s(gU);lTr=r(JEt,"TFAlbertForMultipleChoice"),JEt.forEach(t),iTr=r(oBe," (ALBERT model)"),oBe.forEach(t),dTr=i(be),tM=n(be,"LI",{});var rBe=s(tM);bve=n(rBe,"STRONG",{});var YEt=s(bve);cTr=r(YEt,"bert"),YEt.forEach(t),fTr=r(rBe," \u2014 "),hU=n(rBe,"A",{href:!0});var KEt=s(hU);mTr=r(KEt,"TFBertForMultipleChoice"),KEt.forEach(t),gTr=r(rBe," (BERT model)"),rBe.forEach(t),hTr=i(be),aM=n(be,"LI",{});var tBe=s(aM);vve=n(tBe,"STRONG",{});var ZEt=s(vve);pTr=r(ZEt,"camembert"),ZEt.forEach(t),_Tr=r(tBe," \u2014 "),pU=n(tBe,"A",{href:!0});var eCt=s(pU);uTr=r(eCt,"TFCamembertForMultipleChoice"),eCt.forEach(t),bTr=r(tBe," (CamemBERT model)"),tBe.forEach(t),vTr=i(be),nM=n(be,"LI",{});var aBe=s(nM);Fve=n(aBe,"STRONG",{});var oCt=s(Fve);FTr=r(oCt,"convbert"),oCt.forEach(t),TTr=r(aBe," \u2014 "),_U=n(aBe,"A",{href:!0});var rCt=s(_U);MTr=r(rCt,"TFConvBertForMultipleChoice"),rCt.forEach(t),ETr=r(aBe," (ConvBERT model)"),aBe.forEach(t),CTr=i(be),sM=n(be,"LI",{});var nBe=s(sM);Tve=n(nBe,"STRONG",{});var tCt=s(Tve);wTr=r(tCt,"distilbert"),tCt.forEach(t),ATr=r(nBe," \u2014 "),uU=n(nBe,"A",{href:!0});var aCt=s(uU);yTr=r(aCt,"TFDistilBertForMultipleChoice"),aCt.forEach(t),LTr=r(nBe," (DistilBERT model)"),nBe.forEach(t),xTr=i(be),lM=n(be,"LI",{});var sBe=s(lM);Mve=n(sBe,"STRONG",{});var nCt=s(Mve);$Tr=r(nCt,"electra"),nCt.forEach(t),kTr=r(sBe," \u2014 "),bU=n(sBe,"A",{href:!0});var sCt=s(bU);STr=r(sCt,"TFElectraForMultipleChoice"),sCt.forEach(t),RTr=r(sBe," (ELECTRA model)"),sBe.forEach(t),PTr=i(be),iM=n(be,"LI",{});var lBe=s(iM);Eve=n(lBe,"STRONG",{});var lCt=s(Eve);BTr=r(lCt,"flaubert"),lCt.forEach(t),ITr=r(lBe," \u2014 "),vU=n(lBe,"A",{href:!0});var iCt=s(vU);NTr=r(iCt,"TFFlaubertForMultipleChoice"),iCt.forEach(t),qTr=r(lBe," (FlauBERT model)"),lBe.forEach(t),jTr=i(be),dM=n(be,"LI",{});var iBe=s(dM);Cve=n(iBe,"STRONG",{});var dCt=s(Cve);DTr=r(dCt,"funnel"),dCt.forEach(t),GTr=r(iBe," \u2014 "),FU=n(iBe,"A",{href:!0});var cCt=s(FU);OTr=r(cCt,"TFFunnelForMultipleChoice"),cCt.forEach(t),VTr=r(iBe," (Funnel Transformer model)"),iBe.forEach(t),XTr=i(be),cM=n(be,"LI",{});var dBe=s(cM);wve=n(dBe,"STRONG",{});var fCt=s(wve);zTr=r(fCt,"longformer"),fCt.forEach(t),WTr=r(dBe," \u2014 "),TU=n(dBe,"A",{href:!0});var mCt=s(TU);QTr=r(mCt,"TFLongformerForMultipleChoice"),mCt.forEach(t),HTr=r(dBe," (Longformer model)"),dBe.forEach(t),UTr=i(be),fM=n(be,"LI",{});var cBe=s(fM);Ave=n(cBe,"STRONG",{});var gCt=s(Ave);JTr=r(gCt,"mobilebert"),gCt.forEach(t),YTr=r(cBe," \u2014 "),MU=n(cBe,"A",{href:!0});var hCt=s(MU);KTr=r(hCt,"TFMobileBertForMultipleChoice"),hCt.forEach(t),ZTr=r(cBe," (MobileBERT model)"),cBe.forEach(t),eMr=i(be),mM=n(be,"LI",{});var fBe=s(mM);yve=n(fBe,"STRONG",{});var pCt=s(yve);oMr=r(pCt,"mpnet"),pCt.forEach(t),rMr=r(fBe," \u2014 "),EU=n(fBe,"A",{href:!0});var _Ct=s(EU);tMr=r(_Ct,"TFMPNetForMultipleChoice"),_Ct.forEach(t),aMr=r(fBe," (MPNet model)"),fBe.forEach(t),nMr=i(be),gM=n(be,"LI",{});var mBe=s(gM);Lve=n(mBe,"STRONG",{});var uCt=s(Lve);sMr=r(uCt,"rembert"),uCt.forEach(t),lMr=r(mBe," \u2014 "),CU=n(mBe,"A",{href:!0});var bCt=s(CU);iMr=r(bCt,"TFRemBertForMultipleChoice"),bCt.forEach(t),dMr=r(mBe," (RemBERT model)"),mBe.forEach(t),cMr=i(be),hM=n(be,"LI",{});var gBe=s(hM);xve=n(gBe,"STRONG",{});var vCt=s(xve);fMr=r(vCt,"roberta"),vCt.forEach(t),mMr=r(gBe," \u2014 "),wU=n(gBe,"A",{href:!0});var FCt=s(wU);gMr=r(FCt,"TFRobertaForMultipleChoice"),FCt.forEach(t),hMr=r(gBe," (RoBERTa model)"),gBe.forEach(t),pMr=i(be),pM=n(be,"LI",{});var hBe=s(pM);$ve=n(hBe,"STRONG",{});var TCt=s($ve);_Mr=r(TCt,"roformer"),TCt.forEach(t),uMr=r(hBe," \u2014 "),AU=n(hBe,"A",{href:!0});var MCt=s(AU);bMr=r(MCt,"TFRoFormerForMultipleChoice"),MCt.forEach(t),vMr=r(hBe," (RoFormer model)"),hBe.forEach(t),FMr=i(be),_M=n(be,"LI",{});var pBe=s(_M);kve=n(pBe,"STRONG",{});var ECt=s(kve);TMr=r(ECt,"xlm"),ECt.forEach(t),MMr=r(pBe," \u2014 "),yU=n(pBe,"A",{href:!0});var CCt=s(yU);EMr=r(CCt,"TFXLMForMultipleChoice"),CCt.forEach(t),CMr=r(pBe," (XLM model)"),pBe.forEach(t),wMr=i(be),uM=n(be,"LI",{});var _Be=s(uM);Sve=n(_Be,"STRONG",{});var wCt=s(Sve);AMr=r(wCt,"xlm-roberta"),wCt.forEach(t),yMr=r(_Be," \u2014 "),LU=n(_Be,"A",{href:!0});var ACt=s(LU);LMr=r(ACt,"TFXLMRobertaForMultipleChoice"),ACt.forEach(t),xMr=r(_Be," (XLM-RoBERTa model)"),_Be.forEach(t),$Mr=i(be),bM=n(be,"LI",{});var uBe=s(bM);Rve=n(uBe,"STRONG",{});var yCt=s(Rve);kMr=r(yCt,"xlnet"),yCt.forEach(t),SMr=r(uBe," \u2014 "),xU=n(uBe,"A",{href:!0});var LCt=s(xU);RMr=r(LCt,"TFXLNetForMultipleChoice"),LCt.forEach(t),PMr=r(uBe," (XLNet model)"),uBe.forEach(t),be.forEach(t),BMr=i(Ll),T(vM.$$.fragment,Ll),Ll.forEach(t),yl.forEach(t),yje=i(f),fc=n(f,"H2",{class:!0});var RGe=s(fc);FM=n(RGe,"A",{id:!0,class:!0,href:!0});var xCt=s(FM);Pve=n(xCt,"SPAN",{});var $Ct=s(Pve);T(J7.$$.fragment,$Ct),$Ct.forEach(t),xCt.forEach(t),IMr=i(RGe),Bve=n(RGe,"SPAN",{});var kCt=s(Bve);NMr=r(kCt,"TFAutoModelForNextSentencePrediction"),kCt.forEach(t),RGe.forEach(t),Lje=i(f),nr=n(f,"DIV",{class:!0});var xl=s(nr);T(Y7.$$.fragment,xl),qMr=i(xl),mc=n(xl,"P",{});var Lee=s(mc);jMr=r(Lee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),$U=n(Lee,"A",{href:!0});var SCt=s($U);DMr=r(SCt,"from_pretrained()"),SCt.forEach(t),GMr=r(Lee," class method or the "),kU=n(Lee,"A",{href:!0});var RCt=s(kU);OMr=r(RCt,"from_config()"),RCt.forEach(t),VMr=r(Lee,` class
method.`),Lee.forEach(t),XMr=i(xl),K7=n(xl,"P",{});var PGe=s(K7);zMr=r(PGe,"This class cannot be instantiated directly using "),Ive=n(PGe,"CODE",{});var PCt=s(Ive);WMr=r(PCt,"__init__()"),PCt.forEach(t),QMr=r(PGe," (throws an error)."),PGe.forEach(t),HMr=i(xl),Bt=n(xl,"DIV",{class:!0});var VA=s(Bt);T(Z7.$$.fragment,VA),UMr=i(VA),Nve=n(VA,"P",{});var BCt=s(Nve);JMr=r(BCt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),BCt.forEach(t),YMr=i(VA),gc=n(VA,"P",{});var xee=s(gc);KMr=r(xee,`Note:
Loading a model from its configuration file does `),qve=n(xee,"STRONG",{});var ICt=s(qve);ZMr=r(ICt,"not"),ICt.forEach(t),eEr=r(xee,` load the model weights. It only affects the
model\u2019s configuration. Use `),SU=n(xee,"A",{href:!0});var NCt=s(SU);oEr=r(NCt,"from_pretrained()"),NCt.forEach(t),rEr=r(xee," to load the model weights."),xee.forEach(t),tEr=i(VA),T(TM.$$.fragment,VA),VA.forEach(t),aEr=i(xl),Rr=n(xl,"DIV",{class:!0});var $l=s(Rr);T(e9.$$.fragment,$l),nEr=i($l),jve=n($l,"P",{});var qCt=s(jve);sEr=r(qCt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),qCt.forEach(t),lEr=i($l),ln=n($l,"P",{});var XA=s(ln);iEr=r(XA,"The model class to instantiate is selected based on the "),Dve=n(XA,"CODE",{});var jCt=s(Dve);dEr=r(jCt,"model_type"),jCt.forEach(t),cEr=r(XA,` property of the config object (either
passed as an argument or loaded from `),Gve=n(XA,"CODE",{});var DCt=s(Gve);fEr=r(DCt,"pretrained_model_name_or_path"),DCt.forEach(t),mEr=r(XA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ove=n(XA,"CODE",{});var GCt=s(Ove);gEr=r(GCt,"pretrained_model_name_or_path"),GCt.forEach(t),hEr=r(XA,":"),XA.forEach(t),pEr=i($l),o9=n($l,"UL",{});var BGe=s(o9);MM=n(BGe,"LI",{});var bBe=s(MM);Vve=n(bBe,"STRONG",{});var OCt=s(Vve);_Er=r(OCt,"bert"),OCt.forEach(t),uEr=r(bBe," \u2014 "),RU=n(bBe,"A",{href:!0});var VCt=s(RU);bEr=r(VCt,"TFBertForNextSentencePrediction"),VCt.forEach(t),vEr=r(bBe," (BERT model)"),bBe.forEach(t),FEr=i(BGe),EM=n(BGe,"LI",{});var vBe=s(EM);Xve=n(vBe,"STRONG",{});var XCt=s(Xve);TEr=r(XCt,"mobilebert"),XCt.forEach(t),MEr=r(vBe," \u2014 "),PU=n(vBe,"A",{href:!0});var zCt=s(PU);EEr=r(zCt,"TFMobileBertForNextSentencePrediction"),zCt.forEach(t),CEr=r(vBe," (MobileBERT model)"),vBe.forEach(t),BGe.forEach(t),wEr=i($l),T(CM.$$.fragment,$l),$l.forEach(t),xl.forEach(t),xje=i(f),hc=n(f,"H2",{class:!0});var IGe=s(hc);wM=n(IGe,"A",{id:!0,class:!0,href:!0});var WCt=s(wM);zve=n(WCt,"SPAN",{});var QCt=s(zve);T(r9.$$.fragment,QCt),QCt.forEach(t),WCt.forEach(t),AEr=i(IGe),Wve=n(IGe,"SPAN",{});var HCt=s(Wve);yEr=r(HCt,"TFAutoModelForTableQuestionAnswering"),HCt.forEach(t),IGe.forEach(t),$je=i(f),sr=n(f,"DIV",{class:!0});var kl=s(sr);T(t9.$$.fragment,kl),LEr=i(kl),pc=n(kl,"P",{});var $ee=s(pc);xEr=r($ee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),BU=n($ee,"A",{href:!0});var UCt=s(BU);$Er=r(UCt,"from_pretrained()"),UCt.forEach(t),kEr=r($ee," class method or the "),IU=n($ee,"A",{href:!0});var JCt=s(IU);SEr=r(JCt,"from_config()"),JCt.forEach(t),REr=r($ee,` class
method.`),$ee.forEach(t),PEr=i(kl),a9=n(kl,"P",{});var NGe=s(a9);BEr=r(NGe,"This class cannot be instantiated directly using "),Qve=n(NGe,"CODE",{});var YCt=s(Qve);IEr=r(YCt,"__init__()"),YCt.forEach(t),NEr=r(NGe," (throws an error)."),NGe.forEach(t),qEr=i(kl),It=n(kl,"DIV",{class:!0});var zA=s(It);T(n9.$$.fragment,zA),jEr=i(zA),Hve=n(zA,"P",{});var KCt=s(Hve);DEr=r(KCt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),KCt.forEach(t),GEr=i(zA),_c=n(zA,"P",{});var kee=s(_c);OEr=r(kee,`Note:
Loading a model from its configuration file does `),Uve=n(kee,"STRONG",{});var ZCt=s(Uve);VEr=r(ZCt,"not"),ZCt.forEach(t),XEr=r(kee,` load the model weights. It only affects the
model\u2019s configuration. Use `),NU=n(kee,"A",{href:!0});var ewt=s(NU);zEr=r(ewt,"from_pretrained()"),ewt.forEach(t),WEr=r(kee," to load the model weights."),kee.forEach(t),QEr=i(zA),T(AM.$$.fragment,zA),zA.forEach(t),HEr=i(kl),Pr=n(kl,"DIV",{class:!0});var Sl=s(Pr);T(s9.$$.fragment,Sl),UEr=i(Sl),Jve=n(Sl,"P",{});var owt=s(Jve);JEr=r(owt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),owt.forEach(t),YEr=i(Sl),dn=n(Sl,"P",{});var WA=s(dn);KEr=r(WA,"The model class to instantiate is selected based on the "),Yve=n(WA,"CODE",{});var rwt=s(Yve);ZEr=r(rwt,"model_type"),rwt.forEach(t),eCr=r(WA,` property of the config object (either
passed as an argument or loaded from `),Kve=n(WA,"CODE",{});var twt=s(Kve);oCr=r(twt,"pretrained_model_name_or_path"),twt.forEach(t),rCr=r(WA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zve=n(WA,"CODE",{});var awt=s(Zve);tCr=r(awt,"pretrained_model_name_or_path"),awt.forEach(t),aCr=r(WA,":"),WA.forEach(t),nCr=i(Sl),e3e=n(Sl,"UL",{});var nwt=s(e3e);yM=n(nwt,"LI",{});var FBe=s(yM);o3e=n(FBe,"STRONG",{});var swt=s(o3e);sCr=r(swt,"tapas"),swt.forEach(t),lCr=r(FBe," \u2014 "),qU=n(FBe,"A",{href:!0});var lwt=s(qU);iCr=r(lwt,"TFTapasForQuestionAnswering"),lwt.forEach(t),dCr=r(FBe," (TAPAS model)"),FBe.forEach(t),nwt.forEach(t),cCr=i(Sl),T(LM.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),kje=i(f),uc=n(f,"H2",{class:!0});var qGe=s(uc);xM=n(qGe,"A",{id:!0,class:!0,href:!0});var iwt=s(xM);r3e=n(iwt,"SPAN",{});var dwt=s(r3e);T(l9.$$.fragment,dwt),dwt.forEach(t),iwt.forEach(t),fCr=i(qGe),t3e=n(qGe,"SPAN",{});var cwt=s(t3e);mCr=r(cwt,"TFAutoModelForTokenClassification"),cwt.forEach(t),qGe.forEach(t),Sje=i(f),lr=n(f,"DIV",{class:!0});var Rl=s(lr);T(i9.$$.fragment,Rl),gCr=i(Rl),bc=n(Rl,"P",{});var See=s(bc);hCr=r(See,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),jU=n(See,"A",{href:!0});var fwt=s(jU);pCr=r(fwt,"from_pretrained()"),fwt.forEach(t),_Cr=r(See," class method or the "),DU=n(See,"A",{href:!0});var mwt=s(DU);uCr=r(mwt,"from_config()"),mwt.forEach(t),bCr=r(See,` class
method.`),See.forEach(t),vCr=i(Rl),d9=n(Rl,"P",{});var jGe=s(d9);FCr=r(jGe,"This class cannot be instantiated directly using "),a3e=n(jGe,"CODE",{});var gwt=s(a3e);TCr=r(gwt,"__init__()"),gwt.forEach(t),MCr=r(jGe," (throws an error)."),jGe.forEach(t),ECr=i(Rl),Nt=n(Rl,"DIV",{class:!0});var QA=s(Nt);T(c9.$$.fragment,QA),CCr=i(QA),n3e=n(QA,"P",{});var hwt=s(n3e);wCr=r(hwt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),hwt.forEach(t),ACr=i(QA),vc=n(QA,"P",{});var Ree=s(vc);yCr=r(Ree,`Note:
Loading a model from its configuration file does `),s3e=n(Ree,"STRONG",{});var pwt=s(s3e);LCr=r(pwt,"not"),pwt.forEach(t),xCr=r(Ree,` load the model weights. It only affects the
model\u2019s configuration. Use `),GU=n(Ree,"A",{href:!0});var _wt=s(GU);$Cr=r(_wt,"from_pretrained()"),_wt.forEach(t),kCr=r(Ree," to load the model weights."),Ree.forEach(t),SCr=i(QA),T($M.$$.fragment,QA),QA.forEach(t),RCr=i(Rl),Br=n(Rl,"DIV",{class:!0});var Pl=s(Br);T(f9.$$.fragment,Pl),PCr=i(Pl),l3e=n(Pl,"P",{});var uwt=s(l3e);BCr=r(uwt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),uwt.forEach(t),ICr=i(Pl),cn=n(Pl,"P",{});var HA=s(cn);NCr=r(HA,"The model class to instantiate is selected based on the "),i3e=n(HA,"CODE",{});var bwt=s(i3e);qCr=r(bwt,"model_type"),bwt.forEach(t),jCr=r(HA,` property of the config object (either
passed as an argument or loaded from `),d3e=n(HA,"CODE",{});var vwt=s(d3e);DCr=r(vwt,"pretrained_model_name_or_path"),vwt.forEach(t),GCr=r(HA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c3e=n(HA,"CODE",{});var Fwt=s(c3e);OCr=r(Fwt,"pretrained_model_name_or_path"),Fwt.forEach(t),VCr=r(HA,":"),HA.forEach(t),XCr=i(Pl),de=n(Pl,"UL",{});var me=s(de);kM=n(me,"LI",{});var TBe=s(kM);f3e=n(TBe,"STRONG",{});var Twt=s(f3e);zCr=r(Twt,"albert"),Twt.forEach(t),WCr=r(TBe," \u2014 "),OU=n(TBe,"A",{href:!0});var Mwt=s(OU);QCr=r(Mwt,"TFAlbertForTokenClassification"),Mwt.forEach(t),HCr=r(TBe," (ALBERT model)"),TBe.forEach(t),UCr=i(me),SM=n(me,"LI",{});var MBe=s(SM);m3e=n(MBe,"STRONG",{});var Ewt=s(m3e);JCr=r(Ewt,"bert"),Ewt.forEach(t),YCr=r(MBe," \u2014 "),VU=n(MBe,"A",{href:!0});var Cwt=s(VU);KCr=r(Cwt,"TFBertForTokenClassification"),Cwt.forEach(t),ZCr=r(MBe," (BERT model)"),MBe.forEach(t),ewr=i(me),RM=n(me,"LI",{});var EBe=s(RM);g3e=n(EBe,"STRONG",{});var wwt=s(g3e);owr=r(wwt,"camembert"),wwt.forEach(t),rwr=r(EBe," \u2014 "),XU=n(EBe,"A",{href:!0});var Awt=s(XU);twr=r(Awt,"TFCamembertForTokenClassification"),Awt.forEach(t),awr=r(EBe," (CamemBERT model)"),EBe.forEach(t),nwr=i(me),PM=n(me,"LI",{});var CBe=s(PM);h3e=n(CBe,"STRONG",{});var ywt=s(h3e);swr=r(ywt,"convbert"),ywt.forEach(t),lwr=r(CBe," \u2014 "),zU=n(CBe,"A",{href:!0});var Lwt=s(zU);iwr=r(Lwt,"TFConvBertForTokenClassification"),Lwt.forEach(t),dwr=r(CBe," (ConvBERT model)"),CBe.forEach(t),cwr=i(me),BM=n(me,"LI",{});var wBe=s(BM);p3e=n(wBe,"STRONG",{});var xwt=s(p3e);fwr=r(xwt,"deberta"),xwt.forEach(t),mwr=r(wBe," \u2014 "),WU=n(wBe,"A",{href:!0});var $wt=s(WU);gwr=r($wt,"TFDebertaForTokenClassification"),$wt.forEach(t),hwr=r(wBe," (DeBERTa model)"),wBe.forEach(t),pwr=i(me),IM=n(me,"LI",{});var ABe=s(IM);_3e=n(ABe,"STRONG",{});var kwt=s(_3e);_wr=r(kwt,"deberta-v2"),kwt.forEach(t),uwr=r(ABe," \u2014 "),QU=n(ABe,"A",{href:!0});var Swt=s(QU);bwr=r(Swt,"TFDebertaV2ForTokenClassification"),Swt.forEach(t),vwr=r(ABe," (DeBERTa-v2 model)"),ABe.forEach(t),Fwr=i(me),NM=n(me,"LI",{});var yBe=s(NM);u3e=n(yBe,"STRONG",{});var Rwt=s(u3e);Twr=r(Rwt,"distilbert"),Rwt.forEach(t),Mwr=r(yBe," \u2014 "),HU=n(yBe,"A",{href:!0});var Pwt=s(HU);Ewr=r(Pwt,"TFDistilBertForTokenClassification"),Pwt.forEach(t),Cwr=r(yBe," (DistilBERT model)"),yBe.forEach(t),wwr=i(me),qM=n(me,"LI",{});var LBe=s(qM);b3e=n(LBe,"STRONG",{});var Bwt=s(b3e);Awr=r(Bwt,"electra"),Bwt.forEach(t),ywr=r(LBe," \u2014 "),UU=n(LBe,"A",{href:!0});var Iwt=s(UU);Lwr=r(Iwt,"TFElectraForTokenClassification"),Iwt.forEach(t),xwr=r(LBe," (ELECTRA model)"),LBe.forEach(t),$wr=i(me),jM=n(me,"LI",{});var xBe=s(jM);v3e=n(xBe,"STRONG",{});var Nwt=s(v3e);kwr=r(Nwt,"flaubert"),Nwt.forEach(t),Swr=r(xBe," \u2014 "),JU=n(xBe,"A",{href:!0});var qwt=s(JU);Rwr=r(qwt,"TFFlaubertForTokenClassification"),qwt.forEach(t),Pwr=r(xBe," (FlauBERT model)"),xBe.forEach(t),Bwr=i(me),DM=n(me,"LI",{});var $Be=s(DM);F3e=n($Be,"STRONG",{});var jwt=s(F3e);Iwr=r(jwt,"funnel"),jwt.forEach(t),Nwr=r($Be," \u2014 "),YU=n($Be,"A",{href:!0});var Dwt=s(YU);qwr=r(Dwt,"TFFunnelForTokenClassification"),Dwt.forEach(t),jwr=r($Be," (Funnel Transformer model)"),$Be.forEach(t),Dwr=i(me),GM=n(me,"LI",{});var kBe=s(GM);T3e=n(kBe,"STRONG",{});var Gwt=s(T3e);Gwr=r(Gwt,"layoutlm"),Gwt.forEach(t),Owr=r(kBe," \u2014 "),KU=n(kBe,"A",{href:!0});var Owt=s(KU);Vwr=r(Owt,"TFLayoutLMForTokenClassification"),Owt.forEach(t),Xwr=r(kBe," (LayoutLM model)"),kBe.forEach(t),zwr=i(me),OM=n(me,"LI",{});var SBe=s(OM);M3e=n(SBe,"STRONG",{});var Vwt=s(M3e);Wwr=r(Vwt,"longformer"),Vwt.forEach(t),Qwr=r(SBe," \u2014 "),ZU=n(SBe,"A",{href:!0});var Xwt=s(ZU);Hwr=r(Xwt,"TFLongformerForTokenClassification"),Xwt.forEach(t),Uwr=r(SBe," (Longformer model)"),SBe.forEach(t),Jwr=i(me),VM=n(me,"LI",{});var RBe=s(VM);E3e=n(RBe,"STRONG",{});var zwt=s(E3e);Ywr=r(zwt,"mobilebert"),zwt.forEach(t),Kwr=r(RBe," \u2014 "),eJ=n(RBe,"A",{href:!0});var Wwt=s(eJ);Zwr=r(Wwt,"TFMobileBertForTokenClassification"),Wwt.forEach(t),e0r=r(RBe," (MobileBERT model)"),RBe.forEach(t),o0r=i(me),XM=n(me,"LI",{});var PBe=s(XM);C3e=n(PBe,"STRONG",{});var Qwt=s(C3e);r0r=r(Qwt,"mpnet"),Qwt.forEach(t),t0r=r(PBe," \u2014 "),oJ=n(PBe,"A",{href:!0});var Hwt=s(oJ);a0r=r(Hwt,"TFMPNetForTokenClassification"),Hwt.forEach(t),n0r=r(PBe," (MPNet model)"),PBe.forEach(t),s0r=i(me),zM=n(me,"LI",{});var BBe=s(zM);w3e=n(BBe,"STRONG",{});var Uwt=s(w3e);l0r=r(Uwt,"rembert"),Uwt.forEach(t),i0r=r(BBe," \u2014 "),rJ=n(BBe,"A",{href:!0});var Jwt=s(rJ);d0r=r(Jwt,"TFRemBertForTokenClassification"),Jwt.forEach(t),c0r=r(BBe," (RemBERT model)"),BBe.forEach(t),f0r=i(me),WM=n(me,"LI",{});var IBe=s(WM);A3e=n(IBe,"STRONG",{});var Ywt=s(A3e);m0r=r(Ywt,"roberta"),Ywt.forEach(t),g0r=r(IBe," \u2014 "),tJ=n(IBe,"A",{href:!0});var Kwt=s(tJ);h0r=r(Kwt,"TFRobertaForTokenClassification"),Kwt.forEach(t),p0r=r(IBe," (RoBERTa model)"),IBe.forEach(t),_0r=i(me),QM=n(me,"LI",{});var NBe=s(QM);y3e=n(NBe,"STRONG",{});var Zwt=s(y3e);u0r=r(Zwt,"roformer"),Zwt.forEach(t),b0r=r(NBe," \u2014 "),aJ=n(NBe,"A",{href:!0});var e0t=s(aJ);v0r=r(e0t,"TFRoFormerForTokenClassification"),e0t.forEach(t),F0r=r(NBe," (RoFormer model)"),NBe.forEach(t),T0r=i(me),HM=n(me,"LI",{});var qBe=s(HM);L3e=n(qBe,"STRONG",{});var o0t=s(L3e);M0r=r(o0t,"xlm"),o0t.forEach(t),E0r=r(qBe," \u2014 "),nJ=n(qBe,"A",{href:!0});var r0t=s(nJ);C0r=r(r0t,"TFXLMForTokenClassification"),r0t.forEach(t),w0r=r(qBe," (XLM model)"),qBe.forEach(t),A0r=i(me),UM=n(me,"LI",{});var jBe=s(UM);x3e=n(jBe,"STRONG",{});var t0t=s(x3e);y0r=r(t0t,"xlm-roberta"),t0t.forEach(t),L0r=r(jBe," \u2014 "),sJ=n(jBe,"A",{href:!0});var a0t=s(sJ);x0r=r(a0t,"TFXLMRobertaForTokenClassification"),a0t.forEach(t),$0r=r(jBe," (XLM-RoBERTa model)"),jBe.forEach(t),k0r=i(me),JM=n(me,"LI",{});var DBe=s(JM);$3e=n(DBe,"STRONG",{});var n0t=s($3e);S0r=r(n0t,"xlnet"),n0t.forEach(t),R0r=r(DBe," \u2014 "),lJ=n(DBe,"A",{href:!0});var s0t=s(lJ);P0r=r(s0t,"TFXLNetForTokenClassification"),s0t.forEach(t),B0r=r(DBe," (XLNet model)"),DBe.forEach(t),me.forEach(t),I0r=i(Pl),T(YM.$$.fragment,Pl),Pl.forEach(t),Rl.forEach(t),Rje=i(f),Fc=n(f,"H2",{class:!0});var DGe=s(Fc);KM=n(DGe,"A",{id:!0,class:!0,href:!0});var l0t=s(KM);k3e=n(l0t,"SPAN",{});var i0t=s(k3e);T(m9.$$.fragment,i0t),i0t.forEach(t),l0t.forEach(t),N0r=i(DGe),S3e=n(DGe,"SPAN",{});var d0t=s(S3e);q0r=r(d0t,"TFAutoModelForQuestionAnswering"),d0t.forEach(t),DGe.forEach(t),Pje=i(f),ir=n(f,"DIV",{class:!0});var Bl=s(ir);T(g9.$$.fragment,Bl),j0r=i(Bl),Tc=n(Bl,"P",{});var Pee=s(Tc);D0r=r(Pee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),iJ=n(Pee,"A",{href:!0});var c0t=s(iJ);G0r=r(c0t,"from_pretrained()"),c0t.forEach(t),O0r=r(Pee," class method or the "),dJ=n(Pee,"A",{href:!0});var f0t=s(dJ);V0r=r(f0t,"from_config()"),f0t.forEach(t),X0r=r(Pee,` class
method.`),Pee.forEach(t),z0r=i(Bl),h9=n(Bl,"P",{});var GGe=s(h9);W0r=r(GGe,"This class cannot be instantiated directly using "),R3e=n(GGe,"CODE",{});var m0t=s(R3e);Q0r=r(m0t,"__init__()"),m0t.forEach(t),H0r=r(GGe," (throws an error)."),GGe.forEach(t),U0r=i(Bl),qt=n(Bl,"DIV",{class:!0});var UA=s(qt);T(p9.$$.fragment,UA),J0r=i(UA),P3e=n(UA,"P",{});var g0t=s(P3e);Y0r=r(g0t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),g0t.forEach(t),K0r=i(UA),Mc=n(UA,"P",{});var Bee=s(Mc);Z0r=r(Bee,`Note:
Loading a model from its configuration file does `),B3e=n(Bee,"STRONG",{});var h0t=s(B3e);eAr=r(h0t,"not"),h0t.forEach(t),oAr=r(Bee,` load the model weights. It only affects the
model\u2019s configuration. Use `),cJ=n(Bee,"A",{href:!0});var p0t=s(cJ);rAr=r(p0t,"from_pretrained()"),p0t.forEach(t),tAr=r(Bee," to load the model weights."),Bee.forEach(t),aAr=i(UA),T(ZM.$$.fragment,UA),UA.forEach(t),nAr=i(Bl),Ir=n(Bl,"DIV",{class:!0});var Il=s(Ir);T(_9.$$.fragment,Il),sAr=i(Il),I3e=n(Il,"P",{});var _0t=s(I3e);lAr=r(_0t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),_0t.forEach(t),iAr=i(Il),fn=n(Il,"P",{});var JA=s(fn);dAr=r(JA,"The model class to instantiate is selected based on the "),N3e=n(JA,"CODE",{});var u0t=s(N3e);cAr=r(u0t,"model_type"),u0t.forEach(t),fAr=r(JA,` property of the config object (either
passed as an argument or loaded from `),q3e=n(JA,"CODE",{});var b0t=s(q3e);mAr=r(b0t,"pretrained_model_name_or_path"),b0t.forEach(t),gAr=r(JA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j3e=n(JA,"CODE",{});var v0t=s(j3e);hAr=r(v0t,"pretrained_model_name_or_path"),v0t.forEach(t),pAr=r(JA,":"),JA.forEach(t),_Ar=i(Il),ce=n(Il,"UL",{});var ge=s(ce);eE=n(ge,"LI",{});var GBe=s(eE);D3e=n(GBe,"STRONG",{});var F0t=s(D3e);uAr=r(F0t,"albert"),F0t.forEach(t),bAr=r(GBe," \u2014 "),fJ=n(GBe,"A",{href:!0});var T0t=s(fJ);vAr=r(T0t,"TFAlbertForQuestionAnswering"),T0t.forEach(t),FAr=r(GBe," (ALBERT model)"),GBe.forEach(t),TAr=i(ge),oE=n(ge,"LI",{});var OBe=s(oE);G3e=n(OBe,"STRONG",{});var M0t=s(G3e);MAr=r(M0t,"bert"),M0t.forEach(t),EAr=r(OBe," \u2014 "),mJ=n(OBe,"A",{href:!0});var E0t=s(mJ);CAr=r(E0t,"TFBertForQuestionAnswering"),E0t.forEach(t),wAr=r(OBe," (BERT model)"),OBe.forEach(t),AAr=i(ge),rE=n(ge,"LI",{});var VBe=s(rE);O3e=n(VBe,"STRONG",{});var C0t=s(O3e);yAr=r(C0t,"camembert"),C0t.forEach(t),LAr=r(VBe," \u2014 "),gJ=n(VBe,"A",{href:!0});var w0t=s(gJ);xAr=r(w0t,"TFCamembertForQuestionAnswering"),w0t.forEach(t),$Ar=r(VBe," (CamemBERT model)"),VBe.forEach(t),kAr=i(ge),tE=n(ge,"LI",{});var XBe=s(tE);V3e=n(XBe,"STRONG",{});var A0t=s(V3e);SAr=r(A0t,"convbert"),A0t.forEach(t),RAr=r(XBe," \u2014 "),hJ=n(XBe,"A",{href:!0});var y0t=s(hJ);PAr=r(y0t,"TFConvBertForQuestionAnswering"),y0t.forEach(t),BAr=r(XBe," (ConvBERT model)"),XBe.forEach(t),IAr=i(ge),aE=n(ge,"LI",{});var zBe=s(aE);X3e=n(zBe,"STRONG",{});var L0t=s(X3e);NAr=r(L0t,"deberta"),L0t.forEach(t),qAr=r(zBe," \u2014 "),pJ=n(zBe,"A",{href:!0});var x0t=s(pJ);jAr=r(x0t,"TFDebertaForQuestionAnswering"),x0t.forEach(t),DAr=r(zBe," (DeBERTa model)"),zBe.forEach(t),GAr=i(ge),nE=n(ge,"LI",{});var WBe=s(nE);z3e=n(WBe,"STRONG",{});var $0t=s(z3e);OAr=r($0t,"deberta-v2"),$0t.forEach(t),VAr=r(WBe," \u2014 "),_J=n(WBe,"A",{href:!0});var k0t=s(_J);XAr=r(k0t,"TFDebertaV2ForQuestionAnswering"),k0t.forEach(t),zAr=r(WBe," (DeBERTa-v2 model)"),WBe.forEach(t),WAr=i(ge),sE=n(ge,"LI",{});var QBe=s(sE);W3e=n(QBe,"STRONG",{});var S0t=s(W3e);QAr=r(S0t,"distilbert"),S0t.forEach(t),HAr=r(QBe," \u2014 "),uJ=n(QBe,"A",{href:!0});var R0t=s(uJ);UAr=r(R0t,"TFDistilBertForQuestionAnswering"),R0t.forEach(t),JAr=r(QBe," (DistilBERT model)"),QBe.forEach(t),YAr=i(ge),lE=n(ge,"LI",{});var HBe=s(lE);Q3e=n(HBe,"STRONG",{});var P0t=s(Q3e);KAr=r(P0t,"electra"),P0t.forEach(t),ZAr=r(HBe," \u2014 "),bJ=n(HBe,"A",{href:!0});var B0t=s(bJ);eyr=r(B0t,"TFElectraForQuestionAnswering"),B0t.forEach(t),oyr=r(HBe," (ELECTRA model)"),HBe.forEach(t),ryr=i(ge),iE=n(ge,"LI",{});var UBe=s(iE);H3e=n(UBe,"STRONG",{});var I0t=s(H3e);tyr=r(I0t,"flaubert"),I0t.forEach(t),ayr=r(UBe," \u2014 "),vJ=n(UBe,"A",{href:!0});var N0t=s(vJ);nyr=r(N0t,"TFFlaubertForQuestionAnsweringSimple"),N0t.forEach(t),syr=r(UBe," (FlauBERT model)"),UBe.forEach(t),lyr=i(ge),dE=n(ge,"LI",{});var JBe=s(dE);U3e=n(JBe,"STRONG",{});var q0t=s(U3e);iyr=r(q0t,"funnel"),q0t.forEach(t),dyr=r(JBe," \u2014 "),FJ=n(JBe,"A",{href:!0});var j0t=s(FJ);cyr=r(j0t,"TFFunnelForQuestionAnswering"),j0t.forEach(t),fyr=r(JBe," (Funnel Transformer model)"),JBe.forEach(t),myr=i(ge),cE=n(ge,"LI",{});var YBe=s(cE);J3e=n(YBe,"STRONG",{});var D0t=s(J3e);gyr=r(D0t,"gptj"),D0t.forEach(t),hyr=r(YBe," \u2014 "),TJ=n(YBe,"A",{href:!0});var G0t=s(TJ);pyr=r(G0t,"TFGPTJForQuestionAnswering"),G0t.forEach(t),_yr=r(YBe," (GPT-J model)"),YBe.forEach(t),uyr=i(ge),fE=n(ge,"LI",{});var KBe=s(fE);Y3e=n(KBe,"STRONG",{});var O0t=s(Y3e);byr=r(O0t,"longformer"),O0t.forEach(t),vyr=r(KBe," \u2014 "),MJ=n(KBe,"A",{href:!0});var V0t=s(MJ);Fyr=r(V0t,"TFLongformerForQuestionAnswering"),V0t.forEach(t),Tyr=r(KBe," (Longformer model)"),KBe.forEach(t),Myr=i(ge),mE=n(ge,"LI",{});var ZBe=s(mE);K3e=n(ZBe,"STRONG",{});var X0t=s(K3e);Eyr=r(X0t,"mobilebert"),X0t.forEach(t),Cyr=r(ZBe," \u2014 "),EJ=n(ZBe,"A",{href:!0});var z0t=s(EJ);wyr=r(z0t,"TFMobileBertForQuestionAnswering"),z0t.forEach(t),Ayr=r(ZBe," (MobileBERT model)"),ZBe.forEach(t),yyr=i(ge),gE=n(ge,"LI",{});var eIe=s(gE);Z3e=n(eIe,"STRONG",{});var W0t=s(Z3e);Lyr=r(W0t,"mpnet"),W0t.forEach(t),xyr=r(eIe," \u2014 "),CJ=n(eIe,"A",{href:!0});var Q0t=s(CJ);$yr=r(Q0t,"TFMPNetForQuestionAnswering"),Q0t.forEach(t),kyr=r(eIe," (MPNet model)"),eIe.forEach(t),Syr=i(ge),hE=n(ge,"LI",{});var oIe=s(hE);eFe=n(oIe,"STRONG",{});var H0t=s(eFe);Ryr=r(H0t,"rembert"),H0t.forEach(t),Pyr=r(oIe," \u2014 "),wJ=n(oIe,"A",{href:!0});var U0t=s(wJ);Byr=r(U0t,"TFRemBertForQuestionAnswering"),U0t.forEach(t),Iyr=r(oIe," (RemBERT model)"),oIe.forEach(t),Nyr=i(ge),pE=n(ge,"LI",{});var rIe=s(pE);oFe=n(rIe,"STRONG",{});var J0t=s(oFe);qyr=r(J0t,"roberta"),J0t.forEach(t),jyr=r(rIe," \u2014 "),AJ=n(rIe,"A",{href:!0});var Y0t=s(AJ);Dyr=r(Y0t,"TFRobertaForQuestionAnswering"),Y0t.forEach(t),Gyr=r(rIe," (RoBERTa model)"),rIe.forEach(t),Oyr=i(ge),_E=n(ge,"LI",{});var tIe=s(_E);rFe=n(tIe,"STRONG",{});var K0t=s(rFe);Vyr=r(K0t,"roformer"),K0t.forEach(t),Xyr=r(tIe," \u2014 "),yJ=n(tIe,"A",{href:!0});var Z0t=s(yJ);zyr=r(Z0t,"TFRoFormerForQuestionAnswering"),Z0t.forEach(t),Wyr=r(tIe," (RoFormer model)"),tIe.forEach(t),Qyr=i(ge),uE=n(ge,"LI",{});var aIe=s(uE);tFe=n(aIe,"STRONG",{});var eAt=s(tFe);Hyr=r(eAt,"xlm"),eAt.forEach(t),Uyr=r(aIe," \u2014 "),LJ=n(aIe,"A",{href:!0});var oAt=s(LJ);Jyr=r(oAt,"TFXLMForQuestionAnsweringSimple"),oAt.forEach(t),Yyr=r(aIe," (XLM model)"),aIe.forEach(t),Kyr=i(ge),bE=n(ge,"LI",{});var nIe=s(bE);aFe=n(nIe,"STRONG",{});var rAt=s(aFe);Zyr=r(rAt,"xlm-roberta"),rAt.forEach(t),eLr=r(nIe," \u2014 "),xJ=n(nIe,"A",{href:!0});var tAt=s(xJ);oLr=r(tAt,"TFXLMRobertaForQuestionAnswering"),tAt.forEach(t),rLr=r(nIe," (XLM-RoBERTa model)"),nIe.forEach(t),tLr=i(ge),vE=n(ge,"LI",{});var sIe=s(vE);nFe=n(sIe,"STRONG",{});var aAt=s(nFe);aLr=r(aAt,"xlnet"),aAt.forEach(t),nLr=r(sIe," \u2014 "),$J=n(sIe,"A",{href:!0});var nAt=s($J);sLr=r(nAt,"TFXLNetForQuestionAnsweringSimple"),nAt.forEach(t),lLr=r(sIe," (XLNet model)"),sIe.forEach(t),ge.forEach(t),iLr=i(Il),T(FE.$$.fragment,Il),Il.forEach(t),Bl.forEach(t),Bje=i(f),Ec=n(f,"H2",{class:!0});var OGe=s(Ec);TE=n(OGe,"A",{id:!0,class:!0,href:!0});var sAt=s(TE);sFe=n(sAt,"SPAN",{});var lAt=s(sFe);T(u9.$$.fragment,lAt),lAt.forEach(t),sAt.forEach(t),dLr=i(OGe),lFe=n(OGe,"SPAN",{});var iAt=s(lFe);cLr=r(iAt,"TFAutoModelForVision2Seq"),iAt.forEach(t),OGe.forEach(t),Ije=i(f),dr=n(f,"DIV",{class:!0});var Nl=s(dr);T(b9.$$.fragment,Nl),fLr=i(Nl),Cc=n(Nl,"P",{});var Iee=s(Cc);mLr=r(Iee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),kJ=n(Iee,"A",{href:!0});var dAt=s(kJ);gLr=r(dAt,"from_pretrained()"),dAt.forEach(t),hLr=r(Iee," class method or the "),SJ=n(Iee,"A",{href:!0});var cAt=s(SJ);pLr=r(cAt,"from_config()"),cAt.forEach(t),_Lr=r(Iee,` class
method.`),Iee.forEach(t),uLr=i(Nl),v9=n(Nl,"P",{});var VGe=s(v9);bLr=r(VGe,"This class cannot be instantiated directly using "),iFe=n(VGe,"CODE",{});var fAt=s(iFe);vLr=r(fAt,"__init__()"),fAt.forEach(t),FLr=r(VGe," (throws an error)."),VGe.forEach(t),TLr=i(Nl),jt=n(Nl,"DIV",{class:!0});var YA=s(jt);T(F9.$$.fragment,YA),MLr=i(YA),dFe=n(YA,"P",{});var mAt=s(dFe);ELr=r(mAt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),mAt.forEach(t),CLr=i(YA),wc=n(YA,"P",{});var Nee=s(wc);wLr=r(Nee,`Note:
Loading a model from its configuration file does `),cFe=n(Nee,"STRONG",{});var gAt=s(cFe);ALr=r(gAt,"not"),gAt.forEach(t),yLr=r(Nee,` load the model weights. It only affects the
model\u2019s configuration. Use `),RJ=n(Nee,"A",{href:!0});var hAt=s(RJ);LLr=r(hAt,"from_pretrained()"),hAt.forEach(t),xLr=r(Nee," to load the model weights."),Nee.forEach(t),$Lr=i(YA),T(ME.$$.fragment,YA),YA.forEach(t),kLr=i(Nl),Nr=n(Nl,"DIV",{class:!0});var ql=s(Nr);T(T9.$$.fragment,ql),SLr=i(ql),fFe=n(ql,"P",{});var pAt=s(fFe);RLr=r(pAt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),pAt.forEach(t),PLr=i(ql),mn=n(ql,"P",{});var KA=s(mn);BLr=r(KA,"The model class to instantiate is selected based on the "),mFe=n(KA,"CODE",{});var _At=s(mFe);ILr=r(_At,"model_type"),_At.forEach(t),NLr=r(KA,` property of the config object (either
passed as an argument or loaded from `),gFe=n(KA,"CODE",{});var uAt=s(gFe);qLr=r(uAt,"pretrained_model_name_or_path"),uAt.forEach(t),jLr=r(KA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hFe=n(KA,"CODE",{});var bAt=s(hFe);DLr=r(bAt,"pretrained_model_name_or_path"),bAt.forEach(t),GLr=r(KA,":"),KA.forEach(t),OLr=i(ql),pFe=n(ql,"UL",{});var vAt=s(pFe);EE=n(vAt,"LI",{});var lIe=s(EE);_Fe=n(lIe,"STRONG",{});var FAt=s(_Fe);VLr=r(FAt,"vision-encoder-decoder"),FAt.forEach(t),XLr=r(lIe," \u2014 "),PJ=n(lIe,"A",{href:!0});var TAt=s(PJ);zLr=r(TAt,"TFVisionEncoderDecoderModel"),TAt.forEach(t),WLr=r(lIe," (Vision Encoder decoder model)"),lIe.forEach(t),vAt.forEach(t),QLr=i(ql),T(CE.$$.fragment,ql),ql.forEach(t),Nl.forEach(t),Nje=i(f),Ac=n(f,"H2",{class:!0});var XGe=s(Ac);wE=n(XGe,"A",{id:!0,class:!0,href:!0});var MAt=s(wE);uFe=n(MAt,"SPAN",{});var EAt=s(uFe);T(M9.$$.fragment,EAt),EAt.forEach(t),MAt.forEach(t),HLr=i(XGe),bFe=n(XGe,"SPAN",{});var CAt=s(bFe);ULr=r(CAt,"TFAutoModelForSpeechSeq2Seq"),CAt.forEach(t),XGe.forEach(t),qje=i(f),cr=n(f,"DIV",{class:!0});var jl=s(cr);T(E9.$$.fragment,jl),JLr=i(jl),yc=n(jl,"P",{});var qee=s(yc);YLr=r(qee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),BJ=n(qee,"A",{href:!0});var wAt=s(BJ);KLr=r(wAt,"from_pretrained()"),wAt.forEach(t),ZLr=r(qee," class method or the "),IJ=n(qee,"A",{href:!0});var AAt=s(IJ);e8r=r(AAt,"from_config()"),AAt.forEach(t),o8r=r(qee,` class
method.`),qee.forEach(t),r8r=i(jl),C9=n(jl,"P",{});var zGe=s(C9);t8r=r(zGe,"This class cannot be instantiated directly using "),vFe=n(zGe,"CODE",{});var yAt=s(vFe);a8r=r(yAt,"__init__()"),yAt.forEach(t),n8r=r(zGe," (throws an error)."),zGe.forEach(t),s8r=i(jl),Dt=n(jl,"DIV",{class:!0});var ZA=s(Dt);T(w9.$$.fragment,ZA),l8r=i(ZA),FFe=n(ZA,"P",{});var LAt=s(FFe);i8r=r(LAt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),LAt.forEach(t),d8r=i(ZA),Lc=n(ZA,"P",{});var jee=s(Lc);c8r=r(jee,`Note:
Loading a model from its configuration file does `),TFe=n(jee,"STRONG",{});var xAt=s(TFe);f8r=r(xAt,"not"),xAt.forEach(t),m8r=r(jee,` load the model weights. It only affects the
model\u2019s configuration. Use `),NJ=n(jee,"A",{href:!0});var $At=s(NJ);g8r=r($At,"from_pretrained()"),$At.forEach(t),h8r=r(jee," to load the model weights."),jee.forEach(t),p8r=i(ZA),T(AE.$$.fragment,ZA),ZA.forEach(t),_8r=i(jl),qr=n(jl,"DIV",{class:!0});var Dl=s(qr);T(A9.$$.fragment,Dl),u8r=i(Dl),MFe=n(Dl,"P",{});var kAt=s(MFe);b8r=r(kAt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),kAt.forEach(t),v8r=i(Dl),gn=n(Dl,"P",{});var ey=s(gn);F8r=r(ey,"The model class to instantiate is selected based on the "),EFe=n(ey,"CODE",{});var SAt=s(EFe);T8r=r(SAt,"model_type"),SAt.forEach(t),M8r=r(ey,` property of the config object (either
passed as an argument or loaded from `),CFe=n(ey,"CODE",{});var RAt=s(CFe);E8r=r(RAt,"pretrained_model_name_or_path"),RAt.forEach(t),C8r=r(ey,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wFe=n(ey,"CODE",{});var PAt=s(wFe);w8r=r(PAt,"pretrained_model_name_or_path"),PAt.forEach(t),A8r=r(ey,":"),ey.forEach(t),y8r=i(Dl),AFe=n(Dl,"UL",{});var BAt=s(AFe);yE=n(BAt,"LI",{});var iIe=s(yE);yFe=n(iIe,"STRONG",{});var IAt=s(yFe);L8r=r(IAt,"speech_to_text"),IAt.forEach(t),x8r=r(iIe," \u2014 "),qJ=n(iIe,"A",{href:!0});var NAt=s(qJ);$8r=r(NAt,"TFSpeech2TextForConditionalGeneration"),NAt.forEach(t),k8r=r(iIe," (Speech2Text model)"),iIe.forEach(t),BAt.forEach(t),S8r=i(Dl),T(LE.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),jje=i(f),xc=n(f,"H2",{class:!0});var WGe=s(xc);xE=n(WGe,"A",{id:!0,class:!0,href:!0});var qAt=s(xE);LFe=n(qAt,"SPAN",{});var jAt=s(LFe);T(y9.$$.fragment,jAt),jAt.forEach(t),qAt.forEach(t),R8r=i(WGe),xFe=n(WGe,"SPAN",{});var DAt=s(xFe);P8r=r(DAt,"FlaxAutoModel"),DAt.forEach(t),WGe.forEach(t),Dje=i(f),fr=n(f,"DIV",{class:!0});var Gl=s(fr);T(L9.$$.fragment,Gl),B8r=i(Gl),$c=n(Gl,"P",{});var Dee=s($c);I8r=r(Dee,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),jJ=n(Dee,"A",{href:!0});var GAt=s(jJ);N8r=r(GAt,"from_pretrained()"),GAt.forEach(t),q8r=r(Dee," class method or the "),DJ=n(Dee,"A",{href:!0});var OAt=s(DJ);j8r=r(OAt,"from_config()"),OAt.forEach(t),D8r=r(Dee,` class
method.`),Dee.forEach(t),G8r=i(Gl),x9=n(Gl,"P",{});var QGe=s(x9);O8r=r(QGe,"This class cannot be instantiated directly using "),$Fe=n(QGe,"CODE",{});var VAt=s($Fe);V8r=r(VAt,"__init__()"),VAt.forEach(t),X8r=r(QGe," (throws an error)."),QGe.forEach(t),z8r=i(Gl),Gt=n(Gl,"DIV",{class:!0});var oy=s(Gt);T($9.$$.fragment,oy),W8r=i(oy),kFe=n(oy,"P",{});var XAt=s(kFe);Q8r=r(XAt,"Instantiates one of the base model classes of the library from a configuration."),XAt.forEach(t),H8r=i(oy),kc=n(oy,"P",{});var Gee=s(kc);U8r=r(Gee,`Note:
Loading a model from its configuration file does `),SFe=n(Gee,"STRONG",{});var zAt=s(SFe);J8r=r(zAt,"not"),zAt.forEach(t),Y8r=r(Gee,` load the model weights. It only affects the
model\u2019s configuration. Use `),GJ=n(Gee,"A",{href:!0});var WAt=s(GJ);K8r=r(WAt,"from_pretrained()"),WAt.forEach(t),Z8r=r(Gee," to load the model weights."),Gee.forEach(t),e7r=i(oy),T($E.$$.fragment,oy),oy.forEach(t),o7r=i(Gl),jr=n(Gl,"DIV",{class:!0});var Ol=s(jr);T(k9.$$.fragment,Ol),r7r=i(Ol),RFe=n(Ol,"P",{});var QAt=s(RFe);t7r=r(QAt,"Instantiate one of the base model classes of the library from a pretrained model."),QAt.forEach(t),a7r=i(Ol),hn=n(Ol,"P",{});var ry=s(hn);n7r=r(ry,"The model class to instantiate is selected based on the "),PFe=n(ry,"CODE",{});var HAt=s(PFe);s7r=r(HAt,"model_type"),HAt.forEach(t),l7r=r(ry,` property of the config object (either
passed as an argument or loaded from `),BFe=n(ry,"CODE",{});var UAt=s(BFe);i7r=r(UAt,"pretrained_model_name_or_path"),UAt.forEach(t),d7r=r(ry,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),IFe=n(ry,"CODE",{});var JAt=s(IFe);c7r=r(JAt,"pretrained_model_name_or_path"),JAt.forEach(t),f7r=r(ry,":"),ry.forEach(t),m7r=i(Ol),te=n(Ol,"UL",{});var ne=s(te);kE=n(ne,"LI",{});var dIe=s(kE);NFe=n(dIe,"STRONG",{});var YAt=s(NFe);g7r=r(YAt,"albert"),YAt.forEach(t),h7r=r(dIe," \u2014 "),OJ=n(dIe,"A",{href:!0});var KAt=s(OJ);p7r=r(KAt,"FlaxAlbertModel"),KAt.forEach(t),_7r=r(dIe," (ALBERT model)"),dIe.forEach(t),u7r=i(ne),SE=n(ne,"LI",{});var cIe=s(SE);qFe=n(cIe,"STRONG",{});var ZAt=s(qFe);b7r=r(ZAt,"bart"),ZAt.forEach(t),v7r=r(cIe," \u2014 "),VJ=n(cIe,"A",{href:!0});var eyt=s(VJ);F7r=r(eyt,"FlaxBartModel"),eyt.forEach(t),T7r=r(cIe," (BART model)"),cIe.forEach(t),M7r=i(ne),RE=n(ne,"LI",{});var fIe=s(RE);jFe=n(fIe,"STRONG",{});var oyt=s(jFe);E7r=r(oyt,"beit"),oyt.forEach(t),C7r=r(fIe," \u2014 "),XJ=n(fIe,"A",{href:!0});var ryt=s(XJ);w7r=r(ryt,"FlaxBeitModel"),ryt.forEach(t),A7r=r(fIe," (BEiT model)"),fIe.forEach(t),y7r=i(ne),PE=n(ne,"LI",{});var mIe=s(PE);DFe=n(mIe,"STRONG",{});var tyt=s(DFe);L7r=r(tyt,"bert"),tyt.forEach(t),x7r=r(mIe," \u2014 "),zJ=n(mIe,"A",{href:!0});var ayt=s(zJ);$7r=r(ayt,"FlaxBertModel"),ayt.forEach(t),k7r=r(mIe," (BERT model)"),mIe.forEach(t),S7r=i(ne),BE=n(ne,"LI",{});var gIe=s(BE);GFe=n(gIe,"STRONG",{});var nyt=s(GFe);R7r=r(nyt,"big_bird"),nyt.forEach(t),P7r=r(gIe," \u2014 "),WJ=n(gIe,"A",{href:!0});var syt=s(WJ);B7r=r(syt,"FlaxBigBirdModel"),syt.forEach(t),I7r=r(gIe," (BigBird model)"),gIe.forEach(t),N7r=i(ne),IE=n(ne,"LI",{});var hIe=s(IE);OFe=n(hIe,"STRONG",{});var lyt=s(OFe);q7r=r(lyt,"blenderbot"),lyt.forEach(t),j7r=r(hIe," \u2014 "),QJ=n(hIe,"A",{href:!0});var iyt=s(QJ);D7r=r(iyt,"FlaxBlenderbotModel"),iyt.forEach(t),G7r=r(hIe," (Blenderbot model)"),hIe.forEach(t),O7r=i(ne),NE=n(ne,"LI",{});var pIe=s(NE);VFe=n(pIe,"STRONG",{});var dyt=s(VFe);V7r=r(dyt,"blenderbot-small"),dyt.forEach(t),X7r=r(pIe," \u2014 "),HJ=n(pIe,"A",{href:!0});var cyt=s(HJ);z7r=r(cyt,"FlaxBlenderbotSmallModel"),cyt.forEach(t),W7r=r(pIe," (BlenderbotSmall model)"),pIe.forEach(t),Q7r=i(ne),qE=n(ne,"LI",{});var _Ie=s(qE);XFe=n(_Ie,"STRONG",{});var fyt=s(XFe);H7r=r(fyt,"clip"),fyt.forEach(t),U7r=r(_Ie," \u2014 "),UJ=n(_Ie,"A",{href:!0});var myt=s(UJ);J7r=r(myt,"FlaxCLIPModel"),myt.forEach(t),Y7r=r(_Ie," (CLIP model)"),_Ie.forEach(t),K7r=i(ne),jE=n(ne,"LI",{});var uIe=s(jE);zFe=n(uIe,"STRONG",{});var gyt=s(zFe);Z7r=r(gyt,"distilbert"),gyt.forEach(t),e9r=r(uIe," \u2014 "),JJ=n(uIe,"A",{href:!0});var hyt=s(JJ);o9r=r(hyt,"FlaxDistilBertModel"),hyt.forEach(t),r9r=r(uIe," (DistilBERT model)"),uIe.forEach(t),t9r=i(ne),DE=n(ne,"LI",{});var bIe=s(DE);WFe=n(bIe,"STRONG",{});var pyt=s(WFe);a9r=r(pyt,"electra"),pyt.forEach(t),n9r=r(bIe," \u2014 "),YJ=n(bIe,"A",{href:!0});var _yt=s(YJ);s9r=r(_yt,"FlaxElectraModel"),_yt.forEach(t),l9r=r(bIe," (ELECTRA model)"),bIe.forEach(t),i9r=i(ne),GE=n(ne,"LI",{});var vIe=s(GE);QFe=n(vIe,"STRONG",{});var uyt=s(QFe);d9r=r(uyt,"gpt2"),uyt.forEach(t),c9r=r(vIe," \u2014 "),KJ=n(vIe,"A",{href:!0});var byt=s(KJ);f9r=r(byt,"FlaxGPT2Model"),byt.forEach(t),m9r=r(vIe," (OpenAI GPT-2 model)"),vIe.forEach(t),g9r=i(ne),OE=n(ne,"LI",{});var FIe=s(OE);HFe=n(FIe,"STRONG",{});var vyt=s(HFe);h9r=r(vyt,"gpt_neo"),vyt.forEach(t),p9r=r(FIe," \u2014 "),ZJ=n(FIe,"A",{href:!0});var Fyt=s(ZJ);_9r=r(Fyt,"FlaxGPTNeoModel"),Fyt.forEach(t),u9r=r(FIe," (GPT Neo model)"),FIe.forEach(t),b9r=i(ne),VE=n(ne,"LI",{});var TIe=s(VE);UFe=n(TIe,"STRONG",{});var Tyt=s(UFe);v9r=r(Tyt,"gptj"),Tyt.forEach(t),F9r=r(TIe," \u2014 "),eY=n(TIe,"A",{href:!0});var Myt=s(eY);T9r=r(Myt,"FlaxGPTJModel"),Myt.forEach(t),M9r=r(TIe," (GPT-J model)"),TIe.forEach(t),E9r=i(ne),XE=n(ne,"LI",{});var MIe=s(XE);JFe=n(MIe,"STRONG",{});var Eyt=s(JFe);C9r=r(Eyt,"marian"),Eyt.forEach(t),w9r=r(MIe," \u2014 "),oY=n(MIe,"A",{href:!0});var Cyt=s(oY);A9r=r(Cyt,"FlaxMarianModel"),Cyt.forEach(t),y9r=r(MIe," (Marian model)"),MIe.forEach(t),L9r=i(ne),zE=n(ne,"LI",{});var EIe=s(zE);YFe=n(EIe,"STRONG",{});var wyt=s(YFe);x9r=r(wyt,"mbart"),wyt.forEach(t),$9r=r(EIe," \u2014 "),rY=n(EIe,"A",{href:!0});var Ayt=s(rY);k9r=r(Ayt,"FlaxMBartModel"),Ayt.forEach(t),S9r=r(EIe," (mBART model)"),EIe.forEach(t),R9r=i(ne),WE=n(ne,"LI",{});var CIe=s(WE);KFe=n(CIe,"STRONG",{});var yyt=s(KFe);P9r=r(yyt,"mt5"),yyt.forEach(t),B9r=r(CIe," \u2014 "),tY=n(CIe,"A",{href:!0});var Lyt=s(tY);I9r=r(Lyt,"FlaxMT5Model"),Lyt.forEach(t),N9r=r(CIe," (mT5 model)"),CIe.forEach(t),q9r=i(ne),QE=n(ne,"LI",{});var wIe=s(QE);ZFe=n(wIe,"STRONG",{});var xyt=s(ZFe);j9r=r(xyt,"pegasus"),xyt.forEach(t),D9r=r(wIe," \u2014 "),aY=n(wIe,"A",{href:!0});var $yt=s(aY);G9r=r($yt,"FlaxPegasusModel"),$yt.forEach(t),O9r=r(wIe," (Pegasus model)"),wIe.forEach(t),V9r=i(ne),HE=n(ne,"LI",{});var AIe=s(HE);e6e=n(AIe,"STRONG",{});var kyt=s(e6e);X9r=r(kyt,"roberta"),kyt.forEach(t),z9r=r(AIe," \u2014 "),nY=n(AIe,"A",{href:!0});var Syt=s(nY);W9r=r(Syt,"FlaxRobertaModel"),Syt.forEach(t),Q9r=r(AIe," (RoBERTa model)"),AIe.forEach(t),H9r=i(ne),UE=n(ne,"LI",{});var yIe=s(UE);o6e=n(yIe,"STRONG",{});var Ryt=s(o6e);U9r=r(Ryt,"roformer"),Ryt.forEach(t),J9r=r(yIe," \u2014 "),sY=n(yIe,"A",{href:!0});var Pyt=s(sY);Y9r=r(Pyt,"FlaxRoFormerModel"),Pyt.forEach(t),K9r=r(yIe," (RoFormer model)"),yIe.forEach(t),Z9r=i(ne),JE=n(ne,"LI",{});var LIe=s(JE);r6e=n(LIe,"STRONG",{});var Byt=s(r6e);exr=r(Byt,"t5"),Byt.forEach(t),oxr=r(LIe," \u2014 "),lY=n(LIe,"A",{href:!0});var Iyt=s(lY);rxr=r(Iyt,"FlaxT5Model"),Iyt.forEach(t),txr=r(LIe," (T5 model)"),LIe.forEach(t),axr=i(ne),YE=n(ne,"LI",{});var xIe=s(YE);t6e=n(xIe,"STRONG",{});var Nyt=s(t6e);nxr=r(Nyt,"vision-text-dual-encoder"),Nyt.forEach(t),sxr=r(xIe," \u2014 "),iY=n(xIe,"A",{href:!0});var qyt=s(iY);lxr=r(qyt,"FlaxVisionTextDualEncoderModel"),qyt.forEach(t),ixr=r(xIe," (VisionTextDualEncoder model)"),xIe.forEach(t),dxr=i(ne),KE=n(ne,"LI",{});var $Ie=s(KE);a6e=n($Ie,"STRONG",{});var jyt=s(a6e);cxr=r(jyt,"vit"),jyt.forEach(t),fxr=r($Ie," \u2014 "),dY=n($Ie,"A",{href:!0});var Dyt=s(dY);mxr=r(Dyt,"FlaxViTModel"),Dyt.forEach(t),gxr=r($Ie," (ViT model)"),$Ie.forEach(t),hxr=i(ne),ZE=n(ne,"LI",{});var kIe=s(ZE);n6e=n(kIe,"STRONG",{});var Gyt=s(n6e);pxr=r(Gyt,"wav2vec2"),Gyt.forEach(t),_xr=r(kIe," \u2014 "),cY=n(kIe,"A",{href:!0});var Oyt=s(cY);uxr=r(Oyt,"FlaxWav2Vec2Model"),Oyt.forEach(t),bxr=r(kIe," (Wav2Vec2 model)"),kIe.forEach(t),vxr=i(ne),eC=n(ne,"LI",{});var SIe=s(eC);s6e=n(SIe,"STRONG",{});var Vyt=s(s6e);Fxr=r(Vyt,"xglm"),Vyt.forEach(t),Txr=r(SIe," \u2014 "),fY=n(SIe,"A",{href:!0});var Xyt=s(fY);Mxr=r(Xyt,"FlaxXGLMModel"),Xyt.forEach(t),Exr=r(SIe," (XGLM model)"),SIe.forEach(t),Cxr=i(ne),oC=n(ne,"LI",{});var RIe=s(oC);l6e=n(RIe,"STRONG",{});var zyt=s(l6e);wxr=r(zyt,"xlm-roberta"),zyt.forEach(t),Axr=r(RIe," \u2014 "),mY=n(RIe,"A",{href:!0});var Wyt=s(mY);yxr=r(Wyt,"FlaxXLMRobertaModel"),Wyt.forEach(t),Lxr=r(RIe," (XLM-RoBERTa model)"),RIe.forEach(t),ne.forEach(t),xxr=i(Ol),T(rC.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),Gje=i(f),Sc=n(f,"H2",{class:!0});var HGe=s(Sc);tC=n(HGe,"A",{id:!0,class:!0,href:!0});var Qyt=s(tC);i6e=n(Qyt,"SPAN",{});var Hyt=s(i6e);T(S9.$$.fragment,Hyt),Hyt.forEach(t),Qyt.forEach(t),$xr=i(HGe),d6e=n(HGe,"SPAN",{});var Uyt=s(d6e);kxr=r(Uyt,"FlaxAutoModelForCausalLM"),Uyt.forEach(t),HGe.forEach(t),Oje=i(f),mr=n(f,"DIV",{class:!0});var Vl=s(mr);T(R9.$$.fragment,Vl),Sxr=i(Vl),Rc=n(Vl,"P",{});var Oee=s(Rc);Rxr=r(Oee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),gY=n(Oee,"A",{href:!0});var Jyt=s(gY);Pxr=r(Jyt,"from_pretrained()"),Jyt.forEach(t),Bxr=r(Oee," class method or the "),hY=n(Oee,"A",{href:!0});var Yyt=s(hY);Ixr=r(Yyt,"from_config()"),Yyt.forEach(t),Nxr=r(Oee,` class
method.`),Oee.forEach(t),qxr=i(Vl),P9=n(Vl,"P",{});var UGe=s(P9);jxr=r(UGe,"This class cannot be instantiated directly using "),c6e=n(UGe,"CODE",{});var Kyt=s(c6e);Dxr=r(Kyt,"__init__()"),Kyt.forEach(t),Gxr=r(UGe," (throws an error)."),UGe.forEach(t),Oxr=i(Vl),Ot=n(Vl,"DIV",{class:!0});var ty=s(Ot);T(B9.$$.fragment,ty),Vxr=i(ty),f6e=n(ty,"P",{});var Zyt=s(f6e);Xxr=r(Zyt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Zyt.forEach(t),zxr=i(ty),Pc=n(ty,"P",{});var Vee=s(Pc);Wxr=r(Vee,`Note:
Loading a model from its configuration file does `),m6e=n(Vee,"STRONG",{});var eLt=s(m6e);Qxr=r(eLt,"not"),eLt.forEach(t),Hxr=r(Vee,` load the model weights. It only affects the
model\u2019s configuration. Use `),pY=n(Vee,"A",{href:!0});var oLt=s(pY);Uxr=r(oLt,"from_pretrained()"),oLt.forEach(t),Jxr=r(Vee," to load the model weights."),Vee.forEach(t),Yxr=i(ty),T(aC.$$.fragment,ty),ty.forEach(t),Kxr=i(Vl),Dr=n(Vl,"DIV",{class:!0});var Xl=s(Dr);T(I9.$$.fragment,Xl),Zxr=i(Xl),g6e=n(Xl,"P",{});var rLt=s(g6e);e$r=r(rLt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),rLt.forEach(t),o$r=i(Xl),pn=n(Xl,"P",{});var ay=s(pn);r$r=r(ay,"The model class to instantiate is selected based on the "),h6e=n(ay,"CODE",{});var tLt=s(h6e);t$r=r(tLt,"model_type"),tLt.forEach(t),a$r=r(ay,` property of the config object (either
passed as an argument or loaded from `),p6e=n(ay,"CODE",{});var aLt=s(p6e);n$r=r(aLt,"pretrained_model_name_or_path"),aLt.forEach(t),s$r=r(ay,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_6e=n(ay,"CODE",{});var nLt=s(_6e);l$r=r(nLt,"pretrained_model_name_or_path"),nLt.forEach(t),i$r=r(ay,":"),ay.forEach(t),d$r=i(Xl),Re=n(Xl,"UL",{});var Xe=s(Re);nC=n(Xe,"LI",{});var PIe=s(nC);u6e=n(PIe,"STRONG",{});var sLt=s(u6e);c$r=r(sLt,"bart"),sLt.forEach(t),f$r=r(PIe," \u2014 "),_Y=n(PIe,"A",{href:!0});var lLt=s(_Y);m$r=r(lLt,"FlaxBartForCausalLM"),lLt.forEach(t),g$r=r(PIe," (BART model)"),PIe.forEach(t),h$r=i(Xe),sC=n(Xe,"LI",{});var BIe=s(sC);b6e=n(BIe,"STRONG",{});var iLt=s(b6e);p$r=r(iLt,"bert"),iLt.forEach(t),_$r=r(BIe," \u2014 "),uY=n(BIe,"A",{href:!0});var dLt=s(uY);u$r=r(dLt,"FlaxBertForCausalLM"),dLt.forEach(t),b$r=r(BIe," (BERT model)"),BIe.forEach(t),v$r=i(Xe),lC=n(Xe,"LI",{});var IIe=s(lC);v6e=n(IIe,"STRONG",{});var cLt=s(v6e);F$r=r(cLt,"big_bird"),cLt.forEach(t),T$r=r(IIe," \u2014 "),bY=n(IIe,"A",{href:!0});var fLt=s(bY);M$r=r(fLt,"FlaxBigBirdForCausalLM"),fLt.forEach(t),E$r=r(IIe," (BigBird model)"),IIe.forEach(t),C$r=i(Xe),iC=n(Xe,"LI",{});var NIe=s(iC);F6e=n(NIe,"STRONG",{});var mLt=s(F6e);w$r=r(mLt,"electra"),mLt.forEach(t),A$r=r(NIe," \u2014 "),vY=n(NIe,"A",{href:!0});var gLt=s(vY);y$r=r(gLt,"FlaxElectraForCausalLM"),gLt.forEach(t),L$r=r(NIe," (ELECTRA model)"),NIe.forEach(t),x$r=i(Xe),dC=n(Xe,"LI",{});var qIe=s(dC);T6e=n(qIe,"STRONG",{});var hLt=s(T6e);$$r=r(hLt,"gpt2"),hLt.forEach(t),k$r=r(qIe," \u2014 "),FY=n(qIe,"A",{href:!0});var pLt=s(FY);S$r=r(pLt,"FlaxGPT2LMHeadModel"),pLt.forEach(t),R$r=r(qIe," (OpenAI GPT-2 model)"),qIe.forEach(t),P$r=i(Xe),cC=n(Xe,"LI",{});var jIe=s(cC);M6e=n(jIe,"STRONG",{});var _Lt=s(M6e);B$r=r(_Lt,"gpt_neo"),_Lt.forEach(t),I$r=r(jIe," \u2014 "),TY=n(jIe,"A",{href:!0});var uLt=s(TY);N$r=r(uLt,"FlaxGPTNeoForCausalLM"),uLt.forEach(t),q$r=r(jIe," (GPT Neo model)"),jIe.forEach(t),j$r=i(Xe),fC=n(Xe,"LI",{});var DIe=s(fC);E6e=n(DIe,"STRONG",{});var bLt=s(E6e);D$r=r(bLt,"gptj"),bLt.forEach(t),G$r=r(DIe," \u2014 "),MY=n(DIe,"A",{href:!0});var vLt=s(MY);O$r=r(vLt,"FlaxGPTJForCausalLM"),vLt.forEach(t),V$r=r(DIe," (GPT-J model)"),DIe.forEach(t),X$r=i(Xe),mC=n(Xe,"LI",{});var GIe=s(mC);C6e=n(GIe,"STRONG",{});var FLt=s(C6e);z$r=r(FLt,"roberta"),FLt.forEach(t),W$r=r(GIe," \u2014 "),EY=n(GIe,"A",{href:!0});var TLt=s(EY);Q$r=r(TLt,"FlaxRobertaForCausalLM"),TLt.forEach(t),H$r=r(GIe," (RoBERTa model)"),GIe.forEach(t),U$r=i(Xe),gC=n(Xe,"LI",{});var OIe=s(gC);w6e=n(OIe,"STRONG",{});var MLt=s(w6e);J$r=r(MLt,"xglm"),MLt.forEach(t),Y$r=r(OIe," \u2014 "),CY=n(OIe,"A",{href:!0});var ELt=s(CY);K$r=r(ELt,"FlaxXGLMForCausalLM"),ELt.forEach(t),Z$r=r(OIe," (XGLM model)"),OIe.forEach(t),Xe.forEach(t),ekr=i(Xl),T(hC.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),Vje=i(f),Bc=n(f,"H2",{class:!0});var JGe=s(Bc);pC=n(JGe,"A",{id:!0,class:!0,href:!0});var CLt=s(pC);A6e=n(CLt,"SPAN",{});var wLt=s(A6e);T(N9.$$.fragment,wLt),wLt.forEach(t),CLt.forEach(t),okr=i(JGe),y6e=n(JGe,"SPAN",{});var ALt=s(y6e);rkr=r(ALt,"FlaxAutoModelForPreTraining"),ALt.forEach(t),JGe.forEach(t),Xje=i(f),gr=n(f,"DIV",{class:!0});var zl=s(gr);T(q9.$$.fragment,zl),tkr=i(zl),Ic=n(zl,"P",{});var Xee=s(Ic);akr=r(Xee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),wY=n(Xee,"A",{href:!0});var yLt=s(wY);nkr=r(yLt,"from_pretrained()"),yLt.forEach(t),skr=r(Xee," class method or the "),AY=n(Xee,"A",{href:!0});var LLt=s(AY);lkr=r(LLt,"from_config()"),LLt.forEach(t),ikr=r(Xee,` class
method.`),Xee.forEach(t),dkr=i(zl),j9=n(zl,"P",{});var YGe=s(j9);ckr=r(YGe,"This class cannot be instantiated directly using "),L6e=n(YGe,"CODE",{});var xLt=s(L6e);fkr=r(xLt,"__init__()"),xLt.forEach(t),mkr=r(YGe," (throws an error)."),YGe.forEach(t),gkr=i(zl),Vt=n(zl,"DIV",{class:!0});var ny=s(Vt);T(D9.$$.fragment,ny),hkr=i(ny),x6e=n(ny,"P",{});var $Lt=s(x6e);pkr=r($Lt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),$Lt.forEach(t),_kr=i(ny),Nc=n(ny,"P",{});var zee=s(Nc);ukr=r(zee,`Note:
Loading a model from its configuration file does `),$6e=n(zee,"STRONG",{});var kLt=s($6e);bkr=r(kLt,"not"),kLt.forEach(t),vkr=r(zee,` load the model weights. It only affects the
model\u2019s configuration. Use `),yY=n(zee,"A",{href:!0});var SLt=s(yY);Fkr=r(SLt,"from_pretrained()"),SLt.forEach(t),Tkr=r(zee," to load the model weights."),zee.forEach(t),Mkr=i(ny),T(_C.$$.fragment,ny),ny.forEach(t),Ekr=i(zl),Gr=n(zl,"DIV",{class:!0});var Wl=s(Gr);T(G9.$$.fragment,Wl),Ckr=i(Wl),k6e=n(Wl,"P",{});var RLt=s(k6e);wkr=r(RLt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),RLt.forEach(t),Akr=i(Wl),_n=n(Wl,"P",{});var sy=s(_n);ykr=r(sy,"The model class to instantiate is selected based on the "),S6e=n(sy,"CODE",{});var PLt=s(S6e);Lkr=r(PLt,"model_type"),PLt.forEach(t),xkr=r(sy,` property of the config object (either
passed as an argument or loaded from `),R6e=n(sy,"CODE",{});var BLt=s(R6e);$kr=r(BLt,"pretrained_model_name_or_path"),BLt.forEach(t),kkr=r(sy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P6e=n(sy,"CODE",{});var ILt=s(P6e);Skr=r(ILt,"pretrained_model_name_or_path"),ILt.forEach(t),Rkr=r(sy,":"),sy.forEach(t),Pkr=i(Wl),Ee=n(Wl,"UL",{});var we=s(Ee);uC=n(we,"LI",{});var VIe=s(uC);B6e=n(VIe,"STRONG",{});var NLt=s(B6e);Bkr=r(NLt,"albert"),NLt.forEach(t),Ikr=r(VIe," \u2014 "),LY=n(VIe,"A",{href:!0});var qLt=s(LY);Nkr=r(qLt,"FlaxAlbertForPreTraining"),qLt.forEach(t),qkr=r(VIe," (ALBERT model)"),VIe.forEach(t),jkr=i(we),bC=n(we,"LI",{});var XIe=s(bC);I6e=n(XIe,"STRONG",{});var jLt=s(I6e);Dkr=r(jLt,"bart"),jLt.forEach(t),Gkr=r(XIe," \u2014 "),xY=n(XIe,"A",{href:!0});var DLt=s(xY);Okr=r(DLt,"FlaxBartForConditionalGeneration"),DLt.forEach(t),Vkr=r(XIe," (BART model)"),XIe.forEach(t),Xkr=i(we),vC=n(we,"LI",{});var zIe=s(vC);N6e=n(zIe,"STRONG",{});var GLt=s(N6e);zkr=r(GLt,"bert"),GLt.forEach(t),Wkr=r(zIe," \u2014 "),$Y=n(zIe,"A",{href:!0});var OLt=s($Y);Qkr=r(OLt,"FlaxBertForPreTraining"),OLt.forEach(t),Hkr=r(zIe," (BERT model)"),zIe.forEach(t),Ukr=i(we),FC=n(we,"LI",{});var WIe=s(FC);q6e=n(WIe,"STRONG",{});var VLt=s(q6e);Jkr=r(VLt,"big_bird"),VLt.forEach(t),Ykr=r(WIe," \u2014 "),kY=n(WIe,"A",{href:!0});var XLt=s(kY);Kkr=r(XLt,"FlaxBigBirdForPreTraining"),XLt.forEach(t),Zkr=r(WIe," (BigBird model)"),WIe.forEach(t),eSr=i(we),TC=n(we,"LI",{});var QIe=s(TC);j6e=n(QIe,"STRONG",{});var zLt=s(j6e);oSr=r(zLt,"electra"),zLt.forEach(t),rSr=r(QIe," \u2014 "),SY=n(QIe,"A",{href:!0});var WLt=s(SY);tSr=r(WLt,"FlaxElectraForPreTraining"),WLt.forEach(t),aSr=r(QIe," (ELECTRA model)"),QIe.forEach(t),nSr=i(we),MC=n(we,"LI",{});var HIe=s(MC);D6e=n(HIe,"STRONG",{});var QLt=s(D6e);sSr=r(QLt,"mbart"),QLt.forEach(t),lSr=r(HIe," \u2014 "),RY=n(HIe,"A",{href:!0});var HLt=s(RY);iSr=r(HLt,"FlaxMBartForConditionalGeneration"),HLt.forEach(t),dSr=r(HIe," (mBART model)"),HIe.forEach(t),cSr=i(we),EC=n(we,"LI",{});var UIe=s(EC);G6e=n(UIe,"STRONG",{});var ULt=s(G6e);fSr=r(ULt,"mt5"),ULt.forEach(t),mSr=r(UIe," \u2014 "),PY=n(UIe,"A",{href:!0});var JLt=s(PY);gSr=r(JLt,"FlaxMT5ForConditionalGeneration"),JLt.forEach(t),hSr=r(UIe," (mT5 model)"),UIe.forEach(t),pSr=i(we),CC=n(we,"LI",{});var JIe=s(CC);O6e=n(JIe,"STRONG",{});var YLt=s(O6e);_Sr=r(YLt,"roberta"),YLt.forEach(t),uSr=r(JIe," \u2014 "),BY=n(JIe,"A",{href:!0});var KLt=s(BY);bSr=r(KLt,"FlaxRobertaForMaskedLM"),KLt.forEach(t),vSr=r(JIe," (RoBERTa model)"),JIe.forEach(t),FSr=i(we),wC=n(we,"LI",{});var YIe=s(wC);V6e=n(YIe,"STRONG",{});var ZLt=s(V6e);TSr=r(ZLt,"roformer"),ZLt.forEach(t),MSr=r(YIe," \u2014 "),IY=n(YIe,"A",{href:!0});var e8t=s(IY);ESr=r(e8t,"FlaxRoFormerForMaskedLM"),e8t.forEach(t),CSr=r(YIe," (RoFormer model)"),YIe.forEach(t),wSr=i(we),AC=n(we,"LI",{});var KIe=s(AC);X6e=n(KIe,"STRONG",{});var o8t=s(X6e);ASr=r(o8t,"t5"),o8t.forEach(t),ySr=r(KIe," \u2014 "),NY=n(KIe,"A",{href:!0});var r8t=s(NY);LSr=r(r8t,"FlaxT5ForConditionalGeneration"),r8t.forEach(t),xSr=r(KIe," (T5 model)"),KIe.forEach(t),$Sr=i(we),yC=n(we,"LI",{});var ZIe=s(yC);z6e=n(ZIe,"STRONG",{});var t8t=s(z6e);kSr=r(t8t,"wav2vec2"),t8t.forEach(t),SSr=r(ZIe," \u2014 "),qY=n(ZIe,"A",{href:!0});var a8t=s(qY);RSr=r(a8t,"FlaxWav2Vec2ForPreTraining"),a8t.forEach(t),PSr=r(ZIe," (Wav2Vec2 model)"),ZIe.forEach(t),BSr=i(we),LC=n(we,"LI",{});var eNe=s(LC);W6e=n(eNe,"STRONG",{});var n8t=s(W6e);ISr=r(n8t,"xlm-roberta"),n8t.forEach(t),NSr=r(eNe," \u2014 "),jY=n(eNe,"A",{href:!0});var s8t=s(jY);qSr=r(s8t,"FlaxXLMRobertaForMaskedLM"),s8t.forEach(t),jSr=r(eNe," (XLM-RoBERTa model)"),eNe.forEach(t),we.forEach(t),DSr=i(Wl),T(xC.$$.fragment,Wl),Wl.forEach(t),zl.forEach(t),zje=i(f),qc=n(f,"H2",{class:!0});var KGe=s(qc);$C=n(KGe,"A",{id:!0,class:!0,href:!0});var l8t=s($C);Q6e=n(l8t,"SPAN",{});var i8t=s(Q6e);T(O9.$$.fragment,i8t),i8t.forEach(t),l8t.forEach(t),GSr=i(KGe),H6e=n(KGe,"SPAN",{});var d8t=s(H6e);OSr=r(d8t,"FlaxAutoModelForMaskedLM"),d8t.forEach(t),KGe.forEach(t),Wje=i(f),hr=n(f,"DIV",{class:!0});var Ql=s(hr);T(V9.$$.fragment,Ql),VSr=i(Ql),jc=n(Ql,"P",{});var Wee=s(jc);XSr=r(Wee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),DY=n(Wee,"A",{href:!0});var c8t=s(DY);zSr=r(c8t,"from_pretrained()"),c8t.forEach(t),WSr=r(Wee," class method or the "),GY=n(Wee,"A",{href:!0});var f8t=s(GY);QSr=r(f8t,"from_config()"),f8t.forEach(t),HSr=r(Wee,` class
method.`),Wee.forEach(t),USr=i(Ql),X9=n(Ql,"P",{});var ZGe=s(X9);JSr=r(ZGe,"This class cannot be instantiated directly using "),U6e=n(ZGe,"CODE",{});var m8t=s(U6e);YSr=r(m8t,"__init__()"),m8t.forEach(t),KSr=r(ZGe," (throws an error)."),ZGe.forEach(t),ZSr=i(Ql),Xt=n(Ql,"DIV",{class:!0});var ly=s(Xt);T(z9.$$.fragment,ly),eRr=i(ly),J6e=n(ly,"P",{});var g8t=s(J6e);oRr=r(g8t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),g8t.forEach(t),rRr=i(ly),Dc=n(ly,"P",{});var Qee=s(Dc);tRr=r(Qee,`Note:
Loading a model from its configuration file does `),Y6e=n(Qee,"STRONG",{});var h8t=s(Y6e);aRr=r(h8t,"not"),h8t.forEach(t),nRr=r(Qee,` load the model weights. It only affects the
model\u2019s configuration. Use `),OY=n(Qee,"A",{href:!0});var p8t=s(OY);sRr=r(p8t,"from_pretrained()"),p8t.forEach(t),lRr=r(Qee," to load the model weights."),Qee.forEach(t),iRr=i(ly),T(kC.$$.fragment,ly),ly.forEach(t),dRr=i(Ql),Or=n(Ql,"DIV",{class:!0});var Hl=s(Or);T(W9.$$.fragment,Hl),cRr=i(Hl),K6e=n(Hl,"P",{});var _8t=s(K6e);fRr=r(_8t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),_8t.forEach(t),mRr=i(Hl),un=n(Hl,"P",{});var iy=s(un);gRr=r(iy,"The model class to instantiate is selected based on the "),Z6e=n(iy,"CODE",{});var u8t=s(Z6e);hRr=r(u8t,"model_type"),u8t.forEach(t),pRr=r(iy,` property of the config object (either
passed as an argument or loaded from `),eTe=n(iy,"CODE",{});var b8t=s(eTe);_Rr=r(b8t,"pretrained_model_name_or_path"),b8t.forEach(t),uRr=r(iy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oTe=n(iy,"CODE",{});var v8t=s(oTe);bRr=r(v8t,"pretrained_model_name_or_path"),v8t.forEach(t),vRr=r(iy,":"),iy.forEach(t),FRr=i(Hl),Le=n(Hl,"UL",{});var Ie=s(Le);SC=n(Ie,"LI",{});var oNe=s(SC);rTe=n(oNe,"STRONG",{});var F8t=s(rTe);TRr=r(F8t,"albert"),F8t.forEach(t),MRr=r(oNe," \u2014 "),VY=n(oNe,"A",{href:!0});var T8t=s(VY);ERr=r(T8t,"FlaxAlbertForMaskedLM"),T8t.forEach(t),CRr=r(oNe," (ALBERT model)"),oNe.forEach(t),wRr=i(Ie),RC=n(Ie,"LI",{});var rNe=s(RC);tTe=n(rNe,"STRONG",{});var M8t=s(tTe);ARr=r(M8t,"bart"),M8t.forEach(t),yRr=r(rNe," \u2014 "),XY=n(rNe,"A",{href:!0});var E8t=s(XY);LRr=r(E8t,"FlaxBartForConditionalGeneration"),E8t.forEach(t),xRr=r(rNe," (BART model)"),rNe.forEach(t),$Rr=i(Ie),PC=n(Ie,"LI",{});var tNe=s(PC);aTe=n(tNe,"STRONG",{});var C8t=s(aTe);kRr=r(C8t,"bert"),C8t.forEach(t),SRr=r(tNe," \u2014 "),zY=n(tNe,"A",{href:!0});var w8t=s(zY);RRr=r(w8t,"FlaxBertForMaskedLM"),w8t.forEach(t),PRr=r(tNe," (BERT model)"),tNe.forEach(t),BRr=i(Ie),BC=n(Ie,"LI",{});var aNe=s(BC);nTe=n(aNe,"STRONG",{});var A8t=s(nTe);IRr=r(A8t,"big_bird"),A8t.forEach(t),NRr=r(aNe," \u2014 "),WY=n(aNe,"A",{href:!0});var y8t=s(WY);qRr=r(y8t,"FlaxBigBirdForMaskedLM"),y8t.forEach(t),jRr=r(aNe," (BigBird model)"),aNe.forEach(t),DRr=i(Ie),IC=n(Ie,"LI",{});var nNe=s(IC);sTe=n(nNe,"STRONG",{});var L8t=s(sTe);GRr=r(L8t,"distilbert"),L8t.forEach(t),ORr=r(nNe," \u2014 "),QY=n(nNe,"A",{href:!0});var x8t=s(QY);VRr=r(x8t,"FlaxDistilBertForMaskedLM"),x8t.forEach(t),XRr=r(nNe," (DistilBERT model)"),nNe.forEach(t),zRr=i(Ie),NC=n(Ie,"LI",{});var sNe=s(NC);lTe=n(sNe,"STRONG",{});var $8t=s(lTe);WRr=r($8t,"electra"),$8t.forEach(t),QRr=r(sNe," \u2014 "),HY=n(sNe,"A",{href:!0});var k8t=s(HY);HRr=r(k8t,"FlaxElectraForMaskedLM"),k8t.forEach(t),URr=r(sNe," (ELECTRA model)"),sNe.forEach(t),JRr=i(Ie),qC=n(Ie,"LI",{});var lNe=s(qC);iTe=n(lNe,"STRONG",{});var S8t=s(iTe);YRr=r(S8t,"mbart"),S8t.forEach(t),KRr=r(lNe," \u2014 "),UY=n(lNe,"A",{href:!0});var R8t=s(UY);ZRr=r(R8t,"FlaxMBartForConditionalGeneration"),R8t.forEach(t),ePr=r(lNe," (mBART model)"),lNe.forEach(t),oPr=i(Ie),jC=n(Ie,"LI",{});var iNe=s(jC);dTe=n(iNe,"STRONG",{});var P8t=s(dTe);rPr=r(P8t,"roberta"),P8t.forEach(t),tPr=r(iNe," \u2014 "),JY=n(iNe,"A",{href:!0});var B8t=s(JY);aPr=r(B8t,"FlaxRobertaForMaskedLM"),B8t.forEach(t),nPr=r(iNe," (RoBERTa model)"),iNe.forEach(t),sPr=i(Ie),DC=n(Ie,"LI",{});var dNe=s(DC);cTe=n(dNe,"STRONG",{});var I8t=s(cTe);lPr=r(I8t,"roformer"),I8t.forEach(t),iPr=r(dNe," \u2014 "),YY=n(dNe,"A",{href:!0});var N8t=s(YY);dPr=r(N8t,"FlaxRoFormerForMaskedLM"),N8t.forEach(t),cPr=r(dNe," (RoFormer model)"),dNe.forEach(t),fPr=i(Ie),GC=n(Ie,"LI",{});var cNe=s(GC);fTe=n(cNe,"STRONG",{});var q8t=s(fTe);mPr=r(q8t,"xlm-roberta"),q8t.forEach(t),gPr=r(cNe," \u2014 "),KY=n(cNe,"A",{href:!0});var j8t=s(KY);hPr=r(j8t,"FlaxXLMRobertaForMaskedLM"),j8t.forEach(t),pPr=r(cNe," (XLM-RoBERTa model)"),cNe.forEach(t),Ie.forEach(t),_Pr=i(Hl),T(OC.$$.fragment,Hl),Hl.forEach(t),Ql.forEach(t),Qje=i(f),Gc=n(f,"H2",{class:!0});var eOe=s(Gc);VC=n(eOe,"A",{id:!0,class:!0,href:!0});var D8t=s(VC);mTe=n(D8t,"SPAN",{});var G8t=s(mTe);T(Q9.$$.fragment,G8t),G8t.forEach(t),D8t.forEach(t),uPr=i(eOe),gTe=n(eOe,"SPAN",{});var O8t=s(gTe);bPr=r(O8t,"FlaxAutoModelForSeq2SeqLM"),O8t.forEach(t),eOe.forEach(t),Hje=i(f),pr=n(f,"DIV",{class:!0});var Ul=s(pr);T(H9.$$.fragment,Ul),vPr=i(Ul),Oc=n(Ul,"P",{});var Hee=s(Oc);FPr=r(Hee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),ZY=n(Hee,"A",{href:!0});var V8t=s(ZY);TPr=r(V8t,"from_pretrained()"),V8t.forEach(t),MPr=r(Hee," class method or the "),eK=n(Hee,"A",{href:!0});var X8t=s(eK);EPr=r(X8t,"from_config()"),X8t.forEach(t),CPr=r(Hee,` class
method.`),Hee.forEach(t),wPr=i(Ul),U9=n(Ul,"P",{});var oOe=s(U9);APr=r(oOe,"This class cannot be instantiated directly using "),hTe=n(oOe,"CODE",{});var z8t=s(hTe);yPr=r(z8t,"__init__()"),z8t.forEach(t),LPr=r(oOe," (throws an error)."),oOe.forEach(t),xPr=i(Ul),zt=n(Ul,"DIV",{class:!0});var dy=s(zt);T(J9.$$.fragment,dy),$Pr=i(dy),pTe=n(dy,"P",{});var W8t=s(pTe);kPr=r(W8t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),W8t.forEach(t),SPr=i(dy),Vc=n(dy,"P",{});var Uee=s(Vc);RPr=r(Uee,`Note:
Loading a model from its configuration file does `),_Te=n(Uee,"STRONG",{});var Q8t=s(_Te);PPr=r(Q8t,"not"),Q8t.forEach(t),BPr=r(Uee,` load the model weights. It only affects the
model\u2019s configuration. Use `),oK=n(Uee,"A",{href:!0});var H8t=s(oK);IPr=r(H8t,"from_pretrained()"),H8t.forEach(t),NPr=r(Uee," to load the model weights."),Uee.forEach(t),qPr=i(dy),T(XC.$$.fragment,dy),dy.forEach(t),jPr=i(Ul),Vr=n(Ul,"DIV",{class:!0});var Jl=s(Vr);T(Y9.$$.fragment,Jl),DPr=i(Jl),uTe=n(Jl,"P",{});var U8t=s(uTe);GPr=r(U8t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),U8t.forEach(t),OPr=i(Jl),bn=n(Jl,"P",{});var cy=s(bn);VPr=r(cy,"The model class to instantiate is selected based on the "),bTe=n(cy,"CODE",{});var J8t=s(bTe);XPr=r(J8t,"model_type"),J8t.forEach(t),zPr=r(cy,` property of the config object (either
passed as an argument or loaded from `),vTe=n(cy,"CODE",{});var Y8t=s(vTe);WPr=r(Y8t,"pretrained_model_name_or_path"),Y8t.forEach(t),QPr=r(cy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FTe=n(cy,"CODE",{});var K8t=s(FTe);HPr=r(K8t,"pretrained_model_name_or_path"),K8t.forEach(t),UPr=r(cy,":"),cy.forEach(t),JPr=i(Jl),Pe=n(Jl,"UL",{});var ze=s(Pe);zC=n(ze,"LI",{});var fNe=s(zC);TTe=n(fNe,"STRONG",{});var Z8t=s(TTe);YPr=r(Z8t,"bart"),Z8t.forEach(t),KPr=r(fNe," \u2014 "),rK=n(fNe,"A",{href:!0});var e7t=s(rK);ZPr=r(e7t,"FlaxBartForConditionalGeneration"),e7t.forEach(t),eBr=r(fNe," (BART model)"),fNe.forEach(t),oBr=i(ze),WC=n(ze,"LI",{});var mNe=s(WC);MTe=n(mNe,"STRONG",{});var o7t=s(MTe);rBr=r(o7t,"blenderbot"),o7t.forEach(t),tBr=r(mNe," \u2014 "),tK=n(mNe,"A",{href:!0});var r7t=s(tK);aBr=r(r7t,"FlaxBlenderbotForConditionalGeneration"),r7t.forEach(t),nBr=r(mNe," (Blenderbot model)"),mNe.forEach(t),sBr=i(ze),QC=n(ze,"LI",{});var gNe=s(QC);ETe=n(gNe,"STRONG",{});var t7t=s(ETe);lBr=r(t7t,"blenderbot-small"),t7t.forEach(t),iBr=r(gNe," \u2014 "),aK=n(gNe,"A",{href:!0});var a7t=s(aK);dBr=r(a7t,"FlaxBlenderbotSmallForConditionalGeneration"),a7t.forEach(t),cBr=r(gNe," (BlenderbotSmall model)"),gNe.forEach(t),fBr=i(ze),HC=n(ze,"LI",{});var hNe=s(HC);CTe=n(hNe,"STRONG",{});var n7t=s(CTe);mBr=r(n7t,"encoder-decoder"),n7t.forEach(t),gBr=r(hNe," \u2014 "),nK=n(hNe,"A",{href:!0});var s7t=s(nK);hBr=r(s7t,"FlaxEncoderDecoderModel"),s7t.forEach(t),pBr=r(hNe," (Encoder decoder model)"),hNe.forEach(t),_Br=i(ze),UC=n(ze,"LI",{});var pNe=s(UC);wTe=n(pNe,"STRONG",{});var l7t=s(wTe);uBr=r(l7t,"marian"),l7t.forEach(t),bBr=r(pNe," \u2014 "),sK=n(pNe,"A",{href:!0});var i7t=s(sK);vBr=r(i7t,"FlaxMarianMTModel"),i7t.forEach(t),FBr=r(pNe," (Marian model)"),pNe.forEach(t),TBr=i(ze),JC=n(ze,"LI",{});var _Ne=s(JC);ATe=n(_Ne,"STRONG",{});var d7t=s(ATe);MBr=r(d7t,"mbart"),d7t.forEach(t),EBr=r(_Ne," \u2014 "),lK=n(_Ne,"A",{href:!0});var c7t=s(lK);CBr=r(c7t,"FlaxMBartForConditionalGeneration"),c7t.forEach(t),wBr=r(_Ne," (mBART model)"),_Ne.forEach(t),ABr=i(ze),YC=n(ze,"LI",{});var uNe=s(YC);yTe=n(uNe,"STRONG",{});var f7t=s(yTe);yBr=r(f7t,"mt5"),f7t.forEach(t),LBr=r(uNe," \u2014 "),iK=n(uNe,"A",{href:!0});var m7t=s(iK);xBr=r(m7t,"FlaxMT5ForConditionalGeneration"),m7t.forEach(t),$Br=r(uNe," (mT5 model)"),uNe.forEach(t),kBr=i(ze),KC=n(ze,"LI",{});var bNe=s(KC);LTe=n(bNe,"STRONG",{});var g7t=s(LTe);SBr=r(g7t,"pegasus"),g7t.forEach(t),RBr=r(bNe," \u2014 "),dK=n(bNe,"A",{href:!0});var h7t=s(dK);PBr=r(h7t,"FlaxPegasusForConditionalGeneration"),h7t.forEach(t),BBr=r(bNe," (Pegasus model)"),bNe.forEach(t),IBr=i(ze),ZC=n(ze,"LI",{});var vNe=s(ZC);xTe=n(vNe,"STRONG",{});var p7t=s(xTe);NBr=r(p7t,"t5"),p7t.forEach(t),qBr=r(vNe," \u2014 "),cK=n(vNe,"A",{href:!0});var _7t=s(cK);jBr=r(_7t,"FlaxT5ForConditionalGeneration"),_7t.forEach(t),DBr=r(vNe," (T5 model)"),vNe.forEach(t),ze.forEach(t),GBr=i(Jl),T(ew.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),Uje=i(f),Xc=n(f,"H2",{class:!0});var rOe=s(Xc);ow=n(rOe,"A",{id:!0,class:!0,href:!0});var u7t=s(ow);$Te=n(u7t,"SPAN",{});var b7t=s($Te);T(K9.$$.fragment,b7t),b7t.forEach(t),u7t.forEach(t),OBr=i(rOe),kTe=n(rOe,"SPAN",{});var v7t=s(kTe);VBr=r(v7t,"FlaxAutoModelForSequenceClassification"),v7t.forEach(t),rOe.forEach(t),Jje=i(f),_r=n(f,"DIV",{class:!0});var Yl=s(_r);T(Z9.$$.fragment,Yl),XBr=i(Yl),zc=n(Yl,"P",{});var Jee=s(zc);zBr=r(Jee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),fK=n(Jee,"A",{href:!0});var F7t=s(fK);WBr=r(F7t,"from_pretrained()"),F7t.forEach(t),QBr=r(Jee," class method or the "),mK=n(Jee,"A",{href:!0});var T7t=s(mK);HBr=r(T7t,"from_config()"),T7t.forEach(t),UBr=r(Jee,` class
method.`),Jee.forEach(t),JBr=i(Yl),ex=n(Yl,"P",{});var tOe=s(ex);YBr=r(tOe,"This class cannot be instantiated directly using "),STe=n(tOe,"CODE",{});var M7t=s(STe);KBr=r(M7t,"__init__()"),M7t.forEach(t),ZBr=r(tOe," (throws an error)."),tOe.forEach(t),eIr=i(Yl),Wt=n(Yl,"DIV",{class:!0});var fy=s(Wt);T(ox.$$.fragment,fy),oIr=i(fy),RTe=n(fy,"P",{});var E7t=s(RTe);rIr=r(E7t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),E7t.forEach(t),tIr=i(fy),Wc=n(fy,"P",{});var Yee=s(Wc);aIr=r(Yee,`Note:
Loading a model from its configuration file does `),PTe=n(Yee,"STRONG",{});var C7t=s(PTe);nIr=r(C7t,"not"),C7t.forEach(t),sIr=r(Yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),gK=n(Yee,"A",{href:!0});var w7t=s(gK);lIr=r(w7t,"from_pretrained()"),w7t.forEach(t),iIr=r(Yee," to load the model weights."),Yee.forEach(t),dIr=i(fy),T(rw.$$.fragment,fy),fy.forEach(t),cIr=i(Yl),Xr=n(Yl,"DIV",{class:!0});var Kl=s(Xr);T(rx.$$.fragment,Kl),fIr=i(Kl),BTe=n(Kl,"P",{});var A7t=s(BTe);mIr=r(A7t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),A7t.forEach(t),gIr=i(Kl),vn=n(Kl,"P",{});var my=s(vn);hIr=r(my,"The model class to instantiate is selected based on the "),ITe=n(my,"CODE",{});var y7t=s(ITe);pIr=r(y7t,"model_type"),y7t.forEach(t),_Ir=r(my,` property of the config object (either
passed as an argument or loaded from `),NTe=n(my,"CODE",{});var L7t=s(NTe);uIr=r(L7t,"pretrained_model_name_or_path"),L7t.forEach(t),bIr=r(my,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qTe=n(my,"CODE",{});var x7t=s(qTe);vIr=r(x7t,"pretrained_model_name_or_path"),x7t.forEach(t),FIr=r(my,":"),my.forEach(t),TIr=i(Kl),xe=n(Kl,"UL",{});var Ne=s(xe);tw=n(Ne,"LI",{});var FNe=s(tw);jTe=n(FNe,"STRONG",{});var $7t=s(jTe);MIr=r($7t,"albert"),$7t.forEach(t),EIr=r(FNe," \u2014 "),hK=n(FNe,"A",{href:!0});var k7t=s(hK);CIr=r(k7t,"FlaxAlbertForSequenceClassification"),k7t.forEach(t),wIr=r(FNe," (ALBERT model)"),FNe.forEach(t),AIr=i(Ne),aw=n(Ne,"LI",{});var TNe=s(aw);DTe=n(TNe,"STRONG",{});var S7t=s(DTe);yIr=r(S7t,"bart"),S7t.forEach(t),LIr=r(TNe," \u2014 "),pK=n(TNe,"A",{href:!0});var R7t=s(pK);xIr=r(R7t,"FlaxBartForSequenceClassification"),R7t.forEach(t),$Ir=r(TNe," (BART model)"),TNe.forEach(t),kIr=i(Ne),nw=n(Ne,"LI",{});var MNe=s(nw);GTe=n(MNe,"STRONG",{});var P7t=s(GTe);SIr=r(P7t,"bert"),P7t.forEach(t),RIr=r(MNe," \u2014 "),_K=n(MNe,"A",{href:!0});var B7t=s(_K);PIr=r(B7t,"FlaxBertForSequenceClassification"),B7t.forEach(t),BIr=r(MNe," (BERT model)"),MNe.forEach(t),IIr=i(Ne),sw=n(Ne,"LI",{});var ENe=s(sw);OTe=n(ENe,"STRONG",{});var I7t=s(OTe);NIr=r(I7t,"big_bird"),I7t.forEach(t),qIr=r(ENe," \u2014 "),uK=n(ENe,"A",{href:!0});var N7t=s(uK);jIr=r(N7t,"FlaxBigBirdForSequenceClassification"),N7t.forEach(t),DIr=r(ENe," (BigBird model)"),ENe.forEach(t),GIr=i(Ne),lw=n(Ne,"LI",{});var CNe=s(lw);VTe=n(CNe,"STRONG",{});var q7t=s(VTe);OIr=r(q7t,"distilbert"),q7t.forEach(t),VIr=r(CNe," \u2014 "),bK=n(CNe,"A",{href:!0});var j7t=s(bK);XIr=r(j7t,"FlaxDistilBertForSequenceClassification"),j7t.forEach(t),zIr=r(CNe," (DistilBERT model)"),CNe.forEach(t),WIr=i(Ne),iw=n(Ne,"LI",{});var wNe=s(iw);XTe=n(wNe,"STRONG",{});var D7t=s(XTe);QIr=r(D7t,"electra"),D7t.forEach(t),HIr=r(wNe," \u2014 "),vK=n(wNe,"A",{href:!0});var G7t=s(vK);UIr=r(G7t,"FlaxElectraForSequenceClassification"),G7t.forEach(t),JIr=r(wNe," (ELECTRA model)"),wNe.forEach(t),YIr=i(Ne),dw=n(Ne,"LI",{});var ANe=s(dw);zTe=n(ANe,"STRONG",{});var O7t=s(zTe);KIr=r(O7t,"mbart"),O7t.forEach(t),ZIr=r(ANe," \u2014 "),FK=n(ANe,"A",{href:!0});var V7t=s(FK);eNr=r(V7t,"FlaxMBartForSequenceClassification"),V7t.forEach(t),oNr=r(ANe," (mBART model)"),ANe.forEach(t),rNr=i(Ne),cw=n(Ne,"LI",{});var yNe=s(cw);WTe=n(yNe,"STRONG",{});var X7t=s(WTe);tNr=r(X7t,"roberta"),X7t.forEach(t),aNr=r(yNe," \u2014 "),TK=n(yNe,"A",{href:!0});var z7t=s(TK);nNr=r(z7t,"FlaxRobertaForSequenceClassification"),z7t.forEach(t),sNr=r(yNe," (RoBERTa model)"),yNe.forEach(t),lNr=i(Ne),fw=n(Ne,"LI",{});var LNe=s(fw);QTe=n(LNe,"STRONG",{});var W7t=s(QTe);iNr=r(W7t,"roformer"),W7t.forEach(t),dNr=r(LNe," \u2014 "),MK=n(LNe,"A",{href:!0});var Q7t=s(MK);cNr=r(Q7t,"FlaxRoFormerForSequenceClassification"),Q7t.forEach(t),fNr=r(LNe," (RoFormer model)"),LNe.forEach(t),mNr=i(Ne),mw=n(Ne,"LI",{});var xNe=s(mw);HTe=n(xNe,"STRONG",{});var H7t=s(HTe);gNr=r(H7t,"xlm-roberta"),H7t.forEach(t),hNr=r(xNe," \u2014 "),EK=n(xNe,"A",{href:!0});var U7t=s(EK);pNr=r(U7t,"FlaxXLMRobertaForSequenceClassification"),U7t.forEach(t),_Nr=r(xNe," (XLM-RoBERTa model)"),xNe.forEach(t),Ne.forEach(t),uNr=i(Kl),T(gw.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),Yje=i(f),Qc=n(f,"H2",{class:!0});var aOe=s(Qc);hw=n(aOe,"A",{id:!0,class:!0,href:!0});var J7t=s(hw);UTe=n(J7t,"SPAN",{});var Y7t=s(UTe);T(tx.$$.fragment,Y7t),Y7t.forEach(t),J7t.forEach(t),bNr=i(aOe),JTe=n(aOe,"SPAN",{});var K7t=s(JTe);vNr=r(K7t,"FlaxAutoModelForQuestionAnswering"),K7t.forEach(t),aOe.forEach(t),Kje=i(f),ur=n(f,"DIV",{class:!0});var Zl=s(ur);T(ax.$$.fragment,Zl),FNr=i(Zl),Hc=n(Zl,"P",{});var Kee=s(Hc);TNr=r(Kee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),CK=n(Kee,"A",{href:!0});var Z7t=s(CK);MNr=r(Z7t,"from_pretrained()"),Z7t.forEach(t),ENr=r(Kee," class method or the "),wK=n(Kee,"A",{href:!0});var e9t=s(wK);CNr=r(e9t,"from_config()"),e9t.forEach(t),wNr=r(Kee,` class
method.`),Kee.forEach(t),ANr=i(Zl),nx=n(Zl,"P",{});var nOe=s(nx);yNr=r(nOe,"This class cannot be instantiated directly using "),YTe=n(nOe,"CODE",{});var o9t=s(YTe);LNr=r(o9t,"__init__()"),o9t.forEach(t),xNr=r(nOe," (throws an error)."),nOe.forEach(t),$Nr=i(Zl),Qt=n(Zl,"DIV",{class:!0});var gy=s(Qt);T(sx.$$.fragment,gy),kNr=i(gy),KTe=n(gy,"P",{});var r9t=s(KTe);SNr=r(r9t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),r9t.forEach(t),RNr=i(gy),Uc=n(gy,"P",{});var Zee=s(Uc);PNr=r(Zee,`Note:
Loading a model from its configuration file does `),ZTe=n(Zee,"STRONG",{});var t9t=s(ZTe);BNr=r(t9t,"not"),t9t.forEach(t),INr=r(Zee,` load the model weights. It only affects the
model\u2019s configuration. Use `),AK=n(Zee,"A",{href:!0});var a9t=s(AK);NNr=r(a9t,"from_pretrained()"),a9t.forEach(t),qNr=r(Zee," to load the model weights."),Zee.forEach(t),jNr=i(gy),T(pw.$$.fragment,gy),gy.forEach(t),DNr=i(Zl),zr=n(Zl,"DIV",{class:!0});var ei=s(zr);T(lx.$$.fragment,ei),GNr=i(ei),eMe=n(ei,"P",{});var n9t=s(eMe);ONr=r(n9t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),n9t.forEach(t),VNr=i(ei),Fn=n(ei,"P",{});var hy=s(Fn);XNr=r(hy,"The model class to instantiate is selected based on the "),oMe=n(hy,"CODE",{});var s9t=s(oMe);zNr=r(s9t,"model_type"),s9t.forEach(t),WNr=r(hy,` property of the config object (either
passed as an argument or loaded from `),rMe=n(hy,"CODE",{});var l9t=s(rMe);QNr=r(l9t,"pretrained_model_name_or_path"),l9t.forEach(t),HNr=r(hy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tMe=n(hy,"CODE",{});var i9t=s(tMe);UNr=r(i9t,"pretrained_model_name_or_path"),i9t.forEach(t),JNr=r(hy,":"),hy.forEach(t),YNr=i(ei),$e=n(ei,"UL",{});var qe=s($e);_w=n(qe,"LI",{});var $Ne=s(_w);aMe=n($Ne,"STRONG",{});var d9t=s(aMe);KNr=r(d9t,"albert"),d9t.forEach(t),ZNr=r($Ne," \u2014 "),yK=n($Ne,"A",{href:!0});var c9t=s(yK);eqr=r(c9t,"FlaxAlbertForQuestionAnswering"),c9t.forEach(t),oqr=r($Ne," (ALBERT model)"),$Ne.forEach(t),rqr=i(qe),uw=n(qe,"LI",{});var kNe=s(uw);nMe=n(kNe,"STRONG",{});var f9t=s(nMe);tqr=r(f9t,"bart"),f9t.forEach(t),aqr=r(kNe," \u2014 "),LK=n(kNe,"A",{href:!0});var m9t=s(LK);nqr=r(m9t,"FlaxBartForQuestionAnswering"),m9t.forEach(t),sqr=r(kNe," (BART model)"),kNe.forEach(t),lqr=i(qe),bw=n(qe,"LI",{});var SNe=s(bw);sMe=n(SNe,"STRONG",{});var g9t=s(sMe);iqr=r(g9t,"bert"),g9t.forEach(t),dqr=r(SNe," \u2014 "),xK=n(SNe,"A",{href:!0});var h9t=s(xK);cqr=r(h9t,"FlaxBertForQuestionAnswering"),h9t.forEach(t),fqr=r(SNe," (BERT model)"),SNe.forEach(t),mqr=i(qe),vw=n(qe,"LI",{});var RNe=s(vw);lMe=n(RNe,"STRONG",{});var p9t=s(lMe);gqr=r(p9t,"big_bird"),p9t.forEach(t),hqr=r(RNe," \u2014 "),$K=n(RNe,"A",{href:!0});var _9t=s($K);pqr=r(_9t,"FlaxBigBirdForQuestionAnswering"),_9t.forEach(t),_qr=r(RNe," (BigBird model)"),RNe.forEach(t),uqr=i(qe),Fw=n(qe,"LI",{});var PNe=s(Fw);iMe=n(PNe,"STRONG",{});var u9t=s(iMe);bqr=r(u9t,"distilbert"),u9t.forEach(t),vqr=r(PNe," \u2014 "),kK=n(PNe,"A",{href:!0});var b9t=s(kK);Fqr=r(b9t,"FlaxDistilBertForQuestionAnswering"),b9t.forEach(t),Tqr=r(PNe," (DistilBERT model)"),PNe.forEach(t),Mqr=i(qe),Tw=n(qe,"LI",{});var BNe=s(Tw);dMe=n(BNe,"STRONG",{});var v9t=s(dMe);Eqr=r(v9t,"electra"),v9t.forEach(t),Cqr=r(BNe," \u2014 "),SK=n(BNe,"A",{href:!0});var F9t=s(SK);wqr=r(F9t,"FlaxElectraForQuestionAnswering"),F9t.forEach(t),Aqr=r(BNe," (ELECTRA model)"),BNe.forEach(t),yqr=i(qe),Mw=n(qe,"LI",{});var INe=s(Mw);cMe=n(INe,"STRONG",{});var T9t=s(cMe);Lqr=r(T9t,"mbart"),T9t.forEach(t),xqr=r(INe," \u2014 "),RK=n(INe,"A",{href:!0});var M9t=s(RK);$qr=r(M9t,"FlaxMBartForQuestionAnswering"),M9t.forEach(t),kqr=r(INe," (mBART model)"),INe.forEach(t),Sqr=i(qe),Ew=n(qe,"LI",{});var NNe=s(Ew);fMe=n(NNe,"STRONG",{});var E9t=s(fMe);Rqr=r(E9t,"roberta"),E9t.forEach(t),Pqr=r(NNe," \u2014 "),PK=n(NNe,"A",{href:!0});var C9t=s(PK);Bqr=r(C9t,"FlaxRobertaForQuestionAnswering"),C9t.forEach(t),Iqr=r(NNe," (RoBERTa model)"),NNe.forEach(t),Nqr=i(qe),Cw=n(qe,"LI",{});var qNe=s(Cw);mMe=n(qNe,"STRONG",{});var w9t=s(mMe);qqr=r(w9t,"roformer"),w9t.forEach(t),jqr=r(qNe," \u2014 "),BK=n(qNe,"A",{href:!0});var A9t=s(BK);Dqr=r(A9t,"FlaxRoFormerForQuestionAnswering"),A9t.forEach(t),Gqr=r(qNe," (RoFormer model)"),qNe.forEach(t),Oqr=i(qe),ww=n(qe,"LI",{});var jNe=s(ww);gMe=n(jNe,"STRONG",{});var y9t=s(gMe);Vqr=r(y9t,"xlm-roberta"),y9t.forEach(t),Xqr=r(jNe," \u2014 "),IK=n(jNe,"A",{href:!0});var L9t=s(IK);zqr=r(L9t,"FlaxXLMRobertaForQuestionAnswering"),L9t.forEach(t),Wqr=r(jNe," (XLM-RoBERTa model)"),jNe.forEach(t),qe.forEach(t),Qqr=i(ei),T(Aw.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),Zje=i(f),Jc=n(f,"H2",{class:!0});var sOe=s(Jc);yw=n(sOe,"A",{id:!0,class:!0,href:!0});var x9t=s(yw);hMe=n(x9t,"SPAN",{});var $9t=s(hMe);T(ix.$$.fragment,$9t),$9t.forEach(t),x9t.forEach(t),Hqr=i(sOe),pMe=n(sOe,"SPAN",{});var k9t=s(pMe);Uqr=r(k9t,"FlaxAutoModelForTokenClassification"),k9t.forEach(t),sOe.forEach(t),eDe=i(f),br=n(f,"DIV",{class:!0});var oi=s(br);T(dx.$$.fragment,oi),Jqr=i(oi),Yc=n(oi,"P",{});var eoe=s(Yc);Yqr=r(eoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),NK=n(eoe,"A",{href:!0});var S9t=s(NK);Kqr=r(S9t,"from_pretrained()"),S9t.forEach(t),Zqr=r(eoe," class method or the "),qK=n(eoe,"A",{href:!0});var R9t=s(qK);ejr=r(R9t,"from_config()"),R9t.forEach(t),ojr=r(eoe,` class
method.`),eoe.forEach(t),rjr=i(oi),cx=n(oi,"P",{});var lOe=s(cx);tjr=r(lOe,"This class cannot be instantiated directly using "),_Me=n(lOe,"CODE",{});var P9t=s(_Me);ajr=r(P9t,"__init__()"),P9t.forEach(t),njr=r(lOe," (throws an error)."),lOe.forEach(t),sjr=i(oi),Ht=n(oi,"DIV",{class:!0});var py=s(Ht);T(fx.$$.fragment,py),ljr=i(py),uMe=n(py,"P",{});var B9t=s(uMe);ijr=r(B9t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),B9t.forEach(t),djr=i(py),Kc=n(py,"P",{});var ooe=s(Kc);cjr=r(ooe,`Note:
Loading a model from its configuration file does `),bMe=n(ooe,"STRONG",{});var I9t=s(bMe);fjr=r(I9t,"not"),I9t.forEach(t),mjr=r(ooe,` load the model weights. It only affects the
model\u2019s configuration. Use `),jK=n(ooe,"A",{href:!0});var N9t=s(jK);gjr=r(N9t,"from_pretrained()"),N9t.forEach(t),hjr=r(ooe," to load the model weights."),ooe.forEach(t),pjr=i(py),T(Lw.$$.fragment,py),py.forEach(t),_jr=i(oi),Wr=n(oi,"DIV",{class:!0});var ri=s(Wr);T(mx.$$.fragment,ri),ujr=i(ri),vMe=n(ri,"P",{});var q9t=s(vMe);bjr=r(q9t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),q9t.forEach(t),vjr=i(ri),Tn=n(ri,"P",{});var _y=s(Tn);Fjr=r(_y,"The model class to instantiate is selected based on the "),FMe=n(_y,"CODE",{});var j9t=s(FMe);Tjr=r(j9t,"model_type"),j9t.forEach(t),Mjr=r(_y,` property of the config object (either
passed as an argument or loaded from `),TMe=n(_y,"CODE",{});var D9t=s(TMe);Ejr=r(D9t,"pretrained_model_name_or_path"),D9t.forEach(t),Cjr=r(_y,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MMe=n(_y,"CODE",{});var G9t=s(MMe);wjr=r(G9t,"pretrained_model_name_or_path"),G9t.forEach(t),Ajr=r(_y,":"),_y.forEach(t),yjr=i(ri),De=n(ri,"UL",{});var Fo=s(De);xw=n(Fo,"LI",{});var DNe=s(xw);EMe=n(DNe,"STRONG",{});var O9t=s(EMe);Ljr=r(O9t,"albert"),O9t.forEach(t),xjr=r(DNe," \u2014 "),DK=n(DNe,"A",{href:!0});var V9t=s(DK);$jr=r(V9t,"FlaxAlbertForTokenClassification"),V9t.forEach(t),kjr=r(DNe," (ALBERT model)"),DNe.forEach(t),Sjr=i(Fo),$w=n(Fo,"LI",{});var GNe=s($w);CMe=n(GNe,"STRONG",{});var X9t=s(CMe);Rjr=r(X9t,"bert"),X9t.forEach(t),Pjr=r(GNe," \u2014 "),GK=n(GNe,"A",{href:!0});var z9t=s(GK);Bjr=r(z9t,"FlaxBertForTokenClassification"),z9t.forEach(t),Ijr=r(GNe," (BERT model)"),GNe.forEach(t),Njr=i(Fo),kw=n(Fo,"LI",{});var ONe=s(kw);wMe=n(ONe,"STRONG",{});var W9t=s(wMe);qjr=r(W9t,"big_bird"),W9t.forEach(t),jjr=r(ONe," \u2014 "),OK=n(ONe,"A",{href:!0});var Q9t=s(OK);Djr=r(Q9t,"FlaxBigBirdForTokenClassification"),Q9t.forEach(t),Gjr=r(ONe," (BigBird model)"),ONe.forEach(t),Ojr=i(Fo),Sw=n(Fo,"LI",{});var VNe=s(Sw);AMe=n(VNe,"STRONG",{});var H9t=s(AMe);Vjr=r(H9t,"distilbert"),H9t.forEach(t),Xjr=r(VNe," \u2014 "),VK=n(VNe,"A",{href:!0});var U9t=s(VK);zjr=r(U9t,"FlaxDistilBertForTokenClassification"),U9t.forEach(t),Wjr=r(VNe," (DistilBERT model)"),VNe.forEach(t),Qjr=i(Fo),Rw=n(Fo,"LI",{});var XNe=s(Rw);yMe=n(XNe,"STRONG",{});var J9t=s(yMe);Hjr=r(J9t,"electra"),J9t.forEach(t),Ujr=r(XNe," \u2014 "),XK=n(XNe,"A",{href:!0});var Y9t=s(XK);Jjr=r(Y9t,"FlaxElectraForTokenClassification"),Y9t.forEach(t),Yjr=r(XNe," (ELECTRA model)"),XNe.forEach(t),Kjr=i(Fo),Pw=n(Fo,"LI",{});var zNe=s(Pw);LMe=n(zNe,"STRONG",{});var K9t=s(LMe);Zjr=r(K9t,"roberta"),K9t.forEach(t),eDr=r(zNe," \u2014 "),zK=n(zNe,"A",{href:!0});var Z9t=s(zK);oDr=r(Z9t,"FlaxRobertaForTokenClassification"),Z9t.forEach(t),rDr=r(zNe," (RoBERTa model)"),zNe.forEach(t),tDr=i(Fo),Bw=n(Fo,"LI",{});var WNe=s(Bw);xMe=n(WNe,"STRONG",{});var ext=s(xMe);aDr=r(ext,"roformer"),ext.forEach(t),nDr=r(WNe," \u2014 "),WK=n(WNe,"A",{href:!0});var oxt=s(WK);sDr=r(oxt,"FlaxRoFormerForTokenClassification"),oxt.forEach(t),lDr=r(WNe," (RoFormer model)"),WNe.forEach(t),iDr=i(Fo),Iw=n(Fo,"LI",{});var QNe=s(Iw);$Me=n(QNe,"STRONG",{});var rxt=s($Me);dDr=r(rxt,"xlm-roberta"),rxt.forEach(t),cDr=r(QNe," \u2014 "),QK=n(QNe,"A",{href:!0});var txt=s(QK);fDr=r(txt,"FlaxXLMRobertaForTokenClassification"),txt.forEach(t),mDr=r(QNe," (XLM-RoBERTa model)"),QNe.forEach(t),Fo.forEach(t),gDr=i(ri),T(Nw.$$.fragment,ri),ri.forEach(t),oi.forEach(t),oDe=i(f),Zc=n(f,"H2",{class:!0});var iOe=s(Zc);qw=n(iOe,"A",{id:!0,class:!0,href:!0});var axt=s(qw);kMe=n(axt,"SPAN",{});var nxt=s(kMe);T(gx.$$.fragment,nxt),nxt.forEach(t),axt.forEach(t),hDr=i(iOe),SMe=n(iOe,"SPAN",{});var sxt=s(SMe);pDr=r(sxt,"FlaxAutoModelForMultipleChoice"),sxt.forEach(t),iOe.forEach(t),rDe=i(f),vr=n(f,"DIV",{class:!0});var ti=s(vr);T(hx.$$.fragment,ti),_Dr=i(ti),ef=n(ti,"P",{});var roe=s(ef);uDr=r(roe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),HK=n(roe,"A",{href:!0});var lxt=s(HK);bDr=r(lxt,"from_pretrained()"),lxt.forEach(t),vDr=r(roe," class method or the "),UK=n(roe,"A",{href:!0});var ixt=s(UK);FDr=r(ixt,"from_config()"),ixt.forEach(t),TDr=r(roe,` class
method.`),roe.forEach(t),MDr=i(ti),px=n(ti,"P",{});var dOe=s(px);EDr=r(dOe,"This class cannot be instantiated directly using "),RMe=n(dOe,"CODE",{});var dxt=s(RMe);CDr=r(dxt,"__init__()"),dxt.forEach(t),wDr=r(dOe," (throws an error)."),dOe.forEach(t),ADr=i(ti),Ut=n(ti,"DIV",{class:!0});var uy=s(Ut);T(_x.$$.fragment,uy),yDr=i(uy),PMe=n(uy,"P",{});var cxt=s(PMe);LDr=r(cxt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),cxt.forEach(t),xDr=i(uy),of=n(uy,"P",{});var toe=s(of);$Dr=r(toe,`Note:
Loading a model from its configuration file does `),BMe=n(toe,"STRONG",{});var fxt=s(BMe);kDr=r(fxt,"not"),fxt.forEach(t),SDr=r(toe,` load the model weights. It only affects the
model\u2019s configuration. Use `),JK=n(toe,"A",{href:!0});var mxt=s(JK);RDr=r(mxt,"from_pretrained()"),mxt.forEach(t),PDr=r(toe," to load the model weights."),toe.forEach(t),BDr=i(uy),T(jw.$$.fragment,uy),uy.forEach(t),IDr=i(ti),Qr=n(ti,"DIV",{class:!0});var ai=s(Qr);T(ux.$$.fragment,ai),NDr=i(ai),IMe=n(ai,"P",{});var gxt=s(IMe);qDr=r(gxt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),gxt.forEach(t),jDr=i(ai),Mn=n(ai,"P",{});var by=s(Mn);DDr=r(by,"The model class to instantiate is selected based on the "),NMe=n(by,"CODE",{});var hxt=s(NMe);GDr=r(hxt,"model_type"),hxt.forEach(t),ODr=r(by,` property of the config object (either
passed as an argument or loaded from `),qMe=n(by,"CODE",{});var pxt=s(qMe);VDr=r(pxt,"pretrained_model_name_or_path"),pxt.forEach(t),XDr=r(by,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jMe=n(by,"CODE",{});var _xt=s(jMe);zDr=r(_xt,"pretrained_model_name_or_path"),_xt.forEach(t),WDr=r(by,":"),by.forEach(t),QDr=i(ai),Ge=n(ai,"UL",{});var To=s(Ge);Dw=n(To,"LI",{});var HNe=s(Dw);DMe=n(HNe,"STRONG",{});var uxt=s(DMe);HDr=r(uxt,"albert"),uxt.forEach(t),UDr=r(HNe," \u2014 "),YK=n(HNe,"A",{href:!0});var bxt=s(YK);JDr=r(bxt,"FlaxAlbertForMultipleChoice"),bxt.forEach(t),YDr=r(HNe," (ALBERT model)"),HNe.forEach(t),KDr=i(To),Gw=n(To,"LI",{});var UNe=s(Gw);GMe=n(UNe,"STRONG",{});var vxt=s(GMe);ZDr=r(vxt,"bert"),vxt.forEach(t),eGr=r(UNe," \u2014 "),KK=n(UNe,"A",{href:!0});var Fxt=s(KK);oGr=r(Fxt,"FlaxBertForMultipleChoice"),Fxt.forEach(t),rGr=r(UNe," (BERT model)"),UNe.forEach(t),tGr=i(To),Ow=n(To,"LI",{});var JNe=s(Ow);OMe=n(JNe,"STRONG",{});var Txt=s(OMe);aGr=r(Txt,"big_bird"),Txt.forEach(t),nGr=r(JNe," \u2014 "),ZK=n(JNe,"A",{href:!0});var Mxt=s(ZK);sGr=r(Mxt,"FlaxBigBirdForMultipleChoice"),Mxt.forEach(t),lGr=r(JNe," (BigBird model)"),JNe.forEach(t),iGr=i(To),Vw=n(To,"LI",{});var YNe=s(Vw);VMe=n(YNe,"STRONG",{});var Ext=s(VMe);dGr=r(Ext,"distilbert"),Ext.forEach(t),cGr=r(YNe," \u2014 "),eZ=n(YNe,"A",{href:!0});var Cxt=s(eZ);fGr=r(Cxt,"FlaxDistilBertForMultipleChoice"),Cxt.forEach(t),mGr=r(YNe," (DistilBERT model)"),YNe.forEach(t),gGr=i(To),Xw=n(To,"LI",{});var KNe=s(Xw);XMe=n(KNe,"STRONG",{});var wxt=s(XMe);hGr=r(wxt,"electra"),wxt.forEach(t),pGr=r(KNe," \u2014 "),oZ=n(KNe,"A",{href:!0});var Axt=s(oZ);_Gr=r(Axt,"FlaxElectraForMultipleChoice"),Axt.forEach(t),uGr=r(KNe," (ELECTRA model)"),KNe.forEach(t),bGr=i(To),zw=n(To,"LI",{});var ZNe=s(zw);zMe=n(ZNe,"STRONG",{});var yxt=s(zMe);vGr=r(yxt,"roberta"),yxt.forEach(t),FGr=r(ZNe," \u2014 "),rZ=n(ZNe,"A",{href:!0});var Lxt=s(rZ);TGr=r(Lxt,"FlaxRobertaForMultipleChoice"),Lxt.forEach(t),MGr=r(ZNe," (RoBERTa model)"),ZNe.forEach(t),EGr=i(To),Ww=n(To,"LI",{});var eqe=s(Ww);WMe=n(eqe,"STRONG",{});var xxt=s(WMe);CGr=r(xxt,"roformer"),xxt.forEach(t),wGr=r(eqe," \u2014 "),tZ=n(eqe,"A",{href:!0});var $xt=s(tZ);AGr=r($xt,"FlaxRoFormerForMultipleChoice"),$xt.forEach(t),yGr=r(eqe," (RoFormer model)"),eqe.forEach(t),LGr=i(To),Qw=n(To,"LI",{});var oqe=s(Qw);QMe=n(oqe,"STRONG",{});var kxt=s(QMe);xGr=r(kxt,"xlm-roberta"),kxt.forEach(t),$Gr=r(oqe," \u2014 "),aZ=n(oqe,"A",{href:!0});var Sxt=s(aZ);kGr=r(Sxt,"FlaxXLMRobertaForMultipleChoice"),Sxt.forEach(t),SGr=r(oqe," (XLM-RoBERTa model)"),oqe.forEach(t),To.forEach(t),RGr=i(ai),T(Hw.$$.fragment,ai),ai.forEach(t),ti.forEach(t),tDe=i(f),rf=n(f,"H2",{class:!0});var cOe=s(rf);Uw=n(cOe,"A",{id:!0,class:!0,href:!0});var Rxt=s(Uw);HMe=n(Rxt,"SPAN",{});var Pxt=s(HMe);T(bx.$$.fragment,Pxt),Pxt.forEach(t),Rxt.forEach(t),PGr=i(cOe),UMe=n(cOe,"SPAN",{});var Bxt=s(UMe);BGr=r(Bxt,"FlaxAutoModelForNextSentencePrediction"),Bxt.forEach(t),cOe.forEach(t),aDe=i(f),Fr=n(f,"DIV",{class:!0});var ni=s(Fr);T(vx.$$.fragment,ni),IGr=i(ni),tf=n(ni,"P",{});var aoe=s(tf);NGr=r(aoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),nZ=n(aoe,"A",{href:!0});var Ixt=s(nZ);qGr=r(Ixt,"from_pretrained()"),Ixt.forEach(t),jGr=r(aoe," class method or the "),sZ=n(aoe,"A",{href:!0});var Nxt=s(sZ);DGr=r(Nxt,"from_config()"),Nxt.forEach(t),GGr=r(aoe,` class
method.`),aoe.forEach(t),OGr=i(ni),Fx=n(ni,"P",{});var fOe=s(Fx);VGr=r(fOe,"This class cannot be instantiated directly using "),JMe=n(fOe,"CODE",{});var qxt=s(JMe);XGr=r(qxt,"__init__()"),qxt.forEach(t),zGr=r(fOe," (throws an error)."),fOe.forEach(t),WGr=i(ni),Jt=n(ni,"DIV",{class:!0});var vy=s(Jt);T(Tx.$$.fragment,vy),QGr=i(vy),YMe=n(vy,"P",{});var jxt=s(YMe);HGr=r(jxt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),jxt.forEach(t),UGr=i(vy),af=n(vy,"P",{});var noe=s(af);JGr=r(noe,`Note:
Loading a model from its configuration file does `),KMe=n(noe,"STRONG",{});var Dxt=s(KMe);YGr=r(Dxt,"not"),Dxt.forEach(t),KGr=r(noe,` load the model weights. It only affects the
model\u2019s configuration. Use `),lZ=n(noe,"A",{href:!0});var Gxt=s(lZ);ZGr=r(Gxt,"from_pretrained()"),Gxt.forEach(t),eOr=r(noe," to load the model weights."),noe.forEach(t),oOr=i(vy),T(Jw.$$.fragment,vy),vy.forEach(t),rOr=i(ni),Hr=n(ni,"DIV",{class:!0});var si=s(Hr);T(Mx.$$.fragment,si),tOr=i(si),ZMe=n(si,"P",{});var Oxt=s(ZMe);aOr=r(Oxt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Oxt.forEach(t),nOr=i(si),En=n(si,"P",{});var Fy=s(En);sOr=r(Fy,"The model class to instantiate is selected based on the "),eEe=n(Fy,"CODE",{});var Vxt=s(eEe);lOr=r(Vxt,"model_type"),Vxt.forEach(t),iOr=r(Fy,` property of the config object (either
passed as an argument or loaded from `),oEe=n(Fy,"CODE",{});var Xxt=s(oEe);dOr=r(Xxt,"pretrained_model_name_or_path"),Xxt.forEach(t),cOr=r(Fy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rEe=n(Fy,"CODE",{});var zxt=s(rEe);fOr=r(zxt,"pretrained_model_name_or_path"),zxt.forEach(t),mOr=r(Fy,":"),Fy.forEach(t),gOr=i(si),tEe=n(si,"UL",{});var Wxt=s(tEe);Yw=n(Wxt,"LI",{});var rqe=s(Yw);aEe=n(rqe,"STRONG",{});var Qxt=s(aEe);hOr=r(Qxt,"bert"),Qxt.forEach(t),pOr=r(rqe," \u2014 "),iZ=n(rqe,"A",{href:!0});var Hxt=s(iZ);_Or=r(Hxt,"FlaxBertForNextSentencePrediction"),Hxt.forEach(t),uOr=r(rqe," (BERT model)"),rqe.forEach(t),Wxt.forEach(t),bOr=i(si),T(Kw.$$.fragment,si),si.forEach(t),ni.forEach(t),nDe=i(f),nf=n(f,"H2",{class:!0});var mOe=s(nf);Zw=n(mOe,"A",{id:!0,class:!0,href:!0});var Uxt=s(Zw);nEe=n(Uxt,"SPAN",{});var Jxt=s(nEe);T(Ex.$$.fragment,Jxt),Jxt.forEach(t),Uxt.forEach(t),vOr=i(mOe),sEe=n(mOe,"SPAN",{});var Yxt=s(sEe);FOr=r(Yxt,"FlaxAutoModelForImageClassification"),Yxt.forEach(t),mOe.forEach(t),sDe=i(f),Tr=n(f,"DIV",{class:!0});var li=s(Tr);T(Cx.$$.fragment,li),TOr=i(li),sf=n(li,"P",{});var soe=s(sf);MOr=r(soe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),dZ=n(soe,"A",{href:!0});var Kxt=s(dZ);EOr=r(Kxt,"from_pretrained()"),Kxt.forEach(t),COr=r(soe," class method or the "),cZ=n(soe,"A",{href:!0});var Zxt=s(cZ);wOr=r(Zxt,"from_config()"),Zxt.forEach(t),AOr=r(soe,` class
method.`),soe.forEach(t),yOr=i(li),wx=n(li,"P",{});var gOe=s(wx);LOr=r(gOe,"This class cannot be instantiated directly using "),lEe=n(gOe,"CODE",{});var e$t=s(lEe);xOr=r(e$t,"__init__()"),e$t.forEach(t),$Or=r(gOe," (throws an error)."),gOe.forEach(t),kOr=i(li),Yt=n(li,"DIV",{class:!0});var Ty=s(Yt);T(Ax.$$.fragment,Ty),SOr=i(Ty),iEe=n(Ty,"P",{});var o$t=s(iEe);ROr=r(o$t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),o$t.forEach(t),POr=i(Ty),lf=n(Ty,"P",{});var loe=s(lf);BOr=r(loe,`Note:
Loading a model from its configuration file does `),dEe=n(loe,"STRONG",{});var r$t=s(dEe);IOr=r(r$t,"not"),r$t.forEach(t),NOr=r(loe,` load the model weights. It only affects the
model\u2019s configuration. Use `),fZ=n(loe,"A",{href:!0});var t$t=s(fZ);qOr=r(t$t,"from_pretrained()"),t$t.forEach(t),jOr=r(loe," to load the model weights."),loe.forEach(t),DOr=i(Ty),T(e0.$$.fragment,Ty),Ty.forEach(t),GOr=i(li),Ur=n(li,"DIV",{class:!0});var ii=s(Ur);T(yx.$$.fragment,ii),OOr=i(ii),cEe=n(ii,"P",{});var a$t=s(cEe);VOr=r(a$t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),a$t.forEach(t),XOr=i(ii),Cn=n(ii,"P",{});var My=s(Cn);zOr=r(My,"The model class to instantiate is selected based on the "),fEe=n(My,"CODE",{});var n$t=s(fEe);WOr=r(n$t,"model_type"),n$t.forEach(t),QOr=r(My,` property of the config object (either
passed as an argument or loaded from `),mEe=n(My,"CODE",{});var s$t=s(mEe);HOr=r(s$t,"pretrained_model_name_or_path"),s$t.forEach(t),UOr=r(My,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gEe=n(My,"CODE",{});var l$t=s(gEe);JOr=r(l$t,"pretrained_model_name_or_path"),l$t.forEach(t),YOr=r(My,":"),My.forEach(t),KOr=i(ii),Lx=n(ii,"UL",{});var hOe=s(Lx);o0=n(hOe,"LI",{});var tqe=s(o0);hEe=n(tqe,"STRONG",{});var i$t=s(hEe);ZOr=r(i$t,"beit"),i$t.forEach(t),eVr=r(tqe," \u2014 "),mZ=n(tqe,"A",{href:!0});var d$t=s(mZ);oVr=r(d$t,"FlaxBeitForImageClassification"),d$t.forEach(t),rVr=r(tqe," (BEiT model)"),tqe.forEach(t),tVr=i(hOe),r0=n(hOe,"LI",{});var aqe=s(r0);pEe=n(aqe,"STRONG",{});var c$t=s(pEe);aVr=r(c$t,"vit"),c$t.forEach(t),nVr=r(aqe," \u2014 "),gZ=n(aqe,"A",{href:!0});var f$t=s(gZ);sVr=r(f$t,"FlaxViTForImageClassification"),f$t.forEach(t),lVr=r(aqe," (ViT model)"),aqe.forEach(t),hOe.forEach(t),iVr=i(ii),T(t0.$$.fragment,ii),ii.forEach(t),li.forEach(t),lDe=i(f),df=n(f,"H2",{class:!0});var pOe=s(df);a0=n(pOe,"A",{id:!0,class:!0,href:!0});var m$t=s(a0);_Ee=n(m$t,"SPAN",{});var g$t=s(_Ee);T(xx.$$.fragment,g$t),g$t.forEach(t),m$t.forEach(t),dVr=i(pOe),uEe=n(pOe,"SPAN",{});var h$t=s(uEe);cVr=r(h$t,"FlaxAutoModelForVision2Seq"),h$t.forEach(t),pOe.forEach(t),iDe=i(f),Mr=n(f,"DIV",{class:!0});var di=s(Mr);T($x.$$.fragment,di),fVr=i(di),cf=n(di,"P",{});var ioe=s(cf);mVr=r(ioe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),hZ=n(ioe,"A",{href:!0});var p$t=s(hZ);gVr=r(p$t,"from_pretrained()"),p$t.forEach(t),hVr=r(ioe," class method or the "),pZ=n(ioe,"A",{href:!0});var _$t=s(pZ);pVr=r(_$t,"from_config()"),_$t.forEach(t),_Vr=r(ioe,` class
method.`),ioe.forEach(t),uVr=i(di),kx=n(di,"P",{});var _Oe=s(kx);bVr=r(_Oe,"This class cannot be instantiated directly using "),bEe=n(_Oe,"CODE",{});var u$t=s(bEe);vVr=r(u$t,"__init__()"),u$t.forEach(t),FVr=r(_Oe," (throws an error)."),_Oe.forEach(t),TVr=i(di),Kt=n(di,"DIV",{class:!0});var Ey=s(Kt);T(Sx.$$.fragment,Ey),MVr=i(Ey),vEe=n(Ey,"P",{});var b$t=s(vEe);EVr=r(b$t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),b$t.forEach(t),CVr=i(Ey),ff=n(Ey,"P",{});var doe=s(ff);wVr=r(doe,`Note:
Loading a model from its configuration file does `),FEe=n(doe,"STRONG",{});var v$t=s(FEe);AVr=r(v$t,"not"),v$t.forEach(t),yVr=r(doe,` load the model weights. It only affects the
model\u2019s configuration. Use `),_Z=n(doe,"A",{href:!0});var F$t=s(_Z);LVr=r(F$t,"from_pretrained()"),F$t.forEach(t),xVr=r(doe," to load the model weights."),doe.forEach(t),$Vr=i(Ey),T(n0.$$.fragment,Ey),Ey.forEach(t),kVr=i(di),Jr=n(di,"DIV",{class:!0});var ci=s(Jr);T(Rx.$$.fragment,ci),SVr=i(ci),TEe=n(ci,"P",{});var T$t=s(TEe);RVr=r(T$t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),T$t.forEach(t),PVr=i(ci),wn=n(ci,"P",{});var Cy=s(wn);BVr=r(Cy,"The model class to instantiate is selected based on the "),MEe=n(Cy,"CODE",{});var M$t=s(MEe);IVr=r(M$t,"model_type"),M$t.forEach(t),NVr=r(Cy,` property of the config object (either
passed as an argument or loaded from `),EEe=n(Cy,"CODE",{});var E$t=s(EEe);qVr=r(E$t,"pretrained_model_name_or_path"),E$t.forEach(t),jVr=r(Cy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CEe=n(Cy,"CODE",{});var C$t=s(CEe);DVr=r(C$t,"pretrained_model_name_or_path"),C$t.forEach(t),GVr=r(Cy,":"),Cy.forEach(t),OVr=i(ci),wEe=n(ci,"UL",{});var w$t=s(wEe);s0=n(w$t,"LI",{});var nqe=s(s0);AEe=n(nqe,"STRONG",{});var A$t=s(AEe);VVr=r(A$t,"vision-encoder-decoder"),A$t.forEach(t),XVr=r(nqe," \u2014 "),uZ=n(nqe,"A",{href:!0});var y$t=s(uZ);zVr=r(y$t,"FlaxVisionEncoderDecoderModel"),y$t.forEach(t),WVr=r(nqe," (Vision Encoder decoder model)"),nqe.forEach(t),w$t.forEach(t),QVr=i(ci),T(l0.$$.fragment,ci),ci.forEach(t),di.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(kSt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(yn,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.AutoConfig"),c(xn,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.AutoModel"),c($n,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.AutoTokenizer"),c(ui,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertModel"),c(vf,"id","extending-the-auto-classes"),c(vf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vf,"href","#extending-the-auto-classes"),c(bi,"class","relative group"),c(Tf,"id","transformers.AutoConfig"),c(Tf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Tf,"href","#transformers.AutoConfig"),c(vi,"class","relative group"),c(Z$,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(ek,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig"),c(ok,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig"),c(rk,"href","/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitConfig"),c(tk,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig"),c(ak,"href","/docs/transformers/pr_16543/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(nk,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig"),c(sk,"href","/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(lk,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(ik,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(dk,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig"),c(ck,"href","/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineConfig"),c(fk,"href","/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPConfig"),c(mk,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig"),c(gk,"href","/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextConfig"),c(hk,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLConfig"),c(pk,"href","/docs/transformers/pr_16543/en/model_doc/cvt#transformers.CvtConfig"),c(_k,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(uk,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(bk,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(vk,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig"),c(Fk,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(Tk,"href","/docs/transformers/pr_16543/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(Mk,"href","/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTConfig"),c(Ek,"href","/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrConfig"),c(Ck,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig"),c(wk,"href","/docs/transformers/pr_16543/en/model_doc/dpr#transformers.DPRConfig"),c(Ak,"href","/docs/transformers/pr_16543/en/model_doc/dpt#transformers.DPTConfig"),c(yk,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig"),c(Lk,"href","/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(xk,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig"),c($k,"href","/docs/transformers/pr_16543/en/model_doc/flava#transformers.FlavaConfig"),c(kk,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetConfig"),c(Sk,"href","/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTConfig"),c(Rk,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig"),c(Pk,"href","/docs/transformers/pr_16543/en/model_doc/glpn#transformers.GLPNConfig"),c(Bk,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config"),c(Ik,"href","/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(Nk,"href","/docs/transformers/pr_16543/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(qk,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig"),c(jk,"href","/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertConfig"),c(Dk,"href","/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertConfig"),c(Gk,"href","/docs/transformers/pr_16543/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(Ok,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(Vk,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(Xk,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(zk,"href","/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDConfig"),c(Wk,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig"),c(Qk,"href","/docs/transformers/pr_16543/en/model_doc/luke#transformers.LukeConfig"),c(Hk,"href","/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertConfig"),c(Uk,"href","/docs/transformers/pr_16543/en/model_doc/m2m_100#transformers.M2M100Config"),c(Jk,"href","/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianConfig"),c(Yk,"href","/docs/transformers/pr_16543/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(Kk,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig"),c(Zk,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(eS,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(oS,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig"),c(rS,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Config"),c(tS,"href","/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(aS,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(nS,"href","/docs/transformers/pr_16543/en/model_doc/opt#transformers.OPTConfig"),c(sS,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusConfig"),c(lS,"href","/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverConfig"),c(iS,"href","/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartConfig"),c(dS,"href","/docs/transformers/pr_16543/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(cS,"href","/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(fS,"href","/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(mS,"href","/docs/transformers/pr_16543/en/model_doc/rag#transformers.RagConfig"),c(gS,"href","/docs/transformers/pr_16543/en/model_doc/realm#transformers.RealmConfig"),c(hS,"href","/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerConfig"),c(pS,"href","/docs/transformers/pr_16543/en/model_doc/regnet#transformers.RegNetConfig"),c(_S,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig"),c(uS,"href","/docs/transformers/pr_16543/en/model_doc/resnet#transformers.ResNetConfig"),c(bS,"href","/docs/transformers/pr_16543/en/model_doc/retribert#transformers.RetriBertConfig"),c(vS,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig"),c(FS,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig"),c(TS,"href","/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerConfig"),c(MS,"href","/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWConfig"),c(ES,"href","/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDConfig"),c(CS,"href","/docs/transformers/pr_16543/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(wS,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(AS,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(yS,"href","/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterConfig"),c(LS,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(xS,"href","/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinConfig"),c($S,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config"),c(kS,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig"),c(SS,"href","/docs/transformers/pr_16543/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(RS,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(PS,"href","/docs/transformers/pr_16543/en/model_doc/trocr#transformers.TrOCRConfig"),c(BS,"href","/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(IS,"href","/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(NS,"href","/docs/transformers/pr_16543/en/model_doc/van#transformers.VanConfig"),c(qS,"href","/docs/transformers/pr_16543/en/model_doc/vilt#transformers.ViltConfig"),c(jS,"href","/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(DS,"href","/docs/transformers/pr_16543/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(GS,"href","/docs/transformers/pr_16543/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(OS,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTConfig"),c(VS,"href","/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(XS,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(zS,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(WS,"href","/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMConfig"),c(QS,"href","/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMConfig"),c(HS,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig"),c(US,"href","/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(JS,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(YS,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(KS,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig"),c(ZS,"href","/docs/transformers/pr_16543/en/model_doc/yolos#transformers.YolosConfig"),c(eR,"href","/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wg,"id","transformers.AutoTokenizer"),c(wg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wg,"href","#transformers.AutoTokenizer"),c(Ti,"class","relative group"),c(oR,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(rR,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertTokenizer"),c(tR,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(aR,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartTokenizer"),c(nR,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartTokenizerFast"),c(sR,"href","/docs/transformers/pr_16543/en/model_doc/barthez#transformers.BarthezTokenizer"),c(lR,"href","/docs/transformers/pr_16543/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(iR,"href","/docs/transformers/pr_16543/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(dR,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertTokenizer"),c(cR,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertTokenizerFast"),c(fR,"href","/docs/transformers/pr_16543/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(mR,"href","/docs/transformers/pr_16543/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(gR,"href","/docs/transformers/pr_16543/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(hR,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(pR,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(_R,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(uR,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(bR,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(vR,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(FR,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(TR,"href","/docs/transformers/pr_16543/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(MR,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertTokenizer"),c(ER,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(CR,"href","/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineTokenizer"),c(wR,"href","/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPTokenizer"),c(AR,"href","/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(yR,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(LR,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(xR,"href","/docs/transformers/pr_16543/en/model_doc/cpm#transformers.CpmTokenizer"),c($R,"href","/docs/transformers/pr_16543/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(kR,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(SR,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaTokenizer"),c(RR,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(PR,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaTokenizer"),c(BR,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(IR,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(NR,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(qR,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(jR,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(DR,"href","/docs/transformers/pr_16543/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(GR,"href","/docs/transformers/pr_16543/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(OR,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraTokenizer"),c(VR,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(XR,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(zR,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetTokenizer"),c(WR,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(QR,"href","/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(HR,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelTokenizer"),c(UR,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(JR,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(YR,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(KR,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(ZR,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(eP,"href","/docs/transformers/pr_16543/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(oP,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(rP,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(tP,"href","/docs/transformers/pr_16543/en/model_doc/herbert#transformers.HerbertTokenizer"),c(aP,"href","/docs/transformers/pr_16543/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(nP,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(sP,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaTokenizer"),c(lP,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(iP,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(dP,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(cP,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(fP,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(mP,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(gP,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(hP,"href","/docs/transformers/pr_16543/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(pP,"href","/docs/transformers/pr_16543/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(_P,"href","/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDTokenizer"),c(uP,"href","/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDTokenizerFast"),c(bP,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerTokenizer"),c(vP,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(FP,"href","/docs/transformers/pr_16543/en/model_doc/luke#transformers.LukeTokenizer"),c(TP,"href","/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(MP,"href","/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(EP,"href","/docs/transformers/pr_16543/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(CP,"href","/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianTokenizer"),c(wP,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartTokenizer"),c(AP,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(yP,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(LP,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(xP,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertTokenizer"),c($P,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertTokenizerFast"),c(kP,"href","/docs/transformers/pr_16543/en/model_doc/mluke#transformers.MLukeTokenizer"),c(SP,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(RP,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(PP,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(BP,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(IP,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Tokenizer"),c(NP,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5TokenizerFast"),c(qP,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertTokenizer"),c(jP,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(DP,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(GP,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(OP,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(VP,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(XP,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(zP,"href","/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(WP,"href","/docs/transformers/pr_16543/en/model_doc/phobert#transformers.PhobertTokenizer"),c(QP,"href","/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartTokenizer"),c(HP,"href","/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(UP,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertTokenizer"),c(JP,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertTokenizerFast"),c(YP,"href","/docs/transformers/pr_16543/en/model_doc/rag#transformers.RagTokenizer"),c(KP,"href","/docs/transformers/pr_16543/en/model_doc/realm#transformers.RealmTokenizer"),c(ZP,"href","/docs/transformers/pr_16543/en/model_doc/realm#transformers.RealmTokenizerFast"),c(eB,"href","/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerTokenizer"),c(oB,"href","/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(rB,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertTokenizer"),c(tB,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(aB,"href","/docs/transformers/pr_16543/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(nB,"href","/docs/transformers/pr_16543/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(sB,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaTokenizer"),c(lB,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(iB,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(dB,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(cB,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(fB,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(mB,"href","/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterTokenizer"),c(gB,"href","/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(hB,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(pB,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(_B,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Tokenizer"),c(uB,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5TokenizerFast"),c(bB,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasTokenizer"),c(vB,"href","/docs/transformers/pr_16543/en/model_doc/tapex#transformers.TapexTokenizer"),c(FB,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(TB,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertTokenizer"),c(MB,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertTokenizerFast"),c(EB,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(CB,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(wB,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(AB,"href","/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMTokenizer"),c(yB,"href","/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(LB,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMTokenizer"),c(xB,"href","/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c($B,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(kB,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(SB,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaTokenizer"),c(RB,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(PB,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(BB,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(IB,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertTokenizer"),c(NB,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sh,"id","transformers.AutoFeatureExtractor"),c(sh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sh,"href","#transformers.AutoFeatureExtractor"),c(Mi,"class","relative group"),c(qB,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(jB,"href","/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(DB,"href","/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(GB,"href","/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(OB,"href","/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(VB,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(XB,"href","/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(zB,"href","/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(WB,"href","/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(QB,"href","/docs/transformers/pr_16543/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(HB,"href","/docs/transformers/pr_16543/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(UB,"href","/docs/transformers/pr_16543/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(JB,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(YB,"href","/docs/transformers/pr_16543/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(KB,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(ZB,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(eI,"href","/docs/transformers/pr_16543/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(oI,"href","/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(rI,"href","/docs/transformers/pr_16543/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(tI,"href","/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(aI,"href","/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(nI,"href","/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(sI,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(lI,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(iI,"href","/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(dI,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(cI,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(fI,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(mI,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(gI,"href","/docs/transformers/pr_16543/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jh,"id","transformers.AutoProcessor"),c(jh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jh,"href","#transformers.AutoProcessor"),c(Ei,"class","relative group"),c(hI,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(pI,"href","/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPProcessor"),c(_I,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(uI,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(bI,"href","/docs/transformers/pr_16543/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(vI,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(FI,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(TI,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(MI,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(EI,"href","/docs/transformers/pr_16543/en/model_doc/trocr#transformers.TrOCRProcessor"),c(CI,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(wI,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(AI,"href","/docs/transformers/pr_16543/en/model_doc/vilt#transformers.ViltProcessor"),c(yI,"href","/docs/transformers/pr_16543/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(LI,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(xI,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c($I,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(np,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sp,"id","transformers.AutoModel"),c(sp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sp,"href","#transformers.AutoModel"),c(wi,"class","relative group"),c(kI,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SI,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RI,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PI,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertModel"),c(BI,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartModel"),c(II,"href","/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitModel"),c(NI,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertModel"),c(qI,"href","/docs/transformers/pr_16543/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(jI,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdModel"),c(DI,"href","/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(GI,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(OI,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(VI,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertModel"),c(XI,"href","/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineModel"),c(zI,"href","/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPModel"),c(WI,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertModel"),c(QI,"href","/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextModel"),c(HI,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLModel"),c(UI,"href","/docs/transformers/pr_16543/en/model_doc/cvt#transformers.CvtModel"),c(JI,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(YI,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(KI,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(ZI,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaModel"),c(eN,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(oN,"href","/docs/transformers/pr_16543/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(rN,"href","/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTModel"),c(tN,"href","/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrModel"),c(aN,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertModel"),c(nN,"href","/docs/transformers/pr_16543/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(sN,"href","/docs/transformers/pr_16543/en/model_doc/dpt#transformers.DPTModel"),c(lN,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraModel"),c(iN,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertModel"),c(dN,"href","/docs/transformers/pr_16543/en/model_doc/flava#transformers.FlavaModel"),c(cN,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetModel"),c(fN,"href","/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTModel"),c(mN,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelModel"),c(gN,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelBaseModel"),c(hN,"href","/docs/transformers/pr_16543/en/model_doc/glpn#transformers.GLPNModel"),c(pN,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Model"),c(_N,"href","/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(uN,"href","/docs/transformers/pr_16543/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(bN,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJModel"),c(vN,"href","/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertModel"),c(FN,"href","/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertModel"),c(TN,"href","/docs/transformers/pr_16543/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(MN,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(EN,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(CN,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(wN,"href","/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDModel"),c(AN,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerModel"),c(yN,"href","/docs/transformers/pr_16543/en/model_doc/luke#transformers.LukeModel"),c(LN,"href","/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertModel"),c(xN,"href","/docs/transformers/pr_16543/en/model_doc/m2m_100#transformers.M2M100Model"),c($N,"href","/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianModel"),c(kN,"href","/docs/transformers/pr_16543/en/model_doc/maskformer#transformers.MaskFormerModel"),c(SN,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartModel"),c(RN,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(PN,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertModel"),c(BN,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetModel"),c(IN,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Model"),c(NN,"href","/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerModel"),c(qN,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(jN,"href","/docs/transformers/pr_16543/en/model_doc/opt#transformers.OPTModel"),c(DN,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusModel"),c(GN,"href","/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverModel"),c(ON,"href","/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartModel"),c(VN,"href","/docs/transformers/pr_16543/en/model_doc/poolformer#transformers.PoolFormerModel"),c(XN,"href","/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(zN,"href","/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertModel"),c(WN,"href","/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerModel"),c(QN,"href","/docs/transformers/pr_16543/en/model_doc/regnet#transformers.RegNetModel"),c(HN,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertModel"),c(UN,"href","/docs/transformers/pr_16543/en/model_doc/resnet#transformers.ResNetModel"),c(JN,"href","/docs/transformers/pr_16543/en/model_doc/retribert#transformers.RetriBertModel"),c(YN,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaModel"),c(KN,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerModel"),c(ZN,"href","/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerModel"),c(eq,"href","/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWModel"),c(oq,"href","/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDModel"),c(rq,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(tq,"href","/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterModel"),c(aq,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(nq,"href","/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinModel"),c(sq,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Model"),c(lq,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasModel"),c(iq,"href","/docs/transformers/pr_16543/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(dq,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(cq,"href","/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechModel"),c(fq,"href","/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(mq,"href","/docs/transformers/pr_16543/en/model_doc/van#transformers.VanModel"),c(gq,"href","/docs/transformers/pr_16543/en/model_doc/vilt#transformers.ViltModel"),c(hq,"href","/docs/transformers/pr_16543/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(pq,"href","/docs/transformers/pr_16543/en/model_doc/visual_bert#transformers.VisualBertModel"),c(_q,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTModel"),c(uq,"href","/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(bq,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(vq,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(Fq,"href","/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMModel"),c(Tq,"href","/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMModel"),c(Mq,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMModel"),c(Eq,"href","/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(Cq,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(wq,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(Aq,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetModel"),c(yq,"href","/docs/transformers/pr_16543/en/model_doc/yolos#transformers.YolosModel"),c(Lq,"href","/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tu,"id","transformers.AutoModelForPreTraining"),c(tu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tu,"href","#transformers.AutoModelForPreTraining"),c(Li,"class","relative group"),c(xq,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($q,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kq,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Sq,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForPreTraining"),c(Rq,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Pq,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForPreTraining"),c(Bq,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(Iq,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(Nq,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(qq,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(jq,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(Dq,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(Gq,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(Oq,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForPreTraining"),c(Vq,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(Xq,"href","/docs/transformers/pr_16543/en/model_doc/flava#transformers.FlavaForPreTraining"),c(zq,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForPreTraining"),c(Wq,"href","/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(Qq,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(Hq,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(Uq,"href","/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(Jq,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(Yq,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(Kq,"href","/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(Zq,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(ej,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(oj,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(rj,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(tj,"href","/docs/transformers/pr_16543/en/model_doc/retribert#transformers.RetriBertModel"),c(aj,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(nj,"href","/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(sj,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(lj,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(ij,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(dj,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(cj,"href","/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(fj,"href","/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(mj,"href","/docs/transformers/pr_16543/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(gj,"href","/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(hj,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(pj,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(_j,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(uj,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(bj,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(vj,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uu,"id","transformers.AutoModelForCausalLM"),c(Uu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Uu,"href","#transformers.AutoModelForCausalLM"),c(ki,"class","relative group"),c(Fj,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tj,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Mj,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ej,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForCausalLM"),c(Cj,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertLMHeadModel"),c(wj,"href","/docs/transformers/pr_16543/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(Aj,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(yj,"href","/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(Lj,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(xj,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c($j,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(kj,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(Sj,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(Rj,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForCausalLM"),c(Pj,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(Bj,"href","/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(Ij,"href","/docs/transformers/pr_16543/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(Nj,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(qj,"href","/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianForCausalLM"),c(jj,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForCausalLM"),c(Dj,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(Gj,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(Oj,"href","/docs/transformers/pr_16543/en/model_doc/opt#transformers.OPTForCausalLM"),c(Vj,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(Xj,"href","/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(zj,"href","/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(Wj,"href","/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(Qj,"href","/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(Hj,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(Uj,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(Jj,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(Yj,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(Kj,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(Zj,"href","/docs/transformers/pr_16543/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(eD,"href","/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(oD,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(rD,"href","/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(tD,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(aD,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(nD,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(I1,"id","transformers.AutoModelForMaskedLM"),c(I1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(I1,"href","#transformers.AutoModelForMaskedLM"),c(Pi,"class","relative group"),c(sD,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lD,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iD,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dD,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(cD,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(fD,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForMaskedLM"),c(mD,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(gD,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(hD,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(pD,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(_D,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(uD,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(bD,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(vD,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(FD,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(TD,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(MD,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(ED,"href","/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(CD,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(wD,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(AD,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(yD,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(LD,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(xD,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c($D,"href","/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(kD,"href","/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(SD,"href","/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(RD,"href","/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(PD,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(BD,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(ID,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(ND,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(qD,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(jD,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(DD,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(GD,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(OD,"href","/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tb,"id","transformers.AutoModelForSeq2SeqLM"),c(Tb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Tb,"href","#transformers.AutoModelForSeq2SeqLM"),c(Ni,"class","relative group"),c(VD,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XD,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zD,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WD,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(QD,"href","/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(HD,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(UD,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(JD,"href","/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(YD,"href","/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(KD,"href","/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(ZD,"href","/docs/transformers/pr_16543/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(eG,"href","/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianMTModel"),c(oG,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(rG,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(tG,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(aG,"href","/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(nG,"href","/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(sG,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(lG,"href","/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gb,"id","transformers.AutoModelForSequenceClassification"),c(Gb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Gb,"href","#transformers.AutoModelForSequenceClassification"),c(Di,"class","relative group"),c(iG,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dG,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cG,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fG,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(mG,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForSequenceClassification"),c(gG,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForSequenceClassification"),c(hG,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(pG,"href","/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(_G,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(uG,"href","/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(bG,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(vG,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(FG,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(TG,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(MG,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(EG,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(CG,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(wG,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(AG,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(yG,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(LG,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(xG,"href","/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c($G,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(kG,"href","/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(SG,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(RG,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(PG,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(BG,"href","/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDForSequenceClassification"),c(IG,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(NG,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(qG,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(jG,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(DG,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(GG,"href","/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(OG,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(VG,"href","/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(XG,"href","/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(zG,"href","/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(WG,"href","/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(QG,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(HG,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(UG,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(JG,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(YG,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(KG,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(ZG,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(eO,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(oO,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(rO,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(tO,"href","/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(q2,"id","transformers.AutoModelForMultipleChoice"),c(q2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(q2,"href","#transformers.AutoModelForMultipleChoice"),c(Vi,"class","relative group"),c(aO,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nO,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sO,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lO,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(iO,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForMultipleChoice"),c(dO,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(cO,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(fO,"href","/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(mO,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(gO,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(hO,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(pO,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(_O,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(uO,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(bO,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(vO,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(FO,"href","/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(TO,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(MO,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(EO,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(CO,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(wO,"href","/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(AO,"href","/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(yO,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(LO,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(xO,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c($O,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(kO,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(SO,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(RO,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(PO,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(BO,"href","/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(u4,"id","transformers.AutoModelForNextSentencePrediction"),c(u4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u4,"href","#transformers.AutoModelForNextSentencePrediction"),c(Wi,"class","relative group"),c(IO,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NO,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qO,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jO,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(DO,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(GO,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(OO,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(VO,"href","/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A4,"id","transformers.AutoModelForTokenClassification"),c(A4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A4,"href","#transformers.AutoModelForTokenClassification"),c(Ui,"class","relative group"),c(XO,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zO,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WO,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QO,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(HO,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForTokenClassification"),c(UO,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(JO,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(YO,"href","/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineForTokenClassification"),c(KO,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(ZO,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(eV,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(oV,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(rV,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(tV,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(aV,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(nV,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(sV,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(lV,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(iV,"href","/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(dV,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(cV,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(fV,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(mV,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(gV,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(hV,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(pV,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(_V,"href","/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(uV,"href","/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(bV,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(vV,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(FV,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(TV,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(MV,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(EV,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(CV,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(wV,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(AV,"href","/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(c5,"id","transformers.AutoModelForQuestionAnswering"),c(c5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(c5,"href","#transformers.AutoModelForQuestionAnswering"),c(Ki,"class","relative group"),c(yV,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LV,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xV,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($V,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(kV,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(SV,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(RV,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(PV,"href","/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(BV,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(IV,"href","/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(NV,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(qV,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(jV,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(DV,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(GV,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(OV,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(VV,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(XV,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(zV,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(WV,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(QV,"href","/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(HV,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(UV,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(JV,"href","/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(YV,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(KV,"href","/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(ZV,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(eX,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(oX,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(rX,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(tX,"href","/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(aX,"href","/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(nX,"href","/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(sX,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(lX,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(iX,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(dX,"href","/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(cX,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(fX,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(mX,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(gX,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(hX,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(pX,"href","/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ev,"id","transformers.AutoModelForTableQuestionAnswering"),c(ev,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ev,"href","#transformers.AutoModelForTableQuestionAnswering"),c(od,"class","relative group"),c(_X,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vX,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nv,"id","transformers.AutoModelForImageClassification"),c(nv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nv,"href","#transformers.AutoModelForImageClassification"),c(ad,"class","relative group"),c(FX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EX,"href","/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitForImageClassification"),c(CX,"href","/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(wX,"href","/docs/transformers/pr_16543/en/model_doc/cvt#transformers.CvtForImageClassification"),c(AX,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(yX,"href","/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTForImageClassification"),c(LX,"href","/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(xX,"href","/docs/transformers/pr_16543/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c($X,"href","/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(kX,"href","/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(SX,"href","/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(RX,"href","/docs/transformers/pr_16543/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(PX,"href","/docs/transformers/pr_16543/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(BX,"href","/docs/transformers/pr_16543/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(IX,"href","/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(NX,"href","/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinForImageClassification"),c(qX,"href","/docs/transformers/pr_16543/en/model_doc/van#transformers.VanForImageClassification"),c(jX,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tv,"id","transformers.AutoModelForVision2Seq"),c(Tv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Tv,"href","#transformers.AutoModelForVision2Seq"),c(ld,"class","relative group"),c(DX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VX,"href","/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Av,"id","transformers.AutoModelForAudioClassification"),c(Av,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Av,"href","#transformers.AutoModelForAudioClassification"),c(cd,"class","relative group"),c(XX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QX,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(HX,"href","/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(UX,"href","/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(JX,"href","/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(YX,"href","/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(KX,"href","/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(ZX,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(ez,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(oz,"href","/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jv,"id","transformers.AutoModelForAudioFrameClassification"),c(jv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jv,"href","#transformers.AutoModelForAudioFrameClassification"),c(gd,"class","relative group"),c(rz,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tz,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(az,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nz,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(sz,"href","/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(lz,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(iz,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(dz,"href","/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Hv,"id","transformers.AutoModelForCTC"),c(Hv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Hv,"href","#transformers.AutoModelForCTC"),c(_d,"class","relative group"),c(cz,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fz,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mz,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gz,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(hz,"href","/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertForCTC"),c(pz,"href","/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWForCTC"),c(_z,"href","/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDForCTC"),c(uz,"href","/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(bz,"href","/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(vz,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(Fz,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(Tz,"href","/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMForCTC"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(l3,"id","transformers.AutoModelForSpeechSeq2Seq"),c(l3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(l3,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(vd,"class","relative group"),c(Mz,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ez,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Cz,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wz,"href","/docs/transformers/pr_16543/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(Az,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(g3,"id","transformers.AutoModelForAudioXVector"),c(g3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(g3,"href","#transformers.AutoModelForAudioXVector"),c(Md,"class","relative group"),c(yz,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lz,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xz,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($z,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(kz,"href","/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(Sz,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(Rz,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(Pz,"href","/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMForXVector"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(M3,"id","transformers.AutoModelForMaskedImageModeling"),c(M3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M3,"href","#transformers.AutoModelForMaskedImageModeling"),c(wd,"class","relative group"),c(Bz,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Iz,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Nz,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qz,"href","/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(jz,"href","/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(Dz,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(x3,"id","transformers.AutoModelForObjectDetection"),c(x3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(x3,"href","#transformers.AutoModelForObjectDetection"),c(xd,"class","relative group"),c(Gz,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Oz,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Vz,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xz,"href","/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrForObjectDetection"),c(zz,"href","/docs/transformers/pr_16543/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(B3,"id","transformers.AutoModelForImageSegmentation"),c(B3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(B3,"href","#transformers.AutoModelForImageSegmentation"),c(Sd,"class","relative group"),c(Wz,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qz,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Hz,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uz,"href","/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrForSegmentation"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(D3,"id","transformers.AutoModelForSemanticSegmentation"),c(D3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(D3,"href","#transformers.AutoModelForSemanticSegmentation"),c(Bd,"class","relative group"),c(Jz,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yz,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Kz,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zz,"href","/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(eW,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(oW,"href","/docs/transformers/pr_16543/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(rW,"href","/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(H3,"id","transformers.AutoModelForInstanceSegmentation"),c(H3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H3,"href","#transformers.AutoModelForInstanceSegmentation"),c(qd,"class","relative group"),c(tW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sW,"href","/docs/transformers/pr_16543/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Z3,"id","transformers.TFAutoModel"),c(Z3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Z3,"href","#transformers.TFAutoModel"),c(Gd,"class","relative group"),c(lW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cW,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertModel"),c(fW,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.TFBartModel"),c(mW,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertModel"),c(gW,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(hW,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(pW,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertModel"),c(_W,"href","/docs/transformers/pr_16543/en/model_doc/clip#transformers.TFCLIPModel"),c(uW,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertModel"),c(bW,"href","/docs/transformers/pr_16543/en/model_doc/convnext#transformers.TFConvNextModel"),c(vW,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.TFCTRLModel"),c(FW,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(TW,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaModel"),c(MW,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(EW,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(CW,"href","/docs/transformers/pr_16543/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(wW,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraModel"),c(AW,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(yW,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelModel"),c(LW,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(xW,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.TFGPT2Model"),c($W,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.TFGPTJModel"),c(kW,"href","/docs/transformers/pr_16543/en/model_doc/hubert#transformers.TFHubertModel"),c(SW,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(RW,"href","/docs/transformers/pr_16543/en/model_doc/led#transformers.TFLEDModel"),c(PW,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerModel"),c(BW,"href","/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.TFLxmertModel"),c(IW,"href","/docs/transformers/pr_16543/en/model_doc/marian#transformers.TFMarianModel"),c(NW,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.TFMBartModel"),c(qW,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(jW,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetModel"),c(DW,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.TFMT5Model"),c(GW,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(OW,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.TFPegasusModel"),c(VW,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertModel"),c(XW,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaModel"),c(zW,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerModel"),c(WW,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(QW,"href","/docs/transformers/pr_16543/en/model_doc/swin#transformers.TFSwinModel"),c(HW,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.TFT5Model"),c(UW,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasModel"),c(JW,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(YW,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.TFViTModel"),c(KW,"href","/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(ZW,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(eQ,"href","/docs/transformers/pr_16543/en/model_doc/xglm#transformers.TFXGLMModel"),c(oQ,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMModel"),c(rQ,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(tQ,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HF,"id","transformers.TFAutoModelForPreTraining"),c(HF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(HF,"href","#transformers.TFAutoModelForPreTraining"),c(Xd,"class","relative group"),c(aQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lQ,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(iQ,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(dQ,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForPreTraining"),c(cQ,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(fQ,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(mQ,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(gQ,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(hQ,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(pQ,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(_Q,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(uQ,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(bQ,"href","/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(vQ,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(FQ,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(TQ,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(MQ,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(EQ,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(CQ,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(wQ,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(AQ,"href","/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(yQ,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(LQ,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xQ,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(F6,"id","transformers.TFAutoModelForCausalLM"),c(F6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(F6,"href","#transformers.TFAutoModelForCausalLM"),c(Qd,"class","relative group"),c($Q,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RQ,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(PQ,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(BQ,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(IQ,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(NQ,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(qQ,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(jQ,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(DQ,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(GQ,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(OQ,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(VQ,"href","/docs/transformers/pr_16543/en/model_doc/xglm#transformers.TFXGLMForCausalLM"),c(XQ,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(zQ,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(I6,"id","transformers.TFAutoModelForImageClassification"),c(I6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(I6,"href","#transformers.TFAutoModelForImageClassification"),c(Jd,"class","relative group"),c(WQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UQ,"href","/docs/transformers/pr_16543/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(JQ,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(YQ,"href","/docs/transformers/pr_16543/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(KQ,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(V6,"id","transformers.TFAutoModelForMaskedLM"),c(V6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V6,"href","#transformers.TFAutoModelForMaskedLM"),c(Zd,"class","relative group"),c(ZQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rH,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(tH,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(aH,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(nH,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(sH,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(lH,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(iH,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(dH,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(cH,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(fH,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(mH,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(gH,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(hH,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(pH,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(_H,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(uH,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(bH,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(vH,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(FH,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(TH,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mT,"id","transformers.TFAutoModelForSeq2SeqLM"),c(mT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mT,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(rc,"class","relative group"),c(MH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wH,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(AH,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(yH,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(LH,"href","/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(xH,"href","/docs/transformers/pr_16543/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c($H,"href","/docs/transformers/pr_16543/en/model_doc/marian#transformers.TFMarianMTModel"),c(kH,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(SH,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(RH,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(PH,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wT,"id","transformers.TFAutoModelForSequenceClassification"),c(wT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wT,"href","#transformers.TFAutoModelForSequenceClassification"),c(nc,"class","relative group"),c(BH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qH,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(jH,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(DH,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(GH,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(OH,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(VH,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(XH,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(zH,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(WH,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(QH,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(HH,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(UH,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(JH,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(YH,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(KH,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(ZH,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(eU,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(oU,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(rU,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(tU,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(aU,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(nU,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(sU,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(lU,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(iU,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(dU,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eM,"id","transformers.TFAutoModelForMultipleChoice"),c(eM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eM,"href","#transformers.TFAutoModelForMultipleChoice"),c(ic,"class","relative group"),c(cU,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fU,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mU,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gU,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(hU,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(pU,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(_U,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(uU,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(bU,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(vU,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(FU,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(TU,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(MU,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(EU,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(CU,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(wU,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(AU,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(yU,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(LU,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(xU,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FM,"id","transformers.TFAutoModelForNextSentencePrediction"),c(FM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(FM,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(fc,"class","relative group"),c($U,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kU,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SU,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RU,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(PU,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wM,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(wM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wM,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(hc,"class","relative group"),c(BU,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IU,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NU,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qU,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xM,"id","transformers.TFAutoModelForTokenClassification"),c(xM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xM,"href","#transformers.TFAutoModelForTokenClassification"),c(uc,"class","relative group"),c(jU,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DU,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GU,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OU,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(VU,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(XU,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(zU,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(WU,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(QU,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(HU,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(UU,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(JU,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(YU,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(KU,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(ZU,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(eJ,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(oJ,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(rJ,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(tJ,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(aJ,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(nJ,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(sJ,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(lJ,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KM,"id","transformers.TFAutoModelForQuestionAnswering"),c(KM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(KM,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Fc,"class","relative group"),c(iJ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dJ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cJ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fJ,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(mJ,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(gJ,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(hJ,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(pJ,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(_J,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(uJ,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(bJ,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(vJ,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(FJ,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(TJ,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(MJ,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(EJ,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(CJ,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(wJ,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(AJ,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(yJ,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(LJ,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(xJ,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c($J,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TE,"id","transformers.TFAutoModelForVision2Seq"),c(TE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(TE,"href","#transformers.TFAutoModelForVision2Seq"),c(Ec,"class","relative group"),c(kJ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SJ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RJ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PJ,"href","/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wE,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(wE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wE,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Ac,"class","relative group"),c(BJ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IJ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NJ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qJ,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xE,"id","transformers.FlaxAutoModel"),c(xE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xE,"href","#transformers.FlaxAutoModel"),c(xc,"class","relative group"),c(jJ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DJ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GJ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OJ,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertModel"),c(VJ,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartModel"),c(XJ,"href","/docs/transformers/pr_16543/en/model_doc/beit#transformers.FlaxBeitModel"),c(zJ,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertModel"),c(WJ,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(QJ,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(HJ,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(UJ,"href","/docs/transformers/pr_16543/en/model_doc/clip#transformers.FlaxCLIPModel"),c(JJ,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(YJ,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraModel"),c(KJ,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(ZJ,"href","/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(eY,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(oY,"href","/docs/transformers/pr_16543/en/model_doc/marian#transformers.FlaxMarianModel"),c(rY,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartModel"),c(tY,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.FlaxMT5Model"),c(aY,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(nY,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(sY,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(lY,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.FlaxT5Model"),c(iY,"href","/docs/transformers/pr_16543/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(dY,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.FlaxViTModel"),c(cY,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(fY,"href","/docs/transformers/pr_16543/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(mY,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tC,"id","transformers.FlaxAutoModelForCausalLM"),c(tC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tC,"href","#transformers.FlaxAutoModelForCausalLM"),c(Sc,"class","relative group"),c(gY,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hY,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pY,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_Y,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(uY,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(bY,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(vY,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(FY,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(TY,"href","/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(MY,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(EY,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(CY,"href","/docs/transformers/pr_16543/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pC,"id","transformers.FlaxAutoModelForPreTraining"),c(pC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pC,"href","#transformers.FlaxAutoModelForPreTraining"),c(Bc,"class","relative group"),c(wY,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AY,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yY,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LY,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(xY,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c($Y,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(kY,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(SY,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(RY,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(PY,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(BY,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(IY,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(NY,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(qY,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(jY,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($C,"id","transformers.FlaxAutoModelForMaskedLM"),c($C,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($C,"href","#transformers.FlaxAutoModelForMaskedLM"),c(qc,"class","relative group"),c(DY,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GY,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OY,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VY,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(XY,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(zY,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(WY,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(QY,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(HY,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(UY,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(JY,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(YY,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(KY,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VC,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(VC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(VC,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Gc,"class","relative group"),c(ZY,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eK,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oK,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rK,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(tK,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(aK,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(nK,"href","/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(sK,"href","/docs/transformers/pr_16543/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(lK,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(iK,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(dK,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(cK,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ow,"id","transformers.FlaxAutoModelForSequenceClassification"),c(ow,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ow,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Xc,"class","relative group"),c(fK,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mK,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gK,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hK,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(pK,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(_K,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(uK,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(bK,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(vK,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(FK,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(TK,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(MK,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(EK,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hw,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(hw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hw,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Qc,"class","relative group"),c(CK,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wK,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AK,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yK,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(LK,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(xK,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c($K,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(kK,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(SK,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(RK,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(PK,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(BK,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(IK,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yw,"id","transformers.FlaxAutoModelForTokenClassification"),c(yw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yw,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Jc,"class","relative group"),c(NK,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qK,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jK,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DK,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(GK,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(OK,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(VK,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(XK,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(zK,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(WK,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(QK,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qw,"id","transformers.FlaxAutoModelForMultipleChoice"),c(qw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qw,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Zc,"class","relative group"),c(HK,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UK,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JK,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YK,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(KK,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(ZK,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(eZ,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(oZ,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(rZ,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(tZ,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(aZ,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uw,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(Uw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Uw,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(rf,"class","relative group"),c(nZ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sZ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lZ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iZ,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zw,"id","transformers.FlaxAutoModelForImageClassification"),c(Zw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Zw,"href","#transformers.FlaxAutoModelForImageClassification"),c(nf,"class","relative group"),c(dZ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cZ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fZ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mZ,"href","/docs/transformers/pr_16543/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(gZ,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(a0,"id","transformers.FlaxAutoModelForVision2Seq"),c(a0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a0,"href","#transformers.FlaxAutoModelForVision2Seq"),c(df,"class","relative group"),c(hZ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pZ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_Z,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uZ,"href","/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(d,_,null),e(p,h),e(p,Mo),e(Mo,fi),b(f,pf,u),b(f,rt,u),e(rt,mi),e(rt,gi),e(gi,wy),e(rt,_f),b(f,je,u),b(f,We,u),e(We,hi),e(We,yn),e(yn,Ay),e(We,Ln),e(We,xn),e(xn,yy),e(We,pi),e(We,$n),e($n,Ly),e(We,_i),b(f,uf,u),M(Ca,f,u),b(f,Qe,u),b(f,Ae,u),e(Ae,Q$),e(Ae,ui),e(ui,H$),e(Ae,U$),b(f,Eo,u),b(f,wa,u),e(wa,J$),e(wa,bf),e(bf,Y$),e(wa,uOe),b(f,sqe,u),b(f,bi,u),e(bi,vf),e(vf,coe),M(xy,coe,null),e(bi,bOe),e(bi,foe),e(foe,vOe),b(f,lqe,u),b(f,kn,u),e(kn,FOe),e(kn,moe),e(moe,TOe),e(kn,MOe),e(kn,goe),e(goe,EOe),e(kn,COe),b(f,iqe,u),M($y,f,u),b(f,dqe,u),b(f,K$,u),e(K$,wOe),b(f,cqe,u),M(Ff,f,u),b(f,fqe,u),b(f,vi,u),e(vi,Tf),e(Tf,hoe),M(ky,hoe,null),e(vi,AOe),e(vi,poe),e(poe,yOe),b(f,mqe,u),b(f,Co,u),M(Sy,Co,null),e(Co,LOe),e(Co,Ry),e(Ry,xOe),e(Ry,Z$),e(Z$,$Oe),e(Ry,kOe),e(Co,SOe),e(Co,Py),e(Py,ROe),e(Py,_oe),e(_oe,POe),e(Py,BOe),e(Co,IOe),e(Co,Er),M(By,Er,null),e(Er,NOe),e(Er,uoe),e(uoe,qOe),e(Er,jOe),e(Er,Fi),e(Fi,DOe),e(Fi,boe),e(boe,GOe),e(Fi,OOe),e(Fi,voe),e(voe,VOe),e(Fi,XOe),e(Er,zOe),e(Er,A),e(A,Mf),e(Mf,Foe),e(Foe,WOe),e(Mf,QOe),e(Mf,ek),e(ek,HOe),e(Mf,UOe),e(A,JOe),e(A,Ef),e(Ef,Toe),e(Toe,YOe),e(Ef,KOe),e(Ef,ok),e(ok,ZOe),e(Ef,eVe),e(A,oVe),e(A,Cf),e(Cf,Moe),e(Moe,rVe),e(Cf,tVe),e(Cf,rk),e(rk,aVe),e(Cf,nVe),e(A,sVe),e(A,wf),e(wf,Eoe),e(Eoe,lVe),e(wf,iVe),e(wf,tk),e(tk,dVe),e(wf,cVe),e(A,fVe),e(A,Af),e(Af,Coe),e(Coe,mVe),e(Af,gVe),e(Af,ak),e(ak,hVe),e(Af,pVe),e(A,_Ve),e(A,yf),e(yf,woe),e(woe,uVe),e(yf,bVe),e(yf,nk),e(nk,vVe),e(yf,FVe),e(A,TVe),e(A,Lf),e(Lf,Aoe),e(Aoe,MVe),e(Lf,EVe),e(Lf,sk),e(sk,CVe),e(Lf,wVe),e(A,AVe),e(A,xf),e(xf,yoe),e(yoe,yVe),e(xf,LVe),e(xf,lk),e(lk,xVe),e(xf,$Ve),e(A,kVe),e(A,$f),e($f,Loe),e(Loe,SVe),e($f,RVe),e($f,ik),e(ik,PVe),e($f,BVe),e(A,IVe),e(A,kf),e(kf,xoe),e(xoe,NVe),e(kf,qVe),e(kf,dk),e(dk,jVe),e(kf,DVe),e(A,GVe),e(A,Sf),e(Sf,$oe),e($oe,OVe),e(Sf,VVe),e(Sf,ck),e(ck,XVe),e(Sf,zVe),e(A,WVe),e(A,Rf),e(Rf,koe),e(koe,QVe),e(Rf,HVe),e(Rf,fk),e(fk,UVe),e(Rf,JVe),e(A,YVe),e(A,Pf),e(Pf,Soe),e(Soe,KVe),e(Pf,ZVe),e(Pf,mk),e(mk,eXe),e(Pf,oXe),e(A,rXe),e(A,Bf),e(Bf,Roe),e(Roe,tXe),e(Bf,aXe),e(Bf,gk),e(gk,nXe),e(Bf,sXe),e(A,lXe),e(A,If),e(If,Poe),e(Poe,iXe),e(If,dXe),e(If,hk),e(hk,cXe),e(If,fXe),e(A,mXe),e(A,Nf),e(Nf,Boe),e(Boe,gXe),e(Nf,hXe),e(Nf,pk),e(pk,pXe),e(Nf,_Xe),e(A,uXe),e(A,qf),e(qf,Ioe),e(Ioe,bXe),e(qf,vXe),e(qf,_k),e(_k,FXe),e(qf,TXe),e(A,MXe),e(A,jf),e(jf,Noe),e(Noe,EXe),e(jf,CXe),e(jf,uk),e(uk,wXe),e(jf,AXe),e(A,yXe),e(A,Df),e(Df,qoe),e(qoe,LXe),e(Df,xXe),e(Df,bk),e(bk,$Xe),e(Df,kXe),e(A,SXe),e(A,Gf),e(Gf,joe),e(joe,RXe),e(Gf,PXe),e(Gf,vk),e(vk,BXe),e(Gf,IXe),e(A,NXe),e(A,Of),e(Of,Doe),e(Doe,qXe),e(Of,jXe),e(Of,Fk),e(Fk,DXe),e(Of,GXe),e(A,OXe),e(A,Vf),e(Vf,Goe),e(Goe,VXe),e(Vf,XXe),e(Vf,Tk),e(Tk,zXe),e(Vf,WXe),e(A,QXe),e(A,Xf),e(Xf,Ooe),e(Ooe,HXe),e(Xf,UXe),e(Xf,Mk),e(Mk,JXe),e(Xf,YXe),e(A,KXe),e(A,zf),e(zf,Voe),e(Voe,ZXe),e(zf,eze),e(zf,Ek),e(Ek,oze),e(zf,rze),e(A,tze),e(A,Wf),e(Wf,Xoe),e(Xoe,aze),e(Wf,nze),e(Wf,Ck),e(Ck,sze),e(Wf,lze),e(A,ize),e(A,Qf),e(Qf,zoe),e(zoe,dze),e(Qf,cze),e(Qf,wk),e(wk,fze),e(Qf,mze),e(A,gze),e(A,Hf),e(Hf,Woe),e(Woe,hze),e(Hf,pze),e(Hf,Ak),e(Ak,_ze),e(Hf,uze),e(A,bze),e(A,Uf),e(Uf,Qoe),e(Qoe,vze),e(Uf,Fze),e(Uf,yk),e(yk,Tze),e(Uf,Mze),e(A,Eze),e(A,Jf),e(Jf,Hoe),e(Hoe,Cze),e(Jf,wze),e(Jf,Lk),e(Lk,Aze),e(Jf,yze),e(A,Lze),e(A,Yf),e(Yf,Uoe),e(Uoe,xze),e(Yf,$ze),e(Yf,xk),e(xk,kze),e(Yf,Sze),e(A,Rze),e(A,Kf),e(Kf,Joe),e(Joe,Pze),e(Kf,Bze),e(Kf,$k),e($k,Ize),e(Kf,Nze),e(A,qze),e(A,Zf),e(Zf,Yoe),e(Yoe,jze),e(Zf,Dze),e(Zf,kk),e(kk,Gze),e(Zf,Oze),e(A,Vze),e(A,em),e(em,Koe),e(Koe,Xze),e(em,zze),e(em,Sk),e(Sk,Wze),e(em,Qze),e(A,Hze),e(A,om),e(om,Zoe),e(Zoe,Uze),e(om,Jze),e(om,Rk),e(Rk,Yze),e(om,Kze),e(A,Zze),e(A,rm),e(rm,ere),e(ere,eWe),e(rm,oWe),e(rm,Pk),e(Pk,rWe),e(rm,tWe),e(A,aWe),e(A,tm),e(tm,ore),e(ore,nWe),e(tm,sWe),e(tm,Bk),e(Bk,lWe),e(tm,iWe),e(A,dWe),e(A,am),e(am,rre),e(rre,cWe),e(am,fWe),e(am,Ik),e(Ik,mWe),e(am,gWe),e(A,hWe),e(A,nm),e(nm,tre),e(tre,pWe),e(nm,_We),e(nm,Nk),e(Nk,uWe),e(nm,bWe),e(A,vWe),e(A,sm),e(sm,are),e(are,FWe),e(sm,TWe),e(sm,qk),e(qk,MWe),e(sm,EWe),e(A,CWe),e(A,lm),e(lm,nre),e(nre,wWe),e(lm,AWe),e(lm,jk),e(jk,yWe),e(lm,LWe),e(A,xWe),e(A,im),e(im,sre),e(sre,$We),e(im,kWe),e(im,Dk),e(Dk,SWe),e(im,RWe),e(A,PWe),e(A,dm),e(dm,lre),e(lre,BWe),e(dm,IWe),e(dm,Gk),e(Gk,NWe),e(dm,qWe),e(A,jWe),e(A,cm),e(cm,ire),e(ire,DWe),e(cm,GWe),e(cm,Ok),e(Ok,OWe),e(cm,VWe),e(A,XWe),e(A,fm),e(fm,dre),e(dre,zWe),e(fm,WWe),e(fm,Vk),e(Vk,QWe),e(fm,HWe),e(A,UWe),e(A,mm),e(mm,cre),e(cre,JWe),e(mm,YWe),e(mm,Xk),e(Xk,KWe),e(mm,ZWe),e(A,eQe),e(A,gm),e(gm,fre),e(fre,oQe),e(gm,rQe),e(gm,zk),e(zk,tQe),e(gm,aQe),e(A,nQe),e(A,hm),e(hm,mre),e(mre,sQe),e(hm,lQe),e(hm,Wk),e(Wk,iQe),e(hm,dQe),e(A,cQe),e(A,pm),e(pm,gre),e(gre,fQe),e(pm,mQe),e(pm,Qk),e(Qk,gQe),e(pm,hQe),e(A,pQe),e(A,_m),e(_m,hre),e(hre,_Qe),e(_m,uQe),e(_m,Hk),e(Hk,bQe),e(_m,vQe),e(A,FQe),e(A,um),e(um,pre),e(pre,TQe),e(um,MQe),e(um,Uk),e(Uk,EQe),e(um,CQe),e(A,wQe),e(A,bm),e(bm,_re),e(_re,AQe),e(bm,yQe),e(bm,Jk),e(Jk,LQe),e(bm,xQe),e(A,$Qe),e(A,vm),e(vm,ure),e(ure,kQe),e(vm,SQe),e(vm,Yk),e(Yk,RQe),e(vm,PQe),e(A,BQe),e(A,Fm),e(Fm,bre),e(bre,IQe),e(Fm,NQe),e(Fm,Kk),e(Kk,qQe),e(Fm,jQe),e(A,DQe),e(A,Tm),e(Tm,vre),e(vre,GQe),e(Tm,OQe),e(Tm,Zk),e(Zk,VQe),e(Tm,XQe),e(A,zQe),e(A,Mm),e(Mm,Fre),e(Fre,WQe),e(Mm,QQe),e(Mm,eS),e(eS,HQe),e(Mm,UQe),e(A,JQe),e(A,Em),e(Em,Tre),e(Tre,YQe),e(Em,KQe),e(Em,oS),e(oS,ZQe),e(Em,eHe),e(A,oHe),e(A,Cm),e(Cm,Mre),e(Mre,rHe),e(Cm,tHe),e(Cm,rS),e(rS,aHe),e(Cm,nHe),e(A,sHe),e(A,wm),e(wm,Ere),e(Ere,lHe),e(wm,iHe),e(wm,tS),e(tS,dHe),e(wm,cHe),e(A,fHe),e(A,Am),e(Am,Cre),e(Cre,mHe),e(Am,gHe),e(Am,aS),e(aS,hHe),e(Am,pHe),e(A,_He),e(A,ym),e(ym,wre),e(wre,uHe),e(ym,bHe),e(ym,nS),e(nS,vHe),e(ym,FHe),e(A,THe),e(A,Lm),e(Lm,Are),e(Are,MHe),e(Lm,EHe),e(Lm,sS),e(sS,CHe),e(Lm,wHe),e(A,AHe),e(A,xm),e(xm,yre),e(yre,yHe),e(xm,LHe),e(xm,lS),e(lS,xHe),e(xm,$He),e(A,kHe),e(A,$m),e($m,Lre),e(Lre,SHe),e($m,RHe),e($m,iS),e(iS,PHe),e($m,BHe),e(A,IHe),e(A,km),e(km,xre),e(xre,NHe),e(km,qHe),e(km,dS),e(dS,jHe),e(km,DHe),e(A,GHe),e(A,Sm),e(Sm,$re),e($re,OHe),e(Sm,VHe),e(Sm,cS),e(cS,XHe),e(Sm,zHe),e(A,WHe),e(A,Rm),e(Rm,kre),e(kre,QHe),e(Rm,HHe),e(Rm,fS),e(fS,UHe),e(Rm,JHe),e(A,YHe),e(A,Pm),e(Pm,Sre),e(Sre,KHe),e(Pm,ZHe),e(Pm,mS),e(mS,eUe),e(Pm,oUe),e(A,rUe),e(A,Bm),e(Bm,Rre),e(Rre,tUe),e(Bm,aUe),e(Bm,gS),e(gS,nUe),e(Bm,sUe),e(A,lUe),e(A,Im),e(Im,Pre),e(Pre,iUe),e(Im,dUe),e(Im,hS),e(hS,cUe),e(Im,fUe),e(A,mUe),e(A,Nm),e(Nm,Bre),e(Bre,gUe),e(Nm,hUe),e(Nm,pS),e(pS,pUe),e(Nm,_Ue),e(A,uUe),e(A,qm),e(qm,Ire),e(Ire,bUe),e(qm,vUe),e(qm,_S),e(_S,FUe),e(qm,TUe),e(A,MUe),e(A,jm),e(jm,Nre),e(Nre,EUe),e(jm,CUe),e(jm,uS),e(uS,wUe),e(jm,AUe),e(A,yUe),e(A,Dm),e(Dm,qre),e(qre,LUe),e(Dm,xUe),e(Dm,bS),e(bS,$Ue),e(Dm,kUe),e(A,SUe),e(A,Gm),e(Gm,jre),e(jre,RUe),e(Gm,PUe),e(Gm,vS),e(vS,BUe),e(Gm,IUe),e(A,NUe),e(A,Om),e(Om,Dre),e(Dre,qUe),e(Om,jUe),e(Om,FS),e(FS,DUe),e(Om,GUe),e(A,OUe),e(A,Vm),e(Vm,Gre),e(Gre,VUe),e(Vm,XUe),e(Vm,TS),e(TS,zUe),e(Vm,WUe),e(A,QUe),e(A,Xm),e(Xm,Ore),e(Ore,HUe),e(Xm,UUe),e(Xm,MS),e(MS,JUe),e(Xm,YUe),e(A,KUe),e(A,zm),e(zm,Vre),e(Vre,ZUe),e(zm,eJe),e(zm,ES),e(ES,oJe),e(zm,rJe),e(A,tJe),e(A,Wm),e(Wm,Xre),e(Xre,aJe),e(Wm,nJe),e(Wm,CS),e(CS,sJe),e(Wm,lJe),e(A,iJe),e(A,Qm),e(Qm,zre),e(zre,dJe),e(Qm,cJe),e(Qm,wS),e(wS,fJe),e(Qm,mJe),e(A,gJe),e(A,Hm),e(Hm,Wre),e(Wre,hJe),e(Hm,pJe),e(Hm,AS),e(AS,_Je),e(Hm,uJe),e(A,bJe),e(A,Um),e(Um,Qre),e(Qre,vJe),e(Um,FJe),e(Um,yS),e(yS,TJe),e(Um,MJe),e(A,EJe),e(A,Jm),e(Jm,Hre),e(Hre,CJe),e(Jm,wJe),e(Jm,LS),e(LS,AJe),e(Jm,yJe),e(A,LJe),e(A,Ym),e(Ym,Ure),e(Ure,xJe),e(Ym,$Je),e(Ym,xS),e(xS,kJe),e(Ym,SJe),e(A,RJe),e(A,Km),e(Km,Jre),e(Jre,PJe),e(Km,BJe),e(Km,$S),e($S,IJe),e(Km,NJe),e(A,qJe),e(A,Zm),e(Zm,Yre),e(Yre,jJe),e(Zm,DJe),e(Zm,kS),e(kS,GJe),e(Zm,OJe),e(A,VJe),e(A,eg),e(eg,Kre),e(Kre,XJe),e(eg,zJe),e(eg,SS),e(SS,WJe),e(eg,QJe),e(A,HJe),e(A,og),e(og,Zre),e(Zre,UJe),e(og,JJe),e(og,RS),e(RS,YJe),e(og,KJe),e(A,ZJe),e(A,rg),e(rg,ete),e(ete,eYe),e(rg,oYe),e(rg,PS),e(PS,rYe),e(rg,tYe),e(A,aYe),e(A,tg),e(tg,ote),e(ote,nYe),e(tg,sYe),e(tg,BS),e(BS,lYe),e(tg,iYe),e(A,dYe),e(A,ag),e(ag,rte),e(rte,cYe),e(ag,fYe),e(ag,IS),e(IS,mYe),e(ag,gYe),e(A,hYe),e(A,ng),e(ng,tte),e(tte,pYe),e(ng,_Ye),e(ng,NS),e(NS,uYe),e(ng,bYe),e(A,vYe),e(A,sg),e(sg,ate),e(ate,FYe),e(sg,TYe),e(sg,qS),e(qS,MYe),e(sg,EYe),e(A,CYe),e(A,lg),e(lg,nte),e(nte,wYe),e(lg,AYe),e(lg,jS),e(jS,yYe),e(lg,LYe),e(A,xYe),e(A,ig),e(ig,ste),e(ste,$Ye),e(ig,kYe),e(ig,DS),e(DS,SYe),e(ig,RYe),e(A,PYe),e(A,dg),e(dg,lte),e(lte,BYe),e(dg,IYe),e(dg,GS),e(GS,NYe),e(dg,qYe),e(A,jYe),e(A,cg),e(cg,ite),e(ite,DYe),e(cg,GYe),e(cg,OS),e(OS,OYe),e(cg,VYe),e(A,XYe),e(A,fg),e(fg,dte),e(dte,zYe),e(fg,WYe),e(fg,VS),e(VS,QYe),e(fg,HYe),e(A,UYe),e(A,mg),e(mg,cte),e(cte,JYe),e(mg,YYe),e(mg,XS),e(XS,KYe),e(mg,ZYe),e(A,eKe),e(A,gg),e(gg,fte),e(fte,oKe),e(gg,rKe),e(gg,zS),e(zS,tKe),e(gg,aKe),e(A,nKe),e(A,hg),e(hg,mte),e(mte,sKe),e(hg,lKe),e(hg,WS),e(WS,iKe),e(hg,dKe),e(A,cKe),e(A,pg),e(pg,gte),e(gte,fKe),e(pg,mKe),e(pg,QS),e(QS,gKe),e(pg,hKe),e(A,pKe),e(A,_g),e(_g,hte),e(hte,_Ke),e(_g,uKe),e(_g,HS),e(HS,bKe),e(_g,vKe),e(A,FKe),e(A,ug),e(ug,pte),e(pte,TKe),e(ug,MKe),e(ug,US),e(US,EKe),e(ug,CKe),e(A,wKe),e(A,bg),e(bg,_te),e(_te,AKe),e(bg,yKe),e(bg,JS),e(JS,LKe),e(bg,xKe),e(A,$Ke),e(A,vg),e(vg,ute),e(ute,kKe),e(vg,SKe),e(vg,YS),e(YS,RKe),e(vg,PKe),e(A,BKe),e(A,Fg),e(Fg,bte),e(bte,IKe),e(Fg,NKe),e(Fg,KS),e(KS,qKe),e(Fg,jKe),e(A,DKe),e(A,Tg),e(Tg,vte),e(vte,GKe),e(Tg,OKe),e(Tg,ZS),e(ZS,VKe),e(Tg,XKe),e(A,zKe),e(A,Mg),e(Mg,Fte),e(Fte,WKe),e(Mg,QKe),e(Mg,eR),e(eR,HKe),e(Mg,UKe),e(Er,JKe),M(Eg,Er,null),e(Co,YKe),e(Co,Cg),M(Iy,Cg,null),e(Cg,KKe),e(Cg,Tte),e(Tte,ZKe),b(f,gqe,u),b(f,Ti,u),e(Ti,wg),e(wg,Mte),M(Ny,Mte,null),e(Ti,eZe),e(Ti,Ete),e(Ete,oZe),b(f,hqe,u),b(f,wo,u),M(qy,wo,null),e(wo,rZe),e(wo,jy),e(jy,tZe),e(jy,oR),e(oR,aZe),e(jy,nZe),e(wo,sZe),e(wo,Dy),e(Dy,lZe),e(Dy,Cte),e(Cte,iZe),e(Dy,dZe),e(wo,cZe),e(wo,Cr),M(Gy,Cr,null),e(Cr,fZe),e(Cr,wte),e(wte,mZe),e(Cr,gZe),e(Cr,Aa),e(Aa,hZe),e(Aa,Ate),e(Ate,pZe),e(Aa,_Ze),e(Aa,yte),e(yte,uZe),e(Aa,bZe),e(Aa,Lte),e(Lte,vZe),e(Aa,FZe),e(Cr,TZe),e(Cr,k),e(k,Sn),e(Sn,xte),e(xte,MZe),e(Sn,EZe),e(Sn,rR),e(rR,CZe),e(Sn,wZe),e(Sn,tR),e(tR,AZe),e(Sn,yZe),e(k,LZe),e(k,Rn),e(Rn,$te),e($te,xZe),e(Rn,$Ze),e(Rn,aR),e(aR,kZe),e(Rn,SZe),e(Rn,nR),e(nR,RZe),e(Rn,PZe),e(k,BZe),e(k,Pn),e(Pn,kte),e(kte,IZe),e(Pn,NZe),e(Pn,sR),e(sR,qZe),e(Pn,jZe),e(Pn,lR),e(lR,DZe),e(Pn,GZe),e(k,OZe),e(k,Ag),e(Ag,Ste),e(Ste,VZe),e(Ag,XZe),e(Ag,iR),e(iR,zZe),e(Ag,WZe),e(k,QZe),e(k,Bn),e(Bn,Rte),e(Rte,HZe),e(Bn,UZe),e(Bn,dR),e(dR,JZe),e(Bn,YZe),e(Bn,cR),e(cR,KZe),e(Bn,ZZe),e(k,eeo),e(k,yg),e(yg,Pte),e(Pte,oeo),e(yg,reo),e(yg,fR),e(fR,teo),e(yg,aeo),e(k,neo),e(k,Lg),e(Lg,Bte),e(Bte,seo),e(Lg,leo),e(Lg,mR),e(mR,ieo),e(Lg,deo),e(k,ceo),e(k,xg),e(xg,Ite),e(Ite,feo),e(xg,meo),e(xg,gR),e(gR,geo),e(xg,heo),e(k,peo),e(k,In),e(In,Nte),e(Nte,_eo),e(In,ueo),e(In,hR),e(hR,beo),e(In,veo),e(In,pR),e(pR,Feo),e(In,Teo),e(k,Meo),e(k,Nn),e(Nn,qte),e(qte,Eeo),e(Nn,Ceo),e(Nn,_R),e(_R,weo),e(Nn,Aeo),e(Nn,uR),e(uR,yeo),e(Nn,Leo),e(k,xeo),e(k,qn),e(qn,jte),e(jte,$eo),e(qn,keo),e(qn,bR),e(bR,Seo),e(qn,Reo),e(qn,vR),e(vR,Peo),e(qn,Beo),e(k,Ieo),e(k,$g),e($g,Dte),e(Dte,Neo),e($g,qeo),e($g,FR),e(FR,jeo),e($g,Deo),e(k,Geo),e(k,kg),e(kg,Gte),e(Gte,Oeo),e(kg,Veo),e(kg,TR),e(TR,Xeo),e(kg,zeo),e(k,Weo),e(k,jn),e(jn,Ote),e(Ote,Qeo),e(jn,Heo),e(jn,MR),e(MR,Ueo),e(jn,Jeo),e(jn,ER),e(ER,Yeo),e(jn,Keo),e(k,Zeo),e(k,Sg),e(Sg,Vte),e(Vte,eoo),e(Sg,ooo),e(Sg,CR),e(CR,roo),e(Sg,too),e(k,aoo),e(k,Dn),e(Dn,Xte),e(Xte,noo),e(Dn,soo),e(Dn,wR),e(wR,loo),e(Dn,ioo),e(Dn,AR),e(AR,doo),e(Dn,coo),e(k,foo),e(k,Gn),e(Gn,zte),e(zte,moo),e(Gn,goo),e(Gn,yR),e(yR,hoo),e(Gn,poo),e(Gn,LR),e(LR,_oo),e(Gn,uoo),e(k,boo),e(k,On),e(On,Wte),e(Wte,voo),e(On,Foo),e(On,xR),e(xR,Too),e(On,Moo),e(On,$R),e($R,Eoo),e(On,Coo),e(k,woo),e(k,Rg),e(Rg,Qte),e(Qte,Aoo),e(Rg,yoo),e(Rg,kR),e(kR,Loo),e(Rg,xoo),e(k,$oo),e(k,Vn),e(Vn,Hte),e(Hte,koo),e(Vn,Soo),e(Vn,SR),e(SR,Roo),e(Vn,Poo),e(Vn,RR),e(RR,Boo),e(Vn,Ioo),e(k,Noo),e(k,Xn),e(Xn,Ute),e(Ute,qoo),e(Xn,joo),e(Xn,PR),e(PR,Doo),e(Xn,Goo),e(Xn,BR),e(BR,Ooo),e(Xn,Voo),e(k,Xoo),e(k,zn),e(zn,Jte),e(Jte,zoo),e(zn,Woo),e(zn,IR),e(IR,Qoo),e(zn,Hoo),e(zn,NR),e(NR,Uoo),e(zn,Joo),e(k,Yoo),e(k,Wn),e(Wn,Yte),e(Yte,Koo),e(Wn,Zoo),e(Wn,qR),e(qR,ero),e(Wn,oro),e(Wn,jR),e(jR,rro),e(Wn,tro),e(k,aro),e(k,Qn),e(Qn,Kte),e(Kte,nro),e(Qn,sro),e(Qn,DR),e(DR,lro),e(Qn,iro),e(Qn,GR),e(GR,dro),e(Qn,cro),e(k,fro),e(k,Hn),e(Hn,Zte),e(Zte,mro),e(Hn,gro),e(Hn,OR),e(OR,hro),e(Hn,pro),e(Hn,VR),e(VR,_ro),e(Hn,uro),e(k,bro),e(k,Pg),e(Pg,eae),e(eae,vro),e(Pg,Fro),e(Pg,XR),e(XR,Tro),e(Pg,Mro),e(k,Ero),e(k,Un),e(Un,oae),e(oae,Cro),e(Un,wro),e(Un,zR),e(zR,Aro),e(Un,yro),e(Un,WR),e(WR,Lro),e(Un,xro),e(k,$ro),e(k,Bg),e(Bg,rae),e(rae,kro),e(Bg,Sro),e(Bg,QR),e(QR,Rro),e(Bg,Pro),e(k,Bro),e(k,Jn),e(Jn,tae),e(tae,Iro),e(Jn,Nro),e(Jn,HR),e(HR,qro),e(Jn,jro),e(Jn,UR),e(UR,Dro),e(Jn,Gro),e(k,Oro),e(k,Yn),e(Yn,aae),e(aae,Vro),e(Yn,Xro),e(Yn,JR),e(JR,zro),e(Yn,Wro),e(Yn,YR),e(YR,Qro),e(Yn,Hro),e(k,Uro),e(k,Kn),e(Kn,nae),e(nae,Jro),e(Kn,Yro),e(Kn,KR),e(KR,Kro),e(Kn,Zro),e(Kn,ZR),e(ZR,eto),e(Kn,oto),e(k,rto),e(k,Ig),e(Ig,sae),e(sae,tto),e(Ig,ato),e(Ig,eP),e(eP,nto),e(Ig,sto),e(k,lto),e(k,Zn),e(Zn,lae),e(lae,ito),e(Zn,dto),e(Zn,oP),e(oP,cto),e(Zn,fto),e(Zn,rP),e(rP,mto),e(Zn,gto),e(k,hto),e(k,es),e(es,iae),e(iae,pto),e(es,_to),e(es,tP),e(tP,uto),e(es,bto),e(es,aP),e(aP,vto),e(es,Fto),e(k,Tto),e(k,Ng),e(Ng,dae),e(dae,Mto),e(Ng,Eto),e(Ng,nP),e(nP,Cto),e(Ng,wto),e(k,Ato),e(k,os),e(os,cae),e(cae,yto),e(os,Lto),e(os,sP),e(sP,xto),e(os,$to),e(os,lP),e(lP,kto),e(os,Sto),e(k,Rto),e(k,rs),e(rs,fae),e(fae,Pto),e(rs,Bto),e(rs,iP),e(iP,Ito),e(rs,Nto),e(rs,dP),e(dP,qto),e(rs,jto),e(k,Dto),e(k,ts),e(ts,mae),e(mae,Gto),e(ts,Oto),e(ts,cP),e(cP,Vto),e(ts,Xto),e(ts,fP),e(fP,zto),e(ts,Wto),e(k,Qto),e(k,as),e(as,gae),e(gae,Hto),e(as,Uto),e(as,mP),e(mP,Jto),e(as,Yto),e(as,gP),e(gP,Kto),e(as,Zto),e(k,eao),e(k,ns),e(ns,hae),e(hae,oao),e(ns,rao),e(ns,hP),e(hP,tao),e(ns,aao),e(ns,pP),e(pP,nao),e(ns,sao),e(k,lao),e(k,ss),e(ss,pae),e(pae,iao),e(ss,dao),e(ss,_P),e(_P,cao),e(ss,fao),e(ss,uP),e(uP,mao),e(ss,gao),e(k,hao),e(k,ls),e(ls,_ae),e(_ae,pao),e(ls,_ao),e(ls,bP),e(bP,uao),e(ls,bao),e(ls,vP),e(vP,vao),e(ls,Fao),e(k,Tao),e(k,qg),e(qg,uae),e(uae,Mao),e(qg,Eao),e(qg,FP),e(FP,Cao),e(qg,wao),e(k,Aao),e(k,is),e(is,bae),e(bae,yao),e(is,Lao),e(is,TP),e(TP,xao),e(is,$ao),e(is,MP),e(MP,kao),e(is,Sao),e(k,Rao),e(k,jg),e(jg,vae),e(vae,Pao),e(jg,Bao),e(jg,EP),e(EP,Iao),e(jg,Nao),e(k,qao),e(k,Dg),e(Dg,Fae),e(Fae,jao),e(Dg,Dao),e(Dg,CP),e(CP,Gao),e(Dg,Oao),e(k,Vao),e(k,ds),e(ds,Tae),e(Tae,Xao),e(ds,zao),e(ds,wP),e(wP,Wao),e(ds,Qao),e(ds,AP),e(AP,Hao),e(ds,Uao),e(k,Jao),e(k,cs),e(cs,Mae),e(Mae,Yao),e(cs,Kao),e(cs,yP),e(yP,Zao),e(cs,eno),e(cs,LP),e(LP,ono),e(cs,rno),e(k,tno),e(k,fs),e(fs,Eae),e(Eae,ano),e(fs,nno),e(fs,xP),e(xP,sno),e(fs,lno),e(fs,$P),e($P,ino),e(fs,dno),e(k,cno),e(k,Gg),e(Gg,Cae),e(Cae,fno),e(Gg,mno),e(Gg,kP),e(kP,gno),e(Gg,hno),e(k,pno),e(k,ms),e(ms,wae),e(wae,_no),e(ms,uno),e(ms,SP),e(SP,bno),e(ms,vno),e(ms,RP),e(RP,Fno),e(ms,Tno),e(k,Mno),e(k,gs),e(gs,Aae),e(Aae,Eno),e(gs,Cno),e(gs,PP),e(PP,wno),e(gs,Ano),e(gs,BP),e(BP,yno),e(gs,Lno),e(k,xno),e(k,hs),e(hs,yae),e(yae,$no),e(hs,kno),e(hs,IP),e(IP,Sno),e(hs,Rno),e(hs,NP),e(NP,Pno),e(hs,Bno),e(k,Ino),e(k,ps),e(ps,Lae),e(Lae,Nno),e(ps,qno),e(ps,qP),e(qP,jno),e(ps,Dno),e(ps,jP),e(jP,Gno),e(ps,Ono),e(k,Vno),e(k,_s),e(_s,xae),e(xae,Xno),e(_s,zno),e(_s,DP),e(DP,Wno),e(_s,Qno),e(_s,GP),e(GP,Hno),e(_s,Uno),e(k,Jno),e(k,Og),e(Og,$ae),e($ae,Yno),e(Og,Kno),e(Og,OP),e(OP,Zno),e(Og,eso),e(k,oso),e(k,us),e(us,kae),e(kae,rso),e(us,tso),e(us,VP),e(VP,aso),e(us,nso),e(us,XP),e(XP,sso),e(us,lso),e(k,iso),e(k,Vg),e(Vg,Sae),e(Sae,dso),e(Vg,cso),e(Vg,zP),e(zP,fso),e(Vg,mso),e(k,gso),e(k,Xg),e(Xg,Rae),e(Rae,hso),e(Xg,pso),e(Xg,WP),e(WP,_so),e(Xg,uso),e(k,bso),e(k,zg),e(zg,Pae),e(Pae,vso),e(zg,Fso),e(zg,QP),e(QP,Tso),e(zg,Mso),e(k,Eso),e(k,Wg),e(Wg,Bae),e(Bae,Cso),e(Wg,wso),e(Wg,HP),e(HP,Aso),e(Wg,yso),e(k,Lso),e(k,bs),e(bs,Iae),e(Iae,xso),e(bs,$so),e(bs,UP),e(UP,kso),e(bs,Sso),e(bs,JP),e(JP,Rso),e(bs,Pso),e(k,Bso),e(k,Qg),e(Qg,Nae),e(Nae,Iso),e(Qg,Nso),e(Qg,YP),e(YP,qso),e(Qg,jso),e(k,Dso),e(k,vs),e(vs,qae),e(qae,Gso),e(vs,Oso),e(vs,KP),e(KP,Vso),e(vs,Xso),e(vs,ZP),e(ZP,zso),e(vs,Wso),e(k,Qso),e(k,Fs),e(Fs,jae),e(jae,Hso),e(Fs,Uso),e(Fs,eB),e(eB,Jso),e(Fs,Yso),e(Fs,oB),e(oB,Kso),e(Fs,Zso),e(k,elo),e(k,Ts),e(Ts,Dae),e(Dae,olo),e(Ts,rlo),e(Ts,rB),e(rB,tlo),e(Ts,alo),e(Ts,tB),e(tB,nlo),e(Ts,slo),e(k,llo),e(k,Ms),e(Ms,Gae),e(Gae,ilo),e(Ms,dlo),e(Ms,aB),e(aB,clo),e(Ms,flo),e(Ms,nB),e(nB,mlo),e(Ms,glo),e(k,hlo),e(k,Es),e(Es,Oae),e(Oae,plo),e(Es,_lo),e(Es,sB),e(sB,ulo),e(Es,blo),e(Es,lB),e(lB,vlo),e(Es,Flo),e(k,Tlo),e(k,Cs),e(Cs,Vae),e(Vae,Mlo),e(Cs,Elo),e(Cs,iB),e(iB,Clo),e(Cs,wlo),e(Cs,dB),e(dB,Alo),e(Cs,ylo),e(k,Llo),e(k,Hg),e(Hg,Xae),e(Xae,xlo),e(Hg,$lo),e(Hg,cB),e(cB,klo),e(Hg,Slo),e(k,Rlo),e(k,Ug),e(Ug,zae),e(zae,Plo),e(Ug,Blo),e(Ug,fB),e(fB,Ilo),e(Ug,Nlo),e(k,qlo),e(k,ws),e(ws,Wae),e(Wae,jlo),e(ws,Dlo),e(ws,mB),e(mB,Glo),e(ws,Olo),e(ws,gB),e(gB,Vlo),e(ws,Xlo),e(k,zlo),e(k,As),e(As,Qae),e(Qae,Wlo),e(As,Qlo),e(As,hB),e(hB,Hlo),e(As,Ulo),e(As,pB),e(pB,Jlo),e(As,Ylo),e(k,Klo),e(k,ys),e(ys,Hae),e(Hae,Zlo),e(ys,eio),e(ys,_B),e(_B,oio),e(ys,rio),e(ys,uB),e(uB,tio),e(ys,aio),e(k,nio),e(k,Jg),e(Jg,Uae),e(Uae,sio),e(Jg,lio),e(Jg,bB),e(bB,iio),e(Jg,dio),e(k,cio),e(k,Yg),e(Yg,Jae),e(Jae,fio),e(Yg,mio),e(Yg,vB),e(vB,gio),e(Yg,hio),e(k,pio),e(k,Kg),e(Kg,Yae),e(Yae,_io),e(Kg,uio),e(Kg,FB),e(FB,bio),e(Kg,vio),e(k,Fio),e(k,Ls),e(Ls,Kae),e(Kae,Tio),e(Ls,Mio),e(Ls,TB),e(TB,Eio),e(Ls,Cio),e(Ls,MB),e(MB,wio),e(Ls,Aio),e(k,yio),e(k,Zg),e(Zg,Zae),e(Zae,Lio),e(Zg,xio),e(Zg,EB),e(EB,$io),e(Zg,kio),e(k,Sio),e(k,eh),e(eh,ene),e(ene,Rio),e(eh,Pio),e(eh,CB),e(CB,Bio),e(eh,Iio),e(k,Nio),e(k,oh),e(oh,one),e(one,qio),e(oh,jio),e(oh,wB),e(wB,Dio),e(oh,Gio),e(k,Oio),e(k,xs),e(xs,rne),e(rne,Vio),e(xs,Xio),e(xs,AB),e(AB,zio),e(xs,Wio),e(xs,yB),e(yB,Qio),e(xs,Hio),e(k,Uio),e(k,rh),e(rh,tne),e(tne,Jio),e(rh,Yio),e(rh,LB),e(LB,Kio),e(rh,Zio),e(k,edo),e(k,th),e(th,ane),e(ane,odo),e(th,rdo),e(th,xB),e(xB,tdo),e(th,ado),e(k,ndo),e(k,$s),e($s,nne),e(nne,sdo),e($s,ldo),e($s,$B),e($B,ido),e($s,ddo),e($s,kB),e(kB,cdo),e($s,fdo),e(k,mdo),e(k,ks),e(ks,sne),e(sne,gdo),e(ks,hdo),e(ks,SB),e(SB,pdo),e(ks,_do),e(ks,RB),e(RB,udo),e(ks,bdo),e(k,vdo),e(k,Ss),e(Ss,lne),e(lne,Fdo),e(Ss,Tdo),e(Ss,PB),e(PB,Mdo),e(Ss,Edo),e(Ss,BB),e(BB,Cdo),e(Ss,wdo),e(k,Ado),e(k,Rs),e(Rs,ine),e(ine,ydo),e(Rs,Ldo),e(Rs,IB),e(IB,xdo),e(Rs,$do),e(Rs,NB),e(NB,kdo),e(Rs,Sdo),e(Cr,Rdo),M(ah,Cr,null),e(wo,Pdo),e(wo,nh),M(Oy,nh,null),e(nh,Bdo),e(nh,dne),e(dne,Ido),b(f,pqe,u),b(f,Mi,u),e(Mi,sh),e(sh,cne),M(Vy,cne,null),e(Mi,Ndo),e(Mi,fne),e(fne,qdo),b(f,_qe,u),b(f,Ao,u),M(Xy,Ao,null),e(Ao,jdo),e(Ao,zy),e(zy,Ddo),e(zy,qB),e(qB,Gdo),e(zy,Odo),e(Ao,Vdo),e(Ao,Wy),e(Wy,Xdo),e(Wy,mne),e(mne,zdo),e(Wy,Wdo),e(Ao,Qdo),e(Ao,He),M(Qy,He,null),e(He,Hdo),e(He,gne),e(gne,Udo),e(He,Jdo),e(He,ya),e(ya,Ydo),e(ya,hne),e(hne,Kdo),e(ya,Zdo),e(ya,pne),e(pne,eco),e(ya,oco),e(ya,_ne),e(_ne,rco),e(ya,tco),e(He,aco),e(He,Y),e(Y,lh),e(lh,une),e(une,nco),e(lh,sco),e(lh,jB),e(jB,lco),e(lh,ico),e(Y,dco),e(Y,ih),e(ih,bne),e(bne,cco),e(ih,fco),e(ih,DB),e(DB,mco),e(ih,gco),e(Y,hco),e(Y,dh),e(dh,vne),e(vne,pco),e(dh,_co),e(dh,GB),e(GB,uco),e(dh,bco),e(Y,vco),e(Y,ch),e(ch,Fne),e(Fne,Fco),e(ch,Tco),e(ch,OB),e(OB,Mco),e(ch,Eco),e(Y,Cco),e(Y,fh),e(fh,Tne),e(Tne,wco),e(fh,Aco),e(fh,VB),e(VB,yco),e(fh,Lco),e(Y,xco),e(Y,mh),e(mh,Mne),e(Mne,$co),e(mh,kco),e(mh,XB),e(XB,Sco),e(mh,Rco),e(Y,Pco),e(Y,gh),e(gh,Ene),e(Ene,Bco),e(gh,Ico),e(gh,zB),e(zB,Nco),e(gh,qco),e(Y,jco),e(Y,hh),e(hh,Cne),e(Cne,Dco),e(hh,Gco),e(hh,WB),e(WB,Oco),e(hh,Vco),e(Y,Xco),e(Y,ph),e(ph,wne),e(wne,zco),e(ph,Wco),e(ph,QB),e(QB,Qco),e(ph,Hco),e(Y,Uco),e(Y,_h),e(_h,Ane),e(Ane,Jco),e(_h,Yco),e(_h,HB),e(HB,Kco),e(_h,Zco),e(Y,efo),e(Y,uh),e(uh,yne),e(yne,ofo),e(uh,rfo),e(uh,UB),e(UB,tfo),e(uh,afo),e(Y,nfo),e(Y,bh),e(bh,Lne),e(Lne,sfo),e(bh,lfo),e(bh,JB),e(JB,ifo),e(bh,dfo),e(Y,cfo),e(Y,vh),e(vh,xne),e(xne,ffo),e(vh,mfo),e(vh,YB),e(YB,gfo),e(vh,hfo),e(Y,pfo),e(Y,Fh),e(Fh,$ne),e($ne,_fo),e(Fh,ufo),e(Fh,KB),e(KB,bfo),e(Fh,vfo),e(Y,Ffo),e(Y,Th),e(Th,kne),e(kne,Tfo),e(Th,Mfo),e(Th,ZB),e(ZB,Efo),e(Th,Cfo),e(Y,wfo),e(Y,Mh),e(Mh,Sne),e(Sne,Afo),e(Mh,yfo),e(Mh,eI),e(eI,Lfo),e(Mh,xfo),e(Y,$fo),e(Y,Eh),e(Eh,Rne),e(Rne,kfo),e(Eh,Sfo),e(Eh,oI),e(oI,Rfo),e(Eh,Pfo),e(Y,Bfo),e(Y,Ch),e(Ch,Pne),e(Pne,Ifo),e(Ch,Nfo),e(Ch,rI),e(rI,qfo),e(Ch,jfo),e(Y,Dfo),e(Y,wh),e(wh,Bne),e(Bne,Gfo),e(wh,Ofo),e(wh,tI),e(tI,Vfo),e(wh,Xfo),e(Y,zfo),e(Y,Ah),e(Ah,Ine),e(Ine,Wfo),e(Ah,Qfo),e(Ah,aI),e(aI,Hfo),e(Ah,Ufo),e(Y,Jfo),e(Y,yh),e(yh,Nne),e(Nne,Yfo),e(yh,Kfo),e(yh,nI),e(nI,Zfo),e(yh,emo),e(Y,omo),e(Y,Lh),e(Lh,qne),e(qne,rmo),e(Lh,tmo),e(Lh,sI),e(sI,amo),e(Lh,nmo),e(Y,smo),e(Y,xh),e(xh,jne),e(jne,lmo),e(xh,imo),e(xh,lI),e(lI,dmo),e(xh,cmo),e(Y,fmo),e(Y,$h),e($h,Dne),e(Dne,mmo),e($h,gmo),e($h,iI),e(iI,hmo),e($h,pmo),e(Y,_mo),e(Y,kh),e(kh,Gne),e(Gne,umo),e(kh,bmo),e(kh,dI),e(dI,vmo),e(kh,Fmo),e(Y,Tmo),e(Y,Sh),e(Sh,One),e(One,Mmo),e(Sh,Emo),e(Sh,cI),e(cI,Cmo),e(Sh,wmo),e(Y,Amo),e(Y,Rh),e(Rh,Vne),e(Vne,ymo),e(Rh,Lmo),e(Rh,fI),e(fI,xmo),e(Rh,$mo),e(Y,kmo),e(Y,Ph),e(Ph,Xne),e(Xne,Smo),e(Ph,Rmo),e(Ph,mI),e(mI,Pmo),e(Ph,Bmo),e(Y,Imo),e(Y,Bh),e(Bh,zne),e(zne,Nmo),e(Bh,qmo),e(Bh,gI),e(gI,jmo),e(Bh,Dmo),e(He,Gmo),M(Ih,He,null),e(He,Omo),M(Nh,He,null),e(Ao,Vmo),e(Ao,qh),M(Hy,qh,null),e(qh,Xmo),e(qh,Wne),e(Wne,zmo),b(f,uqe,u),b(f,Ei,u),e(Ei,jh),e(jh,Qne),M(Uy,Qne,null),e(Ei,Wmo),e(Ei,Hne),e(Hne,Qmo),b(f,bqe,u),b(f,yo,u),M(Jy,yo,null),e(yo,Hmo),e(yo,Yy),e(Yy,Umo),e(Yy,hI),e(hI,Jmo),e(Yy,Ymo),e(yo,Kmo),e(yo,Ky),e(Ky,Zmo),e(Ky,Une),e(Une,ego),e(Ky,ogo),e(yo,rgo),e(yo,Ue),M(Zy,Ue,null),e(Ue,tgo),e(Ue,Jne),e(Jne,ago),e(Ue,ngo),e(Ue,Ci),e(Ci,sgo),e(Ci,Yne),e(Yne,lgo),e(Ci,igo),e(Ci,Kne),e(Kne,dgo),e(Ci,cgo),e(Ue,fgo),e(Ue,he),e(he,Dh),e(Dh,Zne),e(Zne,mgo),e(Dh,ggo),e(Dh,pI),e(pI,hgo),e(Dh,pgo),e(he,_go),e(he,Gh),e(Gh,ese),e(ese,ugo),e(Gh,bgo),e(Gh,ose),e(ose,vgo),e(Gh,Fgo),e(he,Tgo),e(he,Oh),e(Oh,rse),e(rse,Mgo),e(Oh,Ego),e(Oh,_I),e(_I,Cgo),e(Oh,wgo),e(he,Ago),e(he,Vh),e(Vh,tse),e(tse,ygo),e(Vh,Lgo),e(Vh,uI),e(uI,xgo),e(Vh,$go),e(he,kgo),e(he,Xh),e(Xh,ase),e(ase,Sgo),e(Xh,Rgo),e(Xh,bI),e(bI,Pgo),e(Xh,Bgo),e(he,Igo),e(he,zh),e(zh,nse),e(nse,Ngo),e(zh,qgo),e(zh,vI),e(vI,jgo),e(zh,Dgo),e(he,Ggo),e(he,Wh),e(Wh,sse),e(sse,Ogo),e(Wh,Vgo),e(Wh,FI),e(FI,Xgo),e(Wh,zgo),e(he,Wgo),e(he,Qh),e(Qh,lse),e(lse,Qgo),e(Qh,Hgo),e(Qh,TI),e(TI,Ugo),e(Qh,Jgo),e(he,Ygo),e(he,Hh),e(Hh,ise),e(ise,Kgo),e(Hh,Zgo),e(Hh,MI),e(MI,eho),e(Hh,oho),e(he,rho),e(he,Uh),e(Uh,dse),e(dse,tho),e(Uh,aho),e(Uh,EI),e(EI,nho),e(Uh,sho),e(he,lho),e(he,Jh),e(Jh,cse),e(cse,iho),e(Jh,dho),e(Jh,CI),e(CI,cho),e(Jh,fho),e(he,mho),e(he,Yh),e(Yh,fse),e(fse,gho),e(Yh,hho),e(Yh,wI),e(wI,pho),e(Yh,_ho),e(he,uho),e(he,Kh),e(Kh,mse),e(mse,bho),e(Kh,vho),e(Kh,AI),e(AI,Fho),e(Kh,Tho),e(he,Mho),e(he,Zh),e(Zh,gse),e(gse,Eho),e(Zh,Cho),e(Zh,yI),e(yI,who),e(Zh,Aho),e(he,yho),e(he,ep),e(ep,hse),e(hse,Lho),e(ep,xho),e(ep,LI),e(LI,$ho),e(ep,kho),e(he,Sho),e(he,op),e(op,pse),e(pse,Rho),e(op,Pho),e(op,xI),e(xI,Bho),e(op,Iho),e(he,Nho),e(he,rp),e(rp,_se),e(_se,qho),e(rp,jho),e(rp,$I),e($I,Dho),e(rp,Gho),e(Ue,Oho),M(tp,Ue,null),e(Ue,Vho),M(ap,Ue,null),e(yo,Xho),e(yo,np),M(eL,np,null),e(np,zho),e(np,use),e(use,Who),b(f,vqe,u),b(f,wi,u),e(wi,sp),e(sp,bse),M(oL,bse,null),e(wi,Qho),e(wi,vse),e(vse,Hho),b(f,Fqe,u),b(f,Lo,u),M(rL,Lo,null),e(Lo,Uho),e(Lo,Ai),e(Ai,Jho),e(Ai,kI),e(kI,Yho),e(Ai,Kho),e(Ai,SI),e(SI,Zho),e(Ai,epo),e(Lo,opo),e(Lo,tL),e(tL,rpo),e(tL,Fse),e(Fse,tpo),e(tL,apo),e(Lo,npo),e(Lo,tt),M(aL,tt,null),e(tt,spo),e(tt,Tse),e(Tse,lpo),e(tt,ipo),e(tt,yi),e(yi,dpo),e(yi,Mse),e(Mse,cpo),e(yi,fpo),e(yi,RI),e(RI,mpo),e(yi,gpo),e(tt,hpo),M(lp,tt,null),e(Lo,ppo),e(Lo,Je),M(nL,Je,null),e(Je,_po),e(Je,Ese),e(Ese,upo),e(Je,bpo),e(Je,La),e(La,vpo),e(La,Cse),e(Cse,Fpo),e(La,Tpo),e(La,wse),e(wse,Mpo),e(La,Epo),e(La,Ase),e(Ase,Cpo),e(La,wpo),e(Je,Apo),e(Je,x),e(x,ip),e(ip,yse),e(yse,ypo),e(ip,Lpo),e(ip,PI),e(PI,xpo),e(ip,$po),e(x,kpo),e(x,dp),e(dp,Lse),e(Lse,Spo),e(dp,Rpo),e(dp,BI),e(BI,Ppo),e(dp,Bpo),e(x,Ipo),e(x,cp),e(cp,xse),e(xse,Npo),e(cp,qpo),e(cp,II),e(II,jpo),e(cp,Dpo),e(x,Gpo),e(x,fp),e(fp,$se),e($se,Opo),e(fp,Vpo),e(fp,NI),e(NI,Xpo),e(fp,zpo),e(x,Wpo),e(x,mp),e(mp,kse),e(kse,Qpo),e(mp,Hpo),e(mp,qI),e(qI,Upo),e(mp,Jpo),e(x,Ypo),e(x,gp),e(gp,Sse),e(Sse,Kpo),e(gp,Zpo),e(gp,jI),e(jI,e_o),e(gp,o_o),e(x,r_o),e(x,hp),e(hp,Rse),e(Rse,t_o),e(hp,a_o),e(hp,DI),e(DI,n_o),e(hp,s_o),e(x,l_o),e(x,pp),e(pp,Pse),e(Pse,i_o),e(pp,d_o),e(pp,GI),e(GI,c_o),e(pp,f_o),e(x,m_o),e(x,_p),e(_p,Bse),e(Bse,g_o),e(_p,h_o),e(_p,OI),e(OI,p_o),e(_p,__o),e(x,u_o),e(x,up),e(up,Ise),e(Ise,b_o),e(up,v_o),e(up,VI),e(VI,F_o),e(up,T_o),e(x,M_o),e(x,bp),e(bp,Nse),e(Nse,E_o),e(bp,C_o),e(bp,XI),e(XI,w_o),e(bp,A_o),e(x,y_o),e(x,vp),e(vp,qse),e(qse,L_o),e(vp,x_o),e(vp,zI),e(zI,$_o),e(vp,k_o),e(x,S_o),e(x,Fp),e(Fp,jse),e(jse,R_o),e(Fp,P_o),e(Fp,WI),e(WI,B_o),e(Fp,I_o),e(x,N_o),e(x,Tp),e(Tp,Dse),e(Dse,q_o),e(Tp,j_o),e(Tp,QI),e(QI,D_o),e(Tp,G_o),e(x,O_o),e(x,Mp),e(Mp,Gse),e(Gse,V_o),e(Mp,X_o),e(Mp,HI),e(HI,z_o),e(Mp,W_o),e(x,Q_o),e(x,Ep),e(Ep,Ose),e(Ose,H_o),e(Ep,U_o),e(Ep,UI),e(UI,J_o),e(Ep,Y_o),e(x,K_o),e(x,Cp),e(Cp,Vse),e(Vse,Z_o),e(Cp,euo),e(Cp,JI),e(JI,ouo),e(Cp,ruo),e(x,tuo),e(x,wp),e(wp,Xse),e(Xse,auo),e(wp,nuo),e(wp,YI),e(YI,suo),e(wp,luo),e(x,iuo),e(x,Ap),e(Ap,zse),e(zse,duo),e(Ap,cuo),e(Ap,KI),e(KI,fuo),e(Ap,muo),e(x,guo),e(x,yp),e(yp,Wse),e(Wse,huo),e(yp,puo),e(yp,ZI),e(ZI,_uo),e(yp,uuo),e(x,buo),e(x,Lp),e(Lp,Qse),e(Qse,vuo),e(Lp,Fuo),e(Lp,eN),e(eN,Tuo),e(Lp,Muo),e(x,Euo),e(x,xp),e(xp,Hse),e(Hse,Cuo),e(xp,wuo),e(xp,oN),e(oN,Auo),e(xp,yuo),e(x,Luo),e(x,$p),e($p,Use),e(Use,xuo),e($p,$uo),e($p,rN),e(rN,kuo),e($p,Suo),e(x,Ruo),e(x,kp),e(kp,Jse),e(Jse,Puo),e(kp,Buo),e(kp,tN),e(tN,Iuo),e(kp,Nuo),e(x,quo),e(x,Sp),e(Sp,Yse),e(Yse,juo),e(Sp,Duo),e(Sp,aN),e(aN,Guo),e(Sp,Ouo),e(x,Vuo),e(x,Rp),e(Rp,Kse),e(Kse,Xuo),e(Rp,zuo),e(Rp,nN),e(nN,Wuo),e(Rp,Quo),e(x,Huo),e(x,Pp),e(Pp,Zse),e(Zse,Uuo),e(Pp,Juo),e(Pp,sN),e(sN,Yuo),e(Pp,Kuo),e(x,Zuo),e(x,Bp),e(Bp,ele),e(ele,e1o),e(Bp,o1o),e(Bp,lN),e(lN,r1o),e(Bp,t1o),e(x,a1o),e(x,Ip),e(Ip,ole),e(ole,n1o),e(Ip,s1o),e(Ip,iN),e(iN,l1o),e(Ip,i1o),e(x,d1o),e(x,Np),e(Np,rle),e(rle,c1o),e(Np,f1o),e(Np,dN),e(dN,m1o),e(Np,g1o),e(x,h1o),e(x,qp),e(qp,tle),e(tle,p1o),e(qp,_1o),e(qp,cN),e(cN,u1o),e(qp,b1o),e(x,v1o),e(x,jp),e(jp,ale),e(ale,F1o),e(jp,T1o),e(jp,fN),e(fN,M1o),e(jp,E1o),e(x,C1o),e(x,Ps),e(Ps,nle),e(nle,w1o),e(Ps,A1o),e(Ps,mN),e(mN,y1o),e(Ps,L1o),e(Ps,gN),e(gN,x1o),e(Ps,$1o),e(x,k1o),e(x,Dp),e(Dp,sle),e(sle,S1o),e(Dp,R1o),e(Dp,hN),e(hN,P1o),e(Dp,B1o),e(x,I1o),e(x,Gp),e(Gp,lle),e(lle,N1o),e(Gp,q1o),e(Gp,pN),e(pN,j1o),e(Gp,D1o),e(x,G1o),e(x,Op),e(Op,ile),e(ile,O1o),e(Op,V1o),e(Op,_N),e(_N,X1o),e(Op,z1o),e(x,W1o),e(x,Vp),e(Vp,dle),e(dle,Q1o),e(Vp,H1o),e(Vp,uN),e(uN,U1o),e(Vp,J1o),e(x,Y1o),e(x,Xp),e(Xp,cle),e(cle,K1o),e(Xp,Z1o),e(Xp,bN),e(bN,ebo),e(Xp,obo),e(x,rbo),e(x,zp),e(zp,fle),e(fle,tbo),e(zp,abo),e(zp,vN),e(vN,nbo),e(zp,sbo),e(x,lbo),e(x,Wp),e(Wp,mle),e(mle,ibo),e(Wp,dbo),e(Wp,FN),e(FN,cbo),e(Wp,fbo),e(x,mbo),e(x,Qp),e(Qp,gle),e(gle,gbo),e(Qp,hbo),e(Qp,TN),e(TN,pbo),e(Qp,_bo),e(x,ubo),e(x,Hp),e(Hp,hle),e(hle,bbo),e(Hp,vbo),e(Hp,MN),e(MN,Fbo),e(Hp,Tbo),e(x,Mbo),e(x,Up),e(Up,ple),e(ple,Ebo),e(Up,Cbo),e(Up,EN),e(EN,wbo),e(Up,Abo),e(x,ybo),e(x,Jp),e(Jp,_le),e(_le,Lbo),e(Jp,xbo),e(Jp,CN),e(CN,$bo),e(Jp,kbo),e(x,Sbo),e(x,Yp),e(Yp,ule),e(ule,Rbo),e(Yp,Pbo),e(Yp,wN),e(wN,Bbo),e(Yp,Ibo),e(x,Nbo),e(x,Kp),e(Kp,ble),e(ble,qbo),e(Kp,jbo),e(Kp,AN),e(AN,Dbo),e(Kp,Gbo),e(x,Obo),e(x,Zp),e(Zp,vle),e(vle,Vbo),e(Zp,Xbo),e(Zp,yN),e(yN,zbo),e(Zp,Wbo),e(x,Qbo),e(x,e_),e(e_,Fle),e(Fle,Hbo),e(e_,Ubo),e(e_,LN),e(LN,Jbo),e(e_,Ybo),e(x,Kbo),e(x,o_),e(o_,Tle),e(Tle,Zbo),e(o_,e2o),e(o_,xN),e(xN,o2o),e(o_,r2o),e(x,t2o),e(x,r_),e(r_,Mle),e(Mle,a2o),e(r_,n2o),e(r_,$N),e($N,s2o),e(r_,l2o),e(x,i2o),e(x,t_),e(t_,Ele),e(Ele,d2o),e(t_,c2o),e(t_,kN),e(kN,f2o),e(t_,m2o),e(x,g2o),e(x,a_),e(a_,Cle),e(Cle,h2o),e(a_,p2o),e(a_,SN),e(SN,_2o),e(a_,u2o),e(x,b2o),e(x,n_),e(n_,wle),e(wle,v2o),e(n_,F2o),e(n_,RN),e(RN,T2o),e(n_,M2o),e(x,E2o),e(x,s_),e(s_,Ale),e(Ale,C2o),e(s_,w2o),e(s_,PN),e(PN,A2o),e(s_,y2o),e(x,L2o),e(x,l_),e(l_,yle),e(yle,x2o),e(l_,$2o),e(l_,BN),e(BN,k2o),e(l_,S2o),e(x,R2o),e(x,i_),e(i_,Lle),e(Lle,P2o),e(i_,B2o),e(i_,IN),e(IN,I2o),e(i_,N2o),e(x,q2o),e(x,d_),e(d_,xle),e(xle,j2o),e(d_,D2o),e(d_,NN),e(NN,G2o),e(d_,O2o),e(x,V2o),e(x,c_),e(c_,$le),e($le,X2o),e(c_,z2o),e(c_,qN),e(qN,W2o),e(c_,Q2o),e(x,H2o),e(x,f_),e(f_,kle),e(kle,U2o),e(f_,J2o),e(f_,jN),e(jN,Y2o),e(f_,K2o),e(x,Z2o),e(x,m_),e(m_,Sle),e(Sle,e4o),e(m_,o4o),e(m_,DN),e(DN,r4o),e(m_,t4o),e(x,a4o),e(x,g_),e(g_,Rle),e(Rle,n4o),e(g_,s4o),e(g_,GN),e(GN,l4o),e(g_,i4o),e(x,d4o),e(x,h_),e(h_,Ple),e(Ple,c4o),e(h_,f4o),e(h_,ON),e(ON,m4o),e(h_,g4o),e(x,h4o),e(x,p_),e(p_,Ble),e(Ble,p4o),e(p_,_4o),e(p_,VN),e(VN,u4o),e(p_,b4o),e(x,v4o),e(x,__),e(__,Ile),e(Ile,F4o),e(__,T4o),e(__,XN),e(XN,M4o),e(__,E4o),e(x,C4o),e(x,u_),e(u_,Nle),e(Nle,w4o),e(u_,A4o),e(u_,zN),e(zN,y4o),e(u_,L4o),e(x,x4o),e(x,b_),e(b_,qle),e(qle,$4o),e(b_,k4o),e(b_,WN),e(WN,S4o),e(b_,R4o),e(x,P4o),e(x,v_),e(v_,jle),e(jle,B4o),e(v_,I4o),e(v_,QN),e(QN,N4o),e(v_,q4o),e(x,j4o),e(x,F_),e(F_,Dle),e(Dle,D4o),e(F_,G4o),e(F_,HN),e(HN,O4o),e(F_,V4o),e(x,X4o),e(x,T_),e(T_,Gle),e(Gle,z4o),e(T_,W4o),e(T_,UN),e(UN,Q4o),e(T_,H4o),e(x,U4o),e(x,M_),e(M_,Ole),e(Ole,J4o),e(M_,Y4o),e(M_,JN),e(JN,K4o),e(M_,Z4o),e(x,e5o),e(x,E_),e(E_,Vle),e(Vle,o5o),e(E_,r5o),e(E_,YN),e(YN,t5o),e(E_,a5o),e(x,n5o),e(x,C_),e(C_,Xle),e(Xle,s5o),e(C_,l5o),e(C_,KN),e(KN,i5o),e(C_,d5o),e(x,c5o),e(x,w_),e(w_,zle),e(zle,f5o),e(w_,m5o),e(w_,ZN),e(ZN,g5o),e(w_,h5o),e(x,p5o),e(x,A_),e(A_,Wle),e(Wle,_5o),e(A_,u5o),e(A_,eq),e(eq,b5o),e(A_,v5o),e(x,F5o),e(x,y_),e(y_,Qle),e(Qle,T5o),e(y_,M5o),e(y_,oq),e(oq,E5o),e(y_,C5o),e(x,w5o),e(x,L_),e(L_,Hle),e(Hle,A5o),e(L_,y5o),e(L_,rq),e(rq,L5o),e(L_,x5o),e(x,$5o),e(x,x_),e(x_,Ule),e(Ule,k5o),e(x_,S5o),e(x_,tq),e(tq,R5o),e(x_,P5o),e(x,B5o),e(x,$_),e($_,Jle),e(Jle,I5o),e($_,N5o),e($_,aq),e(aq,q5o),e($_,j5o),e(x,D5o),e(x,k_),e(k_,Yle),e(Yle,G5o),e(k_,O5o),e(k_,nq),e(nq,V5o),e(k_,X5o),e(x,z5o),e(x,S_),e(S_,Kle),e(Kle,W5o),e(S_,Q5o),e(S_,sq),e(sq,H5o),e(S_,U5o),e(x,J5o),e(x,R_),e(R_,Zle),e(Zle,Y5o),e(R_,K5o),e(R_,lq),e(lq,Z5o),e(R_,evo),e(x,ovo),e(x,P_),e(P_,eie),e(eie,rvo),e(P_,tvo),e(P_,iq),e(iq,avo),e(P_,nvo),e(x,svo),e(x,B_),e(B_,oie),e(oie,lvo),e(B_,ivo),e(B_,dq),e(dq,dvo),e(B_,cvo),e(x,fvo),e(x,I_),e(I_,rie),e(rie,mvo),e(I_,gvo),e(I_,cq),e(cq,hvo),e(I_,pvo),e(x,_vo),e(x,N_),e(N_,tie),e(tie,uvo),e(N_,bvo),e(N_,fq),e(fq,vvo),e(N_,Fvo),e(x,Tvo),e(x,q_),e(q_,aie),e(aie,Mvo),e(q_,Evo),e(q_,mq),e(mq,Cvo),e(q_,wvo),e(x,Avo),e(x,j_),e(j_,nie),e(nie,yvo),e(j_,Lvo),e(j_,gq),e(gq,xvo),e(j_,$vo),e(x,kvo),e(x,D_),e(D_,sie),e(sie,Svo),e(D_,Rvo),e(D_,hq),e(hq,Pvo),e(D_,Bvo),e(x,Ivo),e(x,G_),e(G_,lie),e(lie,Nvo),e(G_,qvo),e(G_,pq),e(pq,jvo),e(G_,Dvo),e(x,Gvo),e(x,O_),e(O_,iie),e(iie,Ovo),e(O_,Vvo),e(O_,_q),e(_q,Xvo),e(O_,zvo),e(x,Wvo),e(x,V_),e(V_,die),e(die,Qvo),e(V_,Hvo),e(V_,uq),e(uq,Uvo),e(V_,Jvo),e(x,Yvo),e(x,X_),e(X_,cie),e(cie,Kvo),e(X_,Zvo),e(X_,bq),e(bq,e3o),e(X_,o3o),e(x,r3o),e(x,z_),e(z_,fie),e(fie,t3o),e(z_,a3o),e(z_,vq),e(vq,n3o),e(z_,s3o),e(x,l3o),e(x,W_),e(W_,mie),e(mie,i3o),e(W_,d3o),e(W_,Fq),e(Fq,c3o),e(W_,f3o),e(x,m3o),e(x,Q_),e(Q_,gie),e(gie,g3o),e(Q_,h3o),e(Q_,Tq),e(Tq,p3o),e(Q_,_3o),e(x,u3o),e(x,H_),e(H_,hie),e(hie,b3o),e(H_,v3o),e(H_,Mq),e(Mq,F3o),e(H_,T3o),e(x,M3o),e(x,U_),e(U_,pie),e(pie,E3o),e(U_,C3o),e(U_,Eq),e(Eq,w3o),e(U_,A3o),e(x,y3o),e(x,J_),e(J_,_ie),e(_ie,L3o),e(J_,x3o),e(J_,Cq),e(Cq,$3o),e(J_,k3o),e(x,S3o),e(x,Y_),e(Y_,uie),e(uie,R3o),e(Y_,P3o),e(Y_,wq),e(wq,B3o),e(Y_,I3o),e(x,N3o),e(x,K_),e(K_,bie),e(bie,q3o),e(K_,j3o),e(K_,Aq),e(Aq,D3o),e(K_,G3o),e(x,O3o),e(x,Z_),e(Z_,vie),e(vie,V3o),e(Z_,X3o),e(Z_,yq),e(yq,z3o),e(Z_,W3o),e(x,Q3o),e(x,eu),e(eu,Fie),e(Fie,H3o),e(eu,U3o),e(eu,Lq),e(Lq,J3o),e(eu,Y3o),e(Je,K3o),e(Je,ou),e(ou,Z3o),e(ou,Tie),e(Tie,eFo),e(ou,oFo),e(ou,Mie),e(Mie,rFo),e(Je,tFo),M(ru,Je,null),b(f,Tqe,u),b(f,Li,u),e(Li,tu),e(tu,Eie),M(sL,Eie,null),e(Li,aFo),e(Li,Cie),e(Cie,nFo),b(f,Mqe,u),b(f,xo,u),M(lL,xo,null),e(xo,sFo),e(xo,xi),e(xi,lFo),e(xi,xq),e(xq,iFo),e(xi,dFo),e(xi,$q),e($q,cFo),e(xi,fFo),e(xo,mFo),e(xo,iL),e(iL,gFo),e(iL,wie),e(wie,hFo),e(iL,pFo),e(xo,_Fo),e(xo,at),M(dL,at,null),e(at,uFo),e(at,Aie),e(Aie,bFo),e(at,vFo),e(at,$i),e($i,FFo),e($i,yie),e(yie,TFo),e($i,MFo),e($i,kq),e(kq,EFo),e($i,CFo),e(at,wFo),M(au,at,null),e(xo,AFo),e(xo,Ye),M(cL,Ye,null),e(Ye,yFo),e(Ye,Lie),e(Lie,LFo),e(Ye,xFo),e(Ye,xa),e(xa,$Fo),e(xa,xie),e(xie,kFo),e(xa,SFo),e(xa,$ie),e($ie,RFo),e(xa,PFo),e(xa,kie),e(kie,BFo),e(xa,IFo),e(Ye,NFo),e(Ye,G),e(G,nu),e(nu,Sie),e(Sie,qFo),e(nu,jFo),e(nu,Sq),e(Sq,DFo),e(nu,GFo),e(G,OFo),e(G,su),e(su,Rie),e(Rie,VFo),e(su,XFo),e(su,Rq),e(Rq,zFo),e(su,WFo),e(G,QFo),e(G,lu),e(lu,Pie),e(Pie,HFo),e(lu,UFo),e(lu,Pq),e(Pq,JFo),e(lu,YFo),e(G,KFo),e(G,iu),e(iu,Bie),e(Bie,ZFo),e(iu,e6o),e(iu,Bq),e(Bq,o6o),e(iu,r6o),e(G,t6o),e(G,du),e(du,Iie),e(Iie,a6o),e(du,n6o),e(du,Iq),e(Iq,s6o),e(du,l6o),e(G,i6o),e(G,cu),e(cu,Nie),e(Nie,d6o),e(cu,c6o),e(cu,Nq),e(Nq,f6o),e(cu,m6o),e(G,g6o),e(G,fu),e(fu,qie),e(qie,h6o),e(fu,p6o),e(fu,qq),e(qq,_6o),e(fu,u6o),e(G,b6o),e(G,mu),e(mu,jie),e(jie,v6o),e(mu,F6o),e(mu,jq),e(jq,T6o),e(mu,M6o),e(G,E6o),e(G,gu),e(gu,Die),e(Die,C6o),e(gu,w6o),e(gu,Dq),e(Dq,A6o),e(gu,y6o),e(G,L6o),e(G,hu),e(hu,Gie),e(Gie,x6o),e(hu,$6o),e(hu,Gq),e(Gq,k6o),e(hu,S6o),e(G,R6o),e(G,pu),e(pu,Oie),e(Oie,P6o),e(pu,B6o),e(pu,Oq),e(Oq,I6o),e(pu,N6o),e(G,q6o),e(G,_u),e(_u,Vie),e(Vie,j6o),e(_u,D6o),e(_u,Vq),e(Vq,G6o),e(_u,O6o),e(G,V6o),e(G,uu),e(uu,Xie),e(Xie,X6o),e(uu,z6o),e(uu,Xq),e(Xq,W6o),e(uu,Q6o),e(G,H6o),e(G,bu),e(bu,zie),e(zie,U6o),e(bu,J6o),e(bu,zq),e(zq,Y6o),e(bu,K6o),e(G,Z6o),e(G,vu),e(vu,Wie),e(Wie,eTo),e(vu,oTo),e(vu,Wq),e(Wq,rTo),e(vu,tTo),e(G,aTo),e(G,Fu),e(Fu,Qie),e(Qie,nTo),e(Fu,sTo),e(Fu,Qq),e(Qq,lTo),e(Fu,iTo),e(G,dTo),e(G,Tu),e(Tu,Hie),e(Hie,cTo),e(Tu,fTo),e(Tu,Hq),e(Hq,mTo),e(Tu,gTo),e(G,hTo),e(G,Mu),e(Mu,Uie),e(Uie,pTo),e(Mu,_To),e(Mu,Uq),e(Uq,uTo),e(Mu,bTo),e(G,vTo),e(G,Eu),e(Eu,Jie),e(Jie,FTo),e(Eu,TTo),e(Eu,Jq),e(Jq,MTo),e(Eu,ETo),e(G,CTo),e(G,Cu),e(Cu,Yie),e(Yie,wTo),e(Cu,ATo),e(Cu,Yq),e(Yq,yTo),e(Cu,LTo),e(G,xTo),e(G,wu),e(wu,Kie),e(Kie,$To),e(wu,kTo),e(wu,Kq),e(Kq,STo),e(wu,RTo),e(G,PTo),e(G,Au),e(Au,Zie),e(Zie,BTo),e(Au,ITo),e(Au,Zq),e(Zq,NTo),e(Au,qTo),e(G,jTo),e(G,yu),e(yu,ede),e(ede,DTo),e(yu,GTo),e(yu,ej),e(ej,OTo),e(yu,VTo),e(G,XTo),e(G,Lu),e(Lu,ode),e(ode,zTo),e(Lu,WTo),e(Lu,oj),e(oj,QTo),e(Lu,HTo),e(G,UTo),e(G,xu),e(xu,rde),e(rde,JTo),e(xu,YTo),e(xu,rj),e(rj,KTo),e(xu,ZTo),e(G,eMo),e(G,$u),e($u,tde),e(tde,oMo),e($u,rMo),e($u,tj),e(tj,tMo),e($u,aMo),e(G,nMo),e(G,ku),e(ku,ade),e(ade,sMo),e(ku,lMo),e(ku,aj),e(aj,iMo),e(ku,dMo),e(G,cMo),e(G,Su),e(Su,nde),e(nde,fMo),e(Su,mMo),e(Su,nj),e(nj,gMo),e(Su,hMo),e(G,pMo),e(G,Ru),e(Ru,sde),e(sde,_Mo),e(Ru,uMo),e(Ru,sj),e(sj,bMo),e(Ru,vMo),e(G,FMo),e(G,Pu),e(Pu,lde),e(lde,TMo),e(Pu,MMo),e(Pu,lj),e(lj,EMo),e(Pu,CMo),e(G,wMo),e(G,Bu),e(Bu,ide),e(ide,AMo),e(Bu,yMo),e(Bu,ij),e(ij,LMo),e(Bu,xMo),e(G,$Mo),e(G,Iu),e(Iu,dde),e(dde,kMo),e(Iu,SMo),e(Iu,dj),e(dj,RMo),e(Iu,PMo),e(G,BMo),e(G,Nu),e(Nu,cde),e(cde,IMo),e(Nu,NMo),e(Nu,cj),e(cj,qMo),e(Nu,jMo),e(G,DMo),e(G,qu),e(qu,fde),e(fde,GMo),e(qu,OMo),e(qu,fj),e(fj,VMo),e(qu,XMo),e(G,zMo),e(G,ju),e(ju,mde),e(mde,WMo),e(ju,QMo),e(ju,mj),e(mj,HMo),e(ju,UMo),e(G,JMo),e(G,Du),e(Du,gde),e(gde,YMo),e(Du,KMo),e(Du,gj),e(gj,ZMo),e(Du,eEo),e(G,oEo),e(G,Gu),e(Gu,hde),e(hde,rEo),e(Gu,tEo),e(Gu,hj),e(hj,aEo),e(Gu,nEo),e(G,sEo),e(G,Ou),e(Ou,pde),e(pde,lEo),e(Ou,iEo),e(Ou,pj),e(pj,dEo),e(Ou,cEo),e(G,fEo),e(G,Vu),e(Vu,_de),e(_de,mEo),e(Vu,gEo),e(Vu,_j),e(_j,hEo),e(Vu,pEo),e(G,_Eo),e(G,Xu),e(Xu,ude),e(ude,uEo),e(Xu,bEo),e(Xu,uj),e(uj,vEo),e(Xu,FEo),e(G,TEo),e(G,zu),e(zu,bde),e(bde,MEo),e(zu,EEo),e(zu,bj),e(bj,CEo),e(zu,wEo),e(G,AEo),e(G,Wu),e(Wu,vde),e(vde,yEo),e(Wu,LEo),e(Wu,vj),e(vj,xEo),e(Wu,$Eo),e(Ye,kEo),e(Ye,Qu),e(Qu,SEo),e(Qu,Fde),e(Fde,REo),e(Qu,PEo),e(Qu,Tde),e(Tde,BEo),e(Ye,IEo),M(Hu,Ye,null),b(f,Eqe,u),b(f,ki,u),e(ki,Uu),e(Uu,Mde),M(fL,Mde,null),e(ki,NEo),e(ki,Ede),e(Ede,qEo),b(f,Cqe,u),b(f,$o,u),M(mL,$o,null),e($o,jEo),e($o,Si),e(Si,DEo),e(Si,Fj),e(Fj,GEo),e(Si,OEo),e(Si,Tj),e(Tj,VEo),e(Si,XEo),e($o,zEo),e($o,gL),e(gL,WEo),e(gL,Cde),e(Cde,QEo),e(gL,HEo),e($o,UEo),e($o,nt),M(hL,nt,null),e(nt,JEo),e(nt,wde),e(wde,YEo),e(nt,KEo),e(nt,Ri),e(Ri,ZEo),e(Ri,Ade),e(Ade,eCo),e(Ri,oCo),e(Ri,Mj),e(Mj,rCo),e(Ri,tCo),e(nt,aCo),M(Ju,nt,null),e($o,nCo),e($o,Ke),M(pL,Ke,null),e(Ke,sCo),e(Ke,yde),e(yde,lCo),e(Ke,iCo),e(Ke,$a),e($a,dCo),e($a,Lde),e(Lde,cCo),e($a,fCo),e($a,xde),e(xde,mCo),e($a,gCo),e($a,$de),e($de,hCo),e($a,pCo),e(Ke,_Co),e(Ke,z),e(z,Yu),e(Yu,kde),e(kde,uCo),e(Yu,bCo),e(Yu,Ej),e(Ej,vCo),e(Yu,FCo),e(z,TCo),e(z,Ku),e(Ku,Sde),e(Sde,MCo),e(Ku,ECo),e(Ku,Cj),e(Cj,CCo),e(Ku,wCo),e(z,ACo),e(z,Zu),e(Zu,Rde),e(Rde,yCo),e(Zu,LCo),e(Zu,wj),e(wj,xCo),e(Zu,$Co),e(z,kCo),e(z,e1),e(e1,Pde),e(Pde,SCo),e(e1,RCo),e(e1,Aj),e(Aj,PCo),e(e1,BCo),e(z,ICo),e(z,o1),e(o1,Bde),e(Bde,NCo),e(o1,qCo),e(o1,yj),e(yj,jCo),e(o1,DCo),e(z,GCo),e(z,r1),e(r1,Ide),e(Ide,OCo),e(r1,VCo),e(r1,Lj),e(Lj,XCo),e(r1,zCo),e(z,WCo),e(z,t1),e(t1,Nde),e(Nde,QCo),e(t1,HCo),e(t1,xj),e(xj,UCo),e(t1,JCo),e(z,YCo),e(z,a1),e(a1,qde),e(qde,KCo),e(a1,ZCo),e(a1,$j),e($j,ewo),e(a1,owo),e(z,rwo),e(z,n1),e(n1,jde),e(jde,two),e(n1,awo),e(n1,kj),e(kj,nwo),e(n1,swo),e(z,lwo),e(z,s1),e(s1,Dde),e(Dde,iwo),e(s1,dwo),e(s1,Sj),e(Sj,cwo),e(s1,fwo),e(z,mwo),e(z,l1),e(l1,Gde),e(Gde,gwo),e(l1,hwo),e(l1,Rj),e(Rj,pwo),e(l1,_wo),e(z,uwo),e(z,i1),e(i1,Ode),e(Ode,bwo),e(i1,vwo),e(i1,Pj),e(Pj,Fwo),e(i1,Two),e(z,Mwo),e(z,d1),e(d1,Vde),e(Vde,Ewo),e(d1,Cwo),e(d1,Bj),e(Bj,wwo),e(d1,Awo),e(z,ywo),e(z,c1),e(c1,Xde),e(Xde,Lwo),e(c1,xwo),e(c1,Ij),e(Ij,$wo),e(c1,kwo),e(z,Swo),e(z,f1),e(f1,zde),e(zde,Rwo),e(f1,Pwo),e(f1,Nj),e(Nj,Bwo),e(f1,Iwo),e(z,Nwo),e(z,m1),e(m1,Wde),e(Wde,qwo),e(m1,jwo),e(m1,qj),e(qj,Dwo),e(m1,Gwo),e(z,Owo),e(z,g1),e(g1,Qde),e(Qde,Vwo),e(g1,Xwo),e(g1,jj),e(jj,zwo),e(g1,Wwo),e(z,Qwo),e(z,h1),e(h1,Hde),e(Hde,Hwo),e(h1,Uwo),e(h1,Dj),e(Dj,Jwo),e(h1,Ywo),e(z,Kwo),e(z,p1),e(p1,Ude),e(Ude,Zwo),e(p1,e0o),e(p1,Gj),e(Gj,o0o),e(p1,r0o),e(z,t0o),e(z,_1),e(_1,Jde),e(Jde,a0o),e(_1,n0o),e(_1,Oj),e(Oj,s0o),e(_1,l0o),e(z,i0o),e(z,u1),e(u1,Yde),e(Yde,d0o),e(u1,c0o),e(u1,Vj),e(Vj,f0o),e(u1,m0o),e(z,g0o),e(z,b1),e(b1,Kde),e(Kde,h0o),e(b1,p0o),e(b1,Xj),e(Xj,_0o),e(b1,u0o),e(z,b0o),e(z,v1),e(v1,Zde),e(Zde,v0o),e(v1,F0o),e(v1,zj),e(zj,T0o),e(v1,M0o),e(z,E0o),e(z,F1),e(F1,ece),e(ece,C0o),e(F1,w0o),e(F1,Wj),e(Wj,A0o),e(F1,y0o),e(z,L0o),e(z,T1),e(T1,oce),e(oce,x0o),e(T1,$0o),e(T1,Qj),e(Qj,k0o),e(T1,S0o),e(z,R0o),e(z,M1),e(M1,rce),e(rce,P0o),e(M1,B0o),e(M1,Hj),e(Hj,I0o),e(M1,N0o),e(z,q0o),e(z,E1),e(E1,tce),e(tce,j0o),e(E1,D0o),e(E1,Uj),e(Uj,G0o),e(E1,O0o),e(z,V0o),e(z,C1),e(C1,ace),e(ace,X0o),e(C1,z0o),e(C1,Jj),e(Jj,W0o),e(C1,Q0o),e(z,H0o),e(z,w1),e(w1,nce),e(nce,U0o),e(w1,J0o),e(w1,Yj),e(Yj,Y0o),e(w1,K0o),e(z,Z0o),e(z,A1),e(A1,sce),e(sce,eAo),e(A1,oAo),e(A1,Kj),e(Kj,rAo),e(A1,tAo),e(z,aAo),e(z,y1),e(y1,lce),e(lce,nAo),e(y1,sAo),e(y1,Zj),e(Zj,lAo),e(y1,iAo),e(z,dAo),e(z,L1),e(L1,ice),e(ice,cAo),e(L1,fAo),e(L1,eD),e(eD,mAo),e(L1,gAo),e(z,hAo),e(z,x1),e(x1,dce),e(dce,pAo),e(x1,_Ao),e(x1,oD),e(oD,uAo),e(x1,bAo),e(z,vAo),e(z,$1),e($1,cce),e(cce,FAo),e($1,TAo),e($1,rD),e(rD,MAo),e($1,EAo),e(z,CAo),e(z,k1),e(k1,fce),e(fce,wAo),e(k1,AAo),e(k1,tD),e(tD,yAo),e(k1,LAo),e(z,xAo),e(z,S1),e(S1,mce),e(mce,$Ao),e(S1,kAo),e(S1,aD),e(aD,SAo),e(S1,RAo),e(z,PAo),e(z,R1),e(R1,gce),e(gce,BAo),e(R1,IAo),e(R1,nD),e(nD,NAo),e(R1,qAo),e(Ke,jAo),e(Ke,P1),e(P1,DAo),e(P1,hce),e(hce,GAo),e(P1,OAo),e(P1,pce),e(pce,VAo),e(Ke,XAo),M(B1,Ke,null),b(f,wqe,u),b(f,Pi,u),e(Pi,I1),e(I1,_ce),M(_L,_ce,null),e(Pi,zAo),e(Pi,uce),e(uce,WAo),b(f,Aqe,u),b(f,ko,u),M(uL,ko,null),e(ko,QAo),e(ko,Bi),e(Bi,HAo),e(Bi,sD),e(sD,UAo),e(Bi,JAo),e(Bi,lD),e(lD,YAo),e(Bi,KAo),e(ko,ZAo),e(ko,bL),e(bL,eyo),e(bL,bce),e(bce,oyo),e(bL,ryo),e(ko,tyo),e(ko,st),M(vL,st,null),e(st,ayo),e(st,vce),e(vce,nyo),e(st,syo),e(st,Ii),e(Ii,lyo),e(Ii,Fce),e(Fce,iyo),e(Ii,dyo),e(Ii,iD),e(iD,cyo),e(Ii,fyo),e(st,myo),M(N1,st,null),e(ko,gyo),e(ko,Ze),M(FL,Ze,null),e(Ze,hyo),e(Ze,Tce),e(Tce,pyo),e(Ze,_yo),e(Ze,ka),e(ka,uyo),e(ka,Mce),e(Mce,byo),e(ka,vyo),e(ka,Ece),e(Ece,Fyo),e(ka,Tyo),e(ka,Cce),e(Cce,Myo),e(ka,Eyo),e(Ze,Cyo),e(Ze,Q),e(Q,q1),e(q1,wce),e(wce,wyo),e(q1,Ayo),e(q1,dD),e(dD,yyo),e(q1,Lyo),e(Q,xyo),e(Q,j1),e(j1,Ace),e(Ace,$yo),e(j1,kyo),e(j1,cD),e(cD,Syo),e(j1,Ryo),e(Q,Pyo),e(Q,D1),e(D1,yce),e(yce,Byo),e(D1,Iyo),e(D1,fD),e(fD,Nyo),e(D1,qyo),e(Q,jyo),e(Q,G1),e(G1,Lce),e(Lce,Dyo),e(G1,Gyo),e(G1,mD),e(mD,Oyo),e(G1,Vyo),e(Q,Xyo),e(Q,O1),e(O1,xce),e(xce,zyo),e(O1,Wyo),e(O1,gD),e(gD,Qyo),e(O1,Hyo),e(Q,Uyo),e(Q,V1),e(V1,$ce),e($ce,Jyo),e(V1,Yyo),e(V1,hD),e(hD,Kyo),e(V1,Zyo),e(Q,eLo),e(Q,X1),e(X1,kce),e(kce,oLo),e(X1,rLo),e(X1,pD),e(pD,tLo),e(X1,aLo),e(Q,nLo),e(Q,z1),e(z1,Sce),e(Sce,sLo),e(z1,lLo),e(z1,_D),e(_D,iLo),e(z1,dLo),e(Q,cLo),e(Q,W1),e(W1,Rce),e(Rce,fLo),e(W1,mLo),e(W1,uD),e(uD,gLo),e(W1,hLo),e(Q,pLo),e(Q,Q1),e(Q1,Pce),e(Pce,_Lo),e(Q1,uLo),e(Q1,bD),e(bD,bLo),e(Q1,vLo),e(Q,FLo),e(Q,H1),e(H1,Bce),e(Bce,TLo),e(H1,MLo),e(H1,vD),e(vD,ELo),e(H1,CLo),e(Q,wLo),e(Q,U1),e(U1,Ice),e(Ice,ALo),e(U1,yLo),e(U1,FD),e(FD,LLo),e(U1,xLo),e(Q,$Lo),e(Q,J1),e(J1,Nce),e(Nce,kLo),e(J1,SLo),e(J1,TD),e(TD,RLo),e(J1,PLo),e(Q,BLo),e(Q,Y1),e(Y1,qce),e(qce,ILo),e(Y1,NLo),e(Y1,MD),e(MD,qLo),e(Y1,jLo),e(Q,DLo),e(Q,K1),e(K1,jce),e(jce,GLo),e(K1,OLo),e(K1,ED),e(ED,VLo),e(K1,XLo),e(Q,zLo),e(Q,Z1),e(Z1,Dce),e(Dce,WLo),e(Z1,QLo),e(Z1,CD),e(CD,HLo),e(Z1,ULo),e(Q,JLo),e(Q,eb),e(eb,Gce),e(Gce,YLo),e(eb,KLo),e(eb,wD),e(wD,ZLo),e(eb,e8o),e(Q,o8o),e(Q,ob),e(ob,Oce),e(Oce,r8o),e(ob,t8o),e(ob,AD),e(AD,a8o),e(ob,n8o),e(Q,s8o),e(Q,rb),e(rb,Vce),e(Vce,l8o),e(rb,i8o),e(rb,yD),e(yD,d8o),e(rb,c8o),e(Q,f8o),e(Q,tb),e(tb,Xce),e(Xce,m8o),e(tb,g8o),e(tb,LD),e(LD,h8o),e(tb,p8o),e(Q,_8o),e(Q,ab),e(ab,zce),e(zce,u8o),e(ab,b8o),e(ab,xD),e(xD,v8o),e(ab,F8o),e(Q,T8o),e(Q,nb),e(nb,Wce),e(Wce,M8o),e(nb,E8o),e(nb,$D),e($D,C8o),e(nb,w8o),e(Q,A8o),e(Q,sb),e(sb,Qce),e(Qce,y8o),e(sb,L8o),e(sb,kD),e(kD,x8o),e(sb,$8o),e(Q,k8o),e(Q,lb),e(lb,Hce),e(Hce,S8o),e(lb,R8o),e(lb,SD),e(SD,P8o),e(lb,B8o),e(Q,I8o),e(Q,ib),e(ib,Uce),e(Uce,N8o),e(ib,q8o),e(ib,RD),e(RD,j8o),e(ib,D8o),e(Q,G8o),e(Q,db),e(db,Jce),e(Jce,O8o),e(db,V8o),e(db,PD),e(PD,X8o),e(db,z8o),e(Q,W8o),e(Q,cb),e(cb,Yce),e(Yce,Q8o),e(cb,H8o),e(cb,BD),e(BD,U8o),e(cb,J8o),e(Q,Y8o),e(Q,fb),e(fb,Kce),e(Kce,K8o),e(fb,Z8o),e(fb,ID),e(ID,e7o),e(fb,o7o),e(Q,r7o),e(Q,mb),e(mb,Zce),e(Zce,t7o),e(mb,a7o),e(mb,ND),e(ND,n7o),e(mb,s7o),e(Q,l7o),e(Q,gb),e(gb,efe),e(efe,i7o),e(gb,d7o),e(gb,qD),e(qD,c7o),e(gb,f7o),e(Q,m7o),e(Q,hb),e(hb,ofe),e(ofe,g7o),e(hb,h7o),e(hb,rfe),e(rfe,p7o),e(hb,_7o),e(Q,u7o),e(Q,pb),e(pb,tfe),e(tfe,b7o),e(pb,v7o),e(pb,jD),e(jD,F7o),e(pb,T7o),e(Q,M7o),e(Q,_b),e(_b,afe),e(afe,E7o),e(_b,C7o),e(_b,DD),e(DD,w7o),e(_b,A7o),e(Q,y7o),e(Q,ub),e(ub,nfe),e(nfe,L7o),e(ub,x7o),e(ub,GD),e(GD,$7o),e(ub,k7o),e(Q,S7o),e(Q,bb),e(bb,sfe),e(sfe,R7o),e(bb,P7o),e(bb,OD),e(OD,B7o),e(bb,I7o),e(Ze,N7o),e(Ze,vb),e(vb,q7o),e(vb,lfe),e(lfe,j7o),e(vb,D7o),e(vb,ife),e(ife,G7o),e(Ze,O7o),M(Fb,Ze,null),b(f,yqe,u),b(f,Ni,u),e(Ni,Tb),e(Tb,dfe),M(TL,dfe,null),e(Ni,V7o),e(Ni,cfe),e(cfe,X7o),b(f,Lqe,u),b(f,So,u),M(ML,So,null),e(So,z7o),e(So,qi),e(qi,W7o),e(qi,VD),e(VD,Q7o),e(qi,H7o),e(qi,XD),e(XD,U7o),e(qi,J7o),e(So,Y7o),e(So,EL),e(EL,K7o),e(EL,ffe),e(ffe,Z7o),e(EL,e9o),e(So,o9o),e(So,lt),M(CL,lt,null),e(lt,r9o),e(lt,mfe),e(mfe,t9o),e(lt,a9o),e(lt,ji),e(ji,n9o),e(ji,gfe),e(gfe,s9o),e(ji,l9o),e(ji,zD),e(zD,i9o),e(ji,d9o),e(lt,c9o),M(Mb,lt,null),e(So,f9o),e(So,eo),M(wL,eo,null),e(eo,m9o),e(eo,hfe),e(hfe,g9o),e(eo,h9o),e(eo,Sa),e(Sa,p9o),e(Sa,pfe),e(pfe,_9o),e(Sa,u9o),e(Sa,_fe),e(_fe,b9o),e(Sa,v9o),e(Sa,ufe),e(ufe,F9o),e(Sa,T9o),e(eo,M9o),e(eo,_e),e(_e,Eb),e(Eb,bfe),e(bfe,E9o),e(Eb,C9o),e(Eb,WD),e(WD,w9o),e(Eb,A9o),e(_e,y9o),e(_e,Cb),e(Cb,vfe),e(vfe,L9o),e(Cb,x9o),e(Cb,QD),e(QD,$9o),e(Cb,k9o),e(_e,S9o),e(_e,wb),e(wb,Ffe),e(Ffe,R9o),e(wb,P9o),e(wb,HD),e(HD,B9o),e(wb,I9o),e(_e,N9o),e(_e,Ab),e(Ab,Tfe),e(Tfe,q9o),e(Ab,j9o),e(Ab,UD),e(UD,D9o),e(Ab,G9o),e(_e,O9o),e(_e,yb),e(yb,Mfe),e(Mfe,V9o),e(yb,X9o),e(yb,JD),e(JD,z9o),e(yb,W9o),e(_e,Q9o),e(_e,Lb),e(Lb,Efe),e(Efe,H9o),e(Lb,U9o),e(Lb,YD),e(YD,J9o),e(Lb,Y9o),e(_e,K9o),e(_e,xb),e(xb,Cfe),e(Cfe,Z9o),e(xb,exo),e(xb,KD),e(KD,oxo),e(xb,rxo),e(_e,txo),e(_e,$b),e($b,wfe),e(wfe,axo),e($b,nxo),e($b,ZD),e(ZD,sxo),e($b,lxo),e(_e,ixo),e(_e,kb),e(kb,Afe),e(Afe,dxo),e(kb,cxo),e(kb,eG),e(eG,fxo),e(kb,mxo),e(_e,gxo),e(_e,Sb),e(Sb,yfe),e(yfe,hxo),e(Sb,pxo),e(Sb,oG),e(oG,_xo),e(Sb,uxo),e(_e,bxo),e(_e,Rb),e(Rb,Lfe),e(Lfe,vxo),e(Rb,Fxo),e(Rb,rG),e(rG,Txo),e(Rb,Mxo),e(_e,Exo),e(_e,Pb),e(Pb,xfe),e(xfe,Cxo),e(Pb,wxo),e(Pb,tG),e(tG,Axo),e(Pb,yxo),e(_e,Lxo),e(_e,Bb),e(Bb,$fe),e($fe,xxo),e(Bb,$xo),e(Bb,aG),e(aG,kxo),e(Bb,Sxo),e(_e,Rxo),e(_e,Ib),e(Ib,kfe),e(kfe,Pxo),e(Ib,Bxo),e(Ib,nG),e(nG,Ixo),e(Ib,Nxo),e(_e,qxo),e(_e,Nb),e(Nb,Sfe),e(Sfe,jxo),e(Nb,Dxo),e(Nb,sG),e(sG,Gxo),e(Nb,Oxo),e(_e,Vxo),e(_e,qb),e(qb,Rfe),e(Rfe,Xxo),e(qb,zxo),e(qb,lG),e(lG,Wxo),e(qb,Qxo),e(eo,Hxo),e(eo,jb),e(jb,Uxo),e(jb,Pfe),e(Pfe,Jxo),e(jb,Yxo),e(jb,Bfe),e(Bfe,Kxo),e(eo,Zxo),M(Db,eo,null),b(f,xqe,u),b(f,Di,u),e(Di,Gb),e(Gb,Ife),M(AL,Ife,null),e(Di,e$o),e(Di,Nfe),e(Nfe,o$o),b(f,$qe,u),b(f,Ro,u),M(yL,Ro,null),e(Ro,r$o),e(Ro,Gi),e(Gi,t$o),e(Gi,iG),e(iG,a$o),e(Gi,n$o),e(Gi,dG),e(dG,s$o),e(Gi,l$o),e(Ro,i$o),e(Ro,LL),e(LL,d$o),e(LL,qfe),e(qfe,c$o),e(LL,f$o),e(Ro,m$o),e(Ro,it),M(xL,it,null),e(it,g$o),e(it,jfe),e(jfe,h$o),e(it,p$o),e(it,Oi),e(Oi,_$o),e(Oi,Dfe),e(Dfe,u$o),e(Oi,b$o),e(Oi,cG),e(cG,v$o),e(Oi,F$o),e(it,T$o),M(Ob,it,null),e(Ro,M$o),e(Ro,oo),M($L,oo,null),e(oo,E$o),e(oo,Gfe),e(Gfe,C$o),e(oo,w$o),e(oo,Ra),e(Ra,A$o),e(Ra,Ofe),e(Ofe,y$o),e(Ra,L$o),e(Ra,Vfe),e(Vfe,x$o),e(Ra,$$o),e(Ra,Xfe),e(Xfe,k$o),e(Ra,S$o),e(oo,R$o),e(oo,N),e(N,Vb),e(Vb,zfe),e(zfe,P$o),e(Vb,B$o),e(Vb,fG),e(fG,I$o),e(Vb,N$o),e(N,q$o),e(N,Xb),e(Xb,Wfe),e(Wfe,j$o),e(Xb,D$o),e(Xb,mG),e(mG,G$o),e(Xb,O$o),e(N,V$o),e(N,zb),e(zb,Qfe),e(Qfe,X$o),e(zb,z$o),e(zb,gG),e(gG,W$o),e(zb,Q$o),e(N,H$o),e(N,Wb),e(Wb,Hfe),e(Hfe,U$o),e(Wb,J$o),e(Wb,hG),e(hG,Y$o),e(Wb,K$o),e(N,Z$o),e(N,Qb),e(Qb,Ufe),e(Ufe,eko),e(Qb,oko),e(Qb,pG),e(pG,rko),e(Qb,tko),e(N,ako),e(N,Hb),e(Hb,Jfe),e(Jfe,nko),e(Hb,sko),e(Hb,_G),e(_G,lko),e(Hb,iko),e(N,dko),e(N,Ub),e(Ub,Yfe),e(Yfe,cko),e(Ub,fko),e(Ub,uG),e(uG,mko),e(Ub,gko),e(N,hko),e(N,Jb),e(Jb,Kfe),e(Kfe,pko),e(Jb,_ko),e(Jb,bG),e(bG,uko),e(Jb,bko),e(N,vko),e(N,Yb),e(Yb,Zfe),e(Zfe,Fko),e(Yb,Tko),e(Yb,vG),e(vG,Mko),e(Yb,Eko),e(N,Cko),e(N,Kb),e(Kb,eme),e(eme,wko),e(Kb,Ako),e(Kb,FG),e(FG,yko),e(Kb,Lko),e(N,xko),e(N,Zb),e(Zb,ome),e(ome,$ko),e(Zb,kko),e(Zb,TG),e(TG,Sko),e(Zb,Rko),e(N,Pko),e(N,e2),e(e2,rme),e(rme,Bko),e(e2,Iko),e(e2,MG),e(MG,Nko),e(e2,qko),e(N,jko),e(N,o2),e(o2,tme),e(tme,Dko),e(o2,Gko),e(o2,EG),e(EG,Oko),e(o2,Vko),e(N,Xko),e(N,r2),e(r2,ame),e(ame,zko),e(r2,Wko),e(r2,CG),e(CG,Qko),e(r2,Hko),e(N,Uko),e(N,t2),e(t2,nme),e(nme,Jko),e(t2,Yko),e(t2,wG),e(wG,Kko),e(t2,Zko),e(N,eSo),e(N,a2),e(a2,sme),e(sme,oSo),e(a2,rSo),e(a2,AG),e(AG,tSo),e(a2,aSo),e(N,nSo),e(N,n2),e(n2,lme),e(lme,sSo),e(n2,lSo),e(n2,yG),e(yG,iSo),e(n2,dSo),e(N,cSo),e(N,s2),e(s2,ime),e(ime,fSo),e(s2,mSo),e(s2,LG),e(LG,gSo),e(s2,hSo),e(N,pSo),e(N,l2),e(l2,dme),e(dme,_So),e(l2,uSo),e(l2,xG),e(xG,bSo),e(l2,vSo),e(N,FSo),e(N,i2),e(i2,cme),e(cme,TSo),e(i2,MSo),e(i2,$G),e($G,ESo),e(i2,CSo),e(N,wSo),e(N,d2),e(d2,fme),e(fme,ASo),e(d2,ySo),e(d2,kG),e(kG,LSo),e(d2,xSo),e(N,$So),e(N,c2),e(c2,mme),e(mme,kSo),e(c2,SSo),e(c2,SG),e(SG,RSo),e(c2,PSo),e(N,BSo),e(N,f2),e(f2,gme),e(gme,ISo),e(f2,NSo),e(f2,RG),e(RG,qSo),e(f2,jSo),e(N,DSo),e(N,m2),e(m2,hme),e(hme,GSo),e(m2,OSo),e(m2,PG),e(PG,VSo),e(m2,XSo),e(N,zSo),e(N,g2),e(g2,pme),e(pme,WSo),e(g2,QSo),e(g2,BG),e(BG,HSo),e(g2,USo),e(N,JSo),e(N,h2),e(h2,_me),e(_me,YSo),e(h2,KSo),e(h2,IG),e(IG,ZSo),e(h2,eRo),e(N,oRo),e(N,p2),e(p2,ume),e(ume,rRo),e(p2,tRo),e(p2,NG),e(NG,aRo),e(p2,nRo),e(N,sRo),e(N,_2),e(_2,bme),e(bme,lRo),e(_2,iRo),e(_2,qG),e(qG,dRo),e(_2,cRo),e(N,fRo),e(N,u2),e(u2,vme),e(vme,mRo),e(u2,gRo),e(u2,jG),e(jG,hRo),e(u2,pRo),e(N,_Ro),e(N,b2),e(b2,Fme),e(Fme,uRo),e(b2,bRo),e(b2,DG),e(DG,vRo),e(b2,FRo),e(N,TRo),e(N,v2),e(v2,Tme),e(Tme,MRo),e(v2,ERo),e(v2,GG),e(GG,CRo),e(v2,wRo),e(N,ARo),e(N,F2),e(F2,Mme),e(Mme,yRo),e(F2,LRo),e(F2,OG),e(OG,xRo),e(F2,$Ro),e(N,kRo),e(N,T2),e(T2,Eme),e(Eme,SRo),e(T2,RRo),e(T2,VG),e(VG,PRo),e(T2,BRo),e(N,IRo),e(N,M2),e(M2,Cme),e(Cme,NRo),e(M2,qRo),e(M2,XG),e(XG,jRo),e(M2,DRo),e(N,GRo),e(N,E2),e(E2,wme),e(wme,ORo),e(E2,VRo),e(E2,zG),e(zG,XRo),e(E2,zRo),e(N,WRo),e(N,C2),e(C2,Ame),e(Ame,QRo),e(C2,HRo),e(C2,WG),e(WG,URo),e(C2,JRo),e(N,YRo),e(N,w2),e(w2,yme),e(yme,KRo),e(w2,ZRo),e(w2,QG),e(QG,ePo),e(w2,oPo),e(N,rPo),e(N,A2),e(A2,Lme),e(Lme,tPo),e(A2,aPo),e(A2,HG),e(HG,nPo),e(A2,sPo),e(N,lPo),e(N,y2),e(y2,xme),e(xme,iPo),e(y2,dPo),e(y2,UG),e(UG,cPo),e(y2,fPo),e(N,mPo),e(N,L2),e(L2,$me),e($me,gPo),e(L2,hPo),e(L2,JG),e(JG,pPo),e(L2,_Po),e(N,uPo),e(N,x2),e(x2,kme),e(kme,bPo),e(x2,vPo),e(x2,YG),e(YG,FPo),e(x2,TPo),e(N,MPo),e(N,$2),e($2,Sme),e(Sme,EPo),e($2,CPo),e($2,KG),e(KG,wPo),e($2,APo),e(N,yPo),e(N,k2),e(k2,Rme),e(Rme,LPo),e(k2,xPo),e(k2,ZG),e(ZG,$Po),e(k2,kPo),e(N,SPo),e(N,S2),e(S2,Pme),e(Pme,RPo),e(S2,PPo),e(S2,eO),e(eO,BPo),e(S2,IPo),e(N,NPo),e(N,R2),e(R2,Bme),e(Bme,qPo),e(R2,jPo),e(R2,oO),e(oO,DPo),e(R2,GPo),e(N,OPo),e(N,P2),e(P2,Ime),e(Ime,VPo),e(P2,XPo),e(P2,rO),e(rO,zPo),e(P2,WPo),e(N,QPo),e(N,B2),e(B2,Nme),e(Nme,HPo),e(B2,UPo),e(B2,tO),e(tO,JPo),e(B2,YPo),e(oo,KPo),e(oo,I2),e(I2,ZPo),e(I2,qme),e(qme,eBo),e(I2,oBo),e(I2,jme),e(jme,rBo),e(oo,tBo),M(N2,oo,null),b(f,kqe,u),b(f,Vi,u),e(Vi,q2),e(q2,Dme),M(kL,Dme,null),e(Vi,aBo),e(Vi,Gme),e(Gme,nBo),b(f,Sqe,u),b(f,Po,u),M(SL,Po,null),e(Po,sBo),e(Po,Xi),e(Xi,lBo),e(Xi,aO),e(aO,iBo),e(Xi,dBo),e(Xi,nO),e(nO,cBo),e(Xi,fBo),e(Po,mBo),e(Po,RL),e(RL,gBo),e(RL,Ome),e(Ome,hBo),e(RL,pBo),e(Po,_Bo),e(Po,dt),M(PL,dt,null),e(dt,uBo),e(dt,Vme),e(Vme,bBo),e(dt,vBo),e(dt,zi),e(zi,FBo),e(zi,Xme),e(Xme,TBo),e(zi,MBo),e(zi,sO),e(sO,EBo),e(zi,CBo),e(dt,wBo),M(j2,dt,null),e(Po,ABo),e(Po,ro),M(BL,ro,null),e(ro,yBo),e(ro,zme),e(zme,LBo),e(ro,xBo),e(ro,Pa),e(Pa,$Bo),e(Pa,Wme),e(Wme,kBo),e(Pa,SBo),e(Pa,Qme),e(Qme,RBo),e(Pa,PBo),e(Pa,Hme),e(Hme,BBo),e(Pa,IBo),e(ro,NBo),e(ro,K),e(K,D2),e(D2,Ume),e(Ume,qBo),e(D2,jBo),e(D2,lO),e(lO,DBo),e(D2,GBo),e(K,OBo),e(K,G2),e(G2,Jme),e(Jme,VBo),e(G2,XBo),e(G2,iO),e(iO,zBo),e(G2,WBo),e(K,QBo),e(K,O2),e(O2,Yme),e(Yme,HBo),e(O2,UBo),e(O2,dO),e(dO,JBo),e(O2,YBo),e(K,KBo),e(K,V2),e(V2,Kme),e(Kme,ZBo),e(V2,eIo),e(V2,cO),e(cO,oIo),e(V2,rIo),e(K,tIo),e(K,X2),e(X2,Zme),e(Zme,aIo),e(X2,nIo),e(X2,fO),e(fO,sIo),e(X2,lIo),e(K,iIo),e(K,z2),e(z2,ege),e(ege,dIo),e(z2,cIo),e(z2,mO),e(mO,fIo),e(z2,mIo),e(K,gIo),e(K,W2),e(W2,oge),e(oge,hIo),e(W2,pIo),e(W2,gO),e(gO,_Io),e(W2,uIo),e(K,bIo),e(K,Q2),e(Q2,rge),e(rge,vIo),e(Q2,FIo),e(Q2,hO),e(hO,TIo),e(Q2,MIo),e(K,EIo),e(K,H2),e(H2,tge),e(tge,CIo),e(H2,wIo),e(H2,pO),e(pO,AIo),e(H2,yIo),e(K,LIo),e(K,U2),e(U2,age),e(age,xIo),e(U2,$Io),e(U2,_O),e(_O,kIo),e(U2,SIo),e(K,RIo),e(K,J2),e(J2,nge),e(nge,PIo),e(J2,BIo),e(J2,uO),e(uO,IIo),e(J2,NIo),e(K,qIo),e(K,Y2),e(Y2,sge),e(sge,jIo),e(Y2,DIo),e(Y2,bO),e(bO,GIo),e(Y2,OIo),e(K,VIo),e(K,K2),e(K2,lge),e(lge,XIo),e(K2,zIo),e(K2,vO),e(vO,WIo),e(K2,QIo),e(K,HIo),e(K,Z2),e(Z2,ige),e(ige,UIo),e(Z2,JIo),e(Z2,FO),e(FO,YIo),e(Z2,KIo),e(K,ZIo),e(K,e4),e(e4,dge),e(dge,eNo),e(e4,oNo),e(e4,TO),e(TO,rNo),e(e4,tNo),e(K,aNo),e(K,o4),e(o4,cge),e(cge,nNo),e(o4,sNo),e(o4,MO),e(MO,lNo),e(o4,iNo),e(K,dNo),e(K,r4),e(r4,fge),e(fge,cNo),e(r4,fNo),e(r4,EO),e(EO,mNo),e(r4,gNo),e(K,hNo),e(K,t4),e(t4,mge),e(mge,pNo),e(t4,_No),e(t4,CO),e(CO,uNo),e(t4,bNo),e(K,vNo),e(K,a4),e(a4,gge),e(gge,FNo),e(a4,TNo),e(a4,wO),e(wO,MNo),e(a4,ENo),e(K,CNo),e(K,n4),e(n4,hge),e(hge,wNo),e(n4,ANo),e(n4,AO),e(AO,yNo),e(n4,LNo),e(K,xNo),e(K,s4),e(s4,pge),e(pge,$No),e(s4,kNo),e(s4,yO),e(yO,SNo),e(s4,RNo),e(K,PNo),e(K,l4),e(l4,_ge),e(_ge,BNo),e(l4,INo),e(l4,LO),e(LO,NNo),e(l4,qNo),e(K,jNo),e(K,i4),e(i4,uge),e(uge,DNo),e(i4,GNo),e(i4,xO),e(xO,ONo),e(i4,VNo),e(K,XNo),e(K,d4),e(d4,bge),e(bge,zNo),e(d4,WNo),e(d4,$O),e($O,QNo),e(d4,HNo),e(K,UNo),e(K,c4),e(c4,vge),e(vge,JNo),e(c4,YNo),e(c4,kO),e(kO,KNo),e(c4,ZNo),e(K,eqo),e(K,f4),e(f4,Fge),e(Fge,oqo),e(f4,rqo),e(f4,SO),e(SO,tqo),e(f4,aqo),e(K,nqo),e(K,m4),e(m4,Tge),e(Tge,sqo),e(m4,lqo),e(m4,RO),e(RO,iqo),e(m4,dqo),e(K,cqo),e(K,g4),e(g4,Mge),e(Mge,fqo),e(g4,mqo),e(g4,PO),e(PO,gqo),e(g4,hqo),e(K,pqo),e(K,h4),e(h4,Ege),e(Ege,_qo),e(h4,uqo),e(h4,BO),e(BO,bqo),e(h4,vqo),e(ro,Fqo),e(ro,p4),e(p4,Tqo),e(p4,Cge),e(Cge,Mqo),e(p4,Eqo),e(p4,wge),e(wge,Cqo),e(ro,wqo),M(_4,ro,null),b(f,Rqe,u),b(f,Wi,u),e(Wi,u4),e(u4,Age),M(IL,Age,null),e(Wi,Aqo),e(Wi,yge),e(yge,yqo),b(f,Pqe,u),b(f,Bo,u),M(NL,Bo,null),e(Bo,Lqo),e(Bo,Qi),e(Qi,xqo),e(Qi,IO),e(IO,$qo),e(Qi,kqo),e(Qi,NO),e(NO,Sqo),e(Qi,Rqo),e(Bo,Pqo),e(Bo,qL),e(qL,Bqo),e(qL,Lge),e(Lge,Iqo),e(qL,Nqo),e(Bo,qqo),e(Bo,ct),M(jL,ct,null),e(ct,jqo),e(ct,xge),e(xge,Dqo),e(ct,Gqo),e(ct,Hi),e(Hi,Oqo),e(Hi,$ge),e($ge,Vqo),e(Hi,Xqo),e(Hi,qO),e(qO,zqo),e(Hi,Wqo),e(ct,Qqo),M(b4,ct,null),e(Bo,Hqo),e(Bo,to),M(DL,to,null),e(to,Uqo),e(to,kge),e(kge,Jqo),e(to,Yqo),e(to,Ba),e(Ba,Kqo),e(Ba,Sge),e(Sge,Zqo),e(Ba,ejo),e(Ba,Rge),e(Rge,ojo),e(Ba,rjo),e(Ba,Pge),e(Pge,tjo),e(Ba,ajo),e(to,njo),e(to,Yr),e(Yr,v4),e(v4,Bge),e(Bge,sjo),e(v4,ljo),e(v4,jO),e(jO,ijo),e(v4,djo),e(Yr,cjo),e(Yr,F4),e(F4,Ige),e(Ige,fjo),e(F4,mjo),e(F4,DO),e(DO,gjo),e(F4,hjo),e(Yr,pjo),e(Yr,T4),e(T4,Nge),e(Nge,_jo),e(T4,ujo),e(T4,GO),e(GO,bjo),e(T4,vjo),e(Yr,Fjo),e(Yr,M4),e(M4,qge),e(qge,Tjo),e(M4,Mjo),e(M4,OO),e(OO,Ejo),e(M4,Cjo),e(Yr,wjo),e(Yr,E4),e(E4,jge),e(jge,Ajo),e(E4,yjo),e(E4,VO),e(VO,Ljo),e(E4,xjo),e(to,$jo),e(to,C4),e(C4,kjo),e(C4,Dge),e(Dge,Sjo),e(C4,Rjo),e(C4,Gge),e(Gge,Pjo),e(to,Bjo),M(w4,to,null),b(f,Bqe,u),b(f,Ui,u),e(Ui,A4),e(A4,Oge),M(GL,Oge,null),e(Ui,Ijo),e(Ui,Vge),e(Vge,Njo),b(f,Iqe,u),b(f,Io,u),M(OL,Io,null),e(Io,qjo),e(Io,Ji),e(Ji,jjo),e(Ji,XO),e(XO,Djo),e(Ji,Gjo),e(Ji,zO),e(zO,Ojo),e(Ji,Vjo),e(Io,Xjo),e(Io,VL),e(VL,zjo),e(VL,Xge),e(Xge,Wjo),e(VL,Qjo),e(Io,Hjo),e(Io,ft),M(XL,ft,null),e(ft,Ujo),e(ft,zge),e(zge,Jjo),e(ft,Yjo),e(ft,Yi),e(Yi,Kjo),e(Yi,Wge),e(Wge,Zjo),e(Yi,eDo),e(Yi,WO),e(WO,oDo),e(Yi,rDo),e(ft,tDo),M(y4,ft,null),e(Io,aDo),e(Io,ao),M(zL,ao,null),e(ao,nDo),e(ao,Qge),e(Qge,sDo),e(ao,lDo),e(ao,Ia),e(Ia,iDo),e(Ia,Hge),e(Hge,dDo),e(Ia,cDo),e(Ia,Uge),e(Uge,fDo),e(Ia,mDo),e(Ia,Jge),e(Jge,gDo),e(Ia,hDo),e(ao,pDo),e(ao,H),e(H,L4),e(L4,Yge),e(Yge,_Do),e(L4,uDo),e(L4,QO),e(QO,bDo),e(L4,vDo),e(H,FDo),e(H,x4),e(x4,Kge),e(Kge,TDo),e(x4,MDo),e(x4,HO),e(HO,EDo),e(x4,CDo),e(H,wDo),e(H,$4),e($4,Zge),e(Zge,ADo),e($4,yDo),e($4,UO),e(UO,LDo),e($4,xDo),e(H,$Do),e(H,k4),e(k4,ehe),e(ehe,kDo),e(k4,SDo),e(k4,JO),e(JO,RDo),e(k4,PDo),e(H,BDo),e(H,S4),e(S4,ohe),e(ohe,IDo),e(S4,NDo),e(S4,YO),e(YO,qDo),e(S4,jDo),e(H,DDo),e(H,R4),e(R4,rhe),e(rhe,GDo),e(R4,ODo),e(R4,KO),e(KO,VDo),e(R4,XDo),e(H,zDo),e(H,P4),e(P4,the),e(the,WDo),e(P4,QDo),e(P4,ZO),e(ZO,HDo),e(P4,UDo),e(H,JDo),e(H,B4),e(B4,ahe),e(ahe,YDo),e(B4,KDo),e(B4,eV),e(eV,ZDo),e(B4,eGo),e(H,oGo),e(H,I4),e(I4,nhe),e(nhe,rGo),e(I4,tGo),e(I4,oV),e(oV,aGo),e(I4,nGo),e(H,sGo),e(H,N4),e(N4,she),e(she,lGo),e(N4,iGo),e(N4,rV),e(rV,dGo),e(N4,cGo),e(H,fGo),e(H,q4),e(q4,lhe),e(lhe,mGo),e(q4,gGo),e(q4,tV),e(tV,hGo),e(q4,pGo),e(H,_Go),e(H,j4),e(j4,ihe),e(ihe,uGo),e(j4,bGo),e(j4,aV),e(aV,vGo),e(j4,FGo),e(H,TGo),e(H,D4),e(D4,dhe),e(dhe,MGo),e(D4,EGo),e(D4,nV),e(nV,CGo),e(D4,wGo),e(H,AGo),e(H,G4),e(G4,che),e(che,yGo),e(G4,LGo),e(G4,sV),e(sV,xGo),e(G4,$Go),e(H,kGo),e(H,O4),e(O4,fhe),e(fhe,SGo),e(O4,RGo),e(O4,lV),e(lV,PGo),e(O4,BGo),e(H,IGo),e(H,V4),e(V4,mhe),e(mhe,NGo),e(V4,qGo),e(V4,iV),e(iV,jGo),e(V4,DGo),e(H,GGo),e(H,X4),e(X4,ghe),e(ghe,OGo),e(X4,VGo),e(X4,dV),e(dV,XGo),e(X4,zGo),e(H,WGo),e(H,z4),e(z4,hhe),e(hhe,QGo),e(z4,HGo),e(z4,cV),e(cV,UGo),e(z4,JGo),e(H,YGo),e(H,W4),e(W4,phe),e(phe,KGo),e(W4,ZGo),e(W4,fV),e(fV,eOo),e(W4,oOo),e(H,rOo),e(H,Q4),e(Q4,_he),e(_he,tOo),e(Q4,aOo),e(Q4,mV),e(mV,nOo),e(Q4,sOo),e(H,lOo),e(H,H4),e(H4,uhe),e(uhe,iOo),e(H4,dOo),e(H4,gV),e(gV,cOo),e(H4,fOo),e(H,mOo),e(H,U4),e(U4,bhe),e(bhe,gOo),e(U4,hOo),e(U4,hV),e(hV,pOo),e(U4,_Oo),e(H,uOo),e(H,J4),e(J4,vhe),e(vhe,bOo),e(J4,vOo),e(J4,pV),e(pV,FOo),e(J4,TOo),e(H,MOo),e(H,Y4),e(Y4,Fhe),e(Fhe,EOo),e(Y4,COo),e(Y4,_V),e(_V,wOo),e(Y4,AOo),e(H,yOo),e(H,K4),e(K4,The),e(The,LOo),e(K4,xOo),e(K4,uV),e(uV,$Oo),e(K4,kOo),e(H,SOo),e(H,Z4),e(Z4,Mhe),e(Mhe,ROo),e(Z4,POo),e(Z4,bV),e(bV,BOo),e(Z4,IOo),e(H,NOo),e(H,e5),e(e5,Ehe),e(Ehe,qOo),e(e5,jOo),e(e5,vV),e(vV,DOo),e(e5,GOo),e(H,OOo),e(H,o5),e(o5,Che),e(Che,VOo),e(o5,XOo),e(o5,FV),e(FV,zOo),e(o5,WOo),e(H,QOo),e(H,r5),e(r5,whe),e(whe,HOo),e(r5,UOo),e(r5,TV),e(TV,JOo),e(r5,YOo),e(H,KOo),e(H,t5),e(t5,Ahe),e(Ahe,ZOo),e(t5,eVo),e(t5,MV),e(MV,oVo),e(t5,rVo),e(H,tVo),e(H,a5),e(a5,yhe),e(yhe,aVo),e(a5,nVo),e(a5,EV),e(EV,sVo),e(a5,lVo),e(H,iVo),e(H,n5),e(n5,Lhe),e(Lhe,dVo),e(n5,cVo),e(n5,CV),e(CV,fVo),e(n5,mVo),e(H,gVo),e(H,s5),e(s5,xhe),e(xhe,hVo),e(s5,pVo),e(s5,wV),e(wV,_Vo),e(s5,uVo),e(H,bVo),e(H,l5),e(l5,$he),e($he,vVo),e(l5,FVo),e(l5,AV),e(AV,TVo),e(l5,MVo),e(ao,EVo),e(ao,i5),e(i5,CVo),e(i5,khe),e(khe,wVo),e(i5,AVo),e(i5,She),e(She,yVo),e(ao,LVo),M(d5,ao,null),b(f,Nqe,u),b(f,Ki,u),e(Ki,c5),e(c5,Rhe),M(WL,Rhe,null),e(Ki,xVo),e(Ki,Phe),e(Phe,$Vo),b(f,qqe,u),b(f,No,u),M(QL,No,null),e(No,kVo),e(No,Zi),e(Zi,SVo),e(Zi,yV),e(yV,RVo),e(Zi,PVo),e(Zi,LV),e(LV,BVo),e(Zi,IVo),e(No,NVo),e(No,HL),e(HL,qVo),e(HL,Bhe),e(Bhe,jVo),e(HL,DVo),e(No,GVo),e(No,mt),M(UL,mt,null),e(mt,OVo),e(mt,Ihe),e(Ihe,VVo),e(mt,XVo),e(mt,ed),e(ed,zVo),e(ed,Nhe),e(Nhe,WVo),e(ed,QVo),e(ed,xV),e(xV,HVo),e(ed,UVo),e(mt,JVo),M(f5,mt,null),e(No,YVo),e(No,no),M(JL,no,null),e(no,KVo),e(no,qhe),e(qhe,ZVo),e(no,eXo),e(no,Na),e(Na,oXo),e(Na,jhe),e(jhe,rXo),e(Na,tXo),e(Na,Dhe),e(Dhe,aXo),e(Na,nXo),e(Na,Ghe),e(Ghe,sXo),e(Na,lXo),e(no,iXo),e(no,V),e(V,m5),e(m5,Ohe),e(Ohe,dXo),e(m5,cXo),e(m5,$V),e($V,fXo),e(m5,mXo),e(V,gXo),e(V,g5),e(g5,Vhe),e(Vhe,hXo),e(g5,pXo),e(g5,kV),e(kV,_Xo),e(g5,uXo),e(V,bXo),e(V,h5),e(h5,Xhe),e(Xhe,vXo),e(h5,FXo),e(h5,SV),e(SV,TXo),e(h5,MXo),e(V,EXo),e(V,p5),e(p5,zhe),e(zhe,CXo),e(p5,wXo),e(p5,RV),e(RV,AXo),e(p5,yXo),e(V,LXo),e(V,_5),e(_5,Whe),e(Whe,xXo),e(_5,$Xo),e(_5,PV),e(PV,kXo),e(_5,SXo),e(V,RXo),e(V,u5),e(u5,Qhe),e(Qhe,PXo),e(u5,BXo),e(u5,BV),e(BV,IXo),e(u5,NXo),e(V,qXo),e(V,b5),e(b5,Hhe),e(Hhe,jXo),e(b5,DXo),e(b5,IV),e(IV,GXo),e(b5,OXo),e(V,VXo),e(V,v5),e(v5,Uhe),e(Uhe,XXo),e(v5,zXo),e(v5,NV),e(NV,WXo),e(v5,QXo),e(V,HXo),e(V,F5),e(F5,Jhe),e(Jhe,UXo),e(F5,JXo),e(F5,qV),e(qV,YXo),e(F5,KXo),e(V,ZXo),e(V,T5),e(T5,Yhe),e(Yhe,ezo),e(T5,ozo),e(T5,jV),e(jV,rzo),e(T5,tzo),e(V,azo),e(V,M5),e(M5,Khe),e(Khe,nzo),e(M5,szo),e(M5,DV),e(DV,lzo),e(M5,izo),e(V,dzo),e(V,E5),e(E5,Zhe),e(Zhe,czo),e(E5,fzo),e(E5,GV),e(GV,mzo),e(E5,gzo),e(V,hzo),e(V,C5),e(C5,epe),e(epe,pzo),e(C5,_zo),e(C5,OV),e(OV,uzo),e(C5,bzo),e(V,vzo),e(V,w5),e(w5,ope),e(ope,Fzo),e(w5,Tzo),e(w5,VV),e(VV,Mzo),e(w5,Ezo),e(V,Czo),e(V,A5),e(A5,rpe),e(rpe,wzo),e(A5,Azo),e(A5,XV),e(XV,yzo),e(A5,Lzo),e(V,xzo),e(V,y5),e(y5,tpe),e(tpe,$zo),e(y5,kzo),e(y5,zV),e(zV,Szo),e(y5,Rzo),e(V,Pzo),e(V,L5),e(L5,ape),e(ape,Bzo),e(L5,Izo),e(L5,WV),e(WV,Nzo),e(L5,qzo),e(V,jzo),e(V,x5),e(x5,npe),e(npe,Dzo),e(x5,Gzo),e(x5,QV),e(QV,Ozo),e(x5,Vzo),e(V,Xzo),e(V,$5),e($5,spe),e(spe,zzo),e($5,Wzo),e($5,HV),e(HV,Qzo),e($5,Hzo),e(V,Uzo),e(V,k5),e(k5,lpe),e(lpe,Jzo),e(k5,Yzo),e(k5,UV),e(UV,Kzo),e(k5,Zzo),e(V,eWo),e(V,S5),e(S5,ipe),e(ipe,oWo),e(S5,rWo),e(S5,JV),e(JV,tWo),e(S5,aWo),e(V,nWo),e(V,R5),e(R5,dpe),e(dpe,sWo),e(R5,lWo),e(R5,YV),e(YV,iWo),e(R5,dWo),e(V,cWo),e(V,P5),e(P5,cpe),e(cpe,fWo),e(P5,mWo),e(P5,KV),e(KV,gWo),e(P5,hWo),e(V,pWo),e(V,B5),e(B5,fpe),e(fpe,_Wo),e(B5,uWo),e(B5,ZV),e(ZV,bWo),e(B5,vWo),e(V,FWo),e(V,I5),e(I5,mpe),e(mpe,TWo),e(I5,MWo),e(I5,eX),e(eX,EWo),e(I5,CWo),e(V,wWo),e(V,N5),e(N5,gpe),e(gpe,AWo),e(N5,yWo),e(N5,oX),e(oX,LWo),e(N5,xWo),e(V,$Wo),e(V,q5),e(q5,hpe),e(hpe,kWo),e(q5,SWo),e(q5,rX),e(rX,RWo),e(q5,PWo),e(V,BWo),e(V,j5),e(j5,ppe),e(ppe,IWo),e(j5,NWo),e(j5,tX),e(tX,qWo),e(j5,jWo),e(V,DWo),e(V,D5),e(D5,_pe),e(_pe,GWo),e(D5,OWo),e(D5,aX),e(aX,VWo),e(D5,XWo),e(V,zWo),e(V,G5),e(G5,upe),e(upe,WWo),e(G5,QWo),e(G5,nX),e(nX,HWo),e(G5,UWo),e(V,JWo),e(V,O5),e(O5,bpe),e(bpe,YWo),e(O5,KWo),e(O5,sX),e(sX,ZWo),e(O5,eQo),e(V,oQo),e(V,V5),e(V5,vpe),e(vpe,rQo),e(V5,tQo),e(V5,lX),e(lX,aQo),e(V5,nQo),e(V,sQo),e(V,X5),e(X5,Fpe),e(Fpe,lQo),e(X5,iQo),e(X5,iX),e(iX,dQo),e(X5,cQo),e(V,fQo),e(V,z5),e(z5,Tpe),e(Tpe,mQo),e(z5,gQo),e(z5,dX),e(dX,hQo),e(z5,pQo),e(V,_Qo),e(V,W5),e(W5,Mpe),e(Mpe,uQo),e(W5,bQo),e(W5,cX),e(cX,vQo),e(W5,FQo),e(V,TQo),e(V,Q5),e(Q5,Epe),e(Epe,MQo),e(Q5,EQo),e(Q5,fX),e(fX,CQo),e(Q5,wQo),e(V,AQo),e(V,H5),e(H5,Cpe),e(Cpe,yQo),e(H5,LQo),e(H5,mX),e(mX,xQo),e(H5,$Qo),e(V,kQo),e(V,U5),e(U5,wpe),e(wpe,SQo),e(U5,RQo),e(U5,gX),e(gX,PQo),e(U5,BQo),e(V,IQo),e(V,J5),e(J5,Ape),e(Ape,NQo),e(J5,qQo),e(J5,hX),e(hX,jQo),e(J5,DQo),e(V,GQo),e(V,Y5),e(Y5,ype),e(ype,OQo),e(Y5,VQo),e(Y5,pX),e(pX,XQo),e(Y5,zQo),e(no,WQo),e(no,K5),e(K5,QQo),e(K5,Lpe),e(Lpe,HQo),e(K5,UQo),e(K5,xpe),e(xpe,JQo),e(no,YQo),M(Z5,no,null),b(f,jqe,u),b(f,od,u),e(od,ev),e(ev,$pe),M(YL,$pe,null),e(od,KQo),e(od,kpe),e(kpe,ZQo),b(f,Dqe,u),b(f,qo,u),M(KL,qo,null),e(qo,eHo),e(qo,rd),e(rd,oHo),e(rd,_X),e(_X,rHo),e(rd,tHo),e(rd,uX),e(uX,aHo),e(rd,nHo),e(qo,sHo),e(qo,ZL),e(ZL,lHo),e(ZL,Spe),e(Spe,iHo),e(ZL,dHo),e(qo,cHo),e(qo,gt),M(e8,gt,null),e(gt,fHo),e(gt,Rpe),e(Rpe,mHo),e(gt,gHo),e(gt,td),e(td,hHo),e(td,Ppe),e(Ppe,pHo),e(td,_Ho),e(td,bX),e(bX,uHo),e(td,bHo),e(gt,vHo),M(ov,gt,null),e(qo,FHo),e(qo,so),M(o8,so,null),e(so,THo),e(so,Bpe),e(Bpe,MHo),e(so,EHo),e(so,qa),e(qa,CHo),e(qa,Ipe),e(Ipe,wHo),e(qa,AHo),e(qa,Npe),e(Npe,yHo),e(qa,LHo),e(qa,qpe),e(qpe,xHo),e(qa,$Ho),e(so,kHo),e(so,jpe),e(jpe,rv),e(rv,Dpe),e(Dpe,SHo),e(rv,RHo),e(rv,vX),e(vX,PHo),e(rv,BHo),e(so,IHo),e(so,tv),e(tv,NHo),e(tv,Gpe),e(Gpe,qHo),e(tv,jHo),e(tv,Ope),e(Ope,DHo),e(so,GHo),M(av,so,null),b(f,Gqe,u),b(f,ad,u),e(ad,nv),e(nv,Vpe),M(r8,Vpe,null),e(ad,OHo),e(ad,Xpe),e(Xpe,VHo),b(f,Oqe,u),b(f,jo,u),M(t8,jo,null),e(jo,XHo),e(jo,nd),e(nd,zHo),e(nd,FX),e(FX,WHo),e(nd,QHo),e(nd,TX),e(TX,HHo),e(nd,UHo),e(jo,JHo),e(jo,a8),e(a8,YHo),e(a8,zpe),e(zpe,KHo),e(a8,ZHo),e(jo,eUo),e(jo,ht),M(n8,ht,null),e(ht,oUo),e(ht,Wpe),e(Wpe,rUo),e(ht,tUo),e(ht,sd),e(sd,aUo),e(sd,Qpe),e(Qpe,nUo),e(sd,sUo),e(sd,MX),e(MX,lUo),e(sd,iUo),e(ht,dUo),M(sv,ht,null),e(jo,cUo),e(jo,lo),M(s8,lo,null),e(lo,fUo),e(lo,Hpe),e(Hpe,mUo),e(lo,gUo),e(lo,ja),e(ja,hUo),e(ja,Upe),e(Upe,pUo),e(ja,_Uo),e(ja,Jpe),e(Jpe,uUo),e(ja,bUo),e(ja,Ype),e(Ype,vUo),e(ja,FUo),e(lo,TUo),e(lo,Fe),e(Fe,lv),e(lv,Kpe),e(Kpe,MUo),e(lv,EUo),e(lv,EX),e(EX,CUo),e(lv,wUo),e(Fe,AUo),e(Fe,iv),e(iv,Zpe),e(Zpe,yUo),e(iv,LUo),e(iv,CX),e(CX,xUo),e(iv,$Uo),e(Fe,kUo),e(Fe,dv),e(dv,e_e),e(e_e,SUo),e(dv,RUo),e(dv,wX),e(wX,PUo),e(dv,BUo),e(Fe,IUo),e(Fe,cv),e(cv,o_e),e(o_e,NUo),e(cv,qUo),e(cv,AX),e(AX,jUo),e(cv,DUo),e(Fe,GUo),e(Fe,Bs),e(Bs,r_e),e(r_e,OUo),e(Bs,VUo),e(Bs,yX),e(yX,XUo),e(Bs,zUo),e(Bs,LX),e(LX,WUo),e(Bs,QUo),e(Fe,HUo),e(Fe,fv),e(fv,t_e),e(t_e,UUo),e(fv,JUo),e(fv,xX),e(xX,YUo),e(fv,KUo),e(Fe,ZUo),e(Fe,pt),e(pt,a_e),e(a_e,eJo),e(pt,oJo),e(pt,$X),e($X,rJo),e(pt,tJo),e(pt,kX),e(kX,aJo),e(pt,nJo),e(pt,SX),e(SX,sJo),e(pt,lJo),e(Fe,iJo),e(Fe,mv),e(mv,n_e),e(n_e,dJo),e(mv,cJo),e(mv,RX),e(RX,fJo),e(mv,mJo),e(Fe,gJo),e(Fe,gv),e(gv,s_e),e(s_e,hJo),e(gv,pJo),e(gv,PX),e(PX,_Jo),e(gv,uJo),e(Fe,bJo),e(Fe,hv),e(hv,l_e),e(l_e,vJo),e(hv,FJo),e(hv,BX),e(BX,TJo),e(hv,MJo),e(Fe,EJo),e(Fe,pv),e(pv,i_e),e(i_e,CJo),e(pv,wJo),e(pv,IX),e(IX,AJo),e(pv,yJo),e(Fe,LJo),e(Fe,_v),e(_v,d_e),e(d_e,xJo),e(_v,$Jo),e(_v,NX),e(NX,kJo),e(_v,SJo),e(Fe,RJo),e(Fe,uv),e(uv,c_e),e(c_e,PJo),e(uv,BJo),e(uv,qX),e(qX,IJo),e(uv,NJo),e(Fe,qJo),e(Fe,bv),e(bv,f_e),e(f_e,jJo),e(bv,DJo),e(bv,jX),e(jX,GJo),e(bv,OJo),e(lo,VJo),e(lo,vv),e(vv,XJo),e(vv,m_e),e(m_e,zJo),e(vv,WJo),e(vv,g_e),e(g_e,QJo),e(lo,HJo),M(Fv,lo,null),b(f,Vqe,u),b(f,ld,u),e(ld,Tv),e(Tv,h_e),M(l8,h_e,null),e(ld,UJo),e(ld,p_e),e(p_e,JJo),b(f,Xqe,u),b(f,Do,u),M(i8,Do,null),e(Do,YJo),e(Do,id),e(id,KJo),e(id,DX),e(DX,ZJo),e(id,eYo),e(id,GX),e(GX,oYo),e(id,rYo),e(Do,tYo),e(Do,d8),e(d8,aYo),e(d8,__e),e(__e,nYo),e(d8,sYo),e(Do,lYo),e(Do,_t),M(c8,_t,null),e(_t,iYo),e(_t,u_e),e(u_e,dYo),e(_t,cYo),e(_t,dd),e(dd,fYo),e(dd,b_e),e(b_e,mYo),e(dd,gYo),e(dd,OX),e(OX,hYo),e(dd,pYo),e(_t,_Yo),M(Mv,_t,null),e(Do,uYo),e(Do,io),M(f8,io,null),e(io,bYo),e(io,v_e),e(v_e,vYo),e(io,FYo),e(io,Da),e(Da,TYo),e(Da,F_e),e(F_e,MYo),e(Da,EYo),e(Da,T_e),e(T_e,CYo),e(Da,wYo),e(Da,M_e),e(M_e,AYo),e(Da,yYo),e(io,LYo),e(io,E_e),e(E_e,Ev),e(Ev,C_e),e(C_e,xYo),e(Ev,$Yo),e(Ev,VX),e(VX,kYo),e(Ev,SYo),e(io,RYo),e(io,Cv),e(Cv,PYo),e(Cv,w_e),e(w_e,BYo),e(Cv,IYo),e(Cv,A_e),e(A_e,NYo),e(io,qYo),M(wv,io,null),b(f,zqe,u),b(f,cd,u),e(cd,Av),e(Av,y_e),M(m8,y_e,null),e(cd,jYo),e(cd,L_e),e(L_e,DYo),b(f,Wqe,u),b(f,Go,u),M(g8,Go,null),e(Go,GYo),e(Go,fd),e(fd,OYo),e(fd,XX),e(XX,VYo),e(fd,XYo),e(fd,zX),e(zX,zYo),e(fd,WYo),e(Go,QYo),e(Go,h8),e(h8,HYo),e(h8,x_e),e(x_e,UYo),e(h8,JYo),e(Go,YYo),e(Go,ut),M(p8,ut,null),e(ut,KYo),e(ut,$_e),e($_e,ZYo),e(ut,eKo),e(ut,md),e(md,oKo),e(md,k_e),e(k_e,rKo),e(md,tKo),e(md,WX),e(WX,aKo),e(md,nKo),e(ut,sKo),M(yv,ut,null),e(Go,lKo),e(Go,co),M(_8,co,null),e(co,iKo),e(co,S_e),e(S_e,dKo),e(co,cKo),e(co,Ga),e(Ga,fKo),e(Ga,R_e),e(R_e,mKo),e(Ga,gKo),e(Ga,P_e),e(P_e,hKo),e(Ga,pKo),e(Ga,B_e),e(B_e,_Ko),e(Ga,uKo),e(co,bKo),e(co,ke),e(ke,Lv),e(Lv,I_e),e(I_e,vKo),e(Lv,FKo),e(Lv,QX),e(QX,TKo),e(Lv,MKo),e(ke,EKo),e(ke,xv),e(xv,N_e),e(N_e,CKo),e(xv,wKo),e(xv,HX),e(HX,AKo),e(xv,yKo),e(ke,LKo),e(ke,$v),e($v,q_e),e(q_e,xKo),e($v,$Ko),e($v,UX),e(UX,kKo),e($v,SKo),e(ke,RKo),e(ke,kv),e(kv,j_e),e(j_e,PKo),e(kv,BKo),e(kv,JX),e(JX,IKo),e(kv,NKo),e(ke,qKo),e(ke,Sv),e(Sv,D_e),e(D_e,jKo),e(Sv,DKo),e(Sv,YX),e(YX,GKo),e(Sv,OKo),e(ke,VKo),e(ke,Rv),e(Rv,G_e),e(G_e,XKo),e(Rv,zKo),e(Rv,KX),e(KX,WKo),e(Rv,QKo),e(ke,HKo),e(ke,Pv),e(Pv,O_e),e(O_e,UKo),e(Pv,JKo),e(Pv,ZX),e(ZX,YKo),e(Pv,KKo),e(ke,ZKo),e(ke,Bv),e(Bv,V_e),e(V_e,eZo),e(Bv,oZo),e(Bv,ez),e(ez,rZo),e(Bv,tZo),e(ke,aZo),e(ke,Iv),e(Iv,X_e),e(X_e,nZo),e(Iv,sZo),e(Iv,oz),e(oz,lZo),e(Iv,iZo),e(co,dZo),e(co,Nv),e(Nv,cZo),e(Nv,z_e),e(z_e,fZo),e(Nv,mZo),e(Nv,W_e),e(W_e,gZo),e(co,hZo),M(qv,co,null),b(f,Qqe,u),b(f,gd,u),e(gd,jv),e(jv,Q_e),M(u8,Q_e,null),e(gd,pZo),e(gd,H_e),e(H_e,_Zo),b(f,Hqe,u),b(f,Oo,u),M(b8,Oo,null),e(Oo,uZo),e(Oo,hd),e(hd,bZo),e(hd,rz),e(rz,vZo),e(hd,FZo),e(hd,tz),e(tz,TZo),e(hd,MZo),e(Oo,EZo),e(Oo,v8),e(v8,CZo),e(v8,U_e),e(U_e,wZo),e(v8,AZo),e(Oo,yZo),e(Oo,bt),M(F8,bt,null),e(bt,LZo),e(bt,J_e),e(J_e,xZo),e(bt,$Zo),e(bt,pd),e(pd,kZo),e(pd,Y_e),e(Y_e,SZo),e(pd,RZo),e(pd,az),e(az,PZo),e(pd,BZo),e(bt,IZo),M(Dv,bt,null),e(Oo,NZo),e(Oo,fo),M(T8,fo,null),e(fo,qZo),e(fo,K_e),e(K_e,jZo),e(fo,DZo),e(fo,Oa),e(Oa,GZo),e(Oa,Z_e),e(Z_e,OZo),e(Oa,VZo),e(Oa,eue),e(eue,XZo),e(Oa,zZo),e(Oa,oue),e(oue,WZo),e(Oa,QZo),e(fo,HZo),e(fo,Kr),e(Kr,Gv),e(Gv,rue),e(rue,UZo),e(Gv,JZo),e(Gv,nz),e(nz,YZo),e(Gv,KZo),e(Kr,ZZo),e(Kr,Ov),e(Ov,tue),e(tue,eer),e(Ov,oer),e(Ov,sz),e(sz,rer),e(Ov,ter),e(Kr,aer),e(Kr,Vv),e(Vv,aue),e(aue,ner),e(Vv,ser),e(Vv,lz),e(lz,ler),e(Vv,ier),e(Kr,der),e(Kr,Xv),e(Xv,nue),e(nue,cer),e(Xv,fer),e(Xv,iz),e(iz,mer),e(Xv,ger),e(Kr,her),e(Kr,zv),e(zv,sue),e(sue,per),e(zv,_er),e(zv,dz),e(dz,uer),e(zv,ber),e(fo,ver),e(fo,Wv),e(Wv,Fer),e(Wv,lue),e(lue,Ter),e(Wv,Mer),e(Wv,iue),e(iue,Eer),e(fo,Cer),M(Qv,fo,null),b(f,Uqe,u),b(f,_d,u),e(_d,Hv),e(Hv,due),M(M8,due,null),e(_d,wer),e(_d,cue),e(cue,Aer),b(f,Jqe,u),b(f,Vo,u),M(E8,Vo,null),e(Vo,yer),e(Vo,ud),e(ud,Ler),e(ud,cz),e(cz,xer),e(ud,$er),e(ud,fz),e(fz,ker),e(ud,Ser),e(Vo,Rer),e(Vo,C8),e(C8,Per),e(C8,fue),e(fue,Ber),e(C8,Ier),e(Vo,Ner),e(Vo,vt),M(w8,vt,null),e(vt,qer),e(vt,mue),e(mue,jer),e(vt,Der),e(vt,bd),e(bd,Ger),e(bd,gue),e(gue,Oer),e(bd,Ver),e(bd,mz),e(mz,Xer),e(bd,zer),e(vt,Wer),M(Uv,vt,null),e(Vo,Qer),e(Vo,mo),M(A8,mo,null),e(mo,Her),e(mo,hue),e(hue,Uer),e(mo,Jer),e(mo,Va),e(Va,Yer),e(Va,pue),e(pue,Ker),e(Va,Zer),e(Va,_ue),e(_ue,eor),e(Va,oor),e(Va,uue),e(uue,ror),e(Va,tor),e(mo,aor),e(mo,Se),e(Se,Jv),e(Jv,bue),e(bue,nor),e(Jv,sor),e(Jv,gz),e(gz,lor),e(Jv,ior),e(Se,dor),e(Se,Yv),e(Yv,vue),e(vue,cor),e(Yv,mor),e(Yv,hz),e(hz,gor),e(Yv,hor),e(Se,por),e(Se,Kv),e(Kv,Fue),e(Fue,_or),e(Kv,uor),e(Kv,pz),e(pz,bor),e(Kv,vor),e(Se,For),e(Se,Zv),e(Zv,Tue),e(Tue,Tor),e(Zv,Mor),e(Zv,_z),e(_z,Eor),e(Zv,Cor),e(Se,wor),e(Se,e3),e(e3,Mue),e(Mue,Aor),e(e3,yor),e(e3,uz),e(uz,Lor),e(e3,xor),e(Se,$or),e(Se,o3),e(o3,Eue),e(Eue,kor),e(o3,Sor),e(o3,bz),e(bz,Ror),e(o3,Por),e(Se,Bor),e(Se,r3),e(r3,Cue),e(Cue,Ior),e(r3,Nor),e(r3,vz),e(vz,qor),e(r3,jor),e(Se,Dor),e(Se,t3),e(t3,wue),e(wue,Gor),e(t3,Oor),e(t3,Fz),e(Fz,Vor),e(t3,Xor),e(Se,zor),e(Se,a3),e(a3,Aue),e(Aue,Wor),e(a3,Qor),e(a3,Tz),e(Tz,Hor),e(a3,Uor),e(mo,Jor),e(mo,n3),e(n3,Yor),e(n3,yue),e(yue,Kor),e(n3,Zor),e(n3,Lue),e(Lue,err),e(mo,orr),M(s3,mo,null),b(f,Yqe,u),b(f,vd,u),e(vd,l3),e(l3,xue),M(y8,xue,null),e(vd,rrr),e(vd,$ue),e($ue,trr),b(f,Kqe,u),b(f,Xo,u),M(L8,Xo,null),e(Xo,arr),e(Xo,Fd),e(Fd,nrr),e(Fd,Mz),e(Mz,srr),e(Fd,lrr),e(Fd,Ez),e(Ez,irr),e(Fd,drr),e(Xo,crr),e(Xo,x8),e(x8,frr),e(x8,kue),e(kue,mrr),e(x8,grr),e(Xo,hrr),e(Xo,Ft),M($8,Ft,null),e(Ft,prr),e(Ft,Sue),e(Sue,_rr),e(Ft,urr),e(Ft,Td),e(Td,brr),e(Td,Rue),e(Rue,vrr),e(Td,Frr),e(Td,Cz),e(Cz,Trr),e(Td,Mrr),e(Ft,Err),M(i3,Ft,null),e(Xo,Crr),e(Xo,go),M(k8,go,null),e(go,wrr),e(go,Pue),e(Pue,Arr),e(go,yrr),e(go,Xa),e(Xa,Lrr),e(Xa,Bue),e(Bue,xrr),e(Xa,$rr),e(Xa,Iue),e(Iue,krr),e(Xa,Srr),e(Xa,Nue),e(Nue,Rrr),e(Xa,Prr),e(go,Brr),e(go,S8),e(S8,d3),e(d3,que),e(que,Irr),e(d3,Nrr),e(d3,wz),e(wz,qrr),e(d3,jrr),e(S8,Drr),e(S8,c3),e(c3,jue),e(jue,Grr),e(c3,Orr),e(c3,Az),e(Az,Vrr),e(c3,Xrr),e(go,zrr),e(go,f3),e(f3,Wrr),e(f3,Due),e(Due,Qrr),e(f3,Hrr),e(f3,Gue),e(Gue,Urr),e(go,Jrr),M(m3,go,null),b(f,Zqe,u),b(f,Md,u),e(Md,g3),e(g3,Oue),M(R8,Oue,null),e(Md,Yrr),e(Md,Vue),e(Vue,Krr),b(f,eje,u),b(f,zo,u),M(P8,zo,null),e(zo,Zrr),e(zo,Ed),e(Ed,etr),e(Ed,yz),e(yz,otr),e(Ed,rtr),e(Ed,Lz),e(Lz,ttr),e(Ed,atr),e(zo,ntr),e(zo,B8),e(B8,str),e(B8,Xue),e(Xue,ltr),e(B8,itr),e(zo,dtr),e(zo,Tt),M(I8,Tt,null),e(Tt,ctr),e(Tt,zue),e(zue,ftr),e(Tt,mtr),e(Tt,Cd),e(Cd,gtr),e(Cd,Wue),e(Wue,htr),e(Cd,ptr),e(Cd,xz),e(xz,_tr),e(Cd,utr),e(Tt,btr),M(h3,Tt,null),e(zo,vtr),e(zo,ho),M(N8,ho,null),e(ho,Ftr),e(ho,Que),e(Que,Ttr),e(ho,Mtr),e(ho,za),e(za,Etr),e(za,Hue),e(Hue,Ctr),e(za,wtr),e(za,Uue),e(Uue,Atr),e(za,ytr),e(za,Jue),e(Jue,Ltr),e(za,xtr),e(ho,$tr),e(ho,Zr),e(Zr,p3),e(p3,Yue),e(Yue,ktr),e(p3,Str),e(p3,$z),e($z,Rtr),e(p3,Ptr),e(Zr,Btr),e(Zr,_3),e(_3,Kue),e(Kue,Itr),e(_3,Ntr),e(_3,kz),e(kz,qtr),e(_3,jtr),e(Zr,Dtr),e(Zr,u3),e(u3,Zue),e(Zue,Gtr),e(u3,Otr),e(u3,Sz),e(Sz,Vtr),e(u3,Xtr),e(Zr,ztr),e(Zr,b3),e(b3,e1e),e(e1e,Wtr),e(b3,Qtr),e(b3,Rz),e(Rz,Htr),e(b3,Utr),e(Zr,Jtr),e(Zr,v3),e(v3,o1e),e(o1e,Ytr),e(v3,Ktr),e(v3,Pz),e(Pz,Ztr),e(v3,ear),e(ho,oar),e(ho,F3),e(F3,rar),e(F3,r1e),e(r1e,tar),e(F3,aar),e(F3,t1e),e(t1e,nar),e(ho,sar),M(T3,ho,null),b(f,oje,u),b(f,wd,u),e(wd,M3),e(M3,a1e),M(q8,a1e,null),e(wd,lar),e(wd,n1e),e(n1e,iar),b(f,rje,u),b(f,Wo,u),M(j8,Wo,null),e(Wo,dar),e(Wo,Ad),e(Ad,car),e(Ad,Bz),e(Bz,far),e(Ad,mar),e(Ad,Iz),e(Iz,gar),e(Ad,har),e(Wo,par),e(Wo,D8),e(D8,_ar),e(D8,s1e),e(s1e,uar),e(D8,bar),e(Wo,Far),e(Wo,Mt),M(G8,Mt,null),e(Mt,Tar),e(Mt,l1e),e(l1e,Mar),e(Mt,Ear),e(Mt,yd),e(yd,Car),e(yd,i1e),e(i1e,war),e(yd,Aar),e(yd,Nz),e(Nz,yar),e(yd,Lar),e(Mt,xar),M(E3,Mt,null),e(Wo,$ar),e(Wo,po),M(O8,po,null),e(po,kar),e(po,d1e),e(d1e,Sar),e(po,Rar),e(po,Wa),e(Wa,Par),e(Wa,c1e),e(c1e,Bar),e(Wa,Iar),e(Wa,f1e),e(f1e,Nar),e(Wa,qar),e(Wa,m1e),e(m1e,jar),e(Wa,Dar),e(po,Gar),e(po,Ld),e(Ld,C3),e(C3,g1e),e(g1e,Oar),e(C3,Var),e(C3,qz),e(qz,Xar),e(C3,zar),e(Ld,War),e(Ld,w3),e(w3,h1e),e(h1e,Qar),e(w3,Har),e(w3,jz),e(jz,Uar),e(w3,Jar),e(Ld,Yar),e(Ld,A3),e(A3,p1e),e(p1e,Kar),e(A3,Zar),e(A3,Dz),e(Dz,enr),e(A3,onr),e(po,rnr),e(po,y3),e(y3,tnr),e(y3,_1e),e(_1e,anr),e(y3,nnr),e(y3,u1e),e(u1e,snr),e(po,lnr),M(L3,po,null),b(f,tje,u),b(f,xd,u),e(xd,x3),e(x3,b1e),M(V8,b1e,null),e(xd,inr),e(xd,v1e),e(v1e,dnr),b(f,aje,u),b(f,Qo,u),M(X8,Qo,null),e(Qo,cnr),e(Qo,$d),e($d,fnr),e($d,Gz),e(Gz,mnr),e($d,gnr),e($d,Oz),e(Oz,hnr),e($d,pnr),e(Qo,_nr),e(Qo,z8),e(z8,unr),e(z8,F1e),e(F1e,bnr),e(z8,vnr),e(Qo,Fnr),e(Qo,Et),M(W8,Et,null),e(Et,Tnr),e(Et,T1e),e(T1e,Mnr),e(Et,Enr),e(Et,kd),e(kd,Cnr),e(kd,M1e),e(M1e,wnr),e(kd,Anr),e(kd,Vz),e(Vz,ynr),e(kd,Lnr),e(Et,xnr),M($3,Et,null),e(Qo,$nr),e(Qo,_o),M(Q8,_o,null),e(_o,knr),e(_o,E1e),e(E1e,Snr),e(_o,Rnr),e(_o,Qa),e(Qa,Pnr),e(Qa,C1e),e(C1e,Bnr),e(Qa,Inr),e(Qa,w1e),e(w1e,Nnr),e(Qa,qnr),e(Qa,A1e),e(A1e,jnr),e(Qa,Dnr),e(_o,Gnr),e(_o,H8),e(H8,k3),e(k3,y1e),e(y1e,Onr),e(k3,Vnr),e(k3,Xz),e(Xz,Xnr),e(k3,znr),e(H8,Wnr),e(H8,S3),e(S3,L1e),e(L1e,Qnr),e(S3,Hnr),e(S3,zz),e(zz,Unr),e(S3,Jnr),e(_o,Ynr),e(_o,R3),e(R3,Knr),e(R3,x1e),e(x1e,Znr),e(R3,esr),e(R3,$1e),e($1e,osr),e(_o,rsr),M(P3,_o,null),b(f,nje,u),b(f,Sd,u),e(Sd,B3),e(B3,k1e),M(U8,k1e,null),e(Sd,tsr),e(Sd,S1e),e(S1e,asr),b(f,sje,u),b(f,Ho,u),M(J8,Ho,null),e(Ho,nsr),e(Ho,Rd),e(Rd,ssr),e(Rd,Wz),e(Wz,lsr),e(Rd,isr),e(Rd,Qz),e(Qz,dsr),e(Rd,csr),e(Ho,fsr),e(Ho,Y8),e(Y8,msr),e(Y8,R1e),e(R1e,gsr),e(Y8,hsr),e(Ho,psr),e(Ho,Ct),M(K8,Ct,null),e(Ct,_sr),e(Ct,P1e),e(P1e,usr),e(Ct,bsr),e(Ct,Pd),e(Pd,vsr),e(Pd,B1e),e(B1e,Fsr),e(Pd,Tsr),e(Pd,Hz),e(Hz,Msr),e(Pd,Esr),e(Ct,Csr),M(I3,Ct,null),e(Ho,wsr),e(Ho,uo),M(Z8,uo,null),e(uo,Asr),e(uo,I1e),e(I1e,ysr),e(uo,Lsr),e(uo,Ha),e(Ha,xsr),e(Ha,N1e),e(N1e,$sr),e(Ha,ksr),e(Ha,q1e),e(q1e,Ssr),e(Ha,Rsr),e(Ha,j1e),e(j1e,Psr),e(Ha,Bsr),e(uo,Isr),e(uo,D1e),e(D1e,N3),e(N3,G1e),e(G1e,Nsr),e(N3,qsr),e(N3,Uz),e(Uz,jsr),e(N3,Dsr),e(uo,Gsr),e(uo,q3),e(q3,Osr),e(q3,O1e),e(O1e,Vsr),e(q3,Xsr),e(q3,V1e),e(V1e,zsr),e(uo,Wsr),M(j3,uo,null),b(f,lje,u),b(f,Bd,u),e(Bd,D3),e(D3,X1e),M(e7,X1e,null),e(Bd,Qsr),e(Bd,z1e),e(z1e,Hsr),b(f,ije,u),b(f,Uo,u),M(o7,Uo,null),e(Uo,Usr),e(Uo,Id),e(Id,Jsr),e(Id,Jz),e(Jz,Ysr),e(Id,Ksr),e(Id,Yz),e(Yz,Zsr),e(Id,elr),e(Uo,olr),e(Uo,r7),e(r7,rlr),e(r7,W1e),e(W1e,tlr),e(r7,alr),e(Uo,nlr),e(Uo,wt),M(t7,wt,null),e(wt,slr),e(wt,Q1e),e(Q1e,llr),e(wt,ilr),e(wt,Nd),e(Nd,dlr),e(Nd,H1e),e(H1e,clr),e(Nd,flr),e(Nd,Kz),e(Kz,mlr),e(Nd,glr),e(wt,hlr),M(G3,wt,null),e(Uo,plr),e(Uo,bo),M(a7,bo,null),e(bo,_lr),e(bo,U1e),e(U1e,ulr),e(bo,blr),e(bo,Ua),e(Ua,vlr),e(Ua,J1e),e(J1e,Flr),e(Ua,Tlr),e(Ua,Y1e),e(Y1e,Mlr),e(Ua,Elr),e(Ua,K1e),e(K1e,Clr),e(Ua,wlr),e(bo,Alr),e(bo,Ja),e(Ja,O3),e(O3,Z1e),e(Z1e,ylr),e(O3,Llr),e(O3,Zz),e(Zz,xlr),e(O3,$lr),e(Ja,klr),e(Ja,V3),e(V3,ebe),e(ebe,Slr),e(V3,Rlr),e(V3,eW),e(eW,Plr),e(V3,Blr),e(Ja,Ilr),e(Ja,X3),e(X3,obe),e(obe,Nlr),e(X3,qlr),e(X3,oW),e(oW,jlr),e(X3,Dlr),e(Ja,Glr),e(Ja,z3),e(z3,rbe),e(rbe,Olr),e(z3,Vlr),e(z3,rW),e(rW,Xlr),e(z3,zlr),e(bo,Wlr),e(bo,W3),e(W3,Qlr),e(W3,tbe),e(tbe,Hlr),e(W3,Ulr),e(W3,abe),e(abe,Jlr),e(bo,Ylr),M(Q3,bo,null),b(f,dje,u),b(f,qd,u),e(qd,H3),e(H3,nbe),M(n7,nbe,null),e(qd,Klr),e(qd,sbe),e(sbe,Zlr),b(f,cje,u),b(f,Jo,u),M(s7,Jo,null),e(Jo,eir),e(Jo,jd),e(jd,oir),e(jd,tW),e(tW,rir),e(jd,tir),e(jd,aW),e(aW,air),e(jd,nir),e(Jo,sir),e(Jo,l7),e(l7,lir),e(l7,lbe),e(lbe,iir),e(l7,dir),e(Jo,cir),e(Jo,At),M(i7,At,null),e(At,fir),e(At,ibe),e(ibe,mir),e(At,gir),e(At,Dd),e(Dd,hir),e(Dd,dbe),e(dbe,pir),e(Dd,_ir),e(Dd,nW),e(nW,uir),e(Dd,bir),e(At,vir),M(U3,At,null),e(Jo,Fir),e(Jo,vo),M(d7,vo,null),e(vo,Tir),e(vo,cbe),e(cbe,Mir),e(vo,Eir),e(vo,Ya),e(Ya,Cir),e(Ya,fbe),e(fbe,wir),e(Ya,Air),e(Ya,mbe),e(mbe,yir),e(Ya,Lir),e(Ya,gbe),e(gbe,xir),e(Ya,$ir),e(vo,kir),e(vo,hbe),e(hbe,J3),e(J3,pbe),e(pbe,Sir),e(J3,Rir),e(J3,sW),e(sW,Pir),e(J3,Bir),e(vo,Iir),e(vo,Y3),e(Y3,Nir),e(Y3,_be),e(_be,qir),e(Y3,jir),e(Y3,ube),e(ube,Dir),e(vo,Gir),M(K3,vo,null),b(f,fje,u),b(f,Gd,u),e(Gd,Z3),e(Z3,bbe),M(c7,bbe,null),e(Gd,Oir),e(Gd,vbe),e(vbe,Vir),b(f,mje,u),b(f,Yo,u),M(f7,Yo,null),e(Yo,Xir),e(Yo,Od),e(Od,zir),e(Od,lW),e(lW,Wir),e(Od,Qir),e(Od,iW),e(iW,Hir),e(Od,Uir),e(Yo,Jir),e(Yo,m7),e(m7,Yir),e(m7,Fbe),e(Fbe,Kir),e(m7,Zir),e(Yo,edr),e(Yo,yt),M(g7,yt,null),e(yt,odr),e(yt,Tbe),e(Tbe,rdr),e(yt,tdr),e(yt,Vd),e(Vd,adr),e(Vd,Mbe),e(Mbe,ndr),e(Vd,sdr),e(Vd,dW),e(dW,ldr),e(Vd,idr),e(yt,ddr),M(eF,yt,null),e(Yo,cdr),e(Yo,wr),M(h7,wr,null),e(wr,fdr),e(wr,Ebe),e(Ebe,mdr),e(wr,gdr),e(wr,Ka),e(Ka,hdr),e(Ka,Cbe),e(Cbe,pdr),e(Ka,_dr),e(Ka,wbe),e(wbe,udr),e(Ka,bdr),e(Ka,Abe),e(Abe,vdr),e(Ka,Fdr),e(wr,Tdr),e(wr,q),e(q,oF),e(oF,ybe),e(ybe,Mdr),e(oF,Edr),e(oF,cW),e(cW,Cdr),e(oF,wdr),e(q,Adr),e(q,rF),e(rF,Lbe),e(Lbe,ydr),e(rF,Ldr),e(rF,fW),e(fW,xdr),e(rF,$dr),e(q,kdr),e(q,tF),e(tF,xbe),e(xbe,Sdr),e(tF,Rdr),e(tF,mW),e(mW,Pdr),e(tF,Bdr),e(q,Idr),e(q,aF),e(aF,$be),e($be,Ndr),e(aF,qdr),e(aF,gW),e(gW,jdr),e(aF,Ddr),e(q,Gdr),e(q,nF),e(nF,kbe),e(kbe,Odr),e(nF,Vdr),e(nF,hW),e(hW,Xdr),e(nF,zdr),e(q,Wdr),e(q,sF),e(sF,Sbe),e(Sbe,Qdr),e(sF,Hdr),e(sF,pW),e(pW,Udr),e(sF,Jdr),e(q,Ydr),e(q,lF),e(lF,Rbe),e(Rbe,Kdr),e(lF,Zdr),e(lF,_W),e(_W,ecr),e(lF,ocr),e(q,rcr),e(q,iF),e(iF,Pbe),e(Pbe,tcr),e(iF,acr),e(iF,uW),e(uW,ncr),e(iF,scr),e(q,lcr),e(q,dF),e(dF,Bbe),e(Bbe,icr),e(dF,dcr),e(dF,bW),e(bW,ccr),e(dF,fcr),e(q,mcr),e(q,cF),e(cF,Ibe),e(Ibe,gcr),e(cF,hcr),e(cF,vW),e(vW,pcr),e(cF,_cr),e(q,ucr),e(q,fF),e(fF,Nbe),e(Nbe,bcr),e(fF,vcr),e(fF,FW),e(FW,Fcr),e(fF,Tcr),e(q,Mcr),e(q,mF),e(mF,qbe),e(qbe,Ecr),e(mF,Ccr),e(mF,TW),e(TW,wcr),e(mF,Acr),e(q,ycr),e(q,gF),e(gF,jbe),e(jbe,Lcr),e(gF,xcr),e(gF,MW),e(MW,$cr),e(gF,kcr),e(q,Scr),e(q,hF),e(hF,Dbe),e(Dbe,Rcr),e(hF,Pcr),e(hF,EW),e(EW,Bcr),e(hF,Icr),e(q,Ncr),e(q,pF),e(pF,Gbe),e(Gbe,qcr),e(pF,jcr),e(pF,CW),e(CW,Dcr),e(pF,Gcr),e(q,Ocr),e(q,_F),e(_F,Obe),e(Obe,Vcr),e(_F,Xcr),e(_F,wW),e(wW,zcr),e(_F,Wcr),e(q,Qcr),e(q,uF),e(uF,Vbe),e(Vbe,Hcr),e(uF,Ucr),e(uF,AW),e(AW,Jcr),e(uF,Ycr),e(q,Kcr),e(q,Is),e(Is,Xbe),e(Xbe,Zcr),e(Is,efr),e(Is,yW),e(yW,ofr),e(Is,rfr),e(Is,LW),e(LW,tfr),e(Is,afr),e(q,nfr),e(q,bF),e(bF,zbe),e(zbe,sfr),e(bF,lfr),e(bF,xW),e(xW,ifr),e(bF,dfr),e(q,cfr),e(q,vF),e(vF,Wbe),e(Wbe,ffr),e(vF,mfr),e(vF,$W),e($W,gfr),e(vF,hfr),e(q,pfr),e(q,FF),e(FF,Qbe),e(Qbe,_fr),e(FF,ufr),e(FF,kW),e(kW,bfr),e(FF,vfr),e(q,Ffr),e(q,TF),e(TF,Hbe),e(Hbe,Tfr),e(TF,Mfr),e(TF,SW),e(SW,Efr),e(TF,Cfr),e(q,wfr),e(q,MF),e(MF,Ube),e(Ube,Afr),e(MF,yfr),e(MF,RW),e(RW,Lfr),e(MF,xfr),e(q,$fr),e(q,EF),e(EF,Jbe),e(Jbe,kfr),e(EF,Sfr),e(EF,PW),e(PW,Rfr),e(EF,Pfr),e(q,Bfr),e(q,CF),e(CF,Ybe),e(Ybe,Ifr),e(CF,Nfr),e(CF,BW),e(BW,qfr),e(CF,jfr),e(q,Dfr),e(q,wF),e(wF,Kbe),e(Kbe,Gfr),e(wF,Ofr),e(wF,IW),e(IW,Vfr),e(wF,Xfr),e(q,zfr),e(q,AF),e(AF,Zbe),e(Zbe,Wfr),e(AF,Qfr),e(AF,NW),e(NW,Hfr),e(AF,Ufr),e(q,Jfr),e(q,yF),e(yF,e2e),e(e2e,Yfr),e(yF,Kfr),e(yF,qW),e(qW,Zfr),e(yF,emr),e(q,omr),e(q,LF),e(LF,o2e),e(o2e,rmr),e(LF,tmr),e(LF,jW),e(jW,amr),e(LF,nmr),e(q,smr),e(q,xF),e(xF,r2e),e(r2e,lmr),e(xF,imr),e(xF,DW),e(DW,dmr),e(xF,cmr),e(q,fmr),e(q,$F),e($F,t2e),e(t2e,mmr),e($F,gmr),e($F,GW),e(GW,hmr),e($F,pmr),e(q,_mr),e(q,kF),e(kF,a2e),e(a2e,umr),e(kF,bmr),e(kF,OW),e(OW,vmr),e(kF,Fmr),e(q,Tmr),e(q,SF),e(SF,n2e),e(n2e,Mmr),e(SF,Emr),e(SF,VW),e(VW,Cmr),e(SF,wmr),e(q,Amr),e(q,RF),e(RF,s2e),e(s2e,ymr),e(RF,Lmr),e(RF,XW),e(XW,xmr),e(RF,$mr),e(q,kmr),e(q,PF),e(PF,l2e),e(l2e,Smr),e(PF,Rmr),e(PF,zW),e(zW,Pmr),e(PF,Bmr),e(q,Imr),e(q,BF),e(BF,i2e),e(i2e,Nmr),e(BF,qmr),e(BF,WW),e(WW,jmr),e(BF,Dmr),e(q,Gmr),e(q,IF),e(IF,d2e),e(d2e,Omr),e(IF,Vmr),e(IF,QW),e(QW,Xmr),e(IF,zmr),e(q,Wmr),e(q,NF),e(NF,c2e),e(c2e,Qmr),e(NF,Hmr),e(NF,HW),e(HW,Umr),e(NF,Jmr),e(q,Ymr),e(q,qF),e(qF,f2e),e(f2e,Kmr),e(qF,Zmr),e(qF,UW),e(UW,egr),e(qF,ogr),e(q,rgr),e(q,jF),e(jF,m2e),e(m2e,tgr),e(jF,agr),e(jF,JW),e(JW,ngr),e(jF,sgr),e(q,lgr),e(q,DF),e(DF,g2e),e(g2e,igr),e(DF,dgr),e(DF,YW),e(YW,cgr),e(DF,fgr),e(q,mgr),e(q,GF),e(GF,h2e),e(h2e,ggr),e(GF,hgr),e(GF,KW),e(KW,pgr),e(GF,_gr),e(q,ugr),e(q,OF),e(OF,p2e),e(p2e,bgr),e(OF,vgr),e(OF,ZW),e(ZW,Fgr),e(OF,Tgr),e(q,Mgr),e(q,VF),e(VF,_2e),e(_2e,Egr),e(VF,Cgr),e(VF,eQ),e(eQ,wgr),e(VF,Agr),e(q,ygr),e(q,XF),e(XF,u2e),e(u2e,Lgr),e(XF,xgr),e(XF,oQ),e(oQ,$gr),e(XF,kgr),e(q,Sgr),e(q,zF),e(zF,b2e),e(b2e,Rgr),e(zF,Pgr),e(zF,rQ),e(rQ,Bgr),e(zF,Igr),e(q,Ngr),e(q,WF),e(WF,v2e),e(v2e,qgr),e(WF,jgr),e(WF,tQ),e(tQ,Dgr),e(WF,Ggr),e(wr,Ogr),M(QF,wr,null),b(f,gje,u),b(f,Xd,u),e(Xd,HF),e(HF,F2e),M(p7,F2e,null),e(Xd,Vgr),e(Xd,T2e),e(T2e,Xgr),b(f,hje,u),b(f,Ko,u),M(_7,Ko,null),e(Ko,zgr),e(Ko,zd),e(zd,Wgr),e(zd,aQ),e(aQ,Qgr),e(zd,Hgr),e(zd,nQ),e(nQ,Ugr),e(zd,Jgr),e(Ko,Ygr),e(Ko,u7),e(u7,Kgr),e(u7,M2e),e(M2e,Zgr),e(u7,ehr),e(Ko,ohr),e(Ko,Lt),M(b7,Lt,null),e(Lt,rhr),e(Lt,E2e),e(E2e,thr),e(Lt,ahr),e(Lt,Wd),e(Wd,nhr),e(Wd,C2e),e(C2e,shr),e(Wd,lhr),e(Wd,sQ),e(sQ,ihr),e(Wd,dhr),e(Lt,chr),M(UF,Lt,null),e(Ko,fhr),e(Ko,Ar),M(v7,Ar,null),e(Ar,mhr),e(Ar,w2e),e(w2e,ghr),e(Ar,hhr),e(Ar,Za),e(Za,phr),e(Za,A2e),e(A2e,_hr),e(Za,uhr),e(Za,y2e),e(y2e,bhr),e(Za,vhr),e(Za,L2e),e(L2e,Fhr),e(Za,Thr),e(Ar,Mhr),e(Ar,se),e(se,JF),e(JF,x2e),e(x2e,Ehr),e(JF,Chr),e(JF,lQ),e(lQ,whr),e(JF,Ahr),e(se,yhr),e(se,YF),e(YF,$2e),e($2e,Lhr),e(YF,xhr),e(YF,iQ),e(iQ,$hr),e(YF,khr),e(se,Shr),e(se,KF),e(KF,k2e),e(k2e,Rhr),e(KF,Phr),e(KF,dQ),e(dQ,Bhr),e(KF,Ihr),e(se,Nhr),e(se,ZF),e(ZF,S2e),e(S2e,qhr),e(ZF,jhr),e(ZF,cQ),e(cQ,Dhr),e(ZF,Ghr),e(se,Ohr),e(se,e6),e(e6,R2e),e(R2e,Vhr),e(e6,Xhr),e(e6,fQ),e(fQ,zhr),e(e6,Whr),e(se,Qhr),e(se,o6),e(o6,P2e),e(P2e,Hhr),e(o6,Uhr),e(o6,mQ),e(mQ,Jhr),e(o6,Yhr),e(se,Khr),e(se,r6),e(r6,B2e),e(B2e,Zhr),e(r6,epr),e(r6,gQ),e(gQ,opr),e(r6,rpr),e(se,tpr),e(se,t6),e(t6,I2e),e(I2e,apr),e(t6,npr),e(t6,hQ),e(hQ,spr),e(t6,lpr),e(se,ipr),e(se,a6),e(a6,N2e),e(N2e,dpr),e(a6,cpr),e(a6,pQ),e(pQ,fpr),e(a6,mpr),e(se,gpr),e(se,n6),e(n6,q2e),e(q2e,hpr),e(n6,ppr),e(n6,_Q),e(_Q,_pr),e(n6,upr),e(se,bpr),e(se,s6),e(s6,j2e),e(j2e,vpr),e(s6,Fpr),e(s6,uQ),e(uQ,Tpr),e(s6,Mpr),e(se,Epr),e(se,l6),e(l6,D2e),e(D2e,Cpr),e(l6,wpr),e(l6,bQ),e(bQ,Apr),e(l6,ypr),e(se,Lpr),e(se,i6),e(i6,G2e),e(G2e,xpr),e(i6,$pr),e(i6,vQ),e(vQ,kpr),e(i6,Spr),e(se,Rpr),e(se,d6),e(d6,O2e),e(O2e,Ppr),e(d6,Bpr),e(d6,FQ),e(FQ,Ipr),e(d6,Npr),e(se,qpr),e(se,c6),e(c6,V2e),e(V2e,jpr),e(c6,Dpr),e(c6,TQ),e(TQ,Gpr),e(c6,Opr),e(se,Vpr),e(se,f6),e(f6,X2e),e(X2e,Xpr),e(f6,zpr),e(f6,MQ),e(MQ,Wpr),e(f6,Qpr),e(se,Hpr),e(se,m6),e(m6,z2e),e(z2e,Upr),e(m6,Jpr),e(m6,EQ),e(EQ,Ypr),e(m6,Kpr),e(se,Zpr),e(se,g6),e(g6,W2e),e(W2e,e_r),e(g6,o_r),e(g6,CQ),e(CQ,r_r),e(g6,t_r),e(se,a_r),e(se,h6),e(h6,Q2e),e(Q2e,n_r),e(h6,s_r),e(h6,wQ),e(wQ,l_r),e(h6,i_r),e(se,d_r),e(se,p6),e(p6,H2e),e(H2e,c_r),e(p6,f_r),e(p6,AQ),e(AQ,m_r),e(p6,g_r),e(se,h_r),e(se,_6),e(_6,U2e),e(U2e,p_r),e(_6,__r),e(_6,yQ),e(yQ,u_r),e(_6,b_r),e(se,v_r),e(se,u6),e(u6,J2e),e(J2e,F_r),e(u6,T_r),e(u6,LQ),e(LQ,M_r),e(u6,E_r),e(se,C_r),e(se,b6),e(b6,Y2e),e(Y2e,w_r),e(b6,A_r),e(b6,xQ),e(xQ,y_r),e(b6,L_r),e(Ar,x_r),M(v6,Ar,null),b(f,pje,u),b(f,Qd,u),e(Qd,F6),e(F6,K2e),M(F7,K2e,null),e(Qd,$_r),e(Qd,Z2e),e(Z2e,k_r),b(f,_je,u),b(f,Zo,u),M(T7,Zo,null),e(Zo,S_r),e(Zo,Hd),e(Hd,R_r),e(Hd,$Q),e($Q,P_r),e(Hd,B_r),e(Hd,kQ),e(kQ,I_r),e(Hd,N_r),e(Zo,q_r),e(Zo,M7),e(M7,j_r),e(M7,e4e),e(e4e,D_r),e(M7,G_r),e(Zo,O_r),e(Zo,xt),M(E7,xt,null),e(xt,V_r),e(xt,o4e),e(o4e,X_r),e(xt,z_r),e(xt,Ud),e(Ud,W_r),e(Ud,r4e),e(r4e,Q_r),e(Ud,H_r),e(Ud,SQ),e(SQ,U_r),e(Ud,J_r),e(xt,Y_r),M(T6,xt,null),e(Zo,K_r),e(Zo,yr),M(C7,yr,null),e(yr,Z_r),e(yr,t4e),e(t4e,eur),e(yr,our),e(yr,en),e(en,rur),e(en,a4e),e(a4e,tur),e(en,aur),e(en,n4e),e(n4e,nur),e(en,sur),e(en,s4e),e(s4e,lur),e(en,iur),e(yr,dur),e(yr,Te),e(Te,M6),e(M6,l4e),e(l4e,cur),e(M6,fur),e(M6,RQ),e(RQ,mur),e(M6,gur),e(Te,hur),e(Te,E6),e(E6,i4e),e(i4e,pur),e(E6,_ur),e(E6,PQ),e(PQ,uur),e(E6,bur),e(Te,vur),e(Te,C6),e(C6,d4e),e(d4e,Fur),e(C6,Tur),e(C6,BQ),e(BQ,Mur),e(C6,Eur),e(Te,Cur),e(Te,w6),e(w6,c4e),e(c4e,wur),e(w6,Aur),e(w6,IQ),e(IQ,yur),e(w6,Lur),e(Te,xur),e(Te,A6),e(A6,f4e),e(f4e,$ur),e(A6,kur),e(A6,NQ),e(NQ,Sur),e(A6,Rur),e(Te,Pur),e(Te,y6),e(y6,m4e),e(m4e,Bur),e(y6,Iur),e(y6,qQ),e(qQ,Nur),e(y6,qur),e(Te,jur),e(Te,L6),e(L6,g4e),e(g4e,Dur),e(L6,Gur),e(L6,jQ),e(jQ,Our),e(L6,Vur),e(Te,Xur),e(Te,x6),e(x6,h4e),e(h4e,zur),e(x6,Wur),e(x6,DQ),e(DQ,Qur),e(x6,Hur),e(Te,Uur),e(Te,$6),e($6,p4e),e(p4e,Jur),e($6,Yur),e($6,GQ),e(GQ,Kur),e($6,Zur),e(Te,e1r),e(Te,k6),e(k6,_4e),e(_4e,o1r),e(k6,r1r),e(k6,OQ),e(OQ,t1r),e(k6,a1r),e(Te,n1r),e(Te,S6),e(S6,u4e),e(u4e,s1r),e(S6,l1r),e(S6,VQ),e(VQ,i1r),e(S6,d1r),e(Te,c1r),e(Te,R6),e(R6,b4e),e(b4e,f1r),e(R6,m1r),e(R6,XQ),e(XQ,g1r),e(R6,h1r),e(Te,p1r),e(Te,P6),e(P6,v4e),e(v4e,_1r),e(P6,u1r),e(P6,zQ),e(zQ,b1r),e(P6,v1r),e(yr,F1r),M(B6,yr,null),b(f,uje,u),b(f,Jd,u),e(Jd,I6),e(I6,F4e),M(w7,F4e,null),e(Jd,T1r),e(Jd,T4e),e(T4e,M1r),b(f,bje,u),b(f,er,u),M(A7,er,null),e(er,E1r),e(er,Yd),e(Yd,C1r),e(Yd,WQ),e(WQ,w1r),e(Yd,A1r),e(Yd,QQ),e(QQ,y1r),e(Yd,L1r),e(er,x1r),e(er,y7),e(y7,$1r),e(y7,M4e),e(M4e,k1r),e(y7,S1r),e(er,R1r),e(er,$t),M(L7,$t,null),e($t,P1r),e($t,E4e),e(E4e,B1r),e($t,I1r),e($t,Kd),e(Kd,N1r),e(Kd,C4e),e(C4e,q1r),e(Kd,j1r),e(Kd,HQ),e(HQ,D1r),e(Kd,G1r),e($t,O1r),M(N6,$t,null),e(er,V1r),e(er,Lr),M(x7,Lr,null),e(Lr,X1r),e(Lr,w4e),e(w4e,z1r),e(Lr,W1r),e(Lr,on),e(on,Q1r),e(on,A4e),e(A4e,H1r),e(on,U1r),e(on,y4e),e(y4e,J1r),e(on,Y1r),e(on,L4e),e(L4e,K1r),e(on,Z1r),e(Lr,ebr),e(Lr,rn),e(rn,q6),e(q6,x4e),e(x4e,obr),e(q6,rbr),e(q6,UQ),e(UQ,tbr),e(q6,abr),e(rn,nbr),e(rn,j6),e(j6,$4e),e($4e,sbr),e(j6,lbr),e(j6,JQ),e(JQ,ibr),e(j6,dbr),e(rn,cbr),e(rn,D6),e(D6,k4e),e(k4e,fbr),e(D6,mbr),e(D6,YQ),e(YQ,gbr),e(D6,hbr),e(rn,pbr),e(rn,G6),e(G6,S4e),e(S4e,_br),e(G6,ubr),e(G6,KQ),e(KQ,bbr),e(G6,vbr),e(Lr,Fbr),M(O6,Lr,null),b(f,vje,u),b(f,Zd,u),e(Zd,V6),e(V6,R4e),M($7,R4e,null),e(Zd,Tbr),e(Zd,P4e),e(P4e,Mbr),b(f,Fje,u),b(f,or,u),M(k7,or,null),e(or,Ebr),e(or,ec),e(ec,Cbr),e(ec,ZQ),e(ZQ,wbr),e(ec,Abr),e(ec,eH),e(eH,ybr),e(ec,Lbr),e(or,xbr),e(or,S7),e(S7,$br),e(S7,B4e),e(B4e,kbr),e(S7,Sbr),e(or,Rbr),e(or,kt),M(R7,kt,null),e(kt,Pbr),e(kt,I4e),e(I4e,Bbr),e(kt,Ibr),e(kt,oc),e(oc,Nbr),e(oc,N4e),e(N4e,qbr),e(oc,jbr),e(oc,oH),e(oH,Dbr),e(oc,Gbr),e(kt,Obr),M(X6,kt,null),e(or,Vbr),e(or,xr),M(P7,xr,null),e(xr,Xbr),e(xr,q4e),e(q4e,zbr),e(xr,Wbr),e(xr,tn),e(tn,Qbr),e(tn,j4e),e(j4e,Hbr),e(tn,Ubr),e(tn,D4e),e(D4e,Jbr),e(tn,Ybr),e(tn,G4e),e(G4e,Kbr),e(tn,Zbr),e(xr,e2r),e(xr,ie),e(ie,z6),e(z6,O4e),e(O4e,o2r),e(z6,r2r),e(z6,rH),e(rH,t2r),e(z6,a2r),e(ie,n2r),e(ie,W6),e(W6,V4e),e(V4e,s2r),e(W6,l2r),e(W6,tH),e(tH,i2r),e(W6,d2r),e(ie,c2r),e(ie,Q6),e(Q6,X4e),e(X4e,f2r),e(Q6,m2r),e(Q6,aH),e(aH,g2r),e(Q6,h2r),e(ie,p2r),e(ie,H6),e(H6,z4e),e(z4e,_2r),e(H6,u2r),e(H6,nH),e(nH,b2r),e(H6,v2r),e(ie,F2r),e(ie,U6),e(U6,W4e),e(W4e,T2r),e(U6,M2r),e(U6,sH),e(sH,E2r),e(U6,C2r),e(ie,w2r),e(ie,J6),e(J6,Q4e),e(Q4e,A2r),e(J6,y2r),e(J6,lH),e(lH,L2r),e(J6,x2r),e(ie,$2r),e(ie,Y6),e(Y6,H4e),e(H4e,k2r),e(Y6,S2r),e(Y6,iH),e(iH,R2r),e(Y6,P2r),e(ie,B2r),e(ie,K6),e(K6,U4e),e(U4e,I2r),e(K6,N2r),e(K6,dH),e(dH,q2r),e(K6,j2r),e(ie,D2r),e(ie,Z6),e(Z6,J4e),e(J4e,G2r),e(Z6,O2r),e(Z6,cH),e(cH,V2r),e(Z6,X2r),e(ie,z2r),e(ie,eT),e(eT,Y4e),e(Y4e,W2r),e(eT,Q2r),e(eT,fH),e(fH,H2r),e(eT,U2r),e(ie,J2r),e(ie,oT),e(oT,K4e),e(K4e,Y2r),e(oT,K2r),e(oT,mH),e(mH,Z2r),e(oT,e4r),e(ie,o4r),e(ie,rT),e(rT,Z4e),e(Z4e,r4r),e(rT,t4r),e(rT,gH),e(gH,a4r),e(rT,n4r),e(ie,s4r),e(ie,tT),e(tT,e5e),e(e5e,l4r),e(tT,i4r),e(tT,hH),e(hH,d4r),e(tT,c4r),e(ie,f4r),e(ie,aT),e(aT,o5e),e(o5e,m4r),e(aT,g4r),e(aT,pH),e(pH,h4r),e(aT,p4r),e(ie,_4r),e(ie,nT),e(nT,r5e),e(r5e,u4r),e(nT,b4r),e(nT,_H),e(_H,v4r),e(nT,F4r),e(ie,T4r),e(ie,sT),e(sT,t5e),e(t5e,M4r),e(sT,E4r),e(sT,uH),e(uH,C4r),e(sT,w4r),e(ie,A4r),e(ie,lT),e(lT,a5e),e(a5e,y4r),e(lT,L4r),e(lT,bH),e(bH,x4r),e(lT,$4r),e(ie,k4r),e(ie,iT),e(iT,n5e),e(n5e,S4r),e(iT,R4r),e(iT,vH),e(vH,P4r),e(iT,B4r),e(ie,I4r),e(ie,dT),e(dT,s5e),e(s5e,N4r),e(dT,q4r),e(dT,FH),e(FH,j4r),e(dT,D4r),e(ie,G4r),e(ie,cT),e(cT,l5e),e(l5e,O4r),e(cT,V4r),e(cT,TH),e(TH,X4r),e(cT,z4r),e(xr,W4r),M(fT,xr,null),b(f,Tje,u),b(f,rc,u),e(rc,mT),e(mT,i5e),M(B7,i5e,null),e(rc,Q4r),e(rc,d5e),e(d5e,H4r),b(f,Mje,u),b(f,rr,u),M(I7,rr,null),e(rr,U4r),e(rr,tc),e(tc,J4r),e(tc,MH),e(MH,Y4r),e(tc,K4r),e(tc,EH),e(EH,Z4r),e(tc,e5r),e(rr,o5r),e(rr,N7),e(N7,r5r),e(N7,c5e),e(c5e,t5r),e(N7,a5r),e(rr,n5r),e(rr,St),M(q7,St,null),e(St,s5r),e(St,f5e),e(f5e,l5r),e(St,i5r),e(St,ac),e(ac,d5r),e(ac,m5e),e(m5e,c5r),e(ac,f5r),e(ac,CH),e(CH,m5r),e(ac,g5r),e(St,h5r),M(gT,St,null),e(rr,p5r),e(rr,$r),M(j7,$r,null),e($r,_5r),e($r,g5e),e(g5e,u5r),e($r,b5r),e($r,an),e(an,v5r),e(an,h5e),e(h5e,F5r),e(an,T5r),e(an,p5e),e(p5e,M5r),e(an,E5r),e(an,_5e),e(_5e,C5r),e(an,w5r),e($r,A5r),e($r,ye),e(ye,hT),e(hT,u5e),e(u5e,y5r),e(hT,L5r),e(hT,wH),e(wH,x5r),e(hT,$5r),e(ye,k5r),e(ye,pT),e(pT,b5e),e(b5e,S5r),e(pT,R5r),e(pT,AH),e(AH,P5r),e(pT,B5r),e(ye,I5r),e(ye,_T),e(_T,v5e),e(v5e,N5r),e(_T,q5r),e(_T,yH),e(yH,j5r),e(_T,D5r),e(ye,G5r),e(ye,uT),e(uT,F5e),e(F5e,O5r),e(uT,V5r),e(uT,LH),e(LH,X5r),e(uT,z5r),e(ye,W5r),e(ye,bT),e(bT,T5e),e(T5e,Q5r),e(bT,H5r),e(bT,xH),e(xH,U5r),e(bT,J5r),e(ye,Y5r),e(ye,vT),e(vT,M5e),e(M5e,K5r),e(vT,Z5r),e(vT,$H),e($H,evr),e(vT,ovr),e(ye,rvr),e(ye,FT),e(FT,E5e),e(E5e,tvr),e(FT,avr),e(FT,kH),e(kH,nvr),e(FT,svr),e(ye,lvr),e(ye,TT),e(TT,C5e),e(C5e,ivr),e(TT,dvr),e(TT,SH),e(SH,cvr),e(TT,fvr),e(ye,mvr),e(ye,MT),e(MT,w5e),e(w5e,gvr),e(MT,hvr),e(MT,RH),e(RH,pvr),e(MT,_vr),e(ye,uvr),e(ye,ET),e(ET,A5e),e(A5e,bvr),e(ET,vvr),e(ET,PH),e(PH,Fvr),e(ET,Tvr),e($r,Mvr),M(CT,$r,null),b(f,Eje,u),b(f,nc,u),e(nc,wT),e(wT,y5e),M(D7,y5e,null),e(nc,Evr),e(nc,L5e),e(L5e,Cvr),b(f,Cje,u),b(f,tr,u),M(G7,tr,null),e(tr,wvr),e(tr,sc),e(sc,Avr),e(sc,BH),e(BH,yvr),e(sc,Lvr),e(sc,IH),e(IH,xvr),e(sc,$vr),e(tr,kvr),e(tr,O7),e(O7,Svr),e(O7,x5e),e(x5e,Rvr),e(O7,Pvr),e(tr,Bvr),e(tr,Rt),M(V7,Rt,null),e(Rt,Ivr),e(Rt,$5e),e($5e,Nvr),e(Rt,qvr),e(Rt,lc),e(lc,jvr),e(lc,k5e),e(k5e,Dvr),e(lc,Gvr),e(lc,NH),e(NH,Ovr),e(lc,Vvr),e(Rt,Xvr),M(AT,Rt,null),e(tr,zvr),e(tr,kr),M(X7,kr,null),e(kr,Wvr),e(kr,S5e),e(S5e,Qvr),e(kr,Hvr),e(kr,nn),e(nn,Uvr),e(nn,R5e),e(R5e,Jvr),e(nn,Yvr),e(nn,P5e),e(P5e,Kvr),e(nn,Zvr),e(nn,B5e),e(B5e,e3r),e(nn,o3r),e(kr,r3r),e(kr,oe),e(oe,yT),e(yT,I5e),e(I5e,t3r),e(yT,a3r),e(yT,qH),e(qH,n3r),e(yT,s3r),e(oe,l3r),e(oe,LT),e(LT,N5e),e(N5e,i3r),e(LT,d3r),e(LT,jH),e(jH,c3r),e(LT,f3r),e(oe,m3r),e(oe,xT),e(xT,q5e),e(q5e,g3r),e(xT,h3r),e(xT,DH),e(DH,p3r),e(xT,_3r),e(oe,u3r),e(oe,$T),e($T,j5e),e(j5e,b3r),e($T,v3r),e($T,GH),e(GH,F3r),e($T,T3r),e(oe,M3r),e(oe,kT),e(kT,D5e),e(D5e,E3r),e(kT,C3r),e(kT,OH),e(OH,w3r),e(kT,A3r),e(oe,y3r),e(oe,ST),e(ST,G5e),e(G5e,L3r),e(ST,x3r),e(ST,VH),e(VH,$3r),e(ST,k3r),e(oe,S3r),e(oe,RT),e(RT,O5e),e(O5e,R3r),e(RT,P3r),e(RT,XH),e(XH,B3r),e(RT,I3r),e(oe,N3r),e(oe,PT),e(PT,V5e),e(V5e,q3r),e(PT,j3r),e(PT,zH),e(zH,D3r),e(PT,G3r),e(oe,O3r),e(oe,BT),e(BT,X5e),e(X5e,V3r),e(BT,X3r),e(BT,WH),e(WH,z3r),e(BT,W3r),e(oe,Q3r),e(oe,IT),e(IT,z5e),e(z5e,H3r),e(IT,U3r),e(IT,QH),e(QH,J3r),e(IT,Y3r),e(oe,K3r),e(oe,NT),e(NT,W5e),e(W5e,Z3r),e(NT,eFr),e(NT,HH),e(HH,oFr),e(NT,rFr),e(oe,tFr),e(oe,qT),e(qT,Q5e),e(Q5e,aFr),e(qT,nFr),e(qT,UH),e(UH,sFr),e(qT,lFr),e(oe,iFr),e(oe,jT),e(jT,H5e),e(H5e,dFr),e(jT,cFr),e(jT,JH),e(JH,fFr),e(jT,mFr),e(oe,gFr),e(oe,DT),e(DT,U5e),e(U5e,hFr),e(DT,pFr),e(DT,YH),e(YH,_Fr),e(DT,uFr),e(oe,bFr),e(oe,GT),e(GT,J5e),e(J5e,vFr),e(GT,FFr),e(GT,KH),e(KH,TFr),e(GT,MFr),e(oe,EFr),e(oe,OT),e(OT,Y5e),e(Y5e,CFr),e(OT,wFr),e(OT,ZH),e(ZH,AFr),e(OT,yFr),e(oe,LFr),e(oe,VT),e(VT,K5e),e(K5e,xFr),e(VT,$Fr),e(VT,eU),e(eU,kFr),e(VT,SFr),e(oe,RFr),e(oe,XT),e(XT,Z5e),e(Z5e,PFr),e(XT,BFr),e(XT,oU),e(oU,IFr),e(XT,NFr),e(oe,qFr),e(oe,zT),e(zT,eve),e(eve,jFr),e(zT,DFr),e(zT,rU),e(rU,GFr),e(zT,OFr),e(oe,VFr),e(oe,WT),e(WT,ove),e(ove,XFr),e(WT,zFr),e(WT,tU),e(tU,WFr),e(WT,QFr),e(oe,HFr),e(oe,QT),e(QT,rve),e(rve,UFr),e(QT,JFr),e(QT,aU),e(aU,YFr),e(QT,KFr),e(oe,ZFr),e(oe,HT),e(HT,tve),e(tve,e6r),e(HT,o6r),e(HT,nU),e(nU,r6r),e(HT,t6r),e(oe,a6r),e(oe,UT),e(UT,ave),e(ave,n6r),e(UT,s6r),e(UT,sU),e(sU,l6r),e(UT,i6r),e(oe,d6r),e(oe,JT),e(JT,nve),e(nve,c6r),e(JT,f6r),e(JT,lU),e(lU,m6r),e(JT,g6r),e(oe,h6r),e(oe,YT),e(YT,sve),e(sve,p6r),e(YT,_6r),e(YT,iU),e(iU,u6r),e(YT,b6r),e(oe,v6r),e(oe,KT),e(KT,lve),e(lve,F6r),e(KT,T6r),e(KT,dU),e(dU,M6r),e(KT,E6r),e(kr,C6r),M(ZT,kr,null),b(f,wje,u),b(f,ic,u),e(ic,eM),e(eM,ive),M(z7,ive,null),e(ic,w6r),e(ic,dve),e(dve,A6r),b(f,Aje,u),b(f,ar,u),M(W7,ar,null),e(ar,y6r),e(ar,dc),e(dc,L6r),e(dc,cU),e(cU,x6r),e(dc,$6r),e(dc,fU),e(fU,k6r),e(dc,S6r),e(ar,R6r),e(ar,Q7),e(Q7,P6r),e(Q7,cve),e(cve,B6r),e(Q7,I6r),e(ar,N6r),e(ar,Pt),M(H7,Pt,null),e(Pt,q6r),e(Pt,fve),e(fve,j6r),e(Pt,D6r),e(Pt,cc),e(cc,G6r),e(cc,mve),e(mve,O6r),e(cc,V6r),e(cc,mU),e(mU,X6r),e(cc,z6r),e(Pt,W6r),M(oM,Pt,null),e(ar,Q6r),e(ar,Sr),M(U7,Sr,null),e(Sr,H6r),e(Sr,gve),e(gve,U6r),e(Sr,J6r),e(Sr,sn),e(sn,Y6r),e(sn,hve),e(hve,K6r),e(sn,Z6r),e(sn,pve),e(pve,eTr),e(sn,oTr),e(sn,_ve),e(_ve,rTr),e(sn,tTr),e(Sr,aTr),e(Sr,pe),e(pe,rM),e(rM,uve),e(uve,nTr),e(rM,sTr),e(rM,gU),e(gU,lTr),e(rM,iTr),e(pe,dTr),e(pe,tM),e(tM,bve),e(bve,cTr),e(tM,fTr),e(tM,hU),e(hU,mTr),e(tM,gTr),e(pe,hTr),e(pe,aM),e(aM,vve),e(vve,pTr),e(aM,_Tr),e(aM,pU),e(pU,uTr),e(aM,bTr),e(pe,vTr),e(pe,nM),e(nM,Fve),e(Fve,FTr),e(nM,TTr),e(nM,_U),e(_U,MTr),e(nM,ETr),e(pe,CTr),e(pe,sM),e(sM,Tve),e(Tve,wTr),e(sM,ATr),e(sM,uU),e(uU,yTr),e(sM,LTr),e(pe,xTr),e(pe,lM),e(lM,Mve),e(Mve,$Tr),e(lM,kTr),e(lM,bU),e(bU,STr),e(lM,RTr),e(pe,PTr),e(pe,iM),e(iM,Eve),e(Eve,BTr),e(iM,ITr),e(iM,vU),e(vU,NTr),e(iM,qTr),e(pe,jTr),e(pe,dM),e(dM,Cve),e(Cve,DTr),e(dM,GTr),e(dM,FU),e(FU,OTr),e(dM,VTr),e(pe,XTr),e(pe,cM),e(cM,wve),e(wve,zTr),e(cM,WTr),e(cM,TU),e(TU,QTr),e(cM,HTr),e(pe,UTr),e(pe,fM),e(fM,Ave),e(Ave,JTr),e(fM,YTr),e(fM,MU),e(MU,KTr),e(fM,ZTr),e(pe,eMr),e(pe,mM),e(mM,yve),e(yve,oMr),e(mM,rMr),e(mM,EU),e(EU,tMr),e(mM,aMr),e(pe,nMr),e(pe,gM),e(gM,Lve),e(Lve,sMr),e(gM,lMr),e(gM,CU),e(CU,iMr),e(gM,dMr),e(pe,cMr),e(pe,hM),e(hM,xve),e(xve,fMr),e(hM,mMr),e(hM,wU),e(wU,gMr),e(hM,hMr),e(pe,pMr),e(pe,pM),e(pM,$ve),e($ve,_Mr),e(pM,uMr),e(pM,AU),e(AU,bMr),e(pM,vMr),e(pe,FMr),e(pe,_M),e(_M,kve),e(kve,TMr),e(_M,MMr),e(_M,yU),e(yU,EMr),e(_M,CMr),e(pe,wMr),e(pe,uM),e(uM,Sve),e(Sve,AMr),e(uM,yMr),e(uM,LU),e(LU,LMr),e(uM,xMr),e(pe,$Mr),e(pe,bM),e(bM,Rve),e(Rve,kMr),e(bM,SMr),e(bM,xU),e(xU,RMr),e(bM,PMr),e(Sr,BMr),M(vM,Sr,null),b(f,yje,u),b(f,fc,u),e(fc,FM),e(FM,Pve),M(J7,Pve,null),e(fc,IMr),e(fc,Bve),e(Bve,NMr),b(f,Lje,u),b(f,nr,u),M(Y7,nr,null),e(nr,qMr),e(nr,mc),e(mc,jMr),e(mc,$U),e($U,DMr),e(mc,GMr),e(mc,kU),e(kU,OMr),e(mc,VMr),e(nr,XMr),e(nr,K7),e(K7,zMr),e(K7,Ive),e(Ive,WMr),e(K7,QMr),e(nr,HMr),e(nr,Bt),M(Z7,Bt,null),e(Bt,UMr),e(Bt,Nve),e(Nve,JMr),e(Bt,YMr),e(Bt,gc),e(gc,KMr),e(gc,qve),e(qve,ZMr),e(gc,eEr),e(gc,SU),e(SU,oEr),e(gc,rEr),e(Bt,tEr),M(TM,Bt,null),e(nr,aEr),e(nr,Rr),M(e9,Rr,null),e(Rr,nEr),e(Rr,jve),e(jve,sEr),e(Rr,lEr),e(Rr,ln),e(ln,iEr),e(ln,Dve),e(Dve,dEr),e(ln,cEr),e(ln,Gve),e(Gve,fEr),e(ln,mEr),e(ln,Ove),e(Ove,gEr),e(ln,hEr),e(Rr,pEr),e(Rr,o9),e(o9,MM),e(MM,Vve),e(Vve,_Er),e(MM,uEr),e(MM,RU),e(RU,bEr),e(MM,vEr),e(o9,FEr),e(o9,EM),e(EM,Xve),e(Xve,TEr),e(EM,MEr),e(EM,PU),e(PU,EEr),e(EM,CEr),e(Rr,wEr),M(CM,Rr,null),b(f,xje,u),b(f,hc,u),e(hc,wM),e(wM,zve),M(r9,zve,null),e(hc,AEr),e(hc,Wve),e(Wve,yEr),b(f,$je,u),b(f,sr,u),M(t9,sr,null),e(sr,LEr),e(sr,pc),e(pc,xEr),e(pc,BU),e(BU,$Er),e(pc,kEr),e(pc,IU),e(IU,SEr),e(pc,REr),e(sr,PEr),e(sr,a9),e(a9,BEr),e(a9,Qve),e(Qve,IEr),e(a9,NEr),e(sr,qEr),e(sr,It),M(n9,It,null),e(It,jEr),e(It,Hve),e(Hve,DEr),e(It,GEr),e(It,_c),e(_c,OEr),e(_c,Uve),e(Uve,VEr),e(_c,XEr),e(_c,NU),e(NU,zEr),e(_c,WEr),e(It,QEr),M(AM,It,null),e(sr,HEr),e(sr,Pr),M(s9,Pr,null),e(Pr,UEr),e(Pr,Jve),e(Jve,JEr),e(Pr,YEr),e(Pr,dn),e(dn,KEr),e(dn,Yve),e(Yve,ZEr),e(dn,eCr),e(dn,Kve),e(Kve,oCr),e(dn,rCr),e(dn,Zve),e(Zve,tCr),e(dn,aCr),e(Pr,nCr),e(Pr,e3e),e(e3e,yM),e(yM,o3e),e(o3e,sCr),e(yM,lCr),e(yM,qU),e(qU,iCr),e(yM,dCr),e(Pr,cCr),M(LM,Pr,null),b(f,kje,u),b(f,uc,u),e(uc,xM),e(xM,r3e),M(l9,r3e,null),e(uc,fCr),e(uc,t3e),e(t3e,mCr),b(f,Sje,u),b(f,lr,u),M(i9,lr,null),e(lr,gCr),e(lr,bc),e(bc,hCr),e(bc,jU),e(jU,pCr),e(bc,_Cr),e(bc,DU),e(DU,uCr),e(bc,bCr),e(lr,vCr),e(lr,d9),e(d9,FCr),e(d9,a3e),e(a3e,TCr),e(d9,MCr),e(lr,ECr),e(lr,Nt),M(c9,Nt,null),e(Nt,CCr),e(Nt,n3e),e(n3e,wCr),e(Nt,ACr),e(Nt,vc),e(vc,yCr),e(vc,s3e),e(s3e,LCr),e(vc,xCr),e(vc,GU),e(GU,$Cr),e(vc,kCr),e(Nt,SCr),M($M,Nt,null),e(lr,RCr),e(lr,Br),M(f9,Br,null),e(Br,PCr),e(Br,l3e),e(l3e,BCr),e(Br,ICr),e(Br,cn),e(cn,NCr),e(cn,i3e),e(i3e,qCr),e(cn,jCr),e(cn,d3e),e(d3e,DCr),e(cn,GCr),e(cn,c3e),e(c3e,OCr),e(cn,VCr),e(Br,XCr),e(Br,de),e(de,kM),e(kM,f3e),e(f3e,zCr),e(kM,WCr),e(kM,OU),e(OU,QCr),e(kM,HCr),e(de,UCr),e(de,SM),e(SM,m3e),e(m3e,JCr),e(SM,YCr),e(SM,VU),e(VU,KCr),e(SM,ZCr),e(de,ewr),e(de,RM),e(RM,g3e),e(g3e,owr),e(RM,rwr),e(RM,XU),e(XU,twr),e(RM,awr),e(de,nwr),e(de,PM),e(PM,h3e),e(h3e,swr),e(PM,lwr),e(PM,zU),e(zU,iwr),e(PM,dwr),e(de,cwr),e(de,BM),e(BM,p3e),e(p3e,fwr),e(BM,mwr),e(BM,WU),e(WU,gwr),e(BM,hwr),e(de,pwr),e(de,IM),e(IM,_3e),e(_3e,_wr),e(IM,uwr),e(IM,QU),e(QU,bwr),e(IM,vwr),e(de,Fwr),e(de,NM),e(NM,u3e),e(u3e,Twr),e(NM,Mwr),e(NM,HU),e(HU,Ewr),e(NM,Cwr),e(de,wwr),e(de,qM),e(qM,b3e),e(b3e,Awr),e(qM,ywr),e(qM,UU),e(UU,Lwr),e(qM,xwr),e(de,$wr),e(de,jM),e(jM,v3e),e(v3e,kwr),e(jM,Swr),e(jM,JU),e(JU,Rwr),e(jM,Pwr),e(de,Bwr),e(de,DM),e(DM,F3e),e(F3e,Iwr),e(DM,Nwr),e(DM,YU),e(YU,qwr),e(DM,jwr),e(de,Dwr),e(de,GM),e(GM,T3e),e(T3e,Gwr),e(GM,Owr),e(GM,KU),e(KU,Vwr),e(GM,Xwr),e(de,zwr),e(de,OM),e(OM,M3e),e(M3e,Wwr),e(OM,Qwr),e(OM,ZU),e(ZU,Hwr),e(OM,Uwr),e(de,Jwr),e(de,VM),e(VM,E3e),e(E3e,Ywr),e(VM,Kwr),e(VM,eJ),e(eJ,Zwr),e(VM,e0r),e(de,o0r),e(de,XM),e(XM,C3e),e(C3e,r0r),e(XM,t0r),e(XM,oJ),e(oJ,a0r),e(XM,n0r),e(de,s0r),e(de,zM),e(zM,w3e),e(w3e,l0r),e(zM,i0r),e(zM,rJ),e(rJ,d0r),e(zM,c0r),e(de,f0r),e(de,WM),e(WM,A3e),e(A3e,m0r),e(WM,g0r),e(WM,tJ),e(tJ,h0r),e(WM,p0r),e(de,_0r),e(de,QM),e(QM,y3e),e(y3e,u0r),e(QM,b0r),e(QM,aJ),e(aJ,v0r),e(QM,F0r),e(de,T0r),e(de,HM),e(HM,L3e),e(L3e,M0r),e(HM,E0r),e(HM,nJ),e(nJ,C0r),e(HM,w0r),e(de,A0r),e(de,UM),e(UM,x3e),e(x3e,y0r),e(UM,L0r),e(UM,sJ),e(sJ,x0r),e(UM,$0r),e(de,k0r),e(de,JM),e(JM,$3e),e($3e,S0r),e(JM,R0r),e(JM,lJ),e(lJ,P0r),e(JM,B0r),e(Br,I0r),M(YM,Br,null),b(f,Rje,u),b(f,Fc,u),e(Fc,KM),e(KM,k3e),M(m9,k3e,null),e(Fc,N0r),e(Fc,S3e),e(S3e,q0r),b(f,Pje,u),b(f,ir,u),M(g9,ir,null),e(ir,j0r),e(ir,Tc),e(Tc,D0r),e(Tc,iJ),e(iJ,G0r),e(Tc,O0r),e(Tc,dJ),e(dJ,V0r),e(Tc,X0r),e(ir,z0r),e(ir,h9),e(h9,W0r),e(h9,R3e),e(R3e,Q0r),e(h9,H0r),e(ir,U0r),e(ir,qt),M(p9,qt,null),e(qt,J0r),e(qt,P3e),e(P3e,Y0r),e(qt,K0r),e(qt,Mc),e(Mc,Z0r),e(Mc,B3e),e(B3e,eAr),e(Mc,oAr),e(Mc,cJ),e(cJ,rAr),e(Mc,tAr),e(qt,aAr),M(ZM,qt,null),e(ir,nAr),e(ir,Ir),M(_9,Ir,null),e(Ir,sAr),e(Ir,I3e),e(I3e,lAr),e(Ir,iAr),e(Ir,fn),e(fn,dAr),e(fn,N3e),e(N3e,cAr),e(fn,fAr),e(fn,q3e),e(q3e,mAr),e(fn,gAr),e(fn,j3e),e(j3e,hAr),e(fn,pAr),e(Ir,_Ar),e(Ir,ce),e(ce,eE),e(eE,D3e),e(D3e,uAr),e(eE,bAr),e(eE,fJ),e(fJ,vAr),e(eE,FAr),e(ce,TAr),e(ce,oE),e(oE,G3e),e(G3e,MAr),e(oE,EAr),e(oE,mJ),e(mJ,CAr),e(oE,wAr),e(ce,AAr),e(ce,rE),e(rE,O3e),e(O3e,yAr),e(rE,LAr),e(rE,gJ),e(gJ,xAr),e(rE,$Ar),e(ce,kAr),e(ce,tE),e(tE,V3e),e(V3e,SAr),e(tE,RAr),e(tE,hJ),e(hJ,PAr),e(tE,BAr),e(ce,IAr),e(ce,aE),e(aE,X3e),e(X3e,NAr),e(aE,qAr),e(aE,pJ),e(pJ,jAr),e(aE,DAr),e(ce,GAr),e(ce,nE),e(nE,z3e),e(z3e,OAr),e(nE,VAr),e(nE,_J),e(_J,XAr),e(nE,zAr),e(ce,WAr),e(ce,sE),e(sE,W3e),e(W3e,QAr),e(sE,HAr),e(sE,uJ),e(uJ,UAr),e(sE,JAr),e(ce,YAr),e(ce,lE),e(lE,Q3e),e(Q3e,KAr),e(lE,ZAr),e(lE,bJ),e(bJ,eyr),e(lE,oyr),e(ce,ryr),e(ce,iE),e(iE,H3e),e(H3e,tyr),e(iE,ayr),e(iE,vJ),e(vJ,nyr),e(iE,syr),e(ce,lyr),e(ce,dE),e(dE,U3e),e(U3e,iyr),e(dE,dyr),e(dE,FJ),e(FJ,cyr),e(dE,fyr),e(ce,myr),e(ce,cE),e(cE,J3e),e(J3e,gyr),e(cE,hyr),e(cE,TJ),e(TJ,pyr),e(cE,_yr),e(ce,uyr),e(ce,fE),e(fE,Y3e),e(Y3e,byr),e(fE,vyr),e(fE,MJ),e(MJ,Fyr),e(fE,Tyr),e(ce,Myr),e(ce,mE),e(mE,K3e),e(K3e,Eyr),e(mE,Cyr),e(mE,EJ),e(EJ,wyr),e(mE,Ayr),e(ce,yyr),e(ce,gE),e(gE,Z3e),e(Z3e,Lyr),e(gE,xyr),e(gE,CJ),e(CJ,$yr),e(gE,kyr),e(ce,Syr),e(ce,hE),e(hE,eFe),e(eFe,Ryr),e(hE,Pyr),e(hE,wJ),e(wJ,Byr),e(hE,Iyr),e(ce,Nyr),e(ce,pE),e(pE,oFe),e(oFe,qyr),e(pE,jyr),e(pE,AJ),e(AJ,Dyr),e(pE,Gyr),e(ce,Oyr),e(ce,_E),e(_E,rFe),e(rFe,Vyr),e(_E,Xyr),e(_E,yJ),e(yJ,zyr),e(_E,Wyr),e(ce,Qyr),e(ce,uE),e(uE,tFe),e(tFe,Hyr),e(uE,Uyr),e(uE,LJ),e(LJ,Jyr),e(uE,Yyr),e(ce,Kyr),e(ce,bE),e(bE,aFe),e(aFe,Zyr),e(bE,eLr),e(bE,xJ),e(xJ,oLr),e(bE,rLr),e(ce,tLr),e(ce,vE),e(vE,nFe),e(nFe,aLr),e(vE,nLr),e(vE,$J),e($J,sLr),e(vE,lLr),e(Ir,iLr),M(FE,Ir,null),b(f,Bje,u),b(f,Ec,u),e(Ec,TE),e(TE,sFe),M(u9,sFe,null),e(Ec,dLr),e(Ec,lFe),e(lFe,cLr),b(f,Ije,u),b(f,dr,u),M(b9,dr,null),e(dr,fLr),e(dr,Cc),e(Cc,mLr),e(Cc,kJ),e(kJ,gLr),e(Cc,hLr),e(Cc,SJ),e(SJ,pLr),e(Cc,_Lr),e(dr,uLr),e(dr,v9),e(v9,bLr),e(v9,iFe),e(iFe,vLr),e(v9,FLr),e(dr,TLr),e(dr,jt),M(F9,jt,null),e(jt,MLr),e(jt,dFe),e(dFe,ELr),e(jt,CLr),e(jt,wc),e(wc,wLr),e(wc,cFe),e(cFe,ALr),e(wc,yLr),e(wc,RJ),e(RJ,LLr),e(wc,xLr),e(jt,$Lr),M(ME,jt,null),e(dr,kLr),e(dr,Nr),M(T9,Nr,null),e(Nr,SLr),e(Nr,fFe),e(fFe,RLr),e(Nr,PLr),e(Nr,mn),e(mn,BLr),e(mn,mFe),e(mFe,ILr),e(mn,NLr),e(mn,gFe),e(gFe,qLr),e(mn,jLr),e(mn,hFe),e(hFe,DLr),e(mn,GLr),e(Nr,OLr),e(Nr,pFe),e(pFe,EE),e(EE,_Fe),e(_Fe,VLr),e(EE,XLr),e(EE,PJ),e(PJ,zLr),e(EE,WLr),e(Nr,QLr),M(CE,Nr,null),b(f,Nje,u),b(f,Ac,u),e(Ac,wE),e(wE,uFe),M(M9,uFe,null),e(Ac,HLr),e(Ac,bFe),e(bFe,ULr),b(f,qje,u),b(f,cr,u),M(E9,cr,null),e(cr,JLr),e(cr,yc),e(yc,YLr),e(yc,BJ),e(BJ,KLr),e(yc,ZLr),e(yc,IJ),e(IJ,e8r),e(yc,o8r),e(cr,r8r),e(cr,C9),e(C9,t8r),e(C9,vFe),e(vFe,a8r),e(C9,n8r),e(cr,s8r),e(cr,Dt),M(w9,Dt,null),e(Dt,l8r),e(Dt,FFe),e(FFe,i8r),e(Dt,d8r),e(Dt,Lc),e(Lc,c8r),e(Lc,TFe),e(TFe,f8r),e(Lc,m8r),e(Lc,NJ),e(NJ,g8r),e(Lc,h8r),e(Dt,p8r),M(AE,Dt,null),e(cr,_8r),e(cr,qr),M(A9,qr,null),e(qr,u8r),e(qr,MFe),e(MFe,b8r),e(qr,v8r),e(qr,gn),e(gn,F8r),e(gn,EFe),e(EFe,T8r),e(gn,M8r),e(gn,CFe),e(CFe,E8r),e(gn,C8r),e(gn,wFe),e(wFe,w8r),e(gn,A8r),e(qr,y8r),e(qr,AFe),e(AFe,yE),e(yE,yFe),e(yFe,L8r),e(yE,x8r),e(yE,qJ),e(qJ,$8r),e(yE,k8r),e(qr,S8r),M(LE,qr,null),b(f,jje,u),b(f,xc,u),e(xc,xE),e(xE,LFe),M(y9,LFe,null),e(xc,R8r),e(xc,xFe),e(xFe,P8r),b(f,Dje,u),b(f,fr,u),M(L9,fr,null),e(fr,B8r),e(fr,$c),e($c,I8r),e($c,jJ),e(jJ,N8r),e($c,q8r),e($c,DJ),e(DJ,j8r),e($c,D8r),e(fr,G8r),e(fr,x9),e(x9,O8r),e(x9,$Fe),e($Fe,V8r),e(x9,X8r),e(fr,z8r),e(fr,Gt),M($9,Gt,null),e(Gt,W8r),e(Gt,kFe),e(kFe,Q8r),e(Gt,H8r),e(Gt,kc),e(kc,U8r),e(kc,SFe),e(SFe,J8r),e(kc,Y8r),e(kc,GJ),e(GJ,K8r),e(kc,Z8r),e(Gt,e7r),M($E,Gt,null),e(fr,o7r),e(fr,jr),M(k9,jr,null),e(jr,r7r),e(jr,RFe),e(RFe,t7r),e(jr,a7r),e(jr,hn),e(hn,n7r),e(hn,PFe),e(PFe,s7r),e(hn,l7r),e(hn,BFe),e(BFe,i7r),e(hn,d7r),e(hn,IFe),e(IFe,c7r),e(hn,f7r),e(jr,m7r),e(jr,te),e(te,kE),e(kE,NFe),e(NFe,g7r),e(kE,h7r),e(kE,OJ),e(OJ,p7r),e(kE,_7r),e(te,u7r),e(te,SE),e(SE,qFe),e(qFe,b7r),e(SE,v7r),e(SE,VJ),e(VJ,F7r),e(SE,T7r),e(te,M7r),e(te,RE),e(RE,jFe),e(jFe,E7r),e(RE,C7r),e(RE,XJ),e(XJ,w7r),e(RE,A7r),e(te,y7r),e(te,PE),e(PE,DFe),e(DFe,L7r),e(PE,x7r),e(PE,zJ),e(zJ,$7r),e(PE,k7r),e(te,S7r),e(te,BE),e(BE,GFe),e(GFe,R7r),e(BE,P7r),e(BE,WJ),e(WJ,B7r),e(BE,I7r),e(te,N7r),e(te,IE),e(IE,OFe),e(OFe,q7r),e(IE,j7r),e(IE,QJ),e(QJ,D7r),e(IE,G7r),e(te,O7r),e(te,NE),e(NE,VFe),e(VFe,V7r),e(NE,X7r),e(NE,HJ),e(HJ,z7r),e(NE,W7r),e(te,Q7r),e(te,qE),e(qE,XFe),e(XFe,H7r),e(qE,U7r),e(qE,UJ),e(UJ,J7r),e(qE,Y7r),e(te,K7r),e(te,jE),e(jE,zFe),e(zFe,Z7r),e(jE,e9r),e(jE,JJ),e(JJ,o9r),e(jE,r9r),e(te,t9r),e(te,DE),e(DE,WFe),e(WFe,a9r),e(DE,n9r),e(DE,YJ),e(YJ,s9r),e(DE,l9r),e(te,i9r),e(te,GE),e(GE,QFe),e(QFe,d9r),e(GE,c9r),e(GE,KJ),e(KJ,f9r),e(GE,m9r),e(te,g9r),e(te,OE),e(OE,HFe),e(HFe,h9r),e(OE,p9r),e(OE,ZJ),e(ZJ,_9r),e(OE,u9r),e(te,b9r),e(te,VE),e(VE,UFe),e(UFe,v9r),e(VE,F9r),e(VE,eY),e(eY,T9r),e(VE,M9r),e(te,E9r),e(te,XE),e(XE,JFe),e(JFe,C9r),e(XE,w9r),e(XE,oY),e(oY,A9r),e(XE,y9r),e(te,L9r),e(te,zE),e(zE,YFe),e(YFe,x9r),e(zE,$9r),e(zE,rY),e(rY,k9r),e(zE,S9r),e(te,R9r),e(te,WE),e(WE,KFe),e(KFe,P9r),e(WE,B9r),e(WE,tY),e(tY,I9r),e(WE,N9r),e(te,q9r),e(te,QE),e(QE,ZFe),e(ZFe,j9r),e(QE,D9r),e(QE,aY),e(aY,G9r),e(QE,O9r),e(te,V9r),e(te,HE),e(HE,e6e),e(e6e,X9r),e(HE,z9r),e(HE,nY),e(nY,W9r),e(HE,Q9r),e(te,H9r),e(te,UE),e(UE,o6e),e(o6e,U9r),e(UE,J9r),e(UE,sY),e(sY,Y9r),e(UE,K9r),e(te,Z9r),e(te,JE),e(JE,r6e),e(r6e,exr),e(JE,oxr),e(JE,lY),e(lY,rxr),e(JE,txr),e(te,axr),e(te,YE),e(YE,t6e),e(t6e,nxr),e(YE,sxr),e(YE,iY),e(iY,lxr),e(YE,ixr),e(te,dxr),e(te,KE),e(KE,a6e),e(a6e,cxr),e(KE,fxr),e(KE,dY),e(dY,mxr),e(KE,gxr),e(te,hxr),e(te,ZE),e(ZE,n6e),e(n6e,pxr),e(ZE,_xr),e(ZE,cY),e(cY,uxr),e(ZE,bxr),e(te,vxr),e(te,eC),e(eC,s6e),e(s6e,Fxr),e(eC,Txr),e(eC,fY),e(fY,Mxr),e(eC,Exr),e(te,Cxr),e(te,oC),e(oC,l6e),e(l6e,wxr),e(oC,Axr),e(oC,mY),e(mY,yxr),e(oC,Lxr),e(jr,xxr),M(rC,jr,null),b(f,Gje,u),b(f,Sc,u),e(Sc,tC),e(tC,i6e),M(S9,i6e,null),e(Sc,$xr),e(Sc,d6e),e(d6e,kxr),b(f,Oje,u),b(f,mr,u),M(R9,mr,null),e(mr,Sxr),e(mr,Rc),e(Rc,Rxr),e(Rc,gY),e(gY,Pxr),e(Rc,Bxr),e(Rc,hY),e(hY,Ixr),e(Rc,Nxr),e(mr,qxr),e(mr,P9),e(P9,jxr),e(P9,c6e),e(c6e,Dxr),e(P9,Gxr),e(mr,Oxr),e(mr,Ot),M(B9,Ot,null),e(Ot,Vxr),e(Ot,f6e),e(f6e,Xxr),e(Ot,zxr),e(Ot,Pc),e(Pc,Wxr),e(Pc,m6e),e(m6e,Qxr),e(Pc,Hxr),e(Pc,pY),e(pY,Uxr),e(Pc,Jxr),e(Ot,Yxr),M(aC,Ot,null),e(mr,Kxr),e(mr,Dr),M(I9,Dr,null),e(Dr,Zxr),e(Dr,g6e),e(g6e,e$r),e(Dr,o$r),e(Dr,pn),e(pn,r$r),e(pn,h6e),e(h6e,t$r),e(pn,a$r),e(pn,p6e),e(p6e,n$r),e(pn,s$r),e(pn,_6e),e(_6e,l$r),e(pn,i$r),e(Dr,d$r),e(Dr,Re),e(Re,nC),e(nC,u6e),e(u6e,c$r),e(nC,f$r),e(nC,_Y),e(_Y,m$r),e(nC,g$r),e(Re,h$r),e(Re,sC),e(sC,b6e),e(b6e,p$r),e(sC,_$r),e(sC,uY),e(uY,u$r),e(sC,b$r),e(Re,v$r),e(Re,lC),e(lC,v6e),e(v6e,F$r),e(lC,T$r),e(lC,bY),e(bY,M$r),e(lC,E$r),e(Re,C$r),e(Re,iC),e(iC,F6e),e(F6e,w$r),e(iC,A$r),e(iC,vY),e(vY,y$r),e(iC,L$r),e(Re,x$r),e(Re,dC),e(dC,T6e),e(T6e,$$r),e(dC,k$r),e(dC,FY),e(FY,S$r),e(dC,R$r),e(Re,P$r),e(Re,cC),e(cC,M6e),e(M6e,B$r),e(cC,I$r),e(cC,TY),e(TY,N$r),e(cC,q$r),e(Re,j$r),e(Re,fC),e(fC,E6e),e(E6e,D$r),e(fC,G$r),e(fC,MY),e(MY,O$r),e(fC,V$r),e(Re,X$r),e(Re,mC),e(mC,C6e),e(C6e,z$r),e(mC,W$r),e(mC,EY),e(EY,Q$r),e(mC,H$r),e(Re,U$r),e(Re,gC),e(gC,w6e),e(w6e,J$r),e(gC,Y$r),e(gC,CY),e(CY,K$r),e(gC,Z$r),e(Dr,ekr),M(hC,Dr,null),b(f,Vje,u),b(f,Bc,u),e(Bc,pC),e(pC,A6e),M(N9,A6e,null),e(Bc,okr),e(Bc,y6e),e(y6e,rkr),b(f,Xje,u),b(f,gr,u),M(q9,gr,null),e(gr,tkr),e(gr,Ic),e(Ic,akr),e(Ic,wY),e(wY,nkr),e(Ic,skr),e(Ic,AY),e(AY,lkr),e(Ic,ikr),e(gr,dkr),e(gr,j9),e(j9,ckr),e(j9,L6e),e(L6e,fkr),e(j9,mkr),e(gr,gkr),e(gr,Vt),M(D9,Vt,null),e(Vt,hkr),e(Vt,x6e),e(x6e,pkr),e(Vt,_kr),e(Vt,Nc),e(Nc,ukr),e(Nc,$6e),e($6e,bkr),e(Nc,vkr),e(Nc,yY),e(yY,Fkr),e(Nc,Tkr),e(Vt,Mkr),M(_C,Vt,null),e(gr,Ekr),e(gr,Gr),M(G9,Gr,null),e(Gr,Ckr),e(Gr,k6e),e(k6e,wkr),e(Gr,Akr),e(Gr,_n),e(_n,ykr),e(_n,S6e),e(S6e,Lkr),e(_n,xkr),e(_n,R6e),e(R6e,$kr),e(_n,kkr),e(_n,P6e),e(P6e,Skr),e(_n,Rkr),e(Gr,Pkr),e(Gr,Ee),e(Ee,uC),e(uC,B6e),e(B6e,Bkr),e(uC,Ikr),e(uC,LY),e(LY,Nkr),e(uC,qkr),e(Ee,jkr),e(Ee,bC),e(bC,I6e),e(I6e,Dkr),e(bC,Gkr),e(bC,xY),e(xY,Okr),e(bC,Vkr),e(Ee,Xkr),e(Ee,vC),e(vC,N6e),e(N6e,zkr),e(vC,Wkr),e(vC,$Y),e($Y,Qkr),e(vC,Hkr),e(Ee,Ukr),e(Ee,FC),e(FC,q6e),e(q6e,Jkr),e(FC,Ykr),e(FC,kY),e(kY,Kkr),e(FC,Zkr),e(Ee,eSr),e(Ee,TC),e(TC,j6e),e(j6e,oSr),e(TC,rSr),e(TC,SY),e(SY,tSr),e(TC,aSr),e(Ee,nSr),e(Ee,MC),e(MC,D6e),e(D6e,sSr),e(MC,lSr),e(MC,RY),e(RY,iSr),e(MC,dSr),e(Ee,cSr),e(Ee,EC),e(EC,G6e),e(G6e,fSr),e(EC,mSr),e(EC,PY),e(PY,gSr),e(EC,hSr),e(Ee,pSr),e(Ee,CC),e(CC,O6e),e(O6e,_Sr),e(CC,uSr),e(CC,BY),e(BY,bSr),e(CC,vSr),e(Ee,FSr),e(Ee,wC),e(wC,V6e),e(V6e,TSr),e(wC,MSr),e(wC,IY),e(IY,ESr),e(wC,CSr),e(Ee,wSr),e(Ee,AC),e(AC,X6e),e(X6e,ASr),e(AC,ySr),e(AC,NY),e(NY,LSr),e(AC,xSr),e(Ee,$Sr),e(Ee,yC),e(yC,z6e),e(z6e,kSr),e(yC,SSr),e(yC,qY),e(qY,RSr),e(yC,PSr),e(Ee,BSr),e(Ee,LC),e(LC,W6e),e(W6e,ISr),e(LC,NSr),e(LC,jY),e(jY,qSr),e(LC,jSr),e(Gr,DSr),M(xC,Gr,null),b(f,zje,u),b(f,qc,u),e(qc,$C),e($C,Q6e),M(O9,Q6e,null),e(qc,GSr),e(qc,H6e),e(H6e,OSr),b(f,Wje,u),b(f,hr,u),M(V9,hr,null),e(hr,VSr),e(hr,jc),e(jc,XSr),e(jc,DY),e(DY,zSr),e(jc,WSr),e(jc,GY),e(GY,QSr),e(jc,HSr),e(hr,USr),e(hr,X9),e(X9,JSr),e(X9,U6e),e(U6e,YSr),e(X9,KSr),e(hr,ZSr),e(hr,Xt),M(z9,Xt,null),e(Xt,eRr),e(Xt,J6e),e(J6e,oRr),e(Xt,rRr),e(Xt,Dc),e(Dc,tRr),e(Dc,Y6e),e(Y6e,aRr),e(Dc,nRr),e(Dc,OY),e(OY,sRr),e(Dc,lRr),e(Xt,iRr),M(kC,Xt,null),e(hr,dRr),e(hr,Or),M(W9,Or,null),e(Or,cRr),e(Or,K6e),e(K6e,fRr),e(Or,mRr),e(Or,un),e(un,gRr),e(un,Z6e),e(Z6e,hRr),e(un,pRr),e(un,eTe),e(eTe,_Rr),e(un,uRr),e(un,oTe),e(oTe,bRr),e(un,vRr),e(Or,FRr),e(Or,Le),e(Le,SC),e(SC,rTe),e(rTe,TRr),e(SC,MRr),e(SC,VY),e(VY,ERr),e(SC,CRr),e(Le,wRr),e(Le,RC),e(RC,tTe),e(tTe,ARr),e(RC,yRr),e(RC,XY),e(XY,LRr),e(RC,xRr),e(Le,$Rr),e(Le,PC),e(PC,aTe),e(aTe,kRr),e(PC,SRr),e(PC,zY),e(zY,RRr),e(PC,PRr),e(Le,BRr),e(Le,BC),e(BC,nTe),e(nTe,IRr),e(BC,NRr),e(BC,WY),e(WY,qRr),e(BC,jRr),e(Le,DRr),e(Le,IC),e(IC,sTe),e(sTe,GRr),e(IC,ORr),e(IC,QY),e(QY,VRr),e(IC,XRr),e(Le,zRr),e(Le,NC),e(NC,lTe),e(lTe,WRr),e(NC,QRr),e(NC,HY),e(HY,HRr),e(NC,URr),e(Le,JRr),e(Le,qC),e(qC,iTe),e(iTe,YRr),e(qC,KRr),e(qC,UY),e(UY,ZRr),e(qC,ePr),e(Le,oPr),e(Le,jC),e(jC,dTe),e(dTe,rPr),e(jC,tPr),e(jC,JY),e(JY,aPr),e(jC,nPr),e(Le,sPr),e(Le,DC),e(DC,cTe),e(cTe,lPr),e(DC,iPr),e(DC,YY),e(YY,dPr),e(DC,cPr),e(Le,fPr),e(Le,GC),e(GC,fTe),e(fTe,mPr),e(GC,gPr),e(GC,KY),e(KY,hPr),e(GC,pPr),e(Or,_Pr),M(OC,Or,null),b(f,Qje,u),b(f,Gc,u),e(Gc,VC),e(VC,mTe),M(Q9,mTe,null),e(Gc,uPr),e(Gc,gTe),e(gTe,bPr),b(f,Hje,u),b(f,pr,u),M(H9,pr,null),e(pr,vPr),e(pr,Oc),e(Oc,FPr),e(Oc,ZY),e(ZY,TPr),e(Oc,MPr),e(Oc,eK),e(eK,EPr),e(Oc,CPr),e(pr,wPr),e(pr,U9),e(U9,APr),e(U9,hTe),e(hTe,yPr),e(U9,LPr),e(pr,xPr),e(pr,zt),M(J9,zt,null),e(zt,$Pr),e(zt,pTe),e(pTe,kPr),e(zt,SPr),e(zt,Vc),e(Vc,RPr),e(Vc,_Te),e(_Te,PPr),e(Vc,BPr),e(Vc,oK),e(oK,IPr),e(Vc,NPr),e(zt,qPr),M(XC,zt,null),e(pr,jPr),e(pr,Vr),M(Y9,Vr,null),e(Vr,DPr),e(Vr,uTe),e(uTe,GPr),e(Vr,OPr),e(Vr,bn),e(bn,VPr),e(bn,bTe),e(bTe,XPr),e(bn,zPr),e(bn,vTe),e(vTe,WPr),e(bn,QPr),e(bn,FTe),e(FTe,HPr),e(bn,UPr),e(Vr,JPr),e(Vr,Pe),e(Pe,zC),e(zC,TTe),e(TTe,YPr),e(zC,KPr),e(zC,rK),e(rK,ZPr),e(zC,eBr),e(Pe,oBr),e(Pe,WC),e(WC,MTe),e(MTe,rBr),e(WC,tBr),e(WC,tK),e(tK,aBr),e(WC,nBr),e(Pe,sBr),e(Pe,QC),e(QC,ETe),e(ETe,lBr),e(QC,iBr),e(QC,aK),e(aK,dBr),e(QC,cBr),e(Pe,fBr),e(Pe,HC),e(HC,CTe),e(CTe,mBr),e(HC,gBr),e(HC,nK),e(nK,hBr),e(HC,pBr),e(Pe,_Br),e(Pe,UC),e(UC,wTe),e(wTe,uBr),e(UC,bBr),e(UC,sK),e(sK,vBr),e(UC,FBr),e(Pe,TBr),e(Pe,JC),e(JC,ATe),e(ATe,MBr),e(JC,EBr),e(JC,lK),e(lK,CBr),e(JC,wBr),e(Pe,ABr),e(Pe,YC),e(YC,yTe),e(yTe,yBr),e(YC,LBr),e(YC,iK),e(iK,xBr),e(YC,$Br),e(Pe,kBr),e(Pe,KC),e(KC,LTe),e(LTe,SBr),e(KC,RBr),e(KC,dK),e(dK,PBr),e(KC,BBr),e(Pe,IBr),e(Pe,ZC),e(ZC,xTe),e(xTe,NBr),e(ZC,qBr),e(ZC,cK),e(cK,jBr),e(ZC,DBr),e(Vr,GBr),M(ew,Vr,null),b(f,Uje,u),b(f,Xc,u),e(Xc,ow),e(ow,$Te),M(K9,$Te,null),e(Xc,OBr),e(Xc,kTe),e(kTe,VBr),b(f,Jje,u),b(f,_r,u),M(Z9,_r,null),e(_r,XBr),e(_r,zc),e(zc,zBr),e(zc,fK),e(fK,WBr),e(zc,QBr),e(zc,mK),e(mK,HBr),e(zc,UBr),e(_r,JBr),e(_r,ex),e(ex,YBr),e(ex,STe),e(STe,KBr),e(ex,ZBr),e(_r,eIr),e(_r,Wt),M(ox,Wt,null),e(Wt,oIr),e(Wt,RTe),e(RTe,rIr),e(Wt,tIr),e(Wt,Wc),e(Wc,aIr),e(Wc,PTe),e(PTe,nIr),e(Wc,sIr),e(Wc,gK),e(gK,lIr),e(Wc,iIr),e(Wt,dIr),M(rw,Wt,null),e(_r,cIr),e(_r,Xr),M(rx,Xr,null),e(Xr,fIr),e(Xr,BTe),e(BTe,mIr),e(Xr,gIr),e(Xr,vn),e(vn,hIr),e(vn,ITe),e(ITe,pIr),e(vn,_Ir),e(vn,NTe),e(NTe,uIr),e(vn,bIr),e(vn,qTe),e(qTe,vIr),e(vn,FIr),e(Xr,TIr),e(Xr,xe),e(xe,tw),e(tw,jTe),e(jTe,MIr),e(tw,EIr),e(tw,hK),e(hK,CIr),e(tw,wIr),e(xe,AIr),e(xe,aw),e(aw,DTe),e(DTe,yIr),e(aw,LIr),e(aw,pK),e(pK,xIr),e(aw,$Ir),e(xe,kIr),e(xe,nw),e(nw,GTe),e(GTe,SIr),e(nw,RIr),e(nw,_K),e(_K,PIr),e(nw,BIr),e(xe,IIr),e(xe,sw),e(sw,OTe),e(OTe,NIr),e(sw,qIr),e(sw,uK),e(uK,jIr),e(sw,DIr),e(xe,GIr),e(xe,lw),e(lw,VTe),e(VTe,OIr),e(lw,VIr),e(lw,bK),e(bK,XIr),e(lw,zIr),e(xe,WIr),e(xe,iw),e(iw,XTe),e(XTe,QIr),e(iw,HIr),e(iw,vK),e(vK,UIr),e(iw,JIr),e(xe,YIr),e(xe,dw),e(dw,zTe),e(zTe,KIr),e(dw,ZIr),e(dw,FK),e(FK,eNr),e(dw,oNr),e(xe,rNr),e(xe,cw),e(cw,WTe),e(WTe,tNr),e(cw,aNr),e(cw,TK),e(TK,nNr),e(cw,sNr),e(xe,lNr),e(xe,fw),e(fw,QTe),e(QTe,iNr),e(fw,dNr),e(fw,MK),e(MK,cNr),e(fw,fNr),e(xe,mNr),e(xe,mw),e(mw,HTe),e(HTe,gNr),e(mw,hNr),e(mw,EK),e(EK,pNr),e(mw,_Nr),e(Xr,uNr),M(gw,Xr,null),b(f,Yje,u),b(f,Qc,u),e(Qc,hw),e(hw,UTe),M(tx,UTe,null),e(Qc,bNr),e(Qc,JTe),e(JTe,vNr),b(f,Kje,u),b(f,ur,u),M(ax,ur,null),e(ur,FNr),e(ur,Hc),e(Hc,TNr),e(Hc,CK),e(CK,MNr),e(Hc,ENr),e(Hc,wK),e(wK,CNr),e(Hc,wNr),e(ur,ANr),e(ur,nx),e(nx,yNr),e(nx,YTe),e(YTe,LNr),e(nx,xNr),e(ur,$Nr),e(ur,Qt),M(sx,Qt,null),e(Qt,kNr),e(Qt,KTe),e(KTe,SNr),e(Qt,RNr),e(Qt,Uc),e(Uc,PNr),e(Uc,ZTe),e(ZTe,BNr),e(Uc,INr),e(Uc,AK),e(AK,NNr),e(Uc,qNr),e(Qt,jNr),M(pw,Qt,null),e(ur,DNr),e(ur,zr),M(lx,zr,null),e(zr,GNr),e(zr,eMe),e(eMe,ONr),e(zr,VNr),e(zr,Fn),e(Fn,XNr),e(Fn,oMe),e(oMe,zNr),e(Fn,WNr),e(Fn,rMe),e(rMe,QNr),e(Fn,HNr),e(Fn,tMe),e(tMe,UNr),e(Fn,JNr),e(zr,YNr),e(zr,$e),e($e,_w),e(_w,aMe),e(aMe,KNr),e(_w,ZNr),e(_w,yK),e(yK,eqr),e(_w,oqr),e($e,rqr),e($e,uw),e(uw,nMe),e(nMe,tqr),e(uw,aqr),e(uw,LK),e(LK,nqr),e(uw,sqr),e($e,lqr),e($e,bw),e(bw,sMe),e(sMe,iqr),e(bw,dqr),e(bw,xK),e(xK,cqr),e(bw,fqr),e($e,mqr),e($e,vw),e(vw,lMe),e(lMe,gqr),e(vw,hqr),e(vw,$K),e($K,pqr),e(vw,_qr),e($e,uqr),e($e,Fw),e(Fw,iMe),e(iMe,bqr),e(Fw,vqr),e(Fw,kK),e(kK,Fqr),e(Fw,Tqr),e($e,Mqr),e($e,Tw),e(Tw,dMe),e(dMe,Eqr),e(Tw,Cqr),e(Tw,SK),e(SK,wqr),e(Tw,Aqr),e($e,yqr),e($e,Mw),e(Mw,cMe),e(cMe,Lqr),e(Mw,xqr),e(Mw,RK),e(RK,$qr),e(Mw,kqr),e($e,Sqr),e($e,Ew),e(Ew,fMe),e(fMe,Rqr),e(Ew,Pqr),e(Ew,PK),e(PK,Bqr),e(Ew,Iqr),e($e,Nqr),e($e,Cw),e(Cw,mMe),e(mMe,qqr),e(Cw,jqr),e(Cw,BK),e(BK,Dqr),e(Cw,Gqr),e($e,Oqr),e($e,ww),e(ww,gMe),e(gMe,Vqr),e(ww,Xqr),e(ww,IK),e(IK,zqr),e(ww,Wqr),e(zr,Qqr),M(Aw,zr,null),b(f,Zje,u),b(f,Jc,u),e(Jc,yw),e(yw,hMe),M(ix,hMe,null),e(Jc,Hqr),e(Jc,pMe),e(pMe,Uqr),b(f,eDe,u),b(f,br,u),M(dx,br,null),e(br,Jqr),e(br,Yc),e(Yc,Yqr),e(Yc,NK),e(NK,Kqr),e(Yc,Zqr),e(Yc,qK),e(qK,ejr),e(Yc,ojr),e(br,rjr),e(br,cx),e(cx,tjr),e(cx,_Me),e(_Me,ajr),e(cx,njr),e(br,sjr),e(br,Ht),M(fx,Ht,null),e(Ht,ljr),e(Ht,uMe),e(uMe,ijr),e(Ht,djr),e(Ht,Kc),e(Kc,cjr),e(Kc,bMe),e(bMe,fjr),e(Kc,mjr),e(Kc,jK),e(jK,gjr),e(Kc,hjr),e(Ht,pjr),M(Lw,Ht,null),e(br,_jr),e(br,Wr),M(mx,Wr,null),e(Wr,ujr),e(Wr,vMe),e(vMe,bjr),e(Wr,vjr),e(Wr,Tn),e(Tn,Fjr),e(Tn,FMe),e(FMe,Tjr),e(Tn,Mjr),e(Tn,TMe),e(TMe,Ejr),e(Tn,Cjr),e(Tn,MMe),e(MMe,wjr),e(Tn,Ajr),e(Wr,yjr),e(Wr,De),e(De,xw),e(xw,EMe),e(EMe,Ljr),e(xw,xjr),e(xw,DK),e(DK,$jr),e(xw,kjr),e(De,Sjr),e(De,$w),e($w,CMe),e(CMe,Rjr),e($w,Pjr),e($w,GK),e(GK,Bjr),e($w,Ijr),e(De,Njr),e(De,kw),e(kw,wMe),e(wMe,qjr),e(kw,jjr),e(kw,OK),e(OK,Djr),e(kw,Gjr),e(De,Ojr),e(De,Sw),e(Sw,AMe),e(AMe,Vjr),e(Sw,Xjr),e(Sw,VK),e(VK,zjr),e(Sw,Wjr),e(De,Qjr),e(De,Rw),e(Rw,yMe),e(yMe,Hjr),e(Rw,Ujr),e(Rw,XK),e(XK,Jjr),e(Rw,Yjr),e(De,Kjr),e(De,Pw),e(Pw,LMe),e(LMe,Zjr),e(Pw,eDr),e(Pw,zK),e(zK,oDr),e(Pw,rDr),e(De,tDr),e(De,Bw),e(Bw,xMe),e(xMe,aDr),e(Bw,nDr),e(Bw,WK),e(WK,sDr),e(Bw,lDr),e(De,iDr),e(De,Iw),e(Iw,$Me),e($Me,dDr),e(Iw,cDr),e(Iw,QK),e(QK,fDr),e(Iw,mDr),e(Wr,gDr),M(Nw,Wr,null),b(f,oDe,u),b(f,Zc,u),e(Zc,qw),e(qw,kMe),M(gx,kMe,null),e(Zc,hDr),e(Zc,SMe),e(SMe,pDr),b(f,rDe,u),b(f,vr,u),M(hx,vr,null),e(vr,_Dr),e(vr,ef),e(ef,uDr),e(ef,HK),e(HK,bDr),e(ef,vDr),e(ef,UK),e(UK,FDr),e(ef,TDr),e(vr,MDr),e(vr,px),e(px,EDr),e(px,RMe),e(RMe,CDr),e(px,wDr),e(vr,ADr),e(vr,Ut),M(_x,Ut,null),e(Ut,yDr),e(Ut,PMe),e(PMe,LDr),e(Ut,xDr),e(Ut,of),e(of,$Dr),e(of,BMe),e(BMe,kDr),e(of,SDr),e(of,JK),e(JK,RDr),e(of,PDr),e(Ut,BDr),M(jw,Ut,null),e(vr,IDr),e(vr,Qr),M(ux,Qr,null),e(Qr,NDr),e(Qr,IMe),e(IMe,qDr),e(Qr,jDr),e(Qr,Mn),e(Mn,DDr),e(Mn,NMe),e(NMe,GDr),e(Mn,ODr),e(Mn,qMe),e(qMe,VDr),e(Mn,XDr),e(Mn,jMe),e(jMe,zDr),e(Mn,WDr),e(Qr,QDr),e(Qr,Ge),e(Ge,Dw),e(Dw,DMe),e(DMe,HDr),e(Dw,UDr),e(Dw,YK),e(YK,JDr),e(Dw,YDr),e(Ge,KDr),e(Ge,Gw),e(Gw,GMe),e(GMe,ZDr),e(Gw,eGr),e(Gw,KK),e(KK,oGr),e(Gw,rGr),e(Ge,tGr),e(Ge,Ow),e(Ow,OMe),e(OMe,aGr),e(Ow,nGr),e(Ow,ZK),e(ZK,sGr),e(Ow,lGr),e(Ge,iGr),e(Ge,Vw),e(Vw,VMe),e(VMe,dGr),e(Vw,cGr),e(Vw,eZ),e(eZ,fGr),e(Vw,mGr),e(Ge,gGr),e(Ge,Xw),e(Xw,XMe),e(XMe,hGr),e(Xw,pGr),e(Xw,oZ),e(oZ,_Gr),e(Xw,uGr),e(Ge,bGr),e(Ge,zw),e(zw,zMe),e(zMe,vGr),e(zw,FGr),e(zw,rZ),e(rZ,TGr),e(zw,MGr),e(Ge,EGr),e(Ge,Ww),e(Ww,WMe),e(WMe,CGr),e(Ww,wGr),e(Ww,tZ),e(tZ,AGr),e(Ww,yGr),e(Ge,LGr),e(Ge,Qw),e(Qw,QMe),e(QMe,xGr),e(Qw,$Gr),e(Qw,aZ),e(aZ,kGr),e(Qw,SGr),e(Qr,RGr),M(Hw,Qr,null),b(f,tDe,u),b(f,rf,u),e(rf,Uw),e(Uw,HMe),M(bx,HMe,null),e(rf,PGr),e(rf,UMe),e(UMe,BGr),b(f,aDe,u),b(f,Fr,u),M(vx,Fr,null),e(Fr,IGr),e(Fr,tf),e(tf,NGr),e(tf,nZ),e(nZ,qGr),e(tf,jGr),e(tf,sZ),e(sZ,DGr),e(tf,GGr),e(Fr,OGr),e(Fr,Fx),e(Fx,VGr),e(Fx,JMe),e(JMe,XGr),e(Fx,zGr),e(Fr,WGr),e(Fr,Jt),M(Tx,Jt,null),e(Jt,QGr),e(Jt,YMe),e(YMe,HGr),e(Jt,UGr),e(Jt,af),e(af,JGr),e(af,KMe),e(KMe,YGr),e(af,KGr),e(af,lZ),e(lZ,ZGr),e(af,eOr),e(Jt,oOr),M(Jw,Jt,null),e(Fr,rOr),e(Fr,Hr),M(Mx,Hr,null),e(Hr,tOr),e(Hr,ZMe),e(ZMe,aOr),e(Hr,nOr),e(Hr,En),e(En,sOr),e(En,eEe),e(eEe,lOr),e(En,iOr),e(En,oEe),e(oEe,dOr),e(En,cOr),e(En,rEe),e(rEe,fOr),e(En,mOr),e(Hr,gOr),e(Hr,tEe),e(tEe,Yw),e(Yw,aEe),e(aEe,hOr),e(Yw,pOr),e(Yw,iZ),e(iZ,_Or),e(Yw,uOr),e(Hr,bOr),M(Kw,Hr,null),b(f,nDe,u),b(f,nf,u),e(nf,Zw),e(Zw,nEe),M(Ex,nEe,null),e(nf,vOr),e(nf,sEe),e(sEe,FOr),b(f,sDe,u),b(f,Tr,u),M(Cx,Tr,null),e(Tr,TOr),e(Tr,sf),e(sf,MOr),e(sf,dZ),e(dZ,EOr),e(sf,COr),e(sf,cZ),e(cZ,wOr),e(sf,AOr),e(Tr,yOr),e(Tr,wx),e(wx,LOr),e(wx,lEe),e(lEe,xOr),e(wx,$Or),e(Tr,kOr),e(Tr,Yt),M(Ax,Yt,null),e(Yt,SOr),e(Yt,iEe),e(iEe,ROr),e(Yt,POr),e(Yt,lf),e(lf,BOr),e(lf,dEe),e(dEe,IOr),e(lf,NOr),e(lf,fZ),e(fZ,qOr),e(lf,jOr),e(Yt,DOr),M(e0,Yt,null),e(Tr,GOr),e(Tr,Ur),M(yx,Ur,null),e(Ur,OOr),e(Ur,cEe),e(cEe,VOr),e(Ur,XOr),e(Ur,Cn),e(Cn,zOr),e(Cn,fEe),e(fEe,WOr),e(Cn,QOr),e(Cn,mEe),e(mEe,HOr),e(Cn,UOr),e(Cn,gEe),e(gEe,JOr),e(Cn,YOr),e(Ur,KOr),e(Ur,Lx),e(Lx,o0),e(o0,hEe),e(hEe,ZOr),e(o0,eVr),e(o0,mZ),e(mZ,oVr),e(o0,rVr),e(Lx,tVr),e(Lx,r0),e(r0,pEe),e(pEe,aVr),e(r0,nVr),e(r0,gZ),e(gZ,sVr),e(r0,lVr),e(Ur,iVr),M(t0,Ur,null),b(f,lDe,u),b(f,df,u),e(df,a0),e(a0,_Ee),M(xx,_Ee,null),e(df,dVr),e(df,uEe),e(uEe,cVr),b(f,iDe,u),b(f,Mr,u),M($x,Mr,null),e(Mr,fVr),e(Mr,cf),e(cf,mVr),e(cf,hZ),e(hZ,gVr),e(cf,hVr),e(cf,pZ),e(pZ,pVr),e(cf,_Vr),e(Mr,uVr),e(Mr,kx),e(kx,bVr),e(kx,bEe),e(bEe,vVr),e(kx,FVr),e(Mr,TVr),e(Mr,Kt),M(Sx,Kt,null),e(Kt,MVr),e(Kt,vEe),e(vEe,EVr),e(Kt,CVr),e(Kt,ff),e(ff,wVr),e(ff,FEe),e(FEe,AVr),e(ff,yVr),e(ff,_Z),e(_Z,LVr),e(ff,xVr),e(Kt,$Vr),M(n0,Kt,null),e(Mr,kVr),e(Mr,Jr),M(Rx,Jr,null),e(Jr,SVr),e(Jr,TEe),e(TEe,RVr),e(Jr,PVr),e(Jr,wn),e(wn,BVr),e(wn,MEe),e(MEe,IVr),e(wn,NVr),e(wn,EEe),e(EEe,qVr),e(wn,jVr),e(wn,CEe),e(CEe,DVr),e(wn,GVr),e(Jr,OVr),e(Jr,wEe),e(wEe,s0),e(s0,AEe),e(AEe,VVr),e(s0,XVr),e(s0,uZ),e(uZ,zVr),e(s0,WVr),e(Jr,QVr),M(l0,Jr,null),dDe=!0},p(f,[u]){const Px={};u&2&&(Px.$$scope={dirty:u,ctx:f}),Ff.$set(Px);const yEe={};u&2&&(yEe.$$scope={dirty:u,ctx:f}),Eg.$set(yEe);const LEe={};u&2&&(LEe.$$scope={dirty:u,ctx:f}),ah.$set(LEe);const xEe={};u&2&&(xEe.$$scope={dirty:u,ctx:f}),Ih.$set(xEe);const Bx={};u&2&&(Bx.$$scope={dirty:u,ctx:f}),Nh.$set(Bx);const $Ee={};u&2&&($Ee.$$scope={dirty:u,ctx:f}),tp.$set($Ee);const An={};u&2&&(An.$$scope={dirty:u,ctx:f}),ap.$set(An);const kEe={};u&2&&(kEe.$$scope={dirty:u,ctx:f}),lp.$set(kEe);const SEe={};u&2&&(SEe.$$scope={dirty:u,ctx:f}),ru.$set(SEe);const REe={};u&2&&(REe.$$scope={dirty:u,ctx:f}),au.$set(REe);const Ix={};u&2&&(Ix.$$scope={dirty:u,ctx:f}),Hu.$set(Ix);const PEe={};u&2&&(PEe.$$scope={dirty:u,ctx:f}),Ju.$set(PEe);const Nx={};u&2&&(Nx.$$scope={dirty:u,ctx:f}),B1.$set(Nx);const BEe={};u&2&&(BEe.$$scope={dirty:u,ctx:f}),N1.$set(BEe);const qx={};u&2&&(qx.$$scope={dirty:u,ctx:f}),Fb.$set(qx);const IEe={};u&2&&(IEe.$$scope={dirty:u,ctx:f}),Mb.$set(IEe);const NEe={};u&2&&(NEe.$$scope={dirty:u,ctx:f}),Db.$set(NEe);const qEe={};u&2&&(qEe.$$scope={dirty:u,ctx:f}),Ob.$set(qEe);const mf={};u&2&&(mf.$$scope={dirty:u,ctx:f}),N2.$set(mf);const jEe={};u&2&&(jEe.$$scope={dirty:u,ctx:f}),j2.$set(jEe);const DEe={};u&2&&(DEe.$$scope={dirty:u,ctx:f}),_4.$set(DEe);const GEe={};u&2&&(GEe.$$scope={dirty:u,ctx:f}),b4.$set(GEe);const jx={};u&2&&(jx.$$scope={dirty:u,ctx:f}),w4.$set(jx);const OEe={};u&2&&(OEe.$$scope={dirty:u,ctx:f}),y4.$set(OEe);const VEe={};u&2&&(VEe.$$scope={dirty:u,ctx:f}),d5.$set(VEe);const XEe={};u&2&&(XEe.$$scope={dirty:u,ctx:f}),f5.$set(XEe);const et={};u&2&&(et.$$scope={dirty:u,ctx:f}),Z5.$set(et);const Dx={};u&2&&(Dx.$$scope={dirty:u,ctx:f}),ov.$set(Dx);const zEe={};u&2&&(zEe.$$scope={dirty:u,ctx:f}),av.$set(zEe);const Gx={};u&2&&(Gx.$$scope={dirty:u,ctx:f}),sv.$set(Gx);const WEe={};u&2&&(WEe.$$scope={dirty:u,ctx:f}),Fv.$set(WEe);const ot={};u&2&&(ot.$$scope={dirty:u,ctx:f}),Mv.$set(ot);const QEe={};u&2&&(QEe.$$scope={dirty:u,ctx:f}),wv.$set(QEe);const gf={};u&2&&(gf.$$scope={dirty:u,ctx:f}),yv.$set(gf);const HEe={};u&2&&(HEe.$$scope={dirty:u,ctx:f}),qv.$set(HEe);const UEe={};u&2&&(UEe.$$scope={dirty:u,ctx:f}),Dv.$set(UEe);const y={};u&2&&(y.$$scope={dirty:u,ctx:f}),Qv.$set(y);const i0={};u&2&&(i0.$$scope={dirty:u,ctx:f}),Uv.$set(i0);const JEe={};u&2&&(JEe.$$scope={dirty:u,ctx:f}),s3.$set(JEe);const YEe={};u&2&&(YEe.$$scope={dirty:u,ctx:f}),i3.$set(YEe);const d0={};u&2&&(d0.$$scope={dirty:u,ctx:f}),m3.$set(d0);const KEe={};u&2&&(KEe.$$scope={dirty:u,ctx:f}),h3.$set(KEe);const ZEe={};u&2&&(ZEe.$$scope={dirty:u,ctx:f}),T3.$set(ZEe);const c0={};u&2&&(c0.$$scope={dirty:u,ctx:f}),E3.$set(c0);const eCe={};u&2&&(eCe.$$scope={dirty:u,ctx:f}),L3.$set(eCe);const oCe={};u&2&&(oCe.$$scope={dirty:u,ctx:f}),$3.$set(oCe);const f0={};u&2&&(f0.$$scope={dirty:u,ctx:f}),P3.$set(f0);const rCe={};u&2&&(rCe.$$scope={dirty:u,ctx:f}),I3.$set(rCe);const tCe={};u&2&&(tCe.$$scope={dirty:u,ctx:f}),j3.$set(tCe);const m0={};u&2&&(m0.$$scope={dirty:u,ctx:f}),G3.$set(m0);const aCe={};u&2&&(aCe.$$scope={dirty:u,ctx:f}),Q3.$set(aCe);const nCe={};u&2&&(nCe.$$scope={dirty:u,ctx:f}),U3.$set(nCe);const g0={};u&2&&(g0.$$scope={dirty:u,ctx:f}),K3.$set(g0);const sCe={};u&2&&(sCe.$$scope={dirty:u,ctx:f}),eF.$set(sCe);const lCe={};u&2&&(lCe.$$scope={dirty:u,ctx:f}),QF.$set(lCe);const h0={};u&2&&(h0.$$scope={dirty:u,ctx:f}),UF.$set(h0);const iCe={};u&2&&(iCe.$$scope={dirty:u,ctx:f}),v6.$set(iCe);const dCe={};u&2&&(dCe.$$scope={dirty:u,ctx:f}),T6.$set(dCe);const p0={};u&2&&(p0.$$scope={dirty:u,ctx:f}),B6.$set(p0);const cCe={};u&2&&(cCe.$$scope={dirty:u,ctx:f}),N6.$set(cCe);const fCe={};u&2&&(fCe.$$scope={dirty:u,ctx:f}),O6.$set(fCe);const _0={};u&2&&(_0.$$scope={dirty:u,ctx:f}),X6.$set(_0);const mCe={};u&2&&(mCe.$$scope={dirty:u,ctx:f}),fT.$set(mCe);const gCe={};u&2&&(gCe.$$scope={dirty:u,ctx:f}),gT.$set(gCe);const u0={};u&2&&(u0.$$scope={dirty:u,ctx:f}),CT.$set(u0);const hCe={};u&2&&(hCe.$$scope={dirty:u,ctx:f}),AT.$set(hCe);const pCe={};u&2&&(pCe.$$scope={dirty:u,ctx:f}),ZT.$set(pCe);const b0={};u&2&&(b0.$$scope={dirty:u,ctx:f}),oM.$set(b0);const _Ce={};u&2&&(_Ce.$$scope={dirty:u,ctx:f}),vM.$set(_Ce);const uCe={};u&2&&(uCe.$$scope={dirty:u,ctx:f}),TM.$set(uCe);const v0={};u&2&&(v0.$$scope={dirty:u,ctx:f}),CM.$set(v0);const bCe={};u&2&&(bCe.$$scope={dirty:u,ctx:f}),AM.$set(bCe);const vCe={};u&2&&(vCe.$$scope={dirty:u,ctx:f}),LM.$set(vCe);const F0={};u&2&&(F0.$$scope={dirty:u,ctx:f}),$M.$set(F0);const FCe={};u&2&&(FCe.$$scope={dirty:u,ctx:f}),YM.$set(FCe);const TCe={};u&2&&(TCe.$$scope={dirty:u,ctx:f}),ZM.$set(TCe);const T0={};u&2&&(T0.$$scope={dirty:u,ctx:f}),FE.$set(T0);const MCe={};u&2&&(MCe.$$scope={dirty:u,ctx:f}),ME.$set(MCe);const ECe={};u&2&&(ECe.$$scope={dirty:u,ctx:f}),CE.$set(ECe);const M0={};u&2&&(M0.$$scope={dirty:u,ctx:f}),AE.$set(M0);const CCe={};u&2&&(CCe.$$scope={dirty:u,ctx:f}),LE.$set(CCe);const wCe={};u&2&&(wCe.$$scope={dirty:u,ctx:f}),$E.$set(wCe);const E0={};u&2&&(E0.$$scope={dirty:u,ctx:f}),rC.$set(E0);const ACe={};u&2&&(ACe.$$scope={dirty:u,ctx:f}),aC.$set(ACe);const yCe={};u&2&&(yCe.$$scope={dirty:u,ctx:f}),hC.$set(yCe);const C0={};u&2&&(C0.$$scope={dirty:u,ctx:f}),_C.$set(C0);const LCe={};u&2&&(LCe.$$scope={dirty:u,ctx:f}),xC.$set(LCe);const xCe={};u&2&&(xCe.$$scope={dirty:u,ctx:f}),kC.$set(xCe);const w0={};u&2&&(w0.$$scope={dirty:u,ctx:f}),OC.$set(w0);const $Ce={};u&2&&($Ce.$$scope={dirty:u,ctx:f}),XC.$set($Ce);const kCe={};u&2&&(kCe.$$scope={dirty:u,ctx:f}),ew.$set(kCe);const A0={};u&2&&(A0.$$scope={dirty:u,ctx:f}),rw.$set(A0);const SCe={};u&2&&(SCe.$$scope={dirty:u,ctx:f}),gw.$set(SCe);const RCe={};u&2&&(RCe.$$scope={dirty:u,ctx:f}),pw.$set(RCe);const y0={};u&2&&(y0.$$scope={dirty:u,ctx:f}),Aw.$set(y0);const PCe={};u&2&&(PCe.$$scope={dirty:u,ctx:f}),Lw.$set(PCe);const BCe={};u&2&&(BCe.$$scope={dirty:u,ctx:f}),Nw.$set(BCe);const L0={};u&2&&(L0.$$scope={dirty:u,ctx:f}),jw.$set(L0);const ICe={};u&2&&(ICe.$$scope={dirty:u,ctx:f}),Hw.$set(ICe);const NCe={};u&2&&(NCe.$$scope={dirty:u,ctx:f}),Jw.$set(NCe);const x0={};u&2&&(x0.$$scope={dirty:u,ctx:f}),Kw.$set(x0);const qCe={};u&2&&(qCe.$$scope={dirty:u,ctx:f}),e0.$set(qCe);const jCe={};u&2&&(jCe.$$scope={dirty:u,ctx:f}),t0.$set(jCe);const $0={};u&2&&($0.$$scope={dirty:u,ctx:f}),n0.$set($0);const DCe={};u&2&&(DCe.$$scope={dirty:u,ctx:f}),l0.$set(DCe)},i(f){dDe||(E(d.$$.fragment,f),E(Ca.$$.fragment,f),E(xy.$$.fragment,f),E($y.$$.fragment,f),E(Ff.$$.fragment,f),E(ky.$$.fragment,f),E(Sy.$$.fragment,f),E(By.$$.fragment,f),E(Eg.$$.fragment,f),E(Iy.$$.fragment,f),E(Ny.$$.fragment,f),E(qy.$$.fragment,f),E(Gy.$$.fragment,f),E(ah.$$.fragment,f),E(Oy.$$.fragment,f),E(Vy.$$.fragment,f),E(Xy.$$.fragment,f),E(Qy.$$.fragment,f),E(Ih.$$.fragment,f),E(Nh.$$.fragment,f),E(Hy.$$.fragment,f),E(Uy.$$.fragment,f),E(Jy.$$.fragment,f),E(Zy.$$.fragment,f),E(tp.$$.fragment,f),E(ap.$$.fragment,f),E(eL.$$.fragment,f),E(oL.$$.fragment,f),E(rL.$$.fragment,f),E(aL.$$.fragment,f),E(lp.$$.fragment,f),E(nL.$$.fragment,f),E(ru.$$.fragment,f),E(sL.$$.fragment,f),E(lL.$$.fragment,f),E(dL.$$.fragment,f),E(au.$$.fragment,f),E(cL.$$.fragment,f),E(Hu.$$.fragment,f),E(fL.$$.fragment,f),E(mL.$$.fragment,f),E(hL.$$.fragment,f),E(Ju.$$.fragment,f),E(pL.$$.fragment,f),E(B1.$$.fragment,f),E(_L.$$.fragment,f),E(uL.$$.fragment,f),E(vL.$$.fragment,f),E(N1.$$.fragment,f),E(FL.$$.fragment,f),E(Fb.$$.fragment,f),E(TL.$$.fragment,f),E(ML.$$.fragment,f),E(CL.$$.fragment,f),E(Mb.$$.fragment,f),E(wL.$$.fragment,f),E(Db.$$.fragment,f),E(AL.$$.fragment,f),E(yL.$$.fragment,f),E(xL.$$.fragment,f),E(Ob.$$.fragment,f),E($L.$$.fragment,f),E(N2.$$.fragment,f),E(kL.$$.fragment,f),E(SL.$$.fragment,f),E(PL.$$.fragment,f),E(j2.$$.fragment,f),E(BL.$$.fragment,f),E(_4.$$.fragment,f),E(IL.$$.fragment,f),E(NL.$$.fragment,f),E(jL.$$.fragment,f),E(b4.$$.fragment,f),E(DL.$$.fragment,f),E(w4.$$.fragment,f),E(GL.$$.fragment,f),E(OL.$$.fragment,f),E(XL.$$.fragment,f),E(y4.$$.fragment,f),E(zL.$$.fragment,f),E(d5.$$.fragment,f),E(WL.$$.fragment,f),E(QL.$$.fragment,f),E(UL.$$.fragment,f),E(f5.$$.fragment,f),E(JL.$$.fragment,f),E(Z5.$$.fragment,f),E(YL.$$.fragment,f),E(KL.$$.fragment,f),E(e8.$$.fragment,f),E(ov.$$.fragment,f),E(o8.$$.fragment,f),E(av.$$.fragment,f),E(r8.$$.fragment,f),E(t8.$$.fragment,f),E(n8.$$.fragment,f),E(sv.$$.fragment,f),E(s8.$$.fragment,f),E(Fv.$$.fragment,f),E(l8.$$.fragment,f),E(i8.$$.fragment,f),E(c8.$$.fragment,f),E(Mv.$$.fragment,f),E(f8.$$.fragment,f),E(wv.$$.fragment,f),E(m8.$$.fragment,f),E(g8.$$.fragment,f),E(p8.$$.fragment,f),E(yv.$$.fragment,f),E(_8.$$.fragment,f),E(qv.$$.fragment,f),E(u8.$$.fragment,f),E(b8.$$.fragment,f),E(F8.$$.fragment,f),E(Dv.$$.fragment,f),E(T8.$$.fragment,f),E(Qv.$$.fragment,f),E(M8.$$.fragment,f),E(E8.$$.fragment,f),E(w8.$$.fragment,f),E(Uv.$$.fragment,f),E(A8.$$.fragment,f),E(s3.$$.fragment,f),E(y8.$$.fragment,f),E(L8.$$.fragment,f),E($8.$$.fragment,f),E(i3.$$.fragment,f),E(k8.$$.fragment,f),E(m3.$$.fragment,f),E(R8.$$.fragment,f),E(P8.$$.fragment,f),E(I8.$$.fragment,f),E(h3.$$.fragment,f),E(N8.$$.fragment,f),E(T3.$$.fragment,f),E(q8.$$.fragment,f),E(j8.$$.fragment,f),E(G8.$$.fragment,f),E(E3.$$.fragment,f),E(O8.$$.fragment,f),E(L3.$$.fragment,f),E(V8.$$.fragment,f),E(X8.$$.fragment,f),E(W8.$$.fragment,f),E($3.$$.fragment,f),E(Q8.$$.fragment,f),E(P3.$$.fragment,f),E(U8.$$.fragment,f),E(J8.$$.fragment,f),E(K8.$$.fragment,f),E(I3.$$.fragment,f),E(Z8.$$.fragment,f),E(j3.$$.fragment,f),E(e7.$$.fragment,f),E(o7.$$.fragment,f),E(t7.$$.fragment,f),E(G3.$$.fragment,f),E(a7.$$.fragment,f),E(Q3.$$.fragment,f),E(n7.$$.fragment,f),E(s7.$$.fragment,f),E(i7.$$.fragment,f),E(U3.$$.fragment,f),E(d7.$$.fragment,f),E(K3.$$.fragment,f),E(c7.$$.fragment,f),E(f7.$$.fragment,f),E(g7.$$.fragment,f),E(eF.$$.fragment,f),E(h7.$$.fragment,f),E(QF.$$.fragment,f),E(p7.$$.fragment,f),E(_7.$$.fragment,f),E(b7.$$.fragment,f),E(UF.$$.fragment,f),E(v7.$$.fragment,f),E(v6.$$.fragment,f),E(F7.$$.fragment,f),E(T7.$$.fragment,f),E(E7.$$.fragment,f),E(T6.$$.fragment,f),E(C7.$$.fragment,f),E(B6.$$.fragment,f),E(w7.$$.fragment,f),E(A7.$$.fragment,f),E(L7.$$.fragment,f),E(N6.$$.fragment,f),E(x7.$$.fragment,f),E(O6.$$.fragment,f),E($7.$$.fragment,f),E(k7.$$.fragment,f),E(R7.$$.fragment,f),E(X6.$$.fragment,f),E(P7.$$.fragment,f),E(fT.$$.fragment,f),E(B7.$$.fragment,f),E(I7.$$.fragment,f),E(q7.$$.fragment,f),E(gT.$$.fragment,f),E(j7.$$.fragment,f),E(CT.$$.fragment,f),E(D7.$$.fragment,f),E(G7.$$.fragment,f),E(V7.$$.fragment,f),E(AT.$$.fragment,f),E(X7.$$.fragment,f),E(ZT.$$.fragment,f),E(z7.$$.fragment,f),E(W7.$$.fragment,f),E(H7.$$.fragment,f),E(oM.$$.fragment,f),E(U7.$$.fragment,f),E(vM.$$.fragment,f),E(J7.$$.fragment,f),E(Y7.$$.fragment,f),E(Z7.$$.fragment,f),E(TM.$$.fragment,f),E(e9.$$.fragment,f),E(CM.$$.fragment,f),E(r9.$$.fragment,f),E(t9.$$.fragment,f),E(n9.$$.fragment,f),E(AM.$$.fragment,f),E(s9.$$.fragment,f),E(LM.$$.fragment,f),E(l9.$$.fragment,f),E(i9.$$.fragment,f),E(c9.$$.fragment,f),E($M.$$.fragment,f),E(f9.$$.fragment,f),E(YM.$$.fragment,f),E(m9.$$.fragment,f),E(g9.$$.fragment,f),E(p9.$$.fragment,f),E(ZM.$$.fragment,f),E(_9.$$.fragment,f),E(FE.$$.fragment,f),E(u9.$$.fragment,f),E(b9.$$.fragment,f),E(F9.$$.fragment,f),E(ME.$$.fragment,f),E(T9.$$.fragment,f),E(CE.$$.fragment,f),E(M9.$$.fragment,f),E(E9.$$.fragment,f),E(w9.$$.fragment,f),E(AE.$$.fragment,f),E(A9.$$.fragment,f),E(LE.$$.fragment,f),E(y9.$$.fragment,f),E(L9.$$.fragment,f),E($9.$$.fragment,f),E($E.$$.fragment,f),E(k9.$$.fragment,f),E(rC.$$.fragment,f),E(S9.$$.fragment,f),E(R9.$$.fragment,f),E(B9.$$.fragment,f),E(aC.$$.fragment,f),E(I9.$$.fragment,f),E(hC.$$.fragment,f),E(N9.$$.fragment,f),E(q9.$$.fragment,f),E(D9.$$.fragment,f),E(_C.$$.fragment,f),E(G9.$$.fragment,f),E(xC.$$.fragment,f),E(O9.$$.fragment,f),E(V9.$$.fragment,f),E(z9.$$.fragment,f),E(kC.$$.fragment,f),E(W9.$$.fragment,f),E(OC.$$.fragment,f),E(Q9.$$.fragment,f),E(H9.$$.fragment,f),E(J9.$$.fragment,f),E(XC.$$.fragment,f),E(Y9.$$.fragment,f),E(ew.$$.fragment,f),E(K9.$$.fragment,f),E(Z9.$$.fragment,f),E(ox.$$.fragment,f),E(rw.$$.fragment,f),E(rx.$$.fragment,f),E(gw.$$.fragment,f),E(tx.$$.fragment,f),E(ax.$$.fragment,f),E(sx.$$.fragment,f),E(pw.$$.fragment,f),E(lx.$$.fragment,f),E(Aw.$$.fragment,f),E(ix.$$.fragment,f),E(dx.$$.fragment,f),E(fx.$$.fragment,f),E(Lw.$$.fragment,f),E(mx.$$.fragment,f),E(Nw.$$.fragment,f),E(gx.$$.fragment,f),E(hx.$$.fragment,f),E(_x.$$.fragment,f),E(jw.$$.fragment,f),E(ux.$$.fragment,f),E(Hw.$$.fragment,f),E(bx.$$.fragment,f),E(vx.$$.fragment,f),E(Tx.$$.fragment,f),E(Jw.$$.fragment,f),E(Mx.$$.fragment,f),E(Kw.$$.fragment,f),E(Ex.$$.fragment,f),E(Cx.$$.fragment,f),E(Ax.$$.fragment,f),E(e0.$$.fragment,f),E(yx.$$.fragment,f),E(t0.$$.fragment,f),E(xx.$$.fragment,f),E($x.$$.fragment,f),E(Sx.$$.fragment,f),E(n0.$$.fragment,f),E(Rx.$$.fragment,f),E(l0.$$.fragment,f),dDe=!0)},o(f){C(d.$$.fragment,f),C(Ca.$$.fragment,f),C(xy.$$.fragment,f),C($y.$$.fragment,f),C(Ff.$$.fragment,f),C(ky.$$.fragment,f),C(Sy.$$.fragment,f),C(By.$$.fragment,f),C(Eg.$$.fragment,f),C(Iy.$$.fragment,f),C(Ny.$$.fragment,f),C(qy.$$.fragment,f),C(Gy.$$.fragment,f),C(ah.$$.fragment,f),C(Oy.$$.fragment,f),C(Vy.$$.fragment,f),C(Xy.$$.fragment,f),C(Qy.$$.fragment,f),C(Ih.$$.fragment,f),C(Nh.$$.fragment,f),C(Hy.$$.fragment,f),C(Uy.$$.fragment,f),C(Jy.$$.fragment,f),C(Zy.$$.fragment,f),C(tp.$$.fragment,f),C(ap.$$.fragment,f),C(eL.$$.fragment,f),C(oL.$$.fragment,f),C(rL.$$.fragment,f),C(aL.$$.fragment,f),C(lp.$$.fragment,f),C(nL.$$.fragment,f),C(ru.$$.fragment,f),C(sL.$$.fragment,f),C(lL.$$.fragment,f),C(dL.$$.fragment,f),C(au.$$.fragment,f),C(cL.$$.fragment,f),C(Hu.$$.fragment,f),C(fL.$$.fragment,f),C(mL.$$.fragment,f),C(hL.$$.fragment,f),C(Ju.$$.fragment,f),C(pL.$$.fragment,f),C(B1.$$.fragment,f),C(_L.$$.fragment,f),C(uL.$$.fragment,f),C(vL.$$.fragment,f),C(N1.$$.fragment,f),C(FL.$$.fragment,f),C(Fb.$$.fragment,f),C(TL.$$.fragment,f),C(ML.$$.fragment,f),C(CL.$$.fragment,f),C(Mb.$$.fragment,f),C(wL.$$.fragment,f),C(Db.$$.fragment,f),C(AL.$$.fragment,f),C(yL.$$.fragment,f),C(xL.$$.fragment,f),C(Ob.$$.fragment,f),C($L.$$.fragment,f),C(N2.$$.fragment,f),C(kL.$$.fragment,f),C(SL.$$.fragment,f),C(PL.$$.fragment,f),C(j2.$$.fragment,f),C(BL.$$.fragment,f),C(_4.$$.fragment,f),C(IL.$$.fragment,f),C(NL.$$.fragment,f),C(jL.$$.fragment,f),C(b4.$$.fragment,f),C(DL.$$.fragment,f),C(w4.$$.fragment,f),C(GL.$$.fragment,f),C(OL.$$.fragment,f),C(XL.$$.fragment,f),C(y4.$$.fragment,f),C(zL.$$.fragment,f),C(d5.$$.fragment,f),C(WL.$$.fragment,f),C(QL.$$.fragment,f),C(UL.$$.fragment,f),C(f5.$$.fragment,f),C(JL.$$.fragment,f),C(Z5.$$.fragment,f),C(YL.$$.fragment,f),C(KL.$$.fragment,f),C(e8.$$.fragment,f),C(ov.$$.fragment,f),C(o8.$$.fragment,f),C(av.$$.fragment,f),C(r8.$$.fragment,f),C(t8.$$.fragment,f),C(n8.$$.fragment,f),C(sv.$$.fragment,f),C(s8.$$.fragment,f),C(Fv.$$.fragment,f),C(l8.$$.fragment,f),C(i8.$$.fragment,f),C(c8.$$.fragment,f),C(Mv.$$.fragment,f),C(f8.$$.fragment,f),C(wv.$$.fragment,f),C(m8.$$.fragment,f),C(g8.$$.fragment,f),C(p8.$$.fragment,f),C(yv.$$.fragment,f),C(_8.$$.fragment,f),C(qv.$$.fragment,f),C(u8.$$.fragment,f),C(b8.$$.fragment,f),C(F8.$$.fragment,f),C(Dv.$$.fragment,f),C(T8.$$.fragment,f),C(Qv.$$.fragment,f),C(M8.$$.fragment,f),C(E8.$$.fragment,f),C(w8.$$.fragment,f),C(Uv.$$.fragment,f),C(A8.$$.fragment,f),C(s3.$$.fragment,f),C(y8.$$.fragment,f),C(L8.$$.fragment,f),C($8.$$.fragment,f),C(i3.$$.fragment,f),C(k8.$$.fragment,f),C(m3.$$.fragment,f),C(R8.$$.fragment,f),C(P8.$$.fragment,f),C(I8.$$.fragment,f),C(h3.$$.fragment,f),C(N8.$$.fragment,f),C(T3.$$.fragment,f),C(q8.$$.fragment,f),C(j8.$$.fragment,f),C(G8.$$.fragment,f),C(E3.$$.fragment,f),C(O8.$$.fragment,f),C(L3.$$.fragment,f),C(V8.$$.fragment,f),C(X8.$$.fragment,f),C(W8.$$.fragment,f),C($3.$$.fragment,f),C(Q8.$$.fragment,f),C(P3.$$.fragment,f),C(U8.$$.fragment,f),C(J8.$$.fragment,f),C(K8.$$.fragment,f),C(I3.$$.fragment,f),C(Z8.$$.fragment,f),C(j3.$$.fragment,f),C(e7.$$.fragment,f),C(o7.$$.fragment,f),C(t7.$$.fragment,f),C(G3.$$.fragment,f),C(a7.$$.fragment,f),C(Q3.$$.fragment,f),C(n7.$$.fragment,f),C(s7.$$.fragment,f),C(i7.$$.fragment,f),C(U3.$$.fragment,f),C(d7.$$.fragment,f),C(K3.$$.fragment,f),C(c7.$$.fragment,f),C(f7.$$.fragment,f),C(g7.$$.fragment,f),C(eF.$$.fragment,f),C(h7.$$.fragment,f),C(QF.$$.fragment,f),C(p7.$$.fragment,f),C(_7.$$.fragment,f),C(b7.$$.fragment,f),C(UF.$$.fragment,f),C(v7.$$.fragment,f),C(v6.$$.fragment,f),C(F7.$$.fragment,f),C(T7.$$.fragment,f),C(E7.$$.fragment,f),C(T6.$$.fragment,f),C(C7.$$.fragment,f),C(B6.$$.fragment,f),C(w7.$$.fragment,f),C(A7.$$.fragment,f),C(L7.$$.fragment,f),C(N6.$$.fragment,f),C(x7.$$.fragment,f),C(O6.$$.fragment,f),C($7.$$.fragment,f),C(k7.$$.fragment,f),C(R7.$$.fragment,f),C(X6.$$.fragment,f),C(P7.$$.fragment,f),C(fT.$$.fragment,f),C(B7.$$.fragment,f),C(I7.$$.fragment,f),C(q7.$$.fragment,f),C(gT.$$.fragment,f),C(j7.$$.fragment,f),C(CT.$$.fragment,f),C(D7.$$.fragment,f),C(G7.$$.fragment,f),C(V7.$$.fragment,f),C(AT.$$.fragment,f),C(X7.$$.fragment,f),C(ZT.$$.fragment,f),C(z7.$$.fragment,f),C(W7.$$.fragment,f),C(H7.$$.fragment,f),C(oM.$$.fragment,f),C(U7.$$.fragment,f),C(vM.$$.fragment,f),C(J7.$$.fragment,f),C(Y7.$$.fragment,f),C(Z7.$$.fragment,f),C(TM.$$.fragment,f),C(e9.$$.fragment,f),C(CM.$$.fragment,f),C(r9.$$.fragment,f),C(t9.$$.fragment,f),C(n9.$$.fragment,f),C(AM.$$.fragment,f),C(s9.$$.fragment,f),C(LM.$$.fragment,f),C(l9.$$.fragment,f),C(i9.$$.fragment,f),C(c9.$$.fragment,f),C($M.$$.fragment,f),C(f9.$$.fragment,f),C(YM.$$.fragment,f),C(m9.$$.fragment,f),C(g9.$$.fragment,f),C(p9.$$.fragment,f),C(ZM.$$.fragment,f),C(_9.$$.fragment,f),C(FE.$$.fragment,f),C(u9.$$.fragment,f),C(b9.$$.fragment,f),C(F9.$$.fragment,f),C(ME.$$.fragment,f),C(T9.$$.fragment,f),C(CE.$$.fragment,f),C(M9.$$.fragment,f),C(E9.$$.fragment,f),C(w9.$$.fragment,f),C(AE.$$.fragment,f),C(A9.$$.fragment,f),C(LE.$$.fragment,f),C(y9.$$.fragment,f),C(L9.$$.fragment,f),C($9.$$.fragment,f),C($E.$$.fragment,f),C(k9.$$.fragment,f),C(rC.$$.fragment,f),C(S9.$$.fragment,f),C(R9.$$.fragment,f),C(B9.$$.fragment,f),C(aC.$$.fragment,f),C(I9.$$.fragment,f),C(hC.$$.fragment,f),C(N9.$$.fragment,f),C(q9.$$.fragment,f),C(D9.$$.fragment,f),C(_C.$$.fragment,f),C(G9.$$.fragment,f),C(xC.$$.fragment,f),C(O9.$$.fragment,f),C(V9.$$.fragment,f),C(z9.$$.fragment,f),C(kC.$$.fragment,f),C(W9.$$.fragment,f),C(OC.$$.fragment,f),C(Q9.$$.fragment,f),C(H9.$$.fragment,f),C(J9.$$.fragment,f),C(XC.$$.fragment,f),C(Y9.$$.fragment,f),C(ew.$$.fragment,f),C(K9.$$.fragment,f),C(Z9.$$.fragment,f),C(ox.$$.fragment,f),C(rw.$$.fragment,f),C(rx.$$.fragment,f),C(gw.$$.fragment,f),C(tx.$$.fragment,f),C(ax.$$.fragment,f),C(sx.$$.fragment,f),C(pw.$$.fragment,f),C(lx.$$.fragment,f),C(Aw.$$.fragment,f),C(ix.$$.fragment,f),C(dx.$$.fragment,f),C(fx.$$.fragment,f),C(Lw.$$.fragment,f),C(mx.$$.fragment,f),C(Nw.$$.fragment,f),C(gx.$$.fragment,f),C(hx.$$.fragment,f),C(_x.$$.fragment,f),C(jw.$$.fragment,f),C(ux.$$.fragment,f),C(Hw.$$.fragment,f),C(bx.$$.fragment,f),C(vx.$$.fragment,f),C(Tx.$$.fragment,f),C(Jw.$$.fragment,f),C(Mx.$$.fragment,f),C(Kw.$$.fragment,f),C(Ex.$$.fragment,f),C(Cx.$$.fragment,f),C(Ax.$$.fragment,f),C(e0.$$.fragment,f),C(yx.$$.fragment,f),C(t0.$$.fragment,f),C(xx.$$.fragment,f),C($x.$$.fragment,f),C(Sx.$$.fragment,f),C(n0.$$.fragment,f),C(Rx.$$.fragment,f),C(l0.$$.fragment,f),dDe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(pf),f&&t(rt),f&&t(je),f&&t(We),f&&t(uf),w(Ca,f),f&&t(Qe),f&&t(Ae),f&&t(Eo),f&&t(wa),f&&t(sqe),f&&t(bi),w(xy),f&&t(lqe),f&&t(kn),f&&t(iqe),w($y,f),f&&t(dqe),f&&t(K$),f&&t(cqe),w(Ff,f),f&&t(fqe),f&&t(vi),w(ky),f&&t(mqe),f&&t(Co),w(Sy),w(By),w(Eg),w(Iy),f&&t(gqe),f&&t(Ti),w(Ny),f&&t(hqe),f&&t(wo),w(qy),w(Gy),w(ah),w(Oy),f&&t(pqe),f&&t(Mi),w(Vy),f&&t(_qe),f&&t(Ao),w(Xy),w(Qy),w(Ih),w(Nh),w(Hy),f&&t(uqe),f&&t(Ei),w(Uy),f&&t(bqe),f&&t(yo),w(Jy),w(Zy),w(tp),w(ap),w(eL),f&&t(vqe),f&&t(wi),w(oL),f&&t(Fqe),f&&t(Lo),w(rL),w(aL),w(lp),w(nL),w(ru),f&&t(Tqe),f&&t(Li),w(sL),f&&t(Mqe),f&&t(xo),w(lL),w(dL),w(au),w(cL),w(Hu),f&&t(Eqe),f&&t(ki),w(fL),f&&t(Cqe),f&&t($o),w(mL),w(hL),w(Ju),w(pL),w(B1),f&&t(wqe),f&&t(Pi),w(_L),f&&t(Aqe),f&&t(ko),w(uL),w(vL),w(N1),w(FL),w(Fb),f&&t(yqe),f&&t(Ni),w(TL),f&&t(Lqe),f&&t(So),w(ML),w(CL),w(Mb),w(wL),w(Db),f&&t(xqe),f&&t(Di),w(AL),f&&t($qe),f&&t(Ro),w(yL),w(xL),w(Ob),w($L),w(N2),f&&t(kqe),f&&t(Vi),w(kL),f&&t(Sqe),f&&t(Po),w(SL),w(PL),w(j2),w(BL),w(_4),f&&t(Rqe),f&&t(Wi),w(IL),f&&t(Pqe),f&&t(Bo),w(NL),w(jL),w(b4),w(DL),w(w4),f&&t(Bqe),f&&t(Ui),w(GL),f&&t(Iqe),f&&t(Io),w(OL),w(XL),w(y4),w(zL),w(d5),f&&t(Nqe),f&&t(Ki),w(WL),f&&t(qqe),f&&t(No),w(QL),w(UL),w(f5),w(JL),w(Z5),f&&t(jqe),f&&t(od),w(YL),f&&t(Dqe),f&&t(qo),w(KL),w(e8),w(ov),w(o8),w(av),f&&t(Gqe),f&&t(ad),w(r8),f&&t(Oqe),f&&t(jo),w(t8),w(n8),w(sv),w(s8),w(Fv),f&&t(Vqe),f&&t(ld),w(l8),f&&t(Xqe),f&&t(Do),w(i8),w(c8),w(Mv),w(f8),w(wv),f&&t(zqe),f&&t(cd),w(m8),f&&t(Wqe),f&&t(Go),w(g8),w(p8),w(yv),w(_8),w(qv),f&&t(Qqe),f&&t(gd),w(u8),f&&t(Hqe),f&&t(Oo),w(b8),w(F8),w(Dv),w(T8),w(Qv),f&&t(Uqe),f&&t(_d),w(M8),f&&t(Jqe),f&&t(Vo),w(E8),w(w8),w(Uv),w(A8),w(s3),f&&t(Yqe),f&&t(vd),w(y8),f&&t(Kqe),f&&t(Xo),w(L8),w($8),w(i3),w(k8),w(m3),f&&t(Zqe),f&&t(Md),w(R8),f&&t(eje),f&&t(zo),w(P8),w(I8),w(h3),w(N8),w(T3),f&&t(oje),f&&t(wd),w(q8),f&&t(rje),f&&t(Wo),w(j8),w(G8),w(E3),w(O8),w(L3),f&&t(tje),f&&t(xd),w(V8),f&&t(aje),f&&t(Qo),w(X8),w(W8),w($3),w(Q8),w(P3),f&&t(nje),f&&t(Sd),w(U8),f&&t(sje),f&&t(Ho),w(J8),w(K8),w(I3),w(Z8),w(j3),f&&t(lje),f&&t(Bd),w(e7),f&&t(ije),f&&t(Uo),w(o7),w(t7),w(G3),w(a7),w(Q3),f&&t(dje),f&&t(qd),w(n7),f&&t(cje),f&&t(Jo),w(s7),w(i7),w(U3),w(d7),w(K3),f&&t(fje),f&&t(Gd),w(c7),f&&t(mje),f&&t(Yo),w(f7),w(g7),w(eF),w(h7),w(QF),f&&t(gje),f&&t(Xd),w(p7),f&&t(hje),f&&t(Ko),w(_7),w(b7),w(UF),w(v7),w(v6),f&&t(pje),f&&t(Qd),w(F7),f&&t(_je),f&&t(Zo),w(T7),w(E7),w(T6),w(C7),w(B6),f&&t(uje),f&&t(Jd),w(w7),f&&t(bje),f&&t(er),w(A7),w(L7),w(N6),w(x7),w(O6),f&&t(vje),f&&t(Zd),w($7),f&&t(Fje),f&&t(or),w(k7),w(R7),w(X6),w(P7),w(fT),f&&t(Tje),f&&t(rc),w(B7),f&&t(Mje),f&&t(rr),w(I7),w(q7),w(gT),w(j7),w(CT),f&&t(Eje),f&&t(nc),w(D7),f&&t(Cje),f&&t(tr),w(G7),w(V7),w(AT),w(X7),w(ZT),f&&t(wje),f&&t(ic),w(z7),f&&t(Aje),f&&t(ar),w(W7),w(H7),w(oM),w(U7),w(vM),f&&t(yje),f&&t(fc),w(J7),f&&t(Lje),f&&t(nr),w(Y7),w(Z7),w(TM),w(e9),w(CM),f&&t(xje),f&&t(hc),w(r9),f&&t($je),f&&t(sr),w(t9),w(n9),w(AM),w(s9),w(LM),f&&t(kje),f&&t(uc),w(l9),f&&t(Sje),f&&t(lr),w(i9),w(c9),w($M),w(f9),w(YM),f&&t(Rje),f&&t(Fc),w(m9),f&&t(Pje),f&&t(ir),w(g9),w(p9),w(ZM),w(_9),w(FE),f&&t(Bje),f&&t(Ec),w(u9),f&&t(Ije),f&&t(dr),w(b9),w(F9),w(ME),w(T9),w(CE),f&&t(Nje),f&&t(Ac),w(M9),f&&t(qje),f&&t(cr),w(E9),w(w9),w(AE),w(A9),w(LE),f&&t(jje),f&&t(xc),w(y9),f&&t(Dje),f&&t(fr),w(L9),w($9),w($E),w(k9),w(rC),f&&t(Gje),f&&t(Sc),w(S9),f&&t(Oje),f&&t(mr),w(R9),w(B9),w(aC),w(I9),w(hC),f&&t(Vje),f&&t(Bc),w(N9),f&&t(Xje),f&&t(gr),w(q9),w(D9),w(_C),w(G9),w(xC),f&&t(zje),f&&t(qc),w(O9),f&&t(Wje),f&&t(hr),w(V9),w(z9),w(kC),w(W9),w(OC),f&&t(Qje),f&&t(Gc),w(Q9),f&&t(Hje),f&&t(pr),w(H9),w(J9),w(XC),w(Y9),w(ew),f&&t(Uje),f&&t(Xc),w(K9),f&&t(Jje),f&&t(_r),w(Z9),w(ox),w(rw),w(rx),w(gw),f&&t(Yje),f&&t(Qc),w(tx),f&&t(Kje),f&&t(ur),w(ax),w(sx),w(pw),w(lx),w(Aw),f&&t(Zje),f&&t(Jc),w(ix),f&&t(eDe),f&&t(br),w(dx),w(fx),w(Lw),w(mx),w(Nw),f&&t(oDe),f&&t(Zc),w(gx),f&&t(rDe),f&&t(vr),w(hx),w(_x),w(jw),w(ux),w(Hw),f&&t(tDe),f&&t(rf),w(bx),f&&t(aDe),f&&t(Fr),w(vx),w(Tx),w(Jw),w(Mx),w(Kw),f&&t(nDe),f&&t(nf),w(Ex),f&&t(sDe),f&&t(Tr),w(Cx),w(Ax),w(e0),w(yx),w(t0),f&&t(lDe),f&&t(df),w(xx),f&&t(iDe),f&&t(Mr),w($x),w(Sx),w(n0),w(Rx),w(l0)}}}const kSt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function SSt(L){return S$t(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class jSt extends L$t{constructor(g){super();x$t(this,g,SSt,$St,$$t,{})}}export{jSt as default,kSt as metadata};
