import{S as Bqt,i as Iqt,s as Nqt,e as a,k as l,w as F,t as o,M as qqt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as jqt,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as kJr}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as re}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function Dqt(y){let g,v,p,m,u,d,h,Eo,Fi,Lf,at,Ti,Mi,_y,yf,Oe,We,Ei,Sn,by,Rn,Pn,vy,Ci,Bn,Fy,wi,xf,ya;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),u=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Eo=o(`, make sure its
`),Fi=a("code"),Lf=o("model_type"),at=o(" attribute is set to the same key you use when registering the config (here "),Ti=a("code"),Mi=o('"new-model"'),_y=o(")."),yf=l(),Oe=a("p"),We=o("Likewise, if your "),Ei=a("code"),Sn=o("NewModel"),by=o(" is a subclass of "),Rn=a("a"),Pn=o("PreTrainedModel"),vy=o(`, make sure its
`),Ci=a("code"),Bn=o("config_class"),Fy=o(` attribute is set to the same class you use when registering the model (here
`),wi=a("code"),xf=o("NewModelConfig"),ya=o(")."),this.h()},l(Qe){g=n(Qe,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var Qk=s(p);m=r(Qk,"NewModelConfig"),Qk.forEach(t),u=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var Ai=s(d);h=r(Ai,"PretrainedConfig"),Ai.forEach(t),Eo=r(Ae,`, make sure its
`),Fi=n(Ae,"CODE",{});var Hk=s(Fi);Lf=r(Hk,"model_type"),Hk.forEach(t),at=r(Ae," attribute is set to the same key you use when registering the config (here "),Ti=n(Ae,"CODE",{});var Uk=s(Ti);Mi=r(Uk,'"new-model"'),Uk.forEach(t),_y=r(Ae,")."),Ae.forEach(t),yf=i(Qe),Oe=n(Qe,"P",{});var Co=s(Oe);We=r(Co,"Likewise, if your "),Ei=n(Co,"CODE",{});var xa=s(Ei);Sn=r(xa,"NewModel"),xa.forEach(t),by=r(Co," is a subclass of "),Rn=n(Co,"A",{href:!0});var Jk=s(Rn);Pn=r(Jk,"PreTrainedModel"),Jk.forEach(t),vy=r(Co,`, make sure its
`),Ci=n(Co,"CODE",{});var $f=s(Ci);Bn=r($f,"config_class"),$f.forEach(t),Fy=r(Co,` attribute is set to the same class you use when registering the model (here
`),wi=n(Co,"CODE",{});var Yk=s(wi);xf=r(Yk,"NewModelConfig"),Yk.forEach(t),ya=r(Co,")."),Co.forEach(t),this.h()},h(){c(Rn,"href","/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel")},m(Qe,Ae){b(Qe,g,Ae),e(g,v),e(g,p),e(p,m),e(g,u),e(g,d),e(d,h),e(g,Eo),e(g,Fi),e(Fi,Lf),e(g,at),e(g,Ti),e(Ti,Mi),e(g,_y),b(Qe,yf,Ae),b(Qe,Oe,Ae),e(Oe,We),e(Oe,Ei),e(Ei,Sn),e(Oe,by),e(Oe,Rn),e(Rn,Pn),e(Oe,vy),e(Oe,Ci),e(Ci,Bn),e(Oe,Fy),e(Oe,wi),e(wi,xf),e(Oe,ya)},d(Qe){Qe&&t(g),Qe&&t(yf),Qe&&t(Oe)}}}function Gqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Oqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vqt(y){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Eo=s(p);m=r(Eo,"use_auth_token=True"),Eo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function Xqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zqt(y){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Eo=s(p);m=r(Eo,"use_auth_token=True"),Eo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function Wqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Hqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Uqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Yqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Kqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Zqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ejt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ojt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ajt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function njt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ljt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ijt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function djt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ujt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _jt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Fjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Tjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Mjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ejt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Cjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ajt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ljt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $jt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Sjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Rjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Pjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Bjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ijt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Njt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Djt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ojt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Xjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Wjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Hjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ujt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Yjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Kjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Zjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Dt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ADt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Dt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jDt(y){let g,v,p,m,u,d,h,Eo,Fi,Lf,at,Ti,Mi,_y,yf,Oe,We,Ei,Sn,by,Rn,Pn,vy,Ci,Bn,Fy,wi,xf,ya,Qe,Ae,Qk,Ai,Hk,Uk,Co,xa,Jk,$f,Yk,Tze,sGe,Li,kf,Hre,Ty,Mze,Ure,Eze,lGe,In,Cze,Jre,wze,Aze,Yre,Lze,yze,iGe,My,dGe,Kk,xze,cGe,Sf,fGe,yi,Rf,Kre,Ey,$ze,Zre,kze,mGe,wo,Cy,Sze,wy,Rze,Zk,Pze,Bze,Ize,Ay,Nze,ete,qze,jze,Dze,wr,Ly,Gze,ote,Oze,Vze,xi,Xze,rte,zze,Wze,tte,Qze,Hze,Uze,A,Pf,ate,Jze,Yze,eS,Kze,Zze,eWe,Bf,nte,oWe,rWe,oS,tWe,aWe,nWe,If,ste,sWe,lWe,rS,iWe,dWe,cWe,Nf,lte,fWe,mWe,tS,gWe,hWe,pWe,qf,ite,uWe,_We,aS,bWe,vWe,FWe,jf,dte,TWe,MWe,nS,EWe,CWe,wWe,Df,cte,AWe,LWe,sS,yWe,xWe,$We,Gf,fte,kWe,SWe,lS,RWe,PWe,BWe,Of,mte,IWe,NWe,iS,qWe,jWe,DWe,Vf,gte,GWe,OWe,dS,VWe,XWe,zWe,Xf,hte,WWe,QWe,cS,HWe,UWe,JWe,zf,pte,YWe,KWe,fS,ZWe,eQe,oQe,Wf,ute,rQe,tQe,mS,aQe,nQe,sQe,Qf,_te,lQe,iQe,gS,dQe,cQe,fQe,Hf,bte,mQe,gQe,hS,hQe,pQe,uQe,Uf,vte,_Qe,bQe,pS,vQe,FQe,TQe,Jf,Fte,MQe,EQe,uS,CQe,wQe,AQe,Yf,Tte,LQe,yQe,_S,xQe,$Qe,kQe,Kf,Mte,SQe,RQe,bS,PQe,BQe,IQe,Zf,Ete,NQe,qQe,vS,jQe,DQe,GQe,em,Cte,OQe,VQe,FS,XQe,zQe,WQe,om,wte,QQe,HQe,TS,UQe,JQe,YQe,rm,Ate,KQe,ZQe,MS,eHe,oHe,rHe,tm,Lte,tHe,aHe,ES,nHe,sHe,lHe,am,yte,iHe,dHe,CS,cHe,fHe,mHe,nm,xte,gHe,hHe,wS,pHe,uHe,_He,sm,$te,bHe,vHe,AS,FHe,THe,MHe,lm,kte,EHe,CHe,LS,wHe,AHe,LHe,im,Ste,yHe,xHe,yS,$He,kHe,SHe,dm,Rte,RHe,PHe,xS,BHe,IHe,NHe,cm,Pte,qHe,jHe,$S,DHe,GHe,OHe,fm,Bte,VHe,XHe,kS,zHe,WHe,QHe,mm,Ite,HHe,UHe,SS,JHe,YHe,KHe,gm,Nte,ZHe,eUe,RS,oUe,rUe,tUe,hm,qte,aUe,nUe,PS,sUe,lUe,iUe,pm,jte,dUe,cUe,BS,fUe,mUe,gUe,um,Dte,hUe,pUe,IS,uUe,_Ue,bUe,_m,Gte,vUe,FUe,NS,TUe,MUe,EUe,bm,Ote,CUe,wUe,qS,AUe,LUe,yUe,vm,Vte,xUe,$Ue,jS,kUe,SUe,RUe,Fm,Xte,PUe,BUe,DS,IUe,NUe,qUe,Tm,zte,jUe,DUe,GS,GUe,OUe,VUe,Mm,Wte,XUe,zUe,OS,WUe,QUe,HUe,Em,Qte,UUe,JUe,VS,YUe,KUe,ZUe,Cm,Hte,eJe,oJe,XS,rJe,tJe,aJe,wm,Ute,nJe,sJe,zS,lJe,iJe,dJe,Am,Jte,cJe,fJe,WS,mJe,gJe,hJe,Lm,Yte,pJe,uJe,QS,_Je,bJe,vJe,ym,Kte,FJe,TJe,HS,MJe,EJe,CJe,xm,Zte,wJe,AJe,US,LJe,yJe,xJe,$m,eae,$Je,kJe,JS,SJe,RJe,PJe,km,oae,BJe,IJe,YS,NJe,qJe,jJe,Sm,rae,DJe,GJe,KS,OJe,VJe,XJe,Rm,tae,zJe,WJe,ZS,QJe,HJe,UJe,Pm,aae,JJe,YJe,eR,KJe,ZJe,eYe,Bm,nae,oYe,rYe,oR,tYe,aYe,nYe,Im,sae,sYe,lYe,rR,iYe,dYe,cYe,Nm,lae,fYe,mYe,tR,gYe,hYe,pYe,qm,iae,uYe,_Ye,aR,bYe,vYe,FYe,jm,dae,TYe,MYe,nR,EYe,CYe,wYe,Dm,cae,AYe,LYe,sR,yYe,xYe,$Ye,Gm,fae,kYe,SYe,lR,RYe,PYe,BYe,Om,mae,IYe,NYe,iR,qYe,jYe,DYe,Vm,gae,GYe,OYe,dR,VYe,XYe,zYe,Xm,hae,WYe,QYe,cR,HYe,UYe,JYe,zm,pae,YYe,KYe,fR,ZYe,eKe,oKe,Wm,uae,rKe,tKe,mR,aKe,nKe,sKe,Qm,_ae,lKe,iKe,gR,dKe,cKe,fKe,Hm,bae,mKe,gKe,hR,hKe,pKe,uKe,Um,vae,_Ke,bKe,pR,vKe,FKe,TKe,Jm,Fae,MKe,EKe,uR,CKe,wKe,AKe,Ym,Tae,LKe,yKe,_R,xKe,$Ke,kKe,Km,Mae,SKe,RKe,bR,PKe,BKe,IKe,Zm,Eae,NKe,qKe,vR,jKe,DKe,GKe,eg,Cae,OKe,VKe,FR,XKe,zKe,WKe,og,wae,QKe,HKe,TR,UKe,JKe,YKe,rg,Aae,KKe,ZKe,MR,eZe,oZe,rZe,tg,Lae,tZe,aZe,ER,nZe,sZe,lZe,ag,yae,iZe,dZe,CR,cZe,fZe,mZe,ng,xae,gZe,hZe,wR,pZe,uZe,_Ze,sg,$ae,bZe,vZe,AR,FZe,TZe,MZe,lg,kae,EZe,CZe,LR,wZe,AZe,LZe,ig,Sae,yZe,xZe,yR,$Ze,kZe,SZe,dg,Rae,RZe,PZe,xR,BZe,IZe,NZe,cg,Pae,qZe,jZe,$R,DZe,GZe,OZe,fg,Bae,VZe,XZe,kR,zZe,WZe,QZe,mg,Iae,HZe,UZe,SR,JZe,YZe,KZe,gg,Nae,ZZe,eeo,RR,oeo,reo,teo,hg,qae,aeo,neo,PR,seo,leo,ieo,pg,jae,deo,ceo,BR,feo,meo,geo,ug,Dae,heo,peo,IR,ueo,_eo,beo,_g,Gae,veo,Feo,NR,Teo,Meo,Eeo,bg,Oae,Ceo,weo,qR,Aeo,Leo,yeo,vg,Vae,xeo,$eo,jR,keo,Seo,Reo,Fg,Xae,Peo,Beo,DR,Ieo,Neo,qeo,Tg,zae,jeo,Deo,GR,Geo,Oeo,Veo,Mg,Wae,Xeo,zeo,OR,Weo,Qeo,Heo,Eg,Qae,Ueo,Jeo,VR,Yeo,Keo,Zeo,Cg,Hae,eoo,ooo,XR,roo,too,aoo,wg,Uae,noo,soo,zR,loo,ioo,doo,Ag,Jae,coo,foo,WR,moo,goo,hoo,Lg,Yae,poo,uoo,QR,_oo,boo,voo,yg,Kae,Foo,Too,HR,Moo,Eoo,Coo,xg,Zae,woo,Aoo,UR,Loo,yoo,xoo,$g,ene,$oo,koo,JR,Soo,Roo,Poo,kg,one,Boo,Ioo,YR,Noo,qoo,joo,Sg,rne,Doo,Goo,KR,Ooo,Voo,Xoo,Rg,tne,zoo,Woo,ZR,Qoo,Hoo,Uoo,Pg,ane,Joo,Yoo,eP,Koo,Zoo,ero,Bg,nne,oro,rro,oP,tro,aro,nro,Ig,sne,sro,lro,rP,iro,dro,cro,Ng,lne,fro,mro,tP,gro,hro,pro,qg,ine,uro,_ro,aP,bro,vro,Fro,jg,Tro,Dg,yy,Mro,dne,Ero,gGe,$i,Gg,cne,xy,Cro,fne,wro,hGe,Ao,$y,Aro,ky,Lro,nP,yro,xro,$ro,Sy,kro,mne,Sro,Rro,Pro,Ar,Ry,Bro,gne,Iro,Nro,$a,qro,hne,jro,Dro,pne,Gro,Oro,une,Vro,Xro,zro,k,Nn,_ne,Wro,Qro,sP,Hro,Uro,lP,Jro,Yro,Kro,qn,bne,Zro,eto,iP,oto,rto,dP,tto,ato,nto,jn,vne,sto,lto,cP,ito,dto,fP,cto,fto,mto,Og,Fne,gto,hto,mP,pto,uto,_to,Dn,Tne,bto,vto,gP,Fto,Tto,hP,Mto,Eto,Cto,Vg,Mne,wto,Ato,pP,Lto,yto,xto,Xg,Ene,$to,kto,uP,Sto,Rto,Pto,zg,Cne,Bto,Ito,_P,Nto,qto,jto,Gn,wne,Dto,Gto,bP,Oto,Vto,vP,Xto,zto,Wto,On,Ane,Qto,Hto,FP,Uto,Jto,TP,Yto,Kto,Zto,Vn,Lne,eao,oao,MP,rao,tao,EP,aao,nao,sao,Wg,yne,lao,iao,CP,dao,cao,fao,Qg,xne,mao,gao,wP,hao,pao,uao,Hg,$ne,_ao,bao,AP,vao,Fao,Tao,Xn,kne,Mao,Eao,LP,Cao,wao,yP,Aao,Lao,yao,Ug,Sne,xao,$ao,xP,kao,Sao,Rao,zn,Rne,Pao,Bao,$P,Iao,Nao,kP,qao,jao,Dao,Wn,Pne,Gao,Oao,SP,Vao,Xao,RP,zao,Wao,Qao,Qn,Bne,Hao,Uao,PP,Jao,Yao,BP,Kao,Zao,eno,Jg,Ine,ono,rno,IP,tno,ano,nno,Hn,Nne,sno,lno,NP,ino,dno,qP,cno,fno,mno,Un,qne,gno,hno,jP,pno,uno,DP,_no,bno,vno,Jn,jne,Fno,Tno,GP,Mno,Eno,OP,Cno,wno,Ano,Yn,Dne,Lno,yno,VP,xno,$no,XP,kno,Sno,Rno,Kn,Gne,Pno,Bno,zP,Ino,Nno,WP,qno,jno,Dno,Zn,One,Gno,Ono,QP,Vno,Xno,HP,zno,Wno,Qno,Yg,Vne,Hno,Uno,UP,Jno,Yno,Kno,es,Xne,Zno,eso,JP,oso,rso,YP,tso,aso,nso,Kg,zne,sso,lso,KP,iso,dso,cso,os,Wne,fso,mso,ZP,gso,hso,eB,pso,uso,_so,rs,Qne,bso,vso,oB,Fso,Tso,rB,Mso,Eso,Cso,ts,Hne,wso,Aso,tB,Lso,yso,aB,xso,$so,kso,Zg,Une,Sso,Rso,nB,Pso,Bso,Iso,as,Jne,Nso,qso,sB,jso,Dso,lB,Gso,Oso,Vso,ns,Yne,Xso,zso,iB,Wso,Qso,dB,Hso,Uso,Jso,eh,Kne,Yso,Kso,cB,Zso,elo,olo,ss,Zne,rlo,tlo,fB,alo,nlo,mB,slo,llo,ilo,ls,ese,dlo,clo,gB,flo,mlo,hB,glo,hlo,plo,is,ose,ulo,_lo,pB,blo,vlo,uB,Flo,Tlo,Mlo,ds,rse,Elo,Clo,_B,wlo,Alo,bB,Llo,ylo,xlo,cs,tse,$lo,klo,vB,Slo,Rlo,FB,Plo,Blo,Ilo,fs,ase,Nlo,qlo,TB,jlo,Dlo,MB,Glo,Olo,Vlo,ms,nse,Xlo,zlo,EB,Wlo,Qlo,CB,Hlo,Ulo,Jlo,gs,sse,Ylo,Klo,wB,Zlo,eio,AB,oio,rio,tio,oh,lse,aio,nio,LB,sio,lio,iio,hs,ise,dio,cio,yB,fio,mio,xB,gio,hio,pio,rh,dse,uio,_io,$B,bio,vio,Fio,th,cse,Tio,Mio,kB,Eio,Cio,wio,ps,fse,Aio,Lio,SB,yio,xio,RB,$io,kio,Sio,us,mse,Rio,Pio,PB,Bio,Iio,BB,Nio,qio,jio,_s,gse,Dio,Gio,IB,Oio,Vio,NB,Xio,zio,Wio,ah,hse,Qio,Hio,qB,Uio,Jio,Yio,bs,pse,Kio,Zio,jB,edo,odo,DB,rdo,tdo,ado,vs,use,ndo,sdo,GB,ldo,ido,OB,ddo,cdo,fdo,Fs,_se,mdo,gdo,VB,hdo,pdo,XB,udo,_do,bdo,Ts,bse,vdo,Fdo,zB,Tdo,Mdo,WB,Edo,Cdo,wdo,Ms,vse,Ado,Ldo,QB,ydo,xdo,HB,$do,kdo,Sdo,nh,Fse,Rdo,Pdo,UB,Bdo,Ido,Ndo,Es,Tse,qdo,jdo,JB,Ddo,Gdo,YB,Odo,Vdo,Xdo,sh,Mse,zdo,Wdo,KB,Qdo,Hdo,Udo,lh,Ese,Jdo,Ydo,ZB,Kdo,Zdo,eco,ih,Cse,oco,rco,eI,tco,aco,nco,dh,wse,sco,lco,oI,ico,dco,cco,Cs,Ase,fco,mco,rI,gco,hco,tI,pco,uco,_co,ch,Lse,bco,vco,aI,Fco,Tco,Mco,ws,yse,Eco,Cco,nI,wco,Aco,sI,Lco,yco,xco,As,xse,$co,kco,lI,Sco,Rco,iI,Pco,Bco,Ico,Ls,$se,Nco,qco,dI,jco,Dco,cI,Gco,Oco,Vco,ys,kse,Xco,zco,fI,Wco,Qco,mI,Hco,Uco,Jco,xs,Sse,Yco,Kco,gI,Zco,efo,hI,ofo,rfo,tfo,$s,Rse,afo,nfo,pI,sfo,lfo,uI,ifo,dfo,cfo,fh,Pse,ffo,mfo,_I,gfo,hfo,pfo,mh,Bse,ufo,_fo,bI,bfo,vfo,Ffo,ks,Ise,Tfo,Mfo,vI,Efo,Cfo,FI,wfo,Afo,Lfo,Ss,Nse,yfo,xfo,TI,$fo,kfo,MI,Sfo,Rfo,Pfo,Rs,qse,Bfo,Ifo,EI,Nfo,qfo,CI,jfo,Dfo,Gfo,gh,jse,Ofo,Vfo,wI,Xfo,zfo,Wfo,hh,Dse,Qfo,Hfo,AI,Ufo,Jfo,Yfo,ph,Gse,Kfo,Zfo,LI,emo,omo,rmo,Ps,Ose,tmo,amo,yI,nmo,smo,xI,lmo,imo,dmo,Bs,Vse,cmo,fmo,$I,mmo,gmo,kI,hmo,pmo,umo,uh,Xse,_mo,bmo,SI,vmo,Fmo,Tmo,_h,zse,Mmo,Emo,RI,Cmo,wmo,Amo,bh,Wse,Lmo,ymo,PI,xmo,$mo,kmo,Is,Qse,Smo,Rmo,BI,Pmo,Bmo,II,Imo,Nmo,qmo,vh,Hse,jmo,Dmo,NI,Gmo,Omo,Vmo,Fh,Use,Xmo,zmo,qI,Wmo,Qmo,Hmo,Ns,Jse,Umo,Jmo,jI,Ymo,Kmo,DI,Zmo,ego,ogo,qs,Yse,rgo,tgo,GI,ago,ngo,OI,sgo,lgo,igo,js,Kse,dgo,cgo,VI,fgo,mgo,XI,ggo,hgo,pgo,Ds,Zse,ugo,_go,zI,bgo,vgo,WI,Fgo,Tgo,Mgo,Th,Ego,Mh,Py,Cgo,ele,wgo,pGe,ki,Eh,ole,By,Ago,rle,Lgo,uGe,Lo,Iy,ygo,Ny,xgo,QI,$go,kgo,Sgo,qy,Rgo,tle,Pgo,Bgo,Igo,He,jy,Ngo,ale,qgo,jgo,ka,Dgo,nle,Ggo,Ogo,sle,Vgo,Xgo,lle,zgo,Wgo,Qgo,Y,Ch,ile,Hgo,Ugo,HI,Jgo,Ygo,Kgo,wh,dle,Zgo,eho,UI,oho,rho,tho,Ah,cle,aho,nho,JI,sho,lho,iho,Lh,fle,dho,cho,YI,fho,mho,gho,yh,mle,hho,pho,KI,uho,_ho,bho,xh,gle,vho,Fho,ZI,Tho,Mho,Eho,$h,hle,Cho,who,eN,Aho,Lho,yho,kh,ple,xho,$ho,oN,kho,Sho,Rho,Sh,ule,Pho,Bho,rN,Iho,Nho,qho,Rh,_le,jho,Dho,tN,Gho,Oho,Vho,Ph,ble,Xho,zho,aN,Who,Qho,Hho,Bh,vle,Uho,Jho,nN,Yho,Kho,Zho,Ih,Fle,epo,opo,sN,rpo,tpo,apo,Nh,Tle,npo,spo,lN,lpo,ipo,dpo,qh,Mle,cpo,fpo,iN,mpo,gpo,hpo,jh,Ele,ppo,upo,dN,_po,bpo,vpo,Dh,Cle,Fpo,Tpo,cN,Mpo,Epo,Cpo,Gh,wle,wpo,Apo,fN,Lpo,ypo,xpo,Oh,Ale,$po,kpo,mN,Spo,Rpo,Ppo,Vh,Lle,Bpo,Ipo,gN,Npo,qpo,jpo,Xh,yle,Dpo,Gpo,hN,Opo,Vpo,Xpo,zh,xle,zpo,Wpo,pN,Qpo,Hpo,Upo,Wh,$le,Jpo,Ypo,uN,Kpo,Zpo,euo,Qh,kle,ouo,ruo,_N,tuo,auo,nuo,Hh,Sle,suo,luo,bN,iuo,duo,cuo,Uh,Rle,fuo,muo,vN,guo,huo,puo,Jh,Ple,uuo,_uo,FN,buo,vuo,Fuo,Yh,Ble,Tuo,Muo,TN,Euo,Cuo,wuo,Kh,Ile,Auo,Luo,MN,yuo,xuo,$uo,Zh,Nle,kuo,Suo,EN,Ruo,Puo,Buo,ep,qle,Iuo,Nuo,CN,quo,juo,Duo,op,jle,Guo,Ouo,wN,Vuo,Xuo,zuo,rp,Wuo,tp,Quo,ap,Dy,Huo,Dle,Uuo,_Ge,Si,np,Gle,Gy,Juo,Ole,Yuo,bGe,yo,Oy,Kuo,Vy,Zuo,AN,e_o,o_o,r_o,Xy,t_o,Vle,a_o,n_o,s_o,Ue,zy,l_o,Xle,i_o,d_o,Ri,c_o,zle,f_o,m_o,Wle,g_o,h_o,p_o,he,sp,Qle,u_o,__o,LN,b_o,v_o,F_o,lp,Hle,T_o,M_o,Ule,E_o,C_o,w_o,ip,Jle,A_o,L_o,yN,y_o,x_o,$_o,dp,Yle,k_o,S_o,xN,R_o,P_o,B_o,cp,Kle,I_o,N_o,$N,q_o,j_o,D_o,fp,Zle,G_o,O_o,kN,V_o,X_o,z_o,mp,eie,W_o,Q_o,SN,H_o,U_o,J_o,gp,oie,Y_o,K_o,RN,Z_o,e1o,o1o,hp,rie,r1o,t1o,PN,a1o,n1o,s1o,pp,tie,l1o,i1o,BN,d1o,c1o,f1o,up,aie,m1o,g1o,IN,h1o,p1o,u1o,_p,nie,_1o,b1o,NN,v1o,F1o,T1o,bp,sie,M1o,E1o,qN,C1o,w1o,A1o,vp,lie,L1o,y1o,jN,x1o,$1o,k1o,Fp,iie,S1o,R1o,DN,P1o,B1o,I1o,Tp,die,N1o,q1o,GN,j1o,D1o,G1o,Mp,cie,O1o,V1o,ON,X1o,z1o,W1o,Ep,Q1o,Cp,H1o,wp,Wy,U1o,fie,J1o,vGe,Pi,Ap,mie,Qy,Y1o,gie,K1o,FGe,xo,Hy,Z1o,Bi,e2o,VN,o2o,r2o,XN,t2o,a2o,n2o,Uy,s2o,hie,l2o,i2o,d2o,nt,Jy,c2o,pie,f2o,m2o,Ii,g2o,uie,h2o,p2o,zN,u2o,_2o,b2o,Lp,v2o,Je,Yy,F2o,_ie,T2o,M2o,Sa,E2o,bie,C2o,w2o,vie,A2o,L2o,Fie,y2o,x2o,$2o,x,yp,Tie,k2o,S2o,WN,R2o,P2o,B2o,xp,Mie,I2o,N2o,QN,q2o,j2o,D2o,$p,Eie,G2o,O2o,HN,V2o,X2o,z2o,kp,Cie,W2o,Q2o,UN,H2o,U2o,J2o,Sp,wie,Y2o,K2o,JN,Z2o,ebo,obo,Rp,Aie,rbo,tbo,YN,abo,nbo,sbo,Pp,Lie,lbo,ibo,KN,dbo,cbo,fbo,Bp,yie,mbo,gbo,ZN,hbo,pbo,ubo,Ip,xie,_bo,bbo,eq,vbo,Fbo,Tbo,Np,$ie,Mbo,Ebo,oq,Cbo,wbo,Abo,qp,kie,Lbo,ybo,rq,xbo,$bo,kbo,jp,Sie,Sbo,Rbo,tq,Pbo,Bbo,Ibo,Dp,Rie,Nbo,qbo,aq,jbo,Dbo,Gbo,Gp,Pie,Obo,Vbo,nq,Xbo,zbo,Wbo,Op,Bie,Qbo,Hbo,sq,Ubo,Jbo,Ybo,Vp,Iie,Kbo,Zbo,lq,e4o,o4o,r4o,Xp,Nie,t4o,a4o,iq,n4o,s4o,l4o,zp,qie,i4o,d4o,dq,c4o,f4o,m4o,Wp,jie,g4o,h4o,cq,p4o,u4o,_4o,Qp,Die,b4o,v4o,fq,F4o,T4o,M4o,Hp,Gie,E4o,C4o,mq,w4o,A4o,L4o,Up,Oie,y4o,x4o,gq,$4o,k4o,S4o,Jp,Vie,R4o,P4o,hq,B4o,I4o,N4o,Yp,Xie,q4o,j4o,pq,D4o,G4o,O4o,Kp,zie,V4o,X4o,uq,z4o,W4o,Q4o,Zp,Wie,H4o,U4o,_q,J4o,Y4o,K4o,eu,Qie,Z4o,e5o,bq,o5o,r5o,t5o,ou,Hie,a5o,n5o,vq,s5o,l5o,i5o,ru,Uie,d5o,c5o,Fq,f5o,m5o,g5o,tu,Jie,h5o,p5o,Tq,u5o,_5o,b5o,au,Yie,v5o,F5o,Mq,T5o,M5o,E5o,nu,Kie,C5o,w5o,Eq,A5o,L5o,y5o,su,Zie,x5o,$5o,Cq,k5o,S5o,R5o,Gs,ede,P5o,B5o,wq,I5o,N5o,Aq,q5o,j5o,D5o,lu,ode,G5o,O5o,Lq,V5o,X5o,z5o,iu,rde,W5o,Q5o,yq,H5o,U5o,J5o,du,tde,Y5o,K5o,xq,Z5o,evo,ovo,cu,ade,rvo,tvo,$q,avo,nvo,svo,fu,nde,lvo,ivo,kq,dvo,cvo,fvo,mu,sde,mvo,gvo,Sq,hvo,pvo,uvo,gu,lde,_vo,bvo,Rq,vvo,Fvo,Tvo,hu,ide,Mvo,Evo,Pq,Cvo,wvo,Avo,pu,dde,Lvo,yvo,Bq,xvo,$vo,kvo,uu,cde,Svo,Rvo,Iq,Pvo,Bvo,Ivo,_u,fde,Nvo,qvo,Nq,jvo,Dvo,Gvo,bu,mde,Ovo,Vvo,qq,Xvo,zvo,Wvo,vu,gde,Qvo,Hvo,jq,Uvo,Jvo,Yvo,Fu,hde,Kvo,Zvo,Dq,e3o,o3o,r3o,Tu,pde,t3o,a3o,Gq,n3o,s3o,l3o,Mu,ude,i3o,d3o,Oq,c3o,f3o,m3o,Eu,_de,g3o,h3o,Vq,p3o,u3o,_3o,Cu,bde,b3o,v3o,Xq,F3o,T3o,M3o,wu,vde,E3o,C3o,zq,w3o,A3o,L3o,Au,Fde,y3o,x3o,Wq,$3o,k3o,S3o,Lu,Tde,R3o,P3o,Qq,B3o,I3o,N3o,yu,Mde,q3o,j3o,Hq,D3o,G3o,O3o,xu,Ede,V3o,X3o,Uq,z3o,W3o,Q3o,$u,Cde,H3o,U3o,Jq,J3o,Y3o,K3o,ku,wde,Z3o,eFo,Yq,oFo,rFo,tFo,Su,Ade,aFo,nFo,Kq,sFo,lFo,iFo,Ru,Lde,dFo,cFo,Zq,fFo,mFo,gFo,Pu,yde,hFo,pFo,ej,uFo,_Fo,bFo,Bu,xde,vFo,FFo,oj,TFo,MFo,EFo,Iu,$de,CFo,wFo,rj,AFo,LFo,yFo,Nu,kde,xFo,$Fo,tj,kFo,SFo,RFo,qu,Sde,PFo,BFo,aj,IFo,NFo,qFo,ju,Rde,jFo,DFo,nj,GFo,OFo,VFo,Du,Pde,XFo,zFo,sj,WFo,QFo,HFo,Gu,Bde,UFo,JFo,lj,YFo,KFo,ZFo,Ou,Ide,e6o,o6o,ij,r6o,t6o,a6o,Vu,Nde,n6o,s6o,dj,l6o,i6o,d6o,Xu,qde,c6o,f6o,cj,m6o,g6o,h6o,zu,jde,p6o,u6o,fj,_6o,b6o,v6o,Wu,Dde,F6o,T6o,mj,M6o,E6o,C6o,Qu,Gde,w6o,A6o,gj,L6o,y6o,x6o,Hu,Ode,$6o,k6o,hj,S6o,R6o,P6o,Uu,Vde,B6o,I6o,pj,N6o,q6o,j6o,Ju,Xde,D6o,G6o,uj,O6o,V6o,X6o,Yu,zde,z6o,W6o,_j,Q6o,H6o,U6o,Ku,Wde,J6o,Y6o,bj,K6o,Z6o,eTo,Zu,Qde,oTo,rTo,vj,tTo,aTo,nTo,e_,Hde,sTo,lTo,Fj,iTo,dTo,cTo,o_,Ude,fTo,mTo,Tj,gTo,hTo,pTo,r_,Jde,uTo,_To,Mj,bTo,vTo,FTo,t_,Yde,TTo,MTo,Ej,ETo,CTo,wTo,a_,Kde,ATo,LTo,Cj,yTo,xTo,$To,n_,Zde,kTo,STo,wj,RTo,PTo,BTo,s_,ece,ITo,NTo,Aj,qTo,jTo,DTo,l_,oce,GTo,OTo,Lj,VTo,XTo,zTo,i_,rce,WTo,QTo,yj,HTo,UTo,JTo,d_,tce,YTo,KTo,xj,ZTo,eMo,oMo,c_,ace,rMo,tMo,$j,aMo,nMo,sMo,f_,nce,lMo,iMo,kj,dMo,cMo,fMo,m_,sce,mMo,gMo,Sj,hMo,pMo,uMo,g_,lce,_Mo,bMo,Rj,vMo,FMo,TMo,h_,ice,MMo,EMo,Pj,CMo,wMo,AMo,p_,dce,LMo,yMo,Bj,xMo,$Mo,kMo,u_,cce,SMo,RMo,Ij,PMo,BMo,IMo,__,fce,NMo,qMo,Nj,jMo,DMo,GMo,b_,mce,OMo,VMo,qj,XMo,zMo,WMo,v_,gce,QMo,HMo,jj,UMo,JMo,YMo,F_,hce,KMo,ZMo,Dj,eEo,oEo,rEo,T_,pce,tEo,aEo,Gj,nEo,sEo,lEo,M_,uce,iEo,dEo,Oj,cEo,fEo,mEo,E_,_ce,gEo,hEo,Vj,pEo,uEo,_Eo,C_,bce,bEo,vEo,Xj,FEo,TEo,MEo,w_,EEo,vce,CEo,wEo,Fce,AEo,LEo,A_,TGe,Ni,L_,Tce,Ky,yEo,Mce,xEo,MGe,$o,Zy,$Eo,qi,kEo,zj,SEo,REo,Wj,PEo,BEo,IEo,e7,NEo,Ece,qEo,jEo,DEo,st,o7,GEo,Cce,OEo,VEo,ji,XEo,wce,zEo,WEo,Qj,QEo,HEo,UEo,y_,JEo,Ye,r7,YEo,Ace,KEo,ZEo,Ra,eCo,Lce,oCo,rCo,yce,tCo,aCo,xce,nCo,sCo,lCo,G,x_,$ce,iCo,dCo,Hj,cCo,fCo,mCo,$_,kce,gCo,hCo,Uj,pCo,uCo,_Co,k_,Sce,bCo,vCo,Jj,FCo,TCo,MCo,S_,Rce,ECo,CCo,Yj,wCo,ACo,LCo,R_,Pce,yCo,xCo,Kj,$Co,kCo,SCo,P_,Bce,RCo,PCo,Zj,BCo,ICo,NCo,B_,Ice,qCo,jCo,eD,DCo,GCo,OCo,I_,Nce,VCo,XCo,oD,zCo,WCo,QCo,N_,qce,HCo,UCo,rD,JCo,YCo,KCo,q_,jce,ZCo,e0o,tD,o0o,r0o,t0o,j_,Dce,a0o,n0o,aD,s0o,l0o,i0o,D_,Gce,d0o,c0o,nD,f0o,m0o,g0o,G_,Oce,h0o,p0o,sD,u0o,_0o,b0o,O_,Vce,v0o,F0o,lD,T0o,M0o,E0o,V_,Xce,C0o,w0o,iD,A0o,L0o,y0o,X_,zce,x0o,$0o,dD,k0o,S0o,R0o,z_,Wce,P0o,B0o,cD,I0o,N0o,q0o,W_,Qce,j0o,D0o,fD,G0o,O0o,V0o,Q_,Hce,X0o,z0o,mD,W0o,Q0o,H0o,H_,Uce,U0o,J0o,gD,Y0o,K0o,Z0o,U_,Jce,ewo,owo,hD,rwo,two,awo,J_,Yce,nwo,swo,pD,lwo,iwo,dwo,Y_,Kce,cwo,fwo,uD,mwo,gwo,hwo,K_,Zce,pwo,uwo,_D,_wo,bwo,vwo,Z_,efe,Fwo,Two,bD,Mwo,Ewo,Cwo,e1,ofe,wwo,Awo,vD,Lwo,ywo,xwo,o1,rfe,$wo,kwo,FD,Swo,Rwo,Pwo,r1,tfe,Bwo,Iwo,TD,Nwo,qwo,jwo,t1,afe,Dwo,Gwo,MD,Owo,Vwo,Xwo,a1,nfe,zwo,Wwo,ED,Qwo,Hwo,Uwo,n1,sfe,Jwo,Ywo,CD,Kwo,Zwo,eAo,s1,lfe,oAo,rAo,wD,tAo,aAo,nAo,l1,ife,sAo,lAo,AD,iAo,dAo,cAo,i1,dfe,fAo,mAo,LD,gAo,hAo,pAo,d1,cfe,uAo,_Ao,yD,bAo,vAo,FAo,c1,ffe,TAo,MAo,xD,EAo,CAo,wAo,f1,mfe,AAo,LAo,$D,yAo,xAo,$Ao,m1,gfe,kAo,SAo,kD,RAo,PAo,BAo,g1,hfe,IAo,NAo,SD,qAo,jAo,DAo,h1,pfe,GAo,OAo,RD,VAo,XAo,zAo,p1,ufe,WAo,QAo,PD,HAo,UAo,JAo,u1,_fe,YAo,KAo,BD,ZAo,eLo,oLo,_1,bfe,rLo,tLo,ID,aLo,nLo,sLo,b1,lLo,vfe,iLo,dLo,Ffe,cLo,fLo,v1,EGe,Di,F1,Tfe,t7,mLo,Mfe,gLo,CGe,ko,a7,hLo,Gi,pLo,ND,uLo,_Lo,qD,bLo,vLo,FLo,n7,TLo,Efe,MLo,ELo,CLo,lt,s7,wLo,Cfe,ALo,LLo,Oi,yLo,wfe,xLo,$Lo,jD,kLo,SLo,RLo,T1,PLo,Ke,l7,BLo,Afe,ILo,NLo,Pa,qLo,Lfe,jLo,DLo,yfe,GLo,OLo,xfe,VLo,XLo,zLo,z,M1,$fe,WLo,QLo,DD,HLo,ULo,JLo,E1,kfe,YLo,KLo,GD,ZLo,eyo,oyo,C1,Sfe,ryo,tyo,OD,ayo,nyo,syo,w1,Rfe,lyo,iyo,VD,dyo,cyo,fyo,A1,Pfe,myo,gyo,XD,hyo,pyo,uyo,L1,Bfe,_yo,byo,zD,vyo,Fyo,Tyo,y1,Ife,Myo,Eyo,WD,Cyo,wyo,Ayo,x1,Nfe,Lyo,yyo,QD,xyo,$yo,kyo,$1,qfe,Syo,Ryo,HD,Pyo,Byo,Iyo,k1,jfe,Nyo,qyo,UD,jyo,Dyo,Gyo,S1,Dfe,Oyo,Vyo,JD,Xyo,zyo,Wyo,R1,Gfe,Qyo,Hyo,YD,Uyo,Jyo,Yyo,P1,Ofe,Kyo,Zyo,KD,e7o,o7o,r7o,B1,Vfe,t7o,a7o,ZD,n7o,s7o,l7o,I1,Xfe,i7o,d7o,eG,c7o,f7o,m7o,N1,zfe,g7o,h7o,oG,p7o,u7o,_7o,q1,Wfe,b7o,v7o,rG,F7o,T7o,M7o,j1,Qfe,E7o,C7o,tG,w7o,A7o,L7o,D1,Hfe,y7o,x7o,aG,$7o,k7o,S7o,G1,Ufe,R7o,P7o,nG,B7o,I7o,N7o,O1,Jfe,q7o,j7o,sG,D7o,G7o,O7o,V1,Yfe,V7o,X7o,lG,z7o,W7o,Q7o,X1,Kfe,H7o,U7o,iG,J7o,Y7o,K7o,z1,Zfe,Z7o,e8o,dG,o8o,r8o,t8o,W1,eme,a8o,n8o,cG,s8o,l8o,i8o,Q1,ome,d8o,c8o,fG,f8o,m8o,g8o,H1,rme,h8o,p8o,mG,u8o,_8o,b8o,U1,tme,v8o,F8o,gG,T8o,M8o,E8o,J1,ame,C8o,w8o,hG,A8o,L8o,y8o,Y1,nme,x8o,$8o,pG,k8o,S8o,R8o,K1,sme,P8o,B8o,uG,I8o,N8o,q8o,Z1,lme,j8o,D8o,_G,G8o,O8o,V8o,e2,ime,X8o,z8o,bG,W8o,Q8o,H8o,o2,dme,U8o,J8o,vG,Y8o,K8o,Z8o,r2,cme,e9o,o9o,FG,r9o,t9o,a9o,t2,fme,n9o,s9o,TG,l9o,i9o,d9o,a2,mme,c9o,f9o,MG,m9o,g9o,h9o,n2,gme,p9o,u9o,EG,_9o,b9o,v9o,s2,F9o,hme,T9o,M9o,pme,E9o,C9o,l2,wGe,Vi,i2,ume,i7,w9o,_me,A9o,AGe,So,d7,L9o,Xi,y9o,CG,x9o,$9o,wG,k9o,S9o,R9o,c7,P9o,bme,B9o,I9o,N9o,it,f7,q9o,vme,j9o,D9o,zi,G9o,Fme,O9o,V9o,AG,X9o,z9o,W9o,d2,Q9o,Ze,m7,H9o,Tme,U9o,J9o,Ba,Y9o,Mme,K9o,Z9o,Eme,exo,oxo,Cme,rxo,txo,axo,Q,c2,wme,nxo,sxo,LG,lxo,ixo,dxo,f2,Ame,cxo,fxo,yG,mxo,gxo,hxo,m2,Lme,pxo,uxo,xG,_xo,bxo,vxo,g2,yme,Fxo,Txo,$G,Mxo,Exo,Cxo,h2,xme,wxo,Axo,kG,Lxo,yxo,xxo,p2,$me,$xo,kxo,SG,Sxo,Rxo,Pxo,u2,kme,Bxo,Ixo,RG,Nxo,qxo,jxo,_2,Sme,Dxo,Gxo,PG,Oxo,Vxo,Xxo,b2,Rme,zxo,Wxo,BG,Qxo,Hxo,Uxo,v2,Pme,Jxo,Yxo,IG,Kxo,Zxo,e$o,F2,Bme,o$o,r$o,NG,t$o,a$o,n$o,T2,Ime,s$o,l$o,qG,i$o,d$o,c$o,M2,Nme,f$o,m$o,jG,g$o,h$o,p$o,E2,qme,u$o,_$o,DG,b$o,v$o,F$o,C2,jme,T$o,M$o,GG,E$o,C$o,w$o,w2,Dme,A$o,L$o,OG,y$o,x$o,$$o,A2,Gme,k$o,S$o,VG,R$o,P$o,B$o,L2,Ome,I$o,N$o,XG,q$o,j$o,D$o,y2,Vme,G$o,O$o,zG,V$o,X$o,z$o,x2,Xme,W$o,Q$o,WG,H$o,U$o,J$o,$2,zme,Y$o,K$o,QG,Z$o,eko,oko,k2,Wme,rko,tko,HG,ako,nko,sko,S2,Qme,lko,iko,UG,dko,cko,fko,R2,Hme,mko,gko,JG,hko,pko,uko,P2,Ume,_ko,bko,YG,vko,Fko,Tko,B2,Jme,Mko,Eko,KG,Cko,wko,Ako,I2,Yme,Lko,yko,ZG,xko,$ko,kko,N2,Kme,Sko,Rko,eO,Pko,Bko,Iko,q2,Zme,Nko,qko,oO,jko,Dko,Gko,j2,ege,Oko,Vko,rO,Xko,zko,Wko,D2,oge,Qko,Hko,tO,Uko,Jko,Yko,G2,rge,Kko,Zko,tge,eSo,oSo,rSo,O2,age,tSo,aSo,aO,nSo,sSo,lSo,V2,nge,iSo,dSo,nO,cSo,fSo,mSo,X2,sge,gSo,hSo,sO,pSo,uSo,_So,z2,lge,bSo,vSo,lO,FSo,TSo,MSo,W2,ESo,ige,CSo,wSo,dge,ASo,LSo,Q2,LGe,Wi,H2,cge,g7,ySo,fge,xSo,yGe,Ro,h7,$So,Qi,kSo,iO,SSo,RSo,dO,PSo,BSo,ISo,p7,NSo,mge,qSo,jSo,DSo,dt,u7,GSo,gge,OSo,VSo,Hi,XSo,hge,zSo,WSo,cO,QSo,HSo,USo,U2,JSo,eo,_7,YSo,pge,KSo,ZSo,Ia,eRo,uge,oRo,rRo,_ge,tRo,aRo,bge,nRo,sRo,lRo,pe,J2,vge,iRo,dRo,fO,cRo,fRo,mRo,Y2,Fge,gRo,hRo,mO,pRo,uRo,_Ro,K2,Tge,bRo,vRo,gO,FRo,TRo,MRo,Z2,Mge,ERo,CRo,hO,wRo,ARo,LRo,eb,Ege,yRo,xRo,pO,$Ro,kRo,SRo,ob,Cge,RRo,PRo,uO,BRo,IRo,NRo,rb,wge,qRo,jRo,_O,DRo,GRo,ORo,tb,Age,VRo,XRo,bO,zRo,WRo,QRo,ab,Lge,HRo,URo,vO,JRo,YRo,KRo,nb,yge,ZRo,ePo,FO,oPo,rPo,tPo,sb,xge,aPo,nPo,TO,sPo,lPo,iPo,lb,$ge,dPo,cPo,MO,fPo,mPo,gPo,ib,kge,hPo,pPo,EO,uPo,_Po,bPo,db,Sge,vPo,FPo,CO,TPo,MPo,EPo,cb,Rge,CPo,wPo,wO,APo,LPo,yPo,fb,Pge,xPo,$Po,AO,kPo,SPo,RPo,mb,Bge,PPo,BPo,LO,IPo,NPo,qPo,gb,jPo,Ige,DPo,GPo,Nge,OPo,VPo,hb,xGe,Ui,pb,qge,b7,XPo,jge,zPo,$Ge,Po,v7,WPo,Ji,QPo,yO,HPo,UPo,xO,JPo,YPo,KPo,F7,ZPo,Dge,eBo,oBo,rBo,ct,T7,tBo,Gge,aBo,nBo,Yi,sBo,Oge,lBo,iBo,$O,dBo,cBo,fBo,ub,mBo,oo,M7,gBo,Vge,hBo,pBo,Na,uBo,Xge,_Bo,bBo,zge,vBo,FBo,Wge,TBo,MBo,EBo,N,_b,Qge,CBo,wBo,kO,ABo,LBo,yBo,bb,Hge,xBo,$Bo,SO,kBo,SBo,RBo,vb,Uge,PBo,BBo,RO,IBo,NBo,qBo,Fb,Jge,jBo,DBo,PO,GBo,OBo,VBo,Tb,Yge,XBo,zBo,BO,WBo,QBo,HBo,Mb,Kge,UBo,JBo,IO,YBo,KBo,ZBo,Eb,Zge,eIo,oIo,NO,rIo,tIo,aIo,Cb,ehe,nIo,sIo,qO,lIo,iIo,dIo,wb,ohe,cIo,fIo,jO,mIo,gIo,hIo,Ab,rhe,pIo,uIo,DO,_Io,bIo,vIo,Lb,the,FIo,TIo,GO,MIo,EIo,CIo,yb,ahe,wIo,AIo,OO,LIo,yIo,xIo,xb,nhe,$Io,kIo,VO,SIo,RIo,PIo,$b,she,BIo,IIo,XO,NIo,qIo,jIo,kb,lhe,DIo,GIo,zO,OIo,VIo,XIo,Sb,ihe,zIo,WIo,WO,QIo,HIo,UIo,Rb,dhe,JIo,YIo,QO,KIo,ZIo,eNo,Pb,che,oNo,rNo,HO,tNo,aNo,nNo,Bb,fhe,sNo,lNo,UO,iNo,dNo,cNo,Ib,mhe,fNo,mNo,JO,gNo,hNo,pNo,Nb,ghe,uNo,_No,YO,bNo,vNo,FNo,qb,hhe,TNo,MNo,KO,ENo,CNo,wNo,jb,phe,ANo,LNo,ZO,yNo,xNo,$No,Db,uhe,kNo,SNo,eV,RNo,PNo,BNo,Gb,_he,INo,NNo,oV,qNo,jNo,DNo,Ob,bhe,GNo,ONo,rV,VNo,XNo,zNo,Vb,vhe,WNo,QNo,tV,HNo,UNo,JNo,Xb,Fhe,YNo,KNo,aV,ZNo,eqo,oqo,zb,The,rqo,tqo,nV,aqo,nqo,sqo,Wb,Mhe,lqo,iqo,sV,dqo,cqo,fqo,Qb,Ehe,mqo,gqo,lV,hqo,pqo,uqo,Hb,Che,_qo,bqo,iV,vqo,Fqo,Tqo,Ub,whe,Mqo,Eqo,dV,Cqo,wqo,Aqo,Jb,Ahe,Lqo,yqo,cV,xqo,$qo,kqo,Yb,Lhe,Sqo,Rqo,fV,Pqo,Bqo,Iqo,Kb,yhe,Nqo,qqo,mV,jqo,Dqo,Gqo,Zb,xhe,Oqo,Vqo,gV,Xqo,zqo,Wqo,e4,$he,Qqo,Hqo,hV,Uqo,Jqo,Yqo,o4,khe,Kqo,Zqo,pV,ejo,ojo,rjo,r4,She,tjo,ajo,uV,njo,sjo,ljo,t4,Rhe,ijo,djo,_V,cjo,fjo,mjo,a4,Phe,gjo,hjo,bV,pjo,ujo,_jo,n4,Bhe,bjo,vjo,vV,Fjo,Tjo,Mjo,s4,Ihe,Ejo,Cjo,FV,wjo,Ajo,Ljo,l4,Nhe,yjo,xjo,TV,$jo,kjo,Sjo,i4,qhe,Rjo,Pjo,MV,Bjo,Ijo,Njo,d4,jhe,qjo,jjo,EV,Djo,Gjo,Ojo,c4,Dhe,Vjo,Xjo,CV,zjo,Wjo,Qjo,f4,Hjo,Ghe,Ujo,Jjo,Ohe,Yjo,Kjo,m4,kGe,Ki,g4,Vhe,E7,Zjo,Xhe,eDo,SGe,Bo,C7,oDo,Zi,rDo,wV,tDo,aDo,AV,nDo,sDo,lDo,w7,iDo,zhe,dDo,cDo,fDo,ft,A7,mDo,Whe,gDo,hDo,ed,pDo,Qhe,uDo,_Do,LV,bDo,vDo,FDo,h4,TDo,ro,L7,MDo,Hhe,EDo,CDo,qa,wDo,Uhe,ADo,LDo,Jhe,yDo,xDo,Yhe,$Do,kDo,SDo,Z,p4,Khe,RDo,PDo,yV,BDo,IDo,NDo,u4,Zhe,qDo,jDo,xV,DDo,GDo,ODo,_4,epe,VDo,XDo,$V,zDo,WDo,QDo,b4,ope,HDo,UDo,kV,JDo,YDo,KDo,v4,rpe,ZDo,eGo,SV,oGo,rGo,tGo,F4,tpe,aGo,nGo,RV,sGo,lGo,iGo,T4,ape,dGo,cGo,PV,fGo,mGo,gGo,M4,npe,hGo,pGo,BV,uGo,_Go,bGo,E4,spe,vGo,FGo,IV,TGo,MGo,EGo,C4,lpe,CGo,wGo,NV,AGo,LGo,yGo,w4,ipe,xGo,$Go,qV,kGo,SGo,RGo,A4,dpe,PGo,BGo,jV,IGo,NGo,qGo,L4,cpe,jGo,DGo,DV,GGo,OGo,VGo,y4,fpe,XGo,zGo,GV,WGo,QGo,HGo,x4,mpe,UGo,JGo,OV,YGo,KGo,ZGo,$4,gpe,eOo,oOo,VV,rOo,tOo,aOo,k4,hpe,nOo,sOo,XV,lOo,iOo,dOo,S4,ppe,cOo,fOo,zV,mOo,gOo,hOo,R4,upe,pOo,uOo,WV,_Oo,bOo,vOo,P4,_pe,FOo,TOo,QV,MOo,EOo,COo,B4,bpe,wOo,AOo,HV,LOo,yOo,xOo,I4,vpe,$Oo,kOo,UV,SOo,ROo,POo,N4,Fpe,BOo,IOo,JV,NOo,qOo,jOo,q4,Tpe,DOo,GOo,YV,OOo,VOo,XOo,j4,Mpe,zOo,WOo,KV,QOo,HOo,UOo,D4,Epe,JOo,YOo,ZV,KOo,ZOo,eVo,G4,Cpe,oVo,rVo,eX,tVo,aVo,nVo,O4,wpe,sVo,lVo,oX,iVo,dVo,cVo,V4,Ape,fVo,mVo,rX,gVo,hVo,pVo,X4,uVo,Lpe,_Vo,bVo,ype,vVo,FVo,z4,RGe,od,W4,xpe,y7,TVo,$pe,MVo,PGe,Io,x7,EVo,rd,CVo,tX,wVo,AVo,aX,LVo,yVo,xVo,$7,$Vo,kpe,kVo,SVo,RVo,mt,k7,PVo,Spe,BVo,IVo,td,NVo,Rpe,qVo,jVo,nX,DVo,GVo,OVo,Q4,VVo,to,S7,XVo,Ppe,zVo,WVo,ja,QVo,Bpe,HVo,UVo,Ipe,JVo,YVo,Npe,KVo,ZVo,eXo,Zr,H4,qpe,oXo,rXo,sX,tXo,aXo,nXo,U4,jpe,sXo,lXo,lX,iXo,dXo,cXo,J4,Dpe,fXo,mXo,iX,gXo,hXo,pXo,Y4,Gpe,uXo,_Xo,dX,bXo,vXo,FXo,K4,Ope,TXo,MXo,cX,EXo,CXo,wXo,Z4,AXo,Vpe,LXo,yXo,Xpe,xXo,$Xo,e5,BGe,ad,o5,zpe,R7,kXo,Wpe,SXo,IGe,No,P7,RXo,nd,PXo,fX,BXo,IXo,mX,NXo,qXo,jXo,B7,DXo,Qpe,GXo,OXo,VXo,gt,I7,XXo,Hpe,zXo,WXo,sd,QXo,Upe,HXo,UXo,gX,JXo,YXo,KXo,r5,ZXo,ao,N7,ezo,Jpe,ozo,rzo,Da,tzo,Ype,azo,nzo,Kpe,szo,lzo,Zpe,izo,dzo,czo,H,t5,eue,fzo,mzo,hX,gzo,hzo,pzo,a5,oue,uzo,_zo,pX,bzo,vzo,Fzo,n5,rue,Tzo,Mzo,uX,Ezo,Czo,wzo,s5,tue,Azo,Lzo,_X,yzo,xzo,$zo,l5,aue,kzo,Szo,bX,Rzo,Pzo,Bzo,i5,nue,Izo,Nzo,vX,qzo,jzo,Dzo,d5,sue,Gzo,Ozo,FX,Vzo,Xzo,zzo,c5,lue,Wzo,Qzo,TX,Hzo,Uzo,Jzo,f5,iue,Yzo,Kzo,MX,Zzo,eWo,oWo,m5,due,rWo,tWo,EX,aWo,nWo,sWo,g5,cue,lWo,iWo,CX,dWo,cWo,fWo,h5,fue,mWo,gWo,wX,hWo,pWo,uWo,p5,mue,_Wo,bWo,AX,vWo,FWo,TWo,u5,gue,MWo,EWo,LX,CWo,wWo,AWo,_5,hue,LWo,yWo,yX,xWo,$Wo,kWo,b5,pue,SWo,RWo,xX,PWo,BWo,IWo,v5,uue,NWo,qWo,$X,jWo,DWo,GWo,F5,_ue,OWo,VWo,kX,XWo,zWo,WWo,T5,bue,QWo,HWo,SX,UWo,JWo,YWo,M5,vue,KWo,ZWo,RX,eQo,oQo,rQo,E5,Fue,tQo,aQo,PX,nQo,sQo,lQo,C5,Tue,iQo,dQo,BX,cQo,fQo,mQo,w5,Mue,gQo,hQo,IX,pQo,uQo,_Qo,A5,Eue,bQo,vQo,NX,FQo,TQo,MQo,L5,Cue,EQo,CQo,qX,wQo,AQo,LQo,y5,wue,yQo,xQo,jX,$Qo,kQo,SQo,x5,Aue,RQo,PQo,DX,BQo,IQo,NQo,$5,Lue,qQo,jQo,GX,DQo,GQo,OQo,k5,yue,VQo,XQo,OX,zQo,WQo,QQo,S5,xue,HQo,UQo,VX,JQo,YQo,KQo,R5,$ue,ZQo,eHo,XX,oHo,rHo,tHo,P5,kue,aHo,nHo,zX,sHo,lHo,iHo,B5,Sue,dHo,cHo,WX,fHo,mHo,gHo,I5,Rue,hHo,pHo,QX,uHo,_Ho,bHo,N5,Pue,vHo,FHo,HX,THo,MHo,EHo,q5,CHo,Bue,wHo,AHo,Iue,LHo,yHo,j5,NGe,ld,D5,Nue,q7,xHo,que,$Ho,qGe,qo,j7,kHo,id,SHo,UX,RHo,PHo,JX,BHo,IHo,NHo,D7,qHo,jue,jHo,DHo,GHo,ht,G7,OHo,Due,VHo,XHo,dd,zHo,Gue,WHo,QHo,YX,HHo,UHo,JHo,G5,YHo,no,O7,KHo,Oue,ZHo,eUo,Ga,oUo,Vue,rUo,tUo,Xue,aUo,nUo,zue,sUo,lUo,iUo,V,O5,Wue,dUo,cUo,KX,fUo,mUo,gUo,V5,Que,hUo,pUo,ZX,uUo,_Uo,bUo,X5,Hue,vUo,FUo,ez,TUo,MUo,EUo,z5,Uue,CUo,wUo,oz,AUo,LUo,yUo,W5,Jue,xUo,$Uo,rz,kUo,SUo,RUo,Q5,Yue,PUo,BUo,tz,IUo,NUo,qUo,H5,Kue,jUo,DUo,az,GUo,OUo,VUo,U5,Zue,XUo,zUo,nz,WUo,QUo,HUo,J5,e_e,UUo,JUo,sz,YUo,KUo,ZUo,Y5,o_e,eJo,oJo,lz,rJo,tJo,aJo,K5,r_e,nJo,sJo,iz,lJo,iJo,dJo,Z5,t_e,cJo,fJo,dz,mJo,gJo,hJo,ev,a_e,pJo,uJo,cz,_Jo,bJo,vJo,ov,n_e,FJo,TJo,fz,MJo,EJo,CJo,rv,s_e,wJo,AJo,mz,LJo,yJo,xJo,tv,l_e,$Jo,kJo,gz,SJo,RJo,PJo,av,i_e,BJo,IJo,hz,NJo,qJo,jJo,nv,d_e,DJo,GJo,pz,OJo,VJo,XJo,sv,c_e,zJo,WJo,uz,QJo,HJo,UJo,lv,f_e,JJo,YJo,_z,KJo,ZJo,eYo,iv,m_e,oYo,rYo,bz,tYo,aYo,nYo,dv,g_e,sYo,lYo,vz,iYo,dYo,cYo,cv,h_e,fYo,mYo,Fz,gYo,hYo,pYo,fv,p_e,uYo,_Yo,Tz,bYo,vYo,FYo,mv,u_e,TYo,MYo,Mz,EYo,CYo,wYo,gv,__e,AYo,LYo,Ez,yYo,xYo,$Yo,hv,b_e,kYo,SYo,Cz,RYo,PYo,BYo,pv,v_e,IYo,NYo,wz,qYo,jYo,DYo,uv,F_e,GYo,OYo,Az,VYo,XYo,zYo,_v,T_e,WYo,QYo,Lz,HYo,UYo,JYo,bv,M_e,YYo,KYo,yz,ZYo,eKo,oKo,vv,E_e,rKo,tKo,xz,aKo,nKo,sKo,Fv,C_e,lKo,iKo,$z,dKo,cKo,fKo,Tv,w_e,mKo,gKo,kz,hKo,pKo,uKo,Mv,A_e,_Ko,bKo,Sz,vKo,FKo,TKo,Ev,L_e,MKo,EKo,Rz,CKo,wKo,AKo,Cv,y_e,LKo,yKo,Pz,xKo,$Ko,kKo,wv,x_e,SKo,RKo,Bz,PKo,BKo,IKo,Av,$_e,NKo,qKo,Iz,jKo,DKo,GKo,Lv,k_e,OKo,VKo,Nz,XKo,zKo,WKo,yv,QKo,S_e,HKo,UKo,R_e,JKo,YKo,xv,jGe,cd,$v,P_e,V7,KKo,B_e,ZKo,DGe,jo,X7,eZo,fd,oZo,qz,rZo,tZo,jz,aZo,nZo,sZo,z7,lZo,I_e,iZo,dZo,cZo,pt,W7,fZo,N_e,mZo,gZo,md,hZo,q_e,pZo,uZo,Dz,_Zo,bZo,vZo,kv,FZo,so,Q7,TZo,j_e,MZo,EZo,Oa,CZo,D_e,wZo,AZo,G_e,LZo,yZo,O_e,xZo,$Zo,kZo,V_e,Sv,X_e,SZo,RZo,Gz,PZo,BZo,IZo,Rv,NZo,z_e,qZo,jZo,W_e,DZo,GZo,Pv,GGe,gd,Bv,Q_e,H7,OZo,H_e,VZo,OGe,Do,U7,XZo,hd,zZo,Oz,WZo,QZo,Vz,HZo,UZo,JZo,J7,YZo,U_e,KZo,ZZo,eer,ut,Y7,oer,J_e,rer,ter,pd,aer,Y_e,ner,ser,Xz,ler,ier,der,Iv,cer,lo,K7,fer,K_e,mer,ger,Va,her,Z_e,per,uer,e1e,_er,ber,o1e,ver,Fer,Ter,Fe,Nv,r1e,Mer,Eer,zz,Cer,wer,Aer,qv,t1e,Ler,yer,Wz,xer,$er,ker,jv,a1e,Ser,Rer,Qz,Per,Ber,Ier,Dv,n1e,Ner,qer,Hz,jer,Der,Ger,Os,s1e,Oer,Ver,Uz,Xer,zer,Jz,Wer,Qer,Her,Gv,l1e,Uer,Jer,Yz,Yer,Ker,Zer,Vs,i1e,eor,oor,Kz,ror,tor,Zz,aor,nor,sor,_t,d1e,lor,ior,eW,dor,cor,oW,mor,gor,rW,hor,por,uor,Ov,c1e,_or,bor,tW,vor,For,Tor,Vv,f1e,Mor,Eor,aW,Cor,wor,Aor,Xv,m1e,Lor,yor,nW,xor,$or,kor,zv,g1e,Sor,Ror,sW,Por,Bor,Ior,Wv,h1e,Nor,qor,lW,jor,Dor,Gor,Qv,p1e,Oor,Vor,iW,Xor,zor,Wor,Hv,u1e,Qor,Hor,dW,Uor,Jor,Yor,Uv,Kor,_1e,Zor,err,b1e,orr,rrr,Jv,VGe,ud,Yv,v1e,Z7,trr,F1e,arr,XGe,Go,e8,nrr,_d,srr,cW,lrr,irr,fW,drr,crr,frr,o8,mrr,T1e,grr,hrr,prr,bt,r8,urr,M1e,_rr,brr,bd,vrr,E1e,Frr,Trr,mW,Mrr,Err,Crr,Kv,wrr,io,t8,Arr,C1e,Lrr,yrr,Xa,xrr,w1e,$rr,krr,A1e,Srr,Rrr,L1e,Prr,Brr,Irr,y1e,Zv,x1e,Nrr,qrr,gW,jrr,Drr,Grr,e3,Orr,$1e,Vrr,Xrr,k1e,zrr,Wrr,o3,zGe,vd,r3,S1e,a8,Qrr,R1e,Hrr,WGe,Oo,n8,Urr,Fd,Jrr,hW,Yrr,Krr,pW,Zrr,etr,otr,s8,rtr,P1e,ttr,atr,ntr,vt,l8,str,B1e,ltr,itr,Td,dtr,I1e,ctr,ftr,uW,mtr,gtr,htr,t3,ptr,co,i8,utr,N1e,_tr,btr,za,vtr,q1e,Ftr,Ttr,j1e,Mtr,Etr,D1e,Ctr,wtr,Atr,G1e,a3,O1e,Ltr,ytr,_W,xtr,$tr,ktr,n3,Str,V1e,Rtr,Ptr,X1e,Btr,Itr,s3,QGe,Md,l3,z1e,d8,Ntr,W1e,qtr,HGe,Vo,c8,jtr,Ed,Dtr,bW,Gtr,Otr,vW,Vtr,Xtr,ztr,f8,Wtr,Q1e,Qtr,Htr,Utr,Ft,m8,Jtr,H1e,Ytr,Ktr,Cd,Ztr,U1e,ear,oar,FW,rar,tar,aar,i3,nar,fo,g8,sar,J1e,lar,iar,Wa,dar,Y1e,car,far,K1e,mar,gar,Z1e,har,par,uar,Pe,d3,e2e,_ar,bar,TW,Far,Tar,Mar,c3,o2e,Ear,Car,MW,war,Aar,Lar,f3,r2e,yar,xar,EW,$ar,kar,Sar,m3,t2e,Rar,Par,CW,Bar,Iar,Nar,g3,a2e,qar,jar,wW,Dar,Gar,Oar,h3,n2e,Var,Xar,AW,zar,War,Qar,p3,s2e,Har,Uar,LW,Jar,Yar,Kar,u3,l2e,Zar,enr,yW,onr,rnr,tnr,_3,i2e,anr,nnr,xW,snr,lnr,inr,b3,dnr,d2e,cnr,fnr,c2e,mnr,gnr,v3,UGe,wd,F3,f2e,h8,hnr,m2e,pnr,JGe,Xo,p8,unr,Ad,_nr,$W,bnr,vnr,kW,Fnr,Tnr,Mnr,u8,Enr,g2e,Cnr,wnr,Anr,Tt,_8,Lnr,h2e,ynr,xnr,Ld,$nr,p2e,knr,Snr,SW,Rnr,Pnr,Bnr,T3,Inr,mo,b8,Nnr,u2e,qnr,jnr,Qa,Dnr,_2e,Gnr,Onr,b2e,Vnr,Xnr,v2e,znr,Wnr,Qnr,et,M3,F2e,Hnr,Unr,RW,Jnr,Ynr,Knr,E3,T2e,Znr,esr,PW,osr,rsr,tsr,C3,M2e,asr,nsr,BW,ssr,lsr,isr,w3,E2e,dsr,csr,IW,fsr,msr,gsr,A3,C2e,hsr,psr,NW,usr,_sr,bsr,L3,vsr,w2e,Fsr,Tsr,A2e,Msr,Esr,y3,YGe,yd,x3,L2e,v8,Csr,y2e,wsr,KGe,zo,F8,Asr,xd,Lsr,qW,ysr,xsr,jW,$sr,ksr,Ssr,T8,Rsr,x2e,Psr,Bsr,Isr,Mt,M8,Nsr,$2e,qsr,jsr,$d,Dsr,k2e,Gsr,Osr,DW,Vsr,Xsr,zsr,$3,Wsr,go,E8,Qsr,S2e,Hsr,Usr,Ha,Jsr,R2e,Ysr,Ksr,P2e,Zsr,elr,B2e,olr,rlr,tlr,Le,k3,I2e,alr,nlr,GW,slr,llr,ilr,S3,N2e,dlr,clr,OW,flr,mlr,glr,R3,q2e,hlr,plr,VW,ulr,_lr,blr,P3,j2e,vlr,Flr,XW,Tlr,Mlr,Elr,B3,D2e,Clr,wlr,zW,Alr,Llr,ylr,I3,G2e,xlr,$lr,WW,klr,Slr,Rlr,N3,O2e,Plr,Blr,QW,Ilr,Nlr,qlr,q3,V2e,jlr,Dlr,HW,Glr,Olr,Vlr,j3,X2e,Xlr,zlr,UW,Wlr,Qlr,Hlr,D3,z2e,Ulr,Jlr,JW,Ylr,Klr,Zlr,G3,eir,W2e,oir,rir,Q2e,tir,air,O3,ZGe,kd,V3,H2e,C8,nir,U2e,sir,eOe,Wo,w8,lir,Sd,iir,YW,dir,cir,KW,fir,mir,gir,A8,hir,J2e,pir,uir,_ir,Et,L8,bir,Y2e,vir,Fir,Rd,Tir,K2e,Mir,Eir,ZW,Cir,wir,Air,X3,Lir,ho,y8,yir,Z2e,xir,$ir,Ua,kir,ebe,Sir,Rir,obe,Pir,Bir,rbe,Iir,Nir,qir,x8,z3,tbe,jir,Dir,eQ,Gir,Oir,Vir,W3,abe,Xir,zir,oQ,Wir,Qir,Hir,Q3,Uir,nbe,Jir,Yir,sbe,Kir,Zir,H3,oOe,Pd,U3,lbe,$8,edr,ibe,odr,rOe,Qo,k8,rdr,Bd,tdr,rQ,adr,ndr,tQ,sdr,ldr,idr,S8,ddr,dbe,cdr,fdr,mdr,Ct,R8,gdr,cbe,hdr,pdr,Id,udr,fbe,_dr,bdr,aQ,vdr,Fdr,Tdr,J3,Mdr,po,P8,Edr,mbe,Cdr,wdr,Ja,Adr,gbe,Ldr,ydr,hbe,xdr,$dr,pbe,kdr,Sdr,Rdr,ot,Y3,ube,Pdr,Bdr,nQ,Idr,Ndr,qdr,K3,_be,jdr,Ddr,sQ,Gdr,Odr,Vdr,Z3,bbe,Xdr,zdr,lQ,Wdr,Qdr,Hdr,eF,vbe,Udr,Jdr,iQ,Ydr,Kdr,Zdr,oF,Fbe,ecr,ocr,dQ,rcr,tcr,acr,rF,ncr,Tbe,scr,lcr,Mbe,icr,dcr,tF,tOe,Nd,aF,Ebe,B8,ccr,Cbe,fcr,aOe,Ho,I8,mcr,qd,gcr,cQ,hcr,pcr,fQ,ucr,_cr,bcr,N8,vcr,wbe,Fcr,Tcr,Mcr,wt,q8,Ecr,Abe,Ccr,wcr,jd,Acr,Lbe,Lcr,ycr,mQ,xcr,$cr,kcr,nF,Scr,uo,j8,Rcr,ybe,Pcr,Bcr,Ya,Icr,xbe,Ncr,qcr,$be,jcr,Dcr,kbe,Gcr,Ocr,Vcr,Dd,sF,Sbe,Xcr,zcr,gQ,Wcr,Qcr,Hcr,lF,Rbe,Ucr,Jcr,hQ,Ycr,Kcr,Zcr,iF,Pbe,efr,ofr,pQ,rfr,tfr,afr,dF,nfr,Bbe,sfr,lfr,Ibe,ifr,dfr,cF,nOe,Gd,fF,Nbe,D8,cfr,qbe,ffr,sOe,Uo,G8,mfr,Od,gfr,uQ,hfr,pfr,_Q,ufr,_fr,bfr,O8,vfr,jbe,Ffr,Tfr,Mfr,At,V8,Efr,Dbe,Cfr,wfr,Vd,Afr,Gbe,Lfr,yfr,bQ,xfr,$fr,kfr,mF,Sfr,_o,X8,Rfr,Obe,Pfr,Bfr,Ka,Ifr,Vbe,Nfr,qfr,Xbe,jfr,Dfr,zbe,Gfr,Ofr,Vfr,z8,gF,Wbe,Xfr,zfr,vQ,Wfr,Qfr,Hfr,hF,Qbe,Ufr,Jfr,FQ,Yfr,Kfr,Zfr,pF,emr,Hbe,omr,rmr,Ube,tmr,amr,uF,lOe,Xd,_F,Jbe,W8,nmr,Ybe,smr,iOe,Jo,Q8,lmr,zd,imr,TQ,dmr,cmr,MQ,fmr,mmr,gmr,H8,hmr,Kbe,pmr,umr,_mr,Lt,U8,bmr,Zbe,vmr,Fmr,Wd,Tmr,e4e,Mmr,Emr,EQ,Cmr,wmr,Amr,bF,Lmr,bo,J8,ymr,o4e,xmr,$mr,Za,kmr,r4e,Smr,Rmr,t4e,Pmr,Bmr,a4e,Imr,Nmr,qmr,n4e,vF,s4e,jmr,Dmr,CQ,Gmr,Omr,Vmr,FF,Xmr,l4e,zmr,Wmr,i4e,Qmr,Hmr,TF,dOe,Qd,MF,d4e,Y8,Umr,c4e,Jmr,cOe,Yo,K8,Ymr,Hd,Kmr,wQ,Zmr,egr,AQ,ogr,rgr,tgr,Z8,agr,f4e,ngr,sgr,lgr,yt,e9,igr,m4e,dgr,cgr,Ud,fgr,g4e,mgr,ggr,LQ,hgr,pgr,ugr,EF,_gr,vo,o9,bgr,h4e,vgr,Fgr,en,Tgr,p4e,Mgr,Egr,u4e,Cgr,wgr,_4e,Agr,Lgr,ygr,on,CF,b4e,xgr,$gr,yQ,kgr,Sgr,Rgr,wF,v4e,Pgr,Bgr,xQ,Igr,Ngr,qgr,AF,F4e,jgr,Dgr,$Q,Ggr,Ogr,Vgr,LF,T4e,Xgr,zgr,kQ,Wgr,Qgr,Hgr,yF,Ugr,M4e,Jgr,Ygr,E4e,Kgr,Zgr,xF,fOe,Jd,$F,C4e,r9,ehr,w4e,ohr,mOe,Ko,t9,rhr,Yd,thr,SQ,ahr,nhr,RQ,shr,lhr,ihr,a9,dhr,A4e,chr,fhr,mhr,xt,n9,ghr,L4e,hhr,phr,Kd,uhr,y4e,_hr,bhr,PQ,vhr,Fhr,Thr,kF,Mhr,Fo,s9,Ehr,x4e,Chr,whr,rn,Ahr,$4e,Lhr,yhr,k4e,xhr,$hr,S4e,khr,Shr,Rhr,R4e,SF,P4e,Phr,Bhr,BQ,Ihr,Nhr,qhr,RF,jhr,B4e,Dhr,Ghr,I4e,Ohr,Vhr,PF,gOe,Zd,BF,N4e,l9,Xhr,q4e,zhr,hOe,Zo,i9,Whr,ec,Qhr,IQ,Hhr,Uhr,NQ,Jhr,Yhr,Khr,d9,Zhr,j4e,epr,opr,rpr,$t,c9,tpr,D4e,apr,npr,oc,spr,G4e,lpr,ipr,qQ,dpr,cpr,fpr,IF,mpr,Lr,f9,gpr,O4e,hpr,ppr,tn,upr,V4e,_pr,bpr,X4e,vpr,Fpr,z4e,Tpr,Mpr,Epr,q,NF,W4e,Cpr,wpr,jQ,Apr,Lpr,ypr,qF,Q4e,xpr,$pr,DQ,kpr,Spr,Rpr,jF,H4e,Ppr,Bpr,GQ,Ipr,Npr,qpr,DF,U4e,jpr,Dpr,OQ,Gpr,Opr,Vpr,GF,J4e,Xpr,zpr,VQ,Wpr,Qpr,Hpr,OF,Y4e,Upr,Jpr,XQ,Ypr,Kpr,Zpr,VF,K4e,eur,our,zQ,rur,tur,aur,XF,Z4e,nur,sur,WQ,lur,iur,dur,zF,e5e,cur,fur,QQ,mur,gur,hur,WF,o5e,pur,uur,HQ,_ur,bur,vur,QF,r5e,Fur,Tur,UQ,Mur,Eur,Cur,HF,t5e,wur,Aur,JQ,Lur,yur,xur,UF,a5e,$ur,kur,YQ,Sur,Rur,Pur,JF,n5e,Bur,Iur,KQ,Nur,qur,jur,YF,s5e,Dur,Gur,ZQ,Our,Vur,Xur,KF,l5e,zur,Wur,eH,Qur,Hur,Uur,ZF,i5e,Jur,Yur,oH,Kur,Zur,e_r,Xs,d5e,o_r,r_r,rH,t_r,a_r,tH,n_r,s_r,l_r,e6,c5e,i_r,d_r,aH,c_r,f_r,m_r,o6,f5e,g_r,h_r,nH,p_r,u_r,__r,r6,m5e,b_r,v_r,sH,F_r,T_r,M_r,t6,g5e,E_r,C_r,lH,w_r,A_r,L_r,a6,h5e,y_r,x_r,iH,$_r,k_r,S_r,n6,p5e,R_r,P_r,dH,B_r,I_r,N_r,s6,u5e,q_r,j_r,cH,D_r,G_r,O_r,l6,_5e,V_r,X_r,fH,z_r,W_r,Q_r,i6,b5e,H_r,U_r,mH,J_r,Y_r,K_r,d6,v5e,Z_r,e1r,gH,o1r,r1r,t1r,c6,F5e,a1r,n1r,hH,s1r,l1r,i1r,f6,T5e,d1r,c1r,pH,f1r,m1r,g1r,m6,M5e,h1r,p1r,uH,u1r,_1r,b1r,g6,E5e,v1r,F1r,_H,T1r,M1r,E1r,h6,C5e,C1r,w1r,bH,A1r,L1r,y1r,p6,w5e,x1r,$1r,vH,k1r,S1r,R1r,u6,A5e,P1r,B1r,FH,I1r,N1r,q1r,_6,L5e,j1r,D1r,TH,G1r,O1r,V1r,b6,y5e,X1r,z1r,MH,W1r,Q1r,H1r,v6,x5e,U1r,J1r,EH,Y1r,K1r,Z1r,F6,$5e,e2r,o2r,CH,r2r,t2r,a2r,T6,k5e,n2r,s2r,wH,l2r,i2r,d2r,M6,S5e,c2r,f2r,AH,m2r,g2r,h2r,E6,R5e,p2r,u2r,LH,_2r,b2r,v2r,C6,P5e,F2r,T2r,yH,M2r,E2r,C2r,w6,B5e,w2r,A2r,xH,L2r,y2r,x2r,A6,I5e,$2r,k2r,$H,S2r,R2r,P2r,L6,N5e,B2r,I2r,kH,N2r,q2r,j2r,y6,q5e,D2r,G2r,SH,O2r,V2r,X2r,x6,j5e,z2r,W2r,RH,Q2r,H2r,U2r,$6,pOe,rc,k6,D5e,m9,J2r,G5e,Y2r,uOe,er,g9,K2r,tc,Z2r,PH,ebr,obr,BH,rbr,tbr,abr,h9,nbr,O5e,sbr,lbr,ibr,kt,p9,dbr,V5e,cbr,fbr,ac,mbr,X5e,gbr,hbr,IH,pbr,ubr,_br,S6,bbr,yr,u9,vbr,z5e,Fbr,Tbr,an,Mbr,W5e,Ebr,Cbr,Q5e,wbr,Abr,H5e,Lbr,ybr,xbr,se,R6,U5e,$br,kbr,NH,Sbr,Rbr,Pbr,P6,J5e,Bbr,Ibr,qH,Nbr,qbr,jbr,B6,Y5e,Dbr,Gbr,jH,Obr,Vbr,Xbr,I6,K5e,zbr,Wbr,DH,Qbr,Hbr,Ubr,N6,Z5e,Jbr,Ybr,GH,Kbr,Zbr,e4r,q6,eve,o4r,r4r,OH,t4r,a4r,n4r,j6,ove,s4r,l4r,VH,i4r,d4r,c4r,D6,rve,f4r,m4r,XH,g4r,h4r,p4r,G6,tve,u4r,_4r,zH,b4r,v4r,F4r,O6,ave,T4r,M4r,WH,E4r,C4r,w4r,V6,nve,A4r,L4r,QH,y4r,x4r,$4r,X6,sve,k4r,S4r,HH,R4r,P4r,B4r,z6,lve,I4r,N4r,UH,q4r,j4r,D4r,W6,ive,G4r,O4r,JH,V4r,X4r,z4r,Q6,dve,W4r,Q4r,YH,H4r,U4r,J4r,H6,cve,Y4r,K4r,KH,Z4r,e5r,o5r,U6,fve,r5r,t5r,ZH,a5r,n5r,s5r,J6,mve,l5r,i5r,eU,d5r,c5r,f5r,Y6,gve,m5r,g5r,oU,h5r,p5r,u5r,K6,hve,_5r,b5r,rU,v5r,F5r,T5r,Z6,pve,M5r,E5r,tU,C5r,w5r,A5r,eT,uve,L5r,y5r,aU,x5r,$5r,k5r,oT,_ve,S5r,R5r,nU,P5r,B5r,I5r,rT,_Oe,nc,tT,bve,_9,N5r,vve,q5r,bOe,or,b9,j5r,sc,D5r,sU,G5r,O5r,lU,V5r,X5r,z5r,v9,W5r,Fve,Q5r,H5r,U5r,St,F9,J5r,Tve,Y5r,K5r,lc,Z5r,Mve,evr,ovr,iU,rvr,tvr,avr,aT,nvr,xr,T9,svr,Eve,lvr,ivr,nn,dvr,Cve,cvr,fvr,wve,mvr,gvr,Ave,hvr,pvr,uvr,Te,nT,Lve,_vr,bvr,dU,vvr,Fvr,Tvr,sT,yve,Mvr,Evr,cU,Cvr,wvr,Avr,lT,xve,Lvr,yvr,fU,xvr,$vr,kvr,iT,$ve,Svr,Rvr,mU,Pvr,Bvr,Ivr,dT,kve,Nvr,qvr,gU,jvr,Dvr,Gvr,cT,Sve,Ovr,Vvr,hU,Xvr,zvr,Wvr,fT,Rve,Qvr,Hvr,pU,Uvr,Jvr,Yvr,mT,Pve,Kvr,Zvr,uU,e3r,o3r,r3r,gT,Bve,t3r,a3r,_U,n3r,s3r,l3r,hT,Ive,i3r,d3r,bU,c3r,f3r,m3r,pT,Nve,g3r,h3r,vU,p3r,u3r,_3r,uT,qve,b3r,v3r,FU,F3r,T3r,M3r,_T,jve,E3r,C3r,TU,w3r,A3r,L3r,bT,Dve,y3r,x3r,MU,$3r,k3r,S3r,vT,vOe,ic,FT,Gve,M9,R3r,Ove,P3r,FOe,rr,E9,B3r,dc,I3r,EU,N3r,q3r,CU,j3r,D3r,G3r,C9,O3r,Vve,V3r,X3r,z3r,Rt,w9,W3r,Xve,Q3r,H3r,cc,U3r,zve,J3r,Y3r,wU,K3r,Z3r,eFr,TT,oFr,$r,A9,rFr,Wve,tFr,aFr,sn,nFr,Qve,sFr,lFr,Hve,iFr,dFr,Uve,cFr,fFr,mFr,ln,MT,Jve,gFr,hFr,AU,pFr,uFr,_Fr,ET,Yve,bFr,vFr,LU,FFr,TFr,MFr,CT,Kve,EFr,CFr,yU,wFr,AFr,LFr,wT,Zve,yFr,xFr,xU,$Fr,kFr,SFr,AT,TOe,fc,LT,e3e,L9,RFr,o3e,PFr,MOe,tr,y9,BFr,mc,IFr,$U,NFr,qFr,kU,jFr,DFr,GFr,x9,OFr,r3e,VFr,XFr,zFr,Pt,$9,WFr,t3e,QFr,HFr,gc,UFr,a3e,JFr,YFr,SU,KFr,ZFr,e6r,yT,o6r,kr,k9,r6r,n3e,t6r,a6r,dn,n6r,s3e,s6r,l6r,l3e,i6r,d6r,i3e,c6r,f6r,m6r,ie,xT,d3e,g6r,h6r,RU,p6r,u6r,_6r,$T,c3e,b6r,v6r,PU,F6r,T6r,M6r,kT,f3e,E6r,C6r,BU,w6r,A6r,L6r,ST,m3e,y6r,x6r,IU,$6r,k6r,S6r,RT,g3e,R6r,P6r,NU,B6r,I6r,N6r,PT,h3e,q6r,j6r,qU,D6r,G6r,O6r,BT,p3e,V6r,X6r,jU,z6r,W6r,Q6r,IT,u3e,H6r,U6r,DU,J6r,Y6r,K6r,NT,_3e,Z6r,eTr,GU,oTr,rTr,tTr,qT,b3e,aTr,nTr,OU,sTr,lTr,iTr,jT,v3e,dTr,cTr,VU,fTr,mTr,gTr,DT,F3e,hTr,pTr,XU,uTr,_Tr,bTr,GT,T3e,vTr,FTr,zU,TTr,MTr,ETr,OT,M3e,CTr,wTr,WU,ATr,LTr,yTr,VT,E3e,xTr,$Tr,QU,kTr,STr,RTr,XT,C3e,PTr,BTr,HU,ITr,NTr,qTr,zT,w3e,jTr,DTr,UU,GTr,OTr,VTr,WT,A3e,XTr,zTr,JU,WTr,QTr,HTr,QT,L3e,UTr,JTr,YU,YTr,KTr,ZTr,HT,y3e,eMr,oMr,KU,rMr,tMr,aMr,UT,EOe,hc,JT,x3e,S9,nMr,$3e,sMr,COe,ar,R9,lMr,pc,iMr,ZU,dMr,cMr,eJ,fMr,mMr,gMr,P9,hMr,k3e,pMr,uMr,_Mr,Bt,B9,bMr,S3e,vMr,FMr,uc,TMr,R3e,MMr,EMr,oJ,CMr,wMr,AMr,YT,LMr,Sr,I9,yMr,P3e,xMr,$Mr,cn,kMr,B3e,SMr,RMr,I3e,PMr,BMr,N3e,IMr,NMr,qMr,ye,KT,q3e,jMr,DMr,rJ,GMr,OMr,VMr,ZT,j3e,XMr,zMr,tJ,WMr,QMr,HMr,eM,D3e,UMr,JMr,aJ,YMr,KMr,ZMr,oM,G3e,eEr,oEr,nJ,rEr,tEr,aEr,rM,O3e,nEr,sEr,sJ,lEr,iEr,dEr,tM,V3e,cEr,fEr,lJ,mEr,gEr,hEr,aM,X3e,pEr,uEr,iJ,_Er,bEr,vEr,nM,z3e,FEr,TEr,dJ,MEr,EEr,CEr,sM,W3e,wEr,AEr,cJ,LEr,yEr,xEr,lM,Q3e,$Er,kEr,fJ,SEr,REr,PEr,iM,wOe,_c,dM,H3e,N9,BEr,U3e,IEr,AOe,nr,q9,NEr,bc,qEr,mJ,jEr,DEr,gJ,GEr,OEr,VEr,j9,XEr,J3e,zEr,WEr,QEr,It,D9,HEr,Y3e,UEr,JEr,vc,YEr,K3e,KEr,ZEr,hJ,eCr,oCr,rCr,cM,tCr,Rr,G9,aCr,Z3e,nCr,sCr,fn,lCr,eFe,iCr,dCr,oFe,cCr,fCr,rFe,mCr,gCr,hCr,te,fM,tFe,pCr,uCr,pJ,_Cr,bCr,vCr,mM,aFe,FCr,TCr,uJ,MCr,ECr,CCr,gM,nFe,wCr,ACr,_J,LCr,yCr,xCr,hM,sFe,$Cr,kCr,bJ,SCr,RCr,PCr,pM,lFe,BCr,ICr,vJ,NCr,qCr,jCr,uM,iFe,DCr,GCr,FJ,OCr,VCr,XCr,_M,dFe,zCr,WCr,TJ,QCr,HCr,UCr,bM,cFe,JCr,YCr,MJ,KCr,ZCr,e0r,vM,fFe,o0r,r0r,EJ,t0r,a0r,n0r,FM,mFe,s0r,l0r,CJ,i0r,d0r,c0r,TM,gFe,f0r,m0r,wJ,g0r,h0r,p0r,MM,hFe,u0r,_0r,AJ,b0r,v0r,F0r,EM,pFe,T0r,M0r,LJ,E0r,C0r,w0r,CM,uFe,A0r,L0r,yJ,y0r,x0r,$0r,wM,_Fe,k0r,S0r,xJ,R0r,P0r,B0r,AM,bFe,I0r,N0r,$J,q0r,j0r,D0r,LM,vFe,G0r,O0r,kJ,V0r,X0r,z0r,yM,FFe,W0r,Q0r,SJ,H0r,U0r,J0r,xM,TFe,Y0r,K0r,RJ,Z0r,ewr,owr,$M,MFe,rwr,twr,PJ,awr,nwr,swr,kM,EFe,lwr,iwr,BJ,dwr,cwr,fwr,SM,CFe,mwr,gwr,IJ,hwr,pwr,uwr,RM,wFe,_wr,bwr,NJ,vwr,Fwr,Twr,PM,AFe,Mwr,Ewr,qJ,Cwr,wwr,Awr,BM,LFe,Lwr,ywr,jJ,xwr,$wr,kwr,IM,yFe,Swr,Rwr,DJ,Pwr,Bwr,Iwr,NM,LOe,Fc,qM,xFe,O9,Nwr,$Fe,qwr,yOe,sr,V9,jwr,Tc,Dwr,GJ,Gwr,Owr,OJ,Vwr,Xwr,zwr,X9,Wwr,kFe,Qwr,Hwr,Uwr,Nt,z9,Jwr,SFe,Ywr,Kwr,Mc,Zwr,RFe,eAr,oAr,VJ,rAr,tAr,aAr,jM,nAr,Pr,W9,sAr,PFe,lAr,iAr,mn,dAr,BFe,cAr,fAr,IFe,mAr,gAr,NFe,hAr,pAr,uAr,ue,DM,qFe,_Ar,bAr,XJ,vAr,FAr,TAr,GM,jFe,MAr,EAr,zJ,CAr,wAr,AAr,OM,DFe,LAr,yAr,WJ,xAr,$Ar,kAr,VM,GFe,SAr,RAr,QJ,PAr,BAr,IAr,XM,OFe,NAr,qAr,HJ,jAr,DAr,GAr,zM,VFe,OAr,VAr,UJ,XAr,zAr,WAr,WM,XFe,QAr,HAr,JJ,UAr,JAr,YAr,QM,zFe,KAr,ZAr,YJ,eLr,oLr,rLr,HM,WFe,tLr,aLr,KJ,nLr,sLr,lLr,UM,QFe,iLr,dLr,ZJ,cLr,fLr,mLr,JM,HFe,gLr,hLr,eY,pLr,uLr,_Lr,YM,UFe,bLr,vLr,oY,FLr,TLr,MLr,KM,JFe,ELr,CLr,rY,wLr,ALr,LLr,ZM,YFe,yLr,xLr,tY,$Lr,kLr,SLr,eE,KFe,RLr,PLr,aY,BLr,ILr,NLr,oE,ZFe,qLr,jLr,nY,DLr,GLr,OLr,rE,e6e,VLr,XLr,sY,zLr,WLr,QLr,tE,xOe,Ec,aE,o6e,Q9,HLr,r6e,ULr,$Oe,lr,H9,JLr,Cc,YLr,lY,KLr,ZLr,iY,eyr,oyr,ryr,U9,tyr,t6e,ayr,nyr,syr,qt,J9,lyr,a6e,iyr,dyr,wc,cyr,n6e,fyr,myr,dY,gyr,hyr,pyr,nE,uyr,Br,Y9,_yr,s6e,byr,vyr,gn,Fyr,l6e,Tyr,Myr,i6e,Eyr,Cyr,d6e,wyr,Ayr,Lyr,K9,sE,c6e,yyr,xyr,cY,$yr,kyr,Syr,lE,f6e,Ryr,Pyr,fY,Byr,Iyr,Nyr,iE,kOe,Ac,dE,m6e,Z9,qyr,g6e,jyr,SOe,ir,ex,Dyr,Lc,Gyr,mY,Oyr,Vyr,gY,Xyr,zyr,Wyr,ox,Qyr,h6e,Hyr,Uyr,Jyr,jt,rx,Yyr,p6e,Kyr,Zyr,yc,e7r,u6e,o7r,r7r,hY,t7r,a7r,n7r,cE,s7r,Ir,tx,l7r,_6e,i7r,d7r,hn,c7r,b6e,f7r,m7r,v6e,g7r,h7r,F6e,p7r,u7r,_7r,T6e,fE,M6e,b7r,v7r,pY,F7r,T7r,M7r,mE,ROe,xc,gE,E6e,ax,E7r,C6e,C7r,POe,dr,nx,w7r,$c,A7r,uY,L7r,y7r,_Y,x7r,$7r,k7r,sx,S7r,w6e,R7r,P7r,B7r,Dt,lx,I7r,A6e,N7r,q7r,kc,j7r,L6e,D7r,G7r,bY,O7r,V7r,X7r,hE,z7r,Nr,ix,W7r,y6e,Q7r,H7r,pn,U7r,x6e,J7r,Y7r,$6e,K7r,Z7r,k6e,e8r,o8r,r8r,de,pE,S6e,t8r,a8r,vY,n8r,s8r,l8r,uE,R6e,i8r,d8r,FY,c8r,f8r,m8r,_E,P6e,g8r,h8r,TY,p8r,u8r,_8r,bE,B6e,b8r,v8r,MY,F8r,T8r,M8r,vE,I6e,E8r,C8r,EY,w8r,A8r,L8r,FE,N6e,y8r,x8r,CY,$8r,k8r,S8r,TE,q6e,R8r,P8r,wY,B8r,I8r,N8r,ME,j6e,q8r,j8r,AY,D8r,G8r,O8r,EE,D6e,V8r,X8r,LY,z8r,W8r,Q8r,CE,G6e,H8r,U8r,yY,J8r,Y8r,K8r,wE,O6e,Z8r,e9r,xY,o9r,r9r,t9r,AE,V6e,a9r,n9r,$Y,s9r,l9r,i9r,LE,X6e,d9r,c9r,kY,f9r,m9r,g9r,yE,z6e,h9r,p9r,SY,u9r,_9r,b9r,xE,W6e,v9r,F9r,RY,T9r,M9r,E9r,$E,Q6e,C9r,w9r,PY,A9r,L9r,y9r,kE,H6e,x9r,$9r,BY,k9r,S9r,R9r,SE,U6e,P9r,B9r,IY,I9r,N9r,q9r,RE,J6e,j9r,D9r,NY,G9r,O9r,V9r,PE,Y6e,X9r,z9r,qY,W9r,Q9r,H9r,BE,BOe,Sc,IE,K6e,dx,U9r,Z6e,J9r,IOe,cr,cx,Y9r,Rc,K9r,jY,Z9r,exr,DY,oxr,rxr,txr,fx,axr,eTe,nxr,sxr,lxr,Gt,mx,ixr,oTe,dxr,cxr,Pc,fxr,rTe,mxr,gxr,GY,hxr,pxr,uxr,NE,_xr,qr,gx,bxr,tTe,vxr,Fxr,un,Txr,aTe,Mxr,Exr,nTe,Cxr,wxr,sTe,Axr,Lxr,yxr,ce,qE,lTe,xxr,$xr,OY,kxr,Sxr,Rxr,jE,iTe,Pxr,Bxr,VY,Ixr,Nxr,qxr,DE,dTe,jxr,Dxr,XY,Gxr,Oxr,Vxr,GE,cTe,Xxr,zxr,zY,Wxr,Qxr,Hxr,OE,fTe,Uxr,Jxr,WY,Yxr,Kxr,Zxr,VE,mTe,e$r,o$r,QY,r$r,t$r,a$r,XE,gTe,n$r,s$r,HY,l$r,i$r,d$r,zE,hTe,c$r,f$r,UY,m$r,g$r,h$r,WE,pTe,p$r,u$r,JY,_$r,b$r,v$r,QE,uTe,F$r,T$r,YY,M$r,E$r,C$r,HE,_Te,w$r,A$r,KY,L$r,y$r,x$r,UE,bTe,$$r,k$r,ZY,S$r,R$r,P$r,JE,vTe,B$r,I$r,eK,N$r,q$r,j$r,YE,FTe,D$r,G$r,oK,O$r,V$r,X$r,KE,TTe,z$r,W$r,rK,Q$r,H$r,U$r,ZE,MTe,J$r,Y$r,tK,K$r,Z$r,ekr,eC,ETe,okr,rkr,aK,tkr,akr,nkr,oC,CTe,skr,lkr,nK,ikr,dkr,ckr,rC,wTe,fkr,mkr,sK,gkr,hkr,pkr,tC,ATe,ukr,_kr,lK,bkr,vkr,Fkr,aC,NOe,Bc,nC,LTe,hx,Tkr,yTe,Mkr,qOe,fr,px,Ekr,Ic,Ckr,iK,wkr,Akr,dK,Lkr,ykr,xkr,ux,$kr,xTe,kkr,Skr,Rkr,Ot,_x,Pkr,$Te,Bkr,Ikr,Nc,Nkr,kTe,qkr,jkr,cK,Dkr,Gkr,Okr,sC,Vkr,jr,bx,Xkr,STe,zkr,Wkr,_n,Qkr,RTe,Hkr,Ukr,PTe,Jkr,Ykr,BTe,Kkr,Zkr,eSr,ITe,lC,NTe,oSr,rSr,fK,tSr,aSr,nSr,iC,jOe,qc,dC,qTe,vx,sSr,jTe,lSr,DOe,mr,Fx,iSr,jc,dSr,mK,cSr,fSr,gK,mSr,gSr,hSr,Tx,pSr,DTe,uSr,_Sr,bSr,Vt,Mx,vSr,GTe,FSr,TSr,Dc,MSr,OTe,ESr,CSr,hK,wSr,ASr,LSr,cC,ySr,Dr,Ex,xSr,VTe,$Sr,kSr,bn,SSr,XTe,RSr,PSr,zTe,BSr,ISr,WTe,NSr,qSr,jSr,QTe,fC,HTe,DSr,GSr,pK,OSr,VSr,XSr,mC,GOe,Gc,gC,UTe,Cx,zSr,JTe,WSr,OOe,gr,wx,QSr,Oc,HSr,uK,USr,JSr,_K,YSr,KSr,ZSr,Ax,eRr,YTe,oRr,rRr,tRr,Xt,Lx,aRr,KTe,nRr,sRr,Vc,lRr,ZTe,iRr,dRr,bK,cRr,fRr,mRr,hC,gRr,Gr,yx,hRr,eMe,pRr,uRr,vn,_Rr,oMe,bRr,vRr,rMe,FRr,TRr,tMe,MRr,ERr,CRr,oe,pC,aMe,wRr,ARr,vK,LRr,yRr,xRr,uC,nMe,$Rr,kRr,FK,SRr,RRr,PRr,_C,sMe,BRr,IRr,TK,NRr,qRr,jRr,bC,lMe,DRr,GRr,MK,ORr,VRr,XRr,vC,iMe,zRr,WRr,EK,QRr,HRr,URr,FC,dMe,JRr,YRr,CK,KRr,ZRr,ePr,TC,cMe,oPr,rPr,wK,tPr,aPr,nPr,MC,fMe,sPr,lPr,AK,iPr,dPr,cPr,EC,mMe,fPr,mPr,LK,gPr,hPr,pPr,CC,gMe,uPr,_Pr,yK,bPr,vPr,FPr,wC,hMe,TPr,MPr,xK,EPr,CPr,wPr,AC,pMe,APr,LPr,$K,yPr,xPr,$Pr,LC,uMe,kPr,SPr,kK,RPr,PPr,BPr,yC,_Me,IPr,NPr,SK,qPr,jPr,DPr,xC,bMe,GPr,OPr,RK,VPr,XPr,zPr,$C,vMe,WPr,QPr,PK,HPr,UPr,JPr,kC,FMe,YPr,KPr,BK,ZPr,eBr,oBr,SC,TMe,rBr,tBr,IK,aBr,nBr,sBr,RC,MMe,lBr,iBr,NK,dBr,cBr,fBr,PC,EMe,mBr,gBr,qK,hBr,pBr,uBr,BC,CMe,_Br,bBr,jK,vBr,FBr,TBr,IC,wMe,MBr,EBr,DK,CBr,wBr,ABr,NC,AMe,LBr,yBr,GK,xBr,$Br,kBr,qC,LMe,SBr,RBr,OK,PBr,BBr,IBr,jC,yMe,NBr,qBr,VK,jBr,DBr,GBr,DC,xMe,OBr,VBr,XK,XBr,zBr,WBr,GC,$Me,QBr,HBr,zK,UBr,JBr,YBr,OC,VOe,Xc,VC,kMe,xx,KBr,SMe,ZBr,XOe,hr,$x,eIr,zc,oIr,WK,rIr,tIr,QK,aIr,nIr,sIr,kx,lIr,RMe,iIr,dIr,cIr,zt,Sx,fIr,PMe,mIr,gIr,Wc,hIr,BMe,pIr,uIr,HK,_Ir,bIr,vIr,XC,FIr,Or,Rx,TIr,IMe,MIr,EIr,Fn,CIr,NMe,wIr,AIr,qMe,LIr,yIr,jMe,xIr,$Ir,kIr,xe,zC,DMe,SIr,RIr,UK,PIr,BIr,IIr,WC,GMe,NIr,qIr,JK,jIr,DIr,GIr,QC,OMe,OIr,VIr,YK,XIr,zIr,WIr,HC,VMe,QIr,HIr,KK,UIr,JIr,YIr,UC,XMe,KIr,ZIr,ZK,eNr,oNr,rNr,JC,zMe,tNr,aNr,eZ,nNr,sNr,lNr,YC,WMe,iNr,dNr,oZ,cNr,fNr,mNr,KC,QMe,gNr,hNr,rZ,pNr,uNr,_Nr,ZC,HMe,bNr,vNr,tZ,FNr,TNr,MNr,e0,UMe,ENr,CNr,aZ,wNr,ANr,LNr,o0,zOe,Qc,r0,JMe,Px,yNr,YMe,xNr,WOe,pr,Bx,$Nr,Hc,kNr,nZ,SNr,RNr,sZ,PNr,BNr,INr,Ix,NNr,KMe,qNr,jNr,DNr,Wt,Nx,GNr,ZMe,ONr,VNr,Uc,XNr,eEe,zNr,WNr,lZ,QNr,HNr,UNr,t0,JNr,Vr,qx,YNr,oEe,KNr,ZNr,Tn,eqr,rEe,oqr,rqr,tEe,tqr,aqr,aEe,nqr,sqr,lqr,Ee,a0,nEe,iqr,dqr,iZ,cqr,fqr,mqr,n0,sEe,gqr,hqr,dZ,pqr,uqr,_qr,s0,lEe,bqr,vqr,cZ,Fqr,Tqr,Mqr,l0,iEe,Eqr,Cqr,fZ,wqr,Aqr,Lqr,i0,dEe,yqr,xqr,mZ,$qr,kqr,Sqr,d0,cEe,Rqr,Pqr,gZ,Bqr,Iqr,Nqr,c0,fEe,qqr,jqr,hZ,Dqr,Gqr,Oqr,f0,mEe,Vqr,Xqr,pZ,zqr,Wqr,Qqr,m0,gEe,Hqr,Uqr,uZ,Jqr,Yqr,Kqr,g0,hEe,Zqr,ejr,_Z,ojr,rjr,tjr,h0,pEe,ajr,njr,bZ,sjr,ljr,ijr,p0,uEe,djr,cjr,vZ,fjr,mjr,gjr,u0,_Ee,hjr,pjr,FZ,ujr,_jr,bjr,_0,QOe,Jc,b0,bEe,jx,vjr,vEe,Fjr,HOe,ur,Dx,Tjr,Yc,Mjr,TZ,Ejr,Cjr,MZ,wjr,Ajr,Ljr,Gx,yjr,FEe,xjr,$jr,kjr,Qt,Ox,Sjr,TEe,Rjr,Pjr,Kc,Bjr,MEe,Ijr,Njr,EZ,qjr,jjr,Djr,v0,Gjr,Xr,Vx,Ojr,EEe,Vjr,Xjr,Mn,zjr,CEe,Wjr,Qjr,wEe,Hjr,Ujr,AEe,Jjr,Yjr,Kjr,$e,F0,LEe,Zjr,eDr,CZ,oDr,rDr,tDr,T0,yEe,aDr,nDr,wZ,sDr,lDr,iDr,M0,xEe,dDr,cDr,AZ,fDr,mDr,gDr,E0,$Ee,hDr,pDr,LZ,uDr,_Dr,bDr,C0,kEe,vDr,FDr,yZ,TDr,MDr,EDr,w0,SEe,CDr,wDr,xZ,ADr,LDr,yDr,A0,REe,xDr,$Dr,$Z,kDr,SDr,RDr,L0,PEe,PDr,BDr,kZ,IDr,NDr,qDr,y0,BEe,jDr,DDr,SZ,GDr,ODr,VDr,x0,IEe,XDr,zDr,RZ,WDr,QDr,HDr,$0,UOe,Zc,k0,NEe,Xx,UDr,qEe,JDr,JOe,_r,zx,YDr,ef,KDr,PZ,ZDr,eGr,BZ,oGr,rGr,tGr,Wx,aGr,jEe,nGr,sGr,lGr,Ht,Qx,iGr,DEe,dGr,cGr,of,fGr,GEe,mGr,gGr,IZ,hGr,pGr,uGr,S0,_Gr,zr,Hx,bGr,OEe,vGr,FGr,En,TGr,VEe,MGr,EGr,XEe,CGr,wGr,zEe,AGr,LGr,yGr,ke,R0,WEe,xGr,$Gr,NZ,kGr,SGr,RGr,P0,QEe,PGr,BGr,qZ,IGr,NGr,qGr,B0,HEe,jGr,DGr,jZ,GGr,OGr,VGr,I0,UEe,XGr,zGr,DZ,WGr,QGr,HGr,N0,JEe,UGr,JGr,GZ,YGr,KGr,ZGr,q0,YEe,eOr,oOr,OZ,rOr,tOr,aOr,j0,KEe,nOr,sOr,VZ,lOr,iOr,dOr,D0,ZEe,cOr,fOr,XZ,mOr,gOr,hOr,G0,eCe,pOr,uOr,zZ,_Or,bOr,vOr,O0,oCe,FOr,TOr,WZ,MOr,EOr,COr,V0,YOe,rf,X0,rCe,Ux,wOr,tCe,AOr,KOe,br,Jx,LOr,tf,yOr,QZ,xOr,$Or,HZ,kOr,SOr,ROr,Yx,POr,aCe,BOr,IOr,NOr,Ut,Kx,qOr,nCe,jOr,DOr,af,GOr,sCe,OOr,VOr,UZ,XOr,zOr,WOr,z0,QOr,Wr,Zx,HOr,lCe,UOr,JOr,Cn,YOr,iCe,KOr,ZOr,dCe,eVr,oVr,cCe,rVr,tVr,aVr,Se,W0,fCe,nVr,sVr,JZ,lVr,iVr,dVr,Q0,mCe,cVr,fVr,YZ,mVr,gVr,hVr,H0,gCe,pVr,uVr,KZ,_Vr,bVr,vVr,U0,hCe,FVr,TVr,ZZ,MVr,EVr,CVr,J0,pCe,wVr,AVr,eee,LVr,yVr,xVr,Y0,uCe,$Vr,kVr,oee,SVr,RVr,PVr,K0,_Ce,BVr,IVr,ree,NVr,qVr,jVr,Z0,bCe,DVr,GVr,tee,OVr,VVr,XVr,ew,vCe,zVr,WVr,aee,QVr,HVr,UVr,ow,FCe,JVr,YVr,nee,KVr,ZVr,eXr,rw,ZOe,nf,tw,TCe,e$,oXr,MCe,rXr,eVe,vr,o$,tXr,sf,aXr,see,nXr,sXr,lee,lXr,iXr,dXr,r$,cXr,ECe,fXr,mXr,gXr,Jt,t$,hXr,CCe,pXr,uXr,lf,_Xr,wCe,bXr,vXr,iee,FXr,TXr,MXr,aw,EXr,Qr,a$,CXr,ACe,wXr,AXr,wn,LXr,LCe,yXr,xXr,yCe,$Xr,kXr,xCe,SXr,RXr,PXr,Re,nw,$Ce,BXr,IXr,dee,NXr,qXr,jXr,sw,kCe,DXr,GXr,cee,OXr,VXr,XXr,lw,SCe,zXr,WXr,fee,QXr,HXr,UXr,iw,RCe,JXr,YXr,mee,KXr,ZXr,ezr,dw,PCe,ozr,rzr,gee,tzr,azr,nzr,cw,BCe,szr,lzr,hee,izr,dzr,czr,fw,ICe,fzr,mzr,pee,gzr,hzr,pzr,mw,NCe,uzr,_zr,uee,bzr,vzr,Fzr,gw,qCe,Tzr,Mzr,_ee,Ezr,Czr,wzr,hw,jCe,Azr,Lzr,bee,yzr,xzr,$zr,pw,oVe,df,uw,DCe,n$,kzr,GCe,Szr,rVe,Fr,s$,Rzr,cf,Pzr,vee,Bzr,Izr,Fee,Nzr,qzr,jzr,l$,Dzr,OCe,Gzr,Ozr,Vzr,Yt,i$,Xzr,VCe,zzr,Wzr,ff,Qzr,XCe,Hzr,Uzr,Tee,Jzr,Yzr,Kzr,_w,Zzr,Hr,d$,eWr,zCe,oWr,rWr,An,tWr,WCe,aWr,nWr,QCe,sWr,lWr,HCe,iWr,dWr,cWr,Ve,bw,UCe,fWr,mWr,Mee,gWr,hWr,pWr,vw,JCe,uWr,_Wr,Eee,bWr,vWr,FWr,Fw,YCe,TWr,MWr,Cee,EWr,CWr,wWr,Tw,KCe,AWr,LWr,wee,yWr,xWr,$Wr,Mw,ZCe,kWr,SWr,Aee,RWr,PWr,BWr,Ew,e0e,IWr,NWr,Lee,qWr,jWr,DWr,Cw,o0e,GWr,OWr,yee,VWr,XWr,zWr,ww,r0e,WWr,QWr,xee,HWr,UWr,JWr,Aw,tVe,mf,Lw,t0e,c$,YWr,a0e,KWr,aVe,Tr,f$,ZWr,gf,eQr,$ee,oQr,rQr,kee,tQr,aQr,nQr,m$,sQr,n0e,lQr,iQr,dQr,Kt,g$,cQr,s0e,fQr,mQr,hf,gQr,l0e,hQr,pQr,See,uQr,_Qr,bQr,yw,vQr,Ur,h$,FQr,i0e,TQr,MQr,Ln,EQr,d0e,CQr,wQr,c0e,AQr,LQr,f0e,yQr,xQr,$Qr,Xe,xw,m0e,kQr,SQr,Ree,RQr,PQr,BQr,$w,g0e,IQr,NQr,Pee,qQr,jQr,DQr,kw,h0e,GQr,OQr,Bee,VQr,XQr,zQr,Sw,p0e,WQr,QQr,Iee,HQr,UQr,JQr,Rw,u0e,YQr,KQr,Nee,ZQr,eHr,oHr,Pw,_0e,rHr,tHr,qee,aHr,nHr,sHr,Bw,b0e,lHr,iHr,jee,dHr,cHr,fHr,Iw,v0e,mHr,gHr,Dee,hHr,pHr,uHr,Nw,nVe,pf,qw,F0e,p$,_Hr,T0e,bHr,sVe,Mr,u$,vHr,uf,FHr,Gee,THr,MHr,Oee,EHr,CHr,wHr,_$,AHr,M0e,LHr,yHr,xHr,Zt,b$,$Hr,E0e,kHr,SHr,_f,RHr,C0e,PHr,BHr,Vee,IHr,NHr,qHr,jw,jHr,Jr,v$,DHr,w0e,GHr,OHr,yn,VHr,A0e,XHr,zHr,L0e,WHr,QHr,y0e,HHr,UHr,JHr,x0e,Dw,$0e,YHr,KHr,Xee,ZHr,eUr,oUr,Gw,lVe,bf,Ow,k0e,F$,rUr,S0e,tUr,iVe,Er,T$,aUr,vf,nUr,zee,sUr,lUr,Wee,iUr,dUr,cUr,M$,fUr,R0e,mUr,gUr,hUr,ea,E$,pUr,P0e,uUr,_Ur,Ff,bUr,B0e,vUr,FUr,Qee,TUr,MUr,EUr,Vw,CUr,Yr,C$,wUr,I0e,AUr,LUr,xn,yUr,N0e,xUr,$Ur,q0e,kUr,SUr,j0e,RUr,PUr,BUr,w$,Xw,D0e,IUr,NUr,Hee,qUr,jUr,DUr,zw,G0e,GUr,OUr,Uee,VUr,XUr,zUr,Ww,dVe,Tf,Qw,O0e,A$,WUr,V0e,QUr,cVe,Cr,L$,HUr,Mf,UUr,Jee,JUr,YUr,Yee,KUr,ZUr,eJr,y$,oJr,X0e,rJr,tJr,aJr,oa,x$,nJr,z0e,sJr,lJr,Ef,iJr,W0e,dJr,cJr,Kee,fJr,mJr,gJr,Hw,hJr,Kr,$$,pJr,Q0e,uJr,_Jr,$n,bJr,H0e,vJr,FJr,U0e,TJr,MJr,J0e,EJr,CJr,wJr,Y0e,Uw,K0e,AJr,LJr,Zee,yJr,xJr,$Jr,Jw,fVe;return d=new re({}),ya=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),Ty=new re({}),My=new P({props:{code:"",highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Sf=new kJr({props:{warning:!0,$$slots:{default:[Dqt]},$$scope:{ctx:y}}}),Ey=new re({}),Cy=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/configuration_auto.py#L594"}}),Ly=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/configuration_auto.py#L617"}}),jg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[Gqt]},$$scope:{ctx:y}}}),yy=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/configuration_auto.py#L740"}}),xy=new re({}),$y=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/tokenization_auto.py#L399"}}),Ry=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_16543/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/tokenization_auto.py#L413"}}),Th=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[Oqt]},$$scope:{ctx:y}}}),Py=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/tokenization_auto.py#L612"}}),By=new re({}),Iy=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/feature_extraction_auto.py#L193"}}),jy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_16543/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/feature_extraction_auto.py#L207"}}),rp=new kJr({props:{$$slots:{default:[Vqt]},$$scope:{ctx:y}}}),tp=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[Xqt]},$$scope:{ctx:y}}}),Dy=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/feature_extraction_auto.py#L334"}}),Gy=new re({}),Oy=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/processing_auto.py#L88"}}),zy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/processing_auto.py#L102"}}),Ep=new kJr({props:{$$slots:{default:[zqt]},$$scope:{ctx:y}}}),Cp=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[Wqt]},$$scope:{ctx:y}}}),Wy=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/processing_auto.py#L255"}}),Qy=new re({}),Hy=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L758"}}),Jy=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),Lp=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[Qqt]},$$scope:{ctx:y}}}),Yy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),A_=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[Hqt]},$$scope:{ctx:y}}}),Ky=new re({}),Zy=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L765"}}),o7=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),y_=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[Uqt]},$$scope:{ctx:y}}}),r7=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),v1=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Jqt]},$$scope:{ctx:y}}}),t7=new re({}),a7=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L780"}}),s7=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),T1=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[Yqt]},$$scope:{ctx:y}}}),l7=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),l2=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Kqt]},$$scope:{ctx:y}}}),i7=new re({}),d7=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L787"}}),f7=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),d2=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[Zqt]},$$scope:{ctx:y}}}),m7=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),Q2=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[ejt]},$$scope:{ctx:y}}}),g7=new re({}),h7=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L794"}}),u7=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),U2=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[ojt]},$$scope:{ctx:y}}}),_7=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),hb=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[rjt]},$$scope:{ctx:y}}}),b7=new re({}),v7=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L803"}}),T7=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bloom#transformers.BloomForSequenceClassification">BloomForSequenceClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),ub=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[tjt]},$$scope:{ctx:y}}}),M7=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),m4=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[ajt]},$$scope:{ctx:y}}}),E7=new re({}),C7=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L848"}}),A7=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),h4=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[njt]},$$scope:{ctx:y}}}),L7=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),z4=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[sjt]},$$scope:{ctx:y}}}),y7=new re({}),x7=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L855"}}),k7=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),Q4=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[ljt]},$$scope:{ctx:y}}}),S7=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),e5=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[ijt]},$$scope:{ctx:y}}}),R7=new re({}),P7=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L841"}}),I7=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bloom#transformers.BloomForTokenClassification">BloomForTokenClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),r5=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[djt]},$$scope:{ctx:y}}}),N7=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),j5=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[cjt]},$$scope:{ctx:y}}}),q7=new re({}),j7=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L812"}}),G7=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),G5=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[fjt]},$$scope:{ctx:y}}}),O7=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),xv=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[mjt]},$$scope:{ctx:y}}}),V7=new re({}),X7=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L819"}}),W7=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),kv=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[gjt]},$$scope:{ctx:y}}}),Q7=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),Pv=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[hjt]},$$scope:{ctx:y}}}),H7=new re({}),U7=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L864"}}),Y7=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/pr_16543/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),Iv=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[pjt]},$$scope:{ctx:y}}}),K7=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),Jv=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[ujt]},$$scope:{ctx:y}}}),Z7=new re({}),e8=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L903"}}),r8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),Kv=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[_jt]},$$scope:{ctx:y}}}),t8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),o3=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[bjt]},$$scope:{ctx:y}}}),a8=new re({}),n8=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L830"}}),l8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),t3=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[vjt]},$$scope:{ctx:y}}}),i8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),s3=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[Fjt]},$$scope:{ctx:y}}}),d8=new re({}),c8=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L910"}}),m8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),i3=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[Tjt]},$$scope:{ctx:y}}}),g8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),v3=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[Mjt]},$$scope:{ctx:y}}}),h8=new re({}),p8=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L933"}}),_8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),T3=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[Ejt]},$$scope:{ctx:y}}}),b8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),y3=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[Cjt]},$$scope:{ctx:y}}}),v8=new re({}),F8=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L917"}}),M8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),$3=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[wjt]},$$scope:{ctx:y}}}),E8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),O3=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[Ajt]},$$scope:{ctx:y}}}),C8=new re({}),w8=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L924"}}),L8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),X3=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[Ljt]},$$scope:{ctx:y}}}),y8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),H3=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[yjt]},$$scope:{ctx:y}}}),$8=new re({}),k8=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L942"}}),R8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),J3=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[xjt]},$$scope:{ctx:y}}}),P8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),tF=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[$jt]},$$scope:{ctx:y}}}),B8=new re({}),I8=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L949"}}),q8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),nF=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[kjt]},$$scope:{ctx:y}}}),j8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),cF=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[Sjt]},$$scope:{ctx:y}}}),D8=new re({}),G8=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L896"}}),V8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),mF=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[Rjt]},$$scope:{ctx:y}}}),X8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),uF=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[Pjt]},$$scope:{ctx:y}}}),W8=new re({}),Q8=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L871"}}),U8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),bF=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[Bjt]},$$scope:{ctx:y}}}),J8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),TF=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[Ijt]},$$scope:{ctx:y}}}),Y8=new re({}),K8=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L878"}}),e9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),EF=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[Njt]},$$scope:{ctx:y}}}),o9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),xF=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[qjt]},$$scope:{ctx:y}}}),r9=new re({}),t9=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L887"}}),n9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),kF=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[jjt]},$$scope:{ctx:y}}}),s9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),PF=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[Djt]},$$scope:{ctx:y}}}),l9=new re({}),i9=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L408"}}),c9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.TFXGLMModel">TFXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),IF=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[Gjt]},$$scope:{ctx:y}}}),f9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),$6=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[Ojt]},$$scope:{ctx:y}}}),m9=new re({}),g9=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L415"}}),p9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),S6=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[Vjt]},$$scope:{ctx:y}}}),u9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),rT=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Xjt]},$$scope:{ctx:y}}}),_9=new re({}),b9=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L430"}}),F9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.TFXGLMForCausalLM">TFXGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),aT=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[zjt]},$$scope:{ctx:y}}}),T9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),vT=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Wjt]},$$scope:{ctx:y}}}),M9=new re({}),E9=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L446"}}),w9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),TT=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[Qjt]},$$scope:{ctx:y}}}),A9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),AT=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Hjt]},$$scope:{ctx:y}}}),L9=new re({}),y9=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L471"}}),$9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),yT=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[Ujt]},$$scope:{ctx:y}}}),k9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),UT=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Jjt]},$$scope:{ctx:y}}}),S9=new re({}),R9=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L478"}}),B9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),YT=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Yjt]},$$scope:{ctx:y}}}),I9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),iM=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Kjt]},$$scope:{ctx:y}}}),N9=new re({}),q9=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L487"}}),D9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),cM=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[Zjt]},$$scope:{ctx:y}}}),G9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),NM=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[eDt]},$$scope:{ctx:y}}}),O9=new re({}),V9=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L523"}}),z9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),jM=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[oDt]},$$scope:{ctx:y}}}),W9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),tE=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[rDt]},$$scope:{ctx:y}}}),Q9=new re({}),H9=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L530"}}),J9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),nE=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[tDt]},$$scope:{ctx:y}}}),Y9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),iE=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[aDt]},$$scope:{ctx:y}}}),Z9=new re({}),ex=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L503"}}),rx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),cE=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[nDt]},$$scope:{ctx:y}}}),tx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),mE=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[sDt]},$$scope:{ctx:y}}}),ax=new re({}),nx=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L514"}}),lx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),hE=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[lDt]},$$scope:{ctx:y}}}),ix=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),BE=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[iDt]},$$scope:{ctx:y}}}),dx=new re({}),cx=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L496"}}),mx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),NE=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[dDt]},$$scope:{ctx:y}}}),gx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),aC=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[cDt]},$$scope:{ctx:y}}}),hx=new re({}),px=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L464"}}),_x=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),sC=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[fDt]},$$scope:{ctx:y}}}),bx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),iC=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[mDt]},$$scope:{ctx:y}}}),vx=new re({}),Fx=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L539"}}),Mx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),cC=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[gDt]},$$scope:{ctx:y}}}),Ex=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),mC=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[hDt]},$$scope:{ctx:y}}}),Cx=new re({}),wx=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_flax_auto.py#L246"}}),Lx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),hC=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[pDt]},$$scope:{ctx:y}}}),yx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),OC=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[uDt]},$$scope:{ctx:y}}}),xx=new re({}),$x=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_flax_auto.py#L260"}}),Sx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),XC=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[_Dt]},$$scope:{ctx:y}}}),Rx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),o0=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[bDt]},$$scope:{ctx:y}}}),Px=new re({}),Bx=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_flax_auto.py#L253"}}),Nx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),t0=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[vDt]},$$scope:{ctx:y}}}),qx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),_0=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[FDt]},$$scope:{ctx:y}}}),jx=new re({}),Dx=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_flax_auto.py#L267"}}),Ox=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),v0=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[TDt]},$$scope:{ctx:y}}}),Vx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),$0=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[MDt]},$$scope:{ctx:y}}}),Xx=new re({}),zx=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),Qx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),S0=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[EDt]},$$scope:{ctx:y}}}),Hx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),V0=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[CDt]},$$scope:{ctx:y}}}),Ux=new re({}),Jx=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),Kx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),z0=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[wDt]},$$scope:{ctx:y}}}),Zx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),rw=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[ADt]},$$scope:{ctx:y}}}),e$=new re({}),o$=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),t$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),aw=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[LDt]},$$scope:{ctx:y}}}),a$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),pw=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[yDt]},$$scope:{ctx:y}}}),n$=new re({}),s$=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),i$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),_w=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[xDt]},$$scope:{ctx:y}}}),d$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),Aw=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[$Dt]},$$scope:{ctx:y}}}),c$=new re({}),f$=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_flax_auto.py#L308"}}),g$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),yw=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[kDt]},$$scope:{ctx:y}}}),h$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),Nw=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[SDt]},$$scope:{ctx:y}}}),p$=new re({}),u$=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),b$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),jw=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[RDt]},$$scope:{ctx:y}}}),v$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),Gw=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[PDt]},$$scope:{ctx:y}}}),F$=new re({}),T$=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),E$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),Vw=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[BDt]},$$scope:{ctx:y}}}),C$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),Ww=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[IDt]},$$scope:{ctx:y}}}),A$=new re({}),L$=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),x$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),Hw=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[NDt]},$$scope:{ctx:y}}}),$$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),Jw=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[qDt]},$$scope:{ctx:y}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),u=a("span"),F(d.$$.fragment),h=l(),Eo=a("span"),Fi=o("Auto Classes"),Lf=l(),at=a("p"),Ti=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Mi=a("code"),_y=o("from_pretrained()"),yf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Oe=l(),We=a("p"),Ei=o("Instantiating one of "),Sn=a("a"),by=o("AutoConfig"),Rn=o(", "),Pn=a("a"),vy=o("AutoModel"),Ci=o(`, and
`),Bn=a("a"),Fy=o("AutoTokenizer"),wi=o(" will directly create a class of the relevant architecture. For instance"),xf=l(),F(ya.$$.fragment),Qe=l(),Ae=a("p"),Qk=o("will create a model that is an instance of "),Ai=a("a"),Hk=o("BertModel"),Uk=o("."),Co=l(),xa=a("p"),Jk=o("There is one class of "),$f=a("code"),Yk=o("AutoModel"),Tze=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),sGe=l(),Li=a("h2"),kf=a("a"),Hre=a("span"),F(Ty.$$.fragment),Mze=l(),Ure=a("span"),Eze=o("Extending the Auto Classes"),lGe=l(),In=a("p"),Cze=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Jre=a("code"),wze=o("NewModel"),Aze=o(", make sure you have a "),Yre=a("code"),Lze=o("NewModelConfig"),yze=o(` then you can add those to the auto
classes like this:`),iGe=l(),F(My.$$.fragment),dGe=l(),Kk=a("p"),xze=o("You will then be able to use the auto classes like you would usually do!"),cGe=l(),F(Sf.$$.fragment),fGe=l(),yi=a("h2"),Rf=a("a"),Kre=a("span"),F(Ey.$$.fragment),$ze=l(),Zre=a("span"),kze=o("AutoConfig"),mGe=l(),wo=a("div"),F(Cy.$$.fragment),Sze=l(),wy=a("p"),Rze=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),Zk=a("a"),Pze=o("from_pretrained()"),Bze=o(" class method."),Ize=l(),Ay=a("p"),Nze=o("This class cannot be instantiated directly using "),ete=a("code"),qze=o("__init__()"),jze=o(" (throws an error)."),Dze=l(),wr=a("div"),F(Ly.$$.fragment),Gze=l(),ote=a("p"),Oze=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),Vze=l(),xi=a("p"),Xze=o("The configuration class to instantiate is selected based on the "),rte=a("code"),zze=o("model_type"),Wze=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),tte=a("code"),Qze=o("pretrained_model_name_or_path"),Hze=o(":"),Uze=l(),A=a("ul"),Pf=a("li"),ate=a("strong"),Jze=o("albert"),Yze=o(" \u2014 "),eS=a("a"),Kze=o("AlbertConfig"),Zze=o(" (ALBERT model)"),eWe=l(),Bf=a("li"),nte=a("strong"),oWe=o("bart"),rWe=o(" \u2014 "),oS=a("a"),tWe=o("BartConfig"),aWe=o(" (BART model)"),nWe=l(),If=a("li"),ste=a("strong"),sWe=o("beit"),lWe=o(" \u2014 "),rS=a("a"),iWe=o("BeitConfig"),dWe=o(" (BEiT model)"),cWe=l(),Nf=a("li"),lte=a("strong"),fWe=o("bert"),mWe=o(" \u2014 "),tS=a("a"),gWe=o("BertConfig"),hWe=o(" (BERT model)"),pWe=l(),qf=a("li"),ite=a("strong"),uWe=o("bert-generation"),_We=o(" \u2014 "),aS=a("a"),bWe=o("BertGenerationConfig"),vWe=o(" (Bert Generation model)"),FWe=l(),jf=a("li"),dte=a("strong"),TWe=o("big_bird"),MWe=o(" \u2014 "),nS=a("a"),EWe=o("BigBirdConfig"),CWe=o(" (BigBird model)"),wWe=l(),Df=a("li"),cte=a("strong"),AWe=o("bigbird_pegasus"),LWe=o(" \u2014 "),sS=a("a"),yWe=o("BigBirdPegasusConfig"),xWe=o(" (BigBird-Pegasus model)"),$We=l(),Gf=a("li"),fte=a("strong"),kWe=o("blenderbot"),SWe=o(" \u2014 "),lS=a("a"),RWe=o("BlenderbotConfig"),PWe=o(" (Blenderbot model)"),BWe=l(),Of=a("li"),mte=a("strong"),IWe=o("blenderbot-small"),NWe=o(" \u2014 "),iS=a("a"),qWe=o("BlenderbotSmallConfig"),jWe=o(" (BlenderbotSmall model)"),DWe=l(),Vf=a("li"),gte=a("strong"),GWe=o("bloom"),OWe=o(" \u2014 "),dS=a("a"),VWe=o("BloomConfig"),XWe=o(" (BLOOM model)"),zWe=l(),Xf=a("li"),hte=a("strong"),WWe=o("camembert"),QWe=o(" \u2014 "),cS=a("a"),HWe=o("CamembertConfig"),UWe=o(" (CamemBERT model)"),JWe=l(),zf=a("li"),pte=a("strong"),YWe=o("canine"),KWe=o(" \u2014 "),fS=a("a"),ZWe=o("CanineConfig"),eQe=o(" (CANINE model)"),oQe=l(),Wf=a("li"),ute=a("strong"),rQe=o("clip"),tQe=o(" \u2014 "),mS=a("a"),aQe=o("CLIPConfig"),nQe=o(" (CLIP model)"),sQe=l(),Qf=a("li"),_te=a("strong"),lQe=o("convbert"),iQe=o(" \u2014 "),gS=a("a"),dQe=o("ConvBertConfig"),cQe=o(" (ConvBERT model)"),fQe=l(),Hf=a("li"),bte=a("strong"),mQe=o("convnext"),gQe=o(" \u2014 "),hS=a("a"),hQe=o("ConvNextConfig"),pQe=o(" (ConvNeXT model)"),uQe=l(),Uf=a("li"),vte=a("strong"),_Qe=o("ctrl"),bQe=o(" \u2014 "),pS=a("a"),vQe=o("CTRLConfig"),FQe=o(" (CTRL model)"),TQe=l(),Jf=a("li"),Fte=a("strong"),MQe=o("cvt"),EQe=o(" \u2014 "),uS=a("a"),CQe=o("CvtConfig"),wQe=o(" (CvT model)"),AQe=l(),Yf=a("li"),Tte=a("strong"),LQe=o("data2vec-audio"),yQe=o(" \u2014 "),_S=a("a"),xQe=o("Data2VecAudioConfig"),$Qe=o(" (Data2VecAudio model)"),kQe=l(),Kf=a("li"),Mte=a("strong"),SQe=o("data2vec-text"),RQe=o(" \u2014 "),bS=a("a"),PQe=o("Data2VecTextConfig"),BQe=o(" (Data2VecText model)"),IQe=l(),Zf=a("li"),Ete=a("strong"),NQe=o("data2vec-vision"),qQe=o(" \u2014 "),vS=a("a"),jQe=o("Data2VecVisionConfig"),DQe=o(" (Data2VecVision model)"),GQe=l(),em=a("li"),Cte=a("strong"),OQe=o("deberta"),VQe=o(" \u2014 "),FS=a("a"),XQe=o("DebertaConfig"),zQe=o(" (DeBERTa model)"),WQe=l(),om=a("li"),wte=a("strong"),QQe=o("deberta-v2"),HQe=o(" \u2014 "),TS=a("a"),UQe=o("DebertaV2Config"),JQe=o(" (DeBERTa-v2 model)"),YQe=l(),rm=a("li"),Ate=a("strong"),KQe=o("decision_transformer"),ZQe=o(" \u2014 "),MS=a("a"),eHe=o("DecisionTransformerConfig"),oHe=o(" (Decision Transformer model)"),rHe=l(),tm=a("li"),Lte=a("strong"),tHe=o("deit"),aHe=o(" \u2014 "),ES=a("a"),nHe=o("DeiTConfig"),sHe=o(" (DeiT model)"),lHe=l(),am=a("li"),yte=a("strong"),iHe=o("detr"),dHe=o(" \u2014 "),CS=a("a"),cHe=o("DetrConfig"),fHe=o(" (DETR model)"),mHe=l(),nm=a("li"),xte=a("strong"),gHe=o("distilbert"),hHe=o(" \u2014 "),wS=a("a"),pHe=o("DistilBertConfig"),uHe=o(" (DistilBERT model)"),_He=l(),sm=a("li"),$te=a("strong"),bHe=o("dpr"),vHe=o(" \u2014 "),AS=a("a"),FHe=o("DPRConfig"),THe=o(" (DPR model)"),MHe=l(),lm=a("li"),kte=a("strong"),EHe=o("dpt"),CHe=o(" \u2014 "),LS=a("a"),wHe=o("DPTConfig"),AHe=o(" (DPT model)"),LHe=l(),im=a("li"),Ste=a("strong"),yHe=o("electra"),xHe=o(" \u2014 "),yS=a("a"),$He=o("ElectraConfig"),kHe=o(" (ELECTRA model)"),SHe=l(),dm=a("li"),Rte=a("strong"),RHe=o("encoder-decoder"),PHe=o(" \u2014 "),xS=a("a"),BHe=o("EncoderDecoderConfig"),IHe=o(" (Encoder decoder model)"),NHe=l(),cm=a("li"),Pte=a("strong"),qHe=o("flaubert"),jHe=o(" \u2014 "),$S=a("a"),DHe=o("FlaubertConfig"),GHe=o(" (FlauBERT model)"),OHe=l(),fm=a("li"),Bte=a("strong"),VHe=o("flava"),XHe=o(" \u2014 "),kS=a("a"),zHe=o("FlavaConfig"),WHe=o(" (FLAVA model)"),QHe=l(),mm=a("li"),Ite=a("strong"),HHe=o("fnet"),UHe=o(" \u2014 "),SS=a("a"),JHe=o("FNetConfig"),YHe=o(" (FNet model)"),KHe=l(),gm=a("li"),Nte=a("strong"),ZHe=o("fsmt"),eUe=o(" \u2014 "),RS=a("a"),oUe=o("FSMTConfig"),rUe=o(" (FairSeq Machine-Translation model)"),tUe=l(),hm=a("li"),qte=a("strong"),aUe=o("funnel"),nUe=o(" \u2014 "),PS=a("a"),sUe=o("FunnelConfig"),lUe=o(" (Funnel Transformer model)"),iUe=l(),pm=a("li"),jte=a("strong"),dUe=o("glpn"),cUe=o(" \u2014 "),BS=a("a"),fUe=o("GLPNConfig"),mUe=o(" (GLPN model)"),gUe=l(),um=a("li"),Dte=a("strong"),hUe=o("gpt2"),pUe=o(" \u2014 "),IS=a("a"),uUe=o("GPT2Config"),_Ue=o(" (OpenAI GPT-2 model)"),bUe=l(),_m=a("li"),Gte=a("strong"),vUe=o("gpt_neo"),FUe=o(" \u2014 "),NS=a("a"),TUe=o("GPTNeoConfig"),MUe=o(" (GPT Neo model)"),EUe=l(),bm=a("li"),Ote=a("strong"),CUe=o("gpt_neox"),wUe=o(" \u2014 "),qS=a("a"),AUe=o("GPTNeoXConfig"),LUe=o(" (GPT NeoX model)"),yUe=l(),vm=a("li"),Vte=a("strong"),xUe=o("gptj"),$Ue=o(" \u2014 "),jS=a("a"),kUe=o("GPTJConfig"),SUe=o(" (GPT-J model)"),RUe=l(),Fm=a("li"),Xte=a("strong"),PUe=o("hubert"),BUe=o(" \u2014 "),DS=a("a"),IUe=o("HubertConfig"),NUe=o(" (Hubert model)"),qUe=l(),Tm=a("li"),zte=a("strong"),jUe=o("ibert"),DUe=o(" \u2014 "),GS=a("a"),GUe=o("IBertConfig"),OUe=o(" (I-BERT model)"),VUe=l(),Mm=a("li"),Wte=a("strong"),XUe=o("imagegpt"),zUe=o(" \u2014 "),OS=a("a"),WUe=o("ImageGPTConfig"),QUe=o(" (ImageGPT model)"),HUe=l(),Em=a("li"),Qte=a("strong"),UUe=o("layoutlm"),JUe=o(" \u2014 "),VS=a("a"),YUe=o("LayoutLMConfig"),KUe=o(" (LayoutLM model)"),ZUe=l(),Cm=a("li"),Hte=a("strong"),eJe=o("layoutlmv2"),oJe=o(" \u2014 "),XS=a("a"),rJe=o("LayoutLMv2Config"),tJe=o(" (LayoutLMv2 model)"),aJe=l(),wm=a("li"),Ute=a("strong"),nJe=o("layoutlmv3"),sJe=o(" \u2014 "),zS=a("a"),lJe=o("LayoutLMv3Config"),iJe=o(" (LayoutLMv3 model)"),dJe=l(),Am=a("li"),Jte=a("strong"),cJe=o("led"),fJe=o(" \u2014 "),WS=a("a"),mJe=o("LEDConfig"),gJe=o(" (LED model)"),hJe=l(),Lm=a("li"),Yte=a("strong"),pJe=o("levit"),uJe=o(" \u2014 "),QS=a("a"),_Je=o("LevitConfig"),bJe=o(" (LeViT model)"),vJe=l(),ym=a("li"),Kte=a("strong"),FJe=o("longformer"),TJe=o(" \u2014 "),HS=a("a"),MJe=o("LongformerConfig"),EJe=o(" (Longformer model)"),CJe=l(),xm=a("li"),Zte=a("strong"),wJe=o("longt5"),AJe=o(" \u2014 "),US=a("a"),LJe=o("LongT5Config"),yJe=o(" (LongT5 model)"),xJe=l(),$m=a("li"),eae=a("strong"),$Je=o("luke"),kJe=o(" \u2014 "),JS=a("a"),SJe=o("LukeConfig"),RJe=o(" (LUKE model)"),PJe=l(),km=a("li"),oae=a("strong"),BJe=o("lxmert"),IJe=o(" \u2014 "),YS=a("a"),NJe=o("LxmertConfig"),qJe=o(" (LXMERT model)"),jJe=l(),Sm=a("li"),rae=a("strong"),DJe=o("m2m_100"),GJe=o(" \u2014 "),KS=a("a"),OJe=o("M2M100Config"),VJe=o(" (M2M100 model)"),XJe=l(),Rm=a("li"),tae=a("strong"),zJe=o("marian"),WJe=o(" \u2014 "),ZS=a("a"),QJe=o("MarianConfig"),HJe=o(" (Marian model)"),UJe=l(),Pm=a("li"),aae=a("strong"),JJe=o("maskformer"),YJe=o(" \u2014 "),eR=a("a"),KJe=o("MaskFormerConfig"),ZJe=o(" (MaskFormer model)"),eYe=l(),Bm=a("li"),nae=a("strong"),oYe=o("mbart"),rYe=o(" \u2014 "),oR=a("a"),tYe=o("MBartConfig"),aYe=o(" (mBART model)"),nYe=l(),Im=a("li"),sae=a("strong"),sYe=o("mctct"),lYe=o(" \u2014 "),rR=a("a"),iYe=o("MCTCTConfig"),dYe=o(" (M-CTC-T model)"),cYe=l(),Nm=a("li"),lae=a("strong"),fYe=o("megatron-bert"),mYe=o(" \u2014 "),tR=a("a"),gYe=o("MegatronBertConfig"),hYe=o(" (Megatron-BERT model)"),pYe=l(),qm=a("li"),iae=a("strong"),uYe=o("mobilebert"),_Ye=o(" \u2014 "),aR=a("a"),bYe=o("MobileBertConfig"),vYe=o(" (MobileBERT model)"),FYe=l(),jm=a("li"),dae=a("strong"),TYe=o("mpnet"),MYe=o(" \u2014 "),nR=a("a"),EYe=o("MPNetConfig"),CYe=o(" (MPNet model)"),wYe=l(),Dm=a("li"),cae=a("strong"),AYe=o("mt5"),LYe=o(" \u2014 "),sR=a("a"),yYe=o("MT5Config"),xYe=o(" (MT5 model)"),$Ye=l(),Gm=a("li"),fae=a("strong"),kYe=o("nystromformer"),SYe=o(" \u2014 "),lR=a("a"),RYe=o("NystromformerConfig"),PYe=o(" (Nystr\xF6mformer model)"),BYe=l(),Om=a("li"),mae=a("strong"),IYe=o("openai-gpt"),NYe=o(" \u2014 "),iR=a("a"),qYe=o("OpenAIGPTConfig"),jYe=o(" (OpenAI GPT model)"),DYe=l(),Vm=a("li"),gae=a("strong"),GYe=o("opt"),OYe=o(" \u2014 "),dR=a("a"),VYe=o("OPTConfig"),XYe=o(" (OPT model)"),zYe=l(),Xm=a("li"),hae=a("strong"),WYe=o("pegasus"),QYe=o(" \u2014 "),cR=a("a"),HYe=o("PegasusConfig"),UYe=o(" (Pegasus model)"),JYe=l(),zm=a("li"),pae=a("strong"),YYe=o("perceiver"),KYe=o(" \u2014 "),fR=a("a"),ZYe=o("PerceiverConfig"),eKe=o(" (Perceiver model)"),oKe=l(),Wm=a("li"),uae=a("strong"),rKe=o("plbart"),tKe=o(" \u2014 "),mR=a("a"),aKe=o("PLBartConfig"),nKe=o(" (PLBart model)"),sKe=l(),Qm=a("li"),_ae=a("strong"),lKe=o("poolformer"),iKe=o(" \u2014 "),gR=a("a"),dKe=o("PoolFormerConfig"),cKe=o(" (PoolFormer model)"),fKe=l(),Hm=a("li"),bae=a("strong"),mKe=o("prophetnet"),gKe=o(" \u2014 "),hR=a("a"),hKe=o("ProphetNetConfig"),pKe=o(" (ProphetNet model)"),uKe=l(),Um=a("li"),vae=a("strong"),_Ke=o("qdqbert"),bKe=o(" \u2014 "),pR=a("a"),vKe=o("QDQBertConfig"),FKe=o(" (QDQBert model)"),TKe=l(),Jm=a("li"),Fae=a("strong"),MKe=o("rag"),EKe=o(" \u2014 "),uR=a("a"),CKe=o("RagConfig"),wKe=o(" (RAG model)"),AKe=l(),Ym=a("li"),Tae=a("strong"),LKe=o("realm"),yKe=o(" \u2014 "),_R=a("a"),xKe=o("RealmConfig"),$Ke=o(" (REALM model)"),kKe=l(),Km=a("li"),Mae=a("strong"),SKe=o("reformer"),RKe=o(" \u2014 "),bR=a("a"),PKe=o("ReformerConfig"),BKe=o(" (Reformer model)"),IKe=l(),Zm=a("li"),Eae=a("strong"),NKe=o("regnet"),qKe=o(" \u2014 "),vR=a("a"),jKe=o("RegNetConfig"),DKe=o(" (RegNet model)"),GKe=l(),eg=a("li"),Cae=a("strong"),OKe=o("rembert"),VKe=o(" \u2014 "),FR=a("a"),XKe=o("RemBertConfig"),zKe=o(" (RemBERT model)"),WKe=l(),og=a("li"),wae=a("strong"),QKe=o("resnet"),HKe=o(" \u2014 "),TR=a("a"),UKe=o("ResNetConfig"),JKe=o(" (ResNet model)"),YKe=l(),rg=a("li"),Aae=a("strong"),KKe=o("retribert"),ZKe=o(" \u2014 "),MR=a("a"),eZe=o("RetriBertConfig"),oZe=o(" (RetriBERT model)"),rZe=l(),tg=a("li"),Lae=a("strong"),tZe=o("roberta"),aZe=o(" \u2014 "),ER=a("a"),nZe=o("RobertaConfig"),sZe=o(" (RoBERTa model)"),lZe=l(),ag=a("li"),yae=a("strong"),iZe=o("roformer"),dZe=o(" \u2014 "),CR=a("a"),cZe=o("RoFormerConfig"),fZe=o(" (RoFormer model)"),mZe=l(),ng=a("li"),xae=a("strong"),gZe=o("segformer"),hZe=o(" \u2014 "),wR=a("a"),pZe=o("SegformerConfig"),uZe=o(" (SegFormer model)"),_Ze=l(),sg=a("li"),$ae=a("strong"),bZe=o("sew"),vZe=o(" \u2014 "),AR=a("a"),FZe=o("SEWConfig"),TZe=o(" (SEW model)"),MZe=l(),lg=a("li"),kae=a("strong"),EZe=o("sew-d"),CZe=o(" \u2014 "),LR=a("a"),wZe=o("SEWDConfig"),AZe=o(" (SEW-D model)"),LZe=l(),ig=a("li"),Sae=a("strong"),yZe=o("speech-encoder-decoder"),xZe=o(" \u2014 "),yR=a("a"),$Ze=o("SpeechEncoderDecoderConfig"),kZe=o(" (Speech Encoder decoder model)"),SZe=l(),dg=a("li"),Rae=a("strong"),RZe=o("speech_to_text"),PZe=o(" \u2014 "),xR=a("a"),BZe=o("Speech2TextConfig"),IZe=o(" (Speech2Text model)"),NZe=l(),cg=a("li"),Pae=a("strong"),qZe=o("speech_to_text_2"),jZe=o(" \u2014 "),$R=a("a"),DZe=o("Speech2Text2Config"),GZe=o(" (Speech2Text2 model)"),OZe=l(),fg=a("li"),Bae=a("strong"),VZe=o("splinter"),XZe=o(" \u2014 "),kR=a("a"),zZe=o("SplinterConfig"),WZe=o(" (Splinter model)"),QZe=l(),mg=a("li"),Iae=a("strong"),HZe=o("squeezebert"),UZe=o(" \u2014 "),SR=a("a"),JZe=o("SqueezeBertConfig"),YZe=o(" (SqueezeBERT model)"),KZe=l(),gg=a("li"),Nae=a("strong"),ZZe=o("swin"),eeo=o(" \u2014 "),RR=a("a"),oeo=o("SwinConfig"),reo=o(" (Swin Transformer model)"),teo=l(),hg=a("li"),qae=a("strong"),aeo=o("t5"),neo=o(" \u2014 "),PR=a("a"),seo=o("T5Config"),leo=o(" (T5 model)"),ieo=l(),pg=a("li"),jae=a("strong"),deo=o("tapas"),ceo=o(" \u2014 "),BR=a("a"),feo=o("TapasConfig"),meo=o(" (TAPAS model)"),geo=l(),ug=a("li"),Dae=a("strong"),heo=o("trajectory_transformer"),peo=o(" \u2014 "),IR=a("a"),ueo=o("TrajectoryTransformerConfig"),_eo=o(" (Trajectory Transformer model)"),beo=l(),_g=a("li"),Gae=a("strong"),veo=o("transfo-xl"),Feo=o(" \u2014 "),NR=a("a"),Teo=o("TransfoXLConfig"),Meo=o(" (Transformer-XL model)"),Eeo=l(),bg=a("li"),Oae=a("strong"),Ceo=o("trocr"),weo=o(" \u2014 "),qR=a("a"),Aeo=o("TrOCRConfig"),Leo=o(" (TrOCR model)"),yeo=l(),vg=a("li"),Vae=a("strong"),xeo=o("unispeech"),$eo=o(" \u2014 "),jR=a("a"),keo=o("UniSpeechConfig"),Seo=o(" (UniSpeech model)"),Reo=l(),Fg=a("li"),Xae=a("strong"),Peo=o("unispeech-sat"),Beo=o(" \u2014 "),DR=a("a"),Ieo=o("UniSpeechSatConfig"),Neo=o(" (UniSpeechSat model)"),qeo=l(),Tg=a("li"),zae=a("strong"),jeo=o("van"),Deo=o(" \u2014 "),GR=a("a"),Geo=o("VanConfig"),Oeo=o(" (VAN model)"),Veo=l(),Mg=a("li"),Wae=a("strong"),Xeo=o("vilt"),zeo=o(" \u2014 "),OR=a("a"),Weo=o("ViltConfig"),Qeo=o(" (ViLT model)"),Heo=l(),Eg=a("li"),Qae=a("strong"),Ueo=o("vision-encoder-decoder"),Jeo=o(" \u2014 "),VR=a("a"),Yeo=o("VisionEncoderDecoderConfig"),Keo=o(" (Vision Encoder decoder model)"),Zeo=l(),Cg=a("li"),Hae=a("strong"),eoo=o("vision-text-dual-encoder"),ooo=o(" \u2014 "),XR=a("a"),roo=o("VisionTextDualEncoderConfig"),too=o(" (VisionTextDualEncoder model)"),aoo=l(),wg=a("li"),Uae=a("strong"),noo=o("visual_bert"),soo=o(" \u2014 "),zR=a("a"),loo=o("VisualBertConfig"),ioo=o(" (VisualBERT model)"),doo=l(),Ag=a("li"),Jae=a("strong"),coo=o("vit"),foo=o(" \u2014 "),WR=a("a"),moo=o("ViTConfig"),goo=o(" (ViT model)"),hoo=l(),Lg=a("li"),Yae=a("strong"),poo=o("vit_mae"),uoo=o(" \u2014 "),QR=a("a"),_oo=o("ViTMAEConfig"),boo=o(" (ViTMAE model)"),voo=l(),yg=a("li"),Kae=a("strong"),Foo=o("wav2vec2"),Too=o(" \u2014 "),HR=a("a"),Moo=o("Wav2Vec2Config"),Eoo=o(" (Wav2Vec2 model)"),Coo=l(),xg=a("li"),Zae=a("strong"),woo=o("wav2vec2-conformer"),Aoo=o(" \u2014 "),UR=a("a"),Loo=o("Wav2Vec2ConformerConfig"),yoo=o(" (Wav2Vec2-Conformer model)"),xoo=l(),$g=a("li"),ene=a("strong"),$oo=o("wavlm"),koo=o(" \u2014 "),JR=a("a"),Soo=o("WavLMConfig"),Roo=o(" (WavLM model)"),Poo=l(),kg=a("li"),one=a("strong"),Boo=o("xglm"),Ioo=o(" \u2014 "),YR=a("a"),Noo=o("XGLMConfig"),qoo=o(" (XGLM model)"),joo=l(),Sg=a("li"),rne=a("strong"),Doo=o("xlm"),Goo=o(" \u2014 "),KR=a("a"),Ooo=o("XLMConfig"),Voo=o(" (XLM model)"),Xoo=l(),Rg=a("li"),tne=a("strong"),zoo=o("xlm-prophetnet"),Woo=o(" \u2014 "),ZR=a("a"),Qoo=o("XLMProphetNetConfig"),Hoo=o(" (XLM-ProphetNet model)"),Uoo=l(),Pg=a("li"),ane=a("strong"),Joo=o("xlm-roberta"),Yoo=o(" \u2014 "),eP=a("a"),Koo=o("XLMRobertaConfig"),Zoo=o(" (XLM-RoBERTa model)"),ero=l(),Bg=a("li"),nne=a("strong"),oro=o("xlm-roberta-xl"),rro=o(" \u2014 "),oP=a("a"),tro=o("XLMRobertaXLConfig"),aro=o(" (XLM-RoBERTa-XL model)"),nro=l(),Ig=a("li"),sne=a("strong"),sro=o("xlnet"),lro=o(" \u2014 "),rP=a("a"),iro=o("XLNetConfig"),dro=o(" (XLNet model)"),cro=l(),Ng=a("li"),lne=a("strong"),fro=o("yolos"),mro=o(" \u2014 "),tP=a("a"),gro=o("YolosConfig"),hro=o(" (YOLOS model)"),pro=l(),qg=a("li"),ine=a("strong"),uro=o("yoso"),_ro=o(" \u2014 "),aP=a("a"),bro=o("YosoConfig"),vro=o(" (YOSO model)"),Fro=l(),F(jg.$$.fragment),Tro=l(),Dg=a("div"),F(yy.$$.fragment),Mro=l(),dne=a("p"),Ero=o("Register a new configuration for this class."),gGe=l(),$i=a("h2"),Gg=a("a"),cne=a("span"),F(xy.$$.fragment),Cro=l(),fne=a("span"),wro=o("AutoTokenizer"),hGe=l(),Ao=a("div"),F($y.$$.fragment),Aro=l(),ky=a("p"),Lro=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),nP=a("a"),yro=o("AutoTokenizer.from_pretrained()"),xro=o(" class method."),$ro=l(),Sy=a("p"),kro=o("This class cannot be instantiated directly using "),mne=a("code"),Sro=o("__init__()"),Rro=o(" (throws an error)."),Pro=l(),Ar=a("div"),F(Ry.$$.fragment),Bro=l(),gne=a("p"),Iro=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Nro=l(),$a=a("p"),qro=o("The tokenizer class to instantiate is selected based on the "),hne=a("code"),jro=o("model_type"),Dro=o(` property of the config object (either
passed as an argument or loaded from `),pne=a("code"),Gro=o("pretrained_model_name_or_path"),Oro=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),une=a("code"),Vro=o("pretrained_model_name_or_path"),Xro=o(":"),zro=l(),k=a("ul"),Nn=a("li"),_ne=a("strong"),Wro=o("albert"),Qro=o(" \u2014 "),sP=a("a"),Hro=o("AlbertTokenizer"),Uro=o(" or "),lP=a("a"),Jro=o("AlbertTokenizerFast"),Yro=o(" (ALBERT model)"),Kro=l(),qn=a("li"),bne=a("strong"),Zro=o("bart"),eto=o(" \u2014 "),iP=a("a"),oto=o("BartTokenizer"),rto=o(" or "),dP=a("a"),tto=o("BartTokenizerFast"),ato=o(" (BART model)"),nto=l(),jn=a("li"),vne=a("strong"),sto=o("barthez"),lto=o(" \u2014 "),cP=a("a"),ito=o("BarthezTokenizer"),dto=o(" or "),fP=a("a"),cto=o("BarthezTokenizerFast"),fto=o(" (BARThez model)"),mto=l(),Og=a("li"),Fne=a("strong"),gto=o("bartpho"),hto=o(" \u2014 "),mP=a("a"),pto=o("BartphoTokenizer"),uto=o(" (BARTpho model)"),_to=l(),Dn=a("li"),Tne=a("strong"),bto=o("bert"),vto=o(" \u2014 "),gP=a("a"),Fto=o("BertTokenizer"),Tto=o(" or "),hP=a("a"),Mto=o("BertTokenizerFast"),Eto=o(" (BERT model)"),Cto=l(),Vg=a("li"),Mne=a("strong"),wto=o("bert-generation"),Ato=o(" \u2014 "),pP=a("a"),Lto=o("BertGenerationTokenizer"),yto=o(" (Bert Generation model)"),xto=l(),Xg=a("li"),Ene=a("strong"),$to=o("bert-japanese"),kto=o(" \u2014 "),uP=a("a"),Sto=o("BertJapaneseTokenizer"),Rto=o(" (BertJapanese model)"),Pto=l(),zg=a("li"),Cne=a("strong"),Bto=o("bertweet"),Ito=o(" \u2014 "),_P=a("a"),Nto=o("BertweetTokenizer"),qto=o(" (BERTweet model)"),jto=l(),Gn=a("li"),wne=a("strong"),Dto=o("big_bird"),Gto=o(" \u2014 "),bP=a("a"),Oto=o("BigBirdTokenizer"),Vto=o(" or "),vP=a("a"),Xto=o("BigBirdTokenizerFast"),zto=o(" (BigBird model)"),Wto=l(),On=a("li"),Ane=a("strong"),Qto=o("bigbird_pegasus"),Hto=o(" \u2014 "),FP=a("a"),Uto=o("PegasusTokenizer"),Jto=o(" or "),TP=a("a"),Yto=o("PegasusTokenizerFast"),Kto=o(" (BigBird-Pegasus model)"),Zto=l(),Vn=a("li"),Lne=a("strong"),eao=o("blenderbot"),oao=o(" \u2014 "),MP=a("a"),rao=o("BlenderbotTokenizer"),tao=o(" or "),EP=a("a"),aao=o("BlenderbotTokenizerFast"),nao=o(" (Blenderbot model)"),sao=l(),Wg=a("li"),yne=a("strong"),lao=o("blenderbot-small"),iao=o(" \u2014 "),CP=a("a"),dao=o("BlenderbotSmallTokenizer"),cao=o(" (BlenderbotSmall model)"),fao=l(),Qg=a("li"),xne=a("strong"),mao=o("bloom"),gao=o(" \u2014 "),wP=a("a"),hao=o("BloomTokenizerFast"),pao=o(" (BLOOM model)"),uao=l(),Hg=a("li"),$ne=a("strong"),_ao=o("byt5"),bao=o(" \u2014 "),AP=a("a"),vao=o("ByT5Tokenizer"),Fao=o(" (ByT5 model)"),Tao=l(),Xn=a("li"),kne=a("strong"),Mao=o("camembert"),Eao=o(" \u2014 "),LP=a("a"),Cao=o("CamembertTokenizer"),wao=o(" or "),yP=a("a"),Aao=o("CamembertTokenizerFast"),Lao=o(" (CamemBERT model)"),yao=l(),Ug=a("li"),Sne=a("strong"),xao=o("canine"),$ao=o(" \u2014 "),xP=a("a"),kao=o("CanineTokenizer"),Sao=o(" (CANINE model)"),Rao=l(),zn=a("li"),Rne=a("strong"),Pao=o("clip"),Bao=o(" \u2014 "),$P=a("a"),Iao=o("CLIPTokenizer"),Nao=o(" or "),kP=a("a"),qao=o("CLIPTokenizerFast"),jao=o(" (CLIP model)"),Dao=l(),Wn=a("li"),Pne=a("strong"),Gao=o("convbert"),Oao=o(" \u2014 "),SP=a("a"),Vao=o("ConvBertTokenizer"),Xao=o(" or "),RP=a("a"),zao=o("ConvBertTokenizerFast"),Wao=o(" (ConvBERT model)"),Qao=l(),Qn=a("li"),Bne=a("strong"),Hao=o("cpm"),Uao=o(" \u2014 "),PP=a("a"),Jao=o("CpmTokenizer"),Yao=o(" or "),BP=a("a"),Kao=o("CpmTokenizerFast"),Zao=o(" (CPM model)"),eno=l(),Jg=a("li"),Ine=a("strong"),ono=o("ctrl"),rno=o(" \u2014 "),IP=a("a"),tno=o("CTRLTokenizer"),ano=o(" (CTRL model)"),nno=l(),Hn=a("li"),Nne=a("strong"),sno=o("data2vec-text"),lno=o(" \u2014 "),NP=a("a"),ino=o("RobertaTokenizer"),dno=o(" or "),qP=a("a"),cno=o("RobertaTokenizerFast"),fno=o(" (Data2VecText model)"),mno=l(),Un=a("li"),qne=a("strong"),gno=o("deberta"),hno=o(" \u2014 "),jP=a("a"),pno=o("DebertaTokenizer"),uno=o(" or "),DP=a("a"),_no=o("DebertaTokenizerFast"),bno=o(" (DeBERTa model)"),vno=l(),Jn=a("li"),jne=a("strong"),Fno=o("deberta-v2"),Tno=o(" \u2014 "),GP=a("a"),Mno=o("DebertaV2Tokenizer"),Eno=o(" or "),OP=a("a"),Cno=o("DebertaV2TokenizerFast"),wno=o(" (DeBERTa-v2 model)"),Ano=l(),Yn=a("li"),Dne=a("strong"),Lno=o("distilbert"),yno=o(" \u2014 "),VP=a("a"),xno=o("DistilBertTokenizer"),$no=o(" or "),XP=a("a"),kno=o("DistilBertTokenizerFast"),Sno=o(" (DistilBERT model)"),Rno=l(),Kn=a("li"),Gne=a("strong"),Pno=o("dpr"),Bno=o(" \u2014 "),zP=a("a"),Ino=o("DPRQuestionEncoderTokenizer"),Nno=o(" or "),WP=a("a"),qno=o("DPRQuestionEncoderTokenizerFast"),jno=o(" (DPR model)"),Dno=l(),Zn=a("li"),One=a("strong"),Gno=o("electra"),Ono=o(" \u2014 "),QP=a("a"),Vno=o("ElectraTokenizer"),Xno=o(" or "),HP=a("a"),zno=o("ElectraTokenizerFast"),Wno=o(" (ELECTRA model)"),Qno=l(),Yg=a("li"),Vne=a("strong"),Hno=o("flaubert"),Uno=o(" \u2014 "),UP=a("a"),Jno=o("FlaubertTokenizer"),Yno=o(" (FlauBERT model)"),Kno=l(),es=a("li"),Xne=a("strong"),Zno=o("fnet"),eso=o(" \u2014 "),JP=a("a"),oso=o("FNetTokenizer"),rso=o(" or "),YP=a("a"),tso=o("FNetTokenizerFast"),aso=o(" (FNet model)"),nso=l(),Kg=a("li"),zne=a("strong"),sso=o("fsmt"),lso=o(" \u2014 "),KP=a("a"),iso=o("FSMTTokenizer"),dso=o(" (FairSeq Machine-Translation model)"),cso=l(),os=a("li"),Wne=a("strong"),fso=o("funnel"),mso=o(" \u2014 "),ZP=a("a"),gso=o("FunnelTokenizer"),hso=o(" or "),eB=a("a"),pso=o("FunnelTokenizerFast"),uso=o(" (Funnel Transformer model)"),_so=l(),rs=a("li"),Qne=a("strong"),bso=o("gpt2"),vso=o(" \u2014 "),oB=a("a"),Fso=o("GPT2Tokenizer"),Tso=o(" or "),rB=a("a"),Mso=o("GPT2TokenizerFast"),Eso=o(" (OpenAI GPT-2 model)"),Cso=l(),ts=a("li"),Hne=a("strong"),wso=o("gpt_neo"),Aso=o(" \u2014 "),tB=a("a"),Lso=o("GPT2Tokenizer"),yso=o(" or "),aB=a("a"),xso=o("GPT2TokenizerFast"),$so=o(" (GPT Neo model)"),kso=l(),Zg=a("li"),Une=a("strong"),Sso=o("gpt_neox"),Rso=o(" \u2014 "),nB=a("a"),Pso=o("GPTNeoXTokenizerFast"),Bso=o(" (GPT NeoX model)"),Iso=l(),as=a("li"),Jne=a("strong"),Nso=o("gptj"),qso=o(" \u2014 "),sB=a("a"),jso=o("GPT2Tokenizer"),Dso=o(" or "),lB=a("a"),Gso=o("GPT2TokenizerFast"),Oso=o(" (GPT-J model)"),Vso=l(),ns=a("li"),Yne=a("strong"),Xso=o("herbert"),zso=o(" \u2014 "),iB=a("a"),Wso=o("HerbertTokenizer"),Qso=o(" or "),dB=a("a"),Hso=o("HerbertTokenizerFast"),Uso=o(" (HerBERT model)"),Jso=l(),eh=a("li"),Kne=a("strong"),Yso=o("hubert"),Kso=o(" \u2014 "),cB=a("a"),Zso=o("Wav2Vec2CTCTokenizer"),elo=o(" (Hubert model)"),olo=l(),ss=a("li"),Zne=a("strong"),rlo=o("ibert"),tlo=o(" \u2014 "),fB=a("a"),alo=o("RobertaTokenizer"),nlo=o(" or "),mB=a("a"),slo=o("RobertaTokenizerFast"),llo=o(" (I-BERT model)"),ilo=l(),ls=a("li"),ese=a("strong"),dlo=o("layoutlm"),clo=o(" \u2014 "),gB=a("a"),flo=o("LayoutLMTokenizer"),mlo=o(" or "),hB=a("a"),glo=o("LayoutLMTokenizerFast"),hlo=o(" (LayoutLM model)"),plo=l(),is=a("li"),ose=a("strong"),ulo=o("layoutlmv2"),_lo=o(" \u2014 "),pB=a("a"),blo=o("LayoutLMv2Tokenizer"),vlo=o(" or "),uB=a("a"),Flo=o("LayoutLMv2TokenizerFast"),Tlo=o(" (LayoutLMv2 model)"),Mlo=l(),ds=a("li"),rse=a("strong"),Elo=o("layoutlmv3"),Clo=o(" \u2014 "),_B=a("a"),wlo=o("LayoutLMv3Tokenizer"),Alo=o(" or "),bB=a("a"),Llo=o("LayoutLMv3TokenizerFast"),ylo=o(" (LayoutLMv3 model)"),xlo=l(),cs=a("li"),tse=a("strong"),$lo=o("layoutxlm"),klo=o(" \u2014 "),vB=a("a"),Slo=o("LayoutXLMTokenizer"),Rlo=o(" or "),FB=a("a"),Plo=o("LayoutXLMTokenizerFast"),Blo=o(" (LayoutXLM model)"),Ilo=l(),fs=a("li"),ase=a("strong"),Nlo=o("led"),qlo=o(" \u2014 "),TB=a("a"),jlo=o("LEDTokenizer"),Dlo=o(" or "),MB=a("a"),Glo=o("LEDTokenizerFast"),Olo=o(" (LED model)"),Vlo=l(),ms=a("li"),nse=a("strong"),Xlo=o("longformer"),zlo=o(" \u2014 "),EB=a("a"),Wlo=o("LongformerTokenizer"),Qlo=o(" or "),CB=a("a"),Hlo=o("LongformerTokenizerFast"),Ulo=o(" (Longformer model)"),Jlo=l(),gs=a("li"),sse=a("strong"),Ylo=o("longt5"),Klo=o(" \u2014 "),wB=a("a"),Zlo=o("T5Tokenizer"),eio=o(" or "),AB=a("a"),oio=o("T5TokenizerFast"),rio=o(" (LongT5 model)"),tio=l(),oh=a("li"),lse=a("strong"),aio=o("luke"),nio=o(" \u2014 "),LB=a("a"),sio=o("LukeTokenizer"),lio=o(" (LUKE model)"),iio=l(),hs=a("li"),ise=a("strong"),dio=o("lxmert"),cio=o(" \u2014 "),yB=a("a"),fio=o("LxmertTokenizer"),mio=o(" or "),xB=a("a"),gio=o("LxmertTokenizerFast"),hio=o(" (LXMERT model)"),pio=l(),rh=a("li"),dse=a("strong"),uio=o("m2m_100"),_io=o(" \u2014 "),$B=a("a"),bio=o("M2M100Tokenizer"),vio=o(" (M2M100 model)"),Fio=l(),th=a("li"),cse=a("strong"),Tio=o("marian"),Mio=o(" \u2014 "),kB=a("a"),Eio=o("MarianTokenizer"),Cio=o(" (Marian model)"),wio=l(),ps=a("li"),fse=a("strong"),Aio=o("mbart"),Lio=o(" \u2014 "),SB=a("a"),yio=o("MBartTokenizer"),xio=o(" or "),RB=a("a"),$io=o("MBartTokenizerFast"),kio=o(" (mBART model)"),Sio=l(),us=a("li"),mse=a("strong"),Rio=o("mbart50"),Pio=o(" \u2014 "),PB=a("a"),Bio=o("MBart50Tokenizer"),Iio=o(" or "),BB=a("a"),Nio=o("MBart50TokenizerFast"),qio=o(" (mBART-50 model)"),jio=l(),_s=a("li"),gse=a("strong"),Dio=o("megatron-bert"),Gio=o(" \u2014 "),IB=a("a"),Oio=o("BertTokenizer"),Vio=o(" or "),NB=a("a"),Xio=o("BertTokenizerFast"),zio=o(" (Megatron-BERT model)"),Wio=l(),ah=a("li"),hse=a("strong"),Qio=o("mluke"),Hio=o(" \u2014 "),qB=a("a"),Uio=o("MLukeTokenizer"),Jio=o(" (mLUKE model)"),Yio=l(),bs=a("li"),pse=a("strong"),Kio=o("mobilebert"),Zio=o(" \u2014 "),jB=a("a"),edo=o("MobileBertTokenizer"),odo=o(" or "),DB=a("a"),rdo=o("MobileBertTokenizerFast"),tdo=o(" (MobileBERT model)"),ado=l(),vs=a("li"),use=a("strong"),ndo=o("mpnet"),sdo=o(" \u2014 "),GB=a("a"),ldo=o("MPNetTokenizer"),ido=o(" or "),OB=a("a"),ddo=o("MPNetTokenizerFast"),cdo=o(" (MPNet model)"),fdo=l(),Fs=a("li"),_se=a("strong"),mdo=o("mt5"),gdo=o(" \u2014 "),VB=a("a"),hdo=o("MT5Tokenizer"),pdo=o(" or "),XB=a("a"),udo=o("MT5TokenizerFast"),_do=o(" (MT5 model)"),bdo=l(),Ts=a("li"),bse=a("strong"),vdo=o("nystromformer"),Fdo=o(" \u2014 "),zB=a("a"),Tdo=o("AlbertTokenizer"),Mdo=o(" or "),WB=a("a"),Edo=o("AlbertTokenizerFast"),Cdo=o(" (Nystr\xF6mformer model)"),wdo=l(),Ms=a("li"),vse=a("strong"),Ado=o("openai-gpt"),Ldo=o(" \u2014 "),QB=a("a"),ydo=o("OpenAIGPTTokenizer"),xdo=o(" or "),HB=a("a"),$do=o("OpenAIGPTTokenizerFast"),kdo=o(" (OpenAI GPT model)"),Sdo=l(),nh=a("li"),Fse=a("strong"),Rdo=o("opt"),Pdo=o(" \u2014 "),UB=a("a"),Bdo=o("GPT2Tokenizer"),Ido=o(" (OPT model)"),Ndo=l(),Es=a("li"),Tse=a("strong"),qdo=o("pegasus"),jdo=o(" \u2014 "),JB=a("a"),Ddo=o("PegasusTokenizer"),Gdo=o(" or "),YB=a("a"),Odo=o("PegasusTokenizerFast"),Vdo=o(" (Pegasus model)"),Xdo=l(),sh=a("li"),Mse=a("strong"),zdo=o("perceiver"),Wdo=o(" \u2014 "),KB=a("a"),Qdo=o("PerceiverTokenizer"),Hdo=o(" (Perceiver model)"),Udo=l(),lh=a("li"),Ese=a("strong"),Jdo=o("phobert"),Ydo=o(" \u2014 "),ZB=a("a"),Kdo=o("PhobertTokenizer"),Zdo=o(" (PhoBERT model)"),eco=l(),ih=a("li"),Cse=a("strong"),oco=o("plbart"),rco=o(" \u2014 "),eI=a("a"),tco=o("PLBartTokenizer"),aco=o(" (PLBart model)"),nco=l(),dh=a("li"),wse=a("strong"),sco=o("prophetnet"),lco=o(" \u2014 "),oI=a("a"),ico=o("ProphetNetTokenizer"),dco=o(" (ProphetNet model)"),cco=l(),Cs=a("li"),Ase=a("strong"),fco=o("qdqbert"),mco=o(" \u2014 "),rI=a("a"),gco=o("BertTokenizer"),hco=o(" or "),tI=a("a"),pco=o("BertTokenizerFast"),uco=o(" (QDQBert model)"),_co=l(),ch=a("li"),Lse=a("strong"),bco=o("rag"),vco=o(" \u2014 "),aI=a("a"),Fco=o("RagTokenizer"),Tco=o(" (RAG model)"),Mco=l(),ws=a("li"),yse=a("strong"),Eco=o("realm"),Cco=o(" \u2014 "),nI=a("a"),wco=o("RealmTokenizer"),Aco=o(" or "),sI=a("a"),Lco=o("RealmTokenizerFast"),yco=o(" (REALM model)"),xco=l(),As=a("li"),xse=a("strong"),$co=o("reformer"),kco=o(" \u2014 "),lI=a("a"),Sco=o("ReformerTokenizer"),Rco=o(" or "),iI=a("a"),Pco=o("ReformerTokenizerFast"),Bco=o(" (Reformer model)"),Ico=l(),Ls=a("li"),$se=a("strong"),Nco=o("rembert"),qco=o(" \u2014 "),dI=a("a"),jco=o("RemBertTokenizer"),Dco=o(" or "),cI=a("a"),Gco=o("RemBertTokenizerFast"),Oco=o(" (RemBERT model)"),Vco=l(),ys=a("li"),kse=a("strong"),Xco=o("retribert"),zco=o(" \u2014 "),fI=a("a"),Wco=o("RetriBertTokenizer"),Qco=o(" or "),mI=a("a"),Hco=o("RetriBertTokenizerFast"),Uco=o(" (RetriBERT model)"),Jco=l(),xs=a("li"),Sse=a("strong"),Yco=o("roberta"),Kco=o(" \u2014 "),gI=a("a"),Zco=o("RobertaTokenizer"),efo=o(" or "),hI=a("a"),ofo=o("RobertaTokenizerFast"),rfo=o(" (RoBERTa model)"),tfo=l(),$s=a("li"),Rse=a("strong"),afo=o("roformer"),nfo=o(" \u2014 "),pI=a("a"),sfo=o("RoFormerTokenizer"),lfo=o(" or "),uI=a("a"),ifo=o("RoFormerTokenizerFast"),dfo=o(" (RoFormer model)"),cfo=l(),fh=a("li"),Pse=a("strong"),ffo=o("speech_to_text"),mfo=o(" \u2014 "),_I=a("a"),gfo=o("Speech2TextTokenizer"),hfo=o(" (Speech2Text model)"),pfo=l(),mh=a("li"),Bse=a("strong"),ufo=o("speech_to_text_2"),_fo=o(" \u2014 "),bI=a("a"),bfo=o("Speech2Text2Tokenizer"),vfo=o(" (Speech2Text2 model)"),Ffo=l(),ks=a("li"),Ise=a("strong"),Tfo=o("splinter"),Mfo=o(" \u2014 "),vI=a("a"),Efo=o("SplinterTokenizer"),Cfo=o(" or "),FI=a("a"),wfo=o("SplinterTokenizerFast"),Afo=o(" (Splinter model)"),Lfo=l(),Ss=a("li"),Nse=a("strong"),yfo=o("squeezebert"),xfo=o(" \u2014 "),TI=a("a"),$fo=o("SqueezeBertTokenizer"),kfo=o(" or "),MI=a("a"),Sfo=o("SqueezeBertTokenizerFast"),Rfo=o(" (SqueezeBERT model)"),Pfo=l(),Rs=a("li"),qse=a("strong"),Bfo=o("t5"),Ifo=o(" \u2014 "),EI=a("a"),Nfo=o("T5Tokenizer"),qfo=o(" or "),CI=a("a"),jfo=o("T5TokenizerFast"),Dfo=o(" (T5 model)"),Gfo=l(),gh=a("li"),jse=a("strong"),Ofo=o("tapas"),Vfo=o(" \u2014 "),wI=a("a"),Xfo=o("TapasTokenizer"),zfo=o(" (TAPAS model)"),Wfo=l(),hh=a("li"),Dse=a("strong"),Qfo=o("tapex"),Hfo=o(" \u2014 "),AI=a("a"),Ufo=o("TapexTokenizer"),Jfo=o(" (TAPEX model)"),Yfo=l(),ph=a("li"),Gse=a("strong"),Kfo=o("transfo-xl"),Zfo=o(" \u2014 "),LI=a("a"),emo=o("TransfoXLTokenizer"),omo=o(" (Transformer-XL model)"),rmo=l(),Ps=a("li"),Ose=a("strong"),tmo=o("vilt"),amo=o(" \u2014 "),yI=a("a"),nmo=o("BertTokenizer"),smo=o(" or "),xI=a("a"),lmo=o("BertTokenizerFast"),imo=o(" (ViLT model)"),dmo=l(),Bs=a("li"),Vse=a("strong"),cmo=o("visual_bert"),fmo=o(" \u2014 "),$I=a("a"),mmo=o("BertTokenizer"),gmo=o(" or "),kI=a("a"),hmo=o("BertTokenizerFast"),pmo=o(" (VisualBERT model)"),umo=l(),uh=a("li"),Xse=a("strong"),_mo=o("wav2vec2"),bmo=o(" \u2014 "),SI=a("a"),vmo=o("Wav2Vec2CTCTokenizer"),Fmo=o(" (Wav2Vec2 model)"),Tmo=l(),_h=a("li"),zse=a("strong"),Mmo=o("wav2vec2-conformer"),Emo=o(" \u2014 "),RI=a("a"),Cmo=o("Wav2Vec2CTCTokenizer"),wmo=o(" (Wav2Vec2-Conformer model)"),Amo=l(),bh=a("li"),Wse=a("strong"),Lmo=o("wav2vec2_phoneme"),ymo=o(" \u2014 "),PI=a("a"),xmo=o("Wav2Vec2PhonemeCTCTokenizer"),$mo=o(" (Wav2Vec2Phoneme model)"),kmo=l(),Is=a("li"),Qse=a("strong"),Smo=o("xglm"),Rmo=o(" \u2014 "),BI=a("a"),Pmo=o("XGLMTokenizer"),Bmo=o(" or "),II=a("a"),Imo=o("XGLMTokenizerFast"),Nmo=o(" (XGLM model)"),qmo=l(),vh=a("li"),Hse=a("strong"),jmo=o("xlm"),Dmo=o(" \u2014 "),NI=a("a"),Gmo=o("XLMTokenizer"),Omo=o(" (XLM model)"),Vmo=l(),Fh=a("li"),Use=a("strong"),Xmo=o("xlm-prophetnet"),zmo=o(" \u2014 "),qI=a("a"),Wmo=o("XLMProphetNetTokenizer"),Qmo=o(" (XLM-ProphetNet model)"),Hmo=l(),Ns=a("li"),Jse=a("strong"),Umo=o("xlm-roberta"),Jmo=o(" \u2014 "),jI=a("a"),Ymo=o("XLMRobertaTokenizer"),Kmo=o(" or "),DI=a("a"),Zmo=o("XLMRobertaTokenizerFast"),ego=o(" (XLM-RoBERTa model)"),ogo=l(),qs=a("li"),Yse=a("strong"),rgo=o("xlm-roberta-xl"),tgo=o(" \u2014 "),GI=a("a"),ago=o("RobertaTokenizer"),ngo=o(" or "),OI=a("a"),sgo=o("RobertaTokenizerFast"),lgo=o(" (XLM-RoBERTa-XL model)"),igo=l(),js=a("li"),Kse=a("strong"),dgo=o("xlnet"),cgo=o(" \u2014 "),VI=a("a"),fgo=o("XLNetTokenizer"),mgo=o(" or "),XI=a("a"),ggo=o("XLNetTokenizerFast"),hgo=o(" (XLNet model)"),pgo=l(),Ds=a("li"),Zse=a("strong"),ugo=o("yoso"),_go=o(" \u2014 "),zI=a("a"),bgo=o("AlbertTokenizer"),vgo=o(" or "),WI=a("a"),Fgo=o("AlbertTokenizerFast"),Tgo=o(" (YOSO model)"),Mgo=l(),F(Th.$$.fragment),Ego=l(),Mh=a("div"),F(Py.$$.fragment),Cgo=l(),ele=a("p"),wgo=o("Register a new tokenizer in this mapping."),pGe=l(),ki=a("h2"),Eh=a("a"),ole=a("span"),F(By.$$.fragment),Ago=l(),rle=a("span"),Lgo=o("AutoFeatureExtractor"),uGe=l(),Lo=a("div"),F(Iy.$$.fragment),ygo=l(),Ny=a("p"),xgo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),QI=a("a"),$go=o("AutoFeatureExtractor.from_pretrained()"),kgo=o(" class method."),Sgo=l(),qy=a("p"),Rgo=o("This class cannot be instantiated directly using "),tle=a("code"),Pgo=o("__init__()"),Bgo=o(" (throws an error)."),Igo=l(),He=a("div"),F(jy.$$.fragment),Ngo=l(),ale=a("p"),qgo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),jgo=l(),ka=a("p"),Dgo=o("The feature extractor class to instantiate is selected based on the "),nle=a("code"),Ggo=o("model_type"),Ogo=o(` property of the config object
(either passed as an argument or loaded from `),sle=a("code"),Vgo=o("pretrained_model_name_or_path"),Xgo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),lle=a("code"),zgo=o("pretrained_model_name_or_path"),Wgo=o(":"),Qgo=l(),Y=a("ul"),Ch=a("li"),ile=a("strong"),Hgo=o("beit"),Ugo=o(" \u2014 "),HI=a("a"),Jgo=o("BeitFeatureExtractor"),Ygo=o(" (BEiT model)"),Kgo=l(),wh=a("li"),dle=a("strong"),Zgo=o("clip"),eho=o(" \u2014 "),UI=a("a"),oho=o("CLIPFeatureExtractor"),rho=o(" (CLIP model)"),tho=l(),Ah=a("li"),cle=a("strong"),aho=o("convnext"),nho=o(" \u2014 "),JI=a("a"),sho=o("ConvNextFeatureExtractor"),lho=o(" (ConvNeXT model)"),iho=l(),Lh=a("li"),fle=a("strong"),dho=o("cvt"),cho=o(" \u2014 "),YI=a("a"),fho=o("ConvNextFeatureExtractor"),mho=o(" (CvT model)"),gho=l(),yh=a("li"),mle=a("strong"),hho=o("data2vec-audio"),pho=o(" \u2014 "),KI=a("a"),uho=o("Wav2Vec2FeatureExtractor"),_ho=o(" (Data2VecAudio model)"),bho=l(),xh=a("li"),gle=a("strong"),vho=o("data2vec-vision"),Fho=o(" \u2014 "),ZI=a("a"),Tho=o("BeitFeatureExtractor"),Mho=o(" (Data2VecVision model)"),Eho=l(),$h=a("li"),hle=a("strong"),Cho=o("deit"),who=o(" \u2014 "),eN=a("a"),Aho=o("DeiTFeatureExtractor"),Lho=o(" (DeiT model)"),yho=l(),kh=a("li"),ple=a("strong"),xho=o("detr"),$ho=o(" \u2014 "),oN=a("a"),kho=o("DetrFeatureExtractor"),Sho=o(" (DETR model)"),Rho=l(),Sh=a("li"),ule=a("strong"),Pho=o("dpt"),Bho=o(" \u2014 "),rN=a("a"),Iho=o("DPTFeatureExtractor"),Nho=o(" (DPT model)"),qho=l(),Rh=a("li"),_le=a("strong"),jho=o("flava"),Dho=o(" \u2014 "),tN=a("a"),Gho=o("FlavaFeatureExtractor"),Oho=o(" (FLAVA model)"),Vho=l(),Ph=a("li"),ble=a("strong"),Xho=o("glpn"),zho=o(" \u2014 "),aN=a("a"),Who=o("GLPNFeatureExtractor"),Qho=o(" (GLPN model)"),Hho=l(),Bh=a("li"),vle=a("strong"),Uho=o("hubert"),Jho=o(" \u2014 "),nN=a("a"),Yho=o("Wav2Vec2FeatureExtractor"),Kho=o(" (Hubert model)"),Zho=l(),Ih=a("li"),Fle=a("strong"),epo=o("imagegpt"),opo=o(" \u2014 "),sN=a("a"),rpo=o("ImageGPTFeatureExtractor"),tpo=o(" (ImageGPT model)"),apo=l(),Nh=a("li"),Tle=a("strong"),npo=o("layoutlmv2"),spo=o(" \u2014 "),lN=a("a"),lpo=o("LayoutLMv2FeatureExtractor"),ipo=o(" (LayoutLMv2 model)"),dpo=l(),qh=a("li"),Mle=a("strong"),cpo=o("layoutlmv3"),fpo=o(" \u2014 "),iN=a("a"),mpo=o("LayoutLMv3FeatureExtractor"),gpo=o(" (LayoutLMv3 model)"),hpo=l(),jh=a("li"),Ele=a("strong"),ppo=o("levit"),upo=o(" \u2014 "),dN=a("a"),_po=o("LevitFeatureExtractor"),bpo=o(" (LeViT model)"),vpo=l(),Dh=a("li"),Cle=a("strong"),Fpo=o("maskformer"),Tpo=o(" \u2014 "),cN=a("a"),Mpo=o("MaskFormerFeatureExtractor"),Epo=o(" (MaskFormer model)"),Cpo=l(),Gh=a("li"),wle=a("strong"),wpo=o("mctct"),Apo=o(" \u2014 "),fN=a("a"),Lpo=o("MCTCTFeatureExtractor"),ypo=o(" (M-CTC-T model)"),xpo=l(),Oh=a("li"),Ale=a("strong"),$po=o("perceiver"),kpo=o(" \u2014 "),mN=a("a"),Spo=o("PerceiverFeatureExtractor"),Rpo=o(" (Perceiver model)"),Ppo=l(),Vh=a("li"),Lle=a("strong"),Bpo=o("poolformer"),Ipo=o(" \u2014 "),gN=a("a"),Npo=o("PoolFormerFeatureExtractor"),qpo=o(" (PoolFormer model)"),jpo=l(),Xh=a("li"),yle=a("strong"),Dpo=o("regnet"),Gpo=o(" \u2014 "),hN=a("a"),Opo=o("ConvNextFeatureExtractor"),Vpo=o(" (RegNet model)"),Xpo=l(),zh=a("li"),xle=a("strong"),zpo=o("resnet"),Wpo=o(" \u2014 "),pN=a("a"),Qpo=o("ConvNextFeatureExtractor"),Hpo=o(" (ResNet model)"),Upo=l(),Wh=a("li"),$le=a("strong"),Jpo=o("segformer"),Ypo=o(" \u2014 "),uN=a("a"),Kpo=o("SegformerFeatureExtractor"),Zpo=o(" (SegFormer model)"),euo=l(),Qh=a("li"),kle=a("strong"),ouo=o("speech_to_text"),ruo=o(" \u2014 "),_N=a("a"),tuo=o("Speech2TextFeatureExtractor"),auo=o(" (Speech2Text model)"),nuo=l(),Hh=a("li"),Sle=a("strong"),suo=o("swin"),luo=o(" \u2014 "),bN=a("a"),iuo=o("ViTFeatureExtractor"),duo=o(" (Swin Transformer model)"),cuo=l(),Uh=a("li"),Rle=a("strong"),fuo=o("van"),muo=o(" \u2014 "),vN=a("a"),guo=o("ConvNextFeatureExtractor"),huo=o(" (VAN model)"),puo=l(),Jh=a("li"),Ple=a("strong"),uuo=o("vilt"),_uo=o(" \u2014 "),FN=a("a"),buo=o("ViltFeatureExtractor"),vuo=o(" (ViLT model)"),Fuo=l(),Yh=a("li"),Ble=a("strong"),Tuo=o("vit"),Muo=o(" \u2014 "),TN=a("a"),Euo=o("ViTFeatureExtractor"),Cuo=o(" (ViT model)"),wuo=l(),Kh=a("li"),Ile=a("strong"),Auo=o("vit_mae"),Luo=o(" \u2014 "),MN=a("a"),yuo=o("ViTFeatureExtractor"),xuo=o(" (ViTMAE model)"),$uo=l(),Zh=a("li"),Nle=a("strong"),kuo=o("wav2vec2"),Suo=o(" \u2014 "),EN=a("a"),Ruo=o("Wav2Vec2FeatureExtractor"),Puo=o(" (Wav2Vec2 model)"),Buo=l(),ep=a("li"),qle=a("strong"),Iuo=o("wav2vec2-conformer"),Nuo=o(" \u2014 "),CN=a("a"),quo=o("Wav2Vec2FeatureExtractor"),juo=o(" (Wav2Vec2-Conformer model)"),Duo=l(),op=a("li"),jle=a("strong"),Guo=o("yolos"),Ouo=o(" \u2014 "),wN=a("a"),Vuo=o("YolosFeatureExtractor"),Xuo=o(" (YOLOS model)"),zuo=l(),F(rp.$$.fragment),Wuo=l(),F(tp.$$.fragment),Quo=l(),ap=a("div"),F(Dy.$$.fragment),Huo=l(),Dle=a("p"),Uuo=o("Register a new feature extractor for this class."),_Ge=l(),Si=a("h2"),np=a("a"),Gle=a("span"),F(Gy.$$.fragment),Juo=l(),Ole=a("span"),Yuo=o("AutoProcessor"),bGe=l(),yo=a("div"),F(Oy.$$.fragment),Kuo=l(),Vy=a("p"),Zuo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),AN=a("a"),e_o=o("AutoProcessor.from_pretrained()"),o_o=o(" class method."),r_o=l(),Xy=a("p"),t_o=o("This class cannot be instantiated directly using "),Vle=a("code"),a_o=o("__init__()"),n_o=o(" (throws an error)."),s_o=l(),Ue=a("div"),F(zy.$$.fragment),l_o=l(),Xle=a("p"),i_o=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),d_o=l(),Ri=a("p"),c_o=o("The processor class to instantiate is selected based on the "),zle=a("code"),f_o=o("model_type"),m_o=o(` property of the config object (either
passed as an argument or loaded from `),Wle=a("code"),g_o=o("pretrained_model_name_or_path"),h_o=o(" if possible):"),p_o=l(),he=a("ul"),sp=a("li"),Qle=a("strong"),u_o=o("clip"),__o=o(" \u2014 "),LN=a("a"),b_o=o("CLIPProcessor"),v_o=o(" (CLIP model)"),F_o=l(),lp=a("li"),Hle=a("strong"),T_o=o("flava"),M_o=o(" \u2014 "),Ule=a("code"),E_o=o("FLAVAProcessor"),C_o=o(" (FLAVA model)"),w_o=l(),ip=a("li"),Jle=a("strong"),A_o=o("layoutlmv2"),L_o=o(" \u2014 "),yN=a("a"),y_o=o("LayoutLMv2Processor"),x_o=o(" (LayoutLMv2 model)"),$_o=l(),dp=a("li"),Yle=a("strong"),k_o=o("layoutlmv3"),S_o=o(" \u2014 "),xN=a("a"),R_o=o("LayoutLMv3Processor"),P_o=o(" (LayoutLMv3 model)"),B_o=l(),cp=a("li"),Kle=a("strong"),I_o=o("layoutxlm"),N_o=o(" \u2014 "),$N=a("a"),q_o=o("LayoutXLMProcessor"),j_o=o(" (LayoutXLM model)"),D_o=l(),fp=a("li"),Zle=a("strong"),G_o=o("sew"),O_o=o(" \u2014 "),kN=a("a"),V_o=o("Wav2Vec2Processor"),X_o=o(" (SEW model)"),z_o=l(),mp=a("li"),eie=a("strong"),W_o=o("sew-d"),Q_o=o(" \u2014 "),SN=a("a"),H_o=o("Wav2Vec2Processor"),U_o=o(" (SEW-D model)"),J_o=l(),gp=a("li"),oie=a("strong"),Y_o=o("speech_to_text"),K_o=o(" \u2014 "),RN=a("a"),Z_o=o("Speech2TextProcessor"),e1o=o(" (Speech2Text model)"),o1o=l(),hp=a("li"),rie=a("strong"),r1o=o("speech_to_text_2"),t1o=o(" \u2014 "),PN=a("a"),a1o=o("Speech2Text2Processor"),n1o=o(" (Speech2Text2 model)"),s1o=l(),pp=a("li"),tie=a("strong"),l1o=o("trocr"),i1o=o(" \u2014 "),BN=a("a"),d1o=o("TrOCRProcessor"),c1o=o(" (TrOCR model)"),f1o=l(),up=a("li"),aie=a("strong"),m1o=o("unispeech"),g1o=o(" \u2014 "),IN=a("a"),h1o=o("Wav2Vec2Processor"),p1o=o(" (UniSpeech model)"),u1o=l(),_p=a("li"),nie=a("strong"),_1o=o("unispeech-sat"),b1o=o(" \u2014 "),NN=a("a"),v1o=o("Wav2Vec2Processor"),F1o=o(" (UniSpeechSat model)"),T1o=l(),bp=a("li"),sie=a("strong"),M1o=o("vilt"),E1o=o(" \u2014 "),qN=a("a"),C1o=o("ViltProcessor"),w1o=o(" (ViLT model)"),A1o=l(),vp=a("li"),lie=a("strong"),L1o=o("vision-text-dual-encoder"),y1o=o(" \u2014 "),jN=a("a"),x1o=o("VisionTextDualEncoderProcessor"),$1o=o(" (VisionTextDualEncoder model)"),k1o=l(),Fp=a("li"),iie=a("strong"),S1o=o("wav2vec2"),R1o=o(" \u2014 "),DN=a("a"),P1o=o("Wav2Vec2Processor"),B1o=o(" (Wav2Vec2 model)"),I1o=l(),Tp=a("li"),die=a("strong"),N1o=o("wav2vec2-conformer"),q1o=o(" \u2014 "),GN=a("a"),j1o=o("Wav2Vec2Processor"),D1o=o(" (Wav2Vec2-Conformer model)"),G1o=l(),Mp=a("li"),cie=a("strong"),O1o=o("wavlm"),V1o=o(" \u2014 "),ON=a("a"),X1o=o("Wav2Vec2Processor"),z1o=o(" (WavLM model)"),W1o=l(),F(Ep.$$.fragment),Q1o=l(),F(Cp.$$.fragment),H1o=l(),wp=a("div"),F(Wy.$$.fragment),U1o=l(),fie=a("p"),J1o=o("Register a new processor for this class."),vGe=l(),Pi=a("h2"),Ap=a("a"),mie=a("span"),F(Qy.$$.fragment),Y1o=l(),gie=a("span"),K1o=o("AutoModel"),FGe=l(),xo=a("div"),F(Hy.$$.fragment),Z1o=l(),Bi=a("p"),e2o=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),VN=a("a"),o2o=o("from_pretrained()"),r2o=o(" class method or the "),XN=a("a"),t2o=o("from_config()"),a2o=o(` class
method.`),n2o=l(),Uy=a("p"),s2o=o("This class cannot be instantiated directly using "),hie=a("code"),l2o=o("__init__()"),i2o=o(" (throws an error)."),d2o=l(),nt=a("div"),F(Jy.$$.fragment),c2o=l(),pie=a("p"),f2o=o("Instantiates one of the base model classes of the library from a configuration."),m2o=l(),Ii=a("p"),g2o=o(`Note:
Loading a model from its configuration file does `),uie=a("strong"),h2o=o("not"),p2o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zN=a("a"),u2o=o("from_pretrained()"),_2o=o(" to load the model weights."),b2o=l(),F(Lp.$$.fragment),v2o=l(),Je=a("div"),F(Yy.$$.fragment),F2o=l(),_ie=a("p"),T2o=o("Instantiate one of the base model classes of the library from a pretrained model."),M2o=l(),Sa=a("p"),E2o=o("The model class to instantiate is selected based on the "),bie=a("code"),C2o=o("model_type"),w2o=o(` property of the config object (either
passed as an argument or loaded from `),vie=a("code"),A2o=o("pretrained_model_name_or_path"),L2o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fie=a("code"),y2o=o("pretrained_model_name_or_path"),x2o=o(":"),$2o=l(),x=a("ul"),yp=a("li"),Tie=a("strong"),k2o=o("albert"),S2o=o(" \u2014 "),WN=a("a"),R2o=o("AlbertModel"),P2o=o(" (ALBERT model)"),B2o=l(),xp=a("li"),Mie=a("strong"),I2o=o("bart"),N2o=o(" \u2014 "),QN=a("a"),q2o=o("BartModel"),j2o=o(" (BART model)"),D2o=l(),$p=a("li"),Eie=a("strong"),G2o=o("beit"),O2o=o(" \u2014 "),HN=a("a"),V2o=o("BeitModel"),X2o=o(" (BEiT model)"),z2o=l(),kp=a("li"),Cie=a("strong"),W2o=o("bert"),Q2o=o(" \u2014 "),UN=a("a"),H2o=o("BertModel"),U2o=o(" (BERT model)"),J2o=l(),Sp=a("li"),wie=a("strong"),Y2o=o("bert-generation"),K2o=o(" \u2014 "),JN=a("a"),Z2o=o("BertGenerationEncoder"),ebo=o(" (Bert Generation model)"),obo=l(),Rp=a("li"),Aie=a("strong"),rbo=o("big_bird"),tbo=o(" \u2014 "),YN=a("a"),abo=o("BigBirdModel"),nbo=o(" (BigBird model)"),sbo=l(),Pp=a("li"),Lie=a("strong"),lbo=o("bigbird_pegasus"),ibo=o(" \u2014 "),KN=a("a"),dbo=o("BigBirdPegasusModel"),cbo=o(" (BigBird-Pegasus model)"),fbo=l(),Bp=a("li"),yie=a("strong"),mbo=o("blenderbot"),gbo=o(" \u2014 "),ZN=a("a"),hbo=o("BlenderbotModel"),pbo=o(" (Blenderbot model)"),ubo=l(),Ip=a("li"),xie=a("strong"),_bo=o("blenderbot-small"),bbo=o(" \u2014 "),eq=a("a"),vbo=o("BlenderbotSmallModel"),Fbo=o(" (BlenderbotSmall model)"),Tbo=l(),Np=a("li"),$ie=a("strong"),Mbo=o("bloom"),Ebo=o(" \u2014 "),oq=a("a"),Cbo=o("BloomModel"),wbo=o(" (BLOOM model)"),Abo=l(),qp=a("li"),kie=a("strong"),Lbo=o("camembert"),ybo=o(" \u2014 "),rq=a("a"),xbo=o("CamembertModel"),$bo=o(" (CamemBERT model)"),kbo=l(),jp=a("li"),Sie=a("strong"),Sbo=o("canine"),Rbo=o(" \u2014 "),tq=a("a"),Pbo=o("CanineModel"),Bbo=o(" (CANINE model)"),Ibo=l(),Dp=a("li"),Rie=a("strong"),Nbo=o("clip"),qbo=o(" \u2014 "),aq=a("a"),jbo=o("CLIPModel"),Dbo=o(" (CLIP model)"),Gbo=l(),Gp=a("li"),Pie=a("strong"),Obo=o("convbert"),Vbo=o(" \u2014 "),nq=a("a"),Xbo=o("ConvBertModel"),zbo=o(" (ConvBERT model)"),Wbo=l(),Op=a("li"),Bie=a("strong"),Qbo=o("convnext"),Hbo=o(" \u2014 "),sq=a("a"),Ubo=o("ConvNextModel"),Jbo=o(" (ConvNeXT model)"),Ybo=l(),Vp=a("li"),Iie=a("strong"),Kbo=o("ctrl"),Zbo=o(" \u2014 "),lq=a("a"),e4o=o("CTRLModel"),o4o=o(" (CTRL model)"),r4o=l(),Xp=a("li"),Nie=a("strong"),t4o=o("cvt"),a4o=o(" \u2014 "),iq=a("a"),n4o=o("CvtModel"),s4o=o(" (CvT model)"),l4o=l(),zp=a("li"),qie=a("strong"),i4o=o("data2vec-audio"),d4o=o(" \u2014 "),dq=a("a"),c4o=o("Data2VecAudioModel"),f4o=o(" (Data2VecAudio model)"),m4o=l(),Wp=a("li"),jie=a("strong"),g4o=o("data2vec-text"),h4o=o(" \u2014 "),cq=a("a"),p4o=o("Data2VecTextModel"),u4o=o(" (Data2VecText model)"),_4o=l(),Qp=a("li"),Die=a("strong"),b4o=o("data2vec-vision"),v4o=o(" \u2014 "),fq=a("a"),F4o=o("Data2VecVisionModel"),T4o=o(" (Data2VecVision model)"),M4o=l(),Hp=a("li"),Gie=a("strong"),E4o=o("deberta"),C4o=o(" \u2014 "),mq=a("a"),w4o=o("DebertaModel"),A4o=o(" (DeBERTa model)"),L4o=l(),Up=a("li"),Oie=a("strong"),y4o=o("deberta-v2"),x4o=o(" \u2014 "),gq=a("a"),$4o=o("DebertaV2Model"),k4o=o(" (DeBERTa-v2 model)"),S4o=l(),Jp=a("li"),Vie=a("strong"),R4o=o("decision_transformer"),P4o=o(" \u2014 "),hq=a("a"),B4o=o("DecisionTransformerModel"),I4o=o(" (Decision Transformer model)"),N4o=l(),Yp=a("li"),Xie=a("strong"),q4o=o("deit"),j4o=o(" \u2014 "),pq=a("a"),D4o=o("DeiTModel"),G4o=o(" (DeiT model)"),O4o=l(),Kp=a("li"),zie=a("strong"),V4o=o("detr"),X4o=o(" \u2014 "),uq=a("a"),z4o=o("DetrModel"),W4o=o(" (DETR model)"),Q4o=l(),Zp=a("li"),Wie=a("strong"),H4o=o("distilbert"),U4o=o(" \u2014 "),_q=a("a"),J4o=o("DistilBertModel"),Y4o=o(" (DistilBERT model)"),K4o=l(),eu=a("li"),Qie=a("strong"),Z4o=o("dpr"),e5o=o(" \u2014 "),bq=a("a"),o5o=o("DPRQuestionEncoder"),r5o=o(" (DPR model)"),t5o=l(),ou=a("li"),Hie=a("strong"),a5o=o("dpt"),n5o=o(" \u2014 "),vq=a("a"),s5o=o("DPTModel"),l5o=o(" (DPT model)"),i5o=l(),ru=a("li"),Uie=a("strong"),d5o=o("electra"),c5o=o(" \u2014 "),Fq=a("a"),f5o=o("ElectraModel"),m5o=o(" (ELECTRA model)"),g5o=l(),tu=a("li"),Jie=a("strong"),h5o=o("flaubert"),p5o=o(" \u2014 "),Tq=a("a"),u5o=o("FlaubertModel"),_5o=o(" (FlauBERT model)"),b5o=l(),au=a("li"),Yie=a("strong"),v5o=o("flava"),F5o=o(" \u2014 "),Mq=a("a"),T5o=o("FlavaModel"),M5o=o(" (FLAVA model)"),E5o=l(),nu=a("li"),Kie=a("strong"),C5o=o("fnet"),w5o=o(" \u2014 "),Eq=a("a"),A5o=o("FNetModel"),L5o=o(" (FNet model)"),y5o=l(),su=a("li"),Zie=a("strong"),x5o=o("fsmt"),$5o=o(" \u2014 "),Cq=a("a"),k5o=o("FSMTModel"),S5o=o(" (FairSeq Machine-Translation model)"),R5o=l(),Gs=a("li"),ede=a("strong"),P5o=o("funnel"),B5o=o(" \u2014 "),wq=a("a"),I5o=o("FunnelModel"),N5o=o(" or "),Aq=a("a"),q5o=o("FunnelBaseModel"),j5o=o(" (Funnel Transformer model)"),D5o=l(),lu=a("li"),ode=a("strong"),G5o=o("glpn"),O5o=o(" \u2014 "),Lq=a("a"),V5o=o("GLPNModel"),X5o=o(" (GLPN model)"),z5o=l(),iu=a("li"),rde=a("strong"),W5o=o("gpt2"),Q5o=o(" \u2014 "),yq=a("a"),H5o=o("GPT2Model"),U5o=o(" (OpenAI GPT-2 model)"),J5o=l(),du=a("li"),tde=a("strong"),Y5o=o("gpt_neo"),K5o=o(" \u2014 "),xq=a("a"),Z5o=o("GPTNeoModel"),evo=o(" (GPT Neo model)"),ovo=l(),cu=a("li"),ade=a("strong"),rvo=o("gpt_neox"),tvo=o(" \u2014 "),$q=a("a"),avo=o("GPTNeoXModel"),nvo=o(" (GPT NeoX model)"),svo=l(),fu=a("li"),nde=a("strong"),lvo=o("gptj"),ivo=o(" \u2014 "),kq=a("a"),dvo=o("GPTJModel"),cvo=o(" (GPT-J model)"),fvo=l(),mu=a("li"),sde=a("strong"),mvo=o("hubert"),gvo=o(" \u2014 "),Sq=a("a"),hvo=o("HubertModel"),pvo=o(" (Hubert model)"),uvo=l(),gu=a("li"),lde=a("strong"),_vo=o("ibert"),bvo=o(" \u2014 "),Rq=a("a"),vvo=o("IBertModel"),Fvo=o(" (I-BERT model)"),Tvo=l(),hu=a("li"),ide=a("strong"),Mvo=o("imagegpt"),Evo=o(" \u2014 "),Pq=a("a"),Cvo=o("ImageGPTModel"),wvo=o(" (ImageGPT model)"),Avo=l(),pu=a("li"),dde=a("strong"),Lvo=o("layoutlm"),yvo=o(" \u2014 "),Bq=a("a"),xvo=o("LayoutLMModel"),$vo=o(" (LayoutLM model)"),kvo=l(),uu=a("li"),cde=a("strong"),Svo=o("layoutlmv2"),Rvo=o(" \u2014 "),Iq=a("a"),Pvo=o("LayoutLMv2Model"),Bvo=o(" (LayoutLMv2 model)"),Ivo=l(),_u=a("li"),fde=a("strong"),Nvo=o("layoutlmv3"),qvo=o(" \u2014 "),Nq=a("a"),jvo=o("LayoutLMv3Model"),Dvo=o(" (LayoutLMv3 model)"),Gvo=l(),bu=a("li"),mde=a("strong"),Ovo=o("led"),Vvo=o(" \u2014 "),qq=a("a"),Xvo=o("LEDModel"),zvo=o(" (LED model)"),Wvo=l(),vu=a("li"),gde=a("strong"),Qvo=o("levit"),Hvo=o(" \u2014 "),jq=a("a"),Uvo=o("LevitModel"),Jvo=o(" (LeViT model)"),Yvo=l(),Fu=a("li"),hde=a("strong"),Kvo=o("longformer"),Zvo=o(" \u2014 "),Dq=a("a"),e3o=o("LongformerModel"),o3o=o(" (Longformer model)"),r3o=l(),Tu=a("li"),pde=a("strong"),t3o=o("longt5"),a3o=o(" \u2014 "),Gq=a("a"),n3o=o("LongT5Model"),s3o=o(" (LongT5 model)"),l3o=l(),Mu=a("li"),ude=a("strong"),i3o=o("luke"),d3o=o(" \u2014 "),Oq=a("a"),c3o=o("LukeModel"),f3o=o(" (LUKE model)"),m3o=l(),Eu=a("li"),_de=a("strong"),g3o=o("lxmert"),h3o=o(" \u2014 "),Vq=a("a"),p3o=o("LxmertModel"),u3o=o(" (LXMERT model)"),_3o=l(),Cu=a("li"),bde=a("strong"),b3o=o("m2m_100"),v3o=o(" \u2014 "),Xq=a("a"),F3o=o("M2M100Model"),T3o=o(" (M2M100 model)"),M3o=l(),wu=a("li"),vde=a("strong"),E3o=o("marian"),C3o=o(" \u2014 "),zq=a("a"),w3o=o("MarianModel"),A3o=o(" (Marian model)"),L3o=l(),Au=a("li"),Fde=a("strong"),y3o=o("maskformer"),x3o=o(" \u2014 "),Wq=a("a"),$3o=o("MaskFormerModel"),k3o=o(" (MaskFormer model)"),S3o=l(),Lu=a("li"),Tde=a("strong"),R3o=o("mbart"),P3o=o(" \u2014 "),Qq=a("a"),B3o=o("MBartModel"),I3o=o(" (mBART model)"),N3o=l(),yu=a("li"),Mde=a("strong"),q3o=o("mctct"),j3o=o(" \u2014 "),Hq=a("a"),D3o=o("MCTCTModel"),G3o=o(" (M-CTC-T model)"),O3o=l(),xu=a("li"),Ede=a("strong"),V3o=o("megatron-bert"),X3o=o(" \u2014 "),Uq=a("a"),z3o=o("MegatronBertModel"),W3o=o(" (Megatron-BERT model)"),Q3o=l(),$u=a("li"),Cde=a("strong"),H3o=o("mobilebert"),U3o=o(" \u2014 "),Jq=a("a"),J3o=o("MobileBertModel"),Y3o=o(" (MobileBERT model)"),K3o=l(),ku=a("li"),wde=a("strong"),Z3o=o("mpnet"),eFo=o(" \u2014 "),Yq=a("a"),oFo=o("MPNetModel"),rFo=o(" (MPNet model)"),tFo=l(),Su=a("li"),Ade=a("strong"),aFo=o("mt5"),nFo=o(" \u2014 "),Kq=a("a"),sFo=o("MT5Model"),lFo=o(" (MT5 model)"),iFo=l(),Ru=a("li"),Lde=a("strong"),dFo=o("nystromformer"),cFo=o(" \u2014 "),Zq=a("a"),fFo=o("NystromformerModel"),mFo=o(" (Nystr\xF6mformer model)"),gFo=l(),Pu=a("li"),yde=a("strong"),hFo=o("openai-gpt"),pFo=o(" \u2014 "),ej=a("a"),uFo=o("OpenAIGPTModel"),_Fo=o(" (OpenAI GPT model)"),bFo=l(),Bu=a("li"),xde=a("strong"),vFo=o("opt"),FFo=o(" \u2014 "),oj=a("a"),TFo=o("OPTModel"),MFo=o(" (OPT model)"),EFo=l(),Iu=a("li"),$de=a("strong"),CFo=o("pegasus"),wFo=o(" \u2014 "),rj=a("a"),AFo=o("PegasusModel"),LFo=o(" (Pegasus model)"),yFo=l(),Nu=a("li"),kde=a("strong"),xFo=o("perceiver"),$Fo=o(" \u2014 "),tj=a("a"),kFo=o("PerceiverModel"),SFo=o(" (Perceiver model)"),RFo=l(),qu=a("li"),Sde=a("strong"),PFo=o("plbart"),BFo=o(" \u2014 "),aj=a("a"),IFo=o("PLBartModel"),NFo=o(" (PLBart model)"),qFo=l(),ju=a("li"),Rde=a("strong"),jFo=o("poolformer"),DFo=o(" \u2014 "),nj=a("a"),GFo=o("PoolFormerModel"),OFo=o(" (PoolFormer model)"),VFo=l(),Du=a("li"),Pde=a("strong"),XFo=o("prophetnet"),zFo=o(" \u2014 "),sj=a("a"),WFo=o("ProphetNetModel"),QFo=o(" (ProphetNet model)"),HFo=l(),Gu=a("li"),Bde=a("strong"),UFo=o("qdqbert"),JFo=o(" \u2014 "),lj=a("a"),YFo=o("QDQBertModel"),KFo=o(" (QDQBert model)"),ZFo=l(),Ou=a("li"),Ide=a("strong"),e6o=o("reformer"),o6o=o(" \u2014 "),ij=a("a"),r6o=o("ReformerModel"),t6o=o(" (Reformer model)"),a6o=l(),Vu=a("li"),Nde=a("strong"),n6o=o("regnet"),s6o=o(" \u2014 "),dj=a("a"),l6o=o("RegNetModel"),i6o=o(" (RegNet model)"),d6o=l(),Xu=a("li"),qde=a("strong"),c6o=o("rembert"),f6o=o(" \u2014 "),cj=a("a"),m6o=o("RemBertModel"),g6o=o(" (RemBERT model)"),h6o=l(),zu=a("li"),jde=a("strong"),p6o=o("resnet"),u6o=o(" \u2014 "),fj=a("a"),_6o=o("ResNetModel"),b6o=o(" (ResNet model)"),v6o=l(),Wu=a("li"),Dde=a("strong"),F6o=o("retribert"),T6o=o(" \u2014 "),mj=a("a"),M6o=o("RetriBertModel"),E6o=o(" (RetriBERT model)"),C6o=l(),Qu=a("li"),Gde=a("strong"),w6o=o("roberta"),A6o=o(" \u2014 "),gj=a("a"),L6o=o("RobertaModel"),y6o=o(" (RoBERTa model)"),x6o=l(),Hu=a("li"),Ode=a("strong"),$6o=o("roformer"),k6o=o(" \u2014 "),hj=a("a"),S6o=o("RoFormerModel"),R6o=o(" (RoFormer model)"),P6o=l(),Uu=a("li"),Vde=a("strong"),B6o=o("segformer"),I6o=o(" \u2014 "),pj=a("a"),N6o=o("SegformerModel"),q6o=o(" (SegFormer model)"),j6o=l(),Ju=a("li"),Xde=a("strong"),D6o=o("sew"),G6o=o(" \u2014 "),uj=a("a"),O6o=o("SEWModel"),V6o=o(" (SEW model)"),X6o=l(),Yu=a("li"),zde=a("strong"),z6o=o("sew-d"),W6o=o(" \u2014 "),_j=a("a"),Q6o=o("SEWDModel"),H6o=o(" (SEW-D model)"),U6o=l(),Ku=a("li"),Wde=a("strong"),J6o=o("speech_to_text"),Y6o=o(" \u2014 "),bj=a("a"),K6o=o("Speech2TextModel"),Z6o=o(" (Speech2Text model)"),eTo=l(),Zu=a("li"),Qde=a("strong"),oTo=o("splinter"),rTo=o(" \u2014 "),vj=a("a"),tTo=o("SplinterModel"),aTo=o(" (Splinter model)"),nTo=l(),e_=a("li"),Hde=a("strong"),sTo=o("squeezebert"),lTo=o(" \u2014 "),Fj=a("a"),iTo=o("SqueezeBertModel"),dTo=o(" (SqueezeBERT model)"),cTo=l(),o_=a("li"),Ude=a("strong"),fTo=o("swin"),mTo=o(" \u2014 "),Tj=a("a"),gTo=o("SwinModel"),hTo=o(" (Swin Transformer model)"),pTo=l(),r_=a("li"),Jde=a("strong"),uTo=o("t5"),_To=o(" \u2014 "),Mj=a("a"),bTo=o("T5Model"),vTo=o(" (T5 model)"),FTo=l(),t_=a("li"),Yde=a("strong"),TTo=o("tapas"),MTo=o(" \u2014 "),Ej=a("a"),ETo=o("TapasModel"),CTo=o(" (TAPAS model)"),wTo=l(),a_=a("li"),Kde=a("strong"),ATo=o("trajectory_transformer"),LTo=o(" \u2014 "),Cj=a("a"),yTo=o("TrajectoryTransformerModel"),xTo=o(" (Trajectory Transformer model)"),$To=l(),n_=a("li"),Zde=a("strong"),kTo=o("transfo-xl"),STo=o(" \u2014 "),wj=a("a"),RTo=o("TransfoXLModel"),PTo=o(" (Transformer-XL model)"),BTo=l(),s_=a("li"),ece=a("strong"),ITo=o("unispeech"),NTo=o(" \u2014 "),Aj=a("a"),qTo=o("UniSpeechModel"),jTo=o(" (UniSpeech model)"),DTo=l(),l_=a("li"),oce=a("strong"),GTo=o("unispeech-sat"),OTo=o(" \u2014 "),Lj=a("a"),VTo=o("UniSpeechSatModel"),XTo=o(" (UniSpeechSat model)"),zTo=l(),i_=a("li"),rce=a("strong"),WTo=o("van"),QTo=o(" \u2014 "),yj=a("a"),HTo=o("VanModel"),UTo=o(" (VAN model)"),JTo=l(),d_=a("li"),tce=a("strong"),YTo=o("vilt"),KTo=o(" \u2014 "),xj=a("a"),ZTo=o("ViltModel"),eMo=o(" (ViLT model)"),oMo=l(),c_=a("li"),ace=a("strong"),rMo=o("vision-text-dual-encoder"),tMo=o(" \u2014 "),$j=a("a"),aMo=o("VisionTextDualEncoderModel"),nMo=o(" (VisionTextDualEncoder model)"),sMo=l(),f_=a("li"),nce=a("strong"),lMo=o("visual_bert"),iMo=o(" \u2014 "),kj=a("a"),dMo=o("VisualBertModel"),cMo=o(" (VisualBERT model)"),fMo=l(),m_=a("li"),sce=a("strong"),mMo=o("vit"),gMo=o(" \u2014 "),Sj=a("a"),hMo=o("ViTModel"),pMo=o(" (ViT model)"),uMo=l(),g_=a("li"),lce=a("strong"),_Mo=o("vit_mae"),bMo=o(" \u2014 "),Rj=a("a"),vMo=o("ViTMAEModel"),FMo=o(" (ViTMAE model)"),TMo=l(),h_=a("li"),ice=a("strong"),MMo=o("wav2vec2"),EMo=o(" \u2014 "),Pj=a("a"),CMo=o("Wav2Vec2Model"),wMo=o(" (Wav2Vec2 model)"),AMo=l(),p_=a("li"),dce=a("strong"),LMo=o("wav2vec2-conformer"),yMo=o(" \u2014 "),Bj=a("a"),xMo=o("Wav2Vec2ConformerModel"),$Mo=o(" (Wav2Vec2-Conformer model)"),kMo=l(),u_=a("li"),cce=a("strong"),SMo=o("wavlm"),RMo=o(" \u2014 "),Ij=a("a"),PMo=o("WavLMModel"),BMo=o(" (WavLM model)"),IMo=l(),__=a("li"),fce=a("strong"),NMo=o("xglm"),qMo=o(" \u2014 "),Nj=a("a"),jMo=o("XGLMModel"),DMo=o(" (XGLM model)"),GMo=l(),b_=a("li"),mce=a("strong"),OMo=o("xlm"),VMo=o(" \u2014 "),qj=a("a"),XMo=o("XLMModel"),zMo=o(" (XLM model)"),WMo=l(),v_=a("li"),gce=a("strong"),QMo=o("xlm-prophetnet"),HMo=o(" \u2014 "),jj=a("a"),UMo=o("XLMProphetNetModel"),JMo=o(" (XLM-ProphetNet model)"),YMo=l(),F_=a("li"),hce=a("strong"),KMo=o("xlm-roberta"),ZMo=o(" \u2014 "),Dj=a("a"),eEo=o("XLMRobertaModel"),oEo=o(" (XLM-RoBERTa model)"),rEo=l(),T_=a("li"),pce=a("strong"),tEo=o("xlm-roberta-xl"),aEo=o(" \u2014 "),Gj=a("a"),nEo=o("XLMRobertaXLModel"),sEo=o(" (XLM-RoBERTa-XL model)"),lEo=l(),M_=a("li"),uce=a("strong"),iEo=o("xlnet"),dEo=o(" \u2014 "),Oj=a("a"),cEo=o("XLNetModel"),fEo=o(" (XLNet model)"),mEo=l(),E_=a("li"),_ce=a("strong"),gEo=o("yolos"),hEo=o(" \u2014 "),Vj=a("a"),pEo=o("YolosModel"),uEo=o(" (YOLOS model)"),_Eo=l(),C_=a("li"),bce=a("strong"),bEo=o("yoso"),vEo=o(" \u2014 "),Xj=a("a"),FEo=o("YosoModel"),TEo=o(" (YOSO model)"),MEo=l(),w_=a("p"),EEo=o("The model is set in evaluation mode by default using "),vce=a("code"),CEo=o("model.eval()"),wEo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fce=a("code"),AEo=o("model.train()"),LEo=l(),F(A_.$$.fragment),TGe=l(),Ni=a("h2"),L_=a("a"),Tce=a("span"),F(Ky.$$.fragment),yEo=l(),Mce=a("span"),xEo=o("AutoModelForPreTraining"),MGe=l(),$o=a("div"),F(Zy.$$.fragment),$Eo=l(),qi=a("p"),kEo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),zj=a("a"),SEo=o("from_pretrained()"),REo=o(" class method or the "),Wj=a("a"),PEo=o("from_config()"),BEo=o(` class
method.`),IEo=l(),e7=a("p"),NEo=o("This class cannot be instantiated directly using "),Ece=a("code"),qEo=o("__init__()"),jEo=o(" (throws an error)."),DEo=l(),st=a("div"),F(o7.$$.fragment),GEo=l(),Cce=a("p"),OEo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),VEo=l(),ji=a("p"),XEo=o(`Note:
Loading a model from its configuration file does `),wce=a("strong"),zEo=o("not"),WEo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Qj=a("a"),QEo=o("from_pretrained()"),HEo=o(" to load the model weights."),UEo=l(),F(y_.$$.fragment),JEo=l(),Ye=a("div"),F(r7.$$.fragment),YEo=l(),Ace=a("p"),KEo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),ZEo=l(),Ra=a("p"),eCo=o("The model class to instantiate is selected based on the "),Lce=a("code"),oCo=o("model_type"),rCo=o(` property of the config object (either
passed as an argument or loaded from `),yce=a("code"),tCo=o("pretrained_model_name_or_path"),aCo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xce=a("code"),nCo=o("pretrained_model_name_or_path"),sCo=o(":"),lCo=l(),G=a("ul"),x_=a("li"),$ce=a("strong"),iCo=o("albert"),dCo=o(" \u2014 "),Hj=a("a"),cCo=o("AlbertForPreTraining"),fCo=o(" (ALBERT model)"),mCo=l(),$_=a("li"),kce=a("strong"),gCo=o("bart"),hCo=o(" \u2014 "),Uj=a("a"),pCo=o("BartForConditionalGeneration"),uCo=o(" (BART model)"),_Co=l(),k_=a("li"),Sce=a("strong"),bCo=o("bert"),vCo=o(" \u2014 "),Jj=a("a"),FCo=o("BertForPreTraining"),TCo=o(" (BERT model)"),MCo=l(),S_=a("li"),Rce=a("strong"),ECo=o("big_bird"),CCo=o(" \u2014 "),Yj=a("a"),wCo=o("BigBirdForPreTraining"),ACo=o(" (BigBird model)"),LCo=l(),R_=a("li"),Pce=a("strong"),yCo=o("bloom"),xCo=o(" \u2014 "),Kj=a("a"),$Co=o("BloomForCausalLM"),kCo=o(" (BLOOM model)"),SCo=l(),P_=a("li"),Bce=a("strong"),RCo=o("camembert"),PCo=o(" \u2014 "),Zj=a("a"),BCo=o("CamembertForMaskedLM"),ICo=o(" (CamemBERT model)"),NCo=l(),B_=a("li"),Ice=a("strong"),qCo=o("ctrl"),jCo=o(" \u2014 "),eD=a("a"),DCo=o("CTRLLMHeadModel"),GCo=o(" (CTRL model)"),OCo=l(),I_=a("li"),Nce=a("strong"),VCo=o("data2vec-text"),XCo=o(" \u2014 "),oD=a("a"),zCo=o("Data2VecTextForMaskedLM"),WCo=o(" (Data2VecText model)"),QCo=l(),N_=a("li"),qce=a("strong"),HCo=o("deberta"),UCo=o(" \u2014 "),rD=a("a"),JCo=o("DebertaForMaskedLM"),YCo=o(" (DeBERTa model)"),KCo=l(),q_=a("li"),jce=a("strong"),ZCo=o("deberta-v2"),e0o=o(" \u2014 "),tD=a("a"),o0o=o("DebertaV2ForMaskedLM"),r0o=o(" (DeBERTa-v2 model)"),t0o=l(),j_=a("li"),Dce=a("strong"),a0o=o("distilbert"),n0o=o(" \u2014 "),aD=a("a"),s0o=o("DistilBertForMaskedLM"),l0o=o(" (DistilBERT model)"),i0o=l(),D_=a("li"),Gce=a("strong"),d0o=o("electra"),c0o=o(" \u2014 "),nD=a("a"),f0o=o("ElectraForPreTraining"),m0o=o(" (ELECTRA model)"),g0o=l(),G_=a("li"),Oce=a("strong"),h0o=o("flaubert"),p0o=o(" \u2014 "),sD=a("a"),u0o=o("FlaubertWithLMHeadModel"),_0o=o(" (FlauBERT model)"),b0o=l(),O_=a("li"),Vce=a("strong"),v0o=o("flava"),F0o=o(" \u2014 "),lD=a("a"),T0o=o("FlavaForPreTraining"),M0o=o(" (FLAVA model)"),E0o=l(),V_=a("li"),Xce=a("strong"),C0o=o("fnet"),w0o=o(" \u2014 "),iD=a("a"),A0o=o("FNetForPreTraining"),L0o=o(" (FNet model)"),y0o=l(),X_=a("li"),zce=a("strong"),x0o=o("fsmt"),$0o=o(" \u2014 "),dD=a("a"),k0o=o("FSMTForConditionalGeneration"),S0o=o(" (FairSeq Machine-Translation model)"),R0o=l(),z_=a("li"),Wce=a("strong"),P0o=o("funnel"),B0o=o(" \u2014 "),cD=a("a"),I0o=o("FunnelForPreTraining"),N0o=o(" (Funnel Transformer model)"),q0o=l(),W_=a("li"),Qce=a("strong"),j0o=o("gpt2"),D0o=o(" \u2014 "),fD=a("a"),G0o=o("GPT2LMHeadModel"),O0o=o(" (OpenAI GPT-2 model)"),V0o=l(),Q_=a("li"),Hce=a("strong"),X0o=o("ibert"),z0o=o(" \u2014 "),mD=a("a"),W0o=o("IBertForMaskedLM"),Q0o=o(" (I-BERT model)"),H0o=l(),H_=a("li"),Uce=a("strong"),U0o=o("layoutlm"),J0o=o(" \u2014 "),gD=a("a"),Y0o=o("LayoutLMForMaskedLM"),K0o=o(" (LayoutLM model)"),Z0o=l(),U_=a("li"),Jce=a("strong"),ewo=o("longformer"),owo=o(" \u2014 "),hD=a("a"),rwo=o("LongformerForMaskedLM"),two=o(" (Longformer model)"),awo=l(),J_=a("li"),Yce=a("strong"),nwo=o("lxmert"),swo=o(" \u2014 "),pD=a("a"),lwo=o("LxmertForPreTraining"),iwo=o(" (LXMERT model)"),dwo=l(),Y_=a("li"),Kce=a("strong"),cwo=o("megatron-bert"),fwo=o(" \u2014 "),uD=a("a"),mwo=o("MegatronBertForPreTraining"),gwo=o(" (Megatron-BERT model)"),hwo=l(),K_=a("li"),Zce=a("strong"),pwo=o("mobilebert"),uwo=o(" \u2014 "),_D=a("a"),_wo=o("MobileBertForPreTraining"),bwo=o(" (MobileBERT model)"),vwo=l(),Z_=a("li"),efe=a("strong"),Fwo=o("mpnet"),Two=o(" \u2014 "),bD=a("a"),Mwo=o("MPNetForMaskedLM"),Ewo=o(" (MPNet model)"),Cwo=l(),e1=a("li"),ofe=a("strong"),wwo=o("openai-gpt"),Awo=o(" \u2014 "),vD=a("a"),Lwo=o("OpenAIGPTLMHeadModel"),ywo=o(" (OpenAI GPT model)"),xwo=l(),o1=a("li"),rfe=a("strong"),$wo=o("retribert"),kwo=o(" \u2014 "),FD=a("a"),Swo=o("RetriBertModel"),Rwo=o(" (RetriBERT model)"),Pwo=l(),r1=a("li"),tfe=a("strong"),Bwo=o("roberta"),Iwo=o(" \u2014 "),TD=a("a"),Nwo=o("RobertaForMaskedLM"),qwo=o(" (RoBERTa model)"),jwo=l(),t1=a("li"),afe=a("strong"),Dwo=o("splinter"),Gwo=o(" \u2014 "),MD=a("a"),Owo=o("SplinterForPreTraining"),Vwo=o(" (Splinter model)"),Xwo=l(),a1=a("li"),nfe=a("strong"),zwo=o("squeezebert"),Wwo=o(" \u2014 "),ED=a("a"),Qwo=o("SqueezeBertForMaskedLM"),Hwo=o(" (SqueezeBERT model)"),Uwo=l(),n1=a("li"),sfe=a("strong"),Jwo=o("t5"),Ywo=o(" \u2014 "),CD=a("a"),Kwo=o("T5ForConditionalGeneration"),Zwo=o(" (T5 model)"),eAo=l(),s1=a("li"),lfe=a("strong"),oAo=o("tapas"),rAo=o(" \u2014 "),wD=a("a"),tAo=o("TapasForMaskedLM"),aAo=o(" (TAPAS model)"),nAo=l(),l1=a("li"),ife=a("strong"),sAo=o("transfo-xl"),lAo=o(" \u2014 "),AD=a("a"),iAo=o("TransfoXLLMHeadModel"),dAo=o(" (Transformer-XL model)"),cAo=l(),i1=a("li"),dfe=a("strong"),fAo=o("unispeech"),mAo=o(" \u2014 "),LD=a("a"),gAo=o("UniSpeechForPreTraining"),hAo=o(" (UniSpeech model)"),pAo=l(),d1=a("li"),cfe=a("strong"),uAo=o("unispeech-sat"),_Ao=o(" \u2014 "),yD=a("a"),bAo=o("UniSpeechSatForPreTraining"),vAo=o(" (UniSpeechSat model)"),FAo=l(),c1=a("li"),ffe=a("strong"),TAo=o("visual_bert"),MAo=o(" \u2014 "),xD=a("a"),EAo=o("VisualBertForPreTraining"),CAo=o(" (VisualBERT model)"),wAo=l(),f1=a("li"),mfe=a("strong"),AAo=o("vit_mae"),LAo=o(" \u2014 "),$D=a("a"),yAo=o("ViTMAEForPreTraining"),xAo=o(" (ViTMAE model)"),$Ao=l(),m1=a("li"),gfe=a("strong"),kAo=o("wav2vec2"),SAo=o(" \u2014 "),kD=a("a"),RAo=o("Wav2Vec2ForPreTraining"),PAo=o(" (Wav2Vec2 model)"),BAo=l(),g1=a("li"),hfe=a("strong"),IAo=o("wav2vec2-conformer"),NAo=o(" \u2014 "),SD=a("a"),qAo=o("Wav2Vec2ConformerForPreTraining"),jAo=o(" (Wav2Vec2-Conformer model)"),DAo=l(),h1=a("li"),pfe=a("strong"),GAo=o("xlm"),OAo=o(" \u2014 "),RD=a("a"),VAo=o("XLMWithLMHeadModel"),XAo=o(" (XLM model)"),zAo=l(),p1=a("li"),ufe=a("strong"),WAo=o("xlm-roberta"),QAo=o(" \u2014 "),PD=a("a"),HAo=o("XLMRobertaForMaskedLM"),UAo=o(" (XLM-RoBERTa model)"),JAo=l(),u1=a("li"),_fe=a("strong"),YAo=o("xlm-roberta-xl"),KAo=o(" \u2014 "),BD=a("a"),ZAo=o("XLMRobertaXLForMaskedLM"),eLo=o(" (XLM-RoBERTa-XL model)"),oLo=l(),_1=a("li"),bfe=a("strong"),rLo=o("xlnet"),tLo=o(" \u2014 "),ID=a("a"),aLo=o("XLNetLMHeadModel"),nLo=o(" (XLNet model)"),sLo=l(),b1=a("p"),lLo=o("The model is set in evaluation mode by default using "),vfe=a("code"),iLo=o("model.eval()"),dLo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ffe=a("code"),cLo=o("model.train()"),fLo=l(),F(v1.$$.fragment),EGe=l(),Di=a("h2"),F1=a("a"),Tfe=a("span"),F(t7.$$.fragment),mLo=l(),Mfe=a("span"),gLo=o("AutoModelForCausalLM"),CGe=l(),ko=a("div"),F(a7.$$.fragment),hLo=l(),Gi=a("p"),pLo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),ND=a("a"),uLo=o("from_pretrained()"),_Lo=o(" class method or the "),qD=a("a"),bLo=o("from_config()"),vLo=o(` class
method.`),FLo=l(),n7=a("p"),TLo=o("This class cannot be instantiated directly using "),Efe=a("code"),MLo=o("__init__()"),ELo=o(" (throws an error)."),CLo=l(),lt=a("div"),F(s7.$$.fragment),wLo=l(),Cfe=a("p"),ALo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),LLo=l(),Oi=a("p"),yLo=o(`Note:
Loading a model from its configuration file does `),wfe=a("strong"),xLo=o("not"),$Lo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jD=a("a"),kLo=o("from_pretrained()"),SLo=o(" to load the model weights."),RLo=l(),F(T1.$$.fragment),PLo=l(),Ke=a("div"),F(l7.$$.fragment),BLo=l(),Afe=a("p"),ILo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),NLo=l(),Pa=a("p"),qLo=o("The model class to instantiate is selected based on the "),Lfe=a("code"),jLo=o("model_type"),DLo=o(` property of the config object (either
passed as an argument or loaded from `),yfe=a("code"),GLo=o("pretrained_model_name_or_path"),OLo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xfe=a("code"),VLo=o("pretrained_model_name_or_path"),XLo=o(":"),zLo=l(),z=a("ul"),M1=a("li"),$fe=a("strong"),WLo=o("bart"),QLo=o(" \u2014 "),DD=a("a"),HLo=o("BartForCausalLM"),ULo=o(" (BART model)"),JLo=l(),E1=a("li"),kfe=a("strong"),YLo=o("bert"),KLo=o(" \u2014 "),GD=a("a"),ZLo=o("BertLMHeadModel"),eyo=o(" (BERT model)"),oyo=l(),C1=a("li"),Sfe=a("strong"),ryo=o("bert-generation"),tyo=o(" \u2014 "),OD=a("a"),ayo=o("BertGenerationDecoder"),nyo=o(" (Bert Generation model)"),syo=l(),w1=a("li"),Rfe=a("strong"),lyo=o("big_bird"),iyo=o(" \u2014 "),VD=a("a"),dyo=o("BigBirdForCausalLM"),cyo=o(" (BigBird model)"),fyo=l(),A1=a("li"),Pfe=a("strong"),myo=o("bigbird_pegasus"),gyo=o(" \u2014 "),XD=a("a"),hyo=o("BigBirdPegasusForCausalLM"),pyo=o(" (BigBird-Pegasus model)"),uyo=l(),L1=a("li"),Bfe=a("strong"),_yo=o("blenderbot"),byo=o(" \u2014 "),zD=a("a"),vyo=o("BlenderbotForCausalLM"),Fyo=o(" (Blenderbot model)"),Tyo=l(),y1=a("li"),Ife=a("strong"),Myo=o("blenderbot-small"),Eyo=o(" \u2014 "),WD=a("a"),Cyo=o("BlenderbotSmallForCausalLM"),wyo=o(" (BlenderbotSmall model)"),Ayo=l(),x1=a("li"),Nfe=a("strong"),Lyo=o("bloom"),yyo=o(" \u2014 "),QD=a("a"),xyo=o("BloomForCausalLM"),$yo=o(" (BLOOM model)"),kyo=l(),$1=a("li"),qfe=a("strong"),Syo=o("camembert"),Ryo=o(" \u2014 "),HD=a("a"),Pyo=o("CamembertForCausalLM"),Byo=o(" (CamemBERT model)"),Iyo=l(),k1=a("li"),jfe=a("strong"),Nyo=o("ctrl"),qyo=o(" \u2014 "),UD=a("a"),jyo=o("CTRLLMHeadModel"),Dyo=o(" (CTRL model)"),Gyo=l(),S1=a("li"),Dfe=a("strong"),Oyo=o("data2vec-text"),Vyo=o(" \u2014 "),JD=a("a"),Xyo=o("Data2VecTextForCausalLM"),zyo=o(" (Data2VecText model)"),Wyo=l(),R1=a("li"),Gfe=a("strong"),Qyo=o("electra"),Hyo=o(" \u2014 "),YD=a("a"),Uyo=o("ElectraForCausalLM"),Jyo=o(" (ELECTRA model)"),Yyo=l(),P1=a("li"),Ofe=a("strong"),Kyo=o("gpt2"),Zyo=o(" \u2014 "),KD=a("a"),e7o=o("GPT2LMHeadModel"),o7o=o(" (OpenAI GPT-2 model)"),r7o=l(),B1=a("li"),Vfe=a("strong"),t7o=o("gpt_neo"),a7o=o(" \u2014 "),ZD=a("a"),n7o=o("GPTNeoForCausalLM"),s7o=o(" (GPT Neo model)"),l7o=l(),I1=a("li"),Xfe=a("strong"),i7o=o("gpt_neox"),d7o=o(" \u2014 "),eG=a("a"),c7o=o("GPTNeoXForCausalLM"),f7o=o(" (GPT NeoX model)"),m7o=l(),N1=a("li"),zfe=a("strong"),g7o=o("gptj"),h7o=o(" \u2014 "),oG=a("a"),p7o=o("GPTJForCausalLM"),u7o=o(" (GPT-J model)"),_7o=l(),q1=a("li"),Wfe=a("strong"),b7o=o("marian"),v7o=o(" \u2014 "),rG=a("a"),F7o=o("MarianForCausalLM"),T7o=o(" (Marian model)"),M7o=l(),j1=a("li"),Qfe=a("strong"),E7o=o("mbart"),C7o=o(" \u2014 "),tG=a("a"),w7o=o("MBartForCausalLM"),A7o=o(" (mBART model)"),L7o=l(),D1=a("li"),Hfe=a("strong"),y7o=o("megatron-bert"),x7o=o(" \u2014 "),aG=a("a"),$7o=o("MegatronBertForCausalLM"),k7o=o(" (Megatron-BERT model)"),S7o=l(),G1=a("li"),Ufe=a("strong"),R7o=o("openai-gpt"),P7o=o(" \u2014 "),nG=a("a"),B7o=o("OpenAIGPTLMHeadModel"),I7o=o(" (OpenAI GPT model)"),N7o=l(),O1=a("li"),Jfe=a("strong"),q7o=o("opt"),j7o=o(" \u2014 "),sG=a("a"),D7o=o("OPTForCausalLM"),G7o=o(" (OPT model)"),O7o=l(),V1=a("li"),Yfe=a("strong"),V7o=o("pegasus"),X7o=o(" \u2014 "),lG=a("a"),z7o=o("PegasusForCausalLM"),W7o=o(" (Pegasus model)"),Q7o=l(),X1=a("li"),Kfe=a("strong"),H7o=o("plbart"),U7o=o(" \u2014 "),iG=a("a"),J7o=o("PLBartForCausalLM"),Y7o=o(" (PLBart model)"),K7o=l(),z1=a("li"),Zfe=a("strong"),Z7o=o("prophetnet"),e8o=o(" \u2014 "),dG=a("a"),o8o=o("ProphetNetForCausalLM"),r8o=o(" (ProphetNet model)"),t8o=l(),W1=a("li"),eme=a("strong"),a8o=o("qdqbert"),n8o=o(" \u2014 "),cG=a("a"),s8o=o("QDQBertLMHeadModel"),l8o=o(" (QDQBert model)"),i8o=l(),Q1=a("li"),ome=a("strong"),d8o=o("reformer"),c8o=o(" \u2014 "),fG=a("a"),f8o=o("ReformerModelWithLMHead"),m8o=o(" (Reformer model)"),g8o=l(),H1=a("li"),rme=a("strong"),h8o=o("rembert"),p8o=o(" \u2014 "),mG=a("a"),u8o=o("RemBertForCausalLM"),_8o=o(" (RemBERT model)"),b8o=l(),U1=a("li"),tme=a("strong"),v8o=o("roberta"),F8o=o(" \u2014 "),gG=a("a"),T8o=o("RobertaForCausalLM"),M8o=o(" (RoBERTa model)"),E8o=l(),J1=a("li"),ame=a("strong"),C8o=o("roformer"),w8o=o(" \u2014 "),hG=a("a"),A8o=o("RoFormerForCausalLM"),L8o=o(" (RoFormer model)"),y8o=l(),Y1=a("li"),nme=a("strong"),x8o=o("speech_to_text_2"),$8o=o(" \u2014 "),pG=a("a"),k8o=o("Speech2Text2ForCausalLM"),S8o=o(" (Speech2Text2 model)"),R8o=l(),K1=a("li"),sme=a("strong"),P8o=o("transfo-xl"),B8o=o(" \u2014 "),uG=a("a"),I8o=o("TransfoXLLMHeadModel"),N8o=o(" (Transformer-XL model)"),q8o=l(),Z1=a("li"),lme=a("strong"),j8o=o("trocr"),D8o=o(" \u2014 "),_G=a("a"),G8o=o("TrOCRForCausalLM"),O8o=o(" (TrOCR model)"),V8o=l(),e2=a("li"),ime=a("strong"),X8o=o("xglm"),z8o=o(" \u2014 "),bG=a("a"),W8o=o("XGLMForCausalLM"),Q8o=o(" (XGLM model)"),H8o=l(),o2=a("li"),dme=a("strong"),U8o=o("xlm"),J8o=o(" \u2014 "),vG=a("a"),Y8o=o("XLMWithLMHeadModel"),K8o=o(" (XLM model)"),Z8o=l(),r2=a("li"),cme=a("strong"),e9o=o("xlm-prophetnet"),o9o=o(" \u2014 "),FG=a("a"),r9o=o("XLMProphetNetForCausalLM"),t9o=o(" (XLM-ProphetNet model)"),a9o=l(),t2=a("li"),fme=a("strong"),n9o=o("xlm-roberta"),s9o=o(" \u2014 "),TG=a("a"),l9o=o("XLMRobertaForCausalLM"),i9o=o(" (XLM-RoBERTa model)"),d9o=l(),a2=a("li"),mme=a("strong"),c9o=o("xlm-roberta-xl"),f9o=o(" \u2014 "),MG=a("a"),m9o=o("XLMRobertaXLForCausalLM"),g9o=o(" (XLM-RoBERTa-XL model)"),h9o=l(),n2=a("li"),gme=a("strong"),p9o=o("xlnet"),u9o=o(" \u2014 "),EG=a("a"),_9o=o("XLNetLMHeadModel"),b9o=o(" (XLNet model)"),v9o=l(),s2=a("p"),F9o=o("The model is set in evaluation mode by default using "),hme=a("code"),T9o=o("model.eval()"),M9o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pme=a("code"),E9o=o("model.train()"),C9o=l(),F(l2.$$.fragment),wGe=l(),Vi=a("h2"),i2=a("a"),ume=a("span"),F(i7.$$.fragment),w9o=l(),_me=a("span"),A9o=o("AutoModelForMaskedLM"),AGe=l(),So=a("div"),F(d7.$$.fragment),L9o=l(),Xi=a("p"),y9o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),CG=a("a"),x9o=o("from_pretrained()"),$9o=o(" class method or the "),wG=a("a"),k9o=o("from_config()"),S9o=o(` class
method.`),R9o=l(),c7=a("p"),P9o=o("This class cannot be instantiated directly using "),bme=a("code"),B9o=o("__init__()"),I9o=o(" (throws an error)."),N9o=l(),it=a("div"),F(f7.$$.fragment),q9o=l(),vme=a("p"),j9o=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),D9o=l(),zi=a("p"),G9o=o(`Note:
Loading a model from its configuration file does `),Fme=a("strong"),O9o=o("not"),V9o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AG=a("a"),X9o=o("from_pretrained()"),z9o=o(" to load the model weights."),W9o=l(),F(d2.$$.fragment),Q9o=l(),Ze=a("div"),F(m7.$$.fragment),H9o=l(),Tme=a("p"),U9o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),J9o=l(),Ba=a("p"),Y9o=o("The model class to instantiate is selected based on the "),Mme=a("code"),K9o=o("model_type"),Z9o=o(` property of the config object (either
passed as an argument or loaded from `),Eme=a("code"),exo=o("pretrained_model_name_or_path"),oxo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cme=a("code"),rxo=o("pretrained_model_name_or_path"),txo=o(":"),axo=l(),Q=a("ul"),c2=a("li"),wme=a("strong"),nxo=o("albert"),sxo=o(" \u2014 "),LG=a("a"),lxo=o("AlbertForMaskedLM"),ixo=o(" (ALBERT model)"),dxo=l(),f2=a("li"),Ame=a("strong"),cxo=o("bart"),fxo=o(" \u2014 "),yG=a("a"),mxo=o("BartForConditionalGeneration"),gxo=o(" (BART model)"),hxo=l(),m2=a("li"),Lme=a("strong"),pxo=o("bert"),uxo=o(" \u2014 "),xG=a("a"),_xo=o("BertForMaskedLM"),bxo=o(" (BERT model)"),vxo=l(),g2=a("li"),yme=a("strong"),Fxo=o("big_bird"),Txo=o(" \u2014 "),$G=a("a"),Mxo=o("BigBirdForMaskedLM"),Exo=o(" (BigBird model)"),Cxo=l(),h2=a("li"),xme=a("strong"),wxo=o("camembert"),Axo=o(" \u2014 "),kG=a("a"),Lxo=o("CamembertForMaskedLM"),yxo=o(" (CamemBERT model)"),xxo=l(),p2=a("li"),$me=a("strong"),$xo=o("convbert"),kxo=o(" \u2014 "),SG=a("a"),Sxo=o("ConvBertForMaskedLM"),Rxo=o(" (ConvBERT model)"),Pxo=l(),u2=a("li"),kme=a("strong"),Bxo=o("data2vec-text"),Ixo=o(" \u2014 "),RG=a("a"),Nxo=o("Data2VecTextForMaskedLM"),qxo=o(" (Data2VecText model)"),jxo=l(),_2=a("li"),Sme=a("strong"),Dxo=o("deberta"),Gxo=o(" \u2014 "),PG=a("a"),Oxo=o("DebertaForMaskedLM"),Vxo=o(" (DeBERTa model)"),Xxo=l(),b2=a("li"),Rme=a("strong"),zxo=o("deberta-v2"),Wxo=o(" \u2014 "),BG=a("a"),Qxo=o("DebertaV2ForMaskedLM"),Hxo=o(" (DeBERTa-v2 model)"),Uxo=l(),v2=a("li"),Pme=a("strong"),Jxo=o("distilbert"),Yxo=o(" \u2014 "),IG=a("a"),Kxo=o("DistilBertForMaskedLM"),Zxo=o(" (DistilBERT model)"),e$o=l(),F2=a("li"),Bme=a("strong"),o$o=o("electra"),r$o=o(" \u2014 "),NG=a("a"),t$o=o("ElectraForMaskedLM"),a$o=o(" (ELECTRA model)"),n$o=l(),T2=a("li"),Ime=a("strong"),s$o=o("flaubert"),l$o=o(" \u2014 "),qG=a("a"),i$o=o("FlaubertWithLMHeadModel"),d$o=o(" (FlauBERT model)"),c$o=l(),M2=a("li"),Nme=a("strong"),f$o=o("fnet"),m$o=o(" \u2014 "),jG=a("a"),g$o=o("FNetForMaskedLM"),h$o=o(" (FNet model)"),p$o=l(),E2=a("li"),qme=a("strong"),u$o=o("funnel"),_$o=o(" \u2014 "),DG=a("a"),b$o=o("FunnelForMaskedLM"),v$o=o(" (Funnel Transformer model)"),F$o=l(),C2=a("li"),jme=a("strong"),T$o=o("ibert"),M$o=o(" \u2014 "),GG=a("a"),E$o=o("IBertForMaskedLM"),C$o=o(" (I-BERT model)"),w$o=l(),w2=a("li"),Dme=a("strong"),A$o=o("layoutlm"),L$o=o(" \u2014 "),OG=a("a"),y$o=o("LayoutLMForMaskedLM"),x$o=o(" (LayoutLM model)"),$$o=l(),A2=a("li"),Gme=a("strong"),k$o=o("longformer"),S$o=o(" \u2014 "),VG=a("a"),R$o=o("LongformerForMaskedLM"),P$o=o(" (Longformer model)"),B$o=l(),L2=a("li"),Ome=a("strong"),I$o=o("luke"),N$o=o(" \u2014 "),XG=a("a"),q$o=o("LukeForMaskedLM"),j$o=o(" (LUKE model)"),D$o=l(),y2=a("li"),Vme=a("strong"),G$o=o("mbart"),O$o=o(" \u2014 "),zG=a("a"),V$o=o("MBartForConditionalGeneration"),X$o=o(" (mBART model)"),z$o=l(),x2=a("li"),Xme=a("strong"),W$o=o("megatron-bert"),Q$o=o(" \u2014 "),WG=a("a"),H$o=o("MegatronBertForMaskedLM"),U$o=o(" (Megatron-BERT model)"),J$o=l(),$2=a("li"),zme=a("strong"),Y$o=o("mobilebert"),K$o=o(" \u2014 "),QG=a("a"),Z$o=o("MobileBertForMaskedLM"),eko=o(" (MobileBERT model)"),oko=l(),k2=a("li"),Wme=a("strong"),rko=o("mpnet"),tko=o(" \u2014 "),HG=a("a"),ako=o("MPNetForMaskedLM"),nko=o(" (MPNet model)"),sko=l(),S2=a("li"),Qme=a("strong"),lko=o("nystromformer"),iko=o(" \u2014 "),UG=a("a"),dko=o("NystromformerForMaskedLM"),cko=o(" (Nystr\xF6mformer model)"),fko=l(),R2=a("li"),Hme=a("strong"),mko=o("perceiver"),gko=o(" \u2014 "),JG=a("a"),hko=o("PerceiverForMaskedLM"),pko=o(" (Perceiver model)"),uko=l(),P2=a("li"),Ume=a("strong"),_ko=o("qdqbert"),bko=o(" \u2014 "),YG=a("a"),vko=o("QDQBertForMaskedLM"),Fko=o(" (QDQBert model)"),Tko=l(),B2=a("li"),Jme=a("strong"),Mko=o("reformer"),Eko=o(" \u2014 "),KG=a("a"),Cko=o("ReformerForMaskedLM"),wko=o(" (Reformer model)"),Ako=l(),I2=a("li"),Yme=a("strong"),Lko=o("rembert"),yko=o(" \u2014 "),ZG=a("a"),xko=o("RemBertForMaskedLM"),$ko=o(" (RemBERT model)"),kko=l(),N2=a("li"),Kme=a("strong"),Sko=o("roberta"),Rko=o(" \u2014 "),eO=a("a"),Pko=o("RobertaForMaskedLM"),Bko=o(" (RoBERTa model)"),Iko=l(),q2=a("li"),Zme=a("strong"),Nko=o("roformer"),qko=o(" \u2014 "),oO=a("a"),jko=o("RoFormerForMaskedLM"),Dko=o(" (RoFormer model)"),Gko=l(),j2=a("li"),ege=a("strong"),Oko=o("squeezebert"),Vko=o(" \u2014 "),rO=a("a"),Xko=o("SqueezeBertForMaskedLM"),zko=o(" (SqueezeBERT model)"),Wko=l(),D2=a("li"),oge=a("strong"),Qko=o("tapas"),Hko=o(" \u2014 "),tO=a("a"),Uko=o("TapasForMaskedLM"),Jko=o(" (TAPAS model)"),Yko=l(),G2=a("li"),rge=a("strong"),Kko=o("wav2vec2"),Zko=o(" \u2014 "),tge=a("code"),eSo=o("Wav2Vec2ForMaskedLM"),oSo=o(" (Wav2Vec2 model)"),rSo=l(),O2=a("li"),age=a("strong"),tSo=o("xlm"),aSo=o(" \u2014 "),aO=a("a"),nSo=o("XLMWithLMHeadModel"),sSo=o(" (XLM model)"),lSo=l(),V2=a("li"),nge=a("strong"),iSo=o("xlm-roberta"),dSo=o(" \u2014 "),nO=a("a"),cSo=o("XLMRobertaForMaskedLM"),fSo=o(" (XLM-RoBERTa model)"),mSo=l(),X2=a("li"),sge=a("strong"),gSo=o("xlm-roberta-xl"),hSo=o(" \u2014 "),sO=a("a"),pSo=o("XLMRobertaXLForMaskedLM"),uSo=o(" (XLM-RoBERTa-XL model)"),_So=l(),z2=a("li"),lge=a("strong"),bSo=o("yoso"),vSo=o(" \u2014 "),lO=a("a"),FSo=o("YosoForMaskedLM"),TSo=o(" (YOSO model)"),MSo=l(),W2=a("p"),ESo=o("The model is set in evaluation mode by default using "),ige=a("code"),CSo=o("model.eval()"),wSo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dge=a("code"),ASo=o("model.train()"),LSo=l(),F(Q2.$$.fragment),LGe=l(),Wi=a("h2"),H2=a("a"),cge=a("span"),F(g7.$$.fragment),ySo=l(),fge=a("span"),xSo=o("AutoModelForSeq2SeqLM"),yGe=l(),Ro=a("div"),F(h7.$$.fragment),$So=l(),Qi=a("p"),kSo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),iO=a("a"),SSo=o("from_pretrained()"),RSo=o(" class method or the "),dO=a("a"),PSo=o("from_config()"),BSo=o(` class
method.`),ISo=l(),p7=a("p"),NSo=o("This class cannot be instantiated directly using "),mge=a("code"),qSo=o("__init__()"),jSo=o(" (throws an error)."),DSo=l(),dt=a("div"),F(u7.$$.fragment),GSo=l(),gge=a("p"),OSo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),VSo=l(),Hi=a("p"),XSo=o(`Note:
Loading a model from its configuration file does `),hge=a("strong"),zSo=o("not"),WSo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cO=a("a"),QSo=o("from_pretrained()"),HSo=o(" to load the model weights."),USo=l(),F(U2.$$.fragment),JSo=l(),eo=a("div"),F(_7.$$.fragment),YSo=l(),pge=a("p"),KSo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),ZSo=l(),Ia=a("p"),eRo=o("The model class to instantiate is selected based on the "),uge=a("code"),oRo=o("model_type"),rRo=o(` property of the config object (either
passed as an argument or loaded from `),_ge=a("code"),tRo=o("pretrained_model_name_or_path"),aRo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bge=a("code"),nRo=o("pretrained_model_name_or_path"),sRo=o(":"),lRo=l(),pe=a("ul"),J2=a("li"),vge=a("strong"),iRo=o("bart"),dRo=o(" \u2014 "),fO=a("a"),cRo=o("BartForConditionalGeneration"),fRo=o(" (BART model)"),mRo=l(),Y2=a("li"),Fge=a("strong"),gRo=o("bigbird_pegasus"),hRo=o(" \u2014 "),mO=a("a"),pRo=o("BigBirdPegasusForConditionalGeneration"),uRo=o(" (BigBird-Pegasus model)"),_Ro=l(),K2=a("li"),Tge=a("strong"),bRo=o("blenderbot"),vRo=o(" \u2014 "),gO=a("a"),FRo=o("BlenderbotForConditionalGeneration"),TRo=o(" (Blenderbot model)"),MRo=l(),Z2=a("li"),Mge=a("strong"),ERo=o("blenderbot-small"),CRo=o(" \u2014 "),hO=a("a"),wRo=o("BlenderbotSmallForConditionalGeneration"),ARo=o(" (BlenderbotSmall model)"),LRo=l(),eb=a("li"),Ege=a("strong"),yRo=o("encoder-decoder"),xRo=o(" \u2014 "),pO=a("a"),$Ro=o("EncoderDecoderModel"),kRo=o(" (Encoder decoder model)"),SRo=l(),ob=a("li"),Cge=a("strong"),RRo=o("fsmt"),PRo=o(" \u2014 "),uO=a("a"),BRo=o("FSMTForConditionalGeneration"),IRo=o(" (FairSeq Machine-Translation model)"),NRo=l(),rb=a("li"),wge=a("strong"),qRo=o("led"),jRo=o(" \u2014 "),_O=a("a"),DRo=o("LEDForConditionalGeneration"),GRo=o(" (LED model)"),ORo=l(),tb=a("li"),Age=a("strong"),VRo=o("longt5"),XRo=o(" \u2014 "),bO=a("a"),zRo=o("LongT5ForConditionalGeneration"),WRo=o(" (LongT5 model)"),QRo=l(),ab=a("li"),Lge=a("strong"),HRo=o("m2m_100"),URo=o(" \u2014 "),vO=a("a"),JRo=o("M2M100ForConditionalGeneration"),YRo=o(" (M2M100 model)"),KRo=l(),nb=a("li"),yge=a("strong"),ZRo=o("marian"),ePo=o(" \u2014 "),FO=a("a"),oPo=o("MarianMTModel"),rPo=o(" (Marian model)"),tPo=l(),sb=a("li"),xge=a("strong"),aPo=o("mbart"),nPo=o(" \u2014 "),TO=a("a"),sPo=o("MBartForConditionalGeneration"),lPo=o(" (mBART model)"),iPo=l(),lb=a("li"),$ge=a("strong"),dPo=o("mt5"),cPo=o(" \u2014 "),MO=a("a"),fPo=o("MT5ForConditionalGeneration"),mPo=o(" (MT5 model)"),gPo=l(),ib=a("li"),kge=a("strong"),hPo=o("pegasus"),pPo=o(" \u2014 "),EO=a("a"),uPo=o("PegasusForConditionalGeneration"),_Po=o(" (Pegasus model)"),bPo=l(),db=a("li"),Sge=a("strong"),vPo=o("plbart"),FPo=o(" \u2014 "),CO=a("a"),TPo=o("PLBartForConditionalGeneration"),MPo=o(" (PLBart model)"),EPo=l(),cb=a("li"),Rge=a("strong"),CPo=o("prophetnet"),wPo=o(" \u2014 "),wO=a("a"),APo=o("ProphetNetForConditionalGeneration"),LPo=o(" (ProphetNet model)"),yPo=l(),fb=a("li"),Pge=a("strong"),xPo=o("t5"),$Po=o(" \u2014 "),AO=a("a"),kPo=o("T5ForConditionalGeneration"),SPo=o(" (T5 model)"),RPo=l(),mb=a("li"),Bge=a("strong"),PPo=o("xlm-prophetnet"),BPo=o(" \u2014 "),LO=a("a"),IPo=o("XLMProphetNetForConditionalGeneration"),NPo=o(" (XLM-ProphetNet model)"),qPo=l(),gb=a("p"),jPo=o("The model is set in evaluation mode by default using "),Ige=a("code"),DPo=o("model.eval()"),GPo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nge=a("code"),OPo=o("model.train()"),VPo=l(),F(hb.$$.fragment),xGe=l(),Ui=a("h2"),pb=a("a"),qge=a("span"),F(b7.$$.fragment),XPo=l(),jge=a("span"),zPo=o("AutoModelForSequenceClassification"),$Ge=l(),Po=a("div"),F(v7.$$.fragment),WPo=l(),Ji=a("p"),QPo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),yO=a("a"),HPo=o("from_pretrained()"),UPo=o(" class method or the "),xO=a("a"),JPo=o("from_config()"),YPo=o(` class
method.`),KPo=l(),F7=a("p"),ZPo=o("This class cannot be instantiated directly using "),Dge=a("code"),eBo=o("__init__()"),oBo=o(" (throws an error)."),rBo=l(),ct=a("div"),F(T7.$$.fragment),tBo=l(),Gge=a("p"),aBo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),nBo=l(),Yi=a("p"),sBo=o(`Note:
Loading a model from its configuration file does `),Oge=a("strong"),lBo=o("not"),iBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$O=a("a"),dBo=o("from_pretrained()"),cBo=o(" to load the model weights."),fBo=l(),F(ub.$$.fragment),mBo=l(),oo=a("div"),F(M7.$$.fragment),gBo=l(),Vge=a("p"),hBo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),pBo=l(),Na=a("p"),uBo=o("The model class to instantiate is selected based on the "),Xge=a("code"),_Bo=o("model_type"),bBo=o(` property of the config object (either
passed as an argument or loaded from `),zge=a("code"),vBo=o("pretrained_model_name_or_path"),FBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wge=a("code"),TBo=o("pretrained_model_name_or_path"),MBo=o(":"),EBo=l(),N=a("ul"),_b=a("li"),Qge=a("strong"),CBo=o("albert"),wBo=o(" \u2014 "),kO=a("a"),ABo=o("AlbertForSequenceClassification"),LBo=o(" (ALBERT model)"),yBo=l(),bb=a("li"),Hge=a("strong"),xBo=o("bart"),$Bo=o(" \u2014 "),SO=a("a"),kBo=o("BartForSequenceClassification"),SBo=o(" (BART model)"),RBo=l(),vb=a("li"),Uge=a("strong"),PBo=o("bert"),BBo=o(" \u2014 "),RO=a("a"),IBo=o("BertForSequenceClassification"),NBo=o(" (BERT model)"),qBo=l(),Fb=a("li"),Jge=a("strong"),jBo=o("big_bird"),DBo=o(" \u2014 "),PO=a("a"),GBo=o("BigBirdForSequenceClassification"),OBo=o(" (BigBird model)"),VBo=l(),Tb=a("li"),Yge=a("strong"),XBo=o("bigbird_pegasus"),zBo=o(" \u2014 "),BO=a("a"),WBo=o("BigBirdPegasusForSequenceClassification"),QBo=o(" (BigBird-Pegasus model)"),HBo=l(),Mb=a("li"),Kge=a("strong"),UBo=o("bloom"),JBo=o(" \u2014 "),IO=a("a"),YBo=o("BloomForSequenceClassification"),KBo=o(" (BLOOM model)"),ZBo=l(),Eb=a("li"),Zge=a("strong"),eIo=o("camembert"),oIo=o(" \u2014 "),NO=a("a"),rIo=o("CamembertForSequenceClassification"),tIo=o(" (CamemBERT model)"),aIo=l(),Cb=a("li"),ehe=a("strong"),nIo=o("canine"),sIo=o(" \u2014 "),qO=a("a"),lIo=o("CanineForSequenceClassification"),iIo=o(" (CANINE model)"),dIo=l(),wb=a("li"),ohe=a("strong"),cIo=o("convbert"),fIo=o(" \u2014 "),jO=a("a"),mIo=o("ConvBertForSequenceClassification"),gIo=o(" (ConvBERT model)"),hIo=l(),Ab=a("li"),rhe=a("strong"),pIo=o("ctrl"),uIo=o(" \u2014 "),DO=a("a"),_Io=o("CTRLForSequenceClassification"),bIo=o(" (CTRL model)"),vIo=l(),Lb=a("li"),the=a("strong"),FIo=o("data2vec-text"),TIo=o(" \u2014 "),GO=a("a"),MIo=o("Data2VecTextForSequenceClassification"),EIo=o(" (Data2VecText model)"),CIo=l(),yb=a("li"),ahe=a("strong"),wIo=o("deberta"),AIo=o(" \u2014 "),OO=a("a"),LIo=o("DebertaForSequenceClassification"),yIo=o(" (DeBERTa model)"),xIo=l(),xb=a("li"),nhe=a("strong"),$Io=o("deberta-v2"),kIo=o(" \u2014 "),VO=a("a"),SIo=o("DebertaV2ForSequenceClassification"),RIo=o(" (DeBERTa-v2 model)"),PIo=l(),$b=a("li"),she=a("strong"),BIo=o("distilbert"),IIo=o(" \u2014 "),XO=a("a"),NIo=o("DistilBertForSequenceClassification"),qIo=o(" (DistilBERT model)"),jIo=l(),kb=a("li"),lhe=a("strong"),DIo=o("electra"),GIo=o(" \u2014 "),zO=a("a"),OIo=o("ElectraForSequenceClassification"),VIo=o(" (ELECTRA model)"),XIo=l(),Sb=a("li"),ihe=a("strong"),zIo=o("flaubert"),WIo=o(" \u2014 "),WO=a("a"),QIo=o("FlaubertForSequenceClassification"),HIo=o(" (FlauBERT model)"),UIo=l(),Rb=a("li"),dhe=a("strong"),JIo=o("fnet"),YIo=o(" \u2014 "),QO=a("a"),KIo=o("FNetForSequenceClassification"),ZIo=o(" (FNet model)"),eNo=l(),Pb=a("li"),che=a("strong"),oNo=o("funnel"),rNo=o(" \u2014 "),HO=a("a"),tNo=o("FunnelForSequenceClassification"),aNo=o(" (Funnel Transformer model)"),nNo=l(),Bb=a("li"),fhe=a("strong"),sNo=o("gpt2"),lNo=o(" \u2014 "),UO=a("a"),iNo=o("GPT2ForSequenceClassification"),dNo=o(" (OpenAI GPT-2 model)"),cNo=l(),Ib=a("li"),mhe=a("strong"),fNo=o("gpt_neo"),mNo=o(" \u2014 "),JO=a("a"),gNo=o("GPTNeoForSequenceClassification"),hNo=o(" (GPT Neo model)"),pNo=l(),Nb=a("li"),ghe=a("strong"),uNo=o("gptj"),_No=o(" \u2014 "),YO=a("a"),bNo=o("GPTJForSequenceClassification"),vNo=o(" (GPT-J model)"),FNo=l(),qb=a("li"),hhe=a("strong"),TNo=o("ibert"),MNo=o(" \u2014 "),KO=a("a"),ENo=o("IBertForSequenceClassification"),CNo=o(" (I-BERT model)"),wNo=l(),jb=a("li"),phe=a("strong"),ANo=o("layoutlm"),LNo=o(" \u2014 "),ZO=a("a"),yNo=o("LayoutLMForSequenceClassification"),xNo=o(" (LayoutLM model)"),$No=l(),Db=a("li"),uhe=a("strong"),kNo=o("layoutlmv2"),SNo=o(" \u2014 "),eV=a("a"),RNo=o("LayoutLMv2ForSequenceClassification"),PNo=o(" (LayoutLMv2 model)"),BNo=l(),Gb=a("li"),_he=a("strong"),INo=o("layoutlmv3"),NNo=o(" \u2014 "),oV=a("a"),qNo=o("LayoutLMv3ForSequenceClassification"),jNo=o(" (LayoutLMv3 model)"),DNo=l(),Ob=a("li"),bhe=a("strong"),GNo=o("led"),ONo=o(" \u2014 "),rV=a("a"),VNo=o("LEDForSequenceClassification"),XNo=o(" (LED model)"),zNo=l(),Vb=a("li"),vhe=a("strong"),WNo=o("longformer"),QNo=o(" \u2014 "),tV=a("a"),HNo=o("LongformerForSequenceClassification"),UNo=o(" (Longformer model)"),JNo=l(),Xb=a("li"),Fhe=a("strong"),YNo=o("mbart"),KNo=o(" \u2014 "),aV=a("a"),ZNo=o("MBartForSequenceClassification"),eqo=o(" (mBART model)"),oqo=l(),zb=a("li"),The=a("strong"),rqo=o("megatron-bert"),tqo=o(" \u2014 "),nV=a("a"),aqo=o("MegatronBertForSequenceClassification"),nqo=o(" (Megatron-BERT model)"),sqo=l(),Wb=a("li"),Mhe=a("strong"),lqo=o("mobilebert"),iqo=o(" \u2014 "),sV=a("a"),dqo=o("MobileBertForSequenceClassification"),cqo=o(" (MobileBERT model)"),fqo=l(),Qb=a("li"),Ehe=a("strong"),mqo=o("mpnet"),gqo=o(" \u2014 "),lV=a("a"),hqo=o("MPNetForSequenceClassification"),pqo=o(" (MPNet model)"),uqo=l(),Hb=a("li"),Che=a("strong"),_qo=o("nystromformer"),bqo=o(" \u2014 "),iV=a("a"),vqo=o("NystromformerForSequenceClassification"),Fqo=o(" (Nystr\xF6mformer model)"),Tqo=l(),Ub=a("li"),whe=a("strong"),Mqo=o("openai-gpt"),Eqo=o(" \u2014 "),dV=a("a"),Cqo=o("OpenAIGPTForSequenceClassification"),wqo=o(" (OpenAI GPT model)"),Aqo=l(),Jb=a("li"),Ahe=a("strong"),Lqo=o("perceiver"),yqo=o(" \u2014 "),cV=a("a"),xqo=o("PerceiverForSequenceClassification"),$qo=o(" (Perceiver model)"),kqo=l(),Yb=a("li"),Lhe=a("strong"),Sqo=o("plbart"),Rqo=o(" \u2014 "),fV=a("a"),Pqo=o("PLBartForSequenceClassification"),Bqo=o(" (PLBart model)"),Iqo=l(),Kb=a("li"),yhe=a("strong"),Nqo=o("qdqbert"),qqo=o(" \u2014 "),mV=a("a"),jqo=o("QDQBertForSequenceClassification"),Dqo=o(" (QDQBert model)"),Gqo=l(),Zb=a("li"),xhe=a("strong"),Oqo=o("reformer"),Vqo=o(" \u2014 "),gV=a("a"),Xqo=o("ReformerForSequenceClassification"),zqo=o(" (Reformer model)"),Wqo=l(),e4=a("li"),$he=a("strong"),Qqo=o("rembert"),Hqo=o(" \u2014 "),hV=a("a"),Uqo=o("RemBertForSequenceClassification"),Jqo=o(" (RemBERT model)"),Yqo=l(),o4=a("li"),khe=a("strong"),Kqo=o("roberta"),Zqo=o(" \u2014 "),pV=a("a"),ejo=o("RobertaForSequenceClassification"),ojo=o(" (RoBERTa model)"),rjo=l(),r4=a("li"),She=a("strong"),tjo=o("roformer"),ajo=o(" \u2014 "),uV=a("a"),njo=o("RoFormerForSequenceClassification"),sjo=o(" (RoFormer model)"),ljo=l(),t4=a("li"),Rhe=a("strong"),ijo=o("squeezebert"),djo=o(" \u2014 "),_V=a("a"),cjo=o("SqueezeBertForSequenceClassification"),fjo=o(" (SqueezeBERT model)"),mjo=l(),a4=a("li"),Phe=a("strong"),gjo=o("tapas"),hjo=o(" \u2014 "),bV=a("a"),pjo=o("TapasForSequenceClassification"),ujo=o(" (TAPAS model)"),_jo=l(),n4=a("li"),Bhe=a("strong"),bjo=o("transfo-xl"),vjo=o(" \u2014 "),vV=a("a"),Fjo=o("TransfoXLForSequenceClassification"),Tjo=o(" (Transformer-XL model)"),Mjo=l(),s4=a("li"),Ihe=a("strong"),Ejo=o("xlm"),Cjo=o(" \u2014 "),FV=a("a"),wjo=o("XLMForSequenceClassification"),Ajo=o(" (XLM model)"),Ljo=l(),l4=a("li"),Nhe=a("strong"),yjo=o("xlm-roberta"),xjo=o(" \u2014 "),TV=a("a"),$jo=o("XLMRobertaForSequenceClassification"),kjo=o(" (XLM-RoBERTa model)"),Sjo=l(),i4=a("li"),qhe=a("strong"),Rjo=o("xlm-roberta-xl"),Pjo=o(" \u2014 "),MV=a("a"),Bjo=o("XLMRobertaXLForSequenceClassification"),Ijo=o(" (XLM-RoBERTa-XL model)"),Njo=l(),d4=a("li"),jhe=a("strong"),qjo=o("xlnet"),jjo=o(" \u2014 "),EV=a("a"),Djo=o("XLNetForSequenceClassification"),Gjo=o(" (XLNet model)"),Ojo=l(),c4=a("li"),Dhe=a("strong"),Vjo=o("yoso"),Xjo=o(" \u2014 "),CV=a("a"),zjo=o("YosoForSequenceClassification"),Wjo=o(" (YOSO model)"),Qjo=l(),f4=a("p"),Hjo=o("The model is set in evaluation mode by default using "),Ghe=a("code"),Ujo=o("model.eval()"),Jjo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ohe=a("code"),Yjo=o("model.train()"),Kjo=l(),F(m4.$$.fragment),kGe=l(),Ki=a("h2"),g4=a("a"),Vhe=a("span"),F(E7.$$.fragment),Zjo=l(),Xhe=a("span"),eDo=o("AutoModelForMultipleChoice"),SGe=l(),Bo=a("div"),F(C7.$$.fragment),oDo=l(),Zi=a("p"),rDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),wV=a("a"),tDo=o("from_pretrained()"),aDo=o(" class method or the "),AV=a("a"),nDo=o("from_config()"),sDo=o(` class
method.`),lDo=l(),w7=a("p"),iDo=o("This class cannot be instantiated directly using "),zhe=a("code"),dDo=o("__init__()"),cDo=o(" (throws an error)."),fDo=l(),ft=a("div"),F(A7.$$.fragment),mDo=l(),Whe=a("p"),gDo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),hDo=l(),ed=a("p"),pDo=o(`Note:
Loading a model from its configuration file does `),Qhe=a("strong"),uDo=o("not"),_Do=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LV=a("a"),bDo=o("from_pretrained()"),vDo=o(" to load the model weights."),FDo=l(),F(h4.$$.fragment),TDo=l(),ro=a("div"),F(L7.$$.fragment),MDo=l(),Hhe=a("p"),EDo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),CDo=l(),qa=a("p"),wDo=o("The model class to instantiate is selected based on the "),Uhe=a("code"),ADo=o("model_type"),LDo=o(` property of the config object (either
passed as an argument or loaded from `),Jhe=a("code"),yDo=o("pretrained_model_name_or_path"),xDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yhe=a("code"),$Do=o("pretrained_model_name_or_path"),kDo=o(":"),SDo=l(),Z=a("ul"),p4=a("li"),Khe=a("strong"),RDo=o("albert"),PDo=o(" \u2014 "),yV=a("a"),BDo=o("AlbertForMultipleChoice"),IDo=o(" (ALBERT model)"),NDo=l(),u4=a("li"),Zhe=a("strong"),qDo=o("bert"),jDo=o(" \u2014 "),xV=a("a"),DDo=o("BertForMultipleChoice"),GDo=o(" (BERT model)"),ODo=l(),_4=a("li"),epe=a("strong"),VDo=o("big_bird"),XDo=o(" \u2014 "),$V=a("a"),zDo=o("BigBirdForMultipleChoice"),WDo=o(" (BigBird model)"),QDo=l(),b4=a("li"),ope=a("strong"),HDo=o("camembert"),UDo=o(" \u2014 "),kV=a("a"),JDo=o("CamembertForMultipleChoice"),YDo=o(" (CamemBERT model)"),KDo=l(),v4=a("li"),rpe=a("strong"),ZDo=o("canine"),eGo=o(" \u2014 "),SV=a("a"),oGo=o("CanineForMultipleChoice"),rGo=o(" (CANINE model)"),tGo=l(),F4=a("li"),tpe=a("strong"),aGo=o("convbert"),nGo=o(" \u2014 "),RV=a("a"),sGo=o("ConvBertForMultipleChoice"),lGo=o(" (ConvBERT model)"),iGo=l(),T4=a("li"),ape=a("strong"),dGo=o("data2vec-text"),cGo=o(" \u2014 "),PV=a("a"),fGo=o("Data2VecTextForMultipleChoice"),mGo=o(" (Data2VecText model)"),gGo=l(),M4=a("li"),npe=a("strong"),hGo=o("deberta-v2"),pGo=o(" \u2014 "),BV=a("a"),uGo=o("DebertaV2ForMultipleChoice"),_Go=o(" (DeBERTa-v2 model)"),bGo=l(),E4=a("li"),spe=a("strong"),vGo=o("distilbert"),FGo=o(" \u2014 "),IV=a("a"),TGo=o("DistilBertForMultipleChoice"),MGo=o(" (DistilBERT model)"),EGo=l(),C4=a("li"),lpe=a("strong"),CGo=o("electra"),wGo=o(" \u2014 "),NV=a("a"),AGo=o("ElectraForMultipleChoice"),LGo=o(" (ELECTRA model)"),yGo=l(),w4=a("li"),ipe=a("strong"),xGo=o("flaubert"),$Go=o(" \u2014 "),qV=a("a"),kGo=o("FlaubertForMultipleChoice"),SGo=o(" (FlauBERT model)"),RGo=l(),A4=a("li"),dpe=a("strong"),PGo=o("fnet"),BGo=o(" \u2014 "),jV=a("a"),IGo=o("FNetForMultipleChoice"),NGo=o(" (FNet model)"),qGo=l(),L4=a("li"),cpe=a("strong"),jGo=o("funnel"),DGo=o(" \u2014 "),DV=a("a"),GGo=o("FunnelForMultipleChoice"),OGo=o(" (Funnel Transformer model)"),VGo=l(),y4=a("li"),fpe=a("strong"),XGo=o("ibert"),zGo=o(" \u2014 "),GV=a("a"),WGo=o("IBertForMultipleChoice"),QGo=o(" (I-BERT model)"),HGo=l(),x4=a("li"),mpe=a("strong"),UGo=o("longformer"),JGo=o(" \u2014 "),OV=a("a"),YGo=o("LongformerForMultipleChoice"),KGo=o(" (Longformer model)"),ZGo=l(),$4=a("li"),gpe=a("strong"),eOo=o("megatron-bert"),oOo=o(" \u2014 "),VV=a("a"),rOo=o("MegatronBertForMultipleChoice"),tOo=o(" (Megatron-BERT model)"),aOo=l(),k4=a("li"),hpe=a("strong"),nOo=o("mobilebert"),sOo=o(" \u2014 "),XV=a("a"),lOo=o("MobileBertForMultipleChoice"),iOo=o(" (MobileBERT model)"),dOo=l(),S4=a("li"),ppe=a("strong"),cOo=o("mpnet"),fOo=o(" \u2014 "),zV=a("a"),mOo=o("MPNetForMultipleChoice"),gOo=o(" (MPNet model)"),hOo=l(),R4=a("li"),upe=a("strong"),pOo=o("nystromformer"),uOo=o(" \u2014 "),WV=a("a"),_Oo=o("NystromformerForMultipleChoice"),bOo=o(" (Nystr\xF6mformer model)"),vOo=l(),P4=a("li"),_pe=a("strong"),FOo=o("qdqbert"),TOo=o(" \u2014 "),QV=a("a"),MOo=o("QDQBertForMultipleChoice"),EOo=o(" (QDQBert model)"),COo=l(),B4=a("li"),bpe=a("strong"),wOo=o("rembert"),AOo=o(" \u2014 "),HV=a("a"),LOo=o("RemBertForMultipleChoice"),yOo=o(" (RemBERT model)"),xOo=l(),I4=a("li"),vpe=a("strong"),$Oo=o("roberta"),kOo=o(" \u2014 "),UV=a("a"),SOo=o("RobertaForMultipleChoice"),ROo=o(" (RoBERTa model)"),POo=l(),N4=a("li"),Fpe=a("strong"),BOo=o("roformer"),IOo=o(" \u2014 "),JV=a("a"),NOo=o("RoFormerForMultipleChoice"),qOo=o(" (RoFormer model)"),jOo=l(),q4=a("li"),Tpe=a("strong"),DOo=o("squeezebert"),GOo=o(" \u2014 "),YV=a("a"),OOo=o("SqueezeBertForMultipleChoice"),VOo=o(" (SqueezeBERT model)"),XOo=l(),j4=a("li"),Mpe=a("strong"),zOo=o("xlm"),WOo=o(" \u2014 "),KV=a("a"),QOo=o("XLMForMultipleChoice"),HOo=o(" (XLM model)"),UOo=l(),D4=a("li"),Epe=a("strong"),JOo=o("xlm-roberta"),YOo=o(" \u2014 "),ZV=a("a"),KOo=o("XLMRobertaForMultipleChoice"),ZOo=o(" (XLM-RoBERTa model)"),eVo=l(),G4=a("li"),Cpe=a("strong"),oVo=o("xlm-roberta-xl"),rVo=o(" \u2014 "),eX=a("a"),tVo=o("XLMRobertaXLForMultipleChoice"),aVo=o(" (XLM-RoBERTa-XL model)"),nVo=l(),O4=a("li"),wpe=a("strong"),sVo=o("xlnet"),lVo=o(" \u2014 "),oX=a("a"),iVo=o("XLNetForMultipleChoice"),dVo=o(" (XLNet model)"),cVo=l(),V4=a("li"),Ape=a("strong"),fVo=o("yoso"),mVo=o(" \u2014 "),rX=a("a"),gVo=o("YosoForMultipleChoice"),hVo=o(" (YOSO model)"),pVo=l(),X4=a("p"),uVo=o("The model is set in evaluation mode by default using "),Lpe=a("code"),_Vo=o("model.eval()"),bVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ype=a("code"),vVo=o("model.train()"),FVo=l(),F(z4.$$.fragment),RGe=l(),od=a("h2"),W4=a("a"),xpe=a("span"),F(y7.$$.fragment),TVo=l(),$pe=a("span"),MVo=o("AutoModelForNextSentencePrediction"),PGe=l(),Io=a("div"),F(x7.$$.fragment),EVo=l(),rd=a("p"),CVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),tX=a("a"),wVo=o("from_pretrained()"),AVo=o(" class method or the "),aX=a("a"),LVo=o("from_config()"),yVo=o(` class
method.`),xVo=l(),$7=a("p"),$Vo=o("This class cannot be instantiated directly using "),kpe=a("code"),kVo=o("__init__()"),SVo=o(" (throws an error)."),RVo=l(),mt=a("div"),F(k7.$$.fragment),PVo=l(),Spe=a("p"),BVo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),IVo=l(),td=a("p"),NVo=o(`Note:
Loading a model from its configuration file does `),Rpe=a("strong"),qVo=o("not"),jVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nX=a("a"),DVo=o("from_pretrained()"),GVo=o(" to load the model weights."),OVo=l(),F(Q4.$$.fragment),VVo=l(),to=a("div"),F(S7.$$.fragment),XVo=l(),Ppe=a("p"),zVo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),WVo=l(),ja=a("p"),QVo=o("The model class to instantiate is selected based on the "),Bpe=a("code"),HVo=o("model_type"),UVo=o(` property of the config object (either
passed as an argument or loaded from `),Ipe=a("code"),JVo=o("pretrained_model_name_or_path"),YVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Npe=a("code"),KVo=o("pretrained_model_name_or_path"),ZVo=o(":"),eXo=l(),Zr=a("ul"),H4=a("li"),qpe=a("strong"),oXo=o("bert"),rXo=o(" \u2014 "),sX=a("a"),tXo=o("BertForNextSentencePrediction"),aXo=o(" (BERT model)"),nXo=l(),U4=a("li"),jpe=a("strong"),sXo=o("fnet"),lXo=o(" \u2014 "),lX=a("a"),iXo=o("FNetForNextSentencePrediction"),dXo=o(" (FNet model)"),cXo=l(),J4=a("li"),Dpe=a("strong"),fXo=o("megatron-bert"),mXo=o(" \u2014 "),iX=a("a"),gXo=o("MegatronBertForNextSentencePrediction"),hXo=o(" (Megatron-BERT model)"),pXo=l(),Y4=a("li"),Gpe=a("strong"),uXo=o("mobilebert"),_Xo=o(" \u2014 "),dX=a("a"),bXo=o("MobileBertForNextSentencePrediction"),vXo=o(" (MobileBERT model)"),FXo=l(),K4=a("li"),Ope=a("strong"),TXo=o("qdqbert"),MXo=o(" \u2014 "),cX=a("a"),EXo=o("QDQBertForNextSentencePrediction"),CXo=o(" (QDQBert model)"),wXo=l(),Z4=a("p"),AXo=o("The model is set in evaluation mode by default using "),Vpe=a("code"),LXo=o("model.eval()"),yXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xpe=a("code"),xXo=o("model.train()"),$Xo=l(),F(e5.$$.fragment),BGe=l(),ad=a("h2"),o5=a("a"),zpe=a("span"),F(R7.$$.fragment),kXo=l(),Wpe=a("span"),SXo=o("AutoModelForTokenClassification"),IGe=l(),No=a("div"),F(P7.$$.fragment),RXo=l(),nd=a("p"),PXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),fX=a("a"),BXo=o("from_pretrained()"),IXo=o(" class method or the "),mX=a("a"),NXo=o("from_config()"),qXo=o(` class
method.`),jXo=l(),B7=a("p"),DXo=o("This class cannot be instantiated directly using "),Qpe=a("code"),GXo=o("__init__()"),OXo=o(" (throws an error)."),VXo=l(),gt=a("div"),F(I7.$$.fragment),XXo=l(),Hpe=a("p"),zXo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),WXo=l(),sd=a("p"),QXo=o(`Note:
Loading a model from its configuration file does `),Upe=a("strong"),HXo=o("not"),UXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gX=a("a"),JXo=o("from_pretrained()"),YXo=o(" to load the model weights."),KXo=l(),F(r5.$$.fragment),ZXo=l(),ao=a("div"),F(N7.$$.fragment),ezo=l(),Jpe=a("p"),ozo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),rzo=l(),Da=a("p"),tzo=o("The model class to instantiate is selected based on the "),Ype=a("code"),azo=o("model_type"),nzo=o(` property of the config object (either
passed as an argument or loaded from `),Kpe=a("code"),szo=o("pretrained_model_name_or_path"),lzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zpe=a("code"),izo=o("pretrained_model_name_or_path"),dzo=o(":"),czo=l(),H=a("ul"),t5=a("li"),eue=a("strong"),fzo=o("albert"),mzo=o(" \u2014 "),hX=a("a"),gzo=o("AlbertForTokenClassification"),hzo=o(" (ALBERT model)"),pzo=l(),a5=a("li"),oue=a("strong"),uzo=o("bert"),_zo=o(" \u2014 "),pX=a("a"),bzo=o("BertForTokenClassification"),vzo=o(" (BERT model)"),Fzo=l(),n5=a("li"),rue=a("strong"),Tzo=o("big_bird"),Mzo=o(" \u2014 "),uX=a("a"),Ezo=o("BigBirdForTokenClassification"),Czo=o(" (BigBird model)"),wzo=l(),s5=a("li"),tue=a("strong"),Azo=o("bloom"),Lzo=o(" \u2014 "),_X=a("a"),yzo=o("BloomForTokenClassification"),xzo=o(" (BLOOM model)"),$zo=l(),l5=a("li"),aue=a("strong"),kzo=o("camembert"),Szo=o(" \u2014 "),bX=a("a"),Rzo=o("CamembertForTokenClassification"),Pzo=o(" (CamemBERT model)"),Bzo=l(),i5=a("li"),nue=a("strong"),Izo=o("canine"),Nzo=o(" \u2014 "),vX=a("a"),qzo=o("CanineForTokenClassification"),jzo=o(" (CANINE model)"),Dzo=l(),d5=a("li"),sue=a("strong"),Gzo=o("convbert"),Ozo=o(" \u2014 "),FX=a("a"),Vzo=o("ConvBertForTokenClassification"),Xzo=o(" (ConvBERT model)"),zzo=l(),c5=a("li"),lue=a("strong"),Wzo=o("data2vec-text"),Qzo=o(" \u2014 "),TX=a("a"),Hzo=o("Data2VecTextForTokenClassification"),Uzo=o(" (Data2VecText model)"),Jzo=l(),f5=a("li"),iue=a("strong"),Yzo=o("deberta"),Kzo=o(" \u2014 "),MX=a("a"),Zzo=o("DebertaForTokenClassification"),eWo=o(" (DeBERTa model)"),oWo=l(),m5=a("li"),due=a("strong"),rWo=o("deberta-v2"),tWo=o(" \u2014 "),EX=a("a"),aWo=o("DebertaV2ForTokenClassification"),nWo=o(" (DeBERTa-v2 model)"),sWo=l(),g5=a("li"),cue=a("strong"),lWo=o("distilbert"),iWo=o(" \u2014 "),CX=a("a"),dWo=o("DistilBertForTokenClassification"),cWo=o(" (DistilBERT model)"),fWo=l(),h5=a("li"),fue=a("strong"),mWo=o("electra"),gWo=o(" \u2014 "),wX=a("a"),hWo=o("ElectraForTokenClassification"),pWo=o(" (ELECTRA model)"),uWo=l(),p5=a("li"),mue=a("strong"),_Wo=o("flaubert"),bWo=o(" \u2014 "),AX=a("a"),vWo=o("FlaubertForTokenClassification"),FWo=o(" (FlauBERT model)"),TWo=l(),u5=a("li"),gue=a("strong"),MWo=o("fnet"),EWo=o(" \u2014 "),LX=a("a"),CWo=o("FNetForTokenClassification"),wWo=o(" (FNet model)"),AWo=l(),_5=a("li"),hue=a("strong"),LWo=o("funnel"),yWo=o(" \u2014 "),yX=a("a"),xWo=o("FunnelForTokenClassification"),$Wo=o(" (Funnel Transformer model)"),kWo=l(),b5=a("li"),pue=a("strong"),SWo=o("gpt2"),RWo=o(" \u2014 "),xX=a("a"),PWo=o("GPT2ForTokenClassification"),BWo=o(" (OpenAI GPT-2 model)"),IWo=l(),v5=a("li"),uue=a("strong"),NWo=o("ibert"),qWo=o(" \u2014 "),$X=a("a"),jWo=o("IBertForTokenClassification"),DWo=o(" (I-BERT model)"),GWo=l(),F5=a("li"),_ue=a("strong"),OWo=o("layoutlm"),VWo=o(" \u2014 "),kX=a("a"),XWo=o("LayoutLMForTokenClassification"),zWo=o(" (LayoutLM model)"),WWo=l(),T5=a("li"),bue=a("strong"),QWo=o("layoutlmv2"),HWo=o(" \u2014 "),SX=a("a"),UWo=o("LayoutLMv2ForTokenClassification"),JWo=o(" (LayoutLMv2 model)"),YWo=l(),M5=a("li"),vue=a("strong"),KWo=o("layoutlmv3"),ZWo=o(" \u2014 "),RX=a("a"),eQo=o("LayoutLMv3ForTokenClassification"),oQo=o(" (LayoutLMv3 model)"),rQo=l(),E5=a("li"),Fue=a("strong"),tQo=o("longformer"),aQo=o(" \u2014 "),PX=a("a"),nQo=o("LongformerForTokenClassification"),sQo=o(" (Longformer model)"),lQo=l(),C5=a("li"),Tue=a("strong"),iQo=o("megatron-bert"),dQo=o(" \u2014 "),BX=a("a"),cQo=o("MegatronBertForTokenClassification"),fQo=o(" (Megatron-BERT model)"),mQo=l(),w5=a("li"),Mue=a("strong"),gQo=o("mobilebert"),hQo=o(" \u2014 "),IX=a("a"),pQo=o("MobileBertForTokenClassification"),uQo=o(" (MobileBERT model)"),_Qo=l(),A5=a("li"),Eue=a("strong"),bQo=o("mpnet"),vQo=o(" \u2014 "),NX=a("a"),FQo=o("MPNetForTokenClassification"),TQo=o(" (MPNet model)"),MQo=l(),L5=a("li"),Cue=a("strong"),EQo=o("nystromformer"),CQo=o(" \u2014 "),qX=a("a"),wQo=o("NystromformerForTokenClassification"),AQo=o(" (Nystr\xF6mformer model)"),LQo=l(),y5=a("li"),wue=a("strong"),yQo=o("qdqbert"),xQo=o(" \u2014 "),jX=a("a"),$Qo=o("QDQBertForTokenClassification"),kQo=o(" (QDQBert model)"),SQo=l(),x5=a("li"),Aue=a("strong"),RQo=o("rembert"),PQo=o(" \u2014 "),DX=a("a"),BQo=o("RemBertForTokenClassification"),IQo=o(" (RemBERT model)"),NQo=l(),$5=a("li"),Lue=a("strong"),qQo=o("roberta"),jQo=o(" \u2014 "),GX=a("a"),DQo=o("RobertaForTokenClassification"),GQo=o(" (RoBERTa model)"),OQo=l(),k5=a("li"),yue=a("strong"),VQo=o("roformer"),XQo=o(" \u2014 "),OX=a("a"),zQo=o("RoFormerForTokenClassification"),WQo=o(" (RoFormer model)"),QQo=l(),S5=a("li"),xue=a("strong"),HQo=o("squeezebert"),UQo=o(" \u2014 "),VX=a("a"),JQo=o("SqueezeBertForTokenClassification"),YQo=o(" (SqueezeBERT model)"),KQo=l(),R5=a("li"),$ue=a("strong"),ZQo=o("xlm"),eHo=o(" \u2014 "),XX=a("a"),oHo=o("XLMForTokenClassification"),rHo=o(" (XLM model)"),tHo=l(),P5=a("li"),kue=a("strong"),aHo=o("xlm-roberta"),nHo=o(" \u2014 "),zX=a("a"),sHo=o("XLMRobertaForTokenClassification"),lHo=o(" (XLM-RoBERTa model)"),iHo=l(),B5=a("li"),Sue=a("strong"),dHo=o("xlm-roberta-xl"),cHo=o(" \u2014 "),WX=a("a"),fHo=o("XLMRobertaXLForTokenClassification"),mHo=o(" (XLM-RoBERTa-XL model)"),gHo=l(),I5=a("li"),Rue=a("strong"),hHo=o("xlnet"),pHo=o(" \u2014 "),QX=a("a"),uHo=o("XLNetForTokenClassification"),_Ho=o(" (XLNet model)"),bHo=l(),N5=a("li"),Pue=a("strong"),vHo=o("yoso"),FHo=o(" \u2014 "),HX=a("a"),THo=o("YosoForTokenClassification"),MHo=o(" (YOSO model)"),EHo=l(),q5=a("p"),CHo=o("The model is set in evaluation mode by default using "),Bue=a("code"),wHo=o("model.eval()"),AHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Iue=a("code"),LHo=o("model.train()"),yHo=l(),F(j5.$$.fragment),NGe=l(),ld=a("h2"),D5=a("a"),Nue=a("span"),F(q7.$$.fragment),xHo=l(),que=a("span"),$Ho=o("AutoModelForQuestionAnswering"),qGe=l(),qo=a("div"),F(j7.$$.fragment),kHo=l(),id=a("p"),SHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),UX=a("a"),RHo=o("from_pretrained()"),PHo=o(" class method or the "),JX=a("a"),BHo=o("from_config()"),IHo=o(` class
method.`),NHo=l(),D7=a("p"),qHo=o("This class cannot be instantiated directly using "),jue=a("code"),jHo=o("__init__()"),DHo=o(" (throws an error)."),GHo=l(),ht=a("div"),F(G7.$$.fragment),OHo=l(),Due=a("p"),VHo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),XHo=l(),dd=a("p"),zHo=o(`Note:
Loading a model from its configuration file does `),Gue=a("strong"),WHo=o("not"),QHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YX=a("a"),HHo=o("from_pretrained()"),UHo=o(" to load the model weights."),JHo=l(),F(G5.$$.fragment),YHo=l(),no=a("div"),F(O7.$$.fragment),KHo=l(),Oue=a("p"),ZHo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),eUo=l(),Ga=a("p"),oUo=o("The model class to instantiate is selected based on the "),Vue=a("code"),rUo=o("model_type"),tUo=o(` property of the config object (either
passed as an argument or loaded from `),Xue=a("code"),aUo=o("pretrained_model_name_or_path"),nUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zue=a("code"),sUo=o("pretrained_model_name_or_path"),lUo=o(":"),iUo=l(),V=a("ul"),O5=a("li"),Wue=a("strong"),dUo=o("albert"),cUo=o(" \u2014 "),KX=a("a"),fUo=o("AlbertForQuestionAnswering"),mUo=o(" (ALBERT model)"),gUo=l(),V5=a("li"),Que=a("strong"),hUo=o("bart"),pUo=o(" \u2014 "),ZX=a("a"),uUo=o("BartForQuestionAnswering"),_Uo=o(" (BART model)"),bUo=l(),X5=a("li"),Hue=a("strong"),vUo=o("bert"),FUo=o(" \u2014 "),ez=a("a"),TUo=o("BertForQuestionAnswering"),MUo=o(" (BERT model)"),EUo=l(),z5=a("li"),Uue=a("strong"),CUo=o("big_bird"),wUo=o(" \u2014 "),oz=a("a"),AUo=o("BigBirdForQuestionAnswering"),LUo=o(" (BigBird model)"),yUo=l(),W5=a("li"),Jue=a("strong"),xUo=o("bigbird_pegasus"),$Uo=o(" \u2014 "),rz=a("a"),kUo=o("BigBirdPegasusForQuestionAnswering"),SUo=o(" (BigBird-Pegasus model)"),RUo=l(),Q5=a("li"),Yue=a("strong"),PUo=o("camembert"),BUo=o(" \u2014 "),tz=a("a"),IUo=o("CamembertForQuestionAnswering"),NUo=o(" (CamemBERT model)"),qUo=l(),H5=a("li"),Kue=a("strong"),jUo=o("canine"),DUo=o(" \u2014 "),az=a("a"),GUo=o("CanineForQuestionAnswering"),OUo=o(" (CANINE model)"),VUo=l(),U5=a("li"),Zue=a("strong"),XUo=o("convbert"),zUo=o(" \u2014 "),nz=a("a"),WUo=o("ConvBertForQuestionAnswering"),QUo=o(" (ConvBERT model)"),HUo=l(),J5=a("li"),e_e=a("strong"),UUo=o("data2vec-text"),JUo=o(" \u2014 "),sz=a("a"),YUo=o("Data2VecTextForQuestionAnswering"),KUo=o(" (Data2VecText model)"),ZUo=l(),Y5=a("li"),o_e=a("strong"),eJo=o("deberta"),oJo=o(" \u2014 "),lz=a("a"),rJo=o("DebertaForQuestionAnswering"),tJo=o(" (DeBERTa model)"),aJo=l(),K5=a("li"),r_e=a("strong"),nJo=o("deberta-v2"),sJo=o(" \u2014 "),iz=a("a"),lJo=o("DebertaV2ForQuestionAnswering"),iJo=o(" (DeBERTa-v2 model)"),dJo=l(),Z5=a("li"),t_e=a("strong"),cJo=o("distilbert"),fJo=o(" \u2014 "),dz=a("a"),mJo=o("DistilBertForQuestionAnswering"),gJo=o(" (DistilBERT model)"),hJo=l(),ev=a("li"),a_e=a("strong"),pJo=o("electra"),uJo=o(" \u2014 "),cz=a("a"),_Jo=o("ElectraForQuestionAnswering"),bJo=o(" (ELECTRA model)"),vJo=l(),ov=a("li"),n_e=a("strong"),FJo=o("flaubert"),TJo=o(" \u2014 "),fz=a("a"),MJo=o("FlaubertForQuestionAnsweringSimple"),EJo=o(" (FlauBERT model)"),CJo=l(),rv=a("li"),s_e=a("strong"),wJo=o("fnet"),AJo=o(" \u2014 "),mz=a("a"),LJo=o("FNetForQuestionAnswering"),yJo=o(" (FNet model)"),xJo=l(),tv=a("li"),l_e=a("strong"),$Jo=o("funnel"),kJo=o(" \u2014 "),gz=a("a"),SJo=o("FunnelForQuestionAnswering"),RJo=o(" (Funnel Transformer model)"),PJo=l(),av=a("li"),i_e=a("strong"),BJo=o("gptj"),IJo=o(" \u2014 "),hz=a("a"),NJo=o("GPTJForQuestionAnswering"),qJo=o(" (GPT-J model)"),jJo=l(),nv=a("li"),d_e=a("strong"),DJo=o("ibert"),GJo=o(" \u2014 "),pz=a("a"),OJo=o("IBertForQuestionAnswering"),VJo=o(" (I-BERT model)"),XJo=l(),sv=a("li"),c_e=a("strong"),zJo=o("layoutlmv2"),WJo=o(" \u2014 "),uz=a("a"),QJo=o("LayoutLMv2ForQuestionAnswering"),HJo=o(" (LayoutLMv2 model)"),UJo=l(),lv=a("li"),f_e=a("strong"),JJo=o("layoutlmv3"),YJo=o(" \u2014 "),_z=a("a"),KJo=o("LayoutLMv3ForQuestionAnswering"),ZJo=o(" (LayoutLMv3 model)"),eYo=l(),iv=a("li"),m_e=a("strong"),oYo=o("led"),rYo=o(" \u2014 "),bz=a("a"),tYo=o("LEDForQuestionAnswering"),aYo=o(" (LED model)"),nYo=l(),dv=a("li"),g_e=a("strong"),sYo=o("longformer"),lYo=o(" \u2014 "),vz=a("a"),iYo=o("LongformerForQuestionAnswering"),dYo=o(" (Longformer model)"),cYo=l(),cv=a("li"),h_e=a("strong"),fYo=o("lxmert"),mYo=o(" \u2014 "),Fz=a("a"),gYo=o("LxmertForQuestionAnswering"),hYo=o(" (LXMERT model)"),pYo=l(),fv=a("li"),p_e=a("strong"),uYo=o("mbart"),_Yo=o(" \u2014 "),Tz=a("a"),bYo=o("MBartForQuestionAnswering"),vYo=o(" (mBART model)"),FYo=l(),mv=a("li"),u_e=a("strong"),TYo=o("megatron-bert"),MYo=o(" \u2014 "),Mz=a("a"),EYo=o("MegatronBertForQuestionAnswering"),CYo=o(" (Megatron-BERT model)"),wYo=l(),gv=a("li"),__e=a("strong"),AYo=o("mobilebert"),LYo=o(" \u2014 "),Ez=a("a"),yYo=o("MobileBertForQuestionAnswering"),xYo=o(" (MobileBERT model)"),$Yo=l(),hv=a("li"),b_e=a("strong"),kYo=o("mpnet"),SYo=o(" \u2014 "),Cz=a("a"),RYo=o("MPNetForQuestionAnswering"),PYo=o(" (MPNet model)"),BYo=l(),pv=a("li"),v_e=a("strong"),IYo=o("nystromformer"),NYo=o(" \u2014 "),wz=a("a"),qYo=o("NystromformerForQuestionAnswering"),jYo=o(" (Nystr\xF6mformer model)"),DYo=l(),uv=a("li"),F_e=a("strong"),GYo=o("qdqbert"),OYo=o(" \u2014 "),Az=a("a"),VYo=o("QDQBertForQuestionAnswering"),XYo=o(" (QDQBert model)"),zYo=l(),_v=a("li"),T_e=a("strong"),WYo=o("reformer"),QYo=o(" \u2014 "),Lz=a("a"),HYo=o("ReformerForQuestionAnswering"),UYo=o(" (Reformer model)"),JYo=l(),bv=a("li"),M_e=a("strong"),YYo=o("rembert"),KYo=o(" \u2014 "),yz=a("a"),ZYo=o("RemBertForQuestionAnswering"),eKo=o(" (RemBERT model)"),oKo=l(),vv=a("li"),E_e=a("strong"),rKo=o("roberta"),tKo=o(" \u2014 "),xz=a("a"),aKo=o("RobertaForQuestionAnswering"),nKo=o(" (RoBERTa model)"),sKo=l(),Fv=a("li"),C_e=a("strong"),lKo=o("roformer"),iKo=o(" \u2014 "),$z=a("a"),dKo=o("RoFormerForQuestionAnswering"),cKo=o(" (RoFormer model)"),fKo=l(),Tv=a("li"),w_e=a("strong"),mKo=o("splinter"),gKo=o(" \u2014 "),kz=a("a"),hKo=o("SplinterForQuestionAnswering"),pKo=o(" (Splinter model)"),uKo=l(),Mv=a("li"),A_e=a("strong"),_Ko=o("squeezebert"),bKo=o(" \u2014 "),Sz=a("a"),vKo=o("SqueezeBertForQuestionAnswering"),FKo=o(" (SqueezeBERT model)"),TKo=l(),Ev=a("li"),L_e=a("strong"),MKo=o("xlm"),EKo=o(" \u2014 "),Rz=a("a"),CKo=o("XLMForQuestionAnsweringSimple"),wKo=o(" (XLM model)"),AKo=l(),Cv=a("li"),y_e=a("strong"),LKo=o("xlm-roberta"),yKo=o(" \u2014 "),Pz=a("a"),xKo=o("XLMRobertaForQuestionAnswering"),$Ko=o(" (XLM-RoBERTa model)"),kKo=l(),wv=a("li"),x_e=a("strong"),SKo=o("xlm-roberta-xl"),RKo=o(" \u2014 "),Bz=a("a"),PKo=o("XLMRobertaXLForQuestionAnswering"),BKo=o(" (XLM-RoBERTa-XL model)"),IKo=l(),Av=a("li"),$_e=a("strong"),NKo=o("xlnet"),qKo=o(" \u2014 "),Iz=a("a"),jKo=o("XLNetForQuestionAnsweringSimple"),DKo=o(" (XLNet model)"),GKo=l(),Lv=a("li"),k_e=a("strong"),OKo=o("yoso"),VKo=o(" \u2014 "),Nz=a("a"),XKo=o("YosoForQuestionAnswering"),zKo=o(" (YOSO model)"),WKo=l(),yv=a("p"),QKo=o("The model is set in evaluation mode by default using "),S_e=a("code"),HKo=o("model.eval()"),UKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),R_e=a("code"),JKo=o("model.train()"),YKo=l(),F(xv.$$.fragment),jGe=l(),cd=a("h2"),$v=a("a"),P_e=a("span"),F(V7.$$.fragment),KKo=l(),B_e=a("span"),ZKo=o("AutoModelForTableQuestionAnswering"),DGe=l(),jo=a("div"),F(X7.$$.fragment),eZo=l(),fd=a("p"),oZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),qz=a("a"),rZo=o("from_pretrained()"),tZo=o(" class method or the "),jz=a("a"),aZo=o("from_config()"),nZo=o(` class
method.`),sZo=l(),z7=a("p"),lZo=o("This class cannot be instantiated directly using "),I_e=a("code"),iZo=o("__init__()"),dZo=o(" (throws an error)."),cZo=l(),pt=a("div"),F(W7.$$.fragment),fZo=l(),N_e=a("p"),mZo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),gZo=l(),md=a("p"),hZo=o(`Note:
Loading a model from its configuration file does `),q_e=a("strong"),pZo=o("not"),uZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Dz=a("a"),_Zo=o("from_pretrained()"),bZo=o(" to load the model weights."),vZo=l(),F(kv.$$.fragment),FZo=l(),so=a("div"),F(Q7.$$.fragment),TZo=l(),j_e=a("p"),MZo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),EZo=l(),Oa=a("p"),CZo=o("The model class to instantiate is selected based on the "),D_e=a("code"),wZo=o("model_type"),AZo=o(` property of the config object (either
passed as an argument or loaded from `),G_e=a("code"),LZo=o("pretrained_model_name_or_path"),yZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O_e=a("code"),xZo=o("pretrained_model_name_or_path"),$Zo=o(":"),kZo=l(),V_e=a("ul"),Sv=a("li"),X_e=a("strong"),SZo=o("tapas"),RZo=o(" \u2014 "),Gz=a("a"),PZo=o("TapasForQuestionAnswering"),BZo=o(" (TAPAS model)"),IZo=l(),Rv=a("p"),NZo=o("The model is set in evaluation mode by default using "),z_e=a("code"),qZo=o("model.eval()"),jZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),W_e=a("code"),DZo=o("model.train()"),GZo=l(),F(Pv.$$.fragment),GGe=l(),gd=a("h2"),Bv=a("a"),Q_e=a("span"),F(H7.$$.fragment),OZo=l(),H_e=a("span"),VZo=o("AutoModelForImageClassification"),OGe=l(),Do=a("div"),F(U7.$$.fragment),XZo=l(),hd=a("p"),zZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Oz=a("a"),WZo=o("from_pretrained()"),QZo=o(" class method or the "),Vz=a("a"),HZo=o("from_config()"),UZo=o(` class
method.`),JZo=l(),J7=a("p"),YZo=o("This class cannot be instantiated directly using "),U_e=a("code"),KZo=o("__init__()"),ZZo=o(" (throws an error)."),eer=l(),ut=a("div"),F(Y7.$$.fragment),oer=l(),J_e=a("p"),rer=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),ter=l(),pd=a("p"),aer=o(`Note:
Loading a model from its configuration file does `),Y_e=a("strong"),ner=o("not"),ser=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Xz=a("a"),ler=o("from_pretrained()"),ier=o(" to load the model weights."),der=l(),F(Iv.$$.fragment),cer=l(),lo=a("div"),F(K7.$$.fragment),fer=l(),K_e=a("p"),mer=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),ger=l(),Va=a("p"),her=o("The model class to instantiate is selected based on the "),Z_e=a("code"),per=o("model_type"),uer=o(` property of the config object (either
passed as an argument or loaded from `),e1e=a("code"),_er=o("pretrained_model_name_or_path"),ber=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o1e=a("code"),ver=o("pretrained_model_name_or_path"),Fer=o(":"),Ter=l(),Fe=a("ul"),Nv=a("li"),r1e=a("strong"),Mer=o("beit"),Eer=o(" \u2014 "),zz=a("a"),Cer=o("BeitForImageClassification"),wer=o(" (BEiT model)"),Aer=l(),qv=a("li"),t1e=a("strong"),Ler=o("convnext"),yer=o(" \u2014 "),Wz=a("a"),xer=o("ConvNextForImageClassification"),$er=o(" (ConvNeXT model)"),ker=l(),jv=a("li"),a1e=a("strong"),Ser=o("cvt"),Rer=o(" \u2014 "),Qz=a("a"),Per=o("CvtForImageClassification"),Ber=o(" (CvT model)"),Ier=l(),Dv=a("li"),n1e=a("strong"),Ner=o("data2vec-vision"),qer=o(" \u2014 "),Hz=a("a"),jer=o("Data2VecVisionForImageClassification"),Der=o(" (Data2VecVision model)"),Ger=l(),Os=a("li"),s1e=a("strong"),Oer=o("deit"),Ver=o(" \u2014 "),Uz=a("a"),Xer=o("DeiTForImageClassification"),zer=o(" or "),Jz=a("a"),Wer=o("DeiTForImageClassificationWithTeacher"),Qer=o(" (DeiT model)"),Her=l(),Gv=a("li"),l1e=a("strong"),Uer=o("imagegpt"),Jer=o(" \u2014 "),Yz=a("a"),Yer=o("ImageGPTForImageClassification"),Ker=o(" (ImageGPT model)"),Zer=l(),Vs=a("li"),i1e=a("strong"),eor=o("levit"),oor=o(" \u2014 "),Kz=a("a"),ror=o("LevitForImageClassification"),tor=o(" or "),Zz=a("a"),aor=o("LevitForImageClassificationWithTeacher"),nor=o(" (LeViT model)"),sor=l(),_t=a("li"),d1e=a("strong"),lor=o("perceiver"),ior=o(" \u2014 "),eW=a("a"),dor=o("PerceiverForImageClassificationLearned"),cor=o(" or "),oW=a("a"),mor=o("PerceiverForImageClassificationFourier"),gor=o(" or "),rW=a("a"),hor=o("PerceiverForImageClassificationConvProcessing"),por=o(" (Perceiver model)"),uor=l(),Ov=a("li"),c1e=a("strong"),_or=o("poolformer"),bor=o(" \u2014 "),tW=a("a"),vor=o("PoolFormerForImageClassification"),For=o(" (PoolFormer model)"),Tor=l(),Vv=a("li"),f1e=a("strong"),Mor=o("regnet"),Eor=o(" \u2014 "),aW=a("a"),Cor=o("RegNetForImageClassification"),wor=o(" (RegNet model)"),Aor=l(),Xv=a("li"),m1e=a("strong"),Lor=o("resnet"),yor=o(" \u2014 "),nW=a("a"),xor=o("ResNetForImageClassification"),$or=o(" (ResNet model)"),kor=l(),zv=a("li"),g1e=a("strong"),Sor=o("segformer"),Ror=o(" \u2014 "),sW=a("a"),Por=o("SegformerForImageClassification"),Bor=o(" (SegFormer model)"),Ior=l(),Wv=a("li"),h1e=a("strong"),Nor=o("swin"),qor=o(" \u2014 "),lW=a("a"),jor=o("SwinForImageClassification"),Dor=o(" (Swin Transformer model)"),Gor=l(),Qv=a("li"),p1e=a("strong"),Oor=o("van"),Vor=o(" \u2014 "),iW=a("a"),Xor=o("VanForImageClassification"),zor=o(" (VAN model)"),Wor=l(),Hv=a("li"),u1e=a("strong"),Qor=o("vit"),Hor=o(" \u2014 "),dW=a("a"),Uor=o("ViTForImageClassification"),Jor=o(" (ViT model)"),Yor=l(),Uv=a("p"),Kor=o("The model is set in evaluation mode by default using "),_1e=a("code"),Zor=o("model.eval()"),err=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),b1e=a("code"),orr=o("model.train()"),rrr=l(),F(Jv.$$.fragment),VGe=l(),ud=a("h2"),Yv=a("a"),v1e=a("span"),F(Z7.$$.fragment),trr=l(),F1e=a("span"),arr=o("AutoModelForVision2Seq"),XGe=l(),Go=a("div"),F(e8.$$.fragment),nrr=l(),_d=a("p"),srr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),cW=a("a"),lrr=o("from_pretrained()"),irr=o(" class method or the "),fW=a("a"),drr=o("from_config()"),crr=o(` class
method.`),frr=l(),o8=a("p"),mrr=o("This class cannot be instantiated directly using "),T1e=a("code"),grr=o("__init__()"),hrr=o(" (throws an error)."),prr=l(),bt=a("div"),F(r8.$$.fragment),urr=l(),M1e=a("p"),_rr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),brr=l(),bd=a("p"),vrr=o(`Note:
Loading a model from its configuration file does `),E1e=a("strong"),Frr=o("not"),Trr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mW=a("a"),Mrr=o("from_pretrained()"),Err=o(" to load the model weights."),Crr=l(),F(Kv.$$.fragment),wrr=l(),io=a("div"),F(t8.$$.fragment),Arr=l(),C1e=a("p"),Lrr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),yrr=l(),Xa=a("p"),xrr=o("The model class to instantiate is selected based on the "),w1e=a("code"),$rr=o("model_type"),krr=o(` property of the config object (either
passed as an argument or loaded from `),A1e=a("code"),Srr=o("pretrained_model_name_or_path"),Rrr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L1e=a("code"),Prr=o("pretrained_model_name_or_path"),Brr=o(":"),Irr=l(),y1e=a("ul"),Zv=a("li"),x1e=a("strong"),Nrr=o("vision-encoder-decoder"),qrr=o(" \u2014 "),gW=a("a"),jrr=o("VisionEncoderDecoderModel"),Drr=o(" (Vision Encoder decoder model)"),Grr=l(),e3=a("p"),Orr=o("The model is set in evaluation mode by default using "),$1e=a("code"),Vrr=o("model.eval()"),Xrr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),k1e=a("code"),zrr=o("model.train()"),Wrr=l(),F(o3.$$.fragment),zGe=l(),vd=a("h2"),r3=a("a"),S1e=a("span"),F(a8.$$.fragment),Qrr=l(),R1e=a("span"),Hrr=o("AutoModelForVisualQuestionAnswering"),WGe=l(),Oo=a("div"),F(n8.$$.fragment),Urr=l(),Fd=a("p"),Jrr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),hW=a("a"),Yrr=o("from_pretrained()"),Krr=o(" class method or the "),pW=a("a"),Zrr=o("from_config()"),etr=o(` class
method.`),otr=l(),s8=a("p"),rtr=o("This class cannot be instantiated directly using "),P1e=a("code"),ttr=o("__init__()"),atr=o(" (throws an error)."),ntr=l(),vt=a("div"),F(l8.$$.fragment),str=l(),B1e=a("p"),ltr=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),itr=l(),Td=a("p"),dtr=o(`Note:
Loading a model from its configuration file does `),I1e=a("strong"),ctr=o("not"),ftr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uW=a("a"),mtr=o("from_pretrained()"),gtr=o(" to load the model weights."),htr=l(),F(t3.$$.fragment),ptr=l(),co=a("div"),F(i8.$$.fragment),utr=l(),N1e=a("p"),_tr=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),btr=l(),za=a("p"),vtr=o("The model class to instantiate is selected based on the "),q1e=a("code"),Ftr=o("model_type"),Ttr=o(` property of the config object (either
passed as an argument or loaded from `),j1e=a("code"),Mtr=o("pretrained_model_name_or_path"),Etr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D1e=a("code"),Ctr=o("pretrained_model_name_or_path"),wtr=o(":"),Atr=l(),G1e=a("ul"),a3=a("li"),O1e=a("strong"),Ltr=o("vilt"),ytr=o(" \u2014 "),_W=a("a"),xtr=o("ViltForQuestionAnswering"),$tr=o(" (ViLT model)"),ktr=l(),n3=a("p"),Str=o("The model is set in evaluation mode by default using "),V1e=a("code"),Rtr=o("model.eval()"),Ptr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),X1e=a("code"),Btr=o("model.train()"),Itr=l(),F(s3.$$.fragment),QGe=l(),Md=a("h2"),l3=a("a"),z1e=a("span"),F(d8.$$.fragment),Ntr=l(),W1e=a("span"),qtr=o("AutoModelForAudioClassification"),HGe=l(),Vo=a("div"),F(c8.$$.fragment),jtr=l(),Ed=a("p"),Dtr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),bW=a("a"),Gtr=o("from_pretrained()"),Otr=o(" class method or the "),vW=a("a"),Vtr=o("from_config()"),Xtr=o(` class
method.`),ztr=l(),f8=a("p"),Wtr=o("This class cannot be instantiated directly using "),Q1e=a("code"),Qtr=o("__init__()"),Htr=o(" (throws an error)."),Utr=l(),Ft=a("div"),F(m8.$$.fragment),Jtr=l(),H1e=a("p"),Ytr=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Ktr=l(),Cd=a("p"),Ztr=o(`Note:
Loading a model from its configuration file does `),U1e=a("strong"),ear=o("not"),oar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FW=a("a"),rar=o("from_pretrained()"),tar=o(" to load the model weights."),aar=l(),F(i3.$$.fragment),nar=l(),fo=a("div"),F(g8.$$.fragment),sar=l(),J1e=a("p"),lar=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),iar=l(),Wa=a("p"),dar=o("The model class to instantiate is selected based on the "),Y1e=a("code"),car=o("model_type"),far=o(` property of the config object (either
passed as an argument or loaded from `),K1e=a("code"),mar=o("pretrained_model_name_or_path"),gar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z1e=a("code"),har=o("pretrained_model_name_or_path"),par=o(":"),uar=l(),Pe=a("ul"),d3=a("li"),e2e=a("strong"),_ar=o("data2vec-audio"),bar=o(" \u2014 "),TW=a("a"),Far=o("Data2VecAudioForSequenceClassification"),Tar=o(" (Data2VecAudio model)"),Mar=l(),c3=a("li"),o2e=a("strong"),Ear=o("hubert"),Car=o(" \u2014 "),MW=a("a"),war=o("HubertForSequenceClassification"),Aar=o(" (Hubert model)"),Lar=l(),f3=a("li"),r2e=a("strong"),yar=o("sew"),xar=o(" \u2014 "),EW=a("a"),$ar=o("SEWForSequenceClassification"),kar=o(" (SEW model)"),Sar=l(),m3=a("li"),t2e=a("strong"),Rar=o("sew-d"),Par=o(" \u2014 "),CW=a("a"),Bar=o("SEWDForSequenceClassification"),Iar=o(" (SEW-D model)"),Nar=l(),g3=a("li"),a2e=a("strong"),qar=o("unispeech"),jar=o(" \u2014 "),wW=a("a"),Dar=o("UniSpeechForSequenceClassification"),Gar=o(" (UniSpeech model)"),Oar=l(),h3=a("li"),n2e=a("strong"),Var=o("unispeech-sat"),Xar=o(" \u2014 "),AW=a("a"),zar=o("UniSpeechSatForSequenceClassification"),War=o(" (UniSpeechSat model)"),Qar=l(),p3=a("li"),s2e=a("strong"),Har=o("wav2vec2"),Uar=o(" \u2014 "),LW=a("a"),Jar=o("Wav2Vec2ForSequenceClassification"),Yar=o(" (Wav2Vec2 model)"),Kar=l(),u3=a("li"),l2e=a("strong"),Zar=o("wav2vec2-conformer"),enr=o(" \u2014 "),yW=a("a"),onr=o("Wav2Vec2ConformerForSequenceClassification"),rnr=o(" (Wav2Vec2-Conformer model)"),tnr=l(),_3=a("li"),i2e=a("strong"),anr=o("wavlm"),nnr=o(" \u2014 "),xW=a("a"),snr=o("WavLMForSequenceClassification"),lnr=o(" (WavLM model)"),inr=l(),b3=a("p"),dnr=o("The model is set in evaluation mode by default using "),d2e=a("code"),cnr=o("model.eval()"),fnr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),c2e=a("code"),mnr=o("model.train()"),gnr=l(),F(v3.$$.fragment),UGe=l(),wd=a("h2"),F3=a("a"),f2e=a("span"),F(h8.$$.fragment),hnr=l(),m2e=a("span"),pnr=o("AutoModelForAudioFrameClassification"),JGe=l(),Xo=a("div"),F(p8.$$.fragment),unr=l(),Ad=a("p"),_nr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),$W=a("a"),bnr=o("from_pretrained()"),vnr=o(" class method or the "),kW=a("a"),Fnr=o("from_config()"),Tnr=o(` class
method.`),Mnr=l(),u8=a("p"),Enr=o("This class cannot be instantiated directly using "),g2e=a("code"),Cnr=o("__init__()"),wnr=o(" (throws an error)."),Anr=l(),Tt=a("div"),F(_8.$$.fragment),Lnr=l(),h2e=a("p"),ynr=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),xnr=l(),Ld=a("p"),$nr=o(`Note:
Loading a model from its configuration file does `),p2e=a("strong"),knr=o("not"),Snr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SW=a("a"),Rnr=o("from_pretrained()"),Pnr=o(" to load the model weights."),Bnr=l(),F(T3.$$.fragment),Inr=l(),mo=a("div"),F(b8.$$.fragment),Nnr=l(),u2e=a("p"),qnr=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),jnr=l(),Qa=a("p"),Dnr=o("The model class to instantiate is selected based on the "),_2e=a("code"),Gnr=o("model_type"),Onr=o(` property of the config object (either
passed as an argument or loaded from `),b2e=a("code"),Vnr=o("pretrained_model_name_or_path"),Xnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v2e=a("code"),znr=o("pretrained_model_name_or_path"),Wnr=o(":"),Qnr=l(),et=a("ul"),M3=a("li"),F2e=a("strong"),Hnr=o("data2vec-audio"),Unr=o(" \u2014 "),RW=a("a"),Jnr=o("Data2VecAudioForAudioFrameClassification"),Ynr=o(" (Data2VecAudio model)"),Knr=l(),E3=a("li"),T2e=a("strong"),Znr=o("unispeech-sat"),esr=o(" \u2014 "),PW=a("a"),osr=o("UniSpeechSatForAudioFrameClassification"),rsr=o(" (UniSpeechSat model)"),tsr=l(),C3=a("li"),M2e=a("strong"),asr=o("wav2vec2"),nsr=o(" \u2014 "),BW=a("a"),ssr=o("Wav2Vec2ForAudioFrameClassification"),lsr=o(" (Wav2Vec2 model)"),isr=l(),w3=a("li"),E2e=a("strong"),dsr=o("wav2vec2-conformer"),csr=o(" \u2014 "),IW=a("a"),fsr=o("Wav2Vec2ConformerForAudioFrameClassification"),msr=o(" (Wav2Vec2-Conformer model)"),gsr=l(),A3=a("li"),C2e=a("strong"),hsr=o("wavlm"),psr=o(" \u2014 "),NW=a("a"),usr=o("WavLMForAudioFrameClassification"),_sr=o(" (WavLM model)"),bsr=l(),L3=a("p"),vsr=o("The model is set in evaluation mode by default using "),w2e=a("code"),Fsr=o("model.eval()"),Tsr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),A2e=a("code"),Msr=o("model.train()"),Esr=l(),F(y3.$$.fragment),YGe=l(),yd=a("h2"),x3=a("a"),L2e=a("span"),F(v8.$$.fragment),Csr=l(),y2e=a("span"),wsr=o("AutoModelForCTC"),KGe=l(),zo=a("div"),F(F8.$$.fragment),Asr=l(),xd=a("p"),Lsr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),qW=a("a"),ysr=o("from_pretrained()"),xsr=o(" class method or the "),jW=a("a"),$sr=o("from_config()"),ksr=o(` class
method.`),Ssr=l(),T8=a("p"),Rsr=o("This class cannot be instantiated directly using "),x2e=a("code"),Psr=o("__init__()"),Bsr=o(" (throws an error)."),Isr=l(),Mt=a("div"),F(M8.$$.fragment),Nsr=l(),$2e=a("p"),qsr=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),jsr=l(),$d=a("p"),Dsr=o(`Note:
Loading a model from its configuration file does `),k2e=a("strong"),Gsr=o("not"),Osr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DW=a("a"),Vsr=o("from_pretrained()"),Xsr=o(" to load the model weights."),zsr=l(),F($3.$$.fragment),Wsr=l(),go=a("div"),F(E8.$$.fragment),Qsr=l(),S2e=a("p"),Hsr=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Usr=l(),Ha=a("p"),Jsr=o("The model class to instantiate is selected based on the "),R2e=a("code"),Ysr=o("model_type"),Ksr=o(` property of the config object (either
passed as an argument or loaded from `),P2e=a("code"),Zsr=o("pretrained_model_name_or_path"),elr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B2e=a("code"),olr=o("pretrained_model_name_or_path"),rlr=o(":"),tlr=l(),Le=a("ul"),k3=a("li"),I2e=a("strong"),alr=o("data2vec-audio"),nlr=o(" \u2014 "),GW=a("a"),slr=o("Data2VecAudioForCTC"),llr=o(" (Data2VecAudio model)"),ilr=l(),S3=a("li"),N2e=a("strong"),dlr=o("hubert"),clr=o(" \u2014 "),OW=a("a"),flr=o("HubertForCTC"),mlr=o(" (Hubert model)"),glr=l(),R3=a("li"),q2e=a("strong"),hlr=o("mctct"),plr=o(" \u2014 "),VW=a("a"),ulr=o("MCTCTForCTC"),_lr=o(" (M-CTC-T model)"),blr=l(),P3=a("li"),j2e=a("strong"),vlr=o("sew"),Flr=o(" \u2014 "),XW=a("a"),Tlr=o("SEWForCTC"),Mlr=o(" (SEW model)"),Elr=l(),B3=a("li"),D2e=a("strong"),Clr=o("sew-d"),wlr=o(" \u2014 "),zW=a("a"),Alr=o("SEWDForCTC"),Llr=o(" (SEW-D model)"),ylr=l(),I3=a("li"),G2e=a("strong"),xlr=o("unispeech"),$lr=o(" \u2014 "),WW=a("a"),klr=o("UniSpeechForCTC"),Slr=o(" (UniSpeech model)"),Rlr=l(),N3=a("li"),O2e=a("strong"),Plr=o("unispeech-sat"),Blr=o(" \u2014 "),QW=a("a"),Ilr=o("UniSpeechSatForCTC"),Nlr=o(" (UniSpeechSat model)"),qlr=l(),q3=a("li"),V2e=a("strong"),jlr=o("wav2vec2"),Dlr=o(" \u2014 "),HW=a("a"),Glr=o("Wav2Vec2ForCTC"),Olr=o(" (Wav2Vec2 model)"),Vlr=l(),j3=a("li"),X2e=a("strong"),Xlr=o("wav2vec2-conformer"),zlr=o(" \u2014 "),UW=a("a"),Wlr=o("Wav2Vec2ConformerForCTC"),Qlr=o(" (Wav2Vec2-Conformer model)"),Hlr=l(),D3=a("li"),z2e=a("strong"),Ulr=o("wavlm"),Jlr=o(" \u2014 "),JW=a("a"),Ylr=o("WavLMForCTC"),Klr=o(" (WavLM model)"),Zlr=l(),G3=a("p"),eir=o("The model is set in evaluation mode by default using "),W2e=a("code"),oir=o("model.eval()"),rir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Q2e=a("code"),tir=o("model.train()"),air=l(),F(O3.$$.fragment),ZGe=l(),kd=a("h2"),V3=a("a"),H2e=a("span"),F(C8.$$.fragment),nir=l(),U2e=a("span"),sir=o("AutoModelForSpeechSeq2Seq"),eOe=l(),Wo=a("div"),F(w8.$$.fragment),lir=l(),Sd=a("p"),iir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),YW=a("a"),dir=o("from_pretrained()"),cir=o(" class method or the "),KW=a("a"),fir=o("from_config()"),mir=o(` class
method.`),gir=l(),A8=a("p"),hir=o("This class cannot be instantiated directly using "),J2e=a("code"),pir=o("__init__()"),uir=o(" (throws an error)."),_ir=l(),Et=a("div"),F(L8.$$.fragment),bir=l(),Y2e=a("p"),vir=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Fir=l(),Rd=a("p"),Tir=o(`Note:
Loading a model from its configuration file does `),K2e=a("strong"),Mir=o("not"),Eir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZW=a("a"),Cir=o("from_pretrained()"),wir=o(" to load the model weights."),Air=l(),F(X3.$$.fragment),Lir=l(),ho=a("div"),F(y8.$$.fragment),yir=l(),Z2e=a("p"),xir=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),$ir=l(),Ua=a("p"),kir=o("The model class to instantiate is selected based on the "),ebe=a("code"),Sir=o("model_type"),Rir=o(` property of the config object (either
passed as an argument or loaded from `),obe=a("code"),Pir=o("pretrained_model_name_or_path"),Bir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rbe=a("code"),Iir=o("pretrained_model_name_or_path"),Nir=o(":"),qir=l(),x8=a("ul"),z3=a("li"),tbe=a("strong"),jir=o("speech-encoder-decoder"),Dir=o(" \u2014 "),eQ=a("a"),Gir=o("SpeechEncoderDecoderModel"),Oir=o(" (Speech Encoder decoder model)"),Vir=l(),W3=a("li"),abe=a("strong"),Xir=o("speech_to_text"),zir=o(" \u2014 "),oQ=a("a"),Wir=o("Speech2TextForConditionalGeneration"),Qir=o(" (Speech2Text model)"),Hir=l(),Q3=a("p"),Uir=o("The model is set in evaluation mode by default using "),nbe=a("code"),Jir=o("model.eval()"),Yir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sbe=a("code"),Kir=o("model.train()"),Zir=l(),F(H3.$$.fragment),oOe=l(),Pd=a("h2"),U3=a("a"),lbe=a("span"),F($8.$$.fragment),edr=l(),ibe=a("span"),odr=o("AutoModelForAudioXVector"),rOe=l(),Qo=a("div"),F(k8.$$.fragment),rdr=l(),Bd=a("p"),tdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),rQ=a("a"),adr=o("from_pretrained()"),ndr=o(" class method or the "),tQ=a("a"),sdr=o("from_config()"),ldr=o(` class
method.`),idr=l(),S8=a("p"),ddr=o("This class cannot be instantiated directly using "),dbe=a("code"),cdr=o("__init__()"),fdr=o(" (throws an error)."),mdr=l(),Ct=a("div"),F(R8.$$.fragment),gdr=l(),cbe=a("p"),hdr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),pdr=l(),Id=a("p"),udr=o(`Note:
Loading a model from its configuration file does `),fbe=a("strong"),_dr=o("not"),bdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aQ=a("a"),vdr=o("from_pretrained()"),Fdr=o(" to load the model weights."),Tdr=l(),F(J3.$$.fragment),Mdr=l(),po=a("div"),F(P8.$$.fragment),Edr=l(),mbe=a("p"),Cdr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),wdr=l(),Ja=a("p"),Adr=o("The model class to instantiate is selected based on the "),gbe=a("code"),Ldr=o("model_type"),ydr=o(` property of the config object (either
passed as an argument or loaded from `),hbe=a("code"),xdr=o("pretrained_model_name_or_path"),$dr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pbe=a("code"),kdr=o("pretrained_model_name_or_path"),Sdr=o(":"),Rdr=l(),ot=a("ul"),Y3=a("li"),ube=a("strong"),Pdr=o("data2vec-audio"),Bdr=o(" \u2014 "),nQ=a("a"),Idr=o("Data2VecAudioForXVector"),Ndr=o(" (Data2VecAudio model)"),qdr=l(),K3=a("li"),_be=a("strong"),jdr=o("unispeech-sat"),Ddr=o(" \u2014 "),sQ=a("a"),Gdr=o("UniSpeechSatForXVector"),Odr=o(" (UniSpeechSat model)"),Vdr=l(),Z3=a("li"),bbe=a("strong"),Xdr=o("wav2vec2"),zdr=o(" \u2014 "),lQ=a("a"),Wdr=o("Wav2Vec2ForXVector"),Qdr=o(" (Wav2Vec2 model)"),Hdr=l(),eF=a("li"),vbe=a("strong"),Udr=o("wav2vec2-conformer"),Jdr=o(" \u2014 "),iQ=a("a"),Ydr=o("Wav2Vec2ConformerForXVector"),Kdr=o(" (Wav2Vec2-Conformer model)"),Zdr=l(),oF=a("li"),Fbe=a("strong"),ecr=o("wavlm"),ocr=o(" \u2014 "),dQ=a("a"),rcr=o("WavLMForXVector"),tcr=o(" (WavLM model)"),acr=l(),rF=a("p"),ncr=o("The model is set in evaluation mode by default using "),Tbe=a("code"),scr=o("model.eval()"),lcr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mbe=a("code"),icr=o("model.train()"),dcr=l(),F(tF.$$.fragment),tOe=l(),Nd=a("h2"),aF=a("a"),Ebe=a("span"),F(B8.$$.fragment),ccr=l(),Cbe=a("span"),fcr=o("AutoModelForMaskedImageModeling"),aOe=l(),Ho=a("div"),F(I8.$$.fragment),mcr=l(),qd=a("p"),gcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),cQ=a("a"),hcr=o("from_pretrained()"),pcr=o(" class method or the "),fQ=a("a"),ucr=o("from_config()"),_cr=o(` class
method.`),bcr=l(),N8=a("p"),vcr=o("This class cannot be instantiated directly using "),wbe=a("code"),Fcr=o("__init__()"),Tcr=o(" (throws an error)."),Mcr=l(),wt=a("div"),F(q8.$$.fragment),Ecr=l(),Abe=a("p"),Ccr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),wcr=l(),jd=a("p"),Acr=o(`Note:
Loading a model from its configuration file does `),Lbe=a("strong"),Lcr=o("not"),ycr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mQ=a("a"),xcr=o("from_pretrained()"),$cr=o(" to load the model weights."),kcr=l(),F(nF.$$.fragment),Scr=l(),uo=a("div"),F(j8.$$.fragment),Rcr=l(),ybe=a("p"),Pcr=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Bcr=l(),Ya=a("p"),Icr=o("The model class to instantiate is selected based on the "),xbe=a("code"),Ncr=o("model_type"),qcr=o(` property of the config object (either
passed as an argument or loaded from `),$be=a("code"),jcr=o("pretrained_model_name_or_path"),Dcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kbe=a("code"),Gcr=o("pretrained_model_name_or_path"),Ocr=o(":"),Vcr=l(),Dd=a("ul"),sF=a("li"),Sbe=a("strong"),Xcr=o("deit"),zcr=o(" \u2014 "),gQ=a("a"),Wcr=o("DeiTForMaskedImageModeling"),Qcr=o(" (DeiT model)"),Hcr=l(),lF=a("li"),Rbe=a("strong"),Ucr=o("swin"),Jcr=o(" \u2014 "),hQ=a("a"),Ycr=o("SwinForMaskedImageModeling"),Kcr=o(" (Swin Transformer model)"),Zcr=l(),iF=a("li"),Pbe=a("strong"),efr=o("vit"),ofr=o(" \u2014 "),pQ=a("a"),rfr=o("ViTForMaskedImageModeling"),tfr=o(" (ViT model)"),afr=l(),dF=a("p"),nfr=o("The model is set in evaluation mode by default using "),Bbe=a("code"),sfr=o("model.eval()"),lfr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ibe=a("code"),ifr=o("model.train()"),dfr=l(),F(cF.$$.fragment),nOe=l(),Gd=a("h2"),fF=a("a"),Nbe=a("span"),F(D8.$$.fragment),cfr=l(),qbe=a("span"),ffr=o("AutoModelForObjectDetection"),sOe=l(),Uo=a("div"),F(G8.$$.fragment),mfr=l(),Od=a("p"),gfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),uQ=a("a"),hfr=o("from_pretrained()"),pfr=o(" class method or the "),_Q=a("a"),ufr=o("from_config()"),_fr=o(` class
method.`),bfr=l(),O8=a("p"),vfr=o("This class cannot be instantiated directly using "),jbe=a("code"),Ffr=o("__init__()"),Tfr=o(" (throws an error)."),Mfr=l(),At=a("div"),F(V8.$$.fragment),Efr=l(),Dbe=a("p"),Cfr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),wfr=l(),Vd=a("p"),Afr=o(`Note:
Loading a model from its configuration file does `),Gbe=a("strong"),Lfr=o("not"),yfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bQ=a("a"),xfr=o("from_pretrained()"),$fr=o(" to load the model weights."),kfr=l(),F(mF.$$.fragment),Sfr=l(),_o=a("div"),F(X8.$$.fragment),Rfr=l(),Obe=a("p"),Pfr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Bfr=l(),Ka=a("p"),Ifr=o("The model class to instantiate is selected based on the "),Vbe=a("code"),Nfr=o("model_type"),qfr=o(` property of the config object (either
passed as an argument or loaded from `),Xbe=a("code"),jfr=o("pretrained_model_name_or_path"),Dfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zbe=a("code"),Gfr=o("pretrained_model_name_or_path"),Ofr=o(":"),Vfr=l(),z8=a("ul"),gF=a("li"),Wbe=a("strong"),Xfr=o("detr"),zfr=o(" \u2014 "),vQ=a("a"),Wfr=o("DetrForObjectDetection"),Qfr=o(" (DETR model)"),Hfr=l(),hF=a("li"),Qbe=a("strong"),Ufr=o("yolos"),Jfr=o(" \u2014 "),FQ=a("a"),Yfr=o("YolosForObjectDetection"),Kfr=o(" (YOLOS model)"),Zfr=l(),pF=a("p"),emr=o("The model is set in evaluation mode by default using "),Hbe=a("code"),omr=o("model.eval()"),rmr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ube=a("code"),tmr=o("model.train()"),amr=l(),F(uF.$$.fragment),lOe=l(),Xd=a("h2"),_F=a("a"),Jbe=a("span"),F(W8.$$.fragment),nmr=l(),Ybe=a("span"),smr=o("AutoModelForImageSegmentation"),iOe=l(),Jo=a("div"),F(Q8.$$.fragment),lmr=l(),zd=a("p"),imr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),TQ=a("a"),dmr=o("from_pretrained()"),cmr=o(" class method or the "),MQ=a("a"),fmr=o("from_config()"),mmr=o(` class
method.`),gmr=l(),H8=a("p"),hmr=o("This class cannot be instantiated directly using "),Kbe=a("code"),pmr=o("__init__()"),umr=o(" (throws an error)."),_mr=l(),Lt=a("div"),F(U8.$$.fragment),bmr=l(),Zbe=a("p"),vmr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Fmr=l(),Wd=a("p"),Tmr=o(`Note:
Loading a model from its configuration file does `),e4e=a("strong"),Mmr=o("not"),Emr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EQ=a("a"),Cmr=o("from_pretrained()"),wmr=o(" to load the model weights."),Amr=l(),F(bF.$$.fragment),Lmr=l(),bo=a("div"),F(J8.$$.fragment),ymr=l(),o4e=a("p"),xmr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),$mr=l(),Za=a("p"),kmr=o("The model class to instantiate is selected based on the "),r4e=a("code"),Smr=o("model_type"),Rmr=o(` property of the config object (either
passed as an argument or loaded from `),t4e=a("code"),Pmr=o("pretrained_model_name_or_path"),Bmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a4e=a("code"),Imr=o("pretrained_model_name_or_path"),Nmr=o(":"),qmr=l(),n4e=a("ul"),vF=a("li"),s4e=a("strong"),jmr=o("detr"),Dmr=o(" \u2014 "),CQ=a("a"),Gmr=o("DetrForSegmentation"),Omr=o(" (DETR model)"),Vmr=l(),FF=a("p"),Xmr=o("The model is set in evaluation mode by default using "),l4e=a("code"),zmr=o("model.eval()"),Wmr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),i4e=a("code"),Qmr=o("model.train()"),Hmr=l(),F(TF.$$.fragment),dOe=l(),Qd=a("h2"),MF=a("a"),d4e=a("span"),F(Y8.$$.fragment),Umr=l(),c4e=a("span"),Jmr=o("AutoModelForSemanticSegmentation"),cOe=l(),Yo=a("div"),F(K8.$$.fragment),Ymr=l(),Hd=a("p"),Kmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),wQ=a("a"),Zmr=o("from_pretrained()"),egr=o(" class method or the "),AQ=a("a"),ogr=o("from_config()"),rgr=o(` class
method.`),tgr=l(),Z8=a("p"),agr=o("This class cannot be instantiated directly using "),f4e=a("code"),ngr=o("__init__()"),sgr=o(" (throws an error)."),lgr=l(),yt=a("div"),F(e9.$$.fragment),igr=l(),m4e=a("p"),dgr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),cgr=l(),Ud=a("p"),fgr=o(`Note:
Loading a model from its configuration file does `),g4e=a("strong"),mgr=o("not"),ggr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LQ=a("a"),hgr=o("from_pretrained()"),pgr=o(" to load the model weights."),ugr=l(),F(EF.$$.fragment),_gr=l(),vo=a("div"),F(o9.$$.fragment),bgr=l(),h4e=a("p"),vgr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Fgr=l(),en=a("p"),Tgr=o("The model class to instantiate is selected based on the "),p4e=a("code"),Mgr=o("model_type"),Egr=o(` property of the config object (either
passed as an argument or loaded from `),u4e=a("code"),Cgr=o("pretrained_model_name_or_path"),wgr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_4e=a("code"),Agr=o("pretrained_model_name_or_path"),Lgr=o(":"),ygr=l(),on=a("ul"),CF=a("li"),b4e=a("strong"),xgr=o("beit"),$gr=o(" \u2014 "),yQ=a("a"),kgr=o("BeitForSemanticSegmentation"),Sgr=o(" (BEiT model)"),Rgr=l(),wF=a("li"),v4e=a("strong"),Pgr=o("data2vec-vision"),Bgr=o(" \u2014 "),xQ=a("a"),Igr=o("Data2VecVisionForSemanticSegmentation"),Ngr=o(" (Data2VecVision model)"),qgr=l(),AF=a("li"),F4e=a("strong"),jgr=o("dpt"),Dgr=o(" \u2014 "),$Q=a("a"),Ggr=o("DPTForSemanticSegmentation"),Ogr=o(" (DPT model)"),Vgr=l(),LF=a("li"),T4e=a("strong"),Xgr=o("segformer"),zgr=o(" \u2014 "),kQ=a("a"),Wgr=o("SegformerForSemanticSegmentation"),Qgr=o(" (SegFormer model)"),Hgr=l(),yF=a("p"),Ugr=o("The model is set in evaluation mode by default using "),M4e=a("code"),Jgr=o("model.eval()"),Ygr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),E4e=a("code"),Kgr=o("model.train()"),Zgr=l(),F(xF.$$.fragment),fOe=l(),Jd=a("h2"),$F=a("a"),C4e=a("span"),F(r9.$$.fragment),ehr=l(),w4e=a("span"),ohr=o("AutoModelForInstanceSegmentation"),mOe=l(),Ko=a("div"),F(t9.$$.fragment),rhr=l(),Yd=a("p"),thr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),SQ=a("a"),ahr=o("from_pretrained()"),nhr=o(" class method or the "),RQ=a("a"),shr=o("from_config()"),lhr=o(` class
method.`),ihr=l(),a9=a("p"),dhr=o("This class cannot be instantiated directly using "),A4e=a("code"),chr=o("__init__()"),fhr=o(" (throws an error)."),mhr=l(),xt=a("div"),F(n9.$$.fragment),ghr=l(),L4e=a("p"),hhr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),phr=l(),Kd=a("p"),uhr=o(`Note:
Loading a model from its configuration file does `),y4e=a("strong"),_hr=o("not"),bhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PQ=a("a"),vhr=o("from_pretrained()"),Fhr=o(" to load the model weights."),Thr=l(),F(kF.$$.fragment),Mhr=l(),Fo=a("div"),F(s9.$$.fragment),Ehr=l(),x4e=a("p"),Chr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),whr=l(),rn=a("p"),Ahr=o("The model class to instantiate is selected based on the "),$4e=a("code"),Lhr=o("model_type"),yhr=o(` property of the config object (either
passed as an argument or loaded from `),k4e=a("code"),xhr=o("pretrained_model_name_or_path"),$hr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S4e=a("code"),khr=o("pretrained_model_name_or_path"),Shr=o(":"),Rhr=l(),R4e=a("ul"),SF=a("li"),P4e=a("strong"),Phr=o("maskformer"),Bhr=o(" \u2014 "),BQ=a("a"),Ihr=o("MaskFormerForInstanceSegmentation"),Nhr=o(" (MaskFormer model)"),qhr=l(),RF=a("p"),jhr=o("The model is set in evaluation mode by default using "),B4e=a("code"),Dhr=o("model.eval()"),Ghr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),I4e=a("code"),Ohr=o("model.train()"),Vhr=l(),F(PF.$$.fragment),gOe=l(),Zd=a("h2"),BF=a("a"),N4e=a("span"),F(l9.$$.fragment),Xhr=l(),q4e=a("span"),zhr=o("TFAutoModel"),hOe=l(),Zo=a("div"),F(i9.$$.fragment),Whr=l(),ec=a("p"),Qhr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),IQ=a("a"),Hhr=o("from_pretrained()"),Uhr=o(" class method or the "),NQ=a("a"),Jhr=o("from_config()"),Yhr=o(` class
method.`),Khr=l(),d9=a("p"),Zhr=o("This class cannot be instantiated directly using "),j4e=a("code"),epr=o("__init__()"),opr=o(" (throws an error)."),rpr=l(),$t=a("div"),F(c9.$$.fragment),tpr=l(),D4e=a("p"),apr=o("Instantiates one of the base model classes of the library from a configuration."),npr=l(),oc=a("p"),spr=o(`Note:
Loading a model from its configuration file does `),G4e=a("strong"),lpr=o("not"),ipr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qQ=a("a"),dpr=o("from_pretrained()"),cpr=o(" to load the model weights."),fpr=l(),F(IF.$$.fragment),mpr=l(),Lr=a("div"),F(f9.$$.fragment),gpr=l(),O4e=a("p"),hpr=o("Instantiate one of the base model classes of the library from a pretrained model."),ppr=l(),tn=a("p"),upr=o("The model class to instantiate is selected based on the "),V4e=a("code"),_pr=o("model_type"),bpr=o(` property of the config object (either
passed as an argument or loaded from `),X4e=a("code"),vpr=o("pretrained_model_name_or_path"),Fpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z4e=a("code"),Tpr=o("pretrained_model_name_or_path"),Mpr=o(":"),Epr=l(),q=a("ul"),NF=a("li"),W4e=a("strong"),Cpr=o("albert"),wpr=o(" \u2014 "),jQ=a("a"),Apr=o("TFAlbertModel"),Lpr=o(" (ALBERT model)"),ypr=l(),qF=a("li"),Q4e=a("strong"),xpr=o("bart"),$pr=o(" \u2014 "),DQ=a("a"),kpr=o("TFBartModel"),Spr=o(" (BART model)"),Rpr=l(),jF=a("li"),H4e=a("strong"),Ppr=o("bert"),Bpr=o(" \u2014 "),GQ=a("a"),Ipr=o("TFBertModel"),Npr=o(" (BERT model)"),qpr=l(),DF=a("li"),U4e=a("strong"),jpr=o("blenderbot"),Dpr=o(" \u2014 "),OQ=a("a"),Gpr=o("TFBlenderbotModel"),Opr=o(" (Blenderbot model)"),Vpr=l(),GF=a("li"),J4e=a("strong"),Xpr=o("blenderbot-small"),zpr=o(" \u2014 "),VQ=a("a"),Wpr=o("TFBlenderbotSmallModel"),Qpr=o(" (BlenderbotSmall model)"),Hpr=l(),OF=a("li"),Y4e=a("strong"),Upr=o("camembert"),Jpr=o(" \u2014 "),XQ=a("a"),Ypr=o("TFCamembertModel"),Kpr=o(" (CamemBERT model)"),Zpr=l(),VF=a("li"),K4e=a("strong"),eur=o("clip"),our=o(" \u2014 "),zQ=a("a"),rur=o("TFCLIPModel"),tur=o(" (CLIP model)"),aur=l(),XF=a("li"),Z4e=a("strong"),nur=o("convbert"),sur=o(" \u2014 "),WQ=a("a"),lur=o("TFConvBertModel"),iur=o(" (ConvBERT model)"),dur=l(),zF=a("li"),e5e=a("strong"),cur=o("convnext"),fur=o(" \u2014 "),QQ=a("a"),mur=o("TFConvNextModel"),gur=o(" (ConvNeXT model)"),hur=l(),WF=a("li"),o5e=a("strong"),pur=o("ctrl"),uur=o(" \u2014 "),HQ=a("a"),_ur=o("TFCTRLModel"),bur=o(" (CTRL model)"),vur=l(),QF=a("li"),r5e=a("strong"),Fur=o("data2vec-vision"),Tur=o(" \u2014 "),UQ=a("a"),Mur=o("TFData2VecVisionModel"),Eur=o(" (Data2VecVision model)"),Cur=l(),HF=a("li"),t5e=a("strong"),wur=o("deberta"),Aur=o(" \u2014 "),JQ=a("a"),Lur=o("TFDebertaModel"),yur=o(" (DeBERTa model)"),xur=l(),UF=a("li"),a5e=a("strong"),$ur=o("deberta-v2"),kur=o(" \u2014 "),YQ=a("a"),Sur=o("TFDebertaV2Model"),Rur=o(" (DeBERTa-v2 model)"),Pur=l(),JF=a("li"),n5e=a("strong"),Bur=o("distilbert"),Iur=o(" \u2014 "),KQ=a("a"),Nur=o("TFDistilBertModel"),qur=o(" (DistilBERT model)"),jur=l(),YF=a("li"),s5e=a("strong"),Dur=o("dpr"),Gur=o(" \u2014 "),ZQ=a("a"),Our=o("TFDPRQuestionEncoder"),Vur=o(" (DPR model)"),Xur=l(),KF=a("li"),l5e=a("strong"),zur=o("electra"),Wur=o(" \u2014 "),eH=a("a"),Qur=o("TFElectraModel"),Hur=o(" (ELECTRA model)"),Uur=l(),ZF=a("li"),i5e=a("strong"),Jur=o("flaubert"),Yur=o(" \u2014 "),oH=a("a"),Kur=o("TFFlaubertModel"),Zur=o(" (FlauBERT model)"),e_r=l(),Xs=a("li"),d5e=a("strong"),o_r=o("funnel"),r_r=o(" \u2014 "),rH=a("a"),t_r=o("TFFunnelModel"),a_r=o(" or "),tH=a("a"),n_r=o("TFFunnelBaseModel"),s_r=o(" (Funnel Transformer model)"),l_r=l(),e6=a("li"),c5e=a("strong"),i_r=o("gpt2"),d_r=o(" \u2014 "),aH=a("a"),c_r=o("TFGPT2Model"),f_r=o(" (OpenAI GPT-2 model)"),m_r=l(),o6=a("li"),f5e=a("strong"),g_r=o("gptj"),h_r=o(" \u2014 "),nH=a("a"),p_r=o("TFGPTJModel"),u_r=o(" (GPT-J model)"),__r=l(),r6=a("li"),m5e=a("strong"),b_r=o("hubert"),v_r=o(" \u2014 "),sH=a("a"),F_r=o("TFHubertModel"),T_r=o(" (Hubert model)"),M_r=l(),t6=a("li"),g5e=a("strong"),E_r=o("layoutlm"),C_r=o(" \u2014 "),lH=a("a"),w_r=o("TFLayoutLMModel"),A_r=o(" (LayoutLM model)"),L_r=l(),a6=a("li"),h5e=a("strong"),y_r=o("led"),x_r=o(" \u2014 "),iH=a("a"),$_r=o("TFLEDModel"),k_r=o(" (LED model)"),S_r=l(),n6=a("li"),p5e=a("strong"),R_r=o("longformer"),P_r=o(" \u2014 "),dH=a("a"),B_r=o("TFLongformerModel"),I_r=o(" (Longformer model)"),N_r=l(),s6=a("li"),u5e=a("strong"),q_r=o("lxmert"),j_r=o(" \u2014 "),cH=a("a"),D_r=o("TFLxmertModel"),G_r=o(" (LXMERT model)"),O_r=l(),l6=a("li"),_5e=a("strong"),V_r=o("marian"),X_r=o(" \u2014 "),fH=a("a"),z_r=o("TFMarianModel"),W_r=o(" (Marian model)"),Q_r=l(),i6=a("li"),b5e=a("strong"),H_r=o("mbart"),U_r=o(" \u2014 "),mH=a("a"),J_r=o("TFMBartModel"),Y_r=o(" (mBART model)"),K_r=l(),d6=a("li"),v5e=a("strong"),Z_r=o("mobilebert"),e1r=o(" \u2014 "),gH=a("a"),o1r=o("TFMobileBertModel"),r1r=o(" (MobileBERT model)"),t1r=l(),c6=a("li"),F5e=a("strong"),a1r=o("mpnet"),n1r=o(" \u2014 "),hH=a("a"),s1r=o("TFMPNetModel"),l1r=o(" (MPNet model)"),i1r=l(),f6=a("li"),T5e=a("strong"),d1r=o("mt5"),c1r=o(" \u2014 "),pH=a("a"),f1r=o("TFMT5Model"),m1r=o(" (MT5 model)"),g1r=l(),m6=a("li"),M5e=a("strong"),h1r=o("openai-gpt"),p1r=o(" \u2014 "),uH=a("a"),u1r=o("TFOpenAIGPTModel"),_1r=o(" (OpenAI GPT model)"),b1r=l(),g6=a("li"),E5e=a("strong"),v1r=o("opt"),F1r=o(" \u2014 "),_H=a("a"),T1r=o("TFOPTModel"),M1r=o(" (OPT model)"),E1r=l(),h6=a("li"),C5e=a("strong"),C1r=o("pegasus"),w1r=o(" \u2014 "),bH=a("a"),A1r=o("TFPegasusModel"),L1r=o(" (Pegasus model)"),y1r=l(),p6=a("li"),w5e=a("strong"),x1r=o("rembert"),$1r=o(" \u2014 "),vH=a("a"),k1r=o("TFRemBertModel"),S1r=o(" (RemBERT model)"),R1r=l(),u6=a("li"),A5e=a("strong"),P1r=o("roberta"),B1r=o(" \u2014 "),FH=a("a"),I1r=o("TFRobertaModel"),N1r=o(" (RoBERTa model)"),q1r=l(),_6=a("li"),L5e=a("strong"),j1r=o("roformer"),D1r=o(" \u2014 "),TH=a("a"),G1r=o("TFRoFormerModel"),O1r=o(" (RoFormer model)"),V1r=l(),b6=a("li"),y5e=a("strong"),X1r=o("speech_to_text"),z1r=o(" \u2014 "),MH=a("a"),W1r=o("TFSpeech2TextModel"),Q1r=o(" (Speech2Text model)"),H1r=l(),v6=a("li"),x5e=a("strong"),U1r=o("swin"),J1r=o(" \u2014 "),EH=a("a"),Y1r=o("TFSwinModel"),K1r=o(" (Swin Transformer model)"),Z1r=l(),F6=a("li"),$5e=a("strong"),e2r=o("t5"),o2r=o(" \u2014 "),CH=a("a"),r2r=o("TFT5Model"),t2r=o(" (T5 model)"),a2r=l(),T6=a("li"),k5e=a("strong"),n2r=o("tapas"),s2r=o(" \u2014 "),wH=a("a"),l2r=o("TFTapasModel"),i2r=o(" (TAPAS model)"),d2r=l(),M6=a("li"),S5e=a("strong"),c2r=o("transfo-xl"),f2r=o(" \u2014 "),AH=a("a"),m2r=o("TFTransfoXLModel"),g2r=o(" (Transformer-XL model)"),h2r=l(),E6=a("li"),R5e=a("strong"),p2r=o("vit"),u2r=o(" \u2014 "),LH=a("a"),_2r=o("TFViTModel"),b2r=o(" (ViT model)"),v2r=l(),C6=a("li"),P5e=a("strong"),F2r=o("vit_mae"),T2r=o(" \u2014 "),yH=a("a"),M2r=o("TFViTMAEModel"),E2r=o(" (ViTMAE model)"),C2r=l(),w6=a("li"),B5e=a("strong"),w2r=o("wav2vec2"),A2r=o(" \u2014 "),xH=a("a"),L2r=o("TFWav2Vec2Model"),y2r=o(" (Wav2Vec2 model)"),x2r=l(),A6=a("li"),I5e=a("strong"),$2r=o("xglm"),k2r=o(" \u2014 "),$H=a("a"),S2r=o("TFXGLMModel"),R2r=o(" (XGLM model)"),P2r=l(),L6=a("li"),N5e=a("strong"),B2r=o("xlm"),I2r=o(" \u2014 "),kH=a("a"),N2r=o("TFXLMModel"),q2r=o(" (XLM model)"),j2r=l(),y6=a("li"),q5e=a("strong"),D2r=o("xlm-roberta"),G2r=o(" \u2014 "),SH=a("a"),O2r=o("TFXLMRobertaModel"),V2r=o(" (XLM-RoBERTa model)"),X2r=l(),x6=a("li"),j5e=a("strong"),z2r=o("xlnet"),W2r=o(" \u2014 "),RH=a("a"),Q2r=o("TFXLNetModel"),H2r=o(" (XLNet model)"),U2r=l(),F($6.$$.fragment),pOe=l(),rc=a("h2"),k6=a("a"),D5e=a("span"),F(m9.$$.fragment),J2r=l(),G5e=a("span"),Y2r=o("TFAutoModelForPreTraining"),uOe=l(),er=a("div"),F(g9.$$.fragment),K2r=l(),tc=a("p"),Z2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),PH=a("a"),ebr=o("from_pretrained()"),obr=o(" class method or the "),BH=a("a"),rbr=o("from_config()"),tbr=o(` class
method.`),abr=l(),h9=a("p"),nbr=o("This class cannot be instantiated directly using "),O5e=a("code"),sbr=o("__init__()"),lbr=o(" (throws an error)."),ibr=l(),kt=a("div"),F(p9.$$.fragment),dbr=l(),V5e=a("p"),cbr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),fbr=l(),ac=a("p"),mbr=o(`Note:
Loading a model from its configuration file does `),X5e=a("strong"),gbr=o("not"),hbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IH=a("a"),pbr=o("from_pretrained()"),ubr=o(" to load the model weights."),_br=l(),F(S6.$$.fragment),bbr=l(),yr=a("div"),F(u9.$$.fragment),vbr=l(),z5e=a("p"),Fbr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Tbr=l(),an=a("p"),Mbr=o("The model class to instantiate is selected based on the "),W5e=a("code"),Ebr=o("model_type"),Cbr=o(` property of the config object (either
passed as an argument or loaded from `),Q5e=a("code"),wbr=o("pretrained_model_name_or_path"),Abr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H5e=a("code"),Lbr=o("pretrained_model_name_or_path"),ybr=o(":"),xbr=l(),se=a("ul"),R6=a("li"),U5e=a("strong"),$br=o("albert"),kbr=o(" \u2014 "),NH=a("a"),Sbr=o("TFAlbertForPreTraining"),Rbr=o(" (ALBERT model)"),Pbr=l(),P6=a("li"),J5e=a("strong"),Bbr=o("bart"),Ibr=o(" \u2014 "),qH=a("a"),Nbr=o("TFBartForConditionalGeneration"),qbr=o(" (BART model)"),jbr=l(),B6=a("li"),Y5e=a("strong"),Dbr=o("bert"),Gbr=o(" \u2014 "),jH=a("a"),Obr=o("TFBertForPreTraining"),Vbr=o(" (BERT model)"),Xbr=l(),I6=a("li"),K5e=a("strong"),zbr=o("camembert"),Wbr=o(" \u2014 "),DH=a("a"),Qbr=o("TFCamembertForMaskedLM"),Hbr=o(" (CamemBERT model)"),Ubr=l(),N6=a("li"),Z5e=a("strong"),Jbr=o("ctrl"),Ybr=o(" \u2014 "),GH=a("a"),Kbr=o("TFCTRLLMHeadModel"),Zbr=o(" (CTRL model)"),e4r=l(),q6=a("li"),eve=a("strong"),o4r=o("distilbert"),r4r=o(" \u2014 "),OH=a("a"),t4r=o("TFDistilBertForMaskedLM"),a4r=o(" (DistilBERT model)"),n4r=l(),j6=a("li"),ove=a("strong"),s4r=o("electra"),l4r=o(" \u2014 "),VH=a("a"),i4r=o("TFElectraForPreTraining"),d4r=o(" (ELECTRA model)"),c4r=l(),D6=a("li"),rve=a("strong"),f4r=o("flaubert"),m4r=o(" \u2014 "),XH=a("a"),g4r=o("TFFlaubertWithLMHeadModel"),h4r=o(" (FlauBERT model)"),p4r=l(),G6=a("li"),tve=a("strong"),u4r=o("funnel"),_4r=o(" \u2014 "),zH=a("a"),b4r=o("TFFunnelForPreTraining"),v4r=o(" (Funnel Transformer model)"),F4r=l(),O6=a("li"),ave=a("strong"),T4r=o("gpt2"),M4r=o(" \u2014 "),WH=a("a"),E4r=o("TFGPT2LMHeadModel"),C4r=o(" (OpenAI GPT-2 model)"),w4r=l(),V6=a("li"),nve=a("strong"),A4r=o("layoutlm"),L4r=o(" \u2014 "),QH=a("a"),y4r=o("TFLayoutLMForMaskedLM"),x4r=o(" (LayoutLM model)"),$4r=l(),X6=a("li"),sve=a("strong"),k4r=o("lxmert"),S4r=o(" \u2014 "),HH=a("a"),R4r=o("TFLxmertForPreTraining"),P4r=o(" (LXMERT model)"),B4r=l(),z6=a("li"),lve=a("strong"),I4r=o("mobilebert"),N4r=o(" \u2014 "),UH=a("a"),q4r=o("TFMobileBertForPreTraining"),j4r=o(" (MobileBERT model)"),D4r=l(),W6=a("li"),ive=a("strong"),G4r=o("mpnet"),O4r=o(" \u2014 "),JH=a("a"),V4r=o("TFMPNetForMaskedLM"),X4r=o(" (MPNet model)"),z4r=l(),Q6=a("li"),dve=a("strong"),W4r=o("openai-gpt"),Q4r=o(" \u2014 "),YH=a("a"),H4r=o("TFOpenAIGPTLMHeadModel"),U4r=o(" (OpenAI GPT model)"),J4r=l(),H6=a("li"),cve=a("strong"),Y4r=o("roberta"),K4r=o(" \u2014 "),KH=a("a"),Z4r=o("TFRobertaForMaskedLM"),e5r=o(" (RoBERTa model)"),o5r=l(),U6=a("li"),fve=a("strong"),r5r=o("t5"),t5r=o(" \u2014 "),ZH=a("a"),a5r=o("TFT5ForConditionalGeneration"),n5r=o(" (T5 model)"),s5r=l(),J6=a("li"),mve=a("strong"),l5r=o("tapas"),i5r=o(" \u2014 "),eU=a("a"),d5r=o("TFTapasForMaskedLM"),c5r=o(" (TAPAS model)"),f5r=l(),Y6=a("li"),gve=a("strong"),m5r=o("transfo-xl"),g5r=o(" \u2014 "),oU=a("a"),h5r=o("TFTransfoXLLMHeadModel"),p5r=o(" (Transformer-XL model)"),u5r=l(),K6=a("li"),hve=a("strong"),_5r=o("vit_mae"),b5r=o(" \u2014 "),rU=a("a"),v5r=o("TFViTMAEForPreTraining"),F5r=o(" (ViTMAE model)"),T5r=l(),Z6=a("li"),pve=a("strong"),M5r=o("xlm"),E5r=o(" \u2014 "),tU=a("a"),C5r=o("TFXLMWithLMHeadModel"),w5r=o(" (XLM model)"),A5r=l(),eT=a("li"),uve=a("strong"),L5r=o("xlm-roberta"),y5r=o(" \u2014 "),aU=a("a"),x5r=o("TFXLMRobertaForMaskedLM"),$5r=o(" (XLM-RoBERTa model)"),k5r=l(),oT=a("li"),_ve=a("strong"),S5r=o("xlnet"),R5r=o(" \u2014 "),nU=a("a"),P5r=o("TFXLNetLMHeadModel"),B5r=o(" (XLNet model)"),I5r=l(),F(rT.$$.fragment),_Oe=l(),nc=a("h2"),tT=a("a"),bve=a("span"),F(_9.$$.fragment),N5r=l(),vve=a("span"),q5r=o("TFAutoModelForCausalLM"),bOe=l(),or=a("div"),F(b9.$$.fragment),j5r=l(),sc=a("p"),D5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),sU=a("a"),G5r=o("from_pretrained()"),O5r=o(" class method or the "),lU=a("a"),V5r=o("from_config()"),X5r=o(` class
method.`),z5r=l(),v9=a("p"),W5r=o("This class cannot be instantiated directly using "),Fve=a("code"),Q5r=o("__init__()"),H5r=o(" (throws an error)."),U5r=l(),St=a("div"),F(F9.$$.fragment),J5r=l(),Tve=a("p"),Y5r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),K5r=l(),lc=a("p"),Z5r=o(`Note:
Loading a model from its configuration file does `),Mve=a("strong"),evr=o("not"),ovr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iU=a("a"),rvr=o("from_pretrained()"),tvr=o(" to load the model weights."),avr=l(),F(aT.$$.fragment),nvr=l(),xr=a("div"),F(T9.$$.fragment),svr=l(),Eve=a("p"),lvr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),ivr=l(),nn=a("p"),dvr=o("The model class to instantiate is selected based on the "),Cve=a("code"),cvr=o("model_type"),fvr=o(` property of the config object (either
passed as an argument or loaded from `),wve=a("code"),mvr=o("pretrained_model_name_or_path"),gvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ave=a("code"),hvr=o("pretrained_model_name_or_path"),pvr=o(":"),uvr=l(),Te=a("ul"),nT=a("li"),Lve=a("strong"),_vr=o("bert"),bvr=o(" \u2014 "),dU=a("a"),vvr=o("TFBertLMHeadModel"),Fvr=o(" (BERT model)"),Tvr=l(),sT=a("li"),yve=a("strong"),Mvr=o("camembert"),Evr=o(" \u2014 "),cU=a("a"),Cvr=o("TFCamembertForCausalLM"),wvr=o(" (CamemBERT model)"),Avr=l(),lT=a("li"),xve=a("strong"),Lvr=o("ctrl"),yvr=o(" \u2014 "),fU=a("a"),xvr=o("TFCTRLLMHeadModel"),$vr=o(" (CTRL model)"),kvr=l(),iT=a("li"),$ve=a("strong"),Svr=o("gpt2"),Rvr=o(" \u2014 "),mU=a("a"),Pvr=o("TFGPT2LMHeadModel"),Bvr=o(" (OpenAI GPT-2 model)"),Ivr=l(),dT=a("li"),kve=a("strong"),Nvr=o("gptj"),qvr=o(" \u2014 "),gU=a("a"),jvr=o("TFGPTJForCausalLM"),Dvr=o(" (GPT-J model)"),Gvr=l(),cT=a("li"),Sve=a("strong"),Ovr=o("openai-gpt"),Vvr=o(" \u2014 "),hU=a("a"),Xvr=o("TFOpenAIGPTLMHeadModel"),zvr=o(" (OpenAI GPT model)"),Wvr=l(),fT=a("li"),Rve=a("strong"),Qvr=o("opt"),Hvr=o(" \u2014 "),pU=a("a"),Uvr=o("TFOPTForCausalLM"),Jvr=o(" (OPT model)"),Yvr=l(),mT=a("li"),Pve=a("strong"),Kvr=o("rembert"),Zvr=o(" \u2014 "),uU=a("a"),e3r=o("TFRemBertForCausalLM"),o3r=o(" (RemBERT model)"),r3r=l(),gT=a("li"),Bve=a("strong"),t3r=o("roberta"),a3r=o(" \u2014 "),_U=a("a"),n3r=o("TFRobertaForCausalLM"),s3r=o(" (RoBERTa model)"),l3r=l(),hT=a("li"),Ive=a("strong"),i3r=o("roformer"),d3r=o(" \u2014 "),bU=a("a"),c3r=o("TFRoFormerForCausalLM"),f3r=o(" (RoFormer model)"),m3r=l(),pT=a("li"),Nve=a("strong"),g3r=o("transfo-xl"),h3r=o(" \u2014 "),vU=a("a"),p3r=o("TFTransfoXLLMHeadModel"),u3r=o(" (Transformer-XL model)"),_3r=l(),uT=a("li"),qve=a("strong"),b3r=o("xglm"),v3r=o(" \u2014 "),FU=a("a"),F3r=o("TFXGLMForCausalLM"),T3r=o(" (XGLM model)"),M3r=l(),_T=a("li"),jve=a("strong"),E3r=o("xlm"),C3r=o(" \u2014 "),TU=a("a"),w3r=o("TFXLMWithLMHeadModel"),A3r=o(" (XLM model)"),L3r=l(),bT=a("li"),Dve=a("strong"),y3r=o("xlnet"),x3r=o(" \u2014 "),MU=a("a"),$3r=o("TFXLNetLMHeadModel"),k3r=o(" (XLNet model)"),S3r=l(),F(vT.$$.fragment),vOe=l(),ic=a("h2"),FT=a("a"),Gve=a("span"),F(M9.$$.fragment),R3r=l(),Ove=a("span"),P3r=o("TFAutoModelForImageClassification"),FOe=l(),rr=a("div"),F(E9.$$.fragment),B3r=l(),dc=a("p"),I3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),EU=a("a"),N3r=o("from_pretrained()"),q3r=o(" class method or the "),CU=a("a"),j3r=o("from_config()"),D3r=o(` class
method.`),G3r=l(),C9=a("p"),O3r=o("This class cannot be instantiated directly using "),Vve=a("code"),V3r=o("__init__()"),X3r=o(" (throws an error)."),z3r=l(),Rt=a("div"),F(w9.$$.fragment),W3r=l(),Xve=a("p"),Q3r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),H3r=l(),cc=a("p"),U3r=o(`Note:
Loading a model from its configuration file does `),zve=a("strong"),J3r=o("not"),Y3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wU=a("a"),K3r=o("from_pretrained()"),Z3r=o(" to load the model weights."),eFr=l(),F(TT.$$.fragment),oFr=l(),$r=a("div"),F(A9.$$.fragment),rFr=l(),Wve=a("p"),tFr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),aFr=l(),sn=a("p"),nFr=o("The model class to instantiate is selected based on the "),Qve=a("code"),sFr=o("model_type"),lFr=o(` property of the config object (either
passed as an argument or loaded from `),Hve=a("code"),iFr=o("pretrained_model_name_or_path"),dFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uve=a("code"),cFr=o("pretrained_model_name_or_path"),fFr=o(":"),mFr=l(),ln=a("ul"),MT=a("li"),Jve=a("strong"),gFr=o("convnext"),hFr=o(" \u2014 "),AU=a("a"),pFr=o("TFConvNextForImageClassification"),uFr=o(" (ConvNeXT model)"),_Fr=l(),ET=a("li"),Yve=a("strong"),bFr=o("data2vec-vision"),vFr=o(" \u2014 "),LU=a("a"),FFr=o("TFData2VecVisionForImageClassification"),TFr=o(" (Data2VecVision model)"),MFr=l(),CT=a("li"),Kve=a("strong"),EFr=o("swin"),CFr=o(" \u2014 "),yU=a("a"),wFr=o("TFSwinForImageClassification"),AFr=o(" (Swin Transformer model)"),LFr=l(),wT=a("li"),Zve=a("strong"),yFr=o("vit"),xFr=o(" \u2014 "),xU=a("a"),$Fr=o("TFViTForImageClassification"),kFr=o(" (ViT model)"),SFr=l(),F(AT.$$.fragment),TOe=l(),fc=a("h2"),LT=a("a"),e3e=a("span"),F(L9.$$.fragment),RFr=l(),o3e=a("span"),PFr=o("TFAutoModelForMaskedLM"),MOe=l(),tr=a("div"),F(y9.$$.fragment),BFr=l(),mc=a("p"),IFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),$U=a("a"),NFr=o("from_pretrained()"),qFr=o(" class method or the "),kU=a("a"),jFr=o("from_config()"),DFr=o(` class
method.`),GFr=l(),x9=a("p"),OFr=o("This class cannot be instantiated directly using "),r3e=a("code"),VFr=o("__init__()"),XFr=o(" (throws an error)."),zFr=l(),Pt=a("div"),F($9.$$.fragment),WFr=l(),t3e=a("p"),QFr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),HFr=l(),gc=a("p"),UFr=o(`Note:
Loading a model from its configuration file does `),a3e=a("strong"),JFr=o("not"),YFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SU=a("a"),KFr=o("from_pretrained()"),ZFr=o(" to load the model weights."),e6r=l(),F(yT.$$.fragment),o6r=l(),kr=a("div"),F(k9.$$.fragment),r6r=l(),n3e=a("p"),t6r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),a6r=l(),dn=a("p"),n6r=o("The model class to instantiate is selected based on the "),s3e=a("code"),s6r=o("model_type"),l6r=o(` property of the config object (either
passed as an argument or loaded from `),l3e=a("code"),i6r=o("pretrained_model_name_or_path"),d6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i3e=a("code"),c6r=o("pretrained_model_name_or_path"),f6r=o(":"),m6r=l(),ie=a("ul"),xT=a("li"),d3e=a("strong"),g6r=o("albert"),h6r=o(" \u2014 "),RU=a("a"),p6r=o("TFAlbertForMaskedLM"),u6r=o(" (ALBERT model)"),_6r=l(),$T=a("li"),c3e=a("strong"),b6r=o("bert"),v6r=o(" \u2014 "),PU=a("a"),F6r=o("TFBertForMaskedLM"),T6r=o(" (BERT model)"),M6r=l(),kT=a("li"),f3e=a("strong"),E6r=o("camembert"),C6r=o(" \u2014 "),BU=a("a"),w6r=o("TFCamembertForMaskedLM"),A6r=o(" (CamemBERT model)"),L6r=l(),ST=a("li"),m3e=a("strong"),y6r=o("convbert"),x6r=o(" \u2014 "),IU=a("a"),$6r=o("TFConvBertForMaskedLM"),k6r=o(" (ConvBERT model)"),S6r=l(),RT=a("li"),g3e=a("strong"),R6r=o("deberta"),P6r=o(" \u2014 "),NU=a("a"),B6r=o("TFDebertaForMaskedLM"),I6r=o(" (DeBERTa model)"),N6r=l(),PT=a("li"),h3e=a("strong"),q6r=o("deberta-v2"),j6r=o(" \u2014 "),qU=a("a"),D6r=o("TFDebertaV2ForMaskedLM"),G6r=o(" (DeBERTa-v2 model)"),O6r=l(),BT=a("li"),p3e=a("strong"),V6r=o("distilbert"),X6r=o(" \u2014 "),jU=a("a"),z6r=o("TFDistilBertForMaskedLM"),W6r=o(" (DistilBERT model)"),Q6r=l(),IT=a("li"),u3e=a("strong"),H6r=o("electra"),U6r=o(" \u2014 "),DU=a("a"),J6r=o("TFElectraForMaskedLM"),Y6r=o(" (ELECTRA model)"),K6r=l(),NT=a("li"),_3e=a("strong"),Z6r=o("flaubert"),eTr=o(" \u2014 "),GU=a("a"),oTr=o("TFFlaubertWithLMHeadModel"),rTr=o(" (FlauBERT model)"),tTr=l(),qT=a("li"),b3e=a("strong"),aTr=o("funnel"),nTr=o(" \u2014 "),OU=a("a"),sTr=o("TFFunnelForMaskedLM"),lTr=o(" (Funnel Transformer model)"),iTr=l(),jT=a("li"),v3e=a("strong"),dTr=o("layoutlm"),cTr=o(" \u2014 "),VU=a("a"),fTr=o("TFLayoutLMForMaskedLM"),mTr=o(" (LayoutLM model)"),gTr=l(),DT=a("li"),F3e=a("strong"),hTr=o("longformer"),pTr=o(" \u2014 "),XU=a("a"),uTr=o("TFLongformerForMaskedLM"),_Tr=o(" (Longformer model)"),bTr=l(),GT=a("li"),T3e=a("strong"),vTr=o("mobilebert"),FTr=o(" \u2014 "),zU=a("a"),TTr=o("TFMobileBertForMaskedLM"),MTr=o(" (MobileBERT model)"),ETr=l(),OT=a("li"),M3e=a("strong"),CTr=o("mpnet"),wTr=o(" \u2014 "),WU=a("a"),ATr=o("TFMPNetForMaskedLM"),LTr=o(" (MPNet model)"),yTr=l(),VT=a("li"),E3e=a("strong"),xTr=o("rembert"),$Tr=o(" \u2014 "),QU=a("a"),kTr=o("TFRemBertForMaskedLM"),STr=o(" (RemBERT model)"),RTr=l(),XT=a("li"),C3e=a("strong"),PTr=o("roberta"),BTr=o(" \u2014 "),HU=a("a"),ITr=o("TFRobertaForMaskedLM"),NTr=o(" (RoBERTa model)"),qTr=l(),zT=a("li"),w3e=a("strong"),jTr=o("roformer"),DTr=o(" \u2014 "),UU=a("a"),GTr=o("TFRoFormerForMaskedLM"),OTr=o(" (RoFormer model)"),VTr=l(),WT=a("li"),A3e=a("strong"),XTr=o("tapas"),zTr=o(" \u2014 "),JU=a("a"),WTr=o("TFTapasForMaskedLM"),QTr=o(" (TAPAS model)"),HTr=l(),QT=a("li"),L3e=a("strong"),UTr=o("xlm"),JTr=o(" \u2014 "),YU=a("a"),YTr=o("TFXLMWithLMHeadModel"),KTr=o(" (XLM model)"),ZTr=l(),HT=a("li"),y3e=a("strong"),eMr=o("xlm-roberta"),oMr=o(" \u2014 "),KU=a("a"),rMr=o("TFXLMRobertaForMaskedLM"),tMr=o(" (XLM-RoBERTa model)"),aMr=l(),F(UT.$$.fragment),EOe=l(),hc=a("h2"),JT=a("a"),x3e=a("span"),F(S9.$$.fragment),nMr=l(),$3e=a("span"),sMr=o("TFAutoModelForSeq2SeqLM"),COe=l(),ar=a("div"),F(R9.$$.fragment),lMr=l(),pc=a("p"),iMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),ZU=a("a"),dMr=o("from_pretrained()"),cMr=o(" class method or the "),eJ=a("a"),fMr=o("from_config()"),mMr=o(` class
method.`),gMr=l(),P9=a("p"),hMr=o("This class cannot be instantiated directly using "),k3e=a("code"),pMr=o("__init__()"),uMr=o(" (throws an error)."),_Mr=l(),Bt=a("div"),F(B9.$$.fragment),bMr=l(),S3e=a("p"),vMr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),FMr=l(),uc=a("p"),TMr=o(`Note:
Loading a model from its configuration file does `),R3e=a("strong"),MMr=o("not"),EMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oJ=a("a"),CMr=o("from_pretrained()"),wMr=o(" to load the model weights."),AMr=l(),F(YT.$$.fragment),LMr=l(),Sr=a("div"),F(I9.$$.fragment),yMr=l(),P3e=a("p"),xMr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),$Mr=l(),cn=a("p"),kMr=o("The model class to instantiate is selected based on the "),B3e=a("code"),SMr=o("model_type"),RMr=o(` property of the config object (either
passed as an argument or loaded from `),I3e=a("code"),PMr=o("pretrained_model_name_or_path"),BMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N3e=a("code"),IMr=o("pretrained_model_name_or_path"),NMr=o(":"),qMr=l(),ye=a("ul"),KT=a("li"),q3e=a("strong"),jMr=o("bart"),DMr=o(" \u2014 "),rJ=a("a"),GMr=o("TFBartForConditionalGeneration"),OMr=o(" (BART model)"),VMr=l(),ZT=a("li"),j3e=a("strong"),XMr=o("blenderbot"),zMr=o(" \u2014 "),tJ=a("a"),WMr=o("TFBlenderbotForConditionalGeneration"),QMr=o(" (Blenderbot model)"),HMr=l(),eM=a("li"),D3e=a("strong"),UMr=o("blenderbot-small"),JMr=o(" \u2014 "),aJ=a("a"),YMr=o("TFBlenderbotSmallForConditionalGeneration"),KMr=o(" (BlenderbotSmall model)"),ZMr=l(),oM=a("li"),G3e=a("strong"),eEr=o("encoder-decoder"),oEr=o(" \u2014 "),nJ=a("a"),rEr=o("TFEncoderDecoderModel"),tEr=o(" (Encoder decoder model)"),aEr=l(),rM=a("li"),O3e=a("strong"),nEr=o("led"),sEr=o(" \u2014 "),sJ=a("a"),lEr=o("TFLEDForConditionalGeneration"),iEr=o(" (LED model)"),dEr=l(),tM=a("li"),V3e=a("strong"),cEr=o("marian"),fEr=o(" \u2014 "),lJ=a("a"),mEr=o("TFMarianMTModel"),gEr=o(" (Marian model)"),hEr=l(),aM=a("li"),X3e=a("strong"),pEr=o("mbart"),uEr=o(" \u2014 "),iJ=a("a"),_Er=o("TFMBartForConditionalGeneration"),bEr=o(" (mBART model)"),vEr=l(),nM=a("li"),z3e=a("strong"),FEr=o("mt5"),TEr=o(" \u2014 "),dJ=a("a"),MEr=o("TFMT5ForConditionalGeneration"),EEr=o(" (MT5 model)"),CEr=l(),sM=a("li"),W3e=a("strong"),wEr=o("pegasus"),AEr=o(" \u2014 "),cJ=a("a"),LEr=o("TFPegasusForConditionalGeneration"),yEr=o(" (Pegasus model)"),xEr=l(),lM=a("li"),Q3e=a("strong"),$Er=o("t5"),kEr=o(" \u2014 "),fJ=a("a"),SEr=o("TFT5ForConditionalGeneration"),REr=o(" (T5 model)"),PEr=l(),F(iM.$$.fragment),wOe=l(),_c=a("h2"),dM=a("a"),H3e=a("span"),F(N9.$$.fragment),BEr=l(),U3e=a("span"),IEr=o("TFAutoModelForSequenceClassification"),AOe=l(),nr=a("div"),F(q9.$$.fragment),NEr=l(),bc=a("p"),qEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),mJ=a("a"),jEr=o("from_pretrained()"),DEr=o(" class method or the "),gJ=a("a"),GEr=o("from_config()"),OEr=o(` class
method.`),VEr=l(),j9=a("p"),XEr=o("This class cannot be instantiated directly using "),J3e=a("code"),zEr=o("__init__()"),WEr=o(" (throws an error)."),QEr=l(),It=a("div"),F(D9.$$.fragment),HEr=l(),Y3e=a("p"),UEr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),JEr=l(),vc=a("p"),YEr=o(`Note:
Loading a model from its configuration file does `),K3e=a("strong"),KEr=o("not"),ZEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hJ=a("a"),eCr=o("from_pretrained()"),oCr=o(" to load the model weights."),rCr=l(),F(cM.$$.fragment),tCr=l(),Rr=a("div"),F(G9.$$.fragment),aCr=l(),Z3e=a("p"),nCr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),sCr=l(),fn=a("p"),lCr=o("The model class to instantiate is selected based on the "),eFe=a("code"),iCr=o("model_type"),dCr=o(` property of the config object (either
passed as an argument or loaded from `),oFe=a("code"),cCr=o("pretrained_model_name_or_path"),fCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rFe=a("code"),mCr=o("pretrained_model_name_or_path"),gCr=o(":"),hCr=l(),te=a("ul"),fM=a("li"),tFe=a("strong"),pCr=o("albert"),uCr=o(" \u2014 "),pJ=a("a"),_Cr=o("TFAlbertForSequenceClassification"),bCr=o(" (ALBERT model)"),vCr=l(),mM=a("li"),aFe=a("strong"),FCr=o("bert"),TCr=o(" \u2014 "),uJ=a("a"),MCr=o("TFBertForSequenceClassification"),ECr=o(" (BERT model)"),CCr=l(),gM=a("li"),nFe=a("strong"),wCr=o("camembert"),ACr=o(" \u2014 "),_J=a("a"),LCr=o("TFCamembertForSequenceClassification"),yCr=o(" (CamemBERT model)"),xCr=l(),hM=a("li"),sFe=a("strong"),$Cr=o("convbert"),kCr=o(" \u2014 "),bJ=a("a"),SCr=o("TFConvBertForSequenceClassification"),RCr=o(" (ConvBERT model)"),PCr=l(),pM=a("li"),lFe=a("strong"),BCr=o("ctrl"),ICr=o(" \u2014 "),vJ=a("a"),NCr=o("TFCTRLForSequenceClassification"),qCr=o(" (CTRL model)"),jCr=l(),uM=a("li"),iFe=a("strong"),DCr=o("deberta"),GCr=o(" \u2014 "),FJ=a("a"),OCr=o("TFDebertaForSequenceClassification"),VCr=o(" (DeBERTa model)"),XCr=l(),_M=a("li"),dFe=a("strong"),zCr=o("deberta-v2"),WCr=o(" \u2014 "),TJ=a("a"),QCr=o("TFDebertaV2ForSequenceClassification"),HCr=o(" (DeBERTa-v2 model)"),UCr=l(),bM=a("li"),cFe=a("strong"),JCr=o("distilbert"),YCr=o(" \u2014 "),MJ=a("a"),KCr=o("TFDistilBertForSequenceClassification"),ZCr=o(" (DistilBERT model)"),e0r=l(),vM=a("li"),fFe=a("strong"),o0r=o("electra"),r0r=o(" \u2014 "),EJ=a("a"),t0r=o("TFElectraForSequenceClassification"),a0r=o(" (ELECTRA model)"),n0r=l(),FM=a("li"),mFe=a("strong"),s0r=o("flaubert"),l0r=o(" \u2014 "),CJ=a("a"),i0r=o("TFFlaubertForSequenceClassification"),d0r=o(" (FlauBERT model)"),c0r=l(),TM=a("li"),gFe=a("strong"),f0r=o("funnel"),m0r=o(" \u2014 "),wJ=a("a"),g0r=o("TFFunnelForSequenceClassification"),h0r=o(" (Funnel Transformer model)"),p0r=l(),MM=a("li"),hFe=a("strong"),u0r=o("gpt2"),_0r=o(" \u2014 "),AJ=a("a"),b0r=o("TFGPT2ForSequenceClassification"),v0r=o(" (OpenAI GPT-2 model)"),F0r=l(),EM=a("li"),pFe=a("strong"),T0r=o("gptj"),M0r=o(" \u2014 "),LJ=a("a"),E0r=o("TFGPTJForSequenceClassification"),C0r=o(" (GPT-J model)"),w0r=l(),CM=a("li"),uFe=a("strong"),A0r=o("layoutlm"),L0r=o(" \u2014 "),yJ=a("a"),y0r=o("TFLayoutLMForSequenceClassification"),x0r=o(" (LayoutLM model)"),$0r=l(),wM=a("li"),_Fe=a("strong"),k0r=o("longformer"),S0r=o(" \u2014 "),xJ=a("a"),R0r=o("TFLongformerForSequenceClassification"),P0r=o(" (Longformer model)"),B0r=l(),AM=a("li"),bFe=a("strong"),I0r=o("mobilebert"),N0r=o(" \u2014 "),$J=a("a"),q0r=o("TFMobileBertForSequenceClassification"),j0r=o(" (MobileBERT model)"),D0r=l(),LM=a("li"),vFe=a("strong"),G0r=o("mpnet"),O0r=o(" \u2014 "),kJ=a("a"),V0r=o("TFMPNetForSequenceClassification"),X0r=o(" (MPNet model)"),z0r=l(),yM=a("li"),FFe=a("strong"),W0r=o("openai-gpt"),Q0r=o(" \u2014 "),SJ=a("a"),H0r=o("TFOpenAIGPTForSequenceClassification"),U0r=o(" (OpenAI GPT model)"),J0r=l(),xM=a("li"),TFe=a("strong"),Y0r=o("rembert"),K0r=o(" \u2014 "),RJ=a("a"),Z0r=o("TFRemBertForSequenceClassification"),ewr=o(" (RemBERT model)"),owr=l(),$M=a("li"),MFe=a("strong"),rwr=o("roberta"),twr=o(" \u2014 "),PJ=a("a"),awr=o("TFRobertaForSequenceClassification"),nwr=o(" (RoBERTa model)"),swr=l(),kM=a("li"),EFe=a("strong"),lwr=o("roformer"),iwr=o(" \u2014 "),BJ=a("a"),dwr=o("TFRoFormerForSequenceClassification"),cwr=o(" (RoFormer model)"),fwr=l(),SM=a("li"),CFe=a("strong"),mwr=o("tapas"),gwr=o(" \u2014 "),IJ=a("a"),hwr=o("TFTapasForSequenceClassification"),pwr=o(" (TAPAS model)"),uwr=l(),RM=a("li"),wFe=a("strong"),_wr=o("transfo-xl"),bwr=o(" \u2014 "),NJ=a("a"),vwr=o("TFTransfoXLForSequenceClassification"),Fwr=o(" (Transformer-XL model)"),Twr=l(),PM=a("li"),AFe=a("strong"),Mwr=o("xlm"),Ewr=o(" \u2014 "),qJ=a("a"),Cwr=o("TFXLMForSequenceClassification"),wwr=o(" (XLM model)"),Awr=l(),BM=a("li"),LFe=a("strong"),Lwr=o("xlm-roberta"),ywr=o(" \u2014 "),jJ=a("a"),xwr=o("TFXLMRobertaForSequenceClassification"),$wr=o(" (XLM-RoBERTa model)"),kwr=l(),IM=a("li"),yFe=a("strong"),Swr=o("xlnet"),Rwr=o(" \u2014 "),DJ=a("a"),Pwr=o("TFXLNetForSequenceClassification"),Bwr=o(" (XLNet model)"),Iwr=l(),F(NM.$$.fragment),LOe=l(),Fc=a("h2"),qM=a("a"),xFe=a("span"),F(O9.$$.fragment),Nwr=l(),$Fe=a("span"),qwr=o("TFAutoModelForMultipleChoice"),yOe=l(),sr=a("div"),F(V9.$$.fragment),jwr=l(),Tc=a("p"),Dwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),GJ=a("a"),Gwr=o("from_pretrained()"),Owr=o(" class method or the "),OJ=a("a"),Vwr=o("from_config()"),Xwr=o(` class
method.`),zwr=l(),X9=a("p"),Wwr=o("This class cannot be instantiated directly using "),kFe=a("code"),Qwr=o("__init__()"),Hwr=o(" (throws an error)."),Uwr=l(),Nt=a("div"),F(z9.$$.fragment),Jwr=l(),SFe=a("p"),Ywr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Kwr=l(),Mc=a("p"),Zwr=o(`Note:
Loading a model from its configuration file does `),RFe=a("strong"),eAr=o("not"),oAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VJ=a("a"),rAr=o("from_pretrained()"),tAr=o(" to load the model weights."),aAr=l(),F(jM.$$.fragment),nAr=l(),Pr=a("div"),F(W9.$$.fragment),sAr=l(),PFe=a("p"),lAr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),iAr=l(),mn=a("p"),dAr=o("The model class to instantiate is selected based on the "),BFe=a("code"),cAr=o("model_type"),fAr=o(` property of the config object (either
passed as an argument or loaded from `),IFe=a("code"),mAr=o("pretrained_model_name_or_path"),gAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NFe=a("code"),hAr=o("pretrained_model_name_or_path"),pAr=o(":"),uAr=l(),ue=a("ul"),DM=a("li"),qFe=a("strong"),_Ar=o("albert"),bAr=o(" \u2014 "),XJ=a("a"),vAr=o("TFAlbertForMultipleChoice"),FAr=o(" (ALBERT model)"),TAr=l(),GM=a("li"),jFe=a("strong"),MAr=o("bert"),EAr=o(" \u2014 "),zJ=a("a"),CAr=o("TFBertForMultipleChoice"),wAr=o(" (BERT model)"),AAr=l(),OM=a("li"),DFe=a("strong"),LAr=o("camembert"),yAr=o(" \u2014 "),WJ=a("a"),xAr=o("TFCamembertForMultipleChoice"),$Ar=o(" (CamemBERT model)"),kAr=l(),VM=a("li"),GFe=a("strong"),SAr=o("convbert"),RAr=o(" \u2014 "),QJ=a("a"),PAr=o("TFConvBertForMultipleChoice"),BAr=o(" (ConvBERT model)"),IAr=l(),XM=a("li"),OFe=a("strong"),NAr=o("distilbert"),qAr=o(" \u2014 "),HJ=a("a"),jAr=o("TFDistilBertForMultipleChoice"),DAr=o(" (DistilBERT model)"),GAr=l(),zM=a("li"),VFe=a("strong"),OAr=o("electra"),VAr=o(" \u2014 "),UJ=a("a"),XAr=o("TFElectraForMultipleChoice"),zAr=o(" (ELECTRA model)"),WAr=l(),WM=a("li"),XFe=a("strong"),QAr=o("flaubert"),HAr=o(" \u2014 "),JJ=a("a"),UAr=o("TFFlaubertForMultipleChoice"),JAr=o(" (FlauBERT model)"),YAr=l(),QM=a("li"),zFe=a("strong"),KAr=o("funnel"),ZAr=o(" \u2014 "),YJ=a("a"),eLr=o("TFFunnelForMultipleChoice"),oLr=o(" (Funnel Transformer model)"),rLr=l(),HM=a("li"),WFe=a("strong"),tLr=o("longformer"),aLr=o(" \u2014 "),KJ=a("a"),nLr=o("TFLongformerForMultipleChoice"),sLr=o(" (Longformer model)"),lLr=l(),UM=a("li"),QFe=a("strong"),iLr=o("mobilebert"),dLr=o(" \u2014 "),ZJ=a("a"),cLr=o("TFMobileBertForMultipleChoice"),fLr=o(" (MobileBERT model)"),mLr=l(),JM=a("li"),HFe=a("strong"),gLr=o("mpnet"),hLr=o(" \u2014 "),eY=a("a"),pLr=o("TFMPNetForMultipleChoice"),uLr=o(" (MPNet model)"),_Lr=l(),YM=a("li"),UFe=a("strong"),bLr=o("rembert"),vLr=o(" \u2014 "),oY=a("a"),FLr=o("TFRemBertForMultipleChoice"),TLr=o(" (RemBERT model)"),MLr=l(),KM=a("li"),JFe=a("strong"),ELr=o("roberta"),CLr=o(" \u2014 "),rY=a("a"),wLr=o("TFRobertaForMultipleChoice"),ALr=o(" (RoBERTa model)"),LLr=l(),ZM=a("li"),YFe=a("strong"),yLr=o("roformer"),xLr=o(" \u2014 "),tY=a("a"),$Lr=o("TFRoFormerForMultipleChoice"),kLr=o(" (RoFormer model)"),SLr=l(),eE=a("li"),KFe=a("strong"),RLr=o("xlm"),PLr=o(" \u2014 "),aY=a("a"),BLr=o("TFXLMForMultipleChoice"),ILr=o(" (XLM model)"),NLr=l(),oE=a("li"),ZFe=a("strong"),qLr=o("xlm-roberta"),jLr=o(" \u2014 "),nY=a("a"),DLr=o("TFXLMRobertaForMultipleChoice"),GLr=o(" (XLM-RoBERTa model)"),OLr=l(),rE=a("li"),e6e=a("strong"),VLr=o("xlnet"),XLr=o(" \u2014 "),sY=a("a"),zLr=o("TFXLNetForMultipleChoice"),WLr=o(" (XLNet model)"),QLr=l(),F(tE.$$.fragment),xOe=l(),Ec=a("h2"),aE=a("a"),o6e=a("span"),F(Q9.$$.fragment),HLr=l(),r6e=a("span"),ULr=o("TFAutoModelForNextSentencePrediction"),$Oe=l(),lr=a("div"),F(H9.$$.fragment),JLr=l(),Cc=a("p"),YLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),lY=a("a"),KLr=o("from_pretrained()"),ZLr=o(" class method or the "),iY=a("a"),eyr=o("from_config()"),oyr=o(` class
method.`),ryr=l(),U9=a("p"),tyr=o("This class cannot be instantiated directly using "),t6e=a("code"),ayr=o("__init__()"),nyr=o(" (throws an error)."),syr=l(),qt=a("div"),F(J9.$$.fragment),lyr=l(),a6e=a("p"),iyr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),dyr=l(),wc=a("p"),cyr=o(`Note:
Loading a model from its configuration file does `),n6e=a("strong"),fyr=o("not"),myr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dY=a("a"),gyr=o("from_pretrained()"),hyr=o(" to load the model weights."),pyr=l(),F(nE.$$.fragment),uyr=l(),Br=a("div"),F(Y9.$$.fragment),_yr=l(),s6e=a("p"),byr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),vyr=l(),gn=a("p"),Fyr=o("The model class to instantiate is selected based on the "),l6e=a("code"),Tyr=o("model_type"),Myr=o(` property of the config object (either
passed as an argument or loaded from `),i6e=a("code"),Eyr=o("pretrained_model_name_or_path"),Cyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d6e=a("code"),wyr=o("pretrained_model_name_or_path"),Ayr=o(":"),Lyr=l(),K9=a("ul"),sE=a("li"),c6e=a("strong"),yyr=o("bert"),xyr=o(" \u2014 "),cY=a("a"),$yr=o("TFBertForNextSentencePrediction"),kyr=o(" (BERT model)"),Syr=l(),lE=a("li"),f6e=a("strong"),Ryr=o("mobilebert"),Pyr=o(" \u2014 "),fY=a("a"),Byr=o("TFMobileBertForNextSentencePrediction"),Iyr=o(" (MobileBERT model)"),Nyr=l(),F(iE.$$.fragment),kOe=l(),Ac=a("h2"),dE=a("a"),m6e=a("span"),F(Z9.$$.fragment),qyr=l(),g6e=a("span"),jyr=o("TFAutoModelForTableQuestionAnswering"),SOe=l(),ir=a("div"),F(ex.$$.fragment),Dyr=l(),Lc=a("p"),Gyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),mY=a("a"),Oyr=o("from_pretrained()"),Vyr=o(" class method or the "),gY=a("a"),Xyr=o("from_config()"),zyr=o(` class
method.`),Wyr=l(),ox=a("p"),Qyr=o("This class cannot be instantiated directly using "),h6e=a("code"),Hyr=o("__init__()"),Uyr=o(" (throws an error)."),Jyr=l(),jt=a("div"),F(rx.$$.fragment),Yyr=l(),p6e=a("p"),Kyr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Zyr=l(),yc=a("p"),e7r=o(`Note:
Loading a model from its configuration file does `),u6e=a("strong"),o7r=o("not"),r7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hY=a("a"),t7r=o("from_pretrained()"),a7r=o(" to load the model weights."),n7r=l(),F(cE.$$.fragment),s7r=l(),Ir=a("div"),F(tx.$$.fragment),l7r=l(),_6e=a("p"),i7r=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),d7r=l(),hn=a("p"),c7r=o("The model class to instantiate is selected based on the "),b6e=a("code"),f7r=o("model_type"),m7r=o(` property of the config object (either
passed as an argument or loaded from `),v6e=a("code"),g7r=o("pretrained_model_name_or_path"),h7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F6e=a("code"),p7r=o("pretrained_model_name_or_path"),u7r=o(":"),_7r=l(),T6e=a("ul"),fE=a("li"),M6e=a("strong"),b7r=o("tapas"),v7r=o(" \u2014 "),pY=a("a"),F7r=o("TFTapasForQuestionAnswering"),T7r=o(" (TAPAS model)"),M7r=l(),F(mE.$$.fragment),ROe=l(),xc=a("h2"),gE=a("a"),E6e=a("span"),F(ax.$$.fragment),E7r=l(),C6e=a("span"),C7r=o("TFAutoModelForTokenClassification"),POe=l(),dr=a("div"),F(nx.$$.fragment),w7r=l(),$c=a("p"),A7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),uY=a("a"),L7r=o("from_pretrained()"),y7r=o(" class method or the "),_Y=a("a"),x7r=o("from_config()"),$7r=o(` class
method.`),k7r=l(),sx=a("p"),S7r=o("This class cannot be instantiated directly using "),w6e=a("code"),R7r=o("__init__()"),P7r=o(" (throws an error)."),B7r=l(),Dt=a("div"),F(lx.$$.fragment),I7r=l(),A6e=a("p"),N7r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),q7r=l(),kc=a("p"),j7r=o(`Note:
Loading a model from its configuration file does `),L6e=a("strong"),D7r=o("not"),G7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bY=a("a"),O7r=o("from_pretrained()"),V7r=o(" to load the model weights."),X7r=l(),F(hE.$$.fragment),z7r=l(),Nr=a("div"),F(ix.$$.fragment),W7r=l(),y6e=a("p"),Q7r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),H7r=l(),pn=a("p"),U7r=o("The model class to instantiate is selected based on the "),x6e=a("code"),J7r=o("model_type"),Y7r=o(` property of the config object (either
passed as an argument or loaded from `),$6e=a("code"),K7r=o("pretrained_model_name_or_path"),Z7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k6e=a("code"),e8r=o("pretrained_model_name_or_path"),o8r=o(":"),r8r=l(),de=a("ul"),pE=a("li"),S6e=a("strong"),t8r=o("albert"),a8r=o(" \u2014 "),vY=a("a"),n8r=o("TFAlbertForTokenClassification"),s8r=o(" (ALBERT model)"),l8r=l(),uE=a("li"),R6e=a("strong"),i8r=o("bert"),d8r=o(" \u2014 "),FY=a("a"),c8r=o("TFBertForTokenClassification"),f8r=o(" (BERT model)"),m8r=l(),_E=a("li"),P6e=a("strong"),g8r=o("camembert"),h8r=o(" \u2014 "),TY=a("a"),p8r=o("TFCamembertForTokenClassification"),u8r=o(" (CamemBERT model)"),_8r=l(),bE=a("li"),B6e=a("strong"),b8r=o("convbert"),v8r=o(" \u2014 "),MY=a("a"),F8r=o("TFConvBertForTokenClassification"),T8r=o(" (ConvBERT model)"),M8r=l(),vE=a("li"),I6e=a("strong"),E8r=o("deberta"),C8r=o(" \u2014 "),EY=a("a"),w8r=o("TFDebertaForTokenClassification"),A8r=o(" (DeBERTa model)"),L8r=l(),FE=a("li"),N6e=a("strong"),y8r=o("deberta-v2"),x8r=o(" \u2014 "),CY=a("a"),$8r=o("TFDebertaV2ForTokenClassification"),k8r=o(" (DeBERTa-v2 model)"),S8r=l(),TE=a("li"),q6e=a("strong"),R8r=o("distilbert"),P8r=o(" \u2014 "),wY=a("a"),B8r=o("TFDistilBertForTokenClassification"),I8r=o(" (DistilBERT model)"),N8r=l(),ME=a("li"),j6e=a("strong"),q8r=o("electra"),j8r=o(" \u2014 "),AY=a("a"),D8r=o("TFElectraForTokenClassification"),G8r=o(" (ELECTRA model)"),O8r=l(),EE=a("li"),D6e=a("strong"),V8r=o("flaubert"),X8r=o(" \u2014 "),LY=a("a"),z8r=o("TFFlaubertForTokenClassification"),W8r=o(" (FlauBERT model)"),Q8r=l(),CE=a("li"),G6e=a("strong"),H8r=o("funnel"),U8r=o(" \u2014 "),yY=a("a"),J8r=o("TFFunnelForTokenClassification"),Y8r=o(" (Funnel Transformer model)"),K8r=l(),wE=a("li"),O6e=a("strong"),Z8r=o("layoutlm"),e9r=o(" \u2014 "),xY=a("a"),o9r=o("TFLayoutLMForTokenClassification"),r9r=o(" (LayoutLM model)"),t9r=l(),AE=a("li"),V6e=a("strong"),a9r=o("longformer"),n9r=o(" \u2014 "),$Y=a("a"),s9r=o("TFLongformerForTokenClassification"),l9r=o(" (Longformer model)"),i9r=l(),LE=a("li"),X6e=a("strong"),d9r=o("mobilebert"),c9r=o(" \u2014 "),kY=a("a"),f9r=o("TFMobileBertForTokenClassification"),m9r=o(" (MobileBERT model)"),g9r=l(),yE=a("li"),z6e=a("strong"),h9r=o("mpnet"),p9r=o(" \u2014 "),SY=a("a"),u9r=o("TFMPNetForTokenClassification"),_9r=o(" (MPNet model)"),b9r=l(),xE=a("li"),W6e=a("strong"),v9r=o("rembert"),F9r=o(" \u2014 "),RY=a("a"),T9r=o("TFRemBertForTokenClassification"),M9r=o(" (RemBERT model)"),E9r=l(),$E=a("li"),Q6e=a("strong"),C9r=o("roberta"),w9r=o(" \u2014 "),PY=a("a"),A9r=o("TFRobertaForTokenClassification"),L9r=o(" (RoBERTa model)"),y9r=l(),kE=a("li"),H6e=a("strong"),x9r=o("roformer"),$9r=o(" \u2014 "),BY=a("a"),k9r=o("TFRoFormerForTokenClassification"),S9r=o(" (RoFormer model)"),R9r=l(),SE=a("li"),U6e=a("strong"),P9r=o("xlm"),B9r=o(" \u2014 "),IY=a("a"),I9r=o("TFXLMForTokenClassification"),N9r=o(" (XLM model)"),q9r=l(),RE=a("li"),J6e=a("strong"),j9r=o("xlm-roberta"),D9r=o(" \u2014 "),NY=a("a"),G9r=o("TFXLMRobertaForTokenClassification"),O9r=o(" (XLM-RoBERTa model)"),V9r=l(),PE=a("li"),Y6e=a("strong"),X9r=o("xlnet"),z9r=o(" \u2014 "),qY=a("a"),W9r=o("TFXLNetForTokenClassification"),Q9r=o(" (XLNet model)"),H9r=l(),F(BE.$$.fragment),BOe=l(),Sc=a("h2"),IE=a("a"),K6e=a("span"),F(dx.$$.fragment),U9r=l(),Z6e=a("span"),J9r=o("TFAutoModelForQuestionAnswering"),IOe=l(),cr=a("div"),F(cx.$$.fragment),Y9r=l(),Rc=a("p"),K9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),jY=a("a"),Z9r=o("from_pretrained()"),exr=o(" class method or the "),DY=a("a"),oxr=o("from_config()"),rxr=o(` class
method.`),txr=l(),fx=a("p"),axr=o("This class cannot be instantiated directly using "),eTe=a("code"),nxr=o("__init__()"),sxr=o(" (throws an error)."),lxr=l(),Gt=a("div"),F(mx.$$.fragment),ixr=l(),oTe=a("p"),dxr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),cxr=l(),Pc=a("p"),fxr=o(`Note:
Loading a model from its configuration file does `),rTe=a("strong"),mxr=o("not"),gxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GY=a("a"),hxr=o("from_pretrained()"),pxr=o(" to load the model weights."),uxr=l(),F(NE.$$.fragment),_xr=l(),qr=a("div"),F(gx.$$.fragment),bxr=l(),tTe=a("p"),vxr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Fxr=l(),un=a("p"),Txr=o("The model class to instantiate is selected based on the "),aTe=a("code"),Mxr=o("model_type"),Exr=o(` property of the config object (either
passed as an argument or loaded from `),nTe=a("code"),Cxr=o("pretrained_model_name_or_path"),wxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sTe=a("code"),Axr=o("pretrained_model_name_or_path"),Lxr=o(":"),yxr=l(),ce=a("ul"),qE=a("li"),lTe=a("strong"),xxr=o("albert"),$xr=o(" \u2014 "),OY=a("a"),kxr=o("TFAlbertForQuestionAnswering"),Sxr=o(" (ALBERT model)"),Rxr=l(),jE=a("li"),iTe=a("strong"),Pxr=o("bert"),Bxr=o(" \u2014 "),VY=a("a"),Ixr=o("TFBertForQuestionAnswering"),Nxr=o(" (BERT model)"),qxr=l(),DE=a("li"),dTe=a("strong"),jxr=o("camembert"),Dxr=o(" \u2014 "),XY=a("a"),Gxr=o("TFCamembertForQuestionAnswering"),Oxr=o(" (CamemBERT model)"),Vxr=l(),GE=a("li"),cTe=a("strong"),Xxr=o("convbert"),zxr=o(" \u2014 "),zY=a("a"),Wxr=o("TFConvBertForQuestionAnswering"),Qxr=o(" (ConvBERT model)"),Hxr=l(),OE=a("li"),fTe=a("strong"),Uxr=o("deberta"),Jxr=o(" \u2014 "),WY=a("a"),Yxr=o("TFDebertaForQuestionAnswering"),Kxr=o(" (DeBERTa model)"),Zxr=l(),VE=a("li"),mTe=a("strong"),e$r=o("deberta-v2"),o$r=o(" \u2014 "),QY=a("a"),r$r=o("TFDebertaV2ForQuestionAnswering"),t$r=o(" (DeBERTa-v2 model)"),a$r=l(),XE=a("li"),gTe=a("strong"),n$r=o("distilbert"),s$r=o(" \u2014 "),HY=a("a"),l$r=o("TFDistilBertForQuestionAnswering"),i$r=o(" (DistilBERT model)"),d$r=l(),zE=a("li"),hTe=a("strong"),c$r=o("electra"),f$r=o(" \u2014 "),UY=a("a"),m$r=o("TFElectraForQuestionAnswering"),g$r=o(" (ELECTRA model)"),h$r=l(),WE=a("li"),pTe=a("strong"),p$r=o("flaubert"),u$r=o(" \u2014 "),JY=a("a"),_$r=o("TFFlaubertForQuestionAnsweringSimple"),b$r=o(" (FlauBERT model)"),v$r=l(),QE=a("li"),uTe=a("strong"),F$r=o("funnel"),T$r=o(" \u2014 "),YY=a("a"),M$r=o("TFFunnelForQuestionAnswering"),E$r=o(" (Funnel Transformer model)"),C$r=l(),HE=a("li"),_Te=a("strong"),w$r=o("gptj"),A$r=o(" \u2014 "),KY=a("a"),L$r=o("TFGPTJForQuestionAnswering"),y$r=o(" (GPT-J model)"),x$r=l(),UE=a("li"),bTe=a("strong"),$$r=o("longformer"),k$r=o(" \u2014 "),ZY=a("a"),S$r=o("TFLongformerForQuestionAnswering"),R$r=o(" (Longformer model)"),P$r=l(),JE=a("li"),vTe=a("strong"),B$r=o("mobilebert"),I$r=o(" \u2014 "),eK=a("a"),N$r=o("TFMobileBertForQuestionAnswering"),q$r=o(" (MobileBERT model)"),j$r=l(),YE=a("li"),FTe=a("strong"),D$r=o("mpnet"),G$r=o(" \u2014 "),oK=a("a"),O$r=o("TFMPNetForQuestionAnswering"),V$r=o(" (MPNet model)"),X$r=l(),KE=a("li"),TTe=a("strong"),z$r=o("rembert"),W$r=o(" \u2014 "),rK=a("a"),Q$r=o("TFRemBertForQuestionAnswering"),H$r=o(" (RemBERT model)"),U$r=l(),ZE=a("li"),MTe=a("strong"),J$r=o("roberta"),Y$r=o(" \u2014 "),tK=a("a"),K$r=o("TFRobertaForQuestionAnswering"),Z$r=o(" (RoBERTa model)"),ekr=l(),eC=a("li"),ETe=a("strong"),okr=o("roformer"),rkr=o(" \u2014 "),aK=a("a"),tkr=o("TFRoFormerForQuestionAnswering"),akr=o(" (RoFormer model)"),nkr=l(),oC=a("li"),CTe=a("strong"),skr=o("xlm"),lkr=o(" \u2014 "),nK=a("a"),ikr=o("TFXLMForQuestionAnsweringSimple"),dkr=o(" (XLM model)"),ckr=l(),rC=a("li"),wTe=a("strong"),fkr=o("xlm-roberta"),mkr=o(" \u2014 "),sK=a("a"),gkr=o("TFXLMRobertaForQuestionAnswering"),hkr=o(" (XLM-RoBERTa model)"),pkr=l(),tC=a("li"),ATe=a("strong"),ukr=o("xlnet"),_kr=o(" \u2014 "),lK=a("a"),bkr=o("TFXLNetForQuestionAnsweringSimple"),vkr=o(" (XLNet model)"),Fkr=l(),F(aC.$$.fragment),NOe=l(),Bc=a("h2"),nC=a("a"),LTe=a("span"),F(hx.$$.fragment),Tkr=l(),yTe=a("span"),Mkr=o("TFAutoModelForVision2Seq"),qOe=l(),fr=a("div"),F(px.$$.fragment),Ekr=l(),Ic=a("p"),Ckr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),iK=a("a"),wkr=o("from_pretrained()"),Akr=o(" class method or the "),dK=a("a"),Lkr=o("from_config()"),ykr=o(` class
method.`),xkr=l(),ux=a("p"),$kr=o("This class cannot be instantiated directly using "),xTe=a("code"),kkr=o("__init__()"),Skr=o(" (throws an error)."),Rkr=l(),Ot=a("div"),F(_x.$$.fragment),Pkr=l(),$Te=a("p"),Bkr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Ikr=l(),Nc=a("p"),Nkr=o(`Note:
Loading a model from its configuration file does `),kTe=a("strong"),qkr=o("not"),jkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cK=a("a"),Dkr=o("from_pretrained()"),Gkr=o(" to load the model weights."),Okr=l(),F(sC.$$.fragment),Vkr=l(),jr=a("div"),F(bx.$$.fragment),Xkr=l(),STe=a("p"),zkr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Wkr=l(),_n=a("p"),Qkr=o("The model class to instantiate is selected based on the "),RTe=a("code"),Hkr=o("model_type"),Ukr=o(` property of the config object (either
passed as an argument or loaded from `),PTe=a("code"),Jkr=o("pretrained_model_name_or_path"),Ykr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BTe=a("code"),Kkr=o("pretrained_model_name_or_path"),Zkr=o(":"),eSr=l(),ITe=a("ul"),lC=a("li"),NTe=a("strong"),oSr=o("vision-encoder-decoder"),rSr=o(" \u2014 "),fK=a("a"),tSr=o("TFVisionEncoderDecoderModel"),aSr=o(" (Vision Encoder decoder model)"),nSr=l(),F(iC.$$.fragment),jOe=l(),qc=a("h2"),dC=a("a"),qTe=a("span"),F(vx.$$.fragment),sSr=l(),jTe=a("span"),lSr=o("TFAutoModelForSpeechSeq2Seq"),DOe=l(),mr=a("div"),F(Fx.$$.fragment),iSr=l(),jc=a("p"),dSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),mK=a("a"),cSr=o("from_pretrained()"),fSr=o(" class method or the "),gK=a("a"),mSr=o("from_config()"),gSr=o(` class
method.`),hSr=l(),Tx=a("p"),pSr=o("This class cannot be instantiated directly using "),DTe=a("code"),uSr=o("__init__()"),_Sr=o(" (throws an error)."),bSr=l(),Vt=a("div"),F(Mx.$$.fragment),vSr=l(),GTe=a("p"),FSr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),TSr=l(),Dc=a("p"),MSr=o(`Note:
Loading a model from its configuration file does `),OTe=a("strong"),ESr=o("not"),CSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hK=a("a"),wSr=o("from_pretrained()"),ASr=o(" to load the model weights."),LSr=l(),F(cC.$$.fragment),ySr=l(),Dr=a("div"),F(Ex.$$.fragment),xSr=l(),VTe=a("p"),$Sr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),kSr=l(),bn=a("p"),SSr=o("The model class to instantiate is selected based on the "),XTe=a("code"),RSr=o("model_type"),PSr=o(` property of the config object (either
passed as an argument or loaded from `),zTe=a("code"),BSr=o("pretrained_model_name_or_path"),ISr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WTe=a("code"),NSr=o("pretrained_model_name_or_path"),qSr=o(":"),jSr=l(),QTe=a("ul"),fC=a("li"),HTe=a("strong"),DSr=o("speech_to_text"),GSr=o(" \u2014 "),pK=a("a"),OSr=o("TFSpeech2TextForConditionalGeneration"),VSr=o(" (Speech2Text model)"),XSr=l(),F(mC.$$.fragment),GOe=l(),Gc=a("h2"),gC=a("a"),UTe=a("span"),F(Cx.$$.fragment),zSr=l(),JTe=a("span"),WSr=o("FlaxAutoModel"),OOe=l(),gr=a("div"),F(wx.$$.fragment),QSr=l(),Oc=a("p"),HSr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),uK=a("a"),USr=o("from_pretrained()"),JSr=o(" class method or the "),_K=a("a"),YSr=o("from_config()"),KSr=o(` class
method.`),ZSr=l(),Ax=a("p"),eRr=o("This class cannot be instantiated directly using "),YTe=a("code"),oRr=o("__init__()"),rRr=o(" (throws an error)."),tRr=l(),Xt=a("div"),F(Lx.$$.fragment),aRr=l(),KTe=a("p"),nRr=o("Instantiates one of the base model classes of the library from a configuration."),sRr=l(),Vc=a("p"),lRr=o(`Note:
Loading a model from its configuration file does `),ZTe=a("strong"),iRr=o("not"),dRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bK=a("a"),cRr=o("from_pretrained()"),fRr=o(" to load the model weights."),mRr=l(),F(hC.$$.fragment),gRr=l(),Gr=a("div"),F(yx.$$.fragment),hRr=l(),eMe=a("p"),pRr=o("Instantiate one of the base model classes of the library from a pretrained model."),uRr=l(),vn=a("p"),_Rr=o("The model class to instantiate is selected based on the "),oMe=a("code"),bRr=o("model_type"),vRr=o(` property of the config object (either
passed as an argument or loaded from `),rMe=a("code"),FRr=o("pretrained_model_name_or_path"),TRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tMe=a("code"),MRr=o("pretrained_model_name_or_path"),ERr=o(":"),CRr=l(),oe=a("ul"),pC=a("li"),aMe=a("strong"),wRr=o("albert"),ARr=o(" \u2014 "),vK=a("a"),LRr=o("FlaxAlbertModel"),yRr=o(" (ALBERT model)"),xRr=l(),uC=a("li"),nMe=a("strong"),$Rr=o("bart"),kRr=o(" \u2014 "),FK=a("a"),SRr=o("FlaxBartModel"),RRr=o(" (BART model)"),PRr=l(),_C=a("li"),sMe=a("strong"),BRr=o("beit"),IRr=o(" \u2014 "),TK=a("a"),NRr=o("FlaxBeitModel"),qRr=o(" (BEiT model)"),jRr=l(),bC=a("li"),lMe=a("strong"),DRr=o("bert"),GRr=o(" \u2014 "),MK=a("a"),ORr=o("FlaxBertModel"),VRr=o(" (BERT model)"),XRr=l(),vC=a("li"),iMe=a("strong"),zRr=o("big_bird"),WRr=o(" \u2014 "),EK=a("a"),QRr=o("FlaxBigBirdModel"),HRr=o(" (BigBird model)"),URr=l(),FC=a("li"),dMe=a("strong"),JRr=o("blenderbot"),YRr=o(" \u2014 "),CK=a("a"),KRr=o("FlaxBlenderbotModel"),ZRr=o(" (Blenderbot model)"),ePr=l(),TC=a("li"),cMe=a("strong"),oPr=o("blenderbot-small"),rPr=o(" \u2014 "),wK=a("a"),tPr=o("FlaxBlenderbotSmallModel"),aPr=o(" (BlenderbotSmall model)"),nPr=l(),MC=a("li"),fMe=a("strong"),sPr=o("clip"),lPr=o(" \u2014 "),AK=a("a"),iPr=o("FlaxCLIPModel"),dPr=o(" (CLIP model)"),cPr=l(),EC=a("li"),mMe=a("strong"),fPr=o("distilbert"),mPr=o(" \u2014 "),LK=a("a"),gPr=o("FlaxDistilBertModel"),hPr=o(" (DistilBERT model)"),pPr=l(),CC=a("li"),gMe=a("strong"),uPr=o("electra"),_Pr=o(" \u2014 "),yK=a("a"),bPr=o("FlaxElectraModel"),vPr=o(" (ELECTRA model)"),FPr=l(),wC=a("li"),hMe=a("strong"),TPr=o("gpt2"),MPr=o(" \u2014 "),xK=a("a"),EPr=o("FlaxGPT2Model"),CPr=o(" (OpenAI GPT-2 model)"),wPr=l(),AC=a("li"),pMe=a("strong"),APr=o("gpt_neo"),LPr=o(" \u2014 "),$K=a("a"),yPr=o("FlaxGPTNeoModel"),xPr=o(" (GPT Neo model)"),$Pr=l(),LC=a("li"),uMe=a("strong"),kPr=o("gptj"),SPr=o(" \u2014 "),kK=a("a"),RPr=o("FlaxGPTJModel"),PPr=o(" (GPT-J model)"),BPr=l(),yC=a("li"),_Me=a("strong"),IPr=o("longt5"),NPr=o(" \u2014 "),SK=a("a"),qPr=o("FlaxLongT5Model"),jPr=o(" (LongT5 model)"),DPr=l(),xC=a("li"),bMe=a("strong"),GPr=o("marian"),OPr=o(" \u2014 "),RK=a("a"),VPr=o("FlaxMarianModel"),XPr=o(" (Marian model)"),zPr=l(),$C=a("li"),vMe=a("strong"),WPr=o("mbart"),QPr=o(" \u2014 "),PK=a("a"),HPr=o("FlaxMBartModel"),UPr=o(" (mBART model)"),JPr=l(),kC=a("li"),FMe=a("strong"),YPr=o("mt5"),KPr=o(" \u2014 "),BK=a("a"),ZPr=o("FlaxMT5Model"),eBr=o(" (MT5 model)"),oBr=l(),SC=a("li"),TMe=a("strong"),rBr=o("opt"),tBr=o(" \u2014 "),IK=a("a"),aBr=o("FlaxOPTModel"),nBr=o(" (OPT model)"),sBr=l(),RC=a("li"),MMe=a("strong"),lBr=o("pegasus"),iBr=o(" \u2014 "),NK=a("a"),dBr=o("FlaxPegasusModel"),cBr=o(" (Pegasus model)"),fBr=l(),PC=a("li"),EMe=a("strong"),mBr=o("roberta"),gBr=o(" \u2014 "),qK=a("a"),hBr=o("FlaxRobertaModel"),pBr=o(" (RoBERTa model)"),uBr=l(),BC=a("li"),CMe=a("strong"),_Br=o("roformer"),bBr=o(" \u2014 "),jK=a("a"),vBr=o("FlaxRoFormerModel"),FBr=o(" (RoFormer model)"),TBr=l(),IC=a("li"),wMe=a("strong"),MBr=o("t5"),EBr=o(" \u2014 "),DK=a("a"),CBr=o("FlaxT5Model"),wBr=o(" (T5 model)"),ABr=l(),NC=a("li"),AMe=a("strong"),LBr=o("vision-text-dual-encoder"),yBr=o(" \u2014 "),GK=a("a"),xBr=o("FlaxVisionTextDualEncoderModel"),$Br=o(" (VisionTextDualEncoder model)"),kBr=l(),qC=a("li"),LMe=a("strong"),SBr=o("vit"),RBr=o(" \u2014 "),OK=a("a"),PBr=o("FlaxViTModel"),BBr=o(" (ViT model)"),IBr=l(),jC=a("li"),yMe=a("strong"),NBr=o("wav2vec2"),qBr=o(" \u2014 "),VK=a("a"),jBr=o("FlaxWav2Vec2Model"),DBr=o(" (Wav2Vec2 model)"),GBr=l(),DC=a("li"),xMe=a("strong"),OBr=o("xglm"),VBr=o(" \u2014 "),XK=a("a"),XBr=o("FlaxXGLMModel"),zBr=o(" (XGLM model)"),WBr=l(),GC=a("li"),$Me=a("strong"),QBr=o("xlm-roberta"),HBr=o(" \u2014 "),zK=a("a"),UBr=o("FlaxXLMRobertaModel"),JBr=o(" (XLM-RoBERTa model)"),YBr=l(),F(OC.$$.fragment),VOe=l(),Xc=a("h2"),VC=a("a"),kMe=a("span"),F(xx.$$.fragment),KBr=l(),SMe=a("span"),ZBr=o("FlaxAutoModelForCausalLM"),XOe=l(),hr=a("div"),F($x.$$.fragment),eIr=l(),zc=a("p"),oIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),WK=a("a"),rIr=o("from_pretrained()"),tIr=o(" class method or the "),QK=a("a"),aIr=o("from_config()"),nIr=o(` class
method.`),sIr=l(),kx=a("p"),lIr=o("This class cannot be instantiated directly using "),RMe=a("code"),iIr=o("__init__()"),dIr=o(" (throws an error)."),cIr=l(),zt=a("div"),F(Sx.$$.fragment),fIr=l(),PMe=a("p"),mIr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),gIr=l(),Wc=a("p"),hIr=o(`Note:
Loading a model from its configuration file does `),BMe=a("strong"),pIr=o("not"),uIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HK=a("a"),_Ir=o("from_pretrained()"),bIr=o(" to load the model weights."),vIr=l(),F(XC.$$.fragment),FIr=l(),Or=a("div"),F(Rx.$$.fragment),TIr=l(),IMe=a("p"),MIr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),EIr=l(),Fn=a("p"),CIr=o("The model class to instantiate is selected based on the "),NMe=a("code"),wIr=o("model_type"),AIr=o(` property of the config object (either
passed as an argument or loaded from `),qMe=a("code"),LIr=o("pretrained_model_name_or_path"),yIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jMe=a("code"),xIr=o("pretrained_model_name_or_path"),$Ir=o(":"),kIr=l(),xe=a("ul"),zC=a("li"),DMe=a("strong"),SIr=o("bart"),RIr=o(" \u2014 "),UK=a("a"),PIr=o("FlaxBartForCausalLM"),BIr=o(" (BART model)"),IIr=l(),WC=a("li"),GMe=a("strong"),NIr=o("bert"),qIr=o(" \u2014 "),JK=a("a"),jIr=o("FlaxBertForCausalLM"),DIr=o(" (BERT model)"),GIr=l(),QC=a("li"),OMe=a("strong"),OIr=o("big_bird"),VIr=o(" \u2014 "),YK=a("a"),XIr=o("FlaxBigBirdForCausalLM"),zIr=o(" (BigBird model)"),WIr=l(),HC=a("li"),VMe=a("strong"),QIr=o("electra"),HIr=o(" \u2014 "),KK=a("a"),UIr=o("FlaxElectraForCausalLM"),JIr=o(" (ELECTRA model)"),YIr=l(),UC=a("li"),XMe=a("strong"),KIr=o("gpt2"),ZIr=o(" \u2014 "),ZK=a("a"),eNr=o("FlaxGPT2LMHeadModel"),oNr=o(" (OpenAI GPT-2 model)"),rNr=l(),JC=a("li"),zMe=a("strong"),tNr=o("gpt_neo"),aNr=o(" \u2014 "),eZ=a("a"),nNr=o("FlaxGPTNeoForCausalLM"),sNr=o(" (GPT Neo model)"),lNr=l(),YC=a("li"),WMe=a("strong"),iNr=o("gptj"),dNr=o(" \u2014 "),oZ=a("a"),cNr=o("FlaxGPTJForCausalLM"),fNr=o(" (GPT-J model)"),mNr=l(),KC=a("li"),QMe=a("strong"),gNr=o("opt"),hNr=o(" \u2014 "),rZ=a("a"),pNr=o("FlaxOPTForCausalLM"),uNr=o(" (OPT model)"),_Nr=l(),ZC=a("li"),HMe=a("strong"),bNr=o("roberta"),vNr=o(" \u2014 "),tZ=a("a"),FNr=o("FlaxRobertaForCausalLM"),TNr=o(" (RoBERTa model)"),MNr=l(),e0=a("li"),UMe=a("strong"),ENr=o("xglm"),CNr=o(" \u2014 "),aZ=a("a"),wNr=o("FlaxXGLMForCausalLM"),ANr=o(" (XGLM model)"),LNr=l(),F(o0.$$.fragment),zOe=l(),Qc=a("h2"),r0=a("a"),JMe=a("span"),F(Px.$$.fragment),yNr=l(),YMe=a("span"),xNr=o("FlaxAutoModelForPreTraining"),WOe=l(),pr=a("div"),F(Bx.$$.fragment),$Nr=l(),Hc=a("p"),kNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),nZ=a("a"),SNr=o("from_pretrained()"),RNr=o(" class method or the "),sZ=a("a"),PNr=o("from_config()"),BNr=o(` class
method.`),INr=l(),Ix=a("p"),NNr=o("This class cannot be instantiated directly using "),KMe=a("code"),qNr=o("__init__()"),jNr=o(" (throws an error)."),DNr=l(),Wt=a("div"),F(Nx.$$.fragment),GNr=l(),ZMe=a("p"),ONr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),VNr=l(),Uc=a("p"),XNr=o(`Note:
Loading a model from its configuration file does `),eEe=a("strong"),zNr=o("not"),WNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lZ=a("a"),QNr=o("from_pretrained()"),HNr=o(" to load the model weights."),UNr=l(),F(t0.$$.fragment),JNr=l(),Vr=a("div"),F(qx.$$.fragment),YNr=l(),oEe=a("p"),KNr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),ZNr=l(),Tn=a("p"),eqr=o("The model class to instantiate is selected based on the "),rEe=a("code"),oqr=o("model_type"),rqr=o(` property of the config object (either
passed as an argument or loaded from `),tEe=a("code"),tqr=o("pretrained_model_name_or_path"),aqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aEe=a("code"),nqr=o("pretrained_model_name_or_path"),sqr=o(":"),lqr=l(),Ee=a("ul"),a0=a("li"),nEe=a("strong"),iqr=o("albert"),dqr=o(" \u2014 "),iZ=a("a"),cqr=o("FlaxAlbertForPreTraining"),fqr=o(" (ALBERT model)"),mqr=l(),n0=a("li"),sEe=a("strong"),gqr=o("bart"),hqr=o(" \u2014 "),dZ=a("a"),pqr=o("FlaxBartForConditionalGeneration"),uqr=o(" (BART model)"),_qr=l(),s0=a("li"),lEe=a("strong"),bqr=o("bert"),vqr=o(" \u2014 "),cZ=a("a"),Fqr=o("FlaxBertForPreTraining"),Tqr=o(" (BERT model)"),Mqr=l(),l0=a("li"),iEe=a("strong"),Eqr=o("big_bird"),Cqr=o(" \u2014 "),fZ=a("a"),wqr=o("FlaxBigBirdForPreTraining"),Aqr=o(" (BigBird model)"),Lqr=l(),i0=a("li"),dEe=a("strong"),yqr=o("electra"),xqr=o(" \u2014 "),mZ=a("a"),$qr=o("FlaxElectraForPreTraining"),kqr=o(" (ELECTRA model)"),Sqr=l(),d0=a("li"),cEe=a("strong"),Rqr=o("longt5"),Pqr=o(" \u2014 "),gZ=a("a"),Bqr=o("FlaxLongT5ForConditionalGeneration"),Iqr=o(" (LongT5 model)"),Nqr=l(),c0=a("li"),fEe=a("strong"),qqr=o("mbart"),jqr=o(" \u2014 "),hZ=a("a"),Dqr=o("FlaxMBartForConditionalGeneration"),Gqr=o(" (mBART model)"),Oqr=l(),f0=a("li"),mEe=a("strong"),Vqr=o("mt5"),Xqr=o(" \u2014 "),pZ=a("a"),zqr=o("FlaxMT5ForConditionalGeneration"),Wqr=o(" (MT5 model)"),Qqr=l(),m0=a("li"),gEe=a("strong"),Hqr=o("roberta"),Uqr=o(" \u2014 "),uZ=a("a"),Jqr=o("FlaxRobertaForMaskedLM"),Yqr=o(" (RoBERTa model)"),Kqr=l(),g0=a("li"),hEe=a("strong"),Zqr=o("roformer"),ejr=o(" \u2014 "),_Z=a("a"),ojr=o("FlaxRoFormerForMaskedLM"),rjr=o(" (RoFormer model)"),tjr=l(),h0=a("li"),pEe=a("strong"),ajr=o("t5"),njr=o(" \u2014 "),bZ=a("a"),sjr=o("FlaxT5ForConditionalGeneration"),ljr=o(" (T5 model)"),ijr=l(),p0=a("li"),uEe=a("strong"),djr=o("wav2vec2"),cjr=o(" \u2014 "),vZ=a("a"),fjr=o("FlaxWav2Vec2ForPreTraining"),mjr=o(" (Wav2Vec2 model)"),gjr=l(),u0=a("li"),_Ee=a("strong"),hjr=o("xlm-roberta"),pjr=o(" \u2014 "),FZ=a("a"),ujr=o("FlaxXLMRobertaForMaskedLM"),_jr=o(" (XLM-RoBERTa model)"),bjr=l(),F(_0.$$.fragment),QOe=l(),Jc=a("h2"),b0=a("a"),bEe=a("span"),F(jx.$$.fragment),vjr=l(),vEe=a("span"),Fjr=o("FlaxAutoModelForMaskedLM"),HOe=l(),ur=a("div"),F(Dx.$$.fragment),Tjr=l(),Yc=a("p"),Mjr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),TZ=a("a"),Ejr=o("from_pretrained()"),Cjr=o(" class method or the "),MZ=a("a"),wjr=o("from_config()"),Ajr=o(` class
method.`),Ljr=l(),Gx=a("p"),yjr=o("This class cannot be instantiated directly using "),FEe=a("code"),xjr=o("__init__()"),$jr=o(" (throws an error)."),kjr=l(),Qt=a("div"),F(Ox.$$.fragment),Sjr=l(),TEe=a("p"),Rjr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Pjr=l(),Kc=a("p"),Bjr=o(`Note:
Loading a model from its configuration file does `),MEe=a("strong"),Ijr=o("not"),Njr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EZ=a("a"),qjr=o("from_pretrained()"),jjr=o(" to load the model weights."),Djr=l(),F(v0.$$.fragment),Gjr=l(),Xr=a("div"),F(Vx.$$.fragment),Ojr=l(),EEe=a("p"),Vjr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Xjr=l(),Mn=a("p"),zjr=o("The model class to instantiate is selected based on the "),CEe=a("code"),Wjr=o("model_type"),Qjr=o(` property of the config object (either
passed as an argument or loaded from `),wEe=a("code"),Hjr=o("pretrained_model_name_or_path"),Ujr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),AEe=a("code"),Jjr=o("pretrained_model_name_or_path"),Yjr=o(":"),Kjr=l(),$e=a("ul"),F0=a("li"),LEe=a("strong"),Zjr=o("albert"),eDr=o(" \u2014 "),CZ=a("a"),oDr=o("FlaxAlbertForMaskedLM"),rDr=o(" (ALBERT model)"),tDr=l(),T0=a("li"),yEe=a("strong"),aDr=o("bart"),nDr=o(" \u2014 "),wZ=a("a"),sDr=o("FlaxBartForConditionalGeneration"),lDr=o(" (BART model)"),iDr=l(),M0=a("li"),xEe=a("strong"),dDr=o("bert"),cDr=o(" \u2014 "),AZ=a("a"),fDr=o("FlaxBertForMaskedLM"),mDr=o(" (BERT model)"),gDr=l(),E0=a("li"),$Ee=a("strong"),hDr=o("big_bird"),pDr=o(" \u2014 "),LZ=a("a"),uDr=o("FlaxBigBirdForMaskedLM"),_Dr=o(" (BigBird model)"),bDr=l(),C0=a("li"),kEe=a("strong"),vDr=o("distilbert"),FDr=o(" \u2014 "),yZ=a("a"),TDr=o("FlaxDistilBertForMaskedLM"),MDr=o(" (DistilBERT model)"),EDr=l(),w0=a("li"),SEe=a("strong"),CDr=o("electra"),wDr=o(" \u2014 "),xZ=a("a"),ADr=o("FlaxElectraForMaskedLM"),LDr=o(" (ELECTRA model)"),yDr=l(),A0=a("li"),REe=a("strong"),xDr=o("mbart"),$Dr=o(" \u2014 "),$Z=a("a"),kDr=o("FlaxMBartForConditionalGeneration"),SDr=o(" (mBART model)"),RDr=l(),L0=a("li"),PEe=a("strong"),PDr=o("roberta"),BDr=o(" \u2014 "),kZ=a("a"),IDr=o("FlaxRobertaForMaskedLM"),NDr=o(" (RoBERTa model)"),qDr=l(),y0=a("li"),BEe=a("strong"),jDr=o("roformer"),DDr=o(" \u2014 "),SZ=a("a"),GDr=o("FlaxRoFormerForMaskedLM"),ODr=o(" (RoFormer model)"),VDr=l(),x0=a("li"),IEe=a("strong"),XDr=o("xlm-roberta"),zDr=o(" \u2014 "),RZ=a("a"),WDr=o("FlaxXLMRobertaForMaskedLM"),QDr=o(" (XLM-RoBERTa model)"),HDr=l(),F($0.$$.fragment),UOe=l(),Zc=a("h2"),k0=a("a"),NEe=a("span"),F(Xx.$$.fragment),UDr=l(),qEe=a("span"),JDr=o("FlaxAutoModelForSeq2SeqLM"),JOe=l(),_r=a("div"),F(zx.$$.fragment),YDr=l(),ef=a("p"),KDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),PZ=a("a"),ZDr=o("from_pretrained()"),eGr=o(" class method or the "),BZ=a("a"),oGr=o("from_config()"),rGr=o(` class
method.`),tGr=l(),Wx=a("p"),aGr=o("This class cannot be instantiated directly using "),jEe=a("code"),nGr=o("__init__()"),sGr=o(" (throws an error)."),lGr=l(),Ht=a("div"),F(Qx.$$.fragment),iGr=l(),DEe=a("p"),dGr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),cGr=l(),of=a("p"),fGr=o(`Note:
Loading a model from its configuration file does `),GEe=a("strong"),mGr=o("not"),gGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IZ=a("a"),hGr=o("from_pretrained()"),pGr=o(" to load the model weights."),uGr=l(),F(S0.$$.fragment),_Gr=l(),zr=a("div"),F(Hx.$$.fragment),bGr=l(),OEe=a("p"),vGr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),FGr=l(),En=a("p"),TGr=o("The model class to instantiate is selected based on the "),VEe=a("code"),MGr=o("model_type"),EGr=o(` property of the config object (either
passed as an argument or loaded from `),XEe=a("code"),CGr=o("pretrained_model_name_or_path"),wGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zEe=a("code"),AGr=o("pretrained_model_name_or_path"),LGr=o(":"),yGr=l(),ke=a("ul"),R0=a("li"),WEe=a("strong"),xGr=o("bart"),$Gr=o(" \u2014 "),NZ=a("a"),kGr=o("FlaxBartForConditionalGeneration"),SGr=o(" (BART model)"),RGr=l(),P0=a("li"),QEe=a("strong"),PGr=o("blenderbot"),BGr=o(" \u2014 "),qZ=a("a"),IGr=o("FlaxBlenderbotForConditionalGeneration"),NGr=o(" (Blenderbot model)"),qGr=l(),B0=a("li"),HEe=a("strong"),jGr=o("blenderbot-small"),DGr=o(" \u2014 "),jZ=a("a"),GGr=o("FlaxBlenderbotSmallForConditionalGeneration"),OGr=o(" (BlenderbotSmall model)"),VGr=l(),I0=a("li"),UEe=a("strong"),XGr=o("encoder-decoder"),zGr=o(" \u2014 "),DZ=a("a"),WGr=o("FlaxEncoderDecoderModel"),QGr=o(" (Encoder decoder model)"),HGr=l(),N0=a("li"),JEe=a("strong"),UGr=o("longt5"),JGr=o(" \u2014 "),GZ=a("a"),YGr=o("FlaxLongT5ForConditionalGeneration"),KGr=o(" (LongT5 model)"),ZGr=l(),q0=a("li"),YEe=a("strong"),eOr=o("marian"),oOr=o(" \u2014 "),OZ=a("a"),rOr=o("FlaxMarianMTModel"),tOr=o(" (Marian model)"),aOr=l(),j0=a("li"),KEe=a("strong"),nOr=o("mbart"),sOr=o(" \u2014 "),VZ=a("a"),lOr=o("FlaxMBartForConditionalGeneration"),iOr=o(" (mBART model)"),dOr=l(),D0=a("li"),ZEe=a("strong"),cOr=o("mt5"),fOr=o(" \u2014 "),XZ=a("a"),mOr=o("FlaxMT5ForConditionalGeneration"),gOr=o(" (MT5 model)"),hOr=l(),G0=a("li"),eCe=a("strong"),pOr=o("pegasus"),uOr=o(" \u2014 "),zZ=a("a"),_Or=o("FlaxPegasusForConditionalGeneration"),bOr=o(" (Pegasus model)"),vOr=l(),O0=a("li"),oCe=a("strong"),FOr=o("t5"),TOr=o(" \u2014 "),WZ=a("a"),MOr=o("FlaxT5ForConditionalGeneration"),EOr=o(" (T5 model)"),COr=l(),F(V0.$$.fragment),YOe=l(),rf=a("h2"),X0=a("a"),rCe=a("span"),F(Ux.$$.fragment),wOr=l(),tCe=a("span"),AOr=o("FlaxAutoModelForSequenceClassification"),KOe=l(),br=a("div"),F(Jx.$$.fragment),LOr=l(),tf=a("p"),yOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),QZ=a("a"),xOr=o("from_pretrained()"),$Or=o(" class method or the "),HZ=a("a"),kOr=o("from_config()"),SOr=o(` class
method.`),ROr=l(),Yx=a("p"),POr=o("This class cannot be instantiated directly using "),aCe=a("code"),BOr=o("__init__()"),IOr=o(" (throws an error)."),NOr=l(),Ut=a("div"),F(Kx.$$.fragment),qOr=l(),nCe=a("p"),jOr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),DOr=l(),af=a("p"),GOr=o(`Note:
Loading a model from its configuration file does `),sCe=a("strong"),OOr=o("not"),VOr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UZ=a("a"),XOr=o("from_pretrained()"),zOr=o(" to load the model weights."),WOr=l(),F(z0.$$.fragment),QOr=l(),Wr=a("div"),F(Zx.$$.fragment),HOr=l(),lCe=a("p"),UOr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),JOr=l(),Cn=a("p"),YOr=o("The model class to instantiate is selected based on the "),iCe=a("code"),KOr=o("model_type"),ZOr=o(` property of the config object (either
passed as an argument or loaded from `),dCe=a("code"),eVr=o("pretrained_model_name_or_path"),oVr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cCe=a("code"),rVr=o("pretrained_model_name_or_path"),tVr=o(":"),aVr=l(),Se=a("ul"),W0=a("li"),fCe=a("strong"),nVr=o("albert"),sVr=o(" \u2014 "),JZ=a("a"),lVr=o("FlaxAlbertForSequenceClassification"),iVr=o(" (ALBERT model)"),dVr=l(),Q0=a("li"),mCe=a("strong"),cVr=o("bart"),fVr=o(" \u2014 "),YZ=a("a"),mVr=o("FlaxBartForSequenceClassification"),gVr=o(" (BART model)"),hVr=l(),H0=a("li"),gCe=a("strong"),pVr=o("bert"),uVr=o(" \u2014 "),KZ=a("a"),_Vr=o("FlaxBertForSequenceClassification"),bVr=o(" (BERT model)"),vVr=l(),U0=a("li"),hCe=a("strong"),FVr=o("big_bird"),TVr=o(" \u2014 "),ZZ=a("a"),MVr=o("FlaxBigBirdForSequenceClassification"),EVr=o(" (BigBird model)"),CVr=l(),J0=a("li"),pCe=a("strong"),wVr=o("distilbert"),AVr=o(" \u2014 "),eee=a("a"),LVr=o("FlaxDistilBertForSequenceClassification"),yVr=o(" (DistilBERT model)"),xVr=l(),Y0=a("li"),uCe=a("strong"),$Vr=o("electra"),kVr=o(" \u2014 "),oee=a("a"),SVr=o("FlaxElectraForSequenceClassification"),RVr=o(" (ELECTRA model)"),PVr=l(),K0=a("li"),_Ce=a("strong"),BVr=o("mbart"),IVr=o(" \u2014 "),ree=a("a"),NVr=o("FlaxMBartForSequenceClassification"),qVr=o(" (mBART model)"),jVr=l(),Z0=a("li"),bCe=a("strong"),DVr=o("roberta"),GVr=o(" \u2014 "),tee=a("a"),OVr=o("FlaxRobertaForSequenceClassification"),VVr=o(" (RoBERTa model)"),XVr=l(),ew=a("li"),vCe=a("strong"),zVr=o("roformer"),WVr=o(" \u2014 "),aee=a("a"),QVr=o("FlaxRoFormerForSequenceClassification"),HVr=o(" (RoFormer model)"),UVr=l(),ow=a("li"),FCe=a("strong"),JVr=o("xlm-roberta"),YVr=o(" \u2014 "),nee=a("a"),KVr=o("FlaxXLMRobertaForSequenceClassification"),ZVr=o(" (XLM-RoBERTa model)"),eXr=l(),F(rw.$$.fragment),ZOe=l(),nf=a("h2"),tw=a("a"),TCe=a("span"),F(e$.$$.fragment),oXr=l(),MCe=a("span"),rXr=o("FlaxAutoModelForQuestionAnswering"),eVe=l(),vr=a("div"),F(o$.$$.fragment),tXr=l(),sf=a("p"),aXr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),see=a("a"),nXr=o("from_pretrained()"),sXr=o(" class method or the "),lee=a("a"),lXr=o("from_config()"),iXr=o(` class
method.`),dXr=l(),r$=a("p"),cXr=o("This class cannot be instantiated directly using "),ECe=a("code"),fXr=o("__init__()"),mXr=o(" (throws an error)."),gXr=l(),Jt=a("div"),F(t$.$$.fragment),hXr=l(),CCe=a("p"),pXr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),uXr=l(),lf=a("p"),_Xr=o(`Note:
Loading a model from its configuration file does `),wCe=a("strong"),bXr=o("not"),vXr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iee=a("a"),FXr=o("from_pretrained()"),TXr=o(" to load the model weights."),MXr=l(),F(aw.$$.fragment),EXr=l(),Qr=a("div"),F(a$.$$.fragment),CXr=l(),ACe=a("p"),wXr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),AXr=l(),wn=a("p"),LXr=o("The model class to instantiate is selected based on the "),LCe=a("code"),yXr=o("model_type"),xXr=o(` property of the config object (either
passed as an argument or loaded from `),yCe=a("code"),$Xr=o("pretrained_model_name_or_path"),kXr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xCe=a("code"),SXr=o("pretrained_model_name_or_path"),RXr=o(":"),PXr=l(),Re=a("ul"),nw=a("li"),$Ce=a("strong"),BXr=o("albert"),IXr=o(" \u2014 "),dee=a("a"),NXr=o("FlaxAlbertForQuestionAnswering"),qXr=o(" (ALBERT model)"),jXr=l(),sw=a("li"),kCe=a("strong"),DXr=o("bart"),GXr=o(" \u2014 "),cee=a("a"),OXr=o("FlaxBartForQuestionAnswering"),VXr=o(" (BART model)"),XXr=l(),lw=a("li"),SCe=a("strong"),zXr=o("bert"),WXr=o(" \u2014 "),fee=a("a"),QXr=o("FlaxBertForQuestionAnswering"),HXr=o(" (BERT model)"),UXr=l(),iw=a("li"),RCe=a("strong"),JXr=o("big_bird"),YXr=o(" \u2014 "),mee=a("a"),KXr=o("FlaxBigBirdForQuestionAnswering"),ZXr=o(" (BigBird model)"),ezr=l(),dw=a("li"),PCe=a("strong"),ozr=o("distilbert"),rzr=o(" \u2014 "),gee=a("a"),tzr=o("FlaxDistilBertForQuestionAnswering"),azr=o(" (DistilBERT model)"),nzr=l(),cw=a("li"),BCe=a("strong"),szr=o("electra"),lzr=o(" \u2014 "),hee=a("a"),izr=o("FlaxElectraForQuestionAnswering"),dzr=o(" (ELECTRA model)"),czr=l(),fw=a("li"),ICe=a("strong"),fzr=o("mbart"),mzr=o(" \u2014 "),pee=a("a"),gzr=o("FlaxMBartForQuestionAnswering"),hzr=o(" (mBART model)"),pzr=l(),mw=a("li"),NCe=a("strong"),uzr=o("roberta"),_zr=o(" \u2014 "),uee=a("a"),bzr=o("FlaxRobertaForQuestionAnswering"),vzr=o(" (RoBERTa model)"),Fzr=l(),gw=a("li"),qCe=a("strong"),Tzr=o("roformer"),Mzr=o(" \u2014 "),_ee=a("a"),Ezr=o("FlaxRoFormerForQuestionAnswering"),Czr=o(" (RoFormer model)"),wzr=l(),hw=a("li"),jCe=a("strong"),Azr=o("xlm-roberta"),Lzr=o(" \u2014 "),bee=a("a"),yzr=o("FlaxXLMRobertaForQuestionAnswering"),xzr=o(" (XLM-RoBERTa model)"),$zr=l(),F(pw.$$.fragment),oVe=l(),df=a("h2"),uw=a("a"),DCe=a("span"),F(n$.$$.fragment),kzr=l(),GCe=a("span"),Szr=o("FlaxAutoModelForTokenClassification"),rVe=l(),Fr=a("div"),F(s$.$$.fragment),Rzr=l(),cf=a("p"),Pzr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),vee=a("a"),Bzr=o("from_pretrained()"),Izr=o(" class method or the "),Fee=a("a"),Nzr=o("from_config()"),qzr=o(` class
method.`),jzr=l(),l$=a("p"),Dzr=o("This class cannot be instantiated directly using "),OCe=a("code"),Gzr=o("__init__()"),Ozr=o(" (throws an error)."),Vzr=l(),Yt=a("div"),F(i$.$$.fragment),Xzr=l(),VCe=a("p"),zzr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Wzr=l(),ff=a("p"),Qzr=o(`Note:
Loading a model from its configuration file does `),XCe=a("strong"),Hzr=o("not"),Uzr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Tee=a("a"),Jzr=o("from_pretrained()"),Yzr=o(" to load the model weights."),Kzr=l(),F(_w.$$.fragment),Zzr=l(),Hr=a("div"),F(d$.$$.fragment),eWr=l(),zCe=a("p"),oWr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),rWr=l(),An=a("p"),tWr=o("The model class to instantiate is selected based on the "),WCe=a("code"),aWr=o("model_type"),nWr=o(` property of the config object (either
passed as an argument or loaded from `),QCe=a("code"),sWr=o("pretrained_model_name_or_path"),lWr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HCe=a("code"),iWr=o("pretrained_model_name_or_path"),dWr=o(":"),cWr=l(),Ve=a("ul"),bw=a("li"),UCe=a("strong"),fWr=o("albert"),mWr=o(" \u2014 "),Mee=a("a"),gWr=o("FlaxAlbertForTokenClassification"),hWr=o(" (ALBERT model)"),pWr=l(),vw=a("li"),JCe=a("strong"),uWr=o("bert"),_Wr=o(" \u2014 "),Eee=a("a"),bWr=o("FlaxBertForTokenClassification"),vWr=o(" (BERT model)"),FWr=l(),Fw=a("li"),YCe=a("strong"),TWr=o("big_bird"),MWr=o(" \u2014 "),Cee=a("a"),EWr=o("FlaxBigBirdForTokenClassification"),CWr=o(" (BigBird model)"),wWr=l(),Tw=a("li"),KCe=a("strong"),AWr=o("distilbert"),LWr=o(" \u2014 "),wee=a("a"),yWr=o("FlaxDistilBertForTokenClassification"),xWr=o(" (DistilBERT model)"),$Wr=l(),Mw=a("li"),ZCe=a("strong"),kWr=o("electra"),SWr=o(" \u2014 "),Aee=a("a"),RWr=o("FlaxElectraForTokenClassification"),PWr=o(" (ELECTRA model)"),BWr=l(),Ew=a("li"),e0e=a("strong"),IWr=o("roberta"),NWr=o(" \u2014 "),Lee=a("a"),qWr=o("FlaxRobertaForTokenClassification"),jWr=o(" (RoBERTa model)"),DWr=l(),Cw=a("li"),o0e=a("strong"),GWr=o("roformer"),OWr=o(" \u2014 "),yee=a("a"),VWr=o("FlaxRoFormerForTokenClassification"),XWr=o(" (RoFormer model)"),zWr=l(),ww=a("li"),r0e=a("strong"),WWr=o("xlm-roberta"),QWr=o(" \u2014 "),xee=a("a"),HWr=o("FlaxXLMRobertaForTokenClassification"),UWr=o(" (XLM-RoBERTa model)"),JWr=l(),F(Aw.$$.fragment),tVe=l(),mf=a("h2"),Lw=a("a"),t0e=a("span"),F(c$.$$.fragment),YWr=l(),a0e=a("span"),KWr=o("FlaxAutoModelForMultipleChoice"),aVe=l(),Tr=a("div"),F(f$.$$.fragment),ZWr=l(),gf=a("p"),eQr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),$ee=a("a"),oQr=o("from_pretrained()"),rQr=o(" class method or the "),kee=a("a"),tQr=o("from_config()"),aQr=o(` class
method.`),nQr=l(),m$=a("p"),sQr=o("This class cannot be instantiated directly using "),n0e=a("code"),lQr=o("__init__()"),iQr=o(" (throws an error)."),dQr=l(),Kt=a("div"),F(g$.$$.fragment),cQr=l(),s0e=a("p"),fQr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),mQr=l(),hf=a("p"),gQr=o(`Note:
Loading a model from its configuration file does `),l0e=a("strong"),hQr=o("not"),pQr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),See=a("a"),uQr=o("from_pretrained()"),_Qr=o(" to load the model weights."),bQr=l(),F(yw.$$.fragment),vQr=l(),Ur=a("div"),F(h$.$$.fragment),FQr=l(),i0e=a("p"),TQr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),MQr=l(),Ln=a("p"),EQr=o("The model class to instantiate is selected based on the "),d0e=a("code"),CQr=o("model_type"),wQr=o(` property of the config object (either
passed as an argument or loaded from `),c0e=a("code"),AQr=o("pretrained_model_name_or_path"),LQr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f0e=a("code"),yQr=o("pretrained_model_name_or_path"),xQr=o(":"),$Qr=l(),Xe=a("ul"),xw=a("li"),m0e=a("strong"),kQr=o("albert"),SQr=o(" \u2014 "),Ree=a("a"),RQr=o("FlaxAlbertForMultipleChoice"),PQr=o(" (ALBERT model)"),BQr=l(),$w=a("li"),g0e=a("strong"),IQr=o("bert"),NQr=o(" \u2014 "),Pee=a("a"),qQr=o("FlaxBertForMultipleChoice"),jQr=o(" (BERT model)"),DQr=l(),kw=a("li"),h0e=a("strong"),GQr=o("big_bird"),OQr=o(" \u2014 "),Bee=a("a"),VQr=o("FlaxBigBirdForMultipleChoice"),XQr=o(" (BigBird model)"),zQr=l(),Sw=a("li"),p0e=a("strong"),WQr=o("distilbert"),QQr=o(" \u2014 "),Iee=a("a"),HQr=o("FlaxDistilBertForMultipleChoice"),UQr=o(" (DistilBERT model)"),JQr=l(),Rw=a("li"),u0e=a("strong"),YQr=o("electra"),KQr=o(" \u2014 "),Nee=a("a"),ZQr=o("FlaxElectraForMultipleChoice"),eHr=o(" (ELECTRA model)"),oHr=l(),Pw=a("li"),_0e=a("strong"),rHr=o("roberta"),tHr=o(" \u2014 "),qee=a("a"),aHr=o("FlaxRobertaForMultipleChoice"),nHr=o(" (RoBERTa model)"),sHr=l(),Bw=a("li"),b0e=a("strong"),lHr=o("roformer"),iHr=o(" \u2014 "),jee=a("a"),dHr=o("FlaxRoFormerForMultipleChoice"),cHr=o(" (RoFormer model)"),fHr=l(),Iw=a("li"),v0e=a("strong"),mHr=o("xlm-roberta"),gHr=o(" \u2014 "),Dee=a("a"),hHr=o("FlaxXLMRobertaForMultipleChoice"),pHr=o(" (XLM-RoBERTa model)"),uHr=l(),F(Nw.$$.fragment),nVe=l(),pf=a("h2"),qw=a("a"),F0e=a("span"),F(p$.$$.fragment),_Hr=l(),T0e=a("span"),bHr=o("FlaxAutoModelForNextSentencePrediction"),sVe=l(),Mr=a("div"),F(u$.$$.fragment),vHr=l(),uf=a("p"),FHr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Gee=a("a"),THr=o("from_pretrained()"),MHr=o(" class method or the "),Oee=a("a"),EHr=o("from_config()"),CHr=o(` class
method.`),wHr=l(),_$=a("p"),AHr=o("This class cannot be instantiated directly using "),M0e=a("code"),LHr=o("__init__()"),yHr=o(" (throws an error)."),xHr=l(),Zt=a("div"),F(b$.$$.fragment),$Hr=l(),E0e=a("p"),kHr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),SHr=l(),_f=a("p"),RHr=o(`Note:
Loading a model from its configuration file does `),C0e=a("strong"),PHr=o("not"),BHr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Vee=a("a"),IHr=o("from_pretrained()"),NHr=o(" to load the model weights."),qHr=l(),F(jw.$$.fragment),jHr=l(),Jr=a("div"),F(v$.$$.fragment),DHr=l(),w0e=a("p"),GHr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),OHr=l(),yn=a("p"),VHr=o("The model class to instantiate is selected based on the "),A0e=a("code"),XHr=o("model_type"),zHr=o(` property of the config object (either
passed as an argument or loaded from `),L0e=a("code"),WHr=o("pretrained_model_name_or_path"),QHr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y0e=a("code"),HHr=o("pretrained_model_name_or_path"),UHr=o(":"),JHr=l(),x0e=a("ul"),Dw=a("li"),$0e=a("strong"),YHr=o("bert"),KHr=o(" \u2014 "),Xee=a("a"),ZHr=o("FlaxBertForNextSentencePrediction"),eUr=o(" (BERT model)"),oUr=l(),F(Gw.$$.fragment),lVe=l(),bf=a("h2"),Ow=a("a"),k0e=a("span"),F(F$.$$.fragment),rUr=l(),S0e=a("span"),tUr=o("FlaxAutoModelForImageClassification"),iVe=l(),Er=a("div"),F(T$.$$.fragment),aUr=l(),vf=a("p"),nUr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),zee=a("a"),sUr=o("from_pretrained()"),lUr=o(" class method or the "),Wee=a("a"),iUr=o("from_config()"),dUr=o(` class
method.`),cUr=l(),M$=a("p"),fUr=o("This class cannot be instantiated directly using "),R0e=a("code"),mUr=o("__init__()"),gUr=o(" (throws an error)."),hUr=l(),ea=a("div"),F(E$.$$.fragment),pUr=l(),P0e=a("p"),uUr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),_Ur=l(),Ff=a("p"),bUr=o(`Note:
Loading a model from its configuration file does `),B0e=a("strong"),vUr=o("not"),FUr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Qee=a("a"),TUr=o("from_pretrained()"),MUr=o(" to load the model weights."),EUr=l(),F(Vw.$$.fragment),CUr=l(),Yr=a("div"),F(C$.$$.fragment),wUr=l(),I0e=a("p"),AUr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),LUr=l(),xn=a("p"),yUr=o("The model class to instantiate is selected based on the "),N0e=a("code"),xUr=o("model_type"),$Ur=o(` property of the config object (either
passed as an argument or loaded from `),q0e=a("code"),kUr=o("pretrained_model_name_or_path"),SUr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j0e=a("code"),RUr=o("pretrained_model_name_or_path"),PUr=o(":"),BUr=l(),w$=a("ul"),Xw=a("li"),D0e=a("strong"),IUr=o("beit"),NUr=o(" \u2014 "),Hee=a("a"),qUr=o("FlaxBeitForImageClassification"),jUr=o(" (BEiT model)"),DUr=l(),zw=a("li"),G0e=a("strong"),GUr=o("vit"),OUr=o(" \u2014 "),Uee=a("a"),VUr=o("FlaxViTForImageClassification"),XUr=o(" (ViT model)"),zUr=l(),F(Ww.$$.fragment),dVe=l(),Tf=a("h2"),Qw=a("a"),O0e=a("span"),F(A$.$$.fragment),WUr=l(),V0e=a("span"),QUr=o("FlaxAutoModelForVision2Seq"),cVe=l(),Cr=a("div"),F(L$.$$.fragment),HUr=l(),Mf=a("p"),UUr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Jee=a("a"),JUr=o("from_pretrained()"),YUr=o(" class method or the "),Yee=a("a"),KUr=o("from_config()"),ZUr=o(` class
method.`),eJr=l(),y$=a("p"),oJr=o("This class cannot be instantiated directly using "),X0e=a("code"),rJr=o("__init__()"),tJr=o(" (throws an error)."),aJr=l(),oa=a("div"),F(x$.$$.fragment),nJr=l(),z0e=a("p"),sJr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),lJr=l(),Ef=a("p"),iJr=o(`Note:
Loading a model from its configuration file does `),W0e=a("strong"),dJr=o("not"),cJr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Kee=a("a"),fJr=o("from_pretrained()"),mJr=o(" to load the model weights."),gJr=l(),F(Hw.$$.fragment),hJr=l(),Kr=a("div"),F($$.$$.fragment),pJr=l(),Q0e=a("p"),uJr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),_Jr=l(),$n=a("p"),bJr=o("The model class to instantiate is selected based on the "),H0e=a("code"),vJr=o("model_type"),FJr=o(` property of the config object (either
passed as an argument or loaded from `),U0e=a("code"),TJr=o("pretrained_model_name_or_path"),MJr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J0e=a("code"),EJr=o("pretrained_model_name_or_path"),CJr=o(":"),wJr=l(),Y0e=a("ul"),Uw=a("li"),K0e=a("strong"),AJr=o("vision-encoder-decoder"),LJr=o(" \u2014 "),Zee=a("a"),yJr=o("FlaxVisionEncoderDecoderModel"),xJr=o(" (Vision Encoder decoder model)"),$Jr=l(),F(Jw.$$.fragment),this.h()},l(f){const _=qqt('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var k$=s(p);m=n(k$,"A",{id:!0,class:!0,href:!0});var Z0e=s(m);u=n(Z0e,"SPAN",{});var ewe=s(u);T(d.$$.fragment,ewe),ewe.forEach(t),Z0e.forEach(t),h=i(k$),Eo=n(k$,"SPAN",{});var owe=s(Eo);Fi=r(owe,"Auto Classes"),owe.forEach(t),k$.forEach(t),Lf=i(f),at=n(f,"P",{});var S$=s(at);Ti=r(S$,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Mi=n(S$,"CODE",{});var rwe=s(Mi);_y=r(rwe,"from_pretrained()"),rwe.forEach(t),yf=r(S$,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),S$.forEach(t),Oe=i(f),We=n(f,"P",{});var kn=s(We);Ei=r(kn,"Instantiating one of "),Sn=n(kn,"A",{href:!0});var twe=s(Sn);by=r(twe,"AutoConfig"),twe.forEach(t),Rn=r(kn,", "),Pn=n(kn,"A",{href:!0});var awe=s(Pn);vy=r(awe,"AutoModel"),awe.forEach(t),Ci=r(kn,`, and
`),Bn=n(kn,"A",{href:!0});var nwe=s(Bn);Fy=r(nwe,"AutoTokenizer"),nwe.forEach(t),wi=r(kn," will directly create a class of the relevant architecture. For instance"),kn.forEach(t),xf=i(f),T(ya.$$.fragment,f),Qe=i(f),Ae=n(f,"P",{});var R$=s(Ae);Qk=r(R$,"will create a model that is an instance of "),Ai=n(R$,"A",{href:!0});var swe=s(Ai);Hk=r(swe,"BertModel"),swe.forEach(t),Uk=r(R$,"."),R$.forEach(t),Co=i(f),xa=n(f,"P",{});var P$=s(xa);Jk=r(P$,"There is one class of "),$f=n(P$,"CODE",{});var lwe=s($f);Yk=r(lwe,"AutoModel"),lwe.forEach(t),Tze=r(P$," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),P$.forEach(t),sGe=i(f),Li=n(f,"H2",{class:!0});var B$=s(Li);kf=n(B$,"A",{id:!0,class:!0,href:!0});var iwe=s(kf);Hre=n(iwe,"SPAN",{});var dwe=s(Hre);T(Ty.$$.fragment,dwe),dwe.forEach(t),iwe.forEach(t),Mze=i(B$),Ure=n(B$,"SPAN",{});var cwe=s(Ure);Eze=r(cwe,"Extending the Auto Classes"),cwe.forEach(t),B$.forEach(t),lGe=i(f),In=n(f,"P",{});var Cf=s(In);Cze=r(Cf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Jre=n(Cf,"CODE",{});var fwe=s(Jre);wze=r(fwe,"NewModel"),fwe.forEach(t),Aze=r(Cf,", make sure you have a "),Yre=n(Cf,"CODE",{});var mwe=s(Yre);Lze=r(mwe,"NewModelConfig"),mwe.forEach(t),yze=r(Cf,` then you can add those to the auto
classes like this:`),Cf.forEach(t),iGe=i(f),T(My.$$.fragment,f),dGe=i(f),Kk=n(f,"P",{});var gwe=s(Kk);xze=r(gwe,"You will then be able to use the auto classes like you would usually do!"),gwe.forEach(t),cGe=i(f),T(Sf.$$.fragment,f),fGe=i(f),yi=n(f,"H2",{class:!0});var I$=s(yi);Rf=n(I$,"A",{id:!0,class:!0,href:!0});var hwe=s(Rf);Kre=n(hwe,"SPAN",{});var pwe=s(Kre);T(Ey.$$.fragment,pwe),pwe.forEach(t),hwe.forEach(t),$ze=i(I$),Zre=n(I$,"SPAN",{});var uwe=s(Zre);kze=r(uwe,"AutoConfig"),uwe.forEach(t),I$.forEach(t),mGe=i(f),wo=n(f,"DIV",{class:!0});var rt=s(wo);T(Cy.$$.fragment,rt),Sze=i(rt),wy=n(rt,"P",{});var N$=s(wy);Rze=r(N$,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),Zk=n(N$,"A",{href:!0});var _we=s(Zk);Pze=r(_we,"from_pretrained()"),_we.forEach(t),Bze=r(N$," class method."),N$.forEach(t),Ize=i(rt),Ay=n(rt,"P",{});var q$=s(Ay);Nze=r(q$,"This class cannot be instantiated directly using "),ete=n(q$,"CODE",{});var bwe=s(ete);qze=r(bwe,"__init__()"),bwe.forEach(t),jze=r(q$," (throws an error)."),q$.forEach(t),Dze=i(rt),wr=n(rt,"DIV",{class:!0});var tt=s(wr);T(Ly.$$.fragment,tt),Gze=i(tt),ote=n(tt,"P",{});var vwe=s(ote);Oze=r(vwe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),vwe.forEach(t),Vze=i(tt),xi=n(tt,"P",{});var wf=s(xi);Xze=r(wf,"The configuration class to instantiate is selected based on the "),rte=n(wf,"CODE",{});var Fwe=s(rte);zze=r(Fwe,"model_type"),Fwe.forEach(t),Wze=r(wf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),tte=n(wf,"CODE",{});var Twe=s(tte);Qze=r(Twe,"pretrained_model_name_or_path"),Twe.forEach(t),Hze=r(wf,":"),wf.forEach(t),Uze=i(tt),A=n(tt,"UL",{});var L=s(A);Pf=n(L,"LI",{});var Yw=s(Pf);ate=n(Yw,"STRONG",{});var Mwe=s(ate);Jze=r(Mwe,"albert"),Mwe.forEach(t),Yze=r(Yw," \u2014 "),eS=n(Yw,"A",{href:!0});var Ewe=s(eS);Kze=r(Ewe,"AlbertConfig"),Ewe.forEach(t),Zze=r(Yw," (ALBERT model)"),Yw.forEach(t),eWe=i(L),Bf=n(L,"LI",{});var Kw=s(Bf);nte=n(Kw,"STRONG",{});var Cwe=s(nte);oWe=r(Cwe,"bart"),Cwe.forEach(t),rWe=r(Kw," \u2014 "),oS=n(Kw,"A",{href:!0});var wwe=s(oS);tWe=r(wwe,"BartConfig"),wwe.forEach(t),aWe=r(Kw," (BART model)"),Kw.forEach(t),nWe=i(L),If=n(L,"LI",{});var Zw=s(If);ste=n(Zw,"STRONG",{});var Awe=s(ste);sWe=r(Awe,"beit"),Awe.forEach(t),lWe=r(Zw," \u2014 "),rS=n(Zw,"A",{href:!0});var Lwe=s(rS);iWe=r(Lwe,"BeitConfig"),Lwe.forEach(t),dWe=r(Zw," (BEiT model)"),Zw.forEach(t),cWe=i(L),Nf=n(L,"LI",{});var eA=s(Nf);lte=n(eA,"STRONG",{});var ywe=s(lte);fWe=r(ywe,"bert"),ywe.forEach(t),mWe=r(eA," \u2014 "),tS=n(eA,"A",{href:!0});var xwe=s(tS);gWe=r(xwe,"BertConfig"),xwe.forEach(t),hWe=r(eA," (BERT model)"),eA.forEach(t),pWe=i(L),qf=n(L,"LI",{});var oA=s(qf);ite=n(oA,"STRONG",{});var $we=s(ite);uWe=r($we,"bert-generation"),$we.forEach(t),_We=r(oA," \u2014 "),aS=n(oA,"A",{href:!0});var kwe=s(aS);bWe=r(kwe,"BertGenerationConfig"),kwe.forEach(t),vWe=r(oA," (Bert Generation model)"),oA.forEach(t),FWe=i(L),jf=n(L,"LI",{});var rA=s(jf);dte=n(rA,"STRONG",{});var Swe=s(dte);TWe=r(Swe,"big_bird"),Swe.forEach(t),MWe=r(rA," \u2014 "),nS=n(rA,"A",{href:!0});var Rwe=s(nS);EWe=r(Rwe,"BigBirdConfig"),Rwe.forEach(t),CWe=r(rA," (BigBird model)"),rA.forEach(t),wWe=i(L),Df=n(L,"LI",{});var tA=s(Df);cte=n(tA,"STRONG",{});var Pwe=s(cte);AWe=r(Pwe,"bigbird_pegasus"),Pwe.forEach(t),LWe=r(tA," \u2014 "),sS=n(tA,"A",{href:!0});var Bwe=s(sS);yWe=r(Bwe,"BigBirdPegasusConfig"),Bwe.forEach(t),xWe=r(tA," (BigBird-Pegasus model)"),tA.forEach(t),$We=i(L),Gf=n(L,"LI",{});var aA=s(Gf);fte=n(aA,"STRONG",{});var Iwe=s(fte);kWe=r(Iwe,"blenderbot"),Iwe.forEach(t),SWe=r(aA," \u2014 "),lS=n(aA,"A",{href:!0});var Nwe=s(lS);RWe=r(Nwe,"BlenderbotConfig"),Nwe.forEach(t),PWe=r(aA," (Blenderbot model)"),aA.forEach(t),BWe=i(L),Of=n(L,"LI",{});var nA=s(Of);mte=n(nA,"STRONG",{});var qwe=s(mte);IWe=r(qwe,"blenderbot-small"),qwe.forEach(t),NWe=r(nA," \u2014 "),iS=n(nA,"A",{href:!0});var jwe=s(iS);qWe=r(jwe,"BlenderbotSmallConfig"),jwe.forEach(t),jWe=r(nA," (BlenderbotSmall model)"),nA.forEach(t),DWe=i(L),Vf=n(L,"LI",{});var sA=s(Vf);gte=n(sA,"STRONG",{});var Dwe=s(gte);GWe=r(Dwe,"bloom"),Dwe.forEach(t),OWe=r(sA," \u2014 "),dS=n(sA,"A",{href:!0});var Gwe=s(dS);VWe=r(Gwe,"BloomConfig"),Gwe.forEach(t),XWe=r(sA," (BLOOM model)"),sA.forEach(t),zWe=i(L),Xf=n(L,"LI",{});var lA=s(Xf);hte=n(lA,"STRONG",{});var Owe=s(hte);WWe=r(Owe,"camembert"),Owe.forEach(t),QWe=r(lA," \u2014 "),cS=n(lA,"A",{href:!0});var Vwe=s(cS);HWe=r(Vwe,"CamembertConfig"),Vwe.forEach(t),UWe=r(lA," (CamemBERT model)"),lA.forEach(t),JWe=i(L),zf=n(L,"LI",{});var iA=s(zf);pte=n(iA,"STRONG",{});var Xwe=s(pte);YWe=r(Xwe,"canine"),Xwe.forEach(t),KWe=r(iA," \u2014 "),fS=n(iA,"A",{href:!0});var zwe=s(fS);ZWe=r(zwe,"CanineConfig"),zwe.forEach(t),eQe=r(iA," (CANINE model)"),iA.forEach(t),oQe=i(L),Wf=n(L,"LI",{});var dA=s(Wf);ute=n(dA,"STRONG",{});var Wwe=s(ute);rQe=r(Wwe,"clip"),Wwe.forEach(t),tQe=r(dA," \u2014 "),mS=n(dA,"A",{href:!0});var Qwe=s(mS);aQe=r(Qwe,"CLIPConfig"),Qwe.forEach(t),nQe=r(dA," (CLIP model)"),dA.forEach(t),sQe=i(L),Qf=n(L,"LI",{});var cA=s(Qf);_te=n(cA,"STRONG",{});var Hwe=s(_te);lQe=r(Hwe,"convbert"),Hwe.forEach(t),iQe=r(cA," \u2014 "),gS=n(cA,"A",{href:!0});var Uwe=s(gS);dQe=r(Uwe,"ConvBertConfig"),Uwe.forEach(t),cQe=r(cA," (ConvBERT model)"),cA.forEach(t),fQe=i(L),Hf=n(L,"LI",{});var fA=s(Hf);bte=n(fA,"STRONG",{});var Jwe=s(bte);mQe=r(Jwe,"convnext"),Jwe.forEach(t),gQe=r(fA," \u2014 "),hS=n(fA,"A",{href:!0});var Ywe=s(hS);hQe=r(Ywe,"ConvNextConfig"),Ywe.forEach(t),pQe=r(fA," (ConvNeXT model)"),fA.forEach(t),uQe=i(L),Uf=n(L,"LI",{});var mA=s(Uf);vte=n(mA,"STRONG",{});var Kwe=s(vte);_Qe=r(Kwe,"ctrl"),Kwe.forEach(t),bQe=r(mA," \u2014 "),pS=n(mA,"A",{href:!0});var Zwe=s(pS);vQe=r(Zwe,"CTRLConfig"),Zwe.forEach(t),FQe=r(mA," (CTRL model)"),mA.forEach(t),TQe=i(L),Jf=n(L,"LI",{});var gA=s(Jf);Fte=n(gA,"STRONG",{});var eAe=s(Fte);MQe=r(eAe,"cvt"),eAe.forEach(t),EQe=r(gA," \u2014 "),uS=n(gA,"A",{href:!0});var oAe=s(uS);CQe=r(oAe,"CvtConfig"),oAe.forEach(t),wQe=r(gA," (CvT model)"),gA.forEach(t),AQe=i(L),Yf=n(L,"LI",{});var hA=s(Yf);Tte=n(hA,"STRONG",{});var rAe=s(Tte);LQe=r(rAe,"data2vec-audio"),rAe.forEach(t),yQe=r(hA," \u2014 "),_S=n(hA,"A",{href:!0});var tAe=s(_S);xQe=r(tAe,"Data2VecAudioConfig"),tAe.forEach(t),$Qe=r(hA," (Data2VecAudio model)"),hA.forEach(t),kQe=i(L),Kf=n(L,"LI",{});var pA=s(Kf);Mte=n(pA,"STRONG",{});var aAe=s(Mte);SQe=r(aAe,"data2vec-text"),aAe.forEach(t),RQe=r(pA," \u2014 "),bS=n(pA,"A",{href:!0});var nAe=s(bS);PQe=r(nAe,"Data2VecTextConfig"),nAe.forEach(t),BQe=r(pA," (Data2VecText model)"),pA.forEach(t),IQe=i(L),Zf=n(L,"LI",{});var uA=s(Zf);Ete=n(uA,"STRONG",{});var sAe=s(Ete);NQe=r(sAe,"data2vec-vision"),sAe.forEach(t),qQe=r(uA," \u2014 "),vS=n(uA,"A",{href:!0});var lAe=s(vS);jQe=r(lAe,"Data2VecVisionConfig"),lAe.forEach(t),DQe=r(uA," (Data2VecVision model)"),uA.forEach(t),GQe=i(L),em=n(L,"LI",{});var _A=s(em);Cte=n(_A,"STRONG",{});var iAe=s(Cte);OQe=r(iAe,"deberta"),iAe.forEach(t),VQe=r(_A," \u2014 "),FS=n(_A,"A",{href:!0});var dAe=s(FS);XQe=r(dAe,"DebertaConfig"),dAe.forEach(t),zQe=r(_A," (DeBERTa model)"),_A.forEach(t),WQe=i(L),om=n(L,"LI",{});var bA=s(om);wte=n(bA,"STRONG",{});var cAe=s(wte);QQe=r(cAe,"deberta-v2"),cAe.forEach(t),HQe=r(bA," \u2014 "),TS=n(bA,"A",{href:!0});var fAe=s(TS);UQe=r(fAe,"DebertaV2Config"),fAe.forEach(t),JQe=r(bA," (DeBERTa-v2 model)"),bA.forEach(t),YQe=i(L),rm=n(L,"LI",{});var vA=s(rm);Ate=n(vA,"STRONG",{});var mAe=s(Ate);KQe=r(mAe,"decision_transformer"),mAe.forEach(t),ZQe=r(vA," \u2014 "),MS=n(vA,"A",{href:!0});var gAe=s(MS);eHe=r(gAe,"DecisionTransformerConfig"),gAe.forEach(t),oHe=r(vA," (Decision Transformer model)"),vA.forEach(t),rHe=i(L),tm=n(L,"LI",{});var FA=s(tm);Lte=n(FA,"STRONG",{});var SJr=s(Lte);tHe=r(SJr,"deit"),SJr.forEach(t),aHe=r(FA," \u2014 "),ES=n(FA,"A",{href:!0});var RJr=s(ES);nHe=r(RJr,"DeiTConfig"),RJr.forEach(t),sHe=r(FA," (DeiT model)"),FA.forEach(t),lHe=i(L),am=n(L,"LI",{});var hAe=s(am);yte=n(hAe,"STRONG",{});var PJr=s(yte);iHe=r(PJr,"detr"),PJr.forEach(t),dHe=r(hAe," \u2014 "),CS=n(hAe,"A",{href:!0});var BJr=s(CS);cHe=r(BJr,"DetrConfig"),BJr.forEach(t),fHe=r(hAe," (DETR model)"),hAe.forEach(t),mHe=i(L),nm=n(L,"LI",{});var pAe=s(nm);xte=n(pAe,"STRONG",{});var IJr=s(xte);gHe=r(IJr,"distilbert"),IJr.forEach(t),hHe=r(pAe," \u2014 "),wS=n(pAe,"A",{href:!0});var NJr=s(wS);pHe=r(NJr,"DistilBertConfig"),NJr.forEach(t),uHe=r(pAe," (DistilBERT model)"),pAe.forEach(t),_He=i(L),sm=n(L,"LI",{});var uAe=s(sm);$te=n(uAe,"STRONG",{});var qJr=s($te);bHe=r(qJr,"dpr"),qJr.forEach(t),vHe=r(uAe," \u2014 "),AS=n(uAe,"A",{href:!0});var jJr=s(AS);FHe=r(jJr,"DPRConfig"),jJr.forEach(t),THe=r(uAe," (DPR model)"),uAe.forEach(t),MHe=i(L),lm=n(L,"LI",{});var _Ae=s(lm);kte=n(_Ae,"STRONG",{});var DJr=s(kte);EHe=r(DJr,"dpt"),DJr.forEach(t),CHe=r(_Ae," \u2014 "),LS=n(_Ae,"A",{href:!0});var GJr=s(LS);wHe=r(GJr,"DPTConfig"),GJr.forEach(t),AHe=r(_Ae," (DPT model)"),_Ae.forEach(t),LHe=i(L),im=n(L,"LI",{});var bAe=s(im);Ste=n(bAe,"STRONG",{});var OJr=s(Ste);yHe=r(OJr,"electra"),OJr.forEach(t),xHe=r(bAe," \u2014 "),yS=n(bAe,"A",{href:!0});var VJr=s(yS);$He=r(VJr,"ElectraConfig"),VJr.forEach(t),kHe=r(bAe," (ELECTRA model)"),bAe.forEach(t),SHe=i(L),dm=n(L,"LI",{});var vAe=s(dm);Rte=n(vAe,"STRONG",{});var XJr=s(Rte);RHe=r(XJr,"encoder-decoder"),XJr.forEach(t),PHe=r(vAe," \u2014 "),xS=n(vAe,"A",{href:!0});var zJr=s(xS);BHe=r(zJr,"EncoderDecoderConfig"),zJr.forEach(t),IHe=r(vAe," (Encoder decoder model)"),vAe.forEach(t),NHe=i(L),cm=n(L,"LI",{});var FAe=s(cm);Pte=n(FAe,"STRONG",{});var WJr=s(Pte);qHe=r(WJr,"flaubert"),WJr.forEach(t),jHe=r(FAe," \u2014 "),$S=n(FAe,"A",{href:!0});var QJr=s($S);DHe=r(QJr,"FlaubertConfig"),QJr.forEach(t),GHe=r(FAe," (FlauBERT model)"),FAe.forEach(t),OHe=i(L),fm=n(L,"LI",{});var TAe=s(fm);Bte=n(TAe,"STRONG",{});var HJr=s(Bte);VHe=r(HJr,"flava"),HJr.forEach(t),XHe=r(TAe," \u2014 "),kS=n(TAe,"A",{href:!0});var UJr=s(kS);zHe=r(UJr,"FlavaConfig"),UJr.forEach(t),WHe=r(TAe," (FLAVA model)"),TAe.forEach(t),QHe=i(L),mm=n(L,"LI",{});var MAe=s(mm);Ite=n(MAe,"STRONG",{});var JJr=s(Ite);HHe=r(JJr,"fnet"),JJr.forEach(t),UHe=r(MAe," \u2014 "),SS=n(MAe,"A",{href:!0});var YJr=s(SS);JHe=r(YJr,"FNetConfig"),YJr.forEach(t),YHe=r(MAe," (FNet model)"),MAe.forEach(t),KHe=i(L),gm=n(L,"LI",{});var EAe=s(gm);Nte=n(EAe,"STRONG",{});var KJr=s(Nte);ZHe=r(KJr,"fsmt"),KJr.forEach(t),eUe=r(EAe," \u2014 "),RS=n(EAe,"A",{href:!0});var ZJr=s(RS);oUe=r(ZJr,"FSMTConfig"),ZJr.forEach(t),rUe=r(EAe," (FairSeq Machine-Translation model)"),EAe.forEach(t),tUe=i(L),hm=n(L,"LI",{});var CAe=s(hm);qte=n(CAe,"STRONG",{});var eYr=s(qte);aUe=r(eYr,"funnel"),eYr.forEach(t),nUe=r(CAe," \u2014 "),PS=n(CAe,"A",{href:!0});var oYr=s(PS);sUe=r(oYr,"FunnelConfig"),oYr.forEach(t),lUe=r(CAe," (Funnel Transformer model)"),CAe.forEach(t),iUe=i(L),pm=n(L,"LI",{});var wAe=s(pm);jte=n(wAe,"STRONG",{});var rYr=s(jte);dUe=r(rYr,"glpn"),rYr.forEach(t),cUe=r(wAe," \u2014 "),BS=n(wAe,"A",{href:!0});var tYr=s(BS);fUe=r(tYr,"GLPNConfig"),tYr.forEach(t),mUe=r(wAe," (GLPN model)"),wAe.forEach(t),gUe=i(L),um=n(L,"LI",{});var AAe=s(um);Dte=n(AAe,"STRONG",{});var aYr=s(Dte);hUe=r(aYr,"gpt2"),aYr.forEach(t),pUe=r(AAe," \u2014 "),IS=n(AAe,"A",{href:!0});var nYr=s(IS);uUe=r(nYr,"GPT2Config"),nYr.forEach(t),_Ue=r(AAe," (OpenAI GPT-2 model)"),AAe.forEach(t),bUe=i(L),_m=n(L,"LI",{});var LAe=s(_m);Gte=n(LAe,"STRONG",{});var sYr=s(Gte);vUe=r(sYr,"gpt_neo"),sYr.forEach(t),FUe=r(LAe," \u2014 "),NS=n(LAe,"A",{href:!0});var lYr=s(NS);TUe=r(lYr,"GPTNeoConfig"),lYr.forEach(t),MUe=r(LAe," (GPT Neo model)"),LAe.forEach(t),EUe=i(L),bm=n(L,"LI",{});var yAe=s(bm);Ote=n(yAe,"STRONG",{});var iYr=s(Ote);CUe=r(iYr,"gpt_neox"),iYr.forEach(t),wUe=r(yAe," \u2014 "),qS=n(yAe,"A",{href:!0});var dYr=s(qS);AUe=r(dYr,"GPTNeoXConfig"),dYr.forEach(t),LUe=r(yAe," (GPT NeoX model)"),yAe.forEach(t),yUe=i(L),vm=n(L,"LI",{});var xAe=s(vm);Vte=n(xAe,"STRONG",{});var cYr=s(Vte);xUe=r(cYr,"gptj"),cYr.forEach(t),$Ue=r(xAe," \u2014 "),jS=n(xAe,"A",{href:!0});var fYr=s(jS);kUe=r(fYr,"GPTJConfig"),fYr.forEach(t),SUe=r(xAe," (GPT-J model)"),xAe.forEach(t),RUe=i(L),Fm=n(L,"LI",{});var $Ae=s(Fm);Xte=n($Ae,"STRONG",{});var mYr=s(Xte);PUe=r(mYr,"hubert"),mYr.forEach(t),BUe=r($Ae," \u2014 "),DS=n($Ae,"A",{href:!0});var gYr=s(DS);IUe=r(gYr,"HubertConfig"),gYr.forEach(t),NUe=r($Ae," (Hubert model)"),$Ae.forEach(t),qUe=i(L),Tm=n(L,"LI",{});var kAe=s(Tm);zte=n(kAe,"STRONG",{});var hYr=s(zte);jUe=r(hYr,"ibert"),hYr.forEach(t),DUe=r(kAe," \u2014 "),GS=n(kAe,"A",{href:!0});var pYr=s(GS);GUe=r(pYr,"IBertConfig"),pYr.forEach(t),OUe=r(kAe," (I-BERT model)"),kAe.forEach(t),VUe=i(L),Mm=n(L,"LI",{});var SAe=s(Mm);Wte=n(SAe,"STRONG",{});var uYr=s(Wte);XUe=r(uYr,"imagegpt"),uYr.forEach(t),zUe=r(SAe," \u2014 "),OS=n(SAe,"A",{href:!0});var _Yr=s(OS);WUe=r(_Yr,"ImageGPTConfig"),_Yr.forEach(t),QUe=r(SAe," (ImageGPT model)"),SAe.forEach(t),HUe=i(L),Em=n(L,"LI",{});var RAe=s(Em);Qte=n(RAe,"STRONG",{});var bYr=s(Qte);UUe=r(bYr,"layoutlm"),bYr.forEach(t),JUe=r(RAe," \u2014 "),VS=n(RAe,"A",{href:!0});var vYr=s(VS);YUe=r(vYr,"LayoutLMConfig"),vYr.forEach(t),KUe=r(RAe," (LayoutLM model)"),RAe.forEach(t),ZUe=i(L),Cm=n(L,"LI",{});var PAe=s(Cm);Hte=n(PAe,"STRONG",{});var FYr=s(Hte);eJe=r(FYr,"layoutlmv2"),FYr.forEach(t),oJe=r(PAe," \u2014 "),XS=n(PAe,"A",{href:!0});var TYr=s(XS);rJe=r(TYr,"LayoutLMv2Config"),TYr.forEach(t),tJe=r(PAe," (LayoutLMv2 model)"),PAe.forEach(t),aJe=i(L),wm=n(L,"LI",{});var BAe=s(wm);Ute=n(BAe,"STRONG",{});var MYr=s(Ute);nJe=r(MYr,"layoutlmv3"),MYr.forEach(t),sJe=r(BAe," \u2014 "),zS=n(BAe,"A",{href:!0});var EYr=s(zS);lJe=r(EYr,"LayoutLMv3Config"),EYr.forEach(t),iJe=r(BAe," (LayoutLMv3 model)"),BAe.forEach(t),dJe=i(L),Am=n(L,"LI",{});var IAe=s(Am);Jte=n(IAe,"STRONG",{});var CYr=s(Jte);cJe=r(CYr,"led"),CYr.forEach(t),fJe=r(IAe," \u2014 "),WS=n(IAe,"A",{href:!0});var wYr=s(WS);mJe=r(wYr,"LEDConfig"),wYr.forEach(t),gJe=r(IAe," (LED model)"),IAe.forEach(t),hJe=i(L),Lm=n(L,"LI",{});var NAe=s(Lm);Yte=n(NAe,"STRONG",{});var AYr=s(Yte);pJe=r(AYr,"levit"),AYr.forEach(t),uJe=r(NAe," \u2014 "),QS=n(NAe,"A",{href:!0});var LYr=s(QS);_Je=r(LYr,"LevitConfig"),LYr.forEach(t),bJe=r(NAe," (LeViT model)"),NAe.forEach(t),vJe=i(L),ym=n(L,"LI",{});var qAe=s(ym);Kte=n(qAe,"STRONG",{});var yYr=s(Kte);FJe=r(yYr,"longformer"),yYr.forEach(t),TJe=r(qAe," \u2014 "),HS=n(qAe,"A",{href:!0});var xYr=s(HS);MJe=r(xYr,"LongformerConfig"),xYr.forEach(t),EJe=r(qAe," (Longformer model)"),qAe.forEach(t),CJe=i(L),xm=n(L,"LI",{});var jAe=s(xm);Zte=n(jAe,"STRONG",{});var $Yr=s(Zte);wJe=r($Yr,"longt5"),$Yr.forEach(t),AJe=r(jAe," \u2014 "),US=n(jAe,"A",{href:!0});var kYr=s(US);LJe=r(kYr,"LongT5Config"),kYr.forEach(t),yJe=r(jAe," (LongT5 model)"),jAe.forEach(t),xJe=i(L),$m=n(L,"LI",{});var DAe=s($m);eae=n(DAe,"STRONG",{});var SYr=s(eae);$Je=r(SYr,"luke"),SYr.forEach(t),kJe=r(DAe," \u2014 "),JS=n(DAe,"A",{href:!0});var RYr=s(JS);SJe=r(RYr,"LukeConfig"),RYr.forEach(t),RJe=r(DAe," (LUKE model)"),DAe.forEach(t),PJe=i(L),km=n(L,"LI",{});var GAe=s(km);oae=n(GAe,"STRONG",{});var PYr=s(oae);BJe=r(PYr,"lxmert"),PYr.forEach(t),IJe=r(GAe," \u2014 "),YS=n(GAe,"A",{href:!0});var BYr=s(YS);NJe=r(BYr,"LxmertConfig"),BYr.forEach(t),qJe=r(GAe," (LXMERT model)"),GAe.forEach(t),jJe=i(L),Sm=n(L,"LI",{});var OAe=s(Sm);rae=n(OAe,"STRONG",{});var IYr=s(rae);DJe=r(IYr,"m2m_100"),IYr.forEach(t),GJe=r(OAe," \u2014 "),KS=n(OAe,"A",{href:!0});var NYr=s(KS);OJe=r(NYr,"M2M100Config"),NYr.forEach(t),VJe=r(OAe," (M2M100 model)"),OAe.forEach(t),XJe=i(L),Rm=n(L,"LI",{});var VAe=s(Rm);tae=n(VAe,"STRONG",{});var qYr=s(tae);zJe=r(qYr,"marian"),qYr.forEach(t),WJe=r(VAe," \u2014 "),ZS=n(VAe,"A",{href:!0});var jYr=s(ZS);QJe=r(jYr,"MarianConfig"),jYr.forEach(t),HJe=r(VAe," (Marian model)"),VAe.forEach(t),UJe=i(L),Pm=n(L,"LI",{});var XAe=s(Pm);aae=n(XAe,"STRONG",{});var DYr=s(aae);JJe=r(DYr,"maskformer"),DYr.forEach(t),YJe=r(XAe," \u2014 "),eR=n(XAe,"A",{href:!0});var GYr=s(eR);KJe=r(GYr,"MaskFormerConfig"),GYr.forEach(t),ZJe=r(XAe," (MaskFormer model)"),XAe.forEach(t),eYe=i(L),Bm=n(L,"LI",{});var zAe=s(Bm);nae=n(zAe,"STRONG",{});var OYr=s(nae);oYe=r(OYr,"mbart"),OYr.forEach(t),rYe=r(zAe," \u2014 "),oR=n(zAe,"A",{href:!0});var VYr=s(oR);tYe=r(VYr,"MBartConfig"),VYr.forEach(t),aYe=r(zAe," (mBART model)"),zAe.forEach(t),nYe=i(L),Im=n(L,"LI",{});var WAe=s(Im);sae=n(WAe,"STRONG",{});var XYr=s(sae);sYe=r(XYr,"mctct"),XYr.forEach(t),lYe=r(WAe," \u2014 "),rR=n(WAe,"A",{href:!0});var zYr=s(rR);iYe=r(zYr,"MCTCTConfig"),zYr.forEach(t),dYe=r(WAe," (M-CTC-T model)"),WAe.forEach(t),cYe=i(L),Nm=n(L,"LI",{});var QAe=s(Nm);lae=n(QAe,"STRONG",{});var WYr=s(lae);fYe=r(WYr,"megatron-bert"),WYr.forEach(t),mYe=r(QAe," \u2014 "),tR=n(QAe,"A",{href:!0});var QYr=s(tR);gYe=r(QYr,"MegatronBertConfig"),QYr.forEach(t),hYe=r(QAe," (Megatron-BERT model)"),QAe.forEach(t),pYe=i(L),qm=n(L,"LI",{});var HAe=s(qm);iae=n(HAe,"STRONG",{});var HYr=s(iae);uYe=r(HYr,"mobilebert"),HYr.forEach(t),_Ye=r(HAe," \u2014 "),aR=n(HAe,"A",{href:!0});var UYr=s(aR);bYe=r(UYr,"MobileBertConfig"),UYr.forEach(t),vYe=r(HAe," (MobileBERT model)"),HAe.forEach(t),FYe=i(L),jm=n(L,"LI",{});var UAe=s(jm);dae=n(UAe,"STRONG",{});var JYr=s(dae);TYe=r(JYr,"mpnet"),JYr.forEach(t),MYe=r(UAe," \u2014 "),nR=n(UAe,"A",{href:!0});var YYr=s(nR);EYe=r(YYr,"MPNetConfig"),YYr.forEach(t),CYe=r(UAe," (MPNet model)"),UAe.forEach(t),wYe=i(L),Dm=n(L,"LI",{});var JAe=s(Dm);cae=n(JAe,"STRONG",{});var KYr=s(cae);AYe=r(KYr,"mt5"),KYr.forEach(t),LYe=r(JAe," \u2014 "),sR=n(JAe,"A",{href:!0});var ZYr=s(sR);yYe=r(ZYr,"MT5Config"),ZYr.forEach(t),xYe=r(JAe," (MT5 model)"),JAe.forEach(t),$Ye=i(L),Gm=n(L,"LI",{});var YAe=s(Gm);fae=n(YAe,"STRONG",{});var eKr=s(fae);kYe=r(eKr,"nystromformer"),eKr.forEach(t),SYe=r(YAe," \u2014 "),lR=n(YAe,"A",{href:!0});var oKr=s(lR);RYe=r(oKr,"NystromformerConfig"),oKr.forEach(t),PYe=r(YAe," (Nystr\xF6mformer model)"),YAe.forEach(t),BYe=i(L),Om=n(L,"LI",{});var KAe=s(Om);mae=n(KAe,"STRONG",{});var rKr=s(mae);IYe=r(rKr,"openai-gpt"),rKr.forEach(t),NYe=r(KAe," \u2014 "),iR=n(KAe,"A",{href:!0});var tKr=s(iR);qYe=r(tKr,"OpenAIGPTConfig"),tKr.forEach(t),jYe=r(KAe," (OpenAI GPT model)"),KAe.forEach(t),DYe=i(L),Vm=n(L,"LI",{});var ZAe=s(Vm);gae=n(ZAe,"STRONG",{});var aKr=s(gae);GYe=r(aKr,"opt"),aKr.forEach(t),OYe=r(ZAe," \u2014 "),dR=n(ZAe,"A",{href:!0});var nKr=s(dR);VYe=r(nKr,"OPTConfig"),nKr.forEach(t),XYe=r(ZAe," (OPT model)"),ZAe.forEach(t),zYe=i(L),Xm=n(L,"LI",{});var eLe=s(Xm);hae=n(eLe,"STRONG",{});var sKr=s(hae);WYe=r(sKr,"pegasus"),sKr.forEach(t),QYe=r(eLe," \u2014 "),cR=n(eLe,"A",{href:!0});var lKr=s(cR);HYe=r(lKr,"PegasusConfig"),lKr.forEach(t),UYe=r(eLe," (Pegasus model)"),eLe.forEach(t),JYe=i(L),zm=n(L,"LI",{});var oLe=s(zm);pae=n(oLe,"STRONG",{});var iKr=s(pae);YYe=r(iKr,"perceiver"),iKr.forEach(t),KYe=r(oLe," \u2014 "),fR=n(oLe,"A",{href:!0});var dKr=s(fR);ZYe=r(dKr,"PerceiverConfig"),dKr.forEach(t),eKe=r(oLe," (Perceiver model)"),oLe.forEach(t),oKe=i(L),Wm=n(L,"LI",{});var rLe=s(Wm);uae=n(rLe,"STRONG",{});var cKr=s(uae);rKe=r(cKr,"plbart"),cKr.forEach(t),tKe=r(rLe," \u2014 "),mR=n(rLe,"A",{href:!0});var fKr=s(mR);aKe=r(fKr,"PLBartConfig"),fKr.forEach(t),nKe=r(rLe," (PLBart model)"),rLe.forEach(t),sKe=i(L),Qm=n(L,"LI",{});var tLe=s(Qm);_ae=n(tLe,"STRONG",{});var mKr=s(_ae);lKe=r(mKr,"poolformer"),mKr.forEach(t),iKe=r(tLe," \u2014 "),gR=n(tLe,"A",{href:!0});var gKr=s(gR);dKe=r(gKr,"PoolFormerConfig"),gKr.forEach(t),cKe=r(tLe," (PoolFormer model)"),tLe.forEach(t),fKe=i(L),Hm=n(L,"LI",{});var aLe=s(Hm);bae=n(aLe,"STRONG",{});var hKr=s(bae);mKe=r(hKr,"prophetnet"),hKr.forEach(t),gKe=r(aLe," \u2014 "),hR=n(aLe,"A",{href:!0});var pKr=s(hR);hKe=r(pKr,"ProphetNetConfig"),pKr.forEach(t),pKe=r(aLe," (ProphetNet model)"),aLe.forEach(t),uKe=i(L),Um=n(L,"LI",{});var nLe=s(Um);vae=n(nLe,"STRONG",{});var uKr=s(vae);_Ke=r(uKr,"qdqbert"),uKr.forEach(t),bKe=r(nLe," \u2014 "),pR=n(nLe,"A",{href:!0});var _Kr=s(pR);vKe=r(_Kr,"QDQBertConfig"),_Kr.forEach(t),FKe=r(nLe," (QDQBert model)"),nLe.forEach(t),TKe=i(L),Jm=n(L,"LI",{});var sLe=s(Jm);Fae=n(sLe,"STRONG",{});var bKr=s(Fae);MKe=r(bKr,"rag"),bKr.forEach(t),EKe=r(sLe," \u2014 "),uR=n(sLe,"A",{href:!0});var vKr=s(uR);CKe=r(vKr,"RagConfig"),vKr.forEach(t),wKe=r(sLe," (RAG model)"),sLe.forEach(t),AKe=i(L),Ym=n(L,"LI",{});var lLe=s(Ym);Tae=n(lLe,"STRONG",{});var FKr=s(Tae);LKe=r(FKr,"realm"),FKr.forEach(t),yKe=r(lLe," \u2014 "),_R=n(lLe,"A",{href:!0});var TKr=s(_R);xKe=r(TKr,"RealmConfig"),TKr.forEach(t),$Ke=r(lLe," (REALM model)"),lLe.forEach(t),kKe=i(L),Km=n(L,"LI",{});var iLe=s(Km);Mae=n(iLe,"STRONG",{});var MKr=s(Mae);SKe=r(MKr,"reformer"),MKr.forEach(t),RKe=r(iLe," \u2014 "),bR=n(iLe,"A",{href:!0});var EKr=s(bR);PKe=r(EKr,"ReformerConfig"),EKr.forEach(t),BKe=r(iLe," (Reformer model)"),iLe.forEach(t),IKe=i(L),Zm=n(L,"LI",{});var dLe=s(Zm);Eae=n(dLe,"STRONG",{});var CKr=s(Eae);NKe=r(CKr,"regnet"),CKr.forEach(t),qKe=r(dLe," \u2014 "),vR=n(dLe,"A",{href:!0});var wKr=s(vR);jKe=r(wKr,"RegNetConfig"),wKr.forEach(t),DKe=r(dLe," (RegNet model)"),dLe.forEach(t),GKe=i(L),eg=n(L,"LI",{});var cLe=s(eg);Cae=n(cLe,"STRONG",{});var AKr=s(Cae);OKe=r(AKr,"rembert"),AKr.forEach(t),VKe=r(cLe," \u2014 "),FR=n(cLe,"A",{href:!0});var LKr=s(FR);XKe=r(LKr,"RemBertConfig"),LKr.forEach(t),zKe=r(cLe," (RemBERT model)"),cLe.forEach(t),WKe=i(L),og=n(L,"LI",{});var fLe=s(og);wae=n(fLe,"STRONG",{});var yKr=s(wae);QKe=r(yKr,"resnet"),yKr.forEach(t),HKe=r(fLe," \u2014 "),TR=n(fLe,"A",{href:!0});var xKr=s(TR);UKe=r(xKr,"ResNetConfig"),xKr.forEach(t),JKe=r(fLe," (ResNet model)"),fLe.forEach(t),YKe=i(L),rg=n(L,"LI",{});var mLe=s(rg);Aae=n(mLe,"STRONG",{});var $Kr=s(Aae);KKe=r($Kr,"retribert"),$Kr.forEach(t),ZKe=r(mLe," \u2014 "),MR=n(mLe,"A",{href:!0});var kKr=s(MR);eZe=r(kKr,"RetriBertConfig"),kKr.forEach(t),oZe=r(mLe," (RetriBERT model)"),mLe.forEach(t),rZe=i(L),tg=n(L,"LI",{});var gLe=s(tg);Lae=n(gLe,"STRONG",{});var SKr=s(Lae);tZe=r(SKr,"roberta"),SKr.forEach(t),aZe=r(gLe," \u2014 "),ER=n(gLe,"A",{href:!0});var RKr=s(ER);nZe=r(RKr,"RobertaConfig"),RKr.forEach(t),sZe=r(gLe," (RoBERTa model)"),gLe.forEach(t),lZe=i(L),ag=n(L,"LI",{});var hLe=s(ag);yae=n(hLe,"STRONG",{});var PKr=s(yae);iZe=r(PKr,"roformer"),PKr.forEach(t),dZe=r(hLe," \u2014 "),CR=n(hLe,"A",{href:!0});var BKr=s(CR);cZe=r(BKr,"RoFormerConfig"),BKr.forEach(t),fZe=r(hLe," (RoFormer model)"),hLe.forEach(t),mZe=i(L),ng=n(L,"LI",{});var pLe=s(ng);xae=n(pLe,"STRONG",{});var IKr=s(xae);gZe=r(IKr,"segformer"),IKr.forEach(t),hZe=r(pLe," \u2014 "),wR=n(pLe,"A",{href:!0});var NKr=s(wR);pZe=r(NKr,"SegformerConfig"),NKr.forEach(t),uZe=r(pLe," (SegFormer model)"),pLe.forEach(t),_Ze=i(L),sg=n(L,"LI",{});var uLe=s(sg);$ae=n(uLe,"STRONG",{});var qKr=s($ae);bZe=r(qKr,"sew"),qKr.forEach(t),vZe=r(uLe," \u2014 "),AR=n(uLe,"A",{href:!0});var jKr=s(AR);FZe=r(jKr,"SEWConfig"),jKr.forEach(t),TZe=r(uLe," (SEW model)"),uLe.forEach(t),MZe=i(L),lg=n(L,"LI",{});var _Le=s(lg);kae=n(_Le,"STRONG",{});var DKr=s(kae);EZe=r(DKr,"sew-d"),DKr.forEach(t),CZe=r(_Le," \u2014 "),LR=n(_Le,"A",{href:!0});var GKr=s(LR);wZe=r(GKr,"SEWDConfig"),GKr.forEach(t),AZe=r(_Le," (SEW-D model)"),_Le.forEach(t),LZe=i(L),ig=n(L,"LI",{});var bLe=s(ig);Sae=n(bLe,"STRONG",{});var OKr=s(Sae);yZe=r(OKr,"speech-encoder-decoder"),OKr.forEach(t),xZe=r(bLe," \u2014 "),yR=n(bLe,"A",{href:!0});var VKr=s(yR);$Ze=r(VKr,"SpeechEncoderDecoderConfig"),VKr.forEach(t),kZe=r(bLe," (Speech Encoder decoder model)"),bLe.forEach(t),SZe=i(L),dg=n(L,"LI",{});var vLe=s(dg);Rae=n(vLe,"STRONG",{});var XKr=s(Rae);RZe=r(XKr,"speech_to_text"),XKr.forEach(t),PZe=r(vLe," \u2014 "),xR=n(vLe,"A",{href:!0});var zKr=s(xR);BZe=r(zKr,"Speech2TextConfig"),zKr.forEach(t),IZe=r(vLe," (Speech2Text model)"),vLe.forEach(t),NZe=i(L),cg=n(L,"LI",{});var FLe=s(cg);Pae=n(FLe,"STRONG",{});var WKr=s(Pae);qZe=r(WKr,"speech_to_text_2"),WKr.forEach(t),jZe=r(FLe," \u2014 "),$R=n(FLe,"A",{href:!0});var QKr=s($R);DZe=r(QKr,"Speech2Text2Config"),QKr.forEach(t),GZe=r(FLe," (Speech2Text2 model)"),FLe.forEach(t),OZe=i(L),fg=n(L,"LI",{});var TLe=s(fg);Bae=n(TLe,"STRONG",{});var HKr=s(Bae);VZe=r(HKr,"splinter"),HKr.forEach(t),XZe=r(TLe," \u2014 "),kR=n(TLe,"A",{href:!0});var UKr=s(kR);zZe=r(UKr,"SplinterConfig"),UKr.forEach(t),WZe=r(TLe," (Splinter model)"),TLe.forEach(t),QZe=i(L),mg=n(L,"LI",{});var MLe=s(mg);Iae=n(MLe,"STRONG",{});var JKr=s(Iae);HZe=r(JKr,"squeezebert"),JKr.forEach(t),UZe=r(MLe," \u2014 "),SR=n(MLe,"A",{href:!0});var YKr=s(SR);JZe=r(YKr,"SqueezeBertConfig"),YKr.forEach(t),YZe=r(MLe," (SqueezeBERT model)"),MLe.forEach(t),KZe=i(L),gg=n(L,"LI",{});var ELe=s(gg);Nae=n(ELe,"STRONG",{});var KKr=s(Nae);ZZe=r(KKr,"swin"),KKr.forEach(t),eeo=r(ELe," \u2014 "),RR=n(ELe,"A",{href:!0});var ZKr=s(RR);oeo=r(ZKr,"SwinConfig"),ZKr.forEach(t),reo=r(ELe," (Swin Transformer model)"),ELe.forEach(t),teo=i(L),hg=n(L,"LI",{});var CLe=s(hg);qae=n(CLe,"STRONG",{});var eZr=s(qae);aeo=r(eZr,"t5"),eZr.forEach(t),neo=r(CLe," \u2014 "),PR=n(CLe,"A",{href:!0});var oZr=s(PR);seo=r(oZr,"T5Config"),oZr.forEach(t),leo=r(CLe," (T5 model)"),CLe.forEach(t),ieo=i(L),pg=n(L,"LI",{});var wLe=s(pg);jae=n(wLe,"STRONG",{});var rZr=s(jae);deo=r(rZr,"tapas"),rZr.forEach(t),ceo=r(wLe," \u2014 "),BR=n(wLe,"A",{href:!0});var tZr=s(BR);feo=r(tZr,"TapasConfig"),tZr.forEach(t),meo=r(wLe," (TAPAS model)"),wLe.forEach(t),geo=i(L),ug=n(L,"LI",{});var ALe=s(ug);Dae=n(ALe,"STRONG",{});var aZr=s(Dae);heo=r(aZr,"trajectory_transformer"),aZr.forEach(t),peo=r(ALe," \u2014 "),IR=n(ALe,"A",{href:!0});var nZr=s(IR);ueo=r(nZr,"TrajectoryTransformerConfig"),nZr.forEach(t),_eo=r(ALe," (Trajectory Transformer model)"),ALe.forEach(t),beo=i(L),_g=n(L,"LI",{});var LLe=s(_g);Gae=n(LLe,"STRONG",{});var sZr=s(Gae);veo=r(sZr,"transfo-xl"),sZr.forEach(t),Feo=r(LLe," \u2014 "),NR=n(LLe,"A",{href:!0});var lZr=s(NR);Teo=r(lZr,"TransfoXLConfig"),lZr.forEach(t),Meo=r(LLe," (Transformer-XL model)"),LLe.forEach(t),Eeo=i(L),bg=n(L,"LI",{});var yLe=s(bg);Oae=n(yLe,"STRONG",{});var iZr=s(Oae);Ceo=r(iZr,"trocr"),iZr.forEach(t),weo=r(yLe," \u2014 "),qR=n(yLe,"A",{href:!0});var dZr=s(qR);Aeo=r(dZr,"TrOCRConfig"),dZr.forEach(t),Leo=r(yLe," (TrOCR model)"),yLe.forEach(t),yeo=i(L),vg=n(L,"LI",{});var xLe=s(vg);Vae=n(xLe,"STRONG",{});var cZr=s(Vae);xeo=r(cZr,"unispeech"),cZr.forEach(t),$eo=r(xLe," \u2014 "),jR=n(xLe,"A",{href:!0});var fZr=s(jR);keo=r(fZr,"UniSpeechConfig"),fZr.forEach(t),Seo=r(xLe," (UniSpeech model)"),xLe.forEach(t),Reo=i(L),Fg=n(L,"LI",{});var $Le=s(Fg);Xae=n($Le,"STRONG",{});var mZr=s(Xae);Peo=r(mZr,"unispeech-sat"),mZr.forEach(t),Beo=r($Le," \u2014 "),DR=n($Le,"A",{href:!0});var gZr=s(DR);Ieo=r(gZr,"UniSpeechSatConfig"),gZr.forEach(t),Neo=r($Le," (UniSpeechSat model)"),$Le.forEach(t),qeo=i(L),Tg=n(L,"LI",{});var kLe=s(Tg);zae=n(kLe,"STRONG",{});var hZr=s(zae);jeo=r(hZr,"van"),hZr.forEach(t),Deo=r(kLe," \u2014 "),GR=n(kLe,"A",{href:!0});var pZr=s(GR);Geo=r(pZr,"VanConfig"),pZr.forEach(t),Oeo=r(kLe," (VAN model)"),kLe.forEach(t),Veo=i(L),Mg=n(L,"LI",{});var SLe=s(Mg);Wae=n(SLe,"STRONG",{});var uZr=s(Wae);Xeo=r(uZr,"vilt"),uZr.forEach(t),zeo=r(SLe," \u2014 "),OR=n(SLe,"A",{href:!0});var _Zr=s(OR);Weo=r(_Zr,"ViltConfig"),_Zr.forEach(t),Qeo=r(SLe," (ViLT model)"),SLe.forEach(t),Heo=i(L),Eg=n(L,"LI",{});var RLe=s(Eg);Qae=n(RLe,"STRONG",{});var bZr=s(Qae);Ueo=r(bZr,"vision-encoder-decoder"),bZr.forEach(t),Jeo=r(RLe," \u2014 "),VR=n(RLe,"A",{href:!0});var vZr=s(VR);Yeo=r(vZr,"VisionEncoderDecoderConfig"),vZr.forEach(t),Keo=r(RLe," (Vision Encoder decoder model)"),RLe.forEach(t),Zeo=i(L),Cg=n(L,"LI",{});var PLe=s(Cg);Hae=n(PLe,"STRONG",{});var FZr=s(Hae);eoo=r(FZr,"vision-text-dual-encoder"),FZr.forEach(t),ooo=r(PLe," \u2014 "),XR=n(PLe,"A",{href:!0});var TZr=s(XR);roo=r(TZr,"VisionTextDualEncoderConfig"),TZr.forEach(t),too=r(PLe," (VisionTextDualEncoder model)"),PLe.forEach(t),aoo=i(L),wg=n(L,"LI",{});var BLe=s(wg);Uae=n(BLe,"STRONG",{});var MZr=s(Uae);noo=r(MZr,"visual_bert"),MZr.forEach(t),soo=r(BLe," \u2014 "),zR=n(BLe,"A",{href:!0});var EZr=s(zR);loo=r(EZr,"VisualBertConfig"),EZr.forEach(t),ioo=r(BLe," (VisualBERT model)"),BLe.forEach(t),doo=i(L),Ag=n(L,"LI",{});var ILe=s(Ag);Jae=n(ILe,"STRONG",{});var CZr=s(Jae);coo=r(CZr,"vit"),CZr.forEach(t),foo=r(ILe," \u2014 "),WR=n(ILe,"A",{href:!0});var wZr=s(WR);moo=r(wZr,"ViTConfig"),wZr.forEach(t),goo=r(ILe," (ViT model)"),ILe.forEach(t),hoo=i(L),Lg=n(L,"LI",{});var NLe=s(Lg);Yae=n(NLe,"STRONG",{});var AZr=s(Yae);poo=r(AZr,"vit_mae"),AZr.forEach(t),uoo=r(NLe," \u2014 "),QR=n(NLe,"A",{href:!0});var LZr=s(QR);_oo=r(LZr,"ViTMAEConfig"),LZr.forEach(t),boo=r(NLe," (ViTMAE model)"),NLe.forEach(t),voo=i(L),yg=n(L,"LI",{});var qLe=s(yg);Kae=n(qLe,"STRONG",{});var yZr=s(Kae);Foo=r(yZr,"wav2vec2"),yZr.forEach(t),Too=r(qLe," \u2014 "),HR=n(qLe,"A",{href:!0});var xZr=s(HR);Moo=r(xZr,"Wav2Vec2Config"),xZr.forEach(t),Eoo=r(qLe," (Wav2Vec2 model)"),qLe.forEach(t),Coo=i(L),xg=n(L,"LI",{});var jLe=s(xg);Zae=n(jLe,"STRONG",{});var $Zr=s(Zae);woo=r($Zr,"wav2vec2-conformer"),$Zr.forEach(t),Aoo=r(jLe," \u2014 "),UR=n(jLe,"A",{href:!0});var kZr=s(UR);Loo=r(kZr,"Wav2Vec2ConformerConfig"),kZr.forEach(t),yoo=r(jLe," (Wav2Vec2-Conformer model)"),jLe.forEach(t),xoo=i(L),$g=n(L,"LI",{});var DLe=s($g);ene=n(DLe,"STRONG",{});var SZr=s(ene);$oo=r(SZr,"wavlm"),SZr.forEach(t),koo=r(DLe," \u2014 "),JR=n(DLe,"A",{href:!0});var RZr=s(JR);Soo=r(RZr,"WavLMConfig"),RZr.forEach(t),Roo=r(DLe," (WavLM model)"),DLe.forEach(t),Poo=i(L),kg=n(L,"LI",{});var GLe=s(kg);one=n(GLe,"STRONG",{});var PZr=s(one);Boo=r(PZr,"xglm"),PZr.forEach(t),Ioo=r(GLe," \u2014 "),YR=n(GLe,"A",{href:!0});var BZr=s(YR);Noo=r(BZr,"XGLMConfig"),BZr.forEach(t),qoo=r(GLe," (XGLM model)"),GLe.forEach(t),joo=i(L),Sg=n(L,"LI",{});var OLe=s(Sg);rne=n(OLe,"STRONG",{});var IZr=s(rne);Doo=r(IZr,"xlm"),IZr.forEach(t),Goo=r(OLe," \u2014 "),KR=n(OLe,"A",{href:!0});var NZr=s(KR);Ooo=r(NZr,"XLMConfig"),NZr.forEach(t),Voo=r(OLe," (XLM model)"),OLe.forEach(t),Xoo=i(L),Rg=n(L,"LI",{});var VLe=s(Rg);tne=n(VLe,"STRONG",{});var qZr=s(tne);zoo=r(qZr,"xlm-prophetnet"),qZr.forEach(t),Woo=r(VLe," \u2014 "),ZR=n(VLe,"A",{href:!0});var jZr=s(ZR);Qoo=r(jZr,"XLMProphetNetConfig"),jZr.forEach(t),Hoo=r(VLe," (XLM-ProphetNet model)"),VLe.forEach(t),Uoo=i(L),Pg=n(L,"LI",{});var XLe=s(Pg);ane=n(XLe,"STRONG",{});var DZr=s(ane);Joo=r(DZr,"xlm-roberta"),DZr.forEach(t),Yoo=r(XLe," \u2014 "),eP=n(XLe,"A",{href:!0});var GZr=s(eP);Koo=r(GZr,"XLMRobertaConfig"),GZr.forEach(t),Zoo=r(XLe," (XLM-RoBERTa model)"),XLe.forEach(t),ero=i(L),Bg=n(L,"LI",{});var zLe=s(Bg);nne=n(zLe,"STRONG",{});var OZr=s(nne);oro=r(OZr,"xlm-roberta-xl"),OZr.forEach(t),rro=r(zLe," \u2014 "),oP=n(zLe,"A",{href:!0});var VZr=s(oP);tro=r(VZr,"XLMRobertaXLConfig"),VZr.forEach(t),aro=r(zLe," (XLM-RoBERTa-XL model)"),zLe.forEach(t),nro=i(L),Ig=n(L,"LI",{});var WLe=s(Ig);sne=n(WLe,"STRONG",{});var XZr=s(sne);sro=r(XZr,"xlnet"),XZr.forEach(t),lro=r(WLe," \u2014 "),rP=n(WLe,"A",{href:!0});var zZr=s(rP);iro=r(zZr,"XLNetConfig"),zZr.forEach(t),dro=r(WLe," (XLNet model)"),WLe.forEach(t),cro=i(L),Ng=n(L,"LI",{});var QLe=s(Ng);lne=n(QLe,"STRONG",{});var WZr=s(lne);fro=r(WZr,"yolos"),WZr.forEach(t),mro=r(QLe," \u2014 "),tP=n(QLe,"A",{href:!0});var QZr=s(tP);gro=r(QZr,"YolosConfig"),QZr.forEach(t),hro=r(QLe," (YOLOS model)"),QLe.forEach(t),pro=i(L),qg=n(L,"LI",{});var HLe=s(qg);ine=n(HLe,"STRONG",{});var HZr=s(ine);uro=r(HZr,"yoso"),HZr.forEach(t),_ro=r(HLe," \u2014 "),aP=n(HLe,"A",{href:!0});var UZr=s(aP);bro=r(UZr,"YosoConfig"),UZr.forEach(t),vro=r(HLe," (YOSO model)"),HLe.forEach(t),L.forEach(t),Fro=i(tt),T(jg.$$.fragment,tt),tt.forEach(t),Tro=i(rt),Dg=n(rt,"DIV",{class:!0});var mVe=s(Dg);T(yy.$$.fragment,mVe),Mro=i(mVe),dne=n(mVe,"P",{});var JZr=s(dne);Ero=r(JZr,"Register a new configuration for this class."),JZr.forEach(t),mVe.forEach(t),rt.forEach(t),gGe=i(f),$i=n(f,"H2",{class:!0});var gVe=s($i);Gg=n(gVe,"A",{id:!0,class:!0,href:!0});var YZr=s(Gg);cne=n(YZr,"SPAN",{});var KZr=s(cne);T(xy.$$.fragment,KZr),KZr.forEach(t),YZr.forEach(t),Cro=i(gVe),fne=n(gVe,"SPAN",{});var ZZr=s(fne);wro=r(ZZr,"AutoTokenizer"),ZZr.forEach(t),gVe.forEach(t),hGe=i(f),Ao=n(f,"DIV",{class:!0});var zs=s(Ao);T($y.$$.fragment,zs),Aro=i(zs),ky=n(zs,"P",{});var hVe=s(ky);Lro=r(hVe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),nP=n(hVe,"A",{href:!0});var eet=s(nP);yro=r(eet,"AutoTokenizer.from_pretrained()"),eet.forEach(t),xro=r(hVe," class method."),hVe.forEach(t),$ro=i(zs),Sy=n(zs,"P",{});var pVe=s(Sy);kro=r(pVe,"This class cannot be instantiated directly using "),mne=n(pVe,"CODE",{});var oet=s(mne);Sro=r(oet,"__init__()"),oet.forEach(t),Rro=r(pVe," (throws an error)."),pVe.forEach(t),Pro=i(zs),Ar=n(zs,"DIV",{class:!0});var Ws=s(Ar);T(Ry.$$.fragment,Ws),Bro=i(Ws),gne=n(Ws,"P",{});var ret=s(gne);Iro=r(ret,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),ret.forEach(t),Nro=i(Ws),$a=n(Ws,"P",{});var TA=s($a);qro=r(TA,"The tokenizer class to instantiate is selected based on the "),hne=n(TA,"CODE",{});var tet=s(hne);jro=r(tet,"model_type"),tet.forEach(t),Dro=r(TA,` property of the config object (either
passed as an argument or loaded from `),pne=n(TA,"CODE",{});var aet=s(pne);Gro=r(aet,"pretrained_model_name_or_path"),aet.forEach(t),Oro=r(TA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),une=n(TA,"CODE",{});var net=s(une);Vro=r(net,"pretrained_model_name_or_path"),net.forEach(t),Xro=r(TA,":"),TA.forEach(t),zro=i(Ws),k=n(Ws,"UL",{});var S=s(k);Nn=n(S,"LI",{});var j$=s(Nn);_ne=n(j$,"STRONG",{});var set=s(_ne);Wro=r(set,"albert"),set.forEach(t),Qro=r(j$," \u2014 "),sP=n(j$,"A",{href:!0});var iet=s(sP);Hro=r(iet,"AlbertTokenizer"),iet.forEach(t),Uro=r(j$," or "),lP=n(j$,"A",{href:!0});var det=s(lP);Jro=r(det,"AlbertTokenizerFast"),det.forEach(t),Yro=r(j$," (ALBERT model)"),j$.forEach(t),Kro=i(S),qn=n(S,"LI",{});var D$=s(qn);bne=n(D$,"STRONG",{});var cet=s(bne);Zro=r(cet,"bart"),cet.forEach(t),eto=r(D$," \u2014 "),iP=n(D$,"A",{href:!0});var fet=s(iP);oto=r(fet,"BartTokenizer"),fet.forEach(t),rto=r(D$," or "),dP=n(D$,"A",{href:!0});var met=s(dP);tto=r(met,"BartTokenizerFast"),met.forEach(t),ato=r(D$," (BART model)"),D$.forEach(t),nto=i(S),jn=n(S,"LI",{});var G$=s(jn);vne=n(G$,"STRONG",{});var get=s(vne);sto=r(get,"barthez"),get.forEach(t),lto=r(G$," \u2014 "),cP=n(G$,"A",{href:!0});var het=s(cP);ito=r(het,"BarthezTokenizer"),het.forEach(t),dto=r(G$," or "),fP=n(G$,"A",{href:!0});var pet=s(fP);cto=r(pet,"BarthezTokenizerFast"),pet.forEach(t),fto=r(G$," (BARThez model)"),G$.forEach(t),mto=i(S),Og=n(S,"LI",{});var ULe=s(Og);Fne=n(ULe,"STRONG",{});var uet=s(Fne);gto=r(uet,"bartpho"),uet.forEach(t),hto=r(ULe," \u2014 "),mP=n(ULe,"A",{href:!0});var _et=s(mP);pto=r(_et,"BartphoTokenizer"),_et.forEach(t),uto=r(ULe," (BARTpho model)"),ULe.forEach(t),_to=i(S),Dn=n(S,"LI",{});var O$=s(Dn);Tne=n(O$,"STRONG",{});var bet=s(Tne);bto=r(bet,"bert"),bet.forEach(t),vto=r(O$," \u2014 "),gP=n(O$,"A",{href:!0});var vet=s(gP);Fto=r(vet,"BertTokenizer"),vet.forEach(t),Tto=r(O$," or "),hP=n(O$,"A",{href:!0});var Fet=s(hP);Mto=r(Fet,"BertTokenizerFast"),Fet.forEach(t),Eto=r(O$," (BERT model)"),O$.forEach(t),Cto=i(S),Vg=n(S,"LI",{});var JLe=s(Vg);Mne=n(JLe,"STRONG",{});var Tet=s(Mne);wto=r(Tet,"bert-generation"),Tet.forEach(t),Ato=r(JLe," \u2014 "),pP=n(JLe,"A",{href:!0});var Met=s(pP);Lto=r(Met,"BertGenerationTokenizer"),Met.forEach(t),yto=r(JLe," (Bert Generation model)"),JLe.forEach(t),xto=i(S),Xg=n(S,"LI",{});var YLe=s(Xg);Ene=n(YLe,"STRONG",{});var Eet=s(Ene);$to=r(Eet,"bert-japanese"),Eet.forEach(t),kto=r(YLe," \u2014 "),uP=n(YLe,"A",{href:!0});var Cet=s(uP);Sto=r(Cet,"BertJapaneseTokenizer"),Cet.forEach(t),Rto=r(YLe," (BertJapanese model)"),YLe.forEach(t),Pto=i(S),zg=n(S,"LI",{});var KLe=s(zg);Cne=n(KLe,"STRONG",{});var wet=s(Cne);Bto=r(wet,"bertweet"),wet.forEach(t),Ito=r(KLe," \u2014 "),_P=n(KLe,"A",{href:!0});var Aet=s(_P);Nto=r(Aet,"BertweetTokenizer"),Aet.forEach(t),qto=r(KLe," (BERTweet model)"),KLe.forEach(t),jto=i(S),Gn=n(S,"LI",{});var V$=s(Gn);wne=n(V$,"STRONG",{});var Let=s(wne);Dto=r(Let,"big_bird"),Let.forEach(t),Gto=r(V$," \u2014 "),bP=n(V$,"A",{href:!0});var yet=s(bP);Oto=r(yet,"BigBirdTokenizer"),yet.forEach(t),Vto=r(V$," or "),vP=n(V$,"A",{href:!0});var xet=s(vP);Xto=r(xet,"BigBirdTokenizerFast"),xet.forEach(t),zto=r(V$," (BigBird model)"),V$.forEach(t),Wto=i(S),On=n(S,"LI",{});var X$=s(On);Ane=n(X$,"STRONG",{});var $et=s(Ane);Qto=r($et,"bigbird_pegasus"),$et.forEach(t),Hto=r(X$," \u2014 "),FP=n(X$,"A",{href:!0});var ket=s(FP);Uto=r(ket,"PegasusTokenizer"),ket.forEach(t),Jto=r(X$," or "),TP=n(X$,"A",{href:!0});var Set=s(TP);Yto=r(Set,"PegasusTokenizerFast"),Set.forEach(t),Kto=r(X$," (BigBird-Pegasus model)"),X$.forEach(t),Zto=i(S),Vn=n(S,"LI",{});var z$=s(Vn);Lne=n(z$,"STRONG",{});var Ret=s(Lne);eao=r(Ret,"blenderbot"),Ret.forEach(t),oao=r(z$," \u2014 "),MP=n(z$,"A",{href:!0});var Pet=s(MP);rao=r(Pet,"BlenderbotTokenizer"),Pet.forEach(t),tao=r(z$," or "),EP=n(z$,"A",{href:!0});var Bet=s(EP);aao=r(Bet,"BlenderbotTokenizerFast"),Bet.forEach(t),nao=r(z$," (Blenderbot model)"),z$.forEach(t),sao=i(S),Wg=n(S,"LI",{});var ZLe=s(Wg);yne=n(ZLe,"STRONG",{});var Iet=s(yne);lao=r(Iet,"blenderbot-small"),Iet.forEach(t),iao=r(ZLe," \u2014 "),CP=n(ZLe,"A",{href:!0});var Net=s(CP);dao=r(Net,"BlenderbotSmallTokenizer"),Net.forEach(t),cao=r(ZLe," (BlenderbotSmall model)"),ZLe.forEach(t),fao=i(S),Qg=n(S,"LI",{});var eye=s(Qg);xne=n(eye,"STRONG",{});var qet=s(xne);mao=r(qet,"bloom"),qet.forEach(t),gao=r(eye," \u2014 "),wP=n(eye,"A",{href:!0});var jet=s(wP);hao=r(jet,"BloomTokenizerFast"),jet.forEach(t),pao=r(eye," (BLOOM model)"),eye.forEach(t),uao=i(S),Hg=n(S,"LI",{});var oye=s(Hg);$ne=n(oye,"STRONG",{});var Det=s($ne);_ao=r(Det,"byt5"),Det.forEach(t),bao=r(oye," \u2014 "),AP=n(oye,"A",{href:!0});var Get=s(AP);vao=r(Get,"ByT5Tokenizer"),Get.forEach(t),Fao=r(oye," (ByT5 model)"),oye.forEach(t),Tao=i(S),Xn=n(S,"LI",{});var W$=s(Xn);kne=n(W$,"STRONG",{});var Oet=s(kne);Mao=r(Oet,"camembert"),Oet.forEach(t),Eao=r(W$," \u2014 "),LP=n(W$,"A",{href:!0});var Vet=s(LP);Cao=r(Vet,"CamembertTokenizer"),Vet.forEach(t),wao=r(W$," or "),yP=n(W$,"A",{href:!0});var Xet=s(yP);Aao=r(Xet,"CamembertTokenizerFast"),Xet.forEach(t),Lao=r(W$," (CamemBERT model)"),W$.forEach(t),yao=i(S),Ug=n(S,"LI",{});var rye=s(Ug);Sne=n(rye,"STRONG",{});var zet=s(Sne);xao=r(zet,"canine"),zet.forEach(t),$ao=r(rye," \u2014 "),xP=n(rye,"A",{href:!0});var Wet=s(xP);kao=r(Wet,"CanineTokenizer"),Wet.forEach(t),Sao=r(rye," (CANINE model)"),rye.forEach(t),Rao=i(S),zn=n(S,"LI",{});var Q$=s(zn);Rne=n(Q$,"STRONG",{});var Qet=s(Rne);Pao=r(Qet,"clip"),Qet.forEach(t),Bao=r(Q$," \u2014 "),$P=n(Q$,"A",{href:!0});var Het=s($P);Iao=r(Het,"CLIPTokenizer"),Het.forEach(t),Nao=r(Q$," or "),kP=n(Q$,"A",{href:!0});var Uet=s(kP);qao=r(Uet,"CLIPTokenizerFast"),Uet.forEach(t),jao=r(Q$," (CLIP model)"),Q$.forEach(t),Dao=i(S),Wn=n(S,"LI",{});var H$=s(Wn);Pne=n(H$,"STRONG",{});var Jet=s(Pne);Gao=r(Jet,"convbert"),Jet.forEach(t),Oao=r(H$," \u2014 "),SP=n(H$,"A",{href:!0});var Yet=s(SP);Vao=r(Yet,"ConvBertTokenizer"),Yet.forEach(t),Xao=r(H$," or "),RP=n(H$,"A",{href:!0});var Ket=s(RP);zao=r(Ket,"ConvBertTokenizerFast"),Ket.forEach(t),Wao=r(H$," (ConvBERT model)"),H$.forEach(t),Qao=i(S),Qn=n(S,"LI",{});var U$=s(Qn);Bne=n(U$,"STRONG",{});var Zet=s(Bne);Hao=r(Zet,"cpm"),Zet.forEach(t),Uao=r(U$," \u2014 "),PP=n(U$,"A",{href:!0});var eot=s(PP);Jao=r(eot,"CpmTokenizer"),eot.forEach(t),Yao=r(U$," or "),BP=n(U$,"A",{href:!0});var oot=s(BP);Kao=r(oot,"CpmTokenizerFast"),oot.forEach(t),Zao=r(U$," (CPM model)"),U$.forEach(t),eno=i(S),Jg=n(S,"LI",{});var tye=s(Jg);Ine=n(tye,"STRONG",{});var rot=s(Ine);ono=r(rot,"ctrl"),rot.forEach(t),rno=r(tye," \u2014 "),IP=n(tye,"A",{href:!0});var tot=s(IP);tno=r(tot,"CTRLTokenizer"),tot.forEach(t),ano=r(tye," (CTRL model)"),tye.forEach(t),nno=i(S),Hn=n(S,"LI",{});var J$=s(Hn);Nne=n(J$,"STRONG",{});var aot=s(Nne);sno=r(aot,"data2vec-text"),aot.forEach(t),lno=r(J$," \u2014 "),NP=n(J$,"A",{href:!0});var not=s(NP);ino=r(not,"RobertaTokenizer"),not.forEach(t),dno=r(J$," or "),qP=n(J$,"A",{href:!0});var sot=s(qP);cno=r(sot,"RobertaTokenizerFast"),sot.forEach(t),fno=r(J$," (Data2VecText model)"),J$.forEach(t),mno=i(S),Un=n(S,"LI",{});var Y$=s(Un);qne=n(Y$,"STRONG",{});var lot=s(qne);gno=r(lot,"deberta"),lot.forEach(t),hno=r(Y$," \u2014 "),jP=n(Y$,"A",{href:!0});var iot=s(jP);pno=r(iot,"DebertaTokenizer"),iot.forEach(t),uno=r(Y$," or "),DP=n(Y$,"A",{href:!0});var dot=s(DP);_no=r(dot,"DebertaTokenizerFast"),dot.forEach(t),bno=r(Y$," (DeBERTa model)"),Y$.forEach(t),vno=i(S),Jn=n(S,"LI",{});var K$=s(Jn);jne=n(K$,"STRONG",{});var cot=s(jne);Fno=r(cot,"deberta-v2"),cot.forEach(t),Tno=r(K$," \u2014 "),GP=n(K$,"A",{href:!0});var fot=s(GP);Mno=r(fot,"DebertaV2Tokenizer"),fot.forEach(t),Eno=r(K$," or "),OP=n(K$,"A",{href:!0});var mot=s(OP);Cno=r(mot,"DebertaV2TokenizerFast"),mot.forEach(t),wno=r(K$," (DeBERTa-v2 model)"),K$.forEach(t),Ano=i(S),Yn=n(S,"LI",{});var Z$=s(Yn);Dne=n(Z$,"STRONG",{});var got=s(Dne);Lno=r(got,"distilbert"),got.forEach(t),yno=r(Z$," \u2014 "),VP=n(Z$,"A",{href:!0});var hot=s(VP);xno=r(hot,"DistilBertTokenizer"),hot.forEach(t),$no=r(Z$," or "),XP=n(Z$,"A",{href:!0});var pot=s(XP);kno=r(pot,"DistilBertTokenizerFast"),pot.forEach(t),Sno=r(Z$," (DistilBERT model)"),Z$.forEach(t),Rno=i(S),Kn=n(S,"LI",{});var ek=s(Kn);Gne=n(ek,"STRONG",{});var uot=s(Gne);Pno=r(uot,"dpr"),uot.forEach(t),Bno=r(ek," \u2014 "),zP=n(ek,"A",{href:!0});var _ot=s(zP);Ino=r(_ot,"DPRQuestionEncoderTokenizer"),_ot.forEach(t),Nno=r(ek," or "),WP=n(ek,"A",{href:!0});var bot=s(WP);qno=r(bot,"DPRQuestionEncoderTokenizerFast"),bot.forEach(t),jno=r(ek," (DPR model)"),ek.forEach(t),Dno=i(S),Zn=n(S,"LI",{});var ok=s(Zn);One=n(ok,"STRONG",{});var vot=s(One);Gno=r(vot,"electra"),vot.forEach(t),Ono=r(ok," \u2014 "),QP=n(ok,"A",{href:!0});var Fot=s(QP);Vno=r(Fot,"ElectraTokenizer"),Fot.forEach(t),Xno=r(ok," or "),HP=n(ok,"A",{href:!0});var Tot=s(HP);zno=r(Tot,"ElectraTokenizerFast"),Tot.forEach(t),Wno=r(ok," (ELECTRA model)"),ok.forEach(t),Qno=i(S),Yg=n(S,"LI",{});var aye=s(Yg);Vne=n(aye,"STRONG",{});var Mot=s(Vne);Hno=r(Mot,"flaubert"),Mot.forEach(t),Uno=r(aye," \u2014 "),UP=n(aye,"A",{href:!0});var Eot=s(UP);Jno=r(Eot,"FlaubertTokenizer"),Eot.forEach(t),Yno=r(aye," (FlauBERT model)"),aye.forEach(t),Kno=i(S),es=n(S,"LI",{});var rk=s(es);Xne=n(rk,"STRONG",{});var Cot=s(Xne);Zno=r(Cot,"fnet"),Cot.forEach(t),eso=r(rk," \u2014 "),JP=n(rk,"A",{href:!0});var wot=s(JP);oso=r(wot,"FNetTokenizer"),wot.forEach(t),rso=r(rk," or "),YP=n(rk,"A",{href:!0});var Aot=s(YP);tso=r(Aot,"FNetTokenizerFast"),Aot.forEach(t),aso=r(rk," (FNet model)"),rk.forEach(t),nso=i(S),Kg=n(S,"LI",{});var nye=s(Kg);zne=n(nye,"STRONG",{});var Lot=s(zne);sso=r(Lot,"fsmt"),Lot.forEach(t),lso=r(nye," \u2014 "),KP=n(nye,"A",{href:!0});var yot=s(KP);iso=r(yot,"FSMTTokenizer"),yot.forEach(t),dso=r(nye," (FairSeq Machine-Translation model)"),nye.forEach(t),cso=i(S),os=n(S,"LI",{});var tk=s(os);Wne=n(tk,"STRONG",{});var xot=s(Wne);fso=r(xot,"funnel"),xot.forEach(t),mso=r(tk," \u2014 "),ZP=n(tk,"A",{href:!0});var $ot=s(ZP);gso=r($ot,"FunnelTokenizer"),$ot.forEach(t),hso=r(tk," or "),eB=n(tk,"A",{href:!0});var kot=s(eB);pso=r(kot,"FunnelTokenizerFast"),kot.forEach(t),uso=r(tk," (Funnel Transformer model)"),tk.forEach(t),_so=i(S),rs=n(S,"LI",{});var ak=s(rs);Qne=n(ak,"STRONG",{});var Sot=s(Qne);bso=r(Sot,"gpt2"),Sot.forEach(t),vso=r(ak," \u2014 "),oB=n(ak,"A",{href:!0});var Rot=s(oB);Fso=r(Rot,"GPT2Tokenizer"),Rot.forEach(t),Tso=r(ak," or "),rB=n(ak,"A",{href:!0});var Pot=s(rB);Mso=r(Pot,"GPT2TokenizerFast"),Pot.forEach(t),Eso=r(ak," (OpenAI GPT-2 model)"),ak.forEach(t),Cso=i(S),ts=n(S,"LI",{});var nk=s(ts);Hne=n(nk,"STRONG",{});var Bot=s(Hne);wso=r(Bot,"gpt_neo"),Bot.forEach(t),Aso=r(nk," \u2014 "),tB=n(nk,"A",{href:!0});var Iot=s(tB);Lso=r(Iot,"GPT2Tokenizer"),Iot.forEach(t),yso=r(nk," or "),aB=n(nk,"A",{href:!0});var Not=s(aB);xso=r(Not,"GPT2TokenizerFast"),Not.forEach(t),$so=r(nk," (GPT Neo model)"),nk.forEach(t),kso=i(S),Zg=n(S,"LI",{});var sye=s(Zg);Une=n(sye,"STRONG",{});var qot=s(Une);Sso=r(qot,"gpt_neox"),qot.forEach(t),Rso=r(sye," \u2014 "),nB=n(sye,"A",{href:!0});var jot=s(nB);Pso=r(jot,"GPTNeoXTokenizerFast"),jot.forEach(t),Bso=r(sye," (GPT NeoX model)"),sye.forEach(t),Iso=i(S),as=n(S,"LI",{});var sk=s(as);Jne=n(sk,"STRONG",{});var Dot=s(Jne);Nso=r(Dot,"gptj"),Dot.forEach(t),qso=r(sk," \u2014 "),sB=n(sk,"A",{href:!0});var Got=s(sB);jso=r(Got,"GPT2Tokenizer"),Got.forEach(t),Dso=r(sk," or "),lB=n(sk,"A",{href:!0});var Oot=s(lB);Gso=r(Oot,"GPT2TokenizerFast"),Oot.forEach(t),Oso=r(sk," (GPT-J model)"),sk.forEach(t),Vso=i(S),ns=n(S,"LI",{});var lk=s(ns);Yne=n(lk,"STRONG",{});var Vot=s(Yne);Xso=r(Vot,"herbert"),Vot.forEach(t),zso=r(lk," \u2014 "),iB=n(lk,"A",{href:!0});var Xot=s(iB);Wso=r(Xot,"HerbertTokenizer"),Xot.forEach(t),Qso=r(lk," or "),dB=n(lk,"A",{href:!0});var zot=s(dB);Hso=r(zot,"HerbertTokenizerFast"),zot.forEach(t),Uso=r(lk," (HerBERT model)"),lk.forEach(t),Jso=i(S),eh=n(S,"LI",{});var lye=s(eh);Kne=n(lye,"STRONG",{});var Wot=s(Kne);Yso=r(Wot,"hubert"),Wot.forEach(t),Kso=r(lye," \u2014 "),cB=n(lye,"A",{href:!0});var Qot=s(cB);Zso=r(Qot,"Wav2Vec2CTCTokenizer"),Qot.forEach(t),elo=r(lye," (Hubert model)"),lye.forEach(t),olo=i(S),ss=n(S,"LI",{});var ik=s(ss);Zne=n(ik,"STRONG",{});var Hot=s(Zne);rlo=r(Hot,"ibert"),Hot.forEach(t),tlo=r(ik," \u2014 "),fB=n(ik,"A",{href:!0});var Uot=s(fB);alo=r(Uot,"RobertaTokenizer"),Uot.forEach(t),nlo=r(ik," or "),mB=n(ik,"A",{href:!0});var Jot=s(mB);slo=r(Jot,"RobertaTokenizerFast"),Jot.forEach(t),llo=r(ik," (I-BERT model)"),ik.forEach(t),ilo=i(S),ls=n(S,"LI",{});var dk=s(ls);ese=n(dk,"STRONG",{});var Yot=s(ese);dlo=r(Yot,"layoutlm"),Yot.forEach(t),clo=r(dk," \u2014 "),gB=n(dk,"A",{href:!0});var Kot=s(gB);flo=r(Kot,"LayoutLMTokenizer"),Kot.forEach(t),mlo=r(dk," or "),hB=n(dk,"A",{href:!0});var Zot=s(hB);glo=r(Zot,"LayoutLMTokenizerFast"),Zot.forEach(t),hlo=r(dk," (LayoutLM model)"),dk.forEach(t),plo=i(S),is=n(S,"LI",{});var ck=s(is);ose=n(ck,"STRONG",{});var ert=s(ose);ulo=r(ert,"layoutlmv2"),ert.forEach(t),_lo=r(ck," \u2014 "),pB=n(ck,"A",{href:!0});var ort=s(pB);blo=r(ort,"LayoutLMv2Tokenizer"),ort.forEach(t),vlo=r(ck," or "),uB=n(ck,"A",{href:!0});var rrt=s(uB);Flo=r(rrt,"LayoutLMv2TokenizerFast"),rrt.forEach(t),Tlo=r(ck," (LayoutLMv2 model)"),ck.forEach(t),Mlo=i(S),ds=n(S,"LI",{});var fk=s(ds);rse=n(fk,"STRONG",{});var trt=s(rse);Elo=r(trt,"layoutlmv3"),trt.forEach(t),Clo=r(fk," \u2014 "),_B=n(fk,"A",{href:!0});var art=s(_B);wlo=r(art,"LayoutLMv3Tokenizer"),art.forEach(t),Alo=r(fk," or "),bB=n(fk,"A",{href:!0});var nrt=s(bB);Llo=r(nrt,"LayoutLMv3TokenizerFast"),nrt.forEach(t),ylo=r(fk," (LayoutLMv3 model)"),fk.forEach(t),xlo=i(S),cs=n(S,"LI",{});var mk=s(cs);tse=n(mk,"STRONG",{});var srt=s(tse);$lo=r(srt,"layoutxlm"),srt.forEach(t),klo=r(mk," \u2014 "),vB=n(mk,"A",{href:!0});var lrt=s(vB);Slo=r(lrt,"LayoutXLMTokenizer"),lrt.forEach(t),Rlo=r(mk," or "),FB=n(mk,"A",{href:!0});var irt=s(FB);Plo=r(irt,"LayoutXLMTokenizerFast"),irt.forEach(t),Blo=r(mk," (LayoutXLM model)"),mk.forEach(t),Ilo=i(S),fs=n(S,"LI",{});var gk=s(fs);ase=n(gk,"STRONG",{});var drt=s(ase);Nlo=r(drt,"led"),drt.forEach(t),qlo=r(gk," \u2014 "),TB=n(gk,"A",{href:!0});var crt=s(TB);jlo=r(crt,"LEDTokenizer"),crt.forEach(t),Dlo=r(gk," or "),MB=n(gk,"A",{href:!0});var frt=s(MB);Glo=r(frt,"LEDTokenizerFast"),frt.forEach(t),Olo=r(gk," (LED model)"),gk.forEach(t),Vlo=i(S),ms=n(S,"LI",{});var hk=s(ms);nse=n(hk,"STRONG",{});var mrt=s(nse);Xlo=r(mrt,"longformer"),mrt.forEach(t),zlo=r(hk," \u2014 "),EB=n(hk,"A",{href:!0});var grt=s(EB);Wlo=r(grt,"LongformerTokenizer"),grt.forEach(t),Qlo=r(hk," or "),CB=n(hk,"A",{href:!0});var hrt=s(CB);Hlo=r(hrt,"LongformerTokenizerFast"),hrt.forEach(t),Ulo=r(hk," (Longformer model)"),hk.forEach(t),Jlo=i(S),gs=n(S,"LI",{});var pk=s(gs);sse=n(pk,"STRONG",{});var prt=s(sse);Ylo=r(prt,"longt5"),prt.forEach(t),Klo=r(pk," \u2014 "),wB=n(pk,"A",{href:!0});var urt=s(wB);Zlo=r(urt,"T5Tokenizer"),urt.forEach(t),eio=r(pk," or "),AB=n(pk,"A",{href:!0});var _rt=s(AB);oio=r(_rt,"T5TokenizerFast"),_rt.forEach(t),rio=r(pk," (LongT5 model)"),pk.forEach(t),tio=i(S),oh=n(S,"LI",{});var iye=s(oh);lse=n(iye,"STRONG",{});var brt=s(lse);aio=r(brt,"luke"),brt.forEach(t),nio=r(iye," \u2014 "),LB=n(iye,"A",{href:!0});var vrt=s(LB);sio=r(vrt,"LukeTokenizer"),vrt.forEach(t),lio=r(iye," (LUKE model)"),iye.forEach(t),iio=i(S),hs=n(S,"LI",{});var uk=s(hs);ise=n(uk,"STRONG",{});var Frt=s(ise);dio=r(Frt,"lxmert"),Frt.forEach(t),cio=r(uk," \u2014 "),yB=n(uk,"A",{href:!0});var Trt=s(yB);fio=r(Trt,"LxmertTokenizer"),Trt.forEach(t),mio=r(uk," or "),xB=n(uk,"A",{href:!0});var Mrt=s(xB);gio=r(Mrt,"LxmertTokenizerFast"),Mrt.forEach(t),hio=r(uk," (LXMERT model)"),uk.forEach(t),pio=i(S),rh=n(S,"LI",{});var dye=s(rh);dse=n(dye,"STRONG",{});var Ert=s(dse);uio=r(Ert,"m2m_100"),Ert.forEach(t),_io=r(dye," \u2014 "),$B=n(dye,"A",{href:!0});var Crt=s($B);bio=r(Crt,"M2M100Tokenizer"),Crt.forEach(t),vio=r(dye," (M2M100 model)"),dye.forEach(t),Fio=i(S),th=n(S,"LI",{});var cye=s(th);cse=n(cye,"STRONG",{});var wrt=s(cse);Tio=r(wrt,"marian"),wrt.forEach(t),Mio=r(cye," \u2014 "),kB=n(cye,"A",{href:!0});var Art=s(kB);Eio=r(Art,"MarianTokenizer"),Art.forEach(t),Cio=r(cye," (Marian model)"),cye.forEach(t),wio=i(S),ps=n(S,"LI",{});var _k=s(ps);fse=n(_k,"STRONG",{});var Lrt=s(fse);Aio=r(Lrt,"mbart"),Lrt.forEach(t),Lio=r(_k," \u2014 "),SB=n(_k,"A",{href:!0});var yrt=s(SB);yio=r(yrt,"MBartTokenizer"),yrt.forEach(t),xio=r(_k," or "),RB=n(_k,"A",{href:!0});var xrt=s(RB);$io=r(xrt,"MBartTokenizerFast"),xrt.forEach(t),kio=r(_k," (mBART model)"),_k.forEach(t),Sio=i(S),us=n(S,"LI",{});var bk=s(us);mse=n(bk,"STRONG",{});var $rt=s(mse);Rio=r($rt,"mbart50"),$rt.forEach(t),Pio=r(bk," \u2014 "),PB=n(bk,"A",{href:!0});var krt=s(PB);Bio=r(krt,"MBart50Tokenizer"),krt.forEach(t),Iio=r(bk," or "),BB=n(bk,"A",{href:!0});var Srt=s(BB);Nio=r(Srt,"MBart50TokenizerFast"),Srt.forEach(t),qio=r(bk," (mBART-50 model)"),bk.forEach(t),jio=i(S),_s=n(S,"LI",{});var vk=s(_s);gse=n(vk,"STRONG",{});var Rrt=s(gse);Dio=r(Rrt,"megatron-bert"),Rrt.forEach(t),Gio=r(vk," \u2014 "),IB=n(vk,"A",{href:!0});var Prt=s(IB);Oio=r(Prt,"BertTokenizer"),Prt.forEach(t),Vio=r(vk," or "),NB=n(vk,"A",{href:!0});var Brt=s(NB);Xio=r(Brt,"BertTokenizerFast"),Brt.forEach(t),zio=r(vk," (Megatron-BERT model)"),vk.forEach(t),Wio=i(S),ah=n(S,"LI",{});var fye=s(ah);hse=n(fye,"STRONG",{});var Irt=s(hse);Qio=r(Irt,"mluke"),Irt.forEach(t),Hio=r(fye," \u2014 "),qB=n(fye,"A",{href:!0});var Nrt=s(qB);Uio=r(Nrt,"MLukeTokenizer"),Nrt.forEach(t),Jio=r(fye," (mLUKE model)"),fye.forEach(t),Yio=i(S),bs=n(S,"LI",{});var Fk=s(bs);pse=n(Fk,"STRONG",{});var qrt=s(pse);Kio=r(qrt,"mobilebert"),qrt.forEach(t),Zio=r(Fk," \u2014 "),jB=n(Fk,"A",{href:!0});var jrt=s(jB);edo=r(jrt,"MobileBertTokenizer"),jrt.forEach(t),odo=r(Fk," or "),DB=n(Fk,"A",{href:!0});var Drt=s(DB);rdo=r(Drt,"MobileBertTokenizerFast"),Drt.forEach(t),tdo=r(Fk," (MobileBERT model)"),Fk.forEach(t),ado=i(S),vs=n(S,"LI",{});var Tk=s(vs);use=n(Tk,"STRONG",{});var Grt=s(use);ndo=r(Grt,"mpnet"),Grt.forEach(t),sdo=r(Tk," \u2014 "),GB=n(Tk,"A",{href:!0});var Ort=s(GB);ldo=r(Ort,"MPNetTokenizer"),Ort.forEach(t),ido=r(Tk," or "),OB=n(Tk,"A",{href:!0});var Vrt=s(OB);ddo=r(Vrt,"MPNetTokenizerFast"),Vrt.forEach(t),cdo=r(Tk," (MPNet model)"),Tk.forEach(t),fdo=i(S),Fs=n(S,"LI",{});var Mk=s(Fs);_se=n(Mk,"STRONG",{});var Xrt=s(_se);mdo=r(Xrt,"mt5"),Xrt.forEach(t),gdo=r(Mk," \u2014 "),VB=n(Mk,"A",{href:!0});var zrt=s(VB);hdo=r(zrt,"MT5Tokenizer"),zrt.forEach(t),pdo=r(Mk," or "),XB=n(Mk,"A",{href:!0});var Wrt=s(XB);udo=r(Wrt,"MT5TokenizerFast"),Wrt.forEach(t),_do=r(Mk," (MT5 model)"),Mk.forEach(t),bdo=i(S),Ts=n(S,"LI",{});var Ek=s(Ts);bse=n(Ek,"STRONG",{});var Qrt=s(bse);vdo=r(Qrt,"nystromformer"),Qrt.forEach(t),Fdo=r(Ek," \u2014 "),zB=n(Ek,"A",{href:!0});var Hrt=s(zB);Tdo=r(Hrt,"AlbertTokenizer"),Hrt.forEach(t),Mdo=r(Ek," or "),WB=n(Ek,"A",{href:!0});var Urt=s(WB);Edo=r(Urt,"AlbertTokenizerFast"),Urt.forEach(t),Cdo=r(Ek," (Nystr\xF6mformer model)"),Ek.forEach(t),wdo=i(S),Ms=n(S,"LI",{});var Ck=s(Ms);vse=n(Ck,"STRONG",{});var Jrt=s(vse);Ado=r(Jrt,"openai-gpt"),Jrt.forEach(t),Ldo=r(Ck," \u2014 "),QB=n(Ck,"A",{href:!0});var Yrt=s(QB);ydo=r(Yrt,"OpenAIGPTTokenizer"),Yrt.forEach(t),xdo=r(Ck," or "),HB=n(Ck,"A",{href:!0});var Krt=s(HB);$do=r(Krt,"OpenAIGPTTokenizerFast"),Krt.forEach(t),kdo=r(Ck," (OpenAI GPT model)"),Ck.forEach(t),Sdo=i(S),nh=n(S,"LI",{});var mye=s(nh);Fse=n(mye,"STRONG",{});var Zrt=s(Fse);Rdo=r(Zrt,"opt"),Zrt.forEach(t),Pdo=r(mye," \u2014 "),UB=n(mye,"A",{href:!0});var ett=s(UB);Bdo=r(ett,"GPT2Tokenizer"),ett.forEach(t),Ido=r(mye," (OPT model)"),mye.forEach(t),Ndo=i(S),Es=n(S,"LI",{});var wk=s(Es);Tse=n(wk,"STRONG",{});var ott=s(Tse);qdo=r(ott,"pegasus"),ott.forEach(t),jdo=r(wk," \u2014 "),JB=n(wk,"A",{href:!0});var rtt=s(JB);Ddo=r(rtt,"PegasusTokenizer"),rtt.forEach(t),Gdo=r(wk," or "),YB=n(wk,"A",{href:!0});var ttt=s(YB);Odo=r(ttt,"PegasusTokenizerFast"),ttt.forEach(t),Vdo=r(wk," (Pegasus model)"),wk.forEach(t),Xdo=i(S),sh=n(S,"LI",{});var gye=s(sh);Mse=n(gye,"STRONG",{});var att=s(Mse);zdo=r(att,"perceiver"),att.forEach(t),Wdo=r(gye," \u2014 "),KB=n(gye,"A",{href:!0});var ntt=s(KB);Qdo=r(ntt,"PerceiverTokenizer"),ntt.forEach(t),Hdo=r(gye," (Perceiver model)"),gye.forEach(t),Udo=i(S),lh=n(S,"LI",{});var hye=s(lh);Ese=n(hye,"STRONG",{});var stt=s(Ese);Jdo=r(stt,"phobert"),stt.forEach(t),Ydo=r(hye," \u2014 "),ZB=n(hye,"A",{href:!0});var ltt=s(ZB);Kdo=r(ltt,"PhobertTokenizer"),ltt.forEach(t),Zdo=r(hye," (PhoBERT model)"),hye.forEach(t),eco=i(S),ih=n(S,"LI",{});var pye=s(ih);Cse=n(pye,"STRONG",{});var itt=s(Cse);oco=r(itt,"plbart"),itt.forEach(t),rco=r(pye," \u2014 "),eI=n(pye,"A",{href:!0});var dtt=s(eI);tco=r(dtt,"PLBartTokenizer"),dtt.forEach(t),aco=r(pye," (PLBart model)"),pye.forEach(t),nco=i(S),dh=n(S,"LI",{});var uye=s(dh);wse=n(uye,"STRONG",{});var ctt=s(wse);sco=r(ctt,"prophetnet"),ctt.forEach(t),lco=r(uye," \u2014 "),oI=n(uye,"A",{href:!0});var ftt=s(oI);ico=r(ftt,"ProphetNetTokenizer"),ftt.forEach(t),dco=r(uye," (ProphetNet model)"),uye.forEach(t),cco=i(S),Cs=n(S,"LI",{});var Ak=s(Cs);Ase=n(Ak,"STRONG",{});var mtt=s(Ase);fco=r(mtt,"qdqbert"),mtt.forEach(t),mco=r(Ak," \u2014 "),rI=n(Ak,"A",{href:!0});var gtt=s(rI);gco=r(gtt,"BertTokenizer"),gtt.forEach(t),hco=r(Ak," or "),tI=n(Ak,"A",{href:!0});var htt=s(tI);pco=r(htt,"BertTokenizerFast"),htt.forEach(t),uco=r(Ak," (QDQBert model)"),Ak.forEach(t),_co=i(S),ch=n(S,"LI",{});var _ye=s(ch);Lse=n(_ye,"STRONG",{});var ptt=s(Lse);bco=r(ptt,"rag"),ptt.forEach(t),vco=r(_ye," \u2014 "),aI=n(_ye,"A",{href:!0});var utt=s(aI);Fco=r(utt,"RagTokenizer"),utt.forEach(t),Tco=r(_ye," (RAG model)"),_ye.forEach(t),Mco=i(S),ws=n(S,"LI",{});var Lk=s(ws);yse=n(Lk,"STRONG",{});var _tt=s(yse);Eco=r(_tt,"realm"),_tt.forEach(t),Cco=r(Lk," \u2014 "),nI=n(Lk,"A",{href:!0});var btt=s(nI);wco=r(btt,"RealmTokenizer"),btt.forEach(t),Aco=r(Lk," or "),sI=n(Lk,"A",{href:!0});var vtt=s(sI);Lco=r(vtt,"RealmTokenizerFast"),vtt.forEach(t),yco=r(Lk," (REALM model)"),Lk.forEach(t),xco=i(S),As=n(S,"LI",{});var yk=s(As);xse=n(yk,"STRONG",{});var Ftt=s(xse);$co=r(Ftt,"reformer"),Ftt.forEach(t),kco=r(yk," \u2014 "),lI=n(yk,"A",{href:!0});var Ttt=s(lI);Sco=r(Ttt,"ReformerTokenizer"),Ttt.forEach(t),Rco=r(yk," or "),iI=n(yk,"A",{href:!0});var Mtt=s(iI);Pco=r(Mtt,"ReformerTokenizerFast"),Mtt.forEach(t),Bco=r(yk," (Reformer model)"),yk.forEach(t),Ico=i(S),Ls=n(S,"LI",{});var xk=s(Ls);$se=n(xk,"STRONG",{});var Ett=s($se);Nco=r(Ett,"rembert"),Ett.forEach(t),qco=r(xk," \u2014 "),dI=n(xk,"A",{href:!0});var Ctt=s(dI);jco=r(Ctt,"RemBertTokenizer"),Ctt.forEach(t),Dco=r(xk," or "),cI=n(xk,"A",{href:!0});var wtt=s(cI);Gco=r(wtt,"RemBertTokenizerFast"),wtt.forEach(t),Oco=r(xk," (RemBERT model)"),xk.forEach(t),Vco=i(S),ys=n(S,"LI",{});var $k=s(ys);kse=n($k,"STRONG",{});var Att=s(kse);Xco=r(Att,"retribert"),Att.forEach(t),zco=r($k," \u2014 "),fI=n($k,"A",{href:!0});var Ltt=s(fI);Wco=r(Ltt,"RetriBertTokenizer"),Ltt.forEach(t),Qco=r($k," or "),mI=n($k,"A",{href:!0});var ytt=s(mI);Hco=r(ytt,"RetriBertTokenizerFast"),ytt.forEach(t),Uco=r($k," (RetriBERT model)"),$k.forEach(t),Jco=i(S),xs=n(S,"LI",{});var kk=s(xs);Sse=n(kk,"STRONG",{});var xtt=s(Sse);Yco=r(xtt,"roberta"),xtt.forEach(t),Kco=r(kk," \u2014 "),gI=n(kk,"A",{href:!0});var $tt=s(gI);Zco=r($tt,"RobertaTokenizer"),$tt.forEach(t),efo=r(kk," or "),hI=n(kk,"A",{href:!0});var ktt=s(hI);ofo=r(ktt,"RobertaTokenizerFast"),ktt.forEach(t),rfo=r(kk," (RoBERTa model)"),kk.forEach(t),tfo=i(S),$s=n(S,"LI",{});var Sk=s($s);Rse=n(Sk,"STRONG",{});var Stt=s(Rse);afo=r(Stt,"roformer"),Stt.forEach(t),nfo=r(Sk," \u2014 "),pI=n(Sk,"A",{href:!0});var Rtt=s(pI);sfo=r(Rtt,"RoFormerTokenizer"),Rtt.forEach(t),lfo=r(Sk," or "),uI=n(Sk,"A",{href:!0});var Ptt=s(uI);ifo=r(Ptt,"RoFormerTokenizerFast"),Ptt.forEach(t),dfo=r(Sk," (RoFormer model)"),Sk.forEach(t),cfo=i(S),fh=n(S,"LI",{});var bye=s(fh);Pse=n(bye,"STRONG",{});var Btt=s(Pse);ffo=r(Btt,"speech_to_text"),Btt.forEach(t),mfo=r(bye," \u2014 "),_I=n(bye,"A",{href:!0});var Itt=s(_I);gfo=r(Itt,"Speech2TextTokenizer"),Itt.forEach(t),hfo=r(bye," (Speech2Text model)"),bye.forEach(t),pfo=i(S),mh=n(S,"LI",{});var vye=s(mh);Bse=n(vye,"STRONG",{});var Ntt=s(Bse);ufo=r(Ntt,"speech_to_text_2"),Ntt.forEach(t),_fo=r(vye," \u2014 "),bI=n(vye,"A",{href:!0});var qtt=s(bI);bfo=r(qtt,"Speech2Text2Tokenizer"),qtt.forEach(t),vfo=r(vye," (Speech2Text2 model)"),vye.forEach(t),Ffo=i(S),ks=n(S,"LI",{});var Rk=s(ks);Ise=n(Rk,"STRONG",{});var jtt=s(Ise);Tfo=r(jtt,"splinter"),jtt.forEach(t),Mfo=r(Rk," \u2014 "),vI=n(Rk,"A",{href:!0});var Dtt=s(vI);Efo=r(Dtt,"SplinterTokenizer"),Dtt.forEach(t),Cfo=r(Rk," or "),FI=n(Rk,"A",{href:!0});var Gtt=s(FI);wfo=r(Gtt,"SplinterTokenizerFast"),Gtt.forEach(t),Afo=r(Rk," (Splinter model)"),Rk.forEach(t),Lfo=i(S),Ss=n(S,"LI",{});var Pk=s(Ss);Nse=n(Pk,"STRONG",{});var Ott=s(Nse);yfo=r(Ott,"squeezebert"),Ott.forEach(t),xfo=r(Pk," \u2014 "),TI=n(Pk,"A",{href:!0});var Vtt=s(TI);$fo=r(Vtt,"SqueezeBertTokenizer"),Vtt.forEach(t),kfo=r(Pk," or "),MI=n(Pk,"A",{href:!0});var Xtt=s(MI);Sfo=r(Xtt,"SqueezeBertTokenizerFast"),Xtt.forEach(t),Rfo=r(Pk," (SqueezeBERT model)"),Pk.forEach(t),Pfo=i(S),Rs=n(S,"LI",{});var Bk=s(Rs);qse=n(Bk,"STRONG",{});var ztt=s(qse);Bfo=r(ztt,"t5"),ztt.forEach(t),Ifo=r(Bk," \u2014 "),EI=n(Bk,"A",{href:!0});var Wtt=s(EI);Nfo=r(Wtt,"T5Tokenizer"),Wtt.forEach(t),qfo=r(Bk," or "),CI=n(Bk,"A",{href:!0});var Qtt=s(CI);jfo=r(Qtt,"T5TokenizerFast"),Qtt.forEach(t),Dfo=r(Bk," (T5 model)"),Bk.forEach(t),Gfo=i(S),gh=n(S,"LI",{});var Fye=s(gh);jse=n(Fye,"STRONG",{});var Htt=s(jse);Ofo=r(Htt,"tapas"),Htt.forEach(t),Vfo=r(Fye," \u2014 "),wI=n(Fye,"A",{href:!0});var Utt=s(wI);Xfo=r(Utt,"TapasTokenizer"),Utt.forEach(t),zfo=r(Fye," (TAPAS model)"),Fye.forEach(t),Wfo=i(S),hh=n(S,"LI",{});var Tye=s(hh);Dse=n(Tye,"STRONG",{});var Jtt=s(Dse);Qfo=r(Jtt,"tapex"),Jtt.forEach(t),Hfo=r(Tye," \u2014 "),AI=n(Tye,"A",{href:!0});var Ytt=s(AI);Ufo=r(Ytt,"TapexTokenizer"),Ytt.forEach(t),Jfo=r(Tye," (TAPEX model)"),Tye.forEach(t),Yfo=i(S),ph=n(S,"LI",{});var Mye=s(ph);Gse=n(Mye,"STRONG",{});var Ktt=s(Gse);Kfo=r(Ktt,"transfo-xl"),Ktt.forEach(t),Zfo=r(Mye," \u2014 "),LI=n(Mye,"A",{href:!0});var Ztt=s(LI);emo=r(Ztt,"TransfoXLTokenizer"),Ztt.forEach(t),omo=r(Mye," (Transformer-XL model)"),Mye.forEach(t),rmo=i(S),Ps=n(S,"LI",{});var Ik=s(Ps);Ose=n(Ik,"STRONG",{});var eat=s(Ose);tmo=r(eat,"vilt"),eat.forEach(t),amo=r(Ik," \u2014 "),yI=n(Ik,"A",{href:!0});var oat=s(yI);nmo=r(oat,"BertTokenizer"),oat.forEach(t),smo=r(Ik," or "),xI=n(Ik,"A",{href:!0});var rat=s(xI);lmo=r(rat,"BertTokenizerFast"),rat.forEach(t),imo=r(Ik," (ViLT model)"),Ik.forEach(t),dmo=i(S),Bs=n(S,"LI",{});var Nk=s(Bs);Vse=n(Nk,"STRONG",{});var tat=s(Vse);cmo=r(tat,"visual_bert"),tat.forEach(t),fmo=r(Nk," \u2014 "),$I=n(Nk,"A",{href:!0});var aat=s($I);mmo=r(aat,"BertTokenizer"),aat.forEach(t),gmo=r(Nk," or "),kI=n(Nk,"A",{href:!0});var nat=s(kI);hmo=r(nat,"BertTokenizerFast"),nat.forEach(t),pmo=r(Nk," (VisualBERT model)"),Nk.forEach(t),umo=i(S),uh=n(S,"LI",{});var Eye=s(uh);Xse=n(Eye,"STRONG",{});var sat=s(Xse);_mo=r(sat,"wav2vec2"),sat.forEach(t),bmo=r(Eye," \u2014 "),SI=n(Eye,"A",{href:!0});var lat=s(SI);vmo=r(lat,"Wav2Vec2CTCTokenizer"),lat.forEach(t),Fmo=r(Eye," (Wav2Vec2 model)"),Eye.forEach(t),Tmo=i(S),_h=n(S,"LI",{});var Cye=s(_h);zse=n(Cye,"STRONG",{});var iat=s(zse);Mmo=r(iat,"wav2vec2-conformer"),iat.forEach(t),Emo=r(Cye," \u2014 "),RI=n(Cye,"A",{href:!0});var dat=s(RI);Cmo=r(dat,"Wav2Vec2CTCTokenizer"),dat.forEach(t),wmo=r(Cye," (Wav2Vec2-Conformer model)"),Cye.forEach(t),Amo=i(S),bh=n(S,"LI",{});var wye=s(bh);Wse=n(wye,"STRONG",{});var cat=s(Wse);Lmo=r(cat,"wav2vec2_phoneme"),cat.forEach(t),ymo=r(wye," \u2014 "),PI=n(wye,"A",{href:!0});var fat=s(PI);xmo=r(fat,"Wav2Vec2PhonemeCTCTokenizer"),fat.forEach(t),$mo=r(wye," (Wav2Vec2Phoneme model)"),wye.forEach(t),kmo=i(S),Is=n(S,"LI",{});var qk=s(Is);Qse=n(qk,"STRONG",{});var mat=s(Qse);Smo=r(mat,"xglm"),mat.forEach(t),Rmo=r(qk," \u2014 "),BI=n(qk,"A",{href:!0});var gat=s(BI);Pmo=r(gat,"XGLMTokenizer"),gat.forEach(t),Bmo=r(qk," or "),II=n(qk,"A",{href:!0});var hat=s(II);Imo=r(hat,"XGLMTokenizerFast"),hat.forEach(t),Nmo=r(qk," (XGLM model)"),qk.forEach(t),qmo=i(S),vh=n(S,"LI",{});var Aye=s(vh);Hse=n(Aye,"STRONG",{});var pat=s(Hse);jmo=r(pat,"xlm"),pat.forEach(t),Dmo=r(Aye," \u2014 "),NI=n(Aye,"A",{href:!0});var uat=s(NI);Gmo=r(uat,"XLMTokenizer"),uat.forEach(t),Omo=r(Aye," (XLM model)"),Aye.forEach(t),Vmo=i(S),Fh=n(S,"LI",{});var Lye=s(Fh);Use=n(Lye,"STRONG",{});var _at=s(Use);Xmo=r(_at,"xlm-prophetnet"),_at.forEach(t),zmo=r(Lye," \u2014 "),qI=n(Lye,"A",{href:!0});var bat=s(qI);Wmo=r(bat,"XLMProphetNetTokenizer"),bat.forEach(t),Qmo=r(Lye," (XLM-ProphetNet model)"),Lye.forEach(t),Hmo=i(S),Ns=n(S,"LI",{});var jk=s(Ns);Jse=n(jk,"STRONG",{});var vat=s(Jse);Umo=r(vat,"xlm-roberta"),vat.forEach(t),Jmo=r(jk," \u2014 "),jI=n(jk,"A",{href:!0});var Fat=s(jI);Ymo=r(Fat,"XLMRobertaTokenizer"),Fat.forEach(t),Kmo=r(jk," or "),DI=n(jk,"A",{href:!0});var Tat=s(DI);Zmo=r(Tat,"XLMRobertaTokenizerFast"),Tat.forEach(t),ego=r(jk," (XLM-RoBERTa model)"),jk.forEach(t),ogo=i(S),qs=n(S,"LI",{});var Dk=s(qs);Yse=n(Dk,"STRONG",{});var Mat=s(Yse);rgo=r(Mat,"xlm-roberta-xl"),Mat.forEach(t),tgo=r(Dk," \u2014 "),GI=n(Dk,"A",{href:!0});var Eat=s(GI);ago=r(Eat,"RobertaTokenizer"),Eat.forEach(t),ngo=r(Dk," or "),OI=n(Dk,"A",{href:!0});var Cat=s(OI);sgo=r(Cat,"RobertaTokenizerFast"),Cat.forEach(t),lgo=r(Dk," (XLM-RoBERTa-XL model)"),Dk.forEach(t),igo=i(S),js=n(S,"LI",{});var Gk=s(js);Kse=n(Gk,"STRONG",{});var wat=s(Kse);dgo=r(wat,"xlnet"),wat.forEach(t),cgo=r(Gk," \u2014 "),VI=n(Gk,"A",{href:!0});var Aat=s(VI);fgo=r(Aat,"XLNetTokenizer"),Aat.forEach(t),mgo=r(Gk," or "),XI=n(Gk,"A",{href:!0});var Lat=s(XI);ggo=r(Lat,"XLNetTokenizerFast"),Lat.forEach(t),hgo=r(Gk," (XLNet model)"),Gk.forEach(t),pgo=i(S),Ds=n(S,"LI",{});var Ok=s(Ds);Zse=n(Ok,"STRONG",{});var yat=s(Zse);ugo=r(yat,"yoso"),yat.forEach(t),_go=r(Ok," \u2014 "),zI=n(Ok,"A",{href:!0});var xat=s(zI);bgo=r(xat,"AlbertTokenizer"),xat.forEach(t),vgo=r(Ok," or "),WI=n(Ok,"A",{href:!0});var $at=s(WI);Fgo=r($at,"AlbertTokenizerFast"),$at.forEach(t),Tgo=r(Ok," (YOSO model)"),Ok.forEach(t),S.forEach(t),Mgo=i(Ws),T(Th.$$.fragment,Ws),Ws.forEach(t),Ego=i(zs),Mh=n(zs,"DIV",{class:!0});var uVe=s(Mh);T(Py.$$.fragment,uVe),Cgo=i(uVe),ele=n(uVe,"P",{});var kat=s(ele);wgo=r(kat,"Register a new tokenizer in this mapping."),kat.forEach(t),uVe.forEach(t),zs.forEach(t),pGe=i(f),ki=n(f,"H2",{class:!0});var _Ve=s(ki);Eh=n(_Ve,"A",{id:!0,class:!0,href:!0});var Sat=s(Eh);ole=n(Sat,"SPAN",{});var Rat=s(ole);T(By.$$.fragment,Rat),Rat.forEach(t),Sat.forEach(t),Ago=i(_Ve),rle=n(_Ve,"SPAN",{});var Pat=s(rle);Lgo=r(Pat,"AutoFeatureExtractor"),Pat.forEach(t),_Ve.forEach(t),uGe=i(f),Lo=n(f,"DIV",{class:!0});var Qs=s(Lo);T(Iy.$$.fragment,Qs),ygo=i(Qs),Ny=n(Qs,"P",{});var bVe=s(Ny);xgo=r(bVe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),QI=n(bVe,"A",{href:!0});var Bat=s(QI);$go=r(Bat,"AutoFeatureExtractor.from_pretrained()"),Bat.forEach(t),kgo=r(bVe," class method."),bVe.forEach(t),Sgo=i(Qs),qy=n(Qs,"P",{});var vVe=s(qy);Rgo=r(vVe,"This class cannot be instantiated directly using "),tle=n(vVe,"CODE",{});var Iat=s(tle);Pgo=r(Iat,"__init__()"),Iat.forEach(t),Bgo=r(vVe," (throws an error)."),vVe.forEach(t),Igo=i(Qs),He=n(Qs,"DIV",{class:!0});var ra=s(He);T(jy.$$.fragment,ra),Ngo=i(ra),ale=n(ra,"P",{});var Nat=s(ale);qgo=r(Nat,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Nat.forEach(t),jgo=i(ra),ka=n(ra,"P",{});var MA=s(ka);Dgo=r(MA,"The feature extractor class to instantiate is selected based on the "),nle=n(MA,"CODE",{});var qat=s(nle);Ggo=r(qat,"model_type"),qat.forEach(t),Ogo=r(MA,` property of the config object
(either passed as an argument or loaded from `),sle=n(MA,"CODE",{});var jat=s(sle);Vgo=r(jat,"pretrained_model_name_or_path"),jat.forEach(t),Xgo=r(MA,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),lle=n(MA,"CODE",{});var Dat=s(lle);zgo=r(Dat,"pretrained_model_name_or_path"),Dat.forEach(t),Wgo=r(MA,":"),MA.forEach(t),Qgo=i(ra),Y=n(ra,"UL",{});var K=s(Y);Ch=n(K,"LI",{});var yye=s(Ch);ile=n(yye,"STRONG",{});var Gat=s(ile);Hgo=r(Gat,"beit"),Gat.forEach(t),Ugo=r(yye," \u2014 "),HI=n(yye,"A",{href:!0});var Oat=s(HI);Jgo=r(Oat,"BeitFeatureExtractor"),Oat.forEach(t),Ygo=r(yye," (BEiT model)"),yye.forEach(t),Kgo=i(K),wh=n(K,"LI",{});var xye=s(wh);dle=n(xye,"STRONG",{});var Vat=s(dle);Zgo=r(Vat,"clip"),Vat.forEach(t),eho=r(xye," \u2014 "),UI=n(xye,"A",{href:!0});var Xat=s(UI);oho=r(Xat,"CLIPFeatureExtractor"),Xat.forEach(t),rho=r(xye," (CLIP model)"),xye.forEach(t),tho=i(K),Ah=n(K,"LI",{});var $ye=s(Ah);cle=n($ye,"STRONG",{});var zat=s(cle);aho=r(zat,"convnext"),zat.forEach(t),nho=r($ye," \u2014 "),JI=n($ye,"A",{href:!0});var Wat=s(JI);sho=r(Wat,"ConvNextFeatureExtractor"),Wat.forEach(t),lho=r($ye," (ConvNeXT model)"),$ye.forEach(t),iho=i(K),Lh=n(K,"LI",{});var kye=s(Lh);fle=n(kye,"STRONG",{});var Qat=s(fle);dho=r(Qat,"cvt"),Qat.forEach(t),cho=r(kye," \u2014 "),YI=n(kye,"A",{href:!0});var Hat=s(YI);fho=r(Hat,"ConvNextFeatureExtractor"),Hat.forEach(t),mho=r(kye," (CvT model)"),kye.forEach(t),gho=i(K),yh=n(K,"LI",{});var Sye=s(yh);mle=n(Sye,"STRONG",{});var Uat=s(mle);hho=r(Uat,"data2vec-audio"),Uat.forEach(t),pho=r(Sye," \u2014 "),KI=n(Sye,"A",{href:!0});var Jat=s(KI);uho=r(Jat,"Wav2Vec2FeatureExtractor"),Jat.forEach(t),_ho=r(Sye," (Data2VecAudio model)"),Sye.forEach(t),bho=i(K),xh=n(K,"LI",{});var Rye=s(xh);gle=n(Rye,"STRONG",{});var Yat=s(gle);vho=r(Yat,"data2vec-vision"),Yat.forEach(t),Fho=r(Rye," \u2014 "),ZI=n(Rye,"A",{href:!0});var Kat=s(ZI);Tho=r(Kat,"BeitFeatureExtractor"),Kat.forEach(t),Mho=r(Rye," (Data2VecVision model)"),Rye.forEach(t),Eho=i(K),$h=n(K,"LI",{});var Pye=s($h);hle=n(Pye,"STRONG",{});var Zat=s(hle);Cho=r(Zat,"deit"),Zat.forEach(t),who=r(Pye," \u2014 "),eN=n(Pye,"A",{href:!0});var ent=s(eN);Aho=r(ent,"DeiTFeatureExtractor"),ent.forEach(t),Lho=r(Pye," (DeiT model)"),Pye.forEach(t),yho=i(K),kh=n(K,"LI",{});var Bye=s(kh);ple=n(Bye,"STRONG",{});var ont=s(ple);xho=r(ont,"detr"),ont.forEach(t),$ho=r(Bye," \u2014 "),oN=n(Bye,"A",{href:!0});var rnt=s(oN);kho=r(rnt,"DetrFeatureExtractor"),rnt.forEach(t),Sho=r(Bye," (DETR model)"),Bye.forEach(t),Rho=i(K),Sh=n(K,"LI",{});var Iye=s(Sh);ule=n(Iye,"STRONG",{});var tnt=s(ule);Pho=r(tnt,"dpt"),tnt.forEach(t),Bho=r(Iye," \u2014 "),rN=n(Iye,"A",{href:!0});var ant=s(rN);Iho=r(ant,"DPTFeatureExtractor"),ant.forEach(t),Nho=r(Iye," (DPT model)"),Iye.forEach(t),qho=i(K),Rh=n(K,"LI",{});var Nye=s(Rh);_le=n(Nye,"STRONG",{});var nnt=s(_le);jho=r(nnt,"flava"),nnt.forEach(t),Dho=r(Nye," \u2014 "),tN=n(Nye,"A",{href:!0});var snt=s(tN);Gho=r(snt,"FlavaFeatureExtractor"),snt.forEach(t),Oho=r(Nye," (FLAVA model)"),Nye.forEach(t),Vho=i(K),Ph=n(K,"LI",{});var qye=s(Ph);ble=n(qye,"STRONG",{});var lnt=s(ble);Xho=r(lnt,"glpn"),lnt.forEach(t),zho=r(qye," \u2014 "),aN=n(qye,"A",{href:!0});var int=s(aN);Who=r(int,"GLPNFeatureExtractor"),int.forEach(t),Qho=r(qye," (GLPN model)"),qye.forEach(t),Hho=i(K),Bh=n(K,"LI",{});var jye=s(Bh);vle=n(jye,"STRONG",{});var dnt=s(vle);Uho=r(dnt,"hubert"),dnt.forEach(t),Jho=r(jye," \u2014 "),nN=n(jye,"A",{href:!0});var cnt=s(nN);Yho=r(cnt,"Wav2Vec2FeatureExtractor"),cnt.forEach(t),Kho=r(jye," (Hubert model)"),jye.forEach(t),Zho=i(K),Ih=n(K,"LI",{});var Dye=s(Ih);Fle=n(Dye,"STRONG",{});var fnt=s(Fle);epo=r(fnt,"imagegpt"),fnt.forEach(t),opo=r(Dye," \u2014 "),sN=n(Dye,"A",{href:!0});var mnt=s(sN);rpo=r(mnt,"ImageGPTFeatureExtractor"),mnt.forEach(t),tpo=r(Dye," (ImageGPT model)"),Dye.forEach(t),apo=i(K),Nh=n(K,"LI",{});var Gye=s(Nh);Tle=n(Gye,"STRONG",{});var gnt=s(Tle);npo=r(gnt,"layoutlmv2"),gnt.forEach(t),spo=r(Gye," \u2014 "),lN=n(Gye,"A",{href:!0});var hnt=s(lN);lpo=r(hnt,"LayoutLMv2FeatureExtractor"),hnt.forEach(t),ipo=r(Gye," (LayoutLMv2 model)"),Gye.forEach(t),dpo=i(K),qh=n(K,"LI",{});var Oye=s(qh);Mle=n(Oye,"STRONG",{});var pnt=s(Mle);cpo=r(pnt,"layoutlmv3"),pnt.forEach(t),fpo=r(Oye," \u2014 "),iN=n(Oye,"A",{href:!0});var unt=s(iN);mpo=r(unt,"LayoutLMv3FeatureExtractor"),unt.forEach(t),gpo=r(Oye," (LayoutLMv3 model)"),Oye.forEach(t),hpo=i(K),jh=n(K,"LI",{});var Vye=s(jh);Ele=n(Vye,"STRONG",{});var _nt=s(Ele);ppo=r(_nt,"levit"),_nt.forEach(t),upo=r(Vye," \u2014 "),dN=n(Vye,"A",{href:!0});var bnt=s(dN);_po=r(bnt,"LevitFeatureExtractor"),bnt.forEach(t),bpo=r(Vye," (LeViT model)"),Vye.forEach(t),vpo=i(K),Dh=n(K,"LI",{});var Xye=s(Dh);Cle=n(Xye,"STRONG",{});var vnt=s(Cle);Fpo=r(vnt,"maskformer"),vnt.forEach(t),Tpo=r(Xye," \u2014 "),cN=n(Xye,"A",{href:!0});var Fnt=s(cN);Mpo=r(Fnt,"MaskFormerFeatureExtractor"),Fnt.forEach(t),Epo=r(Xye," (MaskFormer model)"),Xye.forEach(t),Cpo=i(K),Gh=n(K,"LI",{});var zye=s(Gh);wle=n(zye,"STRONG",{});var Tnt=s(wle);wpo=r(Tnt,"mctct"),Tnt.forEach(t),Apo=r(zye," \u2014 "),fN=n(zye,"A",{href:!0});var Mnt=s(fN);Lpo=r(Mnt,"MCTCTFeatureExtractor"),Mnt.forEach(t),ypo=r(zye," (M-CTC-T model)"),zye.forEach(t),xpo=i(K),Oh=n(K,"LI",{});var Wye=s(Oh);Ale=n(Wye,"STRONG",{});var Ent=s(Ale);$po=r(Ent,"perceiver"),Ent.forEach(t),kpo=r(Wye," \u2014 "),mN=n(Wye,"A",{href:!0});var Cnt=s(mN);Spo=r(Cnt,"PerceiverFeatureExtractor"),Cnt.forEach(t),Rpo=r(Wye," (Perceiver model)"),Wye.forEach(t),Ppo=i(K),Vh=n(K,"LI",{});var Qye=s(Vh);Lle=n(Qye,"STRONG",{});var wnt=s(Lle);Bpo=r(wnt,"poolformer"),wnt.forEach(t),Ipo=r(Qye," \u2014 "),gN=n(Qye,"A",{href:!0});var Ant=s(gN);Npo=r(Ant,"PoolFormerFeatureExtractor"),Ant.forEach(t),qpo=r(Qye," (PoolFormer model)"),Qye.forEach(t),jpo=i(K),Xh=n(K,"LI",{});var Hye=s(Xh);yle=n(Hye,"STRONG",{});var Lnt=s(yle);Dpo=r(Lnt,"regnet"),Lnt.forEach(t),Gpo=r(Hye," \u2014 "),hN=n(Hye,"A",{href:!0});var ynt=s(hN);Opo=r(ynt,"ConvNextFeatureExtractor"),ynt.forEach(t),Vpo=r(Hye," (RegNet model)"),Hye.forEach(t),Xpo=i(K),zh=n(K,"LI",{});var Uye=s(zh);xle=n(Uye,"STRONG",{});var xnt=s(xle);zpo=r(xnt,"resnet"),xnt.forEach(t),Wpo=r(Uye," \u2014 "),pN=n(Uye,"A",{href:!0});var $nt=s(pN);Qpo=r($nt,"ConvNextFeatureExtractor"),$nt.forEach(t),Hpo=r(Uye," (ResNet model)"),Uye.forEach(t),Upo=i(K),Wh=n(K,"LI",{});var Jye=s(Wh);$le=n(Jye,"STRONG",{});var knt=s($le);Jpo=r(knt,"segformer"),knt.forEach(t),Ypo=r(Jye," \u2014 "),uN=n(Jye,"A",{href:!0});var Snt=s(uN);Kpo=r(Snt,"SegformerFeatureExtractor"),Snt.forEach(t),Zpo=r(Jye," (SegFormer model)"),Jye.forEach(t),euo=i(K),Qh=n(K,"LI",{});var Yye=s(Qh);kle=n(Yye,"STRONG",{});var Rnt=s(kle);ouo=r(Rnt,"speech_to_text"),Rnt.forEach(t),ruo=r(Yye," \u2014 "),_N=n(Yye,"A",{href:!0});var Pnt=s(_N);tuo=r(Pnt,"Speech2TextFeatureExtractor"),Pnt.forEach(t),auo=r(Yye," (Speech2Text model)"),Yye.forEach(t),nuo=i(K),Hh=n(K,"LI",{});var Kye=s(Hh);Sle=n(Kye,"STRONG",{});var Bnt=s(Sle);suo=r(Bnt,"swin"),Bnt.forEach(t),luo=r(Kye," \u2014 "),bN=n(Kye,"A",{href:!0});var Int=s(bN);iuo=r(Int,"ViTFeatureExtractor"),Int.forEach(t),duo=r(Kye," (Swin Transformer model)"),Kye.forEach(t),cuo=i(K),Uh=n(K,"LI",{});var Zye=s(Uh);Rle=n(Zye,"STRONG",{});var Nnt=s(Rle);fuo=r(Nnt,"van"),Nnt.forEach(t),muo=r(Zye," \u2014 "),vN=n(Zye,"A",{href:!0});var qnt=s(vN);guo=r(qnt,"ConvNextFeatureExtractor"),qnt.forEach(t),huo=r(Zye," (VAN model)"),Zye.forEach(t),puo=i(K),Jh=n(K,"LI",{});var e7e=s(Jh);Ple=n(e7e,"STRONG",{});var jnt=s(Ple);uuo=r(jnt,"vilt"),jnt.forEach(t),_uo=r(e7e," \u2014 "),FN=n(e7e,"A",{href:!0});var Dnt=s(FN);buo=r(Dnt,"ViltFeatureExtractor"),Dnt.forEach(t),vuo=r(e7e," (ViLT model)"),e7e.forEach(t),Fuo=i(K),Yh=n(K,"LI",{});var o7e=s(Yh);Ble=n(o7e,"STRONG",{});var Gnt=s(Ble);Tuo=r(Gnt,"vit"),Gnt.forEach(t),Muo=r(o7e," \u2014 "),TN=n(o7e,"A",{href:!0});var Ont=s(TN);Euo=r(Ont,"ViTFeatureExtractor"),Ont.forEach(t),Cuo=r(o7e," (ViT model)"),o7e.forEach(t),wuo=i(K),Kh=n(K,"LI",{});var r7e=s(Kh);Ile=n(r7e,"STRONG",{});var Vnt=s(Ile);Auo=r(Vnt,"vit_mae"),Vnt.forEach(t),Luo=r(r7e," \u2014 "),MN=n(r7e,"A",{href:!0});var Xnt=s(MN);yuo=r(Xnt,"ViTFeatureExtractor"),Xnt.forEach(t),xuo=r(r7e," (ViTMAE model)"),r7e.forEach(t),$uo=i(K),Zh=n(K,"LI",{});var t7e=s(Zh);Nle=n(t7e,"STRONG",{});var znt=s(Nle);kuo=r(znt,"wav2vec2"),znt.forEach(t),Suo=r(t7e," \u2014 "),EN=n(t7e,"A",{href:!0});var Wnt=s(EN);Ruo=r(Wnt,"Wav2Vec2FeatureExtractor"),Wnt.forEach(t),Puo=r(t7e," (Wav2Vec2 model)"),t7e.forEach(t),Buo=i(K),ep=n(K,"LI",{});var a7e=s(ep);qle=n(a7e,"STRONG",{});var Qnt=s(qle);Iuo=r(Qnt,"wav2vec2-conformer"),Qnt.forEach(t),Nuo=r(a7e," \u2014 "),CN=n(a7e,"A",{href:!0});var Hnt=s(CN);quo=r(Hnt,"Wav2Vec2FeatureExtractor"),Hnt.forEach(t),juo=r(a7e," (Wav2Vec2-Conformer model)"),a7e.forEach(t),Duo=i(K),op=n(K,"LI",{});var n7e=s(op);jle=n(n7e,"STRONG",{});var Unt=s(jle);Guo=r(Unt,"yolos"),Unt.forEach(t),Ouo=r(n7e," \u2014 "),wN=n(n7e,"A",{href:!0});var Jnt=s(wN);Vuo=r(Jnt,"YolosFeatureExtractor"),Jnt.forEach(t),Xuo=r(n7e," (YOLOS model)"),n7e.forEach(t),K.forEach(t),zuo=i(ra),T(rp.$$.fragment,ra),Wuo=i(ra),T(tp.$$.fragment,ra),ra.forEach(t),Quo=i(Qs),ap=n(Qs,"DIV",{class:!0});var FVe=s(ap);T(Dy.$$.fragment,FVe),Huo=i(FVe),Dle=n(FVe,"P",{});var Ynt=s(Dle);Uuo=r(Ynt,"Register a new feature extractor for this class."),Ynt.forEach(t),FVe.forEach(t),Qs.forEach(t),_Ge=i(f),Si=n(f,"H2",{class:!0});var TVe=s(Si);np=n(TVe,"A",{id:!0,class:!0,href:!0});var Knt=s(np);Gle=n(Knt,"SPAN",{});var Znt=s(Gle);T(Gy.$$.fragment,Znt),Znt.forEach(t),Knt.forEach(t),Juo=i(TVe),Ole=n(TVe,"SPAN",{});var est=s(Ole);Yuo=r(est,"AutoProcessor"),est.forEach(t),TVe.forEach(t),bGe=i(f),yo=n(f,"DIV",{class:!0});var Hs=s(yo);T(Oy.$$.fragment,Hs),Kuo=i(Hs),Vy=n(Hs,"P",{});var MVe=s(Vy);Zuo=r(MVe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),AN=n(MVe,"A",{href:!0});var ost=s(AN);e_o=r(ost,"AutoProcessor.from_pretrained()"),ost.forEach(t),o_o=r(MVe," class method."),MVe.forEach(t),r_o=i(Hs),Xy=n(Hs,"P",{});var EVe=s(Xy);t_o=r(EVe,"This class cannot be instantiated directly using "),Vle=n(EVe,"CODE",{});var rst=s(Vle);a_o=r(rst,"__init__()"),rst.forEach(t),n_o=r(EVe," (throws an error)."),EVe.forEach(t),s_o=i(Hs),Ue=n(Hs,"DIV",{class:!0});var ta=s(Ue);T(zy.$$.fragment,ta),l_o=i(ta),Xle=n(ta,"P",{});var tst=s(Xle);i_o=r(tst,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),tst.forEach(t),d_o=i(ta),Ri=n(ta,"P",{});var eoe=s(Ri);c_o=r(eoe,"The processor class to instantiate is selected based on the "),zle=n(eoe,"CODE",{});var ast=s(zle);f_o=r(ast,"model_type"),ast.forEach(t),m_o=r(eoe,` property of the config object (either
passed as an argument or loaded from `),Wle=n(eoe,"CODE",{});var nst=s(Wle);g_o=r(nst,"pretrained_model_name_or_path"),nst.forEach(t),h_o=r(eoe," if possible):"),eoe.forEach(t),p_o=i(ta),he=n(ta,"UL",{});var _e=s(he);sp=n(_e,"LI",{});var s7e=s(sp);Qle=n(s7e,"STRONG",{});var sst=s(Qle);u_o=r(sst,"clip"),sst.forEach(t),__o=r(s7e," \u2014 "),LN=n(s7e,"A",{href:!0});var lst=s(LN);b_o=r(lst,"CLIPProcessor"),lst.forEach(t),v_o=r(s7e," (CLIP model)"),s7e.forEach(t),F_o=i(_e),lp=n(_e,"LI",{});var l7e=s(lp);Hle=n(l7e,"STRONG",{});var ist=s(Hle);T_o=r(ist,"flava"),ist.forEach(t),M_o=r(l7e," \u2014 "),Ule=n(l7e,"CODE",{});var dst=s(Ule);E_o=r(dst,"FLAVAProcessor"),dst.forEach(t),C_o=r(l7e," (FLAVA model)"),l7e.forEach(t),w_o=i(_e),ip=n(_e,"LI",{});var i7e=s(ip);Jle=n(i7e,"STRONG",{});var cst=s(Jle);A_o=r(cst,"layoutlmv2"),cst.forEach(t),L_o=r(i7e," \u2014 "),yN=n(i7e,"A",{href:!0});var fst=s(yN);y_o=r(fst,"LayoutLMv2Processor"),fst.forEach(t),x_o=r(i7e," (LayoutLMv2 model)"),i7e.forEach(t),$_o=i(_e),dp=n(_e,"LI",{});var d7e=s(dp);Yle=n(d7e,"STRONG",{});var mst=s(Yle);k_o=r(mst,"layoutlmv3"),mst.forEach(t),S_o=r(d7e," \u2014 "),xN=n(d7e,"A",{href:!0});var gst=s(xN);R_o=r(gst,"LayoutLMv3Processor"),gst.forEach(t),P_o=r(d7e," (LayoutLMv3 model)"),d7e.forEach(t),B_o=i(_e),cp=n(_e,"LI",{});var c7e=s(cp);Kle=n(c7e,"STRONG",{});var hst=s(Kle);I_o=r(hst,"layoutxlm"),hst.forEach(t),N_o=r(c7e," \u2014 "),$N=n(c7e,"A",{href:!0});var pst=s($N);q_o=r(pst,"LayoutXLMProcessor"),pst.forEach(t),j_o=r(c7e," (LayoutXLM model)"),c7e.forEach(t),D_o=i(_e),fp=n(_e,"LI",{});var f7e=s(fp);Zle=n(f7e,"STRONG",{});var ust=s(Zle);G_o=r(ust,"sew"),ust.forEach(t),O_o=r(f7e," \u2014 "),kN=n(f7e,"A",{href:!0});var _st=s(kN);V_o=r(_st,"Wav2Vec2Processor"),_st.forEach(t),X_o=r(f7e," (SEW model)"),f7e.forEach(t),z_o=i(_e),mp=n(_e,"LI",{});var m7e=s(mp);eie=n(m7e,"STRONG",{});var bst=s(eie);W_o=r(bst,"sew-d"),bst.forEach(t),Q_o=r(m7e," \u2014 "),SN=n(m7e,"A",{href:!0});var vst=s(SN);H_o=r(vst,"Wav2Vec2Processor"),vst.forEach(t),U_o=r(m7e," (SEW-D model)"),m7e.forEach(t),J_o=i(_e),gp=n(_e,"LI",{});var g7e=s(gp);oie=n(g7e,"STRONG",{});var Fst=s(oie);Y_o=r(Fst,"speech_to_text"),Fst.forEach(t),K_o=r(g7e," \u2014 "),RN=n(g7e,"A",{href:!0});var Tst=s(RN);Z_o=r(Tst,"Speech2TextProcessor"),Tst.forEach(t),e1o=r(g7e," (Speech2Text model)"),g7e.forEach(t),o1o=i(_e),hp=n(_e,"LI",{});var h7e=s(hp);rie=n(h7e,"STRONG",{});var Mst=s(rie);r1o=r(Mst,"speech_to_text_2"),Mst.forEach(t),t1o=r(h7e," \u2014 "),PN=n(h7e,"A",{href:!0});var Est=s(PN);a1o=r(Est,"Speech2Text2Processor"),Est.forEach(t),n1o=r(h7e," (Speech2Text2 model)"),h7e.forEach(t),s1o=i(_e),pp=n(_e,"LI",{});var p7e=s(pp);tie=n(p7e,"STRONG",{});var Cst=s(tie);l1o=r(Cst,"trocr"),Cst.forEach(t),i1o=r(p7e," \u2014 "),BN=n(p7e,"A",{href:!0});var wst=s(BN);d1o=r(wst,"TrOCRProcessor"),wst.forEach(t),c1o=r(p7e," (TrOCR model)"),p7e.forEach(t),f1o=i(_e),up=n(_e,"LI",{});var u7e=s(up);aie=n(u7e,"STRONG",{});var Ast=s(aie);m1o=r(Ast,"unispeech"),Ast.forEach(t),g1o=r(u7e," \u2014 "),IN=n(u7e,"A",{href:!0});var Lst=s(IN);h1o=r(Lst,"Wav2Vec2Processor"),Lst.forEach(t),p1o=r(u7e," (UniSpeech model)"),u7e.forEach(t),u1o=i(_e),_p=n(_e,"LI",{});var _7e=s(_p);nie=n(_7e,"STRONG",{});var yst=s(nie);_1o=r(yst,"unispeech-sat"),yst.forEach(t),b1o=r(_7e," \u2014 "),NN=n(_7e,"A",{href:!0});var xst=s(NN);v1o=r(xst,"Wav2Vec2Processor"),xst.forEach(t),F1o=r(_7e," (UniSpeechSat model)"),_7e.forEach(t),T1o=i(_e),bp=n(_e,"LI",{});var b7e=s(bp);sie=n(b7e,"STRONG",{});var $st=s(sie);M1o=r($st,"vilt"),$st.forEach(t),E1o=r(b7e," \u2014 "),qN=n(b7e,"A",{href:!0});var kst=s(qN);C1o=r(kst,"ViltProcessor"),kst.forEach(t),w1o=r(b7e," (ViLT model)"),b7e.forEach(t),A1o=i(_e),vp=n(_e,"LI",{});var v7e=s(vp);lie=n(v7e,"STRONG",{});var Sst=s(lie);L1o=r(Sst,"vision-text-dual-encoder"),Sst.forEach(t),y1o=r(v7e," \u2014 "),jN=n(v7e,"A",{href:!0});var Rst=s(jN);x1o=r(Rst,"VisionTextDualEncoderProcessor"),Rst.forEach(t),$1o=r(v7e," (VisionTextDualEncoder model)"),v7e.forEach(t),k1o=i(_e),Fp=n(_e,"LI",{});var F7e=s(Fp);iie=n(F7e,"STRONG",{});var Pst=s(iie);S1o=r(Pst,"wav2vec2"),Pst.forEach(t),R1o=r(F7e," \u2014 "),DN=n(F7e,"A",{href:!0});var Bst=s(DN);P1o=r(Bst,"Wav2Vec2Processor"),Bst.forEach(t),B1o=r(F7e," (Wav2Vec2 model)"),F7e.forEach(t),I1o=i(_e),Tp=n(_e,"LI",{});var T7e=s(Tp);die=n(T7e,"STRONG",{});var Ist=s(die);N1o=r(Ist,"wav2vec2-conformer"),Ist.forEach(t),q1o=r(T7e," \u2014 "),GN=n(T7e,"A",{href:!0});var Nst=s(GN);j1o=r(Nst,"Wav2Vec2Processor"),Nst.forEach(t),D1o=r(T7e," (Wav2Vec2-Conformer model)"),T7e.forEach(t),G1o=i(_e),Mp=n(_e,"LI",{});var M7e=s(Mp);cie=n(M7e,"STRONG",{});var qst=s(cie);O1o=r(qst,"wavlm"),qst.forEach(t),V1o=r(M7e," \u2014 "),ON=n(M7e,"A",{href:!0});var jst=s(ON);X1o=r(jst,"Wav2Vec2Processor"),jst.forEach(t),z1o=r(M7e," (WavLM model)"),M7e.forEach(t),_e.forEach(t),W1o=i(ta),T(Ep.$$.fragment,ta),Q1o=i(ta),T(Cp.$$.fragment,ta),ta.forEach(t),H1o=i(Hs),wp=n(Hs,"DIV",{class:!0});var CVe=s(wp);T(Wy.$$.fragment,CVe),U1o=i(CVe),fie=n(CVe,"P",{});var Dst=s(fie);J1o=r(Dst,"Register a new processor for this class."),Dst.forEach(t),CVe.forEach(t),Hs.forEach(t),vGe=i(f),Pi=n(f,"H2",{class:!0});var wVe=s(Pi);Ap=n(wVe,"A",{id:!0,class:!0,href:!0});var Gst=s(Ap);mie=n(Gst,"SPAN",{});var Ost=s(mie);T(Qy.$$.fragment,Ost),Ost.forEach(t),Gst.forEach(t),Y1o=i(wVe),gie=n(wVe,"SPAN",{});var Vst=s(gie);K1o=r(Vst,"AutoModel"),Vst.forEach(t),wVe.forEach(t),FGe=i(f),xo=n(f,"DIV",{class:!0});var Us=s(xo);T(Hy.$$.fragment,Us),Z1o=i(Us),Bi=n(Us,"P",{});var ooe=s(Bi);e2o=r(ooe,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),VN=n(ooe,"A",{href:!0});var Xst=s(VN);o2o=r(Xst,"from_pretrained()"),Xst.forEach(t),r2o=r(ooe," class method or the "),XN=n(ooe,"A",{href:!0});var zst=s(XN);t2o=r(zst,"from_config()"),zst.forEach(t),a2o=r(ooe,` class
method.`),ooe.forEach(t),n2o=i(Us),Uy=n(Us,"P",{});var AVe=s(Uy);s2o=r(AVe,"This class cannot be instantiated directly using "),hie=n(AVe,"CODE",{});var Wst=s(hie);l2o=r(Wst,"__init__()"),Wst.forEach(t),i2o=r(AVe," (throws an error)."),AVe.forEach(t),d2o=i(Us),nt=n(Us,"DIV",{class:!0});var EA=s(nt);T(Jy.$$.fragment,EA),c2o=i(EA),pie=n(EA,"P",{});var Qst=s(pie);f2o=r(Qst,"Instantiates one of the base model classes of the library from a configuration."),Qst.forEach(t),m2o=i(EA),Ii=n(EA,"P",{});var roe=s(Ii);g2o=r(roe,`Note:
Loading a model from its configuration file does `),uie=n(roe,"STRONG",{});var Hst=s(uie);h2o=r(Hst,"not"),Hst.forEach(t),p2o=r(roe,` load the model weights. It only affects the
model\u2019s configuration. Use `),zN=n(roe,"A",{href:!0});var Ust=s(zN);u2o=r(Ust,"from_pretrained()"),Ust.forEach(t),_2o=r(roe," to load the model weights."),roe.forEach(t),b2o=i(EA),T(Lp.$$.fragment,EA),EA.forEach(t),v2o=i(Us),Je=n(Us,"DIV",{class:!0});var aa=s(Je);T(Yy.$$.fragment,aa),F2o=i(aa),_ie=n(aa,"P",{});var Jst=s(_ie);T2o=r(Jst,"Instantiate one of the base model classes of the library from a pretrained model."),Jst.forEach(t),M2o=i(aa),Sa=n(aa,"P",{});var CA=s(Sa);E2o=r(CA,"The model class to instantiate is selected based on the "),bie=n(CA,"CODE",{});var Yst=s(bie);C2o=r(Yst,"model_type"),Yst.forEach(t),w2o=r(CA,` property of the config object (either
passed as an argument or loaded from `),vie=n(CA,"CODE",{});var Kst=s(vie);A2o=r(Kst,"pretrained_model_name_or_path"),Kst.forEach(t),L2o=r(CA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fie=n(CA,"CODE",{});var Zst=s(Fie);y2o=r(Zst,"pretrained_model_name_or_path"),Zst.forEach(t),x2o=r(CA,":"),CA.forEach(t),$2o=i(aa),x=n(aa,"UL",{});var $=s(x);yp=n($,"LI",{});var E7e=s(yp);Tie=n(E7e,"STRONG",{});var elt=s(Tie);k2o=r(elt,"albert"),elt.forEach(t),S2o=r(E7e," \u2014 "),WN=n(E7e,"A",{href:!0});var olt=s(WN);R2o=r(olt,"AlbertModel"),olt.forEach(t),P2o=r(E7e," (ALBERT model)"),E7e.forEach(t),B2o=i($),xp=n($,"LI",{});var C7e=s(xp);Mie=n(C7e,"STRONG",{});var rlt=s(Mie);I2o=r(rlt,"bart"),rlt.forEach(t),N2o=r(C7e," \u2014 "),QN=n(C7e,"A",{href:!0});var tlt=s(QN);q2o=r(tlt,"BartModel"),tlt.forEach(t),j2o=r(C7e," (BART model)"),C7e.forEach(t),D2o=i($),$p=n($,"LI",{});var w7e=s($p);Eie=n(w7e,"STRONG",{});var alt=s(Eie);G2o=r(alt,"beit"),alt.forEach(t),O2o=r(w7e," \u2014 "),HN=n(w7e,"A",{href:!0});var nlt=s(HN);V2o=r(nlt,"BeitModel"),nlt.forEach(t),X2o=r(w7e," (BEiT model)"),w7e.forEach(t),z2o=i($),kp=n($,"LI",{});var A7e=s(kp);Cie=n(A7e,"STRONG",{});var slt=s(Cie);W2o=r(slt,"bert"),slt.forEach(t),Q2o=r(A7e," \u2014 "),UN=n(A7e,"A",{href:!0});var llt=s(UN);H2o=r(llt,"BertModel"),llt.forEach(t),U2o=r(A7e," (BERT model)"),A7e.forEach(t),J2o=i($),Sp=n($,"LI",{});var L7e=s(Sp);wie=n(L7e,"STRONG",{});var ilt=s(wie);Y2o=r(ilt,"bert-generation"),ilt.forEach(t),K2o=r(L7e," \u2014 "),JN=n(L7e,"A",{href:!0});var dlt=s(JN);Z2o=r(dlt,"BertGenerationEncoder"),dlt.forEach(t),ebo=r(L7e," (Bert Generation model)"),L7e.forEach(t),obo=i($),Rp=n($,"LI",{});var y7e=s(Rp);Aie=n(y7e,"STRONG",{});var clt=s(Aie);rbo=r(clt,"big_bird"),clt.forEach(t),tbo=r(y7e," \u2014 "),YN=n(y7e,"A",{href:!0});var flt=s(YN);abo=r(flt,"BigBirdModel"),flt.forEach(t),nbo=r(y7e," (BigBird model)"),y7e.forEach(t),sbo=i($),Pp=n($,"LI",{});var x7e=s(Pp);Lie=n(x7e,"STRONG",{});var mlt=s(Lie);lbo=r(mlt,"bigbird_pegasus"),mlt.forEach(t),ibo=r(x7e," \u2014 "),KN=n(x7e,"A",{href:!0});var glt=s(KN);dbo=r(glt,"BigBirdPegasusModel"),glt.forEach(t),cbo=r(x7e," (BigBird-Pegasus model)"),x7e.forEach(t),fbo=i($),Bp=n($,"LI",{});var $7e=s(Bp);yie=n($7e,"STRONG",{});var hlt=s(yie);mbo=r(hlt,"blenderbot"),hlt.forEach(t),gbo=r($7e," \u2014 "),ZN=n($7e,"A",{href:!0});var plt=s(ZN);hbo=r(plt,"BlenderbotModel"),plt.forEach(t),pbo=r($7e," (Blenderbot model)"),$7e.forEach(t),ubo=i($),Ip=n($,"LI",{});var k7e=s(Ip);xie=n(k7e,"STRONG",{});var ult=s(xie);_bo=r(ult,"blenderbot-small"),ult.forEach(t),bbo=r(k7e," \u2014 "),eq=n(k7e,"A",{href:!0});var _lt=s(eq);vbo=r(_lt,"BlenderbotSmallModel"),_lt.forEach(t),Fbo=r(k7e," (BlenderbotSmall model)"),k7e.forEach(t),Tbo=i($),Np=n($,"LI",{});var S7e=s(Np);$ie=n(S7e,"STRONG",{});var blt=s($ie);Mbo=r(blt,"bloom"),blt.forEach(t),Ebo=r(S7e," \u2014 "),oq=n(S7e,"A",{href:!0});var vlt=s(oq);Cbo=r(vlt,"BloomModel"),vlt.forEach(t),wbo=r(S7e," (BLOOM model)"),S7e.forEach(t),Abo=i($),qp=n($,"LI",{});var R7e=s(qp);kie=n(R7e,"STRONG",{});var Flt=s(kie);Lbo=r(Flt,"camembert"),Flt.forEach(t),ybo=r(R7e," \u2014 "),rq=n(R7e,"A",{href:!0});var Tlt=s(rq);xbo=r(Tlt,"CamembertModel"),Tlt.forEach(t),$bo=r(R7e," (CamemBERT model)"),R7e.forEach(t),kbo=i($),jp=n($,"LI",{});var P7e=s(jp);Sie=n(P7e,"STRONG",{});var Mlt=s(Sie);Sbo=r(Mlt,"canine"),Mlt.forEach(t),Rbo=r(P7e," \u2014 "),tq=n(P7e,"A",{href:!0});var Elt=s(tq);Pbo=r(Elt,"CanineModel"),Elt.forEach(t),Bbo=r(P7e," (CANINE model)"),P7e.forEach(t),Ibo=i($),Dp=n($,"LI",{});var B7e=s(Dp);Rie=n(B7e,"STRONG",{});var Clt=s(Rie);Nbo=r(Clt,"clip"),Clt.forEach(t),qbo=r(B7e," \u2014 "),aq=n(B7e,"A",{href:!0});var wlt=s(aq);jbo=r(wlt,"CLIPModel"),wlt.forEach(t),Dbo=r(B7e," (CLIP model)"),B7e.forEach(t),Gbo=i($),Gp=n($,"LI",{});var I7e=s(Gp);Pie=n(I7e,"STRONG",{});var Alt=s(Pie);Obo=r(Alt,"convbert"),Alt.forEach(t),Vbo=r(I7e," \u2014 "),nq=n(I7e,"A",{href:!0});var Llt=s(nq);Xbo=r(Llt,"ConvBertModel"),Llt.forEach(t),zbo=r(I7e," (ConvBERT model)"),I7e.forEach(t),Wbo=i($),Op=n($,"LI",{});var N7e=s(Op);Bie=n(N7e,"STRONG",{});var ylt=s(Bie);Qbo=r(ylt,"convnext"),ylt.forEach(t),Hbo=r(N7e," \u2014 "),sq=n(N7e,"A",{href:!0});var xlt=s(sq);Ubo=r(xlt,"ConvNextModel"),xlt.forEach(t),Jbo=r(N7e," (ConvNeXT model)"),N7e.forEach(t),Ybo=i($),Vp=n($,"LI",{});var q7e=s(Vp);Iie=n(q7e,"STRONG",{});var $lt=s(Iie);Kbo=r($lt,"ctrl"),$lt.forEach(t),Zbo=r(q7e," \u2014 "),lq=n(q7e,"A",{href:!0});var klt=s(lq);e4o=r(klt,"CTRLModel"),klt.forEach(t),o4o=r(q7e," (CTRL model)"),q7e.forEach(t),r4o=i($),Xp=n($,"LI",{});var j7e=s(Xp);Nie=n(j7e,"STRONG",{});var Slt=s(Nie);t4o=r(Slt,"cvt"),Slt.forEach(t),a4o=r(j7e," \u2014 "),iq=n(j7e,"A",{href:!0});var Rlt=s(iq);n4o=r(Rlt,"CvtModel"),Rlt.forEach(t),s4o=r(j7e," (CvT model)"),j7e.forEach(t),l4o=i($),zp=n($,"LI",{});var D7e=s(zp);qie=n(D7e,"STRONG",{});var Plt=s(qie);i4o=r(Plt,"data2vec-audio"),Plt.forEach(t),d4o=r(D7e," \u2014 "),dq=n(D7e,"A",{href:!0});var Blt=s(dq);c4o=r(Blt,"Data2VecAudioModel"),Blt.forEach(t),f4o=r(D7e," (Data2VecAudio model)"),D7e.forEach(t),m4o=i($),Wp=n($,"LI",{});var G7e=s(Wp);jie=n(G7e,"STRONG",{});var Ilt=s(jie);g4o=r(Ilt,"data2vec-text"),Ilt.forEach(t),h4o=r(G7e," \u2014 "),cq=n(G7e,"A",{href:!0});var Nlt=s(cq);p4o=r(Nlt,"Data2VecTextModel"),Nlt.forEach(t),u4o=r(G7e," (Data2VecText model)"),G7e.forEach(t),_4o=i($),Qp=n($,"LI",{});var O7e=s(Qp);Die=n(O7e,"STRONG",{});var qlt=s(Die);b4o=r(qlt,"data2vec-vision"),qlt.forEach(t),v4o=r(O7e," \u2014 "),fq=n(O7e,"A",{href:!0});var jlt=s(fq);F4o=r(jlt,"Data2VecVisionModel"),jlt.forEach(t),T4o=r(O7e," (Data2VecVision model)"),O7e.forEach(t),M4o=i($),Hp=n($,"LI",{});var V7e=s(Hp);Gie=n(V7e,"STRONG",{});var Dlt=s(Gie);E4o=r(Dlt,"deberta"),Dlt.forEach(t),C4o=r(V7e," \u2014 "),mq=n(V7e,"A",{href:!0});var Glt=s(mq);w4o=r(Glt,"DebertaModel"),Glt.forEach(t),A4o=r(V7e," (DeBERTa model)"),V7e.forEach(t),L4o=i($),Up=n($,"LI",{});var X7e=s(Up);Oie=n(X7e,"STRONG",{});var Olt=s(Oie);y4o=r(Olt,"deberta-v2"),Olt.forEach(t),x4o=r(X7e," \u2014 "),gq=n(X7e,"A",{href:!0});var Vlt=s(gq);$4o=r(Vlt,"DebertaV2Model"),Vlt.forEach(t),k4o=r(X7e," (DeBERTa-v2 model)"),X7e.forEach(t),S4o=i($),Jp=n($,"LI",{});var z7e=s(Jp);Vie=n(z7e,"STRONG",{});var Xlt=s(Vie);R4o=r(Xlt,"decision_transformer"),Xlt.forEach(t),P4o=r(z7e," \u2014 "),hq=n(z7e,"A",{href:!0});var zlt=s(hq);B4o=r(zlt,"DecisionTransformerModel"),zlt.forEach(t),I4o=r(z7e," (Decision Transformer model)"),z7e.forEach(t),N4o=i($),Yp=n($,"LI",{});var W7e=s(Yp);Xie=n(W7e,"STRONG",{});var Wlt=s(Xie);q4o=r(Wlt,"deit"),Wlt.forEach(t),j4o=r(W7e," \u2014 "),pq=n(W7e,"A",{href:!0});var Qlt=s(pq);D4o=r(Qlt,"DeiTModel"),Qlt.forEach(t),G4o=r(W7e," (DeiT model)"),W7e.forEach(t),O4o=i($),Kp=n($,"LI",{});var Q7e=s(Kp);zie=n(Q7e,"STRONG",{});var Hlt=s(zie);V4o=r(Hlt,"detr"),Hlt.forEach(t),X4o=r(Q7e," \u2014 "),uq=n(Q7e,"A",{href:!0});var Ult=s(uq);z4o=r(Ult,"DetrModel"),Ult.forEach(t),W4o=r(Q7e," (DETR model)"),Q7e.forEach(t),Q4o=i($),Zp=n($,"LI",{});var H7e=s(Zp);Wie=n(H7e,"STRONG",{});var Jlt=s(Wie);H4o=r(Jlt,"distilbert"),Jlt.forEach(t),U4o=r(H7e," \u2014 "),_q=n(H7e,"A",{href:!0});var Ylt=s(_q);J4o=r(Ylt,"DistilBertModel"),Ylt.forEach(t),Y4o=r(H7e," (DistilBERT model)"),H7e.forEach(t),K4o=i($),eu=n($,"LI",{});var U7e=s(eu);Qie=n(U7e,"STRONG",{});var Klt=s(Qie);Z4o=r(Klt,"dpr"),Klt.forEach(t),e5o=r(U7e," \u2014 "),bq=n(U7e,"A",{href:!0});var Zlt=s(bq);o5o=r(Zlt,"DPRQuestionEncoder"),Zlt.forEach(t),r5o=r(U7e," (DPR model)"),U7e.forEach(t),t5o=i($),ou=n($,"LI",{});var J7e=s(ou);Hie=n(J7e,"STRONG",{});var eit=s(Hie);a5o=r(eit,"dpt"),eit.forEach(t),n5o=r(J7e," \u2014 "),vq=n(J7e,"A",{href:!0});var oit=s(vq);s5o=r(oit,"DPTModel"),oit.forEach(t),l5o=r(J7e," (DPT model)"),J7e.forEach(t),i5o=i($),ru=n($,"LI",{});var Y7e=s(ru);Uie=n(Y7e,"STRONG",{});var rit=s(Uie);d5o=r(rit,"electra"),rit.forEach(t),c5o=r(Y7e," \u2014 "),Fq=n(Y7e,"A",{href:!0});var tit=s(Fq);f5o=r(tit,"ElectraModel"),tit.forEach(t),m5o=r(Y7e," (ELECTRA model)"),Y7e.forEach(t),g5o=i($),tu=n($,"LI",{});var K7e=s(tu);Jie=n(K7e,"STRONG",{});var ait=s(Jie);h5o=r(ait,"flaubert"),ait.forEach(t),p5o=r(K7e," \u2014 "),Tq=n(K7e,"A",{href:!0});var nit=s(Tq);u5o=r(nit,"FlaubertModel"),nit.forEach(t),_5o=r(K7e," (FlauBERT model)"),K7e.forEach(t),b5o=i($),au=n($,"LI",{});var Z7e=s(au);Yie=n(Z7e,"STRONG",{});var sit=s(Yie);v5o=r(sit,"flava"),sit.forEach(t),F5o=r(Z7e," \u2014 "),Mq=n(Z7e,"A",{href:!0});var lit=s(Mq);T5o=r(lit,"FlavaModel"),lit.forEach(t),M5o=r(Z7e," (FLAVA model)"),Z7e.forEach(t),E5o=i($),nu=n($,"LI",{});var e8e=s(nu);Kie=n(e8e,"STRONG",{});var iit=s(Kie);C5o=r(iit,"fnet"),iit.forEach(t),w5o=r(e8e," \u2014 "),Eq=n(e8e,"A",{href:!0});var dit=s(Eq);A5o=r(dit,"FNetModel"),dit.forEach(t),L5o=r(e8e," (FNet model)"),e8e.forEach(t),y5o=i($),su=n($,"LI",{});var o8e=s(su);Zie=n(o8e,"STRONG",{});var cit=s(Zie);x5o=r(cit,"fsmt"),cit.forEach(t),$5o=r(o8e," \u2014 "),Cq=n(o8e,"A",{href:!0});var fit=s(Cq);k5o=r(fit,"FSMTModel"),fit.forEach(t),S5o=r(o8e," (FairSeq Machine-Translation model)"),o8e.forEach(t),R5o=i($),Gs=n($,"LI",{});var Vk=s(Gs);ede=n(Vk,"STRONG",{});var mit=s(ede);P5o=r(mit,"funnel"),mit.forEach(t),B5o=r(Vk," \u2014 "),wq=n(Vk,"A",{href:!0});var git=s(wq);I5o=r(git,"FunnelModel"),git.forEach(t),N5o=r(Vk," or "),Aq=n(Vk,"A",{href:!0});var hit=s(Aq);q5o=r(hit,"FunnelBaseModel"),hit.forEach(t),j5o=r(Vk," (Funnel Transformer model)"),Vk.forEach(t),D5o=i($),lu=n($,"LI",{});var r8e=s(lu);ode=n(r8e,"STRONG",{});var pit=s(ode);G5o=r(pit,"glpn"),pit.forEach(t),O5o=r(r8e," \u2014 "),Lq=n(r8e,"A",{href:!0});var uit=s(Lq);V5o=r(uit,"GLPNModel"),uit.forEach(t),X5o=r(r8e," (GLPN model)"),r8e.forEach(t),z5o=i($),iu=n($,"LI",{});var t8e=s(iu);rde=n(t8e,"STRONG",{});var _it=s(rde);W5o=r(_it,"gpt2"),_it.forEach(t),Q5o=r(t8e," \u2014 "),yq=n(t8e,"A",{href:!0});var bit=s(yq);H5o=r(bit,"GPT2Model"),bit.forEach(t),U5o=r(t8e," (OpenAI GPT-2 model)"),t8e.forEach(t),J5o=i($),du=n($,"LI",{});var a8e=s(du);tde=n(a8e,"STRONG",{});var vit=s(tde);Y5o=r(vit,"gpt_neo"),vit.forEach(t),K5o=r(a8e," \u2014 "),xq=n(a8e,"A",{href:!0});var Fit=s(xq);Z5o=r(Fit,"GPTNeoModel"),Fit.forEach(t),evo=r(a8e," (GPT Neo model)"),a8e.forEach(t),ovo=i($),cu=n($,"LI",{});var n8e=s(cu);ade=n(n8e,"STRONG",{});var Tit=s(ade);rvo=r(Tit,"gpt_neox"),Tit.forEach(t),tvo=r(n8e," \u2014 "),$q=n(n8e,"A",{href:!0});var Mit=s($q);avo=r(Mit,"GPTNeoXModel"),Mit.forEach(t),nvo=r(n8e," (GPT NeoX model)"),n8e.forEach(t),svo=i($),fu=n($,"LI",{});var s8e=s(fu);nde=n(s8e,"STRONG",{});var Eit=s(nde);lvo=r(Eit,"gptj"),Eit.forEach(t),ivo=r(s8e," \u2014 "),kq=n(s8e,"A",{href:!0});var Cit=s(kq);dvo=r(Cit,"GPTJModel"),Cit.forEach(t),cvo=r(s8e," (GPT-J model)"),s8e.forEach(t),fvo=i($),mu=n($,"LI",{});var l8e=s(mu);sde=n(l8e,"STRONG",{});var wit=s(sde);mvo=r(wit,"hubert"),wit.forEach(t),gvo=r(l8e," \u2014 "),Sq=n(l8e,"A",{href:!0});var Ait=s(Sq);hvo=r(Ait,"HubertModel"),Ait.forEach(t),pvo=r(l8e," (Hubert model)"),l8e.forEach(t),uvo=i($),gu=n($,"LI",{});var i8e=s(gu);lde=n(i8e,"STRONG",{});var Lit=s(lde);_vo=r(Lit,"ibert"),Lit.forEach(t),bvo=r(i8e," \u2014 "),Rq=n(i8e,"A",{href:!0});var yit=s(Rq);vvo=r(yit,"IBertModel"),yit.forEach(t),Fvo=r(i8e," (I-BERT model)"),i8e.forEach(t),Tvo=i($),hu=n($,"LI",{});var d8e=s(hu);ide=n(d8e,"STRONG",{});var xit=s(ide);Mvo=r(xit,"imagegpt"),xit.forEach(t),Evo=r(d8e," \u2014 "),Pq=n(d8e,"A",{href:!0});var $it=s(Pq);Cvo=r($it,"ImageGPTModel"),$it.forEach(t),wvo=r(d8e," (ImageGPT model)"),d8e.forEach(t),Avo=i($),pu=n($,"LI",{});var c8e=s(pu);dde=n(c8e,"STRONG",{});var kit=s(dde);Lvo=r(kit,"layoutlm"),kit.forEach(t),yvo=r(c8e," \u2014 "),Bq=n(c8e,"A",{href:!0});var Sit=s(Bq);xvo=r(Sit,"LayoutLMModel"),Sit.forEach(t),$vo=r(c8e," (LayoutLM model)"),c8e.forEach(t),kvo=i($),uu=n($,"LI",{});var f8e=s(uu);cde=n(f8e,"STRONG",{});var Rit=s(cde);Svo=r(Rit,"layoutlmv2"),Rit.forEach(t),Rvo=r(f8e," \u2014 "),Iq=n(f8e,"A",{href:!0});var Pit=s(Iq);Pvo=r(Pit,"LayoutLMv2Model"),Pit.forEach(t),Bvo=r(f8e," (LayoutLMv2 model)"),f8e.forEach(t),Ivo=i($),_u=n($,"LI",{});var m8e=s(_u);fde=n(m8e,"STRONG",{});var Bit=s(fde);Nvo=r(Bit,"layoutlmv3"),Bit.forEach(t),qvo=r(m8e," \u2014 "),Nq=n(m8e,"A",{href:!0});var Iit=s(Nq);jvo=r(Iit,"LayoutLMv3Model"),Iit.forEach(t),Dvo=r(m8e," (LayoutLMv3 model)"),m8e.forEach(t),Gvo=i($),bu=n($,"LI",{});var g8e=s(bu);mde=n(g8e,"STRONG",{});var Nit=s(mde);Ovo=r(Nit,"led"),Nit.forEach(t),Vvo=r(g8e," \u2014 "),qq=n(g8e,"A",{href:!0});var qit=s(qq);Xvo=r(qit,"LEDModel"),qit.forEach(t),zvo=r(g8e," (LED model)"),g8e.forEach(t),Wvo=i($),vu=n($,"LI",{});var h8e=s(vu);gde=n(h8e,"STRONG",{});var jit=s(gde);Qvo=r(jit,"levit"),jit.forEach(t),Hvo=r(h8e," \u2014 "),jq=n(h8e,"A",{href:!0});var Dit=s(jq);Uvo=r(Dit,"LevitModel"),Dit.forEach(t),Jvo=r(h8e," (LeViT model)"),h8e.forEach(t),Yvo=i($),Fu=n($,"LI",{});var p8e=s(Fu);hde=n(p8e,"STRONG",{});var Git=s(hde);Kvo=r(Git,"longformer"),Git.forEach(t),Zvo=r(p8e," \u2014 "),Dq=n(p8e,"A",{href:!0});var Oit=s(Dq);e3o=r(Oit,"LongformerModel"),Oit.forEach(t),o3o=r(p8e," (Longformer model)"),p8e.forEach(t),r3o=i($),Tu=n($,"LI",{});var u8e=s(Tu);pde=n(u8e,"STRONG",{});var Vit=s(pde);t3o=r(Vit,"longt5"),Vit.forEach(t),a3o=r(u8e," \u2014 "),Gq=n(u8e,"A",{href:!0});var Xit=s(Gq);n3o=r(Xit,"LongT5Model"),Xit.forEach(t),s3o=r(u8e," (LongT5 model)"),u8e.forEach(t),l3o=i($),Mu=n($,"LI",{});var _8e=s(Mu);ude=n(_8e,"STRONG",{});var zit=s(ude);i3o=r(zit,"luke"),zit.forEach(t),d3o=r(_8e," \u2014 "),Oq=n(_8e,"A",{href:!0});var Wit=s(Oq);c3o=r(Wit,"LukeModel"),Wit.forEach(t),f3o=r(_8e," (LUKE model)"),_8e.forEach(t),m3o=i($),Eu=n($,"LI",{});var b8e=s(Eu);_de=n(b8e,"STRONG",{});var Qit=s(_de);g3o=r(Qit,"lxmert"),Qit.forEach(t),h3o=r(b8e," \u2014 "),Vq=n(b8e,"A",{href:!0});var Hit=s(Vq);p3o=r(Hit,"LxmertModel"),Hit.forEach(t),u3o=r(b8e," (LXMERT model)"),b8e.forEach(t),_3o=i($),Cu=n($,"LI",{});var v8e=s(Cu);bde=n(v8e,"STRONG",{});var Uit=s(bde);b3o=r(Uit,"m2m_100"),Uit.forEach(t),v3o=r(v8e," \u2014 "),Xq=n(v8e,"A",{href:!0});var Jit=s(Xq);F3o=r(Jit,"M2M100Model"),Jit.forEach(t),T3o=r(v8e," (M2M100 model)"),v8e.forEach(t),M3o=i($),wu=n($,"LI",{});var F8e=s(wu);vde=n(F8e,"STRONG",{});var Yit=s(vde);E3o=r(Yit,"marian"),Yit.forEach(t),C3o=r(F8e," \u2014 "),zq=n(F8e,"A",{href:!0});var Kit=s(zq);w3o=r(Kit,"MarianModel"),Kit.forEach(t),A3o=r(F8e," (Marian model)"),F8e.forEach(t),L3o=i($),Au=n($,"LI",{});var T8e=s(Au);Fde=n(T8e,"STRONG",{});var Zit=s(Fde);y3o=r(Zit,"maskformer"),Zit.forEach(t),x3o=r(T8e," \u2014 "),Wq=n(T8e,"A",{href:!0});var edt=s(Wq);$3o=r(edt,"MaskFormerModel"),edt.forEach(t),k3o=r(T8e," (MaskFormer model)"),T8e.forEach(t),S3o=i($),Lu=n($,"LI",{});var M8e=s(Lu);Tde=n(M8e,"STRONG",{});var odt=s(Tde);R3o=r(odt,"mbart"),odt.forEach(t),P3o=r(M8e," \u2014 "),Qq=n(M8e,"A",{href:!0});var rdt=s(Qq);B3o=r(rdt,"MBartModel"),rdt.forEach(t),I3o=r(M8e," (mBART model)"),M8e.forEach(t),N3o=i($),yu=n($,"LI",{});var E8e=s(yu);Mde=n(E8e,"STRONG",{});var tdt=s(Mde);q3o=r(tdt,"mctct"),tdt.forEach(t),j3o=r(E8e," \u2014 "),Hq=n(E8e,"A",{href:!0});var adt=s(Hq);D3o=r(adt,"MCTCTModel"),adt.forEach(t),G3o=r(E8e," (M-CTC-T model)"),E8e.forEach(t),O3o=i($),xu=n($,"LI",{});var C8e=s(xu);Ede=n(C8e,"STRONG",{});var ndt=s(Ede);V3o=r(ndt,"megatron-bert"),ndt.forEach(t),X3o=r(C8e," \u2014 "),Uq=n(C8e,"A",{href:!0});var sdt=s(Uq);z3o=r(sdt,"MegatronBertModel"),sdt.forEach(t),W3o=r(C8e," (Megatron-BERT model)"),C8e.forEach(t),Q3o=i($),$u=n($,"LI",{});var w8e=s($u);Cde=n(w8e,"STRONG",{});var ldt=s(Cde);H3o=r(ldt,"mobilebert"),ldt.forEach(t),U3o=r(w8e," \u2014 "),Jq=n(w8e,"A",{href:!0});var idt=s(Jq);J3o=r(idt,"MobileBertModel"),idt.forEach(t),Y3o=r(w8e," (MobileBERT model)"),w8e.forEach(t),K3o=i($),ku=n($,"LI",{});var A8e=s(ku);wde=n(A8e,"STRONG",{});var ddt=s(wde);Z3o=r(ddt,"mpnet"),ddt.forEach(t),eFo=r(A8e," \u2014 "),Yq=n(A8e,"A",{href:!0});var cdt=s(Yq);oFo=r(cdt,"MPNetModel"),cdt.forEach(t),rFo=r(A8e," (MPNet model)"),A8e.forEach(t),tFo=i($),Su=n($,"LI",{});var L8e=s(Su);Ade=n(L8e,"STRONG",{});var fdt=s(Ade);aFo=r(fdt,"mt5"),fdt.forEach(t),nFo=r(L8e," \u2014 "),Kq=n(L8e,"A",{href:!0});var mdt=s(Kq);sFo=r(mdt,"MT5Model"),mdt.forEach(t),lFo=r(L8e," (MT5 model)"),L8e.forEach(t),iFo=i($),Ru=n($,"LI",{});var y8e=s(Ru);Lde=n(y8e,"STRONG",{});var gdt=s(Lde);dFo=r(gdt,"nystromformer"),gdt.forEach(t),cFo=r(y8e," \u2014 "),Zq=n(y8e,"A",{href:!0});var hdt=s(Zq);fFo=r(hdt,"NystromformerModel"),hdt.forEach(t),mFo=r(y8e," (Nystr\xF6mformer model)"),y8e.forEach(t),gFo=i($),Pu=n($,"LI",{});var x8e=s(Pu);yde=n(x8e,"STRONG",{});var pdt=s(yde);hFo=r(pdt,"openai-gpt"),pdt.forEach(t),pFo=r(x8e," \u2014 "),ej=n(x8e,"A",{href:!0});var udt=s(ej);uFo=r(udt,"OpenAIGPTModel"),udt.forEach(t),_Fo=r(x8e," (OpenAI GPT model)"),x8e.forEach(t),bFo=i($),Bu=n($,"LI",{});var $8e=s(Bu);xde=n($8e,"STRONG",{});var _dt=s(xde);vFo=r(_dt,"opt"),_dt.forEach(t),FFo=r($8e," \u2014 "),oj=n($8e,"A",{href:!0});var bdt=s(oj);TFo=r(bdt,"OPTModel"),bdt.forEach(t),MFo=r($8e," (OPT model)"),$8e.forEach(t),EFo=i($),Iu=n($,"LI",{});var k8e=s(Iu);$de=n(k8e,"STRONG",{});var vdt=s($de);CFo=r(vdt,"pegasus"),vdt.forEach(t),wFo=r(k8e," \u2014 "),rj=n(k8e,"A",{href:!0});var Fdt=s(rj);AFo=r(Fdt,"PegasusModel"),Fdt.forEach(t),LFo=r(k8e," (Pegasus model)"),k8e.forEach(t),yFo=i($),Nu=n($,"LI",{});var S8e=s(Nu);kde=n(S8e,"STRONG",{});var Tdt=s(kde);xFo=r(Tdt,"perceiver"),Tdt.forEach(t),$Fo=r(S8e," \u2014 "),tj=n(S8e,"A",{href:!0});var Mdt=s(tj);kFo=r(Mdt,"PerceiverModel"),Mdt.forEach(t),SFo=r(S8e," (Perceiver model)"),S8e.forEach(t),RFo=i($),qu=n($,"LI",{});var R8e=s(qu);Sde=n(R8e,"STRONG",{});var Edt=s(Sde);PFo=r(Edt,"plbart"),Edt.forEach(t),BFo=r(R8e," \u2014 "),aj=n(R8e,"A",{href:!0});var Cdt=s(aj);IFo=r(Cdt,"PLBartModel"),Cdt.forEach(t),NFo=r(R8e," (PLBart model)"),R8e.forEach(t),qFo=i($),ju=n($,"LI",{});var P8e=s(ju);Rde=n(P8e,"STRONG",{});var wdt=s(Rde);jFo=r(wdt,"poolformer"),wdt.forEach(t),DFo=r(P8e," \u2014 "),nj=n(P8e,"A",{href:!0});var Adt=s(nj);GFo=r(Adt,"PoolFormerModel"),Adt.forEach(t),OFo=r(P8e," (PoolFormer model)"),P8e.forEach(t),VFo=i($),Du=n($,"LI",{});var B8e=s(Du);Pde=n(B8e,"STRONG",{});var Ldt=s(Pde);XFo=r(Ldt,"prophetnet"),Ldt.forEach(t),zFo=r(B8e," \u2014 "),sj=n(B8e,"A",{href:!0});var ydt=s(sj);WFo=r(ydt,"ProphetNetModel"),ydt.forEach(t),QFo=r(B8e," (ProphetNet model)"),B8e.forEach(t),HFo=i($),Gu=n($,"LI",{});var I8e=s(Gu);Bde=n(I8e,"STRONG",{});var xdt=s(Bde);UFo=r(xdt,"qdqbert"),xdt.forEach(t),JFo=r(I8e," \u2014 "),lj=n(I8e,"A",{href:!0});var $dt=s(lj);YFo=r($dt,"QDQBertModel"),$dt.forEach(t),KFo=r(I8e," (QDQBert model)"),I8e.forEach(t),ZFo=i($),Ou=n($,"LI",{});var N8e=s(Ou);Ide=n(N8e,"STRONG",{});var kdt=s(Ide);e6o=r(kdt,"reformer"),kdt.forEach(t),o6o=r(N8e," \u2014 "),ij=n(N8e,"A",{href:!0});var Sdt=s(ij);r6o=r(Sdt,"ReformerModel"),Sdt.forEach(t),t6o=r(N8e," (Reformer model)"),N8e.forEach(t),a6o=i($),Vu=n($,"LI",{});var q8e=s(Vu);Nde=n(q8e,"STRONG",{});var Rdt=s(Nde);n6o=r(Rdt,"regnet"),Rdt.forEach(t),s6o=r(q8e," \u2014 "),dj=n(q8e,"A",{href:!0});var Pdt=s(dj);l6o=r(Pdt,"RegNetModel"),Pdt.forEach(t),i6o=r(q8e," (RegNet model)"),q8e.forEach(t),d6o=i($),Xu=n($,"LI",{});var j8e=s(Xu);qde=n(j8e,"STRONG",{});var Bdt=s(qde);c6o=r(Bdt,"rembert"),Bdt.forEach(t),f6o=r(j8e," \u2014 "),cj=n(j8e,"A",{href:!0});var Idt=s(cj);m6o=r(Idt,"RemBertModel"),Idt.forEach(t),g6o=r(j8e," (RemBERT model)"),j8e.forEach(t),h6o=i($),zu=n($,"LI",{});var D8e=s(zu);jde=n(D8e,"STRONG",{});var Ndt=s(jde);p6o=r(Ndt,"resnet"),Ndt.forEach(t),u6o=r(D8e," \u2014 "),fj=n(D8e,"A",{href:!0});var qdt=s(fj);_6o=r(qdt,"ResNetModel"),qdt.forEach(t),b6o=r(D8e," (ResNet model)"),D8e.forEach(t),v6o=i($),Wu=n($,"LI",{});var G8e=s(Wu);Dde=n(G8e,"STRONG",{});var jdt=s(Dde);F6o=r(jdt,"retribert"),jdt.forEach(t),T6o=r(G8e," \u2014 "),mj=n(G8e,"A",{href:!0});var Ddt=s(mj);M6o=r(Ddt,"RetriBertModel"),Ddt.forEach(t),E6o=r(G8e," (RetriBERT model)"),G8e.forEach(t),C6o=i($),Qu=n($,"LI",{});var O8e=s(Qu);Gde=n(O8e,"STRONG",{});var Gdt=s(Gde);w6o=r(Gdt,"roberta"),Gdt.forEach(t),A6o=r(O8e," \u2014 "),gj=n(O8e,"A",{href:!0});var Odt=s(gj);L6o=r(Odt,"RobertaModel"),Odt.forEach(t),y6o=r(O8e," (RoBERTa model)"),O8e.forEach(t),x6o=i($),Hu=n($,"LI",{});var V8e=s(Hu);Ode=n(V8e,"STRONG",{});var Vdt=s(Ode);$6o=r(Vdt,"roformer"),Vdt.forEach(t),k6o=r(V8e," \u2014 "),hj=n(V8e,"A",{href:!0});var Xdt=s(hj);S6o=r(Xdt,"RoFormerModel"),Xdt.forEach(t),R6o=r(V8e," (RoFormer model)"),V8e.forEach(t),P6o=i($),Uu=n($,"LI",{});var X8e=s(Uu);Vde=n(X8e,"STRONG",{});var zdt=s(Vde);B6o=r(zdt,"segformer"),zdt.forEach(t),I6o=r(X8e," \u2014 "),pj=n(X8e,"A",{href:!0});var Wdt=s(pj);N6o=r(Wdt,"SegformerModel"),Wdt.forEach(t),q6o=r(X8e," (SegFormer model)"),X8e.forEach(t),j6o=i($),Ju=n($,"LI",{});var z8e=s(Ju);Xde=n(z8e,"STRONG",{});var Qdt=s(Xde);D6o=r(Qdt,"sew"),Qdt.forEach(t),G6o=r(z8e," \u2014 "),uj=n(z8e,"A",{href:!0});var Hdt=s(uj);O6o=r(Hdt,"SEWModel"),Hdt.forEach(t),V6o=r(z8e," (SEW model)"),z8e.forEach(t),X6o=i($),Yu=n($,"LI",{});var W8e=s(Yu);zde=n(W8e,"STRONG",{});var Udt=s(zde);z6o=r(Udt,"sew-d"),Udt.forEach(t),W6o=r(W8e," \u2014 "),_j=n(W8e,"A",{href:!0});var Jdt=s(_j);Q6o=r(Jdt,"SEWDModel"),Jdt.forEach(t),H6o=r(W8e," (SEW-D model)"),W8e.forEach(t),U6o=i($),Ku=n($,"LI",{});var Q8e=s(Ku);Wde=n(Q8e,"STRONG",{});var Ydt=s(Wde);J6o=r(Ydt,"speech_to_text"),Ydt.forEach(t),Y6o=r(Q8e," \u2014 "),bj=n(Q8e,"A",{href:!0});var Kdt=s(bj);K6o=r(Kdt,"Speech2TextModel"),Kdt.forEach(t),Z6o=r(Q8e," (Speech2Text model)"),Q8e.forEach(t),eTo=i($),Zu=n($,"LI",{});var H8e=s(Zu);Qde=n(H8e,"STRONG",{});var Zdt=s(Qde);oTo=r(Zdt,"splinter"),Zdt.forEach(t),rTo=r(H8e," \u2014 "),vj=n(H8e,"A",{href:!0});var ect=s(vj);tTo=r(ect,"SplinterModel"),ect.forEach(t),aTo=r(H8e," (Splinter model)"),H8e.forEach(t),nTo=i($),e_=n($,"LI",{});var U8e=s(e_);Hde=n(U8e,"STRONG",{});var oct=s(Hde);sTo=r(oct,"squeezebert"),oct.forEach(t),lTo=r(U8e," \u2014 "),Fj=n(U8e,"A",{href:!0});var rct=s(Fj);iTo=r(rct,"SqueezeBertModel"),rct.forEach(t),dTo=r(U8e," (SqueezeBERT model)"),U8e.forEach(t),cTo=i($),o_=n($,"LI",{});var J8e=s(o_);Ude=n(J8e,"STRONG",{});var tct=s(Ude);fTo=r(tct,"swin"),tct.forEach(t),mTo=r(J8e," \u2014 "),Tj=n(J8e,"A",{href:!0});var act=s(Tj);gTo=r(act,"SwinModel"),act.forEach(t),hTo=r(J8e," (Swin Transformer model)"),J8e.forEach(t),pTo=i($),r_=n($,"LI",{});var Y8e=s(r_);Jde=n(Y8e,"STRONG",{});var nct=s(Jde);uTo=r(nct,"t5"),nct.forEach(t),_To=r(Y8e," \u2014 "),Mj=n(Y8e,"A",{href:!0});var sct=s(Mj);bTo=r(sct,"T5Model"),sct.forEach(t),vTo=r(Y8e," (T5 model)"),Y8e.forEach(t),FTo=i($),t_=n($,"LI",{});var K8e=s(t_);Yde=n(K8e,"STRONG",{});var lct=s(Yde);TTo=r(lct,"tapas"),lct.forEach(t),MTo=r(K8e," \u2014 "),Ej=n(K8e,"A",{href:!0});var ict=s(Ej);ETo=r(ict,"TapasModel"),ict.forEach(t),CTo=r(K8e," (TAPAS model)"),K8e.forEach(t),wTo=i($),a_=n($,"LI",{});var Z8e=s(a_);Kde=n(Z8e,"STRONG",{});var dct=s(Kde);ATo=r(dct,"trajectory_transformer"),dct.forEach(t),LTo=r(Z8e," \u2014 "),Cj=n(Z8e,"A",{href:!0});var cct=s(Cj);yTo=r(cct,"TrajectoryTransformerModel"),cct.forEach(t),xTo=r(Z8e," (Trajectory Transformer model)"),Z8e.forEach(t),$To=i($),n_=n($,"LI",{});var e9e=s(n_);Zde=n(e9e,"STRONG",{});var fct=s(Zde);kTo=r(fct,"transfo-xl"),fct.forEach(t),STo=r(e9e," \u2014 "),wj=n(e9e,"A",{href:!0});var mct=s(wj);RTo=r(mct,"TransfoXLModel"),mct.forEach(t),PTo=r(e9e," (Transformer-XL model)"),e9e.forEach(t),BTo=i($),s_=n($,"LI",{});var o9e=s(s_);ece=n(o9e,"STRONG",{});var gct=s(ece);ITo=r(gct,"unispeech"),gct.forEach(t),NTo=r(o9e," \u2014 "),Aj=n(o9e,"A",{href:!0});var hct=s(Aj);qTo=r(hct,"UniSpeechModel"),hct.forEach(t),jTo=r(o9e," (UniSpeech model)"),o9e.forEach(t),DTo=i($),l_=n($,"LI",{});var r9e=s(l_);oce=n(r9e,"STRONG",{});var pct=s(oce);GTo=r(pct,"unispeech-sat"),pct.forEach(t),OTo=r(r9e," \u2014 "),Lj=n(r9e,"A",{href:!0});var uct=s(Lj);VTo=r(uct,"UniSpeechSatModel"),uct.forEach(t),XTo=r(r9e," (UniSpeechSat model)"),r9e.forEach(t),zTo=i($),i_=n($,"LI",{});var t9e=s(i_);rce=n(t9e,"STRONG",{});var _ct=s(rce);WTo=r(_ct,"van"),_ct.forEach(t),QTo=r(t9e," \u2014 "),yj=n(t9e,"A",{href:!0});var bct=s(yj);HTo=r(bct,"VanModel"),bct.forEach(t),UTo=r(t9e," (VAN model)"),t9e.forEach(t),JTo=i($),d_=n($,"LI",{});var a9e=s(d_);tce=n(a9e,"STRONG",{});var vct=s(tce);YTo=r(vct,"vilt"),vct.forEach(t),KTo=r(a9e," \u2014 "),xj=n(a9e,"A",{href:!0});var Fct=s(xj);ZTo=r(Fct,"ViltModel"),Fct.forEach(t),eMo=r(a9e," (ViLT model)"),a9e.forEach(t),oMo=i($),c_=n($,"LI",{});var n9e=s(c_);ace=n(n9e,"STRONG",{});var Tct=s(ace);rMo=r(Tct,"vision-text-dual-encoder"),Tct.forEach(t),tMo=r(n9e," \u2014 "),$j=n(n9e,"A",{href:!0});var Mct=s($j);aMo=r(Mct,"VisionTextDualEncoderModel"),Mct.forEach(t),nMo=r(n9e," (VisionTextDualEncoder model)"),n9e.forEach(t),sMo=i($),f_=n($,"LI",{});var s9e=s(f_);nce=n(s9e,"STRONG",{});var Ect=s(nce);lMo=r(Ect,"visual_bert"),Ect.forEach(t),iMo=r(s9e," \u2014 "),kj=n(s9e,"A",{href:!0});var Cct=s(kj);dMo=r(Cct,"VisualBertModel"),Cct.forEach(t),cMo=r(s9e," (VisualBERT model)"),s9e.forEach(t),fMo=i($),m_=n($,"LI",{});var l9e=s(m_);sce=n(l9e,"STRONG",{});var wct=s(sce);mMo=r(wct,"vit"),wct.forEach(t),gMo=r(l9e," \u2014 "),Sj=n(l9e,"A",{href:!0});var Act=s(Sj);hMo=r(Act,"ViTModel"),Act.forEach(t),pMo=r(l9e," (ViT model)"),l9e.forEach(t),uMo=i($),g_=n($,"LI",{});var i9e=s(g_);lce=n(i9e,"STRONG",{});var Lct=s(lce);_Mo=r(Lct,"vit_mae"),Lct.forEach(t),bMo=r(i9e," \u2014 "),Rj=n(i9e,"A",{href:!0});var yct=s(Rj);vMo=r(yct,"ViTMAEModel"),yct.forEach(t),FMo=r(i9e," (ViTMAE model)"),i9e.forEach(t),TMo=i($),h_=n($,"LI",{});var d9e=s(h_);ice=n(d9e,"STRONG",{});var xct=s(ice);MMo=r(xct,"wav2vec2"),xct.forEach(t),EMo=r(d9e," \u2014 "),Pj=n(d9e,"A",{href:!0});var $ct=s(Pj);CMo=r($ct,"Wav2Vec2Model"),$ct.forEach(t),wMo=r(d9e," (Wav2Vec2 model)"),d9e.forEach(t),AMo=i($),p_=n($,"LI",{});var c9e=s(p_);dce=n(c9e,"STRONG",{});var kct=s(dce);LMo=r(kct,"wav2vec2-conformer"),kct.forEach(t),yMo=r(c9e," \u2014 "),Bj=n(c9e,"A",{href:!0});var Sct=s(Bj);xMo=r(Sct,"Wav2Vec2ConformerModel"),Sct.forEach(t),$Mo=r(c9e," (Wav2Vec2-Conformer model)"),c9e.forEach(t),kMo=i($),u_=n($,"LI",{});var f9e=s(u_);cce=n(f9e,"STRONG",{});var Rct=s(cce);SMo=r(Rct,"wavlm"),Rct.forEach(t),RMo=r(f9e," \u2014 "),Ij=n(f9e,"A",{href:!0});var Pct=s(Ij);PMo=r(Pct,"WavLMModel"),Pct.forEach(t),BMo=r(f9e," (WavLM model)"),f9e.forEach(t),IMo=i($),__=n($,"LI",{});var m9e=s(__);fce=n(m9e,"STRONG",{});var Bct=s(fce);NMo=r(Bct,"xglm"),Bct.forEach(t),qMo=r(m9e," \u2014 "),Nj=n(m9e,"A",{href:!0});var Ict=s(Nj);jMo=r(Ict,"XGLMModel"),Ict.forEach(t),DMo=r(m9e," (XGLM model)"),m9e.forEach(t),GMo=i($),b_=n($,"LI",{});var g9e=s(b_);mce=n(g9e,"STRONG",{});var Nct=s(mce);OMo=r(Nct,"xlm"),Nct.forEach(t),VMo=r(g9e," \u2014 "),qj=n(g9e,"A",{href:!0});var qct=s(qj);XMo=r(qct,"XLMModel"),qct.forEach(t),zMo=r(g9e," (XLM model)"),g9e.forEach(t),WMo=i($),v_=n($,"LI",{});var h9e=s(v_);gce=n(h9e,"STRONG",{});var jct=s(gce);QMo=r(jct,"xlm-prophetnet"),jct.forEach(t),HMo=r(h9e," \u2014 "),jj=n(h9e,"A",{href:!0});var Dct=s(jj);UMo=r(Dct,"XLMProphetNetModel"),Dct.forEach(t),JMo=r(h9e," (XLM-ProphetNet model)"),h9e.forEach(t),YMo=i($),F_=n($,"LI",{});var p9e=s(F_);hce=n(p9e,"STRONG",{});var Gct=s(hce);KMo=r(Gct,"xlm-roberta"),Gct.forEach(t),ZMo=r(p9e," \u2014 "),Dj=n(p9e,"A",{href:!0});var Oct=s(Dj);eEo=r(Oct,"XLMRobertaModel"),Oct.forEach(t),oEo=r(p9e," (XLM-RoBERTa model)"),p9e.forEach(t),rEo=i($),T_=n($,"LI",{});var u9e=s(T_);pce=n(u9e,"STRONG",{});var Vct=s(pce);tEo=r(Vct,"xlm-roberta-xl"),Vct.forEach(t),aEo=r(u9e," \u2014 "),Gj=n(u9e,"A",{href:!0});var Xct=s(Gj);nEo=r(Xct,"XLMRobertaXLModel"),Xct.forEach(t),sEo=r(u9e," (XLM-RoBERTa-XL model)"),u9e.forEach(t),lEo=i($),M_=n($,"LI",{});var _9e=s(M_);uce=n(_9e,"STRONG",{});var zct=s(uce);iEo=r(zct,"xlnet"),zct.forEach(t),dEo=r(_9e," \u2014 "),Oj=n(_9e,"A",{href:!0});var Wct=s(Oj);cEo=r(Wct,"XLNetModel"),Wct.forEach(t),fEo=r(_9e," (XLNet model)"),_9e.forEach(t),mEo=i($),E_=n($,"LI",{});var b9e=s(E_);_ce=n(b9e,"STRONG",{});var Qct=s(_ce);gEo=r(Qct,"yolos"),Qct.forEach(t),hEo=r(b9e," \u2014 "),Vj=n(b9e,"A",{href:!0});var Hct=s(Vj);pEo=r(Hct,"YolosModel"),Hct.forEach(t),uEo=r(b9e," (YOLOS model)"),b9e.forEach(t),_Eo=i($),C_=n($,"LI",{});var v9e=s(C_);bce=n(v9e,"STRONG",{});var Uct=s(bce);bEo=r(Uct,"yoso"),Uct.forEach(t),vEo=r(v9e," \u2014 "),Xj=n(v9e,"A",{href:!0});var Jct=s(Xj);FEo=r(Jct,"YosoModel"),Jct.forEach(t),TEo=r(v9e," (YOSO model)"),v9e.forEach(t),$.forEach(t),MEo=i(aa),w_=n(aa,"P",{});var F9e=s(w_);EEo=r(F9e,"The model is set in evaluation mode by default using "),vce=n(F9e,"CODE",{});var Yct=s(vce);CEo=r(Yct,"model.eval()"),Yct.forEach(t),wEo=r(F9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fce=n(F9e,"CODE",{});var Kct=s(Fce);AEo=r(Kct,"model.train()"),Kct.forEach(t),F9e.forEach(t),LEo=i(aa),T(A_.$$.fragment,aa),aa.forEach(t),Us.forEach(t),TGe=i(f),Ni=n(f,"H2",{class:!0});var LVe=s(Ni);L_=n(LVe,"A",{id:!0,class:!0,href:!0});var Zct=s(L_);Tce=n(Zct,"SPAN",{});var eft=s(Tce);T(Ky.$$.fragment,eft),eft.forEach(t),Zct.forEach(t),yEo=i(LVe),Mce=n(LVe,"SPAN",{});var oft=s(Mce);xEo=r(oft,"AutoModelForPreTraining"),oft.forEach(t),LVe.forEach(t),MGe=i(f),$o=n(f,"DIV",{class:!0});var Js=s($o);T(Zy.$$.fragment,Js),$Eo=i(Js),qi=n(Js,"P",{});var toe=s(qi);kEo=r(toe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),zj=n(toe,"A",{href:!0});var rft=s(zj);SEo=r(rft,"from_pretrained()"),rft.forEach(t),REo=r(toe," class method or the "),Wj=n(toe,"A",{href:!0});var tft=s(Wj);PEo=r(tft,"from_config()"),tft.forEach(t),BEo=r(toe,` class
method.`),toe.forEach(t),IEo=i(Js),e7=n(Js,"P",{});var yVe=s(e7);NEo=r(yVe,"This class cannot be instantiated directly using "),Ece=n(yVe,"CODE",{});var aft=s(Ece);qEo=r(aft,"__init__()"),aft.forEach(t),jEo=r(yVe," (throws an error)."),yVe.forEach(t),DEo=i(Js),st=n(Js,"DIV",{class:!0});var wA=s(st);T(o7.$$.fragment,wA),GEo=i(wA),Cce=n(wA,"P",{});var nft=s(Cce);OEo=r(nft,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),nft.forEach(t),VEo=i(wA),ji=n(wA,"P",{});var aoe=s(ji);XEo=r(aoe,`Note:
Loading a model from its configuration file does `),wce=n(aoe,"STRONG",{});var sft=s(wce);zEo=r(sft,"not"),sft.forEach(t),WEo=r(aoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),Qj=n(aoe,"A",{href:!0});var lft=s(Qj);QEo=r(lft,"from_pretrained()"),lft.forEach(t),HEo=r(aoe," to load the model weights."),aoe.forEach(t),UEo=i(wA),T(y_.$$.fragment,wA),wA.forEach(t),JEo=i(Js),Ye=n(Js,"DIV",{class:!0});var na=s(Ye);T(r7.$$.fragment,na),YEo=i(na),Ace=n(na,"P",{});var ift=s(Ace);KEo=r(ift,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),ift.forEach(t),ZEo=i(na),Ra=n(na,"P",{});var AA=s(Ra);eCo=r(AA,"The model class to instantiate is selected based on the "),Lce=n(AA,"CODE",{});var dft=s(Lce);oCo=r(dft,"model_type"),dft.forEach(t),rCo=r(AA,` property of the config object (either
passed as an argument or loaded from `),yce=n(AA,"CODE",{});var cft=s(yce);tCo=r(cft,"pretrained_model_name_or_path"),cft.forEach(t),aCo=r(AA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xce=n(AA,"CODE",{});var fft=s(xce);nCo=r(fft,"pretrained_model_name_or_path"),fft.forEach(t),sCo=r(AA,":"),AA.forEach(t),lCo=i(na),G=n(na,"UL",{});var O=s(G);x_=n(O,"LI",{});var T9e=s(x_);$ce=n(T9e,"STRONG",{});var mft=s($ce);iCo=r(mft,"albert"),mft.forEach(t),dCo=r(T9e," \u2014 "),Hj=n(T9e,"A",{href:!0});var gft=s(Hj);cCo=r(gft,"AlbertForPreTraining"),gft.forEach(t),fCo=r(T9e," (ALBERT model)"),T9e.forEach(t),mCo=i(O),$_=n(O,"LI",{});var M9e=s($_);kce=n(M9e,"STRONG",{});var hft=s(kce);gCo=r(hft,"bart"),hft.forEach(t),hCo=r(M9e," \u2014 "),Uj=n(M9e,"A",{href:!0});var pft=s(Uj);pCo=r(pft,"BartForConditionalGeneration"),pft.forEach(t),uCo=r(M9e," (BART model)"),M9e.forEach(t),_Co=i(O),k_=n(O,"LI",{});var E9e=s(k_);Sce=n(E9e,"STRONG",{});var uft=s(Sce);bCo=r(uft,"bert"),uft.forEach(t),vCo=r(E9e," \u2014 "),Jj=n(E9e,"A",{href:!0});var _ft=s(Jj);FCo=r(_ft,"BertForPreTraining"),_ft.forEach(t),TCo=r(E9e," (BERT model)"),E9e.forEach(t),MCo=i(O),S_=n(O,"LI",{});var C9e=s(S_);Rce=n(C9e,"STRONG",{});var bft=s(Rce);ECo=r(bft,"big_bird"),bft.forEach(t),CCo=r(C9e," \u2014 "),Yj=n(C9e,"A",{href:!0});var vft=s(Yj);wCo=r(vft,"BigBirdForPreTraining"),vft.forEach(t),ACo=r(C9e," (BigBird model)"),C9e.forEach(t),LCo=i(O),R_=n(O,"LI",{});var w9e=s(R_);Pce=n(w9e,"STRONG",{});var Fft=s(Pce);yCo=r(Fft,"bloom"),Fft.forEach(t),xCo=r(w9e," \u2014 "),Kj=n(w9e,"A",{href:!0});var Tft=s(Kj);$Co=r(Tft,"BloomForCausalLM"),Tft.forEach(t),kCo=r(w9e," (BLOOM model)"),w9e.forEach(t),SCo=i(O),P_=n(O,"LI",{});var A9e=s(P_);Bce=n(A9e,"STRONG",{});var Mft=s(Bce);RCo=r(Mft,"camembert"),Mft.forEach(t),PCo=r(A9e," \u2014 "),Zj=n(A9e,"A",{href:!0});var Eft=s(Zj);BCo=r(Eft,"CamembertForMaskedLM"),Eft.forEach(t),ICo=r(A9e," (CamemBERT model)"),A9e.forEach(t),NCo=i(O),B_=n(O,"LI",{});var L9e=s(B_);Ice=n(L9e,"STRONG",{});var Cft=s(Ice);qCo=r(Cft,"ctrl"),Cft.forEach(t),jCo=r(L9e," \u2014 "),eD=n(L9e,"A",{href:!0});var wft=s(eD);DCo=r(wft,"CTRLLMHeadModel"),wft.forEach(t),GCo=r(L9e," (CTRL model)"),L9e.forEach(t),OCo=i(O),I_=n(O,"LI",{});var y9e=s(I_);Nce=n(y9e,"STRONG",{});var Aft=s(Nce);VCo=r(Aft,"data2vec-text"),Aft.forEach(t),XCo=r(y9e," \u2014 "),oD=n(y9e,"A",{href:!0});var Lft=s(oD);zCo=r(Lft,"Data2VecTextForMaskedLM"),Lft.forEach(t),WCo=r(y9e," (Data2VecText model)"),y9e.forEach(t),QCo=i(O),N_=n(O,"LI",{});var x9e=s(N_);qce=n(x9e,"STRONG",{});var yft=s(qce);HCo=r(yft,"deberta"),yft.forEach(t),UCo=r(x9e," \u2014 "),rD=n(x9e,"A",{href:!0});var xft=s(rD);JCo=r(xft,"DebertaForMaskedLM"),xft.forEach(t),YCo=r(x9e," (DeBERTa model)"),x9e.forEach(t),KCo=i(O),q_=n(O,"LI",{});var $9e=s(q_);jce=n($9e,"STRONG",{});var $ft=s(jce);ZCo=r($ft,"deberta-v2"),$ft.forEach(t),e0o=r($9e," \u2014 "),tD=n($9e,"A",{href:!0});var kft=s(tD);o0o=r(kft,"DebertaV2ForMaskedLM"),kft.forEach(t),r0o=r($9e," (DeBERTa-v2 model)"),$9e.forEach(t),t0o=i(O),j_=n(O,"LI",{});var k9e=s(j_);Dce=n(k9e,"STRONG",{});var Sft=s(Dce);a0o=r(Sft,"distilbert"),Sft.forEach(t),n0o=r(k9e," \u2014 "),aD=n(k9e,"A",{href:!0});var Rft=s(aD);s0o=r(Rft,"DistilBertForMaskedLM"),Rft.forEach(t),l0o=r(k9e," (DistilBERT model)"),k9e.forEach(t),i0o=i(O),D_=n(O,"LI",{});var S9e=s(D_);Gce=n(S9e,"STRONG",{});var Pft=s(Gce);d0o=r(Pft,"electra"),Pft.forEach(t),c0o=r(S9e," \u2014 "),nD=n(S9e,"A",{href:!0});var Bft=s(nD);f0o=r(Bft,"ElectraForPreTraining"),Bft.forEach(t),m0o=r(S9e," (ELECTRA model)"),S9e.forEach(t),g0o=i(O),G_=n(O,"LI",{});var R9e=s(G_);Oce=n(R9e,"STRONG",{});var Ift=s(Oce);h0o=r(Ift,"flaubert"),Ift.forEach(t),p0o=r(R9e," \u2014 "),sD=n(R9e,"A",{href:!0});var Nft=s(sD);u0o=r(Nft,"FlaubertWithLMHeadModel"),Nft.forEach(t),_0o=r(R9e," (FlauBERT model)"),R9e.forEach(t),b0o=i(O),O_=n(O,"LI",{});var P9e=s(O_);Vce=n(P9e,"STRONG",{});var qft=s(Vce);v0o=r(qft,"flava"),qft.forEach(t),F0o=r(P9e," \u2014 "),lD=n(P9e,"A",{href:!0});var jft=s(lD);T0o=r(jft,"FlavaForPreTraining"),jft.forEach(t),M0o=r(P9e," (FLAVA model)"),P9e.forEach(t),E0o=i(O),V_=n(O,"LI",{});var B9e=s(V_);Xce=n(B9e,"STRONG",{});var Dft=s(Xce);C0o=r(Dft,"fnet"),Dft.forEach(t),w0o=r(B9e," \u2014 "),iD=n(B9e,"A",{href:!0});var Gft=s(iD);A0o=r(Gft,"FNetForPreTraining"),Gft.forEach(t),L0o=r(B9e," (FNet model)"),B9e.forEach(t),y0o=i(O),X_=n(O,"LI",{});var I9e=s(X_);zce=n(I9e,"STRONG",{});var Oft=s(zce);x0o=r(Oft,"fsmt"),Oft.forEach(t),$0o=r(I9e," \u2014 "),dD=n(I9e,"A",{href:!0});var Vft=s(dD);k0o=r(Vft,"FSMTForConditionalGeneration"),Vft.forEach(t),S0o=r(I9e," (FairSeq Machine-Translation model)"),I9e.forEach(t),R0o=i(O),z_=n(O,"LI",{});var N9e=s(z_);Wce=n(N9e,"STRONG",{});var Xft=s(Wce);P0o=r(Xft,"funnel"),Xft.forEach(t),B0o=r(N9e," \u2014 "),cD=n(N9e,"A",{href:!0});var zft=s(cD);I0o=r(zft,"FunnelForPreTraining"),zft.forEach(t),N0o=r(N9e," (Funnel Transformer model)"),N9e.forEach(t),q0o=i(O),W_=n(O,"LI",{});var q9e=s(W_);Qce=n(q9e,"STRONG",{});var Wft=s(Qce);j0o=r(Wft,"gpt2"),Wft.forEach(t),D0o=r(q9e," \u2014 "),fD=n(q9e,"A",{href:!0});var Qft=s(fD);G0o=r(Qft,"GPT2LMHeadModel"),Qft.forEach(t),O0o=r(q9e," (OpenAI GPT-2 model)"),q9e.forEach(t),V0o=i(O),Q_=n(O,"LI",{});var j9e=s(Q_);Hce=n(j9e,"STRONG",{});var Hft=s(Hce);X0o=r(Hft,"ibert"),Hft.forEach(t),z0o=r(j9e," \u2014 "),mD=n(j9e,"A",{href:!0});var Uft=s(mD);W0o=r(Uft,"IBertForMaskedLM"),Uft.forEach(t),Q0o=r(j9e," (I-BERT model)"),j9e.forEach(t),H0o=i(O),H_=n(O,"LI",{});var D9e=s(H_);Uce=n(D9e,"STRONG",{});var Jft=s(Uce);U0o=r(Jft,"layoutlm"),Jft.forEach(t),J0o=r(D9e," \u2014 "),gD=n(D9e,"A",{href:!0});var Yft=s(gD);Y0o=r(Yft,"LayoutLMForMaskedLM"),Yft.forEach(t),K0o=r(D9e," (LayoutLM model)"),D9e.forEach(t),Z0o=i(O),U_=n(O,"LI",{});var G9e=s(U_);Jce=n(G9e,"STRONG",{});var Kft=s(Jce);ewo=r(Kft,"longformer"),Kft.forEach(t),owo=r(G9e," \u2014 "),hD=n(G9e,"A",{href:!0});var Zft=s(hD);rwo=r(Zft,"LongformerForMaskedLM"),Zft.forEach(t),two=r(G9e," (Longformer model)"),G9e.forEach(t),awo=i(O),J_=n(O,"LI",{});var O9e=s(J_);Yce=n(O9e,"STRONG",{});var emt=s(Yce);nwo=r(emt,"lxmert"),emt.forEach(t),swo=r(O9e," \u2014 "),pD=n(O9e,"A",{href:!0});var omt=s(pD);lwo=r(omt,"LxmertForPreTraining"),omt.forEach(t),iwo=r(O9e," (LXMERT model)"),O9e.forEach(t),dwo=i(O),Y_=n(O,"LI",{});var V9e=s(Y_);Kce=n(V9e,"STRONG",{});var rmt=s(Kce);cwo=r(rmt,"megatron-bert"),rmt.forEach(t),fwo=r(V9e," \u2014 "),uD=n(V9e,"A",{href:!0});var tmt=s(uD);mwo=r(tmt,"MegatronBertForPreTraining"),tmt.forEach(t),gwo=r(V9e," (Megatron-BERT model)"),V9e.forEach(t),hwo=i(O),K_=n(O,"LI",{});var X9e=s(K_);Zce=n(X9e,"STRONG",{});var amt=s(Zce);pwo=r(amt,"mobilebert"),amt.forEach(t),uwo=r(X9e," \u2014 "),_D=n(X9e,"A",{href:!0});var nmt=s(_D);_wo=r(nmt,"MobileBertForPreTraining"),nmt.forEach(t),bwo=r(X9e," (MobileBERT model)"),X9e.forEach(t),vwo=i(O),Z_=n(O,"LI",{});var z9e=s(Z_);efe=n(z9e,"STRONG",{});var smt=s(efe);Fwo=r(smt,"mpnet"),smt.forEach(t),Two=r(z9e," \u2014 "),bD=n(z9e,"A",{href:!0});var lmt=s(bD);Mwo=r(lmt,"MPNetForMaskedLM"),lmt.forEach(t),Ewo=r(z9e," (MPNet model)"),z9e.forEach(t),Cwo=i(O),e1=n(O,"LI",{});var W9e=s(e1);ofe=n(W9e,"STRONG",{});var imt=s(ofe);wwo=r(imt,"openai-gpt"),imt.forEach(t),Awo=r(W9e," \u2014 "),vD=n(W9e,"A",{href:!0});var dmt=s(vD);Lwo=r(dmt,"OpenAIGPTLMHeadModel"),dmt.forEach(t),ywo=r(W9e," (OpenAI GPT model)"),W9e.forEach(t),xwo=i(O),o1=n(O,"LI",{});var Q9e=s(o1);rfe=n(Q9e,"STRONG",{});var cmt=s(rfe);$wo=r(cmt,"retribert"),cmt.forEach(t),kwo=r(Q9e," \u2014 "),FD=n(Q9e,"A",{href:!0});var fmt=s(FD);Swo=r(fmt,"RetriBertModel"),fmt.forEach(t),Rwo=r(Q9e," (RetriBERT model)"),Q9e.forEach(t),Pwo=i(O),r1=n(O,"LI",{});var H9e=s(r1);tfe=n(H9e,"STRONG",{});var mmt=s(tfe);Bwo=r(mmt,"roberta"),mmt.forEach(t),Iwo=r(H9e," \u2014 "),TD=n(H9e,"A",{href:!0});var gmt=s(TD);Nwo=r(gmt,"RobertaForMaskedLM"),gmt.forEach(t),qwo=r(H9e," (RoBERTa model)"),H9e.forEach(t),jwo=i(O),t1=n(O,"LI",{});var U9e=s(t1);afe=n(U9e,"STRONG",{});var hmt=s(afe);Dwo=r(hmt,"splinter"),hmt.forEach(t),Gwo=r(U9e," \u2014 "),MD=n(U9e,"A",{href:!0});var pmt=s(MD);Owo=r(pmt,"SplinterForPreTraining"),pmt.forEach(t),Vwo=r(U9e," (Splinter model)"),U9e.forEach(t),Xwo=i(O),a1=n(O,"LI",{});var J9e=s(a1);nfe=n(J9e,"STRONG",{});var umt=s(nfe);zwo=r(umt,"squeezebert"),umt.forEach(t),Wwo=r(J9e," \u2014 "),ED=n(J9e,"A",{href:!0});var _mt=s(ED);Qwo=r(_mt,"SqueezeBertForMaskedLM"),_mt.forEach(t),Hwo=r(J9e," (SqueezeBERT model)"),J9e.forEach(t),Uwo=i(O),n1=n(O,"LI",{});var Y9e=s(n1);sfe=n(Y9e,"STRONG",{});var bmt=s(sfe);Jwo=r(bmt,"t5"),bmt.forEach(t),Ywo=r(Y9e," \u2014 "),CD=n(Y9e,"A",{href:!0});var vmt=s(CD);Kwo=r(vmt,"T5ForConditionalGeneration"),vmt.forEach(t),Zwo=r(Y9e," (T5 model)"),Y9e.forEach(t),eAo=i(O),s1=n(O,"LI",{});var K9e=s(s1);lfe=n(K9e,"STRONG",{});var Fmt=s(lfe);oAo=r(Fmt,"tapas"),Fmt.forEach(t),rAo=r(K9e," \u2014 "),wD=n(K9e,"A",{href:!0});var Tmt=s(wD);tAo=r(Tmt,"TapasForMaskedLM"),Tmt.forEach(t),aAo=r(K9e," (TAPAS model)"),K9e.forEach(t),nAo=i(O),l1=n(O,"LI",{});var Z9e=s(l1);ife=n(Z9e,"STRONG",{});var Mmt=s(ife);sAo=r(Mmt,"transfo-xl"),Mmt.forEach(t),lAo=r(Z9e," \u2014 "),AD=n(Z9e,"A",{href:!0});var Emt=s(AD);iAo=r(Emt,"TransfoXLLMHeadModel"),Emt.forEach(t),dAo=r(Z9e," (Transformer-XL model)"),Z9e.forEach(t),cAo=i(O),i1=n(O,"LI",{});var exe=s(i1);dfe=n(exe,"STRONG",{});var Cmt=s(dfe);fAo=r(Cmt,"unispeech"),Cmt.forEach(t),mAo=r(exe," \u2014 "),LD=n(exe,"A",{href:!0});var wmt=s(LD);gAo=r(wmt,"UniSpeechForPreTraining"),wmt.forEach(t),hAo=r(exe," (UniSpeech model)"),exe.forEach(t),pAo=i(O),d1=n(O,"LI",{});var oxe=s(d1);cfe=n(oxe,"STRONG",{});var Amt=s(cfe);uAo=r(Amt,"unispeech-sat"),Amt.forEach(t),_Ao=r(oxe," \u2014 "),yD=n(oxe,"A",{href:!0});var Lmt=s(yD);bAo=r(Lmt,"UniSpeechSatForPreTraining"),Lmt.forEach(t),vAo=r(oxe," (UniSpeechSat model)"),oxe.forEach(t),FAo=i(O),c1=n(O,"LI",{});var rxe=s(c1);ffe=n(rxe,"STRONG",{});var ymt=s(ffe);TAo=r(ymt,"visual_bert"),ymt.forEach(t),MAo=r(rxe," \u2014 "),xD=n(rxe,"A",{href:!0});var xmt=s(xD);EAo=r(xmt,"VisualBertForPreTraining"),xmt.forEach(t),CAo=r(rxe," (VisualBERT model)"),rxe.forEach(t),wAo=i(O),f1=n(O,"LI",{});var txe=s(f1);mfe=n(txe,"STRONG",{});var $mt=s(mfe);AAo=r($mt,"vit_mae"),$mt.forEach(t),LAo=r(txe," \u2014 "),$D=n(txe,"A",{href:!0});var kmt=s($D);yAo=r(kmt,"ViTMAEForPreTraining"),kmt.forEach(t),xAo=r(txe," (ViTMAE model)"),txe.forEach(t),$Ao=i(O),m1=n(O,"LI",{});var axe=s(m1);gfe=n(axe,"STRONG",{});var Smt=s(gfe);kAo=r(Smt,"wav2vec2"),Smt.forEach(t),SAo=r(axe," \u2014 "),kD=n(axe,"A",{href:!0});var Rmt=s(kD);RAo=r(Rmt,"Wav2Vec2ForPreTraining"),Rmt.forEach(t),PAo=r(axe," (Wav2Vec2 model)"),axe.forEach(t),BAo=i(O),g1=n(O,"LI",{});var nxe=s(g1);hfe=n(nxe,"STRONG",{});var Pmt=s(hfe);IAo=r(Pmt,"wav2vec2-conformer"),Pmt.forEach(t),NAo=r(nxe," \u2014 "),SD=n(nxe,"A",{href:!0});var Bmt=s(SD);qAo=r(Bmt,"Wav2Vec2ConformerForPreTraining"),Bmt.forEach(t),jAo=r(nxe," (Wav2Vec2-Conformer model)"),nxe.forEach(t),DAo=i(O),h1=n(O,"LI",{});var sxe=s(h1);pfe=n(sxe,"STRONG",{});var Imt=s(pfe);GAo=r(Imt,"xlm"),Imt.forEach(t),OAo=r(sxe," \u2014 "),RD=n(sxe,"A",{href:!0});var Nmt=s(RD);VAo=r(Nmt,"XLMWithLMHeadModel"),Nmt.forEach(t),XAo=r(sxe," (XLM model)"),sxe.forEach(t),zAo=i(O),p1=n(O,"LI",{});var lxe=s(p1);ufe=n(lxe,"STRONG",{});var qmt=s(ufe);WAo=r(qmt,"xlm-roberta"),qmt.forEach(t),QAo=r(lxe," \u2014 "),PD=n(lxe,"A",{href:!0});var jmt=s(PD);HAo=r(jmt,"XLMRobertaForMaskedLM"),jmt.forEach(t),UAo=r(lxe," (XLM-RoBERTa model)"),lxe.forEach(t),JAo=i(O),u1=n(O,"LI",{});var ixe=s(u1);_fe=n(ixe,"STRONG",{});var Dmt=s(_fe);YAo=r(Dmt,"xlm-roberta-xl"),Dmt.forEach(t),KAo=r(ixe," \u2014 "),BD=n(ixe,"A",{href:!0});var Gmt=s(BD);ZAo=r(Gmt,"XLMRobertaXLForMaskedLM"),Gmt.forEach(t),eLo=r(ixe," (XLM-RoBERTa-XL model)"),ixe.forEach(t),oLo=i(O),_1=n(O,"LI",{});var dxe=s(_1);bfe=n(dxe,"STRONG",{});var Omt=s(bfe);rLo=r(Omt,"xlnet"),Omt.forEach(t),tLo=r(dxe," \u2014 "),ID=n(dxe,"A",{href:!0});var Vmt=s(ID);aLo=r(Vmt,"XLNetLMHeadModel"),Vmt.forEach(t),nLo=r(dxe," (XLNet model)"),dxe.forEach(t),O.forEach(t),sLo=i(na),b1=n(na,"P",{});var cxe=s(b1);lLo=r(cxe,"The model is set in evaluation mode by default using "),vfe=n(cxe,"CODE",{});var Xmt=s(vfe);iLo=r(Xmt,"model.eval()"),Xmt.forEach(t),dLo=r(cxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ffe=n(cxe,"CODE",{});var zmt=s(Ffe);cLo=r(zmt,"model.train()"),zmt.forEach(t),cxe.forEach(t),fLo=i(na),T(v1.$$.fragment,na),na.forEach(t),Js.forEach(t),EGe=i(f),Di=n(f,"H2",{class:!0});var xVe=s(Di);F1=n(xVe,"A",{id:!0,class:!0,href:!0});var Wmt=s(F1);Tfe=n(Wmt,"SPAN",{});var Qmt=s(Tfe);T(t7.$$.fragment,Qmt),Qmt.forEach(t),Wmt.forEach(t),mLo=i(xVe),Mfe=n(xVe,"SPAN",{});var Hmt=s(Mfe);gLo=r(Hmt,"AutoModelForCausalLM"),Hmt.forEach(t),xVe.forEach(t),CGe=i(f),ko=n(f,"DIV",{class:!0});var Ys=s(ko);T(a7.$$.fragment,Ys),hLo=i(Ys),Gi=n(Ys,"P",{});var noe=s(Gi);pLo=r(noe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),ND=n(noe,"A",{href:!0});var Umt=s(ND);uLo=r(Umt,"from_pretrained()"),Umt.forEach(t),_Lo=r(noe," class method or the "),qD=n(noe,"A",{href:!0});var Jmt=s(qD);bLo=r(Jmt,"from_config()"),Jmt.forEach(t),vLo=r(noe,` class
method.`),noe.forEach(t),FLo=i(Ys),n7=n(Ys,"P",{});var $Ve=s(n7);TLo=r($Ve,"This class cannot be instantiated directly using "),Efe=n($Ve,"CODE",{});var Ymt=s(Efe);MLo=r(Ymt,"__init__()"),Ymt.forEach(t),ELo=r($Ve," (throws an error)."),$Ve.forEach(t),CLo=i(Ys),lt=n(Ys,"DIV",{class:!0});var LA=s(lt);T(s7.$$.fragment,LA),wLo=i(LA),Cfe=n(LA,"P",{});var Kmt=s(Cfe);ALo=r(Kmt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Kmt.forEach(t),LLo=i(LA),Oi=n(LA,"P",{});var soe=s(Oi);yLo=r(soe,`Note:
Loading a model from its configuration file does `),wfe=n(soe,"STRONG",{});var Zmt=s(wfe);xLo=r(Zmt,"not"),Zmt.forEach(t),$Lo=r(soe,` load the model weights. It only affects the
model\u2019s configuration. Use `),jD=n(soe,"A",{href:!0});var egt=s(jD);kLo=r(egt,"from_pretrained()"),egt.forEach(t),SLo=r(soe," to load the model weights."),soe.forEach(t),RLo=i(LA),T(T1.$$.fragment,LA),LA.forEach(t),PLo=i(Ys),Ke=n(Ys,"DIV",{class:!0});var sa=s(Ke);T(l7.$$.fragment,sa),BLo=i(sa),Afe=n(sa,"P",{});var ogt=s(Afe);ILo=r(ogt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),ogt.forEach(t),NLo=i(sa),Pa=n(sa,"P",{});var yA=s(Pa);qLo=r(yA,"The model class to instantiate is selected based on the "),Lfe=n(yA,"CODE",{});var rgt=s(Lfe);jLo=r(rgt,"model_type"),rgt.forEach(t),DLo=r(yA,` property of the config object (either
passed as an argument or loaded from `),yfe=n(yA,"CODE",{});var tgt=s(yfe);GLo=r(tgt,"pretrained_model_name_or_path"),tgt.forEach(t),OLo=r(yA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xfe=n(yA,"CODE",{});var agt=s(xfe);VLo=r(agt,"pretrained_model_name_or_path"),agt.forEach(t),XLo=r(yA,":"),yA.forEach(t),zLo=i(sa),z=n(sa,"UL",{});var W=s(z);M1=n(W,"LI",{});var fxe=s(M1);$fe=n(fxe,"STRONG",{});var ngt=s($fe);WLo=r(ngt,"bart"),ngt.forEach(t),QLo=r(fxe," \u2014 "),DD=n(fxe,"A",{href:!0});var sgt=s(DD);HLo=r(sgt,"BartForCausalLM"),sgt.forEach(t),ULo=r(fxe," (BART model)"),fxe.forEach(t),JLo=i(W),E1=n(W,"LI",{});var mxe=s(E1);kfe=n(mxe,"STRONG",{});var lgt=s(kfe);YLo=r(lgt,"bert"),lgt.forEach(t),KLo=r(mxe," \u2014 "),GD=n(mxe,"A",{href:!0});var igt=s(GD);ZLo=r(igt,"BertLMHeadModel"),igt.forEach(t),eyo=r(mxe," (BERT model)"),mxe.forEach(t),oyo=i(W),C1=n(W,"LI",{});var gxe=s(C1);Sfe=n(gxe,"STRONG",{});var dgt=s(Sfe);ryo=r(dgt,"bert-generation"),dgt.forEach(t),tyo=r(gxe," \u2014 "),OD=n(gxe,"A",{href:!0});var cgt=s(OD);ayo=r(cgt,"BertGenerationDecoder"),cgt.forEach(t),nyo=r(gxe," (Bert Generation model)"),gxe.forEach(t),syo=i(W),w1=n(W,"LI",{});var hxe=s(w1);Rfe=n(hxe,"STRONG",{});var fgt=s(Rfe);lyo=r(fgt,"big_bird"),fgt.forEach(t),iyo=r(hxe," \u2014 "),VD=n(hxe,"A",{href:!0});var mgt=s(VD);dyo=r(mgt,"BigBirdForCausalLM"),mgt.forEach(t),cyo=r(hxe," (BigBird model)"),hxe.forEach(t),fyo=i(W),A1=n(W,"LI",{});var pxe=s(A1);Pfe=n(pxe,"STRONG",{});var ggt=s(Pfe);myo=r(ggt,"bigbird_pegasus"),ggt.forEach(t),gyo=r(pxe," \u2014 "),XD=n(pxe,"A",{href:!0});var hgt=s(XD);hyo=r(hgt,"BigBirdPegasusForCausalLM"),hgt.forEach(t),pyo=r(pxe," (BigBird-Pegasus model)"),pxe.forEach(t),uyo=i(W),L1=n(W,"LI",{});var uxe=s(L1);Bfe=n(uxe,"STRONG",{});var pgt=s(Bfe);_yo=r(pgt,"blenderbot"),pgt.forEach(t),byo=r(uxe," \u2014 "),zD=n(uxe,"A",{href:!0});var ugt=s(zD);vyo=r(ugt,"BlenderbotForCausalLM"),ugt.forEach(t),Fyo=r(uxe," (Blenderbot model)"),uxe.forEach(t),Tyo=i(W),y1=n(W,"LI",{});var _xe=s(y1);Ife=n(_xe,"STRONG",{});var _gt=s(Ife);Myo=r(_gt,"blenderbot-small"),_gt.forEach(t),Eyo=r(_xe," \u2014 "),WD=n(_xe,"A",{href:!0});var bgt=s(WD);Cyo=r(bgt,"BlenderbotSmallForCausalLM"),bgt.forEach(t),wyo=r(_xe," (BlenderbotSmall model)"),_xe.forEach(t),Ayo=i(W),x1=n(W,"LI",{});var bxe=s(x1);Nfe=n(bxe,"STRONG",{});var vgt=s(Nfe);Lyo=r(vgt,"bloom"),vgt.forEach(t),yyo=r(bxe," \u2014 "),QD=n(bxe,"A",{href:!0});var Fgt=s(QD);xyo=r(Fgt,"BloomForCausalLM"),Fgt.forEach(t),$yo=r(bxe," (BLOOM model)"),bxe.forEach(t),kyo=i(W),$1=n(W,"LI",{});var vxe=s($1);qfe=n(vxe,"STRONG",{});var Tgt=s(qfe);Syo=r(Tgt,"camembert"),Tgt.forEach(t),Ryo=r(vxe," \u2014 "),HD=n(vxe,"A",{href:!0});var Mgt=s(HD);Pyo=r(Mgt,"CamembertForCausalLM"),Mgt.forEach(t),Byo=r(vxe," (CamemBERT model)"),vxe.forEach(t),Iyo=i(W),k1=n(W,"LI",{});var Fxe=s(k1);jfe=n(Fxe,"STRONG",{});var Egt=s(jfe);Nyo=r(Egt,"ctrl"),Egt.forEach(t),qyo=r(Fxe," \u2014 "),UD=n(Fxe,"A",{href:!0});var Cgt=s(UD);jyo=r(Cgt,"CTRLLMHeadModel"),Cgt.forEach(t),Dyo=r(Fxe," (CTRL model)"),Fxe.forEach(t),Gyo=i(W),S1=n(W,"LI",{});var Txe=s(S1);Dfe=n(Txe,"STRONG",{});var wgt=s(Dfe);Oyo=r(wgt,"data2vec-text"),wgt.forEach(t),Vyo=r(Txe," \u2014 "),JD=n(Txe,"A",{href:!0});var Agt=s(JD);Xyo=r(Agt,"Data2VecTextForCausalLM"),Agt.forEach(t),zyo=r(Txe," (Data2VecText model)"),Txe.forEach(t),Wyo=i(W),R1=n(W,"LI",{});var Mxe=s(R1);Gfe=n(Mxe,"STRONG",{});var Lgt=s(Gfe);Qyo=r(Lgt,"electra"),Lgt.forEach(t),Hyo=r(Mxe," \u2014 "),YD=n(Mxe,"A",{href:!0});var ygt=s(YD);Uyo=r(ygt,"ElectraForCausalLM"),ygt.forEach(t),Jyo=r(Mxe," (ELECTRA model)"),Mxe.forEach(t),Yyo=i(W),P1=n(W,"LI",{});var Exe=s(P1);Ofe=n(Exe,"STRONG",{});var xgt=s(Ofe);Kyo=r(xgt,"gpt2"),xgt.forEach(t),Zyo=r(Exe," \u2014 "),KD=n(Exe,"A",{href:!0});var $gt=s(KD);e7o=r($gt,"GPT2LMHeadModel"),$gt.forEach(t),o7o=r(Exe," (OpenAI GPT-2 model)"),Exe.forEach(t),r7o=i(W),B1=n(W,"LI",{});var Cxe=s(B1);Vfe=n(Cxe,"STRONG",{});var kgt=s(Vfe);t7o=r(kgt,"gpt_neo"),kgt.forEach(t),a7o=r(Cxe," \u2014 "),ZD=n(Cxe,"A",{href:!0});var Sgt=s(ZD);n7o=r(Sgt,"GPTNeoForCausalLM"),Sgt.forEach(t),s7o=r(Cxe," (GPT Neo model)"),Cxe.forEach(t),l7o=i(W),I1=n(W,"LI",{});var wxe=s(I1);Xfe=n(wxe,"STRONG",{});var Rgt=s(Xfe);i7o=r(Rgt,"gpt_neox"),Rgt.forEach(t),d7o=r(wxe," \u2014 "),eG=n(wxe,"A",{href:!0});var Pgt=s(eG);c7o=r(Pgt,"GPTNeoXForCausalLM"),Pgt.forEach(t),f7o=r(wxe," (GPT NeoX model)"),wxe.forEach(t),m7o=i(W),N1=n(W,"LI",{});var Axe=s(N1);zfe=n(Axe,"STRONG",{});var Bgt=s(zfe);g7o=r(Bgt,"gptj"),Bgt.forEach(t),h7o=r(Axe," \u2014 "),oG=n(Axe,"A",{href:!0});var Igt=s(oG);p7o=r(Igt,"GPTJForCausalLM"),Igt.forEach(t),u7o=r(Axe," (GPT-J model)"),Axe.forEach(t),_7o=i(W),q1=n(W,"LI",{});var Lxe=s(q1);Wfe=n(Lxe,"STRONG",{});var Ngt=s(Wfe);b7o=r(Ngt,"marian"),Ngt.forEach(t),v7o=r(Lxe," \u2014 "),rG=n(Lxe,"A",{href:!0});var qgt=s(rG);F7o=r(qgt,"MarianForCausalLM"),qgt.forEach(t),T7o=r(Lxe," (Marian model)"),Lxe.forEach(t),M7o=i(W),j1=n(W,"LI",{});var yxe=s(j1);Qfe=n(yxe,"STRONG",{});var jgt=s(Qfe);E7o=r(jgt,"mbart"),jgt.forEach(t),C7o=r(yxe," \u2014 "),tG=n(yxe,"A",{href:!0});var Dgt=s(tG);w7o=r(Dgt,"MBartForCausalLM"),Dgt.forEach(t),A7o=r(yxe," (mBART model)"),yxe.forEach(t),L7o=i(W),D1=n(W,"LI",{});var xxe=s(D1);Hfe=n(xxe,"STRONG",{});var Ggt=s(Hfe);y7o=r(Ggt,"megatron-bert"),Ggt.forEach(t),x7o=r(xxe," \u2014 "),aG=n(xxe,"A",{href:!0});var Ogt=s(aG);$7o=r(Ogt,"MegatronBertForCausalLM"),Ogt.forEach(t),k7o=r(xxe," (Megatron-BERT model)"),xxe.forEach(t),S7o=i(W),G1=n(W,"LI",{});var $xe=s(G1);Ufe=n($xe,"STRONG",{});var Vgt=s(Ufe);R7o=r(Vgt,"openai-gpt"),Vgt.forEach(t),P7o=r($xe," \u2014 "),nG=n($xe,"A",{href:!0});var Xgt=s(nG);B7o=r(Xgt,"OpenAIGPTLMHeadModel"),Xgt.forEach(t),I7o=r($xe," (OpenAI GPT model)"),$xe.forEach(t),N7o=i(W),O1=n(W,"LI",{});var kxe=s(O1);Jfe=n(kxe,"STRONG",{});var zgt=s(Jfe);q7o=r(zgt,"opt"),zgt.forEach(t),j7o=r(kxe," \u2014 "),sG=n(kxe,"A",{href:!0});var Wgt=s(sG);D7o=r(Wgt,"OPTForCausalLM"),Wgt.forEach(t),G7o=r(kxe," (OPT model)"),kxe.forEach(t),O7o=i(W),V1=n(W,"LI",{});var Sxe=s(V1);Yfe=n(Sxe,"STRONG",{});var Qgt=s(Yfe);V7o=r(Qgt,"pegasus"),Qgt.forEach(t),X7o=r(Sxe," \u2014 "),lG=n(Sxe,"A",{href:!0});var Hgt=s(lG);z7o=r(Hgt,"PegasusForCausalLM"),Hgt.forEach(t),W7o=r(Sxe," (Pegasus model)"),Sxe.forEach(t),Q7o=i(W),X1=n(W,"LI",{});var Rxe=s(X1);Kfe=n(Rxe,"STRONG",{});var Ugt=s(Kfe);H7o=r(Ugt,"plbart"),Ugt.forEach(t),U7o=r(Rxe," \u2014 "),iG=n(Rxe,"A",{href:!0});var Jgt=s(iG);J7o=r(Jgt,"PLBartForCausalLM"),Jgt.forEach(t),Y7o=r(Rxe," (PLBart model)"),Rxe.forEach(t),K7o=i(W),z1=n(W,"LI",{});var Pxe=s(z1);Zfe=n(Pxe,"STRONG",{});var Ygt=s(Zfe);Z7o=r(Ygt,"prophetnet"),Ygt.forEach(t),e8o=r(Pxe," \u2014 "),dG=n(Pxe,"A",{href:!0});var Kgt=s(dG);o8o=r(Kgt,"ProphetNetForCausalLM"),Kgt.forEach(t),r8o=r(Pxe," (ProphetNet model)"),Pxe.forEach(t),t8o=i(W),W1=n(W,"LI",{});var Bxe=s(W1);eme=n(Bxe,"STRONG",{});var Zgt=s(eme);a8o=r(Zgt,"qdqbert"),Zgt.forEach(t),n8o=r(Bxe," \u2014 "),cG=n(Bxe,"A",{href:!0});var eht=s(cG);s8o=r(eht,"QDQBertLMHeadModel"),eht.forEach(t),l8o=r(Bxe," (QDQBert model)"),Bxe.forEach(t),i8o=i(W),Q1=n(W,"LI",{});var Ixe=s(Q1);ome=n(Ixe,"STRONG",{});var oht=s(ome);d8o=r(oht,"reformer"),oht.forEach(t),c8o=r(Ixe," \u2014 "),fG=n(Ixe,"A",{href:!0});var rht=s(fG);f8o=r(rht,"ReformerModelWithLMHead"),rht.forEach(t),m8o=r(Ixe," (Reformer model)"),Ixe.forEach(t),g8o=i(W),H1=n(W,"LI",{});var Nxe=s(H1);rme=n(Nxe,"STRONG",{});var tht=s(rme);h8o=r(tht,"rembert"),tht.forEach(t),p8o=r(Nxe," \u2014 "),mG=n(Nxe,"A",{href:!0});var aht=s(mG);u8o=r(aht,"RemBertForCausalLM"),aht.forEach(t),_8o=r(Nxe," (RemBERT model)"),Nxe.forEach(t),b8o=i(W),U1=n(W,"LI",{});var qxe=s(U1);tme=n(qxe,"STRONG",{});var nht=s(tme);v8o=r(nht,"roberta"),nht.forEach(t),F8o=r(qxe," \u2014 "),gG=n(qxe,"A",{href:!0});var sht=s(gG);T8o=r(sht,"RobertaForCausalLM"),sht.forEach(t),M8o=r(qxe," (RoBERTa model)"),qxe.forEach(t),E8o=i(W),J1=n(W,"LI",{});var jxe=s(J1);ame=n(jxe,"STRONG",{});var lht=s(ame);C8o=r(lht,"roformer"),lht.forEach(t),w8o=r(jxe," \u2014 "),hG=n(jxe,"A",{href:!0});var iht=s(hG);A8o=r(iht,"RoFormerForCausalLM"),iht.forEach(t),L8o=r(jxe," (RoFormer model)"),jxe.forEach(t),y8o=i(W),Y1=n(W,"LI",{});var Dxe=s(Y1);nme=n(Dxe,"STRONG",{});var dht=s(nme);x8o=r(dht,"speech_to_text_2"),dht.forEach(t),$8o=r(Dxe," \u2014 "),pG=n(Dxe,"A",{href:!0});var cht=s(pG);k8o=r(cht,"Speech2Text2ForCausalLM"),cht.forEach(t),S8o=r(Dxe," (Speech2Text2 model)"),Dxe.forEach(t),R8o=i(W),K1=n(W,"LI",{});var Gxe=s(K1);sme=n(Gxe,"STRONG",{});var fht=s(sme);P8o=r(fht,"transfo-xl"),fht.forEach(t),B8o=r(Gxe," \u2014 "),uG=n(Gxe,"A",{href:!0});var mht=s(uG);I8o=r(mht,"TransfoXLLMHeadModel"),mht.forEach(t),N8o=r(Gxe," (Transformer-XL model)"),Gxe.forEach(t),q8o=i(W),Z1=n(W,"LI",{});var Oxe=s(Z1);lme=n(Oxe,"STRONG",{});var ght=s(lme);j8o=r(ght,"trocr"),ght.forEach(t),D8o=r(Oxe," \u2014 "),_G=n(Oxe,"A",{href:!0});var hht=s(_G);G8o=r(hht,"TrOCRForCausalLM"),hht.forEach(t),O8o=r(Oxe," (TrOCR model)"),Oxe.forEach(t),V8o=i(W),e2=n(W,"LI",{});var Vxe=s(e2);ime=n(Vxe,"STRONG",{});var pht=s(ime);X8o=r(pht,"xglm"),pht.forEach(t),z8o=r(Vxe," \u2014 "),bG=n(Vxe,"A",{href:!0});var uht=s(bG);W8o=r(uht,"XGLMForCausalLM"),uht.forEach(t),Q8o=r(Vxe," (XGLM model)"),Vxe.forEach(t),H8o=i(W),o2=n(W,"LI",{});var Xxe=s(o2);dme=n(Xxe,"STRONG",{});var _ht=s(dme);U8o=r(_ht,"xlm"),_ht.forEach(t),J8o=r(Xxe," \u2014 "),vG=n(Xxe,"A",{href:!0});var bht=s(vG);Y8o=r(bht,"XLMWithLMHeadModel"),bht.forEach(t),K8o=r(Xxe," (XLM model)"),Xxe.forEach(t),Z8o=i(W),r2=n(W,"LI",{});var zxe=s(r2);cme=n(zxe,"STRONG",{});var vht=s(cme);e9o=r(vht,"xlm-prophetnet"),vht.forEach(t),o9o=r(zxe," \u2014 "),FG=n(zxe,"A",{href:!0});var Fht=s(FG);r9o=r(Fht,"XLMProphetNetForCausalLM"),Fht.forEach(t),t9o=r(zxe," (XLM-ProphetNet model)"),zxe.forEach(t),a9o=i(W),t2=n(W,"LI",{});var Wxe=s(t2);fme=n(Wxe,"STRONG",{});var Tht=s(fme);n9o=r(Tht,"xlm-roberta"),Tht.forEach(t),s9o=r(Wxe," \u2014 "),TG=n(Wxe,"A",{href:!0});var Mht=s(TG);l9o=r(Mht,"XLMRobertaForCausalLM"),Mht.forEach(t),i9o=r(Wxe," (XLM-RoBERTa model)"),Wxe.forEach(t),d9o=i(W),a2=n(W,"LI",{});var Qxe=s(a2);mme=n(Qxe,"STRONG",{});var Eht=s(mme);c9o=r(Eht,"xlm-roberta-xl"),Eht.forEach(t),f9o=r(Qxe," \u2014 "),MG=n(Qxe,"A",{href:!0});var Cht=s(MG);m9o=r(Cht,"XLMRobertaXLForCausalLM"),Cht.forEach(t),g9o=r(Qxe," (XLM-RoBERTa-XL model)"),Qxe.forEach(t),h9o=i(W),n2=n(W,"LI",{});var Hxe=s(n2);gme=n(Hxe,"STRONG",{});var wht=s(gme);p9o=r(wht,"xlnet"),wht.forEach(t),u9o=r(Hxe," \u2014 "),EG=n(Hxe,"A",{href:!0});var Aht=s(EG);_9o=r(Aht,"XLNetLMHeadModel"),Aht.forEach(t),b9o=r(Hxe," (XLNet model)"),Hxe.forEach(t),W.forEach(t),v9o=i(sa),s2=n(sa,"P",{});var Uxe=s(s2);F9o=r(Uxe,"The model is set in evaluation mode by default using "),hme=n(Uxe,"CODE",{});var Lht=s(hme);T9o=r(Lht,"model.eval()"),Lht.forEach(t),M9o=r(Uxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pme=n(Uxe,"CODE",{});var yht=s(pme);E9o=r(yht,"model.train()"),yht.forEach(t),Uxe.forEach(t),C9o=i(sa),T(l2.$$.fragment,sa),sa.forEach(t),Ys.forEach(t),wGe=i(f),Vi=n(f,"H2",{class:!0});var kVe=s(Vi);i2=n(kVe,"A",{id:!0,class:!0,href:!0});var xht=s(i2);ume=n(xht,"SPAN",{});var $ht=s(ume);T(i7.$$.fragment,$ht),$ht.forEach(t),xht.forEach(t),w9o=i(kVe),_me=n(kVe,"SPAN",{});var kht=s(_me);A9o=r(kht,"AutoModelForMaskedLM"),kht.forEach(t),kVe.forEach(t),AGe=i(f),So=n(f,"DIV",{class:!0});var Ks=s(So);T(d7.$$.fragment,Ks),L9o=i(Ks),Xi=n(Ks,"P",{});var loe=s(Xi);y9o=r(loe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),CG=n(loe,"A",{href:!0});var Sht=s(CG);x9o=r(Sht,"from_pretrained()"),Sht.forEach(t),$9o=r(loe," class method or the "),wG=n(loe,"A",{href:!0});var Rht=s(wG);k9o=r(Rht,"from_config()"),Rht.forEach(t),S9o=r(loe,` class
method.`),loe.forEach(t),R9o=i(Ks),c7=n(Ks,"P",{});var SVe=s(c7);P9o=r(SVe,"This class cannot be instantiated directly using "),bme=n(SVe,"CODE",{});var Pht=s(bme);B9o=r(Pht,"__init__()"),Pht.forEach(t),I9o=r(SVe," (throws an error)."),SVe.forEach(t),N9o=i(Ks),it=n(Ks,"DIV",{class:!0});var xA=s(it);T(f7.$$.fragment,xA),q9o=i(xA),vme=n(xA,"P",{});var Bht=s(vme);j9o=r(Bht,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Bht.forEach(t),D9o=i(xA),zi=n(xA,"P",{});var ioe=s(zi);G9o=r(ioe,`Note:
Loading a model from its configuration file does `),Fme=n(ioe,"STRONG",{});var Iht=s(Fme);O9o=r(Iht,"not"),Iht.forEach(t),V9o=r(ioe,` load the model weights. It only affects the
model\u2019s configuration. Use `),AG=n(ioe,"A",{href:!0});var Nht=s(AG);X9o=r(Nht,"from_pretrained()"),Nht.forEach(t),z9o=r(ioe," to load the model weights."),ioe.forEach(t),W9o=i(xA),T(d2.$$.fragment,xA),xA.forEach(t),Q9o=i(Ks),Ze=n(Ks,"DIV",{class:!0});var la=s(Ze);T(m7.$$.fragment,la),H9o=i(la),Tme=n(la,"P",{});var qht=s(Tme);U9o=r(qht,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),qht.forEach(t),J9o=i(la),Ba=n(la,"P",{});var $A=s(Ba);Y9o=r($A,"The model class to instantiate is selected based on the "),Mme=n($A,"CODE",{});var jht=s(Mme);K9o=r(jht,"model_type"),jht.forEach(t),Z9o=r($A,` property of the config object (either
passed as an argument or loaded from `),Eme=n($A,"CODE",{});var Dht=s(Eme);exo=r(Dht,"pretrained_model_name_or_path"),Dht.forEach(t),oxo=r($A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cme=n($A,"CODE",{});var Ght=s(Cme);rxo=r(Ght,"pretrained_model_name_or_path"),Ght.forEach(t),txo=r($A,":"),$A.forEach(t),axo=i(la),Q=n(la,"UL",{});var U=s(Q);c2=n(U,"LI",{});var Jxe=s(c2);wme=n(Jxe,"STRONG",{});var Oht=s(wme);nxo=r(Oht,"albert"),Oht.forEach(t),sxo=r(Jxe," \u2014 "),LG=n(Jxe,"A",{href:!0});var Vht=s(LG);lxo=r(Vht,"AlbertForMaskedLM"),Vht.forEach(t),ixo=r(Jxe," (ALBERT model)"),Jxe.forEach(t),dxo=i(U),f2=n(U,"LI",{});var Yxe=s(f2);Ame=n(Yxe,"STRONG",{});var Xht=s(Ame);cxo=r(Xht,"bart"),Xht.forEach(t),fxo=r(Yxe," \u2014 "),yG=n(Yxe,"A",{href:!0});var zht=s(yG);mxo=r(zht,"BartForConditionalGeneration"),zht.forEach(t),gxo=r(Yxe," (BART model)"),Yxe.forEach(t),hxo=i(U),m2=n(U,"LI",{});var Kxe=s(m2);Lme=n(Kxe,"STRONG",{});var Wht=s(Lme);pxo=r(Wht,"bert"),Wht.forEach(t),uxo=r(Kxe," \u2014 "),xG=n(Kxe,"A",{href:!0});var Qht=s(xG);_xo=r(Qht,"BertForMaskedLM"),Qht.forEach(t),bxo=r(Kxe," (BERT model)"),Kxe.forEach(t),vxo=i(U),g2=n(U,"LI",{});var Zxe=s(g2);yme=n(Zxe,"STRONG",{});var Hht=s(yme);Fxo=r(Hht,"big_bird"),Hht.forEach(t),Txo=r(Zxe," \u2014 "),$G=n(Zxe,"A",{href:!0});var Uht=s($G);Mxo=r(Uht,"BigBirdForMaskedLM"),Uht.forEach(t),Exo=r(Zxe," (BigBird model)"),Zxe.forEach(t),Cxo=i(U),h2=n(U,"LI",{});var e$e=s(h2);xme=n(e$e,"STRONG",{});var Jht=s(xme);wxo=r(Jht,"camembert"),Jht.forEach(t),Axo=r(e$e," \u2014 "),kG=n(e$e,"A",{href:!0});var Yht=s(kG);Lxo=r(Yht,"CamembertForMaskedLM"),Yht.forEach(t),yxo=r(e$e," (CamemBERT model)"),e$e.forEach(t),xxo=i(U),p2=n(U,"LI",{});var o$e=s(p2);$me=n(o$e,"STRONG",{});var Kht=s($me);$xo=r(Kht,"convbert"),Kht.forEach(t),kxo=r(o$e," \u2014 "),SG=n(o$e,"A",{href:!0});var Zht=s(SG);Sxo=r(Zht,"ConvBertForMaskedLM"),Zht.forEach(t),Rxo=r(o$e," (ConvBERT model)"),o$e.forEach(t),Pxo=i(U),u2=n(U,"LI",{});var r$e=s(u2);kme=n(r$e,"STRONG",{});var ept=s(kme);Bxo=r(ept,"data2vec-text"),ept.forEach(t),Ixo=r(r$e," \u2014 "),RG=n(r$e,"A",{href:!0});var opt=s(RG);Nxo=r(opt,"Data2VecTextForMaskedLM"),opt.forEach(t),qxo=r(r$e," (Data2VecText model)"),r$e.forEach(t),jxo=i(U),_2=n(U,"LI",{});var t$e=s(_2);Sme=n(t$e,"STRONG",{});var rpt=s(Sme);Dxo=r(rpt,"deberta"),rpt.forEach(t),Gxo=r(t$e," \u2014 "),PG=n(t$e,"A",{href:!0});var tpt=s(PG);Oxo=r(tpt,"DebertaForMaskedLM"),tpt.forEach(t),Vxo=r(t$e," (DeBERTa model)"),t$e.forEach(t),Xxo=i(U),b2=n(U,"LI",{});var a$e=s(b2);Rme=n(a$e,"STRONG",{});var apt=s(Rme);zxo=r(apt,"deberta-v2"),apt.forEach(t),Wxo=r(a$e," \u2014 "),BG=n(a$e,"A",{href:!0});var npt=s(BG);Qxo=r(npt,"DebertaV2ForMaskedLM"),npt.forEach(t),Hxo=r(a$e," (DeBERTa-v2 model)"),a$e.forEach(t),Uxo=i(U),v2=n(U,"LI",{});var n$e=s(v2);Pme=n(n$e,"STRONG",{});var spt=s(Pme);Jxo=r(spt,"distilbert"),spt.forEach(t),Yxo=r(n$e," \u2014 "),IG=n(n$e,"A",{href:!0});var lpt=s(IG);Kxo=r(lpt,"DistilBertForMaskedLM"),lpt.forEach(t),Zxo=r(n$e," (DistilBERT model)"),n$e.forEach(t),e$o=i(U),F2=n(U,"LI",{});var s$e=s(F2);Bme=n(s$e,"STRONG",{});var ipt=s(Bme);o$o=r(ipt,"electra"),ipt.forEach(t),r$o=r(s$e," \u2014 "),NG=n(s$e,"A",{href:!0});var dpt=s(NG);t$o=r(dpt,"ElectraForMaskedLM"),dpt.forEach(t),a$o=r(s$e," (ELECTRA model)"),s$e.forEach(t),n$o=i(U),T2=n(U,"LI",{});var l$e=s(T2);Ime=n(l$e,"STRONG",{});var cpt=s(Ime);s$o=r(cpt,"flaubert"),cpt.forEach(t),l$o=r(l$e," \u2014 "),qG=n(l$e,"A",{href:!0});var fpt=s(qG);i$o=r(fpt,"FlaubertWithLMHeadModel"),fpt.forEach(t),d$o=r(l$e," (FlauBERT model)"),l$e.forEach(t),c$o=i(U),M2=n(U,"LI",{});var i$e=s(M2);Nme=n(i$e,"STRONG",{});var mpt=s(Nme);f$o=r(mpt,"fnet"),mpt.forEach(t),m$o=r(i$e," \u2014 "),jG=n(i$e,"A",{href:!0});var gpt=s(jG);g$o=r(gpt,"FNetForMaskedLM"),gpt.forEach(t),h$o=r(i$e," (FNet model)"),i$e.forEach(t),p$o=i(U),E2=n(U,"LI",{});var d$e=s(E2);qme=n(d$e,"STRONG",{});var hpt=s(qme);u$o=r(hpt,"funnel"),hpt.forEach(t),_$o=r(d$e," \u2014 "),DG=n(d$e,"A",{href:!0});var ppt=s(DG);b$o=r(ppt,"FunnelForMaskedLM"),ppt.forEach(t),v$o=r(d$e," (Funnel Transformer model)"),d$e.forEach(t),F$o=i(U),C2=n(U,"LI",{});var c$e=s(C2);jme=n(c$e,"STRONG",{});var upt=s(jme);T$o=r(upt,"ibert"),upt.forEach(t),M$o=r(c$e," \u2014 "),GG=n(c$e,"A",{href:!0});var _pt=s(GG);E$o=r(_pt,"IBertForMaskedLM"),_pt.forEach(t),C$o=r(c$e," (I-BERT model)"),c$e.forEach(t),w$o=i(U),w2=n(U,"LI",{});var f$e=s(w2);Dme=n(f$e,"STRONG",{});var bpt=s(Dme);A$o=r(bpt,"layoutlm"),bpt.forEach(t),L$o=r(f$e," \u2014 "),OG=n(f$e,"A",{href:!0});var vpt=s(OG);y$o=r(vpt,"LayoutLMForMaskedLM"),vpt.forEach(t),x$o=r(f$e," (LayoutLM model)"),f$e.forEach(t),$$o=i(U),A2=n(U,"LI",{});var m$e=s(A2);Gme=n(m$e,"STRONG",{});var Fpt=s(Gme);k$o=r(Fpt,"longformer"),Fpt.forEach(t),S$o=r(m$e," \u2014 "),VG=n(m$e,"A",{href:!0});var Tpt=s(VG);R$o=r(Tpt,"LongformerForMaskedLM"),Tpt.forEach(t),P$o=r(m$e," (Longformer model)"),m$e.forEach(t),B$o=i(U),L2=n(U,"LI",{});var g$e=s(L2);Ome=n(g$e,"STRONG",{});var Mpt=s(Ome);I$o=r(Mpt,"luke"),Mpt.forEach(t),N$o=r(g$e," \u2014 "),XG=n(g$e,"A",{href:!0});var Ept=s(XG);q$o=r(Ept,"LukeForMaskedLM"),Ept.forEach(t),j$o=r(g$e," (LUKE model)"),g$e.forEach(t),D$o=i(U),y2=n(U,"LI",{});var h$e=s(y2);Vme=n(h$e,"STRONG",{});var Cpt=s(Vme);G$o=r(Cpt,"mbart"),Cpt.forEach(t),O$o=r(h$e," \u2014 "),zG=n(h$e,"A",{href:!0});var wpt=s(zG);V$o=r(wpt,"MBartForConditionalGeneration"),wpt.forEach(t),X$o=r(h$e," (mBART model)"),h$e.forEach(t),z$o=i(U),x2=n(U,"LI",{});var p$e=s(x2);Xme=n(p$e,"STRONG",{});var Apt=s(Xme);W$o=r(Apt,"megatron-bert"),Apt.forEach(t),Q$o=r(p$e," \u2014 "),WG=n(p$e,"A",{href:!0});var Lpt=s(WG);H$o=r(Lpt,"MegatronBertForMaskedLM"),Lpt.forEach(t),U$o=r(p$e," (Megatron-BERT model)"),p$e.forEach(t),J$o=i(U),$2=n(U,"LI",{});var u$e=s($2);zme=n(u$e,"STRONG",{});var ypt=s(zme);Y$o=r(ypt,"mobilebert"),ypt.forEach(t),K$o=r(u$e," \u2014 "),QG=n(u$e,"A",{href:!0});var xpt=s(QG);Z$o=r(xpt,"MobileBertForMaskedLM"),xpt.forEach(t),eko=r(u$e," (MobileBERT model)"),u$e.forEach(t),oko=i(U),k2=n(U,"LI",{});var _$e=s(k2);Wme=n(_$e,"STRONG",{});var $pt=s(Wme);rko=r($pt,"mpnet"),$pt.forEach(t),tko=r(_$e," \u2014 "),HG=n(_$e,"A",{href:!0});var kpt=s(HG);ako=r(kpt,"MPNetForMaskedLM"),kpt.forEach(t),nko=r(_$e," (MPNet model)"),_$e.forEach(t),sko=i(U),S2=n(U,"LI",{});var b$e=s(S2);Qme=n(b$e,"STRONG",{});var Spt=s(Qme);lko=r(Spt,"nystromformer"),Spt.forEach(t),iko=r(b$e," \u2014 "),UG=n(b$e,"A",{href:!0});var Rpt=s(UG);dko=r(Rpt,"NystromformerForMaskedLM"),Rpt.forEach(t),cko=r(b$e," (Nystr\xF6mformer model)"),b$e.forEach(t),fko=i(U),R2=n(U,"LI",{});var v$e=s(R2);Hme=n(v$e,"STRONG",{});var Ppt=s(Hme);mko=r(Ppt,"perceiver"),Ppt.forEach(t),gko=r(v$e," \u2014 "),JG=n(v$e,"A",{href:!0});var Bpt=s(JG);hko=r(Bpt,"PerceiverForMaskedLM"),Bpt.forEach(t),pko=r(v$e," (Perceiver model)"),v$e.forEach(t),uko=i(U),P2=n(U,"LI",{});var F$e=s(P2);Ume=n(F$e,"STRONG",{});var Ipt=s(Ume);_ko=r(Ipt,"qdqbert"),Ipt.forEach(t),bko=r(F$e," \u2014 "),YG=n(F$e,"A",{href:!0});var Npt=s(YG);vko=r(Npt,"QDQBertForMaskedLM"),Npt.forEach(t),Fko=r(F$e," (QDQBert model)"),F$e.forEach(t),Tko=i(U),B2=n(U,"LI",{});var T$e=s(B2);Jme=n(T$e,"STRONG",{});var qpt=s(Jme);Mko=r(qpt,"reformer"),qpt.forEach(t),Eko=r(T$e," \u2014 "),KG=n(T$e,"A",{href:!0});var jpt=s(KG);Cko=r(jpt,"ReformerForMaskedLM"),jpt.forEach(t),wko=r(T$e," (Reformer model)"),T$e.forEach(t),Ako=i(U),I2=n(U,"LI",{});var M$e=s(I2);Yme=n(M$e,"STRONG",{});var Dpt=s(Yme);Lko=r(Dpt,"rembert"),Dpt.forEach(t),yko=r(M$e," \u2014 "),ZG=n(M$e,"A",{href:!0});var Gpt=s(ZG);xko=r(Gpt,"RemBertForMaskedLM"),Gpt.forEach(t),$ko=r(M$e," (RemBERT model)"),M$e.forEach(t),kko=i(U),N2=n(U,"LI",{});var E$e=s(N2);Kme=n(E$e,"STRONG",{});var Opt=s(Kme);Sko=r(Opt,"roberta"),Opt.forEach(t),Rko=r(E$e," \u2014 "),eO=n(E$e,"A",{href:!0});var Vpt=s(eO);Pko=r(Vpt,"RobertaForMaskedLM"),Vpt.forEach(t),Bko=r(E$e," (RoBERTa model)"),E$e.forEach(t),Iko=i(U),q2=n(U,"LI",{});var C$e=s(q2);Zme=n(C$e,"STRONG",{});var Xpt=s(Zme);Nko=r(Xpt,"roformer"),Xpt.forEach(t),qko=r(C$e," \u2014 "),oO=n(C$e,"A",{href:!0});var zpt=s(oO);jko=r(zpt,"RoFormerForMaskedLM"),zpt.forEach(t),Dko=r(C$e," (RoFormer model)"),C$e.forEach(t),Gko=i(U),j2=n(U,"LI",{});var w$e=s(j2);ege=n(w$e,"STRONG",{});var Wpt=s(ege);Oko=r(Wpt,"squeezebert"),Wpt.forEach(t),Vko=r(w$e," \u2014 "),rO=n(w$e,"A",{href:!0});var Qpt=s(rO);Xko=r(Qpt,"SqueezeBertForMaskedLM"),Qpt.forEach(t),zko=r(w$e," (SqueezeBERT model)"),w$e.forEach(t),Wko=i(U),D2=n(U,"LI",{});var A$e=s(D2);oge=n(A$e,"STRONG",{});var Hpt=s(oge);Qko=r(Hpt,"tapas"),Hpt.forEach(t),Hko=r(A$e," \u2014 "),tO=n(A$e,"A",{href:!0});var Upt=s(tO);Uko=r(Upt,"TapasForMaskedLM"),Upt.forEach(t),Jko=r(A$e," (TAPAS model)"),A$e.forEach(t),Yko=i(U),G2=n(U,"LI",{});var L$e=s(G2);rge=n(L$e,"STRONG",{});var Jpt=s(rge);Kko=r(Jpt,"wav2vec2"),Jpt.forEach(t),Zko=r(L$e," \u2014 "),tge=n(L$e,"CODE",{});var Ypt=s(tge);eSo=r(Ypt,"Wav2Vec2ForMaskedLM"),Ypt.forEach(t),oSo=r(L$e," (Wav2Vec2 model)"),L$e.forEach(t),rSo=i(U),O2=n(U,"LI",{});var y$e=s(O2);age=n(y$e,"STRONG",{});var Kpt=s(age);tSo=r(Kpt,"xlm"),Kpt.forEach(t),aSo=r(y$e," \u2014 "),aO=n(y$e,"A",{href:!0});var Zpt=s(aO);nSo=r(Zpt,"XLMWithLMHeadModel"),Zpt.forEach(t),sSo=r(y$e," (XLM model)"),y$e.forEach(t),lSo=i(U),V2=n(U,"LI",{});var x$e=s(V2);nge=n(x$e,"STRONG",{});var eut=s(nge);iSo=r(eut,"xlm-roberta"),eut.forEach(t),dSo=r(x$e," \u2014 "),nO=n(x$e,"A",{href:!0});var out=s(nO);cSo=r(out,"XLMRobertaForMaskedLM"),out.forEach(t),fSo=r(x$e," (XLM-RoBERTa model)"),x$e.forEach(t),mSo=i(U),X2=n(U,"LI",{});var $$e=s(X2);sge=n($$e,"STRONG",{});var rut=s(sge);gSo=r(rut,"xlm-roberta-xl"),rut.forEach(t),hSo=r($$e," \u2014 "),sO=n($$e,"A",{href:!0});var tut=s(sO);pSo=r(tut,"XLMRobertaXLForMaskedLM"),tut.forEach(t),uSo=r($$e," (XLM-RoBERTa-XL model)"),$$e.forEach(t),_So=i(U),z2=n(U,"LI",{});var k$e=s(z2);lge=n(k$e,"STRONG",{});var aut=s(lge);bSo=r(aut,"yoso"),aut.forEach(t),vSo=r(k$e," \u2014 "),lO=n(k$e,"A",{href:!0});var nut=s(lO);FSo=r(nut,"YosoForMaskedLM"),nut.forEach(t),TSo=r(k$e," (YOSO model)"),k$e.forEach(t),U.forEach(t),MSo=i(la),W2=n(la,"P",{});var S$e=s(W2);ESo=r(S$e,"The model is set in evaluation mode by default using "),ige=n(S$e,"CODE",{});var sut=s(ige);CSo=r(sut,"model.eval()"),sut.forEach(t),wSo=r(S$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dge=n(S$e,"CODE",{});var lut=s(dge);ASo=r(lut,"model.train()"),lut.forEach(t),S$e.forEach(t),LSo=i(la),T(Q2.$$.fragment,la),la.forEach(t),Ks.forEach(t),LGe=i(f),Wi=n(f,"H2",{class:!0});var RVe=s(Wi);H2=n(RVe,"A",{id:!0,class:!0,href:!0});var iut=s(H2);cge=n(iut,"SPAN",{});var dut=s(cge);T(g7.$$.fragment,dut),dut.forEach(t),iut.forEach(t),ySo=i(RVe),fge=n(RVe,"SPAN",{});var cut=s(fge);xSo=r(cut,"AutoModelForSeq2SeqLM"),cut.forEach(t),RVe.forEach(t),yGe=i(f),Ro=n(f,"DIV",{class:!0});var Zs=s(Ro);T(h7.$$.fragment,Zs),$So=i(Zs),Qi=n(Zs,"P",{});var doe=s(Qi);kSo=r(doe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),iO=n(doe,"A",{href:!0});var fut=s(iO);SSo=r(fut,"from_pretrained()"),fut.forEach(t),RSo=r(doe," class method or the "),dO=n(doe,"A",{href:!0});var mut=s(dO);PSo=r(mut,"from_config()"),mut.forEach(t),BSo=r(doe,` class
method.`),doe.forEach(t),ISo=i(Zs),p7=n(Zs,"P",{});var PVe=s(p7);NSo=r(PVe,"This class cannot be instantiated directly using "),mge=n(PVe,"CODE",{});var gut=s(mge);qSo=r(gut,"__init__()"),gut.forEach(t),jSo=r(PVe," (throws an error)."),PVe.forEach(t),DSo=i(Zs),dt=n(Zs,"DIV",{class:!0});var kA=s(dt);T(u7.$$.fragment,kA),GSo=i(kA),gge=n(kA,"P",{});var hut=s(gge);OSo=r(hut,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),hut.forEach(t),VSo=i(kA),Hi=n(kA,"P",{});var coe=s(Hi);XSo=r(coe,`Note:
Loading a model from its configuration file does `),hge=n(coe,"STRONG",{});var put=s(hge);zSo=r(put,"not"),put.forEach(t),WSo=r(coe,` load the model weights. It only affects the
model\u2019s configuration. Use `),cO=n(coe,"A",{href:!0});var uut=s(cO);QSo=r(uut,"from_pretrained()"),uut.forEach(t),HSo=r(coe," to load the model weights."),coe.forEach(t),USo=i(kA),T(U2.$$.fragment,kA),kA.forEach(t),JSo=i(Zs),eo=n(Zs,"DIV",{class:!0});var ia=s(eo);T(_7.$$.fragment,ia),YSo=i(ia),pge=n(ia,"P",{});var _ut=s(pge);KSo=r(_ut,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),_ut.forEach(t),ZSo=i(ia),Ia=n(ia,"P",{});var SA=s(Ia);eRo=r(SA,"The model class to instantiate is selected based on the "),uge=n(SA,"CODE",{});var but=s(uge);oRo=r(but,"model_type"),but.forEach(t),rRo=r(SA,` property of the config object (either
passed as an argument or loaded from `),_ge=n(SA,"CODE",{});var vut=s(_ge);tRo=r(vut,"pretrained_model_name_or_path"),vut.forEach(t),aRo=r(SA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bge=n(SA,"CODE",{});var Fut=s(bge);nRo=r(Fut,"pretrained_model_name_or_path"),Fut.forEach(t),sRo=r(SA,":"),SA.forEach(t),lRo=i(ia),pe=n(ia,"UL",{});var be=s(pe);J2=n(be,"LI",{});var R$e=s(J2);vge=n(R$e,"STRONG",{});var Tut=s(vge);iRo=r(Tut,"bart"),Tut.forEach(t),dRo=r(R$e," \u2014 "),fO=n(R$e,"A",{href:!0});var Mut=s(fO);cRo=r(Mut,"BartForConditionalGeneration"),Mut.forEach(t),fRo=r(R$e," (BART model)"),R$e.forEach(t),mRo=i(be),Y2=n(be,"LI",{});var P$e=s(Y2);Fge=n(P$e,"STRONG",{});var Eut=s(Fge);gRo=r(Eut,"bigbird_pegasus"),Eut.forEach(t),hRo=r(P$e," \u2014 "),mO=n(P$e,"A",{href:!0});var Cut=s(mO);pRo=r(Cut,"BigBirdPegasusForConditionalGeneration"),Cut.forEach(t),uRo=r(P$e," (BigBird-Pegasus model)"),P$e.forEach(t),_Ro=i(be),K2=n(be,"LI",{});var B$e=s(K2);Tge=n(B$e,"STRONG",{});var wut=s(Tge);bRo=r(wut,"blenderbot"),wut.forEach(t),vRo=r(B$e," \u2014 "),gO=n(B$e,"A",{href:!0});var Aut=s(gO);FRo=r(Aut,"BlenderbotForConditionalGeneration"),Aut.forEach(t),TRo=r(B$e," (Blenderbot model)"),B$e.forEach(t),MRo=i(be),Z2=n(be,"LI",{});var I$e=s(Z2);Mge=n(I$e,"STRONG",{});var Lut=s(Mge);ERo=r(Lut,"blenderbot-small"),Lut.forEach(t),CRo=r(I$e," \u2014 "),hO=n(I$e,"A",{href:!0});var yut=s(hO);wRo=r(yut,"BlenderbotSmallForConditionalGeneration"),yut.forEach(t),ARo=r(I$e," (BlenderbotSmall model)"),I$e.forEach(t),LRo=i(be),eb=n(be,"LI",{});var N$e=s(eb);Ege=n(N$e,"STRONG",{});var xut=s(Ege);yRo=r(xut,"encoder-decoder"),xut.forEach(t),xRo=r(N$e," \u2014 "),pO=n(N$e,"A",{href:!0});var $ut=s(pO);$Ro=r($ut,"EncoderDecoderModel"),$ut.forEach(t),kRo=r(N$e," (Encoder decoder model)"),N$e.forEach(t),SRo=i(be),ob=n(be,"LI",{});var q$e=s(ob);Cge=n(q$e,"STRONG",{});var kut=s(Cge);RRo=r(kut,"fsmt"),kut.forEach(t),PRo=r(q$e," \u2014 "),uO=n(q$e,"A",{href:!0});var Sut=s(uO);BRo=r(Sut,"FSMTForConditionalGeneration"),Sut.forEach(t),IRo=r(q$e," (FairSeq Machine-Translation model)"),q$e.forEach(t),NRo=i(be),rb=n(be,"LI",{});var j$e=s(rb);wge=n(j$e,"STRONG",{});var Rut=s(wge);qRo=r(Rut,"led"),Rut.forEach(t),jRo=r(j$e," \u2014 "),_O=n(j$e,"A",{href:!0});var Put=s(_O);DRo=r(Put,"LEDForConditionalGeneration"),Put.forEach(t),GRo=r(j$e," (LED model)"),j$e.forEach(t),ORo=i(be),tb=n(be,"LI",{});var D$e=s(tb);Age=n(D$e,"STRONG",{});var But=s(Age);VRo=r(But,"longt5"),But.forEach(t),XRo=r(D$e," \u2014 "),bO=n(D$e,"A",{href:!0});var Iut=s(bO);zRo=r(Iut,"LongT5ForConditionalGeneration"),Iut.forEach(t),WRo=r(D$e," (LongT5 model)"),D$e.forEach(t),QRo=i(be),ab=n(be,"LI",{});var G$e=s(ab);Lge=n(G$e,"STRONG",{});var Nut=s(Lge);HRo=r(Nut,"m2m_100"),Nut.forEach(t),URo=r(G$e," \u2014 "),vO=n(G$e,"A",{href:!0});var qut=s(vO);JRo=r(qut,"M2M100ForConditionalGeneration"),qut.forEach(t),YRo=r(G$e," (M2M100 model)"),G$e.forEach(t),KRo=i(be),nb=n(be,"LI",{});var O$e=s(nb);yge=n(O$e,"STRONG",{});var jut=s(yge);ZRo=r(jut,"marian"),jut.forEach(t),ePo=r(O$e," \u2014 "),FO=n(O$e,"A",{href:!0});var Dut=s(FO);oPo=r(Dut,"MarianMTModel"),Dut.forEach(t),rPo=r(O$e," (Marian model)"),O$e.forEach(t),tPo=i(be),sb=n(be,"LI",{});var V$e=s(sb);xge=n(V$e,"STRONG",{});var Gut=s(xge);aPo=r(Gut,"mbart"),Gut.forEach(t),nPo=r(V$e," \u2014 "),TO=n(V$e,"A",{href:!0});var Out=s(TO);sPo=r(Out,"MBartForConditionalGeneration"),Out.forEach(t),lPo=r(V$e," (mBART model)"),V$e.forEach(t),iPo=i(be),lb=n(be,"LI",{});var X$e=s(lb);$ge=n(X$e,"STRONG",{});var Vut=s($ge);dPo=r(Vut,"mt5"),Vut.forEach(t),cPo=r(X$e," \u2014 "),MO=n(X$e,"A",{href:!0});var Xut=s(MO);fPo=r(Xut,"MT5ForConditionalGeneration"),Xut.forEach(t),mPo=r(X$e," (MT5 model)"),X$e.forEach(t),gPo=i(be),ib=n(be,"LI",{});var z$e=s(ib);kge=n(z$e,"STRONG",{});var zut=s(kge);hPo=r(zut,"pegasus"),zut.forEach(t),pPo=r(z$e," \u2014 "),EO=n(z$e,"A",{href:!0});var Wut=s(EO);uPo=r(Wut,"PegasusForConditionalGeneration"),Wut.forEach(t),_Po=r(z$e," (Pegasus model)"),z$e.forEach(t),bPo=i(be),db=n(be,"LI",{});var W$e=s(db);Sge=n(W$e,"STRONG",{});var Qut=s(Sge);vPo=r(Qut,"plbart"),Qut.forEach(t),FPo=r(W$e," \u2014 "),CO=n(W$e,"A",{href:!0});var Hut=s(CO);TPo=r(Hut,"PLBartForConditionalGeneration"),Hut.forEach(t),MPo=r(W$e," (PLBart model)"),W$e.forEach(t),EPo=i(be),cb=n(be,"LI",{});var Q$e=s(cb);Rge=n(Q$e,"STRONG",{});var Uut=s(Rge);CPo=r(Uut,"prophetnet"),Uut.forEach(t),wPo=r(Q$e," \u2014 "),wO=n(Q$e,"A",{href:!0});var Jut=s(wO);APo=r(Jut,"ProphetNetForConditionalGeneration"),Jut.forEach(t),LPo=r(Q$e," (ProphetNet model)"),Q$e.forEach(t),yPo=i(be),fb=n(be,"LI",{});var H$e=s(fb);Pge=n(H$e,"STRONG",{});var Yut=s(Pge);xPo=r(Yut,"t5"),Yut.forEach(t),$Po=r(H$e," \u2014 "),AO=n(H$e,"A",{href:!0});var Kut=s(AO);kPo=r(Kut,"T5ForConditionalGeneration"),Kut.forEach(t),SPo=r(H$e," (T5 model)"),H$e.forEach(t),RPo=i(be),mb=n(be,"LI",{});var U$e=s(mb);Bge=n(U$e,"STRONG",{});var Zut=s(Bge);PPo=r(Zut,"xlm-prophetnet"),Zut.forEach(t),BPo=r(U$e," \u2014 "),LO=n(U$e,"A",{href:!0});var e_t=s(LO);IPo=r(e_t,"XLMProphetNetForConditionalGeneration"),e_t.forEach(t),NPo=r(U$e," (XLM-ProphetNet model)"),U$e.forEach(t),be.forEach(t),qPo=i(ia),gb=n(ia,"P",{});var J$e=s(gb);jPo=r(J$e,"The model is set in evaluation mode by default using "),Ige=n(J$e,"CODE",{});var o_t=s(Ige);DPo=r(o_t,"model.eval()"),o_t.forEach(t),GPo=r(J$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nge=n(J$e,"CODE",{});var r_t=s(Nge);OPo=r(r_t,"model.train()"),r_t.forEach(t),J$e.forEach(t),VPo=i(ia),T(hb.$$.fragment,ia),ia.forEach(t),Zs.forEach(t),xGe=i(f),Ui=n(f,"H2",{class:!0});var BVe=s(Ui);pb=n(BVe,"A",{id:!0,class:!0,href:!0});var t_t=s(pb);qge=n(t_t,"SPAN",{});var a_t=s(qge);T(b7.$$.fragment,a_t),a_t.forEach(t),t_t.forEach(t),XPo=i(BVe),jge=n(BVe,"SPAN",{});var n_t=s(jge);zPo=r(n_t,"AutoModelForSequenceClassification"),n_t.forEach(t),BVe.forEach(t),$Ge=i(f),Po=n(f,"DIV",{class:!0});var el=s(Po);T(v7.$$.fragment,el),WPo=i(el),Ji=n(el,"P",{});var foe=s(Ji);QPo=r(foe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),yO=n(foe,"A",{href:!0});var s_t=s(yO);HPo=r(s_t,"from_pretrained()"),s_t.forEach(t),UPo=r(foe," class method or the "),xO=n(foe,"A",{href:!0});var l_t=s(xO);JPo=r(l_t,"from_config()"),l_t.forEach(t),YPo=r(foe,` class
method.`),foe.forEach(t),KPo=i(el),F7=n(el,"P",{});var IVe=s(F7);ZPo=r(IVe,"This class cannot be instantiated directly using "),Dge=n(IVe,"CODE",{});var i_t=s(Dge);eBo=r(i_t,"__init__()"),i_t.forEach(t),oBo=r(IVe," (throws an error)."),IVe.forEach(t),rBo=i(el),ct=n(el,"DIV",{class:!0});var RA=s(ct);T(T7.$$.fragment,RA),tBo=i(RA),Gge=n(RA,"P",{});var d_t=s(Gge);aBo=r(d_t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),d_t.forEach(t),nBo=i(RA),Yi=n(RA,"P",{});var moe=s(Yi);sBo=r(moe,`Note:
Loading a model from its configuration file does `),Oge=n(moe,"STRONG",{});var c_t=s(Oge);lBo=r(c_t,"not"),c_t.forEach(t),iBo=r(moe,` load the model weights. It only affects the
model\u2019s configuration. Use `),$O=n(moe,"A",{href:!0});var f_t=s($O);dBo=r(f_t,"from_pretrained()"),f_t.forEach(t),cBo=r(moe," to load the model weights."),moe.forEach(t),fBo=i(RA),T(ub.$$.fragment,RA),RA.forEach(t),mBo=i(el),oo=n(el,"DIV",{class:!0});var da=s(oo);T(M7.$$.fragment,da),gBo=i(da),Vge=n(da,"P",{});var m_t=s(Vge);hBo=r(m_t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),m_t.forEach(t),pBo=i(da),Na=n(da,"P",{});var PA=s(Na);uBo=r(PA,"The model class to instantiate is selected based on the "),Xge=n(PA,"CODE",{});var g_t=s(Xge);_Bo=r(g_t,"model_type"),g_t.forEach(t),bBo=r(PA,` property of the config object (either
passed as an argument or loaded from `),zge=n(PA,"CODE",{});var h_t=s(zge);vBo=r(h_t,"pretrained_model_name_or_path"),h_t.forEach(t),FBo=r(PA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wge=n(PA,"CODE",{});var p_t=s(Wge);TBo=r(p_t,"pretrained_model_name_or_path"),p_t.forEach(t),MBo=r(PA,":"),PA.forEach(t),EBo=i(da),N=n(da,"UL",{});var j=s(N);_b=n(j,"LI",{});var Y$e=s(_b);Qge=n(Y$e,"STRONG",{});var u_t=s(Qge);CBo=r(u_t,"albert"),u_t.forEach(t),wBo=r(Y$e," \u2014 "),kO=n(Y$e,"A",{href:!0});var __t=s(kO);ABo=r(__t,"AlbertForSequenceClassification"),__t.forEach(t),LBo=r(Y$e," (ALBERT model)"),Y$e.forEach(t),yBo=i(j),bb=n(j,"LI",{});var K$e=s(bb);Hge=n(K$e,"STRONG",{});var b_t=s(Hge);xBo=r(b_t,"bart"),b_t.forEach(t),$Bo=r(K$e," \u2014 "),SO=n(K$e,"A",{href:!0});var v_t=s(SO);kBo=r(v_t,"BartForSequenceClassification"),v_t.forEach(t),SBo=r(K$e," (BART model)"),K$e.forEach(t),RBo=i(j),vb=n(j,"LI",{});var Z$e=s(vb);Uge=n(Z$e,"STRONG",{});var F_t=s(Uge);PBo=r(F_t,"bert"),F_t.forEach(t),BBo=r(Z$e," \u2014 "),RO=n(Z$e,"A",{href:!0});var T_t=s(RO);IBo=r(T_t,"BertForSequenceClassification"),T_t.forEach(t),NBo=r(Z$e," (BERT model)"),Z$e.forEach(t),qBo=i(j),Fb=n(j,"LI",{});var eke=s(Fb);Jge=n(eke,"STRONG",{});var M_t=s(Jge);jBo=r(M_t,"big_bird"),M_t.forEach(t),DBo=r(eke," \u2014 "),PO=n(eke,"A",{href:!0});var E_t=s(PO);GBo=r(E_t,"BigBirdForSequenceClassification"),E_t.forEach(t),OBo=r(eke," (BigBird model)"),eke.forEach(t),VBo=i(j),Tb=n(j,"LI",{});var oke=s(Tb);Yge=n(oke,"STRONG",{});var C_t=s(Yge);XBo=r(C_t,"bigbird_pegasus"),C_t.forEach(t),zBo=r(oke," \u2014 "),BO=n(oke,"A",{href:!0});var w_t=s(BO);WBo=r(w_t,"BigBirdPegasusForSequenceClassification"),w_t.forEach(t),QBo=r(oke," (BigBird-Pegasus model)"),oke.forEach(t),HBo=i(j),Mb=n(j,"LI",{});var rke=s(Mb);Kge=n(rke,"STRONG",{});var A_t=s(Kge);UBo=r(A_t,"bloom"),A_t.forEach(t),JBo=r(rke," \u2014 "),IO=n(rke,"A",{href:!0});var L_t=s(IO);YBo=r(L_t,"BloomForSequenceClassification"),L_t.forEach(t),KBo=r(rke," (BLOOM model)"),rke.forEach(t),ZBo=i(j),Eb=n(j,"LI",{});var tke=s(Eb);Zge=n(tke,"STRONG",{});var y_t=s(Zge);eIo=r(y_t,"camembert"),y_t.forEach(t),oIo=r(tke," \u2014 "),NO=n(tke,"A",{href:!0});var x_t=s(NO);rIo=r(x_t,"CamembertForSequenceClassification"),x_t.forEach(t),tIo=r(tke," (CamemBERT model)"),tke.forEach(t),aIo=i(j),Cb=n(j,"LI",{});var ake=s(Cb);ehe=n(ake,"STRONG",{});var $_t=s(ehe);nIo=r($_t,"canine"),$_t.forEach(t),sIo=r(ake," \u2014 "),qO=n(ake,"A",{href:!0});var k_t=s(qO);lIo=r(k_t,"CanineForSequenceClassification"),k_t.forEach(t),iIo=r(ake," (CANINE model)"),ake.forEach(t),dIo=i(j),wb=n(j,"LI",{});var nke=s(wb);ohe=n(nke,"STRONG",{});var S_t=s(ohe);cIo=r(S_t,"convbert"),S_t.forEach(t),fIo=r(nke," \u2014 "),jO=n(nke,"A",{href:!0});var R_t=s(jO);mIo=r(R_t,"ConvBertForSequenceClassification"),R_t.forEach(t),gIo=r(nke," (ConvBERT model)"),nke.forEach(t),hIo=i(j),Ab=n(j,"LI",{});var ske=s(Ab);rhe=n(ske,"STRONG",{});var P_t=s(rhe);pIo=r(P_t,"ctrl"),P_t.forEach(t),uIo=r(ske," \u2014 "),DO=n(ske,"A",{href:!0});var B_t=s(DO);_Io=r(B_t,"CTRLForSequenceClassification"),B_t.forEach(t),bIo=r(ske," (CTRL model)"),ske.forEach(t),vIo=i(j),Lb=n(j,"LI",{});var lke=s(Lb);the=n(lke,"STRONG",{});var I_t=s(the);FIo=r(I_t,"data2vec-text"),I_t.forEach(t),TIo=r(lke," \u2014 "),GO=n(lke,"A",{href:!0});var N_t=s(GO);MIo=r(N_t,"Data2VecTextForSequenceClassification"),N_t.forEach(t),EIo=r(lke," (Data2VecText model)"),lke.forEach(t),CIo=i(j),yb=n(j,"LI",{});var ike=s(yb);ahe=n(ike,"STRONG",{});var q_t=s(ahe);wIo=r(q_t,"deberta"),q_t.forEach(t),AIo=r(ike," \u2014 "),OO=n(ike,"A",{href:!0});var j_t=s(OO);LIo=r(j_t,"DebertaForSequenceClassification"),j_t.forEach(t),yIo=r(ike," (DeBERTa model)"),ike.forEach(t),xIo=i(j),xb=n(j,"LI",{});var dke=s(xb);nhe=n(dke,"STRONG",{});var D_t=s(nhe);$Io=r(D_t,"deberta-v2"),D_t.forEach(t),kIo=r(dke," \u2014 "),VO=n(dke,"A",{href:!0});var G_t=s(VO);SIo=r(G_t,"DebertaV2ForSequenceClassification"),G_t.forEach(t),RIo=r(dke," (DeBERTa-v2 model)"),dke.forEach(t),PIo=i(j),$b=n(j,"LI",{});var cke=s($b);she=n(cke,"STRONG",{});var O_t=s(she);BIo=r(O_t,"distilbert"),O_t.forEach(t),IIo=r(cke," \u2014 "),XO=n(cke,"A",{href:!0});var V_t=s(XO);NIo=r(V_t,"DistilBertForSequenceClassification"),V_t.forEach(t),qIo=r(cke," (DistilBERT model)"),cke.forEach(t),jIo=i(j),kb=n(j,"LI",{});var fke=s(kb);lhe=n(fke,"STRONG",{});var X_t=s(lhe);DIo=r(X_t,"electra"),X_t.forEach(t),GIo=r(fke," \u2014 "),zO=n(fke,"A",{href:!0});var z_t=s(zO);OIo=r(z_t,"ElectraForSequenceClassification"),z_t.forEach(t),VIo=r(fke," (ELECTRA model)"),fke.forEach(t),XIo=i(j),Sb=n(j,"LI",{});var mke=s(Sb);ihe=n(mke,"STRONG",{});var W_t=s(ihe);zIo=r(W_t,"flaubert"),W_t.forEach(t),WIo=r(mke," \u2014 "),WO=n(mke,"A",{href:!0});var Q_t=s(WO);QIo=r(Q_t,"FlaubertForSequenceClassification"),Q_t.forEach(t),HIo=r(mke," (FlauBERT model)"),mke.forEach(t),UIo=i(j),Rb=n(j,"LI",{});var gke=s(Rb);dhe=n(gke,"STRONG",{});var H_t=s(dhe);JIo=r(H_t,"fnet"),H_t.forEach(t),YIo=r(gke," \u2014 "),QO=n(gke,"A",{href:!0});var U_t=s(QO);KIo=r(U_t,"FNetForSequenceClassification"),U_t.forEach(t),ZIo=r(gke," (FNet model)"),gke.forEach(t),eNo=i(j),Pb=n(j,"LI",{});var hke=s(Pb);che=n(hke,"STRONG",{});var J_t=s(che);oNo=r(J_t,"funnel"),J_t.forEach(t),rNo=r(hke," \u2014 "),HO=n(hke,"A",{href:!0});var Y_t=s(HO);tNo=r(Y_t,"FunnelForSequenceClassification"),Y_t.forEach(t),aNo=r(hke," (Funnel Transformer model)"),hke.forEach(t),nNo=i(j),Bb=n(j,"LI",{});var pke=s(Bb);fhe=n(pke,"STRONG",{});var K_t=s(fhe);sNo=r(K_t,"gpt2"),K_t.forEach(t),lNo=r(pke," \u2014 "),UO=n(pke,"A",{href:!0});var Z_t=s(UO);iNo=r(Z_t,"GPT2ForSequenceClassification"),Z_t.forEach(t),dNo=r(pke," (OpenAI GPT-2 model)"),pke.forEach(t),cNo=i(j),Ib=n(j,"LI",{});var uke=s(Ib);mhe=n(uke,"STRONG",{});var e1t=s(mhe);fNo=r(e1t,"gpt_neo"),e1t.forEach(t),mNo=r(uke," \u2014 "),JO=n(uke,"A",{href:!0});var o1t=s(JO);gNo=r(o1t,"GPTNeoForSequenceClassification"),o1t.forEach(t),hNo=r(uke," (GPT Neo model)"),uke.forEach(t),pNo=i(j),Nb=n(j,"LI",{});var _ke=s(Nb);ghe=n(_ke,"STRONG",{});var r1t=s(ghe);uNo=r(r1t,"gptj"),r1t.forEach(t),_No=r(_ke," \u2014 "),YO=n(_ke,"A",{href:!0});var t1t=s(YO);bNo=r(t1t,"GPTJForSequenceClassification"),t1t.forEach(t),vNo=r(_ke," (GPT-J model)"),_ke.forEach(t),FNo=i(j),qb=n(j,"LI",{});var bke=s(qb);hhe=n(bke,"STRONG",{});var a1t=s(hhe);TNo=r(a1t,"ibert"),a1t.forEach(t),MNo=r(bke," \u2014 "),KO=n(bke,"A",{href:!0});var n1t=s(KO);ENo=r(n1t,"IBertForSequenceClassification"),n1t.forEach(t),CNo=r(bke," (I-BERT model)"),bke.forEach(t),wNo=i(j),jb=n(j,"LI",{});var vke=s(jb);phe=n(vke,"STRONG",{});var s1t=s(phe);ANo=r(s1t,"layoutlm"),s1t.forEach(t),LNo=r(vke," \u2014 "),ZO=n(vke,"A",{href:!0});var l1t=s(ZO);yNo=r(l1t,"LayoutLMForSequenceClassification"),l1t.forEach(t),xNo=r(vke," (LayoutLM model)"),vke.forEach(t),$No=i(j),Db=n(j,"LI",{});var Fke=s(Db);uhe=n(Fke,"STRONG",{});var i1t=s(uhe);kNo=r(i1t,"layoutlmv2"),i1t.forEach(t),SNo=r(Fke," \u2014 "),eV=n(Fke,"A",{href:!0});var d1t=s(eV);RNo=r(d1t,"LayoutLMv2ForSequenceClassification"),d1t.forEach(t),PNo=r(Fke," (LayoutLMv2 model)"),Fke.forEach(t),BNo=i(j),Gb=n(j,"LI",{});var Tke=s(Gb);_he=n(Tke,"STRONG",{});var c1t=s(_he);INo=r(c1t,"layoutlmv3"),c1t.forEach(t),NNo=r(Tke," \u2014 "),oV=n(Tke,"A",{href:!0});var f1t=s(oV);qNo=r(f1t,"LayoutLMv3ForSequenceClassification"),f1t.forEach(t),jNo=r(Tke," (LayoutLMv3 model)"),Tke.forEach(t),DNo=i(j),Ob=n(j,"LI",{});var Mke=s(Ob);bhe=n(Mke,"STRONG",{});var m1t=s(bhe);GNo=r(m1t,"led"),m1t.forEach(t),ONo=r(Mke," \u2014 "),rV=n(Mke,"A",{href:!0});var g1t=s(rV);VNo=r(g1t,"LEDForSequenceClassification"),g1t.forEach(t),XNo=r(Mke," (LED model)"),Mke.forEach(t),zNo=i(j),Vb=n(j,"LI",{});var Eke=s(Vb);vhe=n(Eke,"STRONG",{});var h1t=s(vhe);WNo=r(h1t,"longformer"),h1t.forEach(t),QNo=r(Eke," \u2014 "),tV=n(Eke,"A",{href:!0});var p1t=s(tV);HNo=r(p1t,"LongformerForSequenceClassification"),p1t.forEach(t),UNo=r(Eke," (Longformer model)"),Eke.forEach(t),JNo=i(j),Xb=n(j,"LI",{});var Cke=s(Xb);Fhe=n(Cke,"STRONG",{});var u1t=s(Fhe);YNo=r(u1t,"mbart"),u1t.forEach(t),KNo=r(Cke," \u2014 "),aV=n(Cke,"A",{href:!0});var _1t=s(aV);ZNo=r(_1t,"MBartForSequenceClassification"),_1t.forEach(t),eqo=r(Cke," (mBART model)"),Cke.forEach(t),oqo=i(j),zb=n(j,"LI",{});var wke=s(zb);The=n(wke,"STRONG",{});var b1t=s(The);rqo=r(b1t,"megatron-bert"),b1t.forEach(t),tqo=r(wke," \u2014 "),nV=n(wke,"A",{href:!0});var v1t=s(nV);aqo=r(v1t,"MegatronBertForSequenceClassification"),v1t.forEach(t),nqo=r(wke," (Megatron-BERT model)"),wke.forEach(t),sqo=i(j),Wb=n(j,"LI",{});var Ake=s(Wb);Mhe=n(Ake,"STRONG",{});var F1t=s(Mhe);lqo=r(F1t,"mobilebert"),F1t.forEach(t),iqo=r(Ake," \u2014 "),sV=n(Ake,"A",{href:!0});var T1t=s(sV);dqo=r(T1t,"MobileBertForSequenceClassification"),T1t.forEach(t),cqo=r(Ake," (MobileBERT model)"),Ake.forEach(t),fqo=i(j),Qb=n(j,"LI",{});var Lke=s(Qb);Ehe=n(Lke,"STRONG",{});var M1t=s(Ehe);mqo=r(M1t,"mpnet"),M1t.forEach(t),gqo=r(Lke," \u2014 "),lV=n(Lke,"A",{href:!0});var E1t=s(lV);hqo=r(E1t,"MPNetForSequenceClassification"),E1t.forEach(t),pqo=r(Lke," (MPNet model)"),Lke.forEach(t),uqo=i(j),Hb=n(j,"LI",{});var yke=s(Hb);Che=n(yke,"STRONG",{});var C1t=s(Che);_qo=r(C1t,"nystromformer"),C1t.forEach(t),bqo=r(yke," \u2014 "),iV=n(yke,"A",{href:!0});var w1t=s(iV);vqo=r(w1t,"NystromformerForSequenceClassification"),w1t.forEach(t),Fqo=r(yke," (Nystr\xF6mformer model)"),yke.forEach(t),Tqo=i(j),Ub=n(j,"LI",{});var xke=s(Ub);whe=n(xke,"STRONG",{});var A1t=s(whe);Mqo=r(A1t,"openai-gpt"),A1t.forEach(t),Eqo=r(xke," \u2014 "),dV=n(xke,"A",{href:!0});var L1t=s(dV);Cqo=r(L1t,"OpenAIGPTForSequenceClassification"),L1t.forEach(t),wqo=r(xke," (OpenAI GPT model)"),xke.forEach(t),Aqo=i(j),Jb=n(j,"LI",{});var $ke=s(Jb);Ahe=n($ke,"STRONG",{});var y1t=s(Ahe);Lqo=r(y1t,"perceiver"),y1t.forEach(t),yqo=r($ke," \u2014 "),cV=n($ke,"A",{href:!0});var x1t=s(cV);xqo=r(x1t,"PerceiverForSequenceClassification"),x1t.forEach(t),$qo=r($ke," (Perceiver model)"),$ke.forEach(t),kqo=i(j),Yb=n(j,"LI",{});var kke=s(Yb);Lhe=n(kke,"STRONG",{});var $1t=s(Lhe);Sqo=r($1t,"plbart"),$1t.forEach(t),Rqo=r(kke," \u2014 "),fV=n(kke,"A",{href:!0});var k1t=s(fV);Pqo=r(k1t,"PLBartForSequenceClassification"),k1t.forEach(t),Bqo=r(kke," (PLBart model)"),kke.forEach(t),Iqo=i(j),Kb=n(j,"LI",{});var Ske=s(Kb);yhe=n(Ske,"STRONG",{});var S1t=s(yhe);Nqo=r(S1t,"qdqbert"),S1t.forEach(t),qqo=r(Ske," \u2014 "),mV=n(Ske,"A",{href:!0});var R1t=s(mV);jqo=r(R1t,"QDQBertForSequenceClassification"),R1t.forEach(t),Dqo=r(Ske," (QDQBert model)"),Ske.forEach(t),Gqo=i(j),Zb=n(j,"LI",{});var Rke=s(Zb);xhe=n(Rke,"STRONG",{});var P1t=s(xhe);Oqo=r(P1t,"reformer"),P1t.forEach(t),Vqo=r(Rke," \u2014 "),gV=n(Rke,"A",{href:!0});var B1t=s(gV);Xqo=r(B1t,"ReformerForSequenceClassification"),B1t.forEach(t),zqo=r(Rke," (Reformer model)"),Rke.forEach(t),Wqo=i(j),e4=n(j,"LI",{});var Pke=s(e4);$he=n(Pke,"STRONG",{});var I1t=s($he);Qqo=r(I1t,"rembert"),I1t.forEach(t),Hqo=r(Pke," \u2014 "),hV=n(Pke,"A",{href:!0});var N1t=s(hV);Uqo=r(N1t,"RemBertForSequenceClassification"),N1t.forEach(t),Jqo=r(Pke," (RemBERT model)"),Pke.forEach(t),Yqo=i(j),o4=n(j,"LI",{});var Bke=s(o4);khe=n(Bke,"STRONG",{});var q1t=s(khe);Kqo=r(q1t,"roberta"),q1t.forEach(t),Zqo=r(Bke," \u2014 "),pV=n(Bke,"A",{href:!0});var j1t=s(pV);ejo=r(j1t,"RobertaForSequenceClassification"),j1t.forEach(t),ojo=r(Bke," (RoBERTa model)"),Bke.forEach(t),rjo=i(j),r4=n(j,"LI",{});var Ike=s(r4);She=n(Ike,"STRONG",{});var D1t=s(She);tjo=r(D1t,"roformer"),D1t.forEach(t),ajo=r(Ike," \u2014 "),uV=n(Ike,"A",{href:!0});var G1t=s(uV);njo=r(G1t,"RoFormerForSequenceClassification"),G1t.forEach(t),sjo=r(Ike," (RoFormer model)"),Ike.forEach(t),ljo=i(j),t4=n(j,"LI",{});var Nke=s(t4);Rhe=n(Nke,"STRONG",{});var O1t=s(Rhe);ijo=r(O1t,"squeezebert"),O1t.forEach(t),djo=r(Nke," \u2014 "),_V=n(Nke,"A",{href:!0});var V1t=s(_V);cjo=r(V1t,"SqueezeBertForSequenceClassification"),V1t.forEach(t),fjo=r(Nke," (SqueezeBERT model)"),Nke.forEach(t),mjo=i(j),a4=n(j,"LI",{});var qke=s(a4);Phe=n(qke,"STRONG",{});var X1t=s(Phe);gjo=r(X1t,"tapas"),X1t.forEach(t),hjo=r(qke," \u2014 "),bV=n(qke,"A",{href:!0});var z1t=s(bV);pjo=r(z1t,"TapasForSequenceClassification"),z1t.forEach(t),ujo=r(qke," (TAPAS model)"),qke.forEach(t),_jo=i(j),n4=n(j,"LI",{});var jke=s(n4);Bhe=n(jke,"STRONG",{});var W1t=s(Bhe);bjo=r(W1t,"transfo-xl"),W1t.forEach(t),vjo=r(jke," \u2014 "),vV=n(jke,"A",{href:!0});var Q1t=s(vV);Fjo=r(Q1t,"TransfoXLForSequenceClassification"),Q1t.forEach(t),Tjo=r(jke," (Transformer-XL model)"),jke.forEach(t),Mjo=i(j),s4=n(j,"LI",{});var Dke=s(s4);Ihe=n(Dke,"STRONG",{});var H1t=s(Ihe);Ejo=r(H1t,"xlm"),H1t.forEach(t),Cjo=r(Dke," \u2014 "),FV=n(Dke,"A",{href:!0});var U1t=s(FV);wjo=r(U1t,"XLMForSequenceClassification"),U1t.forEach(t),Ajo=r(Dke," (XLM model)"),Dke.forEach(t),Ljo=i(j),l4=n(j,"LI",{});var Gke=s(l4);Nhe=n(Gke,"STRONG",{});var J1t=s(Nhe);yjo=r(J1t,"xlm-roberta"),J1t.forEach(t),xjo=r(Gke," \u2014 "),TV=n(Gke,"A",{href:!0});var Y1t=s(TV);$jo=r(Y1t,"XLMRobertaForSequenceClassification"),Y1t.forEach(t),kjo=r(Gke," (XLM-RoBERTa model)"),Gke.forEach(t),Sjo=i(j),i4=n(j,"LI",{});var Oke=s(i4);qhe=n(Oke,"STRONG",{});var K1t=s(qhe);Rjo=r(K1t,"xlm-roberta-xl"),K1t.forEach(t),Pjo=r(Oke," \u2014 "),MV=n(Oke,"A",{href:!0});var Z1t=s(MV);Bjo=r(Z1t,"XLMRobertaXLForSequenceClassification"),Z1t.forEach(t),Ijo=r(Oke," (XLM-RoBERTa-XL model)"),Oke.forEach(t),Njo=i(j),d4=n(j,"LI",{});var Vke=s(d4);jhe=n(Vke,"STRONG",{});var e2t=s(jhe);qjo=r(e2t,"xlnet"),e2t.forEach(t),jjo=r(Vke," \u2014 "),EV=n(Vke,"A",{href:!0});var o2t=s(EV);Djo=r(o2t,"XLNetForSequenceClassification"),o2t.forEach(t),Gjo=r(Vke," (XLNet model)"),Vke.forEach(t),Ojo=i(j),c4=n(j,"LI",{});var Xke=s(c4);Dhe=n(Xke,"STRONG",{});var r2t=s(Dhe);Vjo=r(r2t,"yoso"),r2t.forEach(t),Xjo=r(Xke," \u2014 "),CV=n(Xke,"A",{href:!0});var t2t=s(CV);zjo=r(t2t,"YosoForSequenceClassification"),t2t.forEach(t),Wjo=r(Xke," (YOSO model)"),Xke.forEach(t),j.forEach(t),Qjo=i(da),f4=n(da,"P",{});var zke=s(f4);Hjo=r(zke,"The model is set in evaluation mode by default using "),Ghe=n(zke,"CODE",{});var a2t=s(Ghe);Ujo=r(a2t,"model.eval()"),a2t.forEach(t),Jjo=r(zke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ohe=n(zke,"CODE",{});var n2t=s(Ohe);Yjo=r(n2t,"model.train()"),n2t.forEach(t),zke.forEach(t),Kjo=i(da),T(m4.$$.fragment,da),da.forEach(t),el.forEach(t),kGe=i(f),Ki=n(f,"H2",{class:!0});var NVe=s(Ki);g4=n(NVe,"A",{id:!0,class:!0,href:!0});var s2t=s(g4);Vhe=n(s2t,"SPAN",{});var l2t=s(Vhe);T(E7.$$.fragment,l2t),l2t.forEach(t),s2t.forEach(t),Zjo=i(NVe),Xhe=n(NVe,"SPAN",{});var i2t=s(Xhe);eDo=r(i2t,"AutoModelForMultipleChoice"),i2t.forEach(t),NVe.forEach(t),SGe=i(f),Bo=n(f,"DIV",{class:!0});var ol=s(Bo);T(C7.$$.fragment,ol),oDo=i(ol),Zi=n(ol,"P",{});var goe=s(Zi);rDo=r(goe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),wV=n(goe,"A",{href:!0});var d2t=s(wV);tDo=r(d2t,"from_pretrained()"),d2t.forEach(t),aDo=r(goe," class method or the "),AV=n(goe,"A",{href:!0});var c2t=s(AV);nDo=r(c2t,"from_config()"),c2t.forEach(t),sDo=r(goe,` class
method.`),goe.forEach(t),lDo=i(ol),w7=n(ol,"P",{});var qVe=s(w7);iDo=r(qVe,"This class cannot be instantiated directly using "),zhe=n(qVe,"CODE",{});var f2t=s(zhe);dDo=r(f2t,"__init__()"),f2t.forEach(t),cDo=r(qVe," (throws an error)."),qVe.forEach(t),fDo=i(ol),ft=n(ol,"DIV",{class:!0});var BA=s(ft);T(A7.$$.fragment,BA),mDo=i(BA),Whe=n(BA,"P",{});var m2t=s(Whe);gDo=r(m2t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),m2t.forEach(t),hDo=i(BA),ed=n(BA,"P",{});var hoe=s(ed);pDo=r(hoe,`Note:
Loading a model from its configuration file does `),Qhe=n(hoe,"STRONG",{});var g2t=s(Qhe);uDo=r(g2t,"not"),g2t.forEach(t),_Do=r(hoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),LV=n(hoe,"A",{href:!0});var h2t=s(LV);bDo=r(h2t,"from_pretrained()"),h2t.forEach(t),vDo=r(hoe," to load the model weights."),hoe.forEach(t),FDo=i(BA),T(h4.$$.fragment,BA),BA.forEach(t),TDo=i(ol),ro=n(ol,"DIV",{class:!0});var ca=s(ro);T(L7.$$.fragment,ca),MDo=i(ca),Hhe=n(ca,"P",{});var p2t=s(Hhe);EDo=r(p2t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),p2t.forEach(t),CDo=i(ca),qa=n(ca,"P",{});var IA=s(qa);wDo=r(IA,"The model class to instantiate is selected based on the "),Uhe=n(IA,"CODE",{});var u2t=s(Uhe);ADo=r(u2t,"model_type"),u2t.forEach(t),LDo=r(IA,` property of the config object (either
passed as an argument or loaded from `),Jhe=n(IA,"CODE",{});var _2t=s(Jhe);yDo=r(_2t,"pretrained_model_name_or_path"),_2t.forEach(t),xDo=r(IA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yhe=n(IA,"CODE",{});var b2t=s(Yhe);$Do=r(b2t,"pretrained_model_name_or_path"),b2t.forEach(t),kDo=r(IA,":"),IA.forEach(t),SDo=i(ca),Z=n(ca,"UL",{});var ee=s(Z);p4=n(ee,"LI",{});var Wke=s(p4);Khe=n(Wke,"STRONG",{});var v2t=s(Khe);RDo=r(v2t,"albert"),v2t.forEach(t),PDo=r(Wke," \u2014 "),yV=n(Wke,"A",{href:!0});var F2t=s(yV);BDo=r(F2t,"AlbertForMultipleChoice"),F2t.forEach(t),IDo=r(Wke," (ALBERT model)"),Wke.forEach(t),NDo=i(ee),u4=n(ee,"LI",{});var Qke=s(u4);Zhe=n(Qke,"STRONG",{});var T2t=s(Zhe);qDo=r(T2t,"bert"),T2t.forEach(t),jDo=r(Qke," \u2014 "),xV=n(Qke,"A",{href:!0});var M2t=s(xV);DDo=r(M2t,"BertForMultipleChoice"),M2t.forEach(t),GDo=r(Qke," (BERT model)"),Qke.forEach(t),ODo=i(ee),_4=n(ee,"LI",{});var Hke=s(_4);epe=n(Hke,"STRONG",{});var E2t=s(epe);VDo=r(E2t,"big_bird"),E2t.forEach(t),XDo=r(Hke," \u2014 "),$V=n(Hke,"A",{href:!0});var C2t=s($V);zDo=r(C2t,"BigBirdForMultipleChoice"),C2t.forEach(t),WDo=r(Hke," (BigBird model)"),Hke.forEach(t),QDo=i(ee),b4=n(ee,"LI",{});var Uke=s(b4);ope=n(Uke,"STRONG",{});var w2t=s(ope);HDo=r(w2t,"camembert"),w2t.forEach(t),UDo=r(Uke," \u2014 "),kV=n(Uke,"A",{href:!0});var A2t=s(kV);JDo=r(A2t,"CamembertForMultipleChoice"),A2t.forEach(t),YDo=r(Uke," (CamemBERT model)"),Uke.forEach(t),KDo=i(ee),v4=n(ee,"LI",{});var Jke=s(v4);rpe=n(Jke,"STRONG",{});var L2t=s(rpe);ZDo=r(L2t,"canine"),L2t.forEach(t),eGo=r(Jke," \u2014 "),SV=n(Jke,"A",{href:!0});var y2t=s(SV);oGo=r(y2t,"CanineForMultipleChoice"),y2t.forEach(t),rGo=r(Jke," (CANINE model)"),Jke.forEach(t),tGo=i(ee),F4=n(ee,"LI",{});var Yke=s(F4);tpe=n(Yke,"STRONG",{});var x2t=s(tpe);aGo=r(x2t,"convbert"),x2t.forEach(t),nGo=r(Yke," \u2014 "),RV=n(Yke,"A",{href:!0});var $2t=s(RV);sGo=r($2t,"ConvBertForMultipleChoice"),$2t.forEach(t),lGo=r(Yke," (ConvBERT model)"),Yke.forEach(t),iGo=i(ee),T4=n(ee,"LI",{});var Kke=s(T4);ape=n(Kke,"STRONG",{});var k2t=s(ape);dGo=r(k2t,"data2vec-text"),k2t.forEach(t),cGo=r(Kke," \u2014 "),PV=n(Kke,"A",{href:!0});var S2t=s(PV);fGo=r(S2t,"Data2VecTextForMultipleChoice"),S2t.forEach(t),mGo=r(Kke," (Data2VecText model)"),Kke.forEach(t),gGo=i(ee),M4=n(ee,"LI",{});var Zke=s(M4);npe=n(Zke,"STRONG",{});var R2t=s(npe);hGo=r(R2t,"deberta-v2"),R2t.forEach(t),pGo=r(Zke," \u2014 "),BV=n(Zke,"A",{href:!0});var P2t=s(BV);uGo=r(P2t,"DebertaV2ForMultipleChoice"),P2t.forEach(t),_Go=r(Zke," (DeBERTa-v2 model)"),Zke.forEach(t),bGo=i(ee),E4=n(ee,"LI",{});var eSe=s(E4);spe=n(eSe,"STRONG",{});var B2t=s(spe);vGo=r(B2t,"distilbert"),B2t.forEach(t),FGo=r(eSe," \u2014 "),IV=n(eSe,"A",{href:!0});var I2t=s(IV);TGo=r(I2t,"DistilBertForMultipleChoice"),I2t.forEach(t),MGo=r(eSe," (DistilBERT model)"),eSe.forEach(t),EGo=i(ee),C4=n(ee,"LI",{});var oSe=s(C4);lpe=n(oSe,"STRONG",{});var N2t=s(lpe);CGo=r(N2t,"electra"),N2t.forEach(t),wGo=r(oSe," \u2014 "),NV=n(oSe,"A",{href:!0});var q2t=s(NV);AGo=r(q2t,"ElectraForMultipleChoice"),q2t.forEach(t),LGo=r(oSe," (ELECTRA model)"),oSe.forEach(t),yGo=i(ee),w4=n(ee,"LI",{});var rSe=s(w4);ipe=n(rSe,"STRONG",{});var j2t=s(ipe);xGo=r(j2t,"flaubert"),j2t.forEach(t),$Go=r(rSe," \u2014 "),qV=n(rSe,"A",{href:!0});var D2t=s(qV);kGo=r(D2t,"FlaubertForMultipleChoice"),D2t.forEach(t),SGo=r(rSe," (FlauBERT model)"),rSe.forEach(t),RGo=i(ee),A4=n(ee,"LI",{});var tSe=s(A4);dpe=n(tSe,"STRONG",{});var G2t=s(dpe);PGo=r(G2t,"fnet"),G2t.forEach(t),BGo=r(tSe," \u2014 "),jV=n(tSe,"A",{href:!0});var O2t=s(jV);IGo=r(O2t,"FNetForMultipleChoice"),O2t.forEach(t),NGo=r(tSe," (FNet model)"),tSe.forEach(t),qGo=i(ee),L4=n(ee,"LI",{});var aSe=s(L4);cpe=n(aSe,"STRONG",{});var V2t=s(cpe);jGo=r(V2t,"funnel"),V2t.forEach(t),DGo=r(aSe," \u2014 "),DV=n(aSe,"A",{href:!0});var X2t=s(DV);GGo=r(X2t,"FunnelForMultipleChoice"),X2t.forEach(t),OGo=r(aSe," (Funnel Transformer model)"),aSe.forEach(t),VGo=i(ee),y4=n(ee,"LI",{});var nSe=s(y4);fpe=n(nSe,"STRONG",{});var z2t=s(fpe);XGo=r(z2t,"ibert"),z2t.forEach(t),zGo=r(nSe," \u2014 "),GV=n(nSe,"A",{href:!0});var W2t=s(GV);WGo=r(W2t,"IBertForMultipleChoice"),W2t.forEach(t),QGo=r(nSe," (I-BERT model)"),nSe.forEach(t),HGo=i(ee),x4=n(ee,"LI",{});var sSe=s(x4);mpe=n(sSe,"STRONG",{});var Q2t=s(mpe);UGo=r(Q2t,"longformer"),Q2t.forEach(t),JGo=r(sSe," \u2014 "),OV=n(sSe,"A",{href:!0});var H2t=s(OV);YGo=r(H2t,"LongformerForMultipleChoice"),H2t.forEach(t),KGo=r(sSe," (Longformer model)"),sSe.forEach(t),ZGo=i(ee),$4=n(ee,"LI",{});var lSe=s($4);gpe=n(lSe,"STRONG",{});var U2t=s(gpe);eOo=r(U2t,"megatron-bert"),U2t.forEach(t),oOo=r(lSe," \u2014 "),VV=n(lSe,"A",{href:!0});var J2t=s(VV);rOo=r(J2t,"MegatronBertForMultipleChoice"),J2t.forEach(t),tOo=r(lSe," (Megatron-BERT model)"),lSe.forEach(t),aOo=i(ee),k4=n(ee,"LI",{});var iSe=s(k4);hpe=n(iSe,"STRONG",{});var Y2t=s(hpe);nOo=r(Y2t,"mobilebert"),Y2t.forEach(t),sOo=r(iSe," \u2014 "),XV=n(iSe,"A",{href:!0});var K2t=s(XV);lOo=r(K2t,"MobileBertForMultipleChoice"),K2t.forEach(t),iOo=r(iSe," (MobileBERT model)"),iSe.forEach(t),dOo=i(ee),S4=n(ee,"LI",{});var dSe=s(S4);ppe=n(dSe,"STRONG",{});var Z2t=s(ppe);cOo=r(Z2t,"mpnet"),Z2t.forEach(t),fOo=r(dSe," \u2014 "),zV=n(dSe,"A",{href:!0});var ebt=s(zV);mOo=r(ebt,"MPNetForMultipleChoice"),ebt.forEach(t),gOo=r(dSe," (MPNet model)"),dSe.forEach(t),hOo=i(ee),R4=n(ee,"LI",{});var cSe=s(R4);upe=n(cSe,"STRONG",{});var obt=s(upe);pOo=r(obt,"nystromformer"),obt.forEach(t),uOo=r(cSe," \u2014 "),WV=n(cSe,"A",{href:!0});var rbt=s(WV);_Oo=r(rbt,"NystromformerForMultipleChoice"),rbt.forEach(t),bOo=r(cSe," (Nystr\xF6mformer model)"),cSe.forEach(t),vOo=i(ee),P4=n(ee,"LI",{});var fSe=s(P4);_pe=n(fSe,"STRONG",{});var tbt=s(_pe);FOo=r(tbt,"qdqbert"),tbt.forEach(t),TOo=r(fSe," \u2014 "),QV=n(fSe,"A",{href:!0});var abt=s(QV);MOo=r(abt,"QDQBertForMultipleChoice"),abt.forEach(t),EOo=r(fSe," (QDQBert model)"),fSe.forEach(t),COo=i(ee),B4=n(ee,"LI",{});var mSe=s(B4);bpe=n(mSe,"STRONG",{});var nbt=s(bpe);wOo=r(nbt,"rembert"),nbt.forEach(t),AOo=r(mSe," \u2014 "),HV=n(mSe,"A",{href:!0});var sbt=s(HV);LOo=r(sbt,"RemBertForMultipleChoice"),sbt.forEach(t),yOo=r(mSe," (RemBERT model)"),mSe.forEach(t),xOo=i(ee),I4=n(ee,"LI",{});var gSe=s(I4);vpe=n(gSe,"STRONG",{});var lbt=s(vpe);$Oo=r(lbt,"roberta"),lbt.forEach(t),kOo=r(gSe," \u2014 "),UV=n(gSe,"A",{href:!0});var ibt=s(UV);SOo=r(ibt,"RobertaForMultipleChoice"),ibt.forEach(t),ROo=r(gSe," (RoBERTa model)"),gSe.forEach(t),POo=i(ee),N4=n(ee,"LI",{});var hSe=s(N4);Fpe=n(hSe,"STRONG",{});var dbt=s(Fpe);BOo=r(dbt,"roformer"),dbt.forEach(t),IOo=r(hSe," \u2014 "),JV=n(hSe,"A",{href:!0});var cbt=s(JV);NOo=r(cbt,"RoFormerForMultipleChoice"),cbt.forEach(t),qOo=r(hSe," (RoFormer model)"),hSe.forEach(t),jOo=i(ee),q4=n(ee,"LI",{});var pSe=s(q4);Tpe=n(pSe,"STRONG",{});var fbt=s(Tpe);DOo=r(fbt,"squeezebert"),fbt.forEach(t),GOo=r(pSe," \u2014 "),YV=n(pSe,"A",{href:!0});var mbt=s(YV);OOo=r(mbt,"SqueezeBertForMultipleChoice"),mbt.forEach(t),VOo=r(pSe," (SqueezeBERT model)"),pSe.forEach(t),XOo=i(ee),j4=n(ee,"LI",{});var uSe=s(j4);Mpe=n(uSe,"STRONG",{});var gbt=s(Mpe);zOo=r(gbt,"xlm"),gbt.forEach(t),WOo=r(uSe," \u2014 "),KV=n(uSe,"A",{href:!0});var hbt=s(KV);QOo=r(hbt,"XLMForMultipleChoice"),hbt.forEach(t),HOo=r(uSe," (XLM model)"),uSe.forEach(t),UOo=i(ee),D4=n(ee,"LI",{});var _Se=s(D4);Epe=n(_Se,"STRONG",{});var pbt=s(Epe);JOo=r(pbt,"xlm-roberta"),pbt.forEach(t),YOo=r(_Se," \u2014 "),ZV=n(_Se,"A",{href:!0});var ubt=s(ZV);KOo=r(ubt,"XLMRobertaForMultipleChoice"),ubt.forEach(t),ZOo=r(_Se," (XLM-RoBERTa model)"),_Se.forEach(t),eVo=i(ee),G4=n(ee,"LI",{});var bSe=s(G4);Cpe=n(bSe,"STRONG",{});var _bt=s(Cpe);oVo=r(_bt,"xlm-roberta-xl"),_bt.forEach(t),rVo=r(bSe," \u2014 "),eX=n(bSe,"A",{href:!0});var bbt=s(eX);tVo=r(bbt,"XLMRobertaXLForMultipleChoice"),bbt.forEach(t),aVo=r(bSe," (XLM-RoBERTa-XL model)"),bSe.forEach(t),nVo=i(ee),O4=n(ee,"LI",{});var vSe=s(O4);wpe=n(vSe,"STRONG",{});var vbt=s(wpe);sVo=r(vbt,"xlnet"),vbt.forEach(t),lVo=r(vSe," \u2014 "),oX=n(vSe,"A",{href:!0});var Fbt=s(oX);iVo=r(Fbt,"XLNetForMultipleChoice"),Fbt.forEach(t),dVo=r(vSe," (XLNet model)"),vSe.forEach(t),cVo=i(ee),V4=n(ee,"LI",{});var FSe=s(V4);Ape=n(FSe,"STRONG",{});var Tbt=s(Ape);fVo=r(Tbt,"yoso"),Tbt.forEach(t),mVo=r(FSe," \u2014 "),rX=n(FSe,"A",{href:!0});var Mbt=s(rX);gVo=r(Mbt,"YosoForMultipleChoice"),Mbt.forEach(t),hVo=r(FSe," (YOSO model)"),FSe.forEach(t),ee.forEach(t),pVo=i(ca),X4=n(ca,"P",{});var TSe=s(X4);uVo=r(TSe,"The model is set in evaluation mode by default using "),Lpe=n(TSe,"CODE",{});var Ebt=s(Lpe);_Vo=r(Ebt,"model.eval()"),Ebt.forEach(t),bVo=r(TSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ype=n(TSe,"CODE",{});var Cbt=s(ype);vVo=r(Cbt,"model.train()"),Cbt.forEach(t),TSe.forEach(t),FVo=i(ca),T(z4.$$.fragment,ca),ca.forEach(t),ol.forEach(t),RGe=i(f),od=n(f,"H2",{class:!0});var jVe=s(od);W4=n(jVe,"A",{id:!0,class:!0,href:!0});var wbt=s(W4);xpe=n(wbt,"SPAN",{});var Abt=s(xpe);T(y7.$$.fragment,Abt),Abt.forEach(t),wbt.forEach(t),TVo=i(jVe),$pe=n(jVe,"SPAN",{});var Lbt=s($pe);MVo=r(Lbt,"AutoModelForNextSentencePrediction"),Lbt.forEach(t),jVe.forEach(t),PGe=i(f),Io=n(f,"DIV",{class:!0});var rl=s(Io);T(x7.$$.fragment,rl),EVo=i(rl),rd=n(rl,"P",{});var poe=s(rd);CVo=r(poe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),tX=n(poe,"A",{href:!0});var ybt=s(tX);wVo=r(ybt,"from_pretrained()"),ybt.forEach(t),AVo=r(poe," class method or the "),aX=n(poe,"A",{href:!0});var xbt=s(aX);LVo=r(xbt,"from_config()"),xbt.forEach(t),yVo=r(poe,` class
method.`),poe.forEach(t),xVo=i(rl),$7=n(rl,"P",{});var DVe=s($7);$Vo=r(DVe,"This class cannot be instantiated directly using "),kpe=n(DVe,"CODE",{});var $bt=s(kpe);kVo=r($bt,"__init__()"),$bt.forEach(t),SVo=r(DVe," (throws an error)."),DVe.forEach(t),RVo=i(rl),mt=n(rl,"DIV",{class:!0});var NA=s(mt);T(k7.$$.fragment,NA),PVo=i(NA),Spe=n(NA,"P",{});var kbt=s(Spe);BVo=r(kbt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),kbt.forEach(t),IVo=i(NA),td=n(NA,"P",{});var uoe=s(td);NVo=r(uoe,`Note:
Loading a model from its configuration file does `),Rpe=n(uoe,"STRONG",{});var Sbt=s(Rpe);qVo=r(Sbt,"not"),Sbt.forEach(t),jVo=r(uoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),nX=n(uoe,"A",{href:!0});var Rbt=s(nX);DVo=r(Rbt,"from_pretrained()"),Rbt.forEach(t),GVo=r(uoe," to load the model weights."),uoe.forEach(t),OVo=i(NA),T(Q4.$$.fragment,NA),NA.forEach(t),VVo=i(rl),to=n(rl,"DIV",{class:!0});var fa=s(to);T(S7.$$.fragment,fa),XVo=i(fa),Ppe=n(fa,"P",{});var Pbt=s(Ppe);zVo=r(Pbt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Pbt.forEach(t),WVo=i(fa),ja=n(fa,"P",{});var qA=s(ja);QVo=r(qA,"The model class to instantiate is selected based on the "),Bpe=n(qA,"CODE",{});var Bbt=s(Bpe);HVo=r(Bbt,"model_type"),Bbt.forEach(t),UVo=r(qA,` property of the config object (either
passed as an argument or loaded from `),Ipe=n(qA,"CODE",{});var Ibt=s(Ipe);JVo=r(Ibt,"pretrained_model_name_or_path"),Ibt.forEach(t),YVo=r(qA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Npe=n(qA,"CODE",{});var Nbt=s(Npe);KVo=r(Nbt,"pretrained_model_name_or_path"),Nbt.forEach(t),ZVo=r(qA,":"),qA.forEach(t),eXo=i(fa),Zr=n(fa,"UL",{});var tl=s(Zr);H4=n(tl,"LI",{});var MSe=s(H4);qpe=n(MSe,"STRONG",{});var qbt=s(qpe);oXo=r(qbt,"bert"),qbt.forEach(t),rXo=r(MSe," \u2014 "),sX=n(MSe,"A",{href:!0});var jbt=s(sX);tXo=r(jbt,"BertForNextSentencePrediction"),jbt.forEach(t),aXo=r(MSe," (BERT model)"),MSe.forEach(t),nXo=i(tl),U4=n(tl,"LI",{});var ESe=s(U4);jpe=n(ESe,"STRONG",{});var Dbt=s(jpe);sXo=r(Dbt,"fnet"),Dbt.forEach(t),lXo=r(ESe," \u2014 "),lX=n(ESe,"A",{href:!0});var Gbt=s(lX);iXo=r(Gbt,"FNetForNextSentencePrediction"),Gbt.forEach(t),dXo=r(ESe," (FNet model)"),ESe.forEach(t),cXo=i(tl),J4=n(tl,"LI",{});var CSe=s(J4);Dpe=n(CSe,"STRONG",{});var Obt=s(Dpe);fXo=r(Obt,"megatron-bert"),Obt.forEach(t),mXo=r(CSe," \u2014 "),iX=n(CSe,"A",{href:!0});var Vbt=s(iX);gXo=r(Vbt,"MegatronBertForNextSentencePrediction"),Vbt.forEach(t),hXo=r(CSe," (Megatron-BERT model)"),CSe.forEach(t),pXo=i(tl),Y4=n(tl,"LI",{});var wSe=s(Y4);Gpe=n(wSe,"STRONG",{});var Xbt=s(Gpe);uXo=r(Xbt,"mobilebert"),Xbt.forEach(t),_Xo=r(wSe," \u2014 "),dX=n(wSe,"A",{href:!0});var zbt=s(dX);bXo=r(zbt,"MobileBertForNextSentencePrediction"),zbt.forEach(t),vXo=r(wSe," (MobileBERT model)"),wSe.forEach(t),FXo=i(tl),K4=n(tl,"LI",{});var ASe=s(K4);Ope=n(ASe,"STRONG",{});var Wbt=s(Ope);TXo=r(Wbt,"qdqbert"),Wbt.forEach(t),MXo=r(ASe," \u2014 "),cX=n(ASe,"A",{href:!0});var Qbt=s(cX);EXo=r(Qbt,"QDQBertForNextSentencePrediction"),Qbt.forEach(t),CXo=r(ASe," (QDQBert model)"),ASe.forEach(t),tl.forEach(t),wXo=i(fa),Z4=n(fa,"P",{});var LSe=s(Z4);AXo=r(LSe,"The model is set in evaluation mode by default using "),Vpe=n(LSe,"CODE",{});var Hbt=s(Vpe);LXo=r(Hbt,"model.eval()"),Hbt.forEach(t),yXo=r(LSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xpe=n(LSe,"CODE",{});var Ubt=s(Xpe);xXo=r(Ubt,"model.train()"),Ubt.forEach(t),LSe.forEach(t),$Xo=i(fa),T(e5.$$.fragment,fa),fa.forEach(t),rl.forEach(t),BGe=i(f),ad=n(f,"H2",{class:!0});var GVe=s(ad);o5=n(GVe,"A",{id:!0,class:!0,href:!0});var Jbt=s(o5);zpe=n(Jbt,"SPAN",{});var Ybt=s(zpe);T(R7.$$.fragment,Ybt),Ybt.forEach(t),Jbt.forEach(t),kXo=i(GVe),Wpe=n(GVe,"SPAN",{});var Kbt=s(Wpe);SXo=r(Kbt,"AutoModelForTokenClassification"),Kbt.forEach(t),GVe.forEach(t),IGe=i(f),No=n(f,"DIV",{class:!0});var al=s(No);T(P7.$$.fragment,al),RXo=i(al),nd=n(al,"P",{});var _oe=s(nd);PXo=r(_oe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),fX=n(_oe,"A",{href:!0});var Zbt=s(fX);BXo=r(Zbt,"from_pretrained()"),Zbt.forEach(t),IXo=r(_oe," class method or the "),mX=n(_oe,"A",{href:!0});var e4t=s(mX);NXo=r(e4t,"from_config()"),e4t.forEach(t),qXo=r(_oe,` class
method.`),_oe.forEach(t),jXo=i(al),B7=n(al,"P",{});var OVe=s(B7);DXo=r(OVe,"This class cannot be instantiated directly using "),Qpe=n(OVe,"CODE",{});var o4t=s(Qpe);GXo=r(o4t,"__init__()"),o4t.forEach(t),OXo=r(OVe," (throws an error)."),OVe.forEach(t),VXo=i(al),gt=n(al,"DIV",{class:!0});var jA=s(gt);T(I7.$$.fragment,jA),XXo=i(jA),Hpe=n(jA,"P",{});var r4t=s(Hpe);zXo=r(r4t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),r4t.forEach(t),WXo=i(jA),sd=n(jA,"P",{});var boe=s(sd);QXo=r(boe,`Note:
Loading a model from its configuration file does `),Upe=n(boe,"STRONG",{});var t4t=s(Upe);HXo=r(t4t,"not"),t4t.forEach(t),UXo=r(boe,` load the model weights. It only affects the
model\u2019s configuration. Use `),gX=n(boe,"A",{href:!0});var a4t=s(gX);JXo=r(a4t,"from_pretrained()"),a4t.forEach(t),YXo=r(boe," to load the model weights."),boe.forEach(t),KXo=i(jA),T(r5.$$.fragment,jA),jA.forEach(t),ZXo=i(al),ao=n(al,"DIV",{class:!0});var ma=s(ao);T(N7.$$.fragment,ma),ezo=i(ma),Jpe=n(ma,"P",{});var n4t=s(Jpe);ozo=r(n4t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),n4t.forEach(t),rzo=i(ma),Da=n(ma,"P",{});var DA=s(Da);tzo=r(DA,"The model class to instantiate is selected based on the "),Ype=n(DA,"CODE",{});var s4t=s(Ype);azo=r(s4t,"model_type"),s4t.forEach(t),nzo=r(DA,` property of the config object (either
passed as an argument or loaded from `),Kpe=n(DA,"CODE",{});var l4t=s(Kpe);szo=r(l4t,"pretrained_model_name_or_path"),l4t.forEach(t),lzo=r(DA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zpe=n(DA,"CODE",{});var i4t=s(Zpe);izo=r(i4t,"pretrained_model_name_or_path"),i4t.forEach(t),dzo=r(DA,":"),DA.forEach(t),czo=i(ma),H=n(ma,"UL",{});var J=s(H);t5=n(J,"LI",{});var ySe=s(t5);eue=n(ySe,"STRONG",{});var d4t=s(eue);fzo=r(d4t,"albert"),d4t.forEach(t),mzo=r(ySe," \u2014 "),hX=n(ySe,"A",{href:!0});var c4t=s(hX);gzo=r(c4t,"AlbertForTokenClassification"),c4t.forEach(t),hzo=r(ySe," (ALBERT model)"),ySe.forEach(t),pzo=i(J),a5=n(J,"LI",{});var xSe=s(a5);oue=n(xSe,"STRONG",{});var f4t=s(oue);uzo=r(f4t,"bert"),f4t.forEach(t),_zo=r(xSe," \u2014 "),pX=n(xSe,"A",{href:!0});var m4t=s(pX);bzo=r(m4t,"BertForTokenClassification"),m4t.forEach(t),vzo=r(xSe," (BERT model)"),xSe.forEach(t),Fzo=i(J),n5=n(J,"LI",{});var $Se=s(n5);rue=n($Se,"STRONG",{});var g4t=s(rue);Tzo=r(g4t,"big_bird"),g4t.forEach(t),Mzo=r($Se," \u2014 "),uX=n($Se,"A",{href:!0});var h4t=s(uX);Ezo=r(h4t,"BigBirdForTokenClassification"),h4t.forEach(t),Czo=r($Se," (BigBird model)"),$Se.forEach(t),wzo=i(J),s5=n(J,"LI",{});var kSe=s(s5);tue=n(kSe,"STRONG",{});var p4t=s(tue);Azo=r(p4t,"bloom"),p4t.forEach(t),Lzo=r(kSe," \u2014 "),_X=n(kSe,"A",{href:!0});var u4t=s(_X);yzo=r(u4t,"BloomForTokenClassification"),u4t.forEach(t),xzo=r(kSe," (BLOOM model)"),kSe.forEach(t),$zo=i(J),l5=n(J,"LI",{});var SSe=s(l5);aue=n(SSe,"STRONG",{});var _4t=s(aue);kzo=r(_4t,"camembert"),_4t.forEach(t),Szo=r(SSe," \u2014 "),bX=n(SSe,"A",{href:!0});var b4t=s(bX);Rzo=r(b4t,"CamembertForTokenClassification"),b4t.forEach(t),Pzo=r(SSe," (CamemBERT model)"),SSe.forEach(t),Bzo=i(J),i5=n(J,"LI",{});var RSe=s(i5);nue=n(RSe,"STRONG",{});var v4t=s(nue);Izo=r(v4t,"canine"),v4t.forEach(t),Nzo=r(RSe," \u2014 "),vX=n(RSe,"A",{href:!0});var F4t=s(vX);qzo=r(F4t,"CanineForTokenClassification"),F4t.forEach(t),jzo=r(RSe," (CANINE model)"),RSe.forEach(t),Dzo=i(J),d5=n(J,"LI",{});var PSe=s(d5);sue=n(PSe,"STRONG",{});var T4t=s(sue);Gzo=r(T4t,"convbert"),T4t.forEach(t),Ozo=r(PSe," \u2014 "),FX=n(PSe,"A",{href:!0});var M4t=s(FX);Vzo=r(M4t,"ConvBertForTokenClassification"),M4t.forEach(t),Xzo=r(PSe," (ConvBERT model)"),PSe.forEach(t),zzo=i(J),c5=n(J,"LI",{});var BSe=s(c5);lue=n(BSe,"STRONG",{});var E4t=s(lue);Wzo=r(E4t,"data2vec-text"),E4t.forEach(t),Qzo=r(BSe," \u2014 "),TX=n(BSe,"A",{href:!0});var C4t=s(TX);Hzo=r(C4t,"Data2VecTextForTokenClassification"),C4t.forEach(t),Uzo=r(BSe," (Data2VecText model)"),BSe.forEach(t),Jzo=i(J),f5=n(J,"LI",{});var ISe=s(f5);iue=n(ISe,"STRONG",{});var w4t=s(iue);Yzo=r(w4t,"deberta"),w4t.forEach(t),Kzo=r(ISe," \u2014 "),MX=n(ISe,"A",{href:!0});var A4t=s(MX);Zzo=r(A4t,"DebertaForTokenClassification"),A4t.forEach(t),eWo=r(ISe," (DeBERTa model)"),ISe.forEach(t),oWo=i(J),m5=n(J,"LI",{});var NSe=s(m5);due=n(NSe,"STRONG",{});var L4t=s(due);rWo=r(L4t,"deberta-v2"),L4t.forEach(t),tWo=r(NSe," \u2014 "),EX=n(NSe,"A",{href:!0});var y4t=s(EX);aWo=r(y4t,"DebertaV2ForTokenClassification"),y4t.forEach(t),nWo=r(NSe," (DeBERTa-v2 model)"),NSe.forEach(t),sWo=i(J),g5=n(J,"LI",{});var qSe=s(g5);cue=n(qSe,"STRONG",{});var x4t=s(cue);lWo=r(x4t,"distilbert"),x4t.forEach(t),iWo=r(qSe," \u2014 "),CX=n(qSe,"A",{href:!0});var $4t=s(CX);dWo=r($4t,"DistilBertForTokenClassification"),$4t.forEach(t),cWo=r(qSe," (DistilBERT model)"),qSe.forEach(t),fWo=i(J),h5=n(J,"LI",{});var jSe=s(h5);fue=n(jSe,"STRONG",{});var k4t=s(fue);mWo=r(k4t,"electra"),k4t.forEach(t),gWo=r(jSe," \u2014 "),wX=n(jSe,"A",{href:!0});var S4t=s(wX);hWo=r(S4t,"ElectraForTokenClassification"),S4t.forEach(t),pWo=r(jSe," (ELECTRA model)"),jSe.forEach(t),uWo=i(J),p5=n(J,"LI",{});var DSe=s(p5);mue=n(DSe,"STRONG",{});var R4t=s(mue);_Wo=r(R4t,"flaubert"),R4t.forEach(t),bWo=r(DSe," \u2014 "),AX=n(DSe,"A",{href:!0});var P4t=s(AX);vWo=r(P4t,"FlaubertForTokenClassification"),P4t.forEach(t),FWo=r(DSe," (FlauBERT model)"),DSe.forEach(t),TWo=i(J),u5=n(J,"LI",{});var GSe=s(u5);gue=n(GSe,"STRONG",{});var B4t=s(gue);MWo=r(B4t,"fnet"),B4t.forEach(t),EWo=r(GSe," \u2014 "),LX=n(GSe,"A",{href:!0});var I4t=s(LX);CWo=r(I4t,"FNetForTokenClassification"),I4t.forEach(t),wWo=r(GSe," (FNet model)"),GSe.forEach(t),AWo=i(J),_5=n(J,"LI",{});var OSe=s(_5);hue=n(OSe,"STRONG",{});var N4t=s(hue);LWo=r(N4t,"funnel"),N4t.forEach(t),yWo=r(OSe," \u2014 "),yX=n(OSe,"A",{href:!0});var q4t=s(yX);xWo=r(q4t,"FunnelForTokenClassification"),q4t.forEach(t),$Wo=r(OSe," (Funnel Transformer model)"),OSe.forEach(t),kWo=i(J),b5=n(J,"LI",{});var VSe=s(b5);pue=n(VSe,"STRONG",{});var j4t=s(pue);SWo=r(j4t,"gpt2"),j4t.forEach(t),RWo=r(VSe," \u2014 "),xX=n(VSe,"A",{href:!0});var D4t=s(xX);PWo=r(D4t,"GPT2ForTokenClassification"),D4t.forEach(t),BWo=r(VSe," (OpenAI GPT-2 model)"),VSe.forEach(t),IWo=i(J),v5=n(J,"LI",{});var XSe=s(v5);uue=n(XSe,"STRONG",{});var G4t=s(uue);NWo=r(G4t,"ibert"),G4t.forEach(t),qWo=r(XSe," \u2014 "),$X=n(XSe,"A",{href:!0});var O4t=s($X);jWo=r(O4t,"IBertForTokenClassification"),O4t.forEach(t),DWo=r(XSe," (I-BERT model)"),XSe.forEach(t),GWo=i(J),F5=n(J,"LI",{});var zSe=s(F5);_ue=n(zSe,"STRONG",{});var V4t=s(_ue);OWo=r(V4t,"layoutlm"),V4t.forEach(t),VWo=r(zSe," \u2014 "),kX=n(zSe,"A",{href:!0});var X4t=s(kX);XWo=r(X4t,"LayoutLMForTokenClassification"),X4t.forEach(t),zWo=r(zSe," (LayoutLM model)"),zSe.forEach(t),WWo=i(J),T5=n(J,"LI",{});var WSe=s(T5);bue=n(WSe,"STRONG",{});var z4t=s(bue);QWo=r(z4t,"layoutlmv2"),z4t.forEach(t),HWo=r(WSe," \u2014 "),SX=n(WSe,"A",{href:!0});var W4t=s(SX);UWo=r(W4t,"LayoutLMv2ForTokenClassification"),W4t.forEach(t),JWo=r(WSe," (LayoutLMv2 model)"),WSe.forEach(t),YWo=i(J),M5=n(J,"LI",{});var QSe=s(M5);vue=n(QSe,"STRONG",{});var Q4t=s(vue);KWo=r(Q4t,"layoutlmv3"),Q4t.forEach(t),ZWo=r(QSe," \u2014 "),RX=n(QSe,"A",{href:!0});var H4t=s(RX);eQo=r(H4t,"LayoutLMv3ForTokenClassification"),H4t.forEach(t),oQo=r(QSe," (LayoutLMv3 model)"),QSe.forEach(t),rQo=i(J),E5=n(J,"LI",{});var HSe=s(E5);Fue=n(HSe,"STRONG",{});var U4t=s(Fue);tQo=r(U4t,"longformer"),U4t.forEach(t),aQo=r(HSe," \u2014 "),PX=n(HSe,"A",{href:!0});var J4t=s(PX);nQo=r(J4t,"LongformerForTokenClassification"),J4t.forEach(t),sQo=r(HSe," (Longformer model)"),HSe.forEach(t),lQo=i(J),C5=n(J,"LI",{});var USe=s(C5);Tue=n(USe,"STRONG",{});var Y4t=s(Tue);iQo=r(Y4t,"megatron-bert"),Y4t.forEach(t),dQo=r(USe," \u2014 "),BX=n(USe,"A",{href:!0});var K4t=s(BX);cQo=r(K4t,"MegatronBertForTokenClassification"),K4t.forEach(t),fQo=r(USe," (Megatron-BERT model)"),USe.forEach(t),mQo=i(J),w5=n(J,"LI",{});var JSe=s(w5);Mue=n(JSe,"STRONG",{});var Z4t=s(Mue);gQo=r(Z4t,"mobilebert"),Z4t.forEach(t),hQo=r(JSe," \u2014 "),IX=n(JSe,"A",{href:!0});var e5t=s(IX);pQo=r(e5t,"MobileBertForTokenClassification"),e5t.forEach(t),uQo=r(JSe," (MobileBERT model)"),JSe.forEach(t),_Qo=i(J),A5=n(J,"LI",{});var YSe=s(A5);Eue=n(YSe,"STRONG",{});var o5t=s(Eue);bQo=r(o5t,"mpnet"),o5t.forEach(t),vQo=r(YSe," \u2014 "),NX=n(YSe,"A",{href:!0});var r5t=s(NX);FQo=r(r5t,"MPNetForTokenClassification"),r5t.forEach(t),TQo=r(YSe," (MPNet model)"),YSe.forEach(t),MQo=i(J),L5=n(J,"LI",{});var KSe=s(L5);Cue=n(KSe,"STRONG",{});var t5t=s(Cue);EQo=r(t5t,"nystromformer"),t5t.forEach(t),CQo=r(KSe," \u2014 "),qX=n(KSe,"A",{href:!0});var a5t=s(qX);wQo=r(a5t,"NystromformerForTokenClassification"),a5t.forEach(t),AQo=r(KSe," (Nystr\xF6mformer model)"),KSe.forEach(t),LQo=i(J),y5=n(J,"LI",{});var ZSe=s(y5);wue=n(ZSe,"STRONG",{});var n5t=s(wue);yQo=r(n5t,"qdqbert"),n5t.forEach(t),xQo=r(ZSe," \u2014 "),jX=n(ZSe,"A",{href:!0});var s5t=s(jX);$Qo=r(s5t,"QDQBertForTokenClassification"),s5t.forEach(t),kQo=r(ZSe," (QDQBert model)"),ZSe.forEach(t),SQo=i(J),x5=n(J,"LI",{});var eRe=s(x5);Aue=n(eRe,"STRONG",{});var l5t=s(Aue);RQo=r(l5t,"rembert"),l5t.forEach(t),PQo=r(eRe," \u2014 "),DX=n(eRe,"A",{href:!0});var i5t=s(DX);BQo=r(i5t,"RemBertForTokenClassification"),i5t.forEach(t),IQo=r(eRe," (RemBERT model)"),eRe.forEach(t),NQo=i(J),$5=n(J,"LI",{});var oRe=s($5);Lue=n(oRe,"STRONG",{});var d5t=s(Lue);qQo=r(d5t,"roberta"),d5t.forEach(t),jQo=r(oRe," \u2014 "),GX=n(oRe,"A",{href:!0});var c5t=s(GX);DQo=r(c5t,"RobertaForTokenClassification"),c5t.forEach(t),GQo=r(oRe," (RoBERTa model)"),oRe.forEach(t),OQo=i(J),k5=n(J,"LI",{});var rRe=s(k5);yue=n(rRe,"STRONG",{});var f5t=s(yue);VQo=r(f5t,"roformer"),f5t.forEach(t),XQo=r(rRe," \u2014 "),OX=n(rRe,"A",{href:!0});var m5t=s(OX);zQo=r(m5t,"RoFormerForTokenClassification"),m5t.forEach(t),WQo=r(rRe," (RoFormer model)"),rRe.forEach(t),QQo=i(J),S5=n(J,"LI",{});var tRe=s(S5);xue=n(tRe,"STRONG",{});var g5t=s(xue);HQo=r(g5t,"squeezebert"),g5t.forEach(t),UQo=r(tRe," \u2014 "),VX=n(tRe,"A",{href:!0});var h5t=s(VX);JQo=r(h5t,"SqueezeBertForTokenClassification"),h5t.forEach(t),YQo=r(tRe," (SqueezeBERT model)"),tRe.forEach(t),KQo=i(J),R5=n(J,"LI",{});var aRe=s(R5);$ue=n(aRe,"STRONG",{});var p5t=s($ue);ZQo=r(p5t,"xlm"),p5t.forEach(t),eHo=r(aRe," \u2014 "),XX=n(aRe,"A",{href:!0});var u5t=s(XX);oHo=r(u5t,"XLMForTokenClassification"),u5t.forEach(t),rHo=r(aRe," (XLM model)"),aRe.forEach(t),tHo=i(J),P5=n(J,"LI",{});var nRe=s(P5);kue=n(nRe,"STRONG",{});var _5t=s(kue);aHo=r(_5t,"xlm-roberta"),_5t.forEach(t),nHo=r(nRe," \u2014 "),zX=n(nRe,"A",{href:!0});var b5t=s(zX);sHo=r(b5t,"XLMRobertaForTokenClassification"),b5t.forEach(t),lHo=r(nRe," (XLM-RoBERTa model)"),nRe.forEach(t),iHo=i(J),B5=n(J,"LI",{});var sRe=s(B5);Sue=n(sRe,"STRONG",{});var v5t=s(Sue);dHo=r(v5t,"xlm-roberta-xl"),v5t.forEach(t),cHo=r(sRe," \u2014 "),WX=n(sRe,"A",{href:!0});var F5t=s(WX);fHo=r(F5t,"XLMRobertaXLForTokenClassification"),F5t.forEach(t),mHo=r(sRe," (XLM-RoBERTa-XL model)"),sRe.forEach(t),gHo=i(J),I5=n(J,"LI",{});var lRe=s(I5);Rue=n(lRe,"STRONG",{});var T5t=s(Rue);hHo=r(T5t,"xlnet"),T5t.forEach(t),pHo=r(lRe," \u2014 "),QX=n(lRe,"A",{href:!0});var M5t=s(QX);uHo=r(M5t,"XLNetForTokenClassification"),M5t.forEach(t),_Ho=r(lRe," (XLNet model)"),lRe.forEach(t),bHo=i(J),N5=n(J,"LI",{});var iRe=s(N5);Pue=n(iRe,"STRONG",{});var E5t=s(Pue);vHo=r(E5t,"yoso"),E5t.forEach(t),FHo=r(iRe," \u2014 "),HX=n(iRe,"A",{href:!0});var C5t=s(HX);THo=r(C5t,"YosoForTokenClassification"),C5t.forEach(t),MHo=r(iRe," (YOSO model)"),iRe.forEach(t),J.forEach(t),EHo=i(ma),q5=n(ma,"P",{});var dRe=s(q5);CHo=r(dRe,"The model is set in evaluation mode by default using "),Bue=n(dRe,"CODE",{});var w5t=s(Bue);wHo=r(w5t,"model.eval()"),w5t.forEach(t),AHo=r(dRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Iue=n(dRe,"CODE",{});var A5t=s(Iue);LHo=r(A5t,"model.train()"),A5t.forEach(t),dRe.forEach(t),yHo=i(ma),T(j5.$$.fragment,ma),ma.forEach(t),al.forEach(t),NGe=i(f),ld=n(f,"H2",{class:!0});var VVe=s(ld);D5=n(VVe,"A",{id:!0,class:!0,href:!0});var L5t=s(D5);Nue=n(L5t,"SPAN",{});var y5t=s(Nue);T(q7.$$.fragment,y5t),y5t.forEach(t),L5t.forEach(t),xHo=i(VVe),que=n(VVe,"SPAN",{});var x5t=s(que);$Ho=r(x5t,"AutoModelForQuestionAnswering"),x5t.forEach(t),VVe.forEach(t),qGe=i(f),qo=n(f,"DIV",{class:!0});var nl=s(qo);T(j7.$$.fragment,nl),kHo=i(nl),id=n(nl,"P",{});var voe=s(id);SHo=r(voe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),UX=n(voe,"A",{href:!0});var $5t=s(UX);RHo=r($5t,"from_pretrained()"),$5t.forEach(t),PHo=r(voe," class method or the "),JX=n(voe,"A",{href:!0});var k5t=s(JX);BHo=r(k5t,"from_config()"),k5t.forEach(t),IHo=r(voe,` class
method.`),voe.forEach(t),NHo=i(nl),D7=n(nl,"P",{});var XVe=s(D7);qHo=r(XVe,"This class cannot be instantiated directly using "),jue=n(XVe,"CODE",{});var S5t=s(jue);jHo=r(S5t,"__init__()"),S5t.forEach(t),DHo=r(XVe," (throws an error)."),XVe.forEach(t),GHo=i(nl),ht=n(nl,"DIV",{class:!0});var GA=s(ht);T(G7.$$.fragment,GA),OHo=i(GA),Due=n(GA,"P",{});var R5t=s(Due);VHo=r(R5t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),R5t.forEach(t),XHo=i(GA),dd=n(GA,"P",{});var Foe=s(dd);zHo=r(Foe,`Note:
Loading a model from its configuration file does `),Gue=n(Foe,"STRONG",{});var P5t=s(Gue);WHo=r(P5t,"not"),P5t.forEach(t),QHo=r(Foe,` load the model weights. It only affects the
model\u2019s configuration. Use `),YX=n(Foe,"A",{href:!0});var B5t=s(YX);HHo=r(B5t,"from_pretrained()"),B5t.forEach(t),UHo=r(Foe," to load the model weights."),Foe.forEach(t),JHo=i(GA),T(G5.$$.fragment,GA),GA.forEach(t),YHo=i(nl),no=n(nl,"DIV",{class:!0});var ga=s(no);T(O7.$$.fragment,ga),KHo=i(ga),Oue=n(ga,"P",{});var I5t=s(Oue);ZHo=r(I5t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),I5t.forEach(t),eUo=i(ga),Ga=n(ga,"P",{});var OA=s(Ga);oUo=r(OA,"The model class to instantiate is selected based on the "),Vue=n(OA,"CODE",{});var N5t=s(Vue);rUo=r(N5t,"model_type"),N5t.forEach(t),tUo=r(OA,` property of the config object (either
passed as an argument or loaded from `),Xue=n(OA,"CODE",{});var q5t=s(Xue);aUo=r(q5t,"pretrained_model_name_or_path"),q5t.forEach(t),nUo=r(OA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zue=n(OA,"CODE",{});var j5t=s(zue);sUo=r(j5t,"pretrained_model_name_or_path"),j5t.forEach(t),lUo=r(OA,":"),OA.forEach(t),iUo=i(ga),V=n(ga,"UL",{});var X=s(V);O5=n(X,"LI",{});var cRe=s(O5);Wue=n(cRe,"STRONG",{});var D5t=s(Wue);dUo=r(D5t,"albert"),D5t.forEach(t),cUo=r(cRe," \u2014 "),KX=n(cRe,"A",{href:!0});var G5t=s(KX);fUo=r(G5t,"AlbertForQuestionAnswering"),G5t.forEach(t),mUo=r(cRe," (ALBERT model)"),cRe.forEach(t),gUo=i(X),V5=n(X,"LI",{});var fRe=s(V5);Que=n(fRe,"STRONG",{});var O5t=s(Que);hUo=r(O5t,"bart"),O5t.forEach(t),pUo=r(fRe," \u2014 "),ZX=n(fRe,"A",{href:!0});var V5t=s(ZX);uUo=r(V5t,"BartForQuestionAnswering"),V5t.forEach(t),_Uo=r(fRe," (BART model)"),fRe.forEach(t),bUo=i(X),X5=n(X,"LI",{});var mRe=s(X5);Hue=n(mRe,"STRONG",{});var X5t=s(Hue);vUo=r(X5t,"bert"),X5t.forEach(t),FUo=r(mRe," \u2014 "),ez=n(mRe,"A",{href:!0});var z5t=s(ez);TUo=r(z5t,"BertForQuestionAnswering"),z5t.forEach(t),MUo=r(mRe," (BERT model)"),mRe.forEach(t),EUo=i(X),z5=n(X,"LI",{});var gRe=s(z5);Uue=n(gRe,"STRONG",{});var W5t=s(Uue);CUo=r(W5t,"big_bird"),W5t.forEach(t),wUo=r(gRe," \u2014 "),oz=n(gRe,"A",{href:!0});var Q5t=s(oz);AUo=r(Q5t,"BigBirdForQuestionAnswering"),Q5t.forEach(t),LUo=r(gRe," (BigBird model)"),gRe.forEach(t),yUo=i(X),W5=n(X,"LI",{});var hRe=s(W5);Jue=n(hRe,"STRONG",{});var H5t=s(Jue);xUo=r(H5t,"bigbird_pegasus"),H5t.forEach(t),$Uo=r(hRe," \u2014 "),rz=n(hRe,"A",{href:!0});var U5t=s(rz);kUo=r(U5t,"BigBirdPegasusForQuestionAnswering"),U5t.forEach(t),SUo=r(hRe," (BigBird-Pegasus model)"),hRe.forEach(t),RUo=i(X),Q5=n(X,"LI",{});var pRe=s(Q5);Yue=n(pRe,"STRONG",{});var J5t=s(Yue);PUo=r(J5t,"camembert"),J5t.forEach(t),BUo=r(pRe," \u2014 "),tz=n(pRe,"A",{href:!0});var Y5t=s(tz);IUo=r(Y5t,"CamembertForQuestionAnswering"),Y5t.forEach(t),NUo=r(pRe," (CamemBERT model)"),pRe.forEach(t),qUo=i(X),H5=n(X,"LI",{});var uRe=s(H5);Kue=n(uRe,"STRONG",{});var K5t=s(Kue);jUo=r(K5t,"canine"),K5t.forEach(t),DUo=r(uRe," \u2014 "),az=n(uRe,"A",{href:!0});var Z5t=s(az);GUo=r(Z5t,"CanineForQuestionAnswering"),Z5t.forEach(t),OUo=r(uRe," (CANINE model)"),uRe.forEach(t),VUo=i(X),U5=n(X,"LI",{});var _Re=s(U5);Zue=n(_Re,"STRONG",{});var evt=s(Zue);XUo=r(evt,"convbert"),evt.forEach(t),zUo=r(_Re," \u2014 "),nz=n(_Re,"A",{href:!0});var ovt=s(nz);WUo=r(ovt,"ConvBertForQuestionAnswering"),ovt.forEach(t),QUo=r(_Re," (ConvBERT model)"),_Re.forEach(t),HUo=i(X),J5=n(X,"LI",{});var bRe=s(J5);e_e=n(bRe,"STRONG",{});var rvt=s(e_e);UUo=r(rvt,"data2vec-text"),rvt.forEach(t),JUo=r(bRe," \u2014 "),sz=n(bRe,"A",{href:!0});var tvt=s(sz);YUo=r(tvt,"Data2VecTextForQuestionAnswering"),tvt.forEach(t),KUo=r(bRe," (Data2VecText model)"),bRe.forEach(t),ZUo=i(X),Y5=n(X,"LI",{});var vRe=s(Y5);o_e=n(vRe,"STRONG",{});var avt=s(o_e);eJo=r(avt,"deberta"),avt.forEach(t),oJo=r(vRe," \u2014 "),lz=n(vRe,"A",{href:!0});var nvt=s(lz);rJo=r(nvt,"DebertaForQuestionAnswering"),nvt.forEach(t),tJo=r(vRe," (DeBERTa model)"),vRe.forEach(t),aJo=i(X),K5=n(X,"LI",{});var FRe=s(K5);r_e=n(FRe,"STRONG",{});var svt=s(r_e);nJo=r(svt,"deberta-v2"),svt.forEach(t),sJo=r(FRe," \u2014 "),iz=n(FRe,"A",{href:!0});var lvt=s(iz);lJo=r(lvt,"DebertaV2ForQuestionAnswering"),lvt.forEach(t),iJo=r(FRe," (DeBERTa-v2 model)"),FRe.forEach(t),dJo=i(X),Z5=n(X,"LI",{});var TRe=s(Z5);t_e=n(TRe,"STRONG",{});var ivt=s(t_e);cJo=r(ivt,"distilbert"),ivt.forEach(t),fJo=r(TRe," \u2014 "),dz=n(TRe,"A",{href:!0});var dvt=s(dz);mJo=r(dvt,"DistilBertForQuestionAnswering"),dvt.forEach(t),gJo=r(TRe," (DistilBERT model)"),TRe.forEach(t),hJo=i(X),ev=n(X,"LI",{});var MRe=s(ev);a_e=n(MRe,"STRONG",{});var cvt=s(a_e);pJo=r(cvt,"electra"),cvt.forEach(t),uJo=r(MRe," \u2014 "),cz=n(MRe,"A",{href:!0});var fvt=s(cz);_Jo=r(fvt,"ElectraForQuestionAnswering"),fvt.forEach(t),bJo=r(MRe," (ELECTRA model)"),MRe.forEach(t),vJo=i(X),ov=n(X,"LI",{});var ERe=s(ov);n_e=n(ERe,"STRONG",{});var mvt=s(n_e);FJo=r(mvt,"flaubert"),mvt.forEach(t),TJo=r(ERe," \u2014 "),fz=n(ERe,"A",{href:!0});var gvt=s(fz);MJo=r(gvt,"FlaubertForQuestionAnsweringSimple"),gvt.forEach(t),EJo=r(ERe," (FlauBERT model)"),ERe.forEach(t),CJo=i(X),rv=n(X,"LI",{});var CRe=s(rv);s_e=n(CRe,"STRONG",{});var hvt=s(s_e);wJo=r(hvt,"fnet"),hvt.forEach(t),AJo=r(CRe," \u2014 "),mz=n(CRe,"A",{href:!0});var pvt=s(mz);LJo=r(pvt,"FNetForQuestionAnswering"),pvt.forEach(t),yJo=r(CRe," (FNet model)"),CRe.forEach(t),xJo=i(X),tv=n(X,"LI",{});var wRe=s(tv);l_e=n(wRe,"STRONG",{});var uvt=s(l_e);$Jo=r(uvt,"funnel"),uvt.forEach(t),kJo=r(wRe," \u2014 "),gz=n(wRe,"A",{href:!0});var _vt=s(gz);SJo=r(_vt,"FunnelForQuestionAnswering"),_vt.forEach(t),RJo=r(wRe," (Funnel Transformer model)"),wRe.forEach(t),PJo=i(X),av=n(X,"LI",{});var ARe=s(av);i_e=n(ARe,"STRONG",{});var bvt=s(i_e);BJo=r(bvt,"gptj"),bvt.forEach(t),IJo=r(ARe," \u2014 "),hz=n(ARe,"A",{href:!0});var vvt=s(hz);NJo=r(vvt,"GPTJForQuestionAnswering"),vvt.forEach(t),qJo=r(ARe," (GPT-J model)"),ARe.forEach(t),jJo=i(X),nv=n(X,"LI",{});var LRe=s(nv);d_e=n(LRe,"STRONG",{});var Fvt=s(d_e);DJo=r(Fvt,"ibert"),Fvt.forEach(t),GJo=r(LRe," \u2014 "),pz=n(LRe,"A",{href:!0});var Tvt=s(pz);OJo=r(Tvt,"IBertForQuestionAnswering"),Tvt.forEach(t),VJo=r(LRe," (I-BERT model)"),LRe.forEach(t),XJo=i(X),sv=n(X,"LI",{});var yRe=s(sv);c_e=n(yRe,"STRONG",{});var Mvt=s(c_e);zJo=r(Mvt,"layoutlmv2"),Mvt.forEach(t),WJo=r(yRe," \u2014 "),uz=n(yRe,"A",{href:!0});var Evt=s(uz);QJo=r(Evt,"LayoutLMv2ForQuestionAnswering"),Evt.forEach(t),HJo=r(yRe," (LayoutLMv2 model)"),yRe.forEach(t),UJo=i(X),lv=n(X,"LI",{});var xRe=s(lv);f_e=n(xRe,"STRONG",{});var Cvt=s(f_e);JJo=r(Cvt,"layoutlmv3"),Cvt.forEach(t),YJo=r(xRe," \u2014 "),_z=n(xRe,"A",{href:!0});var wvt=s(_z);KJo=r(wvt,"LayoutLMv3ForQuestionAnswering"),wvt.forEach(t),ZJo=r(xRe," (LayoutLMv3 model)"),xRe.forEach(t),eYo=i(X),iv=n(X,"LI",{});var $Re=s(iv);m_e=n($Re,"STRONG",{});var Avt=s(m_e);oYo=r(Avt,"led"),Avt.forEach(t),rYo=r($Re," \u2014 "),bz=n($Re,"A",{href:!0});var Lvt=s(bz);tYo=r(Lvt,"LEDForQuestionAnswering"),Lvt.forEach(t),aYo=r($Re," (LED model)"),$Re.forEach(t),nYo=i(X),dv=n(X,"LI",{});var kRe=s(dv);g_e=n(kRe,"STRONG",{});var yvt=s(g_e);sYo=r(yvt,"longformer"),yvt.forEach(t),lYo=r(kRe," \u2014 "),vz=n(kRe,"A",{href:!0});var xvt=s(vz);iYo=r(xvt,"LongformerForQuestionAnswering"),xvt.forEach(t),dYo=r(kRe," (Longformer model)"),kRe.forEach(t),cYo=i(X),cv=n(X,"LI",{});var SRe=s(cv);h_e=n(SRe,"STRONG",{});var $vt=s(h_e);fYo=r($vt,"lxmert"),$vt.forEach(t),mYo=r(SRe," \u2014 "),Fz=n(SRe,"A",{href:!0});var kvt=s(Fz);gYo=r(kvt,"LxmertForQuestionAnswering"),kvt.forEach(t),hYo=r(SRe," (LXMERT model)"),SRe.forEach(t),pYo=i(X),fv=n(X,"LI",{});var RRe=s(fv);p_e=n(RRe,"STRONG",{});var Svt=s(p_e);uYo=r(Svt,"mbart"),Svt.forEach(t),_Yo=r(RRe," \u2014 "),Tz=n(RRe,"A",{href:!0});var Rvt=s(Tz);bYo=r(Rvt,"MBartForQuestionAnswering"),Rvt.forEach(t),vYo=r(RRe," (mBART model)"),RRe.forEach(t),FYo=i(X),mv=n(X,"LI",{});var PRe=s(mv);u_e=n(PRe,"STRONG",{});var Pvt=s(u_e);TYo=r(Pvt,"megatron-bert"),Pvt.forEach(t),MYo=r(PRe," \u2014 "),Mz=n(PRe,"A",{href:!0});var Bvt=s(Mz);EYo=r(Bvt,"MegatronBertForQuestionAnswering"),Bvt.forEach(t),CYo=r(PRe," (Megatron-BERT model)"),PRe.forEach(t),wYo=i(X),gv=n(X,"LI",{});var BRe=s(gv);__e=n(BRe,"STRONG",{});var Ivt=s(__e);AYo=r(Ivt,"mobilebert"),Ivt.forEach(t),LYo=r(BRe," \u2014 "),Ez=n(BRe,"A",{href:!0});var Nvt=s(Ez);yYo=r(Nvt,"MobileBertForQuestionAnswering"),Nvt.forEach(t),xYo=r(BRe," (MobileBERT model)"),BRe.forEach(t),$Yo=i(X),hv=n(X,"LI",{});var IRe=s(hv);b_e=n(IRe,"STRONG",{});var qvt=s(b_e);kYo=r(qvt,"mpnet"),qvt.forEach(t),SYo=r(IRe," \u2014 "),Cz=n(IRe,"A",{href:!0});var jvt=s(Cz);RYo=r(jvt,"MPNetForQuestionAnswering"),jvt.forEach(t),PYo=r(IRe," (MPNet model)"),IRe.forEach(t),BYo=i(X),pv=n(X,"LI",{});var NRe=s(pv);v_e=n(NRe,"STRONG",{});var Dvt=s(v_e);IYo=r(Dvt,"nystromformer"),Dvt.forEach(t),NYo=r(NRe," \u2014 "),wz=n(NRe,"A",{href:!0});var Gvt=s(wz);qYo=r(Gvt,"NystromformerForQuestionAnswering"),Gvt.forEach(t),jYo=r(NRe," (Nystr\xF6mformer model)"),NRe.forEach(t),DYo=i(X),uv=n(X,"LI",{});var qRe=s(uv);F_e=n(qRe,"STRONG",{});var Ovt=s(F_e);GYo=r(Ovt,"qdqbert"),Ovt.forEach(t),OYo=r(qRe," \u2014 "),Az=n(qRe,"A",{href:!0});var Vvt=s(Az);VYo=r(Vvt,"QDQBertForQuestionAnswering"),Vvt.forEach(t),XYo=r(qRe," (QDQBert model)"),qRe.forEach(t),zYo=i(X),_v=n(X,"LI",{});var jRe=s(_v);T_e=n(jRe,"STRONG",{});var Xvt=s(T_e);WYo=r(Xvt,"reformer"),Xvt.forEach(t),QYo=r(jRe," \u2014 "),Lz=n(jRe,"A",{href:!0});var zvt=s(Lz);HYo=r(zvt,"ReformerForQuestionAnswering"),zvt.forEach(t),UYo=r(jRe," (Reformer model)"),jRe.forEach(t),JYo=i(X),bv=n(X,"LI",{});var DRe=s(bv);M_e=n(DRe,"STRONG",{});var Wvt=s(M_e);YYo=r(Wvt,"rembert"),Wvt.forEach(t),KYo=r(DRe," \u2014 "),yz=n(DRe,"A",{href:!0});var Qvt=s(yz);ZYo=r(Qvt,"RemBertForQuestionAnswering"),Qvt.forEach(t),eKo=r(DRe," (RemBERT model)"),DRe.forEach(t),oKo=i(X),vv=n(X,"LI",{});var GRe=s(vv);E_e=n(GRe,"STRONG",{});var Hvt=s(E_e);rKo=r(Hvt,"roberta"),Hvt.forEach(t),tKo=r(GRe," \u2014 "),xz=n(GRe,"A",{href:!0});var Uvt=s(xz);aKo=r(Uvt,"RobertaForQuestionAnswering"),Uvt.forEach(t),nKo=r(GRe," (RoBERTa model)"),GRe.forEach(t),sKo=i(X),Fv=n(X,"LI",{});var ORe=s(Fv);C_e=n(ORe,"STRONG",{});var Jvt=s(C_e);lKo=r(Jvt,"roformer"),Jvt.forEach(t),iKo=r(ORe," \u2014 "),$z=n(ORe,"A",{href:!0});var Yvt=s($z);dKo=r(Yvt,"RoFormerForQuestionAnswering"),Yvt.forEach(t),cKo=r(ORe," (RoFormer model)"),ORe.forEach(t),fKo=i(X),Tv=n(X,"LI",{});var VRe=s(Tv);w_e=n(VRe,"STRONG",{});var Kvt=s(w_e);mKo=r(Kvt,"splinter"),Kvt.forEach(t),gKo=r(VRe," \u2014 "),kz=n(VRe,"A",{href:!0});var Zvt=s(kz);hKo=r(Zvt,"SplinterForQuestionAnswering"),Zvt.forEach(t),pKo=r(VRe," (Splinter model)"),VRe.forEach(t),uKo=i(X),Mv=n(X,"LI",{});var XRe=s(Mv);A_e=n(XRe,"STRONG",{});var e3t=s(A_e);_Ko=r(e3t,"squeezebert"),e3t.forEach(t),bKo=r(XRe," \u2014 "),Sz=n(XRe,"A",{href:!0});var o3t=s(Sz);vKo=r(o3t,"SqueezeBertForQuestionAnswering"),o3t.forEach(t),FKo=r(XRe," (SqueezeBERT model)"),XRe.forEach(t),TKo=i(X),Ev=n(X,"LI",{});var zRe=s(Ev);L_e=n(zRe,"STRONG",{});var r3t=s(L_e);MKo=r(r3t,"xlm"),r3t.forEach(t),EKo=r(zRe," \u2014 "),Rz=n(zRe,"A",{href:!0});var t3t=s(Rz);CKo=r(t3t,"XLMForQuestionAnsweringSimple"),t3t.forEach(t),wKo=r(zRe," (XLM model)"),zRe.forEach(t),AKo=i(X),Cv=n(X,"LI",{});var WRe=s(Cv);y_e=n(WRe,"STRONG",{});var a3t=s(y_e);LKo=r(a3t,"xlm-roberta"),a3t.forEach(t),yKo=r(WRe," \u2014 "),Pz=n(WRe,"A",{href:!0});var n3t=s(Pz);xKo=r(n3t,"XLMRobertaForQuestionAnswering"),n3t.forEach(t),$Ko=r(WRe," (XLM-RoBERTa model)"),WRe.forEach(t),kKo=i(X),wv=n(X,"LI",{});var QRe=s(wv);x_e=n(QRe,"STRONG",{});var s3t=s(x_e);SKo=r(s3t,"xlm-roberta-xl"),s3t.forEach(t),RKo=r(QRe," \u2014 "),Bz=n(QRe,"A",{href:!0});var l3t=s(Bz);PKo=r(l3t,"XLMRobertaXLForQuestionAnswering"),l3t.forEach(t),BKo=r(QRe," (XLM-RoBERTa-XL model)"),QRe.forEach(t),IKo=i(X),Av=n(X,"LI",{});var HRe=s(Av);$_e=n(HRe,"STRONG",{});var i3t=s($_e);NKo=r(i3t,"xlnet"),i3t.forEach(t),qKo=r(HRe," \u2014 "),Iz=n(HRe,"A",{href:!0});var d3t=s(Iz);jKo=r(d3t,"XLNetForQuestionAnsweringSimple"),d3t.forEach(t),DKo=r(HRe," (XLNet model)"),HRe.forEach(t),GKo=i(X),Lv=n(X,"LI",{});var URe=s(Lv);k_e=n(URe,"STRONG",{});var c3t=s(k_e);OKo=r(c3t,"yoso"),c3t.forEach(t),VKo=r(URe," \u2014 "),Nz=n(URe,"A",{href:!0});var f3t=s(Nz);XKo=r(f3t,"YosoForQuestionAnswering"),f3t.forEach(t),zKo=r(URe," (YOSO model)"),URe.forEach(t),X.forEach(t),WKo=i(ga),yv=n(ga,"P",{});var JRe=s(yv);QKo=r(JRe,"The model is set in evaluation mode by default using "),S_e=n(JRe,"CODE",{});var m3t=s(S_e);HKo=r(m3t,"model.eval()"),m3t.forEach(t),UKo=r(JRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),R_e=n(JRe,"CODE",{});var g3t=s(R_e);JKo=r(g3t,"model.train()"),g3t.forEach(t),JRe.forEach(t),YKo=i(ga),T(xv.$$.fragment,ga),ga.forEach(t),nl.forEach(t),jGe=i(f),cd=n(f,"H2",{class:!0});var zVe=s(cd);$v=n(zVe,"A",{id:!0,class:!0,href:!0});var h3t=s($v);P_e=n(h3t,"SPAN",{});var p3t=s(P_e);T(V7.$$.fragment,p3t),p3t.forEach(t),h3t.forEach(t),KKo=i(zVe),B_e=n(zVe,"SPAN",{});var u3t=s(B_e);ZKo=r(u3t,"AutoModelForTableQuestionAnswering"),u3t.forEach(t),zVe.forEach(t),DGe=i(f),jo=n(f,"DIV",{class:!0});var sl=s(jo);T(X7.$$.fragment,sl),eZo=i(sl),fd=n(sl,"P",{});var Toe=s(fd);oZo=r(Toe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),qz=n(Toe,"A",{href:!0});var _3t=s(qz);rZo=r(_3t,"from_pretrained()"),_3t.forEach(t),tZo=r(Toe," class method or the "),jz=n(Toe,"A",{href:!0});var b3t=s(jz);aZo=r(b3t,"from_config()"),b3t.forEach(t),nZo=r(Toe,` class
method.`),Toe.forEach(t),sZo=i(sl),z7=n(sl,"P",{});var WVe=s(z7);lZo=r(WVe,"This class cannot be instantiated directly using "),I_e=n(WVe,"CODE",{});var v3t=s(I_e);iZo=r(v3t,"__init__()"),v3t.forEach(t),dZo=r(WVe," (throws an error)."),WVe.forEach(t),cZo=i(sl),pt=n(sl,"DIV",{class:!0});var VA=s(pt);T(W7.$$.fragment,VA),fZo=i(VA),N_e=n(VA,"P",{});var F3t=s(N_e);mZo=r(F3t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),F3t.forEach(t),gZo=i(VA),md=n(VA,"P",{});var Moe=s(md);hZo=r(Moe,`Note:
Loading a model from its configuration file does `),q_e=n(Moe,"STRONG",{});var T3t=s(q_e);pZo=r(T3t,"not"),T3t.forEach(t),uZo=r(Moe,` load the model weights. It only affects the
model\u2019s configuration. Use `),Dz=n(Moe,"A",{href:!0});var M3t=s(Dz);_Zo=r(M3t,"from_pretrained()"),M3t.forEach(t),bZo=r(Moe," to load the model weights."),Moe.forEach(t),vZo=i(VA),T(kv.$$.fragment,VA),VA.forEach(t),FZo=i(sl),so=n(sl,"DIV",{class:!0});var ha=s(so);T(Q7.$$.fragment,ha),TZo=i(ha),j_e=n(ha,"P",{});var E3t=s(j_e);MZo=r(E3t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),E3t.forEach(t),EZo=i(ha),Oa=n(ha,"P",{});var XA=s(Oa);CZo=r(XA,"The model class to instantiate is selected based on the "),D_e=n(XA,"CODE",{});var C3t=s(D_e);wZo=r(C3t,"model_type"),C3t.forEach(t),AZo=r(XA,` property of the config object (either
passed as an argument or loaded from `),G_e=n(XA,"CODE",{});var w3t=s(G_e);LZo=r(w3t,"pretrained_model_name_or_path"),w3t.forEach(t),yZo=r(XA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O_e=n(XA,"CODE",{});var A3t=s(O_e);xZo=r(A3t,"pretrained_model_name_or_path"),A3t.forEach(t),$Zo=r(XA,":"),XA.forEach(t),kZo=i(ha),V_e=n(ha,"UL",{});var L3t=s(V_e);Sv=n(L3t,"LI",{});var YRe=s(Sv);X_e=n(YRe,"STRONG",{});var y3t=s(X_e);SZo=r(y3t,"tapas"),y3t.forEach(t),RZo=r(YRe," \u2014 "),Gz=n(YRe,"A",{href:!0});var x3t=s(Gz);PZo=r(x3t,"TapasForQuestionAnswering"),x3t.forEach(t),BZo=r(YRe," (TAPAS model)"),YRe.forEach(t),L3t.forEach(t),IZo=i(ha),Rv=n(ha,"P",{});var KRe=s(Rv);NZo=r(KRe,"The model is set in evaluation mode by default using "),z_e=n(KRe,"CODE",{});var $3t=s(z_e);qZo=r($3t,"model.eval()"),$3t.forEach(t),jZo=r(KRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),W_e=n(KRe,"CODE",{});var k3t=s(W_e);DZo=r(k3t,"model.train()"),k3t.forEach(t),KRe.forEach(t),GZo=i(ha),T(Pv.$$.fragment,ha),ha.forEach(t),sl.forEach(t),GGe=i(f),gd=n(f,"H2",{class:!0});var QVe=s(gd);Bv=n(QVe,"A",{id:!0,class:!0,href:!0});var S3t=s(Bv);Q_e=n(S3t,"SPAN",{});var R3t=s(Q_e);T(H7.$$.fragment,R3t),R3t.forEach(t),S3t.forEach(t),OZo=i(QVe),H_e=n(QVe,"SPAN",{});var P3t=s(H_e);VZo=r(P3t,"AutoModelForImageClassification"),P3t.forEach(t),QVe.forEach(t),OGe=i(f),Do=n(f,"DIV",{class:!0});var ll=s(Do);T(U7.$$.fragment,ll),XZo=i(ll),hd=n(ll,"P",{});var Eoe=s(hd);zZo=r(Eoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Oz=n(Eoe,"A",{href:!0});var B3t=s(Oz);WZo=r(B3t,"from_pretrained()"),B3t.forEach(t),QZo=r(Eoe," class method or the "),Vz=n(Eoe,"A",{href:!0});var I3t=s(Vz);HZo=r(I3t,"from_config()"),I3t.forEach(t),UZo=r(Eoe,` class
method.`),Eoe.forEach(t),JZo=i(ll),J7=n(ll,"P",{});var HVe=s(J7);YZo=r(HVe,"This class cannot be instantiated directly using "),U_e=n(HVe,"CODE",{});var N3t=s(U_e);KZo=r(N3t,"__init__()"),N3t.forEach(t),ZZo=r(HVe," (throws an error)."),HVe.forEach(t),eer=i(ll),ut=n(ll,"DIV",{class:!0});var zA=s(ut);T(Y7.$$.fragment,zA),oer=i(zA),J_e=n(zA,"P",{});var q3t=s(J_e);rer=r(q3t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),q3t.forEach(t),ter=i(zA),pd=n(zA,"P",{});var Coe=s(pd);aer=r(Coe,`Note:
Loading a model from its configuration file does `),Y_e=n(Coe,"STRONG",{});var j3t=s(Y_e);ner=r(j3t,"not"),j3t.forEach(t),ser=r(Coe,` load the model weights. It only affects the
model\u2019s configuration. Use `),Xz=n(Coe,"A",{href:!0});var D3t=s(Xz);ler=r(D3t,"from_pretrained()"),D3t.forEach(t),ier=r(Coe," to load the model weights."),Coe.forEach(t),der=i(zA),T(Iv.$$.fragment,zA),zA.forEach(t),cer=i(ll),lo=n(ll,"DIV",{class:!0});var pa=s(lo);T(K7.$$.fragment,pa),fer=i(pa),K_e=n(pa,"P",{});var G3t=s(K_e);mer=r(G3t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),G3t.forEach(t),ger=i(pa),Va=n(pa,"P",{});var WA=s(Va);her=r(WA,"The model class to instantiate is selected based on the "),Z_e=n(WA,"CODE",{});var O3t=s(Z_e);per=r(O3t,"model_type"),O3t.forEach(t),uer=r(WA,` property of the config object (either
passed as an argument or loaded from `),e1e=n(WA,"CODE",{});var V3t=s(e1e);_er=r(V3t,"pretrained_model_name_or_path"),V3t.forEach(t),ber=r(WA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o1e=n(WA,"CODE",{});var X3t=s(o1e);ver=r(X3t,"pretrained_model_name_or_path"),X3t.forEach(t),Fer=r(WA,":"),WA.forEach(t),Ter=i(pa),Fe=n(pa,"UL",{});var Me=s(Fe);Nv=n(Me,"LI",{});var ZRe=s(Nv);r1e=n(ZRe,"STRONG",{});var z3t=s(r1e);Mer=r(z3t,"beit"),z3t.forEach(t),Eer=r(ZRe," \u2014 "),zz=n(ZRe,"A",{href:!0});var W3t=s(zz);Cer=r(W3t,"BeitForImageClassification"),W3t.forEach(t),wer=r(ZRe," (BEiT model)"),ZRe.forEach(t),Aer=i(Me),qv=n(Me,"LI",{});var ePe=s(qv);t1e=n(ePe,"STRONG",{});var Q3t=s(t1e);Ler=r(Q3t,"convnext"),Q3t.forEach(t),yer=r(ePe," \u2014 "),Wz=n(ePe,"A",{href:!0});var H3t=s(Wz);xer=r(H3t,"ConvNextForImageClassification"),H3t.forEach(t),$er=r(ePe," (ConvNeXT model)"),ePe.forEach(t),ker=i(Me),jv=n(Me,"LI",{});var oPe=s(jv);a1e=n(oPe,"STRONG",{});var U3t=s(a1e);Ser=r(U3t,"cvt"),U3t.forEach(t),Rer=r(oPe," \u2014 "),Qz=n(oPe,"A",{href:!0});var J3t=s(Qz);Per=r(J3t,"CvtForImageClassification"),J3t.forEach(t),Ber=r(oPe," (CvT model)"),oPe.forEach(t),Ier=i(Me),Dv=n(Me,"LI",{});var rPe=s(Dv);n1e=n(rPe,"STRONG",{});var Y3t=s(n1e);Ner=r(Y3t,"data2vec-vision"),Y3t.forEach(t),qer=r(rPe," \u2014 "),Hz=n(rPe,"A",{href:!0});var K3t=s(Hz);jer=r(K3t,"Data2VecVisionForImageClassification"),K3t.forEach(t),Der=r(rPe," (Data2VecVision model)"),rPe.forEach(t),Ger=i(Me),Os=n(Me,"LI",{});var Xk=s(Os);s1e=n(Xk,"STRONG",{});var Z3t=s(s1e);Oer=r(Z3t,"deit"),Z3t.forEach(t),Ver=r(Xk," \u2014 "),Uz=n(Xk,"A",{href:!0});var eFt=s(Uz);Xer=r(eFt,"DeiTForImageClassification"),eFt.forEach(t),zer=r(Xk," or "),Jz=n(Xk,"A",{href:!0});var oFt=s(Jz);Wer=r(oFt,"DeiTForImageClassificationWithTeacher"),oFt.forEach(t),Qer=r(Xk," (DeiT model)"),Xk.forEach(t),Her=i(Me),Gv=n(Me,"LI",{});var tPe=s(Gv);l1e=n(tPe,"STRONG",{});var rFt=s(l1e);Uer=r(rFt,"imagegpt"),rFt.forEach(t),Jer=r(tPe," \u2014 "),Yz=n(tPe,"A",{href:!0});var tFt=s(Yz);Yer=r(tFt,"ImageGPTForImageClassification"),tFt.forEach(t),Ker=r(tPe," (ImageGPT model)"),tPe.forEach(t),Zer=i(Me),Vs=n(Me,"LI",{});var zk=s(Vs);i1e=n(zk,"STRONG",{});var aFt=s(i1e);eor=r(aFt,"levit"),aFt.forEach(t),oor=r(zk," \u2014 "),Kz=n(zk,"A",{href:!0});var nFt=s(Kz);ror=r(nFt,"LevitForImageClassification"),nFt.forEach(t),tor=r(zk," or "),Zz=n(zk,"A",{href:!0});var sFt=s(Zz);aor=r(sFt,"LevitForImageClassificationWithTeacher"),sFt.forEach(t),nor=r(zk," (LeViT model)"),zk.forEach(t),sor=i(Me),_t=n(Me,"LI",{});var Af=s(_t);d1e=n(Af,"STRONG",{});var lFt=s(d1e);lor=r(lFt,"perceiver"),lFt.forEach(t),ior=r(Af," \u2014 "),eW=n(Af,"A",{href:!0});var iFt=s(eW);dor=r(iFt,"PerceiverForImageClassificationLearned"),iFt.forEach(t),cor=r(Af," or "),oW=n(Af,"A",{href:!0});var dFt=s(oW);mor=r(dFt,"PerceiverForImageClassificationFourier"),dFt.forEach(t),gor=r(Af," or "),rW=n(Af,"A",{href:!0});var cFt=s(rW);hor=r(cFt,"PerceiverForImageClassificationConvProcessing"),cFt.forEach(t),por=r(Af," (Perceiver model)"),Af.forEach(t),uor=i(Me),Ov=n(Me,"LI",{});var aPe=s(Ov);c1e=n(aPe,"STRONG",{});var fFt=s(c1e);_or=r(fFt,"poolformer"),fFt.forEach(t),bor=r(aPe," \u2014 "),tW=n(aPe,"A",{href:!0});var mFt=s(tW);vor=r(mFt,"PoolFormerForImageClassification"),mFt.forEach(t),For=r(aPe," (PoolFormer model)"),aPe.forEach(t),Tor=i(Me),Vv=n(Me,"LI",{});var nPe=s(Vv);f1e=n(nPe,"STRONG",{});var gFt=s(f1e);Mor=r(gFt,"regnet"),gFt.forEach(t),Eor=r(nPe," \u2014 "),aW=n(nPe,"A",{href:!0});var hFt=s(aW);Cor=r(hFt,"RegNetForImageClassification"),hFt.forEach(t),wor=r(nPe," (RegNet model)"),nPe.forEach(t),Aor=i(Me),Xv=n(Me,"LI",{});var sPe=s(Xv);m1e=n(sPe,"STRONG",{});var pFt=s(m1e);Lor=r(pFt,"resnet"),pFt.forEach(t),yor=r(sPe," \u2014 "),nW=n(sPe,"A",{href:!0});var uFt=s(nW);xor=r(uFt,"ResNetForImageClassification"),uFt.forEach(t),$or=r(sPe," (ResNet model)"),sPe.forEach(t),kor=i(Me),zv=n(Me,"LI",{});var lPe=s(zv);g1e=n(lPe,"STRONG",{});var _Ft=s(g1e);Sor=r(_Ft,"segformer"),_Ft.forEach(t),Ror=r(lPe," \u2014 "),sW=n(lPe,"A",{href:!0});var bFt=s(sW);Por=r(bFt,"SegformerForImageClassification"),bFt.forEach(t),Bor=r(lPe," (SegFormer model)"),lPe.forEach(t),Ior=i(Me),Wv=n(Me,"LI",{});var iPe=s(Wv);h1e=n(iPe,"STRONG",{});var vFt=s(h1e);Nor=r(vFt,"swin"),vFt.forEach(t),qor=r(iPe," \u2014 "),lW=n(iPe,"A",{href:!0});var FFt=s(lW);jor=r(FFt,"SwinForImageClassification"),FFt.forEach(t),Dor=r(iPe," (Swin Transformer model)"),iPe.forEach(t),Gor=i(Me),Qv=n(Me,"LI",{});var dPe=s(Qv);p1e=n(dPe,"STRONG",{});var TFt=s(p1e);Oor=r(TFt,"van"),TFt.forEach(t),Vor=r(dPe," \u2014 "),iW=n(dPe,"A",{href:!0});var MFt=s(iW);Xor=r(MFt,"VanForImageClassification"),MFt.forEach(t),zor=r(dPe," (VAN model)"),dPe.forEach(t),Wor=i(Me),Hv=n(Me,"LI",{});var cPe=s(Hv);u1e=n(cPe,"STRONG",{});var EFt=s(u1e);Qor=r(EFt,"vit"),EFt.forEach(t),Hor=r(cPe," \u2014 "),dW=n(cPe,"A",{href:!0});var CFt=s(dW);Uor=r(CFt,"ViTForImageClassification"),CFt.forEach(t),Jor=r(cPe," (ViT model)"),cPe.forEach(t),Me.forEach(t),Yor=i(pa),Uv=n(pa,"P",{});var fPe=s(Uv);Kor=r(fPe,"The model is set in evaluation mode by default using "),_1e=n(fPe,"CODE",{});var wFt=s(_1e);Zor=r(wFt,"model.eval()"),wFt.forEach(t),err=r(fPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),b1e=n(fPe,"CODE",{});var AFt=s(b1e);orr=r(AFt,"model.train()"),AFt.forEach(t),fPe.forEach(t),rrr=i(pa),T(Jv.$$.fragment,pa),pa.forEach(t),ll.forEach(t),VGe=i(f),ud=n(f,"H2",{class:!0});var UVe=s(ud);Yv=n(UVe,"A",{id:!0,class:!0,href:!0});var LFt=s(Yv);v1e=n(LFt,"SPAN",{});var yFt=s(v1e);T(Z7.$$.fragment,yFt),yFt.forEach(t),LFt.forEach(t),trr=i(UVe),F1e=n(UVe,"SPAN",{});var xFt=s(F1e);arr=r(xFt,"AutoModelForVision2Seq"),xFt.forEach(t),UVe.forEach(t),XGe=i(f),Go=n(f,"DIV",{class:!0});var il=s(Go);T(e8.$$.fragment,il),nrr=i(il),_d=n(il,"P",{});var woe=s(_d);srr=r(woe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),cW=n(woe,"A",{href:!0});var $Ft=s(cW);lrr=r($Ft,"from_pretrained()"),$Ft.forEach(t),irr=r(woe," class method or the "),fW=n(woe,"A",{href:!0});var kFt=s(fW);drr=r(kFt,"from_config()"),kFt.forEach(t),crr=r(woe,` class
method.`),woe.forEach(t),frr=i(il),o8=n(il,"P",{});var JVe=s(o8);mrr=r(JVe,"This class cannot be instantiated directly using "),T1e=n(JVe,"CODE",{});var SFt=s(T1e);grr=r(SFt,"__init__()"),SFt.forEach(t),hrr=r(JVe," (throws an error)."),JVe.forEach(t),prr=i(il),bt=n(il,"DIV",{class:!0});var QA=s(bt);T(r8.$$.fragment,QA),urr=i(QA),M1e=n(QA,"P",{});var RFt=s(M1e);_rr=r(RFt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),RFt.forEach(t),brr=i(QA),bd=n(QA,"P",{});var Aoe=s(bd);vrr=r(Aoe,`Note:
Loading a model from its configuration file does `),E1e=n(Aoe,"STRONG",{});var PFt=s(E1e);Frr=r(PFt,"not"),PFt.forEach(t),Trr=r(Aoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),mW=n(Aoe,"A",{href:!0});var BFt=s(mW);Mrr=r(BFt,"from_pretrained()"),BFt.forEach(t),Err=r(Aoe," to load the model weights."),Aoe.forEach(t),Crr=i(QA),T(Kv.$$.fragment,QA),QA.forEach(t),wrr=i(il),io=n(il,"DIV",{class:!0});var ua=s(io);T(t8.$$.fragment,ua),Arr=i(ua),C1e=n(ua,"P",{});var IFt=s(C1e);Lrr=r(IFt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),IFt.forEach(t),yrr=i(ua),Xa=n(ua,"P",{});var HA=s(Xa);xrr=r(HA,"The model class to instantiate is selected based on the "),w1e=n(HA,"CODE",{});var NFt=s(w1e);$rr=r(NFt,"model_type"),NFt.forEach(t),krr=r(HA,` property of the config object (either
passed as an argument or loaded from `),A1e=n(HA,"CODE",{});var qFt=s(A1e);Srr=r(qFt,"pretrained_model_name_or_path"),qFt.forEach(t),Rrr=r(HA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L1e=n(HA,"CODE",{});var jFt=s(L1e);Prr=r(jFt,"pretrained_model_name_or_path"),jFt.forEach(t),Brr=r(HA,":"),HA.forEach(t),Irr=i(ua),y1e=n(ua,"UL",{});var DFt=s(y1e);Zv=n(DFt,"LI",{});var mPe=s(Zv);x1e=n(mPe,"STRONG",{});var GFt=s(x1e);Nrr=r(GFt,"vision-encoder-decoder"),GFt.forEach(t),qrr=r(mPe," \u2014 "),gW=n(mPe,"A",{href:!0});var OFt=s(gW);jrr=r(OFt,"VisionEncoderDecoderModel"),OFt.forEach(t),Drr=r(mPe," (Vision Encoder decoder model)"),mPe.forEach(t),DFt.forEach(t),Grr=i(ua),e3=n(ua,"P",{});var gPe=s(e3);Orr=r(gPe,"The model is set in evaluation mode by default using "),$1e=n(gPe,"CODE",{});var VFt=s($1e);Vrr=r(VFt,"model.eval()"),VFt.forEach(t),Xrr=r(gPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),k1e=n(gPe,"CODE",{});var XFt=s(k1e);zrr=r(XFt,"model.train()"),XFt.forEach(t),gPe.forEach(t),Wrr=i(ua),T(o3.$$.fragment,ua),ua.forEach(t),il.forEach(t),zGe=i(f),vd=n(f,"H2",{class:!0});var YVe=s(vd);r3=n(YVe,"A",{id:!0,class:!0,href:!0});var zFt=s(r3);S1e=n(zFt,"SPAN",{});var WFt=s(S1e);T(a8.$$.fragment,WFt),WFt.forEach(t),zFt.forEach(t),Qrr=i(YVe),R1e=n(YVe,"SPAN",{});var QFt=s(R1e);Hrr=r(QFt,"AutoModelForVisualQuestionAnswering"),QFt.forEach(t),YVe.forEach(t),WGe=i(f),Oo=n(f,"DIV",{class:!0});var dl=s(Oo);T(n8.$$.fragment,dl),Urr=i(dl),Fd=n(dl,"P",{});var Loe=s(Fd);Jrr=r(Loe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),hW=n(Loe,"A",{href:!0});var HFt=s(hW);Yrr=r(HFt,"from_pretrained()"),HFt.forEach(t),Krr=r(Loe," class method or the "),pW=n(Loe,"A",{href:!0});var UFt=s(pW);Zrr=r(UFt,"from_config()"),UFt.forEach(t),etr=r(Loe,` class
method.`),Loe.forEach(t),otr=i(dl),s8=n(dl,"P",{});var KVe=s(s8);rtr=r(KVe,"This class cannot be instantiated directly using "),P1e=n(KVe,"CODE",{});var JFt=s(P1e);ttr=r(JFt,"__init__()"),JFt.forEach(t),atr=r(KVe," (throws an error)."),KVe.forEach(t),ntr=i(dl),vt=n(dl,"DIV",{class:!0});var UA=s(vt);T(l8.$$.fragment,UA),str=i(UA),B1e=n(UA,"P",{});var YFt=s(B1e);ltr=r(YFt,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),YFt.forEach(t),itr=i(UA),Td=n(UA,"P",{});var yoe=s(Td);dtr=r(yoe,`Note:
Loading a model from its configuration file does `),I1e=n(yoe,"STRONG",{});var KFt=s(I1e);ctr=r(KFt,"not"),KFt.forEach(t),ftr=r(yoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),uW=n(yoe,"A",{href:!0});var ZFt=s(uW);mtr=r(ZFt,"from_pretrained()"),ZFt.forEach(t),gtr=r(yoe," to load the model weights."),yoe.forEach(t),htr=i(UA),T(t3.$$.fragment,UA),UA.forEach(t),ptr=i(dl),co=n(dl,"DIV",{class:!0});var _a=s(co);T(i8.$$.fragment,_a),utr=i(_a),N1e=n(_a,"P",{});var e6t=s(N1e);_tr=r(e6t,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),e6t.forEach(t),btr=i(_a),za=n(_a,"P",{});var JA=s(za);vtr=r(JA,"The model class to instantiate is selected based on the "),q1e=n(JA,"CODE",{});var o6t=s(q1e);Ftr=r(o6t,"model_type"),o6t.forEach(t),Ttr=r(JA,` property of the config object (either
passed as an argument or loaded from `),j1e=n(JA,"CODE",{});var r6t=s(j1e);Mtr=r(r6t,"pretrained_model_name_or_path"),r6t.forEach(t),Etr=r(JA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D1e=n(JA,"CODE",{});var t6t=s(D1e);Ctr=r(t6t,"pretrained_model_name_or_path"),t6t.forEach(t),wtr=r(JA,":"),JA.forEach(t),Atr=i(_a),G1e=n(_a,"UL",{});var a6t=s(G1e);a3=n(a6t,"LI",{});var hPe=s(a3);O1e=n(hPe,"STRONG",{});var n6t=s(O1e);Ltr=r(n6t,"vilt"),n6t.forEach(t),ytr=r(hPe," \u2014 "),_W=n(hPe,"A",{href:!0});var s6t=s(_W);xtr=r(s6t,"ViltForQuestionAnswering"),s6t.forEach(t),$tr=r(hPe," (ViLT model)"),hPe.forEach(t),a6t.forEach(t),ktr=i(_a),n3=n(_a,"P",{});var pPe=s(n3);Str=r(pPe,"The model is set in evaluation mode by default using "),V1e=n(pPe,"CODE",{});var l6t=s(V1e);Rtr=r(l6t,"model.eval()"),l6t.forEach(t),Ptr=r(pPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),X1e=n(pPe,"CODE",{});var i6t=s(X1e);Btr=r(i6t,"model.train()"),i6t.forEach(t),pPe.forEach(t),Itr=i(_a),T(s3.$$.fragment,_a),_a.forEach(t),dl.forEach(t),QGe=i(f),Md=n(f,"H2",{class:!0});var ZVe=s(Md);l3=n(ZVe,"A",{id:!0,class:!0,href:!0});var d6t=s(l3);z1e=n(d6t,"SPAN",{});var c6t=s(z1e);T(d8.$$.fragment,c6t),c6t.forEach(t),d6t.forEach(t),Ntr=i(ZVe),W1e=n(ZVe,"SPAN",{});var f6t=s(W1e);qtr=r(f6t,"AutoModelForAudioClassification"),f6t.forEach(t),ZVe.forEach(t),HGe=i(f),Vo=n(f,"DIV",{class:!0});var cl=s(Vo);T(c8.$$.fragment,cl),jtr=i(cl),Ed=n(cl,"P",{});var xoe=s(Ed);Dtr=r(xoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),bW=n(xoe,"A",{href:!0});var m6t=s(bW);Gtr=r(m6t,"from_pretrained()"),m6t.forEach(t),Otr=r(xoe," class method or the "),vW=n(xoe,"A",{href:!0});var g6t=s(vW);Vtr=r(g6t,"from_config()"),g6t.forEach(t),Xtr=r(xoe,` class
method.`),xoe.forEach(t),ztr=i(cl),f8=n(cl,"P",{});var eXe=s(f8);Wtr=r(eXe,"This class cannot be instantiated directly using "),Q1e=n(eXe,"CODE",{});var h6t=s(Q1e);Qtr=r(h6t,"__init__()"),h6t.forEach(t),Htr=r(eXe," (throws an error)."),eXe.forEach(t),Utr=i(cl),Ft=n(cl,"DIV",{class:!0});var YA=s(Ft);T(m8.$$.fragment,YA),Jtr=i(YA),H1e=n(YA,"P",{});var p6t=s(H1e);Ytr=r(p6t,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),p6t.forEach(t),Ktr=i(YA),Cd=n(YA,"P",{});var $oe=s(Cd);Ztr=r($oe,`Note:
Loading a model from its configuration file does `),U1e=n($oe,"STRONG",{});var u6t=s(U1e);ear=r(u6t,"not"),u6t.forEach(t),oar=r($oe,` load the model weights. It only affects the
model\u2019s configuration. Use `),FW=n($oe,"A",{href:!0});var _6t=s(FW);rar=r(_6t,"from_pretrained()"),_6t.forEach(t),tar=r($oe," to load the model weights."),$oe.forEach(t),aar=i(YA),T(i3.$$.fragment,YA),YA.forEach(t),nar=i(cl),fo=n(cl,"DIV",{class:!0});var ba=s(fo);T(g8.$$.fragment,ba),sar=i(ba),J1e=n(ba,"P",{});var b6t=s(J1e);lar=r(b6t,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),b6t.forEach(t),iar=i(ba),Wa=n(ba,"P",{});var KA=s(Wa);dar=r(KA,"The model class to instantiate is selected based on the "),Y1e=n(KA,"CODE",{});var v6t=s(Y1e);car=r(v6t,"model_type"),v6t.forEach(t),far=r(KA,` property of the config object (either
passed as an argument or loaded from `),K1e=n(KA,"CODE",{});var F6t=s(K1e);mar=r(F6t,"pretrained_model_name_or_path"),F6t.forEach(t),gar=r(KA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z1e=n(KA,"CODE",{});var T6t=s(Z1e);har=r(T6t,"pretrained_model_name_or_path"),T6t.forEach(t),par=r(KA,":"),KA.forEach(t),uar=i(ba),Pe=n(ba,"UL",{});var ze=s(Pe);d3=n(ze,"LI",{});var uPe=s(d3);e2e=n(uPe,"STRONG",{});var M6t=s(e2e);_ar=r(M6t,"data2vec-audio"),M6t.forEach(t),bar=r(uPe," \u2014 "),TW=n(uPe,"A",{href:!0});var E6t=s(TW);Far=r(E6t,"Data2VecAudioForSequenceClassification"),E6t.forEach(t),Tar=r(uPe," (Data2VecAudio model)"),uPe.forEach(t),Mar=i(ze),c3=n(ze,"LI",{});var _Pe=s(c3);o2e=n(_Pe,"STRONG",{});var C6t=s(o2e);Ear=r(C6t,"hubert"),C6t.forEach(t),Car=r(_Pe," \u2014 "),MW=n(_Pe,"A",{href:!0});var w6t=s(MW);war=r(w6t,"HubertForSequenceClassification"),w6t.forEach(t),Aar=r(_Pe," (Hubert model)"),_Pe.forEach(t),Lar=i(ze),f3=n(ze,"LI",{});var bPe=s(f3);r2e=n(bPe,"STRONG",{});var A6t=s(r2e);yar=r(A6t,"sew"),A6t.forEach(t),xar=r(bPe," \u2014 "),EW=n(bPe,"A",{href:!0});var L6t=s(EW);$ar=r(L6t,"SEWForSequenceClassification"),L6t.forEach(t),kar=r(bPe," (SEW model)"),bPe.forEach(t),Sar=i(ze),m3=n(ze,"LI",{});var vPe=s(m3);t2e=n(vPe,"STRONG",{});var y6t=s(t2e);Rar=r(y6t,"sew-d"),y6t.forEach(t),Par=r(vPe," \u2014 "),CW=n(vPe,"A",{href:!0});var x6t=s(CW);Bar=r(x6t,"SEWDForSequenceClassification"),x6t.forEach(t),Iar=r(vPe," (SEW-D model)"),vPe.forEach(t),Nar=i(ze),g3=n(ze,"LI",{});var FPe=s(g3);a2e=n(FPe,"STRONG",{});var $6t=s(a2e);qar=r($6t,"unispeech"),$6t.forEach(t),jar=r(FPe," \u2014 "),wW=n(FPe,"A",{href:!0});var k6t=s(wW);Dar=r(k6t,"UniSpeechForSequenceClassification"),k6t.forEach(t),Gar=r(FPe," (UniSpeech model)"),FPe.forEach(t),Oar=i(ze),h3=n(ze,"LI",{});var TPe=s(h3);n2e=n(TPe,"STRONG",{});var S6t=s(n2e);Var=r(S6t,"unispeech-sat"),S6t.forEach(t),Xar=r(TPe," \u2014 "),AW=n(TPe,"A",{href:!0});var R6t=s(AW);zar=r(R6t,"UniSpeechSatForSequenceClassification"),R6t.forEach(t),War=r(TPe," (UniSpeechSat model)"),TPe.forEach(t),Qar=i(ze),p3=n(ze,"LI",{});var MPe=s(p3);s2e=n(MPe,"STRONG",{});var P6t=s(s2e);Har=r(P6t,"wav2vec2"),P6t.forEach(t),Uar=r(MPe," \u2014 "),LW=n(MPe,"A",{href:!0});var B6t=s(LW);Jar=r(B6t,"Wav2Vec2ForSequenceClassification"),B6t.forEach(t),Yar=r(MPe," (Wav2Vec2 model)"),MPe.forEach(t),Kar=i(ze),u3=n(ze,"LI",{});var EPe=s(u3);l2e=n(EPe,"STRONG",{});var I6t=s(l2e);Zar=r(I6t,"wav2vec2-conformer"),I6t.forEach(t),enr=r(EPe," \u2014 "),yW=n(EPe,"A",{href:!0});var N6t=s(yW);onr=r(N6t,"Wav2Vec2ConformerForSequenceClassification"),N6t.forEach(t),rnr=r(EPe," (Wav2Vec2-Conformer model)"),EPe.forEach(t),tnr=i(ze),_3=n(ze,"LI",{});var CPe=s(_3);i2e=n(CPe,"STRONG",{});var q6t=s(i2e);anr=r(q6t,"wavlm"),q6t.forEach(t),nnr=r(CPe," \u2014 "),xW=n(CPe,"A",{href:!0});var j6t=s(xW);snr=r(j6t,"WavLMForSequenceClassification"),j6t.forEach(t),lnr=r(CPe," (WavLM model)"),CPe.forEach(t),ze.forEach(t),inr=i(ba),b3=n(ba,"P",{});var wPe=s(b3);dnr=r(wPe,"The model is set in evaluation mode by default using "),d2e=n(wPe,"CODE",{});var D6t=s(d2e);cnr=r(D6t,"model.eval()"),D6t.forEach(t),fnr=r(wPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),c2e=n(wPe,"CODE",{});var G6t=s(c2e);mnr=r(G6t,"model.train()"),G6t.forEach(t),wPe.forEach(t),gnr=i(ba),T(v3.$$.fragment,ba),ba.forEach(t),cl.forEach(t),UGe=i(f),wd=n(f,"H2",{class:!0});var oXe=s(wd);F3=n(oXe,"A",{id:!0,class:!0,href:!0});var O6t=s(F3);f2e=n(O6t,"SPAN",{});var V6t=s(f2e);T(h8.$$.fragment,V6t),V6t.forEach(t),O6t.forEach(t),hnr=i(oXe),m2e=n(oXe,"SPAN",{});var X6t=s(m2e);pnr=r(X6t,"AutoModelForAudioFrameClassification"),X6t.forEach(t),oXe.forEach(t),JGe=i(f),Xo=n(f,"DIV",{class:!0});var fl=s(Xo);T(p8.$$.fragment,fl),unr=i(fl),Ad=n(fl,"P",{});var koe=s(Ad);_nr=r(koe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),$W=n(koe,"A",{href:!0});var z6t=s($W);bnr=r(z6t,"from_pretrained()"),z6t.forEach(t),vnr=r(koe," class method or the "),kW=n(koe,"A",{href:!0});var W6t=s(kW);Fnr=r(W6t,"from_config()"),W6t.forEach(t),Tnr=r(koe,` class
method.`),koe.forEach(t),Mnr=i(fl),u8=n(fl,"P",{});var rXe=s(u8);Enr=r(rXe,"This class cannot be instantiated directly using "),g2e=n(rXe,"CODE",{});var Q6t=s(g2e);Cnr=r(Q6t,"__init__()"),Q6t.forEach(t),wnr=r(rXe," (throws an error)."),rXe.forEach(t),Anr=i(fl),Tt=n(fl,"DIV",{class:!0});var ZA=s(Tt);T(_8.$$.fragment,ZA),Lnr=i(ZA),h2e=n(ZA,"P",{});var H6t=s(h2e);ynr=r(H6t,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),H6t.forEach(t),xnr=i(ZA),Ld=n(ZA,"P",{});var Soe=s(Ld);$nr=r(Soe,`Note:
Loading a model from its configuration file does `),p2e=n(Soe,"STRONG",{});var U6t=s(p2e);knr=r(U6t,"not"),U6t.forEach(t),Snr=r(Soe,` load the model weights. It only affects the
model\u2019s configuration. Use `),SW=n(Soe,"A",{href:!0});var J6t=s(SW);Rnr=r(J6t,"from_pretrained()"),J6t.forEach(t),Pnr=r(Soe," to load the model weights."),Soe.forEach(t),Bnr=i(ZA),T(T3.$$.fragment,ZA),ZA.forEach(t),Inr=i(fl),mo=n(fl,"DIV",{class:!0});var va=s(mo);T(b8.$$.fragment,va),Nnr=i(va),u2e=n(va,"P",{});var Y6t=s(u2e);qnr=r(Y6t,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Y6t.forEach(t),jnr=i(va),Qa=n(va,"P",{});var eL=s(Qa);Dnr=r(eL,"The model class to instantiate is selected based on the "),_2e=n(eL,"CODE",{});var K6t=s(_2e);Gnr=r(K6t,"model_type"),K6t.forEach(t),Onr=r(eL,` property of the config object (either
passed as an argument or loaded from `),b2e=n(eL,"CODE",{});var Z6t=s(b2e);Vnr=r(Z6t,"pretrained_model_name_or_path"),Z6t.forEach(t),Xnr=r(eL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v2e=n(eL,"CODE",{});var eTt=s(v2e);znr=r(eTt,"pretrained_model_name_or_path"),eTt.forEach(t),Wnr=r(eL,":"),eL.forEach(t),Qnr=i(va),et=n(va,"UL",{});var ml=s(et);M3=n(ml,"LI",{});var APe=s(M3);F2e=n(APe,"STRONG",{});var oTt=s(F2e);Hnr=r(oTt,"data2vec-audio"),oTt.forEach(t),Unr=r(APe," \u2014 "),RW=n(APe,"A",{href:!0});var rTt=s(RW);Jnr=r(rTt,"Data2VecAudioForAudioFrameClassification"),rTt.forEach(t),Ynr=r(APe," (Data2VecAudio model)"),APe.forEach(t),Knr=i(ml),E3=n(ml,"LI",{});var LPe=s(E3);T2e=n(LPe,"STRONG",{});var tTt=s(T2e);Znr=r(tTt,"unispeech-sat"),tTt.forEach(t),esr=r(LPe," \u2014 "),PW=n(LPe,"A",{href:!0});var aTt=s(PW);osr=r(aTt,"UniSpeechSatForAudioFrameClassification"),aTt.forEach(t),rsr=r(LPe," (UniSpeechSat model)"),LPe.forEach(t),tsr=i(ml),C3=n(ml,"LI",{});var yPe=s(C3);M2e=n(yPe,"STRONG",{});var nTt=s(M2e);asr=r(nTt,"wav2vec2"),nTt.forEach(t),nsr=r(yPe," \u2014 "),BW=n(yPe,"A",{href:!0});var sTt=s(BW);ssr=r(sTt,"Wav2Vec2ForAudioFrameClassification"),sTt.forEach(t),lsr=r(yPe," (Wav2Vec2 model)"),yPe.forEach(t),isr=i(ml),w3=n(ml,"LI",{});var xPe=s(w3);E2e=n(xPe,"STRONG",{});var lTt=s(E2e);dsr=r(lTt,"wav2vec2-conformer"),lTt.forEach(t),csr=r(xPe," \u2014 "),IW=n(xPe,"A",{href:!0});var iTt=s(IW);fsr=r(iTt,"Wav2Vec2ConformerForAudioFrameClassification"),iTt.forEach(t),msr=r(xPe," (Wav2Vec2-Conformer model)"),xPe.forEach(t),gsr=i(ml),A3=n(ml,"LI",{});var $Pe=s(A3);C2e=n($Pe,"STRONG",{});var dTt=s(C2e);hsr=r(dTt,"wavlm"),dTt.forEach(t),psr=r($Pe," \u2014 "),NW=n($Pe,"A",{href:!0});var cTt=s(NW);usr=r(cTt,"WavLMForAudioFrameClassification"),cTt.forEach(t),_sr=r($Pe," (WavLM model)"),$Pe.forEach(t),ml.forEach(t),bsr=i(va),L3=n(va,"P",{});var kPe=s(L3);vsr=r(kPe,"The model is set in evaluation mode by default using "),w2e=n(kPe,"CODE",{});var fTt=s(w2e);Fsr=r(fTt,"model.eval()"),fTt.forEach(t),Tsr=r(kPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),A2e=n(kPe,"CODE",{});var mTt=s(A2e);Msr=r(mTt,"model.train()"),mTt.forEach(t),kPe.forEach(t),Esr=i(va),T(y3.$$.fragment,va),va.forEach(t),fl.forEach(t),YGe=i(f),yd=n(f,"H2",{class:!0});var tXe=s(yd);x3=n(tXe,"A",{id:!0,class:!0,href:!0});var gTt=s(x3);L2e=n(gTt,"SPAN",{});var hTt=s(L2e);T(v8.$$.fragment,hTt),hTt.forEach(t),gTt.forEach(t),Csr=i(tXe),y2e=n(tXe,"SPAN",{});var pTt=s(y2e);wsr=r(pTt,"AutoModelForCTC"),pTt.forEach(t),tXe.forEach(t),KGe=i(f),zo=n(f,"DIV",{class:!0});var gl=s(zo);T(F8.$$.fragment,gl),Asr=i(gl),xd=n(gl,"P",{});var Roe=s(xd);Lsr=r(Roe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),qW=n(Roe,"A",{href:!0});var uTt=s(qW);ysr=r(uTt,"from_pretrained()"),uTt.forEach(t),xsr=r(Roe," class method or the "),jW=n(Roe,"A",{href:!0});var _Tt=s(jW);$sr=r(_Tt,"from_config()"),_Tt.forEach(t),ksr=r(Roe,` class
method.`),Roe.forEach(t),Ssr=i(gl),T8=n(gl,"P",{});var aXe=s(T8);Rsr=r(aXe,"This class cannot be instantiated directly using "),x2e=n(aXe,"CODE",{});var bTt=s(x2e);Psr=r(bTt,"__init__()"),bTt.forEach(t),Bsr=r(aXe," (throws an error)."),aXe.forEach(t),Isr=i(gl),Mt=n(gl,"DIV",{class:!0});var oL=s(Mt);T(M8.$$.fragment,oL),Nsr=i(oL),$2e=n(oL,"P",{});var vTt=s($2e);qsr=r(vTt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),vTt.forEach(t),jsr=i(oL),$d=n(oL,"P",{});var Poe=s($d);Dsr=r(Poe,`Note:
Loading a model from its configuration file does `),k2e=n(Poe,"STRONG",{});var FTt=s(k2e);Gsr=r(FTt,"not"),FTt.forEach(t),Osr=r(Poe,` load the model weights. It only affects the
model\u2019s configuration. Use `),DW=n(Poe,"A",{href:!0});var TTt=s(DW);Vsr=r(TTt,"from_pretrained()"),TTt.forEach(t),Xsr=r(Poe," to load the model weights."),Poe.forEach(t),zsr=i(oL),T($3.$$.fragment,oL),oL.forEach(t),Wsr=i(gl),go=n(gl,"DIV",{class:!0});var Fa=s(go);T(E8.$$.fragment,Fa),Qsr=i(Fa),S2e=n(Fa,"P",{});var MTt=s(S2e);Hsr=r(MTt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),MTt.forEach(t),Usr=i(Fa),Ha=n(Fa,"P",{});var rL=s(Ha);Jsr=r(rL,"The model class to instantiate is selected based on the "),R2e=n(rL,"CODE",{});var ETt=s(R2e);Ysr=r(ETt,"model_type"),ETt.forEach(t),Ksr=r(rL,` property of the config object (either
passed as an argument or loaded from `),P2e=n(rL,"CODE",{});var CTt=s(P2e);Zsr=r(CTt,"pretrained_model_name_or_path"),CTt.forEach(t),elr=r(rL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B2e=n(rL,"CODE",{});var wTt=s(B2e);olr=r(wTt,"pretrained_model_name_or_path"),wTt.forEach(t),rlr=r(rL,":"),rL.forEach(t),tlr=i(Fa),Le=n(Fa,"UL",{});var Be=s(Le);k3=n(Be,"LI",{});var SPe=s(k3);I2e=n(SPe,"STRONG",{});var ATt=s(I2e);alr=r(ATt,"data2vec-audio"),ATt.forEach(t),nlr=r(SPe," \u2014 "),GW=n(SPe,"A",{href:!0});var LTt=s(GW);slr=r(LTt,"Data2VecAudioForCTC"),LTt.forEach(t),llr=r(SPe," (Data2VecAudio model)"),SPe.forEach(t),ilr=i(Be),S3=n(Be,"LI",{});var RPe=s(S3);N2e=n(RPe,"STRONG",{});var yTt=s(N2e);dlr=r(yTt,"hubert"),yTt.forEach(t),clr=r(RPe," \u2014 "),OW=n(RPe,"A",{href:!0});var xTt=s(OW);flr=r(xTt,"HubertForCTC"),xTt.forEach(t),mlr=r(RPe," (Hubert model)"),RPe.forEach(t),glr=i(Be),R3=n(Be,"LI",{});var PPe=s(R3);q2e=n(PPe,"STRONG",{});var $Tt=s(q2e);hlr=r($Tt,"mctct"),$Tt.forEach(t),plr=r(PPe," \u2014 "),VW=n(PPe,"A",{href:!0});var kTt=s(VW);ulr=r(kTt,"MCTCTForCTC"),kTt.forEach(t),_lr=r(PPe," (M-CTC-T model)"),PPe.forEach(t),blr=i(Be),P3=n(Be,"LI",{});var BPe=s(P3);j2e=n(BPe,"STRONG",{});var STt=s(j2e);vlr=r(STt,"sew"),STt.forEach(t),Flr=r(BPe," \u2014 "),XW=n(BPe,"A",{href:!0});var RTt=s(XW);Tlr=r(RTt,"SEWForCTC"),RTt.forEach(t),Mlr=r(BPe," (SEW model)"),BPe.forEach(t),Elr=i(Be),B3=n(Be,"LI",{});var IPe=s(B3);D2e=n(IPe,"STRONG",{});var PTt=s(D2e);Clr=r(PTt,"sew-d"),PTt.forEach(t),wlr=r(IPe," \u2014 "),zW=n(IPe,"A",{href:!0});var BTt=s(zW);Alr=r(BTt,"SEWDForCTC"),BTt.forEach(t),Llr=r(IPe," (SEW-D model)"),IPe.forEach(t),ylr=i(Be),I3=n(Be,"LI",{});var NPe=s(I3);G2e=n(NPe,"STRONG",{});var ITt=s(G2e);xlr=r(ITt,"unispeech"),ITt.forEach(t),$lr=r(NPe," \u2014 "),WW=n(NPe,"A",{href:!0});var NTt=s(WW);klr=r(NTt,"UniSpeechForCTC"),NTt.forEach(t),Slr=r(NPe," (UniSpeech model)"),NPe.forEach(t),Rlr=i(Be),N3=n(Be,"LI",{});var qPe=s(N3);O2e=n(qPe,"STRONG",{});var qTt=s(O2e);Plr=r(qTt,"unispeech-sat"),qTt.forEach(t),Blr=r(qPe," \u2014 "),QW=n(qPe,"A",{href:!0});var jTt=s(QW);Ilr=r(jTt,"UniSpeechSatForCTC"),jTt.forEach(t),Nlr=r(qPe," (UniSpeechSat model)"),qPe.forEach(t),qlr=i(Be),q3=n(Be,"LI",{});var jPe=s(q3);V2e=n(jPe,"STRONG",{});var DTt=s(V2e);jlr=r(DTt,"wav2vec2"),DTt.forEach(t),Dlr=r(jPe," \u2014 "),HW=n(jPe,"A",{href:!0});var GTt=s(HW);Glr=r(GTt,"Wav2Vec2ForCTC"),GTt.forEach(t),Olr=r(jPe," (Wav2Vec2 model)"),jPe.forEach(t),Vlr=i(Be),j3=n(Be,"LI",{});var DPe=s(j3);X2e=n(DPe,"STRONG",{});var OTt=s(X2e);Xlr=r(OTt,"wav2vec2-conformer"),OTt.forEach(t),zlr=r(DPe," \u2014 "),UW=n(DPe,"A",{href:!0});var VTt=s(UW);Wlr=r(VTt,"Wav2Vec2ConformerForCTC"),VTt.forEach(t),Qlr=r(DPe," (Wav2Vec2-Conformer model)"),DPe.forEach(t),Hlr=i(Be),D3=n(Be,"LI",{});var GPe=s(D3);z2e=n(GPe,"STRONG",{});var XTt=s(z2e);Ulr=r(XTt,"wavlm"),XTt.forEach(t),Jlr=r(GPe," \u2014 "),JW=n(GPe,"A",{href:!0});var zTt=s(JW);Ylr=r(zTt,"WavLMForCTC"),zTt.forEach(t),Klr=r(GPe," (WavLM model)"),GPe.forEach(t),Be.forEach(t),Zlr=i(Fa),G3=n(Fa,"P",{});var OPe=s(G3);eir=r(OPe,"The model is set in evaluation mode by default using "),W2e=n(OPe,"CODE",{});var WTt=s(W2e);oir=r(WTt,"model.eval()"),WTt.forEach(t),rir=r(OPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Q2e=n(OPe,"CODE",{});var QTt=s(Q2e);tir=r(QTt,"model.train()"),QTt.forEach(t),OPe.forEach(t),air=i(Fa),T(O3.$$.fragment,Fa),Fa.forEach(t),gl.forEach(t),ZGe=i(f),kd=n(f,"H2",{class:!0});var nXe=s(kd);V3=n(nXe,"A",{id:!0,class:!0,href:!0});var HTt=s(V3);H2e=n(HTt,"SPAN",{});var UTt=s(H2e);T(C8.$$.fragment,UTt),UTt.forEach(t),HTt.forEach(t),nir=i(nXe),U2e=n(nXe,"SPAN",{});var JTt=s(U2e);sir=r(JTt,"AutoModelForSpeechSeq2Seq"),JTt.forEach(t),nXe.forEach(t),eOe=i(f),Wo=n(f,"DIV",{class:!0});var hl=s(Wo);T(w8.$$.fragment,hl),lir=i(hl),Sd=n(hl,"P",{});var Boe=s(Sd);iir=r(Boe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),YW=n(Boe,"A",{href:!0});var YTt=s(YW);dir=r(YTt,"from_pretrained()"),YTt.forEach(t),cir=r(Boe," class method or the "),KW=n(Boe,"A",{href:!0});var KTt=s(KW);fir=r(KTt,"from_config()"),KTt.forEach(t),mir=r(Boe,` class
method.`),Boe.forEach(t),gir=i(hl),A8=n(hl,"P",{});var sXe=s(A8);hir=r(sXe,"This class cannot be instantiated directly using "),J2e=n(sXe,"CODE",{});var ZTt=s(J2e);pir=r(ZTt,"__init__()"),ZTt.forEach(t),uir=r(sXe," (throws an error)."),sXe.forEach(t),_ir=i(hl),Et=n(hl,"DIV",{class:!0});var tL=s(Et);T(L8.$$.fragment,tL),bir=i(tL),Y2e=n(tL,"P",{});var eMt=s(Y2e);vir=r(eMt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),eMt.forEach(t),Fir=i(tL),Rd=n(tL,"P",{});var Ioe=s(Rd);Tir=r(Ioe,`Note:
Loading a model from its configuration file does `),K2e=n(Ioe,"STRONG",{});var oMt=s(K2e);Mir=r(oMt,"not"),oMt.forEach(t),Eir=r(Ioe,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZW=n(Ioe,"A",{href:!0});var rMt=s(ZW);Cir=r(rMt,"from_pretrained()"),rMt.forEach(t),wir=r(Ioe," to load the model weights."),Ioe.forEach(t),Air=i(tL),T(X3.$$.fragment,tL),tL.forEach(t),Lir=i(hl),ho=n(hl,"DIV",{class:!0});var Ta=s(ho);T(y8.$$.fragment,Ta),yir=i(Ta),Z2e=n(Ta,"P",{});var tMt=s(Z2e);xir=r(tMt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),tMt.forEach(t),$ir=i(Ta),Ua=n(Ta,"P",{});var aL=s(Ua);kir=r(aL,"The model class to instantiate is selected based on the "),ebe=n(aL,"CODE",{});var aMt=s(ebe);Sir=r(aMt,"model_type"),aMt.forEach(t),Rir=r(aL,` property of the config object (either
passed as an argument or loaded from `),obe=n(aL,"CODE",{});var nMt=s(obe);Pir=r(nMt,"pretrained_model_name_or_path"),nMt.forEach(t),Bir=r(aL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rbe=n(aL,"CODE",{});var sMt=s(rbe);Iir=r(sMt,"pretrained_model_name_or_path"),sMt.forEach(t),Nir=r(aL,":"),aL.forEach(t),qir=i(Ta),x8=n(Ta,"UL",{});var lXe=s(x8);z3=n(lXe,"LI",{});var VPe=s(z3);tbe=n(VPe,"STRONG",{});var lMt=s(tbe);jir=r(lMt,"speech-encoder-decoder"),lMt.forEach(t),Dir=r(VPe," \u2014 "),eQ=n(VPe,"A",{href:!0});var iMt=s(eQ);Gir=r(iMt,"SpeechEncoderDecoderModel"),iMt.forEach(t),Oir=r(VPe," (Speech Encoder decoder model)"),VPe.forEach(t),Vir=i(lXe),W3=n(lXe,"LI",{});var XPe=s(W3);abe=n(XPe,"STRONG",{});var dMt=s(abe);Xir=r(dMt,"speech_to_text"),dMt.forEach(t),zir=r(XPe," \u2014 "),oQ=n(XPe,"A",{href:!0});var cMt=s(oQ);Wir=r(cMt,"Speech2TextForConditionalGeneration"),cMt.forEach(t),Qir=r(XPe," (Speech2Text model)"),XPe.forEach(t),lXe.forEach(t),Hir=i(Ta),Q3=n(Ta,"P",{});var zPe=s(Q3);Uir=r(zPe,"The model is set in evaluation mode by default using "),nbe=n(zPe,"CODE",{});var fMt=s(nbe);Jir=r(fMt,"model.eval()"),fMt.forEach(t),Yir=r(zPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sbe=n(zPe,"CODE",{});var mMt=s(sbe);Kir=r(mMt,"model.train()"),mMt.forEach(t),zPe.forEach(t),Zir=i(Ta),T(H3.$$.fragment,Ta),Ta.forEach(t),hl.forEach(t),oOe=i(f),Pd=n(f,"H2",{class:!0});var iXe=s(Pd);U3=n(iXe,"A",{id:!0,class:!0,href:!0});var gMt=s(U3);lbe=n(gMt,"SPAN",{});var hMt=s(lbe);T($8.$$.fragment,hMt),hMt.forEach(t),gMt.forEach(t),edr=i(iXe),ibe=n(iXe,"SPAN",{});var pMt=s(ibe);odr=r(pMt,"AutoModelForAudioXVector"),pMt.forEach(t),iXe.forEach(t),rOe=i(f),Qo=n(f,"DIV",{class:!0});var pl=s(Qo);T(k8.$$.fragment,pl),rdr=i(pl),Bd=n(pl,"P",{});var Noe=s(Bd);tdr=r(Noe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),rQ=n(Noe,"A",{href:!0});var uMt=s(rQ);adr=r(uMt,"from_pretrained()"),uMt.forEach(t),ndr=r(Noe," class method or the "),tQ=n(Noe,"A",{href:!0});var _Mt=s(tQ);sdr=r(_Mt,"from_config()"),_Mt.forEach(t),ldr=r(Noe,` class
method.`),Noe.forEach(t),idr=i(pl),S8=n(pl,"P",{});var dXe=s(S8);ddr=r(dXe,"This class cannot be instantiated directly using "),dbe=n(dXe,"CODE",{});var bMt=s(dbe);cdr=r(bMt,"__init__()"),bMt.forEach(t),fdr=r(dXe," (throws an error)."),dXe.forEach(t),mdr=i(pl),Ct=n(pl,"DIV",{class:!0});var nL=s(Ct);T(R8.$$.fragment,nL),gdr=i(nL),cbe=n(nL,"P",{});var vMt=s(cbe);hdr=r(vMt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),vMt.forEach(t),pdr=i(nL),Id=n(nL,"P",{});var qoe=s(Id);udr=r(qoe,`Note:
Loading a model from its configuration file does `),fbe=n(qoe,"STRONG",{});var FMt=s(fbe);_dr=r(FMt,"not"),FMt.forEach(t),bdr=r(qoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),aQ=n(qoe,"A",{href:!0});var TMt=s(aQ);vdr=r(TMt,"from_pretrained()"),TMt.forEach(t),Fdr=r(qoe," to load the model weights."),qoe.forEach(t),Tdr=i(nL),T(J3.$$.fragment,nL),nL.forEach(t),Mdr=i(pl),po=n(pl,"DIV",{class:!0});var Ma=s(po);T(P8.$$.fragment,Ma),Edr=i(Ma),mbe=n(Ma,"P",{});var MMt=s(mbe);Cdr=r(MMt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),MMt.forEach(t),wdr=i(Ma),Ja=n(Ma,"P",{});var sL=s(Ja);Adr=r(sL,"The model class to instantiate is selected based on the "),gbe=n(sL,"CODE",{});var EMt=s(gbe);Ldr=r(EMt,"model_type"),EMt.forEach(t),ydr=r(sL,` property of the config object (either
passed as an argument or loaded from `),hbe=n(sL,"CODE",{});var CMt=s(hbe);xdr=r(CMt,"pretrained_model_name_or_path"),CMt.forEach(t),$dr=r(sL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pbe=n(sL,"CODE",{});var wMt=s(pbe);kdr=r(wMt,"pretrained_model_name_or_path"),wMt.forEach(t),Sdr=r(sL,":"),sL.forEach(t),Rdr=i(Ma),ot=n(Ma,"UL",{});var ul=s(ot);Y3=n(ul,"LI",{});var WPe=s(Y3);ube=n(WPe,"STRONG",{});var AMt=s(ube);Pdr=r(AMt,"data2vec-audio"),AMt.forEach(t),Bdr=r(WPe," \u2014 "),nQ=n(WPe,"A",{href:!0});var LMt=s(nQ);Idr=r(LMt,"Data2VecAudioForXVector"),LMt.forEach(t),Ndr=r(WPe," (Data2VecAudio model)"),WPe.forEach(t),qdr=i(ul),K3=n(ul,"LI",{});var QPe=s(K3);_be=n(QPe,"STRONG",{});var yMt=s(_be);jdr=r(yMt,"unispeech-sat"),yMt.forEach(t),Ddr=r(QPe," \u2014 "),sQ=n(QPe,"A",{href:!0});var xMt=s(sQ);Gdr=r(xMt,"UniSpeechSatForXVector"),xMt.forEach(t),Odr=r(QPe," (UniSpeechSat model)"),QPe.forEach(t),Vdr=i(ul),Z3=n(ul,"LI",{});var HPe=s(Z3);bbe=n(HPe,"STRONG",{});var $Mt=s(bbe);Xdr=r($Mt,"wav2vec2"),$Mt.forEach(t),zdr=r(HPe," \u2014 "),lQ=n(HPe,"A",{href:!0});var kMt=s(lQ);Wdr=r(kMt,"Wav2Vec2ForXVector"),kMt.forEach(t),Qdr=r(HPe," (Wav2Vec2 model)"),HPe.forEach(t),Hdr=i(ul),eF=n(ul,"LI",{});var UPe=s(eF);vbe=n(UPe,"STRONG",{});var SMt=s(vbe);Udr=r(SMt,"wav2vec2-conformer"),SMt.forEach(t),Jdr=r(UPe," \u2014 "),iQ=n(UPe,"A",{href:!0});var RMt=s(iQ);Ydr=r(RMt,"Wav2Vec2ConformerForXVector"),RMt.forEach(t),Kdr=r(UPe," (Wav2Vec2-Conformer model)"),UPe.forEach(t),Zdr=i(ul),oF=n(ul,"LI",{});var JPe=s(oF);Fbe=n(JPe,"STRONG",{});var PMt=s(Fbe);ecr=r(PMt,"wavlm"),PMt.forEach(t),ocr=r(JPe," \u2014 "),dQ=n(JPe,"A",{href:!0});var BMt=s(dQ);rcr=r(BMt,"WavLMForXVector"),BMt.forEach(t),tcr=r(JPe," (WavLM model)"),JPe.forEach(t),ul.forEach(t),acr=i(Ma),rF=n(Ma,"P",{});var YPe=s(rF);ncr=r(YPe,"The model is set in evaluation mode by default using "),Tbe=n(YPe,"CODE",{});var IMt=s(Tbe);scr=r(IMt,"model.eval()"),IMt.forEach(t),lcr=r(YPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mbe=n(YPe,"CODE",{});var NMt=s(Mbe);icr=r(NMt,"model.train()"),NMt.forEach(t),YPe.forEach(t),dcr=i(Ma),T(tF.$$.fragment,Ma),Ma.forEach(t),pl.forEach(t),tOe=i(f),Nd=n(f,"H2",{class:!0});var cXe=s(Nd);aF=n(cXe,"A",{id:!0,class:!0,href:!0});var qMt=s(aF);Ebe=n(qMt,"SPAN",{});var jMt=s(Ebe);T(B8.$$.fragment,jMt),jMt.forEach(t),qMt.forEach(t),ccr=i(cXe),Cbe=n(cXe,"SPAN",{});var DMt=s(Cbe);fcr=r(DMt,"AutoModelForMaskedImageModeling"),DMt.forEach(t),cXe.forEach(t),aOe=i(f),Ho=n(f,"DIV",{class:!0});var _l=s(Ho);T(I8.$$.fragment,_l),mcr=i(_l),qd=n(_l,"P",{});var joe=s(qd);gcr=r(joe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),cQ=n(joe,"A",{href:!0});var GMt=s(cQ);hcr=r(GMt,"from_pretrained()"),GMt.forEach(t),pcr=r(joe," class method or the "),fQ=n(joe,"A",{href:!0});var OMt=s(fQ);ucr=r(OMt,"from_config()"),OMt.forEach(t),_cr=r(joe,` class
method.`),joe.forEach(t),bcr=i(_l),N8=n(_l,"P",{});var fXe=s(N8);vcr=r(fXe,"This class cannot be instantiated directly using "),wbe=n(fXe,"CODE",{});var VMt=s(wbe);Fcr=r(VMt,"__init__()"),VMt.forEach(t),Tcr=r(fXe," (throws an error)."),fXe.forEach(t),Mcr=i(_l),wt=n(_l,"DIV",{class:!0});var lL=s(wt);T(q8.$$.fragment,lL),Ecr=i(lL),Abe=n(lL,"P",{});var XMt=s(Abe);Ccr=r(XMt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),XMt.forEach(t),wcr=i(lL),jd=n(lL,"P",{});var Doe=s(jd);Acr=r(Doe,`Note:
Loading a model from its configuration file does `),Lbe=n(Doe,"STRONG",{});var zMt=s(Lbe);Lcr=r(zMt,"not"),zMt.forEach(t),ycr=r(Doe,` load the model weights. It only affects the
model\u2019s configuration. Use `),mQ=n(Doe,"A",{href:!0});var WMt=s(mQ);xcr=r(WMt,"from_pretrained()"),WMt.forEach(t),$cr=r(Doe," to load the model weights."),Doe.forEach(t),kcr=i(lL),T(nF.$$.fragment,lL),lL.forEach(t),Scr=i(_l),uo=n(_l,"DIV",{class:!0});var Ea=s(uo);T(j8.$$.fragment,Ea),Rcr=i(Ea),ybe=n(Ea,"P",{});var QMt=s(ybe);Pcr=r(QMt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),QMt.forEach(t),Bcr=i(Ea),Ya=n(Ea,"P",{});var iL=s(Ya);Icr=r(iL,"The model class to instantiate is selected based on the "),xbe=n(iL,"CODE",{});var HMt=s(xbe);Ncr=r(HMt,"model_type"),HMt.forEach(t),qcr=r(iL,` property of the config object (either
passed as an argument or loaded from `),$be=n(iL,"CODE",{});var UMt=s($be);jcr=r(UMt,"pretrained_model_name_or_path"),UMt.forEach(t),Dcr=r(iL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kbe=n(iL,"CODE",{});var JMt=s(kbe);Gcr=r(JMt,"pretrained_model_name_or_path"),JMt.forEach(t),Ocr=r(iL,":"),iL.forEach(t),Vcr=i(Ea),Dd=n(Ea,"UL",{});var Goe=s(Dd);sF=n(Goe,"LI",{});var KPe=s(sF);Sbe=n(KPe,"STRONG",{});var YMt=s(Sbe);Xcr=r(YMt,"deit"),YMt.forEach(t),zcr=r(KPe," \u2014 "),gQ=n(KPe,"A",{href:!0});var KMt=s(gQ);Wcr=r(KMt,"DeiTForMaskedImageModeling"),KMt.forEach(t),Qcr=r(KPe," (DeiT model)"),KPe.forEach(t),Hcr=i(Goe),lF=n(Goe,"LI",{});var ZPe=s(lF);Rbe=n(ZPe,"STRONG",{});var ZMt=s(Rbe);Ucr=r(ZMt,"swin"),ZMt.forEach(t),Jcr=r(ZPe," \u2014 "),hQ=n(ZPe,"A",{href:!0});var eEt=s(hQ);Ycr=r(eEt,"SwinForMaskedImageModeling"),eEt.forEach(t),Kcr=r(ZPe," (Swin Transformer model)"),ZPe.forEach(t),Zcr=i(Goe),iF=n(Goe,"LI",{});var eBe=s(iF);Pbe=n(eBe,"STRONG",{});var oEt=s(Pbe);efr=r(oEt,"vit"),oEt.forEach(t),ofr=r(eBe," \u2014 "),pQ=n(eBe,"A",{href:!0});var rEt=s(pQ);rfr=r(rEt,"ViTForMaskedImageModeling"),rEt.forEach(t),tfr=r(eBe," (ViT model)"),eBe.forEach(t),Goe.forEach(t),afr=i(Ea),dF=n(Ea,"P",{});var oBe=s(dF);nfr=r(oBe,"The model is set in evaluation mode by default using "),Bbe=n(oBe,"CODE",{});var tEt=s(Bbe);sfr=r(tEt,"model.eval()"),tEt.forEach(t),lfr=r(oBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ibe=n(oBe,"CODE",{});var aEt=s(Ibe);ifr=r(aEt,"model.train()"),aEt.forEach(t),oBe.forEach(t),dfr=i(Ea),T(cF.$$.fragment,Ea),Ea.forEach(t),_l.forEach(t),nOe=i(f),Gd=n(f,"H2",{class:!0});var mXe=s(Gd);fF=n(mXe,"A",{id:!0,class:!0,href:!0});var nEt=s(fF);Nbe=n(nEt,"SPAN",{});var sEt=s(Nbe);T(D8.$$.fragment,sEt),sEt.forEach(t),nEt.forEach(t),cfr=i(mXe),qbe=n(mXe,"SPAN",{});var lEt=s(qbe);ffr=r(lEt,"AutoModelForObjectDetection"),lEt.forEach(t),mXe.forEach(t),sOe=i(f),Uo=n(f,"DIV",{class:!0});var bl=s(Uo);T(G8.$$.fragment,bl),mfr=i(bl),Od=n(bl,"P",{});var Ooe=s(Od);gfr=r(Ooe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),uQ=n(Ooe,"A",{href:!0});var iEt=s(uQ);hfr=r(iEt,"from_pretrained()"),iEt.forEach(t),pfr=r(Ooe," class method or the "),_Q=n(Ooe,"A",{href:!0});var dEt=s(_Q);ufr=r(dEt,"from_config()"),dEt.forEach(t),_fr=r(Ooe,` class
method.`),Ooe.forEach(t),bfr=i(bl),O8=n(bl,"P",{});var gXe=s(O8);vfr=r(gXe,"This class cannot be instantiated directly using "),jbe=n(gXe,"CODE",{});var cEt=s(jbe);Ffr=r(cEt,"__init__()"),cEt.forEach(t),Tfr=r(gXe," (throws an error)."),gXe.forEach(t),Mfr=i(bl),At=n(bl,"DIV",{class:!0});var dL=s(At);T(V8.$$.fragment,dL),Efr=i(dL),Dbe=n(dL,"P",{});var fEt=s(Dbe);Cfr=r(fEt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),fEt.forEach(t),wfr=i(dL),Vd=n(dL,"P",{});var Voe=s(Vd);Afr=r(Voe,`Note:
Loading a model from its configuration file does `),Gbe=n(Voe,"STRONG",{});var mEt=s(Gbe);Lfr=r(mEt,"not"),mEt.forEach(t),yfr=r(Voe,` load the model weights. It only affects the
model\u2019s configuration. Use `),bQ=n(Voe,"A",{href:!0});var gEt=s(bQ);xfr=r(gEt,"from_pretrained()"),gEt.forEach(t),$fr=r(Voe," to load the model weights."),Voe.forEach(t),kfr=i(dL),T(mF.$$.fragment,dL),dL.forEach(t),Sfr=i(bl),_o=n(bl,"DIV",{class:!0});var Ca=s(_o);T(X8.$$.fragment,Ca),Rfr=i(Ca),Obe=n(Ca,"P",{});var hEt=s(Obe);Pfr=r(hEt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),hEt.forEach(t),Bfr=i(Ca),Ka=n(Ca,"P",{});var cL=s(Ka);Ifr=r(cL,"The model class to instantiate is selected based on the "),Vbe=n(cL,"CODE",{});var pEt=s(Vbe);Nfr=r(pEt,"model_type"),pEt.forEach(t),qfr=r(cL,` property of the config object (either
passed as an argument or loaded from `),Xbe=n(cL,"CODE",{});var uEt=s(Xbe);jfr=r(uEt,"pretrained_model_name_or_path"),uEt.forEach(t),Dfr=r(cL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zbe=n(cL,"CODE",{});var _Et=s(zbe);Gfr=r(_Et,"pretrained_model_name_or_path"),_Et.forEach(t),Ofr=r(cL,":"),cL.forEach(t),Vfr=i(Ca),z8=n(Ca,"UL",{});var hXe=s(z8);gF=n(hXe,"LI",{});var rBe=s(gF);Wbe=n(rBe,"STRONG",{});var bEt=s(Wbe);Xfr=r(bEt,"detr"),bEt.forEach(t),zfr=r(rBe," \u2014 "),vQ=n(rBe,"A",{href:!0});var vEt=s(vQ);Wfr=r(vEt,"DetrForObjectDetection"),vEt.forEach(t),Qfr=r(rBe," (DETR model)"),rBe.forEach(t),Hfr=i(hXe),hF=n(hXe,"LI",{});var tBe=s(hF);Qbe=n(tBe,"STRONG",{});var FEt=s(Qbe);Ufr=r(FEt,"yolos"),FEt.forEach(t),Jfr=r(tBe," \u2014 "),FQ=n(tBe,"A",{href:!0});var TEt=s(FQ);Yfr=r(TEt,"YolosForObjectDetection"),TEt.forEach(t),Kfr=r(tBe," (YOLOS model)"),tBe.forEach(t),hXe.forEach(t),Zfr=i(Ca),pF=n(Ca,"P",{});var aBe=s(pF);emr=r(aBe,"The model is set in evaluation mode by default using "),Hbe=n(aBe,"CODE",{});var MEt=s(Hbe);omr=r(MEt,"model.eval()"),MEt.forEach(t),rmr=r(aBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ube=n(aBe,"CODE",{});var EEt=s(Ube);tmr=r(EEt,"model.train()"),EEt.forEach(t),aBe.forEach(t),amr=i(Ca),T(uF.$$.fragment,Ca),Ca.forEach(t),bl.forEach(t),lOe=i(f),Xd=n(f,"H2",{class:!0});var pXe=s(Xd);_F=n(pXe,"A",{id:!0,class:!0,href:!0});var CEt=s(_F);Jbe=n(CEt,"SPAN",{});var wEt=s(Jbe);T(W8.$$.fragment,wEt),wEt.forEach(t),CEt.forEach(t),nmr=i(pXe),Ybe=n(pXe,"SPAN",{});var AEt=s(Ybe);smr=r(AEt,"AutoModelForImageSegmentation"),AEt.forEach(t),pXe.forEach(t),iOe=i(f),Jo=n(f,"DIV",{class:!0});var vl=s(Jo);T(Q8.$$.fragment,vl),lmr=i(vl),zd=n(vl,"P",{});var Xoe=s(zd);imr=r(Xoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),TQ=n(Xoe,"A",{href:!0});var LEt=s(TQ);dmr=r(LEt,"from_pretrained()"),LEt.forEach(t),cmr=r(Xoe," class method or the "),MQ=n(Xoe,"A",{href:!0});var yEt=s(MQ);fmr=r(yEt,"from_config()"),yEt.forEach(t),mmr=r(Xoe,` class
method.`),Xoe.forEach(t),gmr=i(vl),H8=n(vl,"P",{});var uXe=s(H8);hmr=r(uXe,"This class cannot be instantiated directly using "),Kbe=n(uXe,"CODE",{});var xEt=s(Kbe);pmr=r(xEt,"__init__()"),xEt.forEach(t),umr=r(uXe," (throws an error)."),uXe.forEach(t),_mr=i(vl),Lt=n(vl,"DIV",{class:!0});var fL=s(Lt);T(U8.$$.fragment,fL),bmr=i(fL),Zbe=n(fL,"P",{});var $Et=s(Zbe);vmr=r($Et,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),$Et.forEach(t),Fmr=i(fL),Wd=n(fL,"P",{});var zoe=s(Wd);Tmr=r(zoe,`Note:
Loading a model from its configuration file does `),e4e=n(zoe,"STRONG",{});var kEt=s(e4e);Mmr=r(kEt,"not"),kEt.forEach(t),Emr=r(zoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),EQ=n(zoe,"A",{href:!0});var SEt=s(EQ);Cmr=r(SEt,"from_pretrained()"),SEt.forEach(t),wmr=r(zoe," to load the model weights."),zoe.forEach(t),Amr=i(fL),T(bF.$$.fragment,fL),fL.forEach(t),Lmr=i(vl),bo=n(vl,"DIV",{class:!0});var wa=s(bo);T(J8.$$.fragment,wa),ymr=i(wa),o4e=n(wa,"P",{});var REt=s(o4e);xmr=r(REt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),REt.forEach(t),$mr=i(wa),Za=n(wa,"P",{});var mL=s(Za);kmr=r(mL,"The model class to instantiate is selected based on the "),r4e=n(mL,"CODE",{});var PEt=s(r4e);Smr=r(PEt,"model_type"),PEt.forEach(t),Rmr=r(mL,` property of the config object (either
passed as an argument or loaded from `),t4e=n(mL,"CODE",{});var BEt=s(t4e);Pmr=r(BEt,"pretrained_model_name_or_path"),BEt.forEach(t),Bmr=r(mL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a4e=n(mL,"CODE",{});var IEt=s(a4e);Imr=r(IEt,"pretrained_model_name_or_path"),IEt.forEach(t),Nmr=r(mL,":"),mL.forEach(t),qmr=i(wa),n4e=n(wa,"UL",{});var NEt=s(n4e);vF=n(NEt,"LI",{});var nBe=s(vF);s4e=n(nBe,"STRONG",{});var qEt=s(s4e);jmr=r(qEt,"detr"),qEt.forEach(t),Dmr=r(nBe," \u2014 "),CQ=n(nBe,"A",{href:!0});var jEt=s(CQ);Gmr=r(jEt,"DetrForSegmentation"),jEt.forEach(t),Omr=r(nBe," (DETR model)"),nBe.forEach(t),NEt.forEach(t),Vmr=i(wa),FF=n(wa,"P",{});var sBe=s(FF);Xmr=r(sBe,"The model is set in evaluation mode by default using "),l4e=n(sBe,"CODE",{});var DEt=s(l4e);zmr=r(DEt,"model.eval()"),DEt.forEach(t),Wmr=r(sBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),i4e=n(sBe,"CODE",{});var GEt=s(i4e);Qmr=r(GEt,"model.train()"),GEt.forEach(t),sBe.forEach(t),Hmr=i(wa),T(TF.$$.fragment,wa),wa.forEach(t),vl.forEach(t),dOe=i(f),Qd=n(f,"H2",{class:!0});var _Xe=s(Qd);MF=n(_Xe,"A",{id:!0,class:!0,href:!0});var OEt=s(MF);d4e=n(OEt,"SPAN",{});var VEt=s(d4e);T(Y8.$$.fragment,VEt),VEt.forEach(t),OEt.forEach(t),Umr=i(_Xe),c4e=n(_Xe,"SPAN",{});var XEt=s(c4e);Jmr=r(XEt,"AutoModelForSemanticSegmentation"),XEt.forEach(t),_Xe.forEach(t),cOe=i(f),Yo=n(f,"DIV",{class:!0});var Fl=s(Yo);T(K8.$$.fragment,Fl),Ymr=i(Fl),Hd=n(Fl,"P",{});var Woe=s(Hd);Kmr=r(Woe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),wQ=n(Woe,"A",{href:!0});var zEt=s(wQ);Zmr=r(zEt,"from_pretrained()"),zEt.forEach(t),egr=r(Woe," class method or the "),AQ=n(Woe,"A",{href:!0});var WEt=s(AQ);ogr=r(WEt,"from_config()"),WEt.forEach(t),rgr=r(Woe,` class
method.`),Woe.forEach(t),tgr=i(Fl),Z8=n(Fl,"P",{});var bXe=s(Z8);agr=r(bXe,"This class cannot be instantiated directly using "),f4e=n(bXe,"CODE",{});var QEt=s(f4e);ngr=r(QEt,"__init__()"),QEt.forEach(t),sgr=r(bXe," (throws an error)."),bXe.forEach(t),lgr=i(Fl),yt=n(Fl,"DIV",{class:!0});var gL=s(yt);T(e9.$$.fragment,gL),igr=i(gL),m4e=n(gL,"P",{});var HEt=s(m4e);dgr=r(HEt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),HEt.forEach(t),cgr=i(gL),Ud=n(gL,"P",{});var Qoe=s(Ud);fgr=r(Qoe,`Note:
Loading a model from its configuration file does `),g4e=n(Qoe,"STRONG",{});var UEt=s(g4e);mgr=r(UEt,"not"),UEt.forEach(t),ggr=r(Qoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),LQ=n(Qoe,"A",{href:!0});var JEt=s(LQ);hgr=r(JEt,"from_pretrained()"),JEt.forEach(t),pgr=r(Qoe," to load the model weights."),Qoe.forEach(t),ugr=i(gL),T(EF.$$.fragment,gL),gL.forEach(t),_gr=i(Fl),vo=n(Fl,"DIV",{class:!0});var Aa=s(vo);T(o9.$$.fragment,Aa),bgr=i(Aa),h4e=n(Aa,"P",{});var YEt=s(h4e);vgr=r(YEt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),YEt.forEach(t),Fgr=i(Aa),en=n(Aa,"P",{});var hL=s(en);Tgr=r(hL,"The model class to instantiate is selected based on the "),p4e=n(hL,"CODE",{});var KEt=s(p4e);Mgr=r(KEt,"model_type"),KEt.forEach(t),Egr=r(hL,` property of the config object (either
passed as an argument or loaded from `),u4e=n(hL,"CODE",{});var ZEt=s(u4e);Cgr=r(ZEt,"pretrained_model_name_or_path"),ZEt.forEach(t),wgr=r(hL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_4e=n(hL,"CODE",{});var eCt=s(_4e);Agr=r(eCt,"pretrained_model_name_or_path"),eCt.forEach(t),Lgr=r(hL,":"),hL.forEach(t),ygr=i(Aa),on=n(Aa,"UL",{});var pL=s(on);CF=n(pL,"LI",{});var lBe=s(CF);b4e=n(lBe,"STRONG",{});var oCt=s(b4e);xgr=r(oCt,"beit"),oCt.forEach(t),$gr=r(lBe," \u2014 "),yQ=n(lBe,"A",{href:!0});var rCt=s(yQ);kgr=r(rCt,"BeitForSemanticSegmentation"),rCt.forEach(t),Sgr=r(lBe," (BEiT model)"),lBe.forEach(t),Rgr=i(pL),wF=n(pL,"LI",{});var iBe=s(wF);v4e=n(iBe,"STRONG",{});var tCt=s(v4e);Pgr=r(tCt,"data2vec-vision"),tCt.forEach(t),Bgr=r(iBe," \u2014 "),xQ=n(iBe,"A",{href:!0});var aCt=s(xQ);Igr=r(aCt,"Data2VecVisionForSemanticSegmentation"),aCt.forEach(t),Ngr=r(iBe," (Data2VecVision model)"),iBe.forEach(t),qgr=i(pL),AF=n(pL,"LI",{});var dBe=s(AF);F4e=n(dBe,"STRONG",{});var nCt=s(F4e);jgr=r(nCt,"dpt"),nCt.forEach(t),Dgr=r(dBe," \u2014 "),$Q=n(dBe,"A",{href:!0});var sCt=s($Q);Ggr=r(sCt,"DPTForSemanticSegmentation"),sCt.forEach(t),Ogr=r(dBe," (DPT model)"),dBe.forEach(t),Vgr=i(pL),LF=n(pL,"LI",{});var cBe=s(LF);T4e=n(cBe,"STRONG",{});var lCt=s(T4e);Xgr=r(lCt,"segformer"),lCt.forEach(t),zgr=r(cBe," \u2014 "),kQ=n(cBe,"A",{href:!0});var iCt=s(kQ);Wgr=r(iCt,"SegformerForSemanticSegmentation"),iCt.forEach(t),Qgr=r(cBe," (SegFormer model)"),cBe.forEach(t),pL.forEach(t),Hgr=i(Aa),yF=n(Aa,"P",{});var fBe=s(yF);Ugr=r(fBe,"The model is set in evaluation mode by default using "),M4e=n(fBe,"CODE",{});var dCt=s(M4e);Jgr=r(dCt,"model.eval()"),dCt.forEach(t),Ygr=r(fBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),E4e=n(fBe,"CODE",{});var cCt=s(E4e);Kgr=r(cCt,"model.train()"),cCt.forEach(t),fBe.forEach(t),Zgr=i(Aa),T(xF.$$.fragment,Aa),Aa.forEach(t),Fl.forEach(t),fOe=i(f),Jd=n(f,"H2",{class:!0});var vXe=s(Jd);$F=n(vXe,"A",{id:!0,class:!0,href:!0});var fCt=s($F);C4e=n(fCt,"SPAN",{});var mCt=s(C4e);T(r9.$$.fragment,mCt),mCt.forEach(t),fCt.forEach(t),ehr=i(vXe),w4e=n(vXe,"SPAN",{});var gCt=s(w4e);ohr=r(gCt,"AutoModelForInstanceSegmentation"),gCt.forEach(t),vXe.forEach(t),mOe=i(f),Ko=n(f,"DIV",{class:!0});var Tl=s(Ko);T(t9.$$.fragment,Tl),rhr=i(Tl),Yd=n(Tl,"P",{});var Hoe=s(Yd);thr=r(Hoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),SQ=n(Hoe,"A",{href:!0});var hCt=s(SQ);ahr=r(hCt,"from_pretrained()"),hCt.forEach(t),nhr=r(Hoe," class method or the "),RQ=n(Hoe,"A",{href:!0});var pCt=s(RQ);shr=r(pCt,"from_config()"),pCt.forEach(t),lhr=r(Hoe,` class
method.`),Hoe.forEach(t),ihr=i(Tl),a9=n(Tl,"P",{});var FXe=s(a9);dhr=r(FXe,"This class cannot be instantiated directly using "),A4e=n(FXe,"CODE",{});var uCt=s(A4e);chr=r(uCt,"__init__()"),uCt.forEach(t),fhr=r(FXe," (throws an error)."),FXe.forEach(t),mhr=i(Tl),xt=n(Tl,"DIV",{class:!0});var uL=s(xt);T(n9.$$.fragment,uL),ghr=i(uL),L4e=n(uL,"P",{});var _Ct=s(L4e);hhr=r(_Ct,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),_Ct.forEach(t),phr=i(uL),Kd=n(uL,"P",{});var Uoe=s(Kd);uhr=r(Uoe,`Note:
Loading a model from its configuration file does `),y4e=n(Uoe,"STRONG",{});var bCt=s(y4e);_hr=r(bCt,"not"),bCt.forEach(t),bhr=r(Uoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),PQ=n(Uoe,"A",{href:!0});var vCt=s(PQ);vhr=r(vCt,"from_pretrained()"),vCt.forEach(t),Fhr=r(Uoe," to load the model weights."),Uoe.forEach(t),Thr=i(uL),T(kF.$$.fragment,uL),uL.forEach(t),Mhr=i(Tl),Fo=n(Tl,"DIV",{class:!0});var La=s(Fo);T(s9.$$.fragment,La),Ehr=i(La),x4e=n(La,"P",{});var FCt=s(x4e);Chr=r(FCt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),FCt.forEach(t),whr=i(La),rn=n(La,"P",{});var _L=s(rn);Ahr=r(_L,"The model class to instantiate is selected based on the "),$4e=n(_L,"CODE",{});var TCt=s($4e);Lhr=r(TCt,"model_type"),TCt.forEach(t),yhr=r(_L,` property of the config object (either
passed as an argument or loaded from `),k4e=n(_L,"CODE",{});var MCt=s(k4e);xhr=r(MCt,"pretrained_model_name_or_path"),MCt.forEach(t),$hr=r(_L,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S4e=n(_L,"CODE",{});var ECt=s(S4e);khr=r(ECt,"pretrained_model_name_or_path"),ECt.forEach(t),Shr=r(_L,":"),_L.forEach(t),Rhr=i(La),R4e=n(La,"UL",{});var CCt=s(R4e);SF=n(CCt,"LI",{});var mBe=s(SF);P4e=n(mBe,"STRONG",{});var wCt=s(P4e);Phr=r(wCt,"maskformer"),wCt.forEach(t),Bhr=r(mBe," \u2014 "),BQ=n(mBe,"A",{href:!0});var ACt=s(BQ);Ihr=r(ACt,"MaskFormerForInstanceSegmentation"),ACt.forEach(t),Nhr=r(mBe," (MaskFormer model)"),mBe.forEach(t),CCt.forEach(t),qhr=i(La),RF=n(La,"P",{});var gBe=s(RF);jhr=r(gBe,"The model is set in evaluation mode by default using "),B4e=n(gBe,"CODE",{});var LCt=s(B4e);Dhr=r(LCt,"model.eval()"),LCt.forEach(t),Ghr=r(gBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),I4e=n(gBe,"CODE",{});var yCt=s(I4e);Ohr=r(yCt,"model.train()"),yCt.forEach(t),gBe.forEach(t),Vhr=i(La),T(PF.$$.fragment,La),La.forEach(t),Tl.forEach(t),gOe=i(f),Zd=n(f,"H2",{class:!0});var TXe=s(Zd);BF=n(TXe,"A",{id:!0,class:!0,href:!0});var xCt=s(BF);N4e=n(xCt,"SPAN",{});var $Ct=s(N4e);T(l9.$$.fragment,$Ct),$Ct.forEach(t),xCt.forEach(t),Xhr=i(TXe),q4e=n(TXe,"SPAN",{});var kCt=s(q4e);zhr=r(kCt,"TFAutoModel"),kCt.forEach(t),TXe.forEach(t),hOe=i(f),Zo=n(f,"DIV",{class:!0});var Ml=s(Zo);T(i9.$$.fragment,Ml),Whr=i(Ml),ec=n(Ml,"P",{});var Joe=s(ec);Qhr=r(Joe,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),IQ=n(Joe,"A",{href:!0});var SCt=s(IQ);Hhr=r(SCt,"from_pretrained()"),SCt.forEach(t),Uhr=r(Joe," class method or the "),NQ=n(Joe,"A",{href:!0});var RCt=s(NQ);Jhr=r(RCt,"from_config()"),RCt.forEach(t),Yhr=r(Joe,` class
method.`),Joe.forEach(t),Khr=i(Ml),d9=n(Ml,"P",{});var MXe=s(d9);Zhr=r(MXe,"This class cannot be instantiated directly using "),j4e=n(MXe,"CODE",{});var PCt=s(j4e);epr=r(PCt,"__init__()"),PCt.forEach(t),opr=r(MXe," (throws an error)."),MXe.forEach(t),rpr=i(Ml),$t=n(Ml,"DIV",{class:!0});var bL=s($t);T(c9.$$.fragment,bL),tpr=i(bL),D4e=n(bL,"P",{});var BCt=s(D4e);apr=r(BCt,"Instantiates one of the base model classes of the library from a configuration."),BCt.forEach(t),npr=i(bL),oc=n(bL,"P",{});var Yoe=s(oc);spr=r(Yoe,`Note:
Loading a model from its configuration file does `),G4e=n(Yoe,"STRONG",{});var ICt=s(G4e);lpr=r(ICt,"not"),ICt.forEach(t),ipr=r(Yoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),qQ=n(Yoe,"A",{href:!0});var NCt=s(qQ);dpr=r(NCt,"from_pretrained()"),NCt.forEach(t),cpr=r(Yoe," to load the model weights."),Yoe.forEach(t),fpr=i(bL),T(IF.$$.fragment,bL),bL.forEach(t),mpr=i(Ml),Lr=n(Ml,"DIV",{class:!0});var El=s(Lr);T(f9.$$.fragment,El),gpr=i(El),O4e=n(El,"P",{});var qCt=s(O4e);hpr=r(qCt,"Instantiate one of the base model classes of the library from a pretrained model."),qCt.forEach(t),ppr=i(El),tn=n(El,"P",{});var vL=s(tn);upr=r(vL,"The model class to instantiate is selected based on the "),V4e=n(vL,"CODE",{});var jCt=s(V4e);_pr=r(jCt,"model_type"),jCt.forEach(t),bpr=r(vL,` property of the config object (either
passed as an argument or loaded from `),X4e=n(vL,"CODE",{});var DCt=s(X4e);vpr=r(DCt,"pretrained_model_name_or_path"),DCt.forEach(t),Fpr=r(vL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z4e=n(vL,"CODE",{});var GCt=s(z4e);Tpr=r(GCt,"pretrained_model_name_or_path"),GCt.forEach(t),Mpr=r(vL,":"),vL.forEach(t),Epr=i(El),q=n(El,"UL",{});var D=s(q);NF=n(D,"LI",{});var hBe=s(NF);W4e=n(hBe,"STRONG",{});var OCt=s(W4e);Cpr=r(OCt,"albert"),OCt.forEach(t),wpr=r(hBe," \u2014 "),jQ=n(hBe,"A",{href:!0});var VCt=s(jQ);Apr=r(VCt,"TFAlbertModel"),VCt.forEach(t),Lpr=r(hBe," (ALBERT model)"),hBe.forEach(t),ypr=i(D),qF=n(D,"LI",{});var pBe=s(qF);Q4e=n(pBe,"STRONG",{});var XCt=s(Q4e);xpr=r(XCt,"bart"),XCt.forEach(t),$pr=r(pBe," \u2014 "),DQ=n(pBe,"A",{href:!0});var zCt=s(DQ);kpr=r(zCt,"TFBartModel"),zCt.forEach(t),Spr=r(pBe," (BART model)"),pBe.forEach(t),Rpr=i(D),jF=n(D,"LI",{});var uBe=s(jF);H4e=n(uBe,"STRONG",{});var WCt=s(H4e);Ppr=r(WCt,"bert"),WCt.forEach(t),Bpr=r(uBe," \u2014 "),GQ=n(uBe,"A",{href:!0});var QCt=s(GQ);Ipr=r(QCt,"TFBertModel"),QCt.forEach(t),Npr=r(uBe," (BERT model)"),uBe.forEach(t),qpr=i(D),DF=n(D,"LI",{});var _Be=s(DF);U4e=n(_Be,"STRONG",{});var HCt=s(U4e);jpr=r(HCt,"blenderbot"),HCt.forEach(t),Dpr=r(_Be," \u2014 "),OQ=n(_Be,"A",{href:!0});var UCt=s(OQ);Gpr=r(UCt,"TFBlenderbotModel"),UCt.forEach(t),Opr=r(_Be," (Blenderbot model)"),_Be.forEach(t),Vpr=i(D),GF=n(D,"LI",{});var bBe=s(GF);J4e=n(bBe,"STRONG",{});var JCt=s(J4e);Xpr=r(JCt,"blenderbot-small"),JCt.forEach(t),zpr=r(bBe," \u2014 "),VQ=n(bBe,"A",{href:!0});var YCt=s(VQ);Wpr=r(YCt,"TFBlenderbotSmallModel"),YCt.forEach(t),Qpr=r(bBe," (BlenderbotSmall model)"),bBe.forEach(t),Hpr=i(D),OF=n(D,"LI",{});var vBe=s(OF);Y4e=n(vBe,"STRONG",{});var KCt=s(Y4e);Upr=r(KCt,"camembert"),KCt.forEach(t),Jpr=r(vBe," \u2014 "),XQ=n(vBe,"A",{href:!0});var ZCt=s(XQ);Ypr=r(ZCt,"TFCamembertModel"),ZCt.forEach(t),Kpr=r(vBe," (CamemBERT model)"),vBe.forEach(t),Zpr=i(D),VF=n(D,"LI",{});var FBe=s(VF);K4e=n(FBe,"STRONG",{});var e0t=s(K4e);eur=r(e0t,"clip"),e0t.forEach(t),our=r(FBe," \u2014 "),zQ=n(FBe,"A",{href:!0});var o0t=s(zQ);rur=r(o0t,"TFCLIPModel"),o0t.forEach(t),tur=r(FBe," (CLIP model)"),FBe.forEach(t),aur=i(D),XF=n(D,"LI",{});var TBe=s(XF);Z4e=n(TBe,"STRONG",{});var r0t=s(Z4e);nur=r(r0t,"convbert"),r0t.forEach(t),sur=r(TBe," \u2014 "),WQ=n(TBe,"A",{href:!0});var t0t=s(WQ);lur=r(t0t,"TFConvBertModel"),t0t.forEach(t),iur=r(TBe," (ConvBERT model)"),TBe.forEach(t),dur=i(D),zF=n(D,"LI",{});var MBe=s(zF);e5e=n(MBe,"STRONG",{});var a0t=s(e5e);cur=r(a0t,"convnext"),a0t.forEach(t),fur=r(MBe," \u2014 "),QQ=n(MBe,"A",{href:!0});var n0t=s(QQ);mur=r(n0t,"TFConvNextModel"),n0t.forEach(t),gur=r(MBe," (ConvNeXT model)"),MBe.forEach(t),hur=i(D),WF=n(D,"LI",{});var EBe=s(WF);o5e=n(EBe,"STRONG",{});var s0t=s(o5e);pur=r(s0t,"ctrl"),s0t.forEach(t),uur=r(EBe," \u2014 "),HQ=n(EBe,"A",{href:!0});var l0t=s(HQ);_ur=r(l0t,"TFCTRLModel"),l0t.forEach(t),bur=r(EBe," (CTRL model)"),EBe.forEach(t),vur=i(D),QF=n(D,"LI",{});var CBe=s(QF);r5e=n(CBe,"STRONG",{});var i0t=s(r5e);Fur=r(i0t,"data2vec-vision"),i0t.forEach(t),Tur=r(CBe," \u2014 "),UQ=n(CBe,"A",{href:!0});var d0t=s(UQ);Mur=r(d0t,"TFData2VecVisionModel"),d0t.forEach(t),Eur=r(CBe," (Data2VecVision model)"),CBe.forEach(t),Cur=i(D),HF=n(D,"LI",{});var wBe=s(HF);t5e=n(wBe,"STRONG",{});var c0t=s(t5e);wur=r(c0t,"deberta"),c0t.forEach(t),Aur=r(wBe," \u2014 "),JQ=n(wBe,"A",{href:!0});var f0t=s(JQ);Lur=r(f0t,"TFDebertaModel"),f0t.forEach(t),yur=r(wBe," (DeBERTa model)"),wBe.forEach(t),xur=i(D),UF=n(D,"LI",{});var ABe=s(UF);a5e=n(ABe,"STRONG",{});var m0t=s(a5e);$ur=r(m0t,"deberta-v2"),m0t.forEach(t),kur=r(ABe," \u2014 "),YQ=n(ABe,"A",{href:!0});var g0t=s(YQ);Sur=r(g0t,"TFDebertaV2Model"),g0t.forEach(t),Rur=r(ABe," (DeBERTa-v2 model)"),ABe.forEach(t),Pur=i(D),JF=n(D,"LI",{});var LBe=s(JF);n5e=n(LBe,"STRONG",{});var h0t=s(n5e);Bur=r(h0t,"distilbert"),h0t.forEach(t),Iur=r(LBe," \u2014 "),KQ=n(LBe,"A",{href:!0});var p0t=s(KQ);Nur=r(p0t,"TFDistilBertModel"),p0t.forEach(t),qur=r(LBe," (DistilBERT model)"),LBe.forEach(t),jur=i(D),YF=n(D,"LI",{});var yBe=s(YF);s5e=n(yBe,"STRONG",{});var u0t=s(s5e);Dur=r(u0t,"dpr"),u0t.forEach(t),Gur=r(yBe," \u2014 "),ZQ=n(yBe,"A",{href:!0});var _0t=s(ZQ);Our=r(_0t,"TFDPRQuestionEncoder"),_0t.forEach(t),Vur=r(yBe," (DPR model)"),yBe.forEach(t),Xur=i(D),KF=n(D,"LI",{});var xBe=s(KF);l5e=n(xBe,"STRONG",{});var b0t=s(l5e);zur=r(b0t,"electra"),b0t.forEach(t),Wur=r(xBe," \u2014 "),eH=n(xBe,"A",{href:!0});var v0t=s(eH);Qur=r(v0t,"TFElectraModel"),v0t.forEach(t),Hur=r(xBe," (ELECTRA model)"),xBe.forEach(t),Uur=i(D),ZF=n(D,"LI",{});var $Be=s(ZF);i5e=n($Be,"STRONG",{});var F0t=s(i5e);Jur=r(F0t,"flaubert"),F0t.forEach(t),Yur=r($Be," \u2014 "),oH=n($Be,"A",{href:!0});var T0t=s(oH);Kur=r(T0t,"TFFlaubertModel"),T0t.forEach(t),Zur=r($Be," (FlauBERT model)"),$Be.forEach(t),e_r=i(D),Xs=n(D,"LI",{});var Wk=s(Xs);d5e=n(Wk,"STRONG",{});var M0t=s(d5e);o_r=r(M0t,"funnel"),M0t.forEach(t),r_r=r(Wk," \u2014 "),rH=n(Wk,"A",{href:!0});var E0t=s(rH);t_r=r(E0t,"TFFunnelModel"),E0t.forEach(t),a_r=r(Wk," or "),tH=n(Wk,"A",{href:!0});var C0t=s(tH);n_r=r(C0t,"TFFunnelBaseModel"),C0t.forEach(t),s_r=r(Wk," (Funnel Transformer model)"),Wk.forEach(t),l_r=i(D),e6=n(D,"LI",{});var kBe=s(e6);c5e=n(kBe,"STRONG",{});var w0t=s(c5e);i_r=r(w0t,"gpt2"),w0t.forEach(t),d_r=r(kBe," \u2014 "),aH=n(kBe,"A",{href:!0});var A0t=s(aH);c_r=r(A0t,"TFGPT2Model"),A0t.forEach(t),f_r=r(kBe," (OpenAI GPT-2 model)"),kBe.forEach(t),m_r=i(D),o6=n(D,"LI",{});var SBe=s(o6);f5e=n(SBe,"STRONG",{});var L0t=s(f5e);g_r=r(L0t,"gptj"),L0t.forEach(t),h_r=r(SBe," \u2014 "),nH=n(SBe,"A",{href:!0});var y0t=s(nH);p_r=r(y0t,"TFGPTJModel"),y0t.forEach(t),u_r=r(SBe," (GPT-J model)"),SBe.forEach(t),__r=i(D),r6=n(D,"LI",{});var RBe=s(r6);m5e=n(RBe,"STRONG",{});var x0t=s(m5e);b_r=r(x0t,"hubert"),x0t.forEach(t),v_r=r(RBe," \u2014 "),sH=n(RBe,"A",{href:!0});var $0t=s(sH);F_r=r($0t,"TFHubertModel"),$0t.forEach(t),T_r=r(RBe," (Hubert model)"),RBe.forEach(t),M_r=i(D),t6=n(D,"LI",{});var PBe=s(t6);g5e=n(PBe,"STRONG",{});var k0t=s(g5e);E_r=r(k0t,"layoutlm"),k0t.forEach(t),C_r=r(PBe," \u2014 "),lH=n(PBe,"A",{href:!0});var S0t=s(lH);w_r=r(S0t,"TFLayoutLMModel"),S0t.forEach(t),A_r=r(PBe," (LayoutLM model)"),PBe.forEach(t),L_r=i(D),a6=n(D,"LI",{});var BBe=s(a6);h5e=n(BBe,"STRONG",{});var R0t=s(h5e);y_r=r(R0t,"led"),R0t.forEach(t),x_r=r(BBe," \u2014 "),iH=n(BBe,"A",{href:!0});var P0t=s(iH);$_r=r(P0t,"TFLEDModel"),P0t.forEach(t),k_r=r(BBe," (LED model)"),BBe.forEach(t),S_r=i(D),n6=n(D,"LI",{});var IBe=s(n6);p5e=n(IBe,"STRONG",{});var B0t=s(p5e);R_r=r(B0t,"longformer"),B0t.forEach(t),P_r=r(IBe," \u2014 "),dH=n(IBe,"A",{href:!0});var I0t=s(dH);B_r=r(I0t,"TFLongformerModel"),I0t.forEach(t),I_r=r(IBe," (Longformer model)"),IBe.forEach(t),N_r=i(D),s6=n(D,"LI",{});var NBe=s(s6);u5e=n(NBe,"STRONG",{});var N0t=s(u5e);q_r=r(N0t,"lxmert"),N0t.forEach(t),j_r=r(NBe," \u2014 "),cH=n(NBe,"A",{href:!0});var q0t=s(cH);D_r=r(q0t,"TFLxmertModel"),q0t.forEach(t),G_r=r(NBe," (LXMERT model)"),NBe.forEach(t),O_r=i(D),l6=n(D,"LI",{});var qBe=s(l6);_5e=n(qBe,"STRONG",{});var j0t=s(_5e);V_r=r(j0t,"marian"),j0t.forEach(t),X_r=r(qBe," \u2014 "),fH=n(qBe,"A",{href:!0});var D0t=s(fH);z_r=r(D0t,"TFMarianModel"),D0t.forEach(t),W_r=r(qBe," (Marian model)"),qBe.forEach(t),Q_r=i(D),i6=n(D,"LI",{});var jBe=s(i6);b5e=n(jBe,"STRONG",{});var G0t=s(b5e);H_r=r(G0t,"mbart"),G0t.forEach(t),U_r=r(jBe," \u2014 "),mH=n(jBe,"A",{href:!0});var O0t=s(mH);J_r=r(O0t,"TFMBartModel"),O0t.forEach(t),Y_r=r(jBe," (mBART model)"),jBe.forEach(t),K_r=i(D),d6=n(D,"LI",{});var DBe=s(d6);v5e=n(DBe,"STRONG",{});var V0t=s(v5e);Z_r=r(V0t,"mobilebert"),V0t.forEach(t),e1r=r(DBe," \u2014 "),gH=n(DBe,"A",{href:!0});var X0t=s(gH);o1r=r(X0t,"TFMobileBertModel"),X0t.forEach(t),r1r=r(DBe," (MobileBERT model)"),DBe.forEach(t),t1r=i(D),c6=n(D,"LI",{});var GBe=s(c6);F5e=n(GBe,"STRONG",{});var z0t=s(F5e);a1r=r(z0t,"mpnet"),z0t.forEach(t),n1r=r(GBe," \u2014 "),hH=n(GBe,"A",{href:!0});var W0t=s(hH);s1r=r(W0t,"TFMPNetModel"),W0t.forEach(t),l1r=r(GBe," (MPNet model)"),GBe.forEach(t),i1r=i(D),f6=n(D,"LI",{});var OBe=s(f6);T5e=n(OBe,"STRONG",{});var Q0t=s(T5e);d1r=r(Q0t,"mt5"),Q0t.forEach(t),c1r=r(OBe," \u2014 "),pH=n(OBe,"A",{href:!0});var H0t=s(pH);f1r=r(H0t,"TFMT5Model"),H0t.forEach(t),m1r=r(OBe," (MT5 model)"),OBe.forEach(t),g1r=i(D),m6=n(D,"LI",{});var VBe=s(m6);M5e=n(VBe,"STRONG",{});var U0t=s(M5e);h1r=r(U0t,"openai-gpt"),U0t.forEach(t),p1r=r(VBe," \u2014 "),uH=n(VBe,"A",{href:!0});var J0t=s(uH);u1r=r(J0t,"TFOpenAIGPTModel"),J0t.forEach(t),_1r=r(VBe," (OpenAI GPT model)"),VBe.forEach(t),b1r=i(D),g6=n(D,"LI",{});var XBe=s(g6);E5e=n(XBe,"STRONG",{});var Y0t=s(E5e);v1r=r(Y0t,"opt"),Y0t.forEach(t),F1r=r(XBe," \u2014 "),_H=n(XBe,"A",{href:!0});var K0t=s(_H);T1r=r(K0t,"TFOPTModel"),K0t.forEach(t),M1r=r(XBe," (OPT model)"),XBe.forEach(t),E1r=i(D),h6=n(D,"LI",{});var zBe=s(h6);C5e=n(zBe,"STRONG",{});var Z0t=s(C5e);C1r=r(Z0t,"pegasus"),Z0t.forEach(t),w1r=r(zBe," \u2014 "),bH=n(zBe,"A",{href:!0});var ewt=s(bH);A1r=r(ewt,"TFPegasusModel"),ewt.forEach(t),L1r=r(zBe," (Pegasus model)"),zBe.forEach(t),y1r=i(D),p6=n(D,"LI",{});var WBe=s(p6);w5e=n(WBe,"STRONG",{});var owt=s(w5e);x1r=r(owt,"rembert"),owt.forEach(t),$1r=r(WBe," \u2014 "),vH=n(WBe,"A",{href:!0});var rwt=s(vH);k1r=r(rwt,"TFRemBertModel"),rwt.forEach(t),S1r=r(WBe," (RemBERT model)"),WBe.forEach(t),R1r=i(D),u6=n(D,"LI",{});var QBe=s(u6);A5e=n(QBe,"STRONG",{});var twt=s(A5e);P1r=r(twt,"roberta"),twt.forEach(t),B1r=r(QBe," \u2014 "),FH=n(QBe,"A",{href:!0});var awt=s(FH);I1r=r(awt,"TFRobertaModel"),awt.forEach(t),N1r=r(QBe," (RoBERTa model)"),QBe.forEach(t),q1r=i(D),_6=n(D,"LI",{});var HBe=s(_6);L5e=n(HBe,"STRONG",{});var nwt=s(L5e);j1r=r(nwt,"roformer"),nwt.forEach(t),D1r=r(HBe," \u2014 "),TH=n(HBe,"A",{href:!0});var swt=s(TH);G1r=r(swt,"TFRoFormerModel"),swt.forEach(t),O1r=r(HBe," (RoFormer model)"),HBe.forEach(t),V1r=i(D),b6=n(D,"LI",{});var UBe=s(b6);y5e=n(UBe,"STRONG",{});var lwt=s(y5e);X1r=r(lwt,"speech_to_text"),lwt.forEach(t),z1r=r(UBe," \u2014 "),MH=n(UBe,"A",{href:!0});var iwt=s(MH);W1r=r(iwt,"TFSpeech2TextModel"),iwt.forEach(t),Q1r=r(UBe," (Speech2Text model)"),UBe.forEach(t),H1r=i(D),v6=n(D,"LI",{});var JBe=s(v6);x5e=n(JBe,"STRONG",{});var dwt=s(x5e);U1r=r(dwt,"swin"),dwt.forEach(t),J1r=r(JBe," \u2014 "),EH=n(JBe,"A",{href:!0});var cwt=s(EH);Y1r=r(cwt,"TFSwinModel"),cwt.forEach(t),K1r=r(JBe," (Swin Transformer model)"),JBe.forEach(t),Z1r=i(D),F6=n(D,"LI",{});var YBe=s(F6);$5e=n(YBe,"STRONG",{});var fwt=s($5e);e2r=r(fwt,"t5"),fwt.forEach(t),o2r=r(YBe," \u2014 "),CH=n(YBe,"A",{href:!0});var mwt=s(CH);r2r=r(mwt,"TFT5Model"),mwt.forEach(t),t2r=r(YBe," (T5 model)"),YBe.forEach(t),a2r=i(D),T6=n(D,"LI",{});var KBe=s(T6);k5e=n(KBe,"STRONG",{});var gwt=s(k5e);n2r=r(gwt,"tapas"),gwt.forEach(t),s2r=r(KBe," \u2014 "),wH=n(KBe,"A",{href:!0});var hwt=s(wH);l2r=r(hwt,"TFTapasModel"),hwt.forEach(t),i2r=r(KBe," (TAPAS model)"),KBe.forEach(t),d2r=i(D),M6=n(D,"LI",{});var ZBe=s(M6);S5e=n(ZBe,"STRONG",{});var pwt=s(S5e);c2r=r(pwt,"transfo-xl"),pwt.forEach(t),f2r=r(ZBe," \u2014 "),AH=n(ZBe,"A",{href:!0});var uwt=s(AH);m2r=r(uwt,"TFTransfoXLModel"),uwt.forEach(t),g2r=r(ZBe," (Transformer-XL model)"),ZBe.forEach(t),h2r=i(D),E6=n(D,"LI",{});var eIe=s(E6);R5e=n(eIe,"STRONG",{});var _wt=s(R5e);p2r=r(_wt,"vit"),_wt.forEach(t),u2r=r(eIe," \u2014 "),LH=n(eIe,"A",{href:!0});var bwt=s(LH);_2r=r(bwt,"TFViTModel"),bwt.forEach(t),b2r=r(eIe," (ViT model)"),eIe.forEach(t),v2r=i(D),C6=n(D,"LI",{});var oIe=s(C6);P5e=n(oIe,"STRONG",{});var vwt=s(P5e);F2r=r(vwt,"vit_mae"),vwt.forEach(t),T2r=r(oIe," \u2014 "),yH=n(oIe,"A",{href:!0});var Fwt=s(yH);M2r=r(Fwt,"TFViTMAEModel"),Fwt.forEach(t),E2r=r(oIe," (ViTMAE model)"),oIe.forEach(t),C2r=i(D),w6=n(D,"LI",{});var rIe=s(w6);B5e=n(rIe,"STRONG",{});var Twt=s(B5e);w2r=r(Twt,"wav2vec2"),Twt.forEach(t),A2r=r(rIe," \u2014 "),xH=n(rIe,"A",{href:!0});var Mwt=s(xH);L2r=r(Mwt,"TFWav2Vec2Model"),Mwt.forEach(t),y2r=r(rIe," (Wav2Vec2 model)"),rIe.forEach(t),x2r=i(D),A6=n(D,"LI",{});var tIe=s(A6);I5e=n(tIe,"STRONG",{});var Ewt=s(I5e);$2r=r(Ewt,"xglm"),Ewt.forEach(t),k2r=r(tIe," \u2014 "),$H=n(tIe,"A",{href:!0});var Cwt=s($H);S2r=r(Cwt,"TFXGLMModel"),Cwt.forEach(t),R2r=r(tIe," (XGLM model)"),tIe.forEach(t),P2r=i(D),L6=n(D,"LI",{});var aIe=s(L6);N5e=n(aIe,"STRONG",{});var wwt=s(N5e);B2r=r(wwt,"xlm"),wwt.forEach(t),I2r=r(aIe," \u2014 "),kH=n(aIe,"A",{href:!0});var Awt=s(kH);N2r=r(Awt,"TFXLMModel"),Awt.forEach(t),q2r=r(aIe," (XLM model)"),aIe.forEach(t),j2r=i(D),y6=n(D,"LI",{});var nIe=s(y6);q5e=n(nIe,"STRONG",{});var Lwt=s(q5e);D2r=r(Lwt,"xlm-roberta"),Lwt.forEach(t),G2r=r(nIe," \u2014 "),SH=n(nIe,"A",{href:!0});var ywt=s(SH);O2r=r(ywt,"TFXLMRobertaModel"),ywt.forEach(t),V2r=r(nIe," (XLM-RoBERTa model)"),nIe.forEach(t),X2r=i(D),x6=n(D,"LI",{});var sIe=s(x6);j5e=n(sIe,"STRONG",{});var xwt=s(j5e);z2r=r(xwt,"xlnet"),xwt.forEach(t),W2r=r(sIe," \u2014 "),RH=n(sIe,"A",{href:!0});var $wt=s(RH);Q2r=r($wt,"TFXLNetModel"),$wt.forEach(t),H2r=r(sIe," (XLNet model)"),sIe.forEach(t),D.forEach(t),U2r=i(El),T($6.$$.fragment,El),El.forEach(t),Ml.forEach(t),pOe=i(f),rc=n(f,"H2",{class:!0});var EXe=s(rc);k6=n(EXe,"A",{id:!0,class:!0,href:!0});var kwt=s(k6);D5e=n(kwt,"SPAN",{});var Swt=s(D5e);T(m9.$$.fragment,Swt),Swt.forEach(t),kwt.forEach(t),J2r=i(EXe),G5e=n(EXe,"SPAN",{});var Rwt=s(G5e);Y2r=r(Rwt,"TFAutoModelForPreTraining"),Rwt.forEach(t),EXe.forEach(t),uOe=i(f),er=n(f,"DIV",{class:!0});var Cl=s(er);T(g9.$$.fragment,Cl),K2r=i(Cl),tc=n(Cl,"P",{});var Koe=s(tc);Z2r=r(Koe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),PH=n(Koe,"A",{href:!0});var Pwt=s(PH);ebr=r(Pwt,"from_pretrained()"),Pwt.forEach(t),obr=r(Koe," class method or the "),BH=n(Koe,"A",{href:!0});var Bwt=s(BH);rbr=r(Bwt,"from_config()"),Bwt.forEach(t),tbr=r(Koe,` class
method.`),Koe.forEach(t),abr=i(Cl),h9=n(Cl,"P",{});var CXe=s(h9);nbr=r(CXe,"This class cannot be instantiated directly using "),O5e=n(CXe,"CODE",{});var Iwt=s(O5e);sbr=r(Iwt,"__init__()"),Iwt.forEach(t),lbr=r(CXe," (throws an error)."),CXe.forEach(t),ibr=i(Cl),kt=n(Cl,"DIV",{class:!0});var FL=s(kt);T(p9.$$.fragment,FL),dbr=i(FL),V5e=n(FL,"P",{});var Nwt=s(V5e);cbr=r(Nwt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Nwt.forEach(t),fbr=i(FL),ac=n(FL,"P",{});var Zoe=s(ac);mbr=r(Zoe,`Note:
Loading a model from its configuration file does `),X5e=n(Zoe,"STRONG",{});var qwt=s(X5e);gbr=r(qwt,"not"),qwt.forEach(t),hbr=r(Zoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),IH=n(Zoe,"A",{href:!0});var jwt=s(IH);pbr=r(jwt,"from_pretrained()"),jwt.forEach(t),ubr=r(Zoe," to load the model weights."),Zoe.forEach(t),_br=i(FL),T(S6.$$.fragment,FL),FL.forEach(t),bbr=i(Cl),yr=n(Cl,"DIV",{class:!0});var wl=s(yr);T(u9.$$.fragment,wl),vbr=i(wl),z5e=n(wl,"P",{});var Dwt=s(z5e);Fbr=r(Dwt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Dwt.forEach(t),Tbr=i(wl),an=n(wl,"P",{});var TL=s(an);Mbr=r(TL,"The model class to instantiate is selected based on the "),W5e=n(TL,"CODE",{});var Gwt=s(W5e);Ebr=r(Gwt,"model_type"),Gwt.forEach(t),Cbr=r(TL,` property of the config object (either
passed as an argument or loaded from `),Q5e=n(TL,"CODE",{});var Owt=s(Q5e);wbr=r(Owt,"pretrained_model_name_or_path"),Owt.forEach(t),Abr=r(TL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H5e=n(TL,"CODE",{});var Vwt=s(H5e);Lbr=r(Vwt,"pretrained_model_name_or_path"),Vwt.forEach(t),ybr=r(TL,":"),TL.forEach(t),xbr=i(wl),se=n(wl,"UL",{});var le=s(se);R6=n(le,"LI",{});var lIe=s(R6);U5e=n(lIe,"STRONG",{});var Xwt=s(U5e);$br=r(Xwt,"albert"),Xwt.forEach(t),kbr=r(lIe," \u2014 "),NH=n(lIe,"A",{href:!0});var zwt=s(NH);Sbr=r(zwt,"TFAlbertForPreTraining"),zwt.forEach(t),Rbr=r(lIe," (ALBERT model)"),lIe.forEach(t),Pbr=i(le),P6=n(le,"LI",{});var iIe=s(P6);J5e=n(iIe,"STRONG",{});var Wwt=s(J5e);Bbr=r(Wwt,"bart"),Wwt.forEach(t),Ibr=r(iIe," \u2014 "),qH=n(iIe,"A",{href:!0});var Qwt=s(qH);Nbr=r(Qwt,"TFBartForConditionalGeneration"),Qwt.forEach(t),qbr=r(iIe," (BART model)"),iIe.forEach(t),jbr=i(le),B6=n(le,"LI",{});var dIe=s(B6);Y5e=n(dIe,"STRONG",{});var Hwt=s(Y5e);Dbr=r(Hwt,"bert"),Hwt.forEach(t),Gbr=r(dIe," \u2014 "),jH=n(dIe,"A",{href:!0});var Uwt=s(jH);Obr=r(Uwt,"TFBertForPreTraining"),Uwt.forEach(t),Vbr=r(dIe," (BERT model)"),dIe.forEach(t),Xbr=i(le),I6=n(le,"LI",{});var cIe=s(I6);K5e=n(cIe,"STRONG",{});var Jwt=s(K5e);zbr=r(Jwt,"camembert"),Jwt.forEach(t),Wbr=r(cIe," \u2014 "),DH=n(cIe,"A",{href:!0});var Ywt=s(DH);Qbr=r(Ywt,"TFCamembertForMaskedLM"),Ywt.forEach(t),Hbr=r(cIe," (CamemBERT model)"),cIe.forEach(t),Ubr=i(le),N6=n(le,"LI",{});var fIe=s(N6);Z5e=n(fIe,"STRONG",{});var Kwt=s(Z5e);Jbr=r(Kwt,"ctrl"),Kwt.forEach(t),Ybr=r(fIe," \u2014 "),GH=n(fIe,"A",{href:!0});var Zwt=s(GH);Kbr=r(Zwt,"TFCTRLLMHeadModel"),Zwt.forEach(t),Zbr=r(fIe," (CTRL model)"),fIe.forEach(t),e4r=i(le),q6=n(le,"LI",{});var mIe=s(q6);eve=n(mIe,"STRONG",{});var eAt=s(eve);o4r=r(eAt,"distilbert"),eAt.forEach(t),r4r=r(mIe," \u2014 "),OH=n(mIe,"A",{href:!0});var oAt=s(OH);t4r=r(oAt,"TFDistilBertForMaskedLM"),oAt.forEach(t),a4r=r(mIe," (DistilBERT model)"),mIe.forEach(t),n4r=i(le),j6=n(le,"LI",{});var gIe=s(j6);ove=n(gIe,"STRONG",{});var rAt=s(ove);s4r=r(rAt,"electra"),rAt.forEach(t),l4r=r(gIe," \u2014 "),VH=n(gIe,"A",{href:!0});var tAt=s(VH);i4r=r(tAt,"TFElectraForPreTraining"),tAt.forEach(t),d4r=r(gIe," (ELECTRA model)"),gIe.forEach(t),c4r=i(le),D6=n(le,"LI",{});var hIe=s(D6);rve=n(hIe,"STRONG",{});var aAt=s(rve);f4r=r(aAt,"flaubert"),aAt.forEach(t),m4r=r(hIe," \u2014 "),XH=n(hIe,"A",{href:!0});var nAt=s(XH);g4r=r(nAt,"TFFlaubertWithLMHeadModel"),nAt.forEach(t),h4r=r(hIe," (FlauBERT model)"),hIe.forEach(t),p4r=i(le),G6=n(le,"LI",{});var pIe=s(G6);tve=n(pIe,"STRONG",{});var sAt=s(tve);u4r=r(sAt,"funnel"),sAt.forEach(t),_4r=r(pIe," \u2014 "),zH=n(pIe,"A",{href:!0});var lAt=s(zH);b4r=r(lAt,"TFFunnelForPreTraining"),lAt.forEach(t),v4r=r(pIe," (Funnel Transformer model)"),pIe.forEach(t),F4r=i(le),O6=n(le,"LI",{});var uIe=s(O6);ave=n(uIe,"STRONG",{});var iAt=s(ave);T4r=r(iAt,"gpt2"),iAt.forEach(t),M4r=r(uIe," \u2014 "),WH=n(uIe,"A",{href:!0});var dAt=s(WH);E4r=r(dAt,"TFGPT2LMHeadModel"),dAt.forEach(t),C4r=r(uIe," (OpenAI GPT-2 model)"),uIe.forEach(t),w4r=i(le),V6=n(le,"LI",{});var _Ie=s(V6);nve=n(_Ie,"STRONG",{});var cAt=s(nve);A4r=r(cAt,"layoutlm"),cAt.forEach(t),L4r=r(_Ie," \u2014 "),QH=n(_Ie,"A",{href:!0});var fAt=s(QH);y4r=r(fAt,"TFLayoutLMForMaskedLM"),fAt.forEach(t),x4r=r(_Ie," (LayoutLM model)"),_Ie.forEach(t),$4r=i(le),X6=n(le,"LI",{});var bIe=s(X6);sve=n(bIe,"STRONG",{});var mAt=s(sve);k4r=r(mAt,"lxmert"),mAt.forEach(t),S4r=r(bIe," \u2014 "),HH=n(bIe,"A",{href:!0});var gAt=s(HH);R4r=r(gAt,"TFLxmertForPreTraining"),gAt.forEach(t),P4r=r(bIe," (LXMERT model)"),bIe.forEach(t),B4r=i(le),z6=n(le,"LI",{});var vIe=s(z6);lve=n(vIe,"STRONG",{});var hAt=s(lve);I4r=r(hAt,"mobilebert"),hAt.forEach(t),N4r=r(vIe," \u2014 "),UH=n(vIe,"A",{href:!0});var pAt=s(UH);q4r=r(pAt,"TFMobileBertForPreTraining"),pAt.forEach(t),j4r=r(vIe," (MobileBERT model)"),vIe.forEach(t),D4r=i(le),W6=n(le,"LI",{});var FIe=s(W6);ive=n(FIe,"STRONG",{});var uAt=s(ive);G4r=r(uAt,"mpnet"),uAt.forEach(t),O4r=r(FIe," \u2014 "),JH=n(FIe,"A",{href:!0});var _At=s(JH);V4r=r(_At,"TFMPNetForMaskedLM"),_At.forEach(t),X4r=r(FIe," (MPNet model)"),FIe.forEach(t),z4r=i(le),Q6=n(le,"LI",{});var TIe=s(Q6);dve=n(TIe,"STRONG",{});var bAt=s(dve);W4r=r(bAt,"openai-gpt"),bAt.forEach(t),Q4r=r(TIe," \u2014 "),YH=n(TIe,"A",{href:!0});var vAt=s(YH);H4r=r(vAt,"TFOpenAIGPTLMHeadModel"),vAt.forEach(t),U4r=r(TIe," (OpenAI GPT model)"),TIe.forEach(t),J4r=i(le),H6=n(le,"LI",{});var MIe=s(H6);cve=n(MIe,"STRONG",{});var FAt=s(cve);Y4r=r(FAt,"roberta"),FAt.forEach(t),K4r=r(MIe," \u2014 "),KH=n(MIe,"A",{href:!0});var TAt=s(KH);Z4r=r(TAt,"TFRobertaForMaskedLM"),TAt.forEach(t),e5r=r(MIe," (RoBERTa model)"),MIe.forEach(t),o5r=i(le),U6=n(le,"LI",{});var EIe=s(U6);fve=n(EIe,"STRONG",{});var MAt=s(fve);r5r=r(MAt,"t5"),MAt.forEach(t),t5r=r(EIe," \u2014 "),ZH=n(EIe,"A",{href:!0});var EAt=s(ZH);a5r=r(EAt,"TFT5ForConditionalGeneration"),EAt.forEach(t),n5r=r(EIe," (T5 model)"),EIe.forEach(t),s5r=i(le),J6=n(le,"LI",{});var CIe=s(J6);mve=n(CIe,"STRONG",{});var CAt=s(mve);l5r=r(CAt,"tapas"),CAt.forEach(t),i5r=r(CIe," \u2014 "),eU=n(CIe,"A",{href:!0});var wAt=s(eU);d5r=r(wAt,"TFTapasForMaskedLM"),wAt.forEach(t),c5r=r(CIe," (TAPAS model)"),CIe.forEach(t),f5r=i(le),Y6=n(le,"LI",{});var wIe=s(Y6);gve=n(wIe,"STRONG",{});var AAt=s(gve);m5r=r(AAt,"transfo-xl"),AAt.forEach(t),g5r=r(wIe," \u2014 "),oU=n(wIe,"A",{href:!0});var LAt=s(oU);h5r=r(LAt,"TFTransfoXLLMHeadModel"),LAt.forEach(t),p5r=r(wIe," (Transformer-XL model)"),wIe.forEach(t),u5r=i(le),K6=n(le,"LI",{});var AIe=s(K6);hve=n(AIe,"STRONG",{});var yAt=s(hve);_5r=r(yAt,"vit_mae"),yAt.forEach(t),b5r=r(AIe," \u2014 "),rU=n(AIe,"A",{href:!0});var xAt=s(rU);v5r=r(xAt,"TFViTMAEForPreTraining"),xAt.forEach(t),F5r=r(AIe," (ViTMAE model)"),AIe.forEach(t),T5r=i(le),Z6=n(le,"LI",{});var LIe=s(Z6);pve=n(LIe,"STRONG",{});var $At=s(pve);M5r=r($At,"xlm"),$At.forEach(t),E5r=r(LIe," \u2014 "),tU=n(LIe,"A",{href:!0});var kAt=s(tU);C5r=r(kAt,"TFXLMWithLMHeadModel"),kAt.forEach(t),w5r=r(LIe," (XLM model)"),LIe.forEach(t),A5r=i(le),eT=n(le,"LI",{});var yIe=s(eT);uve=n(yIe,"STRONG",{});var SAt=s(uve);L5r=r(SAt,"xlm-roberta"),SAt.forEach(t),y5r=r(yIe," \u2014 "),aU=n(yIe,"A",{href:!0});var RAt=s(aU);x5r=r(RAt,"TFXLMRobertaForMaskedLM"),RAt.forEach(t),$5r=r(yIe," (XLM-RoBERTa model)"),yIe.forEach(t),k5r=i(le),oT=n(le,"LI",{});var xIe=s(oT);_ve=n(xIe,"STRONG",{});var PAt=s(_ve);S5r=r(PAt,"xlnet"),PAt.forEach(t),R5r=r(xIe," \u2014 "),nU=n(xIe,"A",{href:!0});var BAt=s(nU);P5r=r(BAt,"TFXLNetLMHeadModel"),BAt.forEach(t),B5r=r(xIe," (XLNet model)"),xIe.forEach(t),le.forEach(t),I5r=i(wl),T(rT.$$.fragment,wl),wl.forEach(t),Cl.forEach(t),_Oe=i(f),nc=n(f,"H2",{class:!0});var wXe=s(nc);tT=n(wXe,"A",{id:!0,class:!0,href:!0});var IAt=s(tT);bve=n(IAt,"SPAN",{});var NAt=s(bve);T(_9.$$.fragment,NAt),NAt.forEach(t),IAt.forEach(t),N5r=i(wXe),vve=n(wXe,"SPAN",{});var qAt=s(vve);q5r=r(qAt,"TFAutoModelForCausalLM"),qAt.forEach(t),wXe.forEach(t),bOe=i(f),or=n(f,"DIV",{class:!0});var Al=s(or);T(b9.$$.fragment,Al),j5r=i(Al),sc=n(Al,"P",{});var ere=s(sc);D5r=r(ere,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),sU=n(ere,"A",{href:!0});var jAt=s(sU);G5r=r(jAt,"from_pretrained()"),jAt.forEach(t),O5r=r(ere," class method or the "),lU=n(ere,"A",{href:!0});var DAt=s(lU);V5r=r(DAt,"from_config()"),DAt.forEach(t),X5r=r(ere,` class
method.`),ere.forEach(t),z5r=i(Al),v9=n(Al,"P",{});var AXe=s(v9);W5r=r(AXe,"This class cannot be instantiated directly using "),Fve=n(AXe,"CODE",{});var GAt=s(Fve);Q5r=r(GAt,"__init__()"),GAt.forEach(t),H5r=r(AXe," (throws an error)."),AXe.forEach(t),U5r=i(Al),St=n(Al,"DIV",{class:!0});var ML=s(St);T(F9.$$.fragment,ML),J5r=i(ML),Tve=n(ML,"P",{});var OAt=s(Tve);Y5r=r(OAt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),OAt.forEach(t),K5r=i(ML),lc=n(ML,"P",{});var ore=s(lc);Z5r=r(ore,`Note:
Loading a model from its configuration file does `),Mve=n(ore,"STRONG",{});var VAt=s(Mve);evr=r(VAt,"not"),VAt.forEach(t),ovr=r(ore,` load the model weights. It only affects the
model\u2019s configuration. Use `),iU=n(ore,"A",{href:!0});var XAt=s(iU);rvr=r(XAt,"from_pretrained()"),XAt.forEach(t),tvr=r(ore," to load the model weights."),ore.forEach(t),avr=i(ML),T(aT.$$.fragment,ML),ML.forEach(t),nvr=i(Al),xr=n(Al,"DIV",{class:!0});var Ll=s(xr);T(T9.$$.fragment,Ll),svr=i(Ll),Eve=n(Ll,"P",{});var zAt=s(Eve);lvr=r(zAt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),zAt.forEach(t),ivr=i(Ll),nn=n(Ll,"P",{});var EL=s(nn);dvr=r(EL,"The model class to instantiate is selected based on the "),Cve=n(EL,"CODE",{});var WAt=s(Cve);cvr=r(WAt,"model_type"),WAt.forEach(t),fvr=r(EL,` property of the config object (either
passed as an argument or loaded from `),wve=n(EL,"CODE",{});var QAt=s(wve);mvr=r(QAt,"pretrained_model_name_or_path"),QAt.forEach(t),gvr=r(EL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ave=n(EL,"CODE",{});var HAt=s(Ave);hvr=r(HAt,"pretrained_model_name_or_path"),HAt.forEach(t),pvr=r(EL,":"),EL.forEach(t),uvr=i(Ll),Te=n(Ll,"UL",{});var Ce=s(Te);nT=n(Ce,"LI",{});var $Ie=s(nT);Lve=n($Ie,"STRONG",{});var UAt=s(Lve);_vr=r(UAt,"bert"),UAt.forEach(t),bvr=r($Ie," \u2014 "),dU=n($Ie,"A",{href:!0});var JAt=s(dU);vvr=r(JAt,"TFBertLMHeadModel"),JAt.forEach(t),Fvr=r($Ie," (BERT model)"),$Ie.forEach(t),Tvr=i(Ce),sT=n(Ce,"LI",{});var kIe=s(sT);yve=n(kIe,"STRONG",{});var YAt=s(yve);Mvr=r(YAt,"camembert"),YAt.forEach(t),Evr=r(kIe," \u2014 "),cU=n(kIe,"A",{href:!0});var KAt=s(cU);Cvr=r(KAt,"TFCamembertForCausalLM"),KAt.forEach(t),wvr=r(kIe," (CamemBERT model)"),kIe.forEach(t),Avr=i(Ce),lT=n(Ce,"LI",{});var SIe=s(lT);xve=n(SIe,"STRONG",{});var ZAt=s(xve);Lvr=r(ZAt,"ctrl"),ZAt.forEach(t),yvr=r(SIe," \u2014 "),fU=n(SIe,"A",{href:!0});var eLt=s(fU);xvr=r(eLt,"TFCTRLLMHeadModel"),eLt.forEach(t),$vr=r(SIe," (CTRL model)"),SIe.forEach(t),kvr=i(Ce),iT=n(Ce,"LI",{});var RIe=s(iT);$ve=n(RIe,"STRONG",{});var oLt=s($ve);Svr=r(oLt,"gpt2"),oLt.forEach(t),Rvr=r(RIe," \u2014 "),mU=n(RIe,"A",{href:!0});var rLt=s(mU);Pvr=r(rLt,"TFGPT2LMHeadModel"),rLt.forEach(t),Bvr=r(RIe," (OpenAI GPT-2 model)"),RIe.forEach(t),Ivr=i(Ce),dT=n(Ce,"LI",{});var PIe=s(dT);kve=n(PIe,"STRONG",{});var tLt=s(kve);Nvr=r(tLt,"gptj"),tLt.forEach(t),qvr=r(PIe," \u2014 "),gU=n(PIe,"A",{href:!0});var aLt=s(gU);jvr=r(aLt,"TFGPTJForCausalLM"),aLt.forEach(t),Dvr=r(PIe," (GPT-J model)"),PIe.forEach(t),Gvr=i(Ce),cT=n(Ce,"LI",{});var BIe=s(cT);Sve=n(BIe,"STRONG",{});var nLt=s(Sve);Ovr=r(nLt,"openai-gpt"),nLt.forEach(t),Vvr=r(BIe," \u2014 "),hU=n(BIe,"A",{href:!0});var sLt=s(hU);Xvr=r(sLt,"TFOpenAIGPTLMHeadModel"),sLt.forEach(t),zvr=r(BIe," (OpenAI GPT model)"),BIe.forEach(t),Wvr=i(Ce),fT=n(Ce,"LI",{});var IIe=s(fT);Rve=n(IIe,"STRONG",{});var lLt=s(Rve);Qvr=r(lLt,"opt"),lLt.forEach(t),Hvr=r(IIe," \u2014 "),pU=n(IIe,"A",{href:!0});var iLt=s(pU);Uvr=r(iLt,"TFOPTForCausalLM"),iLt.forEach(t),Jvr=r(IIe," (OPT model)"),IIe.forEach(t),Yvr=i(Ce),mT=n(Ce,"LI",{});var NIe=s(mT);Pve=n(NIe,"STRONG",{});var dLt=s(Pve);Kvr=r(dLt,"rembert"),dLt.forEach(t),Zvr=r(NIe," \u2014 "),uU=n(NIe,"A",{href:!0});var cLt=s(uU);e3r=r(cLt,"TFRemBertForCausalLM"),cLt.forEach(t),o3r=r(NIe," (RemBERT model)"),NIe.forEach(t),r3r=i(Ce),gT=n(Ce,"LI",{});var qIe=s(gT);Bve=n(qIe,"STRONG",{});var fLt=s(Bve);t3r=r(fLt,"roberta"),fLt.forEach(t),a3r=r(qIe," \u2014 "),_U=n(qIe,"A",{href:!0});var mLt=s(_U);n3r=r(mLt,"TFRobertaForCausalLM"),mLt.forEach(t),s3r=r(qIe," (RoBERTa model)"),qIe.forEach(t),l3r=i(Ce),hT=n(Ce,"LI",{});var jIe=s(hT);Ive=n(jIe,"STRONG",{});var gLt=s(Ive);i3r=r(gLt,"roformer"),gLt.forEach(t),d3r=r(jIe," \u2014 "),bU=n(jIe,"A",{href:!0});var hLt=s(bU);c3r=r(hLt,"TFRoFormerForCausalLM"),hLt.forEach(t),f3r=r(jIe," (RoFormer model)"),jIe.forEach(t),m3r=i(Ce),pT=n(Ce,"LI",{});var DIe=s(pT);Nve=n(DIe,"STRONG",{});var pLt=s(Nve);g3r=r(pLt,"transfo-xl"),pLt.forEach(t),h3r=r(DIe," \u2014 "),vU=n(DIe,"A",{href:!0});var uLt=s(vU);p3r=r(uLt,"TFTransfoXLLMHeadModel"),uLt.forEach(t),u3r=r(DIe," (Transformer-XL model)"),DIe.forEach(t),_3r=i(Ce),uT=n(Ce,"LI",{});var GIe=s(uT);qve=n(GIe,"STRONG",{});var _Lt=s(qve);b3r=r(_Lt,"xglm"),_Lt.forEach(t),v3r=r(GIe," \u2014 "),FU=n(GIe,"A",{href:!0});var bLt=s(FU);F3r=r(bLt,"TFXGLMForCausalLM"),bLt.forEach(t),T3r=r(GIe," (XGLM model)"),GIe.forEach(t),M3r=i(Ce),_T=n(Ce,"LI",{});var OIe=s(_T);jve=n(OIe,"STRONG",{});var vLt=s(jve);E3r=r(vLt,"xlm"),vLt.forEach(t),C3r=r(OIe," \u2014 "),TU=n(OIe,"A",{href:!0});var FLt=s(TU);w3r=r(FLt,"TFXLMWithLMHeadModel"),FLt.forEach(t),A3r=r(OIe," (XLM model)"),OIe.forEach(t),L3r=i(Ce),bT=n(Ce,"LI",{});var VIe=s(bT);Dve=n(VIe,"STRONG",{});var TLt=s(Dve);y3r=r(TLt,"xlnet"),TLt.forEach(t),x3r=r(VIe," \u2014 "),MU=n(VIe,"A",{href:!0});var MLt=s(MU);$3r=r(MLt,"TFXLNetLMHeadModel"),MLt.forEach(t),k3r=r(VIe," (XLNet model)"),VIe.forEach(t),Ce.forEach(t),S3r=i(Ll),T(vT.$$.fragment,Ll),Ll.forEach(t),Al.forEach(t),vOe=i(f),ic=n(f,"H2",{class:!0});var LXe=s(ic);FT=n(LXe,"A",{id:!0,class:!0,href:!0});var ELt=s(FT);Gve=n(ELt,"SPAN",{});var CLt=s(Gve);T(M9.$$.fragment,CLt),CLt.forEach(t),ELt.forEach(t),R3r=i(LXe),Ove=n(LXe,"SPAN",{});var wLt=s(Ove);P3r=r(wLt,"TFAutoModelForImageClassification"),wLt.forEach(t),LXe.forEach(t),FOe=i(f),rr=n(f,"DIV",{class:!0});var yl=s(rr);T(E9.$$.fragment,yl),B3r=i(yl),dc=n(yl,"P",{});var rre=s(dc);I3r=r(rre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),EU=n(rre,"A",{href:!0});var ALt=s(EU);N3r=r(ALt,"from_pretrained()"),ALt.forEach(t),q3r=r(rre," class method or the "),CU=n(rre,"A",{href:!0});var LLt=s(CU);j3r=r(LLt,"from_config()"),LLt.forEach(t),D3r=r(rre,` class
method.`),rre.forEach(t),G3r=i(yl),C9=n(yl,"P",{});var yXe=s(C9);O3r=r(yXe,"This class cannot be instantiated directly using "),Vve=n(yXe,"CODE",{});var yLt=s(Vve);V3r=r(yLt,"__init__()"),yLt.forEach(t),X3r=r(yXe," (throws an error)."),yXe.forEach(t),z3r=i(yl),Rt=n(yl,"DIV",{class:!0});var CL=s(Rt);T(w9.$$.fragment,CL),W3r=i(CL),Xve=n(CL,"P",{});var xLt=s(Xve);Q3r=r(xLt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),xLt.forEach(t),H3r=i(CL),cc=n(CL,"P",{});var tre=s(cc);U3r=r(tre,`Note:
Loading a model from its configuration file does `),zve=n(tre,"STRONG",{});var $Lt=s(zve);J3r=r($Lt,"not"),$Lt.forEach(t),Y3r=r(tre,` load the model weights. It only affects the
model\u2019s configuration. Use `),wU=n(tre,"A",{href:!0});var kLt=s(wU);K3r=r(kLt,"from_pretrained()"),kLt.forEach(t),Z3r=r(tre," to load the model weights."),tre.forEach(t),eFr=i(CL),T(TT.$$.fragment,CL),CL.forEach(t),oFr=i(yl),$r=n(yl,"DIV",{class:!0});var xl=s($r);T(A9.$$.fragment,xl),rFr=i(xl),Wve=n(xl,"P",{});var SLt=s(Wve);tFr=r(SLt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),SLt.forEach(t),aFr=i(xl),sn=n(xl,"P",{});var wL=s(sn);nFr=r(wL,"The model class to instantiate is selected based on the "),Qve=n(wL,"CODE",{});var RLt=s(Qve);sFr=r(RLt,"model_type"),RLt.forEach(t),lFr=r(wL,` property of the config object (either
passed as an argument or loaded from `),Hve=n(wL,"CODE",{});var PLt=s(Hve);iFr=r(PLt,"pretrained_model_name_or_path"),PLt.forEach(t),dFr=r(wL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uve=n(wL,"CODE",{});var BLt=s(Uve);cFr=r(BLt,"pretrained_model_name_or_path"),BLt.forEach(t),fFr=r(wL,":"),wL.forEach(t),mFr=i(xl),ln=n(xl,"UL",{});var AL=s(ln);MT=n(AL,"LI",{});var XIe=s(MT);Jve=n(XIe,"STRONG",{});var ILt=s(Jve);gFr=r(ILt,"convnext"),ILt.forEach(t),hFr=r(XIe," \u2014 "),AU=n(XIe,"A",{href:!0});var NLt=s(AU);pFr=r(NLt,"TFConvNextForImageClassification"),NLt.forEach(t),uFr=r(XIe," (ConvNeXT model)"),XIe.forEach(t),_Fr=i(AL),ET=n(AL,"LI",{});var zIe=s(ET);Yve=n(zIe,"STRONG",{});var qLt=s(Yve);bFr=r(qLt,"data2vec-vision"),qLt.forEach(t),vFr=r(zIe," \u2014 "),LU=n(zIe,"A",{href:!0});var jLt=s(LU);FFr=r(jLt,"TFData2VecVisionForImageClassification"),jLt.forEach(t),TFr=r(zIe," (Data2VecVision model)"),zIe.forEach(t),MFr=i(AL),CT=n(AL,"LI",{});var WIe=s(CT);Kve=n(WIe,"STRONG",{});var DLt=s(Kve);EFr=r(DLt,"swin"),DLt.forEach(t),CFr=r(WIe," \u2014 "),yU=n(WIe,"A",{href:!0});var GLt=s(yU);wFr=r(GLt,"TFSwinForImageClassification"),GLt.forEach(t),AFr=r(WIe," (Swin Transformer model)"),WIe.forEach(t),LFr=i(AL),wT=n(AL,"LI",{});var QIe=s(wT);Zve=n(QIe,"STRONG",{});var OLt=s(Zve);yFr=r(OLt,"vit"),OLt.forEach(t),xFr=r(QIe," \u2014 "),xU=n(QIe,"A",{href:!0});var VLt=s(xU);$Fr=r(VLt,"TFViTForImageClassification"),VLt.forEach(t),kFr=r(QIe," (ViT model)"),QIe.forEach(t),AL.forEach(t),SFr=i(xl),T(AT.$$.fragment,xl),xl.forEach(t),yl.forEach(t),TOe=i(f),fc=n(f,"H2",{class:!0});var xXe=s(fc);LT=n(xXe,"A",{id:!0,class:!0,href:!0});var XLt=s(LT);e3e=n(XLt,"SPAN",{});var zLt=s(e3e);T(L9.$$.fragment,zLt),zLt.forEach(t),XLt.forEach(t),RFr=i(xXe),o3e=n(xXe,"SPAN",{});var WLt=s(o3e);PFr=r(WLt,"TFAutoModelForMaskedLM"),WLt.forEach(t),xXe.forEach(t),MOe=i(f),tr=n(f,"DIV",{class:!0});var $l=s(tr);T(y9.$$.fragment,$l),BFr=i($l),mc=n($l,"P",{});var are=s(mc);IFr=r(are,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),$U=n(are,"A",{href:!0});var QLt=s($U);NFr=r(QLt,"from_pretrained()"),QLt.forEach(t),qFr=r(are," class method or the "),kU=n(are,"A",{href:!0});var HLt=s(kU);jFr=r(HLt,"from_config()"),HLt.forEach(t),DFr=r(are,` class
method.`),are.forEach(t),GFr=i($l),x9=n($l,"P",{});var $Xe=s(x9);OFr=r($Xe,"This class cannot be instantiated directly using "),r3e=n($Xe,"CODE",{});var ULt=s(r3e);VFr=r(ULt,"__init__()"),ULt.forEach(t),XFr=r($Xe," (throws an error)."),$Xe.forEach(t),zFr=i($l),Pt=n($l,"DIV",{class:!0});var LL=s(Pt);T($9.$$.fragment,LL),WFr=i(LL),t3e=n(LL,"P",{});var JLt=s(t3e);QFr=r(JLt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),JLt.forEach(t),HFr=i(LL),gc=n(LL,"P",{});var nre=s(gc);UFr=r(nre,`Note:
Loading a model from its configuration file does `),a3e=n(nre,"STRONG",{});var YLt=s(a3e);JFr=r(YLt,"not"),YLt.forEach(t),YFr=r(nre,` load the model weights. It only affects the
model\u2019s configuration. Use `),SU=n(nre,"A",{href:!0});var KLt=s(SU);KFr=r(KLt,"from_pretrained()"),KLt.forEach(t),ZFr=r(nre," to load the model weights."),nre.forEach(t),e6r=i(LL),T(yT.$$.fragment,LL),LL.forEach(t),o6r=i($l),kr=n($l,"DIV",{class:!0});var kl=s(kr);T(k9.$$.fragment,kl),r6r=i(kl),n3e=n(kl,"P",{});var ZLt=s(n3e);t6r=r(ZLt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),ZLt.forEach(t),a6r=i(kl),dn=n(kl,"P",{});var yL=s(dn);n6r=r(yL,"The model class to instantiate is selected based on the "),s3e=n(yL,"CODE",{});var eyt=s(s3e);s6r=r(eyt,"model_type"),eyt.forEach(t),l6r=r(yL,` property of the config object (either
passed as an argument or loaded from `),l3e=n(yL,"CODE",{});var oyt=s(l3e);i6r=r(oyt,"pretrained_model_name_or_path"),oyt.forEach(t),d6r=r(yL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i3e=n(yL,"CODE",{});var ryt=s(i3e);c6r=r(ryt,"pretrained_model_name_or_path"),ryt.forEach(t),f6r=r(yL,":"),yL.forEach(t),m6r=i(kl),ie=n(kl,"UL",{});var fe=s(ie);xT=n(fe,"LI",{});var HIe=s(xT);d3e=n(HIe,"STRONG",{});var tyt=s(d3e);g6r=r(tyt,"albert"),tyt.forEach(t),h6r=r(HIe," \u2014 "),RU=n(HIe,"A",{href:!0});var ayt=s(RU);p6r=r(ayt,"TFAlbertForMaskedLM"),ayt.forEach(t),u6r=r(HIe," (ALBERT model)"),HIe.forEach(t),_6r=i(fe),$T=n(fe,"LI",{});var UIe=s($T);c3e=n(UIe,"STRONG",{});var nyt=s(c3e);b6r=r(nyt,"bert"),nyt.forEach(t),v6r=r(UIe," \u2014 "),PU=n(UIe,"A",{href:!0});var syt=s(PU);F6r=r(syt,"TFBertForMaskedLM"),syt.forEach(t),T6r=r(UIe," (BERT model)"),UIe.forEach(t),M6r=i(fe),kT=n(fe,"LI",{});var JIe=s(kT);f3e=n(JIe,"STRONG",{});var lyt=s(f3e);E6r=r(lyt,"camembert"),lyt.forEach(t),C6r=r(JIe," \u2014 "),BU=n(JIe,"A",{href:!0});var iyt=s(BU);w6r=r(iyt,"TFCamembertForMaskedLM"),iyt.forEach(t),A6r=r(JIe," (CamemBERT model)"),JIe.forEach(t),L6r=i(fe),ST=n(fe,"LI",{});var YIe=s(ST);m3e=n(YIe,"STRONG",{});var dyt=s(m3e);y6r=r(dyt,"convbert"),dyt.forEach(t),x6r=r(YIe," \u2014 "),IU=n(YIe,"A",{href:!0});var cyt=s(IU);$6r=r(cyt,"TFConvBertForMaskedLM"),cyt.forEach(t),k6r=r(YIe," (ConvBERT model)"),YIe.forEach(t),S6r=i(fe),RT=n(fe,"LI",{});var KIe=s(RT);g3e=n(KIe,"STRONG",{});var fyt=s(g3e);R6r=r(fyt,"deberta"),fyt.forEach(t),P6r=r(KIe," \u2014 "),NU=n(KIe,"A",{href:!0});var myt=s(NU);B6r=r(myt,"TFDebertaForMaskedLM"),myt.forEach(t),I6r=r(KIe," (DeBERTa model)"),KIe.forEach(t),N6r=i(fe),PT=n(fe,"LI",{});var ZIe=s(PT);h3e=n(ZIe,"STRONG",{});var gyt=s(h3e);q6r=r(gyt,"deberta-v2"),gyt.forEach(t),j6r=r(ZIe," \u2014 "),qU=n(ZIe,"A",{href:!0});var hyt=s(qU);D6r=r(hyt,"TFDebertaV2ForMaskedLM"),hyt.forEach(t),G6r=r(ZIe," (DeBERTa-v2 model)"),ZIe.forEach(t),O6r=i(fe),BT=n(fe,"LI",{});var eNe=s(BT);p3e=n(eNe,"STRONG",{});var pyt=s(p3e);V6r=r(pyt,"distilbert"),pyt.forEach(t),X6r=r(eNe," \u2014 "),jU=n(eNe,"A",{href:!0});var uyt=s(jU);z6r=r(uyt,"TFDistilBertForMaskedLM"),uyt.forEach(t),W6r=r(eNe," (DistilBERT model)"),eNe.forEach(t),Q6r=i(fe),IT=n(fe,"LI",{});var oNe=s(IT);u3e=n(oNe,"STRONG",{});var _yt=s(u3e);H6r=r(_yt,"electra"),_yt.forEach(t),U6r=r(oNe," \u2014 "),DU=n(oNe,"A",{href:!0});var byt=s(DU);J6r=r(byt,"TFElectraForMaskedLM"),byt.forEach(t),Y6r=r(oNe," (ELECTRA model)"),oNe.forEach(t),K6r=i(fe),NT=n(fe,"LI",{});var rNe=s(NT);_3e=n(rNe,"STRONG",{});var vyt=s(_3e);Z6r=r(vyt,"flaubert"),vyt.forEach(t),eTr=r(rNe," \u2014 "),GU=n(rNe,"A",{href:!0});var Fyt=s(GU);oTr=r(Fyt,"TFFlaubertWithLMHeadModel"),Fyt.forEach(t),rTr=r(rNe," (FlauBERT model)"),rNe.forEach(t),tTr=i(fe),qT=n(fe,"LI",{});var tNe=s(qT);b3e=n(tNe,"STRONG",{});var Tyt=s(b3e);aTr=r(Tyt,"funnel"),Tyt.forEach(t),nTr=r(tNe," \u2014 "),OU=n(tNe,"A",{href:!0});var Myt=s(OU);sTr=r(Myt,"TFFunnelForMaskedLM"),Myt.forEach(t),lTr=r(tNe," (Funnel Transformer model)"),tNe.forEach(t),iTr=i(fe),jT=n(fe,"LI",{});var aNe=s(jT);v3e=n(aNe,"STRONG",{});var Eyt=s(v3e);dTr=r(Eyt,"layoutlm"),Eyt.forEach(t),cTr=r(aNe," \u2014 "),VU=n(aNe,"A",{href:!0});var Cyt=s(VU);fTr=r(Cyt,"TFLayoutLMForMaskedLM"),Cyt.forEach(t),mTr=r(aNe," (LayoutLM model)"),aNe.forEach(t),gTr=i(fe),DT=n(fe,"LI",{});var nNe=s(DT);F3e=n(nNe,"STRONG",{});var wyt=s(F3e);hTr=r(wyt,"longformer"),wyt.forEach(t),pTr=r(nNe," \u2014 "),XU=n(nNe,"A",{href:!0});var Ayt=s(XU);uTr=r(Ayt,"TFLongformerForMaskedLM"),Ayt.forEach(t),_Tr=r(nNe," (Longformer model)"),nNe.forEach(t),bTr=i(fe),GT=n(fe,"LI",{});var sNe=s(GT);T3e=n(sNe,"STRONG",{});var Lyt=s(T3e);vTr=r(Lyt,"mobilebert"),Lyt.forEach(t),FTr=r(sNe," \u2014 "),zU=n(sNe,"A",{href:!0});var yyt=s(zU);TTr=r(yyt,"TFMobileBertForMaskedLM"),yyt.forEach(t),MTr=r(sNe," (MobileBERT model)"),sNe.forEach(t),ETr=i(fe),OT=n(fe,"LI",{});var lNe=s(OT);M3e=n(lNe,"STRONG",{});var xyt=s(M3e);CTr=r(xyt,"mpnet"),xyt.forEach(t),wTr=r(lNe," \u2014 "),WU=n(lNe,"A",{href:!0});var $yt=s(WU);ATr=r($yt,"TFMPNetForMaskedLM"),$yt.forEach(t),LTr=r(lNe," (MPNet model)"),lNe.forEach(t),yTr=i(fe),VT=n(fe,"LI",{});var iNe=s(VT);E3e=n(iNe,"STRONG",{});var kyt=s(E3e);xTr=r(kyt,"rembert"),kyt.forEach(t),$Tr=r(iNe," \u2014 "),QU=n(iNe,"A",{href:!0});var Syt=s(QU);kTr=r(Syt,"TFRemBertForMaskedLM"),Syt.forEach(t),STr=r(iNe," (RemBERT model)"),iNe.forEach(t),RTr=i(fe),XT=n(fe,"LI",{});var dNe=s(XT);C3e=n(dNe,"STRONG",{});var Ryt=s(C3e);PTr=r(Ryt,"roberta"),Ryt.forEach(t),BTr=r(dNe," \u2014 "),HU=n(dNe,"A",{href:!0});var Pyt=s(HU);ITr=r(Pyt,"TFRobertaForMaskedLM"),Pyt.forEach(t),NTr=r(dNe," (RoBERTa model)"),dNe.forEach(t),qTr=i(fe),zT=n(fe,"LI",{});var cNe=s(zT);w3e=n(cNe,"STRONG",{});var Byt=s(w3e);jTr=r(Byt,"roformer"),Byt.forEach(t),DTr=r(cNe," \u2014 "),UU=n(cNe,"A",{href:!0});var Iyt=s(UU);GTr=r(Iyt,"TFRoFormerForMaskedLM"),Iyt.forEach(t),OTr=r(cNe," (RoFormer model)"),cNe.forEach(t),VTr=i(fe),WT=n(fe,"LI",{});var fNe=s(WT);A3e=n(fNe,"STRONG",{});var Nyt=s(A3e);XTr=r(Nyt,"tapas"),Nyt.forEach(t),zTr=r(fNe," \u2014 "),JU=n(fNe,"A",{href:!0});var qyt=s(JU);WTr=r(qyt,"TFTapasForMaskedLM"),qyt.forEach(t),QTr=r(fNe," (TAPAS model)"),fNe.forEach(t),HTr=i(fe),QT=n(fe,"LI",{});var mNe=s(QT);L3e=n(mNe,"STRONG",{});var jyt=s(L3e);UTr=r(jyt,"xlm"),jyt.forEach(t),JTr=r(mNe," \u2014 "),YU=n(mNe,"A",{href:!0});var Dyt=s(YU);YTr=r(Dyt,"TFXLMWithLMHeadModel"),Dyt.forEach(t),KTr=r(mNe," (XLM model)"),mNe.forEach(t),ZTr=i(fe),HT=n(fe,"LI",{});var gNe=s(HT);y3e=n(gNe,"STRONG",{});var Gyt=s(y3e);eMr=r(Gyt,"xlm-roberta"),Gyt.forEach(t),oMr=r(gNe," \u2014 "),KU=n(gNe,"A",{href:!0});var Oyt=s(KU);rMr=r(Oyt,"TFXLMRobertaForMaskedLM"),Oyt.forEach(t),tMr=r(gNe," (XLM-RoBERTa model)"),gNe.forEach(t),fe.forEach(t),aMr=i(kl),T(UT.$$.fragment,kl),kl.forEach(t),$l.forEach(t),EOe=i(f),hc=n(f,"H2",{class:!0});var kXe=s(hc);JT=n(kXe,"A",{id:!0,class:!0,href:!0});var Vyt=s(JT);x3e=n(Vyt,"SPAN",{});var Xyt=s(x3e);T(S9.$$.fragment,Xyt),Xyt.forEach(t),Vyt.forEach(t),nMr=i(kXe),$3e=n(kXe,"SPAN",{});var zyt=s($3e);sMr=r(zyt,"TFAutoModelForSeq2SeqLM"),zyt.forEach(t),kXe.forEach(t),COe=i(f),ar=n(f,"DIV",{class:!0});var Sl=s(ar);T(R9.$$.fragment,Sl),lMr=i(Sl),pc=n(Sl,"P",{});var sre=s(pc);iMr=r(sre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),ZU=n(sre,"A",{href:!0});var Wyt=s(ZU);dMr=r(Wyt,"from_pretrained()"),Wyt.forEach(t),cMr=r(sre," class method or the "),eJ=n(sre,"A",{href:!0});var Qyt=s(eJ);fMr=r(Qyt,"from_config()"),Qyt.forEach(t),mMr=r(sre,` class
method.`),sre.forEach(t),gMr=i(Sl),P9=n(Sl,"P",{});var SXe=s(P9);hMr=r(SXe,"This class cannot be instantiated directly using "),k3e=n(SXe,"CODE",{});var Hyt=s(k3e);pMr=r(Hyt,"__init__()"),Hyt.forEach(t),uMr=r(SXe," (throws an error)."),SXe.forEach(t),_Mr=i(Sl),Bt=n(Sl,"DIV",{class:!0});var xL=s(Bt);T(B9.$$.fragment,xL),bMr=i(xL),S3e=n(xL,"P",{});var Uyt=s(S3e);vMr=r(Uyt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Uyt.forEach(t),FMr=i(xL),uc=n(xL,"P",{});var lre=s(uc);TMr=r(lre,`Note:
Loading a model from its configuration file does `),R3e=n(lre,"STRONG",{});var Jyt=s(R3e);MMr=r(Jyt,"not"),Jyt.forEach(t),EMr=r(lre,` load the model weights. It only affects the
model\u2019s configuration. Use `),oJ=n(lre,"A",{href:!0});var Yyt=s(oJ);CMr=r(Yyt,"from_pretrained()"),Yyt.forEach(t),wMr=r(lre," to load the model weights."),lre.forEach(t),AMr=i(xL),T(YT.$$.fragment,xL),xL.forEach(t),LMr=i(Sl),Sr=n(Sl,"DIV",{class:!0});var Rl=s(Sr);T(I9.$$.fragment,Rl),yMr=i(Rl),P3e=n(Rl,"P",{});var Kyt=s(P3e);xMr=r(Kyt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Kyt.forEach(t),$Mr=i(Rl),cn=n(Rl,"P",{});var $L=s(cn);kMr=r($L,"The model class to instantiate is selected based on the "),B3e=n($L,"CODE",{});var Zyt=s(B3e);SMr=r(Zyt,"model_type"),Zyt.forEach(t),RMr=r($L,` property of the config object (either
passed as an argument or loaded from `),I3e=n($L,"CODE",{});var e7t=s(I3e);PMr=r(e7t,"pretrained_model_name_or_path"),e7t.forEach(t),BMr=r($L,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N3e=n($L,"CODE",{});var o7t=s(N3e);IMr=r(o7t,"pretrained_model_name_or_path"),o7t.forEach(t),NMr=r($L,":"),$L.forEach(t),qMr=i(Rl),ye=n(Rl,"UL",{});var Ie=s(ye);KT=n(Ie,"LI",{});var hNe=s(KT);q3e=n(hNe,"STRONG",{});var r7t=s(q3e);jMr=r(r7t,"bart"),r7t.forEach(t),DMr=r(hNe," \u2014 "),rJ=n(hNe,"A",{href:!0});var t7t=s(rJ);GMr=r(t7t,"TFBartForConditionalGeneration"),t7t.forEach(t),OMr=r(hNe," (BART model)"),hNe.forEach(t),VMr=i(Ie),ZT=n(Ie,"LI",{});var pNe=s(ZT);j3e=n(pNe,"STRONG",{});var a7t=s(j3e);XMr=r(a7t,"blenderbot"),a7t.forEach(t),zMr=r(pNe," \u2014 "),tJ=n(pNe,"A",{href:!0});var n7t=s(tJ);WMr=r(n7t,"TFBlenderbotForConditionalGeneration"),n7t.forEach(t),QMr=r(pNe," (Blenderbot model)"),pNe.forEach(t),HMr=i(Ie),eM=n(Ie,"LI",{});var uNe=s(eM);D3e=n(uNe,"STRONG",{});var s7t=s(D3e);UMr=r(s7t,"blenderbot-small"),s7t.forEach(t),JMr=r(uNe," \u2014 "),aJ=n(uNe,"A",{href:!0});var l7t=s(aJ);YMr=r(l7t,"TFBlenderbotSmallForConditionalGeneration"),l7t.forEach(t),KMr=r(uNe," (BlenderbotSmall model)"),uNe.forEach(t),ZMr=i(Ie),oM=n(Ie,"LI",{});var _Ne=s(oM);G3e=n(_Ne,"STRONG",{});var i7t=s(G3e);eEr=r(i7t,"encoder-decoder"),i7t.forEach(t),oEr=r(_Ne," \u2014 "),nJ=n(_Ne,"A",{href:!0});var d7t=s(nJ);rEr=r(d7t,"TFEncoderDecoderModel"),d7t.forEach(t),tEr=r(_Ne," (Encoder decoder model)"),_Ne.forEach(t),aEr=i(Ie),rM=n(Ie,"LI",{});var bNe=s(rM);O3e=n(bNe,"STRONG",{});var c7t=s(O3e);nEr=r(c7t,"led"),c7t.forEach(t),sEr=r(bNe," \u2014 "),sJ=n(bNe,"A",{href:!0});var f7t=s(sJ);lEr=r(f7t,"TFLEDForConditionalGeneration"),f7t.forEach(t),iEr=r(bNe," (LED model)"),bNe.forEach(t),dEr=i(Ie),tM=n(Ie,"LI",{});var vNe=s(tM);V3e=n(vNe,"STRONG",{});var m7t=s(V3e);cEr=r(m7t,"marian"),m7t.forEach(t),fEr=r(vNe," \u2014 "),lJ=n(vNe,"A",{href:!0});var g7t=s(lJ);mEr=r(g7t,"TFMarianMTModel"),g7t.forEach(t),gEr=r(vNe," (Marian model)"),vNe.forEach(t),hEr=i(Ie),aM=n(Ie,"LI",{});var FNe=s(aM);X3e=n(FNe,"STRONG",{});var h7t=s(X3e);pEr=r(h7t,"mbart"),h7t.forEach(t),uEr=r(FNe," \u2014 "),iJ=n(FNe,"A",{href:!0});var p7t=s(iJ);_Er=r(p7t,"TFMBartForConditionalGeneration"),p7t.forEach(t),bEr=r(FNe," (mBART model)"),FNe.forEach(t),vEr=i(Ie),nM=n(Ie,"LI",{});var TNe=s(nM);z3e=n(TNe,"STRONG",{});var u7t=s(z3e);FEr=r(u7t,"mt5"),u7t.forEach(t),TEr=r(TNe," \u2014 "),dJ=n(TNe,"A",{href:!0});var _7t=s(dJ);MEr=r(_7t,"TFMT5ForConditionalGeneration"),_7t.forEach(t),EEr=r(TNe," (MT5 model)"),TNe.forEach(t),CEr=i(Ie),sM=n(Ie,"LI",{});var MNe=s(sM);W3e=n(MNe,"STRONG",{});var b7t=s(W3e);wEr=r(b7t,"pegasus"),b7t.forEach(t),AEr=r(MNe," \u2014 "),cJ=n(MNe,"A",{href:!0});var v7t=s(cJ);LEr=r(v7t,"TFPegasusForConditionalGeneration"),v7t.forEach(t),yEr=r(MNe," (Pegasus model)"),MNe.forEach(t),xEr=i(Ie),lM=n(Ie,"LI",{});var ENe=s(lM);Q3e=n(ENe,"STRONG",{});var F7t=s(Q3e);$Er=r(F7t,"t5"),F7t.forEach(t),kEr=r(ENe," \u2014 "),fJ=n(ENe,"A",{href:!0});var T7t=s(fJ);SEr=r(T7t,"TFT5ForConditionalGeneration"),T7t.forEach(t),REr=r(ENe," (T5 model)"),ENe.forEach(t),Ie.forEach(t),PEr=i(Rl),T(iM.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),wOe=i(f),_c=n(f,"H2",{class:!0});var RXe=s(_c);dM=n(RXe,"A",{id:!0,class:!0,href:!0});var M7t=s(dM);H3e=n(M7t,"SPAN",{});var E7t=s(H3e);T(N9.$$.fragment,E7t),E7t.forEach(t),M7t.forEach(t),BEr=i(RXe),U3e=n(RXe,"SPAN",{});var C7t=s(U3e);IEr=r(C7t,"TFAutoModelForSequenceClassification"),C7t.forEach(t),RXe.forEach(t),AOe=i(f),nr=n(f,"DIV",{class:!0});var Pl=s(nr);T(q9.$$.fragment,Pl),NEr=i(Pl),bc=n(Pl,"P",{});var ire=s(bc);qEr=r(ire,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),mJ=n(ire,"A",{href:!0});var w7t=s(mJ);jEr=r(w7t,"from_pretrained()"),w7t.forEach(t),DEr=r(ire," class method or the "),gJ=n(ire,"A",{href:!0});var A7t=s(gJ);GEr=r(A7t,"from_config()"),A7t.forEach(t),OEr=r(ire,` class
method.`),ire.forEach(t),VEr=i(Pl),j9=n(Pl,"P",{});var PXe=s(j9);XEr=r(PXe,"This class cannot be instantiated directly using "),J3e=n(PXe,"CODE",{});var L7t=s(J3e);zEr=r(L7t,"__init__()"),L7t.forEach(t),WEr=r(PXe," (throws an error)."),PXe.forEach(t),QEr=i(Pl),It=n(Pl,"DIV",{class:!0});var kL=s(It);T(D9.$$.fragment,kL),HEr=i(kL),Y3e=n(kL,"P",{});var y7t=s(Y3e);UEr=r(y7t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),y7t.forEach(t),JEr=i(kL),vc=n(kL,"P",{});var dre=s(vc);YEr=r(dre,`Note:
Loading a model from its configuration file does `),K3e=n(dre,"STRONG",{});var x7t=s(K3e);KEr=r(x7t,"not"),x7t.forEach(t),ZEr=r(dre,` load the model weights. It only affects the
model\u2019s configuration. Use `),hJ=n(dre,"A",{href:!0});var $7t=s(hJ);eCr=r($7t,"from_pretrained()"),$7t.forEach(t),oCr=r(dre," to load the model weights."),dre.forEach(t),rCr=i(kL),T(cM.$$.fragment,kL),kL.forEach(t),tCr=i(Pl),Rr=n(Pl,"DIV",{class:!0});var Bl=s(Rr);T(G9.$$.fragment,Bl),aCr=i(Bl),Z3e=n(Bl,"P",{});var k7t=s(Z3e);nCr=r(k7t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),k7t.forEach(t),sCr=i(Bl),fn=n(Bl,"P",{});var SL=s(fn);lCr=r(SL,"The model class to instantiate is selected based on the "),eFe=n(SL,"CODE",{});var S7t=s(eFe);iCr=r(S7t,"model_type"),S7t.forEach(t),dCr=r(SL,` property of the config object (either
passed as an argument or loaded from `),oFe=n(SL,"CODE",{});var R7t=s(oFe);cCr=r(R7t,"pretrained_model_name_or_path"),R7t.forEach(t),fCr=r(SL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rFe=n(SL,"CODE",{});var P7t=s(rFe);mCr=r(P7t,"pretrained_model_name_or_path"),P7t.forEach(t),gCr=r(SL,":"),SL.forEach(t),hCr=i(Bl),te=n(Bl,"UL",{});var ne=s(te);fM=n(ne,"LI",{});var CNe=s(fM);tFe=n(CNe,"STRONG",{});var B7t=s(tFe);pCr=r(B7t,"albert"),B7t.forEach(t),uCr=r(CNe," \u2014 "),pJ=n(CNe,"A",{href:!0});var I7t=s(pJ);_Cr=r(I7t,"TFAlbertForSequenceClassification"),I7t.forEach(t),bCr=r(CNe," (ALBERT model)"),CNe.forEach(t),vCr=i(ne),mM=n(ne,"LI",{});var wNe=s(mM);aFe=n(wNe,"STRONG",{});var N7t=s(aFe);FCr=r(N7t,"bert"),N7t.forEach(t),TCr=r(wNe," \u2014 "),uJ=n(wNe,"A",{href:!0});var q7t=s(uJ);MCr=r(q7t,"TFBertForSequenceClassification"),q7t.forEach(t),ECr=r(wNe," (BERT model)"),wNe.forEach(t),CCr=i(ne),gM=n(ne,"LI",{});var ANe=s(gM);nFe=n(ANe,"STRONG",{});var j7t=s(nFe);wCr=r(j7t,"camembert"),j7t.forEach(t),ACr=r(ANe," \u2014 "),_J=n(ANe,"A",{href:!0});var D7t=s(_J);LCr=r(D7t,"TFCamembertForSequenceClassification"),D7t.forEach(t),yCr=r(ANe," (CamemBERT model)"),ANe.forEach(t),xCr=i(ne),hM=n(ne,"LI",{});var LNe=s(hM);sFe=n(LNe,"STRONG",{});var G7t=s(sFe);$Cr=r(G7t,"convbert"),G7t.forEach(t),kCr=r(LNe," \u2014 "),bJ=n(LNe,"A",{href:!0});var O7t=s(bJ);SCr=r(O7t,"TFConvBertForSequenceClassification"),O7t.forEach(t),RCr=r(LNe," (ConvBERT model)"),LNe.forEach(t),PCr=i(ne),pM=n(ne,"LI",{});var yNe=s(pM);lFe=n(yNe,"STRONG",{});var V7t=s(lFe);BCr=r(V7t,"ctrl"),V7t.forEach(t),ICr=r(yNe," \u2014 "),vJ=n(yNe,"A",{href:!0});var X7t=s(vJ);NCr=r(X7t,"TFCTRLForSequenceClassification"),X7t.forEach(t),qCr=r(yNe," (CTRL model)"),yNe.forEach(t),jCr=i(ne),uM=n(ne,"LI",{});var xNe=s(uM);iFe=n(xNe,"STRONG",{});var z7t=s(iFe);DCr=r(z7t,"deberta"),z7t.forEach(t),GCr=r(xNe," \u2014 "),FJ=n(xNe,"A",{href:!0});var W7t=s(FJ);OCr=r(W7t,"TFDebertaForSequenceClassification"),W7t.forEach(t),VCr=r(xNe," (DeBERTa model)"),xNe.forEach(t),XCr=i(ne),_M=n(ne,"LI",{});var $Ne=s(_M);dFe=n($Ne,"STRONG",{});var Q7t=s(dFe);zCr=r(Q7t,"deberta-v2"),Q7t.forEach(t),WCr=r($Ne," \u2014 "),TJ=n($Ne,"A",{href:!0});var H7t=s(TJ);QCr=r(H7t,"TFDebertaV2ForSequenceClassification"),H7t.forEach(t),HCr=r($Ne," (DeBERTa-v2 model)"),$Ne.forEach(t),UCr=i(ne),bM=n(ne,"LI",{});var kNe=s(bM);cFe=n(kNe,"STRONG",{});var U7t=s(cFe);JCr=r(U7t,"distilbert"),U7t.forEach(t),YCr=r(kNe," \u2014 "),MJ=n(kNe,"A",{href:!0});var J7t=s(MJ);KCr=r(J7t,"TFDistilBertForSequenceClassification"),J7t.forEach(t),ZCr=r(kNe," (DistilBERT model)"),kNe.forEach(t),e0r=i(ne),vM=n(ne,"LI",{});var SNe=s(vM);fFe=n(SNe,"STRONG",{});var Y7t=s(fFe);o0r=r(Y7t,"electra"),Y7t.forEach(t),r0r=r(SNe," \u2014 "),EJ=n(SNe,"A",{href:!0});var K7t=s(EJ);t0r=r(K7t,"TFElectraForSequenceClassification"),K7t.forEach(t),a0r=r(SNe," (ELECTRA model)"),SNe.forEach(t),n0r=i(ne),FM=n(ne,"LI",{});var RNe=s(FM);mFe=n(RNe,"STRONG",{});var Z7t=s(mFe);s0r=r(Z7t,"flaubert"),Z7t.forEach(t),l0r=r(RNe," \u2014 "),CJ=n(RNe,"A",{href:!0});var e8t=s(CJ);i0r=r(e8t,"TFFlaubertForSequenceClassification"),e8t.forEach(t),d0r=r(RNe," (FlauBERT model)"),RNe.forEach(t),c0r=i(ne),TM=n(ne,"LI",{});var PNe=s(TM);gFe=n(PNe,"STRONG",{});var o8t=s(gFe);f0r=r(o8t,"funnel"),o8t.forEach(t),m0r=r(PNe," \u2014 "),wJ=n(PNe,"A",{href:!0});var r8t=s(wJ);g0r=r(r8t,"TFFunnelForSequenceClassification"),r8t.forEach(t),h0r=r(PNe," (Funnel Transformer model)"),PNe.forEach(t),p0r=i(ne),MM=n(ne,"LI",{});var BNe=s(MM);hFe=n(BNe,"STRONG",{});var t8t=s(hFe);u0r=r(t8t,"gpt2"),t8t.forEach(t),_0r=r(BNe," \u2014 "),AJ=n(BNe,"A",{href:!0});var a8t=s(AJ);b0r=r(a8t,"TFGPT2ForSequenceClassification"),a8t.forEach(t),v0r=r(BNe," (OpenAI GPT-2 model)"),BNe.forEach(t),F0r=i(ne),EM=n(ne,"LI",{});var INe=s(EM);pFe=n(INe,"STRONG",{});var n8t=s(pFe);T0r=r(n8t,"gptj"),n8t.forEach(t),M0r=r(INe," \u2014 "),LJ=n(INe,"A",{href:!0});var s8t=s(LJ);E0r=r(s8t,"TFGPTJForSequenceClassification"),s8t.forEach(t),C0r=r(INe," (GPT-J model)"),INe.forEach(t),w0r=i(ne),CM=n(ne,"LI",{});var NNe=s(CM);uFe=n(NNe,"STRONG",{});var l8t=s(uFe);A0r=r(l8t,"layoutlm"),l8t.forEach(t),L0r=r(NNe," \u2014 "),yJ=n(NNe,"A",{href:!0});var i8t=s(yJ);y0r=r(i8t,"TFLayoutLMForSequenceClassification"),i8t.forEach(t),x0r=r(NNe," (LayoutLM model)"),NNe.forEach(t),$0r=i(ne),wM=n(ne,"LI",{});var qNe=s(wM);_Fe=n(qNe,"STRONG",{});var d8t=s(_Fe);k0r=r(d8t,"longformer"),d8t.forEach(t),S0r=r(qNe," \u2014 "),xJ=n(qNe,"A",{href:!0});var c8t=s(xJ);R0r=r(c8t,"TFLongformerForSequenceClassification"),c8t.forEach(t),P0r=r(qNe," (Longformer model)"),qNe.forEach(t),B0r=i(ne),AM=n(ne,"LI",{});var jNe=s(AM);bFe=n(jNe,"STRONG",{});var f8t=s(bFe);I0r=r(f8t,"mobilebert"),f8t.forEach(t),N0r=r(jNe," \u2014 "),$J=n(jNe,"A",{href:!0});var m8t=s($J);q0r=r(m8t,"TFMobileBertForSequenceClassification"),m8t.forEach(t),j0r=r(jNe," (MobileBERT model)"),jNe.forEach(t),D0r=i(ne),LM=n(ne,"LI",{});var DNe=s(LM);vFe=n(DNe,"STRONG",{});var g8t=s(vFe);G0r=r(g8t,"mpnet"),g8t.forEach(t),O0r=r(DNe," \u2014 "),kJ=n(DNe,"A",{href:!0});var h8t=s(kJ);V0r=r(h8t,"TFMPNetForSequenceClassification"),h8t.forEach(t),X0r=r(DNe," (MPNet model)"),DNe.forEach(t),z0r=i(ne),yM=n(ne,"LI",{});var GNe=s(yM);FFe=n(GNe,"STRONG",{});var p8t=s(FFe);W0r=r(p8t,"openai-gpt"),p8t.forEach(t),Q0r=r(GNe," \u2014 "),SJ=n(GNe,"A",{href:!0});var u8t=s(SJ);H0r=r(u8t,"TFOpenAIGPTForSequenceClassification"),u8t.forEach(t),U0r=r(GNe," (OpenAI GPT model)"),GNe.forEach(t),J0r=i(ne),xM=n(ne,"LI",{});var ONe=s(xM);TFe=n(ONe,"STRONG",{});var _8t=s(TFe);Y0r=r(_8t,"rembert"),_8t.forEach(t),K0r=r(ONe," \u2014 "),RJ=n(ONe,"A",{href:!0});var b8t=s(RJ);Z0r=r(b8t,"TFRemBertForSequenceClassification"),b8t.forEach(t),ewr=r(ONe," (RemBERT model)"),ONe.forEach(t),owr=i(ne),$M=n(ne,"LI",{});var VNe=s($M);MFe=n(VNe,"STRONG",{});var v8t=s(MFe);rwr=r(v8t,"roberta"),v8t.forEach(t),twr=r(VNe," \u2014 "),PJ=n(VNe,"A",{href:!0});var F8t=s(PJ);awr=r(F8t,"TFRobertaForSequenceClassification"),F8t.forEach(t),nwr=r(VNe," (RoBERTa model)"),VNe.forEach(t),swr=i(ne),kM=n(ne,"LI",{});var XNe=s(kM);EFe=n(XNe,"STRONG",{});var T8t=s(EFe);lwr=r(T8t,"roformer"),T8t.forEach(t),iwr=r(XNe," \u2014 "),BJ=n(XNe,"A",{href:!0});var M8t=s(BJ);dwr=r(M8t,"TFRoFormerForSequenceClassification"),M8t.forEach(t),cwr=r(XNe," (RoFormer model)"),XNe.forEach(t),fwr=i(ne),SM=n(ne,"LI",{});var zNe=s(SM);CFe=n(zNe,"STRONG",{});var E8t=s(CFe);mwr=r(E8t,"tapas"),E8t.forEach(t),gwr=r(zNe," \u2014 "),IJ=n(zNe,"A",{href:!0});var C8t=s(IJ);hwr=r(C8t,"TFTapasForSequenceClassification"),C8t.forEach(t),pwr=r(zNe," (TAPAS model)"),zNe.forEach(t),uwr=i(ne),RM=n(ne,"LI",{});var WNe=s(RM);wFe=n(WNe,"STRONG",{});var w8t=s(wFe);_wr=r(w8t,"transfo-xl"),w8t.forEach(t),bwr=r(WNe," \u2014 "),NJ=n(WNe,"A",{href:!0});var A8t=s(NJ);vwr=r(A8t,"TFTransfoXLForSequenceClassification"),A8t.forEach(t),Fwr=r(WNe," (Transformer-XL model)"),WNe.forEach(t),Twr=i(ne),PM=n(ne,"LI",{});var QNe=s(PM);AFe=n(QNe,"STRONG",{});var L8t=s(AFe);Mwr=r(L8t,"xlm"),L8t.forEach(t),Ewr=r(QNe," \u2014 "),qJ=n(QNe,"A",{href:!0});var y8t=s(qJ);Cwr=r(y8t,"TFXLMForSequenceClassification"),y8t.forEach(t),wwr=r(QNe," (XLM model)"),QNe.forEach(t),Awr=i(ne),BM=n(ne,"LI",{});var HNe=s(BM);LFe=n(HNe,"STRONG",{});var x8t=s(LFe);Lwr=r(x8t,"xlm-roberta"),x8t.forEach(t),ywr=r(HNe," \u2014 "),jJ=n(HNe,"A",{href:!0});var $8t=s(jJ);xwr=r($8t,"TFXLMRobertaForSequenceClassification"),$8t.forEach(t),$wr=r(HNe," (XLM-RoBERTa model)"),HNe.forEach(t),kwr=i(ne),IM=n(ne,"LI",{});var UNe=s(IM);yFe=n(UNe,"STRONG",{});var k8t=s(yFe);Swr=r(k8t,"xlnet"),k8t.forEach(t),Rwr=r(UNe," \u2014 "),DJ=n(UNe,"A",{href:!0});var S8t=s(DJ);Pwr=r(S8t,"TFXLNetForSequenceClassification"),S8t.forEach(t),Bwr=r(UNe," (XLNet model)"),UNe.forEach(t),ne.forEach(t),Iwr=i(Bl),T(NM.$$.fragment,Bl),Bl.forEach(t),Pl.forEach(t),LOe=i(f),Fc=n(f,"H2",{class:!0});var BXe=s(Fc);qM=n(BXe,"A",{id:!0,class:!0,href:!0});var R8t=s(qM);xFe=n(R8t,"SPAN",{});var P8t=s(xFe);T(O9.$$.fragment,P8t),P8t.forEach(t),R8t.forEach(t),Nwr=i(BXe),$Fe=n(BXe,"SPAN",{});var B8t=s($Fe);qwr=r(B8t,"TFAutoModelForMultipleChoice"),B8t.forEach(t),BXe.forEach(t),yOe=i(f),sr=n(f,"DIV",{class:!0});var Il=s(sr);T(V9.$$.fragment,Il),jwr=i(Il),Tc=n(Il,"P",{});var cre=s(Tc);Dwr=r(cre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),GJ=n(cre,"A",{href:!0});var I8t=s(GJ);Gwr=r(I8t,"from_pretrained()"),I8t.forEach(t),Owr=r(cre," class method or the "),OJ=n(cre,"A",{href:!0});var N8t=s(OJ);Vwr=r(N8t,"from_config()"),N8t.forEach(t),Xwr=r(cre,` class
method.`),cre.forEach(t),zwr=i(Il),X9=n(Il,"P",{});var IXe=s(X9);Wwr=r(IXe,"This class cannot be instantiated directly using "),kFe=n(IXe,"CODE",{});var q8t=s(kFe);Qwr=r(q8t,"__init__()"),q8t.forEach(t),Hwr=r(IXe," (throws an error)."),IXe.forEach(t),Uwr=i(Il),Nt=n(Il,"DIV",{class:!0});var RL=s(Nt);T(z9.$$.fragment,RL),Jwr=i(RL),SFe=n(RL,"P",{});var j8t=s(SFe);Ywr=r(j8t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),j8t.forEach(t),Kwr=i(RL),Mc=n(RL,"P",{});var fre=s(Mc);Zwr=r(fre,`Note:
Loading a model from its configuration file does `),RFe=n(fre,"STRONG",{});var D8t=s(RFe);eAr=r(D8t,"not"),D8t.forEach(t),oAr=r(fre,` load the model weights. It only affects the
model\u2019s configuration. Use `),VJ=n(fre,"A",{href:!0});var G8t=s(VJ);rAr=r(G8t,"from_pretrained()"),G8t.forEach(t),tAr=r(fre," to load the model weights."),fre.forEach(t),aAr=i(RL),T(jM.$$.fragment,RL),RL.forEach(t),nAr=i(Il),Pr=n(Il,"DIV",{class:!0});var Nl=s(Pr);T(W9.$$.fragment,Nl),sAr=i(Nl),PFe=n(Nl,"P",{});var O8t=s(PFe);lAr=r(O8t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),O8t.forEach(t),iAr=i(Nl),mn=n(Nl,"P",{});var PL=s(mn);dAr=r(PL,"The model class to instantiate is selected based on the "),BFe=n(PL,"CODE",{});var V8t=s(BFe);cAr=r(V8t,"model_type"),V8t.forEach(t),fAr=r(PL,` property of the config object (either
passed as an argument or loaded from `),IFe=n(PL,"CODE",{});var X8t=s(IFe);mAr=r(X8t,"pretrained_model_name_or_path"),X8t.forEach(t),gAr=r(PL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NFe=n(PL,"CODE",{});var z8t=s(NFe);hAr=r(z8t,"pretrained_model_name_or_path"),z8t.forEach(t),pAr=r(PL,":"),PL.forEach(t),uAr=i(Nl),ue=n(Nl,"UL",{});var ve=s(ue);DM=n(ve,"LI",{});var JNe=s(DM);qFe=n(JNe,"STRONG",{});var W8t=s(qFe);_Ar=r(W8t,"albert"),W8t.forEach(t),bAr=r(JNe," \u2014 "),XJ=n(JNe,"A",{href:!0});var Q8t=s(XJ);vAr=r(Q8t,"TFAlbertForMultipleChoice"),Q8t.forEach(t),FAr=r(JNe," (ALBERT model)"),JNe.forEach(t),TAr=i(ve),GM=n(ve,"LI",{});var YNe=s(GM);jFe=n(YNe,"STRONG",{});var H8t=s(jFe);MAr=r(H8t,"bert"),H8t.forEach(t),EAr=r(YNe," \u2014 "),zJ=n(YNe,"A",{href:!0});var U8t=s(zJ);CAr=r(U8t,"TFBertForMultipleChoice"),U8t.forEach(t),wAr=r(YNe," (BERT model)"),YNe.forEach(t),AAr=i(ve),OM=n(ve,"LI",{});var KNe=s(OM);DFe=n(KNe,"STRONG",{});var J8t=s(DFe);LAr=r(J8t,"camembert"),J8t.forEach(t),yAr=r(KNe," \u2014 "),WJ=n(KNe,"A",{href:!0});var Y8t=s(WJ);xAr=r(Y8t,"TFCamembertForMultipleChoice"),Y8t.forEach(t),$Ar=r(KNe," (CamemBERT model)"),KNe.forEach(t),kAr=i(ve),VM=n(ve,"LI",{});var ZNe=s(VM);GFe=n(ZNe,"STRONG",{});var K8t=s(GFe);SAr=r(K8t,"convbert"),K8t.forEach(t),RAr=r(ZNe," \u2014 "),QJ=n(ZNe,"A",{href:!0});var Z8t=s(QJ);PAr=r(Z8t,"TFConvBertForMultipleChoice"),Z8t.forEach(t),BAr=r(ZNe," (ConvBERT model)"),ZNe.forEach(t),IAr=i(ve),XM=n(ve,"LI",{});var eqe=s(XM);OFe=n(eqe,"STRONG",{});var e9t=s(OFe);NAr=r(e9t,"distilbert"),e9t.forEach(t),qAr=r(eqe," \u2014 "),HJ=n(eqe,"A",{href:!0});var o9t=s(HJ);jAr=r(o9t,"TFDistilBertForMultipleChoice"),o9t.forEach(t),DAr=r(eqe," (DistilBERT model)"),eqe.forEach(t),GAr=i(ve),zM=n(ve,"LI",{});var oqe=s(zM);VFe=n(oqe,"STRONG",{});var r9t=s(VFe);OAr=r(r9t,"electra"),r9t.forEach(t),VAr=r(oqe," \u2014 "),UJ=n(oqe,"A",{href:!0});var t9t=s(UJ);XAr=r(t9t,"TFElectraForMultipleChoice"),t9t.forEach(t),zAr=r(oqe," (ELECTRA model)"),oqe.forEach(t),WAr=i(ve),WM=n(ve,"LI",{});var rqe=s(WM);XFe=n(rqe,"STRONG",{});var a9t=s(XFe);QAr=r(a9t,"flaubert"),a9t.forEach(t),HAr=r(rqe," \u2014 "),JJ=n(rqe,"A",{href:!0});var n9t=s(JJ);UAr=r(n9t,"TFFlaubertForMultipleChoice"),n9t.forEach(t),JAr=r(rqe," (FlauBERT model)"),rqe.forEach(t),YAr=i(ve),QM=n(ve,"LI",{});var tqe=s(QM);zFe=n(tqe,"STRONG",{});var s9t=s(zFe);KAr=r(s9t,"funnel"),s9t.forEach(t),ZAr=r(tqe," \u2014 "),YJ=n(tqe,"A",{href:!0});var l9t=s(YJ);eLr=r(l9t,"TFFunnelForMultipleChoice"),l9t.forEach(t),oLr=r(tqe," (Funnel Transformer model)"),tqe.forEach(t),rLr=i(ve),HM=n(ve,"LI",{});var aqe=s(HM);WFe=n(aqe,"STRONG",{});var i9t=s(WFe);tLr=r(i9t,"longformer"),i9t.forEach(t),aLr=r(aqe," \u2014 "),KJ=n(aqe,"A",{href:!0});var d9t=s(KJ);nLr=r(d9t,"TFLongformerForMultipleChoice"),d9t.forEach(t),sLr=r(aqe," (Longformer model)"),aqe.forEach(t),lLr=i(ve),UM=n(ve,"LI",{});var nqe=s(UM);QFe=n(nqe,"STRONG",{});var c9t=s(QFe);iLr=r(c9t,"mobilebert"),c9t.forEach(t),dLr=r(nqe," \u2014 "),ZJ=n(nqe,"A",{href:!0});var f9t=s(ZJ);cLr=r(f9t,"TFMobileBertForMultipleChoice"),f9t.forEach(t),fLr=r(nqe," (MobileBERT model)"),nqe.forEach(t),mLr=i(ve),JM=n(ve,"LI",{});var sqe=s(JM);HFe=n(sqe,"STRONG",{});var m9t=s(HFe);gLr=r(m9t,"mpnet"),m9t.forEach(t),hLr=r(sqe," \u2014 "),eY=n(sqe,"A",{href:!0});var g9t=s(eY);pLr=r(g9t,"TFMPNetForMultipleChoice"),g9t.forEach(t),uLr=r(sqe," (MPNet model)"),sqe.forEach(t),_Lr=i(ve),YM=n(ve,"LI",{});var lqe=s(YM);UFe=n(lqe,"STRONG",{});var h9t=s(UFe);bLr=r(h9t,"rembert"),h9t.forEach(t),vLr=r(lqe," \u2014 "),oY=n(lqe,"A",{href:!0});var p9t=s(oY);FLr=r(p9t,"TFRemBertForMultipleChoice"),p9t.forEach(t),TLr=r(lqe," (RemBERT model)"),lqe.forEach(t),MLr=i(ve),KM=n(ve,"LI",{});var iqe=s(KM);JFe=n(iqe,"STRONG",{});var u9t=s(JFe);ELr=r(u9t,"roberta"),u9t.forEach(t),CLr=r(iqe," \u2014 "),rY=n(iqe,"A",{href:!0});var _9t=s(rY);wLr=r(_9t,"TFRobertaForMultipleChoice"),_9t.forEach(t),ALr=r(iqe," (RoBERTa model)"),iqe.forEach(t),LLr=i(ve),ZM=n(ve,"LI",{});var dqe=s(ZM);YFe=n(dqe,"STRONG",{});var b9t=s(YFe);yLr=r(b9t,"roformer"),b9t.forEach(t),xLr=r(dqe," \u2014 "),tY=n(dqe,"A",{href:!0});var v9t=s(tY);$Lr=r(v9t,"TFRoFormerForMultipleChoice"),v9t.forEach(t),kLr=r(dqe," (RoFormer model)"),dqe.forEach(t),SLr=i(ve),eE=n(ve,"LI",{});var cqe=s(eE);KFe=n(cqe,"STRONG",{});var F9t=s(KFe);RLr=r(F9t,"xlm"),F9t.forEach(t),PLr=r(cqe," \u2014 "),aY=n(cqe,"A",{href:!0});var T9t=s(aY);BLr=r(T9t,"TFXLMForMultipleChoice"),T9t.forEach(t),ILr=r(cqe," (XLM model)"),cqe.forEach(t),NLr=i(ve),oE=n(ve,"LI",{});var fqe=s(oE);ZFe=n(fqe,"STRONG",{});var M9t=s(ZFe);qLr=r(M9t,"xlm-roberta"),M9t.forEach(t),jLr=r(fqe," \u2014 "),nY=n(fqe,"A",{href:!0});var E9t=s(nY);DLr=r(E9t,"TFXLMRobertaForMultipleChoice"),E9t.forEach(t),GLr=r(fqe," (XLM-RoBERTa model)"),fqe.forEach(t),OLr=i(ve),rE=n(ve,"LI",{});var mqe=s(rE);e6e=n(mqe,"STRONG",{});var C9t=s(e6e);VLr=r(C9t,"xlnet"),C9t.forEach(t),XLr=r(mqe," \u2014 "),sY=n(mqe,"A",{href:!0});var w9t=s(sY);zLr=r(w9t,"TFXLNetForMultipleChoice"),w9t.forEach(t),WLr=r(mqe," (XLNet model)"),mqe.forEach(t),ve.forEach(t),QLr=i(Nl),T(tE.$$.fragment,Nl),Nl.forEach(t),Il.forEach(t),xOe=i(f),Ec=n(f,"H2",{class:!0});var NXe=s(Ec);aE=n(NXe,"A",{id:!0,class:!0,href:!0});var A9t=s(aE);o6e=n(A9t,"SPAN",{});var L9t=s(o6e);T(Q9.$$.fragment,L9t),L9t.forEach(t),A9t.forEach(t),HLr=i(NXe),r6e=n(NXe,"SPAN",{});var y9t=s(r6e);ULr=r(y9t,"TFAutoModelForNextSentencePrediction"),y9t.forEach(t),NXe.forEach(t),$Oe=i(f),lr=n(f,"DIV",{class:!0});var ql=s(lr);T(H9.$$.fragment,ql),JLr=i(ql),Cc=n(ql,"P",{});var mre=s(Cc);YLr=r(mre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),lY=n(mre,"A",{href:!0});var x9t=s(lY);KLr=r(x9t,"from_pretrained()"),x9t.forEach(t),ZLr=r(mre," class method or the "),iY=n(mre,"A",{href:!0});var $9t=s(iY);eyr=r($9t,"from_config()"),$9t.forEach(t),oyr=r(mre,` class
method.`),mre.forEach(t),ryr=i(ql),U9=n(ql,"P",{});var qXe=s(U9);tyr=r(qXe,"This class cannot be instantiated directly using "),t6e=n(qXe,"CODE",{});var k9t=s(t6e);ayr=r(k9t,"__init__()"),k9t.forEach(t),nyr=r(qXe," (throws an error)."),qXe.forEach(t),syr=i(ql),qt=n(ql,"DIV",{class:!0});var BL=s(qt);T(J9.$$.fragment,BL),lyr=i(BL),a6e=n(BL,"P",{});var S9t=s(a6e);iyr=r(S9t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),S9t.forEach(t),dyr=i(BL),wc=n(BL,"P",{});var gre=s(wc);cyr=r(gre,`Note:
Loading a model from its configuration file does `),n6e=n(gre,"STRONG",{});var R9t=s(n6e);fyr=r(R9t,"not"),R9t.forEach(t),myr=r(gre,` load the model weights. It only affects the
model\u2019s configuration. Use `),dY=n(gre,"A",{href:!0});var P9t=s(dY);gyr=r(P9t,"from_pretrained()"),P9t.forEach(t),hyr=r(gre," to load the model weights."),gre.forEach(t),pyr=i(BL),T(nE.$$.fragment,BL),BL.forEach(t),uyr=i(ql),Br=n(ql,"DIV",{class:!0});var jl=s(Br);T(Y9.$$.fragment,jl),_yr=i(jl),s6e=n(jl,"P",{});var B9t=s(s6e);byr=r(B9t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),B9t.forEach(t),vyr=i(jl),gn=n(jl,"P",{});var IL=s(gn);Fyr=r(IL,"The model class to instantiate is selected based on the "),l6e=n(IL,"CODE",{});var I9t=s(l6e);Tyr=r(I9t,"model_type"),I9t.forEach(t),Myr=r(IL,` property of the config object (either
passed as an argument or loaded from `),i6e=n(IL,"CODE",{});var N9t=s(i6e);Eyr=r(N9t,"pretrained_model_name_or_path"),N9t.forEach(t),Cyr=r(IL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d6e=n(IL,"CODE",{});var q9t=s(d6e);wyr=r(q9t,"pretrained_model_name_or_path"),q9t.forEach(t),Ayr=r(IL,":"),IL.forEach(t),Lyr=i(jl),K9=n(jl,"UL",{});var jXe=s(K9);sE=n(jXe,"LI",{});var gqe=s(sE);c6e=n(gqe,"STRONG",{});var j9t=s(c6e);yyr=r(j9t,"bert"),j9t.forEach(t),xyr=r(gqe," \u2014 "),cY=n(gqe,"A",{href:!0});var D9t=s(cY);$yr=r(D9t,"TFBertForNextSentencePrediction"),D9t.forEach(t),kyr=r(gqe," (BERT model)"),gqe.forEach(t),Syr=i(jXe),lE=n(jXe,"LI",{});var hqe=s(lE);f6e=n(hqe,"STRONG",{});var G9t=s(f6e);Ryr=r(G9t,"mobilebert"),G9t.forEach(t),Pyr=r(hqe," \u2014 "),fY=n(hqe,"A",{href:!0});var O9t=s(fY);Byr=r(O9t,"TFMobileBertForNextSentencePrediction"),O9t.forEach(t),Iyr=r(hqe," (MobileBERT model)"),hqe.forEach(t),jXe.forEach(t),Nyr=i(jl),T(iE.$$.fragment,jl),jl.forEach(t),ql.forEach(t),kOe=i(f),Ac=n(f,"H2",{class:!0});var DXe=s(Ac);dE=n(DXe,"A",{id:!0,class:!0,href:!0});var V9t=s(dE);m6e=n(V9t,"SPAN",{});var X9t=s(m6e);T(Z9.$$.fragment,X9t),X9t.forEach(t),V9t.forEach(t),qyr=i(DXe),g6e=n(DXe,"SPAN",{});var z9t=s(g6e);jyr=r(z9t,"TFAutoModelForTableQuestionAnswering"),z9t.forEach(t),DXe.forEach(t),SOe=i(f),ir=n(f,"DIV",{class:!0});var Dl=s(ir);T(ex.$$.fragment,Dl),Dyr=i(Dl),Lc=n(Dl,"P",{});var hre=s(Lc);Gyr=r(hre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),mY=n(hre,"A",{href:!0});var W9t=s(mY);Oyr=r(W9t,"from_pretrained()"),W9t.forEach(t),Vyr=r(hre," class method or the "),gY=n(hre,"A",{href:!0});var Q9t=s(gY);Xyr=r(Q9t,"from_config()"),Q9t.forEach(t),zyr=r(hre,` class
method.`),hre.forEach(t),Wyr=i(Dl),ox=n(Dl,"P",{});var GXe=s(ox);Qyr=r(GXe,"This class cannot be instantiated directly using "),h6e=n(GXe,"CODE",{});var H9t=s(h6e);Hyr=r(H9t,"__init__()"),H9t.forEach(t),Uyr=r(GXe," (throws an error)."),GXe.forEach(t),Jyr=i(Dl),jt=n(Dl,"DIV",{class:!0});var NL=s(jt);T(rx.$$.fragment,NL),Yyr=i(NL),p6e=n(NL,"P",{});var U9t=s(p6e);Kyr=r(U9t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),U9t.forEach(t),Zyr=i(NL),yc=n(NL,"P",{});var pre=s(yc);e7r=r(pre,`Note:
Loading a model from its configuration file does `),u6e=n(pre,"STRONG",{});var J9t=s(u6e);o7r=r(J9t,"not"),J9t.forEach(t),r7r=r(pre,` load the model weights. It only affects the
model\u2019s configuration. Use `),hY=n(pre,"A",{href:!0});var Y9t=s(hY);t7r=r(Y9t,"from_pretrained()"),Y9t.forEach(t),a7r=r(pre," to load the model weights."),pre.forEach(t),n7r=i(NL),T(cE.$$.fragment,NL),NL.forEach(t),s7r=i(Dl),Ir=n(Dl,"DIV",{class:!0});var Gl=s(Ir);T(tx.$$.fragment,Gl),l7r=i(Gl),_6e=n(Gl,"P",{});var K9t=s(_6e);i7r=r(K9t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),K9t.forEach(t),d7r=i(Gl),hn=n(Gl,"P",{});var qL=s(hn);c7r=r(qL,"The model class to instantiate is selected based on the "),b6e=n(qL,"CODE",{});var Z9t=s(b6e);f7r=r(Z9t,"model_type"),Z9t.forEach(t),m7r=r(qL,` property of the config object (either
passed as an argument or loaded from `),v6e=n(qL,"CODE",{});var ext=s(v6e);g7r=r(ext,"pretrained_model_name_or_path"),ext.forEach(t),h7r=r(qL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F6e=n(qL,"CODE",{});var oxt=s(F6e);p7r=r(oxt,"pretrained_model_name_or_path"),oxt.forEach(t),u7r=r(qL,":"),qL.forEach(t),_7r=i(Gl),T6e=n(Gl,"UL",{});var rxt=s(T6e);fE=n(rxt,"LI",{});var pqe=s(fE);M6e=n(pqe,"STRONG",{});var txt=s(M6e);b7r=r(txt,"tapas"),txt.forEach(t),v7r=r(pqe," \u2014 "),pY=n(pqe,"A",{href:!0});var axt=s(pY);F7r=r(axt,"TFTapasForQuestionAnswering"),axt.forEach(t),T7r=r(pqe," (TAPAS model)"),pqe.forEach(t),rxt.forEach(t),M7r=i(Gl),T(mE.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),ROe=i(f),xc=n(f,"H2",{class:!0});var OXe=s(xc);gE=n(OXe,"A",{id:!0,class:!0,href:!0});var nxt=s(gE);E6e=n(nxt,"SPAN",{});var sxt=s(E6e);T(ax.$$.fragment,sxt),sxt.forEach(t),nxt.forEach(t),E7r=i(OXe),C6e=n(OXe,"SPAN",{});var lxt=s(C6e);C7r=r(lxt,"TFAutoModelForTokenClassification"),lxt.forEach(t),OXe.forEach(t),POe=i(f),dr=n(f,"DIV",{class:!0});var Ol=s(dr);T(nx.$$.fragment,Ol),w7r=i(Ol),$c=n(Ol,"P",{});var ure=s($c);A7r=r(ure,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),uY=n(ure,"A",{href:!0});var ixt=s(uY);L7r=r(ixt,"from_pretrained()"),ixt.forEach(t),y7r=r(ure," class method or the "),_Y=n(ure,"A",{href:!0});var dxt=s(_Y);x7r=r(dxt,"from_config()"),dxt.forEach(t),$7r=r(ure,` class
method.`),ure.forEach(t),k7r=i(Ol),sx=n(Ol,"P",{});var VXe=s(sx);S7r=r(VXe,"This class cannot be instantiated directly using "),w6e=n(VXe,"CODE",{});var cxt=s(w6e);R7r=r(cxt,"__init__()"),cxt.forEach(t),P7r=r(VXe," (throws an error)."),VXe.forEach(t),B7r=i(Ol),Dt=n(Ol,"DIV",{class:!0});var jL=s(Dt);T(lx.$$.fragment,jL),I7r=i(jL),A6e=n(jL,"P",{});var fxt=s(A6e);N7r=r(fxt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),fxt.forEach(t),q7r=i(jL),kc=n(jL,"P",{});var _re=s(kc);j7r=r(_re,`Note:
Loading a model from its configuration file does `),L6e=n(_re,"STRONG",{});var mxt=s(L6e);D7r=r(mxt,"not"),mxt.forEach(t),G7r=r(_re,` load the model weights. It only affects the
model\u2019s configuration. Use `),bY=n(_re,"A",{href:!0});var gxt=s(bY);O7r=r(gxt,"from_pretrained()"),gxt.forEach(t),V7r=r(_re," to load the model weights."),_re.forEach(t),X7r=i(jL),T(hE.$$.fragment,jL),jL.forEach(t),z7r=i(Ol),Nr=n(Ol,"DIV",{class:!0});var Vl=s(Nr);T(ix.$$.fragment,Vl),W7r=i(Vl),y6e=n(Vl,"P",{});var hxt=s(y6e);Q7r=r(hxt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),hxt.forEach(t),H7r=i(Vl),pn=n(Vl,"P",{});var DL=s(pn);U7r=r(DL,"The model class to instantiate is selected based on the "),x6e=n(DL,"CODE",{});var pxt=s(x6e);J7r=r(pxt,"model_type"),pxt.forEach(t),Y7r=r(DL,` property of the config object (either
passed as an argument or loaded from `),$6e=n(DL,"CODE",{});var uxt=s($6e);K7r=r(uxt,"pretrained_model_name_or_path"),uxt.forEach(t),Z7r=r(DL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k6e=n(DL,"CODE",{});var _xt=s(k6e);e8r=r(_xt,"pretrained_model_name_or_path"),_xt.forEach(t),o8r=r(DL,":"),DL.forEach(t),r8r=i(Vl),de=n(Vl,"UL",{});var me=s(de);pE=n(me,"LI",{});var uqe=s(pE);S6e=n(uqe,"STRONG",{});var bxt=s(S6e);t8r=r(bxt,"albert"),bxt.forEach(t),a8r=r(uqe," \u2014 "),vY=n(uqe,"A",{href:!0});var vxt=s(vY);n8r=r(vxt,"TFAlbertForTokenClassification"),vxt.forEach(t),s8r=r(uqe," (ALBERT model)"),uqe.forEach(t),l8r=i(me),uE=n(me,"LI",{});var _qe=s(uE);R6e=n(_qe,"STRONG",{});var Fxt=s(R6e);i8r=r(Fxt,"bert"),Fxt.forEach(t),d8r=r(_qe," \u2014 "),FY=n(_qe,"A",{href:!0});var Txt=s(FY);c8r=r(Txt,"TFBertForTokenClassification"),Txt.forEach(t),f8r=r(_qe," (BERT model)"),_qe.forEach(t),m8r=i(me),_E=n(me,"LI",{});var bqe=s(_E);P6e=n(bqe,"STRONG",{});var Mxt=s(P6e);g8r=r(Mxt,"camembert"),Mxt.forEach(t),h8r=r(bqe," \u2014 "),TY=n(bqe,"A",{href:!0});var Ext=s(TY);p8r=r(Ext,"TFCamembertForTokenClassification"),Ext.forEach(t),u8r=r(bqe," (CamemBERT model)"),bqe.forEach(t),_8r=i(me),bE=n(me,"LI",{});var vqe=s(bE);B6e=n(vqe,"STRONG",{});var Cxt=s(B6e);b8r=r(Cxt,"convbert"),Cxt.forEach(t),v8r=r(vqe," \u2014 "),MY=n(vqe,"A",{href:!0});var wxt=s(MY);F8r=r(wxt,"TFConvBertForTokenClassification"),wxt.forEach(t),T8r=r(vqe," (ConvBERT model)"),vqe.forEach(t),M8r=i(me),vE=n(me,"LI",{});var Fqe=s(vE);I6e=n(Fqe,"STRONG",{});var Axt=s(I6e);E8r=r(Axt,"deberta"),Axt.forEach(t),C8r=r(Fqe," \u2014 "),EY=n(Fqe,"A",{href:!0});var Lxt=s(EY);w8r=r(Lxt,"TFDebertaForTokenClassification"),Lxt.forEach(t),A8r=r(Fqe," (DeBERTa model)"),Fqe.forEach(t),L8r=i(me),FE=n(me,"LI",{});var Tqe=s(FE);N6e=n(Tqe,"STRONG",{});var yxt=s(N6e);y8r=r(yxt,"deberta-v2"),yxt.forEach(t),x8r=r(Tqe," \u2014 "),CY=n(Tqe,"A",{href:!0});var xxt=s(CY);$8r=r(xxt,"TFDebertaV2ForTokenClassification"),xxt.forEach(t),k8r=r(Tqe," (DeBERTa-v2 model)"),Tqe.forEach(t),S8r=i(me),TE=n(me,"LI",{});var Mqe=s(TE);q6e=n(Mqe,"STRONG",{});var $xt=s(q6e);R8r=r($xt,"distilbert"),$xt.forEach(t),P8r=r(Mqe," \u2014 "),wY=n(Mqe,"A",{href:!0});var kxt=s(wY);B8r=r(kxt,"TFDistilBertForTokenClassification"),kxt.forEach(t),I8r=r(Mqe," (DistilBERT model)"),Mqe.forEach(t),N8r=i(me),ME=n(me,"LI",{});var Eqe=s(ME);j6e=n(Eqe,"STRONG",{});var Sxt=s(j6e);q8r=r(Sxt,"electra"),Sxt.forEach(t),j8r=r(Eqe," \u2014 "),AY=n(Eqe,"A",{href:!0});var Rxt=s(AY);D8r=r(Rxt,"TFElectraForTokenClassification"),Rxt.forEach(t),G8r=r(Eqe," (ELECTRA model)"),Eqe.forEach(t),O8r=i(me),EE=n(me,"LI",{});var Cqe=s(EE);D6e=n(Cqe,"STRONG",{});var Pxt=s(D6e);V8r=r(Pxt,"flaubert"),Pxt.forEach(t),X8r=r(Cqe," \u2014 "),LY=n(Cqe,"A",{href:!0});var Bxt=s(LY);z8r=r(Bxt,"TFFlaubertForTokenClassification"),Bxt.forEach(t),W8r=r(Cqe," (FlauBERT model)"),Cqe.forEach(t),Q8r=i(me),CE=n(me,"LI",{});var wqe=s(CE);G6e=n(wqe,"STRONG",{});var Ixt=s(G6e);H8r=r(Ixt,"funnel"),Ixt.forEach(t),U8r=r(wqe," \u2014 "),yY=n(wqe,"A",{href:!0});var Nxt=s(yY);J8r=r(Nxt,"TFFunnelForTokenClassification"),Nxt.forEach(t),Y8r=r(wqe," (Funnel Transformer model)"),wqe.forEach(t),K8r=i(me),wE=n(me,"LI",{});var Aqe=s(wE);O6e=n(Aqe,"STRONG",{});var qxt=s(O6e);Z8r=r(qxt,"layoutlm"),qxt.forEach(t),e9r=r(Aqe," \u2014 "),xY=n(Aqe,"A",{href:!0});var jxt=s(xY);o9r=r(jxt,"TFLayoutLMForTokenClassification"),jxt.forEach(t),r9r=r(Aqe," (LayoutLM model)"),Aqe.forEach(t),t9r=i(me),AE=n(me,"LI",{});var Lqe=s(AE);V6e=n(Lqe,"STRONG",{});var Dxt=s(V6e);a9r=r(Dxt,"longformer"),Dxt.forEach(t),n9r=r(Lqe," \u2014 "),$Y=n(Lqe,"A",{href:!0});var Gxt=s($Y);s9r=r(Gxt,"TFLongformerForTokenClassification"),Gxt.forEach(t),l9r=r(Lqe," (Longformer model)"),Lqe.forEach(t),i9r=i(me),LE=n(me,"LI",{});var yqe=s(LE);X6e=n(yqe,"STRONG",{});var Oxt=s(X6e);d9r=r(Oxt,"mobilebert"),Oxt.forEach(t),c9r=r(yqe," \u2014 "),kY=n(yqe,"A",{href:!0});var Vxt=s(kY);f9r=r(Vxt,"TFMobileBertForTokenClassification"),Vxt.forEach(t),m9r=r(yqe," (MobileBERT model)"),yqe.forEach(t),g9r=i(me),yE=n(me,"LI",{});var xqe=s(yE);z6e=n(xqe,"STRONG",{});var Xxt=s(z6e);h9r=r(Xxt,"mpnet"),Xxt.forEach(t),p9r=r(xqe," \u2014 "),SY=n(xqe,"A",{href:!0});var zxt=s(SY);u9r=r(zxt,"TFMPNetForTokenClassification"),zxt.forEach(t),_9r=r(xqe," (MPNet model)"),xqe.forEach(t),b9r=i(me),xE=n(me,"LI",{});var $qe=s(xE);W6e=n($qe,"STRONG",{});var Wxt=s(W6e);v9r=r(Wxt,"rembert"),Wxt.forEach(t),F9r=r($qe," \u2014 "),RY=n($qe,"A",{href:!0});var Qxt=s(RY);T9r=r(Qxt,"TFRemBertForTokenClassification"),Qxt.forEach(t),M9r=r($qe," (RemBERT model)"),$qe.forEach(t),E9r=i(me),$E=n(me,"LI",{});var kqe=s($E);Q6e=n(kqe,"STRONG",{});var Hxt=s(Q6e);C9r=r(Hxt,"roberta"),Hxt.forEach(t),w9r=r(kqe," \u2014 "),PY=n(kqe,"A",{href:!0});var Uxt=s(PY);A9r=r(Uxt,"TFRobertaForTokenClassification"),Uxt.forEach(t),L9r=r(kqe," (RoBERTa model)"),kqe.forEach(t),y9r=i(me),kE=n(me,"LI",{});var Sqe=s(kE);H6e=n(Sqe,"STRONG",{});var Jxt=s(H6e);x9r=r(Jxt,"roformer"),Jxt.forEach(t),$9r=r(Sqe," \u2014 "),BY=n(Sqe,"A",{href:!0});var Yxt=s(BY);k9r=r(Yxt,"TFRoFormerForTokenClassification"),Yxt.forEach(t),S9r=r(Sqe," (RoFormer model)"),Sqe.forEach(t),R9r=i(me),SE=n(me,"LI",{});var Rqe=s(SE);U6e=n(Rqe,"STRONG",{});var Kxt=s(U6e);P9r=r(Kxt,"xlm"),Kxt.forEach(t),B9r=r(Rqe," \u2014 "),IY=n(Rqe,"A",{href:!0});var Zxt=s(IY);I9r=r(Zxt,"TFXLMForTokenClassification"),Zxt.forEach(t),N9r=r(Rqe," (XLM model)"),Rqe.forEach(t),q9r=i(me),RE=n(me,"LI",{});var Pqe=s(RE);J6e=n(Pqe,"STRONG",{});var e$t=s(J6e);j9r=r(e$t,"xlm-roberta"),e$t.forEach(t),D9r=r(Pqe," \u2014 "),NY=n(Pqe,"A",{href:!0});var o$t=s(NY);G9r=r(o$t,"TFXLMRobertaForTokenClassification"),o$t.forEach(t),O9r=r(Pqe," (XLM-RoBERTa model)"),Pqe.forEach(t),V9r=i(me),PE=n(me,"LI",{});var Bqe=s(PE);Y6e=n(Bqe,"STRONG",{});var r$t=s(Y6e);X9r=r(r$t,"xlnet"),r$t.forEach(t),z9r=r(Bqe," \u2014 "),qY=n(Bqe,"A",{href:!0});var t$t=s(qY);W9r=r(t$t,"TFXLNetForTokenClassification"),t$t.forEach(t),Q9r=r(Bqe," (XLNet model)"),Bqe.forEach(t),me.forEach(t),H9r=i(Vl),T(BE.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),BOe=i(f),Sc=n(f,"H2",{class:!0});var XXe=s(Sc);IE=n(XXe,"A",{id:!0,class:!0,href:!0});var a$t=s(IE);K6e=n(a$t,"SPAN",{});var n$t=s(K6e);T(dx.$$.fragment,n$t),n$t.forEach(t),a$t.forEach(t),U9r=i(XXe),Z6e=n(XXe,"SPAN",{});var s$t=s(Z6e);J9r=r(s$t,"TFAutoModelForQuestionAnswering"),s$t.forEach(t),XXe.forEach(t),IOe=i(f),cr=n(f,"DIV",{class:!0});var Xl=s(cr);T(cx.$$.fragment,Xl),Y9r=i(Xl),Rc=n(Xl,"P",{});var bre=s(Rc);K9r=r(bre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),jY=n(bre,"A",{href:!0});var l$t=s(jY);Z9r=r(l$t,"from_pretrained()"),l$t.forEach(t),exr=r(bre," class method or the "),DY=n(bre,"A",{href:!0});var i$t=s(DY);oxr=r(i$t,"from_config()"),i$t.forEach(t),rxr=r(bre,` class
method.`),bre.forEach(t),txr=i(Xl),fx=n(Xl,"P",{});var zXe=s(fx);axr=r(zXe,"This class cannot be instantiated directly using "),eTe=n(zXe,"CODE",{});var d$t=s(eTe);nxr=r(d$t,"__init__()"),d$t.forEach(t),sxr=r(zXe," (throws an error)."),zXe.forEach(t),lxr=i(Xl),Gt=n(Xl,"DIV",{class:!0});var GL=s(Gt);T(mx.$$.fragment,GL),ixr=i(GL),oTe=n(GL,"P",{});var c$t=s(oTe);dxr=r(c$t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),c$t.forEach(t),cxr=i(GL),Pc=n(GL,"P",{});var vre=s(Pc);fxr=r(vre,`Note:
Loading a model from its configuration file does `),rTe=n(vre,"STRONG",{});var f$t=s(rTe);mxr=r(f$t,"not"),f$t.forEach(t),gxr=r(vre,` load the model weights. It only affects the
model\u2019s configuration. Use `),GY=n(vre,"A",{href:!0});var m$t=s(GY);hxr=r(m$t,"from_pretrained()"),m$t.forEach(t),pxr=r(vre," to load the model weights."),vre.forEach(t),uxr=i(GL),T(NE.$$.fragment,GL),GL.forEach(t),_xr=i(Xl),qr=n(Xl,"DIV",{class:!0});var zl=s(qr);T(gx.$$.fragment,zl),bxr=i(zl),tTe=n(zl,"P",{});var g$t=s(tTe);vxr=r(g$t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),g$t.forEach(t),Fxr=i(zl),un=n(zl,"P",{});var OL=s(un);Txr=r(OL,"The model class to instantiate is selected based on the "),aTe=n(OL,"CODE",{});var h$t=s(aTe);Mxr=r(h$t,"model_type"),h$t.forEach(t),Exr=r(OL,` property of the config object (either
passed as an argument or loaded from `),nTe=n(OL,"CODE",{});var p$t=s(nTe);Cxr=r(p$t,"pretrained_model_name_or_path"),p$t.forEach(t),wxr=r(OL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sTe=n(OL,"CODE",{});var u$t=s(sTe);Axr=r(u$t,"pretrained_model_name_or_path"),u$t.forEach(t),Lxr=r(OL,":"),OL.forEach(t),yxr=i(zl),ce=n(zl,"UL",{});var ge=s(ce);qE=n(ge,"LI",{});var Iqe=s(qE);lTe=n(Iqe,"STRONG",{});var _$t=s(lTe);xxr=r(_$t,"albert"),_$t.forEach(t),$xr=r(Iqe," \u2014 "),OY=n(Iqe,"A",{href:!0});var b$t=s(OY);kxr=r(b$t,"TFAlbertForQuestionAnswering"),b$t.forEach(t),Sxr=r(Iqe," (ALBERT model)"),Iqe.forEach(t),Rxr=i(ge),jE=n(ge,"LI",{});var Nqe=s(jE);iTe=n(Nqe,"STRONG",{});var v$t=s(iTe);Pxr=r(v$t,"bert"),v$t.forEach(t),Bxr=r(Nqe," \u2014 "),VY=n(Nqe,"A",{href:!0});var F$t=s(VY);Ixr=r(F$t,"TFBertForQuestionAnswering"),F$t.forEach(t),Nxr=r(Nqe," (BERT model)"),Nqe.forEach(t),qxr=i(ge),DE=n(ge,"LI",{});var qqe=s(DE);dTe=n(qqe,"STRONG",{});var T$t=s(dTe);jxr=r(T$t,"camembert"),T$t.forEach(t),Dxr=r(qqe," \u2014 "),XY=n(qqe,"A",{href:!0});var M$t=s(XY);Gxr=r(M$t,"TFCamembertForQuestionAnswering"),M$t.forEach(t),Oxr=r(qqe," (CamemBERT model)"),qqe.forEach(t),Vxr=i(ge),GE=n(ge,"LI",{});var jqe=s(GE);cTe=n(jqe,"STRONG",{});var E$t=s(cTe);Xxr=r(E$t,"convbert"),E$t.forEach(t),zxr=r(jqe," \u2014 "),zY=n(jqe,"A",{href:!0});var C$t=s(zY);Wxr=r(C$t,"TFConvBertForQuestionAnswering"),C$t.forEach(t),Qxr=r(jqe," (ConvBERT model)"),jqe.forEach(t),Hxr=i(ge),OE=n(ge,"LI",{});var Dqe=s(OE);fTe=n(Dqe,"STRONG",{});var w$t=s(fTe);Uxr=r(w$t,"deberta"),w$t.forEach(t),Jxr=r(Dqe," \u2014 "),WY=n(Dqe,"A",{href:!0});var A$t=s(WY);Yxr=r(A$t,"TFDebertaForQuestionAnswering"),A$t.forEach(t),Kxr=r(Dqe," (DeBERTa model)"),Dqe.forEach(t),Zxr=i(ge),VE=n(ge,"LI",{});var Gqe=s(VE);mTe=n(Gqe,"STRONG",{});var L$t=s(mTe);e$r=r(L$t,"deberta-v2"),L$t.forEach(t),o$r=r(Gqe," \u2014 "),QY=n(Gqe,"A",{href:!0});var y$t=s(QY);r$r=r(y$t,"TFDebertaV2ForQuestionAnswering"),y$t.forEach(t),t$r=r(Gqe," (DeBERTa-v2 model)"),Gqe.forEach(t),a$r=i(ge),XE=n(ge,"LI",{});var Oqe=s(XE);gTe=n(Oqe,"STRONG",{});var x$t=s(gTe);n$r=r(x$t,"distilbert"),x$t.forEach(t),s$r=r(Oqe," \u2014 "),HY=n(Oqe,"A",{href:!0});var $$t=s(HY);l$r=r($$t,"TFDistilBertForQuestionAnswering"),$$t.forEach(t),i$r=r(Oqe," (DistilBERT model)"),Oqe.forEach(t),d$r=i(ge),zE=n(ge,"LI",{});var Vqe=s(zE);hTe=n(Vqe,"STRONG",{});var k$t=s(hTe);c$r=r(k$t,"electra"),k$t.forEach(t),f$r=r(Vqe," \u2014 "),UY=n(Vqe,"A",{href:!0});var S$t=s(UY);m$r=r(S$t,"TFElectraForQuestionAnswering"),S$t.forEach(t),g$r=r(Vqe," (ELECTRA model)"),Vqe.forEach(t),h$r=i(ge),WE=n(ge,"LI",{});var Xqe=s(WE);pTe=n(Xqe,"STRONG",{});var R$t=s(pTe);p$r=r(R$t,"flaubert"),R$t.forEach(t),u$r=r(Xqe," \u2014 "),JY=n(Xqe,"A",{href:!0});var P$t=s(JY);_$r=r(P$t,"TFFlaubertForQuestionAnsweringSimple"),P$t.forEach(t),b$r=r(Xqe," (FlauBERT model)"),Xqe.forEach(t),v$r=i(ge),QE=n(ge,"LI",{});var zqe=s(QE);uTe=n(zqe,"STRONG",{});var B$t=s(uTe);F$r=r(B$t,"funnel"),B$t.forEach(t),T$r=r(zqe," \u2014 "),YY=n(zqe,"A",{href:!0});var I$t=s(YY);M$r=r(I$t,"TFFunnelForQuestionAnswering"),I$t.forEach(t),E$r=r(zqe," (Funnel Transformer model)"),zqe.forEach(t),C$r=i(ge),HE=n(ge,"LI",{});var Wqe=s(HE);_Te=n(Wqe,"STRONG",{});var N$t=s(_Te);w$r=r(N$t,"gptj"),N$t.forEach(t),A$r=r(Wqe," \u2014 "),KY=n(Wqe,"A",{href:!0});var q$t=s(KY);L$r=r(q$t,"TFGPTJForQuestionAnswering"),q$t.forEach(t),y$r=r(Wqe," (GPT-J model)"),Wqe.forEach(t),x$r=i(ge),UE=n(ge,"LI",{});var Qqe=s(UE);bTe=n(Qqe,"STRONG",{});var j$t=s(bTe);$$r=r(j$t,"longformer"),j$t.forEach(t),k$r=r(Qqe," \u2014 "),ZY=n(Qqe,"A",{href:!0});var D$t=s(ZY);S$r=r(D$t,"TFLongformerForQuestionAnswering"),D$t.forEach(t),R$r=r(Qqe," (Longformer model)"),Qqe.forEach(t),P$r=i(ge),JE=n(ge,"LI",{});var Hqe=s(JE);vTe=n(Hqe,"STRONG",{});var G$t=s(vTe);B$r=r(G$t,"mobilebert"),G$t.forEach(t),I$r=r(Hqe," \u2014 "),eK=n(Hqe,"A",{href:!0});var O$t=s(eK);N$r=r(O$t,"TFMobileBertForQuestionAnswering"),O$t.forEach(t),q$r=r(Hqe," (MobileBERT model)"),Hqe.forEach(t),j$r=i(ge),YE=n(ge,"LI",{});var Uqe=s(YE);FTe=n(Uqe,"STRONG",{});var V$t=s(FTe);D$r=r(V$t,"mpnet"),V$t.forEach(t),G$r=r(Uqe," \u2014 "),oK=n(Uqe,"A",{href:!0});var X$t=s(oK);O$r=r(X$t,"TFMPNetForQuestionAnswering"),X$t.forEach(t),V$r=r(Uqe," (MPNet model)"),Uqe.forEach(t),X$r=i(ge),KE=n(ge,"LI",{});var Jqe=s(KE);TTe=n(Jqe,"STRONG",{});var z$t=s(TTe);z$r=r(z$t,"rembert"),z$t.forEach(t),W$r=r(Jqe," \u2014 "),rK=n(Jqe,"A",{href:!0});var W$t=s(rK);Q$r=r(W$t,"TFRemBertForQuestionAnswering"),W$t.forEach(t),H$r=r(Jqe," (RemBERT model)"),Jqe.forEach(t),U$r=i(ge),ZE=n(ge,"LI",{});var Yqe=s(ZE);MTe=n(Yqe,"STRONG",{});var Q$t=s(MTe);J$r=r(Q$t,"roberta"),Q$t.forEach(t),Y$r=r(Yqe," \u2014 "),tK=n(Yqe,"A",{href:!0});var H$t=s(tK);K$r=r(H$t,"TFRobertaForQuestionAnswering"),H$t.forEach(t),Z$r=r(Yqe," (RoBERTa model)"),Yqe.forEach(t),ekr=i(ge),eC=n(ge,"LI",{});var Kqe=s(eC);ETe=n(Kqe,"STRONG",{});var U$t=s(ETe);okr=r(U$t,"roformer"),U$t.forEach(t),rkr=r(Kqe," \u2014 "),aK=n(Kqe,"A",{href:!0});var J$t=s(aK);tkr=r(J$t,"TFRoFormerForQuestionAnswering"),J$t.forEach(t),akr=r(Kqe," (RoFormer model)"),Kqe.forEach(t),nkr=i(ge),oC=n(ge,"LI",{});var Zqe=s(oC);CTe=n(Zqe,"STRONG",{});var Y$t=s(CTe);skr=r(Y$t,"xlm"),Y$t.forEach(t),lkr=r(Zqe," \u2014 "),nK=n(Zqe,"A",{href:!0});var K$t=s(nK);ikr=r(K$t,"TFXLMForQuestionAnsweringSimple"),K$t.forEach(t),dkr=r(Zqe," (XLM model)"),Zqe.forEach(t),ckr=i(ge),rC=n(ge,"LI",{});var eje=s(rC);wTe=n(eje,"STRONG",{});var Z$t=s(wTe);fkr=r(Z$t,"xlm-roberta"),Z$t.forEach(t),mkr=r(eje," \u2014 "),sK=n(eje,"A",{href:!0});var ekt=s(sK);gkr=r(ekt,"TFXLMRobertaForQuestionAnswering"),ekt.forEach(t),hkr=r(eje," (XLM-RoBERTa model)"),eje.forEach(t),pkr=i(ge),tC=n(ge,"LI",{});var oje=s(tC);ATe=n(oje,"STRONG",{});var okt=s(ATe);ukr=r(okt,"xlnet"),okt.forEach(t),_kr=r(oje," \u2014 "),lK=n(oje,"A",{href:!0});var rkt=s(lK);bkr=r(rkt,"TFXLNetForQuestionAnsweringSimple"),rkt.forEach(t),vkr=r(oje," (XLNet model)"),oje.forEach(t),ge.forEach(t),Fkr=i(zl),T(aC.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),NOe=i(f),Bc=n(f,"H2",{class:!0});var WXe=s(Bc);nC=n(WXe,"A",{id:!0,class:!0,href:!0});var tkt=s(nC);LTe=n(tkt,"SPAN",{});var akt=s(LTe);T(hx.$$.fragment,akt),akt.forEach(t),tkt.forEach(t),Tkr=i(WXe),yTe=n(WXe,"SPAN",{});var nkt=s(yTe);Mkr=r(nkt,"TFAutoModelForVision2Seq"),nkt.forEach(t),WXe.forEach(t),qOe=i(f),fr=n(f,"DIV",{class:!0});var Wl=s(fr);T(px.$$.fragment,Wl),Ekr=i(Wl),Ic=n(Wl,"P",{});var Fre=s(Ic);Ckr=r(Fre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),iK=n(Fre,"A",{href:!0});var skt=s(iK);wkr=r(skt,"from_pretrained()"),skt.forEach(t),Akr=r(Fre," class method or the "),dK=n(Fre,"A",{href:!0});var lkt=s(dK);Lkr=r(lkt,"from_config()"),lkt.forEach(t),ykr=r(Fre,` class
method.`),Fre.forEach(t),xkr=i(Wl),ux=n(Wl,"P",{});var QXe=s(ux);$kr=r(QXe,"This class cannot be instantiated directly using "),xTe=n(QXe,"CODE",{});var ikt=s(xTe);kkr=r(ikt,"__init__()"),ikt.forEach(t),Skr=r(QXe," (throws an error)."),QXe.forEach(t),Rkr=i(Wl),Ot=n(Wl,"DIV",{class:!0});var VL=s(Ot);T(_x.$$.fragment,VL),Pkr=i(VL),$Te=n(VL,"P",{});var dkt=s($Te);Bkr=r(dkt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),dkt.forEach(t),Ikr=i(VL),Nc=n(VL,"P",{});var Tre=s(Nc);Nkr=r(Tre,`Note:
Loading a model from its configuration file does `),kTe=n(Tre,"STRONG",{});var ckt=s(kTe);qkr=r(ckt,"not"),ckt.forEach(t),jkr=r(Tre,` load the model weights. It only affects the
model\u2019s configuration. Use `),cK=n(Tre,"A",{href:!0});var fkt=s(cK);Dkr=r(fkt,"from_pretrained()"),fkt.forEach(t),Gkr=r(Tre," to load the model weights."),Tre.forEach(t),Okr=i(VL),T(sC.$$.fragment,VL),VL.forEach(t),Vkr=i(Wl),jr=n(Wl,"DIV",{class:!0});var Ql=s(jr);T(bx.$$.fragment,Ql),Xkr=i(Ql),STe=n(Ql,"P",{});var mkt=s(STe);zkr=r(mkt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),mkt.forEach(t),Wkr=i(Ql),_n=n(Ql,"P",{});var XL=s(_n);Qkr=r(XL,"The model class to instantiate is selected based on the "),RTe=n(XL,"CODE",{});var gkt=s(RTe);Hkr=r(gkt,"model_type"),gkt.forEach(t),Ukr=r(XL,` property of the config object (either
passed as an argument or loaded from `),PTe=n(XL,"CODE",{});var hkt=s(PTe);Jkr=r(hkt,"pretrained_model_name_or_path"),hkt.forEach(t),Ykr=r(XL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BTe=n(XL,"CODE",{});var pkt=s(BTe);Kkr=r(pkt,"pretrained_model_name_or_path"),pkt.forEach(t),Zkr=r(XL,":"),XL.forEach(t),eSr=i(Ql),ITe=n(Ql,"UL",{});var ukt=s(ITe);lC=n(ukt,"LI",{});var rje=s(lC);NTe=n(rje,"STRONG",{});var _kt=s(NTe);oSr=r(_kt,"vision-encoder-decoder"),_kt.forEach(t),rSr=r(rje," \u2014 "),fK=n(rje,"A",{href:!0});var bkt=s(fK);tSr=r(bkt,"TFVisionEncoderDecoderModel"),bkt.forEach(t),aSr=r(rje," (Vision Encoder decoder model)"),rje.forEach(t),ukt.forEach(t),nSr=i(Ql),T(iC.$$.fragment,Ql),Ql.forEach(t),Wl.forEach(t),jOe=i(f),qc=n(f,"H2",{class:!0});var HXe=s(qc);dC=n(HXe,"A",{id:!0,class:!0,href:!0});var vkt=s(dC);qTe=n(vkt,"SPAN",{});var Fkt=s(qTe);T(vx.$$.fragment,Fkt),Fkt.forEach(t),vkt.forEach(t),sSr=i(HXe),jTe=n(HXe,"SPAN",{});var Tkt=s(jTe);lSr=r(Tkt,"TFAutoModelForSpeechSeq2Seq"),Tkt.forEach(t),HXe.forEach(t),DOe=i(f),mr=n(f,"DIV",{class:!0});var Hl=s(mr);T(Fx.$$.fragment,Hl),iSr=i(Hl),jc=n(Hl,"P",{});var Mre=s(jc);dSr=r(Mre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),mK=n(Mre,"A",{href:!0});var Mkt=s(mK);cSr=r(Mkt,"from_pretrained()"),Mkt.forEach(t),fSr=r(Mre," class method or the "),gK=n(Mre,"A",{href:!0});var Ekt=s(gK);mSr=r(Ekt,"from_config()"),Ekt.forEach(t),gSr=r(Mre,` class
method.`),Mre.forEach(t),hSr=i(Hl),Tx=n(Hl,"P",{});var UXe=s(Tx);pSr=r(UXe,"This class cannot be instantiated directly using "),DTe=n(UXe,"CODE",{});var Ckt=s(DTe);uSr=r(Ckt,"__init__()"),Ckt.forEach(t),_Sr=r(UXe," (throws an error)."),UXe.forEach(t),bSr=i(Hl),Vt=n(Hl,"DIV",{class:!0});var zL=s(Vt);T(Mx.$$.fragment,zL),vSr=i(zL),GTe=n(zL,"P",{});var wkt=s(GTe);FSr=r(wkt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),wkt.forEach(t),TSr=i(zL),Dc=n(zL,"P",{});var Ere=s(Dc);MSr=r(Ere,`Note:
Loading a model from its configuration file does `),OTe=n(Ere,"STRONG",{});var Akt=s(OTe);ESr=r(Akt,"not"),Akt.forEach(t),CSr=r(Ere,` load the model weights. It only affects the
model\u2019s configuration. Use `),hK=n(Ere,"A",{href:!0});var Lkt=s(hK);wSr=r(Lkt,"from_pretrained()"),Lkt.forEach(t),ASr=r(Ere," to load the model weights."),Ere.forEach(t),LSr=i(zL),T(cC.$$.fragment,zL),zL.forEach(t),ySr=i(Hl),Dr=n(Hl,"DIV",{class:!0});var Ul=s(Dr);T(Ex.$$.fragment,Ul),xSr=i(Ul),VTe=n(Ul,"P",{});var ykt=s(VTe);$Sr=r(ykt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),ykt.forEach(t),kSr=i(Ul),bn=n(Ul,"P",{});var WL=s(bn);SSr=r(WL,"The model class to instantiate is selected based on the "),XTe=n(WL,"CODE",{});var xkt=s(XTe);RSr=r(xkt,"model_type"),xkt.forEach(t),PSr=r(WL,` property of the config object (either
passed as an argument or loaded from `),zTe=n(WL,"CODE",{});var $kt=s(zTe);BSr=r($kt,"pretrained_model_name_or_path"),$kt.forEach(t),ISr=r(WL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WTe=n(WL,"CODE",{});var kkt=s(WTe);NSr=r(kkt,"pretrained_model_name_or_path"),kkt.forEach(t),qSr=r(WL,":"),WL.forEach(t),jSr=i(Ul),QTe=n(Ul,"UL",{});var Skt=s(QTe);fC=n(Skt,"LI",{});var tje=s(fC);HTe=n(tje,"STRONG",{});var Rkt=s(HTe);DSr=r(Rkt,"speech_to_text"),Rkt.forEach(t),GSr=r(tje," \u2014 "),pK=n(tje,"A",{href:!0});var Pkt=s(pK);OSr=r(Pkt,"TFSpeech2TextForConditionalGeneration"),Pkt.forEach(t),VSr=r(tje," (Speech2Text model)"),tje.forEach(t),Skt.forEach(t),XSr=i(Ul),T(mC.$$.fragment,Ul),Ul.forEach(t),Hl.forEach(t),GOe=i(f),Gc=n(f,"H2",{class:!0});var JXe=s(Gc);gC=n(JXe,"A",{id:!0,class:!0,href:!0});var Bkt=s(gC);UTe=n(Bkt,"SPAN",{});var Ikt=s(UTe);T(Cx.$$.fragment,Ikt),Ikt.forEach(t),Bkt.forEach(t),zSr=i(JXe),JTe=n(JXe,"SPAN",{});var Nkt=s(JTe);WSr=r(Nkt,"FlaxAutoModel"),Nkt.forEach(t),JXe.forEach(t),OOe=i(f),gr=n(f,"DIV",{class:!0});var Jl=s(gr);T(wx.$$.fragment,Jl),QSr=i(Jl),Oc=n(Jl,"P",{});var Cre=s(Oc);HSr=r(Cre,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),uK=n(Cre,"A",{href:!0});var qkt=s(uK);USr=r(qkt,"from_pretrained()"),qkt.forEach(t),JSr=r(Cre," class method or the "),_K=n(Cre,"A",{href:!0});var jkt=s(_K);YSr=r(jkt,"from_config()"),jkt.forEach(t),KSr=r(Cre,` class
method.`),Cre.forEach(t),ZSr=i(Jl),Ax=n(Jl,"P",{});var YXe=s(Ax);eRr=r(YXe,"This class cannot be instantiated directly using "),YTe=n(YXe,"CODE",{});var Dkt=s(YTe);oRr=r(Dkt,"__init__()"),Dkt.forEach(t),rRr=r(YXe," (throws an error)."),YXe.forEach(t),tRr=i(Jl),Xt=n(Jl,"DIV",{class:!0});var QL=s(Xt);T(Lx.$$.fragment,QL),aRr=i(QL),KTe=n(QL,"P",{});var Gkt=s(KTe);nRr=r(Gkt,"Instantiates one of the base model classes of the library from a configuration."),Gkt.forEach(t),sRr=i(QL),Vc=n(QL,"P",{});var wre=s(Vc);lRr=r(wre,`Note:
Loading a model from its configuration file does `),ZTe=n(wre,"STRONG",{});var Okt=s(ZTe);iRr=r(Okt,"not"),Okt.forEach(t),dRr=r(wre,` load the model weights. It only affects the
model\u2019s configuration. Use `),bK=n(wre,"A",{href:!0});var Vkt=s(bK);cRr=r(Vkt,"from_pretrained()"),Vkt.forEach(t),fRr=r(wre," to load the model weights."),wre.forEach(t),mRr=i(QL),T(hC.$$.fragment,QL),QL.forEach(t),gRr=i(Jl),Gr=n(Jl,"DIV",{class:!0});var Yl=s(Gr);T(yx.$$.fragment,Yl),hRr=i(Yl),eMe=n(Yl,"P",{});var Xkt=s(eMe);pRr=r(Xkt,"Instantiate one of the base model classes of the library from a pretrained model."),Xkt.forEach(t),uRr=i(Yl),vn=n(Yl,"P",{});var HL=s(vn);_Rr=r(HL,"The model class to instantiate is selected based on the "),oMe=n(HL,"CODE",{});var zkt=s(oMe);bRr=r(zkt,"model_type"),zkt.forEach(t),vRr=r(HL,` property of the config object (either
passed as an argument or loaded from `),rMe=n(HL,"CODE",{});var Wkt=s(rMe);FRr=r(Wkt,"pretrained_model_name_or_path"),Wkt.forEach(t),TRr=r(HL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tMe=n(HL,"CODE",{});var Qkt=s(tMe);MRr=r(Qkt,"pretrained_model_name_or_path"),Qkt.forEach(t),ERr=r(HL,":"),HL.forEach(t),CRr=i(Yl),oe=n(Yl,"UL",{});var ae=s(oe);pC=n(ae,"LI",{});var aje=s(pC);aMe=n(aje,"STRONG",{});var Hkt=s(aMe);wRr=r(Hkt,"albert"),Hkt.forEach(t),ARr=r(aje," \u2014 "),vK=n(aje,"A",{href:!0});var Ukt=s(vK);LRr=r(Ukt,"FlaxAlbertModel"),Ukt.forEach(t),yRr=r(aje," (ALBERT model)"),aje.forEach(t),xRr=i(ae),uC=n(ae,"LI",{});var nje=s(uC);nMe=n(nje,"STRONG",{});var Jkt=s(nMe);$Rr=r(Jkt,"bart"),Jkt.forEach(t),kRr=r(nje," \u2014 "),FK=n(nje,"A",{href:!0});var Ykt=s(FK);SRr=r(Ykt,"FlaxBartModel"),Ykt.forEach(t),RRr=r(nje," (BART model)"),nje.forEach(t),PRr=i(ae),_C=n(ae,"LI",{});var sje=s(_C);sMe=n(sje,"STRONG",{});var Kkt=s(sMe);BRr=r(Kkt,"beit"),Kkt.forEach(t),IRr=r(sje," \u2014 "),TK=n(sje,"A",{href:!0});var Zkt=s(TK);NRr=r(Zkt,"FlaxBeitModel"),Zkt.forEach(t),qRr=r(sje," (BEiT model)"),sje.forEach(t),jRr=i(ae),bC=n(ae,"LI",{});var lje=s(bC);lMe=n(lje,"STRONG",{});var eSt=s(lMe);DRr=r(eSt,"bert"),eSt.forEach(t),GRr=r(lje," \u2014 "),MK=n(lje,"A",{href:!0});var oSt=s(MK);ORr=r(oSt,"FlaxBertModel"),oSt.forEach(t),VRr=r(lje," (BERT model)"),lje.forEach(t),XRr=i(ae),vC=n(ae,"LI",{});var ije=s(vC);iMe=n(ije,"STRONG",{});var rSt=s(iMe);zRr=r(rSt,"big_bird"),rSt.forEach(t),WRr=r(ije," \u2014 "),EK=n(ije,"A",{href:!0});var tSt=s(EK);QRr=r(tSt,"FlaxBigBirdModel"),tSt.forEach(t),HRr=r(ije," (BigBird model)"),ije.forEach(t),URr=i(ae),FC=n(ae,"LI",{});var dje=s(FC);dMe=n(dje,"STRONG",{});var aSt=s(dMe);JRr=r(aSt,"blenderbot"),aSt.forEach(t),YRr=r(dje," \u2014 "),CK=n(dje,"A",{href:!0});var nSt=s(CK);KRr=r(nSt,"FlaxBlenderbotModel"),nSt.forEach(t),ZRr=r(dje," (Blenderbot model)"),dje.forEach(t),ePr=i(ae),TC=n(ae,"LI",{});var cje=s(TC);cMe=n(cje,"STRONG",{});var sSt=s(cMe);oPr=r(sSt,"blenderbot-small"),sSt.forEach(t),rPr=r(cje," \u2014 "),wK=n(cje,"A",{href:!0});var lSt=s(wK);tPr=r(lSt,"FlaxBlenderbotSmallModel"),lSt.forEach(t),aPr=r(cje," (BlenderbotSmall model)"),cje.forEach(t),nPr=i(ae),MC=n(ae,"LI",{});var fje=s(MC);fMe=n(fje,"STRONG",{});var iSt=s(fMe);sPr=r(iSt,"clip"),iSt.forEach(t),lPr=r(fje," \u2014 "),AK=n(fje,"A",{href:!0});var dSt=s(AK);iPr=r(dSt,"FlaxCLIPModel"),dSt.forEach(t),dPr=r(fje," (CLIP model)"),fje.forEach(t),cPr=i(ae),EC=n(ae,"LI",{});var mje=s(EC);mMe=n(mje,"STRONG",{});var cSt=s(mMe);fPr=r(cSt,"distilbert"),cSt.forEach(t),mPr=r(mje," \u2014 "),LK=n(mje,"A",{href:!0});var fSt=s(LK);gPr=r(fSt,"FlaxDistilBertModel"),fSt.forEach(t),hPr=r(mje," (DistilBERT model)"),mje.forEach(t),pPr=i(ae),CC=n(ae,"LI",{});var gje=s(CC);gMe=n(gje,"STRONG",{});var mSt=s(gMe);uPr=r(mSt,"electra"),mSt.forEach(t),_Pr=r(gje," \u2014 "),yK=n(gje,"A",{href:!0});var gSt=s(yK);bPr=r(gSt,"FlaxElectraModel"),gSt.forEach(t),vPr=r(gje," (ELECTRA model)"),gje.forEach(t),FPr=i(ae),wC=n(ae,"LI",{});var hje=s(wC);hMe=n(hje,"STRONG",{});var hSt=s(hMe);TPr=r(hSt,"gpt2"),hSt.forEach(t),MPr=r(hje," \u2014 "),xK=n(hje,"A",{href:!0});var pSt=s(xK);EPr=r(pSt,"FlaxGPT2Model"),pSt.forEach(t),CPr=r(hje," (OpenAI GPT-2 model)"),hje.forEach(t),wPr=i(ae),AC=n(ae,"LI",{});var pje=s(AC);pMe=n(pje,"STRONG",{});var uSt=s(pMe);APr=r(uSt,"gpt_neo"),uSt.forEach(t),LPr=r(pje," \u2014 "),$K=n(pje,"A",{href:!0});var _St=s($K);yPr=r(_St,"FlaxGPTNeoModel"),_St.forEach(t),xPr=r(pje," (GPT Neo model)"),pje.forEach(t),$Pr=i(ae),LC=n(ae,"LI",{});var uje=s(LC);uMe=n(uje,"STRONG",{});var bSt=s(uMe);kPr=r(bSt,"gptj"),bSt.forEach(t),SPr=r(uje," \u2014 "),kK=n(uje,"A",{href:!0});var vSt=s(kK);RPr=r(vSt,"FlaxGPTJModel"),vSt.forEach(t),PPr=r(uje," (GPT-J model)"),uje.forEach(t),BPr=i(ae),yC=n(ae,"LI",{});var _je=s(yC);_Me=n(_je,"STRONG",{});var FSt=s(_Me);IPr=r(FSt,"longt5"),FSt.forEach(t),NPr=r(_je," \u2014 "),SK=n(_je,"A",{href:!0});var TSt=s(SK);qPr=r(TSt,"FlaxLongT5Model"),TSt.forEach(t),jPr=r(_je," (LongT5 model)"),_je.forEach(t),DPr=i(ae),xC=n(ae,"LI",{});var bje=s(xC);bMe=n(bje,"STRONG",{});var MSt=s(bMe);GPr=r(MSt,"marian"),MSt.forEach(t),OPr=r(bje," \u2014 "),RK=n(bje,"A",{href:!0});var ESt=s(RK);VPr=r(ESt,"FlaxMarianModel"),ESt.forEach(t),XPr=r(bje," (Marian model)"),bje.forEach(t),zPr=i(ae),$C=n(ae,"LI",{});var vje=s($C);vMe=n(vje,"STRONG",{});var CSt=s(vMe);WPr=r(CSt,"mbart"),CSt.forEach(t),QPr=r(vje," \u2014 "),PK=n(vje,"A",{href:!0});var wSt=s(PK);HPr=r(wSt,"FlaxMBartModel"),wSt.forEach(t),UPr=r(vje," (mBART model)"),vje.forEach(t),JPr=i(ae),kC=n(ae,"LI",{});var Fje=s(kC);FMe=n(Fje,"STRONG",{});var ASt=s(FMe);YPr=r(ASt,"mt5"),ASt.forEach(t),KPr=r(Fje," \u2014 "),BK=n(Fje,"A",{href:!0});var LSt=s(BK);ZPr=r(LSt,"FlaxMT5Model"),LSt.forEach(t),eBr=r(Fje," (MT5 model)"),Fje.forEach(t),oBr=i(ae),SC=n(ae,"LI",{});var Tje=s(SC);TMe=n(Tje,"STRONG",{});var ySt=s(TMe);rBr=r(ySt,"opt"),ySt.forEach(t),tBr=r(Tje," \u2014 "),IK=n(Tje,"A",{href:!0});var xSt=s(IK);aBr=r(xSt,"FlaxOPTModel"),xSt.forEach(t),nBr=r(Tje," (OPT model)"),Tje.forEach(t),sBr=i(ae),RC=n(ae,"LI",{});var Mje=s(RC);MMe=n(Mje,"STRONG",{});var $St=s(MMe);lBr=r($St,"pegasus"),$St.forEach(t),iBr=r(Mje," \u2014 "),NK=n(Mje,"A",{href:!0});var kSt=s(NK);dBr=r(kSt,"FlaxPegasusModel"),kSt.forEach(t),cBr=r(Mje," (Pegasus model)"),Mje.forEach(t),fBr=i(ae),PC=n(ae,"LI",{});var Eje=s(PC);EMe=n(Eje,"STRONG",{});var SSt=s(EMe);mBr=r(SSt,"roberta"),SSt.forEach(t),gBr=r(Eje," \u2014 "),qK=n(Eje,"A",{href:!0});var RSt=s(qK);hBr=r(RSt,"FlaxRobertaModel"),RSt.forEach(t),pBr=r(Eje," (RoBERTa model)"),Eje.forEach(t),uBr=i(ae),BC=n(ae,"LI",{});var Cje=s(BC);CMe=n(Cje,"STRONG",{});var PSt=s(CMe);_Br=r(PSt,"roformer"),PSt.forEach(t),bBr=r(Cje," \u2014 "),jK=n(Cje,"A",{href:!0});var BSt=s(jK);vBr=r(BSt,"FlaxRoFormerModel"),BSt.forEach(t),FBr=r(Cje," (RoFormer model)"),Cje.forEach(t),TBr=i(ae),IC=n(ae,"LI",{});var wje=s(IC);wMe=n(wje,"STRONG",{});var ISt=s(wMe);MBr=r(ISt,"t5"),ISt.forEach(t),EBr=r(wje," \u2014 "),DK=n(wje,"A",{href:!0});var NSt=s(DK);CBr=r(NSt,"FlaxT5Model"),NSt.forEach(t),wBr=r(wje," (T5 model)"),wje.forEach(t),ABr=i(ae),NC=n(ae,"LI",{});var Aje=s(NC);AMe=n(Aje,"STRONG",{});var qSt=s(AMe);LBr=r(qSt,"vision-text-dual-encoder"),qSt.forEach(t),yBr=r(Aje," \u2014 "),GK=n(Aje,"A",{href:!0});var jSt=s(GK);xBr=r(jSt,"FlaxVisionTextDualEncoderModel"),jSt.forEach(t),$Br=r(Aje," (VisionTextDualEncoder model)"),Aje.forEach(t),kBr=i(ae),qC=n(ae,"LI",{});var Lje=s(qC);LMe=n(Lje,"STRONG",{});var DSt=s(LMe);SBr=r(DSt,"vit"),DSt.forEach(t),RBr=r(Lje," \u2014 "),OK=n(Lje,"A",{href:!0});var GSt=s(OK);PBr=r(GSt,"FlaxViTModel"),GSt.forEach(t),BBr=r(Lje," (ViT model)"),Lje.forEach(t),IBr=i(ae),jC=n(ae,"LI",{});var yje=s(jC);yMe=n(yje,"STRONG",{});var OSt=s(yMe);NBr=r(OSt,"wav2vec2"),OSt.forEach(t),qBr=r(yje," \u2014 "),VK=n(yje,"A",{href:!0});var VSt=s(VK);jBr=r(VSt,"FlaxWav2Vec2Model"),VSt.forEach(t),DBr=r(yje," (Wav2Vec2 model)"),yje.forEach(t),GBr=i(ae),DC=n(ae,"LI",{});var xje=s(DC);xMe=n(xje,"STRONG",{});var XSt=s(xMe);OBr=r(XSt,"xglm"),XSt.forEach(t),VBr=r(xje," \u2014 "),XK=n(xje,"A",{href:!0});var zSt=s(XK);XBr=r(zSt,"FlaxXGLMModel"),zSt.forEach(t),zBr=r(xje," (XGLM model)"),xje.forEach(t),WBr=i(ae),GC=n(ae,"LI",{});var $je=s(GC);$Me=n($je,"STRONG",{});var WSt=s($Me);QBr=r(WSt,"xlm-roberta"),WSt.forEach(t),HBr=r($je," \u2014 "),zK=n($je,"A",{href:!0});var QSt=s(zK);UBr=r(QSt,"FlaxXLMRobertaModel"),QSt.forEach(t),JBr=r($je," (XLM-RoBERTa model)"),$je.forEach(t),ae.forEach(t),YBr=i(Yl),T(OC.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),VOe=i(f),Xc=n(f,"H2",{class:!0});var KXe=s(Xc);VC=n(KXe,"A",{id:!0,class:!0,href:!0});var HSt=s(VC);kMe=n(HSt,"SPAN",{});var USt=s(kMe);T(xx.$$.fragment,USt),USt.forEach(t),HSt.forEach(t),KBr=i(KXe),SMe=n(KXe,"SPAN",{});var JSt=s(SMe);ZBr=r(JSt,"FlaxAutoModelForCausalLM"),JSt.forEach(t),KXe.forEach(t),XOe=i(f),hr=n(f,"DIV",{class:!0});var Kl=s(hr);T($x.$$.fragment,Kl),eIr=i(Kl),zc=n(Kl,"P",{});var Are=s(zc);oIr=r(Are,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),WK=n(Are,"A",{href:!0});var YSt=s(WK);rIr=r(YSt,"from_pretrained()"),YSt.forEach(t),tIr=r(Are," class method or the "),QK=n(Are,"A",{href:!0});var KSt=s(QK);aIr=r(KSt,"from_config()"),KSt.forEach(t),nIr=r(Are,` class
method.`),Are.forEach(t),sIr=i(Kl),kx=n(Kl,"P",{});var ZXe=s(kx);lIr=r(ZXe,"This class cannot be instantiated directly using "),RMe=n(ZXe,"CODE",{});var ZSt=s(RMe);iIr=r(ZSt,"__init__()"),ZSt.forEach(t),dIr=r(ZXe," (throws an error)."),ZXe.forEach(t),cIr=i(Kl),zt=n(Kl,"DIV",{class:!0});var UL=s(zt);T(Sx.$$.fragment,UL),fIr=i(UL),PMe=n(UL,"P",{});var eRt=s(PMe);mIr=r(eRt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),eRt.forEach(t),gIr=i(UL),Wc=n(UL,"P",{});var Lre=s(Wc);hIr=r(Lre,`Note:
Loading a model from its configuration file does `),BMe=n(Lre,"STRONG",{});var oRt=s(BMe);pIr=r(oRt,"not"),oRt.forEach(t),uIr=r(Lre,` load the model weights. It only affects the
model\u2019s configuration. Use `),HK=n(Lre,"A",{href:!0});var rRt=s(HK);_Ir=r(rRt,"from_pretrained()"),rRt.forEach(t),bIr=r(Lre," to load the model weights."),Lre.forEach(t),vIr=i(UL),T(XC.$$.fragment,UL),UL.forEach(t),FIr=i(Kl),Or=n(Kl,"DIV",{class:!0});var Zl=s(Or);T(Rx.$$.fragment,Zl),TIr=i(Zl),IMe=n(Zl,"P",{});var tRt=s(IMe);MIr=r(tRt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),tRt.forEach(t),EIr=i(Zl),Fn=n(Zl,"P",{});var JL=s(Fn);CIr=r(JL,"The model class to instantiate is selected based on the "),NMe=n(JL,"CODE",{});var aRt=s(NMe);wIr=r(aRt,"model_type"),aRt.forEach(t),AIr=r(JL,` property of the config object (either
passed as an argument or loaded from `),qMe=n(JL,"CODE",{});var nRt=s(qMe);LIr=r(nRt,"pretrained_model_name_or_path"),nRt.forEach(t),yIr=r(JL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jMe=n(JL,"CODE",{});var sRt=s(jMe);xIr=r(sRt,"pretrained_model_name_or_path"),sRt.forEach(t),$Ir=r(JL,":"),JL.forEach(t),kIr=i(Zl),xe=n(Zl,"UL",{});var Ne=s(xe);zC=n(Ne,"LI",{});var kje=s(zC);DMe=n(kje,"STRONG",{});var lRt=s(DMe);SIr=r(lRt,"bart"),lRt.forEach(t),RIr=r(kje," \u2014 "),UK=n(kje,"A",{href:!0});var iRt=s(UK);PIr=r(iRt,"FlaxBartForCausalLM"),iRt.forEach(t),BIr=r(kje," (BART model)"),kje.forEach(t),IIr=i(Ne),WC=n(Ne,"LI",{});var Sje=s(WC);GMe=n(Sje,"STRONG",{});var dRt=s(GMe);NIr=r(dRt,"bert"),dRt.forEach(t),qIr=r(Sje," \u2014 "),JK=n(Sje,"A",{href:!0});var cRt=s(JK);jIr=r(cRt,"FlaxBertForCausalLM"),cRt.forEach(t),DIr=r(Sje," (BERT model)"),Sje.forEach(t),GIr=i(Ne),QC=n(Ne,"LI",{});var Rje=s(QC);OMe=n(Rje,"STRONG",{});var fRt=s(OMe);OIr=r(fRt,"big_bird"),fRt.forEach(t),VIr=r(Rje," \u2014 "),YK=n(Rje,"A",{href:!0});var mRt=s(YK);XIr=r(mRt,"FlaxBigBirdForCausalLM"),mRt.forEach(t),zIr=r(Rje," (BigBird model)"),Rje.forEach(t),WIr=i(Ne),HC=n(Ne,"LI",{});var Pje=s(HC);VMe=n(Pje,"STRONG",{});var gRt=s(VMe);QIr=r(gRt,"electra"),gRt.forEach(t),HIr=r(Pje," \u2014 "),KK=n(Pje,"A",{href:!0});var hRt=s(KK);UIr=r(hRt,"FlaxElectraForCausalLM"),hRt.forEach(t),JIr=r(Pje," (ELECTRA model)"),Pje.forEach(t),YIr=i(Ne),UC=n(Ne,"LI",{});var Bje=s(UC);XMe=n(Bje,"STRONG",{});var pRt=s(XMe);KIr=r(pRt,"gpt2"),pRt.forEach(t),ZIr=r(Bje," \u2014 "),ZK=n(Bje,"A",{href:!0});var uRt=s(ZK);eNr=r(uRt,"FlaxGPT2LMHeadModel"),uRt.forEach(t),oNr=r(Bje," (OpenAI GPT-2 model)"),Bje.forEach(t),rNr=i(Ne),JC=n(Ne,"LI",{});var Ije=s(JC);zMe=n(Ije,"STRONG",{});var _Rt=s(zMe);tNr=r(_Rt,"gpt_neo"),_Rt.forEach(t),aNr=r(Ije," \u2014 "),eZ=n(Ije,"A",{href:!0});var bRt=s(eZ);nNr=r(bRt,"FlaxGPTNeoForCausalLM"),bRt.forEach(t),sNr=r(Ije," (GPT Neo model)"),Ije.forEach(t),lNr=i(Ne),YC=n(Ne,"LI",{});var Nje=s(YC);WMe=n(Nje,"STRONG",{});var vRt=s(WMe);iNr=r(vRt,"gptj"),vRt.forEach(t),dNr=r(Nje," \u2014 "),oZ=n(Nje,"A",{href:!0});var FRt=s(oZ);cNr=r(FRt,"FlaxGPTJForCausalLM"),FRt.forEach(t),fNr=r(Nje," (GPT-J model)"),Nje.forEach(t),mNr=i(Ne),KC=n(Ne,"LI",{});var qje=s(KC);QMe=n(qje,"STRONG",{});var TRt=s(QMe);gNr=r(TRt,"opt"),TRt.forEach(t),hNr=r(qje," \u2014 "),rZ=n(qje,"A",{href:!0});var MRt=s(rZ);pNr=r(MRt,"FlaxOPTForCausalLM"),MRt.forEach(t),uNr=r(qje," (OPT model)"),qje.forEach(t),_Nr=i(Ne),ZC=n(Ne,"LI",{});var jje=s(ZC);HMe=n(jje,"STRONG",{});var ERt=s(HMe);bNr=r(ERt,"roberta"),ERt.forEach(t),vNr=r(jje," \u2014 "),tZ=n(jje,"A",{href:!0});var CRt=s(tZ);FNr=r(CRt,"FlaxRobertaForCausalLM"),CRt.forEach(t),TNr=r(jje," (RoBERTa model)"),jje.forEach(t),MNr=i(Ne),e0=n(Ne,"LI",{});var Dje=s(e0);UMe=n(Dje,"STRONG",{});var wRt=s(UMe);ENr=r(wRt,"xglm"),wRt.forEach(t),CNr=r(Dje," \u2014 "),aZ=n(Dje,"A",{href:!0});var ARt=s(aZ);wNr=r(ARt,"FlaxXGLMForCausalLM"),ARt.forEach(t),ANr=r(Dje," (XGLM model)"),Dje.forEach(t),Ne.forEach(t),LNr=i(Zl),T(o0.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),zOe=i(f),Qc=n(f,"H2",{class:!0});var eze=s(Qc);r0=n(eze,"A",{id:!0,class:!0,href:!0});var LRt=s(r0);JMe=n(LRt,"SPAN",{});var yRt=s(JMe);T(Px.$$.fragment,yRt),yRt.forEach(t),LRt.forEach(t),yNr=i(eze),YMe=n(eze,"SPAN",{});var xRt=s(YMe);xNr=r(xRt,"FlaxAutoModelForPreTraining"),xRt.forEach(t),eze.forEach(t),WOe=i(f),pr=n(f,"DIV",{class:!0});var ei=s(pr);T(Bx.$$.fragment,ei),$Nr=i(ei),Hc=n(ei,"P",{});var yre=s(Hc);kNr=r(yre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),nZ=n(yre,"A",{href:!0});var $Rt=s(nZ);SNr=r($Rt,"from_pretrained()"),$Rt.forEach(t),RNr=r(yre," class method or the "),sZ=n(yre,"A",{href:!0});var kRt=s(sZ);PNr=r(kRt,"from_config()"),kRt.forEach(t),BNr=r(yre,` class
method.`),yre.forEach(t),INr=i(ei),Ix=n(ei,"P",{});var oze=s(Ix);NNr=r(oze,"This class cannot be instantiated directly using "),KMe=n(oze,"CODE",{});var SRt=s(KMe);qNr=r(SRt,"__init__()"),SRt.forEach(t),jNr=r(oze," (throws an error)."),oze.forEach(t),DNr=i(ei),Wt=n(ei,"DIV",{class:!0});var YL=s(Wt);T(Nx.$$.fragment,YL),GNr=i(YL),ZMe=n(YL,"P",{});var RRt=s(ZMe);ONr=r(RRt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),RRt.forEach(t),VNr=i(YL),Uc=n(YL,"P",{});var xre=s(Uc);XNr=r(xre,`Note:
Loading a model from its configuration file does `),eEe=n(xre,"STRONG",{});var PRt=s(eEe);zNr=r(PRt,"not"),PRt.forEach(t),WNr=r(xre,` load the model weights. It only affects the
model\u2019s configuration. Use `),lZ=n(xre,"A",{href:!0});var BRt=s(lZ);QNr=r(BRt,"from_pretrained()"),BRt.forEach(t),HNr=r(xre," to load the model weights."),xre.forEach(t),UNr=i(YL),T(t0.$$.fragment,YL),YL.forEach(t),JNr=i(ei),Vr=n(ei,"DIV",{class:!0});var oi=s(Vr);T(qx.$$.fragment,oi),YNr=i(oi),oEe=n(oi,"P",{});var IRt=s(oEe);KNr=r(IRt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),IRt.forEach(t),ZNr=i(oi),Tn=n(oi,"P",{});var KL=s(Tn);eqr=r(KL,"The model class to instantiate is selected based on the "),rEe=n(KL,"CODE",{});var NRt=s(rEe);oqr=r(NRt,"model_type"),NRt.forEach(t),rqr=r(KL,` property of the config object (either
passed as an argument or loaded from `),tEe=n(KL,"CODE",{});var qRt=s(tEe);tqr=r(qRt,"pretrained_model_name_or_path"),qRt.forEach(t),aqr=r(KL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aEe=n(KL,"CODE",{});var jRt=s(aEe);nqr=r(jRt,"pretrained_model_name_or_path"),jRt.forEach(t),sqr=r(KL,":"),KL.forEach(t),lqr=i(oi),Ee=n(oi,"UL",{});var we=s(Ee);a0=n(we,"LI",{});var Gje=s(a0);nEe=n(Gje,"STRONG",{});var DRt=s(nEe);iqr=r(DRt,"albert"),DRt.forEach(t),dqr=r(Gje," \u2014 "),iZ=n(Gje,"A",{href:!0});var GRt=s(iZ);cqr=r(GRt,"FlaxAlbertForPreTraining"),GRt.forEach(t),fqr=r(Gje," (ALBERT model)"),Gje.forEach(t),mqr=i(we),n0=n(we,"LI",{});var Oje=s(n0);sEe=n(Oje,"STRONG",{});var ORt=s(sEe);gqr=r(ORt,"bart"),ORt.forEach(t),hqr=r(Oje," \u2014 "),dZ=n(Oje,"A",{href:!0});var VRt=s(dZ);pqr=r(VRt,"FlaxBartForConditionalGeneration"),VRt.forEach(t),uqr=r(Oje," (BART model)"),Oje.forEach(t),_qr=i(we),s0=n(we,"LI",{});var Vje=s(s0);lEe=n(Vje,"STRONG",{});var XRt=s(lEe);bqr=r(XRt,"bert"),XRt.forEach(t),vqr=r(Vje," \u2014 "),cZ=n(Vje,"A",{href:!0});var zRt=s(cZ);Fqr=r(zRt,"FlaxBertForPreTraining"),zRt.forEach(t),Tqr=r(Vje," (BERT model)"),Vje.forEach(t),Mqr=i(we),l0=n(we,"LI",{});var Xje=s(l0);iEe=n(Xje,"STRONG",{});var WRt=s(iEe);Eqr=r(WRt,"big_bird"),WRt.forEach(t),Cqr=r(Xje," \u2014 "),fZ=n(Xje,"A",{href:!0});var QRt=s(fZ);wqr=r(QRt,"FlaxBigBirdForPreTraining"),QRt.forEach(t),Aqr=r(Xje," (BigBird model)"),Xje.forEach(t),Lqr=i(we),i0=n(we,"LI",{});var zje=s(i0);dEe=n(zje,"STRONG",{});var HRt=s(dEe);yqr=r(HRt,"electra"),HRt.forEach(t),xqr=r(zje," \u2014 "),mZ=n(zje,"A",{href:!0});var URt=s(mZ);$qr=r(URt,"FlaxElectraForPreTraining"),URt.forEach(t),kqr=r(zje," (ELECTRA model)"),zje.forEach(t),Sqr=i(we),d0=n(we,"LI",{});var Wje=s(d0);cEe=n(Wje,"STRONG",{});var JRt=s(cEe);Rqr=r(JRt,"longt5"),JRt.forEach(t),Pqr=r(Wje," \u2014 "),gZ=n(Wje,"A",{href:!0});var YRt=s(gZ);Bqr=r(YRt,"FlaxLongT5ForConditionalGeneration"),YRt.forEach(t),Iqr=r(Wje," (LongT5 model)"),Wje.forEach(t),Nqr=i(we),c0=n(we,"LI",{});var Qje=s(c0);fEe=n(Qje,"STRONG",{});var KRt=s(fEe);qqr=r(KRt,"mbart"),KRt.forEach(t),jqr=r(Qje," \u2014 "),hZ=n(Qje,"A",{href:!0});var ZRt=s(hZ);Dqr=r(ZRt,"FlaxMBartForConditionalGeneration"),ZRt.forEach(t),Gqr=r(Qje," (mBART model)"),Qje.forEach(t),Oqr=i(we),f0=n(we,"LI",{});var Hje=s(f0);mEe=n(Hje,"STRONG",{});var ePt=s(mEe);Vqr=r(ePt,"mt5"),ePt.forEach(t),Xqr=r(Hje," \u2014 "),pZ=n(Hje,"A",{href:!0});var oPt=s(pZ);zqr=r(oPt,"FlaxMT5ForConditionalGeneration"),oPt.forEach(t),Wqr=r(Hje," (MT5 model)"),Hje.forEach(t),Qqr=i(we),m0=n(we,"LI",{});var Uje=s(m0);gEe=n(Uje,"STRONG",{});var rPt=s(gEe);Hqr=r(rPt,"roberta"),rPt.forEach(t),Uqr=r(Uje," \u2014 "),uZ=n(Uje,"A",{href:!0});var tPt=s(uZ);Jqr=r(tPt,"FlaxRobertaForMaskedLM"),tPt.forEach(t),Yqr=r(Uje," (RoBERTa model)"),Uje.forEach(t),Kqr=i(we),g0=n(we,"LI",{});var Jje=s(g0);hEe=n(Jje,"STRONG",{});var aPt=s(hEe);Zqr=r(aPt,"roformer"),aPt.forEach(t),ejr=r(Jje," \u2014 "),_Z=n(Jje,"A",{href:!0});var nPt=s(_Z);ojr=r(nPt,"FlaxRoFormerForMaskedLM"),nPt.forEach(t),rjr=r(Jje," (RoFormer model)"),Jje.forEach(t),tjr=i(we),h0=n(we,"LI",{});var Yje=s(h0);pEe=n(Yje,"STRONG",{});var sPt=s(pEe);ajr=r(sPt,"t5"),sPt.forEach(t),njr=r(Yje," \u2014 "),bZ=n(Yje,"A",{href:!0});var lPt=s(bZ);sjr=r(lPt,"FlaxT5ForConditionalGeneration"),lPt.forEach(t),ljr=r(Yje," (T5 model)"),Yje.forEach(t),ijr=i(we),p0=n(we,"LI",{});var Kje=s(p0);uEe=n(Kje,"STRONG",{});var iPt=s(uEe);djr=r(iPt,"wav2vec2"),iPt.forEach(t),cjr=r(Kje," \u2014 "),vZ=n(Kje,"A",{href:!0});var dPt=s(vZ);fjr=r(dPt,"FlaxWav2Vec2ForPreTraining"),dPt.forEach(t),mjr=r(Kje," (Wav2Vec2 model)"),Kje.forEach(t),gjr=i(we),u0=n(we,"LI",{});var Zje=s(u0);_Ee=n(Zje,"STRONG",{});var cPt=s(_Ee);hjr=r(cPt,"xlm-roberta"),cPt.forEach(t),pjr=r(Zje," \u2014 "),FZ=n(Zje,"A",{href:!0});var fPt=s(FZ);ujr=r(fPt,"FlaxXLMRobertaForMaskedLM"),fPt.forEach(t),_jr=r(Zje," (XLM-RoBERTa model)"),Zje.forEach(t),we.forEach(t),bjr=i(oi),T(_0.$$.fragment,oi),oi.forEach(t),ei.forEach(t),QOe=i(f),Jc=n(f,"H2",{class:!0});var rze=s(Jc);b0=n(rze,"A",{id:!0,class:!0,href:!0});var mPt=s(b0);bEe=n(mPt,"SPAN",{});var gPt=s(bEe);T(jx.$$.fragment,gPt),gPt.forEach(t),mPt.forEach(t),vjr=i(rze),vEe=n(rze,"SPAN",{});var hPt=s(vEe);Fjr=r(hPt,"FlaxAutoModelForMaskedLM"),hPt.forEach(t),rze.forEach(t),HOe=i(f),ur=n(f,"DIV",{class:!0});var ri=s(ur);T(Dx.$$.fragment,ri),Tjr=i(ri),Yc=n(ri,"P",{});var $re=s(Yc);Mjr=r($re,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),TZ=n($re,"A",{href:!0});var pPt=s(TZ);Ejr=r(pPt,"from_pretrained()"),pPt.forEach(t),Cjr=r($re," class method or the "),MZ=n($re,"A",{href:!0});var uPt=s(MZ);wjr=r(uPt,"from_config()"),uPt.forEach(t),Ajr=r($re,` class
method.`),$re.forEach(t),Ljr=i(ri),Gx=n(ri,"P",{});var tze=s(Gx);yjr=r(tze,"This class cannot be instantiated directly using "),FEe=n(tze,"CODE",{});var _Pt=s(FEe);xjr=r(_Pt,"__init__()"),_Pt.forEach(t),$jr=r(tze," (throws an error)."),tze.forEach(t),kjr=i(ri),Qt=n(ri,"DIV",{class:!0});var ZL=s(Qt);T(Ox.$$.fragment,ZL),Sjr=i(ZL),TEe=n(ZL,"P",{});var bPt=s(TEe);Rjr=r(bPt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),bPt.forEach(t),Pjr=i(ZL),Kc=n(ZL,"P",{});var kre=s(Kc);Bjr=r(kre,`Note:
Loading a model from its configuration file does `),MEe=n(kre,"STRONG",{});var vPt=s(MEe);Ijr=r(vPt,"not"),vPt.forEach(t),Njr=r(kre,` load the model weights. It only affects the
model\u2019s configuration. Use `),EZ=n(kre,"A",{href:!0});var FPt=s(EZ);qjr=r(FPt,"from_pretrained()"),FPt.forEach(t),jjr=r(kre," to load the model weights."),kre.forEach(t),Djr=i(ZL),T(v0.$$.fragment,ZL),ZL.forEach(t),Gjr=i(ri),Xr=n(ri,"DIV",{class:!0});var ti=s(Xr);T(Vx.$$.fragment,ti),Ojr=i(ti),EEe=n(ti,"P",{});var TPt=s(EEe);Vjr=r(TPt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),TPt.forEach(t),Xjr=i(ti),Mn=n(ti,"P",{});var ey=s(Mn);zjr=r(ey,"The model class to instantiate is selected based on the "),CEe=n(ey,"CODE",{});var MPt=s(CEe);Wjr=r(MPt,"model_type"),MPt.forEach(t),Qjr=r(ey,` property of the config object (either
passed as an argument or loaded from `),wEe=n(ey,"CODE",{});var EPt=s(wEe);Hjr=r(EPt,"pretrained_model_name_or_path"),EPt.forEach(t),Ujr=r(ey,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),AEe=n(ey,"CODE",{});var CPt=s(AEe);Jjr=r(CPt,"pretrained_model_name_or_path"),CPt.forEach(t),Yjr=r(ey,":"),ey.forEach(t),Kjr=i(ti),$e=n(ti,"UL",{});var qe=s($e);F0=n(qe,"LI",{});var eDe=s(F0);LEe=n(eDe,"STRONG",{});var wPt=s(LEe);Zjr=r(wPt,"albert"),wPt.forEach(t),eDr=r(eDe," \u2014 "),CZ=n(eDe,"A",{href:!0});var APt=s(CZ);oDr=r(APt,"FlaxAlbertForMaskedLM"),APt.forEach(t),rDr=r(eDe," (ALBERT model)"),eDe.forEach(t),tDr=i(qe),T0=n(qe,"LI",{});var oDe=s(T0);yEe=n(oDe,"STRONG",{});var LPt=s(yEe);aDr=r(LPt,"bart"),LPt.forEach(t),nDr=r(oDe," \u2014 "),wZ=n(oDe,"A",{href:!0});var yPt=s(wZ);sDr=r(yPt,"FlaxBartForConditionalGeneration"),yPt.forEach(t),lDr=r(oDe," (BART model)"),oDe.forEach(t),iDr=i(qe),M0=n(qe,"LI",{});var rDe=s(M0);xEe=n(rDe,"STRONG",{});var xPt=s(xEe);dDr=r(xPt,"bert"),xPt.forEach(t),cDr=r(rDe," \u2014 "),AZ=n(rDe,"A",{href:!0});var $Pt=s(AZ);fDr=r($Pt,"FlaxBertForMaskedLM"),$Pt.forEach(t),mDr=r(rDe," (BERT model)"),rDe.forEach(t),gDr=i(qe),E0=n(qe,"LI",{});var tDe=s(E0);$Ee=n(tDe,"STRONG",{});var kPt=s($Ee);hDr=r(kPt,"big_bird"),kPt.forEach(t),pDr=r(tDe," \u2014 "),LZ=n(tDe,"A",{href:!0});var SPt=s(LZ);uDr=r(SPt,"FlaxBigBirdForMaskedLM"),SPt.forEach(t),_Dr=r(tDe," (BigBird model)"),tDe.forEach(t),bDr=i(qe),C0=n(qe,"LI",{});var aDe=s(C0);kEe=n(aDe,"STRONG",{});var RPt=s(kEe);vDr=r(RPt,"distilbert"),RPt.forEach(t),FDr=r(aDe," \u2014 "),yZ=n(aDe,"A",{href:!0});var PPt=s(yZ);TDr=r(PPt,"FlaxDistilBertForMaskedLM"),PPt.forEach(t),MDr=r(aDe," (DistilBERT model)"),aDe.forEach(t),EDr=i(qe),w0=n(qe,"LI",{});var nDe=s(w0);SEe=n(nDe,"STRONG",{});var BPt=s(SEe);CDr=r(BPt,"electra"),BPt.forEach(t),wDr=r(nDe," \u2014 "),xZ=n(nDe,"A",{href:!0});var IPt=s(xZ);ADr=r(IPt,"FlaxElectraForMaskedLM"),IPt.forEach(t),LDr=r(nDe," (ELECTRA model)"),nDe.forEach(t),yDr=i(qe),A0=n(qe,"LI",{});var sDe=s(A0);REe=n(sDe,"STRONG",{});var NPt=s(REe);xDr=r(NPt,"mbart"),NPt.forEach(t),$Dr=r(sDe," \u2014 "),$Z=n(sDe,"A",{href:!0});var qPt=s($Z);kDr=r(qPt,"FlaxMBartForConditionalGeneration"),qPt.forEach(t),SDr=r(sDe," (mBART model)"),sDe.forEach(t),RDr=i(qe),L0=n(qe,"LI",{});var lDe=s(L0);PEe=n(lDe,"STRONG",{});var jPt=s(PEe);PDr=r(jPt,"roberta"),jPt.forEach(t),BDr=r(lDe," \u2014 "),kZ=n(lDe,"A",{href:!0});var DPt=s(kZ);IDr=r(DPt,"FlaxRobertaForMaskedLM"),DPt.forEach(t),NDr=r(lDe," (RoBERTa model)"),lDe.forEach(t),qDr=i(qe),y0=n(qe,"LI",{});var iDe=s(y0);BEe=n(iDe,"STRONG",{});var GPt=s(BEe);jDr=r(GPt,"roformer"),GPt.forEach(t),DDr=r(iDe," \u2014 "),SZ=n(iDe,"A",{href:!0});var OPt=s(SZ);GDr=r(OPt,"FlaxRoFormerForMaskedLM"),OPt.forEach(t),ODr=r(iDe," (RoFormer model)"),iDe.forEach(t),VDr=i(qe),x0=n(qe,"LI",{});var dDe=s(x0);IEe=n(dDe,"STRONG",{});var VPt=s(IEe);XDr=r(VPt,"xlm-roberta"),VPt.forEach(t),zDr=r(dDe," \u2014 "),RZ=n(dDe,"A",{href:!0});var XPt=s(RZ);WDr=r(XPt,"FlaxXLMRobertaForMaskedLM"),XPt.forEach(t),QDr=r(dDe," (XLM-RoBERTa model)"),dDe.forEach(t),qe.forEach(t),HDr=i(ti),T($0.$$.fragment,ti),ti.forEach(t),ri.forEach(t),UOe=i(f),Zc=n(f,"H2",{class:!0});var aze=s(Zc);k0=n(aze,"A",{id:!0,class:!0,href:!0});var zPt=s(k0);NEe=n(zPt,"SPAN",{});var WPt=s(NEe);T(Xx.$$.fragment,WPt),WPt.forEach(t),zPt.forEach(t),UDr=i(aze),qEe=n(aze,"SPAN",{});var QPt=s(qEe);JDr=r(QPt,"FlaxAutoModelForSeq2SeqLM"),QPt.forEach(t),aze.forEach(t),JOe=i(f),_r=n(f,"DIV",{class:!0});var ai=s(_r);T(zx.$$.fragment,ai),YDr=i(ai),ef=n(ai,"P",{});var Sre=s(ef);KDr=r(Sre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),PZ=n(Sre,"A",{href:!0});var HPt=s(PZ);ZDr=r(HPt,"from_pretrained()"),HPt.forEach(t),eGr=r(Sre," class method or the "),BZ=n(Sre,"A",{href:!0});var UPt=s(BZ);oGr=r(UPt,"from_config()"),UPt.forEach(t),rGr=r(Sre,` class
method.`),Sre.forEach(t),tGr=i(ai),Wx=n(ai,"P",{});var nze=s(Wx);aGr=r(nze,"This class cannot be instantiated directly using "),jEe=n(nze,"CODE",{});var JPt=s(jEe);nGr=r(JPt,"__init__()"),JPt.forEach(t),sGr=r(nze," (throws an error)."),nze.forEach(t),lGr=i(ai),Ht=n(ai,"DIV",{class:!0});var oy=s(Ht);T(Qx.$$.fragment,oy),iGr=i(oy),DEe=n(oy,"P",{});var YPt=s(DEe);dGr=r(YPt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),YPt.forEach(t),cGr=i(oy),of=n(oy,"P",{});var Rre=s(of);fGr=r(Rre,`Note:
Loading a model from its configuration file does `),GEe=n(Rre,"STRONG",{});var KPt=s(GEe);mGr=r(KPt,"not"),KPt.forEach(t),gGr=r(Rre,` load the model weights. It only affects the
model\u2019s configuration. Use `),IZ=n(Rre,"A",{href:!0});var ZPt=s(IZ);hGr=r(ZPt,"from_pretrained()"),ZPt.forEach(t),pGr=r(Rre," to load the model weights."),Rre.forEach(t),uGr=i(oy),T(S0.$$.fragment,oy),oy.forEach(t),_Gr=i(ai),zr=n(ai,"DIV",{class:!0});var ni=s(zr);T(Hx.$$.fragment,ni),bGr=i(ni),OEe=n(ni,"P",{});var eBt=s(OEe);vGr=r(eBt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),eBt.forEach(t),FGr=i(ni),En=n(ni,"P",{});var ry=s(En);TGr=r(ry,"The model class to instantiate is selected based on the "),VEe=n(ry,"CODE",{});var oBt=s(VEe);MGr=r(oBt,"model_type"),oBt.forEach(t),EGr=r(ry,` property of the config object (either
passed as an argument or loaded from `),XEe=n(ry,"CODE",{});var rBt=s(XEe);CGr=r(rBt,"pretrained_model_name_or_path"),rBt.forEach(t),wGr=r(ry,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zEe=n(ry,"CODE",{});var tBt=s(zEe);AGr=r(tBt,"pretrained_model_name_or_path"),tBt.forEach(t),LGr=r(ry,":"),ry.forEach(t),yGr=i(ni),ke=n(ni,"UL",{});var je=s(ke);R0=n(je,"LI",{});var cDe=s(R0);WEe=n(cDe,"STRONG",{});var aBt=s(WEe);xGr=r(aBt,"bart"),aBt.forEach(t),$Gr=r(cDe," \u2014 "),NZ=n(cDe,"A",{href:!0});var nBt=s(NZ);kGr=r(nBt,"FlaxBartForConditionalGeneration"),nBt.forEach(t),SGr=r(cDe," (BART model)"),cDe.forEach(t),RGr=i(je),P0=n(je,"LI",{});var fDe=s(P0);QEe=n(fDe,"STRONG",{});var sBt=s(QEe);PGr=r(sBt,"blenderbot"),sBt.forEach(t),BGr=r(fDe," \u2014 "),qZ=n(fDe,"A",{href:!0});var lBt=s(qZ);IGr=r(lBt,"FlaxBlenderbotForConditionalGeneration"),lBt.forEach(t),NGr=r(fDe," (Blenderbot model)"),fDe.forEach(t),qGr=i(je),B0=n(je,"LI",{});var mDe=s(B0);HEe=n(mDe,"STRONG",{});var iBt=s(HEe);jGr=r(iBt,"blenderbot-small"),iBt.forEach(t),DGr=r(mDe," \u2014 "),jZ=n(mDe,"A",{href:!0});var dBt=s(jZ);GGr=r(dBt,"FlaxBlenderbotSmallForConditionalGeneration"),dBt.forEach(t),OGr=r(mDe," (BlenderbotSmall model)"),mDe.forEach(t),VGr=i(je),I0=n(je,"LI",{});var gDe=s(I0);UEe=n(gDe,"STRONG",{});var cBt=s(UEe);XGr=r(cBt,"encoder-decoder"),cBt.forEach(t),zGr=r(gDe," \u2014 "),DZ=n(gDe,"A",{href:!0});var fBt=s(DZ);WGr=r(fBt,"FlaxEncoderDecoderModel"),fBt.forEach(t),QGr=r(gDe," (Encoder decoder model)"),gDe.forEach(t),HGr=i(je),N0=n(je,"LI",{});var hDe=s(N0);JEe=n(hDe,"STRONG",{});var mBt=s(JEe);UGr=r(mBt,"longt5"),mBt.forEach(t),JGr=r(hDe," \u2014 "),GZ=n(hDe,"A",{href:!0});var gBt=s(GZ);YGr=r(gBt,"FlaxLongT5ForConditionalGeneration"),gBt.forEach(t),KGr=r(hDe," (LongT5 model)"),hDe.forEach(t),ZGr=i(je),q0=n(je,"LI",{});var pDe=s(q0);YEe=n(pDe,"STRONG",{});var hBt=s(YEe);eOr=r(hBt,"marian"),hBt.forEach(t),oOr=r(pDe," \u2014 "),OZ=n(pDe,"A",{href:!0});var pBt=s(OZ);rOr=r(pBt,"FlaxMarianMTModel"),pBt.forEach(t),tOr=r(pDe," (Marian model)"),pDe.forEach(t),aOr=i(je),j0=n(je,"LI",{});var uDe=s(j0);KEe=n(uDe,"STRONG",{});var uBt=s(KEe);nOr=r(uBt,"mbart"),uBt.forEach(t),sOr=r(uDe," \u2014 "),VZ=n(uDe,"A",{href:!0});var _Bt=s(VZ);lOr=r(_Bt,"FlaxMBartForConditionalGeneration"),_Bt.forEach(t),iOr=r(uDe," (mBART model)"),uDe.forEach(t),dOr=i(je),D0=n(je,"LI",{});var _De=s(D0);ZEe=n(_De,"STRONG",{});var bBt=s(ZEe);cOr=r(bBt,"mt5"),bBt.forEach(t),fOr=r(_De," \u2014 "),XZ=n(_De,"A",{href:!0});var vBt=s(XZ);mOr=r(vBt,"FlaxMT5ForConditionalGeneration"),vBt.forEach(t),gOr=r(_De," (MT5 model)"),_De.forEach(t),hOr=i(je),G0=n(je,"LI",{});var bDe=s(G0);eCe=n(bDe,"STRONG",{});var FBt=s(eCe);pOr=r(FBt,"pegasus"),FBt.forEach(t),uOr=r(bDe," \u2014 "),zZ=n(bDe,"A",{href:!0});var TBt=s(zZ);_Or=r(TBt,"FlaxPegasusForConditionalGeneration"),TBt.forEach(t),bOr=r(bDe," (Pegasus model)"),bDe.forEach(t),vOr=i(je),O0=n(je,"LI",{});var vDe=s(O0);oCe=n(vDe,"STRONG",{});var MBt=s(oCe);FOr=r(MBt,"t5"),MBt.forEach(t),TOr=r(vDe," \u2014 "),WZ=n(vDe,"A",{href:!0});var EBt=s(WZ);MOr=r(EBt,"FlaxT5ForConditionalGeneration"),EBt.forEach(t),EOr=r(vDe," (T5 model)"),vDe.forEach(t),je.forEach(t),COr=i(ni),T(V0.$$.fragment,ni),ni.forEach(t),ai.forEach(t),YOe=i(f),rf=n(f,"H2",{class:!0});var sze=s(rf);X0=n(sze,"A",{id:!0,class:!0,href:!0});var CBt=s(X0);rCe=n(CBt,"SPAN",{});var wBt=s(rCe);T(Ux.$$.fragment,wBt),wBt.forEach(t),CBt.forEach(t),wOr=i(sze),tCe=n(sze,"SPAN",{});var ABt=s(tCe);AOr=r(ABt,"FlaxAutoModelForSequenceClassification"),ABt.forEach(t),sze.forEach(t),KOe=i(f),br=n(f,"DIV",{class:!0});var si=s(br);T(Jx.$$.fragment,si),LOr=i(si),tf=n(si,"P",{});var Pre=s(tf);yOr=r(Pre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),QZ=n(Pre,"A",{href:!0});var LBt=s(QZ);xOr=r(LBt,"from_pretrained()"),LBt.forEach(t),$Or=r(Pre," class method or the "),HZ=n(Pre,"A",{href:!0});var yBt=s(HZ);kOr=r(yBt,"from_config()"),yBt.forEach(t),SOr=r(Pre,` class
method.`),Pre.forEach(t),ROr=i(si),Yx=n(si,"P",{});var lze=s(Yx);POr=r(lze,"This class cannot be instantiated directly using "),aCe=n(lze,"CODE",{});var xBt=s(aCe);BOr=r(xBt,"__init__()"),xBt.forEach(t),IOr=r(lze," (throws an error)."),lze.forEach(t),NOr=i(si),Ut=n(si,"DIV",{class:!0});var ty=s(Ut);T(Kx.$$.fragment,ty),qOr=i(ty),nCe=n(ty,"P",{});var $Bt=s(nCe);jOr=r($Bt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),$Bt.forEach(t),DOr=i(ty),af=n(ty,"P",{});var Bre=s(af);GOr=r(Bre,`Note:
Loading a model from its configuration file does `),sCe=n(Bre,"STRONG",{});var kBt=s(sCe);OOr=r(kBt,"not"),kBt.forEach(t),VOr=r(Bre,` load the model weights. It only affects the
model\u2019s configuration. Use `),UZ=n(Bre,"A",{href:!0});var SBt=s(UZ);XOr=r(SBt,"from_pretrained()"),SBt.forEach(t),zOr=r(Bre," to load the model weights."),Bre.forEach(t),WOr=i(ty),T(z0.$$.fragment,ty),ty.forEach(t),QOr=i(si),Wr=n(si,"DIV",{class:!0});var li=s(Wr);T(Zx.$$.fragment,li),HOr=i(li),lCe=n(li,"P",{});var RBt=s(lCe);UOr=r(RBt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),RBt.forEach(t),JOr=i(li),Cn=n(li,"P",{});var ay=s(Cn);YOr=r(ay,"The model class to instantiate is selected based on the "),iCe=n(ay,"CODE",{});var PBt=s(iCe);KOr=r(PBt,"model_type"),PBt.forEach(t),ZOr=r(ay,` property of the config object (either
passed as an argument or loaded from `),dCe=n(ay,"CODE",{});var BBt=s(dCe);eVr=r(BBt,"pretrained_model_name_or_path"),BBt.forEach(t),oVr=r(ay,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cCe=n(ay,"CODE",{});var IBt=s(cCe);rVr=r(IBt,"pretrained_model_name_or_path"),IBt.forEach(t),tVr=r(ay,":"),ay.forEach(t),aVr=i(li),Se=n(li,"UL",{});var De=s(Se);W0=n(De,"LI",{});var FDe=s(W0);fCe=n(FDe,"STRONG",{});var NBt=s(fCe);nVr=r(NBt,"albert"),NBt.forEach(t),sVr=r(FDe," \u2014 "),JZ=n(FDe,"A",{href:!0});var qBt=s(JZ);lVr=r(qBt,"FlaxAlbertForSequenceClassification"),qBt.forEach(t),iVr=r(FDe," (ALBERT model)"),FDe.forEach(t),dVr=i(De),Q0=n(De,"LI",{});var TDe=s(Q0);mCe=n(TDe,"STRONG",{});var jBt=s(mCe);cVr=r(jBt,"bart"),jBt.forEach(t),fVr=r(TDe," \u2014 "),YZ=n(TDe,"A",{href:!0});var DBt=s(YZ);mVr=r(DBt,"FlaxBartForSequenceClassification"),DBt.forEach(t),gVr=r(TDe," (BART model)"),TDe.forEach(t),hVr=i(De),H0=n(De,"LI",{});var MDe=s(H0);gCe=n(MDe,"STRONG",{});var GBt=s(gCe);pVr=r(GBt,"bert"),GBt.forEach(t),uVr=r(MDe," \u2014 "),KZ=n(MDe,"A",{href:!0});var OBt=s(KZ);_Vr=r(OBt,"FlaxBertForSequenceClassification"),OBt.forEach(t),bVr=r(MDe," (BERT model)"),MDe.forEach(t),vVr=i(De),U0=n(De,"LI",{});var EDe=s(U0);hCe=n(EDe,"STRONG",{});var VBt=s(hCe);FVr=r(VBt,"big_bird"),VBt.forEach(t),TVr=r(EDe," \u2014 "),ZZ=n(EDe,"A",{href:!0});var XBt=s(ZZ);MVr=r(XBt,"FlaxBigBirdForSequenceClassification"),XBt.forEach(t),EVr=r(EDe," (BigBird model)"),EDe.forEach(t),CVr=i(De),J0=n(De,"LI",{});var CDe=s(J0);pCe=n(CDe,"STRONG",{});var zBt=s(pCe);wVr=r(zBt,"distilbert"),zBt.forEach(t),AVr=r(CDe," \u2014 "),eee=n(CDe,"A",{href:!0});var WBt=s(eee);LVr=r(WBt,"FlaxDistilBertForSequenceClassification"),WBt.forEach(t),yVr=r(CDe," (DistilBERT model)"),CDe.forEach(t),xVr=i(De),Y0=n(De,"LI",{});var wDe=s(Y0);uCe=n(wDe,"STRONG",{});var QBt=s(uCe);$Vr=r(QBt,"electra"),QBt.forEach(t),kVr=r(wDe," \u2014 "),oee=n(wDe,"A",{href:!0});var HBt=s(oee);SVr=r(HBt,"FlaxElectraForSequenceClassification"),HBt.forEach(t),RVr=r(wDe," (ELECTRA model)"),wDe.forEach(t),PVr=i(De),K0=n(De,"LI",{});var ADe=s(K0);_Ce=n(ADe,"STRONG",{});var UBt=s(_Ce);BVr=r(UBt,"mbart"),UBt.forEach(t),IVr=r(ADe," \u2014 "),ree=n(ADe,"A",{href:!0});var JBt=s(ree);NVr=r(JBt,"FlaxMBartForSequenceClassification"),JBt.forEach(t),qVr=r(ADe," (mBART model)"),ADe.forEach(t),jVr=i(De),Z0=n(De,"LI",{});var LDe=s(Z0);bCe=n(LDe,"STRONG",{});var YBt=s(bCe);DVr=r(YBt,"roberta"),YBt.forEach(t),GVr=r(LDe," \u2014 "),tee=n(LDe,"A",{href:!0});var KBt=s(tee);OVr=r(KBt,"FlaxRobertaForSequenceClassification"),KBt.forEach(t),VVr=r(LDe," (RoBERTa model)"),LDe.forEach(t),XVr=i(De),ew=n(De,"LI",{});var yDe=s(ew);vCe=n(yDe,"STRONG",{});var ZBt=s(vCe);zVr=r(ZBt,"roformer"),ZBt.forEach(t),WVr=r(yDe," \u2014 "),aee=n(yDe,"A",{href:!0});var eIt=s(aee);QVr=r(eIt,"FlaxRoFormerForSequenceClassification"),eIt.forEach(t),HVr=r(yDe," (RoFormer model)"),yDe.forEach(t),UVr=i(De),ow=n(De,"LI",{});var xDe=s(ow);FCe=n(xDe,"STRONG",{});var oIt=s(FCe);JVr=r(oIt,"xlm-roberta"),oIt.forEach(t),YVr=r(xDe," \u2014 "),nee=n(xDe,"A",{href:!0});var rIt=s(nee);KVr=r(rIt,"FlaxXLMRobertaForSequenceClassification"),rIt.forEach(t),ZVr=r(xDe," (XLM-RoBERTa model)"),xDe.forEach(t),De.forEach(t),eXr=i(li),T(rw.$$.fragment,li),li.forEach(t),si.forEach(t),ZOe=i(f),nf=n(f,"H2",{class:!0});var ize=s(nf);tw=n(ize,"A",{id:!0,class:!0,href:!0});var tIt=s(tw);TCe=n(tIt,"SPAN",{});var aIt=s(TCe);T(e$.$$.fragment,aIt),aIt.forEach(t),tIt.forEach(t),oXr=i(ize),MCe=n(ize,"SPAN",{});var nIt=s(MCe);rXr=r(nIt,"FlaxAutoModelForQuestionAnswering"),nIt.forEach(t),ize.forEach(t),eVe=i(f),vr=n(f,"DIV",{class:!0});var ii=s(vr);T(o$.$$.fragment,ii),tXr=i(ii),sf=n(ii,"P",{});var Ire=s(sf);aXr=r(Ire,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),see=n(Ire,"A",{href:!0});var sIt=s(see);nXr=r(sIt,"from_pretrained()"),sIt.forEach(t),sXr=r(Ire," class method or the "),lee=n(Ire,"A",{href:!0});var lIt=s(lee);lXr=r(lIt,"from_config()"),lIt.forEach(t),iXr=r(Ire,` class
method.`),Ire.forEach(t),dXr=i(ii),r$=n(ii,"P",{});var dze=s(r$);cXr=r(dze,"This class cannot be instantiated directly using "),ECe=n(dze,"CODE",{});var iIt=s(ECe);fXr=r(iIt,"__init__()"),iIt.forEach(t),mXr=r(dze," (throws an error)."),dze.forEach(t),gXr=i(ii),Jt=n(ii,"DIV",{class:!0});var ny=s(Jt);T(t$.$$.fragment,ny),hXr=i(ny),CCe=n(ny,"P",{});var dIt=s(CCe);pXr=r(dIt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),dIt.forEach(t),uXr=i(ny),lf=n(ny,"P",{});var Nre=s(lf);_Xr=r(Nre,`Note:
Loading a model from its configuration file does `),wCe=n(Nre,"STRONG",{});var cIt=s(wCe);bXr=r(cIt,"not"),cIt.forEach(t),vXr=r(Nre,` load the model weights. It only affects the
model\u2019s configuration. Use `),iee=n(Nre,"A",{href:!0});var fIt=s(iee);FXr=r(fIt,"from_pretrained()"),fIt.forEach(t),TXr=r(Nre," to load the model weights."),Nre.forEach(t),MXr=i(ny),T(aw.$$.fragment,ny),ny.forEach(t),EXr=i(ii),Qr=n(ii,"DIV",{class:!0});var di=s(Qr);T(a$.$$.fragment,di),CXr=i(di),ACe=n(di,"P",{});var mIt=s(ACe);wXr=r(mIt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),mIt.forEach(t),AXr=i(di),wn=n(di,"P",{});var sy=s(wn);LXr=r(sy,"The model class to instantiate is selected based on the "),LCe=n(sy,"CODE",{});var gIt=s(LCe);yXr=r(gIt,"model_type"),gIt.forEach(t),xXr=r(sy,` property of the config object (either
passed as an argument or loaded from `),yCe=n(sy,"CODE",{});var hIt=s(yCe);$Xr=r(hIt,"pretrained_model_name_or_path"),hIt.forEach(t),kXr=r(sy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xCe=n(sy,"CODE",{});var pIt=s(xCe);SXr=r(pIt,"pretrained_model_name_or_path"),pIt.forEach(t),RXr=r(sy,":"),sy.forEach(t),PXr=i(di),Re=n(di,"UL",{});var Ge=s(Re);nw=n(Ge,"LI",{});var $De=s(nw);$Ce=n($De,"STRONG",{});var uIt=s($Ce);BXr=r(uIt,"albert"),uIt.forEach(t),IXr=r($De," \u2014 "),dee=n($De,"A",{href:!0});var _It=s(dee);NXr=r(_It,"FlaxAlbertForQuestionAnswering"),_It.forEach(t),qXr=r($De," (ALBERT model)"),$De.forEach(t),jXr=i(Ge),sw=n(Ge,"LI",{});var kDe=s(sw);kCe=n(kDe,"STRONG",{});var bIt=s(kCe);DXr=r(bIt,"bart"),bIt.forEach(t),GXr=r(kDe," \u2014 "),cee=n(kDe,"A",{href:!0});var vIt=s(cee);OXr=r(vIt,"FlaxBartForQuestionAnswering"),vIt.forEach(t),VXr=r(kDe," (BART model)"),kDe.forEach(t),XXr=i(Ge),lw=n(Ge,"LI",{});var SDe=s(lw);SCe=n(SDe,"STRONG",{});var FIt=s(SCe);zXr=r(FIt,"bert"),FIt.forEach(t),WXr=r(SDe," \u2014 "),fee=n(SDe,"A",{href:!0});var TIt=s(fee);QXr=r(TIt,"FlaxBertForQuestionAnswering"),TIt.forEach(t),HXr=r(SDe," (BERT model)"),SDe.forEach(t),UXr=i(Ge),iw=n(Ge,"LI",{});var RDe=s(iw);RCe=n(RDe,"STRONG",{});var MIt=s(RCe);JXr=r(MIt,"big_bird"),MIt.forEach(t),YXr=r(RDe," \u2014 "),mee=n(RDe,"A",{href:!0});var EIt=s(mee);KXr=r(EIt,"FlaxBigBirdForQuestionAnswering"),EIt.forEach(t),ZXr=r(RDe," (BigBird model)"),RDe.forEach(t),ezr=i(Ge),dw=n(Ge,"LI",{});var PDe=s(dw);PCe=n(PDe,"STRONG",{});var CIt=s(PCe);ozr=r(CIt,"distilbert"),CIt.forEach(t),rzr=r(PDe," \u2014 "),gee=n(PDe,"A",{href:!0});var wIt=s(gee);tzr=r(wIt,"FlaxDistilBertForQuestionAnswering"),wIt.forEach(t),azr=r(PDe," (DistilBERT model)"),PDe.forEach(t),nzr=i(Ge),cw=n(Ge,"LI",{});var BDe=s(cw);BCe=n(BDe,"STRONG",{});var AIt=s(BCe);szr=r(AIt,"electra"),AIt.forEach(t),lzr=r(BDe," \u2014 "),hee=n(BDe,"A",{href:!0});var LIt=s(hee);izr=r(LIt,"FlaxElectraForQuestionAnswering"),LIt.forEach(t),dzr=r(BDe," (ELECTRA model)"),BDe.forEach(t),czr=i(Ge),fw=n(Ge,"LI",{});var IDe=s(fw);ICe=n(IDe,"STRONG",{});var yIt=s(ICe);fzr=r(yIt,"mbart"),yIt.forEach(t),mzr=r(IDe," \u2014 "),pee=n(IDe,"A",{href:!0});var xIt=s(pee);gzr=r(xIt,"FlaxMBartForQuestionAnswering"),xIt.forEach(t),hzr=r(IDe," (mBART model)"),IDe.forEach(t),pzr=i(Ge),mw=n(Ge,"LI",{});var NDe=s(mw);NCe=n(NDe,"STRONG",{});var $It=s(NCe);uzr=r($It,"roberta"),$It.forEach(t),_zr=r(NDe," \u2014 "),uee=n(NDe,"A",{href:!0});var kIt=s(uee);bzr=r(kIt,"FlaxRobertaForQuestionAnswering"),kIt.forEach(t),vzr=r(NDe," (RoBERTa model)"),NDe.forEach(t),Fzr=i(Ge),gw=n(Ge,"LI",{});var qDe=s(gw);qCe=n(qDe,"STRONG",{});var SIt=s(qCe);Tzr=r(SIt,"roformer"),SIt.forEach(t),Mzr=r(qDe," \u2014 "),_ee=n(qDe,"A",{href:!0});var RIt=s(_ee);Ezr=r(RIt,"FlaxRoFormerForQuestionAnswering"),RIt.forEach(t),Czr=r(qDe," (RoFormer model)"),qDe.forEach(t),wzr=i(Ge),hw=n(Ge,"LI",{});var jDe=s(hw);jCe=n(jDe,"STRONG",{});var PIt=s(jCe);Azr=r(PIt,"xlm-roberta"),PIt.forEach(t),Lzr=r(jDe," \u2014 "),bee=n(jDe,"A",{href:!0});var BIt=s(bee);yzr=r(BIt,"FlaxXLMRobertaForQuestionAnswering"),BIt.forEach(t),xzr=r(jDe," (XLM-RoBERTa model)"),jDe.forEach(t),Ge.forEach(t),$zr=i(di),T(pw.$$.fragment,di),di.forEach(t),ii.forEach(t),oVe=i(f),df=n(f,"H2",{class:!0});var cze=s(df);uw=n(cze,"A",{id:!0,class:!0,href:!0});var IIt=s(uw);DCe=n(IIt,"SPAN",{});var NIt=s(DCe);T(n$.$$.fragment,NIt),NIt.forEach(t),IIt.forEach(t),kzr=i(cze),GCe=n(cze,"SPAN",{});var qIt=s(GCe);Szr=r(qIt,"FlaxAutoModelForTokenClassification"),qIt.forEach(t),cze.forEach(t),rVe=i(f),Fr=n(f,"DIV",{class:!0});var ci=s(Fr);T(s$.$$.fragment,ci),Rzr=i(ci),cf=n(ci,"P",{});var qre=s(cf);Pzr=r(qre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),vee=n(qre,"A",{href:!0});var jIt=s(vee);Bzr=r(jIt,"from_pretrained()"),jIt.forEach(t),Izr=r(qre," class method or the "),Fee=n(qre,"A",{href:!0});var DIt=s(Fee);Nzr=r(DIt,"from_config()"),DIt.forEach(t),qzr=r(qre,` class
method.`),qre.forEach(t),jzr=i(ci),l$=n(ci,"P",{});var fze=s(l$);Dzr=r(fze,"This class cannot be instantiated directly using "),OCe=n(fze,"CODE",{});var GIt=s(OCe);Gzr=r(GIt,"__init__()"),GIt.forEach(t),Ozr=r(fze," (throws an error)."),fze.forEach(t),Vzr=i(ci),Yt=n(ci,"DIV",{class:!0});var ly=s(Yt);T(i$.$$.fragment,ly),Xzr=i(ly),VCe=n(ly,"P",{});var OIt=s(VCe);zzr=r(OIt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),OIt.forEach(t),Wzr=i(ly),ff=n(ly,"P",{});var jre=s(ff);Qzr=r(jre,`Note:
Loading a model from its configuration file does `),XCe=n(jre,"STRONG",{});var VIt=s(XCe);Hzr=r(VIt,"not"),VIt.forEach(t),Uzr=r(jre,` load the model weights. It only affects the
model\u2019s configuration. Use `),Tee=n(jre,"A",{href:!0});var XIt=s(Tee);Jzr=r(XIt,"from_pretrained()"),XIt.forEach(t),Yzr=r(jre," to load the model weights."),jre.forEach(t),Kzr=i(ly),T(_w.$$.fragment,ly),ly.forEach(t),Zzr=i(ci),Hr=n(ci,"DIV",{class:!0});var fi=s(Hr);T(d$.$$.fragment,fi),eWr=i(fi),zCe=n(fi,"P",{});var zIt=s(zCe);oWr=r(zIt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),zIt.forEach(t),rWr=i(fi),An=n(fi,"P",{});var iy=s(An);tWr=r(iy,"The model class to instantiate is selected based on the "),WCe=n(iy,"CODE",{});var WIt=s(WCe);aWr=r(WIt,"model_type"),WIt.forEach(t),nWr=r(iy,` property of the config object (either
passed as an argument or loaded from `),QCe=n(iy,"CODE",{});var QIt=s(QCe);sWr=r(QIt,"pretrained_model_name_or_path"),QIt.forEach(t),lWr=r(iy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HCe=n(iy,"CODE",{});var HIt=s(HCe);iWr=r(HIt,"pretrained_model_name_or_path"),HIt.forEach(t),dWr=r(iy,":"),iy.forEach(t),cWr=i(fi),Ve=n(fi,"UL",{});var To=s(Ve);bw=n(To,"LI",{});var DDe=s(bw);UCe=n(DDe,"STRONG",{});var UIt=s(UCe);fWr=r(UIt,"albert"),UIt.forEach(t),mWr=r(DDe," \u2014 "),Mee=n(DDe,"A",{href:!0});var JIt=s(Mee);gWr=r(JIt,"FlaxAlbertForTokenClassification"),JIt.forEach(t),hWr=r(DDe," (ALBERT model)"),DDe.forEach(t),pWr=i(To),vw=n(To,"LI",{});var GDe=s(vw);JCe=n(GDe,"STRONG",{});var YIt=s(JCe);uWr=r(YIt,"bert"),YIt.forEach(t),_Wr=r(GDe," \u2014 "),Eee=n(GDe,"A",{href:!0});var KIt=s(Eee);bWr=r(KIt,"FlaxBertForTokenClassification"),KIt.forEach(t),vWr=r(GDe," (BERT model)"),GDe.forEach(t),FWr=i(To),Fw=n(To,"LI",{});var ODe=s(Fw);YCe=n(ODe,"STRONG",{});var ZIt=s(YCe);TWr=r(ZIt,"big_bird"),ZIt.forEach(t),MWr=r(ODe," \u2014 "),Cee=n(ODe,"A",{href:!0});var eNt=s(Cee);EWr=r(eNt,"FlaxBigBirdForTokenClassification"),eNt.forEach(t),CWr=r(ODe," (BigBird model)"),ODe.forEach(t),wWr=i(To),Tw=n(To,"LI",{});var VDe=s(Tw);KCe=n(VDe,"STRONG",{});var oNt=s(KCe);AWr=r(oNt,"distilbert"),oNt.forEach(t),LWr=r(VDe," \u2014 "),wee=n(VDe,"A",{href:!0});var rNt=s(wee);yWr=r(rNt,"FlaxDistilBertForTokenClassification"),rNt.forEach(t),xWr=r(VDe," (DistilBERT model)"),VDe.forEach(t),$Wr=i(To),Mw=n(To,"LI",{});var XDe=s(Mw);ZCe=n(XDe,"STRONG",{});var tNt=s(ZCe);kWr=r(tNt,"electra"),tNt.forEach(t),SWr=r(XDe," \u2014 "),Aee=n(XDe,"A",{href:!0});var aNt=s(Aee);RWr=r(aNt,"FlaxElectraForTokenClassification"),aNt.forEach(t),PWr=r(XDe," (ELECTRA model)"),XDe.forEach(t),BWr=i(To),Ew=n(To,"LI",{});var zDe=s(Ew);e0e=n(zDe,"STRONG",{});var nNt=s(e0e);IWr=r(nNt,"roberta"),nNt.forEach(t),NWr=r(zDe," \u2014 "),Lee=n(zDe,"A",{href:!0});var sNt=s(Lee);qWr=r(sNt,"FlaxRobertaForTokenClassification"),sNt.forEach(t),jWr=r(zDe," (RoBERTa model)"),zDe.forEach(t),DWr=i(To),Cw=n(To,"LI",{});var WDe=s(Cw);o0e=n(WDe,"STRONG",{});var lNt=s(o0e);GWr=r(lNt,"roformer"),lNt.forEach(t),OWr=r(WDe," \u2014 "),yee=n(WDe,"A",{href:!0});var iNt=s(yee);VWr=r(iNt,"FlaxRoFormerForTokenClassification"),iNt.forEach(t),XWr=r(WDe," (RoFormer model)"),WDe.forEach(t),zWr=i(To),ww=n(To,"LI",{});var QDe=s(ww);r0e=n(QDe,"STRONG",{});var dNt=s(r0e);WWr=r(dNt,"xlm-roberta"),dNt.forEach(t),QWr=r(QDe," \u2014 "),xee=n(QDe,"A",{href:!0});var cNt=s(xee);HWr=r(cNt,"FlaxXLMRobertaForTokenClassification"),cNt.forEach(t),UWr=r(QDe," (XLM-RoBERTa model)"),QDe.forEach(t),To.forEach(t),JWr=i(fi),T(Aw.$$.fragment,fi),fi.forEach(t),ci.forEach(t),tVe=i(f),mf=n(f,"H2",{class:!0});var mze=s(mf);Lw=n(mze,"A",{id:!0,class:!0,href:!0});var fNt=s(Lw);t0e=n(fNt,"SPAN",{});var mNt=s(t0e);T(c$.$$.fragment,mNt),mNt.forEach(t),fNt.forEach(t),YWr=i(mze),a0e=n(mze,"SPAN",{});var gNt=s(a0e);KWr=r(gNt,"FlaxAutoModelForMultipleChoice"),gNt.forEach(t),mze.forEach(t),aVe=i(f),Tr=n(f,"DIV",{class:!0});var mi=s(Tr);T(f$.$$.fragment,mi),ZWr=i(mi),gf=n(mi,"P",{});var Dre=s(gf);eQr=r(Dre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),$ee=n(Dre,"A",{href:!0});var hNt=s($ee);oQr=r(hNt,"from_pretrained()"),hNt.forEach(t),rQr=r(Dre," class method or the "),kee=n(Dre,"A",{href:!0});var pNt=s(kee);tQr=r(pNt,"from_config()"),pNt.forEach(t),aQr=r(Dre,` class
method.`),Dre.forEach(t),nQr=i(mi),m$=n(mi,"P",{});var gze=s(m$);sQr=r(gze,"This class cannot be instantiated directly using "),n0e=n(gze,"CODE",{});var uNt=s(n0e);lQr=r(uNt,"__init__()"),uNt.forEach(t),iQr=r(gze," (throws an error)."),gze.forEach(t),dQr=i(mi),Kt=n(mi,"DIV",{class:!0});var dy=s(Kt);T(g$.$$.fragment,dy),cQr=i(dy),s0e=n(dy,"P",{});var _Nt=s(s0e);fQr=r(_Nt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),_Nt.forEach(t),mQr=i(dy),hf=n(dy,"P",{});var Gre=s(hf);gQr=r(Gre,`Note:
Loading a model from its configuration file does `),l0e=n(Gre,"STRONG",{});var bNt=s(l0e);hQr=r(bNt,"not"),bNt.forEach(t),pQr=r(Gre,` load the model weights. It only affects the
model\u2019s configuration. Use `),See=n(Gre,"A",{href:!0});var vNt=s(See);uQr=r(vNt,"from_pretrained()"),vNt.forEach(t),_Qr=r(Gre," to load the model weights."),Gre.forEach(t),bQr=i(dy),T(yw.$$.fragment,dy),dy.forEach(t),vQr=i(mi),Ur=n(mi,"DIV",{class:!0});var gi=s(Ur);T(h$.$$.fragment,gi),FQr=i(gi),i0e=n(gi,"P",{});var FNt=s(i0e);TQr=r(FNt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),FNt.forEach(t),MQr=i(gi),Ln=n(gi,"P",{});var cy=s(Ln);EQr=r(cy,"The model class to instantiate is selected based on the "),d0e=n(cy,"CODE",{});var TNt=s(d0e);CQr=r(TNt,"model_type"),TNt.forEach(t),wQr=r(cy,` property of the config object (either
passed as an argument or loaded from `),c0e=n(cy,"CODE",{});var MNt=s(c0e);AQr=r(MNt,"pretrained_model_name_or_path"),MNt.forEach(t),LQr=r(cy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f0e=n(cy,"CODE",{});var ENt=s(f0e);yQr=r(ENt,"pretrained_model_name_or_path"),ENt.forEach(t),xQr=r(cy,":"),cy.forEach(t),$Qr=i(gi),Xe=n(gi,"UL",{});var Mo=s(Xe);xw=n(Mo,"LI",{});var HDe=s(xw);m0e=n(HDe,"STRONG",{});var CNt=s(m0e);kQr=r(CNt,"albert"),CNt.forEach(t),SQr=r(HDe," \u2014 "),Ree=n(HDe,"A",{href:!0});var wNt=s(Ree);RQr=r(wNt,"FlaxAlbertForMultipleChoice"),wNt.forEach(t),PQr=r(HDe," (ALBERT model)"),HDe.forEach(t),BQr=i(Mo),$w=n(Mo,"LI",{});var UDe=s($w);g0e=n(UDe,"STRONG",{});var ANt=s(g0e);IQr=r(ANt,"bert"),ANt.forEach(t),NQr=r(UDe," \u2014 "),Pee=n(UDe,"A",{href:!0});var LNt=s(Pee);qQr=r(LNt,"FlaxBertForMultipleChoice"),LNt.forEach(t),jQr=r(UDe," (BERT model)"),UDe.forEach(t),DQr=i(Mo),kw=n(Mo,"LI",{});var JDe=s(kw);h0e=n(JDe,"STRONG",{});var yNt=s(h0e);GQr=r(yNt,"big_bird"),yNt.forEach(t),OQr=r(JDe," \u2014 "),Bee=n(JDe,"A",{href:!0});var xNt=s(Bee);VQr=r(xNt,"FlaxBigBirdForMultipleChoice"),xNt.forEach(t),XQr=r(JDe," (BigBird model)"),JDe.forEach(t),zQr=i(Mo),Sw=n(Mo,"LI",{});var YDe=s(Sw);p0e=n(YDe,"STRONG",{});var $Nt=s(p0e);WQr=r($Nt,"distilbert"),$Nt.forEach(t),QQr=r(YDe," \u2014 "),Iee=n(YDe,"A",{href:!0});var kNt=s(Iee);HQr=r(kNt,"FlaxDistilBertForMultipleChoice"),kNt.forEach(t),UQr=r(YDe," (DistilBERT model)"),YDe.forEach(t),JQr=i(Mo),Rw=n(Mo,"LI",{});var KDe=s(Rw);u0e=n(KDe,"STRONG",{});var SNt=s(u0e);YQr=r(SNt,"electra"),SNt.forEach(t),KQr=r(KDe," \u2014 "),Nee=n(KDe,"A",{href:!0});var RNt=s(Nee);ZQr=r(RNt,"FlaxElectraForMultipleChoice"),RNt.forEach(t),eHr=r(KDe," (ELECTRA model)"),KDe.forEach(t),oHr=i(Mo),Pw=n(Mo,"LI",{});var ZDe=s(Pw);_0e=n(ZDe,"STRONG",{});var PNt=s(_0e);rHr=r(PNt,"roberta"),PNt.forEach(t),tHr=r(ZDe," \u2014 "),qee=n(ZDe,"A",{href:!0});var BNt=s(qee);aHr=r(BNt,"FlaxRobertaForMultipleChoice"),BNt.forEach(t),nHr=r(ZDe," (RoBERTa model)"),ZDe.forEach(t),sHr=i(Mo),Bw=n(Mo,"LI",{});var eGe=s(Bw);b0e=n(eGe,"STRONG",{});var INt=s(b0e);lHr=r(INt,"roformer"),INt.forEach(t),iHr=r(eGe," \u2014 "),jee=n(eGe,"A",{href:!0});var NNt=s(jee);dHr=r(NNt,"FlaxRoFormerForMultipleChoice"),NNt.forEach(t),cHr=r(eGe," (RoFormer model)"),eGe.forEach(t),fHr=i(Mo),Iw=n(Mo,"LI",{});var oGe=s(Iw);v0e=n(oGe,"STRONG",{});var qNt=s(v0e);mHr=r(qNt,"xlm-roberta"),qNt.forEach(t),gHr=r(oGe," \u2014 "),Dee=n(oGe,"A",{href:!0});var jNt=s(Dee);hHr=r(jNt,"FlaxXLMRobertaForMultipleChoice"),jNt.forEach(t),pHr=r(oGe," (XLM-RoBERTa model)"),oGe.forEach(t),Mo.forEach(t),uHr=i(gi),T(Nw.$$.fragment,gi),gi.forEach(t),mi.forEach(t),nVe=i(f),pf=n(f,"H2",{class:!0});var hze=s(pf);qw=n(hze,"A",{id:!0,class:!0,href:!0});var DNt=s(qw);F0e=n(DNt,"SPAN",{});var GNt=s(F0e);T(p$.$$.fragment,GNt),GNt.forEach(t),DNt.forEach(t),_Hr=i(hze),T0e=n(hze,"SPAN",{});var ONt=s(T0e);bHr=r(ONt,"FlaxAutoModelForNextSentencePrediction"),ONt.forEach(t),hze.forEach(t),sVe=i(f),Mr=n(f,"DIV",{class:!0});var hi=s(Mr);T(u$.$$.fragment,hi),vHr=i(hi),uf=n(hi,"P",{});var Ore=s(uf);FHr=r(Ore,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Gee=n(Ore,"A",{href:!0});var VNt=s(Gee);THr=r(VNt,"from_pretrained()"),VNt.forEach(t),MHr=r(Ore," class method or the "),Oee=n(Ore,"A",{href:!0});var XNt=s(Oee);EHr=r(XNt,"from_config()"),XNt.forEach(t),CHr=r(Ore,` class
method.`),Ore.forEach(t),wHr=i(hi),_$=n(hi,"P",{});var pze=s(_$);AHr=r(pze,"This class cannot be instantiated directly using "),M0e=n(pze,"CODE",{});var zNt=s(M0e);LHr=r(zNt,"__init__()"),zNt.forEach(t),yHr=r(pze," (throws an error)."),pze.forEach(t),xHr=i(hi),Zt=n(hi,"DIV",{class:!0});var fy=s(Zt);T(b$.$$.fragment,fy),$Hr=i(fy),E0e=n(fy,"P",{});var WNt=s(E0e);kHr=r(WNt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),WNt.forEach(t),SHr=i(fy),_f=n(fy,"P",{});var Vre=s(_f);RHr=r(Vre,`Note:
Loading a model from its configuration file does `),C0e=n(Vre,"STRONG",{});var QNt=s(C0e);PHr=r(QNt,"not"),QNt.forEach(t),BHr=r(Vre,` load the model weights. It only affects the
model\u2019s configuration. Use `),Vee=n(Vre,"A",{href:!0});var HNt=s(Vee);IHr=r(HNt,"from_pretrained()"),HNt.forEach(t),NHr=r(Vre," to load the model weights."),Vre.forEach(t),qHr=i(fy),T(jw.$$.fragment,fy),fy.forEach(t),jHr=i(hi),Jr=n(hi,"DIV",{class:!0});var pi=s(Jr);T(v$.$$.fragment,pi),DHr=i(pi),w0e=n(pi,"P",{});var UNt=s(w0e);GHr=r(UNt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),UNt.forEach(t),OHr=i(pi),yn=n(pi,"P",{});var my=s(yn);VHr=r(my,"The model class to instantiate is selected based on the "),A0e=n(my,"CODE",{});var JNt=s(A0e);XHr=r(JNt,"model_type"),JNt.forEach(t),zHr=r(my,` property of the config object (either
passed as an argument or loaded from `),L0e=n(my,"CODE",{});var YNt=s(L0e);WHr=r(YNt,"pretrained_model_name_or_path"),YNt.forEach(t),QHr=r(my,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y0e=n(my,"CODE",{});var KNt=s(y0e);HHr=r(KNt,"pretrained_model_name_or_path"),KNt.forEach(t),UHr=r(my,":"),my.forEach(t),JHr=i(pi),x0e=n(pi,"UL",{});var ZNt=s(x0e);Dw=n(ZNt,"LI",{});var rGe=s(Dw);$0e=n(rGe,"STRONG",{});var eqt=s($0e);YHr=r(eqt,"bert"),eqt.forEach(t),KHr=r(rGe," \u2014 "),Xee=n(rGe,"A",{href:!0});var oqt=s(Xee);ZHr=r(oqt,"FlaxBertForNextSentencePrediction"),oqt.forEach(t),eUr=r(rGe," (BERT model)"),rGe.forEach(t),ZNt.forEach(t),oUr=i(pi),T(Gw.$$.fragment,pi),pi.forEach(t),hi.forEach(t),lVe=i(f),bf=n(f,"H2",{class:!0});var uze=s(bf);Ow=n(uze,"A",{id:!0,class:!0,href:!0});var rqt=s(Ow);k0e=n(rqt,"SPAN",{});var tqt=s(k0e);T(F$.$$.fragment,tqt),tqt.forEach(t),rqt.forEach(t),rUr=i(uze),S0e=n(uze,"SPAN",{});var aqt=s(S0e);tUr=r(aqt,"FlaxAutoModelForImageClassification"),aqt.forEach(t),uze.forEach(t),iVe=i(f),Er=n(f,"DIV",{class:!0});var ui=s(Er);T(T$.$$.fragment,ui),aUr=i(ui),vf=n(ui,"P",{});var Xre=s(vf);nUr=r(Xre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),zee=n(Xre,"A",{href:!0});var nqt=s(zee);sUr=r(nqt,"from_pretrained()"),nqt.forEach(t),lUr=r(Xre," class method or the "),Wee=n(Xre,"A",{href:!0});var sqt=s(Wee);iUr=r(sqt,"from_config()"),sqt.forEach(t),dUr=r(Xre,` class
method.`),Xre.forEach(t),cUr=i(ui),M$=n(ui,"P",{});var _ze=s(M$);fUr=r(_ze,"This class cannot be instantiated directly using "),R0e=n(_ze,"CODE",{});var lqt=s(R0e);mUr=r(lqt,"__init__()"),lqt.forEach(t),gUr=r(_ze," (throws an error)."),_ze.forEach(t),hUr=i(ui),ea=n(ui,"DIV",{class:!0});var gy=s(ea);T(E$.$$.fragment,gy),pUr=i(gy),P0e=n(gy,"P",{});var iqt=s(P0e);uUr=r(iqt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),iqt.forEach(t),_Ur=i(gy),Ff=n(gy,"P",{});var zre=s(Ff);bUr=r(zre,`Note:
Loading a model from its configuration file does `),B0e=n(zre,"STRONG",{});var dqt=s(B0e);vUr=r(dqt,"not"),dqt.forEach(t),FUr=r(zre,` load the model weights. It only affects the
model\u2019s configuration. Use `),Qee=n(zre,"A",{href:!0});var cqt=s(Qee);TUr=r(cqt,"from_pretrained()"),cqt.forEach(t),MUr=r(zre," to load the model weights."),zre.forEach(t),EUr=i(gy),T(Vw.$$.fragment,gy),gy.forEach(t),CUr=i(ui),Yr=n(ui,"DIV",{class:!0});var _i=s(Yr);T(C$.$$.fragment,_i),wUr=i(_i),I0e=n(_i,"P",{});var fqt=s(I0e);AUr=r(fqt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),fqt.forEach(t),LUr=i(_i),xn=n(_i,"P",{});var hy=s(xn);yUr=r(hy,"The model class to instantiate is selected based on the "),N0e=n(hy,"CODE",{});var mqt=s(N0e);xUr=r(mqt,"model_type"),mqt.forEach(t),$Ur=r(hy,` property of the config object (either
passed as an argument or loaded from `),q0e=n(hy,"CODE",{});var gqt=s(q0e);kUr=r(gqt,"pretrained_model_name_or_path"),gqt.forEach(t),SUr=r(hy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j0e=n(hy,"CODE",{});var hqt=s(j0e);RUr=r(hqt,"pretrained_model_name_or_path"),hqt.forEach(t),PUr=r(hy,":"),hy.forEach(t),BUr=i(_i),w$=n(_i,"UL",{});var bze=s(w$);Xw=n(bze,"LI",{});var tGe=s(Xw);D0e=n(tGe,"STRONG",{});var pqt=s(D0e);IUr=r(pqt,"beit"),pqt.forEach(t),NUr=r(tGe," \u2014 "),Hee=n(tGe,"A",{href:!0});var uqt=s(Hee);qUr=r(uqt,"FlaxBeitForImageClassification"),uqt.forEach(t),jUr=r(tGe," (BEiT model)"),tGe.forEach(t),DUr=i(bze),zw=n(bze,"LI",{});var aGe=s(zw);G0e=n(aGe,"STRONG",{});var _qt=s(G0e);GUr=r(_qt,"vit"),_qt.forEach(t),OUr=r(aGe," \u2014 "),Uee=n(aGe,"A",{href:!0});var bqt=s(Uee);VUr=r(bqt,"FlaxViTForImageClassification"),bqt.forEach(t),XUr=r(aGe," (ViT model)"),aGe.forEach(t),bze.forEach(t),zUr=i(_i),T(Ww.$$.fragment,_i),_i.forEach(t),ui.forEach(t),dVe=i(f),Tf=n(f,"H2",{class:!0});var vze=s(Tf);Qw=n(vze,"A",{id:!0,class:!0,href:!0});var vqt=s(Qw);O0e=n(vqt,"SPAN",{});var Fqt=s(O0e);T(A$.$$.fragment,Fqt),Fqt.forEach(t),vqt.forEach(t),WUr=i(vze),V0e=n(vze,"SPAN",{});var Tqt=s(V0e);QUr=r(Tqt,"FlaxAutoModelForVision2Seq"),Tqt.forEach(t),vze.forEach(t),cVe=i(f),Cr=n(f,"DIV",{class:!0});var bi=s(Cr);T(L$.$$.fragment,bi),HUr=i(bi),Mf=n(bi,"P",{});var Wre=s(Mf);UUr=r(Wre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Jee=n(Wre,"A",{href:!0});var Mqt=s(Jee);JUr=r(Mqt,"from_pretrained()"),Mqt.forEach(t),YUr=r(Wre," class method or the "),Yee=n(Wre,"A",{href:!0});var Eqt=s(Yee);KUr=r(Eqt,"from_config()"),Eqt.forEach(t),ZUr=r(Wre,` class
method.`),Wre.forEach(t),eJr=i(bi),y$=n(bi,"P",{});var Fze=s(y$);oJr=r(Fze,"This class cannot be instantiated directly using "),X0e=n(Fze,"CODE",{});var Cqt=s(X0e);rJr=r(Cqt,"__init__()"),Cqt.forEach(t),tJr=r(Fze," (throws an error)."),Fze.forEach(t),aJr=i(bi),oa=n(bi,"DIV",{class:!0});var py=s(oa);T(x$.$$.fragment,py),nJr=i(py),z0e=n(py,"P",{});var wqt=s(z0e);sJr=r(wqt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),wqt.forEach(t),lJr=i(py),Ef=n(py,"P",{});var Qre=s(Ef);iJr=r(Qre,`Note:
Loading a model from its configuration file does `),W0e=n(Qre,"STRONG",{});var Aqt=s(W0e);dJr=r(Aqt,"not"),Aqt.forEach(t),cJr=r(Qre,` load the model weights. It only affects the
model\u2019s configuration. Use `),Kee=n(Qre,"A",{href:!0});var Lqt=s(Kee);fJr=r(Lqt,"from_pretrained()"),Lqt.forEach(t),mJr=r(Qre," to load the model weights."),Qre.forEach(t),gJr=i(py),T(Hw.$$.fragment,py),py.forEach(t),hJr=i(bi),Kr=n(bi,"DIV",{class:!0});var vi=s(Kr);T($$.$$.fragment,vi),pJr=i(vi),Q0e=n(vi,"P",{});var yqt=s(Q0e);uJr=r(yqt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),yqt.forEach(t),_Jr=i(vi),$n=n(vi,"P",{});var uy=s($n);bJr=r(uy,"The model class to instantiate is selected based on the "),H0e=n(uy,"CODE",{});var xqt=s(H0e);vJr=r(xqt,"model_type"),xqt.forEach(t),FJr=r(uy,` property of the config object (either
passed as an argument or loaded from `),U0e=n(uy,"CODE",{});var $qt=s(U0e);TJr=r($qt,"pretrained_model_name_or_path"),$qt.forEach(t),MJr=r(uy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J0e=n(uy,"CODE",{});var kqt=s(J0e);EJr=r(kqt,"pretrained_model_name_or_path"),kqt.forEach(t),CJr=r(uy,":"),uy.forEach(t),wJr=i(vi),Y0e=n(vi,"UL",{});var Sqt=s(Y0e);Uw=n(Sqt,"LI",{});var nGe=s(Uw);K0e=n(nGe,"STRONG",{});var Rqt=s(K0e);AJr=r(Rqt,"vision-encoder-decoder"),Rqt.forEach(t),LJr=r(nGe," \u2014 "),Zee=n(nGe,"A",{href:!0});var Pqt=s(Zee);yJr=r(Pqt,"FlaxVisionEncoderDecoderModel"),Pqt.forEach(t),xJr=r(nGe," (Vision Encoder decoder model)"),nGe.forEach(t),Sqt.forEach(t),$Jr=i(vi),T(Jw.$$.fragment,vi),vi.forEach(t),bi.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(DDt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(Sn,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.AutoConfig"),c(Pn,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.AutoModel"),c(Bn,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.AutoTokenizer"),c(Ai,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertModel"),c(kf,"id","extending-the-auto-classes"),c(kf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kf,"href","#extending-the-auto-classes"),c(Li,"class","relative group"),c(Rf,"id","transformers.AutoConfig"),c(Rf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Rf,"href","#transformers.AutoConfig"),c(yi,"class","relative group"),c(Zk,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(eS,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig"),c(oS,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig"),c(rS,"href","/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitConfig"),c(tS,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig"),c(aS,"href","/docs/transformers/pr_16543/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(nS,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig"),c(sS,"href","/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(lS,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(iS,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(dS,"href","/docs/transformers/pr_16543/en/model_doc/bloom#transformers.BloomConfig"),c(cS,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig"),c(fS,"href","/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineConfig"),c(mS,"href","/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPConfig"),c(gS,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig"),c(hS,"href","/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextConfig"),c(pS,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLConfig"),c(uS,"href","/docs/transformers/pr_16543/en/model_doc/cvt#transformers.CvtConfig"),c(_S,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(bS,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(vS,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(FS,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig"),c(TS,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(MS,"href","/docs/transformers/pr_16543/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(ES,"href","/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTConfig"),c(CS,"href","/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrConfig"),c(wS,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig"),c(AS,"href","/docs/transformers/pr_16543/en/model_doc/dpr#transformers.DPRConfig"),c(LS,"href","/docs/transformers/pr_16543/en/model_doc/dpt#transformers.DPTConfig"),c(yS,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig"),c(xS,"href","/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c($S,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig"),c(kS,"href","/docs/transformers/pr_16543/en/model_doc/flava#transformers.FlavaConfig"),c(SS,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetConfig"),c(RS,"href","/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTConfig"),c(PS,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig"),c(BS,"href","/docs/transformers/pr_16543/en/model_doc/glpn#transformers.GLPNConfig"),c(IS,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config"),c(NS,"href","/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(qS,"href","/docs/transformers/pr_16543/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(jS,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig"),c(DS,"href","/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertConfig"),c(GS,"href","/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertConfig"),c(OS,"href","/docs/transformers/pr_16543/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(VS,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(XS,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(zS,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(WS,"href","/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDConfig"),c(QS,"href","/docs/transformers/pr_16543/en/model_doc/levit#transformers.LevitConfig"),c(HS,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig"),c(US,"href","/docs/transformers/pr_16543/en/model_doc/longt5#transformers.LongT5Config"),c(JS,"href","/docs/transformers/pr_16543/en/model_doc/luke#transformers.LukeConfig"),c(YS,"href","/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertConfig"),c(KS,"href","/docs/transformers/pr_16543/en/model_doc/m2m_100#transformers.M2M100Config"),c(ZS,"href","/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianConfig"),c(eR,"href","/docs/transformers/pr_16543/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(oR,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig"),c(rR,"href","/docs/transformers/pr_16543/en/model_doc/mctct#transformers.MCTCTConfig"),c(tR,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(aR,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(nR,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig"),c(sR,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Config"),c(lR,"href","/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(iR,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(dR,"href","/docs/transformers/pr_16543/en/model_doc/opt#transformers.OPTConfig"),c(cR,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusConfig"),c(fR,"href","/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverConfig"),c(mR,"href","/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartConfig"),c(gR,"href","/docs/transformers/pr_16543/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(hR,"href","/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(pR,"href","/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(uR,"href","/docs/transformers/pr_16543/en/model_doc/rag#transformers.RagConfig"),c(_R,"href","/docs/transformers/pr_16543/en/model_doc/realm#transformers.RealmConfig"),c(bR,"href","/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerConfig"),c(vR,"href","/docs/transformers/pr_16543/en/model_doc/regnet#transformers.RegNetConfig"),c(FR,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig"),c(TR,"href","/docs/transformers/pr_16543/en/model_doc/resnet#transformers.ResNetConfig"),c(MR,"href","/docs/transformers/pr_16543/en/model_doc/retribert#transformers.RetriBertConfig"),c(ER,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig"),c(CR,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig"),c(wR,"href","/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerConfig"),c(AR,"href","/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWConfig"),c(LR,"href","/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDConfig"),c(yR,"href","/docs/transformers/pr_16543/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(xR,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c($R,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(kR,"href","/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterConfig"),c(SR,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(RR,"href","/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinConfig"),c(PR,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config"),c(BR,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig"),c(IR,"href","/docs/transformers/pr_16543/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(NR,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(qR,"href","/docs/transformers/pr_16543/en/model_doc/trocr#transformers.TrOCRConfig"),c(jR,"href","/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(DR,"href","/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(GR,"href","/docs/transformers/pr_16543/en/model_doc/van#transformers.VanConfig"),c(OR,"href","/docs/transformers/pr_16543/en/model_doc/vilt#transformers.ViltConfig"),c(VR,"href","/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(XR,"href","/docs/transformers/pr_16543/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(zR,"href","/docs/transformers/pr_16543/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(WR,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTConfig"),c(QR,"href","/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(HR,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(UR,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(JR,"href","/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMConfig"),c(YR,"href","/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMConfig"),c(KR,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig"),c(ZR,"href","/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(eP,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(oP,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(rP,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig"),c(tP,"href","/docs/transformers/pr_16543/en/model_doc/yolos#transformers.YolosConfig"),c(aP,"href","/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoConfig"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gg,"id","transformers.AutoTokenizer"),c(Gg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Gg,"href","#transformers.AutoTokenizer"),c($i,"class","relative group"),c(nP,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(sP,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertTokenizer"),c(lP,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(iP,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartTokenizer"),c(dP,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartTokenizerFast"),c(cP,"href","/docs/transformers/pr_16543/en/model_doc/barthez#transformers.BarthezTokenizer"),c(fP,"href","/docs/transformers/pr_16543/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(mP,"href","/docs/transformers/pr_16543/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(gP,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertTokenizer"),c(hP,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertTokenizerFast"),c(pP,"href","/docs/transformers/pr_16543/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(uP,"href","/docs/transformers/pr_16543/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(_P,"href","/docs/transformers/pr_16543/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(bP,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(vP,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(FP,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(TP,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(MP,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(EP,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(CP,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(wP,"href","/docs/transformers/pr_16543/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(AP,"href","/docs/transformers/pr_16543/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(LP,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertTokenizer"),c(yP,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(xP,"href","/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineTokenizer"),c($P,"href","/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPTokenizer"),c(kP,"href","/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(SP,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(RP,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(PP,"href","/docs/transformers/pr_16543/en/model_doc/cpm#transformers.CpmTokenizer"),c(BP,"href","/docs/transformers/pr_16543/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(IP,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(NP,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaTokenizer"),c(qP,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(jP,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaTokenizer"),c(DP,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(GP,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(OP,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(VP,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(XP,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(zP,"href","/docs/transformers/pr_16543/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(WP,"href","/docs/transformers/pr_16543/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(QP,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraTokenizer"),c(HP,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(UP,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(JP,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetTokenizer"),c(YP,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(KP,"href","/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(ZP,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelTokenizer"),c(eB,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(oB,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(rB,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(tB,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(aB,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(nB,"href","/docs/transformers/pr_16543/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(sB,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(lB,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(iB,"href","/docs/transformers/pr_16543/en/model_doc/herbert#transformers.HerbertTokenizer"),c(dB,"href","/docs/transformers/pr_16543/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(cB,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(fB,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaTokenizer"),c(mB,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(gB,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(hB,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(pB,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(uB,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(_B,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(bB,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(vB,"href","/docs/transformers/pr_16543/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(FB,"href","/docs/transformers/pr_16543/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(TB,"href","/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDTokenizer"),c(MB,"href","/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDTokenizerFast"),c(EB,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerTokenizer"),c(CB,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(wB,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.T5Tokenizer"),c(AB,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.T5TokenizerFast"),c(LB,"href","/docs/transformers/pr_16543/en/model_doc/luke#transformers.LukeTokenizer"),c(yB,"href","/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(xB,"href","/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c($B,"href","/docs/transformers/pr_16543/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(kB,"href","/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianTokenizer"),c(SB,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartTokenizer"),c(RB,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(PB,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(BB,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(IB,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertTokenizer"),c(NB,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertTokenizerFast"),c(qB,"href","/docs/transformers/pr_16543/en/model_doc/mluke#transformers.MLukeTokenizer"),c(jB,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(DB,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(GB,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(OB,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(VB,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.T5Tokenizer"),c(XB,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.T5TokenizerFast"),c(zB,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertTokenizer"),c(WB,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(QB,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(HB,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(UB,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(JB,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(YB,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(KB,"href","/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(ZB,"href","/docs/transformers/pr_16543/en/model_doc/phobert#transformers.PhobertTokenizer"),c(eI,"href","/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartTokenizer"),c(oI,"href","/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(rI,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertTokenizer"),c(tI,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertTokenizerFast"),c(aI,"href","/docs/transformers/pr_16543/en/model_doc/rag#transformers.RagTokenizer"),c(nI,"href","/docs/transformers/pr_16543/en/model_doc/realm#transformers.RealmTokenizer"),c(sI,"href","/docs/transformers/pr_16543/en/model_doc/realm#transformers.RealmTokenizerFast"),c(lI,"href","/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerTokenizer"),c(iI,"href","/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(dI,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertTokenizer"),c(cI,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(fI,"href","/docs/transformers/pr_16543/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(mI,"href","/docs/transformers/pr_16543/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(gI,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaTokenizer"),c(hI,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(pI,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(uI,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(_I,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(bI,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(vI,"href","/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterTokenizer"),c(FI,"href","/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(TI,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(MI,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(EI,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.T5Tokenizer"),c(CI,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.T5TokenizerFast"),c(wI,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasTokenizer"),c(AI,"href","/docs/transformers/pr_16543/en/model_doc/tapex#transformers.TapexTokenizer"),c(LI,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(yI,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertTokenizer"),c(xI,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertTokenizerFast"),c($I,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertTokenizer"),c(kI,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertTokenizerFast"),c(SI,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(RI,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(PI,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(BI,"href","/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMTokenizer"),c(II,"href","/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(NI,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMTokenizer"),c(qI,"href","/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(jI,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(DI,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(GI,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaTokenizer"),c(OI,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(VI,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(XI,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(zI,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertTokenizer"),c(WI,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Eh,"id","transformers.AutoFeatureExtractor"),c(Eh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Eh,"href","#transformers.AutoFeatureExtractor"),c(ki,"class","relative group"),c(QI,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(HI,"href","/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(UI,"href","/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(JI,"href","/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(YI,"href","/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(KI,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(ZI,"href","/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(eN,"href","/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(oN,"href","/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(rN,"href","/docs/transformers/pr_16543/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(tN,"href","/docs/transformers/pr_16543/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(aN,"href","/docs/transformers/pr_16543/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(nN,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(sN,"href","/docs/transformers/pr_16543/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(lN,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(iN,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(dN,"href","/docs/transformers/pr_16543/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(cN,"href","/docs/transformers/pr_16543/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(fN,"href","/docs/transformers/pr_16543/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(mN,"href","/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(gN,"href","/docs/transformers/pr_16543/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(hN,"href","/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(pN,"href","/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(uN,"href","/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(_N,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(bN,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(vN,"href","/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(FN,"href","/docs/transformers/pr_16543/en/model_doc/vilt#transformers.ViltFeatureExtractor"),c(TN,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(MN,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(EN,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(CN,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(wN,"href","/docs/transformers/pr_16543/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ap,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(np,"id","transformers.AutoProcessor"),c(np,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(np,"href","#transformers.AutoProcessor"),c(Si,"class","relative group"),c(AN,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(LN,"href","/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPProcessor"),c(yN,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(xN,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c($N,"href","/docs/transformers/pr_16543/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(kN,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(SN,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(RN,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(PN,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(BN,"href","/docs/transformers/pr_16543/en/model_doc/trocr#transformers.TrOCRProcessor"),c(IN,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(NN,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(qN,"href","/docs/transformers/pr_16543/en/model_doc/vilt#transformers.ViltProcessor"),c(jN,"href","/docs/transformers/pr_16543/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(DN,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(GN,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(ON,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ap,"id","transformers.AutoModel"),c(Ap,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ap,"href","#transformers.AutoModel"),c(Pi,"class","relative group"),c(VN,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XN,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zN,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WN,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertModel"),c(QN,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartModel"),c(HN,"href","/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitModel"),c(UN,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertModel"),c(JN,"href","/docs/transformers/pr_16543/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(YN,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdModel"),c(KN,"href","/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(ZN,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(eq,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(oq,"href","/docs/transformers/pr_16543/en/model_doc/bloom#transformers.BloomModel"),c(rq,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertModel"),c(tq,"href","/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineModel"),c(aq,"href","/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPModel"),c(nq,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertModel"),c(sq,"href","/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextModel"),c(lq,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLModel"),c(iq,"href","/docs/transformers/pr_16543/en/model_doc/cvt#transformers.CvtModel"),c(dq,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(cq,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(fq,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(mq,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaModel"),c(gq,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(hq,"href","/docs/transformers/pr_16543/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(pq,"href","/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTModel"),c(uq,"href","/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrModel"),c(_q,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertModel"),c(bq,"href","/docs/transformers/pr_16543/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(vq,"href","/docs/transformers/pr_16543/en/model_doc/dpt#transformers.DPTModel"),c(Fq,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraModel"),c(Tq,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertModel"),c(Mq,"href","/docs/transformers/pr_16543/en/model_doc/flava#transformers.FlavaModel"),c(Eq,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetModel"),c(Cq,"href","/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTModel"),c(wq,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelModel"),c(Aq,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelBaseModel"),c(Lq,"href","/docs/transformers/pr_16543/en/model_doc/glpn#transformers.GLPNModel"),c(yq,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Model"),c(xq,"href","/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c($q,"href","/docs/transformers/pr_16543/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(kq,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJModel"),c(Sq,"href","/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertModel"),c(Rq,"href","/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertModel"),c(Pq,"href","/docs/transformers/pr_16543/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(Bq,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(Iq,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(Nq,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(qq,"href","/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDModel"),c(jq,"href","/docs/transformers/pr_16543/en/model_doc/levit#transformers.LevitModel"),c(Dq,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerModel"),c(Gq,"href","/docs/transformers/pr_16543/en/model_doc/longt5#transformers.LongT5Model"),c(Oq,"href","/docs/transformers/pr_16543/en/model_doc/luke#transformers.LukeModel"),c(Vq,"href","/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertModel"),c(Xq,"href","/docs/transformers/pr_16543/en/model_doc/m2m_100#transformers.M2M100Model"),c(zq,"href","/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianModel"),c(Wq,"href","/docs/transformers/pr_16543/en/model_doc/maskformer#transformers.MaskFormerModel"),c(Qq,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartModel"),c(Hq,"href","/docs/transformers/pr_16543/en/model_doc/mctct#transformers.MCTCTModel"),c(Uq,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(Jq,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertModel"),c(Yq,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetModel"),c(Kq,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Model"),c(Zq,"href","/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerModel"),c(ej,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(oj,"href","/docs/transformers/pr_16543/en/model_doc/opt#transformers.OPTModel"),c(rj,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusModel"),c(tj,"href","/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverModel"),c(aj,"href","/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartModel"),c(nj,"href","/docs/transformers/pr_16543/en/model_doc/poolformer#transformers.PoolFormerModel"),c(sj,"href","/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(lj,"href","/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertModel"),c(ij,"href","/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerModel"),c(dj,"href","/docs/transformers/pr_16543/en/model_doc/regnet#transformers.RegNetModel"),c(cj,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertModel"),c(fj,"href","/docs/transformers/pr_16543/en/model_doc/resnet#transformers.ResNetModel"),c(mj,"href","/docs/transformers/pr_16543/en/model_doc/retribert#transformers.RetriBertModel"),c(gj,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaModel"),c(hj,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerModel"),c(pj,"href","/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerModel"),c(uj,"href","/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWModel"),c(_j,"href","/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDModel"),c(bj,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(vj,"href","/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterModel"),c(Fj,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(Tj,"href","/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinModel"),c(Mj,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Model"),c(Ej,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasModel"),c(Cj,"href","/docs/transformers/pr_16543/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(wj,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(Aj,"href","/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechModel"),c(Lj,"href","/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(yj,"href","/docs/transformers/pr_16543/en/model_doc/van#transformers.VanModel"),c(xj,"href","/docs/transformers/pr_16543/en/model_doc/vilt#transformers.ViltModel"),c($j,"href","/docs/transformers/pr_16543/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(kj,"href","/docs/transformers/pr_16543/en/model_doc/visual_bert#transformers.VisualBertModel"),c(Sj,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTModel"),c(Rj,"href","/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(Pj,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(Bj,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(Ij,"href","/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMModel"),c(Nj,"href","/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMModel"),c(qj,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMModel"),c(jj,"href","/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(Dj,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(Gj,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(Oj,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetModel"),c(Vj,"href","/docs/transformers/pr_16543/en/model_doc/yolos#transformers.YolosModel"),c(Xj,"href","/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(L_,"id","transformers.AutoModelForPreTraining"),c(L_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(L_,"href","#transformers.AutoModelForPreTraining"),c(Ni,"class","relative group"),c(zj,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wj,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Qj,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Hj,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForPreTraining"),c(Uj,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Jj,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForPreTraining"),c(Yj,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(Kj,"href","/docs/transformers/pr_16543/en/model_doc/bloom#transformers.BloomForCausalLM"),c(Zj,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(eD,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(oD,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(rD,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(tD,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(aD,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(nD,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForPreTraining"),c(sD,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(lD,"href","/docs/transformers/pr_16543/en/model_doc/flava#transformers.FlavaForPreTraining"),c(iD,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForPreTraining"),c(dD,"href","/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(cD,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(fD,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(mD,"href","/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(gD,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(hD,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(pD,"href","/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(uD,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(_D,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(bD,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(vD,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(FD,"href","/docs/transformers/pr_16543/en/model_doc/retribert#transformers.RetriBertModel"),c(TD,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(MD,"href","/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(ED,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(CD,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(wD,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(AD,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(LD,"href","/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(yD,"href","/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(xD,"href","/docs/transformers/pr_16543/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c($D,"href","/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(kD,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(SD,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(RD,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(PD,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(BD,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(ID,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(F1,"id","transformers.AutoModelForCausalLM"),c(F1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(F1,"href","#transformers.AutoModelForCausalLM"),c(Di,"class","relative group"),c(ND,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qD,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jD,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DD,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForCausalLM"),c(GD,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertLMHeadModel"),c(OD,"href","/docs/transformers/pr_16543/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(VD,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(XD,"href","/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(zD,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(WD,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(QD,"href","/docs/transformers/pr_16543/en/model_doc/bloom#transformers.BloomForCausalLM"),c(HD,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(UD,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(JD,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(YD,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForCausalLM"),c(KD,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(ZD,"href","/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(eG,"href","/docs/transformers/pr_16543/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(oG,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(rG,"href","/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianForCausalLM"),c(tG,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForCausalLM"),c(aG,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(nG,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(sG,"href","/docs/transformers/pr_16543/en/model_doc/opt#transformers.OPTForCausalLM"),c(lG,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(iG,"href","/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(dG,"href","/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(cG,"href","/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(fG,"href","/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(mG,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(gG,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(hG,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(pG,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(uG,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(_G,"href","/docs/transformers/pr_16543/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(bG,"href","/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(vG,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(FG,"href","/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(TG,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(MG,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(EG,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(i2,"id","transformers.AutoModelForMaskedLM"),c(i2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(i2,"href","#transformers.AutoModelForMaskedLM"),c(Vi,"class","relative group"),c(CG,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wG,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AG,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LG,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(yG,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(xG,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForMaskedLM"),c($G,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(kG,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(SG,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(RG,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(PG,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(BG,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(IG,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(NG,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(qG,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(jG,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(DG,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(GG,"href","/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(OG,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(VG,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(XG,"href","/docs/transformers/pr_16543/en/model_doc/luke#transformers.LukeForMaskedLM"),c(zG,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(WG,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(QG,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(HG,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(UG,"href","/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(JG,"href","/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(YG,"href","/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(KG,"href","/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(ZG,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(eO,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(oO,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(rO,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(tO,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(aO,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(nO,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(sO,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(lO,"href","/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(H2,"id","transformers.AutoModelForSeq2SeqLM"),c(H2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H2,"href","#transformers.AutoModelForSeq2SeqLM"),c(Wi,"class","relative group"),c(iO,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dO,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cO,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fO,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(mO,"href","/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(gO,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(hO,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(pO,"href","/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(uO,"href","/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(_O,"href","/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(bO,"href","/docs/transformers/pr_16543/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c(vO,"href","/docs/transformers/pr_16543/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(FO,"href","/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianMTModel"),c(TO,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(MO,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(EO,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(CO,"href","/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(wO,"href","/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(AO,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(LO,"href","/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pb,"id","transformers.AutoModelForSequenceClassification"),c(pb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pb,"href","#transformers.AutoModelForSequenceClassification"),c(Ui,"class","relative group"),c(yO,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xO,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($O,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kO,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(SO,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForSequenceClassification"),c(RO,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForSequenceClassification"),c(PO,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(BO,"href","/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(IO,"href","/docs/transformers/pr_16543/en/model_doc/bloom#transformers.BloomForSequenceClassification"),c(NO,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(qO,"href","/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(jO,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(DO,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(GO,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(OO,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(VO,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(XO,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(zO,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(WO,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(QO,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(HO,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(UO,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(JO,"href","/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(YO,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(KO,"href","/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(ZO,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(eV,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(oV,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(rV,"href","/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDForSequenceClassification"),c(tV,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(aV,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(nV,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(sV,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(lV,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(iV,"href","/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(dV,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(cV,"href","/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(fV,"href","/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(mV,"href","/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(gV,"href","/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(hV,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(pV,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(uV,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(_V,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(bV,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(vV,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(FV,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(TV,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(MV,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(EV,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(CV,"href","/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(g4,"id","transformers.AutoModelForMultipleChoice"),c(g4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(g4,"href","#transformers.AutoModelForMultipleChoice"),c(Ki,"class","relative group"),c(wV,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AV,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LV,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yV,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(xV,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForMultipleChoice"),c($V,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(kV,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(SV,"href","/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(RV,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(PV,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(BV,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(IV,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(NV,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(qV,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(jV,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(DV,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(GV,"href","/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(OV,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(VV,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(XV,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(zV,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(WV,"href","/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(QV,"href","/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(HV,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(UV,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(JV,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(YV,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(KV,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(ZV,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(eX,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(oX,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(rX,"href","/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W4,"id","transformers.AutoModelForNextSentencePrediction"),c(W4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W4,"href","#transformers.AutoModelForNextSentencePrediction"),c(od,"class","relative group"),c(tX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sX,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(lX,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(iX,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(dX,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(cX,"href","/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(o5,"id","transformers.AutoModelForTokenClassification"),c(o5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o5,"href","#transformers.AutoModelForTokenClassification"),c(ad,"class","relative group"),c(fX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hX,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(pX,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForTokenClassification"),c(uX,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(_X,"href","/docs/transformers/pr_16543/en/model_doc/bloom#transformers.BloomForTokenClassification"),c(bX,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(vX,"href","/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineForTokenClassification"),c(FX,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(TX,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(MX,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(EX,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(CX,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(wX,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(AX,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(LX,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(yX,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(xX,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c($X,"href","/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(kX,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(SX,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(RX,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(PX,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(BX,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(IX,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(NX,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(qX,"href","/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(jX,"href","/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(DX,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(GX,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(OX,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(VX,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(XX,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(zX,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(WX,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(QX,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(HX,"href","/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(D5,"id","transformers.AutoModelForQuestionAnswering"),c(D5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(D5,"href","#transformers.AutoModelForQuestionAnswering"),c(ld,"class","relative group"),c(UX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KX,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(ZX,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(ez,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(oz,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(rz,"href","/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(tz,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(az,"href","/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(nz,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(sz,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(lz,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(iz,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(dz,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(cz,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(fz,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(mz,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(gz,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(hz,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(pz,"href","/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(uz,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(_z,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(bz,"href","/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(vz,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(Fz,"href","/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(Tz,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(Mz,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(Ez,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(Cz,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(wz,"href","/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(Az,"href","/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(Lz,"href","/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(yz,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(xz,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c($z,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(kz,"href","/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(Sz,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(Rz,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(Pz,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(Bz,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(Iz,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(Nz,"href","/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($v,"id","transformers.AutoModelForTableQuestionAnswering"),c($v,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($v,"href","#transformers.AutoModelForTableQuestionAnswering"),c(cd,"class","relative group"),c(qz,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jz,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Dz,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gz,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bv,"id","transformers.AutoModelForImageClassification"),c(Bv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Bv,"href","#transformers.AutoModelForImageClassification"),c(gd,"class","relative group"),c(Oz,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vz,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Xz,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zz,"href","/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitForImageClassification"),c(Wz,"href","/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(Qz,"href","/docs/transformers/pr_16543/en/model_doc/cvt#transformers.CvtForImageClassification"),c(Hz,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(Uz,"href","/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTForImageClassification"),c(Jz,"href","/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(Yz,"href","/docs/transformers/pr_16543/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(Kz,"href","/docs/transformers/pr_16543/en/model_doc/levit#transformers.LevitForImageClassification"),c(Zz,"href","/docs/transformers/pr_16543/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(eW,"href","/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(oW,"href","/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(rW,"href","/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(tW,"href","/docs/transformers/pr_16543/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(aW,"href","/docs/transformers/pr_16543/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(nW,"href","/docs/transformers/pr_16543/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(sW,"href","/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(lW,"href","/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinForImageClassification"),c(iW,"href","/docs/transformers/pr_16543/en/model_doc/van#transformers.VanForImageClassification"),c(dW,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yv,"id","transformers.AutoModelForVision2Seq"),c(Yv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Yv,"href","#transformers.AutoModelForVision2Seq"),c(ud,"class","relative group"),c(cW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gW,"href","/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(r3,"id","transformers.AutoModelForVisualQuestionAnswering"),c(r3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(r3,"href","#transformers.AutoModelForVisualQuestionAnswering"),c(vd,"class","relative group"),c(hW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_W,"href","/docs/transformers/pr_16543/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(l3,"id","transformers.AutoModelForAudioClassification"),c(l3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(l3,"href","#transformers.AutoModelForAudioClassification"),c(Md,"class","relative group"),c(bW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TW,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(MW,"href","/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(EW,"href","/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(CW,"href","/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(wW,"href","/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(AW,"href","/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(LW,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(yW,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(xW,"href","/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(F3,"id","transformers.AutoModelForAudioFrameClassification"),c(F3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(F3,"href","#transformers.AutoModelForAudioFrameClassification"),c(wd,"class","relative group"),c($W,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RW,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(PW,"href","/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(BW,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(IW,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(NW,"href","/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(x3,"id","transformers.AutoModelForCTC"),c(x3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(x3,"href","#transformers.AutoModelForCTC"),c(yd,"class","relative group"),c(qW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GW,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(OW,"href","/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertForCTC"),c(VW,"href","/docs/transformers/pr_16543/en/model_doc/mctct#transformers.MCTCTForCTC"),c(XW,"href","/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWForCTC"),c(zW,"href","/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDForCTC"),c(WW,"href","/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(QW,"href","/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(HW,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(UW,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(JW,"href","/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMForCTC"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(V3,"id","transformers.AutoModelForSpeechSeq2Seq"),c(V3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V3,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(kd,"class","relative group"),c(YW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eQ,"href","/docs/transformers/pr_16543/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(oQ,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U3,"id","transformers.AutoModelForAudioXVector"),c(U3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U3,"href","#transformers.AutoModelForAudioXVector"),c(Pd,"class","relative group"),c(rQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nQ,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(sQ,"href","/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(lQ,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(iQ,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(dQ,"href","/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMForXVector"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aF,"id","transformers.AutoModelForMaskedImageModeling"),c(aF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aF,"href","#transformers.AutoModelForMaskedImageModeling"),c(Nd,"class","relative group"),c(cQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gQ,"href","/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(hQ,"href","/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(pQ,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fF,"id","transformers.AutoModelForObjectDetection"),c(fF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fF,"href","#transformers.AutoModelForObjectDetection"),c(Gd,"class","relative group"),c(uQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_Q,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vQ,"href","/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrForObjectDetection"),c(FQ,"href","/docs/transformers/pr_16543/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_F,"id","transformers.AutoModelForImageSegmentation"),c(_F,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_F,"href","#transformers.AutoModelForImageSegmentation"),c(Xd,"class","relative group"),c(TQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CQ,"href","/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrForSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MF,"id","transformers.AutoModelForSemanticSegmentation"),c(MF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(MF,"href","#transformers.AutoModelForSemanticSegmentation"),c(Qd,"class","relative group"),c(wQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yQ,"href","/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(xQ,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c($Q,"href","/docs/transformers/pr_16543/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(kQ,"href","/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($F,"id","transformers.AutoModelForInstanceSegmentation"),c($F,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($F,"href","#transformers.AutoModelForInstanceSegmentation"),c(Jd,"class","relative group"),c(SQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BQ,"href","/docs/transformers/pr_16543/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BF,"id","transformers.TFAutoModel"),c(BF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(BF,"href","#transformers.TFAutoModel"),c(Zd,"class","relative group"),c(IQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jQ,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertModel"),c(DQ,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.TFBartModel"),c(GQ,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertModel"),c(OQ,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(VQ,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(XQ,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertModel"),c(zQ,"href","/docs/transformers/pr_16543/en/model_doc/clip#transformers.TFCLIPModel"),c(WQ,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertModel"),c(QQ,"href","/docs/transformers/pr_16543/en/model_doc/convnext#transformers.TFConvNextModel"),c(HQ,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.TFCTRLModel"),c(UQ,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(JQ,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaModel"),c(YQ,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(KQ,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(ZQ,"href","/docs/transformers/pr_16543/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(eH,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraModel"),c(oH,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(rH,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelModel"),c(tH,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(aH,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.TFGPT2Model"),c(nH,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.TFGPTJModel"),c(sH,"href","/docs/transformers/pr_16543/en/model_doc/hubert#transformers.TFHubertModel"),c(lH,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(iH,"href","/docs/transformers/pr_16543/en/model_doc/led#transformers.TFLEDModel"),c(dH,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerModel"),c(cH,"href","/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.TFLxmertModel"),c(fH,"href","/docs/transformers/pr_16543/en/model_doc/marian#transformers.TFMarianModel"),c(mH,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.TFMBartModel"),c(gH,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(hH,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetModel"),c(pH,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.TFMT5Model"),c(uH,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(_H,"href","/docs/transformers/pr_16543/en/model_doc/opt#transformers.TFOPTModel"),c(bH,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.TFPegasusModel"),c(vH,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertModel"),c(FH,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaModel"),c(TH,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerModel"),c(MH,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(EH,"href","/docs/transformers/pr_16543/en/model_doc/swin#transformers.TFSwinModel"),c(CH,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.TFT5Model"),c(wH,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasModel"),c(AH,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(LH,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.TFViTModel"),c(yH,"href","/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(xH,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c($H,"href","/docs/transformers/pr_16543/en/model_doc/xglm#transformers.TFXGLMModel"),c(kH,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMModel"),c(SH,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(RH,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetModel"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k6,"id","transformers.TFAutoModelForPreTraining"),c(k6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k6,"href","#transformers.TFAutoModelForPreTraining"),c(rc,"class","relative group"),c(PH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NH,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(qH,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(jH,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForPreTraining"),c(DH,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(GH,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(OH,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(VH,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(XH,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(zH,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(WH,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(QH,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(HH,"href","/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(UH,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(JH,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(YH,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(KH,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(ZH,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(eU,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(oU,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(rU,"href","/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(tU,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(aU,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(nU,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tT,"id","transformers.TFAutoModelForCausalLM"),c(tT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tT,"href","#transformers.TFAutoModelForCausalLM"),c(nc,"class","relative group"),c(sU,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lU,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iU,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dU,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(cU,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(fU,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(mU,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(gU,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(hU,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(pU,"href","/docs/transformers/pr_16543/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(uU,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(_U,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(bU,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(vU,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(FU,"href","/docs/transformers/pr_16543/en/model_doc/xglm#transformers.TFXGLMForCausalLM"),c(TU,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(MU,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FT,"id","transformers.TFAutoModelForImageClassification"),c(FT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(FT,"href","#transformers.TFAutoModelForImageClassification"),c(ic,"class","relative group"),c(EU,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CU,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wU,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AU,"href","/docs/transformers/pr_16543/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(LU,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(yU,"href","/docs/transformers/pr_16543/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(xU,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.TFViTForImageClassification"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LT,"id","transformers.TFAutoModelForMaskedLM"),c(LT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(LT,"href","#transformers.TFAutoModelForMaskedLM"),c(fc,"class","relative group"),c($U,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kU,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SU,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RU,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(PU,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(BU,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(IU,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(NU,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(qU,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(jU,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(DU,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(GU,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(OU,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(VU,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(XU,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(zU,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(WU,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(QU,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(HU,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(UU,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(JU,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(YU,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(KU,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JT,"id","transformers.TFAutoModelForSeq2SeqLM"),c(JT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(JT,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(hc,"class","relative group"),c(ZU,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eJ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oJ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rJ,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(tJ,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(aJ,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(nJ,"href","/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(sJ,"href","/docs/transformers/pr_16543/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(lJ,"href","/docs/transformers/pr_16543/en/model_doc/marian#transformers.TFMarianMTModel"),c(iJ,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(dJ,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(cJ,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(fJ,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dM,"id","transformers.TFAutoModelForSequenceClassification"),c(dM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dM,"href","#transformers.TFAutoModelForSequenceClassification"),c(_c,"class","relative group"),c(mJ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gJ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hJ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pJ,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(uJ,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(_J,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(bJ,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(vJ,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(FJ,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(TJ,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(MJ,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(EJ,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(CJ,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(wJ,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(AJ,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(LJ,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(yJ,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(xJ,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c($J,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(kJ,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(SJ,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(RJ,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(PJ,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(BJ,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(IJ,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(NJ,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(qJ,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(jJ,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(DJ,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qM,"id","transformers.TFAutoModelForMultipleChoice"),c(qM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qM,"href","#transformers.TFAutoModelForMultipleChoice"),c(Fc,"class","relative group"),c(GJ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OJ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VJ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XJ,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(zJ,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(WJ,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(QJ,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(HJ,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(UJ,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(JJ,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(YJ,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(KJ,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(ZJ,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(eY,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(oY,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(rY,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(tY,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(aY,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(nY,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(sY,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aE,"id","transformers.TFAutoModelForNextSentencePrediction"),c(aE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aE,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(Ec,"class","relative group"),c(lY,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iY,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dY,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cY,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(fY,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dE,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(dE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dE,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(Ac,"class","relative group"),c(mY,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gY,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hY,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pY,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gE,"id","transformers.TFAutoModelForTokenClassification"),c(gE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gE,"href","#transformers.TFAutoModelForTokenClassification"),c(xc,"class","relative group"),c(uY,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_Y,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bY,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vY,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(FY,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(TY,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(MY,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(EY,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(CY,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(wY,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(AY,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(LY,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(yY,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(xY,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c($Y,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(kY,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(SY,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(RY,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(PY,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(BY,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(IY,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(NY,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(qY,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IE,"id","transformers.TFAutoModelForQuestionAnswering"),c(IE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(IE,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Sc,"class","relative group"),c(jY,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DY,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GY,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OY,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(VY,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(XY,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(zY,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(WY,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(QY,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(HY,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(UY,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(JY,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(YY,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(KY,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(ZY,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(eK,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(oK,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(rK,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(tK,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(aK,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(nK,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(sK,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(lK,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nC,"id","transformers.TFAutoModelForVision2Seq"),c(nC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nC,"href","#transformers.TFAutoModelForVision2Seq"),c(Bc,"class","relative group"),c(iK,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dK,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cK,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fK,"href","/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dC,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(dC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dC,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(qc,"class","relative group"),c(mK,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gK,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hK,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pK,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gC,"id","transformers.FlaxAutoModel"),c(gC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gC,"href","#transformers.FlaxAutoModel"),c(Gc,"class","relative group"),c(uK,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_K,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bK,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vK,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertModel"),c(FK,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartModel"),c(TK,"href","/docs/transformers/pr_16543/en/model_doc/beit#transformers.FlaxBeitModel"),c(MK,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertModel"),c(EK,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(CK,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(wK,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(AK,"href","/docs/transformers/pr_16543/en/model_doc/clip#transformers.FlaxCLIPModel"),c(LK,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(yK,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraModel"),c(xK,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c($K,"href","/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(kK,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(SK,"href","/docs/transformers/pr_16543/en/model_doc/longt5#transformers.FlaxLongT5Model"),c(RK,"href","/docs/transformers/pr_16543/en/model_doc/marian#transformers.FlaxMarianModel"),c(PK,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartModel"),c(BK,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.FlaxMT5Model"),c(IK,"href","/docs/transformers/pr_16543/en/model_doc/opt#transformers.FlaxOPTModel"),c(NK,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(qK,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(jK,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(DK,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.FlaxT5Model"),c(GK,"href","/docs/transformers/pr_16543/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(OK,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.FlaxViTModel"),c(VK,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(XK,"href","/docs/transformers/pr_16543/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(zK,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VC,"id","transformers.FlaxAutoModelForCausalLM"),c(VC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(VC,"href","#transformers.FlaxAutoModelForCausalLM"),c(Xc,"class","relative group"),c(WK,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QK,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HK,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UK,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(JK,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(YK,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(KK,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(ZK,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(eZ,"href","/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(oZ,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(rZ,"href","/docs/transformers/pr_16543/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(tZ,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(aZ,"href","/docs/transformers/pr_16543/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(r0,"id","transformers.FlaxAutoModelForPreTraining"),c(r0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(r0,"href","#transformers.FlaxAutoModelForPreTraining"),c(Qc,"class","relative group"),c(nZ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sZ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lZ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iZ,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(dZ,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(cZ,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(fZ,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(mZ,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(gZ,"href","/docs/transformers/pr_16543/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(hZ,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(pZ,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(uZ,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(_Z,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(bZ,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(vZ,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(FZ,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(b0,"id","transformers.FlaxAutoModelForMaskedLM"),c(b0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b0,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Jc,"class","relative group"),c(TZ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MZ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EZ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CZ,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(wZ,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(AZ,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(LZ,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(yZ,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(xZ,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c($Z,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(kZ,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(SZ,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(RZ,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k0,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(k0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k0,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Zc,"class","relative group"),c(PZ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BZ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IZ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NZ,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(qZ,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(jZ,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(DZ,"href","/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(GZ,"href","/docs/transformers/pr_16543/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(OZ,"href","/docs/transformers/pr_16543/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(VZ,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(XZ,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(zZ,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(WZ,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(X0,"id","transformers.FlaxAutoModelForSequenceClassification"),c(X0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X0,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(rf,"class","relative group"),c(QZ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HZ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UZ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JZ,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(YZ,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(KZ,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(ZZ,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(eee,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(oee,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(ree,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(tee,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(aee,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(nee,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tw,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(tw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tw,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(nf,"class","relative group"),c(see,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lee,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iee,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dee,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(cee,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(fee,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(mee,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(gee,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(hee,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(pee,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(uee,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(_ee,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(bee,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uw,"id","transformers.FlaxAutoModelForTokenClassification"),c(uw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uw,"href","#transformers.FlaxAutoModelForTokenClassification"),c(df,"class","relative group"),c(vee,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Fee,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Tee,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mee,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(Eee,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(Cee,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(wee,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(Aee,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(Lee,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(yee,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(xee,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lw,"id","transformers.FlaxAutoModelForMultipleChoice"),c(Lw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Lw,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(mf,"class","relative group"),c($ee,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kee,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(See,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ree,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(Pee,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(Bee,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(Iee,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(Nee,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(qee,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(jee,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(Dee,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qw,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(qw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qw,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(pf,"class","relative group"),c(Gee,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Oee,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Vee,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xee,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ow,"id","transformers.FlaxAutoModelForImageClassification"),c(Ow,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ow,"href","#transformers.FlaxAutoModelForImageClassification"),c(bf,"class","relative group"),c(zee,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wee,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Qee,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Hee,"href","/docs/transformers/pr_16543/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(Uee,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qw,"id","transformers.FlaxAutoModelForVision2Seq"),c(Qw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Qw,"href","#transformers.FlaxAutoModelForVision2Seq"),c(Tf,"class","relative group"),c(Jee,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yee,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Kee,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zee,"href","/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,_){e(document.head,g),b(f,v,_),b(f,p,_),e(p,m),e(m,u),M(d,u,null),e(p,h),e(p,Eo),e(Eo,Fi),b(f,Lf,_),b(f,at,_),e(at,Ti),e(at,Mi),e(Mi,_y),e(at,yf),b(f,Oe,_),b(f,We,_),e(We,Ei),e(We,Sn),e(Sn,by),e(We,Rn),e(We,Pn),e(Pn,vy),e(We,Ci),e(We,Bn),e(Bn,Fy),e(We,wi),b(f,xf,_),M(ya,f,_),b(f,Qe,_),b(f,Ae,_),e(Ae,Qk),e(Ae,Ai),e(Ai,Hk),e(Ae,Uk),b(f,Co,_),b(f,xa,_),e(xa,Jk),e(xa,$f),e($f,Yk),e(xa,Tze),b(f,sGe,_),b(f,Li,_),e(Li,kf),e(kf,Hre),M(Ty,Hre,null),e(Li,Mze),e(Li,Ure),e(Ure,Eze),b(f,lGe,_),b(f,In,_),e(In,Cze),e(In,Jre),e(Jre,wze),e(In,Aze),e(In,Yre),e(Yre,Lze),e(In,yze),b(f,iGe,_),M(My,f,_),b(f,dGe,_),b(f,Kk,_),e(Kk,xze),b(f,cGe,_),M(Sf,f,_),b(f,fGe,_),b(f,yi,_),e(yi,Rf),e(Rf,Kre),M(Ey,Kre,null),e(yi,$ze),e(yi,Zre),e(Zre,kze),b(f,mGe,_),b(f,wo,_),M(Cy,wo,null),e(wo,Sze),e(wo,wy),e(wy,Rze),e(wy,Zk),e(Zk,Pze),e(wy,Bze),e(wo,Ize),e(wo,Ay),e(Ay,Nze),e(Ay,ete),e(ete,qze),e(Ay,jze),e(wo,Dze),e(wo,wr),M(Ly,wr,null),e(wr,Gze),e(wr,ote),e(ote,Oze),e(wr,Vze),e(wr,xi),e(xi,Xze),e(xi,rte),e(rte,zze),e(xi,Wze),e(xi,tte),e(tte,Qze),e(xi,Hze),e(wr,Uze),e(wr,A),e(A,Pf),e(Pf,ate),e(ate,Jze),e(Pf,Yze),e(Pf,eS),e(eS,Kze),e(Pf,Zze),e(A,eWe),e(A,Bf),e(Bf,nte),e(nte,oWe),e(Bf,rWe),e(Bf,oS),e(oS,tWe),e(Bf,aWe),e(A,nWe),e(A,If),e(If,ste),e(ste,sWe),e(If,lWe),e(If,rS),e(rS,iWe),e(If,dWe),e(A,cWe),e(A,Nf),e(Nf,lte),e(lte,fWe),e(Nf,mWe),e(Nf,tS),e(tS,gWe),e(Nf,hWe),e(A,pWe),e(A,qf),e(qf,ite),e(ite,uWe),e(qf,_We),e(qf,aS),e(aS,bWe),e(qf,vWe),e(A,FWe),e(A,jf),e(jf,dte),e(dte,TWe),e(jf,MWe),e(jf,nS),e(nS,EWe),e(jf,CWe),e(A,wWe),e(A,Df),e(Df,cte),e(cte,AWe),e(Df,LWe),e(Df,sS),e(sS,yWe),e(Df,xWe),e(A,$We),e(A,Gf),e(Gf,fte),e(fte,kWe),e(Gf,SWe),e(Gf,lS),e(lS,RWe),e(Gf,PWe),e(A,BWe),e(A,Of),e(Of,mte),e(mte,IWe),e(Of,NWe),e(Of,iS),e(iS,qWe),e(Of,jWe),e(A,DWe),e(A,Vf),e(Vf,gte),e(gte,GWe),e(Vf,OWe),e(Vf,dS),e(dS,VWe),e(Vf,XWe),e(A,zWe),e(A,Xf),e(Xf,hte),e(hte,WWe),e(Xf,QWe),e(Xf,cS),e(cS,HWe),e(Xf,UWe),e(A,JWe),e(A,zf),e(zf,pte),e(pte,YWe),e(zf,KWe),e(zf,fS),e(fS,ZWe),e(zf,eQe),e(A,oQe),e(A,Wf),e(Wf,ute),e(ute,rQe),e(Wf,tQe),e(Wf,mS),e(mS,aQe),e(Wf,nQe),e(A,sQe),e(A,Qf),e(Qf,_te),e(_te,lQe),e(Qf,iQe),e(Qf,gS),e(gS,dQe),e(Qf,cQe),e(A,fQe),e(A,Hf),e(Hf,bte),e(bte,mQe),e(Hf,gQe),e(Hf,hS),e(hS,hQe),e(Hf,pQe),e(A,uQe),e(A,Uf),e(Uf,vte),e(vte,_Qe),e(Uf,bQe),e(Uf,pS),e(pS,vQe),e(Uf,FQe),e(A,TQe),e(A,Jf),e(Jf,Fte),e(Fte,MQe),e(Jf,EQe),e(Jf,uS),e(uS,CQe),e(Jf,wQe),e(A,AQe),e(A,Yf),e(Yf,Tte),e(Tte,LQe),e(Yf,yQe),e(Yf,_S),e(_S,xQe),e(Yf,$Qe),e(A,kQe),e(A,Kf),e(Kf,Mte),e(Mte,SQe),e(Kf,RQe),e(Kf,bS),e(bS,PQe),e(Kf,BQe),e(A,IQe),e(A,Zf),e(Zf,Ete),e(Ete,NQe),e(Zf,qQe),e(Zf,vS),e(vS,jQe),e(Zf,DQe),e(A,GQe),e(A,em),e(em,Cte),e(Cte,OQe),e(em,VQe),e(em,FS),e(FS,XQe),e(em,zQe),e(A,WQe),e(A,om),e(om,wte),e(wte,QQe),e(om,HQe),e(om,TS),e(TS,UQe),e(om,JQe),e(A,YQe),e(A,rm),e(rm,Ate),e(Ate,KQe),e(rm,ZQe),e(rm,MS),e(MS,eHe),e(rm,oHe),e(A,rHe),e(A,tm),e(tm,Lte),e(Lte,tHe),e(tm,aHe),e(tm,ES),e(ES,nHe),e(tm,sHe),e(A,lHe),e(A,am),e(am,yte),e(yte,iHe),e(am,dHe),e(am,CS),e(CS,cHe),e(am,fHe),e(A,mHe),e(A,nm),e(nm,xte),e(xte,gHe),e(nm,hHe),e(nm,wS),e(wS,pHe),e(nm,uHe),e(A,_He),e(A,sm),e(sm,$te),e($te,bHe),e(sm,vHe),e(sm,AS),e(AS,FHe),e(sm,THe),e(A,MHe),e(A,lm),e(lm,kte),e(kte,EHe),e(lm,CHe),e(lm,LS),e(LS,wHe),e(lm,AHe),e(A,LHe),e(A,im),e(im,Ste),e(Ste,yHe),e(im,xHe),e(im,yS),e(yS,$He),e(im,kHe),e(A,SHe),e(A,dm),e(dm,Rte),e(Rte,RHe),e(dm,PHe),e(dm,xS),e(xS,BHe),e(dm,IHe),e(A,NHe),e(A,cm),e(cm,Pte),e(Pte,qHe),e(cm,jHe),e(cm,$S),e($S,DHe),e(cm,GHe),e(A,OHe),e(A,fm),e(fm,Bte),e(Bte,VHe),e(fm,XHe),e(fm,kS),e(kS,zHe),e(fm,WHe),e(A,QHe),e(A,mm),e(mm,Ite),e(Ite,HHe),e(mm,UHe),e(mm,SS),e(SS,JHe),e(mm,YHe),e(A,KHe),e(A,gm),e(gm,Nte),e(Nte,ZHe),e(gm,eUe),e(gm,RS),e(RS,oUe),e(gm,rUe),e(A,tUe),e(A,hm),e(hm,qte),e(qte,aUe),e(hm,nUe),e(hm,PS),e(PS,sUe),e(hm,lUe),e(A,iUe),e(A,pm),e(pm,jte),e(jte,dUe),e(pm,cUe),e(pm,BS),e(BS,fUe),e(pm,mUe),e(A,gUe),e(A,um),e(um,Dte),e(Dte,hUe),e(um,pUe),e(um,IS),e(IS,uUe),e(um,_Ue),e(A,bUe),e(A,_m),e(_m,Gte),e(Gte,vUe),e(_m,FUe),e(_m,NS),e(NS,TUe),e(_m,MUe),e(A,EUe),e(A,bm),e(bm,Ote),e(Ote,CUe),e(bm,wUe),e(bm,qS),e(qS,AUe),e(bm,LUe),e(A,yUe),e(A,vm),e(vm,Vte),e(Vte,xUe),e(vm,$Ue),e(vm,jS),e(jS,kUe),e(vm,SUe),e(A,RUe),e(A,Fm),e(Fm,Xte),e(Xte,PUe),e(Fm,BUe),e(Fm,DS),e(DS,IUe),e(Fm,NUe),e(A,qUe),e(A,Tm),e(Tm,zte),e(zte,jUe),e(Tm,DUe),e(Tm,GS),e(GS,GUe),e(Tm,OUe),e(A,VUe),e(A,Mm),e(Mm,Wte),e(Wte,XUe),e(Mm,zUe),e(Mm,OS),e(OS,WUe),e(Mm,QUe),e(A,HUe),e(A,Em),e(Em,Qte),e(Qte,UUe),e(Em,JUe),e(Em,VS),e(VS,YUe),e(Em,KUe),e(A,ZUe),e(A,Cm),e(Cm,Hte),e(Hte,eJe),e(Cm,oJe),e(Cm,XS),e(XS,rJe),e(Cm,tJe),e(A,aJe),e(A,wm),e(wm,Ute),e(Ute,nJe),e(wm,sJe),e(wm,zS),e(zS,lJe),e(wm,iJe),e(A,dJe),e(A,Am),e(Am,Jte),e(Jte,cJe),e(Am,fJe),e(Am,WS),e(WS,mJe),e(Am,gJe),e(A,hJe),e(A,Lm),e(Lm,Yte),e(Yte,pJe),e(Lm,uJe),e(Lm,QS),e(QS,_Je),e(Lm,bJe),e(A,vJe),e(A,ym),e(ym,Kte),e(Kte,FJe),e(ym,TJe),e(ym,HS),e(HS,MJe),e(ym,EJe),e(A,CJe),e(A,xm),e(xm,Zte),e(Zte,wJe),e(xm,AJe),e(xm,US),e(US,LJe),e(xm,yJe),e(A,xJe),e(A,$m),e($m,eae),e(eae,$Je),e($m,kJe),e($m,JS),e(JS,SJe),e($m,RJe),e(A,PJe),e(A,km),e(km,oae),e(oae,BJe),e(km,IJe),e(km,YS),e(YS,NJe),e(km,qJe),e(A,jJe),e(A,Sm),e(Sm,rae),e(rae,DJe),e(Sm,GJe),e(Sm,KS),e(KS,OJe),e(Sm,VJe),e(A,XJe),e(A,Rm),e(Rm,tae),e(tae,zJe),e(Rm,WJe),e(Rm,ZS),e(ZS,QJe),e(Rm,HJe),e(A,UJe),e(A,Pm),e(Pm,aae),e(aae,JJe),e(Pm,YJe),e(Pm,eR),e(eR,KJe),e(Pm,ZJe),e(A,eYe),e(A,Bm),e(Bm,nae),e(nae,oYe),e(Bm,rYe),e(Bm,oR),e(oR,tYe),e(Bm,aYe),e(A,nYe),e(A,Im),e(Im,sae),e(sae,sYe),e(Im,lYe),e(Im,rR),e(rR,iYe),e(Im,dYe),e(A,cYe),e(A,Nm),e(Nm,lae),e(lae,fYe),e(Nm,mYe),e(Nm,tR),e(tR,gYe),e(Nm,hYe),e(A,pYe),e(A,qm),e(qm,iae),e(iae,uYe),e(qm,_Ye),e(qm,aR),e(aR,bYe),e(qm,vYe),e(A,FYe),e(A,jm),e(jm,dae),e(dae,TYe),e(jm,MYe),e(jm,nR),e(nR,EYe),e(jm,CYe),e(A,wYe),e(A,Dm),e(Dm,cae),e(cae,AYe),e(Dm,LYe),e(Dm,sR),e(sR,yYe),e(Dm,xYe),e(A,$Ye),e(A,Gm),e(Gm,fae),e(fae,kYe),e(Gm,SYe),e(Gm,lR),e(lR,RYe),e(Gm,PYe),e(A,BYe),e(A,Om),e(Om,mae),e(mae,IYe),e(Om,NYe),e(Om,iR),e(iR,qYe),e(Om,jYe),e(A,DYe),e(A,Vm),e(Vm,gae),e(gae,GYe),e(Vm,OYe),e(Vm,dR),e(dR,VYe),e(Vm,XYe),e(A,zYe),e(A,Xm),e(Xm,hae),e(hae,WYe),e(Xm,QYe),e(Xm,cR),e(cR,HYe),e(Xm,UYe),e(A,JYe),e(A,zm),e(zm,pae),e(pae,YYe),e(zm,KYe),e(zm,fR),e(fR,ZYe),e(zm,eKe),e(A,oKe),e(A,Wm),e(Wm,uae),e(uae,rKe),e(Wm,tKe),e(Wm,mR),e(mR,aKe),e(Wm,nKe),e(A,sKe),e(A,Qm),e(Qm,_ae),e(_ae,lKe),e(Qm,iKe),e(Qm,gR),e(gR,dKe),e(Qm,cKe),e(A,fKe),e(A,Hm),e(Hm,bae),e(bae,mKe),e(Hm,gKe),e(Hm,hR),e(hR,hKe),e(Hm,pKe),e(A,uKe),e(A,Um),e(Um,vae),e(vae,_Ke),e(Um,bKe),e(Um,pR),e(pR,vKe),e(Um,FKe),e(A,TKe),e(A,Jm),e(Jm,Fae),e(Fae,MKe),e(Jm,EKe),e(Jm,uR),e(uR,CKe),e(Jm,wKe),e(A,AKe),e(A,Ym),e(Ym,Tae),e(Tae,LKe),e(Ym,yKe),e(Ym,_R),e(_R,xKe),e(Ym,$Ke),e(A,kKe),e(A,Km),e(Km,Mae),e(Mae,SKe),e(Km,RKe),e(Km,bR),e(bR,PKe),e(Km,BKe),e(A,IKe),e(A,Zm),e(Zm,Eae),e(Eae,NKe),e(Zm,qKe),e(Zm,vR),e(vR,jKe),e(Zm,DKe),e(A,GKe),e(A,eg),e(eg,Cae),e(Cae,OKe),e(eg,VKe),e(eg,FR),e(FR,XKe),e(eg,zKe),e(A,WKe),e(A,og),e(og,wae),e(wae,QKe),e(og,HKe),e(og,TR),e(TR,UKe),e(og,JKe),e(A,YKe),e(A,rg),e(rg,Aae),e(Aae,KKe),e(rg,ZKe),e(rg,MR),e(MR,eZe),e(rg,oZe),e(A,rZe),e(A,tg),e(tg,Lae),e(Lae,tZe),e(tg,aZe),e(tg,ER),e(ER,nZe),e(tg,sZe),e(A,lZe),e(A,ag),e(ag,yae),e(yae,iZe),e(ag,dZe),e(ag,CR),e(CR,cZe),e(ag,fZe),e(A,mZe),e(A,ng),e(ng,xae),e(xae,gZe),e(ng,hZe),e(ng,wR),e(wR,pZe),e(ng,uZe),e(A,_Ze),e(A,sg),e(sg,$ae),e($ae,bZe),e(sg,vZe),e(sg,AR),e(AR,FZe),e(sg,TZe),e(A,MZe),e(A,lg),e(lg,kae),e(kae,EZe),e(lg,CZe),e(lg,LR),e(LR,wZe),e(lg,AZe),e(A,LZe),e(A,ig),e(ig,Sae),e(Sae,yZe),e(ig,xZe),e(ig,yR),e(yR,$Ze),e(ig,kZe),e(A,SZe),e(A,dg),e(dg,Rae),e(Rae,RZe),e(dg,PZe),e(dg,xR),e(xR,BZe),e(dg,IZe),e(A,NZe),e(A,cg),e(cg,Pae),e(Pae,qZe),e(cg,jZe),e(cg,$R),e($R,DZe),e(cg,GZe),e(A,OZe),e(A,fg),e(fg,Bae),e(Bae,VZe),e(fg,XZe),e(fg,kR),e(kR,zZe),e(fg,WZe),e(A,QZe),e(A,mg),e(mg,Iae),e(Iae,HZe),e(mg,UZe),e(mg,SR),e(SR,JZe),e(mg,YZe),e(A,KZe),e(A,gg),e(gg,Nae),e(Nae,ZZe),e(gg,eeo),e(gg,RR),e(RR,oeo),e(gg,reo),e(A,teo),e(A,hg),e(hg,qae),e(qae,aeo),e(hg,neo),e(hg,PR),e(PR,seo),e(hg,leo),e(A,ieo),e(A,pg),e(pg,jae),e(jae,deo),e(pg,ceo),e(pg,BR),e(BR,feo),e(pg,meo),e(A,geo),e(A,ug),e(ug,Dae),e(Dae,heo),e(ug,peo),e(ug,IR),e(IR,ueo),e(ug,_eo),e(A,beo),e(A,_g),e(_g,Gae),e(Gae,veo),e(_g,Feo),e(_g,NR),e(NR,Teo),e(_g,Meo),e(A,Eeo),e(A,bg),e(bg,Oae),e(Oae,Ceo),e(bg,weo),e(bg,qR),e(qR,Aeo),e(bg,Leo),e(A,yeo),e(A,vg),e(vg,Vae),e(Vae,xeo),e(vg,$eo),e(vg,jR),e(jR,keo),e(vg,Seo),e(A,Reo),e(A,Fg),e(Fg,Xae),e(Xae,Peo),e(Fg,Beo),e(Fg,DR),e(DR,Ieo),e(Fg,Neo),e(A,qeo),e(A,Tg),e(Tg,zae),e(zae,jeo),e(Tg,Deo),e(Tg,GR),e(GR,Geo),e(Tg,Oeo),e(A,Veo),e(A,Mg),e(Mg,Wae),e(Wae,Xeo),e(Mg,zeo),e(Mg,OR),e(OR,Weo),e(Mg,Qeo),e(A,Heo),e(A,Eg),e(Eg,Qae),e(Qae,Ueo),e(Eg,Jeo),e(Eg,VR),e(VR,Yeo),e(Eg,Keo),e(A,Zeo),e(A,Cg),e(Cg,Hae),e(Hae,eoo),e(Cg,ooo),e(Cg,XR),e(XR,roo),e(Cg,too),e(A,aoo),e(A,wg),e(wg,Uae),e(Uae,noo),e(wg,soo),e(wg,zR),e(zR,loo),e(wg,ioo),e(A,doo),e(A,Ag),e(Ag,Jae),e(Jae,coo),e(Ag,foo),e(Ag,WR),e(WR,moo),e(Ag,goo),e(A,hoo),e(A,Lg),e(Lg,Yae),e(Yae,poo),e(Lg,uoo),e(Lg,QR),e(QR,_oo),e(Lg,boo),e(A,voo),e(A,yg),e(yg,Kae),e(Kae,Foo),e(yg,Too),e(yg,HR),e(HR,Moo),e(yg,Eoo),e(A,Coo),e(A,xg),e(xg,Zae),e(Zae,woo),e(xg,Aoo),e(xg,UR),e(UR,Loo),e(xg,yoo),e(A,xoo),e(A,$g),e($g,ene),e(ene,$oo),e($g,koo),e($g,JR),e(JR,Soo),e($g,Roo),e(A,Poo),e(A,kg),e(kg,one),e(one,Boo),e(kg,Ioo),e(kg,YR),e(YR,Noo),e(kg,qoo),e(A,joo),e(A,Sg),e(Sg,rne),e(rne,Doo),e(Sg,Goo),e(Sg,KR),e(KR,Ooo),e(Sg,Voo),e(A,Xoo),e(A,Rg),e(Rg,tne),e(tne,zoo),e(Rg,Woo),e(Rg,ZR),e(ZR,Qoo),e(Rg,Hoo),e(A,Uoo),e(A,Pg),e(Pg,ane),e(ane,Joo),e(Pg,Yoo),e(Pg,eP),e(eP,Koo),e(Pg,Zoo),e(A,ero),e(A,Bg),e(Bg,nne),e(nne,oro),e(Bg,rro),e(Bg,oP),e(oP,tro),e(Bg,aro),e(A,nro),e(A,Ig),e(Ig,sne),e(sne,sro),e(Ig,lro),e(Ig,rP),e(rP,iro),e(Ig,dro),e(A,cro),e(A,Ng),e(Ng,lne),e(lne,fro),e(Ng,mro),e(Ng,tP),e(tP,gro),e(Ng,hro),e(A,pro),e(A,qg),e(qg,ine),e(ine,uro),e(qg,_ro),e(qg,aP),e(aP,bro),e(qg,vro),e(wr,Fro),M(jg,wr,null),e(wo,Tro),e(wo,Dg),M(yy,Dg,null),e(Dg,Mro),e(Dg,dne),e(dne,Ero),b(f,gGe,_),b(f,$i,_),e($i,Gg),e(Gg,cne),M(xy,cne,null),e($i,Cro),e($i,fne),e(fne,wro),b(f,hGe,_),b(f,Ao,_),M($y,Ao,null),e(Ao,Aro),e(Ao,ky),e(ky,Lro),e(ky,nP),e(nP,yro),e(ky,xro),e(Ao,$ro),e(Ao,Sy),e(Sy,kro),e(Sy,mne),e(mne,Sro),e(Sy,Rro),e(Ao,Pro),e(Ao,Ar),M(Ry,Ar,null),e(Ar,Bro),e(Ar,gne),e(gne,Iro),e(Ar,Nro),e(Ar,$a),e($a,qro),e($a,hne),e(hne,jro),e($a,Dro),e($a,pne),e(pne,Gro),e($a,Oro),e($a,une),e(une,Vro),e($a,Xro),e(Ar,zro),e(Ar,k),e(k,Nn),e(Nn,_ne),e(_ne,Wro),e(Nn,Qro),e(Nn,sP),e(sP,Hro),e(Nn,Uro),e(Nn,lP),e(lP,Jro),e(Nn,Yro),e(k,Kro),e(k,qn),e(qn,bne),e(bne,Zro),e(qn,eto),e(qn,iP),e(iP,oto),e(qn,rto),e(qn,dP),e(dP,tto),e(qn,ato),e(k,nto),e(k,jn),e(jn,vne),e(vne,sto),e(jn,lto),e(jn,cP),e(cP,ito),e(jn,dto),e(jn,fP),e(fP,cto),e(jn,fto),e(k,mto),e(k,Og),e(Og,Fne),e(Fne,gto),e(Og,hto),e(Og,mP),e(mP,pto),e(Og,uto),e(k,_to),e(k,Dn),e(Dn,Tne),e(Tne,bto),e(Dn,vto),e(Dn,gP),e(gP,Fto),e(Dn,Tto),e(Dn,hP),e(hP,Mto),e(Dn,Eto),e(k,Cto),e(k,Vg),e(Vg,Mne),e(Mne,wto),e(Vg,Ato),e(Vg,pP),e(pP,Lto),e(Vg,yto),e(k,xto),e(k,Xg),e(Xg,Ene),e(Ene,$to),e(Xg,kto),e(Xg,uP),e(uP,Sto),e(Xg,Rto),e(k,Pto),e(k,zg),e(zg,Cne),e(Cne,Bto),e(zg,Ito),e(zg,_P),e(_P,Nto),e(zg,qto),e(k,jto),e(k,Gn),e(Gn,wne),e(wne,Dto),e(Gn,Gto),e(Gn,bP),e(bP,Oto),e(Gn,Vto),e(Gn,vP),e(vP,Xto),e(Gn,zto),e(k,Wto),e(k,On),e(On,Ane),e(Ane,Qto),e(On,Hto),e(On,FP),e(FP,Uto),e(On,Jto),e(On,TP),e(TP,Yto),e(On,Kto),e(k,Zto),e(k,Vn),e(Vn,Lne),e(Lne,eao),e(Vn,oao),e(Vn,MP),e(MP,rao),e(Vn,tao),e(Vn,EP),e(EP,aao),e(Vn,nao),e(k,sao),e(k,Wg),e(Wg,yne),e(yne,lao),e(Wg,iao),e(Wg,CP),e(CP,dao),e(Wg,cao),e(k,fao),e(k,Qg),e(Qg,xne),e(xne,mao),e(Qg,gao),e(Qg,wP),e(wP,hao),e(Qg,pao),e(k,uao),e(k,Hg),e(Hg,$ne),e($ne,_ao),e(Hg,bao),e(Hg,AP),e(AP,vao),e(Hg,Fao),e(k,Tao),e(k,Xn),e(Xn,kne),e(kne,Mao),e(Xn,Eao),e(Xn,LP),e(LP,Cao),e(Xn,wao),e(Xn,yP),e(yP,Aao),e(Xn,Lao),e(k,yao),e(k,Ug),e(Ug,Sne),e(Sne,xao),e(Ug,$ao),e(Ug,xP),e(xP,kao),e(Ug,Sao),e(k,Rao),e(k,zn),e(zn,Rne),e(Rne,Pao),e(zn,Bao),e(zn,$P),e($P,Iao),e(zn,Nao),e(zn,kP),e(kP,qao),e(zn,jao),e(k,Dao),e(k,Wn),e(Wn,Pne),e(Pne,Gao),e(Wn,Oao),e(Wn,SP),e(SP,Vao),e(Wn,Xao),e(Wn,RP),e(RP,zao),e(Wn,Wao),e(k,Qao),e(k,Qn),e(Qn,Bne),e(Bne,Hao),e(Qn,Uao),e(Qn,PP),e(PP,Jao),e(Qn,Yao),e(Qn,BP),e(BP,Kao),e(Qn,Zao),e(k,eno),e(k,Jg),e(Jg,Ine),e(Ine,ono),e(Jg,rno),e(Jg,IP),e(IP,tno),e(Jg,ano),e(k,nno),e(k,Hn),e(Hn,Nne),e(Nne,sno),e(Hn,lno),e(Hn,NP),e(NP,ino),e(Hn,dno),e(Hn,qP),e(qP,cno),e(Hn,fno),e(k,mno),e(k,Un),e(Un,qne),e(qne,gno),e(Un,hno),e(Un,jP),e(jP,pno),e(Un,uno),e(Un,DP),e(DP,_no),e(Un,bno),e(k,vno),e(k,Jn),e(Jn,jne),e(jne,Fno),e(Jn,Tno),e(Jn,GP),e(GP,Mno),e(Jn,Eno),e(Jn,OP),e(OP,Cno),e(Jn,wno),e(k,Ano),e(k,Yn),e(Yn,Dne),e(Dne,Lno),e(Yn,yno),e(Yn,VP),e(VP,xno),e(Yn,$no),e(Yn,XP),e(XP,kno),e(Yn,Sno),e(k,Rno),e(k,Kn),e(Kn,Gne),e(Gne,Pno),e(Kn,Bno),e(Kn,zP),e(zP,Ino),e(Kn,Nno),e(Kn,WP),e(WP,qno),e(Kn,jno),e(k,Dno),e(k,Zn),e(Zn,One),e(One,Gno),e(Zn,Ono),e(Zn,QP),e(QP,Vno),e(Zn,Xno),e(Zn,HP),e(HP,zno),e(Zn,Wno),e(k,Qno),e(k,Yg),e(Yg,Vne),e(Vne,Hno),e(Yg,Uno),e(Yg,UP),e(UP,Jno),e(Yg,Yno),e(k,Kno),e(k,es),e(es,Xne),e(Xne,Zno),e(es,eso),e(es,JP),e(JP,oso),e(es,rso),e(es,YP),e(YP,tso),e(es,aso),e(k,nso),e(k,Kg),e(Kg,zne),e(zne,sso),e(Kg,lso),e(Kg,KP),e(KP,iso),e(Kg,dso),e(k,cso),e(k,os),e(os,Wne),e(Wne,fso),e(os,mso),e(os,ZP),e(ZP,gso),e(os,hso),e(os,eB),e(eB,pso),e(os,uso),e(k,_so),e(k,rs),e(rs,Qne),e(Qne,bso),e(rs,vso),e(rs,oB),e(oB,Fso),e(rs,Tso),e(rs,rB),e(rB,Mso),e(rs,Eso),e(k,Cso),e(k,ts),e(ts,Hne),e(Hne,wso),e(ts,Aso),e(ts,tB),e(tB,Lso),e(ts,yso),e(ts,aB),e(aB,xso),e(ts,$so),e(k,kso),e(k,Zg),e(Zg,Une),e(Une,Sso),e(Zg,Rso),e(Zg,nB),e(nB,Pso),e(Zg,Bso),e(k,Iso),e(k,as),e(as,Jne),e(Jne,Nso),e(as,qso),e(as,sB),e(sB,jso),e(as,Dso),e(as,lB),e(lB,Gso),e(as,Oso),e(k,Vso),e(k,ns),e(ns,Yne),e(Yne,Xso),e(ns,zso),e(ns,iB),e(iB,Wso),e(ns,Qso),e(ns,dB),e(dB,Hso),e(ns,Uso),e(k,Jso),e(k,eh),e(eh,Kne),e(Kne,Yso),e(eh,Kso),e(eh,cB),e(cB,Zso),e(eh,elo),e(k,olo),e(k,ss),e(ss,Zne),e(Zne,rlo),e(ss,tlo),e(ss,fB),e(fB,alo),e(ss,nlo),e(ss,mB),e(mB,slo),e(ss,llo),e(k,ilo),e(k,ls),e(ls,ese),e(ese,dlo),e(ls,clo),e(ls,gB),e(gB,flo),e(ls,mlo),e(ls,hB),e(hB,glo),e(ls,hlo),e(k,plo),e(k,is),e(is,ose),e(ose,ulo),e(is,_lo),e(is,pB),e(pB,blo),e(is,vlo),e(is,uB),e(uB,Flo),e(is,Tlo),e(k,Mlo),e(k,ds),e(ds,rse),e(rse,Elo),e(ds,Clo),e(ds,_B),e(_B,wlo),e(ds,Alo),e(ds,bB),e(bB,Llo),e(ds,ylo),e(k,xlo),e(k,cs),e(cs,tse),e(tse,$lo),e(cs,klo),e(cs,vB),e(vB,Slo),e(cs,Rlo),e(cs,FB),e(FB,Plo),e(cs,Blo),e(k,Ilo),e(k,fs),e(fs,ase),e(ase,Nlo),e(fs,qlo),e(fs,TB),e(TB,jlo),e(fs,Dlo),e(fs,MB),e(MB,Glo),e(fs,Olo),e(k,Vlo),e(k,ms),e(ms,nse),e(nse,Xlo),e(ms,zlo),e(ms,EB),e(EB,Wlo),e(ms,Qlo),e(ms,CB),e(CB,Hlo),e(ms,Ulo),e(k,Jlo),e(k,gs),e(gs,sse),e(sse,Ylo),e(gs,Klo),e(gs,wB),e(wB,Zlo),e(gs,eio),e(gs,AB),e(AB,oio),e(gs,rio),e(k,tio),e(k,oh),e(oh,lse),e(lse,aio),e(oh,nio),e(oh,LB),e(LB,sio),e(oh,lio),e(k,iio),e(k,hs),e(hs,ise),e(ise,dio),e(hs,cio),e(hs,yB),e(yB,fio),e(hs,mio),e(hs,xB),e(xB,gio),e(hs,hio),e(k,pio),e(k,rh),e(rh,dse),e(dse,uio),e(rh,_io),e(rh,$B),e($B,bio),e(rh,vio),e(k,Fio),e(k,th),e(th,cse),e(cse,Tio),e(th,Mio),e(th,kB),e(kB,Eio),e(th,Cio),e(k,wio),e(k,ps),e(ps,fse),e(fse,Aio),e(ps,Lio),e(ps,SB),e(SB,yio),e(ps,xio),e(ps,RB),e(RB,$io),e(ps,kio),e(k,Sio),e(k,us),e(us,mse),e(mse,Rio),e(us,Pio),e(us,PB),e(PB,Bio),e(us,Iio),e(us,BB),e(BB,Nio),e(us,qio),e(k,jio),e(k,_s),e(_s,gse),e(gse,Dio),e(_s,Gio),e(_s,IB),e(IB,Oio),e(_s,Vio),e(_s,NB),e(NB,Xio),e(_s,zio),e(k,Wio),e(k,ah),e(ah,hse),e(hse,Qio),e(ah,Hio),e(ah,qB),e(qB,Uio),e(ah,Jio),e(k,Yio),e(k,bs),e(bs,pse),e(pse,Kio),e(bs,Zio),e(bs,jB),e(jB,edo),e(bs,odo),e(bs,DB),e(DB,rdo),e(bs,tdo),e(k,ado),e(k,vs),e(vs,use),e(use,ndo),e(vs,sdo),e(vs,GB),e(GB,ldo),e(vs,ido),e(vs,OB),e(OB,ddo),e(vs,cdo),e(k,fdo),e(k,Fs),e(Fs,_se),e(_se,mdo),e(Fs,gdo),e(Fs,VB),e(VB,hdo),e(Fs,pdo),e(Fs,XB),e(XB,udo),e(Fs,_do),e(k,bdo),e(k,Ts),e(Ts,bse),e(bse,vdo),e(Ts,Fdo),e(Ts,zB),e(zB,Tdo),e(Ts,Mdo),e(Ts,WB),e(WB,Edo),e(Ts,Cdo),e(k,wdo),e(k,Ms),e(Ms,vse),e(vse,Ado),e(Ms,Ldo),e(Ms,QB),e(QB,ydo),e(Ms,xdo),e(Ms,HB),e(HB,$do),e(Ms,kdo),e(k,Sdo),e(k,nh),e(nh,Fse),e(Fse,Rdo),e(nh,Pdo),e(nh,UB),e(UB,Bdo),e(nh,Ido),e(k,Ndo),e(k,Es),e(Es,Tse),e(Tse,qdo),e(Es,jdo),e(Es,JB),e(JB,Ddo),e(Es,Gdo),e(Es,YB),e(YB,Odo),e(Es,Vdo),e(k,Xdo),e(k,sh),e(sh,Mse),e(Mse,zdo),e(sh,Wdo),e(sh,KB),e(KB,Qdo),e(sh,Hdo),e(k,Udo),e(k,lh),e(lh,Ese),e(Ese,Jdo),e(lh,Ydo),e(lh,ZB),e(ZB,Kdo),e(lh,Zdo),e(k,eco),e(k,ih),e(ih,Cse),e(Cse,oco),e(ih,rco),e(ih,eI),e(eI,tco),e(ih,aco),e(k,nco),e(k,dh),e(dh,wse),e(wse,sco),e(dh,lco),e(dh,oI),e(oI,ico),e(dh,dco),e(k,cco),e(k,Cs),e(Cs,Ase),e(Ase,fco),e(Cs,mco),e(Cs,rI),e(rI,gco),e(Cs,hco),e(Cs,tI),e(tI,pco),e(Cs,uco),e(k,_co),e(k,ch),e(ch,Lse),e(Lse,bco),e(ch,vco),e(ch,aI),e(aI,Fco),e(ch,Tco),e(k,Mco),e(k,ws),e(ws,yse),e(yse,Eco),e(ws,Cco),e(ws,nI),e(nI,wco),e(ws,Aco),e(ws,sI),e(sI,Lco),e(ws,yco),e(k,xco),e(k,As),e(As,xse),e(xse,$co),e(As,kco),e(As,lI),e(lI,Sco),e(As,Rco),e(As,iI),e(iI,Pco),e(As,Bco),e(k,Ico),e(k,Ls),e(Ls,$se),e($se,Nco),e(Ls,qco),e(Ls,dI),e(dI,jco),e(Ls,Dco),e(Ls,cI),e(cI,Gco),e(Ls,Oco),e(k,Vco),e(k,ys),e(ys,kse),e(kse,Xco),e(ys,zco),e(ys,fI),e(fI,Wco),e(ys,Qco),e(ys,mI),e(mI,Hco),e(ys,Uco),e(k,Jco),e(k,xs),e(xs,Sse),e(Sse,Yco),e(xs,Kco),e(xs,gI),e(gI,Zco),e(xs,efo),e(xs,hI),e(hI,ofo),e(xs,rfo),e(k,tfo),e(k,$s),e($s,Rse),e(Rse,afo),e($s,nfo),e($s,pI),e(pI,sfo),e($s,lfo),e($s,uI),e(uI,ifo),e($s,dfo),e(k,cfo),e(k,fh),e(fh,Pse),e(Pse,ffo),e(fh,mfo),e(fh,_I),e(_I,gfo),e(fh,hfo),e(k,pfo),e(k,mh),e(mh,Bse),e(Bse,ufo),e(mh,_fo),e(mh,bI),e(bI,bfo),e(mh,vfo),e(k,Ffo),e(k,ks),e(ks,Ise),e(Ise,Tfo),e(ks,Mfo),e(ks,vI),e(vI,Efo),e(ks,Cfo),e(ks,FI),e(FI,wfo),e(ks,Afo),e(k,Lfo),e(k,Ss),e(Ss,Nse),e(Nse,yfo),e(Ss,xfo),e(Ss,TI),e(TI,$fo),e(Ss,kfo),e(Ss,MI),e(MI,Sfo),e(Ss,Rfo),e(k,Pfo),e(k,Rs),e(Rs,qse),e(qse,Bfo),e(Rs,Ifo),e(Rs,EI),e(EI,Nfo),e(Rs,qfo),e(Rs,CI),e(CI,jfo),e(Rs,Dfo),e(k,Gfo),e(k,gh),e(gh,jse),e(jse,Ofo),e(gh,Vfo),e(gh,wI),e(wI,Xfo),e(gh,zfo),e(k,Wfo),e(k,hh),e(hh,Dse),e(Dse,Qfo),e(hh,Hfo),e(hh,AI),e(AI,Ufo),e(hh,Jfo),e(k,Yfo),e(k,ph),e(ph,Gse),e(Gse,Kfo),e(ph,Zfo),e(ph,LI),e(LI,emo),e(ph,omo),e(k,rmo),e(k,Ps),e(Ps,Ose),e(Ose,tmo),e(Ps,amo),e(Ps,yI),e(yI,nmo),e(Ps,smo),e(Ps,xI),e(xI,lmo),e(Ps,imo),e(k,dmo),e(k,Bs),e(Bs,Vse),e(Vse,cmo),e(Bs,fmo),e(Bs,$I),e($I,mmo),e(Bs,gmo),e(Bs,kI),e(kI,hmo),e(Bs,pmo),e(k,umo),e(k,uh),e(uh,Xse),e(Xse,_mo),e(uh,bmo),e(uh,SI),e(SI,vmo),e(uh,Fmo),e(k,Tmo),e(k,_h),e(_h,zse),e(zse,Mmo),e(_h,Emo),e(_h,RI),e(RI,Cmo),e(_h,wmo),e(k,Amo),e(k,bh),e(bh,Wse),e(Wse,Lmo),e(bh,ymo),e(bh,PI),e(PI,xmo),e(bh,$mo),e(k,kmo),e(k,Is),e(Is,Qse),e(Qse,Smo),e(Is,Rmo),e(Is,BI),e(BI,Pmo),e(Is,Bmo),e(Is,II),e(II,Imo),e(Is,Nmo),e(k,qmo),e(k,vh),e(vh,Hse),e(Hse,jmo),e(vh,Dmo),e(vh,NI),e(NI,Gmo),e(vh,Omo),e(k,Vmo),e(k,Fh),e(Fh,Use),e(Use,Xmo),e(Fh,zmo),e(Fh,qI),e(qI,Wmo),e(Fh,Qmo),e(k,Hmo),e(k,Ns),e(Ns,Jse),e(Jse,Umo),e(Ns,Jmo),e(Ns,jI),e(jI,Ymo),e(Ns,Kmo),e(Ns,DI),e(DI,Zmo),e(Ns,ego),e(k,ogo),e(k,qs),e(qs,Yse),e(Yse,rgo),e(qs,tgo),e(qs,GI),e(GI,ago),e(qs,ngo),e(qs,OI),e(OI,sgo),e(qs,lgo),e(k,igo),e(k,js),e(js,Kse),e(Kse,dgo),e(js,cgo),e(js,VI),e(VI,fgo),e(js,mgo),e(js,XI),e(XI,ggo),e(js,hgo),e(k,pgo),e(k,Ds),e(Ds,Zse),e(Zse,ugo),e(Ds,_go),e(Ds,zI),e(zI,bgo),e(Ds,vgo),e(Ds,WI),e(WI,Fgo),e(Ds,Tgo),e(Ar,Mgo),M(Th,Ar,null),e(Ao,Ego),e(Ao,Mh),M(Py,Mh,null),e(Mh,Cgo),e(Mh,ele),e(ele,wgo),b(f,pGe,_),b(f,ki,_),e(ki,Eh),e(Eh,ole),M(By,ole,null),e(ki,Ago),e(ki,rle),e(rle,Lgo),b(f,uGe,_),b(f,Lo,_),M(Iy,Lo,null),e(Lo,ygo),e(Lo,Ny),e(Ny,xgo),e(Ny,QI),e(QI,$go),e(Ny,kgo),e(Lo,Sgo),e(Lo,qy),e(qy,Rgo),e(qy,tle),e(tle,Pgo),e(qy,Bgo),e(Lo,Igo),e(Lo,He),M(jy,He,null),e(He,Ngo),e(He,ale),e(ale,qgo),e(He,jgo),e(He,ka),e(ka,Dgo),e(ka,nle),e(nle,Ggo),e(ka,Ogo),e(ka,sle),e(sle,Vgo),e(ka,Xgo),e(ka,lle),e(lle,zgo),e(ka,Wgo),e(He,Qgo),e(He,Y),e(Y,Ch),e(Ch,ile),e(ile,Hgo),e(Ch,Ugo),e(Ch,HI),e(HI,Jgo),e(Ch,Ygo),e(Y,Kgo),e(Y,wh),e(wh,dle),e(dle,Zgo),e(wh,eho),e(wh,UI),e(UI,oho),e(wh,rho),e(Y,tho),e(Y,Ah),e(Ah,cle),e(cle,aho),e(Ah,nho),e(Ah,JI),e(JI,sho),e(Ah,lho),e(Y,iho),e(Y,Lh),e(Lh,fle),e(fle,dho),e(Lh,cho),e(Lh,YI),e(YI,fho),e(Lh,mho),e(Y,gho),e(Y,yh),e(yh,mle),e(mle,hho),e(yh,pho),e(yh,KI),e(KI,uho),e(yh,_ho),e(Y,bho),e(Y,xh),e(xh,gle),e(gle,vho),e(xh,Fho),e(xh,ZI),e(ZI,Tho),e(xh,Mho),e(Y,Eho),e(Y,$h),e($h,hle),e(hle,Cho),e($h,who),e($h,eN),e(eN,Aho),e($h,Lho),e(Y,yho),e(Y,kh),e(kh,ple),e(ple,xho),e(kh,$ho),e(kh,oN),e(oN,kho),e(kh,Sho),e(Y,Rho),e(Y,Sh),e(Sh,ule),e(ule,Pho),e(Sh,Bho),e(Sh,rN),e(rN,Iho),e(Sh,Nho),e(Y,qho),e(Y,Rh),e(Rh,_le),e(_le,jho),e(Rh,Dho),e(Rh,tN),e(tN,Gho),e(Rh,Oho),e(Y,Vho),e(Y,Ph),e(Ph,ble),e(ble,Xho),e(Ph,zho),e(Ph,aN),e(aN,Who),e(Ph,Qho),e(Y,Hho),e(Y,Bh),e(Bh,vle),e(vle,Uho),e(Bh,Jho),e(Bh,nN),e(nN,Yho),e(Bh,Kho),e(Y,Zho),e(Y,Ih),e(Ih,Fle),e(Fle,epo),e(Ih,opo),e(Ih,sN),e(sN,rpo),e(Ih,tpo),e(Y,apo),e(Y,Nh),e(Nh,Tle),e(Tle,npo),e(Nh,spo),e(Nh,lN),e(lN,lpo),e(Nh,ipo),e(Y,dpo),e(Y,qh),e(qh,Mle),e(Mle,cpo),e(qh,fpo),e(qh,iN),e(iN,mpo),e(qh,gpo),e(Y,hpo),e(Y,jh),e(jh,Ele),e(Ele,ppo),e(jh,upo),e(jh,dN),e(dN,_po),e(jh,bpo),e(Y,vpo),e(Y,Dh),e(Dh,Cle),e(Cle,Fpo),e(Dh,Tpo),e(Dh,cN),e(cN,Mpo),e(Dh,Epo),e(Y,Cpo),e(Y,Gh),e(Gh,wle),e(wle,wpo),e(Gh,Apo),e(Gh,fN),e(fN,Lpo),e(Gh,ypo),e(Y,xpo),e(Y,Oh),e(Oh,Ale),e(Ale,$po),e(Oh,kpo),e(Oh,mN),e(mN,Spo),e(Oh,Rpo),e(Y,Ppo),e(Y,Vh),e(Vh,Lle),e(Lle,Bpo),e(Vh,Ipo),e(Vh,gN),e(gN,Npo),e(Vh,qpo),e(Y,jpo),e(Y,Xh),e(Xh,yle),e(yle,Dpo),e(Xh,Gpo),e(Xh,hN),e(hN,Opo),e(Xh,Vpo),e(Y,Xpo),e(Y,zh),e(zh,xle),e(xle,zpo),e(zh,Wpo),e(zh,pN),e(pN,Qpo),e(zh,Hpo),e(Y,Upo),e(Y,Wh),e(Wh,$le),e($le,Jpo),e(Wh,Ypo),e(Wh,uN),e(uN,Kpo),e(Wh,Zpo),e(Y,euo),e(Y,Qh),e(Qh,kle),e(kle,ouo),e(Qh,ruo),e(Qh,_N),e(_N,tuo),e(Qh,auo),e(Y,nuo),e(Y,Hh),e(Hh,Sle),e(Sle,suo),e(Hh,luo),e(Hh,bN),e(bN,iuo),e(Hh,duo),e(Y,cuo),e(Y,Uh),e(Uh,Rle),e(Rle,fuo),e(Uh,muo),e(Uh,vN),e(vN,guo),e(Uh,huo),e(Y,puo),e(Y,Jh),e(Jh,Ple),e(Ple,uuo),e(Jh,_uo),e(Jh,FN),e(FN,buo),e(Jh,vuo),e(Y,Fuo),e(Y,Yh),e(Yh,Ble),e(Ble,Tuo),e(Yh,Muo),e(Yh,TN),e(TN,Euo),e(Yh,Cuo),e(Y,wuo),e(Y,Kh),e(Kh,Ile),e(Ile,Auo),e(Kh,Luo),e(Kh,MN),e(MN,yuo),e(Kh,xuo),e(Y,$uo),e(Y,Zh),e(Zh,Nle),e(Nle,kuo),e(Zh,Suo),e(Zh,EN),e(EN,Ruo),e(Zh,Puo),e(Y,Buo),e(Y,ep),e(ep,qle),e(qle,Iuo),e(ep,Nuo),e(ep,CN),e(CN,quo),e(ep,juo),e(Y,Duo),e(Y,op),e(op,jle),e(jle,Guo),e(op,Ouo),e(op,wN),e(wN,Vuo),e(op,Xuo),e(He,zuo),M(rp,He,null),e(He,Wuo),M(tp,He,null),e(Lo,Quo),e(Lo,ap),M(Dy,ap,null),e(ap,Huo),e(ap,Dle),e(Dle,Uuo),b(f,_Ge,_),b(f,Si,_),e(Si,np),e(np,Gle),M(Gy,Gle,null),e(Si,Juo),e(Si,Ole),e(Ole,Yuo),b(f,bGe,_),b(f,yo,_),M(Oy,yo,null),e(yo,Kuo),e(yo,Vy),e(Vy,Zuo),e(Vy,AN),e(AN,e_o),e(Vy,o_o),e(yo,r_o),e(yo,Xy),e(Xy,t_o),e(Xy,Vle),e(Vle,a_o),e(Xy,n_o),e(yo,s_o),e(yo,Ue),M(zy,Ue,null),e(Ue,l_o),e(Ue,Xle),e(Xle,i_o),e(Ue,d_o),e(Ue,Ri),e(Ri,c_o),e(Ri,zle),e(zle,f_o),e(Ri,m_o),e(Ri,Wle),e(Wle,g_o),e(Ri,h_o),e(Ue,p_o),e(Ue,he),e(he,sp),e(sp,Qle),e(Qle,u_o),e(sp,__o),e(sp,LN),e(LN,b_o),e(sp,v_o),e(he,F_o),e(he,lp),e(lp,Hle),e(Hle,T_o),e(lp,M_o),e(lp,Ule),e(Ule,E_o),e(lp,C_o),e(he,w_o),e(he,ip),e(ip,Jle),e(Jle,A_o),e(ip,L_o),e(ip,yN),e(yN,y_o),e(ip,x_o),e(he,$_o),e(he,dp),e(dp,Yle),e(Yle,k_o),e(dp,S_o),e(dp,xN),e(xN,R_o),e(dp,P_o),e(he,B_o),e(he,cp),e(cp,Kle),e(Kle,I_o),e(cp,N_o),e(cp,$N),e($N,q_o),e(cp,j_o),e(he,D_o),e(he,fp),e(fp,Zle),e(Zle,G_o),e(fp,O_o),e(fp,kN),e(kN,V_o),e(fp,X_o),e(he,z_o),e(he,mp),e(mp,eie),e(eie,W_o),e(mp,Q_o),e(mp,SN),e(SN,H_o),e(mp,U_o),e(he,J_o),e(he,gp),e(gp,oie),e(oie,Y_o),e(gp,K_o),e(gp,RN),e(RN,Z_o),e(gp,e1o),e(he,o1o),e(he,hp),e(hp,rie),e(rie,r1o),e(hp,t1o),e(hp,PN),e(PN,a1o),e(hp,n1o),e(he,s1o),e(he,pp),e(pp,tie),e(tie,l1o),e(pp,i1o),e(pp,BN),e(BN,d1o),e(pp,c1o),e(he,f1o),e(he,up),e(up,aie),e(aie,m1o),e(up,g1o),e(up,IN),e(IN,h1o),e(up,p1o),e(he,u1o),e(he,_p),e(_p,nie),e(nie,_1o),e(_p,b1o),e(_p,NN),e(NN,v1o),e(_p,F1o),e(he,T1o),e(he,bp),e(bp,sie),e(sie,M1o),e(bp,E1o),e(bp,qN),e(qN,C1o),e(bp,w1o),e(he,A1o),e(he,vp),e(vp,lie),e(lie,L1o),e(vp,y1o),e(vp,jN),e(jN,x1o),e(vp,$1o),e(he,k1o),e(he,Fp),e(Fp,iie),e(iie,S1o),e(Fp,R1o),e(Fp,DN),e(DN,P1o),e(Fp,B1o),e(he,I1o),e(he,Tp),e(Tp,die),e(die,N1o),e(Tp,q1o),e(Tp,GN),e(GN,j1o),e(Tp,D1o),e(he,G1o),e(he,Mp),e(Mp,cie),e(cie,O1o),e(Mp,V1o),e(Mp,ON),e(ON,X1o),e(Mp,z1o),e(Ue,W1o),M(Ep,Ue,null),e(Ue,Q1o),M(Cp,Ue,null),e(yo,H1o),e(yo,wp),M(Wy,wp,null),e(wp,U1o),e(wp,fie),e(fie,J1o),b(f,vGe,_),b(f,Pi,_),e(Pi,Ap),e(Ap,mie),M(Qy,mie,null),e(Pi,Y1o),e(Pi,gie),e(gie,K1o),b(f,FGe,_),b(f,xo,_),M(Hy,xo,null),e(xo,Z1o),e(xo,Bi),e(Bi,e2o),e(Bi,VN),e(VN,o2o),e(Bi,r2o),e(Bi,XN),e(XN,t2o),e(Bi,a2o),e(xo,n2o),e(xo,Uy),e(Uy,s2o),e(Uy,hie),e(hie,l2o),e(Uy,i2o),e(xo,d2o),e(xo,nt),M(Jy,nt,null),e(nt,c2o),e(nt,pie),e(pie,f2o),e(nt,m2o),e(nt,Ii),e(Ii,g2o),e(Ii,uie),e(uie,h2o),e(Ii,p2o),e(Ii,zN),e(zN,u2o),e(Ii,_2o),e(nt,b2o),M(Lp,nt,null),e(xo,v2o),e(xo,Je),M(Yy,Je,null),e(Je,F2o),e(Je,_ie),e(_ie,T2o),e(Je,M2o),e(Je,Sa),e(Sa,E2o),e(Sa,bie),e(bie,C2o),e(Sa,w2o),e(Sa,vie),e(vie,A2o),e(Sa,L2o),e(Sa,Fie),e(Fie,y2o),e(Sa,x2o),e(Je,$2o),e(Je,x),e(x,yp),e(yp,Tie),e(Tie,k2o),e(yp,S2o),e(yp,WN),e(WN,R2o),e(yp,P2o),e(x,B2o),e(x,xp),e(xp,Mie),e(Mie,I2o),e(xp,N2o),e(xp,QN),e(QN,q2o),e(xp,j2o),e(x,D2o),e(x,$p),e($p,Eie),e(Eie,G2o),e($p,O2o),e($p,HN),e(HN,V2o),e($p,X2o),e(x,z2o),e(x,kp),e(kp,Cie),e(Cie,W2o),e(kp,Q2o),e(kp,UN),e(UN,H2o),e(kp,U2o),e(x,J2o),e(x,Sp),e(Sp,wie),e(wie,Y2o),e(Sp,K2o),e(Sp,JN),e(JN,Z2o),e(Sp,ebo),e(x,obo),e(x,Rp),e(Rp,Aie),e(Aie,rbo),e(Rp,tbo),e(Rp,YN),e(YN,abo),e(Rp,nbo),e(x,sbo),e(x,Pp),e(Pp,Lie),e(Lie,lbo),e(Pp,ibo),e(Pp,KN),e(KN,dbo),e(Pp,cbo),e(x,fbo),e(x,Bp),e(Bp,yie),e(yie,mbo),e(Bp,gbo),e(Bp,ZN),e(ZN,hbo),e(Bp,pbo),e(x,ubo),e(x,Ip),e(Ip,xie),e(xie,_bo),e(Ip,bbo),e(Ip,eq),e(eq,vbo),e(Ip,Fbo),e(x,Tbo),e(x,Np),e(Np,$ie),e($ie,Mbo),e(Np,Ebo),e(Np,oq),e(oq,Cbo),e(Np,wbo),e(x,Abo),e(x,qp),e(qp,kie),e(kie,Lbo),e(qp,ybo),e(qp,rq),e(rq,xbo),e(qp,$bo),e(x,kbo),e(x,jp),e(jp,Sie),e(Sie,Sbo),e(jp,Rbo),e(jp,tq),e(tq,Pbo),e(jp,Bbo),e(x,Ibo),e(x,Dp),e(Dp,Rie),e(Rie,Nbo),e(Dp,qbo),e(Dp,aq),e(aq,jbo),e(Dp,Dbo),e(x,Gbo),e(x,Gp),e(Gp,Pie),e(Pie,Obo),e(Gp,Vbo),e(Gp,nq),e(nq,Xbo),e(Gp,zbo),e(x,Wbo),e(x,Op),e(Op,Bie),e(Bie,Qbo),e(Op,Hbo),e(Op,sq),e(sq,Ubo),e(Op,Jbo),e(x,Ybo),e(x,Vp),e(Vp,Iie),e(Iie,Kbo),e(Vp,Zbo),e(Vp,lq),e(lq,e4o),e(Vp,o4o),e(x,r4o),e(x,Xp),e(Xp,Nie),e(Nie,t4o),e(Xp,a4o),e(Xp,iq),e(iq,n4o),e(Xp,s4o),e(x,l4o),e(x,zp),e(zp,qie),e(qie,i4o),e(zp,d4o),e(zp,dq),e(dq,c4o),e(zp,f4o),e(x,m4o),e(x,Wp),e(Wp,jie),e(jie,g4o),e(Wp,h4o),e(Wp,cq),e(cq,p4o),e(Wp,u4o),e(x,_4o),e(x,Qp),e(Qp,Die),e(Die,b4o),e(Qp,v4o),e(Qp,fq),e(fq,F4o),e(Qp,T4o),e(x,M4o),e(x,Hp),e(Hp,Gie),e(Gie,E4o),e(Hp,C4o),e(Hp,mq),e(mq,w4o),e(Hp,A4o),e(x,L4o),e(x,Up),e(Up,Oie),e(Oie,y4o),e(Up,x4o),e(Up,gq),e(gq,$4o),e(Up,k4o),e(x,S4o),e(x,Jp),e(Jp,Vie),e(Vie,R4o),e(Jp,P4o),e(Jp,hq),e(hq,B4o),e(Jp,I4o),e(x,N4o),e(x,Yp),e(Yp,Xie),e(Xie,q4o),e(Yp,j4o),e(Yp,pq),e(pq,D4o),e(Yp,G4o),e(x,O4o),e(x,Kp),e(Kp,zie),e(zie,V4o),e(Kp,X4o),e(Kp,uq),e(uq,z4o),e(Kp,W4o),e(x,Q4o),e(x,Zp),e(Zp,Wie),e(Wie,H4o),e(Zp,U4o),e(Zp,_q),e(_q,J4o),e(Zp,Y4o),e(x,K4o),e(x,eu),e(eu,Qie),e(Qie,Z4o),e(eu,e5o),e(eu,bq),e(bq,o5o),e(eu,r5o),e(x,t5o),e(x,ou),e(ou,Hie),e(Hie,a5o),e(ou,n5o),e(ou,vq),e(vq,s5o),e(ou,l5o),e(x,i5o),e(x,ru),e(ru,Uie),e(Uie,d5o),e(ru,c5o),e(ru,Fq),e(Fq,f5o),e(ru,m5o),e(x,g5o),e(x,tu),e(tu,Jie),e(Jie,h5o),e(tu,p5o),e(tu,Tq),e(Tq,u5o),e(tu,_5o),e(x,b5o),e(x,au),e(au,Yie),e(Yie,v5o),e(au,F5o),e(au,Mq),e(Mq,T5o),e(au,M5o),e(x,E5o),e(x,nu),e(nu,Kie),e(Kie,C5o),e(nu,w5o),e(nu,Eq),e(Eq,A5o),e(nu,L5o),e(x,y5o),e(x,su),e(su,Zie),e(Zie,x5o),e(su,$5o),e(su,Cq),e(Cq,k5o),e(su,S5o),e(x,R5o),e(x,Gs),e(Gs,ede),e(ede,P5o),e(Gs,B5o),e(Gs,wq),e(wq,I5o),e(Gs,N5o),e(Gs,Aq),e(Aq,q5o),e(Gs,j5o),e(x,D5o),e(x,lu),e(lu,ode),e(ode,G5o),e(lu,O5o),e(lu,Lq),e(Lq,V5o),e(lu,X5o),e(x,z5o),e(x,iu),e(iu,rde),e(rde,W5o),e(iu,Q5o),e(iu,yq),e(yq,H5o),e(iu,U5o),e(x,J5o),e(x,du),e(du,tde),e(tde,Y5o),e(du,K5o),e(du,xq),e(xq,Z5o),e(du,evo),e(x,ovo),e(x,cu),e(cu,ade),e(ade,rvo),e(cu,tvo),e(cu,$q),e($q,avo),e(cu,nvo),e(x,svo),e(x,fu),e(fu,nde),e(nde,lvo),e(fu,ivo),e(fu,kq),e(kq,dvo),e(fu,cvo),e(x,fvo),e(x,mu),e(mu,sde),e(sde,mvo),e(mu,gvo),e(mu,Sq),e(Sq,hvo),e(mu,pvo),e(x,uvo),e(x,gu),e(gu,lde),e(lde,_vo),e(gu,bvo),e(gu,Rq),e(Rq,vvo),e(gu,Fvo),e(x,Tvo),e(x,hu),e(hu,ide),e(ide,Mvo),e(hu,Evo),e(hu,Pq),e(Pq,Cvo),e(hu,wvo),e(x,Avo),e(x,pu),e(pu,dde),e(dde,Lvo),e(pu,yvo),e(pu,Bq),e(Bq,xvo),e(pu,$vo),e(x,kvo),e(x,uu),e(uu,cde),e(cde,Svo),e(uu,Rvo),e(uu,Iq),e(Iq,Pvo),e(uu,Bvo),e(x,Ivo),e(x,_u),e(_u,fde),e(fde,Nvo),e(_u,qvo),e(_u,Nq),e(Nq,jvo),e(_u,Dvo),e(x,Gvo),e(x,bu),e(bu,mde),e(mde,Ovo),e(bu,Vvo),e(bu,qq),e(qq,Xvo),e(bu,zvo),e(x,Wvo),e(x,vu),e(vu,gde),e(gde,Qvo),e(vu,Hvo),e(vu,jq),e(jq,Uvo),e(vu,Jvo),e(x,Yvo),e(x,Fu),e(Fu,hde),e(hde,Kvo),e(Fu,Zvo),e(Fu,Dq),e(Dq,e3o),e(Fu,o3o),e(x,r3o),e(x,Tu),e(Tu,pde),e(pde,t3o),e(Tu,a3o),e(Tu,Gq),e(Gq,n3o),e(Tu,s3o),e(x,l3o),e(x,Mu),e(Mu,ude),e(ude,i3o),e(Mu,d3o),e(Mu,Oq),e(Oq,c3o),e(Mu,f3o),e(x,m3o),e(x,Eu),e(Eu,_de),e(_de,g3o),e(Eu,h3o),e(Eu,Vq),e(Vq,p3o),e(Eu,u3o),e(x,_3o),e(x,Cu),e(Cu,bde),e(bde,b3o),e(Cu,v3o),e(Cu,Xq),e(Xq,F3o),e(Cu,T3o),e(x,M3o),e(x,wu),e(wu,vde),e(vde,E3o),e(wu,C3o),e(wu,zq),e(zq,w3o),e(wu,A3o),e(x,L3o),e(x,Au),e(Au,Fde),e(Fde,y3o),e(Au,x3o),e(Au,Wq),e(Wq,$3o),e(Au,k3o),e(x,S3o),e(x,Lu),e(Lu,Tde),e(Tde,R3o),e(Lu,P3o),e(Lu,Qq),e(Qq,B3o),e(Lu,I3o),e(x,N3o),e(x,yu),e(yu,Mde),e(Mde,q3o),e(yu,j3o),e(yu,Hq),e(Hq,D3o),e(yu,G3o),e(x,O3o),e(x,xu),e(xu,Ede),e(Ede,V3o),e(xu,X3o),e(xu,Uq),e(Uq,z3o),e(xu,W3o),e(x,Q3o),e(x,$u),e($u,Cde),e(Cde,H3o),e($u,U3o),e($u,Jq),e(Jq,J3o),e($u,Y3o),e(x,K3o),e(x,ku),e(ku,wde),e(wde,Z3o),e(ku,eFo),e(ku,Yq),e(Yq,oFo),e(ku,rFo),e(x,tFo),e(x,Su),e(Su,Ade),e(Ade,aFo),e(Su,nFo),e(Su,Kq),e(Kq,sFo),e(Su,lFo),e(x,iFo),e(x,Ru),e(Ru,Lde),e(Lde,dFo),e(Ru,cFo),e(Ru,Zq),e(Zq,fFo),e(Ru,mFo),e(x,gFo),e(x,Pu),e(Pu,yde),e(yde,hFo),e(Pu,pFo),e(Pu,ej),e(ej,uFo),e(Pu,_Fo),e(x,bFo),e(x,Bu),e(Bu,xde),e(xde,vFo),e(Bu,FFo),e(Bu,oj),e(oj,TFo),e(Bu,MFo),e(x,EFo),e(x,Iu),e(Iu,$de),e($de,CFo),e(Iu,wFo),e(Iu,rj),e(rj,AFo),e(Iu,LFo),e(x,yFo),e(x,Nu),e(Nu,kde),e(kde,xFo),e(Nu,$Fo),e(Nu,tj),e(tj,kFo),e(Nu,SFo),e(x,RFo),e(x,qu),e(qu,Sde),e(Sde,PFo),e(qu,BFo),e(qu,aj),e(aj,IFo),e(qu,NFo),e(x,qFo),e(x,ju),e(ju,Rde),e(Rde,jFo),e(ju,DFo),e(ju,nj),e(nj,GFo),e(ju,OFo),e(x,VFo),e(x,Du),e(Du,Pde),e(Pde,XFo),e(Du,zFo),e(Du,sj),e(sj,WFo),e(Du,QFo),e(x,HFo),e(x,Gu),e(Gu,Bde),e(Bde,UFo),e(Gu,JFo),e(Gu,lj),e(lj,YFo),e(Gu,KFo),e(x,ZFo),e(x,Ou),e(Ou,Ide),e(Ide,e6o),e(Ou,o6o),e(Ou,ij),e(ij,r6o),e(Ou,t6o),e(x,a6o),e(x,Vu),e(Vu,Nde),e(Nde,n6o),e(Vu,s6o),e(Vu,dj),e(dj,l6o),e(Vu,i6o),e(x,d6o),e(x,Xu),e(Xu,qde),e(qde,c6o),e(Xu,f6o),e(Xu,cj),e(cj,m6o),e(Xu,g6o),e(x,h6o),e(x,zu),e(zu,jde),e(jde,p6o),e(zu,u6o),e(zu,fj),e(fj,_6o),e(zu,b6o),e(x,v6o),e(x,Wu),e(Wu,Dde),e(Dde,F6o),e(Wu,T6o),e(Wu,mj),e(mj,M6o),e(Wu,E6o),e(x,C6o),e(x,Qu),e(Qu,Gde),e(Gde,w6o),e(Qu,A6o),e(Qu,gj),e(gj,L6o),e(Qu,y6o),e(x,x6o),e(x,Hu),e(Hu,Ode),e(Ode,$6o),e(Hu,k6o),e(Hu,hj),e(hj,S6o),e(Hu,R6o),e(x,P6o),e(x,Uu),e(Uu,Vde),e(Vde,B6o),e(Uu,I6o),e(Uu,pj),e(pj,N6o),e(Uu,q6o),e(x,j6o),e(x,Ju),e(Ju,Xde),e(Xde,D6o),e(Ju,G6o),e(Ju,uj),e(uj,O6o),e(Ju,V6o),e(x,X6o),e(x,Yu),e(Yu,zde),e(zde,z6o),e(Yu,W6o),e(Yu,_j),e(_j,Q6o),e(Yu,H6o),e(x,U6o),e(x,Ku),e(Ku,Wde),e(Wde,J6o),e(Ku,Y6o),e(Ku,bj),e(bj,K6o),e(Ku,Z6o),e(x,eTo),e(x,Zu),e(Zu,Qde),e(Qde,oTo),e(Zu,rTo),e(Zu,vj),e(vj,tTo),e(Zu,aTo),e(x,nTo),e(x,e_),e(e_,Hde),e(Hde,sTo),e(e_,lTo),e(e_,Fj),e(Fj,iTo),e(e_,dTo),e(x,cTo),e(x,o_),e(o_,Ude),e(Ude,fTo),e(o_,mTo),e(o_,Tj),e(Tj,gTo),e(o_,hTo),e(x,pTo),e(x,r_),e(r_,Jde),e(Jde,uTo),e(r_,_To),e(r_,Mj),e(Mj,bTo),e(r_,vTo),e(x,FTo),e(x,t_),e(t_,Yde),e(Yde,TTo),e(t_,MTo),e(t_,Ej),e(Ej,ETo),e(t_,CTo),e(x,wTo),e(x,a_),e(a_,Kde),e(Kde,ATo),e(a_,LTo),e(a_,Cj),e(Cj,yTo),e(a_,xTo),e(x,$To),e(x,n_),e(n_,Zde),e(Zde,kTo),e(n_,STo),e(n_,wj),e(wj,RTo),e(n_,PTo),e(x,BTo),e(x,s_),e(s_,ece),e(ece,ITo),e(s_,NTo),e(s_,Aj),e(Aj,qTo),e(s_,jTo),e(x,DTo),e(x,l_),e(l_,oce),e(oce,GTo),e(l_,OTo),e(l_,Lj),e(Lj,VTo),e(l_,XTo),e(x,zTo),e(x,i_),e(i_,rce),e(rce,WTo),e(i_,QTo),e(i_,yj),e(yj,HTo),e(i_,UTo),e(x,JTo),e(x,d_),e(d_,tce),e(tce,YTo),e(d_,KTo),e(d_,xj),e(xj,ZTo),e(d_,eMo),e(x,oMo),e(x,c_),e(c_,ace),e(ace,rMo),e(c_,tMo),e(c_,$j),e($j,aMo),e(c_,nMo),e(x,sMo),e(x,f_),e(f_,nce),e(nce,lMo),e(f_,iMo),e(f_,kj),e(kj,dMo),e(f_,cMo),e(x,fMo),e(x,m_),e(m_,sce),e(sce,mMo),e(m_,gMo),e(m_,Sj),e(Sj,hMo),e(m_,pMo),e(x,uMo),e(x,g_),e(g_,lce),e(lce,_Mo),e(g_,bMo),e(g_,Rj),e(Rj,vMo),e(g_,FMo),e(x,TMo),e(x,h_),e(h_,ice),e(ice,MMo),e(h_,EMo),e(h_,Pj),e(Pj,CMo),e(h_,wMo),e(x,AMo),e(x,p_),e(p_,dce),e(dce,LMo),e(p_,yMo),e(p_,Bj),e(Bj,xMo),e(p_,$Mo),e(x,kMo),e(x,u_),e(u_,cce),e(cce,SMo),e(u_,RMo),e(u_,Ij),e(Ij,PMo),e(u_,BMo),e(x,IMo),e(x,__),e(__,fce),e(fce,NMo),e(__,qMo),e(__,Nj),e(Nj,jMo),e(__,DMo),e(x,GMo),e(x,b_),e(b_,mce),e(mce,OMo),e(b_,VMo),e(b_,qj),e(qj,XMo),e(b_,zMo),e(x,WMo),e(x,v_),e(v_,gce),e(gce,QMo),e(v_,HMo),e(v_,jj),e(jj,UMo),e(v_,JMo),e(x,YMo),e(x,F_),e(F_,hce),e(hce,KMo),e(F_,ZMo),e(F_,Dj),e(Dj,eEo),e(F_,oEo),e(x,rEo),e(x,T_),e(T_,pce),e(pce,tEo),e(T_,aEo),e(T_,Gj),e(Gj,nEo),e(T_,sEo),e(x,lEo),e(x,M_),e(M_,uce),e(uce,iEo),e(M_,dEo),e(M_,Oj),e(Oj,cEo),e(M_,fEo),e(x,mEo),e(x,E_),e(E_,_ce),e(_ce,gEo),e(E_,hEo),e(E_,Vj),e(Vj,pEo),e(E_,uEo),e(x,_Eo),e(x,C_),e(C_,bce),e(bce,bEo),e(C_,vEo),e(C_,Xj),e(Xj,FEo),e(C_,TEo),e(Je,MEo),e(Je,w_),e(w_,EEo),e(w_,vce),e(vce,CEo),e(w_,wEo),e(w_,Fce),e(Fce,AEo),e(Je,LEo),M(A_,Je,null),b(f,TGe,_),b(f,Ni,_),e(Ni,L_),e(L_,Tce),M(Ky,Tce,null),e(Ni,yEo),e(Ni,Mce),e(Mce,xEo),b(f,MGe,_),b(f,$o,_),M(Zy,$o,null),e($o,$Eo),e($o,qi),e(qi,kEo),e(qi,zj),e(zj,SEo),e(qi,REo),e(qi,Wj),e(Wj,PEo),e(qi,BEo),e($o,IEo),e($o,e7),e(e7,NEo),e(e7,Ece),e(Ece,qEo),e(e7,jEo),e($o,DEo),e($o,st),M(o7,st,null),e(st,GEo),e(st,Cce),e(Cce,OEo),e(st,VEo),e(st,ji),e(ji,XEo),e(ji,wce),e(wce,zEo),e(ji,WEo),e(ji,Qj),e(Qj,QEo),e(ji,HEo),e(st,UEo),M(y_,st,null),e($o,JEo),e($o,Ye),M(r7,Ye,null),e(Ye,YEo),e(Ye,Ace),e(Ace,KEo),e(Ye,ZEo),e(Ye,Ra),e(Ra,eCo),e(Ra,Lce),e(Lce,oCo),e(Ra,rCo),e(Ra,yce),e(yce,tCo),e(Ra,aCo),e(Ra,xce),e(xce,nCo),e(Ra,sCo),e(Ye,lCo),e(Ye,G),e(G,x_),e(x_,$ce),e($ce,iCo),e(x_,dCo),e(x_,Hj),e(Hj,cCo),e(x_,fCo),e(G,mCo),e(G,$_),e($_,kce),e(kce,gCo),e($_,hCo),e($_,Uj),e(Uj,pCo),e($_,uCo),e(G,_Co),e(G,k_),e(k_,Sce),e(Sce,bCo),e(k_,vCo),e(k_,Jj),e(Jj,FCo),e(k_,TCo),e(G,MCo),e(G,S_),e(S_,Rce),e(Rce,ECo),e(S_,CCo),e(S_,Yj),e(Yj,wCo),e(S_,ACo),e(G,LCo),e(G,R_),e(R_,Pce),e(Pce,yCo),e(R_,xCo),e(R_,Kj),e(Kj,$Co),e(R_,kCo),e(G,SCo),e(G,P_),e(P_,Bce),e(Bce,RCo),e(P_,PCo),e(P_,Zj),e(Zj,BCo),e(P_,ICo),e(G,NCo),e(G,B_),e(B_,Ice),e(Ice,qCo),e(B_,jCo),e(B_,eD),e(eD,DCo),e(B_,GCo),e(G,OCo),e(G,I_),e(I_,Nce),e(Nce,VCo),e(I_,XCo),e(I_,oD),e(oD,zCo),e(I_,WCo),e(G,QCo),e(G,N_),e(N_,qce),e(qce,HCo),e(N_,UCo),e(N_,rD),e(rD,JCo),e(N_,YCo),e(G,KCo),e(G,q_),e(q_,jce),e(jce,ZCo),e(q_,e0o),e(q_,tD),e(tD,o0o),e(q_,r0o),e(G,t0o),e(G,j_),e(j_,Dce),e(Dce,a0o),e(j_,n0o),e(j_,aD),e(aD,s0o),e(j_,l0o),e(G,i0o),e(G,D_),e(D_,Gce),e(Gce,d0o),e(D_,c0o),e(D_,nD),e(nD,f0o),e(D_,m0o),e(G,g0o),e(G,G_),e(G_,Oce),e(Oce,h0o),e(G_,p0o),e(G_,sD),e(sD,u0o),e(G_,_0o),e(G,b0o),e(G,O_),e(O_,Vce),e(Vce,v0o),e(O_,F0o),e(O_,lD),e(lD,T0o),e(O_,M0o),e(G,E0o),e(G,V_),e(V_,Xce),e(Xce,C0o),e(V_,w0o),e(V_,iD),e(iD,A0o),e(V_,L0o),e(G,y0o),e(G,X_),e(X_,zce),e(zce,x0o),e(X_,$0o),e(X_,dD),e(dD,k0o),e(X_,S0o),e(G,R0o),e(G,z_),e(z_,Wce),e(Wce,P0o),e(z_,B0o),e(z_,cD),e(cD,I0o),e(z_,N0o),e(G,q0o),e(G,W_),e(W_,Qce),e(Qce,j0o),e(W_,D0o),e(W_,fD),e(fD,G0o),e(W_,O0o),e(G,V0o),e(G,Q_),e(Q_,Hce),e(Hce,X0o),e(Q_,z0o),e(Q_,mD),e(mD,W0o),e(Q_,Q0o),e(G,H0o),e(G,H_),e(H_,Uce),e(Uce,U0o),e(H_,J0o),e(H_,gD),e(gD,Y0o),e(H_,K0o),e(G,Z0o),e(G,U_),e(U_,Jce),e(Jce,ewo),e(U_,owo),e(U_,hD),e(hD,rwo),e(U_,two),e(G,awo),e(G,J_),e(J_,Yce),e(Yce,nwo),e(J_,swo),e(J_,pD),e(pD,lwo),e(J_,iwo),e(G,dwo),e(G,Y_),e(Y_,Kce),e(Kce,cwo),e(Y_,fwo),e(Y_,uD),e(uD,mwo),e(Y_,gwo),e(G,hwo),e(G,K_),e(K_,Zce),e(Zce,pwo),e(K_,uwo),e(K_,_D),e(_D,_wo),e(K_,bwo),e(G,vwo),e(G,Z_),e(Z_,efe),e(efe,Fwo),e(Z_,Two),e(Z_,bD),e(bD,Mwo),e(Z_,Ewo),e(G,Cwo),e(G,e1),e(e1,ofe),e(ofe,wwo),e(e1,Awo),e(e1,vD),e(vD,Lwo),e(e1,ywo),e(G,xwo),e(G,o1),e(o1,rfe),e(rfe,$wo),e(o1,kwo),e(o1,FD),e(FD,Swo),e(o1,Rwo),e(G,Pwo),e(G,r1),e(r1,tfe),e(tfe,Bwo),e(r1,Iwo),e(r1,TD),e(TD,Nwo),e(r1,qwo),e(G,jwo),e(G,t1),e(t1,afe),e(afe,Dwo),e(t1,Gwo),e(t1,MD),e(MD,Owo),e(t1,Vwo),e(G,Xwo),e(G,a1),e(a1,nfe),e(nfe,zwo),e(a1,Wwo),e(a1,ED),e(ED,Qwo),e(a1,Hwo),e(G,Uwo),e(G,n1),e(n1,sfe),e(sfe,Jwo),e(n1,Ywo),e(n1,CD),e(CD,Kwo),e(n1,Zwo),e(G,eAo),e(G,s1),e(s1,lfe),e(lfe,oAo),e(s1,rAo),e(s1,wD),e(wD,tAo),e(s1,aAo),e(G,nAo),e(G,l1),e(l1,ife),e(ife,sAo),e(l1,lAo),e(l1,AD),e(AD,iAo),e(l1,dAo),e(G,cAo),e(G,i1),e(i1,dfe),e(dfe,fAo),e(i1,mAo),e(i1,LD),e(LD,gAo),e(i1,hAo),e(G,pAo),e(G,d1),e(d1,cfe),e(cfe,uAo),e(d1,_Ao),e(d1,yD),e(yD,bAo),e(d1,vAo),e(G,FAo),e(G,c1),e(c1,ffe),e(ffe,TAo),e(c1,MAo),e(c1,xD),e(xD,EAo),e(c1,CAo),e(G,wAo),e(G,f1),e(f1,mfe),e(mfe,AAo),e(f1,LAo),e(f1,$D),e($D,yAo),e(f1,xAo),e(G,$Ao),e(G,m1),e(m1,gfe),e(gfe,kAo),e(m1,SAo),e(m1,kD),e(kD,RAo),e(m1,PAo),e(G,BAo),e(G,g1),e(g1,hfe),e(hfe,IAo),e(g1,NAo),e(g1,SD),e(SD,qAo),e(g1,jAo),e(G,DAo),e(G,h1),e(h1,pfe),e(pfe,GAo),e(h1,OAo),e(h1,RD),e(RD,VAo),e(h1,XAo),e(G,zAo),e(G,p1),e(p1,ufe),e(ufe,WAo),e(p1,QAo),e(p1,PD),e(PD,HAo),e(p1,UAo),e(G,JAo),e(G,u1),e(u1,_fe),e(_fe,YAo),e(u1,KAo),e(u1,BD),e(BD,ZAo),e(u1,eLo),e(G,oLo),e(G,_1),e(_1,bfe),e(bfe,rLo),e(_1,tLo),e(_1,ID),e(ID,aLo),e(_1,nLo),e(Ye,sLo),e(Ye,b1),e(b1,lLo),e(b1,vfe),e(vfe,iLo),e(b1,dLo),e(b1,Ffe),e(Ffe,cLo),e(Ye,fLo),M(v1,Ye,null),b(f,EGe,_),b(f,Di,_),e(Di,F1),e(F1,Tfe),M(t7,Tfe,null),e(Di,mLo),e(Di,Mfe),e(Mfe,gLo),b(f,CGe,_),b(f,ko,_),M(a7,ko,null),e(ko,hLo),e(ko,Gi),e(Gi,pLo),e(Gi,ND),e(ND,uLo),e(Gi,_Lo),e(Gi,qD),e(qD,bLo),e(Gi,vLo),e(ko,FLo),e(ko,n7),e(n7,TLo),e(n7,Efe),e(Efe,MLo),e(n7,ELo),e(ko,CLo),e(ko,lt),M(s7,lt,null),e(lt,wLo),e(lt,Cfe),e(Cfe,ALo),e(lt,LLo),e(lt,Oi),e(Oi,yLo),e(Oi,wfe),e(wfe,xLo),e(Oi,$Lo),e(Oi,jD),e(jD,kLo),e(Oi,SLo),e(lt,RLo),M(T1,lt,null),e(ko,PLo),e(ko,Ke),M(l7,Ke,null),e(Ke,BLo),e(Ke,Afe),e(Afe,ILo),e(Ke,NLo),e(Ke,Pa),e(Pa,qLo),e(Pa,Lfe),e(Lfe,jLo),e(Pa,DLo),e(Pa,yfe),e(yfe,GLo),e(Pa,OLo),e(Pa,xfe),e(xfe,VLo),e(Pa,XLo),e(Ke,zLo),e(Ke,z),e(z,M1),e(M1,$fe),e($fe,WLo),e(M1,QLo),e(M1,DD),e(DD,HLo),e(M1,ULo),e(z,JLo),e(z,E1),e(E1,kfe),e(kfe,YLo),e(E1,KLo),e(E1,GD),e(GD,ZLo),e(E1,eyo),e(z,oyo),e(z,C1),e(C1,Sfe),e(Sfe,ryo),e(C1,tyo),e(C1,OD),e(OD,ayo),e(C1,nyo),e(z,syo),e(z,w1),e(w1,Rfe),e(Rfe,lyo),e(w1,iyo),e(w1,VD),e(VD,dyo),e(w1,cyo),e(z,fyo),e(z,A1),e(A1,Pfe),e(Pfe,myo),e(A1,gyo),e(A1,XD),e(XD,hyo),e(A1,pyo),e(z,uyo),e(z,L1),e(L1,Bfe),e(Bfe,_yo),e(L1,byo),e(L1,zD),e(zD,vyo),e(L1,Fyo),e(z,Tyo),e(z,y1),e(y1,Ife),e(Ife,Myo),e(y1,Eyo),e(y1,WD),e(WD,Cyo),e(y1,wyo),e(z,Ayo),e(z,x1),e(x1,Nfe),e(Nfe,Lyo),e(x1,yyo),e(x1,QD),e(QD,xyo),e(x1,$yo),e(z,kyo),e(z,$1),e($1,qfe),e(qfe,Syo),e($1,Ryo),e($1,HD),e(HD,Pyo),e($1,Byo),e(z,Iyo),e(z,k1),e(k1,jfe),e(jfe,Nyo),e(k1,qyo),e(k1,UD),e(UD,jyo),e(k1,Dyo),e(z,Gyo),e(z,S1),e(S1,Dfe),e(Dfe,Oyo),e(S1,Vyo),e(S1,JD),e(JD,Xyo),e(S1,zyo),e(z,Wyo),e(z,R1),e(R1,Gfe),e(Gfe,Qyo),e(R1,Hyo),e(R1,YD),e(YD,Uyo),e(R1,Jyo),e(z,Yyo),e(z,P1),e(P1,Ofe),e(Ofe,Kyo),e(P1,Zyo),e(P1,KD),e(KD,e7o),e(P1,o7o),e(z,r7o),e(z,B1),e(B1,Vfe),e(Vfe,t7o),e(B1,a7o),e(B1,ZD),e(ZD,n7o),e(B1,s7o),e(z,l7o),e(z,I1),e(I1,Xfe),e(Xfe,i7o),e(I1,d7o),e(I1,eG),e(eG,c7o),e(I1,f7o),e(z,m7o),e(z,N1),e(N1,zfe),e(zfe,g7o),e(N1,h7o),e(N1,oG),e(oG,p7o),e(N1,u7o),e(z,_7o),e(z,q1),e(q1,Wfe),e(Wfe,b7o),e(q1,v7o),e(q1,rG),e(rG,F7o),e(q1,T7o),e(z,M7o),e(z,j1),e(j1,Qfe),e(Qfe,E7o),e(j1,C7o),e(j1,tG),e(tG,w7o),e(j1,A7o),e(z,L7o),e(z,D1),e(D1,Hfe),e(Hfe,y7o),e(D1,x7o),e(D1,aG),e(aG,$7o),e(D1,k7o),e(z,S7o),e(z,G1),e(G1,Ufe),e(Ufe,R7o),e(G1,P7o),e(G1,nG),e(nG,B7o),e(G1,I7o),e(z,N7o),e(z,O1),e(O1,Jfe),e(Jfe,q7o),e(O1,j7o),e(O1,sG),e(sG,D7o),e(O1,G7o),e(z,O7o),e(z,V1),e(V1,Yfe),e(Yfe,V7o),e(V1,X7o),e(V1,lG),e(lG,z7o),e(V1,W7o),e(z,Q7o),e(z,X1),e(X1,Kfe),e(Kfe,H7o),e(X1,U7o),e(X1,iG),e(iG,J7o),e(X1,Y7o),e(z,K7o),e(z,z1),e(z1,Zfe),e(Zfe,Z7o),e(z1,e8o),e(z1,dG),e(dG,o8o),e(z1,r8o),e(z,t8o),e(z,W1),e(W1,eme),e(eme,a8o),e(W1,n8o),e(W1,cG),e(cG,s8o),e(W1,l8o),e(z,i8o),e(z,Q1),e(Q1,ome),e(ome,d8o),e(Q1,c8o),e(Q1,fG),e(fG,f8o),e(Q1,m8o),e(z,g8o),e(z,H1),e(H1,rme),e(rme,h8o),e(H1,p8o),e(H1,mG),e(mG,u8o),e(H1,_8o),e(z,b8o),e(z,U1),e(U1,tme),e(tme,v8o),e(U1,F8o),e(U1,gG),e(gG,T8o),e(U1,M8o),e(z,E8o),e(z,J1),e(J1,ame),e(ame,C8o),e(J1,w8o),e(J1,hG),e(hG,A8o),e(J1,L8o),e(z,y8o),e(z,Y1),e(Y1,nme),e(nme,x8o),e(Y1,$8o),e(Y1,pG),e(pG,k8o),e(Y1,S8o),e(z,R8o),e(z,K1),e(K1,sme),e(sme,P8o),e(K1,B8o),e(K1,uG),e(uG,I8o),e(K1,N8o),e(z,q8o),e(z,Z1),e(Z1,lme),e(lme,j8o),e(Z1,D8o),e(Z1,_G),e(_G,G8o),e(Z1,O8o),e(z,V8o),e(z,e2),e(e2,ime),e(ime,X8o),e(e2,z8o),e(e2,bG),e(bG,W8o),e(e2,Q8o),e(z,H8o),e(z,o2),e(o2,dme),e(dme,U8o),e(o2,J8o),e(o2,vG),e(vG,Y8o),e(o2,K8o),e(z,Z8o),e(z,r2),e(r2,cme),e(cme,e9o),e(r2,o9o),e(r2,FG),e(FG,r9o),e(r2,t9o),e(z,a9o),e(z,t2),e(t2,fme),e(fme,n9o),e(t2,s9o),e(t2,TG),e(TG,l9o),e(t2,i9o),e(z,d9o),e(z,a2),e(a2,mme),e(mme,c9o),e(a2,f9o),e(a2,MG),e(MG,m9o),e(a2,g9o),e(z,h9o),e(z,n2),e(n2,gme),e(gme,p9o),e(n2,u9o),e(n2,EG),e(EG,_9o),e(n2,b9o),e(Ke,v9o),e(Ke,s2),e(s2,F9o),e(s2,hme),e(hme,T9o),e(s2,M9o),e(s2,pme),e(pme,E9o),e(Ke,C9o),M(l2,Ke,null),b(f,wGe,_),b(f,Vi,_),e(Vi,i2),e(i2,ume),M(i7,ume,null),e(Vi,w9o),e(Vi,_me),e(_me,A9o),b(f,AGe,_),b(f,So,_),M(d7,So,null),e(So,L9o),e(So,Xi),e(Xi,y9o),e(Xi,CG),e(CG,x9o),e(Xi,$9o),e(Xi,wG),e(wG,k9o),e(Xi,S9o),e(So,R9o),e(So,c7),e(c7,P9o),e(c7,bme),e(bme,B9o),e(c7,I9o),e(So,N9o),e(So,it),M(f7,it,null),e(it,q9o),e(it,vme),e(vme,j9o),e(it,D9o),e(it,zi),e(zi,G9o),e(zi,Fme),e(Fme,O9o),e(zi,V9o),e(zi,AG),e(AG,X9o),e(zi,z9o),e(it,W9o),M(d2,it,null),e(So,Q9o),e(So,Ze),M(m7,Ze,null),e(Ze,H9o),e(Ze,Tme),e(Tme,U9o),e(Ze,J9o),e(Ze,Ba),e(Ba,Y9o),e(Ba,Mme),e(Mme,K9o),e(Ba,Z9o),e(Ba,Eme),e(Eme,exo),e(Ba,oxo),e(Ba,Cme),e(Cme,rxo),e(Ba,txo),e(Ze,axo),e(Ze,Q),e(Q,c2),e(c2,wme),e(wme,nxo),e(c2,sxo),e(c2,LG),e(LG,lxo),e(c2,ixo),e(Q,dxo),e(Q,f2),e(f2,Ame),e(Ame,cxo),e(f2,fxo),e(f2,yG),e(yG,mxo),e(f2,gxo),e(Q,hxo),e(Q,m2),e(m2,Lme),e(Lme,pxo),e(m2,uxo),e(m2,xG),e(xG,_xo),e(m2,bxo),e(Q,vxo),e(Q,g2),e(g2,yme),e(yme,Fxo),e(g2,Txo),e(g2,$G),e($G,Mxo),e(g2,Exo),e(Q,Cxo),e(Q,h2),e(h2,xme),e(xme,wxo),e(h2,Axo),e(h2,kG),e(kG,Lxo),e(h2,yxo),e(Q,xxo),e(Q,p2),e(p2,$me),e($me,$xo),e(p2,kxo),e(p2,SG),e(SG,Sxo),e(p2,Rxo),e(Q,Pxo),e(Q,u2),e(u2,kme),e(kme,Bxo),e(u2,Ixo),e(u2,RG),e(RG,Nxo),e(u2,qxo),e(Q,jxo),e(Q,_2),e(_2,Sme),e(Sme,Dxo),e(_2,Gxo),e(_2,PG),e(PG,Oxo),e(_2,Vxo),e(Q,Xxo),e(Q,b2),e(b2,Rme),e(Rme,zxo),e(b2,Wxo),e(b2,BG),e(BG,Qxo),e(b2,Hxo),e(Q,Uxo),e(Q,v2),e(v2,Pme),e(Pme,Jxo),e(v2,Yxo),e(v2,IG),e(IG,Kxo),e(v2,Zxo),e(Q,e$o),e(Q,F2),e(F2,Bme),e(Bme,o$o),e(F2,r$o),e(F2,NG),e(NG,t$o),e(F2,a$o),e(Q,n$o),e(Q,T2),e(T2,Ime),e(Ime,s$o),e(T2,l$o),e(T2,qG),e(qG,i$o),e(T2,d$o),e(Q,c$o),e(Q,M2),e(M2,Nme),e(Nme,f$o),e(M2,m$o),e(M2,jG),e(jG,g$o),e(M2,h$o),e(Q,p$o),e(Q,E2),e(E2,qme),e(qme,u$o),e(E2,_$o),e(E2,DG),e(DG,b$o),e(E2,v$o),e(Q,F$o),e(Q,C2),e(C2,jme),e(jme,T$o),e(C2,M$o),e(C2,GG),e(GG,E$o),e(C2,C$o),e(Q,w$o),e(Q,w2),e(w2,Dme),e(Dme,A$o),e(w2,L$o),e(w2,OG),e(OG,y$o),e(w2,x$o),e(Q,$$o),e(Q,A2),e(A2,Gme),e(Gme,k$o),e(A2,S$o),e(A2,VG),e(VG,R$o),e(A2,P$o),e(Q,B$o),e(Q,L2),e(L2,Ome),e(Ome,I$o),e(L2,N$o),e(L2,XG),e(XG,q$o),e(L2,j$o),e(Q,D$o),e(Q,y2),e(y2,Vme),e(Vme,G$o),e(y2,O$o),e(y2,zG),e(zG,V$o),e(y2,X$o),e(Q,z$o),e(Q,x2),e(x2,Xme),e(Xme,W$o),e(x2,Q$o),e(x2,WG),e(WG,H$o),e(x2,U$o),e(Q,J$o),e(Q,$2),e($2,zme),e(zme,Y$o),e($2,K$o),e($2,QG),e(QG,Z$o),e($2,eko),e(Q,oko),e(Q,k2),e(k2,Wme),e(Wme,rko),e(k2,tko),e(k2,HG),e(HG,ako),e(k2,nko),e(Q,sko),e(Q,S2),e(S2,Qme),e(Qme,lko),e(S2,iko),e(S2,UG),e(UG,dko),e(S2,cko),e(Q,fko),e(Q,R2),e(R2,Hme),e(Hme,mko),e(R2,gko),e(R2,JG),e(JG,hko),e(R2,pko),e(Q,uko),e(Q,P2),e(P2,Ume),e(Ume,_ko),e(P2,bko),e(P2,YG),e(YG,vko),e(P2,Fko),e(Q,Tko),e(Q,B2),e(B2,Jme),e(Jme,Mko),e(B2,Eko),e(B2,KG),e(KG,Cko),e(B2,wko),e(Q,Ako),e(Q,I2),e(I2,Yme),e(Yme,Lko),e(I2,yko),e(I2,ZG),e(ZG,xko),e(I2,$ko),e(Q,kko),e(Q,N2),e(N2,Kme),e(Kme,Sko),e(N2,Rko),e(N2,eO),e(eO,Pko),e(N2,Bko),e(Q,Iko),e(Q,q2),e(q2,Zme),e(Zme,Nko),e(q2,qko),e(q2,oO),e(oO,jko),e(q2,Dko),e(Q,Gko),e(Q,j2),e(j2,ege),e(ege,Oko),e(j2,Vko),e(j2,rO),e(rO,Xko),e(j2,zko),e(Q,Wko),e(Q,D2),e(D2,oge),e(oge,Qko),e(D2,Hko),e(D2,tO),e(tO,Uko),e(D2,Jko),e(Q,Yko),e(Q,G2),e(G2,rge),e(rge,Kko),e(G2,Zko),e(G2,tge),e(tge,eSo),e(G2,oSo),e(Q,rSo),e(Q,O2),e(O2,age),e(age,tSo),e(O2,aSo),e(O2,aO),e(aO,nSo),e(O2,sSo),e(Q,lSo),e(Q,V2),e(V2,nge),e(nge,iSo),e(V2,dSo),e(V2,nO),e(nO,cSo),e(V2,fSo),e(Q,mSo),e(Q,X2),e(X2,sge),e(sge,gSo),e(X2,hSo),e(X2,sO),e(sO,pSo),e(X2,uSo),e(Q,_So),e(Q,z2),e(z2,lge),e(lge,bSo),e(z2,vSo),e(z2,lO),e(lO,FSo),e(z2,TSo),e(Ze,MSo),e(Ze,W2),e(W2,ESo),e(W2,ige),e(ige,CSo),e(W2,wSo),e(W2,dge),e(dge,ASo),e(Ze,LSo),M(Q2,Ze,null),b(f,LGe,_),b(f,Wi,_),e(Wi,H2),e(H2,cge),M(g7,cge,null),e(Wi,ySo),e(Wi,fge),e(fge,xSo),b(f,yGe,_),b(f,Ro,_),M(h7,Ro,null),e(Ro,$So),e(Ro,Qi),e(Qi,kSo),e(Qi,iO),e(iO,SSo),e(Qi,RSo),e(Qi,dO),e(dO,PSo),e(Qi,BSo),e(Ro,ISo),e(Ro,p7),e(p7,NSo),e(p7,mge),e(mge,qSo),e(p7,jSo),e(Ro,DSo),e(Ro,dt),M(u7,dt,null),e(dt,GSo),e(dt,gge),e(gge,OSo),e(dt,VSo),e(dt,Hi),e(Hi,XSo),e(Hi,hge),e(hge,zSo),e(Hi,WSo),e(Hi,cO),e(cO,QSo),e(Hi,HSo),e(dt,USo),M(U2,dt,null),e(Ro,JSo),e(Ro,eo),M(_7,eo,null),e(eo,YSo),e(eo,pge),e(pge,KSo),e(eo,ZSo),e(eo,Ia),e(Ia,eRo),e(Ia,uge),e(uge,oRo),e(Ia,rRo),e(Ia,_ge),e(_ge,tRo),e(Ia,aRo),e(Ia,bge),e(bge,nRo),e(Ia,sRo),e(eo,lRo),e(eo,pe),e(pe,J2),e(J2,vge),e(vge,iRo),e(J2,dRo),e(J2,fO),e(fO,cRo),e(J2,fRo),e(pe,mRo),e(pe,Y2),e(Y2,Fge),e(Fge,gRo),e(Y2,hRo),e(Y2,mO),e(mO,pRo),e(Y2,uRo),e(pe,_Ro),e(pe,K2),e(K2,Tge),e(Tge,bRo),e(K2,vRo),e(K2,gO),e(gO,FRo),e(K2,TRo),e(pe,MRo),e(pe,Z2),e(Z2,Mge),e(Mge,ERo),e(Z2,CRo),e(Z2,hO),e(hO,wRo),e(Z2,ARo),e(pe,LRo),e(pe,eb),e(eb,Ege),e(Ege,yRo),e(eb,xRo),e(eb,pO),e(pO,$Ro),e(eb,kRo),e(pe,SRo),e(pe,ob),e(ob,Cge),e(Cge,RRo),e(ob,PRo),e(ob,uO),e(uO,BRo),e(ob,IRo),e(pe,NRo),e(pe,rb),e(rb,wge),e(wge,qRo),e(rb,jRo),e(rb,_O),e(_O,DRo),e(rb,GRo),e(pe,ORo),e(pe,tb),e(tb,Age),e(Age,VRo),e(tb,XRo),e(tb,bO),e(bO,zRo),e(tb,WRo),e(pe,QRo),e(pe,ab),e(ab,Lge),e(Lge,HRo),e(ab,URo),e(ab,vO),e(vO,JRo),e(ab,YRo),e(pe,KRo),e(pe,nb),e(nb,yge),e(yge,ZRo),e(nb,ePo),e(nb,FO),e(FO,oPo),e(nb,rPo),e(pe,tPo),e(pe,sb),e(sb,xge),e(xge,aPo),e(sb,nPo),e(sb,TO),e(TO,sPo),e(sb,lPo),e(pe,iPo),e(pe,lb),e(lb,$ge),e($ge,dPo),e(lb,cPo),e(lb,MO),e(MO,fPo),e(lb,mPo),e(pe,gPo),e(pe,ib),e(ib,kge),e(kge,hPo),e(ib,pPo),e(ib,EO),e(EO,uPo),e(ib,_Po),e(pe,bPo),e(pe,db),e(db,Sge),e(Sge,vPo),e(db,FPo),e(db,CO),e(CO,TPo),e(db,MPo),e(pe,EPo),e(pe,cb),e(cb,Rge),e(Rge,CPo),e(cb,wPo),e(cb,wO),e(wO,APo),e(cb,LPo),e(pe,yPo),e(pe,fb),e(fb,Pge),e(Pge,xPo),e(fb,$Po),e(fb,AO),e(AO,kPo),e(fb,SPo),e(pe,RPo),e(pe,mb),e(mb,Bge),e(Bge,PPo),e(mb,BPo),e(mb,LO),e(LO,IPo),e(mb,NPo),e(eo,qPo),e(eo,gb),e(gb,jPo),e(gb,Ige),e(Ige,DPo),e(gb,GPo),e(gb,Nge),e(Nge,OPo),e(eo,VPo),M(hb,eo,null),b(f,xGe,_),b(f,Ui,_),e(Ui,pb),e(pb,qge),M(b7,qge,null),e(Ui,XPo),e(Ui,jge),e(jge,zPo),b(f,$Ge,_),b(f,Po,_),M(v7,Po,null),e(Po,WPo),e(Po,Ji),e(Ji,QPo),e(Ji,yO),e(yO,HPo),e(Ji,UPo),e(Ji,xO),e(xO,JPo),e(Ji,YPo),e(Po,KPo),e(Po,F7),e(F7,ZPo),e(F7,Dge),e(Dge,eBo),e(F7,oBo),e(Po,rBo),e(Po,ct),M(T7,ct,null),e(ct,tBo),e(ct,Gge),e(Gge,aBo),e(ct,nBo),e(ct,Yi),e(Yi,sBo),e(Yi,Oge),e(Oge,lBo),e(Yi,iBo),e(Yi,$O),e($O,dBo),e(Yi,cBo),e(ct,fBo),M(ub,ct,null),e(Po,mBo),e(Po,oo),M(M7,oo,null),e(oo,gBo),e(oo,Vge),e(Vge,hBo),e(oo,pBo),e(oo,Na),e(Na,uBo),e(Na,Xge),e(Xge,_Bo),e(Na,bBo),e(Na,zge),e(zge,vBo),e(Na,FBo),e(Na,Wge),e(Wge,TBo),e(Na,MBo),e(oo,EBo),e(oo,N),e(N,_b),e(_b,Qge),e(Qge,CBo),e(_b,wBo),e(_b,kO),e(kO,ABo),e(_b,LBo),e(N,yBo),e(N,bb),e(bb,Hge),e(Hge,xBo),e(bb,$Bo),e(bb,SO),e(SO,kBo),e(bb,SBo),e(N,RBo),e(N,vb),e(vb,Uge),e(Uge,PBo),e(vb,BBo),e(vb,RO),e(RO,IBo),e(vb,NBo),e(N,qBo),e(N,Fb),e(Fb,Jge),e(Jge,jBo),e(Fb,DBo),e(Fb,PO),e(PO,GBo),e(Fb,OBo),e(N,VBo),e(N,Tb),e(Tb,Yge),e(Yge,XBo),e(Tb,zBo),e(Tb,BO),e(BO,WBo),e(Tb,QBo),e(N,HBo),e(N,Mb),e(Mb,Kge),e(Kge,UBo),e(Mb,JBo),e(Mb,IO),e(IO,YBo),e(Mb,KBo),e(N,ZBo),e(N,Eb),e(Eb,Zge),e(Zge,eIo),e(Eb,oIo),e(Eb,NO),e(NO,rIo),e(Eb,tIo),e(N,aIo),e(N,Cb),e(Cb,ehe),e(ehe,nIo),e(Cb,sIo),e(Cb,qO),e(qO,lIo),e(Cb,iIo),e(N,dIo),e(N,wb),e(wb,ohe),e(ohe,cIo),e(wb,fIo),e(wb,jO),e(jO,mIo),e(wb,gIo),e(N,hIo),e(N,Ab),e(Ab,rhe),e(rhe,pIo),e(Ab,uIo),e(Ab,DO),e(DO,_Io),e(Ab,bIo),e(N,vIo),e(N,Lb),e(Lb,the),e(the,FIo),e(Lb,TIo),e(Lb,GO),e(GO,MIo),e(Lb,EIo),e(N,CIo),e(N,yb),e(yb,ahe),e(ahe,wIo),e(yb,AIo),e(yb,OO),e(OO,LIo),e(yb,yIo),e(N,xIo),e(N,xb),e(xb,nhe),e(nhe,$Io),e(xb,kIo),e(xb,VO),e(VO,SIo),e(xb,RIo),e(N,PIo),e(N,$b),e($b,she),e(she,BIo),e($b,IIo),e($b,XO),e(XO,NIo),e($b,qIo),e(N,jIo),e(N,kb),e(kb,lhe),e(lhe,DIo),e(kb,GIo),e(kb,zO),e(zO,OIo),e(kb,VIo),e(N,XIo),e(N,Sb),e(Sb,ihe),e(ihe,zIo),e(Sb,WIo),e(Sb,WO),e(WO,QIo),e(Sb,HIo),e(N,UIo),e(N,Rb),e(Rb,dhe),e(dhe,JIo),e(Rb,YIo),e(Rb,QO),e(QO,KIo),e(Rb,ZIo),e(N,eNo),e(N,Pb),e(Pb,che),e(che,oNo),e(Pb,rNo),e(Pb,HO),e(HO,tNo),e(Pb,aNo),e(N,nNo),e(N,Bb),e(Bb,fhe),e(fhe,sNo),e(Bb,lNo),e(Bb,UO),e(UO,iNo),e(Bb,dNo),e(N,cNo),e(N,Ib),e(Ib,mhe),e(mhe,fNo),e(Ib,mNo),e(Ib,JO),e(JO,gNo),e(Ib,hNo),e(N,pNo),e(N,Nb),e(Nb,ghe),e(ghe,uNo),e(Nb,_No),e(Nb,YO),e(YO,bNo),e(Nb,vNo),e(N,FNo),e(N,qb),e(qb,hhe),e(hhe,TNo),e(qb,MNo),e(qb,KO),e(KO,ENo),e(qb,CNo),e(N,wNo),e(N,jb),e(jb,phe),e(phe,ANo),e(jb,LNo),e(jb,ZO),e(ZO,yNo),e(jb,xNo),e(N,$No),e(N,Db),e(Db,uhe),e(uhe,kNo),e(Db,SNo),e(Db,eV),e(eV,RNo),e(Db,PNo),e(N,BNo),e(N,Gb),e(Gb,_he),e(_he,INo),e(Gb,NNo),e(Gb,oV),e(oV,qNo),e(Gb,jNo),e(N,DNo),e(N,Ob),e(Ob,bhe),e(bhe,GNo),e(Ob,ONo),e(Ob,rV),e(rV,VNo),e(Ob,XNo),e(N,zNo),e(N,Vb),e(Vb,vhe),e(vhe,WNo),e(Vb,QNo),e(Vb,tV),e(tV,HNo),e(Vb,UNo),e(N,JNo),e(N,Xb),e(Xb,Fhe),e(Fhe,YNo),e(Xb,KNo),e(Xb,aV),e(aV,ZNo),e(Xb,eqo),e(N,oqo),e(N,zb),e(zb,The),e(The,rqo),e(zb,tqo),e(zb,nV),e(nV,aqo),e(zb,nqo),e(N,sqo),e(N,Wb),e(Wb,Mhe),e(Mhe,lqo),e(Wb,iqo),e(Wb,sV),e(sV,dqo),e(Wb,cqo),e(N,fqo),e(N,Qb),e(Qb,Ehe),e(Ehe,mqo),e(Qb,gqo),e(Qb,lV),e(lV,hqo),e(Qb,pqo),e(N,uqo),e(N,Hb),e(Hb,Che),e(Che,_qo),e(Hb,bqo),e(Hb,iV),e(iV,vqo),e(Hb,Fqo),e(N,Tqo),e(N,Ub),e(Ub,whe),e(whe,Mqo),e(Ub,Eqo),e(Ub,dV),e(dV,Cqo),e(Ub,wqo),e(N,Aqo),e(N,Jb),e(Jb,Ahe),e(Ahe,Lqo),e(Jb,yqo),e(Jb,cV),e(cV,xqo),e(Jb,$qo),e(N,kqo),e(N,Yb),e(Yb,Lhe),e(Lhe,Sqo),e(Yb,Rqo),e(Yb,fV),e(fV,Pqo),e(Yb,Bqo),e(N,Iqo),e(N,Kb),e(Kb,yhe),e(yhe,Nqo),e(Kb,qqo),e(Kb,mV),e(mV,jqo),e(Kb,Dqo),e(N,Gqo),e(N,Zb),e(Zb,xhe),e(xhe,Oqo),e(Zb,Vqo),e(Zb,gV),e(gV,Xqo),e(Zb,zqo),e(N,Wqo),e(N,e4),e(e4,$he),e($he,Qqo),e(e4,Hqo),e(e4,hV),e(hV,Uqo),e(e4,Jqo),e(N,Yqo),e(N,o4),e(o4,khe),e(khe,Kqo),e(o4,Zqo),e(o4,pV),e(pV,ejo),e(o4,ojo),e(N,rjo),e(N,r4),e(r4,She),e(She,tjo),e(r4,ajo),e(r4,uV),e(uV,njo),e(r4,sjo),e(N,ljo),e(N,t4),e(t4,Rhe),e(Rhe,ijo),e(t4,djo),e(t4,_V),e(_V,cjo),e(t4,fjo),e(N,mjo),e(N,a4),e(a4,Phe),e(Phe,gjo),e(a4,hjo),e(a4,bV),e(bV,pjo),e(a4,ujo),e(N,_jo),e(N,n4),e(n4,Bhe),e(Bhe,bjo),e(n4,vjo),e(n4,vV),e(vV,Fjo),e(n4,Tjo),e(N,Mjo),e(N,s4),e(s4,Ihe),e(Ihe,Ejo),e(s4,Cjo),e(s4,FV),e(FV,wjo),e(s4,Ajo),e(N,Ljo),e(N,l4),e(l4,Nhe),e(Nhe,yjo),e(l4,xjo),e(l4,TV),e(TV,$jo),e(l4,kjo),e(N,Sjo),e(N,i4),e(i4,qhe),e(qhe,Rjo),e(i4,Pjo),e(i4,MV),e(MV,Bjo),e(i4,Ijo),e(N,Njo),e(N,d4),e(d4,jhe),e(jhe,qjo),e(d4,jjo),e(d4,EV),e(EV,Djo),e(d4,Gjo),e(N,Ojo),e(N,c4),e(c4,Dhe),e(Dhe,Vjo),e(c4,Xjo),e(c4,CV),e(CV,zjo),e(c4,Wjo),e(oo,Qjo),e(oo,f4),e(f4,Hjo),e(f4,Ghe),e(Ghe,Ujo),e(f4,Jjo),e(f4,Ohe),e(Ohe,Yjo),e(oo,Kjo),M(m4,oo,null),b(f,kGe,_),b(f,Ki,_),e(Ki,g4),e(g4,Vhe),M(E7,Vhe,null),e(Ki,Zjo),e(Ki,Xhe),e(Xhe,eDo),b(f,SGe,_),b(f,Bo,_),M(C7,Bo,null),e(Bo,oDo),e(Bo,Zi),e(Zi,rDo),e(Zi,wV),e(wV,tDo),e(Zi,aDo),e(Zi,AV),e(AV,nDo),e(Zi,sDo),e(Bo,lDo),e(Bo,w7),e(w7,iDo),e(w7,zhe),e(zhe,dDo),e(w7,cDo),e(Bo,fDo),e(Bo,ft),M(A7,ft,null),e(ft,mDo),e(ft,Whe),e(Whe,gDo),e(ft,hDo),e(ft,ed),e(ed,pDo),e(ed,Qhe),e(Qhe,uDo),e(ed,_Do),e(ed,LV),e(LV,bDo),e(ed,vDo),e(ft,FDo),M(h4,ft,null),e(Bo,TDo),e(Bo,ro),M(L7,ro,null),e(ro,MDo),e(ro,Hhe),e(Hhe,EDo),e(ro,CDo),e(ro,qa),e(qa,wDo),e(qa,Uhe),e(Uhe,ADo),e(qa,LDo),e(qa,Jhe),e(Jhe,yDo),e(qa,xDo),e(qa,Yhe),e(Yhe,$Do),e(qa,kDo),e(ro,SDo),e(ro,Z),e(Z,p4),e(p4,Khe),e(Khe,RDo),e(p4,PDo),e(p4,yV),e(yV,BDo),e(p4,IDo),e(Z,NDo),e(Z,u4),e(u4,Zhe),e(Zhe,qDo),e(u4,jDo),e(u4,xV),e(xV,DDo),e(u4,GDo),e(Z,ODo),e(Z,_4),e(_4,epe),e(epe,VDo),e(_4,XDo),e(_4,$V),e($V,zDo),e(_4,WDo),e(Z,QDo),e(Z,b4),e(b4,ope),e(ope,HDo),e(b4,UDo),e(b4,kV),e(kV,JDo),e(b4,YDo),e(Z,KDo),e(Z,v4),e(v4,rpe),e(rpe,ZDo),e(v4,eGo),e(v4,SV),e(SV,oGo),e(v4,rGo),e(Z,tGo),e(Z,F4),e(F4,tpe),e(tpe,aGo),e(F4,nGo),e(F4,RV),e(RV,sGo),e(F4,lGo),e(Z,iGo),e(Z,T4),e(T4,ape),e(ape,dGo),e(T4,cGo),e(T4,PV),e(PV,fGo),e(T4,mGo),e(Z,gGo),e(Z,M4),e(M4,npe),e(npe,hGo),e(M4,pGo),e(M4,BV),e(BV,uGo),e(M4,_Go),e(Z,bGo),e(Z,E4),e(E4,spe),e(spe,vGo),e(E4,FGo),e(E4,IV),e(IV,TGo),e(E4,MGo),e(Z,EGo),e(Z,C4),e(C4,lpe),e(lpe,CGo),e(C4,wGo),e(C4,NV),e(NV,AGo),e(C4,LGo),e(Z,yGo),e(Z,w4),e(w4,ipe),e(ipe,xGo),e(w4,$Go),e(w4,qV),e(qV,kGo),e(w4,SGo),e(Z,RGo),e(Z,A4),e(A4,dpe),e(dpe,PGo),e(A4,BGo),e(A4,jV),e(jV,IGo),e(A4,NGo),e(Z,qGo),e(Z,L4),e(L4,cpe),e(cpe,jGo),e(L4,DGo),e(L4,DV),e(DV,GGo),e(L4,OGo),e(Z,VGo),e(Z,y4),e(y4,fpe),e(fpe,XGo),e(y4,zGo),e(y4,GV),e(GV,WGo),e(y4,QGo),e(Z,HGo),e(Z,x4),e(x4,mpe),e(mpe,UGo),e(x4,JGo),e(x4,OV),e(OV,YGo),e(x4,KGo),e(Z,ZGo),e(Z,$4),e($4,gpe),e(gpe,eOo),e($4,oOo),e($4,VV),e(VV,rOo),e($4,tOo),e(Z,aOo),e(Z,k4),e(k4,hpe),e(hpe,nOo),e(k4,sOo),e(k4,XV),e(XV,lOo),e(k4,iOo),e(Z,dOo),e(Z,S4),e(S4,ppe),e(ppe,cOo),e(S4,fOo),e(S4,zV),e(zV,mOo),e(S4,gOo),e(Z,hOo),e(Z,R4),e(R4,upe),e(upe,pOo),e(R4,uOo),e(R4,WV),e(WV,_Oo),e(R4,bOo),e(Z,vOo),e(Z,P4),e(P4,_pe),e(_pe,FOo),e(P4,TOo),e(P4,QV),e(QV,MOo),e(P4,EOo),e(Z,COo),e(Z,B4),e(B4,bpe),e(bpe,wOo),e(B4,AOo),e(B4,HV),e(HV,LOo),e(B4,yOo),e(Z,xOo),e(Z,I4),e(I4,vpe),e(vpe,$Oo),e(I4,kOo),e(I4,UV),e(UV,SOo),e(I4,ROo),e(Z,POo),e(Z,N4),e(N4,Fpe),e(Fpe,BOo),e(N4,IOo),e(N4,JV),e(JV,NOo),e(N4,qOo),e(Z,jOo),e(Z,q4),e(q4,Tpe),e(Tpe,DOo),e(q4,GOo),e(q4,YV),e(YV,OOo),e(q4,VOo),e(Z,XOo),e(Z,j4),e(j4,Mpe),e(Mpe,zOo),e(j4,WOo),e(j4,KV),e(KV,QOo),e(j4,HOo),e(Z,UOo),e(Z,D4),e(D4,Epe),e(Epe,JOo),e(D4,YOo),e(D4,ZV),e(ZV,KOo),e(D4,ZOo),e(Z,eVo),e(Z,G4),e(G4,Cpe),e(Cpe,oVo),e(G4,rVo),e(G4,eX),e(eX,tVo),e(G4,aVo),e(Z,nVo),e(Z,O4),e(O4,wpe),e(wpe,sVo),e(O4,lVo),e(O4,oX),e(oX,iVo),e(O4,dVo),e(Z,cVo),e(Z,V4),e(V4,Ape),e(Ape,fVo),e(V4,mVo),e(V4,rX),e(rX,gVo),e(V4,hVo),e(ro,pVo),e(ro,X4),e(X4,uVo),e(X4,Lpe),e(Lpe,_Vo),e(X4,bVo),e(X4,ype),e(ype,vVo),e(ro,FVo),M(z4,ro,null),b(f,RGe,_),b(f,od,_),e(od,W4),e(W4,xpe),M(y7,xpe,null),e(od,TVo),e(od,$pe),e($pe,MVo),b(f,PGe,_),b(f,Io,_),M(x7,Io,null),e(Io,EVo),e(Io,rd),e(rd,CVo),e(rd,tX),e(tX,wVo),e(rd,AVo),e(rd,aX),e(aX,LVo),e(rd,yVo),e(Io,xVo),e(Io,$7),e($7,$Vo),e($7,kpe),e(kpe,kVo),e($7,SVo),e(Io,RVo),e(Io,mt),M(k7,mt,null),e(mt,PVo),e(mt,Spe),e(Spe,BVo),e(mt,IVo),e(mt,td),e(td,NVo),e(td,Rpe),e(Rpe,qVo),e(td,jVo),e(td,nX),e(nX,DVo),e(td,GVo),e(mt,OVo),M(Q4,mt,null),e(Io,VVo),e(Io,to),M(S7,to,null),e(to,XVo),e(to,Ppe),e(Ppe,zVo),e(to,WVo),e(to,ja),e(ja,QVo),e(ja,Bpe),e(Bpe,HVo),e(ja,UVo),e(ja,Ipe),e(Ipe,JVo),e(ja,YVo),e(ja,Npe),e(Npe,KVo),e(ja,ZVo),e(to,eXo),e(to,Zr),e(Zr,H4),e(H4,qpe),e(qpe,oXo),e(H4,rXo),e(H4,sX),e(sX,tXo),e(H4,aXo),e(Zr,nXo),e(Zr,U4),e(U4,jpe),e(jpe,sXo),e(U4,lXo),e(U4,lX),e(lX,iXo),e(U4,dXo),e(Zr,cXo),e(Zr,J4),e(J4,Dpe),e(Dpe,fXo),e(J4,mXo),e(J4,iX),e(iX,gXo),e(J4,hXo),e(Zr,pXo),e(Zr,Y4),e(Y4,Gpe),e(Gpe,uXo),e(Y4,_Xo),e(Y4,dX),e(dX,bXo),e(Y4,vXo),e(Zr,FXo),e(Zr,K4),e(K4,Ope),e(Ope,TXo),e(K4,MXo),e(K4,cX),e(cX,EXo),e(K4,CXo),e(to,wXo),e(to,Z4),e(Z4,AXo),e(Z4,Vpe),e(Vpe,LXo),e(Z4,yXo),e(Z4,Xpe),e(Xpe,xXo),e(to,$Xo),M(e5,to,null),b(f,BGe,_),b(f,ad,_),e(ad,o5),e(o5,zpe),M(R7,zpe,null),e(ad,kXo),e(ad,Wpe),e(Wpe,SXo),b(f,IGe,_),b(f,No,_),M(P7,No,null),e(No,RXo),e(No,nd),e(nd,PXo),e(nd,fX),e(fX,BXo),e(nd,IXo),e(nd,mX),e(mX,NXo),e(nd,qXo),e(No,jXo),e(No,B7),e(B7,DXo),e(B7,Qpe),e(Qpe,GXo),e(B7,OXo),e(No,VXo),e(No,gt),M(I7,gt,null),e(gt,XXo),e(gt,Hpe),e(Hpe,zXo),e(gt,WXo),e(gt,sd),e(sd,QXo),e(sd,Upe),e(Upe,HXo),e(sd,UXo),e(sd,gX),e(gX,JXo),e(sd,YXo),e(gt,KXo),M(r5,gt,null),e(No,ZXo),e(No,ao),M(N7,ao,null),e(ao,ezo),e(ao,Jpe),e(Jpe,ozo),e(ao,rzo),e(ao,Da),e(Da,tzo),e(Da,Ype),e(Ype,azo),e(Da,nzo),e(Da,Kpe),e(Kpe,szo),e(Da,lzo),e(Da,Zpe),e(Zpe,izo),e(Da,dzo),e(ao,czo),e(ao,H),e(H,t5),e(t5,eue),e(eue,fzo),e(t5,mzo),e(t5,hX),e(hX,gzo),e(t5,hzo),e(H,pzo),e(H,a5),e(a5,oue),e(oue,uzo),e(a5,_zo),e(a5,pX),e(pX,bzo),e(a5,vzo),e(H,Fzo),e(H,n5),e(n5,rue),e(rue,Tzo),e(n5,Mzo),e(n5,uX),e(uX,Ezo),e(n5,Czo),e(H,wzo),e(H,s5),e(s5,tue),e(tue,Azo),e(s5,Lzo),e(s5,_X),e(_X,yzo),e(s5,xzo),e(H,$zo),e(H,l5),e(l5,aue),e(aue,kzo),e(l5,Szo),e(l5,bX),e(bX,Rzo),e(l5,Pzo),e(H,Bzo),e(H,i5),e(i5,nue),e(nue,Izo),e(i5,Nzo),e(i5,vX),e(vX,qzo),e(i5,jzo),e(H,Dzo),e(H,d5),e(d5,sue),e(sue,Gzo),e(d5,Ozo),e(d5,FX),e(FX,Vzo),e(d5,Xzo),e(H,zzo),e(H,c5),e(c5,lue),e(lue,Wzo),e(c5,Qzo),e(c5,TX),e(TX,Hzo),e(c5,Uzo),e(H,Jzo),e(H,f5),e(f5,iue),e(iue,Yzo),e(f5,Kzo),e(f5,MX),e(MX,Zzo),e(f5,eWo),e(H,oWo),e(H,m5),e(m5,due),e(due,rWo),e(m5,tWo),e(m5,EX),e(EX,aWo),e(m5,nWo),e(H,sWo),e(H,g5),e(g5,cue),e(cue,lWo),e(g5,iWo),e(g5,CX),e(CX,dWo),e(g5,cWo),e(H,fWo),e(H,h5),e(h5,fue),e(fue,mWo),e(h5,gWo),e(h5,wX),e(wX,hWo),e(h5,pWo),e(H,uWo),e(H,p5),e(p5,mue),e(mue,_Wo),e(p5,bWo),e(p5,AX),e(AX,vWo),e(p5,FWo),e(H,TWo),e(H,u5),e(u5,gue),e(gue,MWo),e(u5,EWo),e(u5,LX),e(LX,CWo),e(u5,wWo),e(H,AWo),e(H,_5),e(_5,hue),e(hue,LWo),e(_5,yWo),e(_5,yX),e(yX,xWo),e(_5,$Wo),e(H,kWo),e(H,b5),e(b5,pue),e(pue,SWo),e(b5,RWo),e(b5,xX),e(xX,PWo),e(b5,BWo),e(H,IWo),e(H,v5),e(v5,uue),e(uue,NWo),e(v5,qWo),e(v5,$X),e($X,jWo),e(v5,DWo),e(H,GWo),e(H,F5),e(F5,_ue),e(_ue,OWo),e(F5,VWo),e(F5,kX),e(kX,XWo),e(F5,zWo),e(H,WWo),e(H,T5),e(T5,bue),e(bue,QWo),e(T5,HWo),e(T5,SX),e(SX,UWo),e(T5,JWo),e(H,YWo),e(H,M5),e(M5,vue),e(vue,KWo),e(M5,ZWo),e(M5,RX),e(RX,eQo),e(M5,oQo),e(H,rQo),e(H,E5),e(E5,Fue),e(Fue,tQo),e(E5,aQo),e(E5,PX),e(PX,nQo),e(E5,sQo),e(H,lQo),e(H,C5),e(C5,Tue),e(Tue,iQo),e(C5,dQo),e(C5,BX),e(BX,cQo),e(C5,fQo),e(H,mQo),e(H,w5),e(w5,Mue),e(Mue,gQo),e(w5,hQo),e(w5,IX),e(IX,pQo),e(w5,uQo),e(H,_Qo),e(H,A5),e(A5,Eue),e(Eue,bQo),e(A5,vQo),e(A5,NX),e(NX,FQo),e(A5,TQo),e(H,MQo),e(H,L5),e(L5,Cue),e(Cue,EQo),e(L5,CQo),e(L5,qX),e(qX,wQo),e(L5,AQo),e(H,LQo),e(H,y5),e(y5,wue),e(wue,yQo),e(y5,xQo),e(y5,jX),e(jX,$Qo),e(y5,kQo),e(H,SQo),e(H,x5),e(x5,Aue),e(Aue,RQo),e(x5,PQo),e(x5,DX),e(DX,BQo),e(x5,IQo),e(H,NQo),e(H,$5),e($5,Lue),e(Lue,qQo),e($5,jQo),e($5,GX),e(GX,DQo),e($5,GQo),e(H,OQo),e(H,k5),e(k5,yue),e(yue,VQo),e(k5,XQo),e(k5,OX),e(OX,zQo),e(k5,WQo),e(H,QQo),e(H,S5),e(S5,xue),e(xue,HQo),e(S5,UQo),e(S5,VX),e(VX,JQo),e(S5,YQo),e(H,KQo),e(H,R5),e(R5,$ue),e($ue,ZQo),e(R5,eHo),e(R5,XX),e(XX,oHo),e(R5,rHo),e(H,tHo),e(H,P5),e(P5,kue),e(kue,aHo),e(P5,nHo),e(P5,zX),e(zX,sHo),e(P5,lHo),e(H,iHo),e(H,B5),e(B5,Sue),e(Sue,dHo),e(B5,cHo),e(B5,WX),e(WX,fHo),e(B5,mHo),e(H,gHo),e(H,I5),e(I5,Rue),e(Rue,hHo),e(I5,pHo),e(I5,QX),e(QX,uHo),e(I5,_Ho),e(H,bHo),e(H,N5),e(N5,Pue),e(Pue,vHo),e(N5,FHo),e(N5,HX),e(HX,THo),e(N5,MHo),e(ao,EHo),e(ao,q5),e(q5,CHo),e(q5,Bue),e(Bue,wHo),e(q5,AHo),e(q5,Iue),e(Iue,LHo),e(ao,yHo),M(j5,ao,null),b(f,NGe,_),b(f,ld,_),e(ld,D5),e(D5,Nue),M(q7,Nue,null),e(ld,xHo),e(ld,que),e(que,$Ho),b(f,qGe,_),b(f,qo,_),M(j7,qo,null),e(qo,kHo),e(qo,id),e(id,SHo),e(id,UX),e(UX,RHo),e(id,PHo),e(id,JX),e(JX,BHo),e(id,IHo),e(qo,NHo),e(qo,D7),e(D7,qHo),e(D7,jue),e(jue,jHo),e(D7,DHo),e(qo,GHo),e(qo,ht),M(G7,ht,null),e(ht,OHo),e(ht,Due),e(Due,VHo),e(ht,XHo),e(ht,dd),e(dd,zHo),e(dd,Gue),e(Gue,WHo),e(dd,QHo),e(dd,YX),e(YX,HHo),e(dd,UHo),e(ht,JHo),M(G5,ht,null),e(qo,YHo),e(qo,no),M(O7,no,null),e(no,KHo),e(no,Oue),e(Oue,ZHo),e(no,eUo),e(no,Ga),e(Ga,oUo),e(Ga,Vue),e(Vue,rUo),e(Ga,tUo),e(Ga,Xue),e(Xue,aUo),e(Ga,nUo),e(Ga,zue),e(zue,sUo),e(Ga,lUo),e(no,iUo),e(no,V),e(V,O5),e(O5,Wue),e(Wue,dUo),e(O5,cUo),e(O5,KX),e(KX,fUo),e(O5,mUo),e(V,gUo),e(V,V5),e(V5,Que),e(Que,hUo),e(V5,pUo),e(V5,ZX),e(ZX,uUo),e(V5,_Uo),e(V,bUo),e(V,X5),e(X5,Hue),e(Hue,vUo),e(X5,FUo),e(X5,ez),e(ez,TUo),e(X5,MUo),e(V,EUo),e(V,z5),e(z5,Uue),e(Uue,CUo),e(z5,wUo),e(z5,oz),e(oz,AUo),e(z5,LUo),e(V,yUo),e(V,W5),e(W5,Jue),e(Jue,xUo),e(W5,$Uo),e(W5,rz),e(rz,kUo),e(W5,SUo),e(V,RUo),e(V,Q5),e(Q5,Yue),e(Yue,PUo),e(Q5,BUo),e(Q5,tz),e(tz,IUo),e(Q5,NUo),e(V,qUo),e(V,H5),e(H5,Kue),e(Kue,jUo),e(H5,DUo),e(H5,az),e(az,GUo),e(H5,OUo),e(V,VUo),e(V,U5),e(U5,Zue),e(Zue,XUo),e(U5,zUo),e(U5,nz),e(nz,WUo),e(U5,QUo),e(V,HUo),e(V,J5),e(J5,e_e),e(e_e,UUo),e(J5,JUo),e(J5,sz),e(sz,YUo),e(J5,KUo),e(V,ZUo),e(V,Y5),e(Y5,o_e),e(o_e,eJo),e(Y5,oJo),e(Y5,lz),e(lz,rJo),e(Y5,tJo),e(V,aJo),e(V,K5),e(K5,r_e),e(r_e,nJo),e(K5,sJo),e(K5,iz),e(iz,lJo),e(K5,iJo),e(V,dJo),e(V,Z5),e(Z5,t_e),e(t_e,cJo),e(Z5,fJo),e(Z5,dz),e(dz,mJo),e(Z5,gJo),e(V,hJo),e(V,ev),e(ev,a_e),e(a_e,pJo),e(ev,uJo),e(ev,cz),e(cz,_Jo),e(ev,bJo),e(V,vJo),e(V,ov),e(ov,n_e),e(n_e,FJo),e(ov,TJo),e(ov,fz),e(fz,MJo),e(ov,EJo),e(V,CJo),e(V,rv),e(rv,s_e),e(s_e,wJo),e(rv,AJo),e(rv,mz),e(mz,LJo),e(rv,yJo),e(V,xJo),e(V,tv),e(tv,l_e),e(l_e,$Jo),e(tv,kJo),e(tv,gz),e(gz,SJo),e(tv,RJo),e(V,PJo),e(V,av),e(av,i_e),e(i_e,BJo),e(av,IJo),e(av,hz),e(hz,NJo),e(av,qJo),e(V,jJo),e(V,nv),e(nv,d_e),e(d_e,DJo),e(nv,GJo),e(nv,pz),e(pz,OJo),e(nv,VJo),e(V,XJo),e(V,sv),e(sv,c_e),e(c_e,zJo),e(sv,WJo),e(sv,uz),e(uz,QJo),e(sv,HJo),e(V,UJo),e(V,lv),e(lv,f_e),e(f_e,JJo),e(lv,YJo),e(lv,_z),e(_z,KJo),e(lv,ZJo),e(V,eYo),e(V,iv),e(iv,m_e),e(m_e,oYo),e(iv,rYo),e(iv,bz),e(bz,tYo),e(iv,aYo),e(V,nYo),e(V,dv),e(dv,g_e),e(g_e,sYo),e(dv,lYo),e(dv,vz),e(vz,iYo),e(dv,dYo),e(V,cYo),e(V,cv),e(cv,h_e),e(h_e,fYo),e(cv,mYo),e(cv,Fz),e(Fz,gYo),e(cv,hYo),e(V,pYo),e(V,fv),e(fv,p_e),e(p_e,uYo),e(fv,_Yo),e(fv,Tz),e(Tz,bYo),e(fv,vYo),e(V,FYo),e(V,mv),e(mv,u_e),e(u_e,TYo),e(mv,MYo),e(mv,Mz),e(Mz,EYo),e(mv,CYo),e(V,wYo),e(V,gv),e(gv,__e),e(__e,AYo),e(gv,LYo),e(gv,Ez),e(Ez,yYo),e(gv,xYo),e(V,$Yo),e(V,hv),e(hv,b_e),e(b_e,kYo),e(hv,SYo),e(hv,Cz),e(Cz,RYo),e(hv,PYo),e(V,BYo),e(V,pv),e(pv,v_e),e(v_e,IYo),e(pv,NYo),e(pv,wz),e(wz,qYo),e(pv,jYo),e(V,DYo),e(V,uv),e(uv,F_e),e(F_e,GYo),e(uv,OYo),e(uv,Az),e(Az,VYo),e(uv,XYo),e(V,zYo),e(V,_v),e(_v,T_e),e(T_e,WYo),e(_v,QYo),e(_v,Lz),e(Lz,HYo),e(_v,UYo),e(V,JYo),e(V,bv),e(bv,M_e),e(M_e,YYo),e(bv,KYo),e(bv,yz),e(yz,ZYo),e(bv,eKo),e(V,oKo),e(V,vv),e(vv,E_e),e(E_e,rKo),e(vv,tKo),e(vv,xz),e(xz,aKo),e(vv,nKo),e(V,sKo),e(V,Fv),e(Fv,C_e),e(C_e,lKo),e(Fv,iKo),e(Fv,$z),e($z,dKo),e(Fv,cKo),e(V,fKo),e(V,Tv),e(Tv,w_e),e(w_e,mKo),e(Tv,gKo),e(Tv,kz),e(kz,hKo),e(Tv,pKo),e(V,uKo),e(V,Mv),e(Mv,A_e),e(A_e,_Ko),e(Mv,bKo),e(Mv,Sz),e(Sz,vKo),e(Mv,FKo),e(V,TKo),e(V,Ev),e(Ev,L_e),e(L_e,MKo),e(Ev,EKo),e(Ev,Rz),e(Rz,CKo),e(Ev,wKo),e(V,AKo),e(V,Cv),e(Cv,y_e),e(y_e,LKo),e(Cv,yKo),e(Cv,Pz),e(Pz,xKo),e(Cv,$Ko),e(V,kKo),e(V,wv),e(wv,x_e),e(x_e,SKo),e(wv,RKo),e(wv,Bz),e(Bz,PKo),e(wv,BKo),e(V,IKo),e(V,Av),e(Av,$_e),e($_e,NKo),e(Av,qKo),e(Av,Iz),e(Iz,jKo),e(Av,DKo),e(V,GKo),e(V,Lv),e(Lv,k_e),e(k_e,OKo),e(Lv,VKo),e(Lv,Nz),e(Nz,XKo),e(Lv,zKo),e(no,WKo),e(no,yv),e(yv,QKo),e(yv,S_e),e(S_e,HKo),e(yv,UKo),e(yv,R_e),e(R_e,JKo),e(no,YKo),M(xv,no,null),b(f,jGe,_),b(f,cd,_),e(cd,$v),e($v,P_e),M(V7,P_e,null),e(cd,KKo),e(cd,B_e),e(B_e,ZKo),b(f,DGe,_),b(f,jo,_),M(X7,jo,null),e(jo,eZo),e(jo,fd),e(fd,oZo),e(fd,qz),e(qz,rZo),e(fd,tZo),e(fd,jz),e(jz,aZo),e(fd,nZo),e(jo,sZo),e(jo,z7),e(z7,lZo),e(z7,I_e),e(I_e,iZo),e(z7,dZo),e(jo,cZo),e(jo,pt),M(W7,pt,null),e(pt,fZo),e(pt,N_e),e(N_e,mZo),e(pt,gZo),e(pt,md),e(md,hZo),e(md,q_e),e(q_e,pZo),e(md,uZo),e(md,Dz),e(Dz,_Zo),e(md,bZo),e(pt,vZo),M(kv,pt,null),e(jo,FZo),e(jo,so),M(Q7,so,null),e(so,TZo),e(so,j_e),e(j_e,MZo),e(so,EZo),e(so,Oa),e(Oa,CZo),e(Oa,D_e),e(D_e,wZo),e(Oa,AZo),e(Oa,G_e),e(G_e,LZo),e(Oa,yZo),e(Oa,O_e),e(O_e,xZo),e(Oa,$Zo),e(so,kZo),e(so,V_e),e(V_e,Sv),e(Sv,X_e),e(X_e,SZo),e(Sv,RZo),e(Sv,Gz),e(Gz,PZo),e(Sv,BZo),e(so,IZo),e(so,Rv),e(Rv,NZo),e(Rv,z_e),e(z_e,qZo),e(Rv,jZo),e(Rv,W_e),e(W_e,DZo),e(so,GZo),M(Pv,so,null),b(f,GGe,_),b(f,gd,_),e(gd,Bv),e(Bv,Q_e),M(H7,Q_e,null),e(gd,OZo),e(gd,H_e),e(H_e,VZo),b(f,OGe,_),b(f,Do,_),M(U7,Do,null),e(Do,XZo),e(Do,hd),e(hd,zZo),e(hd,Oz),e(Oz,WZo),e(hd,QZo),e(hd,Vz),e(Vz,HZo),e(hd,UZo),e(Do,JZo),e(Do,J7),e(J7,YZo),e(J7,U_e),e(U_e,KZo),e(J7,ZZo),e(Do,eer),e(Do,ut),M(Y7,ut,null),e(ut,oer),e(ut,J_e),e(J_e,rer),e(ut,ter),e(ut,pd),e(pd,aer),e(pd,Y_e),e(Y_e,ner),e(pd,ser),e(pd,Xz),e(Xz,ler),e(pd,ier),e(ut,der),M(Iv,ut,null),e(Do,cer),e(Do,lo),M(K7,lo,null),e(lo,fer),e(lo,K_e),e(K_e,mer),e(lo,ger),e(lo,Va),e(Va,her),e(Va,Z_e),e(Z_e,per),e(Va,uer),e(Va,e1e),e(e1e,_er),e(Va,ber),e(Va,o1e),e(o1e,ver),e(Va,Fer),e(lo,Ter),e(lo,Fe),e(Fe,Nv),e(Nv,r1e),e(r1e,Mer),e(Nv,Eer),e(Nv,zz),e(zz,Cer),e(Nv,wer),e(Fe,Aer),e(Fe,qv),e(qv,t1e),e(t1e,Ler),e(qv,yer),e(qv,Wz),e(Wz,xer),e(qv,$er),e(Fe,ker),e(Fe,jv),e(jv,a1e),e(a1e,Ser),e(jv,Rer),e(jv,Qz),e(Qz,Per),e(jv,Ber),e(Fe,Ier),e(Fe,Dv),e(Dv,n1e),e(n1e,Ner),e(Dv,qer),e(Dv,Hz),e(Hz,jer),e(Dv,Der),e(Fe,Ger),e(Fe,Os),e(Os,s1e),e(s1e,Oer),e(Os,Ver),e(Os,Uz),e(Uz,Xer),e(Os,zer),e(Os,Jz),e(Jz,Wer),e(Os,Qer),e(Fe,Her),e(Fe,Gv),e(Gv,l1e),e(l1e,Uer),e(Gv,Jer),e(Gv,Yz),e(Yz,Yer),e(Gv,Ker),e(Fe,Zer),e(Fe,Vs),e(Vs,i1e),e(i1e,eor),e(Vs,oor),e(Vs,Kz),e(Kz,ror),e(Vs,tor),e(Vs,Zz),e(Zz,aor),e(Vs,nor),e(Fe,sor),e(Fe,_t),e(_t,d1e),e(d1e,lor),e(_t,ior),e(_t,eW),e(eW,dor),e(_t,cor),e(_t,oW),e(oW,mor),e(_t,gor),e(_t,rW),e(rW,hor),e(_t,por),e(Fe,uor),e(Fe,Ov),e(Ov,c1e),e(c1e,_or),e(Ov,bor),e(Ov,tW),e(tW,vor),e(Ov,For),e(Fe,Tor),e(Fe,Vv),e(Vv,f1e),e(f1e,Mor),e(Vv,Eor),e(Vv,aW),e(aW,Cor),e(Vv,wor),e(Fe,Aor),e(Fe,Xv),e(Xv,m1e),e(m1e,Lor),e(Xv,yor),e(Xv,nW),e(nW,xor),e(Xv,$or),e(Fe,kor),e(Fe,zv),e(zv,g1e),e(g1e,Sor),e(zv,Ror),e(zv,sW),e(sW,Por),e(zv,Bor),e(Fe,Ior),e(Fe,Wv),e(Wv,h1e),e(h1e,Nor),e(Wv,qor),e(Wv,lW),e(lW,jor),e(Wv,Dor),e(Fe,Gor),e(Fe,Qv),e(Qv,p1e),e(p1e,Oor),e(Qv,Vor),e(Qv,iW),e(iW,Xor),e(Qv,zor),e(Fe,Wor),e(Fe,Hv),e(Hv,u1e),e(u1e,Qor),e(Hv,Hor),e(Hv,dW),e(dW,Uor),e(Hv,Jor),e(lo,Yor),e(lo,Uv),e(Uv,Kor),e(Uv,_1e),e(_1e,Zor),e(Uv,err),e(Uv,b1e),e(b1e,orr),e(lo,rrr),M(Jv,lo,null),b(f,VGe,_),b(f,ud,_),e(ud,Yv),e(Yv,v1e),M(Z7,v1e,null),e(ud,trr),e(ud,F1e),e(F1e,arr),b(f,XGe,_),b(f,Go,_),M(e8,Go,null),e(Go,nrr),e(Go,_d),e(_d,srr),e(_d,cW),e(cW,lrr),e(_d,irr),e(_d,fW),e(fW,drr),e(_d,crr),e(Go,frr),e(Go,o8),e(o8,mrr),e(o8,T1e),e(T1e,grr),e(o8,hrr),e(Go,prr),e(Go,bt),M(r8,bt,null),e(bt,urr),e(bt,M1e),e(M1e,_rr),e(bt,brr),e(bt,bd),e(bd,vrr),e(bd,E1e),e(E1e,Frr),e(bd,Trr),e(bd,mW),e(mW,Mrr),e(bd,Err),e(bt,Crr),M(Kv,bt,null),e(Go,wrr),e(Go,io),M(t8,io,null),e(io,Arr),e(io,C1e),e(C1e,Lrr),e(io,yrr),e(io,Xa),e(Xa,xrr),e(Xa,w1e),e(w1e,$rr),e(Xa,krr),e(Xa,A1e),e(A1e,Srr),e(Xa,Rrr),e(Xa,L1e),e(L1e,Prr),e(Xa,Brr),e(io,Irr),e(io,y1e),e(y1e,Zv),e(Zv,x1e),e(x1e,Nrr),e(Zv,qrr),e(Zv,gW),e(gW,jrr),e(Zv,Drr),e(io,Grr),e(io,e3),e(e3,Orr),e(e3,$1e),e($1e,Vrr),e(e3,Xrr),e(e3,k1e),e(k1e,zrr),e(io,Wrr),M(o3,io,null),b(f,zGe,_),b(f,vd,_),e(vd,r3),e(r3,S1e),M(a8,S1e,null),e(vd,Qrr),e(vd,R1e),e(R1e,Hrr),b(f,WGe,_),b(f,Oo,_),M(n8,Oo,null),e(Oo,Urr),e(Oo,Fd),e(Fd,Jrr),e(Fd,hW),e(hW,Yrr),e(Fd,Krr),e(Fd,pW),e(pW,Zrr),e(Fd,etr),e(Oo,otr),e(Oo,s8),e(s8,rtr),e(s8,P1e),e(P1e,ttr),e(s8,atr),e(Oo,ntr),e(Oo,vt),M(l8,vt,null),e(vt,str),e(vt,B1e),e(B1e,ltr),e(vt,itr),e(vt,Td),e(Td,dtr),e(Td,I1e),e(I1e,ctr),e(Td,ftr),e(Td,uW),e(uW,mtr),e(Td,gtr),e(vt,htr),M(t3,vt,null),e(Oo,ptr),e(Oo,co),M(i8,co,null),e(co,utr),e(co,N1e),e(N1e,_tr),e(co,btr),e(co,za),e(za,vtr),e(za,q1e),e(q1e,Ftr),e(za,Ttr),e(za,j1e),e(j1e,Mtr),e(za,Etr),e(za,D1e),e(D1e,Ctr),e(za,wtr),e(co,Atr),e(co,G1e),e(G1e,a3),e(a3,O1e),e(O1e,Ltr),e(a3,ytr),e(a3,_W),e(_W,xtr),e(a3,$tr),e(co,ktr),e(co,n3),e(n3,Str),e(n3,V1e),e(V1e,Rtr),e(n3,Ptr),e(n3,X1e),e(X1e,Btr),e(co,Itr),M(s3,co,null),b(f,QGe,_),b(f,Md,_),e(Md,l3),e(l3,z1e),M(d8,z1e,null),e(Md,Ntr),e(Md,W1e),e(W1e,qtr),b(f,HGe,_),b(f,Vo,_),M(c8,Vo,null),e(Vo,jtr),e(Vo,Ed),e(Ed,Dtr),e(Ed,bW),e(bW,Gtr),e(Ed,Otr),e(Ed,vW),e(vW,Vtr),e(Ed,Xtr),e(Vo,ztr),e(Vo,f8),e(f8,Wtr),e(f8,Q1e),e(Q1e,Qtr),e(f8,Htr),e(Vo,Utr),e(Vo,Ft),M(m8,Ft,null),e(Ft,Jtr),e(Ft,H1e),e(H1e,Ytr),e(Ft,Ktr),e(Ft,Cd),e(Cd,Ztr),e(Cd,U1e),e(U1e,ear),e(Cd,oar),e(Cd,FW),e(FW,rar),e(Cd,tar),e(Ft,aar),M(i3,Ft,null),e(Vo,nar),e(Vo,fo),M(g8,fo,null),e(fo,sar),e(fo,J1e),e(J1e,lar),e(fo,iar),e(fo,Wa),e(Wa,dar),e(Wa,Y1e),e(Y1e,car),e(Wa,far),e(Wa,K1e),e(K1e,mar),e(Wa,gar),e(Wa,Z1e),e(Z1e,har),e(Wa,par),e(fo,uar),e(fo,Pe),e(Pe,d3),e(d3,e2e),e(e2e,_ar),e(d3,bar),e(d3,TW),e(TW,Far),e(d3,Tar),e(Pe,Mar),e(Pe,c3),e(c3,o2e),e(o2e,Ear),e(c3,Car),e(c3,MW),e(MW,war),e(c3,Aar),e(Pe,Lar),e(Pe,f3),e(f3,r2e),e(r2e,yar),e(f3,xar),e(f3,EW),e(EW,$ar),e(f3,kar),e(Pe,Sar),e(Pe,m3),e(m3,t2e),e(t2e,Rar),e(m3,Par),e(m3,CW),e(CW,Bar),e(m3,Iar),e(Pe,Nar),e(Pe,g3),e(g3,a2e),e(a2e,qar),e(g3,jar),e(g3,wW),e(wW,Dar),e(g3,Gar),e(Pe,Oar),e(Pe,h3),e(h3,n2e),e(n2e,Var),e(h3,Xar),e(h3,AW),e(AW,zar),e(h3,War),e(Pe,Qar),e(Pe,p3),e(p3,s2e),e(s2e,Har),e(p3,Uar),e(p3,LW),e(LW,Jar),e(p3,Yar),e(Pe,Kar),e(Pe,u3),e(u3,l2e),e(l2e,Zar),e(u3,enr),e(u3,yW),e(yW,onr),e(u3,rnr),e(Pe,tnr),e(Pe,_3),e(_3,i2e),e(i2e,anr),e(_3,nnr),e(_3,xW),e(xW,snr),e(_3,lnr),e(fo,inr),e(fo,b3),e(b3,dnr),e(b3,d2e),e(d2e,cnr),e(b3,fnr),e(b3,c2e),e(c2e,mnr),e(fo,gnr),M(v3,fo,null),b(f,UGe,_),b(f,wd,_),e(wd,F3),e(F3,f2e),M(h8,f2e,null),e(wd,hnr),e(wd,m2e),e(m2e,pnr),b(f,JGe,_),b(f,Xo,_),M(p8,Xo,null),e(Xo,unr),e(Xo,Ad),e(Ad,_nr),e(Ad,$W),e($W,bnr),e(Ad,vnr),e(Ad,kW),e(kW,Fnr),e(Ad,Tnr),e(Xo,Mnr),e(Xo,u8),e(u8,Enr),e(u8,g2e),e(g2e,Cnr),e(u8,wnr),e(Xo,Anr),e(Xo,Tt),M(_8,Tt,null),e(Tt,Lnr),e(Tt,h2e),e(h2e,ynr),e(Tt,xnr),e(Tt,Ld),e(Ld,$nr),e(Ld,p2e),e(p2e,knr),e(Ld,Snr),e(Ld,SW),e(SW,Rnr),e(Ld,Pnr),e(Tt,Bnr),M(T3,Tt,null),e(Xo,Inr),e(Xo,mo),M(b8,mo,null),e(mo,Nnr),e(mo,u2e),e(u2e,qnr),e(mo,jnr),e(mo,Qa),e(Qa,Dnr),e(Qa,_2e),e(_2e,Gnr),e(Qa,Onr),e(Qa,b2e),e(b2e,Vnr),e(Qa,Xnr),e(Qa,v2e),e(v2e,znr),e(Qa,Wnr),e(mo,Qnr),e(mo,et),e(et,M3),e(M3,F2e),e(F2e,Hnr),e(M3,Unr),e(M3,RW),e(RW,Jnr),e(M3,Ynr),e(et,Knr),e(et,E3),e(E3,T2e),e(T2e,Znr),e(E3,esr),e(E3,PW),e(PW,osr),e(E3,rsr),e(et,tsr),e(et,C3),e(C3,M2e),e(M2e,asr),e(C3,nsr),e(C3,BW),e(BW,ssr),e(C3,lsr),e(et,isr),e(et,w3),e(w3,E2e),e(E2e,dsr),e(w3,csr),e(w3,IW),e(IW,fsr),e(w3,msr),e(et,gsr),e(et,A3),e(A3,C2e),e(C2e,hsr),e(A3,psr),e(A3,NW),e(NW,usr),e(A3,_sr),e(mo,bsr),e(mo,L3),e(L3,vsr),e(L3,w2e),e(w2e,Fsr),e(L3,Tsr),e(L3,A2e),e(A2e,Msr),e(mo,Esr),M(y3,mo,null),b(f,YGe,_),b(f,yd,_),e(yd,x3),e(x3,L2e),M(v8,L2e,null),e(yd,Csr),e(yd,y2e),e(y2e,wsr),b(f,KGe,_),b(f,zo,_),M(F8,zo,null),e(zo,Asr),e(zo,xd),e(xd,Lsr),e(xd,qW),e(qW,ysr),e(xd,xsr),e(xd,jW),e(jW,$sr),e(xd,ksr),e(zo,Ssr),e(zo,T8),e(T8,Rsr),e(T8,x2e),e(x2e,Psr),e(T8,Bsr),e(zo,Isr),e(zo,Mt),M(M8,Mt,null),e(Mt,Nsr),e(Mt,$2e),e($2e,qsr),e(Mt,jsr),e(Mt,$d),e($d,Dsr),e($d,k2e),e(k2e,Gsr),e($d,Osr),e($d,DW),e(DW,Vsr),e($d,Xsr),e(Mt,zsr),M($3,Mt,null),e(zo,Wsr),e(zo,go),M(E8,go,null),e(go,Qsr),e(go,S2e),e(S2e,Hsr),e(go,Usr),e(go,Ha),e(Ha,Jsr),e(Ha,R2e),e(R2e,Ysr),e(Ha,Ksr),e(Ha,P2e),e(P2e,Zsr),e(Ha,elr),e(Ha,B2e),e(B2e,olr),e(Ha,rlr),e(go,tlr),e(go,Le),e(Le,k3),e(k3,I2e),e(I2e,alr),e(k3,nlr),e(k3,GW),e(GW,slr),e(k3,llr),e(Le,ilr),e(Le,S3),e(S3,N2e),e(N2e,dlr),e(S3,clr),e(S3,OW),e(OW,flr),e(S3,mlr),e(Le,glr),e(Le,R3),e(R3,q2e),e(q2e,hlr),e(R3,plr),e(R3,VW),e(VW,ulr),e(R3,_lr),e(Le,blr),e(Le,P3),e(P3,j2e),e(j2e,vlr),e(P3,Flr),e(P3,XW),e(XW,Tlr),e(P3,Mlr),e(Le,Elr),e(Le,B3),e(B3,D2e),e(D2e,Clr),e(B3,wlr),e(B3,zW),e(zW,Alr),e(B3,Llr),e(Le,ylr),e(Le,I3),e(I3,G2e),e(G2e,xlr),e(I3,$lr),e(I3,WW),e(WW,klr),e(I3,Slr),e(Le,Rlr),e(Le,N3),e(N3,O2e),e(O2e,Plr),e(N3,Blr),e(N3,QW),e(QW,Ilr),e(N3,Nlr),e(Le,qlr),e(Le,q3),e(q3,V2e),e(V2e,jlr),e(q3,Dlr),e(q3,HW),e(HW,Glr),e(q3,Olr),e(Le,Vlr),e(Le,j3),e(j3,X2e),e(X2e,Xlr),e(j3,zlr),e(j3,UW),e(UW,Wlr),e(j3,Qlr),e(Le,Hlr),e(Le,D3),e(D3,z2e),e(z2e,Ulr),e(D3,Jlr),e(D3,JW),e(JW,Ylr),e(D3,Klr),e(go,Zlr),e(go,G3),e(G3,eir),e(G3,W2e),e(W2e,oir),e(G3,rir),e(G3,Q2e),e(Q2e,tir),e(go,air),M(O3,go,null),b(f,ZGe,_),b(f,kd,_),e(kd,V3),e(V3,H2e),M(C8,H2e,null),e(kd,nir),e(kd,U2e),e(U2e,sir),b(f,eOe,_),b(f,Wo,_),M(w8,Wo,null),e(Wo,lir),e(Wo,Sd),e(Sd,iir),e(Sd,YW),e(YW,dir),e(Sd,cir),e(Sd,KW),e(KW,fir),e(Sd,mir),e(Wo,gir),e(Wo,A8),e(A8,hir),e(A8,J2e),e(J2e,pir),e(A8,uir),e(Wo,_ir),e(Wo,Et),M(L8,Et,null),e(Et,bir),e(Et,Y2e),e(Y2e,vir),e(Et,Fir),e(Et,Rd),e(Rd,Tir),e(Rd,K2e),e(K2e,Mir),e(Rd,Eir),e(Rd,ZW),e(ZW,Cir),e(Rd,wir),e(Et,Air),M(X3,Et,null),e(Wo,Lir),e(Wo,ho),M(y8,ho,null),e(ho,yir),e(ho,Z2e),e(Z2e,xir),e(ho,$ir),e(ho,Ua),e(Ua,kir),e(Ua,ebe),e(ebe,Sir),e(Ua,Rir),e(Ua,obe),e(obe,Pir),e(Ua,Bir),e(Ua,rbe),e(rbe,Iir),e(Ua,Nir),e(ho,qir),e(ho,x8),e(x8,z3),e(z3,tbe),e(tbe,jir),e(z3,Dir),e(z3,eQ),e(eQ,Gir),e(z3,Oir),e(x8,Vir),e(x8,W3),e(W3,abe),e(abe,Xir),e(W3,zir),e(W3,oQ),e(oQ,Wir),e(W3,Qir),e(ho,Hir),e(ho,Q3),e(Q3,Uir),e(Q3,nbe),e(nbe,Jir),e(Q3,Yir),e(Q3,sbe),e(sbe,Kir),e(ho,Zir),M(H3,ho,null),b(f,oOe,_),b(f,Pd,_),e(Pd,U3),e(U3,lbe),M($8,lbe,null),e(Pd,edr),e(Pd,ibe),e(ibe,odr),b(f,rOe,_),b(f,Qo,_),M(k8,Qo,null),e(Qo,rdr),e(Qo,Bd),e(Bd,tdr),e(Bd,rQ),e(rQ,adr),e(Bd,ndr),e(Bd,tQ),e(tQ,sdr),e(Bd,ldr),e(Qo,idr),e(Qo,S8),e(S8,ddr),e(S8,dbe),e(dbe,cdr),e(S8,fdr),e(Qo,mdr),e(Qo,Ct),M(R8,Ct,null),e(Ct,gdr),e(Ct,cbe),e(cbe,hdr),e(Ct,pdr),e(Ct,Id),e(Id,udr),e(Id,fbe),e(fbe,_dr),e(Id,bdr),e(Id,aQ),e(aQ,vdr),e(Id,Fdr),e(Ct,Tdr),M(J3,Ct,null),e(Qo,Mdr),e(Qo,po),M(P8,po,null),e(po,Edr),e(po,mbe),e(mbe,Cdr),e(po,wdr),e(po,Ja),e(Ja,Adr),e(Ja,gbe),e(gbe,Ldr),e(Ja,ydr),e(Ja,hbe),e(hbe,xdr),e(Ja,$dr),e(Ja,pbe),e(pbe,kdr),e(Ja,Sdr),e(po,Rdr),e(po,ot),e(ot,Y3),e(Y3,ube),e(ube,Pdr),e(Y3,Bdr),e(Y3,nQ),e(nQ,Idr),e(Y3,Ndr),e(ot,qdr),e(ot,K3),e(K3,_be),e(_be,jdr),e(K3,Ddr),e(K3,sQ),e(sQ,Gdr),e(K3,Odr),e(ot,Vdr),e(ot,Z3),e(Z3,bbe),e(bbe,Xdr),e(Z3,zdr),e(Z3,lQ),e(lQ,Wdr),e(Z3,Qdr),e(ot,Hdr),e(ot,eF),e(eF,vbe),e(vbe,Udr),e(eF,Jdr),e(eF,iQ),e(iQ,Ydr),e(eF,Kdr),e(ot,Zdr),e(ot,oF),e(oF,Fbe),e(Fbe,ecr),e(oF,ocr),e(oF,dQ),e(dQ,rcr),e(oF,tcr),e(po,acr),e(po,rF),e(rF,ncr),e(rF,Tbe),e(Tbe,scr),e(rF,lcr),e(rF,Mbe),e(Mbe,icr),e(po,dcr),M(tF,po,null),b(f,tOe,_),b(f,Nd,_),e(Nd,aF),e(aF,Ebe),M(B8,Ebe,null),e(Nd,ccr),e(Nd,Cbe),e(Cbe,fcr),b(f,aOe,_),b(f,Ho,_),M(I8,Ho,null),e(Ho,mcr),e(Ho,qd),e(qd,gcr),e(qd,cQ),e(cQ,hcr),e(qd,pcr),e(qd,fQ),e(fQ,ucr),e(qd,_cr),e(Ho,bcr),e(Ho,N8),e(N8,vcr),e(N8,wbe),e(wbe,Fcr),e(N8,Tcr),e(Ho,Mcr),e(Ho,wt),M(q8,wt,null),e(wt,Ecr),e(wt,Abe),e(Abe,Ccr),e(wt,wcr),e(wt,jd),e(jd,Acr),e(jd,Lbe),e(Lbe,Lcr),e(jd,ycr),e(jd,mQ),e(mQ,xcr),e(jd,$cr),e(wt,kcr),M(nF,wt,null),e(Ho,Scr),e(Ho,uo),M(j8,uo,null),e(uo,Rcr),e(uo,ybe),e(ybe,Pcr),e(uo,Bcr),e(uo,Ya),e(Ya,Icr),e(Ya,xbe),e(xbe,Ncr),e(Ya,qcr),e(Ya,$be),e($be,jcr),e(Ya,Dcr),e(Ya,kbe),e(kbe,Gcr),e(Ya,Ocr),e(uo,Vcr),e(uo,Dd),e(Dd,sF),e(sF,Sbe),e(Sbe,Xcr),e(sF,zcr),e(sF,gQ),e(gQ,Wcr),e(sF,Qcr),e(Dd,Hcr),e(Dd,lF),e(lF,Rbe),e(Rbe,Ucr),e(lF,Jcr),e(lF,hQ),e(hQ,Ycr),e(lF,Kcr),e(Dd,Zcr),e(Dd,iF),e(iF,Pbe),e(Pbe,efr),e(iF,ofr),e(iF,pQ),e(pQ,rfr),e(iF,tfr),e(uo,afr),e(uo,dF),e(dF,nfr),e(dF,Bbe),e(Bbe,sfr),e(dF,lfr),e(dF,Ibe),e(Ibe,ifr),e(uo,dfr),M(cF,uo,null),b(f,nOe,_),b(f,Gd,_),e(Gd,fF),e(fF,Nbe),M(D8,Nbe,null),e(Gd,cfr),e(Gd,qbe),e(qbe,ffr),b(f,sOe,_),b(f,Uo,_),M(G8,Uo,null),e(Uo,mfr),e(Uo,Od),e(Od,gfr),e(Od,uQ),e(uQ,hfr),e(Od,pfr),e(Od,_Q),e(_Q,ufr),e(Od,_fr),e(Uo,bfr),e(Uo,O8),e(O8,vfr),e(O8,jbe),e(jbe,Ffr),e(O8,Tfr),e(Uo,Mfr),e(Uo,At),M(V8,At,null),e(At,Efr),e(At,Dbe),e(Dbe,Cfr),e(At,wfr),e(At,Vd),e(Vd,Afr),e(Vd,Gbe),e(Gbe,Lfr),e(Vd,yfr),e(Vd,bQ),e(bQ,xfr),e(Vd,$fr),e(At,kfr),M(mF,At,null),e(Uo,Sfr),e(Uo,_o),M(X8,_o,null),e(_o,Rfr),e(_o,Obe),e(Obe,Pfr),e(_o,Bfr),e(_o,Ka),e(Ka,Ifr),e(Ka,Vbe),e(Vbe,Nfr),e(Ka,qfr),e(Ka,Xbe),e(Xbe,jfr),e(Ka,Dfr),e(Ka,zbe),e(zbe,Gfr),e(Ka,Ofr),e(_o,Vfr),e(_o,z8),e(z8,gF),e(gF,Wbe),e(Wbe,Xfr),e(gF,zfr),e(gF,vQ),e(vQ,Wfr),e(gF,Qfr),e(z8,Hfr),e(z8,hF),e(hF,Qbe),e(Qbe,Ufr),e(hF,Jfr),e(hF,FQ),e(FQ,Yfr),e(hF,Kfr),e(_o,Zfr),e(_o,pF),e(pF,emr),e(pF,Hbe),e(Hbe,omr),e(pF,rmr),e(pF,Ube),e(Ube,tmr),e(_o,amr),M(uF,_o,null),b(f,lOe,_),b(f,Xd,_),e(Xd,_F),e(_F,Jbe),M(W8,Jbe,null),e(Xd,nmr),e(Xd,Ybe),e(Ybe,smr),b(f,iOe,_),b(f,Jo,_),M(Q8,Jo,null),e(Jo,lmr),e(Jo,zd),e(zd,imr),e(zd,TQ),e(TQ,dmr),e(zd,cmr),e(zd,MQ),e(MQ,fmr),e(zd,mmr),e(Jo,gmr),e(Jo,H8),e(H8,hmr),e(H8,Kbe),e(Kbe,pmr),e(H8,umr),e(Jo,_mr),e(Jo,Lt),M(U8,Lt,null),e(Lt,bmr),e(Lt,Zbe),e(Zbe,vmr),e(Lt,Fmr),e(Lt,Wd),e(Wd,Tmr),e(Wd,e4e),e(e4e,Mmr),e(Wd,Emr),e(Wd,EQ),e(EQ,Cmr),e(Wd,wmr),e(Lt,Amr),M(bF,Lt,null),e(Jo,Lmr),e(Jo,bo),M(J8,bo,null),e(bo,ymr),e(bo,o4e),e(o4e,xmr),e(bo,$mr),e(bo,Za),e(Za,kmr),e(Za,r4e),e(r4e,Smr),e(Za,Rmr),e(Za,t4e),e(t4e,Pmr),e(Za,Bmr),e(Za,a4e),e(a4e,Imr),e(Za,Nmr),e(bo,qmr),e(bo,n4e),e(n4e,vF),e(vF,s4e),e(s4e,jmr),e(vF,Dmr),e(vF,CQ),e(CQ,Gmr),e(vF,Omr),e(bo,Vmr),e(bo,FF),e(FF,Xmr),e(FF,l4e),e(l4e,zmr),e(FF,Wmr),e(FF,i4e),e(i4e,Qmr),e(bo,Hmr),M(TF,bo,null),b(f,dOe,_),b(f,Qd,_),e(Qd,MF),e(MF,d4e),M(Y8,d4e,null),e(Qd,Umr),e(Qd,c4e),e(c4e,Jmr),b(f,cOe,_),b(f,Yo,_),M(K8,Yo,null),e(Yo,Ymr),e(Yo,Hd),e(Hd,Kmr),e(Hd,wQ),e(wQ,Zmr),e(Hd,egr),e(Hd,AQ),e(AQ,ogr),e(Hd,rgr),e(Yo,tgr),e(Yo,Z8),e(Z8,agr),e(Z8,f4e),e(f4e,ngr),e(Z8,sgr),e(Yo,lgr),e(Yo,yt),M(e9,yt,null),e(yt,igr),e(yt,m4e),e(m4e,dgr),e(yt,cgr),e(yt,Ud),e(Ud,fgr),e(Ud,g4e),e(g4e,mgr),e(Ud,ggr),e(Ud,LQ),e(LQ,hgr),e(Ud,pgr),e(yt,ugr),M(EF,yt,null),e(Yo,_gr),e(Yo,vo),M(o9,vo,null),e(vo,bgr),e(vo,h4e),e(h4e,vgr),e(vo,Fgr),e(vo,en),e(en,Tgr),e(en,p4e),e(p4e,Mgr),e(en,Egr),e(en,u4e),e(u4e,Cgr),e(en,wgr),e(en,_4e),e(_4e,Agr),e(en,Lgr),e(vo,ygr),e(vo,on),e(on,CF),e(CF,b4e),e(b4e,xgr),e(CF,$gr),e(CF,yQ),e(yQ,kgr),e(CF,Sgr),e(on,Rgr),e(on,wF),e(wF,v4e),e(v4e,Pgr),e(wF,Bgr),e(wF,xQ),e(xQ,Igr),e(wF,Ngr),e(on,qgr),e(on,AF),e(AF,F4e),e(F4e,jgr),e(AF,Dgr),e(AF,$Q),e($Q,Ggr),e(AF,Ogr),e(on,Vgr),e(on,LF),e(LF,T4e),e(T4e,Xgr),e(LF,zgr),e(LF,kQ),e(kQ,Wgr),e(LF,Qgr),e(vo,Hgr),e(vo,yF),e(yF,Ugr),e(yF,M4e),e(M4e,Jgr),e(yF,Ygr),e(yF,E4e),e(E4e,Kgr),e(vo,Zgr),M(xF,vo,null),b(f,fOe,_),b(f,Jd,_),e(Jd,$F),e($F,C4e),M(r9,C4e,null),e(Jd,ehr),e(Jd,w4e),e(w4e,ohr),b(f,mOe,_),b(f,Ko,_),M(t9,Ko,null),e(Ko,rhr),e(Ko,Yd),e(Yd,thr),e(Yd,SQ),e(SQ,ahr),e(Yd,nhr),e(Yd,RQ),e(RQ,shr),e(Yd,lhr),e(Ko,ihr),e(Ko,a9),e(a9,dhr),e(a9,A4e),e(A4e,chr),e(a9,fhr),e(Ko,mhr),e(Ko,xt),M(n9,xt,null),e(xt,ghr),e(xt,L4e),e(L4e,hhr),e(xt,phr),e(xt,Kd),e(Kd,uhr),e(Kd,y4e),e(y4e,_hr),e(Kd,bhr),e(Kd,PQ),e(PQ,vhr),e(Kd,Fhr),e(xt,Thr),M(kF,xt,null),e(Ko,Mhr),e(Ko,Fo),M(s9,Fo,null),e(Fo,Ehr),e(Fo,x4e),e(x4e,Chr),e(Fo,whr),e(Fo,rn),e(rn,Ahr),e(rn,$4e),e($4e,Lhr),e(rn,yhr),e(rn,k4e),e(k4e,xhr),e(rn,$hr),e(rn,S4e),e(S4e,khr),e(rn,Shr),e(Fo,Rhr),e(Fo,R4e),e(R4e,SF),e(SF,P4e),e(P4e,Phr),e(SF,Bhr),e(SF,BQ),e(BQ,Ihr),e(SF,Nhr),e(Fo,qhr),e(Fo,RF),e(RF,jhr),e(RF,B4e),e(B4e,Dhr),e(RF,Ghr),e(RF,I4e),e(I4e,Ohr),e(Fo,Vhr),M(PF,Fo,null),b(f,gOe,_),b(f,Zd,_),e(Zd,BF),e(BF,N4e),M(l9,N4e,null),e(Zd,Xhr),e(Zd,q4e),e(q4e,zhr),b(f,hOe,_),b(f,Zo,_),M(i9,Zo,null),e(Zo,Whr),e(Zo,ec),e(ec,Qhr),e(ec,IQ),e(IQ,Hhr),e(ec,Uhr),e(ec,NQ),e(NQ,Jhr),e(ec,Yhr),e(Zo,Khr),e(Zo,d9),e(d9,Zhr),e(d9,j4e),e(j4e,epr),e(d9,opr),e(Zo,rpr),e(Zo,$t),M(c9,$t,null),e($t,tpr),e($t,D4e),e(D4e,apr),e($t,npr),e($t,oc),e(oc,spr),e(oc,G4e),e(G4e,lpr),e(oc,ipr),e(oc,qQ),e(qQ,dpr),e(oc,cpr),e($t,fpr),M(IF,$t,null),e(Zo,mpr),e(Zo,Lr),M(f9,Lr,null),e(Lr,gpr),e(Lr,O4e),e(O4e,hpr),e(Lr,ppr),e(Lr,tn),e(tn,upr),e(tn,V4e),e(V4e,_pr),e(tn,bpr),e(tn,X4e),e(X4e,vpr),e(tn,Fpr),e(tn,z4e),e(z4e,Tpr),e(tn,Mpr),e(Lr,Epr),e(Lr,q),e(q,NF),e(NF,W4e),e(W4e,Cpr),e(NF,wpr),e(NF,jQ),e(jQ,Apr),e(NF,Lpr),e(q,ypr),e(q,qF),e(qF,Q4e),e(Q4e,xpr),e(qF,$pr),e(qF,DQ),e(DQ,kpr),e(qF,Spr),e(q,Rpr),e(q,jF),e(jF,H4e),e(H4e,Ppr),e(jF,Bpr),e(jF,GQ),e(GQ,Ipr),e(jF,Npr),e(q,qpr),e(q,DF),e(DF,U4e),e(U4e,jpr),e(DF,Dpr),e(DF,OQ),e(OQ,Gpr),e(DF,Opr),e(q,Vpr),e(q,GF),e(GF,J4e),e(J4e,Xpr),e(GF,zpr),e(GF,VQ),e(VQ,Wpr),e(GF,Qpr),e(q,Hpr),e(q,OF),e(OF,Y4e),e(Y4e,Upr),e(OF,Jpr),e(OF,XQ),e(XQ,Ypr),e(OF,Kpr),e(q,Zpr),e(q,VF),e(VF,K4e),e(K4e,eur),e(VF,our),e(VF,zQ),e(zQ,rur),e(VF,tur),e(q,aur),e(q,XF),e(XF,Z4e),e(Z4e,nur),e(XF,sur),e(XF,WQ),e(WQ,lur),e(XF,iur),e(q,dur),e(q,zF),e(zF,e5e),e(e5e,cur),e(zF,fur),e(zF,QQ),e(QQ,mur),e(zF,gur),e(q,hur),e(q,WF),e(WF,o5e),e(o5e,pur),e(WF,uur),e(WF,HQ),e(HQ,_ur),e(WF,bur),e(q,vur),e(q,QF),e(QF,r5e),e(r5e,Fur),e(QF,Tur),e(QF,UQ),e(UQ,Mur),e(QF,Eur),e(q,Cur),e(q,HF),e(HF,t5e),e(t5e,wur),e(HF,Aur),e(HF,JQ),e(JQ,Lur),e(HF,yur),e(q,xur),e(q,UF),e(UF,a5e),e(a5e,$ur),e(UF,kur),e(UF,YQ),e(YQ,Sur),e(UF,Rur),e(q,Pur),e(q,JF),e(JF,n5e),e(n5e,Bur),e(JF,Iur),e(JF,KQ),e(KQ,Nur),e(JF,qur),e(q,jur),e(q,YF),e(YF,s5e),e(s5e,Dur),e(YF,Gur),e(YF,ZQ),e(ZQ,Our),e(YF,Vur),e(q,Xur),e(q,KF),e(KF,l5e),e(l5e,zur),e(KF,Wur),e(KF,eH),e(eH,Qur),e(KF,Hur),e(q,Uur),e(q,ZF),e(ZF,i5e),e(i5e,Jur),e(ZF,Yur),e(ZF,oH),e(oH,Kur),e(ZF,Zur),e(q,e_r),e(q,Xs),e(Xs,d5e),e(d5e,o_r),e(Xs,r_r),e(Xs,rH),e(rH,t_r),e(Xs,a_r),e(Xs,tH),e(tH,n_r),e(Xs,s_r),e(q,l_r),e(q,e6),e(e6,c5e),e(c5e,i_r),e(e6,d_r),e(e6,aH),e(aH,c_r),e(e6,f_r),e(q,m_r),e(q,o6),e(o6,f5e),e(f5e,g_r),e(o6,h_r),e(o6,nH),e(nH,p_r),e(o6,u_r),e(q,__r),e(q,r6),e(r6,m5e),e(m5e,b_r),e(r6,v_r),e(r6,sH),e(sH,F_r),e(r6,T_r),e(q,M_r),e(q,t6),e(t6,g5e),e(g5e,E_r),e(t6,C_r),e(t6,lH),e(lH,w_r),e(t6,A_r),e(q,L_r),e(q,a6),e(a6,h5e),e(h5e,y_r),e(a6,x_r),e(a6,iH),e(iH,$_r),e(a6,k_r),e(q,S_r),e(q,n6),e(n6,p5e),e(p5e,R_r),e(n6,P_r),e(n6,dH),e(dH,B_r),e(n6,I_r),e(q,N_r),e(q,s6),e(s6,u5e),e(u5e,q_r),e(s6,j_r),e(s6,cH),e(cH,D_r),e(s6,G_r),e(q,O_r),e(q,l6),e(l6,_5e),e(_5e,V_r),e(l6,X_r),e(l6,fH),e(fH,z_r),e(l6,W_r),e(q,Q_r),e(q,i6),e(i6,b5e),e(b5e,H_r),e(i6,U_r),e(i6,mH),e(mH,J_r),e(i6,Y_r),e(q,K_r),e(q,d6),e(d6,v5e),e(v5e,Z_r),e(d6,e1r),e(d6,gH),e(gH,o1r),e(d6,r1r),e(q,t1r),e(q,c6),e(c6,F5e),e(F5e,a1r),e(c6,n1r),e(c6,hH),e(hH,s1r),e(c6,l1r),e(q,i1r),e(q,f6),e(f6,T5e),e(T5e,d1r),e(f6,c1r),e(f6,pH),e(pH,f1r),e(f6,m1r),e(q,g1r),e(q,m6),e(m6,M5e),e(M5e,h1r),e(m6,p1r),e(m6,uH),e(uH,u1r),e(m6,_1r),e(q,b1r),e(q,g6),e(g6,E5e),e(E5e,v1r),e(g6,F1r),e(g6,_H),e(_H,T1r),e(g6,M1r),e(q,E1r),e(q,h6),e(h6,C5e),e(C5e,C1r),e(h6,w1r),e(h6,bH),e(bH,A1r),e(h6,L1r),e(q,y1r),e(q,p6),e(p6,w5e),e(w5e,x1r),e(p6,$1r),e(p6,vH),e(vH,k1r),e(p6,S1r),e(q,R1r),e(q,u6),e(u6,A5e),e(A5e,P1r),e(u6,B1r),e(u6,FH),e(FH,I1r),e(u6,N1r),e(q,q1r),e(q,_6),e(_6,L5e),e(L5e,j1r),e(_6,D1r),e(_6,TH),e(TH,G1r),e(_6,O1r),e(q,V1r),e(q,b6),e(b6,y5e),e(y5e,X1r),e(b6,z1r),e(b6,MH),e(MH,W1r),e(b6,Q1r),e(q,H1r),e(q,v6),e(v6,x5e),e(x5e,U1r),e(v6,J1r),e(v6,EH),e(EH,Y1r),e(v6,K1r),e(q,Z1r),e(q,F6),e(F6,$5e),e($5e,e2r),e(F6,o2r),e(F6,CH),e(CH,r2r),e(F6,t2r),e(q,a2r),e(q,T6),e(T6,k5e),e(k5e,n2r),e(T6,s2r),e(T6,wH),e(wH,l2r),e(T6,i2r),e(q,d2r),e(q,M6),e(M6,S5e),e(S5e,c2r),e(M6,f2r),e(M6,AH),e(AH,m2r),e(M6,g2r),e(q,h2r),e(q,E6),e(E6,R5e),e(R5e,p2r),e(E6,u2r),e(E6,LH),e(LH,_2r),e(E6,b2r),e(q,v2r),e(q,C6),e(C6,P5e),e(P5e,F2r),e(C6,T2r),e(C6,yH),e(yH,M2r),e(C6,E2r),e(q,C2r),e(q,w6),e(w6,B5e),e(B5e,w2r),e(w6,A2r),e(w6,xH),e(xH,L2r),e(w6,y2r),e(q,x2r),e(q,A6),e(A6,I5e),e(I5e,$2r),e(A6,k2r),e(A6,$H),e($H,S2r),e(A6,R2r),e(q,P2r),e(q,L6),e(L6,N5e),e(N5e,B2r),e(L6,I2r),e(L6,kH),e(kH,N2r),e(L6,q2r),e(q,j2r),e(q,y6),e(y6,q5e),e(q5e,D2r),e(y6,G2r),e(y6,SH),e(SH,O2r),e(y6,V2r),e(q,X2r),e(q,x6),e(x6,j5e),e(j5e,z2r),e(x6,W2r),e(x6,RH),e(RH,Q2r),e(x6,H2r),e(Lr,U2r),M($6,Lr,null),b(f,pOe,_),b(f,rc,_),e(rc,k6),e(k6,D5e),M(m9,D5e,null),e(rc,J2r),e(rc,G5e),e(G5e,Y2r),b(f,uOe,_),b(f,er,_),M(g9,er,null),e(er,K2r),e(er,tc),e(tc,Z2r),e(tc,PH),e(PH,ebr),e(tc,obr),e(tc,BH),e(BH,rbr),e(tc,tbr),e(er,abr),e(er,h9),e(h9,nbr),e(h9,O5e),e(O5e,sbr),e(h9,lbr),e(er,ibr),e(er,kt),M(p9,kt,null),e(kt,dbr),e(kt,V5e),e(V5e,cbr),e(kt,fbr),e(kt,ac),e(ac,mbr),e(ac,X5e),e(X5e,gbr),e(ac,hbr),e(ac,IH),e(IH,pbr),e(ac,ubr),e(kt,_br),M(S6,kt,null),e(er,bbr),e(er,yr),M(u9,yr,null),e(yr,vbr),e(yr,z5e),e(z5e,Fbr),e(yr,Tbr),e(yr,an),e(an,Mbr),e(an,W5e),e(W5e,Ebr),e(an,Cbr),e(an,Q5e),e(Q5e,wbr),e(an,Abr),e(an,H5e),e(H5e,Lbr),e(an,ybr),e(yr,xbr),e(yr,se),e(se,R6),e(R6,U5e),e(U5e,$br),e(R6,kbr),e(R6,NH),e(NH,Sbr),e(R6,Rbr),e(se,Pbr),e(se,P6),e(P6,J5e),e(J5e,Bbr),e(P6,Ibr),e(P6,qH),e(qH,Nbr),e(P6,qbr),e(se,jbr),e(se,B6),e(B6,Y5e),e(Y5e,Dbr),e(B6,Gbr),e(B6,jH),e(jH,Obr),e(B6,Vbr),e(se,Xbr),e(se,I6),e(I6,K5e),e(K5e,zbr),e(I6,Wbr),e(I6,DH),e(DH,Qbr),e(I6,Hbr),e(se,Ubr),e(se,N6),e(N6,Z5e),e(Z5e,Jbr),e(N6,Ybr),e(N6,GH),e(GH,Kbr),e(N6,Zbr),e(se,e4r),e(se,q6),e(q6,eve),e(eve,o4r),e(q6,r4r),e(q6,OH),e(OH,t4r),e(q6,a4r),e(se,n4r),e(se,j6),e(j6,ove),e(ove,s4r),e(j6,l4r),e(j6,VH),e(VH,i4r),e(j6,d4r),e(se,c4r),e(se,D6),e(D6,rve),e(rve,f4r),e(D6,m4r),e(D6,XH),e(XH,g4r),e(D6,h4r),e(se,p4r),e(se,G6),e(G6,tve),e(tve,u4r),e(G6,_4r),e(G6,zH),e(zH,b4r),e(G6,v4r),e(se,F4r),e(se,O6),e(O6,ave),e(ave,T4r),e(O6,M4r),e(O6,WH),e(WH,E4r),e(O6,C4r),e(se,w4r),e(se,V6),e(V6,nve),e(nve,A4r),e(V6,L4r),e(V6,QH),e(QH,y4r),e(V6,x4r),e(se,$4r),e(se,X6),e(X6,sve),e(sve,k4r),e(X6,S4r),e(X6,HH),e(HH,R4r),e(X6,P4r),e(se,B4r),e(se,z6),e(z6,lve),e(lve,I4r),e(z6,N4r),e(z6,UH),e(UH,q4r),e(z6,j4r),e(se,D4r),e(se,W6),e(W6,ive),e(ive,G4r),e(W6,O4r),e(W6,JH),e(JH,V4r),e(W6,X4r),e(se,z4r),e(se,Q6),e(Q6,dve),e(dve,W4r),e(Q6,Q4r),e(Q6,YH),e(YH,H4r),e(Q6,U4r),e(se,J4r),e(se,H6),e(H6,cve),e(cve,Y4r),e(H6,K4r),e(H6,KH),e(KH,Z4r),e(H6,e5r),e(se,o5r),e(se,U6),e(U6,fve),e(fve,r5r),e(U6,t5r),e(U6,ZH),e(ZH,a5r),e(U6,n5r),e(se,s5r),e(se,J6),e(J6,mve),e(mve,l5r),e(J6,i5r),e(J6,eU),e(eU,d5r),e(J6,c5r),e(se,f5r),e(se,Y6),e(Y6,gve),e(gve,m5r),e(Y6,g5r),e(Y6,oU),e(oU,h5r),e(Y6,p5r),e(se,u5r),e(se,K6),e(K6,hve),e(hve,_5r),e(K6,b5r),e(K6,rU),e(rU,v5r),e(K6,F5r),e(se,T5r),e(se,Z6),e(Z6,pve),e(pve,M5r),e(Z6,E5r),e(Z6,tU),e(tU,C5r),e(Z6,w5r),e(se,A5r),e(se,eT),e(eT,uve),e(uve,L5r),e(eT,y5r),e(eT,aU),e(aU,x5r),e(eT,$5r),e(se,k5r),e(se,oT),e(oT,_ve),e(_ve,S5r),e(oT,R5r),e(oT,nU),e(nU,P5r),e(oT,B5r),e(yr,I5r),M(rT,yr,null),b(f,_Oe,_),b(f,nc,_),e(nc,tT),e(tT,bve),M(_9,bve,null),e(nc,N5r),e(nc,vve),e(vve,q5r),b(f,bOe,_),b(f,or,_),M(b9,or,null),e(or,j5r),e(or,sc),e(sc,D5r),e(sc,sU),e(sU,G5r),e(sc,O5r),e(sc,lU),e(lU,V5r),e(sc,X5r),e(or,z5r),e(or,v9),e(v9,W5r),e(v9,Fve),e(Fve,Q5r),e(v9,H5r),e(or,U5r),e(or,St),M(F9,St,null),e(St,J5r),e(St,Tve),e(Tve,Y5r),e(St,K5r),e(St,lc),e(lc,Z5r),e(lc,Mve),e(Mve,evr),e(lc,ovr),e(lc,iU),e(iU,rvr),e(lc,tvr),e(St,avr),M(aT,St,null),e(or,nvr),e(or,xr),M(T9,xr,null),e(xr,svr),e(xr,Eve),e(Eve,lvr),e(xr,ivr),e(xr,nn),e(nn,dvr),e(nn,Cve),e(Cve,cvr),e(nn,fvr),e(nn,wve),e(wve,mvr),e(nn,gvr),e(nn,Ave),e(Ave,hvr),e(nn,pvr),e(xr,uvr),e(xr,Te),e(Te,nT),e(nT,Lve),e(Lve,_vr),e(nT,bvr),e(nT,dU),e(dU,vvr),e(nT,Fvr),e(Te,Tvr),e(Te,sT),e(sT,yve),e(yve,Mvr),e(sT,Evr),e(sT,cU),e(cU,Cvr),e(sT,wvr),e(Te,Avr),e(Te,lT),e(lT,xve),e(xve,Lvr),e(lT,yvr),e(lT,fU),e(fU,xvr),e(lT,$vr),e(Te,kvr),e(Te,iT),e(iT,$ve),e($ve,Svr),e(iT,Rvr),e(iT,mU),e(mU,Pvr),e(iT,Bvr),e(Te,Ivr),e(Te,dT),e(dT,kve),e(kve,Nvr),e(dT,qvr),e(dT,gU),e(gU,jvr),e(dT,Dvr),e(Te,Gvr),e(Te,cT),e(cT,Sve),e(Sve,Ovr),e(cT,Vvr),e(cT,hU),e(hU,Xvr),e(cT,zvr),e(Te,Wvr),e(Te,fT),e(fT,Rve),e(Rve,Qvr),e(fT,Hvr),e(fT,pU),e(pU,Uvr),e(fT,Jvr),e(Te,Yvr),e(Te,mT),e(mT,Pve),e(Pve,Kvr),e(mT,Zvr),e(mT,uU),e(uU,e3r),e(mT,o3r),e(Te,r3r),e(Te,gT),e(gT,Bve),e(Bve,t3r),e(gT,a3r),e(gT,_U),e(_U,n3r),e(gT,s3r),e(Te,l3r),e(Te,hT),e(hT,Ive),e(Ive,i3r),e(hT,d3r),e(hT,bU),e(bU,c3r),e(hT,f3r),e(Te,m3r),e(Te,pT),e(pT,Nve),e(Nve,g3r),e(pT,h3r),e(pT,vU),e(vU,p3r),e(pT,u3r),e(Te,_3r),e(Te,uT),e(uT,qve),e(qve,b3r),e(uT,v3r),e(uT,FU),e(FU,F3r),e(uT,T3r),e(Te,M3r),e(Te,_T),e(_T,jve),e(jve,E3r),e(_T,C3r),e(_T,TU),e(TU,w3r),e(_T,A3r),e(Te,L3r),e(Te,bT),e(bT,Dve),e(Dve,y3r),e(bT,x3r),e(bT,MU),e(MU,$3r),e(bT,k3r),e(xr,S3r),M(vT,xr,null),b(f,vOe,_),b(f,ic,_),e(ic,FT),e(FT,Gve),M(M9,Gve,null),e(ic,R3r),e(ic,Ove),e(Ove,P3r),b(f,FOe,_),b(f,rr,_),M(E9,rr,null),e(rr,B3r),e(rr,dc),e(dc,I3r),e(dc,EU),e(EU,N3r),e(dc,q3r),e(dc,CU),e(CU,j3r),e(dc,D3r),e(rr,G3r),e(rr,C9),e(C9,O3r),e(C9,Vve),e(Vve,V3r),e(C9,X3r),e(rr,z3r),e(rr,Rt),M(w9,Rt,null),e(Rt,W3r),e(Rt,Xve),e(Xve,Q3r),e(Rt,H3r),e(Rt,cc),e(cc,U3r),e(cc,zve),e(zve,J3r),e(cc,Y3r),e(cc,wU),e(wU,K3r),e(cc,Z3r),e(Rt,eFr),M(TT,Rt,null),e(rr,oFr),e(rr,$r),M(A9,$r,null),e($r,rFr),e($r,Wve),e(Wve,tFr),e($r,aFr),e($r,sn),e(sn,nFr),e(sn,Qve),e(Qve,sFr),e(sn,lFr),e(sn,Hve),e(Hve,iFr),e(sn,dFr),e(sn,Uve),e(Uve,cFr),e(sn,fFr),e($r,mFr),e($r,ln),e(ln,MT),e(MT,Jve),e(Jve,gFr),e(MT,hFr),e(MT,AU),e(AU,pFr),e(MT,uFr),e(ln,_Fr),e(ln,ET),e(ET,Yve),e(Yve,bFr),e(ET,vFr),e(ET,LU),e(LU,FFr),e(ET,TFr),e(ln,MFr),e(ln,CT),e(CT,Kve),e(Kve,EFr),e(CT,CFr),e(CT,yU),e(yU,wFr),e(CT,AFr),e(ln,LFr),e(ln,wT),e(wT,Zve),e(Zve,yFr),e(wT,xFr),e(wT,xU),e(xU,$Fr),e(wT,kFr),e($r,SFr),M(AT,$r,null),b(f,TOe,_),b(f,fc,_),e(fc,LT),e(LT,e3e),M(L9,e3e,null),e(fc,RFr),e(fc,o3e),e(o3e,PFr),b(f,MOe,_),b(f,tr,_),M(y9,tr,null),e(tr,BFr),e(tr,mc),e(mc,IFr),e(mc,$U),e($U,NFr),e(mc,qFr),e(mc,kU),e(kU,jFr),e(mc,DFr),e(tr,GFr),e(tr,x9),e(x9,OFr),e(x9,r3e),e(r3e,VFr),e(x9,XFr),e(tr,zFr),e(tr,Pt),M($9,Pt,null),e(Pt,WFr),e(Pt,t3e),e(t3e,QFr),e(Pt,HFr),e(Pt,gc),e(gc,UFr),e(gc,a3e),e(a3e,JFr),e(gc,YFr),e(gc,SU),e(SU,KFr),e(gc,ZFr),e(Pt,e6r),M(yT,Pt,null),e(tr,o6r),e(tr,kr),M(k9,kr,null),e(kr,r6r),e(kr,n3e),e(n3e,t6r),e(kr,a6r),e(kr,dn),e(dn,n6r),e(dn,s3e),e(s3e,s6r),e(dn,l6r),e(dn,l3e),e(l3e,i6r),e(dn,d6r),e(dn,i3e),e(i3e,c6r),e(dn,f6r),e(kr,m6r),e(kr,ie),e(ie,xT),e(xT,d3e),e(d3e,g6r),e(xT,h6r),e(xT,RU),e(RU,p6r),e(xT,u6r),e(ie,_6r),e(ie,$T),e($T,c3e),e(c3e,b6r),e($T,v6r),e($T,PU),e(PU,F6r),e($T,T6r),e(ie,M6r),e(ie,kT),e(kT,f3e),e(f3e,E6r),e(kT,C6r),e(kT,BU),e(BU,w6r),e(kT,A6r),e(ie,L6r),e(ie,ST),e(ST,m3e),e(m3e,y6r),e(ST,x6r),e(ST,IU),e(IU,$6r),e(ST,k6r),e(ie,S6r),e(ie,RT),e(RT,g3e),e(g3e,R6r),e(RT,P6r),e(RT,NU),e(NU,B6r),e(RT,I6r),e(ie,N6r),e(ie,PT),e(PT,h3e),e(h3e,q6r),e(PT,j6r),e(PT,qU),e(qU,D6r),e(PT,G6r),e(ie,O6r),e(ie,BT),e(BT,p3e),e(p3e,V6r),e(BT,X6r),e(BT,jU),e(jU,z6r),e(BT,W6r),e(ie,Q6r),e(ie,IT),e(IT,u3e),e(u3e,H6r),e(IT,U6r),e(IT,DU),e(DU,J6r),e(IT,Y6r),e(ie,K6r),e(ie,NT),e(NT,_3e),e(_3e,Z6r),e(NT,eTr),e(NT,GU),e(GU,oTr),e(NT,rTr),e(ie,tTr),e(ie,qT),e(qT,b3e),e(b3e,aTr),e(qT,nTr),e(qT,OU),e(OU,sTr),e(qT,lTr),e(ie,iTr),e(ie,jT),e(jT,v3e),e(v3e,dTr),e(jT,cTr),e(jT,VU),e(VU,fTr),e(jT,mTr),e(ie,gTr),e(ie,DT),e(DT,F3e),e(F3e,hTr),e(DT,pTr),e(DT,XU),e(XU,uTr),e(DT,_Tr),e(ie,bTr),e(ie,GT),e(GT,T3e),e(T3e,vTr),e(GT,FTr),e(GT,zU),e(zU,TTr),e(GT,MTr),e(ie,ETr),e(ie,OT),e(OT,M3e),e(M3e,CTr),e(OT,wTr),e(OT,WU),e(WU,ATr),e(OT,LTr),e(ie,yTr),e(ie,VT),e(VT,E3e),e(E3e,xTr),e(VT,$Tr),e(VT,QU),e(QU,kTr),e(VT,STr),e(ie,RTr),e(ie,XT),e(XT,C3e),e(C3e,PTr),e(XT,BTr),e(XT,HU),e(HU,ITr),e(XT,NTr),e(ie,qTr),e(ie,zT),e(zT,w3e),e(w3e,jTr),e(zT,DTr),e(zT,UU),e(UU,GTr),e(zT,OTr),e(ie,VTr),e(ie,WT),e(WT,A3e),e(A3e,XTr),e(WT,zTr),e(WT,JU),e(JU,WTr),e(WT,QTr),e(ie,HTr),e(ie,QT),e(QT,L3e),e(L3e,UTr),e(QT,JTr),e(QT,YU),e(YU,YTr),e(QT,KTr),e(ie,ZTr),e(ie,HT),e(HT,y3e),e(y3e,eMr),e(HT,oMr),e(HT,KU),e(KU,rMr),e(HT,tMr),e(kr,aMr),M(UT,kr,null),b(f,EOe,_),b(f,hc,_),e(hc,JT),e(JT,x3e),M(S9,x3e,null),e(hc,nMr),e(hc,$3e),e($3e,sMr),b(f,COe,_),b(f,ar,_),M(R9,ar,null),e(ar,lMr),e(ar,pc),e(pc,iMr),e(pc,ZU),e(ZU,dMr),e(pc,cMr),e(pc,eJ),e(eJ,fMr),e(pc,mMr),e(ar,gMr),e(ar,P9),e(P9,hMr),e(P9,k3e),e(k3e,pMr),e(P9,uMr),e(ar,_Mr),e(ar,Bt),M(B9,Bt,null),e(Bt,bMr),e(Bt,S3e),e(S3e,vMr),e(Bt,FMr),e(Bt,uc),e(uc,TMr),e(uc,R3e),e(R3e,MMr),e(uc,EMr),e(uc,oJ),e(oJ,CMr),e(uc,wMr),e(Bt,AMr),M(YT,Bt,null),e(ar,LMr),e(ar,Sr),M(I9,Sr,null),e(Sr,yMr),e(Sr,P3e),e(P3e,xMr),e(Sr,$Mr),e(Sr,cn),e(cn,kMr),e(cn,B3e),e(B3e,SMr),e(cn,RMr),e(cn,I3e),e(I3e,PMr),e(cn,BMr),e(cn,N3e),e(N3e,IMr),e(cn,NMr),e(Sr,qMr),e(Sr,ye),e(ye,KT),e(KT,q3e),e(q3e,jMr),e(KT,DMr),e(KT,rJ),e(rJ,GMr),e(KT,OMr),e(ye,VMr),e(ye,ZT),e(ZT,j3e),e(j3e,XMr),e(ZT,zMr),e(ZT,tJ),e(tJ,WMr),e(ZT,QMr),e(ye,HMr),e(ye,eM),e(eM,D3e),e(D3e,UMr),e(eM,JMr),e(eM,aJ),e(aJ,YMr),e(eM,KMr),e(ye,ZMr),e(ye,oM),e(oM,G3e),e(G3e,eEr),e(oM,oEr),e(oM,nJ),e(nJ,rEr),e(oM,tEr),e(ye,aEr),e(ye,rM),e(rM,O3e),e(O3e,nEr),e(rM,sEr),e(rM,sJ),e(sJ,lEr),e(rM,iEr),e(ye,dEr),e(ye,tM),e(tM,V3e),e(V3e,cEr),e(tM,fEr),e(tM,lJ),e(lJ,mEr),e(tM,gEr),e(ye,hEr),e(ye,aM),e(aM,X3e),e(X3e,pEr),e(aM,uEr),e(aM,iJ),e(iJ,_Er),e(aM,bEr),e(ye,vEr),e(ye,nM),e(nM,z3e),e(z3e,FEr),e(nM,TEr),e(nM,dJ),e(dJ,MEr),e(nM,EEr),e(ye,CEr),e(ye,sM),e(sM,W3e),e(W3e,wEr),e(sM,AEr),e(sM,cJ),e(cJ,LEr),e(sM,yEr),e(ye,xEr),e(ye,lM),e(lM,Q3e),e(Q3e,$Er),e(lM,kEr),e(lM,fJ),e(fJ,SEr),e(lM,REr),e(Sr,PEr),M(iM,Sr,null),b(f,wOe,_),b(f,_c,_),e(_c,dM),e(dM,H3e),M(N9,H3e,null),e(_c,BEr),e(_c,U3e),e(U3e,IEr),b(f,AOe,_),b(f,nr,_),M(q9,nr,null),e(nr,NEr),e(nr,bc),e(bc,qEr),e(bc,mJ),e(mJ,jEr),e(bc,DEr),e(bc,gJ),e(gJ,GEr),e(bc,OEr),e(nr,VEr),e(nr,j9),e(j9,XEr),e(j9,J3e),e(J3e,zEr),e(j9,WEr),e(nr,QEr),e(nr,It),M(D9,It,null),e(It,HEr),e(It,Y3e),e(Y3e,UEr),e(It,JEr),e(It,vc),e(vc,YEr),e(vc,K3e),e(K3e,KEr),e(vc,ZEr),e(vc,hJ),e(hJ,eCr),e(vc,oCr),e(It,rCr),M(cM,It,null),e(nr,tCr),e(nr,Rr),M(G9,Rr,null),e(Rr,aCr),e(Rr,Z3e),e(Z3e,nCr),e(Rr,sCr),e(Rr,fn),e(fn,lCr),e(fn,eFe),e(eFe,iCr),e(fn,dCr),e(fn,oFe),e(oFe,cCr),e(fn,fCr),e(fn,rFe),e(rFe,mCr),e(fn,gCr),e(Rr,hCr),e(Rr,te),e(te,fM),e(fM,tFe),e(tFe,pCr),e(fM,uCr),e(fM,pJ),e(pJ,_Cr),e(fM,bCr),e(te,vCr),e(te,mM),e(mM,aFe),e(aFe,FCr),e(mM,TCr),e(mM,uJ),e(uJ,MCr),e(mM,ECr),e(te,CCr),e(te,gM),e(gM,nFe),e(nFe,wCr),e(gM,ACr),e(gM,_J),e(_J,LCr),e(gM,yCr),e(te,xCr),e(te,hM),e(hM,sFe),e(sFe,$Cr),e(hM,kCr),e(hM,bJ),e(bJ,SCr),e(hM,RCr),e(te,PCr),e(te,pM),e(pM,lFe),e(lFe,BCr),e(pM,ICr),e(pM,vJ),e(vJ,NCr),e(pM,qCr),e(te,jCr),e(te,uM),e(uM,iFe),e(iFe,DCr),e(uM,GCr),e(uM,FJ),e(FJ,OCr),e(uM,VCr),e(te,XCr),e(te,_M),e(_M,dFe),e(dFe,zCr),e(_M,WCr),e(_M,TJ),e(TJ,QCr),e(_M,HCr),e(te,UCr),e(te,bM),e(bM,cFe),e(cFe,JCr),e(bM,YCr),e(bM,MJ),e(MJ,KCr),e(bM,ZCr),e(te,e0r),e(te,vM),e(vM,fFe),e(fFe,o0r),e(vM,r0r),e(vM,EJ),e(EJ,t0r),e(vM,a0r),e(te,n0r),e(te,FM),e(FM,mFe),e(mFe,s0r),e(FM,l0r),e(FM,CJ),e(CJ,i0r),e(FM,d0r),e(te,c0r),e(te,TM),e(TM,gFe),e(gFe,f0r),e(TM,m0r),e(TM,wJ),e(wJ,g0r),e(TM,h0r),e(te,p0r),e(te,MM),e(MM,hFe),e(hFe,u0r),e(MM,_0r),e(MM,AJ),e(AJ,b0r),e(MM,v0r),e(te,F0r),e(te,EM),e(EM,pFe),e(pFe,T0r),e(EM,M0r),e(EM,LJ),e(LJ,E0r),e(EM,C0r),e(te,w0r),e(te,CM),e(CM,uFe),e(uFe,A0r),e(CM,L0r),e(CM,yJ),e(yJ,y0r),e(CM,x0r),e(te,$0r),e(te,wM),e(wM,_Fe),e(_Fe,k0r),e(wM,S0r),e(wM,xJ),e(xJ,R0r),e(wM,P0r),e(te,B0r),e(te,AM),e(AM,bFe),e(bFe,I0r),e(AM,N0r),e(AM,$J),e($J,q0r),e(AM,j0r),e(te,D0r),e(te,LM),e(LM,vFe),e(vFe,G0r),e(LM,O0r),e(LM,kJ),e(kJ,V0r),e(LM,X0r),e(te,z0r),e(te,yM),e(yM,FFe),e(FFe,W0r),e(yM,Q0r),e(yM,SJ),e(SJ,H0r),e(yM,U0r),e(te,J0r),e(te,xM),e(xM,TFe),e(TFe,Y0r),e(xM,K0r),e(xM,RJ),e(RJ,Z0r),e(xM,ewr),e(te,owr),e(te,$M),e($M,MFe),e(MFe,rwr),e($M,twr),e($M,PJ),e(PJ,awr),e($M,nwr),e(te,swr),e(te,kM),e(kM,EFe),e(EFe,lwr),e(kM,iwr),e(kM,BJ),e(BJ,dwr),e(kM,cwr),e(te,fwr),e(te,SM),e(SM,CFe),e(CFe,mwr),e(SM,gwr),e(SM,IJ),e(IJ,hwr),e(SM,pwr),e(te,uwr),e(te,RM),e(RM,wFe),e(wFe,_wr),e(RM,bwr),e(RM,NJ),e(NJ,vwr),e(RM,Fwr),e(te,Twr),e(te,PM),e(PM,AFe),e(AFe,Mwr),e(PM,Ewr),e(PM,qJ),e(qJ,Cwr),e(PM,wwr),e(te,Awr),e(te,BM),e(BM,LFe),e(LFe,Lwr),e(BM,ywr),e(BM,jJ),e(jJ,xwr),e(BM,$wr),e(te,kwr),e(te,IM),e(IM,yFe),e(yFe,Swr),e(IM,Rwr),e(IM,DJ),e(DJ,Pwr),e(IM,Bwr),e(Rr,Iwr),M(NM,Rr,null),b(f,LOe,_),b(f,Fc,_),e(Fc,qM),e(qM,xFe),M(O9,xFe,null),e(Fc,Nwr),e(Fc,$Fe),e($Fe,qwr),b(f,yOe,_),b(f,sr,_),M(V9,sr,null),e(sr,jwr),e(sr,Tc),e(Tc,Dwr),e(Tc,GJ),e(GJ,Gwr),e(Tc,Owr),e(Tc,OJ),e(OJ,Vwr),e(Tc,Xwr),e(sr,zwr),e(sr,X9),e(X9,Wwr),e(X9,kFe),e(kFe,Qwr),e(X9,Hwr),e(sr,Uwr),e(sr,Nt),M(z9,Nt,null),e(Nt,Jwr),e(Nt,SFe),e(SFe,Ywr),e(Nt,Kwr),e(Nt,Mc),e(Mc,Zwr),e(Mc,RFe),e(RFe,eAr),e(Mc,oAr),e(Mc,VJ),e(VJ,rAr),e(Mc,tAr),e(Nt,aAr),M(jM,Nt,null),e(sr,nAr),e(sr,Pr),M(W9,Pr,null),e(Pr,sAr),e(Pr,PFe),e(PFe,lAr),e(Pr,iAr),e(Pr,mn),e(mn,dAr),e(mn,BFe),e(BFe,cAr),e(mn,fAr),e(mn,IFe),e(IFe,mAr),e(mn,gAr),e(mn,NFe),e(NFe,hAr),e(mn,pAr),e(Pr,uAr),e(Pr,ue),e(ue,DM),e(DM,qFe),e(qFe,_Ar),e(DM,bAr),e(DM,XJ),e(XJ,vAr),e(DM,FAr),e(ue,TAr),e(ue,GM),e(GM,jFe),e(jFe,MAr),e(GM,EAr),e(GM,zJ),e(zJ,CAr),e(GM,wAr),e(ue,AAr),e(ue,OM),e(OM,DFe),e(DFe,LAr),e(OM,yAr),e(OM,WJ),e(WJ,xAr),e(OM,$Ar),e(ue,kAr),e(ue,VM),e(VM,GFe),e(GFe,SAr),e(VM,RAr),e(VM,QJ),e(QJ,PAr),e(VM,BAr),e(ue,IAr),e(ue,XM),e(XM,OFe),e(OFe,NAr),e(XM,qAr),e(XM,HJ),e(HJ,jAr),e(XM,DAr),e(ue,GAr),e(ue,zM),e(zM,VFe),e(VFe,OAr),e(zM,VAr),e(zM,UJ),e(UJ,XAr),e(zM,zAr),e(ue,WAr),e(ue,WM),e(WM,XFe),e(XFe,QAr),e(WM,HAr),e(WM,JJ),e(JJ,UAr),e(WM,JAr),e(ue,YAr),e(ue,QM),e(QM,zFe),e(zFe,KAr),e(QM,ZAr),e(QM,YJ),e(YJ,eLr),e(QM,oLr),e(ue,rLr),e(ue,HM),e(HM,WFe),e(WFe,tLr),e(HM,aLr),e(HM,KJ),e(KJ,nLr),e(HM,sLr),e(ue,lLr),e(ue,UM),e(UM,QFe),e(QFe,iLr),e(UM,dLr),e(UM,ZJ),e(ZJ,cLr),e(UM,fLr),e(ue,mLr),e(ue,JM),e(JM,HFe),e(HFe,gLr),e(JM,hLr),e(JM,eY),e(eY,pLr),e(JM,uLr),e(ue,_Lr),e(ue,YM),e(YM,UFe),e(UFe,bLr),e(YM,vLr),e(YM,oY),e(oY,FLr),e(YM,TLr),e(ue,MLr),e(ue,KM),e(KM,JFe),e(JFe,ELr),e(KM,CLr),e(KM,rY),e(rY,wLr),e(KM,ALr),e(ue,LLr),e(ue,ZM),e(ZM,YFe),e(YFe,yLr),e(ZM,xLr),e(ZM,tY),e(tY,$Lr),e(ZM,kLr),e(ue,SLr),e(ue,eE),e(eE,KFe),e(KFe,RLr),e(eE,PLr),e(eE,aY),e(aY,BLr),e(eE,ILr),e(ue,NLr),e(ue,oE),e(oE,ZFe),e(ZFe,qLr),e(oE,jLr),e(oE,nY),e(nY,DLr),e(oE,GLr),e(ue,OLr),e(ue,rE),e(rE,e6e),e(e6e,VLr),e(rE,XLr),e(rE,sY),e(sY,zLr),e(rE,WLr),e(Pr,QLr),M(tE,Pr,null),b(f,xOe,_),b(f,Ec,_),e(Ec,aE),e(aE,o6e),M(Q9,o6e,null),e(Ec,HLr),e(Ec,r6e),e(r6e,ULr),b(f,$Oe,_),b(f,lr,_),M(H9,lr,null),e(lr,JLr),e(lr,Cc),e(Cc,YLr),e(Cc,lY),e(lY,KLr),e(Cc,ZLr),e(Cc,iY),e(iY,eyr),e(Cc,oyr),e(lr,ryr),e(lr,U9),e(U9,tyr),e(U9,t6e),e(t6e,ayr),e(U9,nyr),e(lr,syr),e(lr,qt),M(J9,qt,null),e(qt,lyr),e(qt,a6e),e(a6e,iyr),e(qt,dyr),e(qt,wc),e(wc,cyr),e(wc,n6e),e(n6e,fyr),e(wc,myr),e(wc,dY),e(dY,gyr),e(wc,hyr),e(qt,pyr),M(nE,qt,null),e(lr,uyr),e(lr,Br),M(Y9,Br,null),e(Br,_yr),e(Br,s6e),e(s6e,byr),e(Br,vyr),e(Br,gn),e(gn,Fyr),e(gn,l6e),e(l6e,Tyr),e(gn,Myr),e(gn,i6e),e(i6e,Eyr),e(gn,Cyr),e(gn,d6e),e(d6e,wyr),e(gn,Ayr),e(Br,Lyr),e(Br,K9),e(K9,sE),e(sE,c6e),e(c6e,yyr),e(sE,xyr),e(sE,cY),e(cY,$yr),e(sE,kyr),e(K9,Syr),e(K9,lE),e(lE,f6e),e(f6e,Ryr),e(lE,Pyr),e(lE,fY),e(fY,Byr),e(lE,Iyr),e(Br,Nyr),M(iE,Br,null),b(f,kOe,_),b(f,Ac,_),e(Ac,dE),e(dE,m6e),M(Z9,m6e,null),e(Ac,qyr),e(Ac,g6e),e(g6e,jyr),b(f,SOe,_),b(f,ir,_),M(ex,ir,null),e(ir,Dyr),e(ir,Lc),e(Lc,Gyr),e(Lc,mY),e(mY,Oyr),e(Lc,Vyr),e(Lc,gY),e(gY,Xyr),e(Lc,zyr),e(ir,Wyr),e(ir,ox),e(ox,Qyr),e(ox,h6e),e(h6e,Hyr),e(ox,Uyr),e(ir,Jyr),e(ir,jt),M(rx,jt,null),e(jt,Yyr),e(jt,p6e),e(p6e,Kyr),e(jt,Zyr),e(jt,yc),e(yc,e7r),e(yc,u6e),e(u6e,o7r),e(yc,r7r),e(yc,hY),e(hY,t7r),e(yc,a7r),e(jt,n7r),M(cE,jt,null),e(ir,s7r),e(ir,Ir),M(tx,Ir,null),e(Ir,l7r),e(Ir,_6e),e(_6e,i7r),e(Ir,d7r),e(Ir,hn),e(hn,c7r),e(hn,b6e),e(b6e,f7r),e(hn,m7r),e(hn,v6e),e(v6e,g7r),e(hn,h7r),e(hn,F6e),e(F6e,p7r),e(hn,u7r),e(Ir,_7r),e(Ir,T6e),e(T6e,fE),e(fE,M6e),e(M6e,b7r),e(fE,v7r),e(fE,pY),e(pY,F7r),e(fE,T7r),e(Ir,M7r),M(mE,Ir,null),b(f,ROe,_),b(f,xc,_),e(xc,gE),e(gE,E6e),M(ax,E6e,null),e(xc,E7r),e(xc,C6e),e(C6e,C7r),b(f,POe,_),b(f,dr,_),M(nx,dr,null),e(dr,w7r),e(dr,$c),e($c,A7r),e($c,uY),e(uY,L7r),e($c,y7r),e($c,_Y),e(_Y,x7r),e($c,$7r),e(dr,k7r),e(dr,sx),e(sx,S7r),e(sx,w6e),e(w6e,R7r),e(sx,P7r),e(dr,B7r),e(dr,Dt),M(lx,Dt,null),e(Dt,I7r),e(Dt,A6e),e(A6e,N7r),e(Dt,q7r),e(Dt,kc),e(kc,j7r),e(kc,L6e),e(L6e,D7r),e(kc,G7r),e(kc,bY),e(bY,O7r),e(kc,V7r),e(Dt,X7r),M(hE,Dt,null),e(dr,z7r),e(dr,Nr),M(ix,Nr,null),e(Nr,W7r),e(Nr,y6e),e(y6e,Q7r),e(Nr,H7r),e(Nr,pn),e(pn,U7r),e(pn,x6e),e(x6e,J7r),e(pn,Y7r),e(pn,$6e),e($6e,K7r),e(pn,Z7r),e(pn,k6e),e(k6e,e8r),e(pn,o8r),e(Nr,r8r),e(Nr,de),e(de,pE),e(pE,S6e),e(S6e,t8r),e(pE,a8r),e(pE,vY),e(vY,n8r),e(pE,s8r),e(de,l8r),e(de,uE),e(uE,R6e),e(R6e,i8r),e(uE,d8r),e(uE,FY),e(FY,c8r),e(uE,f8r),e(de,m8r),e(de,_E),e(_E,P6e),e(P6e,g8r),e(_E,h8r),e(_E,TY),e(TY,p8r),e(_E,u8r),e(de,_8r),e(de,bE),e(bE,B6e),e(B6e,b8r),e(bE,v8r),e(bE,MY),e(MY,F8r),e(bE,T8r),e(de,M8r),e(de,vE),e(vE,I6e),e(I6e,E8r),e(vE,C8r),e(vE,EY),e(EY,w8r),e(vE,A8r),e(de,L8r),e(de,FE),e(FE,N6e),e(N6e,y8r),e(FE,x8r),e(FE,CY),e(CY,$8r),e(FE,k8r),e(de,S8r),e(de,TE),e(TE,q6e),e(q6e,R8r),e(TE,P8r),e(TE,wY),e(wY,B8r),e(TE,I8r),e(de,N8r),e(de,ME),e(ME,j6e),e(j6e,q8r),e(ME,j8r),e(ME,AY),e(AY,D8r),e(ME,G8r),e(de,O8r),e(de,EE),e(EE,D6e),e(D6e,V8r),e(EE,X8r),e(EE,LY),e(LY,z8r),e(EE,W8r),e(de,Q8r),e(de,CE),e(CE,G6e),e(G6e,H8r),e(CE,U8r),e(CE,yY),e(yY,J8r),e(CE,Y8r),e(de,K8r),e(de,wE),e(wE,O6e),e(O6e,Z8r),e(wE,e9r),e(wE,xY),e(xY,o9r),e(wE,r9r),e(de,t9r),e(de,AE),e(AE,V6e),e(V6e,a9r),e(AE,n9r),e(AE,$Y),e($Y,s9r),e(AE,l9r),e(de,i9r),e(de,LE),e(LE,X6e),e(X6e,d9r),e(LE,c9r),e(LE,kY),e(kY,f9r),e(LE,m9r),e(de,g9r),e(de,yE),e(yE,z6e),e(z6e,h9r),e(yE,p9r),e(yE,SY),e(SY,u9r),e(yE,_9r),e(de,b9r),e(de,xE),e(xE,W6e),e(W6e,v9r),e(xE,F9r),e(xE,RY),e(RY,T9r),e(xE,M9r),e(de,E9r),e(de,$E),e($E,Q6e),e(Q6e,C9r),e($E,w9r),e($E,PY),e(PY,A9r),e($E,L9r),e(de,y9r),e(de,kE),e(kE,H6e),e(H6e,x9r),e(kE,$9r),e(kE,BY),e(BY,k9r),e(kE,S9r),e(de,R9r),e(de,SE),e(SE,U6e),e(U6e,P9r),e(SE,B9r),e(SE,IY),e(IY,I9r),e(SE,N9r),e(de,q9r),e(de,RE),e(RE,J6e),e(J6e,j9r),e(RE,D9r),e(RE,NY),e(NY,G9r),e(RE,O9r),e(de,V9r),e(de,PE),e(PE,Y6e),e(Y6e,X9r),e(PE,z9r),e(PE,qY),e(qY,W9r),e(PE,Q9r),e(Nr,H9r),M(BE,Nr,null),b(f,BOe,_),b(f,Sc,_),e(Sc,IE),e(IE,K6e),M(dx,K6e,null),e(Sc,U9r),e(Sc,Z6e),e(Z6e,J9r),b(f,IOe,_),b(f,cr,_),M(cx,cr,null),e(cr,Y9r),e(cr,Rc),e(Rc,K9r),e(Rc,jY),e(jY,Z9r),e(Rc,exr),e(Rc,DY),e(DY,oxr),e(Rc,rxr),e(cr,txr),e(cr,fx),e(fx,axr),e(fx,eTe),e(eTe,nxr),e(fx,sxr),e(cr,lxr),e(cr,Gt),M(mx,Gt,null),e(Gt,ixr),e(Gt,oTe),e(oTe,dxr),e(Gt,cxr),e(Gt,Pc),e(Pc,fxr),e(Pc,rTe),e(rTe,mxr),e(Pc,gxr),e(Pc,GY),e(GY,hxr),e(Pc,pxr),e(Gt,uxr),M(NE,Gt,null),e(cr,_xr),e(cr,qr),M(gx,qr,null),e(qr,bxr),e(qr,tTe),e(tTe,vxr),e(qr,Fxr),e(qr,un),e(un,Txr),e(un,aTe),e(aTe,Mxr),e(un,Exr),e(un,nTe),e(nTe,Cxr),e(un,wxr),e(un,sTe),e(sTe,Axr),e(un,Lxr),e(qr,yxr),e(qr,ce),e(ce,qE),e(qE,lTe),e(lTe,xxr),e(qE,$xr),e(qE,OY),e(OY,kxr),e(qE,Sxr),e(ce,Rxr),e(ce,jE),e(jE,iTe),e(iTe,Pxr),e(jE,Bxr),e(jE,VY),e(VY,Ixr),e(jE,Nxr),e(ce,qxr),e(ce,DE),e(DE,dTe),e(dTe,jxr),e(DE,Dxr),e(DE,XY),e(XY,Gxr),e(DE,Oxr),e(ce,Vxr),e(ce,GE),e(GE,cTe),e(cTe,Xxr),e(GE,zxr),e(GE,zY),e(zY,Wxr),e(GE,Qxr),e(ce,Hxr),e(ce,OE),e(OE,fTe),e(fTe,Uxr),e(OE,Jxr),e(OE,WY),e(WY,Yxr),e(OE,Kxr),e(ce,Zxr),e(ce,VE),e(VE,mTe),e(mTe,e$r),e(VE,o$r),e(VE,QY),e(QY,r$r),e(VE,t$r),e(ce,a$r),e(ce,XE),e(XE,gTe),e(gTe,n$r),e(XE,s$r),e(XE,HY),e(HY,l$r),e(XE,i$r),e(ce,d$r),e(ce,zE),e(zE,hTe),e(hTe,c$r),e(zE,f$r),e(zE,UY),e(UY,m$r),e(zE,g$r),e(ce,h$r),e(ce,WE),e(WE,pTe),e(pTe,p$r),e(WE,u$r),e(WE,JY),e(JY,_$r),e(WE,b$r),e(ce,v$r),e(ce,QE),e(QE,uTe),e(uTe,F$r),e(QE,T$r),e(QE,YY),e(YY,M$r),e(QE,E$r),e(ce,C$r),e(ce,HE),e(HE,_Te),e(_Te,w$r),e(HE,A$r),e(HE,KY),e(KY,L$r),e(HE,y$r),e(ce,x$r),e(ce,UE),e(UE,bTe),e(bTe,$$r),e(UE,k$r),e(UE,ZY),e(ZY,S$r),e(UE,R$r),e(ce,P$r),e(ce,JE),e(JE,vTe),e(vTe,B$r),e(JE,I$r),e(JE,eK),e(eK,N$r),e(JE,q$r),e(ce,j$r),e(ce,YE),e(YE,FTe),e(FTe,D$r),e(YE,G$r),e(YE,oK),e(oK,O$r),e(YE,V$r),e(ce,X$r),e(ce,KE),e(KE,TTe),e(TTe,z$r),e(KE,W$r),e(KE,rK),e(rK,Q$r),e(KE,H$r),e(ce,U$r),e(ce,ZE),e(ZE,MTe),e(MTe,J$r),e(ZE,Y$r),e(ZE,tK),e(tK,K$r),e(ZE,Z$r),e(ce,ekr),e(ce,eC),e(eC,ETe),e(ETe,okr),e(eC,rkr),e(eC,aK),e(aK,tkr),e(eC,akr),e(ce,nkr),e(ce,oC),e(oC,CTe),e(CTe,skr),e(oC,lkr),e(oC,nK),e(nK,ikr),e(oC,dkr),e(ce,ckr),e(ce,rC),e(rC,wTe),e(wTe,fkr),e(rC,mkr),e(rC,sK),e(sK,gkr),e(rC,hkr),e(ce,pkr),e(ce,tC),e(tC,ATe),e(ATe,ukr),e(tC,_kr),e(tC,lK),e(lK,bkr),e(tC,vkr),e(qr,Fkr),M(aC,qr,null),b(f,NOe,_),b(f,Bc,_),e(Bc,nC),e(nC,LTe),M(hx,LTe,null),e(Bc,Tkr),e(Bc,yTe),e(yTe,Mkr),b(f,qOe,_),b(f,fr,_),M(px,fr,null),e(fr,Ekr),e(fr,Ic),e(Ic,Ckr),e(Ic,iK),e(iK,wkr),e(Ic,Akr),e(Ic,dK),e(dK,Lkr),e(Ic,ykr),e(fr,xkr),e(fr,ux),e(ux,$kr),e(ux,xTe),e(xTe,kkr),e(ux,Skr),e(fr,Rkr),e(fr,Ot),M(_x,Ot,null),e(Ot,Pkr),e(Ot,$Te),e($Te,Bkr),e(Ot,Ikr),e(Ot,Nc),e(Nc,Nkr),e(Nc,kTe),e(kTe,qkr),e(Nc,jkr),e(Nc,cK),e(cK,Dkr),e(Nc,Gkr),e(Ot,Okr),M(sC,Ot,null),e(fr,Vkr),e(fr,jr),M(bx,jr,null),e(jr,Xkr),e(jr,STe),e(STe,zkr),e(jr,Wkr),e(jr,_n),e(_n,Qkr),e(_n,RTe),e(RTe,Hkr),e(_n,Ukr),e(_n,PTe),e(PTe,Jkr),e(_n,Ykr),e(_n,BTe),e(BTe,Kkr),e(_n,Zkr),e(jr,eSr),e(jr,ITe),e(ITe,lC),e(lC,NTe),e(NTe,oSr),e(lC,rSr),e(lC,fK),e(fK,tSr),e(lC,aSr),e(jr,nSr),M(iC,jr,null),b(f,jOe,_),b(f,qc,_),e(qc,dC),e(dC,qTe),M(vx,qTe,null),e(qc,sSr),e(qc,jTe),e(jTe,lSr),b(f,DOe,_),b(f,mr,_),M(Fx,mr,null),e(mr,iSr),e(mr,jc),e(jc,dSr),e(jc,mK),e(mK,cSr),e(jc,fSr),e(jc,gK),e(gK,mSr),e(jc,gSr),e(mr,hSr),e(mr,Tx),e(Tx,pSr),e(Tx,DTe),e(DTe,uSr),e(Tx,_Sr),e(mr,bSr),e(mr,Vt),M(Mx,Vt,null),e(Vt,vSr),e(Vt,GTe),e(GTe,FSr),e(Vt,TSr),e(Vt,Dc),e(Dc,MSr),e(Dc,OTe),e(OTe,ESr),e(Dc,CSr),e(Dc,hK),e(hK,wSr),e(Dc,ASr),e(Vt,LSr),M(cC,Vt,null),e(mr,ySr),e(mr,Dr),M(Ex,Dr,null),e(Dr,xSr),e(Dr,VTe),e(VTe,$Sr),e(Dr,kSr),e(Dr,bn),e(bn,SSr),e(bn,XTe),e(XTe,RSr),e(bn,PSr),e(bn,zTe),e(zTe,BSr),e(bn,ISr),e(bn,WTe),e(WTe,NSr),e(bn,qSr),e(Dr,jSr),e(Dr,QTe),e(QTe,fC),e(fC,HTe),e(HTe,DSr),e(fC,GSr),e(fC,pK),e(pK,OSr),e(fC,VSr),e(Dr,XSr),M(mC,Dr,null),b(f,GOe,_),b(f,Gc,_),e(Gc,gC),e(gC,UTe),M(Cx,UTe,null),e(Gc,zSr),e(Gc,JTe),e(JTe,WSr),b(f,OOe,_),b(f,gr,_),M(wx,gr,null),e(gr,QSr),e(gr,Oc),e(Oc,HSr),e(Oc,uK),e(uK,USr),e(Oc,JSr),e(Oc,_K),e(_K,YSr),e(Oc,KSr),e(gr,ZSr),e(gr,Ax),e(Ax,eRr),e(Ax,YTe),e(YTe,oRr),e(Ax,rRr),e(gr,tRr),e(gr,Xt),M(Lx,Xt,null),e(Xt,aRr),e(Xt,KTe),e(KTe,nRr),e(Xt,sRr),e(Xt,Vc),e(Vc,lRr),e(Vc,ZTe),e(ZTe,iRr),e(Vc,dRr),e(Vc,bK),e(bK,cRr),e(Vc,fRr),e(Xt,mRr),M(hC,Xt,null),e(gr,gRr),e(gr,Gr),M(yx,Gr,null),e(Gr,hRr),e(Gr,eMe),e(eMe,pRr),e(Gr,uRr),e(Gr,vn),e(vn,_Rr),e(vn,oMe),e(oMe,bRr),e(vn,vRr),e(vn,rMe),e(rMe,FRr),e(vn,TRr),e(vn,tMe),e(tMe,MRr),e(vn,ERr),e(Gr,CRr),e(Gr,oe),e(oe,pC),e(pC,aMe),e(aMe,wRr),e(pC,ARr),e(pC,vK),e(vK,LRr),e(pC,yRr),e(oe,xRr),e(oe,uC),e(uC,nMe),e(nMe,$Rr),e(uC,kRr),e(uC,FK),e(FK,SRr),e(uC,RRr),e(oe,PRr),e(oe,_C),e(_C,sMe),e(sMe,BRr),e(_C,IRr),e(_C,TK),e(TK,NRr),e(_C,qRr),e(oe,jRr),e(oe,bC),e(bC,lMe),e(lMe,DRr),e(bC,GRr),e(bC,MK),e(MK,ORr),e(bC,VRr),e(oe,XRr),e(oe,vC),e(vC,iMe),e(iMe,zRr),e(vC,WRr),e(vC,EK),e(EK,QRr),e(vC,HRr),e(oe,URr),e(oe,FC),e(FC,dMe),e(dMe,JRr),e(FC,YRr),e(FC,CK),e(CK,KRr),e(FC,ZRr),e(oe,ePr),e(oe,TC),e(TC,cMe),e(cMe,oPr),e(TC,rPr),e(TC,wK),e(wK,tPr),e(TC,aPr),e(oe,nPr),e(oe,MC),e(MC,fMe),e(fMe,sPr),e(MC,lPr),e(MC,AK),e(AK,iPr),e(MC,dPr),e(oe,cPr),e(oe,EC),e(EC,mMe),e(mMe,fPr),e(EC,mPr),e(EC,LK),e(LK,gPr),e(EC,hPr),e(oe,pPr),e(oe,CC),e(CC,gMe),e(gMe,uPr),e(CC,_Pr),e(CC,yK),e(yK,bPr),e(CC,vPr),e(oe,FPr),e(oe,wC),e(wC,hMe),e(hMe,TPr),e(wC,MPr),e(wC,xK),e(xK,EPr),e(wC,CPr),e(oe,wPr),e(oe,AC),e(AC,pMe),e(pMe,APr),e(AC,LPr),e(AC,$K),e($K,yPr),e(AC,xPr),e(oe,$Pr),e(oe,LC),e(LC,uMe),e(uMe,kPr),e(LC,SPr),e(LC,kK),e(kK,RPr),e(LC,PPr),e(oe,BPr),e(oe,yC),e(yC,_Me),e(_Me,IPr),e(yC,NPr),e(yC,SK),e(SK,qPr),e(yC,jPr),e(oe,DPr),e(oe,xC),e(xC,bMe),e(bMe,GPr),e(xC,OPr),e(xC,RK),e(RK,VPr),e(xC,XPr),e(oe,zPr),e(oe,$C),e($C,vMe),e(vMe,WPr),e($C,QPr),e($C,PK),e(PK,HPr),e($C,UPr),e(oe,JPr),e(oe,kC),e(kC,FMe),e(FMe,YPr),e(kC,KPr),e(kC,BK),e(BK,ZPr),e(kC,eBr),e(oe,oBr),e(oe,SC),e(SC,TMe),e(TMe,rBr),e(SC,tBr),e(SC,IK),e(IK,aBr),e(SC,nBr),e(oe,sBr),e(oe,RC),e(RC,MMe),e(MMe,lBr),e(RC,iBr),e(RC,NK),e(NK,dBr),e(RC,cBr),e(oe,fBr),e(oe,PC),e(PC,EMe),e(EMe,mBr),e(PC,gBr),e(PC,qK),e(qK,hBr),e(PC,pBr),e(oe,uBr),e(oe,BC),e(BC,CMe),e(CMe,_Br),e(BC,bBr),e(BC,jK),e(jK,vBr),e(BC,FBr),e(oe,TBr),e(oe,IC),e(IC,wMe),e(wMe,MBr),e(IC,EBr),e(IC,DK),e(DK,CBr),e(IC,wBr),e(oe,ABr),e(oe,NC),e(NC,AMe),e(AMe,LBr),e(NC,yBr),e(NC,GK),e(GK,xBr),e(NC,$Br),e(oe,kBr),e(oe,qC),e(qC,LMe),e(LMe,SBr),e(qC,RBr),e(qC,OK),e(OK,PBr),e(qC,BBr),e(oe,IBr),e(oe,jC),e(jC,yMe),e(yMe,NBr),e(jC,qBr),e(jC,VK),e(VK,jBr),e(jC,DBr),e(oe,GBr),e(oe,DC),e(DC,xMe),e(xMe,OBr),e(DC,VBr),e(DC,XK),e(XK,XBr),e(DC,zBr),e(oe,WBr),e(oe,GC),e(GC,$Me),e($Me,QBr),e(GC,HBr),e(GC,zK),e(zK,UBr),e(GC,JBr),e(Gr,YBr),M(OC,Gr,null),b(f,VOe,_),b(f,Xc,_),e(Xc,VC),e(VC,kMe),M(xx,kMe,null),e(Xc,KBr),e(Xc,SMe),e(SMe,ZBr),b(f,XOe,_),b(f,hr,_),M($x,hr,null),e(hr,eIr),e(hr,zc),e(zc,oIr),e(zc,WK),e(WK,rIr),e(zc,tIr),e(zc,QK),e(QK,aIr),e(zc,nIr),e(hr,sIr),e(hr,kx),e(kx,lIr),e(kx,RMe),e(RMe,iIr),e(kx,dIr),e(hr,cIr),e(hr,zt),M(Sx,zt,null),e(zt,fIr),e(zt,PMe),e(PMe,mIr),e(zt,gIr),e(zt,Wc),e(Wc,hIr),e(Wc,BMe),e(BMe,pIr),e(Wc,uIr),e(Wc,HK),e(HK,_Ir),e(Wc,bIr),e(zt,vIr),M(XC,zt,null),e(hr,FIr),e(hr,Or),M(Rx,Or,null),e(Or,TIr),e(Or,IMe),e(IMe,MIr),e(Or,EIr),e(Or,Fn),e(Fn,CIr),e(Fn,NMe),e(NMe,wIr),e(Fn,AIr),e(Fn,qMe),e(qMe,LIr),e(Fn,yIr),e(Fn,jMe),e(jMe,xIr),e(Fn,$Ir),e(Or,kIr),e(Or,xe),e(xe,zC),e(zC,DMe),e(DMe,SIr),e(zC,RIr),e(zC,UK),e(UK,PIr),e(zC,BIr),e(xe,IIr),e(xe,WC),e(WC,GMe),e(GMe,NIr),e(WC,qIr),e(WC,JK),e(JK,jIr),e(WC,DIr),e(xe,GIr),e(xe,QC),e(QC,OMe),e(OMe,OIr),e(QC,VIr),e(QC,YK),e(YK,XIr),e(QC,zIr),e(xe,WIr),e(xe,HC),e(HC,VMe),e(VMe,QIr),e(HC,HIr),e(HC,KK),e(KK,UIr),e(HC,JIr),e(xe,YIr),e(xe,UC),e(UC,XMe),e(XMe,KIr),e(UC,ZIr),e(UC,ZK),e(ZK,eNr),e(UC,oNr),e(xe,rNr),e(xe,JC),e(JC,zMe),e(zMe,tNr),e(JC,aNr),e(JC,eZ),e(eZ,nNr),e(JC,sNr),e(xe,lNr),e(xe,YC),e(YC,WMe),e(WMe,iNr),e(YC,dNr),e(YC,oZ),e(oZ,cNr),e(YC,fNr),e(xe,mNr),e(xe,KC),e(KC,QMe),e(QMe,gNr),e(KC,hNr),e(KC,rZ),e(rZ,pNr),e(KC,uNr),e(xe,_Nr),e(xe,ZC),e(ZC,HMe),e(HMe,bNr),e(ZC,vNr),e(ZC,tZ),e(tZ,FNr),e(ZC,TNr),e(xe,MNr),e(xe,e0),e(e0,UMe),e(UMe,ENr),e(e0,CNr),e(e0,aZ),e(aZ,wNr),e(e0,ANr),e(Or,LNr),M(o0,Or,null),b(f,zOe,_),b(f,Qc,_),e(Qc,r0),e(r0,JMe),M(Px,JMe,null),e(Qc,yNr),e(Qc,YMe),e(YMe,xNr),b(f,WOe,_),b(f,pr,_),M(Bx,pr,null),e(pr,$Nr),e(pr,Hc),e(Hc,kNr),e(Hc,nZ),e(nZ,SNr),e(Hc,RNr),e(Hc,sZ),e(sZ,PNr),e(Hc,BNr),e(pr,INr),e(pr,Ix),e(Ix,NNr),e(Ix,KMe),e(KMe,qNr),e(Ix,jNr),e(pr,DNr),e(pr,Wt),M(Nx,Wt,null),e(Wt,GNr),e(Wt,ZMe),e(ZMe,ONr),e(Wt,VNr),e(Wt,Uc),e(Uc,XNr),e(Uc,eEe),e(eEe,zNr),e(Uc,WNr),e(Uc,lZ),e(lZ,QNr),e(Uc,HNr),e(Wt,UNr),M(t0,Wt,null),e(pr,JNr),e(pr,Vr),M(qx,Vr,null),e(Vr,YNr),e(Vr,oEe),e(oEe,KNr),e(Vr,ZNr),e(Vr,Tn),e(Tn,eqr),e(Tn,rEe),e(rEe,oqr),e(Tn,rqr),e(Tn,tEe),e(tEe,tqr),e(Tn,aqr),e(Tn,aEe),e(aEe,nqr),e(Tn,sqr),e(Vr,lqr),e(Vr,Ee),e(Ee,a0),e(a0,nEe),e(nEe,iqr),e(a0,dqr),e(a0,iZ),e(iZ,cqr),e(a0,fqr),e(Ee,mqr),e(Ee,n0),e(n0,sEe),e(sEe,gqr),e(n0,hqr),e(n0,dZ),e(dZ,pqr),e(n0,uqr),e(Ee,_qr),e(Ee,s0),e(s0,lEe),e(lEe,bqr),e(s0,vqr),e(s0,cZ),e(cZ,Fqr),e(s0,Tqr),e(Ee,Mqr),e(Ee,l0),e(l0,iEe),e(iEe,Eqr),e(l0,Cqr),e(l0,fZ),e(fZ,wqr),e(l0,Aqr),e(Ee,Lqr),e(Ee,i0),e(i0,dEe),e(dEe,yqr),e(i0,xqr),e(i0,mZ),e(mZ,$qr),e(i0,kqr),e(Ee,Sqr),e(Ee,d0),e(d0,cEe),e(cEe,Rqr),e(d0,Pqr),e(d0,gZ),e(gZ,Bqr),e(d0,Iqr),e(Ee,Nqr),e(Ee,c0),e(c0,fEe),e(fEe,qqr),e(c0,jqr),e(c0,hZ),e(hZ,Dqr),e(c0,Gqr),e(Ee,Oqr),e(Ee,f0),e(f0,mEe),e(mEe,Vqr),e(f0,Xqr),e(f0,pZ),e(pZ,zqr),e(f0,Wqr),e(Ee,Qqr),e(Ee,m0),e(m0,gEe),e(gEe,Hqr),e(m0,Uqr),e(m0,uZ),e(uZ,Jqr),e(m0,Yqr),e(Ee,Kqr),e(Ee,g0),e(g0,hEe),e(hEe,Zqr),e(g0,ejr),e(g0,_Z),e(_Z,ojr),e(g0,rjr),e(Ee,tjr),e(Ee,h0),e(h0,pEe),e(pEe,ajr),e(h0,njr),e(h0,bZ),e(bZ,sjr),e(h0,ljr),e(Ee,ijr),e(Ee,p0),e(p0,uEe),e(uEe,djr),e(p0,cjr),e(p0,vZ),e(vZ,fjr),e(p0,mjr),e(Ee,gjr),e(Ee,u0),e(u0,_Ee),e(_Ee,hjr),e(u0,pjr),e(u0,FZ),e(FZ,ujr),e(u0,_jr),e(Vr,bjr),M(_0,Vr,null),b(f,QOe,_),b(f,Jc,_),e(Jc,b0),e(b0,bEe),M(jx,bEe,null),e(Jc,vjr),e(Jc,vEe),e(vEe,Fjr),b(f,HOe,_),b(f,ur,_),M(Dx,ur,null),e(ur,Tjr),e(ur,Yc),e(Yc,Mjr),e(Yc,TZ),e(TZ,Ejr),e(Yc,Cjr),e(Yc,MZ),e(MZ,wjr),e(Yc,Ajr),e(ur,Ljr),e(ur,Gx),e(Gx,yjr),e(Gx,FEe),e(FEe,xjr),e(Gx,$jr),e(ur,kjr),e(ur,Qt),M(Ox,Qt,null),e(Qt,Sjr),e(Qt,TEe),e(TEe,Rjr),e(Qt,Pjr),e(Qt,Kc),e(Kc,Bjr),e(Kc,MEe),e(MEe,Ijr),e(Kc,Njr),e(Kc,EZ),e(EZ,qjr),e(Kc,jjr),e(Qt,Djr),M(v0,Qt,null),e(ur,Gjr),e(ur,Xr),M(Vx,Xr,null),e(Xr,Ojr),e(Xr,EEe),e(EEe,Vjr),e(Xr,Xjr),e(Xr,Mn),e(Mn,zjr),e(Mn,CEe),e(CEe,Wjr),e(Mn,Qjr),e(Mn,wEe),e(wEe,Hjr),e(Mn,Ujr),e(Mn,AEe),e(AEe,Jjr),e(Mn,Yjr),e(Xr,Kjr),e(Xr,$e),e($e,F0),e(F0,LEe),e(LEe,Zjr),e(F0,eDr),e(F0,CZ),e(CZ,oDr),e(F0,rDr),e($e,tDr),e($e,T0),e(T0,yEe),e(yEe,aDr),e(T0,nDr),e(T0,wZ),e(wZ,sDr),e(T0,lDr),e($e,iDr),e($e,M0),e(M0,xEe),e(xEe,dDr),e(M0,cDr),e(M0,AZ),e(AZ,fDr),e(M0,mDr),e($e,gDr),e($e,E0),e(E0,$Ee),e($Ee,hDr),e(E0,pDr),e(E0,LZ),e(LZ,uDr),e(E0,_Dr),e($e,bDr),e($e,C0),e(C0,kEe),e(kEe,vDr),e(C0,FDr),e(C0,yZ),e(yZ,TDr),e(C0,MDr),e($e,EDr),e($e,w0),e(w0,SEe),e(SEe,CDr),e(w0,wDr),e(w0,xZ),e(xZ,ADr),e(w0,LDr),e($e,yDr),e($e,A0),e(A0,REe),e(REe,xDr),e(A0,$Dr),e(A0,$Z),e($Z,kDr),e(A0,SDr),e($e,RDr),e($e,L0),e(L0,PEe),e(PEe,PDr),e(L0,BDr),e(L0,kZ),e(kZ,IDr),e(L0,NDr),e($e,qDr),e($e,y0),e(y0,BEe),e(BEe,jDr),e(y0,DDr),e(y0,SZ),e(SZ,GDr),e(y0,ODr),e($e,VDr),e($e,x0),e(x0,IEe),e(IEe,XDr),e(x0,zDr),e(x0,RZ),e(RZ,WDr),e(x0,QDr),e(Xr,HDr),M($0,Xr,null),b(f,UOe,_),b(f,Zc,_),e(Zc,k0),e(k0,NEe),M(Xx,NEe,null),e(Zc,UDr),e(Zc,qEe),e(qEe,JDr),b(f,JOe,_),b(f,_r,_),M(zx,_r,null),e(_r,YDr),e(_r,ef),e(ef,KDr),e(ef,PZ),e(PZ,ZDr),e(ef,eGr),e(ef,BZ),e(BZ,oGr),e(ef,rGr),e(_r,tGr),e(_r,Wx),e(Wx,aGr),e(Wx,jEe),e(jEe,nGr),e(Wx,sGr),e(_r,lGr),e(_r,Ht),M(Qx,Ht,null),e(Ht,iGr),e(Ht,DEe),e(DEe,dGr),e(Ht,cGr),e(Ht,of),e(of,fGr),e(of,GEe),e(GEe,mGr),e(of,gGr),e(of,IZ),e(IZ,hGr),e(of,pGr),e(Ht,uGr),M(S0,Ht,null),e(_r,_Gr),e(_r,zr),M(Hx,zr,null),e(zr,bGr),e(zr,OEe),e(OEe,vGr),e(zr,FGr),e(zr,En),e(En,TGr),e(En,VEe),e(VEe,MGr),e(En,EGr),e(En,XEe),e(XEe,CGr),e(En,wGr),e(En,zEe),e(zEe,AGr),e(En,LGr),e(zr,yGr),e(zr,ke),e(ke,R0),e(R0,WEe),e(WEe,xGr),e(R0,$Gr),e(R0,NZ),e(NZ,kGr),e(R0,SGr),e(ke,RGr),e(ke,P0),e(P0,QEe),e(QEe,PGr),e(P0,BGr),e(P0,qZ),e(qZ,IGr),e(P0,NGr),e(ke,qGr),e(ke,B0),e(B0,HEe),e(HEe,jGr),e(B0,DGr),e(B0,jZ),e(jZ,GGr),e(B0,OGr),e(ke,VGr),e(ke,I0),e(I0,UEe),e(UEe,XGr),e(I0,zGr),e(I0,DZ),e(DZ,WGr),e(I0,QGr),e(ke,HGr),e(ke,N0),e(N0,JEe),e(JEe,UGr),e(N0,JGr),e(N0,GZ),e(GZ,YGr),e(N0,KGr),e(ke,ZGr),e(ke,q0),e(q0,YEe),e(YEe,eOr),e(q0,oOr),e(q0,OZ),e(OZ,rOr),e(q0,tOr),e(ke,aOr),e(ke,j0),e(j0,KEe),e(KEe,nOr),e(j0,sOr),e(j0,VZ),e(VZ,lOr),e(j0,iOr),e(ke,dOr),e(ke,D0),e(D0,ZEe),e(ZEe,cOr),e(D0,fOr),e(D0,XZ),e(XZ,mOr),e(D0,gOr),e(ke,hOr),e(ke,G0),e(G0,eCe),e(eCe,pOr),e(G0,uOr),e(G0,zZ),e(zZ,_Or),e(G0,bOr),e(ke,vOr),e(ke,O0),e(O0,oCe),e(oCe,FOr),e(O0,TOr),e(O0,WZ),e(WZ,MOr),e(O0,EOr),e(zr,COr),M(V0,zr,null),b(f,YOe,_),b(f,rf,_),e(rf,X0),e(X0,rCe),M(Ux,rCe,null),e(rf,wOr),e(rf,tCe),e(tCe,AOr),b(f,KOe,_),b(f,br,_),M(Jx,br,null),e(br,LOr),e(br,tf),e(tf,yOr),e(tf,QZ),e(QZ,xOr),e(tf,$Or),e(tf,HZ),e(HZ,kOr),e(tf,SOr),e(br,ROr),e(br,Yx),e(Yx,POr),e(Yx,aCe),e(aCe,BOr),e(Yx,IOr),e(br,NOr),e(br,Ut),M(Kx,Ut,null),e(Ut,qOr),e(Ut,nCe),e(nCe,jOr),e(Ut,DOr),e(Ut,af),e(af,GOr),e(af,sCe),e(sCe,OOr),e(af,VOr),e(af,UZ),e(UZ,XOr),e(af,zOr),e(Ut,WOr),M(z0,Ut,null),e(br,QOr),e(br,Wr),M(Zx,Wr,null),e(Wr,HOr),e(Wr,lCe),e(lCe,UOr),e(Wr,JOr),e(Wr,Cn),e(Cn,YOr),e(Cn,iCe),e(iCe,KOr),e(Cn,ZOr),e(Cn,dCe),e(dCe,eVr),e(Cn,oVr),e(Cn,cCe),e(cCe,rVr),e(Cn,tVr),e(Wr,aVr),e(Wr,Se),e(Se,W0),e(W0,fCe),e(fCe,nVr),e(W0,sVr),e(W0,JZ),e(JZ,lVr),e(W0,iVr),e(Se,dVr),e(Se,Q0),e(Q0,mCe),e(mCe,cVr),e(Q0,fVr),e(Q0,YZ),e(YZ,mVr),e(Q0,gVr),e(Se,hVr),e(Se,H0),e(H0,gCe),e(gCe,pVr),e(H0,uVr),e(H0,KZ),e(KZ,_Vr),e(H0,bVr),e(Se,vVr),e(Se,U0),e(U0,hCe),e(hCe,FVr),e(U0,TVr),e(U0,ZZ),e(ZZ,MVr),e(U0,EVr),e(Se,CVr),e(Se,J0),e(J0,pCe),e(pCe,wVr),e(J0,AVr),e(J0,eee),e(eee,LVr),e(J0,yVr),e(Se,xVr),e(Se,Y0),e(Y0,uCe),e(uCe,$Vr),e(Y0,kVr),e(Y0,oee),e(oee,SVr),e(Y0,RVr),e(Se,PVr),e(Se,K0),e(K0,_Ce),e(_Ce,BVr),e(K0,IVr),e(K0,ree),e(ree,NVr),e(K0,qVr),e(Se,jVr),e(Se,Z0),e(Z0,bCe),e(bCe,DVr),e(Z0,GVr),e(Z0,tee),e(tee,OVr),e(Z0,VVr),e(Se,XVr),e(Se,ew),e(ew,vCe),e(vCe,zVr),e(ew,WVr),e(ew,aee),e(aee,QVr),e(ew,HVr),e(Se,UVr),e(Se,ow),e(ow,FCe),e(FCe,JVr),e(ow,YVr),e(ow,nee),e(nee,KVr),e(ow,ZVr),e(Wr,eXr),M(rw,Wr,null),b(f,ZOe,_),b(f,nf,_),e(nf,tw),e(tw,TCe),M(e$,TCe,null),e(nf,oXr),e(nf,MCe),e(MCe,rXr),b(f,eVe,_),b(f,vr,_),M(o$,vr,null),e(vr,tXr),e(vr,sf),e(sf,aXr),e(sf,see),e(see,nXr),e(sf,sXr),e(sf,lee),e(lee,lXr),e(sf,iXr),e(vr,dXr),e(vr,r$),e(r$,cXr),e(r$,ECe),e(ECe,fXr),e(r$,mXr),e(vr,gXr),e(vr,Jt),M(t$,Jt,null),e(Jt,hXr),e(Jt,CCe),e(CCe,pXr),e(Jt,uXr),e(Jt,lf),e(lf,_Xr),e(lf,wCe),e(wCe,bXr),e(lf,vXr),e(lf,iee),e(iee,FXr),e(lf,TXr),e(Jt,MXr),M(aw,Jt,null),e(vr,EXr),e(vr,Qr),M(a$,Qr,null),e(Qr,CXr),e(Qr,ACe),e(ACe,wXr),e(Qr,AXr),e(Qr,wn),e(wn,LXr),e(wn,LCe),e(LCe,yXr),e(wn,xXr),e(wn,yCe),e(yCe,$Xr),e(wn,kXr),e(wn,xCe),e(xCe,SXr),e(wn,RXr),e(Qr,PXr),e(Qr,Re),e(Re,nw),e(nw,$Ce),e($Ce,BXr),e(nw,IXr),e(nw,dee),e(dee,NXr),e(nw,qXr),e(Re,jXr),e(Re,sw),e(sw,kCe),e(kCe,DXr),e(sw,GXr),e(sw,cee),e(cee,OXr),e(sw,VXr),e(Re,XXr),e(Re,lw),e(lw,SCe),e(SCe,zXr),e(lw,WXr),e(lw,fee),e(fee,QXr),e(lw,HXr),e(Re,UXr),e(Re,iw),e(iw,RCe),e(RCe,JXr),e(iw,YXr),e(iw,mee),e(mee,KXr),e(iw,ZXr),e(Re,ezr),e(Re,dw),e(dw,PCe),e(PCe,ozr),e(dw,rzr),e(dw,gee),e(gee,tzr),e(dw,azr),e(Re,nzr),e(Re,cw),e(cw,BCe),e(BCe,szr),e(cw,lzr),e(cw,hee),e(hee,izr),e(cw,dzr),e(Re,czr),e(Re,fw),e(fw,ICe),e(ICe,fzr),e(fw,mzr),e(fw,pee),e(pee,gzr),e(fw,hzr),e(Re,pzr),e(Re,mw),e(mw,NCe),e(NCe,uzr),e(mw,_zr),e(mw,uee),e(uee,bzr),e(mw,vzr),e(Re,Fzr),e(Re,gw),e(gw,qCe),e(qCe,Tzr),e(gw,Mzr),e(gw,_ee),e(_ee,Ezr),e(gw,Czr),e(Re,wzr),e(Re,hw),e(hw,jCe),e(jCe,Azr),e(hw,Lzr),e(hw,bee),e(bee,yzr),e(hw,xzr),e(Qr,$zr),M(pw,Qr,null),b(f,oVe,_),b(f,df,_),e(df,uw),e(uw,DCe),M(n$,DCe,null),e(df,kzr),e(df,GCe),e(GCe,Szr),b(f,rVe,_),b(f,Fr,_),M(s$,Fr,null),e(Fr,Rzr),e(Fr,cf),e(cf,Pzr),e(cf,vee),e(vee,Bzr),e(cf,Izr),e(cf,Fee),e(Fee,Nzr),e(cf,qzr),e(Fr,jzr),e(Fr,l$),e(l$,Dzr),e(l$,OCe),e(OCe,Gzr),e(l$,Ozr),e(Fr,Vzr),e(Fr,Yt),M(i$,Yt,null),e(Yt,Xzr),e(Yt,VCe),e(VCe,zzr),e(Yt,Wzr),e(Yt,ff),e(ff,Qzr),e(ff,XCe),e(XCe,Hzr),e(ff,Uzr),e(ff,Tee),e(Tee,Jzr),e(ff,Yzr),e(Yt,Kzr),M(_w,Yt,null),e(Fr,Zzr),e(Fr,Hr),M(d$,Hr,null),e(Hr,eWr),e(Hr,zCe),e(zCe,oWr),e(Hr,rWr),e(Hr,An),e(An,tWr),e(An,WCe),e(WCe,aWr),e(An,nWr),e(An,QCe),e(QCe,sWr),e(An,lWr),e(An,HCe),e(HCe,iWr),e(An,dWr),e(Hr,cWr),e(Hr,Ve),e(Ve,bw),e(bw,UCe),e(UCe,fWr),e(bw,mWr),e(bw,Mee),e(Mee,gWr),e(bw,hWr),e(Ve,pWr),e(Ve,vw),e(vw,JCe),e(JCe,uWr),e(vw,_Wr),e(vw,Eee),e(Eee,bWr),e(vw,vWr),e(Ve,FWr),e(Ve,Fw),e(Fw,YCe),e(YCe,TWr),e(Fw,MWr),e(Fw,Cee),e(Cee,EWr),e(Fw,CWr),e(Ve,wWr),e(Ve,Tw),e(Tw,KCe),e(KCe,AWr),e(Tw,LWr),e(Tw,wee),e(wee,yWr),e(Tw,xWr),e(Ve,$Wr),e(Ve,Mw),e(Mw,ZCe),e(ZCe,kWr),e(Mw,SWr),e(Mw,Aee),e(Aee,RWr),e(Mw,PWr),e(Ve,BWr),e(Ve,Ew),e(Ew,e0e),e(e0e,IWr),e(Ew,NWr),e(Ew,Lee),e(Lee,qWr),e(Ew,jWr),e(Ve,DWr),e(Ve,Cw),e(Cw,o0e),e(o0e,GWr),e(Cw,OWr),e(Cw,yee),e(yee,VWr),e(Cw,XWr),e(Ve,zWr),e(Ve,ww),e(ww,r0e),e(r0e,WWr),e(ww,QWr),e(ww,xee),e(xee,HWr),e(ww,UWr),e(Hr,JWr),M(Aw,Hr,null),b(f,tVe,_),b(f,mf,_),e(mf,Lw),e(Lw,t0e),M(c$,t0e,null),e(mf,YWr),e(mf,a0e),e(a0e,KWr),b(f,aVe,_),b(f,Tr,_),M(f$,Tr,null),e(Tr,ZWr),e(Tr,gf),e(gf,eQr),e(gf,$ee),e($ee,oQr),e(gf,rQr),e(gf,kee),e(kee,tQr),e(gf,aQr),e(Tr,nQr),e(Tr,m$),e(m$,sQr),e(m$,n0e),e(n0e,lQr),e(m$,iQr),e(Tr,dQr),e(Tr,Kt),M(g$,Kt,null),e(Kt,cQr),e(Kt,s0e),e(s0e,fQr),e(Kt,mQr),e(Kt,hf),e(hf,gQr),e(hf,l0e),e(l0e,hQr),e(hf,pQr),e(hf,See),e(See,uQr),e(hf,_Qr),e(Kt,bQr),M(yw,Kt,null),e(Tr,vQr),e(Tr,Ur),M(h$,Ur,null),e(Ur,FQr),e(Ur,i0e),e(i0e,TQr),e(Ur,MQr),e(Ur,Ln),e(Ln,EQr),e(Ln,d0e),e(d0e,CQr),e(Ln,wQr),e(Ln,c0e),e(c0e,AQr),e(Ln,LQr),e(Ln,f0e),e(f0e,yQr),e(Ln,xQr),e(Ur,$Qr),e(Ur,Xe),e(Xe,xw),e(xw,m0e),e(m0e,kQr),e(xw,SQr),e(xw,Ree),e(Ree,RQr),e(xw,PQr),e(Xe,BQr),e(Xe,$w),e($w,g0e),e(g0e,IQr),e($w,NQr),e($w,Pee),e(Pee,qQr),e($w,jQr),e(Xe,DQr),e(Xe,kw),e(kw,h0e),e(h0e,GQr),e(kw,OQr),e(kw,Bee),e(Bee,VQr),e(kw,XQr),e(Xe,zQr),e(Xe,Sw),e(Sw,p0e),e(p0e,WQr),e(Sw,QQr),e(Sw,Iee),e(Iee,HQr),e(Sw,UQr),e(Xe,JQr),e(Xe,Rw),e(Rw,u0e),e(u0e,YQr),e(Rw,KQr),e(Rw,Nee),e(Nee,ZQr),e(Rw,eHr),e(Xe,oHr),e(Xe,Pw),e(Pw,_0e),e(_0e,rHr),e(Pw,tHr),e(Pw,qee),e(qee,aHr),e(Pw,nHr),e(Xe,sHr),e(Xe,Bw),e(Bw,b0e),e(b0e,lHr),e(Bw,iHr),e(Bw,jee),e(jee,dHr),e(Bw,cHr),e(Xe,fHr),e(Xe,Iw),e(Iw,v0e),e(v0e,mHr),e(Iw,gHr),e(Iw,Dee),e(Dee,hHr),e(Iw,pHr),e(Ur,uHr),M(Nw,Ur,null),b(f,nVe,_),b(f,pf,_),e(pf,qw),e(qw,F0e),M(p$,F0e,null),e(pf,_Hr),e(pf,T0e),e(T0e,bHr),b(f,sVe,_),b(f,Mr,_),M(u$,Mr,null),e(Mr,vHr),e(Mr,uf),e(uf,FHr),e(uf,Gee),e(Gee,THr),e(uf,MHr),e(uf,Oee),e(Oee,EHr),e(uf,CHr),e(Mr,wHr),e(Mr,_$),e(_$,AHr),e(_$,M0e),e(M0e,LHr),e(_$,yHr),e(Mr,xHr),e(Mr,Zt),M(b$,Zt,null),e(Zt,$Hr),e(Zt,E0e),e(E0e,kHr),e(Zt,SHr),e(Zt,_f),e(_f,RHr),e(_f,C0e),e(C0e,PHr),e(_f,BHr),e(_f,Vee),e(Vee,IHr),e(_f,NHr),e(Zt,qHr),M(jw,Zt,null),e(Mr,jHr),e(Mr,Jr),M(v$,Jr,null),e(Jr,DHr),e(Jr,w0e),e(w0e,GHr),e(Jr,OHr),e(Jr,yn),e(yn,VHr),e(yn,A0e),e(A0e,XHr),e(yn,zHr),e(yn,L0e),e(L0e,WHr),e(yn,QHr),e(yn,y0e),e(y0e,HHr),e(yn,UHr),e(Jr,JHr),e(Jr,x0e),e(x0e,Dw),e(Dw,$0e),e($0e,YHr),e(Dw,KHr),e(Dw,Xee),e(Xee,ZHr),e(Dw,eUr),e(Jr,oUr),M(Gw,Jr,null),b(f,lVe,_),b(f,bf,_),e(bf,Ow),e(Ow,k0e),M(F$,k0e,null),e(bf,rUr),e(bf,S0e),e(S0e,tUr),b(f,iVe,_),b(f,Er,_),M(T$,Er,null),e(Er,aUr),e(Er,vf),e(vf,nUr),e(vf,zee),e(zee,sUr),e(vf,lUr),e(vf,Wee),e(Wee,iUr),e(vf,dUr),e(Er,cUr),e(Er,M$),e(M$,fUr),e(M$,R0e),e(R0e,mUr),e(M$,gUr),e(Er,hUr),e(Er,ea),M(E$,ea,null),e(ea,pUr),e(ea,P0e),e(P0e,uUr),e(ea,_Ur),e(ea,Ff),e(Ff,bUr),e(Ff,B0e),e(B0e,vUr),e(Ff,FUr),e(Ff,Qee),e(Qee,TUr),e(Ff,MUr),e(ea,EUr),M(Vw,ea,null),e(Er,CUr),e(Er,Yr),M(C$,Yr,null),e(Yr,wUr),e(Yr,I0e),e(I0e,AUr),e(Yr,LUr),e(Yr,xn),e(xn,yUr),e(xn,N0e),e(N0e,xUr),e(xn,$Ur),e(xn,q0e),e(q0e,kUr),e(xn,SUr),e(xn,j0e),e(j0e,RUr),e(xn,PUr),e(Yr,BUr),e(Yr,w$),e(w$,Xw),e(Xw,D0e),e(D0e,IUr),e(Xw,NUr),e(Xw,Hee),e(Hee,qUr),e(Xw,jUr),e(w$,DUr),e(w$,zw),e(zw,G0e),e(G0e,GUr),e(zw,OUr),e(zw,Uee),e(Uee,VUr),e(zw,XUr),e(Yr,zUr),M(Ww,Yr,null),b(f,dVe,_),b(f,Tf,_),e(Tf,Qw),e(Qw,O0e),M(A$,O0e,null),e(Tf,WUr),e(Tf,V0e),e(V0e,QUr),b(f,cVe,_),b(f,Cr,_),M(L$,Cr,null),e(Cr,HUr),e(Cr,Mf),e(Mf,UUr),e(Mf,Jee),e(Jee,JUr),e(Mf,YUr),e(Mf,Yee),e(Yee,KUr),e(Mf,ZUr),e(Cr,eJr),e(Cr,y$),e(y$,oJr),e(y$,X0e),e(X0e,rJr),e(y$,tJr),e(Cr,aJr),e(Cr,oa),M(x$,oa,null),e(oa,nJr),e(oa,z0e),e(z0e,sJr),e(oa,lJr),e(oa,Ef),e(Ef,iJr),e(Ef,W0e),e(W0e,dJr),e(Ef,cJr),e(Ef,Kee),e(Kee,fJr),e(Ef,mJr),e(oa,gJr),M(Hw,oa,null),e(Cr,hJr),e(Cr,Kr),M($$,Kr,null),e(Kr,pJr),e(Kr,Q0e),e(Q0e,uJr),e(Kr,_Jr),e(Kr,$n),e($n,bJr),e($n,H0e),e(H0e,vJr),e($n,FJr),e($n,U0e),e(U0e,TJr),e($n,MJr),e($n,J0e),e(J0e,EJr),e($n,CJr),e(Kr,wJr),e(Kr,Y0e),e(Y0e,Uw),e(Uw,K0e),e(K0e,AJr),e(Uw,LJr),e(Uw,Zee),e(Zee,yJr),e(Uw,xJr),e(Kr,$Jr),M(Jw,Kr,null),fVe=!0},p(f,[_]){const k$={};_&2&&(k$.$$scope={dirty:_,ctx:f}),Sf.$set(k$);const Z0e={};_&2&&(Z0e.$$scope={dirty:_,ctx:f}),jg.$set(Z0e);const ewe={};_&2&&(ewe.$$scope={dirty:_,ctx:f}),Th.$set(ewe);const owe={};_&2&&(owe.$$scope={dirty:_,ctx:f}),rp.$set(owe);const S$={};_&2&&(S$.$$scope={dirty:_,ctx:f}),tp.$set(S$);const rwe={};_&2&&(rwe.$$scope={dirty:_,ctx:f}),Ep.$set(rwe);const kn={};_&2&&(kn.$$scope={dirty:_,ctx:f}),Cp.$set(kn);const twe={};_&2&&(twe.$$scope={dirty:_,ctx:f}),Lp.$set(twe);const awe={};_&2&&(awe.$$scope={dirty:_,ctx:f}),A_.$set(awe);const nwe={};_&2&&(nwe.$$scope={dirty:_,ctx:f}),y_.$set(nwe);const R$={};_&2&&(R$.$$scope={dirty:_,ctx:f}),v1.$set(R$);const swe={};_&2&&(swe.$$scope={dirty:_,ctx:f}),T1.$set(swe);const P$={};_&2&&(P$.$$scope={dirty:_,ctx:f}),l2.$set(P$);const lwe={};_&2&&(lwe.$$scope={dirty:_,ctx:f}),d2.$set(lwe);const B$={};_&2&&(B$.$$scope={dirty:_,ctx:f}),Q2.$set(B$);const iwe={};_&2&&(iwe.$$scope={dirty:_,ctx:f}),U2.$set(iwe);const dwe={};_&2&&(dwe.$$scope={dirty:_,ctx:f}),hb.$set(dwe);const cwe={};_&2&&(cwe.$$scope={dirty:_,ctx:f}),ub.$set(cwe);const Cf={};_&2&&(Cf.$$scope={dirty:_,ctx:f}),m4.$set(Cf);const fwe={};_&2&&(fwe.$$scope={dirty:_,ctx:f}),h4.$set(fwe);const mwe={};_&2&&(mwe.$$scope={dirty:_,ctx:f}),z4.$set(mwe);const gwe={};_&2&&(gwe.$$scope={dirty:_,ctx:f}),Q4.$set(gwe);const I$={};_&2&&(I$.$$scope={dirty:_,ctx:f}),e5.$set(I$);const hwe={};_&2&&(hwe.$$scope={dirty:_,ctx:f}),r5.$set(hwe);const pwe={};_&2&&(pwe.$$scope={dirty:_,ctx:f}),j5.$set(pwe);const uwe={};_&2&&(uwe.$$scope={dirty:_,ctx:f}),G5.$set(uwe);const rt={};_&2&&(rt.$$scope={dirty:_,ctx:f}),xv.$set(rt);const N$={};_&2&&(N$.$$scope={dirty:_,ctx:f}),kv.$set(N$);const _we={};_&2&&(_we.$$scope={dirty:_,ctx:f}),Pv.$set(_we);const q$={};_&2&&(q$.$$scope={dirty:_,ctx:f}),Iv.$set(q$);const bwe={};_&2&&(bwe.$$scope={dirty:_,ctx:f}),Jv.$set(bwe);const tt={};_&2&&(tt.$$scope={dirty:_,ctx:f}),Kv.$set(tt);const vwe={};_&2&&(vwe.$$scope={dirty:_,ctx:f}),o3.$set(vwe);const wf={};_&2&&(wf.$$scope={dirty:_,ctx:f}),t3.$set(wf);const Fwe={};_&2&&(Fwe.$$scope={dirty:_,ctx:f}),s3.$set(Fwe);const Twe={};_&2&&(Twe.$$scope={dirty:_,ctx:f}),i3.$set(Twe);const L={};_&2&&(L.$$scope={dirty:_,ctx:f}),v3.$set(L);const Yw={};_&2&&(Yw.$$scope={dirty:_,ctx:f}),T3.$set(Yw);const Mwe={};_&2&&(Mwe.$$scope={dirty:_,ctx:f}),y3.$set(Mwe);const Ewe={};_&2&&(Ewe.$$scope={dirty:_,ctx:f}),$3.$set(Ewe);const Kw={};_&2&&(Kw.$$scope={dirty:_,ctx:f}),O3.$set(Kw);const Cwe={};_&2&&(Cwe.$$scope={dirty:_,ctx:f}),X3.$set(Cwe);const wwe={};_&2&&(wwe.$$scope={dirty:_,ctx:f}),H3.$set(wwe);const Zw={};_&2&&(Zw.$$scope={dirty:_,ctx:f}),J3.$set(Zw);const Awe={};_&2&&(Awe.$$scope={dirty:_,ctx:f}),tF.$set(Awe);const Lwe={};_&2&&(Lwe.$$scope={dirty:_,ctx:f}),nF.$set(Lwe);const eA={};_&2&&(eA.$$scope={dirty:_,ctx:f}),cF.$set(eA);const ywe={};_&2&&(ywe.$$scope={dirty:_,ctx:f}),mF.$set(ywe);const xwe={};_&2&&(xwe.$$scope={dirty:_,ctx:f}),uF.$set(xwe);const oA={};_&2&&(oA.$$scope={dirty:_,ctx:f}),bF.$set(oA);const $we={};_&2&&($we.$$scope={dirty:_,ctx:f}),TF.$set($we);const kwe={};_&2&&(kwe.$$scope={dirty:_,ctx:f}),EF.$set(kwe);const rA={};_&2&&(rA.$$scope={dirty:_,ctx:f}),xF.$set(rA);const Swe={};_&2&&(Swe.$$scope={dirty:_,ctx:f}),kF.$set(Swe);const Rwe={};_&2&&(Rwe.$$scope={dirty:_,ctx:f}),PF.$set(Rwe);const tA={};_&2&&(tA.$$scope={dirty:_,ctx:f}),IF.$set(tA);const Pwe={};_&2&&(Pwe.$$scope={dirty:_,ctx:f}),$6.$set(Pwe);const Bwe={};_&2&&(Bwe.$$scope={dirty:_,ctx:f}),S6.$set(Bwe);const aA={};_&2&&(aA.$$scope={dirty:_,ctx:f}),rT.$set(aA);const Iwe={};_&2&&(Iwe.$$scope={dirty:_,ctx:f}),aT.$set(Iwe);const Nwe={};_&2&&(Nwe.$$scope={dirty:_,ctx:f}),vT.$set(Nwe);const nA={};_&2&&(nA.$$scope={dirty:_,ctx:f}),TT.$set(nA);const qwe={};_&2&&(qwe.$$scope={dirty:_,ctx:f}),AT.$set(qwe);const jwe={};_&2&&(jwe.$$scope={dirty:_,ctx:f}),yT.$set(jwe);const sA={};_&2&&(sA.$$scope={dirty:_,ctx:f}),UT.$set(sA);const Dwe={};_&2&&(Dwe.$$scope={dirty:_,ctx:f}),YT.$set(Dwe);const Gwe={};_&2&&(Gwe.$$scope={dirty:_,ctx:f}),iM.$set(Gwe);const lA={};_&2&&(lA.$$scope={dirty:_,ctx:f}),cM.$set(lA);const Owe={};_&2&&(Owe.$$scope={dirty:_,ctx:f}),NM.$set(Owe);const Vwe={};_&2&&(Vwe.$$scope={dirty:_,ctx:f}),jM.$set(Vwe);const iA={};_&2&&(iA.$$scope={dirty:_,ctx:f}),tE.$set(iA);const Xwe={};_&2&&(Xwe.$$scope={dirty:_,ctx:f}),nE.$set(Xwe);const zwe={};_&2&&(zwe.$$scope={dirty:_,ctx:f}),iE.$set(zwe);const dA={};_&2&&(dA.$$scope={dirty:_,ctx:f}),cE.$set(dA);const Wwe={};_&2&&(Wwe.$$scope={dirty:_,ctx:f}),mE.$set(Wwe);const Qwe={};_&2&&(Qwe.$$scope={dirty:_,ctx:f}),hE.$set(Qwe);const cA={};_&2&&(cA.$$scope={dirty:_,ctx:f}),BE.$set(cA);const Hwe={};_&2&&(Hwe.$$scope={dirty:_,ctx:f}),NE.$set(Hwe);const Uwe={};_&2&&(Uwe.$$scope={dirty:_,ctx:f}),aC.$set(Uwe);const fA={};_&2&&(fA.$$scope={dirty:_,ctx:f}),sC.$set(fA);const Jwe={};_&2&&(Jwe.$$scope={dirty:_,ctx:f}),iC.$set(Jwe);const Ywe={};_&2&&(Ywe.$$scope={dirty:_,ctx:f}),cC.$set(Ywe);const mA={};_&2&&(mA.$$scope={dirty:_,ctx:f}),mC.$set(mA);const Kwe={};_&2&&(Kwe.$$scope={dirty:_,ctx:f}),hC.$set(Kwe);const Zwe={};_&2&&(Zwe.$$scope={dirty:_,ctx:f}),OC.$set(Zwe);const gA={};_&2&&(gA.$$scope={dirty:_,ctx:f}),XC.$set(gA);const eAe={};_&2&&(eAe.$$scope={dirty:_,ctx:f}),o0.$set(eAe);const oAe={};_&2&&(oAe.$$scope={dirty:_,ctx:f}),t0.$set(oAe);const hA={};_&2&&(hA.$$scope={dirty:_,ctx:f}),_0.$set(hA);const rAe={};_&2&&(rAe.$$scope={dirty:_,ctx:f}),v0.$set(rAe);const tAe={};_&2&&(tAe.$$scope={dirty:_,ctx:f}),$0.$set(tAe);const pA={};_&2&&(pA.$$scope={dirty:_,ctx:f}),S0.$set(pA);const aAe={};_&2&&(aAe.$$scope={dirty:_,ctx:f}),V0.$set(aAe);const nAe={};_&2&&(nAe.$$scope={dirty:_,ctx:f}),z0.$set(nAe);const uA={};_&2&&(uA.$$scope={dirty:_,ctx:f}),rw.$set(uA);const sAe={};_&2&&(sAe.$$scope={dirty:_,ctx:f}),aw.$set(sAe);const lAe={};_&2&&(lAe.$$scope={dirty:_,ctx:f}),pw.$set(lAe);const _A={};_&2&&(_A.$$scope={dirty:_,ctx:f}),_w.$set(_A);const iAe={};_&2&&(iAe.$$scope={dirty:_,ctx:f}),Aw.$set(iAe);const dAe={};_&2&&(dAe.$$scope={dirty:_,ctx:f}),yw.$set(dAe);const bA={};_&2&&(bA.$$scope={dirty:_,ctx:f}),Nw.$set(bA);const cAe={};_&2&&(cAe.$$scope={dirty:_,ctx:f}),jw.$set(cAe);const fAe={};_&2&&(fAe.$$scope={dirty:_,ctx:f}),Gw.$set(fAe);const vA={};_&2&&(vA.$$scope={dirty:_,ctx:f}),Vw.$set(vA);const mAe={};_&2&&(mAe.$$scope={dirty:_,ctx:f}),Ww.$set(mAe);const gAe={};_&2&&(gAe.$$scope={dirty:_,ctx:f}),Hw.$set(gAe);const FA={};_&2&&(FA.$$scope={dirty:_,ctx:f}),Jw.$set(FA)},i(f){fVe||(E(d.$$.fragment,f),E(ya.$$.fragment,f),E(Ty.$$.fragment,f),E(My.$$.fragment,f),E(Sf.$$.fragment,f),E(Ey.$$.fragment,f),E(Cy.$$.fragment,f),E(Ly.$$.fragment,f),E(jg.$$.fragment,f),E(yy.$$.fragment,f),E(xy.$$.fragment,f),E($y.$$.fragment,f),E(Ry.$$.fragment,f),E(Th.$$.fragment,f),E(Py.$$.fragment,f),E(By.$$.fragment,f),E(Iy.$$.fragment,f),E(jy.$$.fragment,f),E(rp.$$.fragment,f),E(tp.$$.fragment,f),E(Dy.$$.fragment,f),E(Gy.$$.fragment,f),E(Oy.$$.fragment,f),E(zy.$$.fragment,f),E(Ep.$$.fragment,f),E(Cp.$$.fragment,f),E(Wy.$$.fragment,f),E(Qy.$$.fragment,f),E(Hy.$$.fragment,f),E(Jy.$$.fragment,f),E(Lp.$$.fragment,f),E(Yy.$$.fragment,f),E(A_.$$.fragment,f),E(Ky.$$.fragment,f),E(Zy.$$.fragment,f),E(o7.$$.fragment,f),E(y_.$$.fragment,f),E(r7.$$.fragment,f),E(v1.$$.fragment,f),E(t7.$$.fragment,f),E(a7.$$.fragment,f),E(s7.$$.fragment,f),E(T1.$$.fragment,f),E(l7.$$.fragment,f),E(l2.$$.fragment,f),E(i7.$$.fragment,f),E(d7.$$.fragment,f),E(f7.$$.fragment,f),E(d2.$$.fragment,f),E(m7.$$.fragment,f),E(Q2.$$.fragment,f),E(g7.$$.fragment,f),E(h7.$$.fragment,f),E(u7.$$.fragment,f),E(U2.$$.fragment,f),E(_7.$$.fragment,f),E(hb.$$.fragment,f),E(b7.$$.fragment,f),E(v7.$$.fragment,f),E(T7.$$.fragment,f),E(ub.$$.fragment,f),E(M7.$$.fragment,f),E(m4.$$.fragment,f),E(E7.$$.fragment,f),E(C7.$$.fragment,f),E(A7.$$.fragment,f),E(h4.$$.fragment,f),E(L7.$$.fragment,f),E(z4.$$.fragment,f),E(y7.$$.fragment,f),E(x7.$$.fragment,f),E(k7.$$.fragment,f),E(Q4.$$.fragment,f),E(S7.$$.fragment,f),E(e5.$$.fragment,f),E(R7.$$.fragment,f),E(P7.$$.fragment,f),E(I7.$$.fragment,f),E(r5.$$.fragment,f),E(N7.$$.fragment,f),E(j5.$$.fragment,f),E(q7.$$.fragment,f),E(j7.$$.fragment,f),E(G7.$$.fragment,f),E(G5.$$.fragment,f),E(O7.$$.fragment,f),E(xv.$$.fragment,f),E(V7.$$.fragment,f),E(X7.$$.fragment,f),E(W7.$$.fragment,f),E(kv.$$.fragment,f),E(Q7.$$.fragment,f),E(Pv.$$.fragment,f),E(H7.$$.fragment,f),E(U7.$$.fragment,f),E(Y7.$$.fragment,f),E(Iv.$$.fragment,f),E(K7.$$.fragment,f),E(Jv.$$.fragment,f),E(Z7.$$.fragment,f),E(e8.$$.fragment,f),E(r8.$$.fragment,f),E(Kv.$$.fragment,f),E(t8.$$.fragment,f),E(o3.$$.fragment,f),E(a8.$$.fragment,f),E(n8.$$.fragment,f),E(l8.$$.fragment,f),E(t3.$$.fragment,f),E(i8.$$.fragment,f),E(s3.$$.fragment,f),E(d8.$$.fragment,f),E(c8.$$.fragment,f),E(m8.$$.fragment,f),E(i3.$$.fragment,f),E(g8.$$.fragment,f),E(v3.$$.fragment,f),E(h8.$$.fragment,f),E(p8.$$.fragment,f),E(_8.$$.fragment,f),E(T3.$$.fragment,f),E(b8.$$.fragment,f),E(y3.$$.fragment,f),E(v8.$$.fragment,f),E(F8.$$.fragment,f),E(M8.$$.fragment,f),E($3.$$.fragment,f),E(E8.$$.fragment,f),E(O3.$$.fragment,f),E(C8.$$.fragment,f),E(w8.$$.fragment,f),E(L8.$$.fragment,f),E(X3.$$.fragment,f),E(y8.$$.fragment,f),E(H3.$$.fragment,f),E($8.$$.fragment,f),E(k8.$$.fragment,f),E(R8.$$.fragment,f),E(J3.$$.fragment,f),E(P8.$$.fragment,f),E(tF.$$.fragment,f),E(B8.$$.fragment,f),E(I8.$$.fragment,f),E(q8.$$.fragment,f),E(nF.$$.fragment,f),E(j8.$$.fragment,f),E(cF.$$.fragment,f),E(D8.$$.fragment,f),E(G8.$$.fragment,f),E(V8.$$.fragment,f),E(mF.$$.fragment,f),E(X8.$$.fragment,f),E(uF.$$.fragment,f),E(W8.$$.fragment,f),E(Q8.$$.fragment,f),E(U8.$$.fragment,f),E(bF.$$.fragment,f),E(J8.$$.fragment,f),E(TF.$$.fragment,f),E(Y8.$$.fragment,f),E(K8.$$.fragment,f),E(e9.$$.fragment,f),E(EF.$$.fragment,f),E(o9.$$.fragment,f),E(xF.$$.fragment,f),E(r9.$$.fragment,f),E(t9.$$.fragment,f),E(n9.$$.fragment,f),E(kF.$$.fragment,f),E(s9.$$.fragment,f),E(PF.$$.fragment,f),E(l9.$$.fragment,f),E(i9.$$.fragment,f),E(c9.$$.fragment,f),E(IF.$$.fragment,f),E(f9.$$.fragment,f),E($6.$$.fragment,f),E(m9.$$.fragment,f),E(g9.$$.fragment,f),E(p9.$$.fragment,f),E(S6.$$.fragment,f),E(u9.$$.fragment,f),E(rT.$$.fragment,f),E(_9.$$.fragment,f),E(b9.$$.fragment,f),E(F9.$$.fragment,f),E(aT.$$.fragment,f),E(T9.$$.fragment,f),E(vT.$$.fragment,f),E(M9.$$.fragment,f),E(E9.$$.fragment,f),E(w9.$$.fragment,f),E(TT.$$.fragment,f),E(A9.$$.fragment,f),E(AT.$$.fragment,f),E(L9.$$.fragment,f),E(y9.$$.fragment,f),E($9.$$.fragment,f),E(yT.$$.fragment,f),E(k9.$$.fragment,f),E(UT.$$.fragment,f),E(S9.$$.fragment,f),E(R9.$$.fragment,f),E(B9.$$.fragment,f),E(YT.$$.fragment,f),E(I9.$$.fragment,f),E(iM.$$.fragment,f),E(N9.$$.fragment,f),E(q9.$$.fragment,f),E(D9.$$.fragment,f),E(cM.$$.fragment,f),E(G9.$$.fragment,f),E(NM.$$.fragment,f),E(O9.$$.fragment,f),E(V9.$$.fragment,f),E(z9.$$.fragment,f),E(jM.$$.fragment,f),E(W9.$$.fragment,f),E(tE.$$.fragment,f),E(Q9.$$.fragment,f),E(H9.$$.fragment,f),E(J9.$$.fragment,f),E(nE.$$.fragment,f),E(Y9.$$.fragment,f),E(iE.$$.fragment,f),E(Z9.$$.fragment,f),E(ex.$$.fragment,f),E(rx.$$.fragment,f),E(cE.$$.fragment,f),E(tx.$$.fragment,f),E(mE.$$.fragment,f),E(ax.$$.fragment,f),E(nx.$$.fragment,f),E(lx.$$.fragment,f),E(hE.$$.fragment,f),E(ix.$$.fragment,f),E(BE.$$.fragment,f),E(dx.$$.fragment,f),E(cx.$$.fragment,f),E(mx.$$.fragment,f),E(NE.$$.fragment,f),E(gx.$$.fragment,f),E(aC.$$.fragment,f),E(hx.$$.fragment,f),E(px.$$.fragment,f),E(_x.$$.fragment,f),E(sC.$$.fragment,f),E(bx.$$.fragment,f),E(iC.$$.fragment,f),E(vx.$$.fragment,f),E(Fx.$$.fragment,f),E(Mx.$$.fragment,f),E(cC.$$.fragment,f),E(Ex.$$.fragment,f),E(mC.$$.fragment,f),E(Cx.$$.fragment,f),E(wx.$$.fragment,f),E(Lx.$$.fragment,f),E(hC.$$.fragment,f),E(yx.$$.fragment,f),E(OC.$$.fragment,f),E(xx.$$.fragment,f),E($x.$$.fragment,f),E(Sx.$$.fragment,f),E(XC.$$.fragment,f),E(Rx.$$.fragment,f),E(o0.$$.fragment,f),E(Px.$$.fragment,f),E(Bx.$$.fragment,f),E(Nx.$$.fragment,f),E(t0.$$.fragment,f),E(qx.$$.fragment,f),E(_0.$$.fragment,f),E(jx.$$.fragment,f),E(Dx.$$.fragment,f),E(Ox.$$.fragment,f),E(v0.$$.fragment,f),E(Vx.$$.fragment,f),E($0.$$.fragment,f),E(Xx.$$.fragment,f),E(zx.$$.fragment,f),E(Qx.$$.fragment,f),E(S0.$$.fragment,f),E(Hx.$$.fragment,f),E(V0.$$.fragment,f),E(Ux.$$.fragment,f),E(Jx.$$.fragment,f),E(Kx.$$.fragment,f),E(z0.$$.fragment,f),E(Zx.$$.fragment,f),E(rw.$$.fragment,f),E(e$.$$.fragment,f),E(o$.$$.fragment,f),E(t$.$$.fragment,f),E(aw.$$.fragment,f),E(a$.$$.fragment,f),E(pw.$$.fragment,f),E(n$.$$.fragment,f),E(s$.$$.fragment,f),E(i$.$$.fragment,f),E(_w.$$.fragment,f),E(d$.$$.fragment,f),E(Aw.$$.fragment,f),E(c$.$$.fragment,f),E(f$.$$.fragment,f),E(g$.$$.fragment,f),E(yw.$$.fragment,f),E(h$.$$.fragment,f),E(Nw.$$.fragment,f),E(p$.$$.fragment,f),E(u$.$$.fragment,f),E(b$.$$.fragment,f),E(jw.$$.fragment,f),E(v$.$$.fragment,f),E(Gw.$$.fragment,f),E(F$.$$.fragment,f),E(T$.$$.fragment,f),E(E$.$$.fragment,f),E(Vw.$$.fragment,f),E(C$.$$.fragment,f),E(Ww.$$.fragment,f),E(A$.$$.fragment,f),E(L$.$$.fragment,f),E(x$.$$.fragment,f),E(Hw.$$.fragment,f),E($$.$$.fragment,f),E(Jw.$$.fragment,f),fVe=!0)},o(f){C(d.$$.fragment,f),C(ya.$$.fragment,f),C(Ty.$$.fragment,f),C(My.$$.fragment,f),C(Sf.$$.fragment,f),C(Ey.$$.fragment,f),C(Cy.$$.fragment,f),C(Ly.$$.fragment,f),C(jg.$$.fragment,f),C(yy.$$.fragment,f),C(xy.$$.fragment,f),C($y.$$.fragment,f),C(Ry.$$.fragment,f),C(Th.$$.fragment,f),C(Py.$$.fragment,f),C(By.$$.fragment,f),C(Iy.$$.fragment,f),C(jy.$$.fragment,f),C(rp.$$.fragment,f),C(tp.$$.fragment,f),C(Dy.$$.fragment,f),C(Gy.$$.fragment,f),C(Oy.$$.fragment,f),C(zy.$$.fragment,f),C(Ep.$$.fragment,f),C(Cp.$$.fragment,f),C(Wy.$$.fragment,f),C(Qy.$$.fragment,f),C(Hy.$$.fragment,f),C(Jy.$$.fragment,f),C(Lp.$$.fragment,f),C(Yy.$$.fragment,f),C(A_.$$.fragment,f),C(Ky.$$.fragment,f),C(Zy.$$.fragment,f),C(o7.$$.fragment,f),C(y_.$$.fragment,f),C(r7.$$.fragment,f),C(v1.$$.fragment,f),C(t7.$$.fragment,f),C(a7.$$.fragment,f),C(s7.$$.fragment,f),C(T1.$$.fragment,f),C(l7.$$.fragment,f),C(l2.$$.fragment,f),C(i7.$$.fragment,f),C(d7.$$.fragment,f),C(f7.$$.fragment,f),C(d2.$$.fragment,f),C(m7.$$.fragment,f),C(Q2.$$.fragment,f),C(g7.$$.fragment,f),C(h7.$$.fragment,f),C(u7.$$.fragment,f),C(U2.$$.fragment,f),C(_7.$$.fragment,f),C(hb.$$.fragment,f),C(b7.$$.fragment,f),C(v7.$$.fragment,f),C(T7.$$.fragment,f),C(ub.$$.fragment,f),C(M7.$$.fragment,f),C(m4.$$.fragment,f),C(E7.$$.fragment,f),C(C7.$$.fragment,f),C(A7.$$.fragment,f),C(h4.$$.fragment,f),C(L7.$$.fragment,f),C(z4.$$.fragment,f),C(y7.$$.fragment,f),C(x7.$$.fragment,f),C(k7.$$.fragment,f),C(Q4.$$.fragment,f),C(S7.$$.fragment,f),C(e5.$$.fragment,f),C(R7.$$.fragment,f),C(P7.$$.fragment,f),C(I7.$$.fragment,f),C(r5.$$.fragment,f),C(N7.$$.fragment,f),C(j5.$$.fragment,f),C(q7.$$.fragment,f),C(j7.$$.fragment,f),C(G7.$$.fragment,f),C(G5.$$.fragment,f),C(O7.$$.fragment,f),C(xv.$$.fragment,f),C(V7.$$.fragment,f),C(X7.$$.fragment,f),C(W7.$$.fragment,f),C(kv.$$.fragment,f),C(Q7.$$.fragment,f),C(Pv.$$.fragment,f),C(H7.$$.fragment,f),C(U7.$$.fragment,f),C(Y7.$$.fragment,f),C(Iv.$$.fragment,f),C(K7.$$.fragment,f),C(Jv.$$.fragment,f),C(Z7.$$.fragment,f),C(e8.$$.fragment,f),C(r8.$$.fragment,f),C(Kv.$$.fragment,f),C(t8.$$.fragment,f),C(o3.$$.fragment,f),C(a8.$$.fragment,f),C(n8.$$.fragment,f),C(l8.$$.fragment,f),C(t3.$$.fragment,f),C(i8.$$.fragment,f),C(s3.$$.fragment,f),C(d8.$$.fragment,f),C(c8.$$.fragment,f),C(m8.$$.fragment,f),C(i3.$$.fragment,f),C(g8.$$.fragment,f),C(v3.$$.fragment,f),C(h8.$$.fragment,f),C(p8.$$.fragment,f),C(_8.$$.fragment,f),C(T3.$$.fragment,f),C(b8.$$.fragment,f),C(y3.$$.fragment,f),C(v8.$$.fragment,f),C(F8.$$.fragment,f),C(M8.$$.fragment,f),C($3.$$.fragment,f),C(E8.$$.fragment,f),C(O3.$$.fragment,f),C(C8.$$.fragment,f),C(w8.$$.fragment,f),C(L8.$$.fragment,f),C(X3.$$.fragment,f),C(y8.$$.fragment,f),C(H3.$$.fragment,f),C($8.$$.fragment,f),C(k8.$$.fragment,f),C(R8.$$.fragment,f),C(J3.$$.fragment,f),C(P8.$$.fragment,f),C(tF.$$.fragment,f),C(B8.$$.fragment,f),C(I8.$$.fragment,f),C(q8.$$.fragment,f),C(nF.$$.fragment,f),C(j8.$$.fragment,f),C(cF.$$.fragment,f),C(D8.$$.fragment,f),C(G8.$$.fragment,f),C(V8.$$.fragment,f),C(mF.$$.fragment,f),C(X8.$$.fragment,f),C(uF.$$.fragment,f),C(W8.$$.fragment,f),C(Q8.$$.fragment,f),C(U8.$$.fragment,f),C(bF.$$.fragment,f),C(J8.$$.fragment,f),C(TF.$$.fragment,f),C(Y8.$$.fragment,f),C(K8.$$.fragment,f),C(e9.$$.fragment,f),C(EF.$$.fragment,f),C(o9.$$.fragment,f),C(xF.$$.fragment,f),C(r9.$$.fragment,f),C(t9.$$.fragment,f),C(n9.$$.fragment,f),C(kF.$$.fragment,f),C(s9.$$.fragment,f),C(PF.$$.fragment,f),C(l9.$$.fragment,f),C(i9.$$.fragment,f),C(c9.$$.fragment,f),C(IF.$$.fragment,f),C(f9.$$.fragment,f),C($6.$$.fragment,f),C(m9.$$.fragment,f),C(g9.$$.fragment,f),C(p9.$$.fragment,f),C(S6.$$.fragment,f),C(u9.$$.fragment,f),C(rT.$$.fragment,f),C(_9.$$.fragment,f),C(b9.$$.fragment,f),C(F9.$$.fragment,f),C(aT.$$.fragment,f),C(T9.$$.fragment,f),C(vT.$$.fragment,f),C(M9.$$.fragment,f),C(E9.$$.fragment,f),C(w9.$$.fragment,f),C(TT.$$.fragment,f),C(A9.$$.fragment,f),C(AT.$$.fragment,f),C(L9.$$.fragment,f),C(y9.$$.fragment,f),C($9.$$.fragment,f),C(yT.$$.fragment,f),C(k9.$$.fragment,f),C(UT.$$.fragment,f),C(S9.$$.fragment,f),C(R9.$$.fragment,f),C(B9.$$.fragment,f),C(YT.$$.fragment,f),C(I9.$$.fragment,f),C(iM.$$.fragment,f),C(N9.$$.fragment,f),C(q9.$$.fragment,f),C(D9.$$.fragment,f),C(cM.$$.fragment,f),C(G9.$$.fragment,f),C(NM.$$.fragment,f),C(O9.$$.fragment,f),C(V9.$$.fragment,f),C(z9.$$.fragment,f),C(jM.$$.fragment,f),C(W9.$$.fragment,f),C(tE.$$.fragment,f),C(Q9.$$.fragment,f),C(H9.$$.fragment,f),C(J9.$$.fragment,f),C(nE.$$.fragment,f),C(Y9.$$.fragment,f),C(iE.$$.fragment,f),C(Z9.$$.fragment,f),C(ex.$$.fragment,f),C(rx.$$.fragment,f),C(cE.$$.fragment,f),C(tx.$$.fragment,f),C(mE.$$.fragment,f),C(ax.$$.fragment,f),C(nx.$$.fragment,f),C(lx.$$.fragment,f),C(hE.$$.fragment,f),C(ix.$$.fragment,f),C(BE.$$.fragment,f),C(dx.$$.fragment,f),C(cx.$$.fragment,f),C(mx.$$.fragment,f),C(NE.$$.fragment,f),C(gx.$$.fragment,f),C(aC.$$.fragment,f),C(hx.$$.fragment,f),C(px.$$.fragment,f),C(_x.$$.fragment,f),C(sC.$$.fragment,f),C(bx.$$.fragment,f),C(iC.$$.fragment,f),C(vx.$$.fragment,f),C(Fx.$$.fragment,f),C(Mx.$$.fragment,f),C(cC.$$.fragment,f),C(Ex.$$.fragment,f),C(mC.$$.fragment,f),C(Cx.$$.fragment,f),C(wx.$$.fragment,f),C(Lx.$$.fragment,f),C(hC.$$.fragment,f),C(yx.$$.fragment,f),C(OC.$$.fragment,f),C(xx.$$.fragment,f),C($x.$$.fragment,f),C(Sx.$$.fragment,f),C(XC.$$.fragment,f),C(Rx.$$.fragment,f),C(o0.$$.fragment,f),C(Px.$$.fragment,f),C(Bx.$$.fragment,f),C(Nx.$$.fragment,f),C(t0.$$.fragment,f),C(qx.$$.fragment,f),C(_0.$$.fragment,f),C(jx.$$.fragment,f),C(Dx.$$.fragment,f),C(Ox.$$.fragment,f),C(v0.$$.fragment,f),C(Vx.$$.fragment,f),C($0.$$.fragment,f),C(Xx.$$.fragment,f),C(zx.$$.fragment,f),C(Qx.$$.fragment,f),C(S0.$$.fragment,f),C(Hx.$$.fragment,f),C(V0.$$.fragment,f),C(Ux.$$.fragment,f),C(Jx.$$.fragment,f),C(Kx.$$.fragment,f),C(z0.$$.fragment,f),C(Zx.$$.fragment,f),C(rw.$$.fragment,f),C(e$.$$.fragment,f),C(o$.$$.fragment,f),C(t$.$$.fragment,f),C(aw.$$.fragment,f),C(a$.$$.fragment,f),C(pw.$$.fragment,f),C(n$.$$.fragment,f),C(s$.$$.fragment,f),C(i$.$$.fragment,f),C(_w.$$.fragment,f),C(d$.$$.fragment,f),C(Aw.$$.fragment,f),C(c$.$$.fragment,f),C(f$.$$.fragment,f),C(g$.$$.fragment,f),C(yw.$$.fragment,f),C(h$.$$.fragment,f),C(Nw.$$.fragment,f),C(p$.$$.fragment,f),C(u$.$$.fragment,f),C(b$.$$.fragment,f),C(jw.$$.fragment,f),C(v$.$$.fragment,f),C(Gw.$$.fragment,f),C(F$.$$.fragment,f),C(T$.$$.fragment,f),C(E$.$$.fragment,f),C(Vw.$$.fragment,f),C(C$.$$.fragment,f),C(Ww.$$.fragment,f),C(A$.$$.fragment,f),C(L$.$$.fragment,f),C(x$.$$.fragment,f),C(Hw.$$.fragment,f),C($$.$$.fragment,f),C(Jw.$$.fragment,f),fVe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(Lf),f&&t(at),f&&t(Oe),f&&t(We),f&&t(xf),w(ya,f),f&&t(Qe),f&&t(Ae),f&&t(Co),f&&t(xa),f&&t(sGe),f&&t(Li),w(Ty),f&&t(lGe),f&&t(In),f&&t(iGe),w(My,f),f&&t(dGe),f&&t(Kk),f&&t(cGe),w(Sf,f),f&&t(fGe),f&&t(yi),w(Ey),f&&t(mGe),f&&t(wo),w(Cy),w(Ly),w(jg),w(yy),f&&t(gGe),f&&t($i),w(xy),f&&t(hGe),f&&t(Ao),w($y),w(Ry),w(Th),w(Py),f&&t(pGe),f&&t(ki),w(By),f&&t(uGe),f&&t(Lo),w(Iy),w(jy),w(rp),w(tp),w(Dy),f&&t(_Ge),f&&t(Si),w(Gy),f&&t(bGe),f&&t(yo),w(Oy),w(zy),w(Ep),w(Cp),w(Wy),f&&t(vGe),f&&t(Pi),w(Qy),f&&t(FGe),f&&t(xo),w(Hy),w(Jy),w(Lp),w(Yy),w(A_),f&&t(TGe),f&&t(Ni),w(Ky),f&&t(MGe),f&&t($o),w(Zy),w(o7),w(y_),w(r7),w(v1),f&&t(EGe),f&&t(Di),w(t7),f&&t(CGe),f&&t(ko),w(a7),w(s7),w(T1),w(l7),w(l2),f&&t(wGe),f&&t(Vi),w(i7),f&&t(AGe),f&&t(So),w(d7),w(f7),w(d2),w(m7),w(Q2),f&&t(LGe),f&&t(Wi),w(g7),f&&t(yGe),f&&t(Ro),w(h7),w(u7),w(U2),w(_7),w(hb),f&&t(xGe),f&&t(Ui),w(b7),f&&t($Ge),f&&t(Po),w(v7),w(T7),w(ub),w(M7),w(m4),f&&t(kGe),f&&t(Ki),w(E7),f&&t(SGe),f&&t(Bo),w(C7),w(A7),w(h4),w(L7),w(z4),f&&t(RGe),f&&t(od),w(y7),f&&t(PGe),f&&t(Io),w(x7),w(k7),w(Q4),w(S7),w(e5),f&&t(BGe),f&&t(ad),w(R7),f&&t(IGe),f&&t(No),w(P7),w(I7),w(r5),w(N7),w(j5),f&&t(NGe),f&&t(ld),w(q7),f&&t(qGe),f&&t(qo),w(j7),w(G7),w(G5),w(O7),w(xv),f&&t(jGe),f&&t(cd),w(V7),f&&t(DGe),f&&t(jo),w(X7),w(W7),w(kv),w(Q7),w(Pv),f&&t(GGe),f&&t(gd),w(H7),f&&t(OGe),f&&t(Do),w(U7),w(Y7),w(Iv),w(K7),w(Jv),f&&t(VGe),f&&t(ud),w(Z7),f&&t(XGe),f&&t(Go),w(e8),w(r8),w(Kv),w(t8),w(o3),f&&t(zGe),f&&t(vd),w(a8),f&&t(WGe),f&&t(Oo),w(n8),w(l8),w(t3),w(i8),w(s3),f&&t(QGe),f&&t(Md),w(d8),f&&t(HGe),f&&t(Vo),w(c8),w(m8),w(i3),w(g8),w(v3),f&&t(UGe),f&&t(wd),w(h8),f&&t(JGe),f&&t(Xo),w(p8),w(_8),w(T3),w(b8),w(y3),f&&t(YGe),f&&t(yd),w(v8),f&&t(KGe),f&&t(zo),w(F8),w(M8),w($3),w(E8),w(O3),f&&t(ZGe),f&&t(kd),w(C8),f&&t(eOe),f&&t(Wo),w(w8),w(L8),w(X3),w(y8),w(H3),f&&t(oOe),f&&t(Pd),w($8),f&&t(rOe),f&&t(Qo),w(k8),w(R8),w(J3),w(P8),w(tF),f&&t(tOe),f&&t(Nd),w(B8),f&&t(aOe),f&&t(Ho),w(I8),w(q8),w(nF),w(j8),w(cF),f&&t(nOe),f&&t(Gd),w(D8),f&&t(sOe),f&&t(Uo),w(G8),w(V8),w(mF),w(X8),w(uF),f&&t(lOe),f&&t(Xd),w(W8),f&&t(iOe),f&&t(Jo),w(Q8),w(U8),w(bF),w(J8),w(TF),f&&t(dOe),f&&t(Qd),w(Y8),f&&t(cOe),f&&t(Yo),w(K8),w(e9),w(EF),w(o9),w(xF),f&&t(fOe),f&&t(Jd),w(r9),f&&t(mOe),f&&t(Ko),w(t9),w(n9),w(kF),w(s9),w(PF),f&&t(gOe),f&&t(Zd),w(l9),f&&t(hOe),f&&t(Zo),w(i9),w(c9),w(IF),w(f9),w($6),f&&t(pOe),f&&t(rc),w(m9),f&&t(uOe),f&&t(er),w(g9),w(p9),w(S6),w(u9),w(rT),f&&t(_Oe),f&&t(nc),w(_9),f&&t(bOe),f&&t(or),w(b9),w(F9),w(aT),w(T9),w(vT),f&&t(vOe),f&&t(ic),w(M9),f&&t(FOe),f&&t(rr),w(E9),w(w9),w(TT),w(A9),w(AT),f&&t(TOe),f&&t(fc),w(L9),f&&t(MOe),f&&t(tr),w(y9),w($9),w(yT),w(k9),w(UT),f&&t(EOe),f&&t(hc),w(S9),f&&t(COe),f&&t(ar),w(R9),w(B9),w(YT),w(I9),w(iM),f&&t(wOe),f&&t(_c),w(N9),f&&t(AOe),f&&t(nr),w(q9),w(D9),w(cM),w(G9),w(NM),f&&t(LOe),f&&t(Fc),w(O9),f&&t(yOe),f&&t(sr),w(V9),w(z9),w(jM),w(W9),w(tE),f&&t(xOe),f&&t(Ec),w(Q9),f&&t($Oe),f&&t(lr),w(H9),w(J9),w(nE),w(Y9),w(iE),f&&t(kOe),f&&t(Ac),w(Z9),f&&t(SOe),f&&t(ir),w(ex),w(rx),w(cE),w(tx),w(mE),f&&t(ROe),f&&t(xc),w(ax),f&&t(POe),f&&t(dr),w(nx),w(lx),w(hE),w(ix),w(BE),f&&t(BOe),f&&t(Sc),w(dx),f&&t(IOe),f&&t(cr),w(cx),w(mx),w(NE),w(gx),w(aC),f&&t(NOe),f&&t(Bc),w(hx),f&&t(qOe),f&&t(fr),w(px),w(_x),w(sC),w(bx),w(iC),f&&t(jOe),f&&t(qc),w(vx),f&&t(DOe),f&&t(mr),w(Fx),w(Mx),w(cC),w(Ex),w(mC),f&&t(GOe),f&&t(Gc),w(Cx),f&&t(OOe),f&&t(gr),w(wx),w(Lx),w(hC),w(yx),w(OC),f&&t(VOe),f&&t(Xc),w(xx),f&&t(XOe),f&&t(hr),w($x),w(Sx),w(XC),w(Rx),w(o0),f&&t(zOe),f&&t(Qc),w(Px),f&&t(WOe),f&&t(pr),w(Bx),w(Nx),w(t0),w(qx),w(_0),f&&t(QOe),f&&t(Jc),w(jx),f&&t(HOe),f&&t(ur),w(Dx),w(Ox),w(v0),w(Vx),w($0),f&&t(UOe),f&&t(Zc),w(Xx),f&&t(JOe),f&&t(_r),w(zx),w(Qx),w(S0),w(Hx),w(V0),f&&t(YOe),f&&t(rf),w(Ux),f&&t(KOe),f&&t(br),w(Jx),w(Kx),w(z0),w(Zx),w(rw),f&&t(ZOe),f&&t(nf),w(e$),f&&t(eVe),f&&t(vr),w(o$),w(t$),w(aw),w(a$),w(pw),f&&t(oVe),f&&t(df),w(n$),f&&t(rVe),f&&t(Fr),w(s$),w(i$),w(_w),w(d$),w(Aw),f&&t(tVe),f&&t(mf),w(c$),f&&t(aVe),f&&t(Tr),w(f$),w(g$),w(yw),w(h$),w(Nw),f&&t(nVe),f&&t(pf),w(p$),f&&t(sVe),f&&t(Mr),w(u$),w(b$),w(jw),w(v$),w(Gw),f&&t(lVe),f&&t(bf),w(F$),f&&t(iVe),f&&t(Er),w(T$),w(E$),w(Vw),w(C$),w(Ww),f&&t(dVe),f&&t(Tf),w(A$),f&&t(cVe),f&&t(Cr),w(L$),w(x$),w(Hw),w($$),w(Jw)}}}const DDt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function GDt(y){return jqt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class HDt extends Bqt{constructor(g){super();Iqt(this,g,GDt,jDt,Nqt,{})}}export{HDt as default,DDt as metadata};
